
pNav32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021258  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001860  080213e8  080213e8  000223e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022c48  08022c48  00024c4c  2**0
                  CONTENTS
  4 .ARM          00000008  08022c48  08022c48  00023c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022c50  08022c50  00024c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  08022c50  08022c50  00023c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022c70  08022c70  00023c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000c4c  20000000  08022c74  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00024c4c  2**0
                  CONTENTS
 10 .bss          00015ac4  20000c50  20000c50  00024c50  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20016714  20016714  00024c50  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00024c4c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00033245  00000000  00000000  00024c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007d3c  00000000  00000000  00057ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002800  00000000  00000000  0005fc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e99  00000000  00000000  00062400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f49f  00000000  00000000  00064299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000369ad  00000000  00000000  00093738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb487  00000000  00000000  000ca0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000076  00000000  00000000  001c556c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b4a8  00000000  00000000  001c55e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  001d0a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000c50 	.word	0x20000c50
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080213d0 	.word	0x080213d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000c54 	.word	0x20000c54
 80001cc:	080213d0 	.word	0x080213d0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2f>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000620:	bf24      	itt	cs
 8000622:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000626:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800062a:	d90d      	bls.n	8000648 <__aeabi_d2f+0x30>
 800062c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000630:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000634:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000638:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800063c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000640:	bf08      	it	eq
 8000642:	f020 0001 	biceq.w	r0, r0, #1
 8000646:	4770      	bx	lr
 8000648:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800064c:	d121      	bne.n	8000692 <__aeabi_d2f+0x7a>
 800064e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000652:	bfbc      	itt	lt
 8000654:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000658:	4770      	bxlt	lr
 800065a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000662:	f1c2 0218 	rsb	r2, r2, #24
 8000666:	f1c2 0c20 	rsb	ip, r2, #32
 800066a:	fa10 f30c 	lsls.w	r3, r0, ip
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	bf18      	it	ne
 8000674:	f040 0001 	orrne.w	r0, r0, #1
 8000678:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800067c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000680:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000684:	ea40 000c 	orr.w	r0, r0, ip
 8000688:	fa23 f302 	lsr.w	r3, r3, r2
 800068c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000690:	e7cc      	b.n	800062c <__aeabi_d2f+0x14>
 8000692:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000696:	d107      	bne.n	80006a8 <__aeabi_d2f+0x90>
 8000698:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800069c:	bf1e      	ittt	ne
 800069e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80006a2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80006a6:	4770      	bxne	lr
 80006a8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80006ac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80006b0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__aeabi_ldivmod>:
 80006b8:	b97b      	cbnz	r3, 80006da <__aeabi_ldivmod+0x22>
 80006ba:	b972      	cbnz	r2, 80006da <__aeabi_ldivmod+0x22>
 80006bc:	2900      	cmp	r1, #0
 80006be:	bfbe      	ittt	lt
 80006c0:	2000      	movlt	r0, #0
 80006c2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80006c6:	e006      	blt.n	80006d6 <__aeabi_ldivmod+0x1e>
 80006c8:	bf08      	it	eq
 80006ca:	2800      	cmpeq	r0, #0
 80006cc:	bf1c      	itt	ne
 80006ce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80006d2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80006d6:	f000 b9b5 	b.w	8000a44 <__aeabi_idiv0>
 80006da:	f1ad 0c08 	sub.w	ip, sp, #8
 80006de:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e2:	2900      	cmp	r1, #0
 80006e4:	db09      	blt.n	80006fa <__aeabi_ldivmod+0x42>
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	db1a      	blt.n	8000720 <__aeabi_ldivmod+0x68>
 80006ea:	f000 f84d 	bl	8000788 <__udivmoddi4>
 80006ee:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f6:	b004      	add	sp, #16
 80006f8:	4770      	bx	lr
 80006fa:	4240      	negs	r0, r0
 80006fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000700:	2b00      	cmp	r3, #0
 8000702:	db1b      	blt.n	800073c <__aeabi_ldivmod+0x84>
 8000704:	f000 f840 	bl	8000788 <__udivmoddi4>
 8000708:	f8dd e004 	ldr.w	lr, [sp, #4]
 800070c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000710:	b004      	add	sp, #16
 8000712:	4240      	negs	r0, r0
 8000714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000718:	4252      	negs	r2, r2
 800071a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800071e:	4770      	bx	lr
 8000720:	4252      	negs	r2, r2
 8000722:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000726:	f000 f82f 	bl	8000788 <__udivmoddi4>
 800072a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800072e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000732:	b004      	add	sp, #16
 8000734:	4240      	negs	r0, r0
 8000736:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800073a:	4770      	bx	lr
 800073c:	4252      	negs	r2, r2
 800073e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000742:	f000 f821 	bl	8000788 <__udivmoddi4>
 8000746:	f8dd e004 	ldr.w	lr, [sp, #4]
 800074a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800074e:	b004      	add	sp, #16
 8000750:	4252      	negs	r2, r2
 8000752:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000756:	4770      	bx	lr

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000768:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800076c:	f000 b96a 	b.w	8000a44 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f806 	bl	8000788 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__udivmoddi4>:
 8000788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800078c:	9d08      	ldr	r5, [sp, #32]
 800078e:	460c      	mov	r4, r1
 8000790:	2b00      	cmp	r3, #0
 8000792:	d14e      	bne.n	8000832 <__udivmoddi4+0xaa>
 8000794:	4694      	mov	ip, r2
 8000796:	458c      	cmp	ip, r1
 8000798:	4686      	mov	lr, r0
 800079a:	fab2 f282 	clz	r2, r2
 800079e:	d962      	bls.n	8000866 <__udivmoddi4+0xde>
 80007a0:	b14a      	cbz	r2, 80007b6 <__udivmoddi4+0x2e>
 80007a2:	f1c2 0320 	rsb	r3, r2, #32
 80007a6:	4091      	lsls	r1, r2
 80007a8:	fa20 f303 	lsr.w	r3, r0, r3
 80007ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80007b0:	4319      	orrs	r1, r3
 80007b2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ba:	fa1f f68c 	uxth.w	r6, ip
 80007be:	fbb1 f4f7 	udiv	r4, r1, r7
 80007c2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007c6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ce:	fb04 f106 	mul.w	r1, r4, r6
 80007d2:	4299      	cmp	r1, r3
 80007d4:	d90a      	bls.n	80007ec <__udivmoddi4+0x64>
 80007d6:	eb1c 0303 	adds.w	r3, ip, r3
 80007da:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80007de:	f080 8112 	bcs.w	8000a06 <__udivmoddi4+0x27e>
 80007e2:	4299      	cmp	r1, r3
 80007e4:	f240 810f 	bls.w	8000a06 <__udivmoddi4+0x27e>
 80007e8:	3c02      	subs	r4, #2
 80007ea:	4463      	add	r3, ip
 80007ec:	1a59      	subs	r1, r3, r1
 80007ee:	fa1f f38e 	uxth.w	r3, lr
 80007f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007f6:	fb07 1110 	mls	r1, r7, r0, r1
 80007fa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007fe:	fb00 f606 	mul.w	r6, r0, r6
 8000802:	429e      	cmp	r6, r3
 8000804:	d90a      	bls.n	800081c <__udivmoddi4+0x94>
 8000806:	eb1c 0303 	adds.w	r3, ip, r3
 800080a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800080e:	f080 80fc 	bcs.w	8000a0a <__udivmoddi4+0x282>
 8000812:	429e      	cmp	r6, r3
 8000814:	f240 80f9 	bls.w	8000a0a <__udivmoddi4+0x282>
 8000818:	4463      	add	r3, ip
 800081a:	3802      	subs	r0, #2
 800081c:	1b9b      	subs	r3, r3, r6
 800081e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000822:	2100      	movs	r1, #0
 8000824:	b11d      	cbz	r5, 800082e <__udivmoddi4+0xa6>
 8000826:	40d3      	lsrs	r3, r2
 8000828:	2200      	movs	r2, #0
 800082a:	e9c5 3200 	strd	r3, r2, [r5]
 800082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000832:	428b      	cmp	r3, r1
 8000834:	d905      	bls.n	8000842 <__udivmoddi4+0xba>
 8000836:	b10d      	cbz	r5, 800083c <__udivmoddi4+0xb4>
 8000838:	e9c5 0100 	strd	r0, r1, [r5]
 800083c:	2100      	movs	r1, #0
 800083e:	4608      	mov	r0, r1
 8000840:	e7f5      	b.n	800082e <__udivmoddi4+0xa6>
 8000842:	fab3 f183 	clz	r1, r3
 8000846:	2900      	cmp	r1, #0
 8000848:	d146      	bne.n	80008d8 <__udivmoddi4+0x150>
 800084a:	42a3      	cmp	r3, r4
 800084c:	d302      	bcc.n	8000854 <__udivmoddi4+0xcc>
 800084e:	4290      	cmp	r0, r2
 8000850:	f0c0 80f0 	bcc.w	8000a34 <__udivmoddi4+0x2ac>
 8000854:	1a86      	subs	r6, r0, r2
 8000856:	eb64 0303 	sbc.w	r3, r4, r3
 800085a:	2001      	movs	r0, #1
 800085c:	2d00      	cmp	r5, #0
 800085e:	d0e6      	beq.n	800082e <__udivmoddi4+0xa6>
 8000860:	e9c5 6300 	strd	r6, r3, [r5]
 8000864:	e7e3      	b.n	800082e <__udivmoddi4+0xa6>
 8000866:	2a00      	cmp	r2, #0
 8000868:	f040 8090 	bne.w	800098c <__udivmoddi4+0x204>
 800086c:	eba1 040c 	sub.w	r4, r1, ip
 8000870:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000874:	fa1f f78c 	uxth.w	r7, ip
 8000878:	2101      	movs	r1, #1
 800087a:	fbb4 f6f8 	udiv	r6, r4, r8
 800087e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000882:	fb08 4416 	mls	r4, r8, r6, r4
 8000886:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800088a:	fb07 f006 	mul.w	r0, r7, r6
 800088e:	4298      	cmp	r0, r3
 8000890:	d908      	bls.n	80008a4 <__udivmoddi4+0x11c>
 8000892:	eb1c 0303 	adds.w	r3, ip, r3
 8000896:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800089a:	d202      	bcs.n	80008a2 <__udivmoddi4+0x11a>
 800089c:	4298      	cmp	r0, r3
 800089e:	f200 80cd 	bhi.w	8000a3c <__udivmoddi4+0x2b4>
 80008a2:	4626      	mov	r6, r4
 80008a4:	1a1c      	subs	r4, r3, r0
 80008a6:	fa1f f38e 	uxth.w	r3, lr
 80008aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ae:	fb08 4410 	mls	r4, r8, r0, r4
 80008b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008b6:	fb00 f707 	mul.w	r7, r0, r7
 80008ba:	429f      	cmp	r7, r3
 80008bc:	d908      	bls.n	80008d0 <__udivmoddi4+0x148>
 80008be:	eb1c 0303 	adds.w	r3, ip, r3
 80008c2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80008c6:	d202      	bcs.n	80008ce <__udivmoddi4+0x146>
 80008c8:	429f      	cmp	r7, r3
 80008ca:	f200 80b0 	bhi.w	8000a2e <__udivmoddi4+0x2a6>
 80008ce:	4620      	mov	r0, r4
 80008d0:	1bdb      	subs	r3, r3, r7
 80008d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008d6:	e7a5      	b.n	8000824 <__udivmoddi4+0x9c>
 80008d8:	f1c1 0620 	rsb	r6, r1, #32
 80008dc:	408b      	lsls	r3, r1
 80008de:	fa22 f706 	lsr.w	r7, r2, r6
 80008e2:	431f      	orrs	r7, r3
 80008e4:	fa20 fc06 	lsr.w	ip, r0, r6
 80008e8:	fa04 f301 	lsl.w	r3, r4, r1
 80008ec:	ea43 030c 	orr.w	r3, r3, ip
 80008f0:	40f4      	lsrs	r4, r6
 80008f2:	fa00 f801 	lsl.w	r8, r0, r1
 80008f6:	0c38      	lsrs	r0, r7, #16
 80008f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008fc:	fbb4 fef0 	udiv	lr, r4, r0
 8000900:	fa1f fc87 	uxth.w	ip, r7
 8000904:	fb00 441e 	mls	r4, r0, lr, r4
 8000908:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800090c:	fb0e f90c 	mul.w	r9, lr, ip
 8000910:	45a1      	cmp	r9, r4
 8000912:	fa02 f201 	lsl.w	r2, r2, r1
 8000916:	d90a      	bls.n	800092e <__udivmoddi4+0x1a6>
 8000918:	193c      	adds	r4, r7, r4
 800091a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800091e:	f080 8084 	bcs.w	8000a2a <__udivmoddi4+0x2a2>
 8000922:	45a1      	cmp	r9, r4
 8000924:	f240 8081 	bls.w	8000a2a <__udivmoddi4+0x2a2>
 8000928:	f1ae 0e02 	sub.w	lr, lr, #2
 800092c:	443c      	add	r4, r7
 800092e:	eba4 0409 	sub.w	r4, r4, r9
 8000932:	fa1f f983 	uxth.w	r9, r3
 8000936:	fbb4 f3f0 	udiv	r3, r4, r0
 800093a:	fb00 4413 	mls	r4, r0, r3, r4
 800093e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000942:	fb03 fc0c 	mul.w	ip, r3, ip
 8000946:	45a4      	cmp	ip, r4
 8000948:	d907      	bls.n	800095a <__udivmoddi4+0x1d2>
 800094a:	193c      	adds	r4, r7, r4
 800094c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000950:	d267      	bcs.n	8000a22 <__udivmoddi4+0x29a>
 8000952:	45a4      	cmp	ip, r4
 8000954:	d965      	bls.n	8000a22 <__udivmoddi4+0x29a>
 8000956:	3b02      	subs	r3, #2
 8000958:	443c      	add	r4, r7
 800095a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800095e:	fba0 9302 	umull	r9, r3, r0, r2
 8000962:	eba4 040c 	sub.w	r4, r4, ip
 8000966:	429c      	cmp	r4, r3
 8000968:	46ce      	mov	lr, r9
 800096a:	469c      	mov	ip, r3
 800096c:	d351      	bcc.n	8000a12 <__udivmoddi4+0x28a>
 800096e:	d04e      	beq.n	8000a0e <__udivmoddi4+0x286>
 8000970:	b155      	cbz	r5, 8000988 <__udivmoddi4+0x200>
 8000972:	ebb8 030e 	subs.w	r3, r8, lr
 8000976:	eb64 040c 	sbc.w	r4, r4, ip
 800097a:	fa04 f606 	lsl.w	r6, r4, r6
 800097e:	40cb      	lsrs	r3, r1
 8000980:	431e      	orrs	r6, r3
 8000982:	40cc      	lsrs	r4, r1
 8000984:	e9c5 6400 	strd	r6, r4, [r5]
 8000988:	2100      	movs	r1, #0
 800098a:	e750      	b.n	800082e <__udivmoddi4+0xa6>
 800098c:	f1c2 0320 	rsb	r3, r2, #32
 8000990:	fa20 f103 	lsr.w	r1, r0, r3
 8000994:	fa0c fc02 	lsl.w	ip, ip, r2
 8000998:	fa24 f303 	lsr.w	r3, r4, r3
 800099c:	4094      	lsls	r4, r2
 800099e:	430c      	orrs	r4, r1
 80009a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009a8:	fa1f f78c 	uxth.w	r7, ip
 80009ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80009b0:	fb08 3110 	mls	r1, r8, r0, r3
 80009b4:	0c23      	lsrs	r3, r4, #16
 80009b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009ba:	fb00 f107 	mul.w	r1, r0, r7
 80009be:	4299      	cmp	r1, r3
 80009c0:	d908      	bls.n	80009d4 <__udivmoddi4+0x24c>
 80009c2:	eb1c 0303 	adds.w	r3, ip, r3
 80009c6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80009ca:	d22c      	bcs.n	8000a26 <__udivmoddi4+0x29e>
 80009cc:	4299      	cmp	r1, r3
 80009ce:	d92a      	bls.n	8000a26 <__udivmoddi4+0x29e>
 80009d0:	3802      	subs	r0, #2
 80009d2:	4463      	add	r3, ip
 80009d4:	1a5b      	subs	r3, r3, r1
 80009d6:	b2a4      	uxth	r4, r4
 80009d8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009dc:	fb08 3311 	mls	r3, r8, r1, r3
 80009e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009e4:	fb01 f307 	mul.w	r3, r1, r7
 80009e8:	42a3      	cmp	r3, r4
 80009ea:	d908      	bls.n	80009fe <__udivmoddi4+0x276>
 80009ec:	eb1c 0404 	adds.w	r4, ip, r4
 80009f0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80009f4:	d213      	bcs.n	8000a1e <__udivmoddi4+0x296>
 80009f6:	42a3      	cmp	r3, r4
 80009f8:	d911      	bls.n	8000a1e <__udivmoddi4+0x296>
 80009fa:	3902      	subs	r1, #2
 80009fc:	4464      	add	r4, ip
 80009fe:	1ae4      	subs	r4, r4, r3
 8000a00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a04:	e739      	b.n	800087a <__udivmoddi4+0xf2>
 8000a06:	4604      	mov	r4, r0
 8000a08:	e6f0      	b.n	80007ec <__udivmoddi4+0x64>
 8000a0a:	4608      	mov	r0, r1
 8000a0c:	e706      	b.n	800081c <__udivmoddi4+0x94>
 8000a0e:	45c8      	cmp	r8, r9
 8000a10:	d2ae      	bcs.n	8000970 <__udivmoddi4+0x1e8>
 8000a12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a1a:	3801      	subs	r0, #1
 8000a1c:	e7a8      	b.n	8000970 <__udivmoddi4+0x1e8>
 8000a1e:	4631      	mov	r1, r6
 8000a20:	e7ed      	b.n	80009fe <__udivmoddi4+0x276>
 8000a22:	4603      	mov	r3, r0
 8000a24:	e799      	b.n	800095a <__udivmoddi4+0x1d2>
 8000a26:	4630      	mov	r0, r6
 8000a28:	e7d4      	b.n	80009d4 <__udivmoddi4+0x24c>
 8000a2a:	46d6      	mov	lr, sl
 8000a2c:	e77f      	b.n	800092e <__udivmoddi4+0x1a6>
 8000a2e:	4463      	add	r3, ip
 8000a30:	3802      	subs	r0, #2
 8000a32:	e74d      	b.n	80008d0 <__udivmoddi4+0x148>
 8000a34:	4606      	mov	r6, r0
 8000a36:	4623      	mov	r3, r4
 8000a38:	4608      	mov	r0, r1
 8000a3a:	e70f      	b.n	800085c <__udivmoddi4+0xd4>
 8000a3c:	3e02      	subs	r6, #2
 8000a3e:	4463      	add	r3, ip
 8000a40:	e730      	b.n	80008a4 <__udivmoddi4+0x11c>
 8000a42:	bf00      	nop

08000a44 <__aeabi_idiv0>:
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a4e:	463b      	mov	r3, r7
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a5a:	4b48      	ldr	r3, [pc, #288]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000a5c:	4a48      	ldr	r2, [pc, #288]	@ (8000b80 <MX_ADC1_Init+0x138>)
 8000a5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000a60:	4b46      	ldr	r3, [pc, #280]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000a62:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a68:	4b44      	ldr	r3, [pc, #272]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a6e:	4b43      	ldr	r3, [pc, #268]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a74:	4b41      	ldr	r3, [pc, #260]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a7a:	4b40      	ldr	r3, [pc, #256]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a82:	4b3e      	ldr	r3, [pc, #248]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a88:	4b3c      	ldr	r3, [pc, #240]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000a8a:	4a3e      	ldr	r2, [pc, #248]	@ (8000b84 <MX_ADC1_Init+0x13c>)
 8000a8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8000a94:	4b39      	ldr	r3, [pc, #228]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000a96:	2206      	movs	r2, #6
 8000a98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a9a:	4b38      	ldr	r3, [pc, #224]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000aa2:	4b36      	ldr	r3, [pc, #216]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aa8:	4834      	ldr	r0, [pc, #208]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000aaa:	f003 f935 	bl	8003d18 <HAL_ADC_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ab4:	f001 fd82 	bl	80025bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	482c      	ldr	r0, [pc, #176]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000aca:	f003 fa83 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ad4:	f001 fd72 	bl	80025bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4825      	ldr	r0, [pc, #148]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000ae6:	f003 fa75 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000af0:	f001 fd64 	bl	80025bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000af4:	2304      	movs	r3, #4
 8000af6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000af8:	2303      	movs	r3, #3
 8000afa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000afc:	463b      	mov	r3, r7
 8000afe:	4619      	mov	r1, r3
 8000b00:	481e      	ldr	r0, [pc, #120]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000b02:	f003 fa67 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000b0c:	f001 fd56 	bl	80025bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b10:	2310      	movs	r3, #16
 8000b12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000b14:	2304      	movs	r3, #4
 8000b16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4817      	ldr	r0, [pc, #92]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000b1e:	f003 fa59 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000b28:	f001 fd48 	bl	80025bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000b2c:	2311      	movs	r3, #17
 8000b2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000b30:	2305      	movs	r3, #5
 8000b32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	4619      	mov	r1, r3
 8000b38:	4810      	ldr	r0, [pc, #64]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000b3a:	f003 fa4b 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000b44:	f001 fd3a 	bl	80025bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8000b48:	2312      	movs	r3, #18
 8000b4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000b4c:	2306      	movs	r3, #6
 8000b4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b50:	463b      	mov	r3, r7
 8000b52:	4619      	mov	r1, r3
 8000b54:	4809      	ldr	r0, [pc, #36]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000b56:	f003 fa3d 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000b60:	f001 fd2c 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)bufferAdc1Dma, hadc1.Init.NbrOfConversion);
 8000b64:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000b66:	69db      	ldr	r3, [r3, #28]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4907      	ldr	r1, [pc, #28]	@ (8000b88 <MX_ADC1_Init+0x140>)
 8000b6c:	4803      	ldr	r0, [pc, #12]	@ (8000b7c <MX_ADC1_Init+0x134>)
 8000b6e:	f003 f917 	bl	8003da0 <HAL_ADC_Start_DMA>
  /* USER CODE END ADC1_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000c6c 	.word	0x20000c6c
 8000b80:	40012000 	.word	0x40012000
 8000b84:	0f000001 	.word	0x0f000001
 8000b88:	2000afb0 	.word	0x2000afb0

08000b8c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000b9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c50 <MX_ADC3_Init+0xc4>)
 8000ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8000c54 <MX_ADC3_Init+0xc8>)
 8000ba2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c50 <MX_ADC3_Init+0xc4>)
 8000ba6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000baa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000bac:	4b28      	ldr	r3, [pc, #160]	@ (8000c50 <MX_ADC3_Init+0xc4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8000bb2:	4b27      	ldr	r3, [pc, #156]	@ (8000c50 <MX_ADC3_Init+0xc4>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000bb8:	4b25      	ldr	r3, [pc, #148]	@ (8000c50 <MX_ADC3_Init+0xc4>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bbe:	4b24      	ldr	r3, [pc, #144]	@ (8000c50 <MX_ADC3_Init+0xc4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bc6:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <MX_ADC3_Init+0xc4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bcc:	4b20      	ldr	r3, [pc, #128]	@ (8000c50 <MX_ADC3_Init+0xc4>)
 8000bce:	4a22      	ldr	r2, [pc, #136]	@ (8000c58 <MX_ADC3_Init+0xcc>)
 8000bd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <MX_ADC3_Init+0xc4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <MX_ADC3_Init+0xc4>)
 8000bda:	2202      	movs	r2, #2
 8000bdc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <MX_ADC3_Init+0xc4>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <MX_ADC3_Init+0xc4>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000bec:	4818      	ldr	r0, [pc, #96]	@ (8000c50 <MX_ADC3_Init+0xc4>)
 8000bee:	f003 f893 	bl	8003d18 <HAL_ADC_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000bf8:	f001 fce0 	bl	80025bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bfc:	230a      	movs	r3, #10
 8000bfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c08:	463b      	mov	r3, r7
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4810      	ldr	r0, [pc, #64]	@ (8000c50 <MX_ADC3_Init+0xc4>)
 8000c0e:	f003 f9e1 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000c18:	f001 fcd0 	bl	80025bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c1c:	230b      	movs	r3, #11
 8000c1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000c20:	2302      	movs	r3, #2
 8000c22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c24:	463b      	mov	r3, r7
 8000c26:	4619      	mov	r1, r3
 8000c28:	4809      	ldr	r0, [pc, #36]	@ (8000c50 <MX_ADC3_Init+0xc4>)
 8000c2a:	f003 f9d3 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000c34:	f001 fcc2 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)bufferAdc3Dma, hadc3.Init.NbrOfConversion);
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <MX_ADC3_Init+0xc4>)
 8000c3a:	69db      	ldr	r3, [r3, #28]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4907      	ldr	r1, [pc, #28]	@ (8000c5c <MX_ADC3_Init+0xd0>)
 8000c40:	4803      	ldr	r0, [pc, #12]	@ (8000c50 <MX_ADC3_Init+0xc4>)
 8000c42:	f003 f8ad 	bl	8003da0 <HAL_ADC_Start_DMA>
  /* USER CODE END ADC3_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000cb4 	.word	0x20000cb4
 8000c54:	40012200 	.word	0x40012200
 8000c58:	0f000001 	.word	0x0f000001
 8000c5c:	2000afc8 	.word	0x2000afc8

08000c60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08c      	sub	sp, #48	@ 0x30
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a5f      	ldr	r2, [pc, #380]	@ (8000dfc <HAL_ADC_MspInit+0x19c>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d158      	bne.n	8000d34 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	4b5e      	ldr	r3, [pc, #376]	@ (8000e00 <HAL_ADC_MspInit+0x1a0>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8a:	4a5d      	ldr	r2, [pc, #372]	@ (8000e00 <HAL_ADC_MspInit+0x1a0>)
 8000c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c92:	4b5b      	ldr	r3, [pc, #364]	@ (8000e00 <HAL_ADC_MspInit+0x1a0>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c9a:	61bb      	str	r3, [r7, #24]
 8000c9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	4b57      	ldr	r3, [pc, #348]	@ (8000e00 <HAL_ADC_MspInit+0x1a0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a56      	ldr	r2, [pc, #344]	@ (8000e00 <HAL_ADC_MspInit+0x1a0>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b54      	ldr	r3, [pc, #336]	@ (8000e00 <HAL_ADC_MspInit+0x1a0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = PA0_MAIN_SUPPLY_Pin|PA3_M1_V_Pin|PA4_M2_V_Pin;
 8000cba:	2319      	movs	r3, #25
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	484d      	ldr	r0, [pc, #308]	@ (8000e04 <HAL_ADC_MspInit+0x1a4>)
 8000cce:	f004 fa1d 	bl	800510c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8000cd2:	4b4d      	ldr	r3, [pc, #308]	@ (8000e08 <HAL_ADC_MspInit+0x1a8>)
 8000cd4:	4a4d      	ldr	r2, [pc, #308]	@ (8000e0c <HAL_ADC_MspInit+0x1ac>)
 8000cd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000cd8:	4b4b      	ldr	r3, [pc, #300]	@ (8000e08 <HAL_ADC_MspInit+0x1a8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cde:	4b4a      	ldr	r3, [pc, #296]	@ (8000e08 <HAL_ADC_MspInit+0x1a8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce4:	4b48      	ldr	r3, [pc, #288]	@ (8000e08 <HAL_ADC_MspInit+0x1a8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cea:	4b47      	ldr	r3, [pc, #284]	@ (8000e08 <HAL_ADC_MspInit+0x1a8>)
 8000cec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cf0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cf2:	4b45      	ldr	r3, [pc, #276]	@ (8000e08 <HAL_ADC_MspInit+0x1a8>)
 8000cf4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cf8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cfa:	4b43      	ldr	r3, [pc, #268]	@ (8000e08 <HAL_ADC_MspInit+0x1a8>)
 8000cfc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d02:	4b41      	ldr	r3, [pc, #260]	@ (8000e08 <HAL_ADC_MspInit+0x1a8>)
 8000d04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d08:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d0a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e08 <HAL_ADC_MspInit+0x1a8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d10:	4b3d      	ldr	r3, [pc, #244]	@ (8000e08 <HAL_ADC_MspInit+0x1a8>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d16:	483c      	ldr	r0, [pc, #240]	@ (8000e08 <HAL_ADC_MspInit+0x1a8>)
 8000d18:	f003 fdf6 	bl	8004908 <HAL_DMA_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000d22:	f001 fc4b 	bl	80025bc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a37      	ldr	r2, [pc, #220]	@ (8000e08 <HAL_ADC_MspInit+0x1a8>)
 8000d2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d2c:	4a36      	ldr	r2, [pc, #216]	@ (8000e08 <HAL_ADC_MspInit+0x1a8>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000d32:	e05e      	b.n	8000df2 <HAL_ADC_MspInit+0x192>
  else if(adcHandle->Instance==ADC3)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a35      	ldr	r2, [pc, #212]	@ (8000e10 <HAL_ADC_MspInit+0x1b0>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d159      	bne.n	8000df2 <HAL_ADC_MspInit+0x192>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b2f      	ldr	r3, [pc, #188]	@ (8000e00 <HAL_ADC_MspInit+0x1a0>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d46:	4a2e      	ldr	r2, [pc, #184]	@ (8000e00 <HAL_ADC_MspInit+0x1a0>)
 8000d48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e00 <HAL_ADC_MspInit+0x1a0>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b28      	ldr	r3, [pc, #160]	@ (8000e00 <HAL_ADC_MspInit+0x1a0>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a27      	ldr	r2, [pc, #156]	@ (8000e00 <HAL_ADC_MspInit+0x1a0>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b25      	ldr	r3, [pc, #148]	@ (8000e00 <HAL_ADC_MspInit+0x1a0>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0304 	and.w	r3, r3, #4
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PC0_M1_CURRENT_Pin|PC1_M2_CURRENT_Pin;
 8000d76:	2303      	movs	r3, #3
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	4822      	ldr	r0, [pc, #136]	@ (8000e14 <HAL_ADC_MspInit+0x1b4>)
 8000d8a:	f004 f9bf 	bl	800510c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8000d8e:	4b22      	ldr	r3, [pc, #136]	@ (8000e18 <HAL_ADC_MspInit+0x1b8>)
 8000d90:	4a22      	ldr	r2, [pc, #136]	@ (8000e1c <HAL_ADC_MspInit+0x1bc>)
 8000d92:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000d94:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <HAL_ADC_MspInit+0x1b8>)
 8000d96:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d9a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e18 <HAL_ADC_MspInit+0x1b8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e18 <HAL_ADC_MspInit+0x1b8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <HAL_ADC_MspInit+0x1b8>)
 8000daa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dae:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000db0:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <HAL_ADC_MspInit+0x1b8>)
 8000db2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000db6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000db8:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <HAL_ADC_MspInit+0x1b8>)
 8000dba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000dbe:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000dc0:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <HAL_ADC_MspInit+0x1b8>)
 8000dc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dc6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8000dc8:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <HAL_ADC_MspInit+0x1b8>)
 8000dca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dce:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <HAL_ADC_MspInit+0x1b8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000dd6:	4810      	ldr	r0, [pc, #64]	@ (8000e18 <HAL_ADC_MspInit+0x1b8>)
 8000dd8:	f003 fd96 	bl	8004908 <HAL_DMA_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <HAL_ADC_MspInit+0x186>
      Error_Handler();
 8000de2:	f001 fbeb 	bl	80025bc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e18 <HAL_ADC_MspInit+0x1b8>)
 8000dea:	639a      	str	r2, [r3, #56]	@ 0x38
 8000dec:	4a0a      	ldr	r2, [pc, #40]	@ (8000e18 <HAL_ADC_MspInit+0x1b8>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000df2:	bf00      	nop
 8000df4:	3730      	adds	r7, #48	@ 0x30
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40012000 	.word	0x40012000
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020000 	.word	0x40020000
 8000e08:	20000cfc 	.word	0x20000cfc
 8000e0c:	40026470 	.word	0x40026470
 8000e10:	40012200 	.word	0x40012200
 8000e14:	40020800 	.word	0x40020800
 8000e18:	20000d5c 	.word	0x20000d5c
 8000e1c:	40026410 	.word	0x40026410

08000e20 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e24:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e26:	4a17      	ldr	r2, [pc, #92]	@ (8000e84 <MX_CAN1_Init+0x64>)
 8000e28:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e2c:	2210      	movs	r2, #16
 8000e2e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e30:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e36:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000e3c:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000e42:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000e48:	4b0d      	ldr	r3, [pc, #52]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e60:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e6c:	4804      	ldr	r0, [pc, #16]	@ (8000e80 <MX_CAN1_Init+0x60>)
 8000e6e:	f003 fb51 	bl	8004514 <HAL_CAN_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000e78:	f001 fba0 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000dbc 	.word	0x20000dbc
 8000e84:	40006400 	.word	0x40006400

08000e88 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	@ 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a19      	ldr	r2, [pc, #100]	@ (8000f0c <HAL_CAN_MspInit+0x84>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d12b      	bne.n	8000f02 <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b18      	ldr	r3, [pc, #96]	@ (8000f10 <HAL_CAN_MspInit+0x88>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	4a17      	ldr	r2, [pc, #92]	@ (8000f10 <HAL_CAN_MspInit+0x88>)
 8000eb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <HAL_CAN_MspInit+0x88>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <HAL_CAN_MspInit+0x88>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a10      	ldr	r2, [pc, #64]	@ (8000f10 <HAL_CAN_MspInit+0x88>)
 8000ed0:	f043 0308 	orr.w	r3, r3, #8
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <HAL_CAN_MspInit+0x88>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ef2:	2309      	movs	r3, #9
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <HAL_CAN_MspInit+0x8c>)
 8000efe:	f004 f905 	bl	800510c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	@ 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40006400 	.word	0x40006400
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020c00 	.word	0x40020c00

08000f18 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <MX_CRC_Init+0x20>)
 8000f1e:	4a07      	ldr	r2, [pc, #28]	@ (8000f3c <MX_CRC_Init+0x24>)
 8000f20:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	@ (8000f38 <MX_CRC_Init+0x20>)
 8000f24:	f003 fcd4 	bl	80048d0 <HAL_CRC_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f2e:	f001 fb45 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000de4 	.word	0x20000de4
 8000f3c:	40023000 	.word	0x40023000

08000f40 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f7c <HAL_CRC_MspInit+0x3c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d10d      	bne.n	8000f6e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <HAL_CRC_MspInit+0x40>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a09      	ldr	r2, [pc, #36]	@ (8000f80 <HAL_CRC_MspInit+0x40>)
 8000f5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b07      	ldr	r3, [pc, #28]	@ (8000f80 <HAL_CRC_MspInit+0x40>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40023000 	.word	0x40023000
 8000f80:	40023800 	.word	0x40023800

08000f84 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000f90:	f00e f90e 	bl	800f1b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000f94:	4b5a      	ldr	r3, [pc, #360]	@ (8001100 <pvPortMallocMicroROS+0x17c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000f9c:	f000 f986 	bl	80012ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000fa0:	4b58      	ldr	r3, [pc, #352]	@ (8001104 <pvPortMallocMicroROS+0x180>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f040 8090 	bne.w	80010ce <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d01e      	beq.n	8000ff2 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000fb4:	2208      	movs	r2, #8
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d015      	beq.n	8000ff2 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f023 0307 	bic.w	r3, r3, #7
 8000fcc:	3308      	adds	r3, #8
 8000fce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00b      	beq.n	8000ff2 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000fde:	f383 8811 	msr	BASEPRI, r3
 8000fe2:	f3bf 8f6f 	isb	sy
 8000fe6:	f3bf 8f4f 	dsb	sy
 8000fea:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	e7fd      	b.n	8000fee <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d06a      	beq.n	80010ce <pvPortMallocMicroROS+0x14a>
 8000ff8:	4b43      	ldr	r3, [pc, #268]	@ (8001108 <pvPortMallocMicroROS+0x184>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d865      	bhi.n	80010ce <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001002:	4b42      	ldr	r3, [pc, #264]	@ (800110c <pvPortMallocMicroROS+0x188>)
 8001004:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001006:	4b41      	ldr	r3, [pc, #260]	@ (800110c <pvPortMallocMicroROS+0x188>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800100c:	e004      	b.n	8001018 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 800100e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001010:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	429a      	cmp	r2, r3
 8001020:	d903      	bls.n	800102a <pvPortMallocMicroROS+0xa6>
 8001022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d1f1      	bne.n	800100e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800102a:	4b35      	ldr	r3, [pc, #212]	@ (8001100 <pvPortMallocMicroROS+0x17c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001030:	429a      	cmp	r2, r3
 8001032:	d04c      	beq.n	80010ce <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001034:	6a3b      	ldr	r3, [r7, #32]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2208      	movs	r2, #8
 800103a:	4413      	add	r3, r2
 800103c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	6a3b      	ldr	r3, [r7, #32]
 8001044:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	1ad2      	subs	r2, r2, r3
 800104e:	2308      	movs	r3, #8
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	429a      	cmp	r2, r3
 8001054:	d920      	bls.n	8001098 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	f003 0307 	and.w	r3, r3, #7
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00b      	beq.n	8001080 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800106c:	f383 8811 	msr	BASEPRI, r3
 8001070:	f3bf 8f6f 	isb	sy
 8001074:	f3bf 8f4f 	dsb	sy
 8001078:	613b      	str	r3, [r7, #16]
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	1ad2      	subs	r2, r2, r3
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800108c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001092:	69b8      	ldr	r0, [r7, #24]
 8001094:	f000 f96c 	bl	8001370 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001098:	4b1b      	ldr	r3, [pc, #108]	@ (8001108 <pvPortMallocMicroROS+0x184>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	4a19      	ldr	r2, [pc, #100]	@ (8001108 <pvPortMallocMicroROS+0x184>)
 80010a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80010a6:	4b18      	ldr	r3, [pc, #96]	@ (8001108 <pvPortMallocMicroROS+0x184>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <pvPortMallocMicroROS+0x18c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d203      	bcs.n	80010ba <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <pvPortMallocMicroROS+0x184>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a16      	ldr	r2, [pc, #88]	@ (8001110 <pvPortMallocMicroROS+0x18c>)
 80010b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80010ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <pvPortMallocMicroROS+0x180>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	431a      	orrs	r2, r3
 80010c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80010c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80010ce:	f00e f87d 	bl	800f1cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00b      	beq.n	80010f4 <pvPortMallocMicroROS+0x170>
	__asm volatile
 80010dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80010e0:	f383 8811 	msr	BASEPRI, r3
 80010e4:	f3bf 8f6f 	isb	sy
 80010e8:	f3bf 8f4f 	dsb	sy
 80010ec:	60fb      	str	r3, [r7, #12]
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80010f4:	69fb      	ldr	r3, [r7, #28]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3728      	adds	r7, #40	@ 0x28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200049f4 	.word	0x200049f4
 8001104:	20004a00 	.word	0x20004a00
 8001108:	200049f8 	.word	0x200049f8
 800110c:	200049ec 	.word	0x200049ec
 8001110:	200049fc 	.word	0x200049fc

08001114 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d04a      	beq.n	80011bc <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001126:	2308      	movs	r3, #8
 8001128:	425b      	negs	r3, r3
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	4413      	add	r3, r2
 800112e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	4b22      	ldr	r3, [pc, #136]	@ (80011c4 <vPortFreeMicroROS+0xb0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10b      	bne.n	800115a <vPortFreeMicroROS+0x46>
	__asm volatile
 8001142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001146:	f383 8811 	msr	BASEPRI, r3
 800114a:	f3bf 8f6f 	isb	sy
 800114e:	f3bf 8f4f 	dsb	sy
 8001152:	60fb      	str	r3, [r7, #12]
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	e7fd      	b.n	8001156 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00b      	beq.n	800117a <vPortFreeMicroROS+0x66>
	__asm volatile
 8001162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001166:	f383 8811 	msr	BASEPRI, r3
 800116a:	f3bf 8f6f 	isb	sy
 800116e:	f3bf 8f4f 	dsb	sy
 8001172:	60bb      	str	r3, [r7, #8]
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	e7fd      	b.n	8001176 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <vPortFreeMicroROS+0xb0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d019      	beq.n	80011bc <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d115      	bne.n	80011bc <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <vPortFreeMicroROS+0xb0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	43db      	mvns	r3, r3
 800119a:	401a      	ands	r2, r3
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80011a0:	f00e f806 	bl	800f1b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	4b07      	ldr	r3, [pc, #28]	@ (80011c8 <vPortFreeMicroROS+0xb4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a06      	ldr	r2, [pc, #24]	@ (80011c8 <vPortFreeMicroROS+0xb4>)
 80011b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80011b2:	6938      	ldr	r0, [r7, #16]
 80011b4:	f000 f8dc 	bl	8001370 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80011b8:	f00e f808 	bl	800f1cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80011bc:	bf00      	nop
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20004a00 	.word	0x20004a00
 80011c8:	200049f8 	.word	0x200049f8

080011cc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80011cc:	b480      	push	{r7}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80011d8:	2308      	movs	r3, #8
 80011da:	425b      	negs	r3, r3
 80011dc:	697a      	ldr	r2, [r7, #20]
 80011de:	4413      	add	r3, r2
 80011e0:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	4b06      	ldr	r3, [pc, #24]	@ (8001204 <getBlockSize+0x38>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	4013      	ands	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]

	return count;
 80011f4:	68fb      	ldr	r3, [r7, #12]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	371c      	adds	r7, #28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20004a00 	.word	0x20004a00

08001208 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001212:	f00d ffcd 	bl	800f1b0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	f7ff feb4 	bl	8000f84 <pvPortMallocMicroROS>
 800121c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d017      	beq.n	8001254 <pvPortReallocMicroROS+0x4c>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d014      	beq.n	8001254 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffce 	bl	80011cc <getBlockSize>
 8001230:	4603      	mov	r3, r0
 8001232:	2208      	movs	r2, #8
 8001234:	1a9b      	subs	r3, r3, r2
 8001236:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d201      	bcs.n	8001244 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	68b8      	ldr	r0, [r7, #8]
 800124a:	f01f fa80 	bl	802074e <memcpy>

		vPortFreeMicroROS(pv);
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff ff60 	bl	8001114 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001254:	f00d ffba 	bl	800f1cc <xTaskResumeAll>

	return newmem;
 8001258:	68bb      	ldr	r3, [r7, #8]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
 800126a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800126c:	f00d ffa0 	bl	800f1b0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	fb02 f303 	mul.w	r3, r2, r3
 8001278:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f7ff fe82 	bl	8000f84 <pvPortMallocMicroROS>
 8001280:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001286:	e004      	b.n	8001292 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	613a      	str	r2, [r7, #16]
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	1e5a      	subs	r2, r3, #1
 8001296:	617a      	str	r2, [r7, #20]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d1f5      	bne.n	8001288 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800129c:	f00d ff96 	bl	800f1cc <xTaskResumeAll>
  	return mem;
 80012a0:	68fb      	ldr	r3, [r7, #12]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80012b2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80012b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012b8:	4b27      	ldr	r3, [pc, #156]	@ (8001358 <prvHeapInit+0xac>)
 80012ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00c      	beq.n	80012e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3307      	adds	r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f023 0307 	bic.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	4a1f      	ldr	r2, [pc, #124]	@ (8001358 <prvHeapInit+0xac>)
 80012dc:	4413      	add	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80012e4:	4a1d      	ldr	r2, [pc, #116]	@ (800135c <prvHeapInit+0xb0>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	@ (800135c <prvHeapInit+0xb0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	4413      	add	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80012f8:	2208      	movs	r2, #8
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1a9b      	subs	r3, r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f023 0307 	bic.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4a15      	ldr	r2, [pc, #84]	@ (8001360 <prvHeapInit+0xb4>)
 800130c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800130e:	4b14      	ldr	r3, [pc, #80]	@ (8001360 <prvHeapInit+0xb4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2200      	movs	r2, #0
 8001314:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001316:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <prvHeapInit+0xb4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	1ad2      	subs	r2, r2, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <prvHeapInit+0xb4>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <prvHeapInit+0xb8>)
 800133a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	4a09      	ldr	r2, [pc, #36]	@ (8001368 <prvHeapInit+0xbc>)
 8001342:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001344:	4b09      	ldr	r3, [pc, #36]	@ (800136c <prvHeapInit+0xc0>)
 8001346:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800134a:	601a      	str	r2, [r3, #0]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	20000dec 	.word	0x20000dec
 800135c:	200049ec 	.word	0x200049ec
 8001360:	200049f4 	.word	0x200049f4
 8001364:	200049fc 	.word	0x200049fc
 8001368:	200049f8 	.word	0x200049f8
 800136c:	20004a00 	.word	0x20004a00

08001370 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001378:	4b28      	ldr	r3, [pc, #160]	@ (800141c <prvInsertBlockIntoFreeList+0xac>)
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	e002      	b.n	8001384 <prvInsertBlockIntoFreeList+0x14>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	429a      	cmp	r2, r3
 800138c:	d8f7      	bhi.n	800137e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	4413      	add	r3, r2
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	d108      	bne.n	80013b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	441a      	add	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	441a      	add	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d118      	bne.n	80013f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <prvInsertBlockIntoFreeList+0xb0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d00d      	beq.n	80013ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	441a      	add	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	e008      	b.n	8001400 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <prvInsertBlockIntoFreeList+0xb0>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	e003      	b.n	8001400 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	429a      	cmp	r2, r3
 8001406:	d002      	beq.n	800140e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	200049ec 	.word	0x200049ec
 8001420:	200049f4 	.word	0x200049f4

08001424 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <MX_DMA_Init+0x6c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a17      	ldr	r2, [pc, #92]	@ (8001490 <MX_DMA_Init+0x6c>)
 8001434:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <MX_DMA_Init+0x6c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2105      	movs	r1, #5
 800144a:	2038      	movs	r0, #56	@ 0x38
 800144c:	f003 fa16 	bl	800487c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001450:	2038      	movs	r0, #56	@ 0x38
 8001452:	f003 fa2f 	bl	80048b4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2105      	movs	r1, #5
 800145a:	203a      	movs	r0, #58	@ 0x3a
 800145c:	f003 fa0e 	bl	800487c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001460:	203a      	movs	r0, #58	@ 0x3a
 8001462:	f003 fa27 	bl	80048b4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2105      	movs	r1, #5
 800146a:	203c      	movs	r0, #60	@ 0x3c
 800146c:	f003 fa06 	bl	800487c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001470:	203c      	movs	r0, #60	@ 0x3c
 8001472:	f003 fa1f 	bl	80048b4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2105      	movs	r1, #5
 800147a:	2046      	movs	r0, #70	@ 0x46
 800147c:	f003 f9fe 	bl	800487c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001480:	2046      	movs	r0, #70	@ 0x46
 8001482:	f003 fa17 	bl	80048b4 <HAL_NVIC_EnableIRQ>

}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800

08001494 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014a2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80014a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014a8:	4904      	ldr	r1, [pc, #16]	@ (80014bc <cubemx_transport_open+0x28>)
 80014aa:	68f8      	ldr	r0, [r7, #12]
 80014ac:	f007 ffc4 	bl	8009438 <HAL_UART_Receive_DMA>
    return true;
 80014b0:	2301      	movs	r3, #1
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20004a04 	.word	0x20004a04

080014c0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014ce:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f007 ffd6 	bl	8009482 <HAL_UART_DMAStop>
    return true;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80014f4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b20      	cmp	r3, #32
 8001500:	d11c      	bne.n	800153c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	b29b      	uxth	r3, r3
 8001506:	461a      	mov	r2, r3
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	6978      	ldr	r0, [r7, #20]
 800150c:	f007 ff24 	bl	8009358 <HAL_UART_Transmit_DMA>
 8001510:	4603      	mov	r3, r0
 8001512:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001514:	e002      	b.n	800151c <cubemx_transport_write+0x3c>
            osDelay(1);
 8001516:	2001      	movs	r0, #1
 8001518:	f00c fd2a 	bl	800df70 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800151c:	7cfb      	ldrb	r3, [r7, #19]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d105      	bne.n	800152e <cubemx_transport_write+0x4e>
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b20      	cmp	r3, #32
 800152c:	d1f3      	bne.n	8001516 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800152e:	7cfb      	ldrb	r3, [r7, #19]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <cubemx_transport_write+0x58>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	e002      	b.n	800153e <cubemx_transport_write+0x5e>
 8001538:	2300      	movs	r3, #0
 800153a:	e000      	b.n	800153e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 800153c:	2300      	movs	r3, #0
    }
}
 800153e:	4618      	mov	r0, r3
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
 8001554:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800155c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001562:	b672      	cpsid	i
}
 8001564:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001572:	4a1c      	ldr	r2, [pc, #112]	@ (80015e4 <cubemx_transport_read+0x9c>)
 8001574:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001576:	b662      	cpsie	i
}
 8001578:	bf00      	nop
        __enable_irq();
        ms_used++;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3301      	adds	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001580:	2001      	movs	r0, #1
 8001582:	f00c fcf5 	bl	800df70 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001586:	4b18      	ldr	r3, [pc, #96]	@ (80015e8 <cubemx_transport_read+0xa0>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	4b16      	ldr	r3, [pc, #88]	@ (80015e4 <cubemx_transport_read+0x9c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d103      	bne.n	800159a <cubemx_transport_read+0x52>
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	dbe3      	blt.n	8001562 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800159e:	e011      	b.n	80015c4 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80015a0:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <cubemx_transport_read+0xa0>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	440b      	add	r3, r1
 80015aa:	4910      	ldr	r1, [pc, #64]	@ (80015ec <cubemx_transport_read+0xa4>)
 80015ac:	5c8a      	ldrb	r2, [r1, r2]
 80015ae:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80015b0:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <cubemx_transport_read+0xa0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	3301      	adds	r3, #1
 80015b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015ba:	4a0b      	ldr	r2, [pc, #44]	@ (80015e8 <cubemx_transport_read+0xa0>)
 80015bc:	6013      	str	r3, [r2, #0]
        wrote++;
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80015c4:	4b08      	ldr	r3, [pc, #32]	@ (80015e8 <cubemx_transport_read+0xa0>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <cubemx_transport_read+0x9c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d003      	beq.n	80015d8 <cubemx_transport_read+0x90>
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d3e3      	bcc.n	80015a0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80015d8:	69bb      	ldr	r3, [r7, #24]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3720      	adds	r7, #32
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20005208 	.word	0x20005208
 80015e8:	20005204 	.word	0x20005204
 80015ec:	20004a04 	.word	0x20004a04

080015f0 <ENC_Init>:

/* ==============================
 *  Funzioni per TIM1/TIM2
 * ============================== */
void ENC_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
    /* Inizializzazione di Encoder1 */
    g_Encoder1.position      = 0;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <ENC_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
    g_Encoder1.velocity      = 0;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <ENC_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
    g_Encoder1.lastCount     = 0;
 8001600:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <ENC_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	811a      	strh	r2, [r3, #8]
    g_Encoder1.lastPosition  = 0;
 8001606:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <ENC_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
    g_Encoder1.icLastCapture = 0;
 800160c:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <ENC_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
    g_Encoder1.icVelocityTPS = 0.0f;
 8001612:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <ENC_Init+0x74>)
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	615a      	str	r2, [r3, #20]

    /* Inizializzazione di Encoder2 */
    g_Encoder2.position      = 0;
 800161a:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <ENC_Init+0x78>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
    g_Encoder2.velocity      = 0;
 8001620:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <ENC_Init+0x78>)
 8001622:	2200      	movs	r2, #0
 8001624:	605a      	str	r2, [r3, #4]
    g_Encoder2.lastCount     = 0;
 8001626:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <ENC_Init+0x78>)
 8001628:	2200      	movs	r2, #0
 800162a:	811a      	strh	r2, [r3, #8]
    g_Encoder2.lastPosition  = 0;
 800162c:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <ENC_Init+0x78>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
    g_Encoder2.icLastCapture = 0;
 8001632:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <ENC_Init+0x78>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
    g_Encoder2.icVelocityTPS = 0.0f;
 8001638:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <ENC_Init+0x78>)
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	615a      	str	r2, [r3, #20]

    /* Avvio TIM1 e TIM2 in modalità Encoder (Quadrature) */
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001640:	213c      	movs	r1, #60	@ 0x3c
 8001642:	480a      	ldr	r0, [pc, #40]	@ (800166c <ENC_Init+0x7c>)
 8001644:	f006 fc2a 	bl	8007e9c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001648:	213c      	movs	r1, #60	@ 0x3c
 800164a:	4809      	ldr	r0, [pc, #36]	@ (8001670 <ENC_Init+0x80>)
 800164c:	f006 fc26 	bl	8007e9c <HAL_TIM_Encoder_Start>

    /* Azzeriamo i contatori hardware */
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <ENC_Init+0x7c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2200      	movs	r2, #0
 8001656:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001658:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <ENC_Init+0x80>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2200      	movs	r2, #0
 800165e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2000520c 	.word	0x2000520c
 8001668:	20005224 	.word	0x20005224
 800166c:	2000b0ec 	.word	0x2000b0ec
 8001670:	2000b134 	.word	0x2000b134

08001674 <ENC_Update>:

void ENC_Update(void)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
    /* === Encoder1 === */
    uint16_t currentCount1 = __HAL_TIM_GET_COUNTER(&htim1);
 800167a:	4b22      	ldr	r3, [pc, #136]	@ (8001704 <ENC_Update+0x90>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001680:	80fb      	strh	r3, [r7, #6]
    int16_t delta1 = (int16_t)(currentCount1 - g_Encoder1.lastCount);
 8001682:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <ENC_Update+0x94>)
 8001684:	891b      	ldrh	r3, [r3, #8]
 8001686:	88fa      	ldrh	r2, [r7, #6]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	b29b      	uxth	r3, r3
 800168c:	80bb      	strh	r3, [r7, #4]
    g_Encoder1.position += delta1;
 800168e:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <ENC_Update+0x94>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001696:	4413      	add	r3, r2
 8001698:	4a1b      	ldr	r2, [pc, #108]	@ (8001708 <ENC_Update+0x94>)
 800169a:	6013      	str	r3, [r2, #0]
    g_Encoder1.lastCount = currentCount1;
 800169c:	4a1a      	ldr	r2, [pc, #104]	@ (8001708 <ENC_Update+0x94>)
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	8113      	strh	r3, [r2, #8]

    /* Velocità in ticks/ms */
    g_Encoder1.velocity = g_Encoder1.position - g_Encoder1.lastPosition;
 80016a2:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <ENC_Update+0x94>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <ENC_Update+0x94>)
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	4a16      	ldr	r2, [pc, #88]	@ (8001708 <ENC_Update+0x94>)
 80016ae:	6053      	str	r3, [r2, #4]
    g_Encoder1.lastPosition = g_Encoder1.position;
 80016b0:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <ENC_Update+0x94>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a14      	ldr	r2, [pc, #80]	@ (8001708 <ENC_Update+0x94>)
 80016b6:	60d3      	str	r3, [r2, #12]

    /* === Encoder2 === */
    uint16_t currentCount2 = __HAL_TIM_GET_COUNTER(&htim2);
 80016b8:	4b14      	ldr	r3, [pc, #80]	@ (800170c <ENC_Update+0x98>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016be:	807b      	strh	r3, [r7, #2]
    int16_t delta2 = (int16_t)(currentCount2 - g_Encoder2.lastCount);
 80016c0:	4b13      	ldr	r3, [pc, #76]	@ (8001710 <ENC_Update+0x9c>)
 80016c2:	891b      	ldrh	r3, [r3, #8]
 80016c4:	887a      	ldrh	r2, [r7, #2]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	803b      	strh	r3, [r7, #0]
    g_Encoder2.position += delta2;
 80016cc:	4b10      	ldr	r3, [pc, #64]	@ (8001710 <ENC_Update+0x9c>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016d4:	4413      	add	r3, r2
 80016d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001710 <ENC_Update+0x9c>)
 80016d8:	6013      	str	r3, [r2, #0]
    g_Encoder2.lastCount = currentCount2;
 80016da:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <ENC_Update+0x9c>)
 80016dc:	887b      	ldrh	r3, [r7, #2]
 80016de:	8113      	strh	r3, [r2, #8]

    g_Encoder2.velocity = g_Encoder2.position - g_Encoder2.lastPosition;
 80016e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001710 <ENC_Update+0x9c>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <ENC_Update+0x9c>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	4a09      	ldr	r2, [pc, #36]	@ (8001710 <ENC_Update+0x9c>)
 80016ec:	6053      	str	r3, [r2, #4]
    g_Encoder2.lastPosition = g_Encoder2.position;
 80016ee:	4b08      	ldr	r3, [pc, #32]	@ (8001710 <ENC_Update+0x9c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a07      	ldr	r2, [pc, #28]	@ (8001710 <ENC_Update+0x9c>)
 80016f4:	60d3      	str	r3, [r2, #12]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	2000b0ec 	.word	0x2000b0ec
 8001708:	2000520c 	.word	0x2000520c
 800170c:	2000b134 	.word	0x2000b134
 8001710:	20005224 	.word	0x20005224

08001714 <ENC_IC_Init>:
 *  Funzioni per TIM3 / TIM4 IC
 * ============================== */

/* Avvio TIM3_CH1 e TIM4_CH2 in input capture con interrupt. */
void ENC_IC_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
    /* Valori iniziali di prescaler */
    s_TIM3Prescaler = 0;
 8001718:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <ENC_IC_Init+0x30>)
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
    s_TIM3ClockFreq = 84000000.0f;
 800171e:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <ENC_IC_Init+0x34>)
 8001720:	4a0a      	ldr	r2, [pc, #40]	@ (800174c <ENC_IC_Init+0x38>)
 8001722:	601a      	str	r2, [r3, #0]

    s_TIM4Prescaler = 0;
 8001724:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <ENC_IC_Init+0x3c>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
    s_TIM4ClockFreq = 84000000.0f;
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <ENC_IC_Init+0x40>)
 800172c:	4a07      	ldr	r2, [pc, #28]	@ (800174c <ENC_IC_Init+0x38>)
 800172e:	601a      	str	r2, [r3, #0]

    /* Avvio la cattura in interrupt su TIM3 e TIM4 */
    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001730:	2100      	movs	r1, #0
 8001732:	4809      	ldr	r0, [pc, #36]	@ (8001758 <ENC_IC_Init+0x44>)
 8001734:	f006 f9e4 	bl	8007b00 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8001738:	2104      	movs	r1, #4
 800173a:	4808      	ldr	r0, [pc, #32]	@ (800175c <ENC_IC_Init+0x48>)
 800173c:	f006 f9e0 	bl	8007b00 <HAL_TIM_IC_Start_IT>
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	2000523c 	.word	0x2000523c
 8001748:	20000000 	.word	0x20000000
 800174c:	4ca037a0 	.word	0x4ca037a0
 8001750:	20005240 	.word	0x20005240
 8001754:	20000004 	.word	0x20000004
 8001758:	2000b17c 	.word	0x2000b17c
 800175c:	2000b1c4 	.word	0x2000b1c4

08001760 <ENC_IC_AdjustPrescaler>:
static void ENC_IC_AdjustPrescaler(
    TIM_HandleTypeDef *htim,
    uint32_t *pPrescaler,
    float    *pClockFreq,
    uint32_t  delta)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
    /* Soglie di esempio: da regolare in base alla tua applicazione */
    const uint32_t DELTA_TOO_SMALL = 10;      // soglia per ridurre prescaler (velocità altissima)
 800176e:	230a      	movs	r3, #10
 8001770:	61bb      	str	r3, [r7, #24]
    const uint32_t DELTA_TOO_LARGE = 30000;   // soglia per aumentare prescaler (velocità molto bassa)
 8001772:	f247 5330 	movw	r3, #30000	@ 0x7530
 8001776:	617b      	str	r3, [r7, #20]

    uint32_t newPrescaler = *pPrescaler;
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	61fb      	str	r3, [r7, #28]

    if (delta < DELTA_TOO_SMALL)
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	429a      	cmp	r2, r3
 8001784:	d206      	bcs.n	8001794 <ENC_IC_AdjustPrescaler+0x34>
    {
        /* Velocità troppo alta -> decrementa prescaler finché > 0 */
        if (newPrescaler > 0)
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00f      	beq.n	80017ac <ENC_IC_AdjustPrescaler+0x4c>
        {
            newPrescaler--;
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	3b01      	subs	r3, #1
 8001790:	61fb      	str	r3, [r7, #28]
 8001792:	e00b      	b.n	80017ac <ENC_IC_AdjustPrescaler+0x4c>
        }
    }
    else if (delta > DELTA_TOO_LARGE)
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	429a      	cmp	r2, r3
 800179a:	d907      	bls.n	80017ac <ENC_IC_AdjustPrescaler+0x4c>
    {
        /* Velocità troppo bassa -> incrementa prescaler (se non al limite) */
        if (newPrescaler < 0xFFFF)
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d802      	bhi.n	80017ac <ENC_IC_AdjustPrescaler+0x4c>
        {
            newPrescaler++;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3301      	adds	r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Se il prescaler è cambiato, aggiorniamo il timer */
    if (newPrescaler != *pPrescaler)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d04c      	beq.n	8001850 <ENC_IC_AdjustPrescaler+0xf0>
    {
        __HAL_TIM_DISABLE(htim);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6a1a      	ldr	r2, [r3, #32]
 80017bc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10f      	bne.n	80017e6 <ENC_IC_AdjustPrescaler+0x86>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6a1a      	ldr	r2, [r3, #32]
 80017cc:	f240 4344 	movw	r3, #1092	@ 0x444
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d107      	bne.n	80017e6 <ENC_IC_AdjustPrescaler+0x86>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0201 	bic.w	r2, r2, #1
 80017e4:	601a      	str	r2, [r3, #0]

        htim->Init.Prescaler = newPrescaler;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	69fa      	ldr	r2, [r7, #28]
 80017ea:	605a      	str	r2, [r3, #4]
        __HAL_TIM_SET_PRESCALER(htim, newPrescaler);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	69fa      	ldr	r2, [r7, #28]
 80017f2:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_TIM_Base_Init(htim) != HAL_OK)
 80017f4:	68f8      	ldr	r0, [r7, #12]
 80017f6:	f005 ff52 	bl	800769e <HAL_TIM_Base_Init>
        {
            /* Gestisci errore se necessario */
        }

        /* Riavvio cattura (occhio: potremmo perdere un fronte durante la riconfigurazione) */
        if (htim->Instance == TIM3)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a16      	ldr	r2, [pc, #88]	@ (8001858 <ENC_IC_AdjustPrescaler+0xf8>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d104      	bne.n	800180e <ENC_IC_AdjustPrescaler+0xae>
        {
            HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_1);
 8001804:	2100      	movs	r1, #0
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f006 f97a 	bl	8007b00 <HAL_TIM_IC_Start_IT>
 800180c:	e008      	b.n	8001820 <ENC_IC_AdjustPrescaler+0xc0>
        }
        else if (htim->Instance == TIM4)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a12      	ldr	r2, [pc, #72]	@ (800185c <ENC_IC_AdjustPrescaler+0xfc>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d103      	bne.n	8001820 <ENC_IC_AdjustPrescaler+0xc0>
        {
            HAL_TIM_IC_Start_IT(htim, TIM_CHANNEL_2);
 8001818:	2104      	movs	r1, #4
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f006 f970 	bl	8007b00 <HAL_TIM_IC_Start_IT>
        }

        __HAL_TIM_ENABLE(htim);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

        /* Nuova freq timer = 84MHz / (prescaler+1) */
        *pClockFreq = 84000000.0f / (float)(newPrescaler + 1);
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	3301      	adds	r3, #1
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800183c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001860 <ENC_IC_AdjustPrescaler+0x100>
 8001840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	edc3 7a00 	vstr	s15, [r3]
        *pPrescaler = newPrescaler;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	601a      	str	r2, [r3, #0]
    }
}
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40000400 	.word	0x40000400
 800185c:	40000800 	.word	0x40000800
 8001860:	4ca037a0 	.word	0x4ca037a0

08001864 <HAL_TIM_IC_CaptureCallback>:
/**
 * @brief Callback unica di input capture per TIM3 e TIM4.
 *        Verifica se si tratta di TIM3_CH1 o TIM4_CH2 e agisce di conseguenza.
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
    /* === Se si tratta di TIM3_CH1 (Encoder1_CHA) === */
    if ((htim->Instance == TIM3) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a45      	ldr	r2, [pc, #276]	@ (8001988 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d140      	bne.n	80018f8 <HAL_TIM_IC_CaptureCallback+0x94>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	7f1b      	ldrb	r3, [r3, #28]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d13c      	bne.n	80018f8 <HAL_TIM_IC_CaptureCallback+0x94>
    {
        uint32_t capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800187e:	2100      	movs	r1, #0
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f006 feaf 	bl	80085e4 <HAL_TIM_ReadCapturedValue>
 8001886:	60f8      	str	r0, [r7, #12]
        if (g_Encoder1.icLastCapture != 0)
 8001888:	4b40      	ldr	r3, [pc, #256]	@ (800198c <HAL_TIM_IC_CaptureCallback+0x128>)
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d02e      	beq.n	80018ee <HAL_TIM_IC_CaptureCallback+0x8a>
        {
            uint32_t delta = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]
            if (capture >= g_Encoder1.icLastCapture)
 8001894:	4b3d      	ldr	r3, [pc, #244]	@ (800198c <HAL_TIM_IC_CaptureCallback+0x128>)
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	429a      	cmp	r2, r3
 800189c:	d305      	bcc.n	80018aa <HAL_TIM_IC_CaptureCallback+0x46>
                delta = capture - g_Encoder1.icLastCapture;
 800189e:	4b3b      	ldr	r3, [pc, #236]	@ (800198c <HAL_TIM_IC_CaptureCallback+0x128>)
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	e006      	b.n	80018b8 <HAL_TIM_IC_CaptureCallback+0x54>
            else
                delta = (0x10000UL - g_Encoder1.icLastCapture) + capture;
 80018aa:	4b38      	ldr	r3, [pc, #224]	@ (800198c <HAL_TIM_IC_CaptureCallback+0x128>)
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80018b6:	617b      	str	r3, [r7, #20]

            if (delta > 0)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00d      	beq.n	80018da <HAL_TIM_IC_CaptureCallback+0x76>
            {
                g_Encoder1.icVelocityTPS = (float)s_TIM3ClockFreq / (float)delta;
 80018be:	4b34      	ldr	r3, [pc, #208]	@ (8001990 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80018c0:	edd3 6a00 	vldr	s13, [r3]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	ee07 3a90 	vmov	s15, r3
 80018ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d2:	4b2e      	ldr	r3, [pc, #184]	@ (800198c <HAL_TIM_IC_CaptureCallback+0x128>)
 80018d4:	edc3 7a05 	vstr	s15, [r3, #20]
 80018d8:	e003      	b.n	80018e2 <HAL_TIM_IC_CaptureCallback+0x7e>
            }
            else
            {
                g_Encoder1.icVelocityTPS = 0.0f;
 80018da:	4b2c      	ldr	r3, [pc, #176]	@ (800198c <HAL_TIM_IC_CaptureCallback+0x128>)
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	615a      	str	r2, [r3, #20]
            }

            /* Esegui cambio dinamico del prescaler se necessario */
            ENC_IC_AdjustPrescaler(htim, &s_TIM3Prescaler, &s_TIM3ClockFreq, delta);
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	4a2a      	ldr	r2, [pc, #168]	@ (8001990 <HAL_TIM_IC_CaptureCallback+0x12c>)
 80018e6:	492b      	ldr	r1, [pc, #172]	@ (8001994 <HAL_TIM_IC_CaptureCallback+0x130>)
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff39 	bl	8001760 <ENC_IC_AdjustPrescaler>
        }

        g_Encoder1.icLastCapture = capture;
 80018ee:	4a27      	ldr	r2, [pc, #156]	@ (800198c <HAL_TIM_IC_CaptureCallback+0x128>)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6113      	str	r3, [r2, #16]
    {
 80018f4:	bf00      	nop
            ENC_IC_AdjustPrescaler(htim, &s_TIM4Prescaler, &s_TIM4ClockFreq, delta);
        }

        g_Encoder2.icLastCapture = capture;
    }
}
 80018f6:	e043      	b.n	8001980 <HAL_TIM_IC_CaptureCallback+0x11c>
    else if ((htim->Instance == TIM4) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2))
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a26      	ldr	r2, [pc, #152]	@ (8001998 <HAL_TIM_IC_CaptureCallback+0x134>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d13e      	bne.n	8001980 <HAL_TIM_IC_CaptureCallback+0x11c>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	7f1b      	ldrb	r3, [r3, #28]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d13a      	bne.n	8001980 <HAL_TIM_IC_CaptureCallback+0x11c>
        uint32_t capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800190a:	2104      	movs	r1, #4
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f006 fe69 	bl	80085e4 <HAL_TIM_ReadCapturedValue>
 8001912:	60b8      	str	r0, [r7, #8]
        if (g_Encoder2.icLastCapture != 0)
 8001914:	4b21      	ldr	r3, [pc, #132]	@ (800199c <HAL_TIM_IC_CaptureCallback+0x138>)
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d02e      	beq.n	800197a <HAL_TIM_IC_CaptureCallback+0x116>
            uint32_t delta = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
            if (capture >= g_Encoder2.icLastCapture)
 8001920:	4b1e      	ldr	r3, [pc, #120]	@ (800199c <HAL_TIM_IC_CaptureCallback+0x138>)
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	429a      	cmp	r2, r3
 8001928:	d305      	bcc.n	8001936 <HAL_TIM_IC_CaptureCallback+0xd2>
                delta = capture - g_Encoder2.icLastCapture;
 800192a:	4b1c      	ldr	r3, [pc, #112]	@ (800199c <HAL_TIM_IC_CaptureCallback+0x138>)
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	e006      	b.n	8001944 <HAL_TIM_IC_CaptureCallback+0xe0>
                delta = (0x10000UL - g_Encoder2.icLastCapture) + capture;
 8001936:	4b19      	ldr	r3, [pc, #100]	@ (800199c <HAL_TIM_IC_CaptureCallback+0x138>)
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001942:	613b      	str	r3, [r7, #16]
            if (delta > 0)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00d      	beq.n	8001966 <HAL_TIM_IC_CaptureCallback+0x102>
                g_Encoder2.icVelocityTPS = (float)s_TIM4ClockFreq / (float)delta;
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800194c:	edd3 6a00 	vldr	s13, [r3]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800195a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800195e:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <HAL_TIM_IC_CaptureCallback+0x138>)
 8001960:	edc3 7a05 	vstr	s15, [r3, #20]
 8001964:	e003      	b.n	800196e <HAL_TIM_IC_CaptureCallback+0x10a>
                g_Encoder2.icVelocityTPS = 0.0f;
 8001966:	4b0d      	ldr	r3, [pc, #52]	@ (800199c <HAL_TIM_IC_CaptureCallback+0x138>)
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
            ENC_IC_AdjustPrescaler(htim, &s_TIM4Prescaler, &s_TIM4ClockFreq, delta);
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4a0b      	ldr	r2, [pc, #44]	@ (80019a0 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001972:	490c      	ldr	r1, [pc, #48]	@ (80019a4 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff fef3 	bl	8001760 <ENC_IC_AdjustPrescaler>
        g_Encoder2.icLastCapture = capture;
 800197a:	4a08      	ldr	r2, [pc, #32]	@ (800199c <HAL_TIM_IC_CaptureCallback+0x138>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	6113      	str	r3, [r2, #16]
}
 8001980:	bf00      	nop
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40000400 	.word	0x40000400
 800198c:	2000520c 	.word	0x2000520c
 8001990:	20000000 	.word	0x20000000
 8001994:	2000523c 	.word	0x2000523c
 8001998:	40000800 	.word	0x40000800
 800199c:	20005224 	.word	0x20005224
 80019a0:	20000004 	.word	0x20000004
 80019a4:	20005240 	.word	0x20005240

080019a8 <ComputeDifferentialK>:
 *        partendo dalla distanza tra le ruote (track_width_m).
 * @param track_width_m  Distanza (m) tra ruota sinistra e ruota destra
 * @return  K = track_width_m / 2
 */
static float ComputeDifferentialK(float track_width_m)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	ed87 0a01 	vstr	s0, [r7, #4]
    return track_width_m * 0.5f;
 80019b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80019b6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80019ba:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80019be:	eeb0 0a67 	vmov.f32	s0, s15
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <cmdVelCallback>:
/**
 * @brief Callback di ricezione del messaggio cmd_vel (geometry_msgs::msg::Twist)
 * @param msgin  messaggio generico da castare a Twist
 */
static void cmdVelCallback(const void * msgin)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	@ 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
    const geometry_msgs__msg__Twist * msg = (const geometry_msgs__msg__Twist *)msgin;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24

    // Lettura velocità lineare e angolare
    float v_lin = msg->linear.x;   // [m/s]
 80019d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	f7fe fe19 	bl	8000618 <__aeabi_d2f>
 80019e6:	4603      	mov	r3, r0
 80019e8:	623b      	str	r3, [r7, #32]
    float v_ang = msg->angular.z;  // [rad/s]
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7fe fe10 	bl	8000618 <__aeabi_d2f>
 80019f8:	4603      	mov	r3, r0
 80019fa:	61fb      	str	r3, [r7, #28]

    // Calcolo K dalla geometria del robot (ad es. 0.40 m tra i cingoli)
    float track_width = 0.40f;
 80019fc:	4b16      	ldr	r3, [pc, #88]	@ (8001a58 <cmdVelCallback+0x8c>)
 80019fe:	61bb      	str	r3, [r7, #24]
    float K = ComputeDifferentialK(track_width);
 8001a00:	ed97 0a06 	vldr	s0, [r7, #24]
 8001a04:	f7ff ffd0 	bl	80019a8 <ComputeDifferentialK>
 8001a08:	ed87 0a05 	vstr	s0, [r7, #20]

    // Velocità motori:
    float speedM1 = v_lin - (v_ang * K);
 8001a0c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a10:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a18:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a20:	edc7 7a04 	vstr	s15, [r7, #16]
    float speedM2 = v_lin + (v_ang * K);
 8001a24:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a28:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a30:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a38:	edc7 7a03 	vstr	s15, [r7, #12]

    // Abilita entrambi i motori (true, true), AUX disabilitato (false, false)
    MotorControl_SetMotors(speedM1, speedM2, true, true, false, false);
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2101      	movs	r1, #1
 8001a42:	2001      	movs	r0, #1
 8001a44:	edd7 0a03 	vldr	s1, [r7, #12]
 8001a48:	ed97 0a04 	vldr	s0, [r7, #16]
 8001a4c:	f000 ff36 	bl	80028bc <MotorControl_SetMotors>
}
 8001a50:	bf00      	nop
 8001a52:	3728      	adds	r7, #40	@ 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	3ecccccd 	.word	0x3ecccccd

08001a5c <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer_1m */
  myTimer_1mHandle = osTimerNew(CallbackTimer_1m, osTimerPeriodic, NULL, &myTimer_1m_attributes);
 8001a62:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <MX_FREERTOS_Init+0x60>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	2101      	movs	r1, #1
 8001a68:	4815      	ldr	r0, [pc, #84]	@ (8001ac0 <MX_FREERTOS_Init+0x64>)
 8001a6a:	f00c fab1 	bl	800dfd0 <osTimerNew>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4a14      	ldr	r2, [pc, #80]	@ (8001ac4 <MX_FREERTOS_Init+0x68>)
 8001a72:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_TIMERS */
  // start timers, add new ones, ...
  // Avvio del timer a 1 ms (se configTICK_RATE_HZ = 1000)
  osStatus_t status = osTimerStart(myTimer_1mHandle, 1);
 8001a74:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <MX_FREERTOS_Init+0x68>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2101      	movs	r1, #1
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f00c fb24 	bl	800e0c8 <osTimerStart>
 8001a80:	6078      	str	r0, [r7, #4]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of rosTaskLed */
  rosTaskLedHandle = osThreadNew(StartTaskLed, NULL, &rosTaskLed_attributes);
 8001a82:	4a11      	ldr	r2, [pc, #68]	@ (8001ac8 <MX_FREERTOS_Init+0x6c>)
 8001a84:	2100      	movs	r1, #0
 8001a86:	4811      	ldr	r0, [pc, #68]	@ (8001acc <MX_FREERTOS_Init+0x70>)
 8001a88:	f00c f9e0 	bl	800de4c <osThreadNew>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4a10      	ldr	r2, [pc, #64]	@ (8001ad0 <MX_FREERTOS_Init+0x74>)
 8001a90:	6013      	str	r3, [r2, #0]

  /* creation of rosTaskCom */
  rosTaskComHandle = osThreadNew(StartTaskCom, NULL, &rosTaskCom_attributes);
 8001a92:	4a10      	ldr	r2, [pc, #64]	@ (8001ad4 <MX_FREERTOS_Init+0x78>)
 8001a94:	2100      	movs	r1, #0
 8001a96:	4810      	ldr	r0, [pc, #64]	@ (8001ad8 <MX_FREERTOS_Init+0x7c>)
 8001a98:	f00c f9d8 	bl	800de4c <osThreadNew>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8001adc <MX_FREERTOS_Init+0x80>)
 8001aa0:	6013      	str	r3, [r2, #0]

  /* creation of rosTaskAnalog */
  rosTaskAnalogHandle = osThreadNew(StartTaskAnalog, NULL, &rosTaskAnalog_attributes);
 8001aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae0 <MX_FREERTOS_Init+0x84>)
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	480f      	ldr	r0, [pc, #60]	@ (8001ae4 <MX_FREERTOS_Init+0x88>)
 8001aa8:	f00c f9d0 	bl	800de4c <osThreadNew>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae8 <MX_FREERTOS_Init+0x8c>)
 8001ab0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	08021550 	.word	0x08021550
 8001ac0:	080020d9 	.word	0x080020d9
 8001ac4:	20005388 	.word	0x20005388
 8001ac8:	08021560 	.word	0x08021560
 8001acc:	08001aed 	.word	0x08001aed
 8001ad0:	2000538c 	.word	0x2000538c
 8001ad4:	08021584 	.word	0x08021584
 8001ad8:	08001b21 	.word	0x08001b21
 8001adc:	20005c38 	.word	0x20005c38
 8001ae0:	080215a8 	.word	0x080215a8
 8001ae4:	080020b5 	.word	0x080020b5
 8001ae8:	2000ab04 	.word	0x2000ab04

08001aec <StartTaskLed>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskLed */
void StartTaskLed(void *argument)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001af4:	f00f f8b8 	bl	8010c68 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartTaskLed */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_WritePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	2140      	movs	r1, #64	@ 0x40
 8001afc:	4807      	ldr	r0, [pc, #28]	@ (8001b1c <StartTaskLed+0x30>)
 8001afe:	f003 fca1 	bl	8005444 <HAL_GPIO_WritePin>
    osDelay(100);
 8001b02:	2064      	movs	r0, #100	@ 0x64
 8001b04:	f00c fa34 	bl	800df70 <osDelay>
    HAL_GPIO_WritePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2140      	movs	r1, #64	@ 0x40
 8001b0c:	4803      	ldr	r0, [pc, #12]	@ (8001b1c <StartTaskLed+0x30>)
 8001b0e:	f003 fc99 	bl	8005444 <HAL_GPIO_WritePin>
    osDelay(200);
 8001b12:	20c8      	movs	r0, #200	@ 0xc8
 8001b14:	f00c fa2c 	bl	800df70 <osDelay>
    HAL_GPIO_WritePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin, GPIO_PIN_SET);
 8001b18:	bf00      	nop
 8001b1a:	e7ed      	b.n	8001af8 <StartTaskLed+0xc>
 8001b1c:	40020000 	.word	0x40020000

08001b20 <StartTaskCom>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCom */
void StartTaskCom(void *argument)
{
 8001b20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b24:	b0c6      	sub	sp, #280	@ 0x118
 8001b26:	af02      	add	r7, sp, #8
 8001b28:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartTaskCom */

  /* ===========================================================================
   * 1) Configurazione micro-ROS su UART
   * ==========================================================================*/
  rmw_uros_set_custom_transport(
 8001b2a:	4bb9      	ldr	r3, [pc, #740]	@ (8001e10 <StartTaskCom+0x2f0>)
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	4bb9      	ldr	r3, [pc, #740]	@ (8001e14 <StartTaskCom+0x2f4>)
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	4bb9      	ldr	r3, [pc, #740]	@ (8001e18 <StartTaskCom+0x2f8>)
 8001b34:	4ab9      	ldr	r2, [pc, #740]	@ (8001e1c <StartTaskCom+0x2fc>)
 8001b36:	49ba      	ldr	r1, [pc, #744]	@ (8001e20 <StartTaskCom+0x300>)
 8001b38:	2001      	movs	r0, #1
 8001b3a:	f012 fd79 	bl	8014630 <rmw_uros_set_custom_transport>
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read
  );

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001b3e:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001b42:	4618      	mov	r0, r3
 8001b44:	f012 fca6 	bl	8014494 <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate      = microros_allocate;
 8001b48:	4bb6      	ldr	r3, [pc, #728]	@ (8001e24 <StartTaskCom+0x304>)
 8001b4a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  freeRTOS_allocator.deallocate    = microros_deallocate;
 8001b4e:	4bb6      	ldr	r3, [pc, #728]	@ (8001e28 <StartTaskCom+0x308>)
 8001b50:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
  freeRTOS_allocator.reallocate    = microros_reallocate;
 8001b54:	4bb5      	ldr	r3, [pc, #724]	@ (8001e2c <StartTaskCom+0x30c>)
 8001b56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8001b5a:	4bb5      	ldr	r3, [pc, #724]	@ (8001e30 <StartTaskCom+0x310>)
 8001b5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  if (!rcutils_set_default_allocator(&freeRTOS_allocator))
 8001b60:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8001b64:	4618      	mov	r0, r3
 8001b66:	f012 fca3 	bl	80144b0 <rcutils_set_default_allocator>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f083 0301 	eor.w	r3, r3, #1
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d004      	beq.n	8001b80 <StartTaskCom+0x60>
  {
    printf("Error on default allocators (line %d)\n", __LINE__);
 8001b76:	f44f 71b0 	mov.w	r1, #352	@ 0x160
 8001b7a:	48ae      	ldr	r0, [pc, #696]	@ (8001e34 <StartTaskCom+0x314>)
 8001b7c:	f01e fb48 	bl	8020210 <iprintf>
   * ==========================================================================*/
  rclc_support_t support;
  rcl_allocator_t allocator;
  rcl_node_t node;

  allocator = rcl_get_default_allocator();
 8001b80:	463b      	mov	r3, r7
 8001b82:	4618      	mov	r0, r3
 8001b84:	f012 fcb2 	bl	80144ec <rcutils_get_default_allocator>
 8001b88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b8c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001b90:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 8001b94:	461d      	mov	r5, r3
 8001b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b9a:	682b      	ldr	r3, [r5, #0]
 8001b9c:	6023      	str	r3, [r4, #0]
  rclc_support_init(&support, 0, NULL, &allocator);
 8001b9e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001ba2:	f107 00c4 	add.w	r0, r7, #196	@ 0xc4
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	f012 fb7d 	bl	80142a8 <rclc_support_init>

  rclc_node_init_default(&node, "pnav32", "", &support);
 8001bae:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001bb2:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8001bb6:	4aa0      	ldr	r2, [pc, #640]	@ (8001e38 <StartTaskCom+0x318>)
 8001bb8:	49a0      	ldr	r1, [pc, #640]	@ (8001e3c <StartTaskCom+0x31c>)
 8001bba:	f012 fbbf 	bl	801433c <rclc_node_init_default>

  /* ===========================================================================
   * 3) Creazione Publisher
   * ==========================================================================*/
  // Esempi: pInt32, pInt64, pBatt, pTemp, pColorRGBA, e i publisher encoder
  rclc_publisher_init_default(&publisher_int32, &node,
 8001bbe:	f013 fdfd 	bl	80157bc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001bc8:	4b9d      	ldr	r3, [pc, #628]	@ (8001e40 <StartTaskCom+0x320>)
 8001bca:	489e      	ldr	r0, [pc, #632]	@ (8001e44 <StartTaskCom+0x324>)
 8001bcc:	f012 fbf2 	bl	80143b4 <rclc_publisher_init_default>
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "pInt32");

  rclc_publisher_init_default(&publisher_int64, &node,
 8001bd0:	f013 fe0c 	bl	80157ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001bda:	4b9b      	ldr	r3, [pc, #620]	@ (8001e48 <StartTaskCom+0x328>)
 8001bdc:	489b      	ldr	r0, [pc, #620]	@ (8001e4c <StartTaskCom+0x32c>)
 8001bde:	f012 fbe9 	bl	80143b4 <rclc_publisher_init_default>
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int64),
    "pInt64");

  rclc_publisher_init_default(&publisher_color, &node,
 8001be2:	f013 fdbb 	bl	801575c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>
 8001be6:	4602      	mov	r2, r0
 8001be8:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001bec:	4b98      	ldr	r3, [pc, #608]	@ (8001e50 <StartTaskCom+0x330>)
 8001bee:	4899      	ldr	r0, [pc, #612]	@ (8001e54 <StartTaskCom+0x334>)
 8001bf0:	f012 fbe0 	bl	80143b4 <rclc_publisher_init_default>
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, ColorRGBA),
    "pColorRGBA");

  rclc_publisher_init_default(&publisher_batt, &node,
 8001bf4:	f013 fa6a 	bl	80150cc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001bfe:	4b96      	ldr	r3, [pc, #600]	@ (8001e58 <StartTaskCom+0x338>)
 8001c00:	4896      	ldr	r0, [pc, #600]	@ (8001e5c <StartTaskCom+0x33c>)
 8001c02:	f012 fbd7 	bl	80143b4 <rclc_publisher_init_default>
    ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, BatteryState),
    "pBatt");

  rclc_publisher_init_default(&publisher_temp, &node,
 8001c06:	f013 fa79 	bl	80150fc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001c10:	4b93      	ldr	r3, [pc, #588]	@ (8001e60 <StartTaskCom+0x340>)
 8001c12:	4894      	ldr	r0, [pc, #592]	@ (8001e64 <StartTaskCom+0x344>)
 8001c14:	f012 fbce 	bl	80143b4 <rclc_publisher_init_default>
    ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Temperature),
    "pTemp");

  // Encoder 1
  rclc_publisher_init_default(&publisher_Enc1_pos1, &node,
 8001c18:	f013 fdd0 	bl	80157bc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001c22:	4b91      	ldr	r3, [pc, #580]	@ (8001e68 <StartTaskCom+0x348>)
 8001c24:	4891      	ldr	r0, [pc, #580]	@ (8001e6c <StartTaskCom+0x34c>)
 8001c26:	f012 fbc5 	bl	80143b4 <rclc_publisher_init_default>
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "Enc1Pos1");

  rclc_publisher_init_default(&publisher_Enc1_vel1, &node,
 8001c2a:	f013 fdc7 	bl	80157bc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001c34:	4b8e      	ldr	r3, [pc, #568]	@ (8001e70 <StartTaskCom+0x350>)
 8001c36:	488f      	ldr	r0, [pc, #572]	@ (8001e74 <StartTaskCom+0x354>)
 8001c38:	f012 fbbc 	bl	80143b4 <rclc_publisher_init_default>
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "Enc1Vel1");

  rclc_publisher_init_default(&publisher_Enc1VelTPS, &node,
 8001c3c:	f013 fda6 	bl	801578c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64>
 8001c40:	4602      	mov	r2, r0
 8001c42:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001c46:	4b8c      	ldr	r3, [pc, #560]	@ (8001e78 <StartTaskCom+0x358>)
 8001c48:	488c      	ldr	r0, [pc, #560]	@ (8001e7c <StartTaskCom+0x35c>)
 8001c4a:	f012 fbb3 	bl	80143b4 <rclc_publisher_init_default>
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64),
    "Enc1VelTPS");

  // Encoder 2
  rclc_publisher_init_default(&publisher_Enc2_pos2, &node,
 8001c4e:	f013 fdb5 	bl	80157bc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001c52:	4602      	mov	r2, r0
 8001c54:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001c58:	4b89      	ldr	r3, [pc, #548]	@ (8001e80 <StartTaskCom+0x360>)
 8001c5a:	488a      	ldr	r0, [pc, #552]	@ (8001e84 <StartTaskCom+0x364>)
 8001c5c:	f012 fbaa 	bl	80143b4 <rclc_publisher_init_default>
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "Enc2Pos2");

  rclc_publisher_init_default(&publisher_Enc2_vel2, &node,
 8001c60:	f013 fdac 	bl	80157bc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001c64:	4602      	mov	r2, r0
 8001c66:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001c6a:	4b87      	ldr	r3, [pc, #540]	@ (8001e88 <StartTaskCom+0x368>)
 8001c6c:	4887      	ldr	r0, [pc, #540]	@ (8001e8c <StartTaskCom+0x36c>)
 8001c6e:	f012 fba1 	bl	80143b4 <rclc_publisher_init_default>
    ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
    "Enc2Vel2");

  rclc_publisher_init_default(&publisher_Enc2VelTPS, &node,
 8001c72:	f013 fd8b 	bl	801578c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64>
 8001c76:	4602      	mov	r2, r0
 8001c78:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001c7c:	4b84      	ldr	r3, [pc, #528]	@ (8001e90 <StartTaskCom+0x370>)
 8001c7e:	4885      	ldr	r0, [pc, #532]	@ (8001e94 <StartTaskCom+0x374>)
 8001c80:	f012 fb98 	bl	80143b4 <rclc_publisher_init_default>
    "Enc2VelTPS");

  /* ===========================================================================
   * 4) Creazione Subscriber a cmd_vel
   * ==========================================================================*/
  rclc_subscription_init_default(
 8001c84:	f00f fce4 	bl	8011650 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8001c8e:	4b82      	ldr	r3, [pc, #520]	@ (8001e98 <StartTaskCom+0x378>)
 8001c90:	4882      	ldr	r0, [pc, #520]	@ (8001e9c <StartTaskCom+0x37c>)
 8001c92:	f012 fbc3 	bl	801441c <rclc_subscription_init_default>

  /* ===========================================================================
   * 5) Creazione Executor per gestire la callback su cmd_vel
   * ==========================================================================*/
  rclc_executor_t executor;
  rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001c96:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001c9a:	f107 01c4 	add.w	r1, r7, #196	@ 0xc4
 8001c9e:	f107 0020 	add.w	r0, r7, #32
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f012 f838 	bl	8013d18 <rclc_executor_init>
  // '1' = una subscription/callback, se ne hai di più aumenta

  // Aggiunge la subscription e la callback
  rclc_executor_add_subscription(
 8001ca8:	f107 0020 	add.w	r0, r7, #32
 8001cac:	2300      	movs	r3, #0
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	4b7b      	ldr	r3, [pc, #492]	@ (8001ea0 <StartTaskCom+0x380>)
 8001cb2:	4a7c      	ldr	r2, [pc, #496]	@ (8001ea4 <StartTaskCom+0x384>)
 8001cb4:	4979      	ldr	r1, [pc, #484]	@ (8001e9c <StartTaskCom+0x37c>)
 8001cb6:	f012 f89f 	bl	8013df8 <rclc_executor_add_subscription>
  );

  /* ===========================================================================
   * 6) Assegnazione valori iniziali per i messaggi standard
   * ==========================================================================*/
  msgInt32.data = 1;
 8001cba:	4b7b      	ldr	r3, [pc, #492]	@ (8001ea8 <StartTaskCom+0x388>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
  msgInt64.data = 10;
 8001cc0:	497a      	ldr	r1, [pc, #488]	@ (8001eac <StartTaskCom+0x38c>)
 8001cc2:	f04f 020a 	mov.w	r2, #10
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9c1 2300 	strd	r2, r3, [r1]

  msgColorRGBA.r = 127;
 8001cce:	4b78      	ldr	r3, [pc, #480]	@ (8001eb0 <StartTaskCom+0x390>)
 8001cd0:	4a78      	ldr	r2, [pc, #480]	@ (8001eb4 <StartTaskCom+0x394>)
 8001cd2:	601a      	str	r2, [r3, #0]
  msgColorRGBA.g = 127;
 8001cd4:	4b76      	ldr	r3, [pc, #472]	@ (8001eb0 <StartTaskCom+0x390>)
 8001cd6:	4a77      	ldr	r2, [pc, #476]	@ (8001eb4 <StartTaskCom+0x394>)
 8001cd8:	605a      	str	r2, [r3, #4]
  msgColorRGBA.b = 100;
 8001cda:	4b75      	ldr	r3, [pc, #468]	@ (8001eb0 <StartTaskCom+0x390>)
 8001cdc:	4a76      	ldr	r2, [pc, #472]	@ (8001eb8 <StartTaskCom+0x398>)
 8001cde:	609a      	str	r2, [r3, #8]
  msgColorRGBA.a = 200;
 8001ce0:	4b73      	ldr	r3, [pc, #460]	@ (8001eb0 <StartTaskCom+0x390>)
 8001ce2:	4a76      	ldr	r2, [pc, #472]	@ (8001ebc <StartTaskCom+0x39c>)
 8001ce4:	60da      	str	r2, [r3, #12]

  msgBattery.power_supply_status     = sensor_msgs__msg__BatteryState__POWER_SUPPLY_STATUS_UNKNOWN;
 8001ce6:	4b76      	ldr	r3, [pc, #472]	@ (8001ec0 <StartTaskCom+0x3a0>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  msgBattery.power_supply_health     = sensor_msgs__msg__BatteryState__POWER_SUPPLY_HEALTH_UNKNOWN;
 8001cee:	4b74      	ldr	r3, [pc, #464]	@ (8001ec0 <StartTaskCom+0x3a0>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  msgBattery.power_supply_technology = sensor_msgs__msg__BatteryState__POWER_SUPPLY_TECHNOLOGY_LION;
 8001cf6:	4b72      	ldr	r3, [pc, #456]	@ (8001ec0 <StartTaskCom+0x3a0>)
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  msgBattery.charge  = 2;
 8001cfe:	4b70      	ldr	r3, [pc, #448]	@ (8001ec0 <StartTaskCom+0x3a0>)
 8001d00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d04:	621a      	str	r2, [r3, #32]
  msgBattery.current = 10;
 8001d06:	4b6e      	ldr	r3, [pc, #440]	@ (8001ec0 <StartTaskCom+0x3a0>)
 8001d08:	4a6e      	ldr	r2, [pc, #440]	@ (8001ec4 <StartTaskCom+0x3a4>)
 8001d0a:	61da      	str	r2, [r3, #28]
  battVoltage.size   = NUMBEROFFCELL;
 8001d0c:	2206      	movs	r2, #6
 8001d0e:	4b6e      	ldr	r3, [pc, #440]	@ (8001ec8 <StartTaskCom+0x3a8>)
 8001d10:	605a      	str	r2, [r3, #4]
  msgBattery.cell_voltage.capacity = NUMBEROFFCELL;
 8001d12:	2206      	movs	r2, #6
 8001d14:	4b6a      	ldr	r3, [pc, #424]	@ (8001ec0 <StartTaskCom+0x3a0>)
 8001d16:	63da      	str	r2, [r3, #60]	@ 0x3c
  msgBattery.cell_voltage.size     = NUMBEROFFCELL;
 8001d18:	2206      	movs	r2, #6
 8001d1a:	4b69      	ldr	r3, [pc, #420]	@ (8001ec0 <StartTaskCom+0x3a0>)
 8001d1c:	639a      	str	r2, [r3, #56]	@ 0x38
  msgBattery.cell_voltage.data     = (float*) malloc(NUMBEROFFCELL * sizeof(float));
 8001d1e:	2306      	movs	r3, #6
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f01d ff80 	bl	801fc28 <malloc>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b64      	ldr	r3, [pc, #400]	@ (8001ec0 <StartTaskCom+0x3a0>)
 8001d2e:	635a      	str	r2, [r3, #52]	@ 0x34
  msgBattery.cell_voltage.data[0]  = 0.0f;
 8001d30:	4b63      	ldr	r3, [pc, #396]	@ (8001ec0 <StartTaskCom+0x3a0>)
 8001d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
  msgBattery.cell_voltage.data[1]  = 1.0f;
 8001d3a:	4b61      	ldr	r3, [pc, #388]	@ (8001ec0 <StartTaskCom+0x3a0>)
 8001d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d3e:	3304      	adds	r3, #4
 8001d40:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001d44:	601a      	str	r2, [r3, #0]
  msgBattery.cell_voltage.data[2]  = 2.0f;
 8001d46:	4b5e      	ldr	r3, [pc, #376]	@ (8001ec0 <StartTaskCom+0x3a0>)
 8001d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d4a:	3308      	adds	r3, #8
 8001d4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d50:	601a      	str	r2, [r3, #0]
  msgBattery.cell_voltage.data[3]  = 3.0f;
 8001d52:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec0 <StartTaskCom+0x3a0>)
 8001d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d56:	330c      	adds	r3, #12
 8001d58:	4a5c      	ldr	r2, [pc, #368]	@ (8001ecc <StartTaskCom+0x3ac>)
 8001d5a:	601a      	str	r2, [r3, #0]
  msgBattery.cell_voltage.data[4]  = 4.0f;
 8001d5c:	4b58      	ldr	r3, [pc, #352]	@ (8001ec0 <StartTaskCom+0x3a0>)
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d60:	3310      	adds	r3, #16
 8001d62:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8001d66:	601a      	str	r2, [r3, #0]
  msgBattery.cell_voltage.data[5]  = 5.0f;
 8001d68:	4b55      	ldr	r3, [pc, #340]	@ (8001ec0 <StartTaskCom+0x3a0>)
 8001d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d6c:	3314      	adds	r3, #20
 8001d6e:	4a58      	ldr	r2, [pc, #352]	@ (8001ed0 <StartTaskCom+0x3b0>)
 8001d70:	601a      	str	r2, [r3, #0]
  // e così via se servono

  msgTemperature.temperature = 25.0f;
 8001d72:	4958      	ldr	r1, [pc, #352]	@ (8001ed4 <StartTaskCom+0x3b4>)
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	4b57      	ldr	r3, [pc, #348]	@ (8001ed8 <StartTaskCom+0x3b8>)
 8001d7a:	e9c1 2306 	strd	r2, r3, [r1, #24]
   * 7) Loop infinito: pubblicazione e spin dell'executor
   * ==========================================================================*/
  for(;;)
  {
    // Esempio di aggiornamento messaggi
    msgInt32.data++;
 8001d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea8 <StartTaskCom+0x388>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3301      	adds	r3, #1
 8001d84:	4a48      	ldr	r2, [pc, #288]	@ (8001ea8 <StartTaskCom+0x388>)
 8001d86:	6013      	str	r3, [r2, #0]
    msgInt64.data++;
 8001d88:	4b48      	ldr	r3, [pc, #288]	@ (8001eac <StartTaskCom+0x38c>)
 8001d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8e:	f112 0801 	adds.w	r8, r2, #1
 8001d92:	f143 0900 	adc.w	r9, r3, #0
 8001d96:	4b45      	ldr	r3, [pc, #276]	@ (8001eac <StartTaskCom+0x38c>)
 8001d98:	e9c3 8900 	strd	r8, r9, [r3]
    msgColorRGBA.g++;
 8001d9c:	4b44      	ldr	r3, [pc, #272]	@ (8001eb0 <StartTaskCom+0x390>)
 8001d9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001da2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001da6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001daa:	4b41      	ldr	r3, [pc, #260]	@ (8001eb0 <StartTaskCom+0x390>)
 8001dac:	edc3 7a01 	vstr	s15, [r3, #4]
    msgBattery.voltage += 0.001f;
 8001db0:	4b43      	ldr	r3, [pc, #268]	@ (8001ec0 <StartTaskCom+0x3a0>)
 8001db2:	edd3 7a05 	vldr	s15, [r3, #20]
 8001db6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001edc <StartTaskCom+0x3bc>
 8001dba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001dbe:	4b40      	ldr	r3, [pc, #256]	@ (8001ec0 <StartTaskCom+0x3a0>)
 8001dc0:	edc3 7a05 	vstr	s15, [r3, #20]
    msgTemperature.temperature += 0.001f;
 8001dc4:	4b43      	ldr	r3, [pc, #268]	@ (8001ed4 <StartTaskCom+0x3b4>)
 8001dc6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001dca:	a30f      	add	r3, pc, #60	@ (adr r3, 8001e08 <StartTaskCom+0x2e8>)
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd0:	f7fe fa6c 	bl	80002ac <__adddf3>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	493e      	ldr	r1, [pc, #248]	@ (8001ed4 <StartTaskCom+0x3b4>)
 8001dda:	e9c1 2306 	strd	r2, r3, [r1, #24]

    // Encoder (pos1, vel1, pos2, vel2) aggiornati altrove
    msg_Enc1_pos1.data  = g_Encoder1.position;
 8001dde:	4b40      	ldr	r3, [pc, #256]	@ (8001ee0 <StartTaskCom+0x3c0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a40      	ldr	r2, [pc, #256]	@ (8001ee4 <StartTaskCom+0x3c4>)
 8001de4:	6013      	str	r3, [r2, #0]
    msg_Enc1_vel1.data  = g_Encoder1.velocity;
 8001de6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ee0 <StartTaskCom+0x3c0>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4a3f      	ldr	r2, [pc, #252]	@ (8001ee8 <StartTaskCom+0x3c8>)
 8001dec:	6013      	str	r3, [r2, #0]
    msg_Enc1VelTPS.data = (double)g_Encoder1.icVelocityTPS;
 8001dee:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee0 <StartTaskCom+0x3c0>)
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fbb8 	bl	8000568 <__aeabi_f2d>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	493b      	ldr	r1, [pc, #236]	@ (8001eec <StartTaskCom+0x3cc>)
 8001dfe:	e9c1 2300 	strd	r2, r3, [r1]
 8001e02:	e075      	b.n	8001ef0 <StartTaskCom+0x3d0>
 8001e04:	f3af 8000 	nop.w
 8001e08:	e0000000 	.word	0xe0000000
 8001e0c:	3f50624d 	.word	0x3f50624d
 8001e10:	08001549 	.word	0x08001549
 8001e14:	080014e1 	.word	0x080014e1
 8001e18:	080014c1 	.word	0x080014c1
 8001e1c:	08001495 	.word	0x08001495
 8001e20:	2000b32c 	.word	0x2000b32c
 8001e24:	080025c9 	.word	0x080025c9
 8001e28:	0800260d 	.word	0x0800260d
 8001e2c:	08002645 	.word	0x08002645
 8001e30:	080026b1 	.word	0x080026b1
 8001e34:	0802141c 	.word	0x0802141c
 8001e38:	08021444 	.word	0x08021444
 8001e3c:	08021448 	.word	0x08021448
 8001e40:	08021450 	.word	0x08021450
 8001e44:	20005244 	.word	0x20005244
 8001e48:	08021458 	.word	0x08021458
 8001e4c:	2000524c 	.word	0x2000524c
 8001e50:	08021460 	.word	0x08021460
 8001e54:	20005288 	.word	0x20005288
 8001e58:	0802146c 	.word	0x0802146c
 8001e5c:	2000529c 	.word	0x2000529c
 8001e60:	08021474 	.word	0x08021474
 8001e64:	20005258 	.word	0x20005258
 8001e68:	0802147c 	.word	0x0802147c
 8001e6c:	20005310 	.word	0x20005310
 8001e70:	08021488 	.word	0x08021488
 8001e74:	20005318 	.word	0x20005318
 8001e78:	08021494 	.word	0x08021494
 8001e7c:	20005320 	.word	0x20005320
 8001e80:	080214a0 	.word	0x080214a0
 8001e84:	20005330 	.word	0x20005330
 8001e88:	080214ac 	.word	0x080214ac
 8001e8c:	20005338 	.word	0x20005338
 8001e90:	080214b8 	.word	0x080214b8
 8001e94:	20005340 	.word	0x20005340
 8001e98:	080214c4 	.word	0x080214c4
 8001e9c:	20005350 	.word	0x20005350
 8001ea0:	080019cd 	.word	0x080019cd
 8001ea4:	20005358 	.word	0x20005358
 8001ea8:	20005248 	.word	0x20005248
 8001eac:	20005250 	.word	0x20005250
 8001eb0:	2000528c 	.word	0x2000528c
 8001eb4:	42fe0000 	.word	0x42fe0000
 8001eb8:	42c80000 	.word	0x42c80000
 8001ebc:	43480000 	.word	0x43480000
 8001ec0:	200052a0 	.word	0x200052a0
 8001ec4:	41200000 	.word	0x41200000
 8001ec8:	20005304 	.word	0x20005304
 8001ecc:	40400000 	.word	0x40400000
 8001ed0:	40a00000 	.word	0x40a00000
 8001ed4:	20005260 	.word	0x20005260
 8001ed8:	40390000 	.word	0x40390000
 8001edc:	3a83126f 	.word	0x3a83126f
 8001ee0:	2000520c 	.word	0x2000520c
 8001ee4:	20005314 	.word	0x20005314
 8001ee8:	2000531c 	.word	0x2000531c
 8001eec:	20005328 	.word	0x20005328

    msg_Enc2_pos2.data  = g_Encoder2.position;
 8001ef0:	4b56      	ldr	r3, [pc, #344]	@ (800204c <StartTaskCom+0x52c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a56      	ldr	r2, [pc, #344]	@ (8002050 <StartTaskCom+0x530>)
 8001ef6:	6013      	str	r3, [r2, #0]
    msg_Enc2_vel2.data  = g_Encoder2.velocity;
 8001ef8:	4b54      	ldr	r3, [pc, #336]	@ (800204c <StartTaskCom+0x52c>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a55      	ldr	r2, [pc, #340]	@ (8002054 <StartTaskCom+0x534>)
 8001efe:	6013      	str	r3, [r2, #0]
    msg_Enc2VelTPS.data = (double)g_Encoder2.icVelocityTPS;
 8001f00:	4b52      	ldr	r3, [pc, #328]	@ (800204c <StartTaskCom+0x52c>)
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fb2f 	bl	8000568 <__aeabi_f2d>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4952      	ldr	r1, [pc, #328]	@ (8002058 <StartTaskCom+0x538>)
 8001f10:	e9c1 2300 	strd	r2, r3, [r1]

    // LED D3 ON
    HAL_GPIO_WritePin(O_LED_D3_GPIO_Port, O_LED_D3_Pin, GPIO_PIN_RESET);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2180      	movs	r1, #128	@ 0x80
 8001f18:	4850      	ldr	r0, [pc, #320]	@ (800205c <StartTaskCom+0x53c>)
 8001f1a:	f003 fa93 	bl	8005444 <HAL_GPIO_WritePin>

    // Pubblicazioni di esempio
    rcl_ret_t ret = RCL_RET_OK;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    ret += rcl_publish(&publisher_int32, &msgInt32, NULL);
 8001f24:	2200      	movs	r2, #0
 8001f26:	494e      	ldr	r1, [pc, #312]	@ (8002060 <StartTaskCom+0x540>)
 8001f28:	484e      	ldr	r0, [pc, #312]	@ (8002064 <StartTaskCom+0x544>)
 8001f2a:	f011 fb65 	bl	80135f8 <rcl_publish>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f34:	4413      	add	r3, r2
 8001f36:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    ret += rcl_publish(&publisher_int64, &msgInt64, NULL);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	494a      	ldr	r1, [pc, #296]	@ (8002068 <StartTaskCom+0x548>)
 8001f3e:	484b      	ldr	r0, [pc, #300]	@ (800206c <StartTaskCom+0x54c>)
 8001f40:	f011 fb5a 	bl	80135f8 <rcl_publish>
 8001f44:	4602      	mov	r2, r0
 8001f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    ret += rcl_publish(&publisher_color, &msgColorRGBA, NULL);
 8001f50:	2200      	movs	r2, #0
 8001f52:	4947      	ldr	r1, [pc, #284]	@ (8002070 <StartTaskCom+0x550>)
 8001f54:	4847      	ldr	r0, [pc, #284]	@ (8002074 <StartTaskCom+0x554>)
 8001f56:	f011 fb4f 	bl	80135f8 <rcl_publish>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f60:	4413      	add	r3, r2
 8001f62:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    ret += rcl_publish(&publisher_batt, &msgBattery, NULL);
 8001f66:	2200      	movs	r2, #0
 8001f68:	4943      	ldr	r1, [pc, #268]	@ (8002078 <StartTaskCom+0x558>)
 8001f6a:	4844      	ldr	r0, [pc, #272]	@ (800207c <StartTaskCom+0x55c>)
 8001f6c:	f011 fb44 	bl	80135f8 <rcl_publish>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f76:	4413      	add	r3, r2
 8001f78:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    ret += rcl_publish(&publisher_temp, &msgTemperature, NULL);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	4940      	ldr	r1, [pc, #256]	@ (8002080 <StartTaskCom+0x560>)
 8001f80:	4840      	ldr	r0, [pc, #256]	@ (8002084 <StartTaskCom+0x564>)
 8001f82:	f011 fb39 	bl	80135f8 <rcl_publish>
 8001f86:	4602      	mov	r2, r0
 8001f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    ret += rcl_publish(&publisher_Enc1_pos1,  &msg_Enc1_pos1,  NULL);
 8001f92:	2200      	movs	r2, #0
 8001f94:	493c      	ldr	r1, [pc, #240]	@ (8002088 <StartTaskCom+0x568>)
 8001f96:	483d      	ldr	r0, [pc, #244]	@ (800208c <StartTaskCom+0x56c>)
 8001f98:	f011 fb2e 	bl	80135f8 <rcl_publish>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    ret += rcl_publish(&publisher_Enc1_vel1,  &msg_Enc1_vel1,  NULL);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	4939      	ldr	r1, [pc, #228]	@ (8002090 <StartTaskCom+0x570>)
 8001fac:	4839      	ldr	r0, [pc, #228]	@ (8002094 <StartTaskCom+0x574>)
 8001fae:	f011 fb23 	bl	80135f8 <rcl_publish>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001fb8:	4413      	add	r3, r2
 8001fba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    ret += rcl_publish(&publisher_Enc1VelTPS, &msg_Enc1VelTPS, NULL);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	4935      	ldr	r1, [pc, #212]	@ (8002098 <StartTaskCom+0x578>)
 8001fc2:	4836      	ldr	r0, [pc, #216]	@ (800209c <StartTaskCom+0x57c>)
 8001fc4:	f011 fb18 	bl	80135f8 <rcl_publish>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001fce:	4413      	add	r3, r2
 8001fd0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    ret += rcl_publish(&publisher_Enc2_pos2,  &msg_Enc2_pos2,  NULL);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	491e      	ldr	r1, [pc, #120]	@ (8002050 <StartTaskCom+0x530>)
 8001fd8:	4831      	ldr	r0, [pc, #196]	@ (80020a0 <StartTaskCom+0x580>)
 8001fda:	f011 fb0d 	bl	80135f8 <rcl_publish>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    ret += rcl_publish(&publisher_Enc2_vel2,  &msg_Enc2_vel2,  NULL);
 8001fea:	2200      	movs	r2, #0
 8001fec:	4919      	ldr	r1, [pc, #100]	@ (8002054 <StartTaskCom+0x534>)
 8001fee:	482d      	ldr	r0, [pc, #180]	@ (80020a4 <StartTaskCom+0x584>)
 8001ff0:	f011 fb02 	bl	80135f8 <rcl_publish>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    ret += rcl_publish(&publisher_Enc2VelTPS, &msg_Enc2VelTPS, NULL);
 8002000:	2200      	movs	r2, #0
 8002002:	4915      	ldr	r1, [pc, #84]	@ (8002058 <StartTaskCom+0x538>)
 8002004:	4828      	ldr	r0, [pc, #160]	@ (80020a8 <StartTaskCom+0x588>)
 8002006:	f011 faf7 	bl	80135f8 <rcl_publish>
 800200a:	4602      	mov	r2, r0
 800200c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002010:	4413      	add	r3, r2
 8002012:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

    if (ret != RCL_RET_OK)
 8002016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800201a:	2b00      	cmp	r3, #0
 800201c:	d004      	beq.n	8002028 <StartTaskCom+0x508>
    {
      printf("Error publishing (line %d)\n", __LINE__);
 800201e:	f240 2103 	movw	r1, #515	@ 0x203
 8002022:	4822      	ldr	r0, [pc, #136]	@ (80020ac <StartTaskCom+0x58c>)
 8002024:	f01e f8f4 	bl	8020210 <iprintf>
    }

    // Esegui spin dell'executor per gestire la callback del subscriber
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(10));
 8002028:	f107 0120 	add.w	r1, r7, #32
 800202c:	4a20      	ldr	r2, [pc, #128]	@ (80020b0 <StartTaskCom+0x590>)
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	4608      	mov	r0, r1
 8002034:	f012 f900 	bl	8014238 <rclc_executor_spin_some>

    // LED D3 OFF
    HAL_GPIO_WritePin(O_LED_D3_GPIO_Port, O_LED_D3_Pin, GPIO_PIN_SET);
 8002038:	2201      	movs	r2, #1
 800203a:	2180      	movs	r1, #128	@ 0x80
 800203c:	4807      	ldr	r0, [pc, #28]	@ (800205c <StartTaskCom+0x53c>)
 800203e:	f003 fa01 	bl	8005444 <HAL_GPIO_WritePin>

    osDelay(100);
 8002042:	2064      	movs	r0, #100	@ 0x64
 8002044:	f00b ff94 	bl	800df70 <osDelay>
  {
 8002048:	e699      	b.n	8001d7e <StartTaskCom+0x25e>
 800204a:	bf00      	nop
 800204c:	20005224 	.word	0x20005224
 8002050:	20005334 	.word	0x20005334
 8002054:	2000533c 	.word	0x2000533c
 8002058:	20005348 	.word	0x20005348
 800205c:	40020000 	.word	0x40020000
 8002060:	20005248 	.word	0x20005248
 8002064:	20005244 	.word	0x20005244
 8002068:	20005250 	.word	0x20005250
 800206c:	2000524c 	.word	0x2000524c
 8002070:	2000528c 	.word	0x2000528c
 8002074:	20005288 	.word	0x20005288
 8002078:	200052a0 	.word	0x200052a0
 800207c:	2000529c 	.word	0x2000529c
 8002080:	20005260 	.word	0x20005260
 8002084:	20005258 	.word	0x20005258
 8002088:	20005314 	.word	0x20005314
 800208c:	20005310 	.word	0x20005310
 8002090:	2000531c 	.word	0x2000531c
 8002094:	20005318 	.word	0x20005318
 8002098:	20005328 	.word	0x20005328
 800209c:	20005320 	.word	0x20005320
 80020a0:	20005330 	.word	0x20005330
 80020a4:	20005338 	.word	0x20005338
 80020a8:	20005340 	.word	0x20005340
 80020ac:	080214cc 	.word	0x080214cc
 80020b0:	00989680 	.word	0x00989680

080020b4 <StartTaskAnalog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAnalog */
void StartTaskAnalog(void *argument)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAnalog */
  /* Infinite loop */
  for(;;)
  {
    if(dmaTransferComplete == 1)
 80020bc:	4b05      	ldr	r3, [pc, #20]	@ (80020d4 <StartTaskAnalog+0x20>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d1fb      	bne.n	80020bc <StartTaskAnalog+0x8>
    {
      dmaTransferComplete = 0;
 80020c4:	4b03      	ldr	r3, [pc, #12]	@ (80020d4 <StartTaskAnalog+0x20>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
      osDelay(1);
 80020ca:	2001      	movs	r0, #1
 80020cc:	f00b ff50 	bl	800df70 <osDelay>
    if(dmaTransferComplete == 1)
 80020d0:	e7f4      	b.n	80020bc <StartTaskAnalog+0x8>
 80020d2:	bf00      	nop
 80020d4:	2000afd0 	.word	0x2000afd0

080020d8 <CallbackTimer_1m>:
  /* USER CODE END StartTaskAnalog */
}

/* CallbackTimer_1m function */
void CallbackTimer_1m(void *argument)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimer_1m */
  // Codice eseguito ogni 1 ms
	//ENC_Update();
  /* USER CODE END CallbackTimer_1m */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB9   ------> S_TIM11_CH1
*/
void MX_GPIO_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08c      	sub	sp, #48	@ 0x30
 80020f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
 8002100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
 8002106:	4b74      	ldr	r3, [pc, #464]	@ (80022d8 <MX_GPIO_Init+0x1ec>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	4a73      	ldr	r2, [pc, #460]	@ (80022d8 <MX_GPIO_Init+0x1ec>)
 800210c:	f043 0310 	orr.w	r3, r3, #16
 8002110:	6313      	str	r3, [r2, #48]	@ 0x30
 8002112:	4b71      	ldr	r3, [pc, #452]	@ (80022d8 <MX_GPIO_Init+0x1ec>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	61bb      	str	r3, [r7, #24]
 800211c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	4b6d      	ldr	r3, [pc, #436]	@ (80022d8 <MX_GPIO_Init+0x1ec>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	4a6c      	ldr	r2, [pc, #432]	@ (80022d8 <MX_GPIO_Init+0x1ec>)
 8002128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800212c:	6313      	str	r3, [r2, #48]	@ 0x30
 800212e:	4b6a      	ldr	r3, [pc, #424]	@ (80022d8 <MX_GPIO_Init+0x1ec>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	613b      	str	r3, [r7, #16]
 800213e:	4b66      	ldr	r3, [pc, #408]	@ (80022d8 <MX_GPIO_Init+0x1ec>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	4a65      	ldr	r2, [pc, #404]	@ (80022d8 <MX_GPIO_Init+0x1ec>)
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	6313      	str	r3, [r2, #48]	@ 0x30
 800214a:	4b63      	ldr	r3, [pc, #396]	@ (80022d8 <MX_GPIO_Init+0x1ec>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	613b      	str	r3, [r7, #16]
 8002154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b5f      	ldr	r3, [pc, #380]	@ (80022d8 <MX_GPIO_Init+0x1ec>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	4a5e      	ldr	r2, [pc, #376]	@ (80022d8 <MX_GPIO_Init+0x1ec>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6313      	str	r3, [r2, #48]	@ 0x30
 8002166:	4b5c      	ldr	r3, [pc, #368]	@ (80022d8 <MX_GPIO_Init+0x1ec>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	4b58      	ldr	r3, [pc, #352]	@ (80022d8 <MX_GPIO_Init+0x1ec>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	4a57      	ldr	r2, [pc, #348]	@ (80022d8 <MX_GPIO_Init+0x1ec>)
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	6313      	str	r3, [r2, #48]	@ 0x30
 8002182:	4b55      	ldr	r3, [pc, #340]	@ (80022d8 <MX_GPIO_Init+0x1ec>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
 8002192:	4b51      	ldr	r3, [pc, #324]	@ (80022d8 <MX_GPIO_Init+0x1ec>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	4a50      	ldr	r2, [pc, #320]	@ (80022d8 <MX_GPIO_Init+0x1ec>)
 8002198:	f043 0308 	orr.w	r3, r3, #8
 800219c:	6313      	str	r3, [r2, #48]	@ 0x30
 800219e:	4b4e      	ldr	r3, [pc, #312]	@ (80022d8 <MX_GPIO_Init+0x1ec>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, O_LED_D2_Pin|O_LED_D3_Pin|O_PWR_MOT_EN_Pin, GPIO_PIN_RESET);
 80021aa:	2200      	movs	r2, #0
 80021ac:	f44f 6198 	mov.w	r1, #1216	@ 0x4c0
 80021b0:	484a      	ldr	r0, [pc, #296]	@ (80022dc <MX_GPIO_Init+0x1f0>)
 80021b2:	f003 f947 	bl	8005444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PE8_MOT1_AUX_Pin|PE9_MOT2_AUX_Pin|PE12_TEMP1_Pin|PE13_TEMP2_Pin
 80021b6:	2200      	movs	r2, #0
 80021b8:	f44f 4173 	mov.w	r1, #62208	@ 0xf300
 80021bc:	4848      	ldr	r0, [pc, #288]	@ (80022e0 <MX_GPIO_Init+0x1f4>)
 80021be:	f003 f941 	bl	8005444 <HAL_GPIO_WritePin>
                          |PE14_TEMP3_Pin|PE15_TEMP4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB12_MOT1_EN_Pin|O_PWR_REG_EN_Pin, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	f44f 5188 	mov.w	r1, #4352	@ 0x1100
 80021c8:	4846      	ldr	r0, [pc, #280]	@ (80022e4 <MX_GPIO_Init+0x1f8>)
 80021ca:	f003 f93b 	bl	8005444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, O_PWR_SBC_EN_Pin|O_SPI_CS2_Pin|O_SPI_CS1_Pin, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 80021d4:	4844      	ldr	r0, [pc, #272]	@ (80022e8 <MX_GPIO_Init+0x1fc>)
 80021d6:	f003 f935 	bl	8005444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD3_MOT2_EN_GPIO_Port, PD3_MOT2_EN_Pin, GPIO_PIN_RESET);
 80021da:	2200      	movs	r2, #0
 80021dc:	2108      	movs	r1, #8
 80021de:	4843      	ldr	r0, [pc, #268]	@ (80022ec <MX_GPIO_Init+0x200>)
 80021e0:	f003 f930 	bl	8005444 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : I_KEY1_Pin I_KEY0_Pin */
  GPIO_InitStruct.Pin = I_KEY1_Pin|I_KEY0_Pin;
 80021e4:	2318      	movs	r3, #24
 80021e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e8:	2300      	movs	r3, #0
 80021ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ec:	2301      	movs	r3, #1
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021f0:	f107 031c 	add.w	r3, r7, #28
 80021f4:	4619      	mov	r1, r3
 80021f6:	483a      	ldr	r0, [pc, #232]	@ (80022e0 <MX_GPIO_Init+0x1f4>)
 80021f8:	f002 ff88 	bl	800510c <HAL_GPIO_Init>

  /*Configure GPIO pins : O_LED_D2_Pin O_LED_D3_Pin O_PWR_MOT_EN_Pin */
  GPIO_InitStruct.Pin = O_LED_D2_Pin|O_LED_D3_Pin|O_PWR_MOT_EN_Pin;
 80021fc:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002202:	2301      	movs	r3, #1
 8002204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	f107 031c 	add.w	r3, r7, #28
 8002212:	4619      	mov	r1, r3
 8002214:	4831      	ldr	r0, [pc, #196]	@ (80022dc <MX_GPIO_Init+0x1f0>)
 8002216:	f002 ff79 	bl	800510c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8_MOT1_AUX_Pin PE9_MOT2_AUX_Pin PE12_TEMP1_Pin PE13_TEMP2_Pin
                           PE14_TEMP3_Pin PE15_TEMP4_Pin */
  GPIO_InitStruct.Pin = PE8_MOT1_AUX_Pin|PE9_MOT2_AUX_Pin|PE12_TEMP1_Pin|PE13_TEMP2_Pin
 800221a:	f44f 4373 	mov.w	r3, #62208	@ 0xf300
 800221e:	61fb      	str	r3, [r7, #28]
                          |PE14_TEMP3_Pin|PE15_TEMP4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002220:	2301      	movs	r3, #1
 8002222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800222c:	f107 031c 	add.w	r3, r7, #28
 8002230:	4619      	mov	r1, r3
 8002232:	482b      	ldr	r0, [pc, #172]	@ (80022e0 <MX_GPIO_Init+0x1f4>)
 8002234:	f002 ff6a 	bl	800510c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12_MOT1_EN_Pin O_PWR_REG_EN_Pin */
  GPIO_InitStruct.Pin = PB12_MOT1_EN_Pin|O_PWR_REG_EN_Pin;
 8002238:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800223c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800223e:	2301      	movs	r3, #1
 8002240:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002246:	2300      	movs	r3, #0
 8002248:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800224a:	f107 031c 	add.w	r3, r7, #28
 800224e:	4619      	mov	r1, r3
 8002250:	4824      	ldr	r0, [pc, #144]	@ (80022e4 <MX_GPIO_Init+0x1f8>)
 8002252:	f002 ff5b 	bl	800510c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11_EXTI11_E1_IDX_Pin PD12_EXTI12_E2_IDX_Pin */
  GPIO_InitStruct.Pin = PD11_EXTI11_E1_IDX_Pin|PD12_EXTI12_E2_IDX_Pin;
 8002256:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800225a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800225c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002260:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002266:	f107 031c 	add.w	r3, r7, #28
 800226a:	4619      	mov	r1, r3
 800226c:	481f      	ldr	r0, [pc, #124]	@ (80022ec <MX_GPIO_Init+0x200>)
 800226e:	f002 ff4d 	bl	800510c <HAL_GPIO_Init>

  /*Configure GPIO pins : O_PWR_SBC_EN_Pin O_SPI_CS2_Pin O_SPI_CS1_Pin */
  GPIO_InitStruct.Pin = O_PWR_SBC_EN_Pin|O_SPI_CS2_Pin|O_SPI_CS1_Pin;
 8002272:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8002276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002278:	2301      	movs	r3, #1
 800227a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227c:	2300      	movs	r3, #0
 800227e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002280:	2300      	movs	r3, #0
 8002282:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002284:	f107 031c 	add.w	r3, r7, #28
 8002288:	4619      	mov	r1, r3
 800228a:	4817      	ldr	r0, [pc, #92]	@ (80022e8 <MX_GPIO_Init+0x1fc>)
 800228c:	f002 ff3e 	bl	800510c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3_MOT2_EN_Pin */
  GPIO_InitStruct.Pin = PD3_MOT2_EN_Pin;
 8002290:	2308      	movs	r3, #8
 8002292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002294:	2301      	movs	r3, #1
 8002296:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(PD3_MOT2_EN_GPIO_Port, &GPIO_InitStruct);
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	4619      	mov	r1, r3
 80022a6:	4811      	ldr	r0, [pc, #68]	@ (80022ec <MX_GPIO_Init+0x200>)
 80022a8:	f002 ff30 	bl	800510c <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM_AUX2_PWM_Pin */
  GPIO_InitStruct.Pin = TIM_AUX2_PWM_Pin;
 80022ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80022be:	2303      	movs	r3, #3
 80022c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TIM_AUX2_PWM_GPIO_Port, &GPIO_InitStruct);
 80022c2:	f107 031c 	add.w	r3, r7, #28
 80022c6:	4619      	mov	r1, r3
 80022c8:	4806      	ldr	r0, [pc, #24]	@ (80022e4 <MX_GPIO_Init+0x1f8>)
 80022ca:	f002 ff1f 	bl	800510c <HAL_GPIO_Init>

}
 80022ce:	bf00      	nop
 80022d0:	3730      	adds	r7, #48	@ 0x30
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40020400 	.word	0x40020400
 80022e8:	40020800 	.word	0x40020800
 80022ec:	40020c00 	.word	0x40020c00

080022f0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80022f4:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <MX_I2C2_Init+0x50>)
 80022f6:	4a13      	ldr	r2, [pc, #76]	@ (8002344 <MX_I2C2_Init+0x54>)
 80022f8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80022fa:	4b11      	ldr	r3, [pc, #68]	@ (8002340 <MX_I2C2_Init+0x50>)
 80022fc:	4a12      	ldr	r2, [pc, #72]	@ (8002348 <MX_I2C2_Init+0x58>)
 80022fe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002300:	4b0f      	ldr	r3, [pc, #60]	@ (8002340 <MX_I2C2_Init+0x50>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002306:	4b0e      	ldr	r3, [pc, #56]	@ (8002340 <MX_I2C2_Init+0x50>)
 8002308:	2200      	movs	r2, #0
 800230a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800230c:	4b0c      	ldr	r3, [pc, #48]	@ (8002340 <MX_I2C2_Init+0x50>)
 800230e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002312:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002314:	4b0a      	ldr	r3, [pc, #40]	@ (8002340 <MX_I2C2_Init+0x50>)
 8002316:	2200      	movs	r2, #0
 8002318:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <MX_I2C2_Init+0x50>)
 800231c:	2200      	movs	r2, #0
 800231e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002320:	4b07      	ldr	r3, [pc, #28]	@ (8002340 <MX_I2C2_Init+0x50>)
 8002322:	2200      	movs	r2, #0
 8002324:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002326:	4b06      	ldr	r3, [pc, #24]	@ (8002340 <MX_I2C2_Init+0x50>)
 8002328:	2200      	movs	r2, #0
 800232a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800232c:	4804      	ldr	r0, [pc, #16]	@ (8002340 <MX_I2C2_Init+0x50>)
 800232e:	f003 f8a3 	bl	8005478 <HAL_I2C_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002338:	f000 f940 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	2000afd8 	.word	0x2000afd8
 8002344:	40005800 	.word	0x40005800
 8002348:	000186a0 	.word	0x000186a0

0800234c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	@ 0x28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a19      	ldr	r2, [pc, #100]	@ (80023d0 <HAL_I2C_MspInit+0x84>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d12c      	bne.n	80023c8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	4b18      	ldr	r3, [pc, #96]	@ (80023d4 <HAL_I2C_MspInit+0x88>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	4a17      	ldr	r2, [pc, #92]	@ (80023d4 <HAL_I2C_MspInit+0x88>)
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	6313      	str	r3, [r2, #48]	@ 0x30
 800237e:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <HAL_I2C_MspInit+0x88>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800238a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800238e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002390:	2312      	movs	r3, #18
 8002392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002398:	2303      	movs	r3, #3
 800239a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800239c:	2304      	movs	r3, #4
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a0:	f107 0314 	add.w	r3, r7, #20
 80023a4:	4619      	mov	r1, r3
 80023a6:	480c      	ldr	r0, [pc, #48]	@ (80023d8 <HAL_I2C_MspInit+0x8c>)
 80023a8:	f002 feb0 	bl	800510c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <HAL_I2C_MspInit+0x88>)
 80023b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b4:	4a07      	ldr	r2, [pc, #28]	@ (80023d4 <HAL_I2C_MspInit+0x88>)
 80023b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80023bc:	4b05      	ldr	r3, [pc, #20]	@ (80023d4 <HAL_I2C_MspInit+0x88>)
 80023be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80023c8:	bf00      	nop
 80023ca:	3728      	adds	r7, #40	@ 0x28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40005800 	.word	0x40005800
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40020400 	.word	0x40020400

080023dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023e0:	f001 fc34 	bl	8003c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80023e4:	f000 f846 	bl	8002474 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80023e8:	f7ff fe80 	bl	80020ec <MX_GPIO_Init>
  MX_DMA_Init();
 80023ec:	f7ff f81a 	bl	8001424 <MX_DMA_Init>
  MX_TIM1_Init();
 80023f0:	f000 fdde 	bl	8002fb0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80023f4:	f000 fe34 	bl	8003060 <MX_TIM2_Init>
  MX_TIM8_Init();
 80023f8:	f000 ff7c 	bl	80032f4 <MX_TIM8_Init>
  MX_I2C2_Init();
 80023fc:	f7ff ff78 	bl	80022f0 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002400:	f000 fb5c 	bl	8002abc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002404:	f001 fa62 	bl	80038cc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002408:	f7fe fb1e 	bl	8000a48 <MX_ADC1_Init>
  MX_ADC3_Init();
 800240c:	f7fe fbbe 	bl	8000b8c <MX_ADC3_Init>
  MX_TIM3_Init();
 8002410:	f000 fe7a 	bl	8003108 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002414:	f000 fecc 	bl	80031b0 <MX_TIM4_Init>
  MX_UART5_Init();
 8002418:	f001 fa2e 	bl	8003878 <MX_UART5_Init>
  MX_CRC_Init();
 800241c:	f7fe fd7c 	bl	8000f18 <MX_CRC_Init>
  MX_RNG_Init();
 8002420:	f000 fb16 	bl	8002a50 <MX_RNG_Init>
  MX_TIM14_Init();
 8002424:	f001 f814 	bl	8003450 <MX_TIM14_Init>
  MX_CAN1_Init();
 8002428:	f7fe fcfa 	bl	8000e20 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 800242c:	f001 fa78 	bl	8003920 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8002430:	f000 ff12 	bl	8003258 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim5);
 8002434:	480d      	ldr	r0, [pc, #52]	@ (800246c <main+0x90>)
 8002436:	f005 f981 	bl	800773c <HAL_TIM_Base_Start_IT>

  // 2) Avvia il PWM su TIM8
  MotorControl_StartPWM();
 800243a:	f000 fa29 	bl	8002890 <MotorControl_StartPWM>

  // Imposta i motori inizialmente fermi ma enable=true
  MotorControl_SetMotors(0.0f, 0.0f, true, true, false, false);
 800243e:	2300      	movs	r3, #0
 8002440:	2200      	movs	r2, #0
 8002442:	2101      	movs	r1, #1
 8002444:	2001      	movs	r0, #1
 8002446:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8002470 <main+0x94>
 800244a:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8002470 <main+0x94>
 800244e:	f000 fa35 	bl	80028bc <MotorControl_SetMotors>


  // Inizializza il modulo encoder (TIM1/TIM2, etc.)
  ENC_Init();
 8002452:	f7ff f8cd 	bl	80015f0 <ENC_Init>

  // Inizializza TIM3/TIM4 (se stai usando anche input capture)
  ENC_IC_Init();
 8002456:	f7ff f95d 	bl	8001714 <ENC_IC_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800245a:	f00b fcad 	bl	800ddb8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800245e:	f7ff fafd 	bl	8001a5c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002462:	f00b fccd 	bl	800de00 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8002466:	bf00      	nop
 8002468:	e7fd      	b.n	8002466 <main+0x8a>
 800246a:	bf00      	nop
 800246c:	2000b20c 	.word	0x2000b20c
 8002470:	00000000 	.word	0x00000000

08002474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b094      	sub	sp, #80	@ 0x50
 8002478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800247a:	f107 0320 	add.w	r3, r7, #32
 800247e:	2230      	movs	r2, #48	@ 0x30
 8002480:	2100      	movs	r1, #0
 8002482:	4618      	mov	r0, r3
 8002484:	f01e f844 	bl	8020510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]
 8002496:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002498:	2300      	movs	r3, #0
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	4b28      	ldr	r3, [pc, #160]	@ (8002540 <SystemClock_Config+0xcc>)
 800249e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a0:	4a27      	ldr	r2, [pc, #156]	@ (8002540 <SystemClock_Config+0xcc>)
 80024a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80024a8:	4b25      	ldr	r3, [pc, #148]	@ (8002540 <SystemClock_Config+0xcc>)
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024b4:	2300      	movs	r3, #0
 80024b6:	607b      	str	r3, [r7, #4]
 80024b8:	4b22      	ldr	r3, [pc, #136]	@ (8002544 <SystemClock_Config+0xd0>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a21      	ldr	r2, [pc, #132]	@ (8002544 <SystemClock_Config+0xd0>)
 80024be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002544 <SystemClock_Config+0xd0>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024cc:	607b      	str	r3, [r7, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024d0:	2301      	movs	r3, #1
 80024d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024da:	2302      	movs	r3, #2
 80024dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80024e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80024e4:	2304      	movs	r3, #4
 80024e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80024e8:	23a8      	movs	r3, #168	@ 0xa8
 80024ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024ec:	2302      	movs	r3, #2
 80024ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80024f0:	2307      	movs	r3, #7
 80024f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024f4:	f107 0320 	add.w	r3, r7, #32
 80024f8:	4618      	mov	r0, r3
 80024fa:	f004 fb53 	bl	8006ba4 <HAL_RCC_OscConfig>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002504:	f000 f85a 	bl	80025bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002508:	230f      	movs	r3, #15
 800250a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800250c:	2302      	movs	r3, #2
 800250e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002514:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002518:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800251a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800251e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002520:	f107 030c 	add.w	r3, r7, #12
 8002524:	2105      	movs	r1, #5
 8002526:	4618      	mov	r0, r3
 8002528:	f004 fdb4 	bl	8007094 <HAL_RCC_ClockConfig>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002532:	f000 f843 	bl	80025bc <Error_Handler>
  }
}
 8002536:	bf00      	nop
 8002538:	3750      	adds	r7, #80	@ 0x50
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800
 8002544:	40007000 	.word	0x40007000

08002548 <HAL_ADC_ConvCpltCallback>:
  * @note   This example shows a simple way to report end of conversion
  *         and get conversion result. You can add your own implementation.
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  //ubDmaTransferStatus = 1;

  /* Set LED depending on DMA transfer status */
  /* - Turn-on if DMA transfer is completed */
  /* - Turn-off if DMA transfer is not completed */
	dmaTransferComplete = 1;
 8002550:	4b04      	ldr	r3, [pc, #16]	@ (8002564 <HAL_ADC_ConvCpltCallback+0x1c>)
 8002552:	2201      	movs	r2, #1
 8002554:	601a      	str	r2, [r3, #0]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	2000afd0 	.word	0x2000afd0

08002568 <HAL_ADC_ConvHalfCpltCallback>:
  * @note   This example shows a simple way to report end of conversion
  *         and get conversion result. You can add your own implementation.
  * @retval None
  */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Set LED depending on DMA transfer status */
  /* - Turn-on if DMA transfer is completed */
  /* - Turn-off if DMA transfer is not completed */
	dmaHalfTransferComplete=1;
 8002570:	4b04      	ldr	r3, [pc, #16]	@ (8002584 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8002572:	2201      	movs	r2, #1
 8002574:	601a      	str	r2, [r3, #0]
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	2000afd4 	.word	0x2000afd4

08002588 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM5)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a07      	ldr	r2, [pc, #28]	@ (80025b4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d101      	bne.n	800259e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		// Codice da eseguire ogni 1ms
		ENC_Update();
 800259a:	f7ff f86b 	bl	8001674 <ENC_Update>
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a05      	ldr	r2, [pc, #20]	@ (80025b8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d101      	bne.n	80025ac <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 80025a8:	f001 fb72 	bl	8003c90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40000c00 	.word	0x40000c00
 80025b8:	40014400 	.word	0x40014400

080025bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80025c0:	b672      	cpsid	i
}
 80025c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <Error_Handler+0x8>

080025c8 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80025d2:	4b0c      	ldr	r3, [pc, #48]	@ (8002604 <microros_allocate+0x3c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4413      	add	r3, r2
 80025dc:	461a      	mov	r2, r3
 80025de:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <microros_allocate+0x3c>)
 80025e0:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80025e2:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <microros_allocate+0x40>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4413      	add	r3, r2
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <microros_allocate+0x40>)
 80025f0:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7fe fcc6 	bl	8000f84 <pvPortMallocMicroROS>
 80025f8:	4603      	mov	r3, r0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000b02c 	.word	0x2000b02c
 8002608:	2000b030 	.word	0x2000b030

0800260c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00c      	beq.n	8002636 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7fe fdd5 	bl	80011cc <getBlockSize>
 8002622:	4603      	mov	r3, r0
 8002624:	4a06      	ldr	r2, [pc, #24]	@ (8002640 <microros_deallocate+0x34>)
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	461a      	mov	r2, r3
 800262c:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <microros_deallocate+0x34>)
 800262e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7fe fd6f 	bl	8001114 <vPortFreeMicroROS>
  }
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	2000b030 	.word	0x2000b030

08002644 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002650:	4b15      	ldr	r3, [pc, #84]	@ (80026a8 <microros_reallocate+0x64>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	4413      	add	r3, r2
 800265a:	461a      	mov	r2, r3
 800265c:	4b12      	ldr	r3, [pc, #72]	@ (80026a8 <microros_reallocate+0x64>)
 800265e:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002660:	4b12      	ldr	r3, [pc, #72]	@ (80026ac <microros_reallocate+0x68>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	461a      	mov	r2, r3
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	4413      	add	r3, r2
 800266a:	461a      	mov	r2, r3
 800266c:	4b0f      	ldr	r3, [pc, #60]	@ (80026ac <microros_reallocate+0x68>)
 800266e:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d104      	bne.n	8002680 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8002676:	68b8      	ldr	r0, [r7, #8]
 8002678:	f7fe fc84 	bl	8000f84 <pvPortMallocMicroROS>
 800267c:	4603      	mov	r3, r0
 800267e:	e00e      	b.n	800269e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f7fe fda3 	bl	80011cc <getBlockSize>
 8002686:	4603      	mov	r3, r0
 8002688:	4a08      	ldr	r2, [pc, #32]	@ (80026ac <microros_reallocate+0x68>)
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	461a      	mov	r2, r3
 8002690:	4b06      	ldr	r3, [pc, #24]	@ (80026ac <microros_reallocate+0x68>)
 8002692:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f7fe fdb6 	bl	8001208 <pvPortReallocMicroROS>
 800269c:	4603      	mov	r3, r0
  }
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	2000b02c 	.word	0x2000b02c
 80026ac:	2000b030 	.word	0x2000b030

080026b0 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	fb02 f303 	mul.w	r3, r2, r3
 80026c4:	4a0c      	ldr	r2, [pc, #48]	@ (80026f8 <microros_zero_allocate+0x48>)
 80026c6:	6812      	ldr	r2, [r2, #0]
 80026c8:	4413      	add	r3, r2
 80026ca:	461a      	mov	r2, r3
 80026cc:	4b0a      	ldr	r3, [pc, #40]	@ (80026f8 <microros_zero_allocate+0x48>)
 80026ce:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	fb02 f303 	mul.w	r3, r2, r3
 80026d8:	4a08      	ldr	r2, [pc, #32]	@ (80026fc <microros_zero_allocate+0x4c>)
 80026da:	6812      	ldr	r2, [r2, #0]
 80026dc:	4413      	add	r3, r2
 80026de:	461a      	mov	r2, r3
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <microros_zero_allocate+0x4c>)
 80026e2:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80026e4:	68b9      	ldr	r1, [r7, #8]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f7fe fdbb 	bl	8001262 <pvPortCallocMicroROS>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	2000b02c 	.word	0x2000b02c
 80026fc:	2000b030 	.word	0x2000b030

08002700 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002700:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002704:	b086      	sub	sp, #24
 8002706:	af00      	add	r7, sp, #0
 8002708:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002712:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002716:	a320      	add	r3, pc, #128	@ (adr r3, 8002798 <UTILS_NanosecondsToTimespec+0x98>)
 8002718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271c:	f7fd ffcc 	bl	80006b8 <__aeabi_ldivmod>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800272a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800272e:	a31a      	add	r3, pc, #104	@ (adr r3, 8002798 <UTILS_NanosecondsToTimespec+0x98>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f7fd ffc0 	bl	80006b8 <__aeabi_ldivmod>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	da20      	bge.n	8002786 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a11      	ldr	r2, [pc, #68]	@ (8002790 <UTILS_NanosecondsToTimespec+0x90>)
 800274a:	fb82 1203 	smull	r1, r2, r2, r3
 800274e:	1712      	asrs	r2, r2, #28
 8002750:	17db      	asrs	r3, r3, #31
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	3301      	adds	r3, #1
 8002756:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275e:	6979      	ldr	r1, [r7, #20]
 8002760:	17c8      	asrs	r0, r1, #31
 8002762:	460c      	mov	r4, r1
 8002764:	4605      	mov	r5, r0
 8002766:	ebb2 0804 	subs.w	r8, r2, r4
 800276a:	eb63 0905 	sbc.w	r9, r3, r5
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	4906      	ldr	r1, [pc, #24]	@ (8002794 <UTILS_NanosecondsToTimespec+0x94>)
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	441a      	add	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	609a      	str	r2, [r3, #8]
    }
}
 8002786:	bf00      	nop
 8002788:	3718      	adds	r7, #24
 800278a:	46bd      	mov	sp, r7
 800278c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002790:	44b82fa1 	.word	0x44b82fa1
 8002794:	3b9aca00 	.word	0x3b9aca00
 8002798:	3b9aca00 	.word	0x3b9aca00
 800279c:	00000000 	.word	0x00000000

080027a0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80027a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a4:	b08e      	sub	sp, #56	@ 0x38
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80027aa:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80027ac:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80027b0:	2300      	movs	r3, #0
 80027b2:	6013      	str	r3, [r2, #0]
 80027b4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80027c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027c6:	4618      	mov	r0, r3
 80027c8:	f00c ff84 	bl	800f6d4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80027cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ce:	17da      	asrs	r2, r3, #31
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	61fa      	str	r2, [r7, #28]
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	69b9      	ldr	r1, [r7, #24]
 80027de:	000b      	movs	r3, r1
 80027e0:	2200      	movs	r2, #0
 80027e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80027e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e8:	2200      	movs	r2, #0
 80027ea:	461c      	mov	r4, r3
 80027ec:	4615      	mov	r5, r2
 80027ee:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80027f2:	1911      	adds	r1, r2, r4
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	416b      	adcs	r3, r5
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80027fe:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002802:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	f04f 0400 	mov.w	r4, #0
 800280e:	f04f 0500 	mov.w	r5, #0
 8002812:	015d      	lsls	r5, r3, #5
 8002814:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002818:	0154      	lsls	r4, r2, #5
 800281a:	4622      	mov	r2, r4
 800281c:	462b      	mov	r3, r5
 800281e:	ebb2 0800 	subs.w	r8, r2, r0
 8002822:	eb63 0901 	sbc.w	r9, r3, r1
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002832:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002836:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800283a:	4690      	mov	r8, r2
 800283c:	4699      	mov	r9, r3
 800283e:	eb18 0a00 	adds.w	sl, r8, r0
 8002842:	eb49 0b01 	adc.w	fp, r9, r1
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002852:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002856:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800285a:	ebb2 040a 	subs.w	r4, r2, sl
 800285e:	603c      	str	r4, [r7, #0]
 8002860:	eb63 030b 	sbc.w	r3, r3, fp
 8002864:	607b      	str	r3, [r7, #4]
 8002866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800286a:	4623      	mov	r3, r4
 800286c:	181b      	adds	r3, r3, r0
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	462b      	mov	r3, r5
 8002872:	eb41 0303 	adc.w	r3, r1, r3
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	6a3a      	ldr	r2, [r7, #32]
 800287a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800287e:	f7ff ff3f 	bl	8002700 <UTILS_NanosecondsToTimespec>

    return 0;
 8002882:	2300      	movs	r3, #0
 8002884:	4618      	mov	r0, r3
 8002886:	3738      	adds	r7, #56	@ 0x38
 8002888:	46bd      	mov	sp, r7
 800288a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002890 <MotorControl_StartPWM>:
// ------------------------------------------------------------------------
//           FUNZIONI PER IL CONTROLLO PWM (TIM8)
// ------------------------------------------------------------------------

void MotorControl_StartPWM(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
    // Avvia i canali “normali”
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002894:	2100      	movs	r1, #0
 8002896:	4808      	ldr	r0, [pc, #32]	@ (80028b8 <MotorControl_StartPWM+0x28>)
 8002898:	f005 f81a 	bl	80078d0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800289c:	2104      	movs	r1, #4
 800289e:	4806      	ldr	r0, [pc, #24]	@ (80028b8 <MotorControl_StartPWM+0x28>)
 80028a0:	f005 f816 	bl	80078d0 <HAL_TIM_PWM_Start>
    //HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
    //HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);

    // Avvia i canali “complementari” (solo CH1N, CH2N e CH3N)
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_1);
 80028a4:	2100      	movs	r1, #0
 80028a6:	4804      	ldr	r0, [pc, #16]	@ (80028b8 <MotorControl_StartPWM+0x28>)
 80028a8:	f006 fb44 	bl	8008f34 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_2);
 80028ac:	2104      	movs	r1, #4
 80028ae:	4802      	ldr	r0, [pc, #8]	@ (80028b8 <MotorControl_StartPWM+0x28>)
 80028b0:	f006 fb40 	bl	8008f34 <HAL_TIMEx_PWMN_Start>
    //HAL_TIMEx_PWMN_Start(&htim8, TIM_CHANNEL_3);
}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	2000b254 	.word	0x2000b254

080028bc <MotorControl_SetMotors>:
                            float speedMotor2,
                            bool  enableM1,
                            bool  enableM2,
                            bool  auxM1,
                            bool  auxM2)
{
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b089      	sub	sp, #36	@ 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	ed87 0a03 	vstr	s0, [r7, #12]
 80028c6:	edc7 0a02 	vstr	s1, [r7, #8]
 80028ca:	4604      	mov	r4, r0
 80028cc:	4608      	mov	r0, r1
 80028ce:	4611      	mov	r1, r2
 80028d0:	461a      	mov	r2, r3
 80028d2:	4623      	mov	r3, r4
 80028d4:	71fb      	strb	r3, [r7, #7]
 80028d6:	4603      	mov	r3, r0
 80028d8:	71bb      	strb	r3, [r7, #6]
 80028da:	460b      	mov	r3, r1
 80028dc:	717b      	strb	r3, [r7, #5]
 80028de:	4613      	mov	r3, r2
 80028e0:	713b      	strb	r3, [r7, #4]
    // Saturazione
    if (speedMotor1 >  1.0f) speedMotor1 =  1.0f;
 80028e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80028e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80028ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f2:	dd02      	ble.n	80028fa <MotorControl_SetMotors+0x3e>
 80028f4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80028f8:	60fb      	str	r3, [r7, #12]
    if (speedMotor1 < -1.0f) speedMotor1 = -1.0f;
 80028fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80028fe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	d501      	bpl.n	8002910 <MotorControl_SetMotors+0x54>
 800290c:	4b3e      	ldr	r3, [pc, #248]	@ (8002a08 <MotorControl_SetMotors+0x14c>)
 800290e:	60fb      	str	r3, [r7, #12]
    if (speedMotor2 >  1.0f) speedMotor2 =  1.0f;
 8002910:	edd7 7a02 	vldr	s15, [r7, #8]
 8002914:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002918:	eef4 7ac7 	vcmpe.f32	s15, s14
 800291c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002920:	dd02      	ble.n	8002928 <MotorControl_SetMotors+0x6c>
 8002922:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002926:	60bb      	str	r3, [r7, #8]
    if (speedMotor2 < -1.0f) speedMotor2 = -1.0f;
 8002928:	edd7 7a02 	vldr	s15, [r7, #8]
 800292c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8002930:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002938:	d501      	bpl.n	800293e <MotorControl_SetMotors+0x82>
 800293a:	4b33      	ldr	r3, [pc, #204]	@ (8002a08 <MotorControl_SetMotors+0x14c>)
 800293c:	60bb      	str	r3, [r7, #8]

    // Leggi il periodo dal registro di TIM8 (AutoReload)
    float period = (float)__HAL_TIM_GET_AUTORELOAD(&htim8);
 800293e:	4b33      	ldr	r3, [pc, #204]	@ (8002a0c <MotorControl_SetMotors+0x150>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002944:	ee07 3a90 	vmov	s15, r3
 8002948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800294c:	edc7 7a07 	vstr	s15, [r7, #28]

    // Mappiamo [-1..+1] => [0..period]
    //  -1 => 0
    //   0 => period/2
    //  +1 => period
    float ccrValMotor1 = (speedMotor1 + 1.0f) * 0.5f * period;
 8002950:	edd7 7a03 	vldr	s15, [r7, #12]
 8002954:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002958:	ee77 7a87 	vadd.f32	s15, s15, s14
 800295c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002964:	ed97 7a07 	vldr	s14, [r7, #28]
 8002968:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296c:	edc7 7a06 	vstr	s15, [r7, #24]
    float ccrValMotor2 = (speedMotor2 + 1.0f) * 0.5f * period;
 8002970:	edd7 7a02 	vldr	s15, [r7, #8]
 8002974:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002978:	ee77 7a87 	vadd.f32	s15, s15, s14
 800297c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002984:	ed97 7a07 	vldr	s14, [r7, #28]
 8002988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298c:	edc7 7a05 	vstr	s15, [r7, #20]

    // Aggiorna i CCR (duty cycle)
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, (uint32_t)ccrValMotor1);
 8002990:	4b1e      	ldr	r3, [pc, #120]	@ (8002a0c <MotorControl_SetMotors+0x150>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	edd7 7a06 	vldr	s15, [r7, #24]
 8002998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800299c:	ee17 2a90 	vmov	r2, s15
 80029a0:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, (uint32_t)ccrValMotor1);
 80029a2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a0c <MotorControl_SetMotors+0x150>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80029aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029ae:	ee17 2a90 	vmov	r2, s15
 80029b2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, (uint32_t)ccrValMotor2);
 80029b4:	4b15      	ldr	r3, [pc, #84]	@ (8002a0c <MotorControl_SetMotors+0x150>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80029bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c0:	ee17 2a90 	vmov	r2, s15
 80029c4:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, (uint32_t)ccrValMotor2);
 80029c6:	4b11      	ldr	r3, [pc, #68]	@ (8002a0c <MotorControl_SetMotors+0x150>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80029ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029d2:	ee17 2a90 	vmov	r2, s15
 80029d6:	641a      	str	r2, [r3, #64]	@ 0x40

    // Gestione pin di Enable
    HAL_GPIO_WritePin(PB12_MOT1_EN_GPIO_Port, PB12_MOT1_EN_Pin,
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	461a      	mov	r2, r3
 80029dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029e0:	480b      	ldr	r0, [pc, #44]	@ (8002a10 <MotorControl_SetMotors+0x154>)
 80029e2:	f002 fd2f 	bl	8005444 <HAL_GPIO_WritePin>
                      enableM1 ? GPIO_PIN_SET : GPIO_PIN_RESET);

    HAL_GPIO_WritePin(PD3_MOT2_EN_GPIO_Port, PD3_MOT2_EN_Pin,
 80029e6:	79bb      	ldrb	r3, [r7, #6]
 80029e8:	461a      	mov	r2, r3
 80029ea:	2108      	movs	r1, #8
 80029ec:	4809      	ldr	r0, [pc, #36]	@ (8002a14 <MotorControl_SetMotors+0x158>)
 80029ee:	f002 fd29 	bl	8005444 <HAL_GPIO_WritePin>
                      enableM2 ? GPIO_PIN_SET : GPIO_PIN_RESET);

    // Imposta i pin AUX
    MotorControl_SetAux(auxM1, auxM2);
 80029f2:	793a      	ldrb	r2, [r7, #4]
 80029f4:	797b      	ldrb	r3, [r7, #5]
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 f80d 	bl	8002a18 <MotorControl_SetAux>
}
 80029fe:	bf00      	nop
 8002a00:	3724      	adds	r7, #36	@ 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd90      	pop	{r4, r7, pc}
 8002a06:	bf00      	nop
 8002a08:	bf800000 	.word	0xbf800000
 8002a0c:	2000b254 	.word	0x2000b254
 8002a10:	40020400 	.word	0x40020400
 8002a14:	40020c00 	.word	0x40020c00

08002a18 <MotorControl_SetAux>:

void MotorControl_SetAux(bool auxM1, bool auxM2)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	460a      	mov	r2, r1
 8002a22:	71fb      	strb	r3, [r7, #7]
 8002a24:	4613      	mov	r3, r2
 8002a26:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(PE8_MOT1_AUX_GPIO_Port, PE8_MOT1_AUX_Pin,
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002a30:	4806      	ldr	r0, [pc, #24]	@ (8002a4c <MotorControl_SetAux+0x34>)
 8002a32:	f002 fd07 	bl	8005444 <HAL_GPIO_WritePin>
                      auxM1 ? GPIO_PIN_SET : GPIO_PIN_RESET);

    HAL_GPIO_WritePin(PE9_MOT2_AUX_GPIO_Port, PE9_MOT2_AUX_Pin,
 8002a36:	79bb      	ldrb	r3, [r7, #6]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a3e:	4803      	ldr	r0, [pc, #12]	@ (8002a4c <MotorControl_SetAux+0x34>)
 8002a40:	f002 fd00 	bl	8005444 <HAL_GPIO_WritePin>
                      auxM2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8002a44:	bf00      	nop
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000

08002a50 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002a54:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <MX_RNG_Init+0x20>)
 8002a56:	4a07      	ldr	r2, [pc, #28]	@ (8002a74 <MX_RNG_Init+0x24>)
 8002a58:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002a5a:	4805      	ldr	r0, [pc, #20]	@ (8002a70 <MX_RNG_Init+0x20>)
 8002a5c:	f004 fd6c 	bl	8007538 <HAL_RNG_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002a66:	f7ff fda9 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	2000b034 	.word	0x2000b034
 8002a74:	50060800 	.word	0x50060800

08002a78 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab4 <HAL_RNG_MspInit+0x3c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d10d      	bne.n	8002aa6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <HAL_RNG_MspInit+0x40>)
 8002a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a92:	4a09      	ldr	r2, [pc, #36]	@ (8002ab8 <HAL_RNG_MspInit+0x40>)
 8002a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a98:	6353      	str	r3, [r2, #52]	@ 0x34
 8002a9a:	4b07      	ldr	r3, [pc, #28]	@ (8002ab8 <HAL_RNG_MspInit+0x40>)
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	50060800 	.word	0x50060800
 8002ab8:	40023800 	.word	0x40023800

08002abc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ac0:	4b17      	ldr	r3, [pc, #92]	@ (8002b20 <MX_SPI1_Init+0x64>)
 8002ac2:	4a18      	ldr	r2, [pc, #96]	@ (8002b24 <MX_SPI1_Init+0x68>)
 8002ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ac6:	4b16      	ldr	r3, [pc, #88]	@ (8002b20 <MX_SPI1_Init+0x64>)
 8002ac8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ace:	4b14      	ldr	r3, [pc, #80]	@ (8002b20 <MX_SPI1_Init+0x64>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ad4:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <MX_SPI1_Init+0x64>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ada:	4b11      	ldr	r3, [pc, #68]	@ (8002b20 <MX_SPI1_Init+0x64>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b20 <MX_SPI1_Init+0x64>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b20 <MX_SPI1_Init+0x64>)
 8002ae8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002aee:	4b0c      	ldr	r3, [pc, #48]	@ (8002b20 <MX_SPI1_Init+0x64>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002af4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b20 <MX_SPI1_Init+0x64>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002afa:	4b09      	ldr	r3, [pc, #36]	@ (8002b20 <MX_SPI1_Init+0x64>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b00:	4b07      	ldr	r3, [pc, #28]	@ (8002b20 <MX_SPI1_Init+0x64>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b06:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <MX_SPI1_Init+0x64>)
 8002b08:	220a      	movs	r2, #10
 8002b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b0c:	4804      	ldr	r0, [pc, #16]	@ (8002b20 <MX_SPI1_Init+0x64>)
 8002b0e:	f004 fd3d 	bl	800758c <HAL_SPI_Init>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b18:	f7ff fd50 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b1c:	bf00      	nop
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	2000b044 	.word	0x2000b044
 8002b24:	40013000 	.word	0x40013000

08002b28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	@ 0x28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a19      	ldr	r2, [pc, #100]	@ (8002bac <HAL_SPI_MspInit+0x84>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d12b      	bne.n	8002ba2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	4b18      	ldr	r3, [pc, #96]	@ (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	4a17      	ldr	r2, [pc, #92]	@ (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b5a:	4b15      	ldr	r3, [pc, #84]	@ (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6e:	4a10      	ldr	r2, [pc, #64]	@ (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b70:	f043 0302 	orr.w	r3, r3, #2
 8002b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b76:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb0 <HAL_SPI_MspInit+0x88>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002b82:	2338      	movs	r3, #56	@ 0x38
 8002b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b92:	2305      	movs	r3, #5
 8002b94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4805      	ldr	r0, [pc, #20]	@ (8002bb4 <HAL_SPI_MspInit+0x8c>)
 8002b9e:	f002 fab5 	bl	800510c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002ba2:	bf00      	nop
 8002ba4:	3728      	adds	r7, #40	@ 0x28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40013000 	.word	0x40013000
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40020400 	.word	0x40020400

08002bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	607b      	str	r3, [r7, #4]
 8002bc2:	4b12      	ldr	r3, [pc, #72]	@ (8002c0c <HAL_MspInit+0x54>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc6:	4a11      	ldr	r2, [pc, #68]	@ (8002c0c <HAL_MspInit+0x54>)
 8002bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bce:	4b0f      	ldr	r3, [pc, #60]	@ (8002c0c <HAL_MspInit+0x54>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd6:	607b      	str	r3, [r7, #4]
 8002bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	603b      	str	r3, [r7, #0]
 8002bde:	4b0b      	ldr	r3, [pc, #44]	@ (8002c0c <HAL_MspInit+0x54>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be2:	4a0a      	ldr	r2, [pc, #40]	@ (8002c0c <HAL_MspInit+0x54>)
 8002be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bea:	4b08      	ldr	r3, [pc, #32]	@ (8002c0c <HAL_MspInit+0x54>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	210f      	movs	r1, #15
 8002bfa:	f06f 0001 	mvn.w	r0, #1
 8002bfe:	f001 fe3d 	bl	800487c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800

08002c10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08c      	sub	sp, #48	@ 0x30
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002c20:	2300      	movs	r3, #0
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	4b2f      	ldr	r3, [pc, #188]	@ (8002ce4 <HAL_InitTick+0xd4>)
 8002c26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c28:	4a2e      	ldr	r2, [pc, #184]	@ (8002ce4 <HAL_InitTick+0xd4>)
 8002c2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c2e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c30:	4b2c      	ldr	r3, [pc, #176]	@ (8002ce4 <HAL_InitTick+0xd4>)
 8002c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c3c:	f107 020c 	add.w	r2, r7, #12
 8002c40:	f107 0310 	add.w	r3, r7, #16
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f004 fc44 	bl	80074d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002c4c:	f004 fc2e 	bl	80074ac <HAL_RCC_GetPCLK2Freq>
 8002c50:	4603      	mov	r3, r0
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c58:	4a23      	ldr	r2, [pc, #140]	@ (8002ce8 <HAL_InitTick+0xd8>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	0c9b      	lsrs	r3, r3, #18
 8002c60:	3b01      	subs	r3, #1
 8002c62:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8002c64:	4b21      	ldr	r3, [pc, #132]	@ (8002cec <HAL_InitTick+0xdc>)
 8002c66:	4a22      	ldr	r2, [pc, #136]	@ (8002cf0 <HAL_InitTick+0xe0>)
 8002c68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8002c6a:	4b20      	ldr	r3, [pc, #128]	@ (8002cec <HAL_InitTick+0xdc>)
 8002c6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c70:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8002c72:	4a1e      	ldr	r2, [pc, #120]	@ (8002cec <HAL_InitTick+0xdc>)
 8002c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c76:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002c78:	4b1c      	ldr	r3, [pc, #112]	@ (8002cec <HAL_InitTick+0xdc>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cec <HAL_InitTick+0xdc>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c84:	4b19      	ldr	r3, [pc, #100]	@ (8002cec <HAL_InitTick+0xdc>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8002c8a:	4818      	ldr	r0, [pc, #96]	@ (8002cec <HAL_InitTick+0xdc>)
 8002c8c:	f004 fd07 	bl	800769e <HAL_TIM_Base_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002c96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d11b      	bne.n	8002cd6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8002c9e:	4813      	ldr	r0, [pc, #76]	@ (8002cec <HAL_InitTick+0xdc>)
 8002ca0:	f004 fd4c 	bl	800773c <HAL_TIM_Base_Start_IT>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002caa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d111      	bne.n	8002cd6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002cb2:	2019      	movs	r0, #25
 8002cb4:	f001 fdfe 	bl	80048b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b0f      	cmp	r3, #15
 8002cbc:	d808      	bhi.n	8002cd0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	2019      	movs	r0, #25
 8002cc4:	f001 fdda 	bl	800487c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf4 <HAL_InitTick+0xe4>)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e002      	b.n	8002cd6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3730      	adds	r7, #48	@ 0x30
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	431bde83 	.word	0x431bde83
 8002cec:	2000b09c 	.word	0x2000b09c
 8002cf0:	40014400 	.word	0x40014400
 8002cf4:	20000010 	.word	0x20000010

08002cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cfc:	bf00      	nop
 8002cfe:	e7fd      	b.n	8002cfc <NMI_Handler+0x4>

08002d00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <HardFault_Handler+0x4>

08002d08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d0c:	bf00      	nop
 8002d0e:	e7fd      	b.n	8002d0c <MemManage_Handler+0x4>

08002d10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d14:	bf00      	nop
 8002d16:	e7fd      	b.n	8002d14 <BusFault_Handler+0x4>

08002d18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d1c:	bf00      	nop
 8002d1e:	e7fd      	b.n	8002d1c <UsageFault_Handler+0x4>

08002d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d24:	bf00      	nop
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d34:	4803      	ldr	r0, [pc, #12]	@ (8002d44 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002d36:	f005 f93f 	bl	8007fb8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002d3a:	4803      	ldr	r0, [pc, #12]	@ (8002d48 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002d3c:	f005 f93c 	bl	8007fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002d40:	bf00      	nop
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	2000b0ec 	.word	0x2000b0ec
 8002d48:	2000b09c 	.word	0x2000b09c

08002d4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d50:	4802      	ldr	r0, [pc, #8]	@ (8002d5c <TIM3_IRQHandler+0x10>)
 8002d52:	f005 f931 	bl	8007fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	2000b17c 	.word	0x2000b17c

08002d60 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002d64:	4802      	ldr	r0, [pc, #8]	@ (8002d70 <TIM4_IRQHandler+0x10>)
 8002d66:	f005 f927 	bl	8007fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	2000b1c4 	.word	0x2000b1c4

08002d74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d78:	4802      	ldr	r0, [pc, #8]	@ (8002d84 <USART1_IRQHandler+0x10>)
 8002d7a:	f006 fc01 	bl	8009580 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	2000b32c 	.word	0x2000b32c

08002d88 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002d8c:	4802      	ldr	r0, [pc, #8]	@ (8002d98 <TIM5_IRQHandler+0x10>)
 8002d8e:	f005 f913 	bl	8007fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	2000b20c 	.word	0x2000b20c

08002d9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002da0:	4802      	ldr	r0, [pc, #8]	@ (8002dac <DMA2_Stream0_IRQHandler+0x10>)
 8002da2:	f001 ff49 	bl	8004c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000d5c 	.word	0x20000d5c

08002db0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002db4:	4802      	ldr	r0, [pc, #8]	@ (8002dc0 <DMA2_Stream2_IRQHandler+0x10>)
 8002db6:	f001 ff3f 	bl	8004c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002dba:	bf00      	nop
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	2000b3bc 	.word	0x2000b3bc

08002dc4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002dc8:	4802      	ldr	r0, [pc, #8]	@ (8002dd4 <DMA2_Stream4_IRQHandler+0x10>)
 8002dca:	f001 ff35 	bl	8004c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000cfc 	.word	0x20000cfc

08002dd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002ddc:	4802      	ldr	r0, [pc, #8]	@ (8002de8 <OTG_FS_IRQHandler+0x10>)
 8002dde:	f002 fdd3 	bl	8005988 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20011348 	.word	0x20011348

08002dec <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002df0:	4802      	ldr	r0, [pc, #8]	@ (8002dfc <DMA2_Stream7_IRQHandler+0x10>)
 8002df2:	f001 ff21 	bl	8004c38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	2000b41c 	.word	0x2000b41c

08002e00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
	return 1;
 8002e04:	2301      	movs	r3, #1
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <_kill>:

int _kill(int pid, int sig)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e1a:	f01d fc63 	bl	80206e4 <__errno>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2216      	movs	r2, #22
 8002e22:	601a      	str	r2, [r3, #0]
	return -1;
 8002e24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <_exit>:

void _exit (int status)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ffe7 	bl	8002e10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e42:	bf00      	nop
 8002e44:	e7fd      	b.n	8002e42 <_exit+0x12>

08002e46 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	e00a      	b.n	8002e6e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e58:	f3af 8000 	nop.w
 8002e5c:	4601      	mov	r1, r0
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	1c5a      	adds	r2, r3, #1
 8002e62:	60ba      	str	r2, [r7, #8]
 8002e64:	b2ca      	uxtb	r2, r1
 8002e66:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	617b      	str	r3, [r7, #20]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	dbf0      	blt.n	8002e58 <_read+0x12>
	}

return len;
 8002e76:	687b      	ldr	r3, [r7, #4]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	e009      	b.n	8002ea6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	60ba      	str	r2, [r7, #8]
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	dbf1      	blt.n	8002e92 <_write+0x12>
	}
	return len;
 8002eae:	687b      	ldr	r3, [r7, #4]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <_sbrk>:

caddr_t _sbrk(int incr) {
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
    extern char __heap_start__ asm("end");  // Defined by the linker.
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == NULL) heap_end = &__heap_start__;
 8002ec0:	4b14      	ldr	r3, [pc, #80]	@ (8002f14 <_sbrk+0x5c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d102      	bne.n	8002ece <_sbrk+0x16>
 8002ec8:	4b12      	ldr	r3, [pc, #72]	@ (8002f14 <_sbrk+0x5c>)
 8002eca:	4a13      	ldr	r2, [pc, #76]	@ (8002f18 <_sbrk+0x60>)
 8002ecc:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 8002ece:	4b11      	ldr	r3, [pc, #68]	@ (8002f14 <_sbrk+0x5c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60fb      	str	r3, [r7, #12]

    if (heap_end + incr > &_estack - _Min_Stack_Size) {
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8002f14 <_sbrk+0x5c>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	441a      	add	r2, r3
 8002edc:	4b0f      	ldr	r3, [pc, #60]	@ (8002f1c <_sbrk+0x64>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	425b      	negs	r3, r3
 8002ee2:	490f      	ldr	r1, [pc, #60]	@ (8002f20 <_sbrk+0x68>)
 8002ee4:	440b      	add	r3, r1
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d908      	bls.n	8002efc <_sbrk+0x44>
    		__asm("BKPT #0\n");
 8002eea:	be00      	bkpt	0x0000
        errno = ENOMEM;
 8002eec:	f01d fbfa 	bl	80206e4 <__errno>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	220c      	movs	r2, #12
 8002ef4:	601a      	str	r2, [r3, #0]
        return (caddr_t)-1;
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002efa:	e006      	b.n	8002f0a <_sbrk+0x52>

    }

    heap_end += incr;
 8002efc:	4b05      	ldr	r3, [pc, #20]	@ (8002f14 <_sbrk+0x5c>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4413      	add	r3, r2
 8002f04:	4a03      	ldr	r2, [pc, #12]	@ (8002f14 <_sbrk+0x5c>)
 8002f06:	6013      	str	r3, [r2, #0]
    return (caddr_t)prev_heap_end;
 8002f08:	68fb      	ldr	r3, [r7, #12]

}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	2000b0e8 	.word	0x2000b0e8
 8002f18:	20016718 	.word	0x20016718
 8002f1c:	00000400 	.word	0x00000400
 8002f20:	20020000 	.word	0x20020000

08002f24 <_close>:

int _close(int file)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
	return -1;
 8002f2c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f4c:	605a      	str	r2, [r3, #4]
	return 0;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <_isatty>:

int _isatty(int file)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
	return 1;
 8002f64:	2301      	movs	r3, #1
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b085      	sub	sp, #20
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
	return 0;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f90:	4b06      	ldr	r3, [pc, #24]	@ (8002fac <SystemInit+0x20>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f96:	4a05      	ldr	r2, [pc, #20]	@ (8002fac <SystemInit+0x20>)
 8002f98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08c      	sub	sp, #48	@ 0x30
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002fb6:	f107 030c 	add.w	r3, r7, #12
 8002fba:	2224      	movs	r2, #36	@ 0x24
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f01d faa6 	bl	8020510 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fc4:	1d3b      	adds	r3, r7, #4
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002fcc:	4b22      	ldr	r3, [pc, #136]	@ (8003058 <MX_TIM1_Init+0xa8>)
 8002fce:	4a23      	ldr	r2, [pc, #140]	@ (800305c <MX_TIM1_Init+0xac>)
 8002fd0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002fd2:	4b21      	ldr	r3, [pc, #132]	@ (8003058 <MX_TIM1_Init+0xa8>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003058 <MX_TIM1_Init+0xa8>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002fde:	4b1e      	ldr	r3, [pc, #120]	@ (8003058 <MX_TIM1_Init+0xa8>)
 8002fe0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fe4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8003058 <MX_TIM1_Init+0xa8>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fec:	4b1a      	ldr	r3, [pc, #104]	@ (8003058 <MX_TIM1_Init+0xa8>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ff2:	4b19      	ldr	r3, [pc, #100]	@ (8003058 <MX_TIM1_Init+0xa8>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003000:	2301      	movs	r3, #1
 8003002:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003004:	2300      	movs	r3, #0
 8003006:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 8003008:	2302      	movs	r3, #2
 800300a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800300c:	2300      	movs	r3, #0
 800300e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003010:	2301      	movs	r3, #1
 8003012:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003014:	2300      	movs	r3, #0
 8003016:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 2;
 8003018:	2302      	movs	r3, #2
 800301a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800301c:	f107 030c 	add.w	r3, r7, #12
 8003020:	4619      	mov	r1, r3
 8003022:	480d      	ldr	r0, [pc, #52]	@ (8003058 <MX_TIM1_Init+0xa8>)
 8003024:	f004 fe94 	bl	8007d50 <HAL_TIM_Encoder_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800302e:	f7ff fac5 	bl	80025bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003032:	2300      	movs	r3, #0
 8003034:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003036:	2300      	movs	r3, #0
 8003038:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800303a:	1d3b      	adds	r3, r7, #4
 800303c:	4619      	mov	r1, r3
 800303e:	4806      	ldr	r0, [pc, #24]	@ (8003058 <MX_TIM1_Init+0xa8>)
 8003040:	f006 f832 	bl	80090a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800304a:	f7ff fab7 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800304e:	bf00      	nop
 8003050:	3730      	adds	r7, #48	@ 0x30
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	2000b0ec 	.word	0x2000b0ec
 800305c:	40010000 	.word	0x40010000

08003060 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08c      	sub	sp, #48	@ 0x30
 8003064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003066:	f107 030c 	add.w	r3, r7, #12
 800306a:	2224      	movs	r2, #36	@ 0x24
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f01d fa4e 	bl	8020510 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003074:	1d3b      	adds	r3, r7, #4
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800307c:	4b21      	ldr	r3, [pc, #132]	@ (8003104 <MX_TIM2_Init+0xa4>)
 800307e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003082:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003084:	4b1f      	ldr	r3, [pc, #124]	@ (8003104 <MX_TIM2_Init+0xa4>)
 8003086:	2200      	movs	r2, #0
 8003088:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800308a:	4b1e      	ldr	r3, [pc, #120]	@ (8003104 <MX_TIM2_Init+0xa4>)
 800308c:	2200      	movs	r2, #0
 800308e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003090:	4b1c      	ldr	r3, [pc, #112]	@ (8003104 <MX_TIM2_Init+0xa4>)
 8003092:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003096:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003098:	4b1a      	ldr	r3, [pc, #104]	@ (8003104 <MX_TIM2_Init+0xa4>)
 800309a:	2200      	movs	r2, #0
 800309c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800309e:	4b19      	ldr	r3, [pc, #100]	@ (8003104 <MX_TIM2_Init+0xa4>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80030a4:	2303      	movs	r3, #3
 80030a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80030a8:	2300      	movs	r3, #0
 80030aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80030ac:	2301      	movs	r3, #1
 80030ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 80030b4:	2302      	movs	r3, #2
 80030b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80030b8:	2300      	movs	r3, #0
 80030ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030bc:	2301      	movs	r3, #1
 80030be:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80030c0:	2300      	movs	r3, #0
 80030c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 2;
 80030c4:	2302      	movs	r3, #2
 80030c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80030c8:	f107 030c 	add.w	r3, r7, #12
 80030cc:	4619      	mov	r1, r3
 80030ce:	480d      	ldr	r0, [pc, #52]	@ (8003104 <MX_TIM2_Init+0xa4>)
 80030d0:	f004 fe3e 	bl	8007d50 <HAL_TIM_Encoder_Init>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80030da:	f7ff fa6f 	bl	80025bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030de:	2300      	movs	r3, #0
 80030e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030e6:	1d3b      	adds	r3, r7, #4
 80030e8:	4619      	mov	r1, r3
 80030ea:	4806      	ldr	r0, [pc, #24]	@ (8003104 <MX_TIM2_Init+0xa4>)
 80030ec:	f005 ffdc 	bl	80090a8 <HAL_TIMEx_MasterConfigSynchronization>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80030f6:	f7ff fa61 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030fa:	bf00      	nop
 80030fc:	3730      	adds	r7, #48	@ 0x30
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	2000b134 	.word	0x2000b134

08003108 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800310e:	f107 0310 	add.w	r3, r7, #16
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003118:	463b      	mov	r3, r7
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	605a      	str	r2, [r3, #4]
 8003120:	609a      	str	r2, [r3, #8]
 8003122:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003124:	4b20      	ldr	r3, [pc, #128]	@ (80031a8 <MX_TIM3_Init+0xa0>)
 8003126:	4a21      	ldr	r2, [pc, #132]	@ (80031ac <MX_TIM3_Init+0xa4>)
 8003128:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800312a:	4b1f      	ldr	r3, [pc, #124]	@ (80031a8 <MX_TIM3_Init+0xa0>)
 800312c:	2200      	movs	r2, #0
 800312e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003130:	4b1d      	ldr	r3, [pc, #116]	@ (80031a8 <MX_TIM3_Init+0xa0>)
 8003132:	2200      	movs	r2, #0
 8003134:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003136:	4b1c      	ldr	r3, [pc, #112]	@ (80031a8 <MX_TIM3_Init+0xa0>)
 8003138:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800313c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800313e:	4b1a      	ldr	r3, [pc, #104]	@ (80031a8 <MX_TIM3_Init+0xa0>)
 8003140:	2200      	movs	r2, #0
 8003142:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003144:	4b18      	ldr	r3, [pc, #96]	@ (80031a8 <MX_TIM3_Init+0xa0>)
 8003146:	2200      	movs	r2, #0
 8003148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800314a:	4817      	ldr	r0, [pc, #92]	@ (80031a8 <MX_TIM3_Init+0xa0>)
 800314c:	f004 fc88 	bl	8007a60 <HAL_TIM_IC_Init>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003156:	f7ff fa31 	bl	80025bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003162:	f107 0310 	add.w	r3, r7, #16
 8003166:	4619      	mov	r1, r3
 8003168:	480f      	ldr	r0, [pc, #60]	@ (80031a8 <MX_TIM3_Init+0xa0>)
 800316a:	f005 ff9d 	bl	80090a8 <HAL_TIMEx_MasterConfigSynchronization>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003174:	f7ff fa22 	bl	80025bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003178:	2300      	movs	r3, #0
 800317a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800317c:	2301      	movs	r3, #1
 800317e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003180:	2300      	movs	r3, #0
 8003182:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 8003184:	2302      	movs	r3, #2
 8003186:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003188:	463b      	mov	r3, r7
 800318a:	2200      	movs	r2, #0
 800318c:	4619      	mov	r1, r3
 800318e:	4806      	ldr	r0, [pc, #24]	@ (80031a8 <MX_TIM3_Init+0xa0>)
 8003190:	f005 f802 	bl	8008198 <HAL_TIM_IC_ConfigChannel>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800319a:	f7ff fa0f 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800319e:	bf00      	nop
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	2000b17c 	.word	0x2000b17c
 80031ac:	40000400 	.word	0x40000400

080031b0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031b6:	f107 0310 	add.w	r3, r7, #16
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80031c0:	463b      	mov	r3, r7
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	605a      	str	r2, [r3, #4]
 80031c8:	609a      	str	r2, [r3, #8]
 80031ca:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80031cc:	4b20      	ldr	r3, [pc, #128]	@ (8003250 <MX_TIM4_Init+0xa0>)
 80031ce:	4a21      	ldr	r2, [pc, #132]	@ (8003254 <MX_TIM4_Init+0xa4>)
 80031d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80031d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003250 <MX_TIM4_Init+0xa0>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003250 <MX_TIM4_Init+0xa0>)
 80031da:	2200      	movs	r2, #0
 80031dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80031de:	4b1c      	ldr	r3, [pc, #112]	@ (8003250 <MX_TIM4_Init+0xa0>)
 80031e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003250 <MX_TIM4_Init+0xa0>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ec:	4b18      	ldr	r3, [pc, #96]	@ (8003250 <MX_TIM4_Init+0xa0>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80031f2:	4817      	ldr	r0, [pc, #92]	@ (8003250 <MX_TIM4_Init+0xa0>)
 80031f4:	f004 fc34 	bl	8007a60 <HAL_TIM_IC_Init>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80031fe:	f7ff f9dd 	bl	80025bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800320a:	f107 0310 	add.w	r3, r7, #16
 800320e:	4619      	mov	r1, r3
 8003210:	480f      	ldr	r0, [pc, #60]	@ (8003250 <MX_TIM4_Init+0xa0>)
 8003212:	f005 ff49 	bl	80090a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800321c:	f7ff f9ce 	bl	80025bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003220:	2300      	movs	r3, #0
 8003222:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003224:	2301      	movs	r3, #1
 8003226:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003228:	2300      	movs	r3, #0
 800322a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 800322c:	2302      	movs	r3, #2
 800322e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003230:	463b      	mov	r3, r7
 8003232:	2204      	movs	r2, #4
 8003234:	4619      	mov	r1, r3
 8003236:	4806      	ldr	r0, [pc, #24]	@ (8003250 <MX_TIM4_Init+0xa0>)
 8003238:	f004 ffae 	bl	8008198 <HAL_TIM_IC_ConfigChannel>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8003242:	f7ff f9bb 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003246:	bf00      	nop
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	2000b1c4 	.word	0x2000b1c4
 8003254:	40000800 	.word	0x40000800

08003258 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800325e:	f107 0308 	add.w	r3, r7, #8
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800326c:	463b      	mov	r3, r7
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003274:	4b1d      	ldr	r3, [pc, #116]	@ (80032ec <MX_TIM5_Init+0x94>)
 8003276:	4a1e      	ldr	r2, [pc, #120]	@ (80032f0 <MX_TIM5_Init+0x98>)
 8003278:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800327a:	4b1c      	ldr	r3, [pc, #112]	@ (80032ec <MX_TIM5_Init+0x94>)
 800327c:	2253      	movs	r2, #83	@ 0x53
 800327e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003280:	4b1a      	ldr	r3, [pc, #104]	@ (80032ec <MX_TIM5_Init+0x94>)
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8003286:	4b19      	ldr	r3, [pc, #100]	@ (80032ec <MX_TIM5_Init+0x94>)
 8003288:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800328c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800328e:	4b17      	ldr	r3, [pc, #92]	@ (80032ec <MX_TIM5_Init+0x94>)
 8003290:	2200      	movs	r2, #0
 8003292:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003294:	4b15      	ldr	r3, [pc, #84]	@ (80032ec <MX_TIM5_Init+0x94>)
 8003296:	2280      	movs	r2, #128	@ 0x80
 8003298:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800329a:	4814      	ldr	r0, [pc, #80]	@ (80032ec <MX_TIM5_Init+0x94>)
 800329c:	f004 f9ff 	bl	800769e <HAL_TIM_Base_Init>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80032a6:	f7ff f989 	bl	80025bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80032b0:	f107 0308 	add.w	r3, r7, #8
 80032b4:	4619      	mov	r1, r3
 80032b6:	480d      	ldr	r0, [pc, #52]	@ (80032ec <MX_TIM5_Init+0x94>)
 80032b8:	f005 f8cc 	bl	8008454 <HAL_TIM_ConfigClockSource>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80032c2:	f7ff f97b 	bl	80025bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c6:	2300      	movs	r3, #0
 80032c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80032ce:	463b      	mov	r3, r7
 80032d0:	4619      	mov	r1, r3
 80032d2:	4806      	ldr	r0, [pc, #24]	@ (80032ec <MX_TIM5_Init+0x94>)
 80032d4:	f005 fee8 	bl	80090a8 <HAL_TIMEx_MasterConfigSynchronization>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80032de:	f7ff f96d 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80032e2:	bf00      	nop
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	2000b20c 	.word	0x2000b20c
 80032f0:	40000c00 	.word	0x40000c00

080032f4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b096      	sub	sp, #88	@ 0x58
 80032f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032fa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	605a      	str	r2, [r3, #4]
 8003304:	609a      	str	r2, [r3, #8]
 8003306:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003308:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003312:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	609a      	str	r2, [r3, #8]
 800331e:	60da      	str	r2, [r3, #12]
 8003320:	611a      	str	r2, [r3, #16]
 8003322:	615a      	str	r2, [r3, #20]
 8003324:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003326:	1d3b      	adds	r3, r7, #4
 8003328:	2220      	movs	r2, #32
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f01d f8ef 	bl	8020510 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003332:	4b45      	ldr	r3, [pc, #276]	@ (8003448 <MX_TIM8_Init+0x154>)
 8003334:	4a45      	ldr	r2, [pc, #276]	@ (800344c <MX_TIM8_Init+0x158>)
 8003336:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003338:	4b43      	ldr	r3, [pc, #268]	@ (8003448 <MX_TIM8_Init+0x154>)
 800333a:	2200      	movs	r2, #0
 800333c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800333e:	4b42      	ldr	r3, [pc, #264]	@ (8003448 <MX_TIM8_Init+0x154>)
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003344:	4b40      	ldr	r3, [pc, #256]	@ (8003448 <MX_TIM8_Init+0x154>)
 8003346:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800334a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800334c:	4b3e      	ldr	r3, [pc, #248]	@ (8003448 <MX_TIM8_Init+0x154>)
 800334e:	2200      	movs	r2, #0
 8003350:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003352:	4b3d      	ldr	r3, [pc, #244]	@ (8003448 <MX_TIM8_Init+0x154>)
 8003354:	2200      	movs	r2, #0
 8003356:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003358:	4b3b      	ldr	r3, [pc, #236]	@ (8003448 <MX_TIM8_Init+0x154>)
 800335a:	2200      	movs	r2, #0
 800335c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800335e:	483a      	ldr	r0, [pc, #232]	@ (8003448 <MX_TIM8_Init+0x154>)
 8003360:	f004 f99d 	bl	800769e <HAL_TIM_Base_Init>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800336a:	f7ff f927 	bl	80025bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800336e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003372:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003374:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003378:	4619      	mov	r1, r3
 800337a:	4833      	ldr	r0, [pc, #204]	@ (8003448 <MX_TIM8_Init+0x154>)
 800337c:	f005 f86a 	bl	8008454 <HAL_TIM_ConfigClockSource>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8003386:	f7ff f919 	bl	80025bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800338a:	482f      	ldr	r0, [pc, #188]	@ (8003448 <MX_TIM8_Init+0x154>)
 800338c:	f004 fa46 	bl	800781c <HAL_TIM_PWM_Init>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003396:	f7ff f911 	bl	80025bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800339a:	2300      	movs	r3, #0
 800339c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800339e:	2300      	movs	r3, #0
 80033a0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80033a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80033a6:	4619      	mov	r1, r3
 80033a8:	4827      	ldr	r0, [pc, #156]	@ (8003448 <MX_TIM8_Init+0x154>)
 80033aa:	f005 fe7d 	bl	80090a8 <HAL_TIMEx_MasterConfigSynchronization>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80033b4:	f7ff f902 	bl	80025bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033b8:	2360      	movs	r3, #96	@ 0x60
 80033ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 512;
 80033bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033c2:	2300      	movs	r3, #0
 80033c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80033c6:	2300      	movs	r3, #0
 80033c8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033ca:	2300      	movs	r3, #0
 80033cc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80033ce:	2300      	movs	r3, #0
 80033d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033d2:	2300      	movs	r3, #0
 80033d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033da:	2204      	movs	r2, #4
 80033dc:	4619      	mov	r1, r3
 80033de:	481a      	ldr	r0, [pc, #104]	@ (8003448 <MX_TIM8_Init+0x154>)
 80033e0:	f004 ff76 	bl	80082d0 <HAL_TIM_PWM_ConfigChannel>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80033ea:	f7ff f8e7 	bl	80025bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033f2:	2208      	movs	r2, #8
 80033f4:	4619      	mov	r1, r3
 80033f6:	4814      	ldr	r0, [pc, #80]	@ (8003448 <MX_TIM8_Init+0x154>)
 80033f8:	f004 ff6a 	bl	80082d0 <HAL_TIM_PWM_ConfigChannel>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8003402:	f7ff f8db 	bl	80025bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003406:	2300      	movs	r3, #0
 8003408:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 2;
 8003412:	2302      	movs	r3, #2
 8003414:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800341a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800341e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003420:	2300      	movs	r3, #0
 8003422:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003424:	1d3b      	adds	r3, r7, #4
 8003426:	4619      	mov	r1, r3
 8003428:	4807      	ldr	r0, [pc, #28]	@ (8003448 <MX_TIM8_Init+0x154>)
 800342a:	f005 feb9 	bl	80091a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8003434:	f7ff f8c2 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003438:	4803      	ldr	r0, [pc, #12]	@ (8003448 <MX_TIM8_Init+0x154>)
 800343a:	f000 f9c1 	bl	80037c0 <HAL_TIM_MspPostInit>

}
 800343e:	bf00      	nop
 8003440:	3758      	adds	r7, #88	@ 0x58
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	2000b254 	.word	0x2000b254
 800344c:	40010400 	.word	0x40010400

08003450 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003454:	4b0e      	ldr	r3, [pc, #56]	@ (8003490 <MX_TIM14_Init+0x40>)
 8003456:	4a0f      	ldr	r2, [pc, #60]	@ (8003494 <MX_TIM14_Init+0x44>)
 8003458:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800345a:	4b0d      	ldr	r3, [pc, #52]	@ (8003490 <MX_TIM14_Init+0x40>)
 800345c:	2200      	movs	r2, #0
 800345e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003460:	4b0b      	ldr	r3, [pc, #44]	@ (8003490 <MX_TIM14_Init+0x40>)
 8003462:	2200      	movs	r2, #0
 8003464:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8003466:	4b0a      	ldr	r3, [pc, #40]	@ (8003490 <MX_TIM14_Init+0x40>)
 8003468:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800346c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800346e:	4b08      	ldr	r3, [pc, #32]	@ (8003490 <MX_TIM14_Init+0x40>)
 8003470:	2200      	movs	r2, #0
 8003472:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003474:	4b06      	ldr	r3, [pc, #24]	@ (8003490 <MX_TIM14_Init+0x40>)
 8003476:	2200      	movs	r2, #0
 8003478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800347a:	4805      	ldr	r0, [pc, #20]	@ (8003490 <MX_TIM14_Init+0x40>)
 800347c:	f004 f90f 	bl	800769e <HAL_TIM_Base_Init>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8003486:	f7ff f899 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	2000b29c 	.word	0x2000b29c
 8003494:	40002000 	.word	0x40002000

08003498 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08c      	sub	sp, #48	@ 0x30
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a0:	f107 031c 	add.w	r3, r7, #28
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a36      	ldr	r2, [pc, #216]	@ (8003590 <HAL_TIM_Encoder_MspInit+0xf8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d135      	bne.n	8003526 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	61bb      	str	r3, [r7, #24]
 80034be:	4b35      	ldr	r3, [pc, #212]	@ (8003594 <HAL_TIM_Encoder_MspInit+0xfc>)
 80034c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c2:	4a34      	ldr	r2, [pc, #208]	@ (8003594 <HAL_TIM_Encoder_MspInit+0xfc>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034ca:	4b32      	ldr	r3, [pc, #200]	@ (8003594 <HAL_TIM_Encoder_MspInit+0xfc>)
 80034cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	4b2e      	ldr	r3, [pc, #184]	@ (8003594 <HAL_TIM_Encoder_MspInit+0xfc>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034de:	4a2d      	ldr	r2, [pc, #180]	@ (8003594 <HAL_TIM_Encoder_MspInit+0xfc>)
 80034e0:	f043 0301 	orr.w	r3, r3, #1
 80034e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003594 <HAL_TIM_Encoder_MspInit+0xfc>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM_ENC1_A_Pin|TIM_ENC1_B_Pin;
 80034f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80034f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f8:	2302      	movs	r3, #2
 80034fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003500:	2303      	movs	r3, #3
 8003502:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003504:	2301      	movs	r3, #1
 8003506:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003508:	f107 031c 	add.w	r3, r7, #28
 800350c:	4619      	mov	r1, r3
 800350e:	4822      	ldr	r0, [pc, #136]	@ (8003598 <HAL_TIM_Encoder_MspInit+0x100>)
 8003510:	f001 fdfc 	bl	800510c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8003514:	2200      	movs	r2, #0
 8003516:	2105      	movs	r1, #5
 8003518:	2019      	movs	r0, #25
 800351a:	f001 f9af 	bl	800487c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800351e:	2019      	movs	r0, #25
 8003520:	f001 f9c8 	bl	80048b4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003524:	e030      	b.n	8003588 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM2)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800352e:	d12b      	bne.n	8003588 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003530:	2300      	movs	r3, #0
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	4b17      	ldr	r3, [pc, #92]	@ (8003594 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003538:	4a16      	ldr	r2, [pc, #88]	@ (8003594 <HAL_TIM_Encoder_MspInit+0xfc>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003540:	4b14      	ldr	r3, [pc, #80]	@ (8003594 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	613b      	str	r3, [r7, #16]
 800354a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	4b10      	ldr	r3, [pc, #64]	@ (8003594 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003552:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003554:	4a0f      	ldr	r2, [pc, #60]	@ (8003594 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003556:	f043 0301 	orr.w	r3, r3, #1
 800355a:	6313      	str	r3, [r2, #48]	@ 0x30
 800355c:	4b0d      	ldr	r3, [pc, #52]	@ (8003594 <HAL_TIM_Encoder_MspInit+0xfc>)
 800355e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_ENC2_B_Pin|TIM_ENC2_A_Pin;
 8003568:	2322      	movs	r3, #34	@ 0x22
 800356a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356c:	2302      	movs	r3, #2
 800356e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003570:	2300      	movs	r3, #0
 8003572:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003574:	2303      	movs	r3, #3
 8003576:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003578:	2301      	movs	r3, #1
 800357a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357c:	f107 031c 	add.w	r3, r7, #28
 8003580:	4619      	mov	r1, r3
 8003582:	4805      	ldr	r0, [pc, #20]	@ (8003598 <HAL_TIM_Encoder_MspInit+0x100>)
 8003584:	f001 fdc2 	bl	800510c <HAL_GPIO_Init>
}
 8003588:	bf00      	nop
 800358a:	3730      	adds	r7, #48	@ 0x30
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40010000 	.word	0x40010000
 8003594:	40023800 	.word	0x40023800
 8003598:	40020000 	.word	0x40020000

0800359c <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08c      	sub	sp, #48	@ 0x30
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a4:	f107 031c 	add.w	r3, r7, #28
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM3)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a51      	ldr	r2, [pc, #324]	@ (8003700 <HAL_TIM_IC_MspInit+0x164>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d162      	bne.n	8003684 <HAL_TIM_IC_MspInit+0xe8>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	4b50      	ldr	r3, [pc, #320]	@ (8003704 <HAL_TIM_IC_MspInit+0x168>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	4a4f      	ldr	r2, [pc, #316]	@ (8003704 <HAL_TIM_IC_MspInit+0x168>)
 80035c8:	f043 0302 	orr.w	r3, r3, #2
 80035cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ce:	4b4d      	ldr	r3, [pc, #308]	@ (8003704 <HAL_TIM_IC_MspInit+0x168>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	61bb      	str	r3, [r7, #24]
 80035d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	4b49      	ldr	r3, [pc, #292]	@ (8003704 <HAL_TIM_IC_MspInit+0x168>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	4a48      	ldr	r2, [pc, #288]	@ (8003704 <HAL_TIM_IC_MspInit+0x168>)
 80035e4:	f043 0302 	orr.w	r3, r3, #2
 80035e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ea:	4b46      	ldr	r3, [pc, #280]	@ (8003704 <HAL_TIM_IC_MspInit+0x168>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	4b42      	ldr	r3, [pc, #264]	@ (8003704 <HAL_TIM_IC_MspInit+0x168>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	4a41      	ldr	r2, [pc, #260]	@ (8003704 <HAL_TIM_IC_MspInit+0x168>)
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	6313      	str	r3, [r2, #48]	@ 0x30
 8003606:	4b3f      	ldr	r3, [pc, #252]	@ (8003704 <HAL_TIM_IC_MspInit+0x168>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = TIM_FAN_PWM_Pin;
 8003612:	2301      	movs	r3, #1
 8003614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003616:	2302      	movs	r3, #2
 8003618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361a:	2300      	movs	r3, #0
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361e:	2300      	movs	r3, #0
 8003620:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003622:	2302      	movs	r3, #2
 8003624:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM_FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8003626:	f107 031c 	add.w	r3, r7, #28
 800362a:	4619      	mov	r1, r3
 800362c:	4836      	ldr	r0, [pc, #216]	@ (8003708 <HAL_TIM_IC_MspInit+0x16c>)
 800362e:	f001 fd6d 	bl	800510c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TIM_FAN_INDEX_Pin;
 8003632:	2302      	movs	r3, #2
 8003634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003636:	2302      	movs	r3, #2
 8003638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800363a:	2301      	movs	r3, #1
 800363c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800363e:	2300      	movs	r3, #0
 8003640:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003642:	2302      	movs	r3, #2
 8003644:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(TIM_FAN_INDEX_GPIO_Port, &GPIO_InitStruct);
 8003646:	f107 031c 	add.w	r3, r7, #28
 800364a:	4619      	mov	r1, r3
 800364c:	482e      	ldr	r0, [pc, #184]	@ (8003708 <HAL_TIM_IC_MspInit+0x16c>)
 800364e:	f001 fd5d 	bl	800510c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC1_A_SPEED_Pin;
 8003652:	2340      	movs	r3, #64	@ 0x40
 8003654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003656:	2302      	movs	r3, #2
 8003658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365a:	2300      	movs	r3, #0
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365e:	2303      	movs	r3, #3
 8003660:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003662:	2302      	movs	r3, #2
 8003664:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ENC1_A_SPEED_GPIO_Port, &GPIO_InitStruct);
 8003666:	f107 031c 	add.w	r3, r7, #28
 800366a:	4619      	mov	r1, r3
 800366c:	4827      	ldr	r0, [pc, #156]	@ (800370c <HAL_TIM_IC_MspInit+0x170>)
 800366e:	f001 fd4d 	bl	800510c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003672:	2200      	movs	r2, #0
 8003674:	2105      	movs	r1, #5
 8003676:	201d      	movs	r0, #29
 8003678:	f001 f900 	bl	800487c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800367c:	201d      	movs	r0, #29
 800367e:	f001 f919 	bl	80048b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003682:	e039      	b.n	80036f8 <HAL_TIM_IC_MspInit+0x15c>
  else if(tim_icHandle->Instance==TIM4)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a21      	ldr	r2, [pc, #132]	@ (8003710 <HAL_TIM_IC_MspInit+0x174>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d134      	bne.n	80036f8 <HAL_TIM_IC_MspInit+0x15c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	4b1c      	ldr	r3, [pc, #112]	@ (8003704 <HAL_TIM_IC_MspInit+0x168>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003696:	4a1b      	ldr	r2, [pc, #108]	@ (8003704 <HAL_TIM_IC_MspInit+0x168>)
 8003698:	f043 0304 	orr.w	r3, r3, #4
 800369c:	6413      	str	r3, [r2, #64]	@ 0x40
 800369e:	4b19      	ldr	r3, [pc, #100]	@ (8003704 <HAL_TIM_IC_MspInit+0x168>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	4b15      	ldr	r3, [pc, #84]	@ (8003704 <HAL_TIM_IC_MspInit+0x168>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b2:	4a14      	ldr	r2, [pc, #80]	@ (8003704 <HAL_TIM_IC_MspInit+0x168>)
 80036b4:	f043 0308 	orr.w	r3, r3, #8
 80036b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ba:	4b12      	ldr	r3, [pc, #72]	@ (8003704 <HAL_TIM_IC_MspInit+0x168>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC2_A_SPEED_Pin;
 80036c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036cc:	2302      	movs	r3, #2
 80036ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d4:	2303      	movs	r3, #3
 80036d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80036d8:	2302      	movs	r3, #2
 80036da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ENC2_A_SPEED_GPIO_Port, &GPIO_InitStruct);
 80036dc:	f107 031c 	add.w	r3, r7, #28
 80036e0:	4619      	mov	r1, r3
 80036e2:	480c      	ldr	r0, [pc, #48]	@ (8003714 <HAL_TIM_IC_MspInit+0x178>)
 80036e4:	f001 fd12 	bl	800510c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80036e8:	2200      	movs	r2, #0
 80036ea:	2105      	movs	r1, #5
 80036ec:	201e      	movs	r0, #30
 80036ee:	f001 f8c5 	bl	800487c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80036f2:	201e      	movs	r0, #30
 80036f4:	f001 f8de 	bl	80048b4 <HAL_NVIC_EnableIRQ>
}
 80036f8:	bf00      	nop
 80036fa:	3730      	adds	r7, #48	@ 0x30
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40000400 	.word	0x40000400
 8003704:	40023800 	.word	0x40023800
 8003708:	40020400 	.word	0x40020400
 800370c:	40020800 	.word	0x40020800
 8003710:	40000800 	.word	0x40000800
 8003714:	40020c00 	.word	0x40020c00

08003718 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a22      	ldr	r2, [pc, #136]	@ (80037b0 <HAL_TIM_Base_MspInit+0x98>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d116      	bne.n	8003758 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
 800372e:	4b21      	ldr	r3, [pc, #132]	@ (80037b4 <HAL_TIM_Base_MspInit+0x9c>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	4a20      	ldr	r2, [pc, #128]	@ (80037b4 <HAL_TIM_Base_MspInit+0x9c>)
 8003734:	f043 0308 	orr.w	r3, r3, #8
 8003738:	6413      	str	r3, [r2, #64]	@ 0x40
 800373a:	4b1e      	ldr	r3, [pc, #120]	@ (80037b4 <HAL_TIM_Base_MspInit+0x9c>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	697b      	ldr	r3, [r7, #20]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8003746:	2200      	movs	r2, #0
 8003748:	2105      	movs	r1, #5
 800374a:	2032      	movs	r0, #50	@ 0x32
 800374c:	f001 f896 	bl	800487c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003750:	2032      	movs	r0, #50	@ 0x32
 8003752:	f001 f8af 	bl	80048b4 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8003756:	e026      	b.n	80037a6 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM8)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a16      	ldr	r2, [pc, #88]	@ (80037b8 <HAL_TIM_Base_MspInit+0xa0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d10e      	bne.n	8003780 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	4b13      	ldr	r3, [pc, #76]	@ (80037b4 <HAL_TIM_Base_MspInit+0x9c>)
 8003768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376a:	4a12      	ldr	r2, [pc, #72]	@ (80037b4 <HAL_TIM_Base_MspInit+0x9c>)
 800376c:	f043 0302 	orr.w	r3, r3, #2
 8003770:	6453      	str	r3, [r2, #68]	@ 0x44
 8003772:	4b10      	ldr	r3, [pc, #64]	@ (80037b4 <HAL_TIM_Base_MspInit+0x9c>)
 8003774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	693b      	ldr	r3, [r7, #16]
}
 800377e:	e012      	b.n	80037a6 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM14)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a0d      	ldr	r2, [pc, #52]	@ (80037bc <HAL_TIM_Base_MspInit+0xa4>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d10d      	bne.n	80037a6 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	4b09      	ldr	r3, [pc, #36]	@ (80037b4 <HAL_TIM_Base_MspInit+0x9c>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	4a08      	ldr	r2, [pc, #32]	@ (80037b4 <HAL_TIM_Base_MspInit+0x9c>)
 8003794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003798:	6413      	str	r3, [r2, #64]	@ 0x40
 800379a:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <HAL_TIM_Base_MspInit+0x9c>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
}
 80037a6:	bf00      	nop
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40000c00 	.word	0x40000c00
 80037b4:	40023800 	.word	0x40023800
 80037b8:	40010400 	.word	0x40010400
 80037bc:	40002000 	.word	0x40002000

080037c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	@ 0x28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c8:	f107 0314 	add.w	r3, r7, #20
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a22      	ldr	r2, [pc, #136]	@ (8003868 <HAL_TIM_MspPostInit+0xa8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d13d      	bne.n	800385e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	4b21      	ldr	r3, [pc, #132]	@ (800386c <HAL_TIM_MspPostInit+0xac>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ea:	4a20      	ldr	r2, [pc, #128]	@ (800386c <HAL_TIM_MspPostInit+0xac>)
 80037ec:	f043 0302 	orr.w	r3, r3, #2
 80037f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80037f2:	4b1e      	ldr	r3, [pc, #120]	@ (800386c <HAL_TIM_MspPostInit+0xac>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	4b1a      	ldr	r3, [pc, #104]	@ (800386c <HAL_TIM_MspPostInit+0xac>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003806:	4a19      	ldr	r2, [pc, #100]	@ (800386c <HAL_TIM_MspPostInit+0xac>)
 8003808:	f043 0304 	orr.w	r3, r3, #4
 800380c:	6313      	str	r3, [r2, #48]	@ 0x30
 800380e:	4b17      	ldr	r3, [pc, #92]	@ (800386c <HAL_TIM_MspPostInit+0xac>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> TIM8_CH2N
    PB15     ------> TIM8_CH3N
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = PB14_TIM8_MOT1_N_Pin|PB15_TIM8_MOT2_N_Pin;
 800381a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800381e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003820:	2302      	movs	r3, #2
 8003822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003824:	2300      	movs	r3, #0
 8003826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003828:	2300      	movs	r3, #0
 800382a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800382c:	2303      	movs	r3, #3
 800382e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003830:	f107 0314 	add.w	r3, r7, #20
 8003834:	4619      	mov	r1, r3
 8003836:	480e      	ldr	r0, [pc, #56]	@ (8003870 <HAL_TIM_MspPostInit+0xb0>)
 8003838:	f001 fc68 	bl	800510c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PC7_TIM8_MOT1_P_Pin|PC8_TIM8_MOT2_P_Pin;
 800383c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003842:	2302      	movs	r3, #2
 8003844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384a:	2300      	movs	r3, #0
 800384c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800384e:	2303      	movs	r3, #3
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003852:	f107 0314 	add.w	r3, r7, #20
 8003856:	4619      	mov	r1, r3
 8003858:	4806      	ldr	r0, [pc, #24]	@ (8003874 <HAL_TIM_MspPostInit+0xb4>)
 800385a:	f001 fc57 	bl	800510c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800385e:	bf00      	nop
 8003860:	3728      	adds	r7, #40	@ 0x28
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40010400 	.word	0x40010400
 800386c:	40023800 	.word	0x40023800
 8003870:	40020400 	.word	0x40020400
 8003874:	40020800 	.word	0x40020800

08003878 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800387c:	4b11      	ldr	r3, [pc, #68]	@ (80038c4 <MX_UART5_Init+0x4c>)
 800387e:	4a12      	ldr	r2, [pc, #72]	@ (80038c8 <MX_UART5_Init+0x50>)
 8003880:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003882:	4b10      	ldr	r3, [pc, #64]	@ (80038c4 <MX_UART5_Init+0x4c>)
 8003884:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003888:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800388a:	4b0e      	ldr	r3, [pc, #56]	@ (80038c4 <MX_UART5_Init+0x4c>)
 800388c:	2200      	movs	r2, #0
 800388e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003890:	4b0c      	ldr	r3, [pc, #48]	@ (80038c4 <MX_UART5_Init+0x4c>)
 8003892:	2200      	movs	r2, #0
 8003894:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003896:	4b0b      	ldr	r3, [pc, #44]	@ (80038c4 <MX_UART5_Init+0x4c>)
 8003898:	2200      	movs	r2, #0
 800389a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800389c:	4b09      	ldr	r3, [pc, #36]	@ (80038c4 <MX_UART5_Init+0x4c>)
 800389e:	220c      	movs	r2, #12
 80038a0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038a2:	4b08      	ldr	r3, [pc, #32]	@ (80038c4 <MX_UART5_Init+0x4c>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80038a8:	4b06      	ldr	r3, [pc, #24]	@ (80038c4 <MX_UART5_Init+0x4c>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80038ae:	4805      	ldr	r0, [pc, #20]	@ (80038c4 <MX_UART5_Init+0x4c>)
 80038b0:	f005 fd01 	bl	80092b6 <HAL_UART_Init>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80038ba:	f7fe fe7f 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80038be:	bf00      	nop
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	2000b2e4 	.word	0x2000b2e4
 80038c8:	40005000 	.word	0x40005000

080038cc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038d0:	4b11      	ldr	r3, [pc, #68]	@ (8003918 <MX_USART1_UART_Init+0x4c>)
 80038d2:	4a12      	ldr	r2, [pc, #72]	@ (800391c <MX_USART1_UART_Init+0x50>)
 80038d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80038d6:	4b10      	ldr	r3, [pc, #64]	@ (8003918 <MX_USART1_UART_Init+0x4c>)
 80038d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80038dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038de:	4b0e      	ldr	r3, [pc, #56]	@ (8003918 <MX_USART1_UART_Init+0x4c>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003918 <MX_USART1_UART_Init+0x4c>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003918 <MX_USART1_UART_Init+0x4c>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038f0:	4b09      	ldr	r3, [pc, #36]	@ (8003918 <MX_USART1_UART_Init+0x4c>)
 80038f2:	220c      	movs	r2, #12
 80038f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038f6:	4b08      	ldr	r3, [pc, #32]	@ (8003918 <MX_USART1_UART_Init+0x4c>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80038fc:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <MX_USART1_UART_Init+0x4c>)
 80038fe:	2200      	movs	r2, #0
 8003900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003902:	4805      	ldr	r0, [pc, #20]	@ (8003918 <MX_USART1_UART_Init+0x4c>)
 8003904:	f005 fcd7 	bl	80092b6 <HAL_UART_Init>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800390e:	f7fe fe55 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	2000b32c 	.word	0x2000b32c
 800391c:	40011000 	.word	0x40011000

08003920 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003924:	4b11      	ldr	r3, [pc, #68]	@ (800396c <MX_USART2_UART_Init+0x4c>)
 8003926:	4a12      	ldr	r2, [pc, #72]	@ (8003970 <MX_USART2_UART_Init+0x50>)
 8003928:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800392a:	4b10      	ldr	r3, [pc, #64]	@ (800396c <MX_USART2_UART_Init+0x4c>)
 800392c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003930:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003932:	4b0e      	ldr	r3, [pc, #56]	@ (800396c <MX_USART2_UART_Init+0x4c>)
 8003934:	2200      	movs	r2, #0
 8003936:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003938:	4b0c      	ldr	r3, [pc, #48]	@ (800396c <MX_USART2_UART_Init+0x4c>)
 800393a:	2200      	movs	r2, #0
 800393c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800393e:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <MX_USART2_UART_Init+0x4c>)
 8003940:	2200      	movs	r2, #0
 8003942:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003944:	4b09      	ldr	r3, [pc, #36]	@ (800396c <MX_USART2_UART_Init+0x4c>)
 8003946:	220c      	movs	r2, #12
 8003948:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800394a:	4b08      	ldr	r3, [pc, #32]	@ (800396c <MX_USART2_UART_Init+0x4c>)
 800394c:	2200      	movs	r2, #0
 800394e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003950:	4b06      	ldr	r3, [pc, #24]	@ (800396c <MX_USART2_UART_Init+0x4c>)
 8003952:	2200      	movs	r2, #0
 8003954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003956:	4805      	ldr	r0, [pc, #20]	@ (800396c <MX_USART2_UART_Init+0x4c>)
 8003958:	f005 fcad 	bl	80092b6 <HAL_UART_Init>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003962:	f7fe fe2b 	bl	80025bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	2000b374 	.word	0x2000b374
 8003970:	40004400 	.word	0x40004400

08003974 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08e      	sub	sp, #56	@ 0x38
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800397c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	60da      	str	r2, [r3, #12]
 800398a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a8e      	ldr	r2, [pc, #568]	@ (8003bcc <HAL_UART_MspInit+0x258>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d14b      	bne.n	8003a2e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	623b      	str	r3, [r7, #32]
 800399a:	4b8d      	ldr	r3, [pc, #564]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	4a8c      	ldr	r2, [pc, #560]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 80039a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80039a6:	4b8a      	ldr	r3, [pc, #552]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039ae:	623b      	str	r3, [r7, #32]
 80039b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	61fb      	str	r3, [r7, #28]
 80039b6:	4b86      	ldr	r3, [pc, #536]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	4a85      	ldr	r2, [pc, #532]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 80039bc:	f043 0304 	orr.w	r3, r3, #4
 80039c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039c2:	4b83      	ldr	r3, [pc, #524]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	61bb      	str	r3, [r7, #24]
 80039d2:	4b7f      	ldr	r3, [pc, #508]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	4a7e      	ldr	r2, [pc, #504]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 80039d8:	f043 0308 	orr.w	r3, r3, #8
 80039dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039de:	4b7c      	ldr	r3, [pc, #496]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = SER2_TX_Pin;
 80039ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f0:	2302      	movs	r3, #2
 80039f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f8:	2303      	movs	r3, #3
 80039fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80039fc:	2308      	movs	r3, #8
 80039fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SER2_TX_GPIO_Port, &GPIO_InitStruct);
 8003a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a04:	4619      	mov	r1, r3
 8003a06:	4873      	ldr	r0, [pc, #460]	@ (8003bd4 <HAL_UART_MspInit+0x260>)
 8003a08:	f001 fb80 	bl	800510c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SER2_RX_Pin;
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a10:	2302      	movs	r3, #2
 8003a12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a14:	2300      	movs	r3, #0
 8003a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003a1c:	2308      	movs	r3, #8
 8003a1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SER2_RX_GPIO_Port, &GPIO_InitStruct);
 8003a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a24:	4619      	mov	r1, r3
 8003a26:	486c      	ldr	r0, [pc, #432]	@ (8003bd8 <HAL_UART_MspInit+0x264>)
 8003a28:	f001 fb70 	bl	800510c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003a2c:	e0ca      	b.n	8003bc4 <HAL_UART_MspInit+0x250>
  else if(uartHandle->Instance==USART1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a6a      	ldr	r2, [pc, #424]	@ (8003bdc <HAL_UART_MspInit+0x268>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	f040 8094 	bne.w	8003b62 <HAL_UART_MspInit+0x1ee>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	4b64      	ldr	r3, [pc, #400]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 8003a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a42:	4a63      	ldr	r2, [pc, #396]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 8003a44:	f043 0310 	orr.w	r3, r3, #16
 8003a48:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a4a:	4b61      	ldr	r3, [pc, #388]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	4b5d      	ldr	r3, [pc, #372]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5e:	4a5c      	ldr	r2, [pc, #368]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 8003a60:	f043 0302 	orr.w	r3, r3, #2
 8003a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a66:	4b5a      	ldr	r3, [pc, #360]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a72:	23c0      	movs	r3, #192	@ 0xc0
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a76:	2302      	movs	r3, #2
 8003a78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a82:	2307      	movs	r3, #7
 8003a84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4854      	ldr	r0, [pc, #336]	@ (8003be0 <HAL_UART_MspInit+0x26c>)
 8003a8e:	f001 fb3d 	bl	800510c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003a92:	4b54      	ldr	r3, [pc, #336]	@ (8003be4 <HAL_UART_MspInit+0x270>)
 8003a94:	4a54      	ldr	r2, [pc, #336]	@ (8003be8 <HAL_UART_MspInit+0x274>)
 8003a96:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003a98:	4b52      	ldr	r3, [pc, #328]	@ (8003be4 <HAL_UART_MspInit+0x270>)
 8003a9a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003a9e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aa0:	4b50      	ldr	r3, [pc, #320]	@ (8003be4 <HAL_UART_MspInit+0x270>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aa6:	4b4f      	ldr	r3, [pc, #316]	@ (8003be4 <HAL_UART_MspInit+0x270>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003aac:	4b4d      	ldr	r3, [pc, #308]	@ (8003be4 <HAL_UART_MspInit+0x270>)
 8003aae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ab2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ab4:	4b4b      	ldr	r3, [pc, #300]	@ (8003be4 <HAL_UART_MspInit+0x270>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003aba:	4b4a      	ldr	r3, [pc, #296]	@ (8003be4 <HAL_UART_MspInit+0x270>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003ac0:	4b48      	ldr	r3, [pc, #288]	@ (8003be4 <HAL_UART_MspInit+0x270>)
 8003ac2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ac6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003ac8:	4b46      	ldr	r3, [pc, #280]	@ (8003be4 <HAL_UART_MspInit+0x270>)
 8003aca:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003ace:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ad0:	4b44      	ldr	r3, [pc, #272]	@ (8003be4 <HAL_UART_MspInit+0x270>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003ad6:	4843      	ldr	r0, [pc, #268]	@ (8003be4 <HAL_UART_MspInit+0x270>)
 8003ad8:	f000 ff16 	bl	8004908 <HAL_DMA_Init>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8003ae2:	f7fe fd6b 	bl	80025bc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a3e      	ldr	r2, [pc, #248]	@ (8003be4 <HAL_UART_MspInit+0x270>)
 8003aea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003aec:	4a3d      	ldr	r2, [pc, #244]	@ (8003be4 <HAL_UART_MspInit+0x270>)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003af2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bec <HAL_UART_MspInit+0x278>)
 8003af4:	4a3e      	ldr	r2, [pc, #248]	@ (8003bf0 <HAL_UART_MspInit+0x27c>)
 8003af6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003af8:	4b3c      	ldr	r3, [pc, #240]	@ (8003bec <HAL_UART_MspInit+0x278>)
 8003afa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003afe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b00:	4b3a      	ldr	r3, [pc, #232]	@ (8003bec <HAL_UART_MspInit+0x278>)
 8003b02:	2240      	movs	r2, #64	@ 0x40
 8003b04:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b06:	4b39      	ldr	r3, [pc, #228]	@ (8003bec <HAL_UART_MspInit+0x278>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b0c:	4b37      	ldr	r3, [pc, #220]	@ (8003bec <HAL_UART_MspInit+0x278>)
 8003b0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b12:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b14:	4b35      	ldr	r3, [pc, #212]	@ (8003bec <HAL_UART_MspInit+0x278>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b1a:	4b34      	ldr	r3, [pc, #208]	@ (8003bec <HAL_UART_MspInit+0x278>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003b20:	4b32      	ldr	r3, [pc, #200]	@ (8003bec <HAL_UART_MspInit+0x278>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003b26:	4b31      	ldr	r3, [pc, #196]	@ (8003bec <HAL_UART_MspInit+0x278>)
 8003b28:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003b2c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8003bec <HAL_UART_MspInit+0x278>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003b34:	482d      	ldr	r0, [pc, #180]	@ (8003bec <HAL_UART_MspInit+0x278>)
 8003b36:	f000 fee7 	bl	8004908 <HAL_DMA_Init>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 8003b40:	f7fe fd3c 	bl	80025bc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a29      	ldr	r2, [pc, #164]	@ (8003bec <HAL_UART_MspInit+0x278>)
 8003b48:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b4a:	4a28      	ldr	r2, [pc, #160]	@ (8003bec <HAL_UART_MspInit+0x278>)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003b50:	2200      	movs	r2, #0
 8003b52:	2105      	movs	r1, #5
 8003b54:	2025      	movs	r0, #37	@ 0x25
 8003b56:	f000 fe91 	bl	800487c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003b5a:	2025      	movs	r0, #37	@ 0x25
 8003b5c:	f000 feaa 	bl	80048b4 <HAL_NVIC_EnableIRQ>
}
 8003b60:	e030      	b.n	8003bc4 <HAL_UART_MspInit+0x250>
  else if(uartHandle->Instance==USART2)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a23      	ldr	r2, [pc, #140]	@ (8003bf4 <HAL_UART_MspInit+0x280>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d12b      	bne.n	8003bc4 <HAL_UART_MspInit+0x250>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	4b17      	ldr	r3, [pc, #92]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 8003b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b74:	4a16      	ldr	r2, [pc, #88]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 8003b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b7c:	4b14      	ldr	r3, [pc, #80]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	4b10      	ldr	r3, [pc, #64]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b90:	4a0f      	ldr	r2, [pc, #60]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 8003b92:	f043 0308 	orr.w	r3, r3, #8
 8003b96:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b98:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd0 <HAL_UART_MspInit+0x25c>)
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003ba4:	2360      	movs	r3, #96	@ 0x60
 8003ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bb4:	2307      	movs	r3, #7
 8003bb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4806      	ldr	r0, [pc, #24]	@ (8003bd8 <HAL_UART_MspInit+0x264>)
 8003bc0:	f001 faa4 	bl	800510c <HAL_GPIO_Init>
}
 8003bc4:	bf00      	nop
 8003bc6:	3738      	adds	r7, #56	@ 0x38
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40005000 	.word	0x40005000
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40020800 	.word	0x40020800
 8003bd8:	40020c00 	.word	0x40020c00
 8003bdc:	40011000 	.word	0x40011000
 8003be0:	40020400 	.word	0x40020400
 8003be4:	2000b3bc 	.word	0x2000b3bc
 8003be8:	40026440 	.word	0x40026440
 8003bec:	2000b41c 	.word	0x2000b41c
 8003bf0:	400264b8 	.word	0x400264b8
 8003bf4:	40004400 	.word	0x40004400

08003bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003bf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bfc:	480d      	ldr	r0, [pc, #52]	@ (8003c34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bfe:	490e      	ldr	r1, [pc, #56]	@ (8003c38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003c00:	4a0e      	ldr	r2, [pc, #56]	@ (8003c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c04:	e002      	b.n	8003c0c <LoopCopyDataInit>

08003c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c0a:	3304      	adds	r3, #4

08003c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c10:	d3f9      	bcc.n	8003c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c12:	4a0b      	ldr	r2, [pc, #44]	@ (8003c40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c14:	4c0b      	ldr	r4, [pc, #44]	@ (8003c44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c18:	e001      	b.n	8003c1e <LoopFillZerobss>

08003c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c1c:	3204      	adds	r2, #4

08003c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c20:	d3fb      	bcc.n	8003c1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c22:	f7ff f9b3 	bl	8002f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c26:	f01c fd63 	bl	80206f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c2a:	f7fe fbd7 	bl	80023dc <main>
  bx  lr    
 8003c2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003c30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c38:	20000c4c 	.word	0x20000c4c
  ldr r2, =_sidata
 8003c3c:	08022c74 	.word	0x08022c74
  ldr r2, =_sbss
 8003c40:	20000c50 	.word	0x20000c50
  ldr r4, =_ebss
 8003c44:	20016714 	.word	0x20016714

08003c48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c48:	e7fe      	b.n	8003c48 <ADC_IRQHandler>
	...

08003c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c50:	4b0e      	ldr	r3, [pc, #56]	@ (8003c8c <HAL_Init+0x40>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a0d      	ldr	r2, [pc, #52]	@ (8003c8c <HAL_Init+0x40>)
 8003c56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c8c <HAL_Init+0x40>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a0a      	ldr	r2, [pc, #40]	@ (8003c8c <HAL_Init+0x40>)
 8003c62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c68:	4b08      	ldr	r3, [pc, #32]	@ (8003c8c <HAL_Init+0x40>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a07      	ldr	r2, [pc, #28]	@ (8003c8c <HAL_Init+0x40>)
 8003c6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c74:	2003      	movs	r0, #3
 8003c76:	f000 fdf6 	bl	8004866 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c7a:	2005      	movs	r0, #5
 8003c7c:	f7fe ffc8 	bl	8002c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c80:	f7fe ff9a 	bl	8002bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40023c00 	.word	0x40023c00

08003c90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c94:	4b06      	ldr	r3, [pc, #24]	@ (8003cb0 <HAL_IncTick+0x20>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4b06      	ldr	r3, [pc, #24]	@ (8003cb4 <HAL_IncTick+0x24>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	4a04      	ldr	r2, [pc, #16]	@ (8003cb4 <HAL_IncTick+0x24>)
 8003ca2:	6013      	str	r3, [r2, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	20000014 	.word	0x20000014
 8003cb4:	2000b47c 	.word	0x2000b47c

08003cb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return uwTick;
 8003cbc:	4b03      	ldr	r3, [pc, #12]	@ (8003ccc <HAL_GetTick+0x14>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	2000b47c 	.word	0x2000b47c

08003cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cd8:	f7ff ffee 	bl	8003cb8 <HAL_GetTick>
 8003cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ce8:	d005      	beq.n	8003cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cea:	4b0a      	ldr	r3, [pc, #40]	@ (8003d14 <HAL_Delay+0x44>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cf6:	bf00      	nop
 8003cf8:	f7ff ffde 	bl	8003cb8 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d8f7      	bhi.n	8003cf8 <HAL_Delay+0x28>
  {
  }
}
 8003d08:	bf00      	nop
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	20000014 	.word	0x20000014

08003d18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e033      	b.n	8003d96 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fc ff92 	bl	8000c60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d118      	bne.n	8003d88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003d5e:	f023 0302 	bic.w	r3, r3, #2
 8003d62:	f043 0202 	orr.w	r2, r3, #2
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fa54 	bl	8004218 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7a:	f023 0303 	bic.w	r3, r3, #3
 8003d7e:	f043 0201 	orr.w	r2, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d86:	e001      	b.n	8003d8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <HAL_ADC_Start_DMA+0x1e>
 8003dba:	2302      	movs	r3, #2
 8003dbc:	e0e9      	b.n	8003f92 <HAL_ADC_Start_DMA+0x1f2>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d018      	beq.n	8003e06 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003de4:	4b6d      	ldr	r3, [pc, #436]	@ (8003f9c <HAL_ADC_Start_DMA+0x1fc>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a6d      	ldr	r2, [pc, #436]	@ (8003fa0 <HAL_ADC_Start_DMA+0x200>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	0c9a      	lsrs	r2, r3, #18
 8003df0:	4613      	mov	r3, r2
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	4413      	add	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003df8:	e002      	b.n	8003e00 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f9      	bne.n	8003dfa <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e14:	d107      	bne.n	8003e26 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e24:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	f040 80a1 	bne.w	8003f78 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003e3e:	f023 0301 	bic.w	r3, r3, #1
 8003e42:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d007      	beq.n	8003e68 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003e60:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e74:	d106      	bne.n	8003e84 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e7a:	f023 0206 	bic.w	r2, r3, #6
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	645a      	str	r2, [r3, #68]	@ 0x44
 8003e82:	e002      	b.n	8003e8a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e92:	4b44      	ldr	r3, [pc, #272]	@ (8003fa4 <HAL_ADC_Start_DMA+0x204>)
 8003e94:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9a:	4a43      	ldr	r2, [pc, #268]	@ (8003fa8 <HAL_ADC_Start_DMA+0x208>)
 8003e9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ea2:	4a42      	ldr	r2, [pc, #264]	@ (8003fac <HAL_ADC_Start_DMA+0x20c>)
 8003ea4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eaa:	4a41      	ldr	r2, [pc, #260]	@ (8003fb0 <HAL_ADC_Start_DMA+0x210>)
 8003eac:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003eb6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003ec6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ed6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	334c      	adds	r3, #76	@ 0x4c
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f000 fdbc 	bl	8004a64 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d12a      	bne.n	8003f4e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb4 <HAL_ADC_Start_DMA+0x214>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d015      	beq.n	8003f2e <HAL_ADC_Start_DMA+0x18e>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a2c      	ldr	r2, [pc, #176]	@ (8003fb8 <HAL_ADC_Start_DMA+0x218>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d105      	bne.n	8003f18 <HAL_ADC_Start_DMA+0x178>
 8003f0c:	4b25      	ldr	r3, [pc, #148]	@ (8003fa4 <HAL_ADC_Start_DMA+0x204>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a27      	ldr	r2, [pc, #156]	@ (8003fbc <HAL_ADC_Start_DMA+0x21c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d136      	bne.n	8003f90 <HAL_ADC_Start_DMA+0x1f0>
 8003f22:	4b20      	ldr	r3, [pc, #128]	@ (8003fa4 <HAL_ADC_Start_DMA+0x204>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d130      	bne.n	8003f90 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d129      	bne.n	8003f90 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	e020      	b.n	8003f90 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a18      	ldr	r2, [pc, #96]	@ (8003fb4 <HAL_ADC_Start_DMA+0x214>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d11b      	bne.n	8003f90 <HAL_ADC_Start_DMA+0x1f0>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d114      	bne.n	8003f90 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003f74:	609a      	str	r2, [r3, #8]
 8003f76:	e00b      	b.n	8003f90 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7c:	f043 0210 	orr.w	r2, r3, #16
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f88:	f043 0201 	orr.w	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	2000000c 	.word	0x2000000c
 8003fa0:	431bde83 	.word	0x431bde83
 8003fa4:	40012300 	.word	0x40012300
 8003fa8:	08004411 	.word	0x08004411
 8003fac:	080044cb 	.word	0x080044cb
 8003fb0:	080044e7 	.word	0x080044e7
 8003fb4:	40012000 	.word	0x40012000
 8003fb8:	40012100 	.word	0x40012100
 8003fbc:	40012200 	.word	0x40012200

08003fc0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x1c>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e105      	b.n	80041fc <HAL_ADC_ConfigChannel+0x228>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b09      	cmp	r3, #9
 8003ffe:	d925      	bls.n	800404c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68d9      	ldr	r1, [r3, #12]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	b29b      	uxth	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	4613      	mov	r3, r2
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	4413      	add	r3, r2
 8004014:	3b1e      	subs	r3, #30
 8004016:	2207      	movs	r2, #7
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	43da      	mvns	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	400a      	ands	r2, r1
 8004024:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68d9      	ldr	r1, [r3, #12]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	b29b      	uxth	r3, r3
 8004036:	4618      	mov	r0, r3
 8004038:	4603      	mov	r3, r0
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	4403      	add	r3, r0
 800403e:	3b1e      	subs	r3, #30
 8004040:	409a      	lsls	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	60da      	str	r2, [r3, #12]
 800404a:	e022      	b.n	8004092 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6919      	ldr	r1, [r3, #16]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	b29b      	uxth	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	4613      	mov	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4413      	add	r3, r2
 8004060:	2207      	movs	r2, #7
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43da      	mvns	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	400a      	ands	r2, r1
 800406e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6919      	ldr	r1, [r3, #16]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	4618      	mov	r0, r3
 8004082:	4603      	mov	r3, r0
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4403      	add	r3, r0
 8004088:	409a      	lsls	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b06      	cmp	r3, #6
 8004098:	d824      	bhi.n	80040e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	3b05      	subs	r3, #5
 80040ac:	221f      	movs	r2, #31
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	43da      	mvns	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	400a      	ands	r2, r1
 80040ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	4618      	mov	r0, r3
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	3b05      	subs	r3, #5
 80040d6:	fa00 f203 	lsl.w	r2, r0, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80040e2:	e04c      	b.n	800417e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b0c      	cmp	r3, #12
 80040ea:	d824      	bhi.n	8004136 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	3b23      	subs	r3, #35	@ 0x23
 80040fe:	221f      	movs	r2, #31
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43da      	mvns	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	400a      	ands	r2, r1
 800410c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	b29b      	uxth	r3, r3
 800411a:	4618      	mov	r0, r3
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	3b23      	subs	r3, #35	@ 0x23
 8004128:	fa00 f203 	lsl.w	r2, r0, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	631a      	str	r2, [r3, #48]	@ 0x30
 8004134:	e023      	b.n	800417e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	3b41      	subs	r3, #65	@ 0x41
 8004148:	221f      	movs	r2, #31
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43da      	mvns	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	400a      	ands	r2, r1
 8004156:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	b29b      	uxth	r3, r3
 8004164:	4618      	mov	r0, r3
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	3b41      	subs	r3, #65	@ 0x41
 8004172:	fa00 f203 	lsl.w	r2, r0, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800417e:	4b22      	ldr	r3, [pc, #136]	@ (8004208 <HAL_ADC_ConfigChannel+0x234>)
 8004180:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a21      	ldr	r2, [pc, #132]	@ (800420c <HAL_ADC_ConfigChannel+0x238>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d109      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x1cc>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b12      	cmp	r3, #18
 8004192:	d105      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a19      	ldr	r2, [pc, #100]	@ (800420c <HAL_ADC_ConfigChannel+0x238>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d123      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x21e>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b10      	cmp	r3, #16
 80041b0:	d003      	beq.n	80041ba <HAL_ADC_ConfigChannel+0x1e6>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b11      	cmp	r3, #17
 80041b8:	d11b      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b10      	cmp	r3, #16
 80041cc:	d111      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041ce:	4b10      	ldr	r3, [pc, #64]	@ (8004210 <HAL_ADC_ConfigChannel+0x23c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a10      	ldr	r2, [pc, #64]	@ (8004214 <HAL_ADC_ConfigChannel+0x240>)
 80041d4:	fba2 2303 	umull	r2, r3, r2, r3
 80041d8:	0c9a      	lsrs	r2, r3, #18
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80041e4:	e002      	b.n	80041ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f9      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	40012300 	.word	0x40012300
 800420c:	40012000 	.word	0x40012000
 8004210:	2000000c 	.word	0x2000000c
 8004214:	431bde83 	.word	0x431bde83

08004218 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004220:	4b79      	ldr	r3, [pc, #484]	@ (8004408 <ADC_Init+0x1f0>)
 8004222:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	431a      	orrs	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800424c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6859      	ldr	r1, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	021a      	lsls	r2, r3, #8
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004270:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6859      	ldr	r1, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004292:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6899      	ldr	r1, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042aa:	4a58      	ldr	r2, [pc, #352]	@ (800440c <ADC_Init+0x1f4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d022      	beq.n	80042f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80042be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6899      	ldr	r1, [r3, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80042e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6899      	ldr	r1, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	e00f      	b.n	8004316 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004304:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004314:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0202 	bic.w	r2, r2, #2
 8004324:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6899      	ldr	r1, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	7e1b      	ldrb	r3, [r3, #24]
 8004330:	005a      	lsls	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01b      	beq.n	800437c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004352:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004362:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6859      	ldr	r1, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436e:	3b01      	subs	r3, #1
 8004370:	035a      	lsls	r2, r3, #13
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]
 800437a:	e007      	b.n	800438c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800438a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800439a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	051a      	lsls	r2, r3, #20
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80043c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6899      	ldr	r1, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80043ce:	025a      	lsls	r2, r3, #9
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6899      	ldr	r1, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	029a      	lsls	r2, r3, #10
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	609a      	str	r2, [r3, #8]
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	40012300 	.word	0x40012300
 800440c:	0f000001 	.word	0x0f000001

08004410 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004426:	2b00      	cmp	r3, #0
 8004428:	d13c      	bne.n	80044a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d12b      	bne.n	800449c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004448:	2b00      	cmp	r3, #0
 800444a:	d127      	bne.n	800449c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004452:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004456:	2b00      	cmp	r3, #0
 8004458:	d006      	beq.n	8004468 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004464:	2b00      	cmp	r3, #0
 8004466:	d119      	bne.n	800449c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0220 	bic.w	r2, r2, #32
 8004476:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004488:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d105      	bne.n	800449c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004494:	f043 0201 	orr.w	r2, r3, #1
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7fe f853 	bl	8002548 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80044a2:	e00e      	b.n	80044c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f7ff fd85 	bl	8003fc0 <HAL_ADC_ErrorCallback>
}
 80044b6:	e004      	b.n	80044c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4798      	blx	r3
}
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7fe f845 	bl	8002568 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2240      	movs	r2, #64	@ 0x40
 80044f8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044fe:	f043 0204 	orr.w	r2, r3, #4
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f7ff fd5a 	bl	8003fc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e0ed      	b.n	8004702 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3020 	ldrb.w	r3, [r3, #32]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7fc fca8 	bl	8000e88 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004548:	f7ff fbb6 	bl	8003cb8 <HAL_GetTick>
 800454c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800454e:	e012      	b.n	8004576 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004550:	f7ff fbb2 	bl	8003cb8 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b0a      	cmp	r3, #10
 800455c:	d90b      	bls.n	8004576 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004562:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2205      	movs	r2, #5
 800456e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e0c5      	b.n	8004702 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0e5      	beq.n	8004550 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f022 0202 	bic.w	r2, r2, #2
 8004592:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004594:	f7ff fb90 	bl	8003cb8 <HAL_GetTick>
 8004598:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800459a:	e012      	b.n	80045c2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800459c:	f7ff fb8c 	bl	8003cb8 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b0a      	cmp	r3, #10
 80045a8:	d90b      	bls.n	80045c2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2205      	movs	r2, #5
 80045ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e09f      	b.n	8004702 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e5      	bne.n	800459c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	7e1b      	ldrb	r3, [r3, #24]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d108      	bne.n	80045ea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	e007      	b.n	80045fa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	7e5b      	ldrb	r3, [r3, #25]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d108      	bne.n	8004614 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	e007      	b.n	8004624 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004622:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	7e9b      	ldrb	r3, [r3, #26]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d108      	bne.n	800463e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f042 0220 	orr.w	r2, r2, #32
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	e007      	b.n	800464e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0220 	bic.w	r2, r2, #32
 800464c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	7edb      	ldrb	r3, [r3, #27]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d108      	bne.n	8004668 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0210 	bic.w	r2, r2, #16
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	e007      	b.n	8004678 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0210 	orr.w	r2, r2, #16
 8004676:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	7f1b      	ldrb	r3, [r3, #28]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d108      	bne.n	8004692 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0208 	orr.w	r2, r2, #8
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	e007      	b.n	80046a2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 0208 	bic.w	r2, r2, #8
 80046a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	7f5b      	ldrb	r3, [r3, #29]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d108      	bne.n	80046bc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f042 0204 	orr.w	r2, r2, #4
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	e007      	b.n	80046cc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0204 	bic.w	r2, r2, #4
 80046ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	695b      	ldr	r3, [r3, #20]
 80046e0:	ea42 0103 	orr.w	r1, r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	1e5a      	subs	r2, r3, #1
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800471c:	4b0c      	ldr	r3, [pc, #48]	@ (8004750 <__NVIC_SetPriorityGrouping+0x44>)
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004728:	4013      	ands	r3, r2
 800472a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004734:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800473c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800473e:	4a04      	ldr	r2, [pc, #16]	@ (8004750 <__NVIC_SetPriorityGrouping+0x44>)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	60d3      	str	r3, [r2, #12]
}
 8004744:	bf00      	nop
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	e000ed00 	.word	0xe000ed00

08004754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004758:	4b04      	ldr	r3, [pc, #16]	@ (800476c <__NVIC_GetPriorityGrouping+0x18>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	0a1b      	lsrs	r3, r3, #8
 800475e:	f003 0307 	and.w	r3, r3, #7
}
 8004762:	4618      	mov	r0, r3
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	e000ed00 	.word	0xe000ed00

08004770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	4603      	mov	r3, r0
 8004778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800477a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800477e:	2b00      	cmp	r3, #0
 8004780:	db0b      	blt.n	800479a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004782:	79fb      	ldrb	r3, [r7, #7]
 8004784:	f003 021f 	and.w	r2, r3, #31
 8004788:	4907      	ldr	r1, [pc, #28]	@ (80047a8 <__NVIC_EnableIRQ+0x38>)
 800478a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	2001      	movs	r0, #1
 8004792:	fa00 f202 	lsl.w	r2, r0, r2
 8004796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	e000e100 	.word	0xe000e100

080047ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	6039      	str	r1, [r7, #0]
 80047b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	db0a      	blt.n	80047d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	490c      	ldr	r1, [pc, #48]	@ (80047f8 <__NVIC_SetPriority+0x4c>)
 80047c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ca:	0112      	lsls	r2, r2, #4
 80047cc:	b2d2      	uxtb	r2, r2
 80047ce:	440b      	add	r3, r1
 80047d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047d4:	e00a      	b.n	80047ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	4908      	ldr	r1, [pc, #32]	@ (80047fc <__NVIC_SetPriority+0x50>)
 80047dc:	79fb      	ldrb	r3, [r7, #7]
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	3b04      	subs	r3, #4
 80047e4:	0112      	lsls	r2, r2, #4
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	440b      	add	r3, r1
 80047ea:	761a      	strb	r2, [r3, #24]
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	e000e100 	.word	0xe000e100
 80047fc:	e000ed00 	.word	0xe000ed00

08004800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004800:	b480      	push	{r7}
 8004802:	b089      	sub	sp, #36	@ 0x24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 0307 	and.w	r3, r3, #7
 8004812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f1c3 0307 	rsb	r3, r3, #7
 800481a:	2b04      	cmp	r3, #4
 800481c:	bf28      	it	cs
 800481e:	2304      	movcs	r3, #4
 8004820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	3304      	adds	r3, #4
 8004826:	2b06      	cmp	r3, #6
 8004828:	d902      	bls.n	8004830 <NVIC_EncodePriority+0x30>
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	3b03      	subs	r3, #3
 800482e:	e000      	b.n	8004832 <NVIC_EncodePriority+0x32>
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004834:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43da      	mvns	r2, r3
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	401a      	ands	r2, r3
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004848:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	fa01 f303 	lsl.w	r3, r1, r3
 8004852:	43d9      	mvns	r1, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004858:	4313      	orrs	r3, r2
         );
}
 800485a:	4618      	mov	r0, r3
 800485c:	3724      	adds	r7, #36	@ 0x24
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004866:	b580      	push	{r7, lr}
 8004868:	b082      	sub	sp, #8
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff ff4c 	bl	800470c <__NVIC_SetPriorityGrouping>
}
 8004874:	bf00      	nop
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	4603      	mov	r3, r0
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800488e:	f7ff ff61 	bl	8004754 <__NVIC_GetPriorityGrouping>
 8004892:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	6978      	ldr	r0, [r7, #20]
 800489a:	f7ff ffb1 	bl	8004800 <NVIC_EncodePriority>
 800489e:	4602      	mov	r2, r0
 80048a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048a4:	4611      	mov	r1, r2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff ff80 	bl	80047ac <__NVIC_SetPriority>
}
 80048ac:	bf00      	nop
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	4603      	mov	r3, r0
 80048bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff ff54 	bl	8004770 <__NVIC_EnableIRQ>
}
 80048c8:	bf00      	nop
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e00e      	b.n	8004900 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	795b      	ldrb	r3, [r3, #5]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d105      	bne.n	80048f8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fc fb24 	bl	8000f40 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004914:	f7ff f9d0 	bl	8003cb8 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e099      	b.n	8004a58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0201 	bic.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004944:	e00f      	b.n	8004966 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004946:	f7ff f9b7 	bl	8003cb8 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b05      	cmp	r3, #5
 8004952:	d908      	bls.n	8004966 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2220      	movs	r2, #32
 8004958:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2203      	movs	r2, #3
 800495e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e078      	b.n	8004a58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e8      	bne.n	8004946 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	4b38      	ldr	r3, [pc, #224]	@ (8004a60 <HAL_DMA_Init+0x158>)
 8004980:	4013      	ands	r3, r2
 8004982:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004992:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800499e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d107      	bne.n	80049d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c8:	4313      	orrs	r3, r2
 80049ca:	697a      	ldr	r2, [r7, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f023 0307 	bic.w	r3, r3, #7
 80049e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d117      	bne.n	8004a2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00e      	beq.n	8004a2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fb01 	bl	8005014 <DMA_CheckFifoParam>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d008      	beq.n	8004a2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2240      	movs	r2, #64	@ 0x40
 8004a1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004a26:	2301      	movs	r3, #1
 8004a28:	e016      	b.n	8004a58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fab8 	bl	8004fa8 <DMA_CalcBaseAndBitshift>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a40:	223f      	movs	r2, #63	@ 0x3f
 8004a42:	409a      	lsls	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	f010803f 	.word	0xf010803f

08004a64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a72:	2300      	movs	r3, #0
 8004a74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <HAL_DMA_Start_IT+0x26>
 8004a86:	2302      	movs	r3, #2
 8004a88:	e040      	b.n	8004b0c <HAL_DMA_Start_IT+0xa8>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d12f      	bne.n	8004afe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 fa4a 	bl	8004f4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004abc:	223f      	movs	r2, #63	@ 0x3f
 8004abe:	409a      	lsls	r2, r3
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f042 0216 	orr.w	r2, r2, #22
 8004ad2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d007      	beq.n	8004aec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0208 	orr.w	r2, r2, #8
 8004aea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0201 	orr.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	e005      	b.n	8004b0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004b06:	2302      	movs	r3, #2
 8004b08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004b22:	f7ff f8c9 	bl	8003cb8 <HAL_GetTick>
 8004b26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d008      	beq.n	8004b46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2280      	movs	r2, #128	@ 0x80
 8004b38:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e052      	b.n	8004bec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0216 	bic.w	r2, r2, #22
 8004b54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695a      	ldr	r2, [r3, #20]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d103      	bne.n	8004b76 <HAL_DMA_Abort+0x62>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d007      	beq.n	8004b86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0208 	bic.w	r2, r2, #8
 8004b84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0201 	bic.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b96:	e013      	b.n	8004bc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b98:	f7ff f88e 	bl	8003cb8 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b05      	cmp	r3, #5
 8004ba4:	d90c      	bls.n	8004bc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2220      	movs	r2, #32
 8004baa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2203      	movs	r2, #3
 8004bb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e015      	b.n	8004bec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e4      	bne.n	8004b98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd2:	223f      	movs	r2, #63	@ 0x3f
 8004bd4:	409a      	lsls	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d004      	beq.n	8004c12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2280      	movs	r2, #128	@ 0x80
 8004c0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e00c      	b.n	8004c2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2205      	movs	r2, #5
 8004c16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0201 	bic.w	r2, r2, #1
 8004c28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c44:	4b8e      	ldr	r3, [pc, #568]	@ (8004e80 <HAL_DMA_IRQHandler+0x248>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a8e      	ldr	r2, [pc, #568]	@ (8004e84 <HAL_DMA_IRQHandler+0x24c>)
 8004c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4e:	0a9b      	lsrs	r3, r3, #10
 8004c50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c62:	2208      	movs	r2, #8
 8004c64:	409a      	lsls	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01a      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d013      	beq.n	8004ca4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0204 	bic.w	r2, r2, #4
 8004c8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c90:	2208      	movs	r2, #8
 8004c92:	409a      	lsls	r2, r3
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c9c:	f043 0201 	orr.w	r2, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca8:	2201      	movs	r2, #1
 8004caa:	409a      	lsls	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d012      	beq.n	8004cda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	409a      	lsls	r2, r3
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd2:	f043 0202 	orr.w	r2, r3, #2
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cde:	2204      	movs	r2, #4
 8004ce0:	409a      	lsls	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d012      	beq.n	8004d10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00b      	beq.n	8004d10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cfc:	2204      	movs	r2, #4
 8004cfe:	409a      	lsls	r2, r3
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d08:	f043 0204 	orr.w	r2, r3, #4
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d14:	2210      	movs	r2, #16
 8004d16:	409a      	lsls	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d043      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d03c      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d32:	2210      	movs	r2, #16
 8004d34:	409a      	lsls	r2, r3
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d018      	beq.n	8004d7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d108      	bne.n	8004d68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d024      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	4798      	blx	r3
 8004d66:	e01f      	b.n	8004da8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01b      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	4798      	blx	r3
 8004d78:	e016      	b.n	8004da8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d107      	bne.n	8004d98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0208 	bic.w	r2, r2, #8
 8004d96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dac:	2220      	movs	r2, #32
 8004dae:	409a      	lsls	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4013      	ands	r3, r2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 808f 	beq.w	8004ed8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 8087 	beq.w	8004ed8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dce:	2220      	movs	r2, #32
 8004dd0:	409a      	lsls	r2, r3
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b05      	cmp	r3, #5
 8004de0:	d136      	bne.n	8004e50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0216 	bic.w	r2, r2, #22
 8004df0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	695a      	ldr	r2, [r3, #20]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d103      	bne.n	8004e12 <HAL_DMA_IRQHandler+0x1da>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d007      	beq.n	8004e22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0208 	bic.w	r2, r2, #8
 8004e20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e26:	223f      	movs	r2, #63	@ 0x3f
 8004e28:	409a      	lsls	r2, r3
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d07e      	beq.n	8004f44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	4798      	blx	r3
        }
        return;
 8004e4e:	e079      	b.n	8004f44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d01d      	beq.n	8004e9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10d      	bne.n	8004e88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d031      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	4798      	blx	r3
 8004e7c:	e02c      	b.n	8004ed8 <HAL_DMA_IRQHandler+0x2a0>
 8004e7e:	bf00      	nop
 8004e80:	2000000c 	.word	0x2000000c
 8004e84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d023      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	4798      	blx	r3
 8004e98:	e01e      	b.n	8004ed8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10f      	bne.n	8004ec8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0210 	bic.w	r2, r2, #16
 8004eb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d003      	beq.n	8004ed8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d032      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d022      	beq.n	8004f32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2205      	movs	r2, #5
 8004ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0201 	bic.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	3301      	adds	r3, #1
 8004f08:	60bb      	str	r3, [r7, #8]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d307      	bcc.n	8004f20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1f2      	bne.n	8004f04 <HAL_DMA_IRQHandler+0x2cc>
 8004f1e:	e000      	b.n	8004f22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	4798      	blx	r3
 8004f42:	e000      	b.n	8004f46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f44:	bf00      	nop
    }
  }
}
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	2b40      	cmp	r3, #64	@ 0x40
 8004f78:	d108      	bne.n	8004f8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f8a:	e007      	b.n	8004f9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	60da      	str	r2, [r3, #12]
}
 8004f9c:	bf00      	nop
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	3b10      	subs	r3, #16
 8004fb8:	4a14      	ldr	r2, [pc, #80]	@ (800500c <DMA_CalcBaseAndBitshift+0x64>)
 8004fba:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbe:	091b      	lsrs	r3, r3, #4
 8004fc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fc2:	4a13      	ldr	r2, [pc, #76]	@ (8005010 <DMA_CalcBaseAndBitshift+0x68>)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d909      	bls.n	8004fea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004fde:	f023 0303 	bic.w	r3, r3, #3
 8004fe2:	1d1a      	adds	r2, r3, #4
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	659a      	str	r2, [r3, #88]	@ 0x58
 8004fe8:	e007      	b.n	8004ffa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004ff2:	f023 0303 	bic.w	r3, r3, #3
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	aaaaaaab 	.word	0xaaaaaaab
 8005010:	080215e4 	.word	0x080215e4

08005014 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800501c:	2300      	movs	r3, #0
 800501e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005024:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d11f      	bne.n	800506e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	2b03      	cmp	r3, #3
 8005032:	d856      	bhi.n	80050e2 <DMA_CheckFifoParam+0xce>
 8005034:	a201      	add	r2, pc, #4	@ (adr r2, 800503c <DMA_CheckFifoParam+0x28>)
 8005036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503a:	bf00      	nop
 800503c:	0800504d 	.word	0x0800504d
 8005040:	0800505f 	.word	0x0800505f
 8005044:	0800504d 	.word	0x0800504d
 8005048:	080050e3 	.word	0x080050e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005050:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d046      	beq.n	80050e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800505c:	e043      	b.n	80050e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005062:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005066:	d140      	bne.n	80050ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800506c:	e03d      	b.n	80050ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699b      	ldr	r3, [r3, #24]
 8005072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005076:	d121      	bne.n	80050bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b03      	cmp	r3, #3
 800507c:	d837      	bhi.n	80050ee <DMA_CheckFifoParam+0xda>
 800507e:	a201      	add	r2, pc, #4	@ (adr r2, 8005084 <DMA_CheckFifoParam+0x70>)
 8005080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005084:	08005095 	.word	0x08005095
 8005088:	0800509b 	.word	0x0800509b
 800508c:	08005095 	.word	0x08005095
 8005090:	080050ad 	.word	0x080050ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
      break;
 8005098:	e030      	b.n	80050fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d025      	beq.n	80050f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050aa:	e022      	b.n	80050f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050b4:	d11f      	bne.n	80050f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050ba:	e01c      	b.n	80050f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d903      	bls.n	80050ca <DMA_CheckFifoParam+0xb6>
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d003      	beq.n	80050d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050c8:	e018      	b.n	80050fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	73fb      	strb	r3, [r7, #15]
      break;
 80050ce:	e015      	b.n	80050fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00e      	beq.n	80050fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	73fb      	strb	r3, [r7, #15]
      break;
 80050e0:	e00b      	b.n	80050fa <DMA_CheckFifoParam+0xe6>
      break;
 80050e2:	bf00      	nop
 80050e4:	e00a      	b.n	80050fc <DMA_CheckFifoParam+0xe8>
      break;
 80050e6:	bf00      	nop
 80050e8:	e008      	b.n	80050fc <DMA_CheckFifoParam+0xe8>
      break;
 80050ea:	bf00      	nop
 80050ec:	e006      	b.n	80050fc <DMA_CheckFifoParam+0xe8>
      break;
 80050ee:	bf00      	nop
 80050f0:	e004      	b.n	80050fc <DMA_CheckFifoParam+0xe8>
      break;
 80050f2:	bf00      	nop
 80050f4:	e002      	b.n	80050fc <DMA_CheckFifoParam+0xe8>
      break;   
 80050f6:	bf00      	nop
 80050f8:	e000      	b.n	80050fc <DMA_CheckFifoParam+0xe8>
      break;
 80050fa:	bf00      	nop
    }
  } 
  
  return status; 
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop

0800510c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800510c:	b480      	push	{r7}
 800510e:	b089      	sub	sp, #36	@ 0x24
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005116:	2300      	movs	r3, #0
 8005118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800511a:	2300      	movs	r3, #0
 800511c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800511e:	2300      	movs	r3, #0
 8005120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
 8005126:	e16b      	b.n	8005400 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005128:	2201      	movs	r2, #1
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	4013      	ands	r3, r2
 800513a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	429a      	cmp	r2, r3
 8005142:	f040 815a 	bne.w	80053fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	2b01      	cmp	r3, #1
 8005150:	d005      	beq.n	800515e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800515a:	2b02      	cmp	r3, #2
 800515c:	d130      	bne.n	80051c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	2203      	movs	r2, #3
 800516a:	fa02 f303 	lsl.w	r3, r2, r3
 800516e:	43db      	mvns	r3, r3
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	4013      	ands	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	fa02 f303 	lsl.w	r3, r2, r3
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	4313      	orrs	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005194:	2201      	movs	r2, #1
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	43db      	mvns	r3, r3
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	4013      	ands	r3, r2
 80051a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	091b      	lsrs	r3, r3, #4
 80051aa:	f003 0201 	and.w	r2, r3, #1
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69ba      	ldr	r2, [r7, #24]
 80051be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d017      	beq.n	80051fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	2203      	movs	r2, #3
 80051d8:	fa02 f303 	lsl.w	r3, r2, r3
 80051dc:	43db      	mvns	r3, r3
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4013      	ands	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f003 0303 	and.w	r3, r3, #3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d123      	bne.n	8005250 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	08da      	lsrs	r2, r3, #3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3208      	adds	r2, #8
 8005210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005214:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	220f      	movs	r2, #15
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	43db      	mvns	r3, r3
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	4013      	ands	r3, r2
 800522a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	691a      	ldr	r2, [r3, #16]
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	4313      	orrs	r3, r2
 8005240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	08da      	lsrs	r2, r3, #3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	3208      	adds	r2, #8
 800524a:	69b9      	ldr	r1, [r7, #24]
 800524c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	2203      	movs	r2, #3
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	43db      	mvns	r3, r3
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	4013      	ands	r3, r2
 8005266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f003 0203 	and.w	r2, r3, #3
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	4313      	orrs	r3, r2
 800527c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 80b4 	beq.w	80053fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	4b60      	ldr	r3, [pc, #384]	@ (8005418 <HAL_GPIO_Init+0x30c>)
 8005298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529a:	4a5f      	ldr	r2, [pc, #380]	@ (8005418 <HAL_GPIO_Init+0x30c>)
 800529c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80052a2:	4b5d      	ldr	r3, [pc, #372]	@ (8005418 <HAL_GPIO_Init+0x30c>)
 80052a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052ae:	4a5b      	ldr	r2, [pc, #364]	@ (800541c <HAL_GPIO_Init+0x310>)
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	089b      	lsrs	r3, r3, #2
 80052b4:	3302      	adds	r3, #2
 80052b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	220f      	movs	r2, #15
 80052c6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ca:	43db      	mvns	r3, r3
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	4013      	ands	r3, r2
 80052d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a52      	ldr	r2, [pc, #328]	@ (8005420 <HAL_GPIO_Init+0x314>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d02b      	beq.n	8005332 <HAL_GPIO_Init+0x226>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a51      	ldr	r2, [pc, #324]	@ (8005424 <HAL_GPIO_Init+0x318>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d025      	beq.n	800532e <HAL_GPIO_Init+0x222>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a50      	ldr	r2, [pc, #320]	@ (8005428 <HAL_GPIO_Init+0x31c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d01f      	beq.n	800532a <HAL_GPIO_Init+0x21e>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a4f      	ldr	r2, [pc, #316]	@ (800542c <HAL_GPIO_Init+0x320>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d019      	beq.n	8005326 <HAL_GPIO_Init+0x21a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a4e      	ldr	r2, [pc, #312]	@ (8005430 <HAL_GPIO_Init+0x324>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d013      	beq.n	8005322 <HAL_GPIO_Init+0x216>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a4d      	ldr	r2, [pc, #308]	@ (8005434 <HAL_GPIO_Init+0x328>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00d      	beq.n	800531e <HAL_GPIO_Init+0x212>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a4c      	ldr	r2, [pc, #304]	@ (8005438 <HAL_GPIO_Init+0x32c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d007      	beq.n	800531a <HAL_GPIO_Init+0x20e>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a4b      	ldr	r2, [pc, #300]	@ (800543c <HAL_GPIO_Init+0x330>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d101      	bne.n	8005316 <HAL_GPIO_Init+0x20a>
 8005312:	2307      	movs	r3, #7
 8005314:	e00e      	b.n	8005334 <HAL_GPIO_Init+0x228>
 8005316:	2308      	movs	r3, #8
 8005318:	e00c      	b.n	8005334 <HAL_GPIO_Init+0x228>
 800531a:	2306      	movs	r3, #6
 800531c:	e00a      	b.n	8005334 <HAL_GPIO_Init+0x228>
 800531e:	2305      	movs	r3, #5
 8005320:	e008      	b.n	8005334 <HAL_GPIO_Init+0x228>
 8005322:	2304      	movs	r3, #4
 8005324:	e006      	b.n	8005334 <HAL_GPIO_Init+0x228>
 8005326:	2303      	movs	r3, #3
 8005328:	e004      	b.n	8005334 <HAL_GPIO_Init+0x228>
 800532a:	2302      	movs	r3, #2
 800532c:	e002      	b.n	8005334 <HAL_GPIO_Init+0x228>
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <HAL_GPIO_Init+0x228>
 8005332:	2300      	movs	r3, #0
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	f002 0203 	and.w	r2, r2, #3
 800533a:	0092      	lsls	r2, r2, #2
 800533c:	4093      	lsls	r3, r2
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	4313      	orrs	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005344:	4935      	ldr	r1, [pc, #212]	@ (800541c <HAL_GPIO_Init+0x310>)
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	089b      	lsrs	r3, r3, #2
 800534a:	3302      	adds	r3, #2
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005352:	4b3b      	ldr	r3, [pc, #236]	@ (8005440 <HAL_GPIO_Init+0x334>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	43db      	mvns	r3, r3
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	4013      	ands	r3, r2
 8005360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005376:	4a32      	ldr	r2, [pc, #200]	@ (8005440 <HAL_GPIO_Init+0x334>)
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800537c:	4b30      	ldr	r3, [pc, #192]	@ (8005440 <HAL_GPIO_Init+0x334>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	43db      	mvns	r3, r3
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	4013      	ands	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053a0:	4a27      	ldr	r2, [pc, #156]	@ (8005440 <HAL_GPIO_Init+0x334>)
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053a6:	4b26      	ldr	r3, [pc, #152]	@ (8005440 <HAL_GPIO_Init+0x334>)
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	43db      	mvns	r3, r3
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	4013      	ands	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80053c2:	69ba      	ldr	r2, [r7, #24]
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053ca:	4a1d      	ldr	r2, [pc, #116]	@ (8005440 <HAL_GPIO_Init+0x334>)
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005440 <HAL_GPIO_Init+0x334>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	43db      	mvns	r3, r3
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	4013      	ands	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053f4:	4a12      	ldr	r2, [pc, #72]	@ (8005440 <HAL_GPIO_Init+0x334>)
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	3301      	adds	r3, #1
 80053fe:	61fb      	str	r3, [r7, #28]
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	2b0f      	cmp	r3, #15
 8005404:	f67f ae90 	bls.w	8005128 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005408:	bf00      	nop
 800540a:	bf00      	nop
 800540c:	3724      	adds	r7, #36	@ 0x24
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40023800 	.word	0x40023800
 800541c:	40013800 	.word	0x40013800
 8005420:	40020000 	.word	0x40020000
 8005424:	40020400 	.word	0x40020400
 8005428:	40020800 	.word	0x40020800
 800542c:	40020c00 	.word	0x40020c00
 8005430:	40021000 	.word	0x40021000
 8005434:	40021400 	.word	0x40021400
 8005438:	40021800 	.word	0x40021800
 800543c:	40021c00 	.word	0x40021c00
 8005440:	40013c00 	.word	0x40013c00

08005444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	807b      	strh	r3, [r7, #2]
 8005450:	4613      	mov	r3, r2
 8005452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005454:	787b      	ldrb	r3, [r7, #1]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800545a:	887a      	ldrh	r2, [r7, #2]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005460:	e003      	b.n	800546a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005462:	887b      	ldrh	r3, [r7, #2]
 8005464:	041a      	lsls	r2, r3, #16
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	619a      	str	r2, [r3, #24]
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
	...

08005478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e12b      	b.n	80056e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fc ff54 	bl	800234c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2224      	movs	r2, #36	@ 0x24
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0201 	bic.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054dc:	f001 ffd2 	bl	8007484 <HAL_RCC_GetPCLK1Freq>
 80054e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	4a81      	ldr	r2, [pc, #516]	@ (80056ec <HAL_I2C_Init+0x274>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d807      	bhi.n	80054fc <HAL_I2C_Init+0x84>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4a80      	ldr	r2, [pc, #512]	@ (80056f0 <HAL_I2C_Init+0x278>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	bf94      	ite	ls
 80054f4:	2301      	movls	r3, #1
 80054f6:	2300      	movhi	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	e006      	b.n	800550a <HAL_I2C_Init+0x92>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4a7d      	ldr	r2, [pc, #500]	@ (80056f4 <HAL_I2C_Init+0x27c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	bf94      	ite	ls
 8005504:	2301      	movls	r3, #1
 8005506:	2300      	movhi	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e0e7      	b.n	80056e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4a78      	ldr	r2, [pc, #480]	@ (80056f8 <HAL_I2C_Init+0x280>)
 8005516:	fba2 2303 	umull	r2, r3, r2, r3
 800551a:	0c9b      	lsrs	r3, r3, #18
 800551c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4a6a      	ldr	r2, [pc, #424]	@ (80056ec <HAL_I2C_Init+0x274>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d802      	bhi.n	800554c <HAL_I2C_Init+0xd4>
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	3301      	adds	r3, #1
 800554a:	e009      	b.n	8005560 <HAL_I2C_Init+0xe8>
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005552:	fb02 f303 	mul.w	r3, r2, r3
 8005556:	4a69      	ldr	r2, [pc, #420]	@ (80056fc <HAL_I2C_Init+0x284>)
 8005558:	fba2 2303 	umull	r2, r3, r2, r3
 800555c:	099b      	lsrs	r3, r3, #6
 800555e:	3301      	adds	r3, #1
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6812      	ldr	r2, [r2, #0]
 8005564:	430b      	orrs	r3, r1
 8005566:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005572:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	495c      	ldr	r1, [pc, #368]	@ (80056ec <HAL_I2C_Init+0x274>)
 800557c:	428b      	cmp	r3, r1
 800557e:	d819      	bhi.n	80055b4 <HAL_I2C_Init+0x13c>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	1e59      	subs	r1, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	fbb1 f3f3 	udiv	r3, r1, r3
 800558e:	1c59      	adds	r1, r3, #1
 8005590:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005594:	400b      	ands	r3, r1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <HAL_I2C_Init+0x138>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1e59      	subs	r1, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80055a8:	3301      	adds	r3, #1
 80055aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ae:	e051      	b.n	8005654 <HAL_I2C_Init+0x1dc>
 80055b0:	2304      	movs	r3, #4
 80055b2:	e04f      	b.n	8005654 <HAL_I2C_Init+0x1dc>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d111      	bne.n	80055e0 <HAL_I2C_Init+0x168>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	1e58      	subs	r0, r3, #1
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6859      	ldr	r1, [r3, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	440b      	add	r3, r1
 80055ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ce:	3301      	adds	r3, #1
 80055d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	bf0c      	ite	eq
 80055d8:	2301      	moveq	r3, #1
 80055da:	2300      	movne	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	e012      	b.n	8005606 <HAL_I2C_Init+0x18e>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	1e58      	subs	r0, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6859      	ldr	r1, [r3, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	0099      	lsls	r1, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80055f6:	3301      	adds	r3, #1
 80055f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	bf0c      	ite	eq
 8005600:	2301      	moveq	r3, #1
 8005602:	2300      	movne	r3, #0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <HAL_I2C_Init+0x196>
 800560a:	2301      	movs	r3, #1
 800560c:	e022      	b.n	8005654 <HAL_I2C_Init+0x1dc>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10e      	bne.n	8005634 <HAL_I2C_Init+0x1bc>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	1e58      	subs	r0, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6859      	ldr	r1, [r3, #4]
 800561e:	460b      	mov	r3, r1
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	440b      	add	r3, r1
 8005624:	fbb0 f3f3 	udiv	r3, r0, r3
 8005628:	3301      	adds	r3, #1
 800562a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005632:	e00f      	b.n	8005654 <HAL_I2C_Init+0x1dc>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	1e58      	subs	r0, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6859      	ldr	r1, [r3, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	0099      	lsls	r1, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	fbb0 f3f3 	udiv	r3, r0, r3
 800564a:	3301      	adds	r3, #1
 800564c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005650:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	6809      	ldr	r1, [r1, #0]
 8005658:	4313      	orrs	r3, r2
 800565a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69da      	ldr	r2, [r3, #28]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005682:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6911      	ldr	r1, [r2, #16]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	68d2      	ldr	r2, [r2, #12]
 800568e:	4311      	orrs	r1, r2
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6812      	ldr	r2, [r2, #0]
 8005694:	430b      	orrs	r3, r1
 8005696:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695a      	ldr	r2, [r3, #20]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	000186a0 	.word	0x000186a0
 80056f0:	001e847f 	.word	0x001e847f
 80056f4:	003d08ff 	.word	0x003d08ff
 80056f8:	431bde83 	.word	0x431bde83
 80056fc:	10624dd3 	.word	0x10624dd3

08005700 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af02      	add	r7, sp, #8
 8005706:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e101      	b.n	8005916 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d106      	bne.n	8005732 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f00b fc7b 	bl	8011028 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2203      	movs	r2, #3
 8005736:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005740:	d102      	bne.n	8005748 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4618      	mov	r0, r3
 800574e:	f005 f92c 	bl	800a9aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	7c1a      	ldrb	r2, [r3, #16]
 800575a:	f88d 2000 	strb.w	r2, [sp]
 800575e:	3304      	adds	r3, #4
 8005760:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005762:	f005 f80b 	bl	800a77c <USB_CoreInit>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e0ce      	b.n	8005916 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2100      	movs	r1, #0
 800577e:	4618      	mov	r0, r3
 8005780:	f005 f924 	bl	800a9cc <USB_SetCurrentMode>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2202      	movs	r2, #2
 800578e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e0bf      	b.n	8005916 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005796:	2300      	movs	r3, #0
 8005798:	73fb      	strb	r3, [r7, #15]
 800579a:	e04a      	b.n	8005832 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800579c:	7bfa      	ldrb	r2, [r7, #15]
 800579e:	6879      	ldr	r1, [r7, #4]
 80057a0:	4613      	mov	r3, r2
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	4413      	add	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	440b      	add	r3, r1
 80057aa:	3315      	adds	r3, #21
 80057ac:	2201      	movs	r2, #1
 80057ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80057b0:	7bfa      	ldrb	r2, [r7, #15]
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	4613      	mov	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	440b      	add	r3, r1
 80057be:	3314      	adds	r3, #20
 80057c0:	7bfa      	ldrb	r2, [r7, #15]
 80057c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80057c4:	7bfa      	ldrb	r2, [r7, #15]
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
 80057c8:	b298      	uxth	r0, r3
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	4613      	mov	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	332e      	adds	r3, #46	@ 0x2e
 80057d8:	4602      	mov	r2, r0
 80057da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80057dc:	7bfa      	ldrb	r2, [r7, #15]
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	4613      	mov	r3, r2
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	4413      	add	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	440b      	add	r3, r1
 80057ea:	3318      	adds	r3, #24
 80057ec:	2200      	movs	r2, #0
 80057ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80057f0:	7bfa      	ldrb	r2, [r7, #15]
 80057f2:	6879      	ldr	r1, [r7, #4]
 80057f4:	4613      	mov	r3, r2
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	4413      	add	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	440b      	add	r3, r1
 80057fe:	331c      	adds	r3, #28
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005804:	7bfa      	ldrb	r2, [r7, #15]
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	4613      	mov	r3, r2
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	3320      	adds	r3, #32
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005818:	7bfa      	ldrb	r2, [r7, #15]
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	4613      	mov	r3, r2
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	4413      	add	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	3324      	adds	r3, #36	@ 0x24
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	3301      	adds	r3, #1
 8005830:	73fb      	strb	r3, [r7, #15]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	791b      	ldrb	r3, [r3, #4]
 8005836:	7bfa      	ldrb	r2, [r7, #15]
 8005838:	429a      	cmp	r2, r3
 800583a:	d3af      	bcc.n	800579c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800583c:	2300      	movs	r3, #0
 800583e:	73fb      	strb	r3, [r7, #15]
 8005840:	e044      	b.n	80058cc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005842:	7bfa      	ldrb	r2, [r7, #15]
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	4613      	mov	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	4413      	add	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	440b      	add	r3, r1
 8005850:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005854:	2200      	movs	r2, #0
 8005856:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005858:	7bfa      	ldrb	r2, [r7, #15]
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	4613      	mov	r3, r2
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	440b      	add	r3, r1
 8005866:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800586a:	7bfa      	ldrb	r2, [r7, #15]
 800586c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800586e:	7bfa      	ldrb	r2, [r7, #15]
 8005870:	6879      	ldr	r1, [r7, #4]
 8005872:	4613      	mov	r3, r2
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	4413      	add	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	440b      	add	r3, r1
 800587c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005880:	2200      	movs	r2, #0
 8005882:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005884:	7bfa      	ldrb	r2, [r7, #15]
 8005886:	6879      	ldr	r1, [r7, #4]
 8005888:	4613      	mov	r3, r2
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	440b      	add	r3, r1
 8005892:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800589a:	7bfa      	ldrb	r2, [r7, #15]
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	4613      	mov	r3, r2
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	440b      	add	r3, r1
 80058a8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80058b0:	7bfa      	ldrb	r2, [r7, #15]
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80058c2:	2200      	movs	r2, #0
 80058c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
 80058c8:	3301      	adds	r3, #1
 80058ca:	73fb      	strb	r3, [r7, #15]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	791b      	ldrb	r3, [r3, #4]
 80058d0:	7bfa      	ldrb	r2, [r7, #15]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d3b5      	bcc.n	8005842 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6818      	ldr	r0, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	7c1a      	ldrb	r2, [r3, #16]
 80058de:	f88d 2000 	strb.w	r2, [sp]
 80058e2:	3304      	adds	r3, #4
 80058e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058e6:	f005 f8bd 	bl	800aa64 <USB_DevInit>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d005      	beq.n	80058fc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e00c      	b.n	8005916 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f006 f907 	bl	800bb22 <USB_DevDisconnect>

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005932:	2b01      	cmp	r3, #1
 8005934:	d101      	bne.n	800593a <HAL_PCD_Start+0x1c>
 8005936:	2302      	movs	r3, #2
 8005938:	e022      	b.n	8005980 <HAL_PCD_Start+0x62>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005952:	2b01      	cmp	r3, #1
 8005954:	d105      	bne.n	8005962 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f005 f80e 	bl	800a988 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4618      	mov	r0, r3
 8005972:	f006 f8b5 	bl	800bae0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005988:	b590      	push	{r4, r7, lr}
 800598a:	b08d      	sub	sp, #52	@ 0x34
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4618      	mov	r0, r3
 80059a0:	f006 f973 	bl	800bc8a <USB_GetMode>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f040 848c 	bne.w	80062c4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f006 f8d7 	bl	800bb64 <USB_ReadInterrupts>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 8482 	beq.w	80062c2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	0a1b      	lsrs	r3, r3, #8
 80059c8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f006 f8c4 	bl	800bb64 <USB_ReadInterrupts>
 80059dc:	4603      	mov	r3, r0
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d107      	bne.n	80059f6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695a      	ldr	r2, [r3, #20]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f002 0202 	and.w	r2, r2, #2
 80059f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f006 f8b2 	bl	800bb64 <USB_ReadInterrupts>
 8005a00:	4603      	mov	r3, r0
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	2b10      	cmp	r3, #16
 8005a08:	d161      	bne.n	8005ace <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699a      	ldr	r2, [r3, #24]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0210 	bic.w	r2, r2, #16
 8005a18:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	f003 020f 	and.w	r2, r3, #15
 8005a26:	4613      	mov	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	4413      	add	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	4413      	add	r3, r2
 8005a36:	3304      	adds	r3, #4
 8005a38:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	0c5b      	lsrs	r3, r3, #17
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d124      	bne.n	8005a90 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d035      	beq.n	8005abe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	091b      	lsrs	r3, r3, #4
 8005a5a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	461a      	mov	r2, r3
 8005a64:	6a38      	ldr	r0, [r7, #32]
 8005a66:	f005 fee9 	bl	800b83c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	091b      	lsrs	r3, r3, #4
 8005a72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a76:	441a      	add	r2, r3
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	695a      	ldr	r2, [r3, #20]
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	091b      	lsrs	r3, r3, #4
 8005a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a88:	441a      	add	r2, r3
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	615a      	str	r2, [r3, #20]
 8005a8e:	e016      	b.n	8005abe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	0c5b      	lsrs	r3, r3, #17
 8005a94:	f003 030f 	and.w	r3, r3, #15
 8005a98:	2b06      	cmp	r3, #6
 8005a9a:	d110      	bne.n	8005abe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005aa2:	2208      	movs	r2, #8
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	6a38      	ldr	r0, [r7, #32]
 8005aa8:	f005 fec8 	bl	800b83c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	695a      	ldr	r2, [r3, #20]
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	091b      	lsrs	r3, r3, #4
 8005ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ab8:	441a      	add	r2, r3
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	699a      	ldr	r2, [r3, #24]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f042 0210 	orr.w	r2, r2, #16
 8005acc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f006 f846 	bl	800bb64 <USB_ReadInterrupts>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ade:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005ae2:	f040 80a7 	bne.w	8005c34 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f006 f84b 	bl	800bb8a <USB_ReadDevAllOutEpInterrupt>
 8005af4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005af6:	e099      	b.n	8005c2c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 808e 	beq.w	8005c20 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	4611      	mov	r1, r2
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f006 f86f 	bl	800bbf2 <USB_ReadDevOutEPInterrupt>
 8005b14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00c      	beq.n	8005b3a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	2301      	movs	r3, #1
 8005b30:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005b32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fea3 	bl	8006880 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00c      	beq.n	8005b5e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b50:	461a      	mov	r2, r3
 8005b52:	2308      	movs	r3, #8
 8005b54:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005b56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 ff79 	bl	8006a50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f003 0310 	and.w	r3, r3, #16
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d008      	beq.n	8005b7a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b74:	461a      	mov	r2, r3
 8005b76:	2310      	movs	r3, #16
 8005b78:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d030      	beq.n	8005be6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	695b      	ldr	r3, [r3, #20]
 8005b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b8c:	2b80      	cmp	r3, #128	@ 0x80
 8005b8e:	d109      	bne.n	8005ba4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	69fa      	ldr	r2, [r7, #28]
 8005b9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ba2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	3304      	adds	r3, #4
 8005bb8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	78db      	ldrb	r3, [r3, #3]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d108      	bne.n	8005bd4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	4619      	mov	r1, r3
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f00b fb30 	bl	8011234 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005be0:	461a      	mov	r2, r3
 8005be2:	2302      	movs	r3, #2
 8005be4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f003 0320 	and.w	r3, r3, #32
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d008      	beq.n	8005c02 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	2320      	movs	r3, #32
 8005c00:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d009      	beq.n	8005c20 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c18:	461a      	mov	r2, r3
 8005c1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005c1e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c22:	3301      	adds	r3, #1
 8005c24:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c28:	085b      	lsrs	r3, r3, #1
 8005c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f47f af62 	bne.w	8005af8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f005 ff93 	bl	800bb64 <USB_ReadInterrupts>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c48:	f040 80db 	bne.w	8005e02 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f005 ffb4 	bl	800bbbe <USB_ReadDevAllInEpInterrupt>
 8005c56:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005c5c:	e0cd      	b.n	8005dfa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 80c2 	beq.w	8005dee <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	4611      	mov	r1, r2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f005 ffda 	bl	800bc2e <USB_ReadDevInEPInterrupt>
 8005c7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d057      	beq.n	8005d36 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	f003 030f 	and.w	r3, r3, #15
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c92:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	43db      	mvns	r3, r3
 8005ca0:	69f9      	ldr	r1, [r7, #28]
 8005ca2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	2301      	movs	r3, #1
 8005cba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	799b      	ldrb	r3, [r3, #6]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d132      	bne.n	8005d2a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc8:	4613      	mov	r3, r2
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	3320      	adds	r3, #32
 8005cd4:	6819      	ldr	r1, [r3, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cda:	4613      	mov	r3, r2
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4403      	add	r3, r0
 8005ce4:	331c      	adds	r3, #28
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4419      	add	r1, r3
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cee:	4613      	mov	r3, r2
 8005cf0:	00db      	lsls	r3, r3, #3
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	4403      	add	r3, r0
 8005cf8:	3320      	adds	r3, #32
 8005cfa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d113      	bne.n	8005d2a <HAL_PCD_IRQHandler+0x3a2>
 8005d02:	6879      	ldr	r1, [r7, #4]
 8005d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d06:	4613      	mov	r3, r2
 8005d08:	00db      	lsls	r3, r3, #3
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	3324      	adds	r3, #36	@ 0x24
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d108      	bne.n	8005d2a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6818      	ldr	r0, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d22:	461a      	mov	r2, r3
 8005d24:	2101      	movs	r1, #1
 8005d26:	f005 ffe1 	bl	800bcec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f00b f9fa 	bl	801112a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d008      	beq.n	8005d52 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	2308      	movs	r3, #8
 8005d50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	f003 0310 	and.w	r3, r3, #16
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d68:	461a      	mov	r2, r3
 8005d6a:	2310      	movs	r3, #16
 8005d6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d008      	beq.n	8005d8a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d84:	461a      	mov	r2, r3
 8005d86:	2340      	movs	r3, #64	@ 0x40
 8005d88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d023      	beq.n	8005ddc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005d94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d96:	6a38      	ldr	r0, [r7, #32]
 8005d98:	f004 ffc8 	bl	800ad2c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d9e:	4613      	mov	r3, r2
 8005da0:	00db      	lsls	r3, r3, #3
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	3310      	adds	r3, #16
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	4413      	add	r3, r2
 8005dac:	3304      	adds	r3, #4
 8005dae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	78db      	ldrb	r3, [r3, #3]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d108      	bne.n	8005dca <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f00b fa47 	bl	8011258 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	2302      	movs	r3, #2
 8005dda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005de6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 fcbd 	bl	8006768 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	3301      	adds	r3, #1
 8005df2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df6:	085b      	lsrs	r3, r3, #1
 8005df8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f47f af2e 	bne.w	8005c5e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f005 feac 	bl	800bb64 <USB_ReadInterrupts>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e16:	d122      	bne.n	8005e5e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	69fa      	ldr	r2, [r7, #28]
 8005e22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e26:	f023 0301 	bic.w	r3, r3, #1
 8005e2a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d108      	bne.n	8005e48 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005e3e:	2100      	movs	r1, #0
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fea3 	bl	8006b8c <HAL_PCDEx_LPM_Callback>
 8005e46:	e002      	b.n	8005e4e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f00b f9e5 	bl	8011218 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695a      	ldr	r2, [r3, #20]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f005 fe7e 	bl	800bb64 <USB_ReadInterrupts>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e72:	d112      	bne.n	8005e9a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f003 0301 	and.w	r3, r3, #1
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d102      	bne.n	8005e8a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f00b f9a1 	bl	80111cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695a      	ldr	r2, [r3, #20]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005e98:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f005 fe60 	bl	800bb64 <USB_ReadInterrupts>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eae:	f040 80b7 	bne.w	8006020 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	69fa      	ldr	r2, [r7, #28]
 8005ebc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ec0:	f023 0301 	bic.w	r3, r3, #1
 8005ec4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2110      	movs	r1, #16
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f004 ff2d 	bl	800ad2c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ed6:	e046      	b.n	8005f66 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005eea:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005efc:	0151      	lsls	r1, r2, #5
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	440a      	add	r2, r1
 8005f02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f0a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f1e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f50:	0151      	lsls	r1, r2, #5
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	440a      	add	r2, r1
 8005f56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f5e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f62:	3301      	adds	r3, #1
 8005f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	791b      	ldrb	r3, [r3, #4]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d3b2      	bcc.n	8005ed8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	69fa      	ldr	r2, [r7, #28]
 8005f7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f80:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005f84:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	7bdb      	ldrb	r3, [r3, #15]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d016      	beq.n	8005fbc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f98:	69fa      	ldr	r2, [r7, #28]
 8005f9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f9e:	f043 030b 	orr.w	r3, r3, #11
 8005fa2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fae:	69fa      	ldr	r2, [r7, #28]
 8005fb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fb4:	f043 030b 	orr.w	r3, r3, #11
 8005fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005fba:	e015      	b.n	8005fe8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	69fa      	ldr	r2, [r7, #28]
 8005fc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005fce:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005fd2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	69fa      	ldr	r2, [r7, #28]
 8005fde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fe2:	f043 030b 	orr.w	r3, r3, #11
 8005fe6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ff6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005ffa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6818      	ldr	r0, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800600a:	461a      	mov	r2, r3
 800600c:	f005 fe6e 	bl	800bcec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695a      	ldr	r2, [r3, #20]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800601e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4618      	mov	r0, r3
 8006026:	f005 fd9d 	bl	800bb64 <USB_ReadInterrupts>
 800602a:	4603      	mov	r3, r0
 800602c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006030:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006034:	d123      	bne.n	800607e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f005 fe33 	bl	800bca6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4618      	mov	r0, r3
 8006046:	f004 feea 	bl	800ae1e <USB_GetDevSpeed>
 800604a:	4603      	mov	r3, r0
 800604c:	461a      	mov	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681c      	ldr	r4, [r3, #0]
 8006056:	f001 fa09 	bl	800746c <HAL_RCC_GetHCLKFreq>
 800605a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006060:	461a      	mov	r2, r3
 8006062:	4620      	mov	r0, r4
 8006064:	f004 fbee 	bl	800a844 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f00b f886 	bl	801117a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	695a      	ldr	r2, [r3, #20]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800607c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f005 fd6e 	bl	800bb64 <USB_ReadInterrupts>
 8006088:	4603      	mov	r3, r0
 800608a:	f003 0308 	and.w	r3, r3, #8
 800608e:	2b08      	cmp	r3, #8
 8006090:	d10a      	bne.n	80060a8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f00b f863 	bl	801115e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	695a      	ldr	r2, [r3, #20]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f002 0208 	and.w	r2, r2, #8
 80060a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f005 fd59 	bl	800bb64 <USB_ReadInterrupts>
 80060b2:	4603      	mov	r3, r0
 80060b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060b8:	2b80      	cmp	r3, #128	@ 0x80
 80060ba:	d123      	bne.n	8006104 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060c8:	2301      	movs	r3, #1
 80060ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80060cc:	e014      	b.n	80060f8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d2:	4613      	mov	r3, r2
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	4413      	add	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	440b      	add	r3, r1
 80060dc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d105      	bne.n	80060f2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80060e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fb0a 	bl	8006706 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f4:	3301      	adds	r3, #1
 80060f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	791b      	ldrb	r3, [r3, #4]
 80060fc:	461a      	mov	r2, r3
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	4293      	cmp	r3, r2
 8006102:	d3e4      	bcc.n	80060ce <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4618      	mov	r0, r3
 800610a:	f005 fd2b 	bl	800bb64 <USB_ReadInterrupts>
 800610e:	4603      	mov	r3, r0
 8006110:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006114:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006118:	d13c      	bne.n	8006194 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800611a:	2301      	movs	r3, #1
 800611c:	627b      	str	r3, [r7, #36]	@ 0x24
 800611e:	e02b      	b.n	8006178 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006134:	4613      	mov	r3, r2
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	4413      	add	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	440b      	add	r3, r1
 800613e:	3318      	adds	r3, #24
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d115      	bne.n	8006172 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006146:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006148:	2b00      	cmp	r3, #0
 800614a:	da12      	bge.n	8006172 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800614c:	6879      	ldr	r1, [r7, #4]
 800614e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006150:	4613      	mov	r3, r2
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	440b      	add	r3, r1
 800615a:	3317      	adds	r3, #23
 800615c:	2201      	movs	r2, #1
 800615e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006162:	b2db      	uxtb	r3, r3
 8006164:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006168:	b2db      	uxtb	r3, r3
 800616a:	4619      	mov	r1, r3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 faca 	bl	8006706 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006174:	3301      	adds	r3, #1
 8006176:	627b      	str	r3, [r7, #36]	@ 0x24
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	791b      	ldrb	r3, [r3, #4]
 800617c:	461a      	mov	r2, r3
 800617e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006180:	4293      	cmp	r3, r2
 8006182:	d3cd      	bcc.n	8006120 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	695a      	ldr	r2, [r3, #20]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006192:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f005 fce3 	bl	800bb64 <USB_ReadInterrupts>
 800619e:	4603      	mov	r3, r0
 80061a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061a8:	d156      	bne.n	8006258 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061aa:	2301      	movs	r3, #1
 80061ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ae:	e045      	b.n	800623c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80061b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80061c0:	6879      	ldr	r1, [r7, #4]
 80061c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061c4:	4613      	mov	r3, r2
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	440b      	add	r3, r1
 80061ce:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d12e      	bne.n	8006236 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80061d8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80061da:	2b00      	cmp	r3, #0
 80061dc:	da2b      	bge.n	8006236 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80061ea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d121      	bne.n	8006236 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80061f2:	6879      	ldr	r1, [r7, #4]
 80061f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f6:	4613      	mov	r3, r2
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	440b      	add	r3, r1
 8006200:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006204:	2201      	movs	r2, #1
 8006206:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006214:	6a3b      	ldr	r3, [r7, #32]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	69fa      	ldr	r2, [r7, #28]
 800622a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800622e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006232:	6053      	str	r3, [r2, #4]
            break;
 8006234:	e008      	b.n	8006248 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	3301      	adds	r3, #1
 800623a:	627b      	str	r3, [r7, #36]	@ 0x24
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	791b      	ldrb	r3, [r3, #4]
 8006240:	461a      	mov	r2, r3
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	4293      	cmp	r3, r2
 8006246:	d3b3      	bcc.n	80061b0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	695a      	ldr	r2, [r3, #20]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006256:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4618      	mov	r0, r3
 800625e:	f005 fc81 	bl	800bb64 <USB_ReadInterrupts>
 8006262:	4603      	mov	r3, r0
 8006264:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626c:	d10a      	bne.n	8006284 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f00b f804 	bl	801127c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	695a      	ldr	r2, [r3, #20]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006282:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4618      	mov	r0, r3
 800628a:	f005 fc6b 	bl	800bb64 <USB_ReadInterrupts>
 800628e:	4603      	mov	r3, r0
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b04      	cmp	r3, #4
 8006296:	d115      	bne.n	80062c4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	f003 0304 	and.w	r3, r3, #4
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f00a fff4 	bl	8011298 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6859      	ldr	r1, [r3, #4]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	430a      	orrs	r2, r1
 80062be:	605a      	str	r2, [r3, #4]
 80062c0:	e000      	b.n	80062c4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80062c2:	bf00      	nop
    }
  }
}
 80062c4:	3734      	adds	r7, #52	@ 0x34
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd90      	pop	{r4, r7, pc}

080062ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	460b      	mov	r3, r1
 80062d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_PCD_SetAddress+0x1a>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e012      	b.n	800630a <HAL_PCD_SetAddress+0x40>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	78fa      	ldrb	r2, [r7, #3]
 80062f0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	78fa      	ldrb	r2, [r7, #3]
 80062f8:	4611      	mov	r1, r2
 80062fa:	4618      	mov	r0, r3
 80062fc:	f005 fbca 	bl	800ba94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	4608      	mov	r0, r1
 800631c:	4611      	mov	r1, r2
 800631e:	461a      	mov	r2, r3
 8006320:	4603      	mov	r3, r0
 8006322:	70fb      	strb	r3, [r7, #3]
 8006324:	460b      	mov	r3, r1
 8006326:	803b      	strh	r3, [r7, #0]
 8006328:	4613      	mov	r3, r2
 800632a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006334:	2b00      	cmp	r3, #0
 8006336:	da0f      	bge.n	8006358 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	f003 020f 	and.w	r2, r3, #15
 800633e:	4613      	mov	r3, r2
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	3310      	adds	r3, #16
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	4413      	add	r3, r2
 800634c:	3304      	adds	r3, #4
 800634e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2201      	movs	r2, #1
 8006354:	705a      	strb	r2, [r3, #1]
 8006356:	e00f      	b.n	8006378 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	f003 020f 	and.w	r2, r3, #15
 800635e:	4613      	mov	r3, r2
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	4413      	add	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	4413      	add	r3, r2
 800636e:	3304      	adds	r3, #4
 8006370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	f003 030f 	and.w	r3, r3, #15
 800637e:	b2da      	uxtb	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006384:	883b      	ldrh	r3, [r7, #0]
 8006386:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	78ba      	ldrb	r2, [r7, #2]
 8006392:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d004      	beq.n	80063a6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	461a      	mov	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80063a6:	78bb      	ldrb	r3, [r7, #2]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d102      	bne.n	80063b2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_PCD_EP_Open+0xae>
 80063bc:	2302      	movs	r3, #2
 80063be:	e00e      	b.n	80063de <HAL_PCD_EP_Open+0xcc>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68f9      	ldr	r1, [r7, #12]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f004 fd4a 	bl	800ae68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80063dc:	7afb      	ldrb	r3, [r7, #11]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b084      	sub	sp, #16
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	460b      	mov	r3, r1
 80063f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80063f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	da0f      	bge.n	800641a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063fa:	78fb      	ldrb	r3, [r7, #3]
 80063fc:	f003 020f 	and.w	r2, r3, #15
 8006400:	4613      	mov	r3, r2
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	3310      	adds	r3, #16
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	3304      	adds	r3, #4
 8006410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	705a      	strb	r2, [r3, #1]
 8006418:	e00f      	b.n	800643a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800641a:	78fb      	ldrb	r3, [r7, #3]
 800641c:	f003 020f 	and.w	r2, r3, #15
 8006420:	4613      	mov	r3, r2
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	4413      	add	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	4413      	add	r3, r2
 8006430:	3304      	adds	r3, #4
 8006432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800643a:	78fb      	ldrb	r3, [r7, #3]
 800643c:	f003 030f 	and.w	r3, r3, #15
 8006440:	b2da      	uxtb	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_PCD_EP_Close+0x6e>
 8006450:	2302      	movs	r3, #2
 8006452:	e00e      	b.n	8006472 <HAL_PCD_EP_Close+0x8c>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68f9      	ldr	r1, [r7, #12]
 8006462:	4618      	mov	r0, r3
 8006464:	f004 fd88 	bl	800af78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b086      	sub	sp, #24
 800647e:	af00      	add	r7, sp, #0
 8006480:	60f8      	str	r0, [r7, #12]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
 8006486:	460b      	mov	r3, r1
 8006488:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800648a:	7afb      	ldrb	r3, [r7, #11]
 800648c:	f003 020f 	and.w	r2, r3, #15
 8006490:	4613      	mov	r3, r2
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	3304      	adds	r3, #4
 80064a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2200      	movs	r2, #0
 80064b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2200      	movs	r2, #0
 80064ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064bc:	7afb      	ldrb	r3, [r7, #11]
 80064be:	f003 030f 	and.w	r3, r3, #15
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	799b      	ldrb	r3, [r3, #6]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d102      	bne.n	80064d6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6818      	ldr	r0, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	799b      	ldrb	r3, [r3, #6]
 80064de:	461a      	mov	r2, r3
 80064e0:	6979      	ldr	r1, [r7, #20]
 80064e2:	f004 fe25 	bl	800b130 <USB_EPStartXfer>

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	f003 020f 	and.w	r2, r3, #15
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	4613      	mov	r3, r2
 8006506:	00db      	lsls	r3, r3, #3
 8006508:	4413      	add	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	440b      	add	r3, r1
 800650e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006512:	681b      	ldr	r3, [r3, #0]
}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	607a      	str	r2, [r7, #4]
 800652a:	603b      	str	r3, [r7, #0]
 800652c:	460b      	mov	r3, r1
 800652e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006530:	7afb      	ldrb	r3, [r7, #11]
 8006532:	f003 020f 	and.w	r2, r3, #15
 8006536:	4613      	mov	r3, r2
 8006538:	00db      	lsls	r3, r3, #3
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	3310      	adds	r3, #16
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	3304      	adds	r3, #4
 8006546:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	683a      	ldr	r2, [r7, #0]
 8006552:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2200      	movs	r2, #0
 8006558:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2201      	movs	r2, #1
 800655e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006560:	7afb      	ldrb	r3, [r7, #11]
 8006562:	f003 030f 	and.w	r3, r3, #15
 8006566:	b2da      	uxtb	r2, r3
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	799b      	ldrb	r3, [r3, #6]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d102      	bne.n	800657a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	799b      	ldrb	r3, [r3, #6]
 8006582:	461a      	mov	r2, r3
 8006584:	6979      	ldr	r1, [r7, #20]
 8006586:	f004 fdd3 	bl	800b130 <USB_EPStartXfer>

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3718      	adds	r7, #24
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80065a0:	78fb      	ldrb	r3, [r7, #3]
 80065a2:	f003 030f 	and.w	r3, r3, #15
 80065a6:	687a      	ldr	r2, [r7, #4]
 80065a8:	7912      	ldrb	r2, [r2, #4]
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d901      	bls.n	80065b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e04f      	b.n	8006652 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	da0f      	bge.n	80065da <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065ba:	78fb      	ldrb	r3, [r7, #3]
 80065bc:	f003 020f 	and.w	r2, r3, #15
 80065c0:	4613      	mov	r3, r2
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	4413      	add	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	3310      	adds	r3, #16
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	4413      	add	r3, r2
 80065ce:	3304      	adds	r3, #4
 80065d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2201      	movs	r2, #1
 80065d6:	705a      	strb	r2, [r3, #1]
 80065d8:	e00d      	b.n	80065f6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80065da:	78fa      	ldrb	r2, [r7, #3]
 80065dc:	4613      	mov	r3, r2
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	4413      	add	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	4413      	add	r3, r2
 80065ec:	3304      	adds	r3, #4
 80065ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	b2da      	uxtb	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800660e:	2b01      	cmp	r3, #1
 8006610:	d101      	bne.n	8006616 <HAL_PCD_EP_SetStall+0x82>
 8006612:	2302      	movs	r3, #2
 8006614:	e01d      	b.n	8006652 <HAL_PCD_EP_SetStall+0xbe>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68f9      	ldr	r1, [r7, #12]
 8006624:	4618      	mov	r0, r3
 8006626:	f005 f961 	bl	800b8ec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800662a:	78fb      	ldrb	r3, [r7, #3]
 800662c:	f003 030f 	and.w	r3, r3, #15
 8006630:	2b00      	cmp	r3, #0
 8006632:	d109      	bne.n	8006648 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6818      	ldr	r0, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	7999      	ldrb	r1, [r3, #6]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006642:	461a      	mov	r2, r3
 8006644:	f005 fb52 	bl	800bcec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b084      	sub	sp, #16
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	460b      	mov	r3, r1
 8006664:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006666:	78fb      	ldrb	r3, [r7, #3]
 8006668:	f003 030f 	and.w	r3, r3, #15
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	7912      	ldrb	r2, [r2, #4]
 8006670:	4293      	cmp	r3, r2
 8006672:	d901      	bls.n	8006678 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e042      	b.n	80066fe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006678:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800667c:	2b00      	cmp	r3, #0
 800667e:	da0f      	bge.n	80066a0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006680:	78fb      	ldrb	r3, [r7, #3]
 8006682:	f003 020f 	and.w	r2, r3, #15
 8006686:	4613      	mov	r3, r2
 8006688:	00db      	lsls	r3, r3, #3
 800668a:	4413      	add	r3, r2
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	3310      	adds	r3, #16
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	4413      	add	r3, r2
 8006694:	3304      	adds	r3, #4
 8006696:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2201      	movs	r2, #1
 800669c:	705a      	strb	r2, [r3, #1]
 800669e:	e00f      	b.n	80066c0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	f003 020f 	and.w	r2, r3, #15
 80066a6:	4613      	mov	r3, r2
 80066a8:	00db      	lsls	r3, r3, #3
 80066aa:	4413      	add	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	4413      	add	r3, r2
 80066b6:	3304      	adds	r3, #4
 80066b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	f003 030f 	and.w	r3, r3, #15
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d101      	bne.n	80066e0 <HAL_PCD_EP_ClrStall+0x86>
 80066dc:	2302      	movs	r3, #2
 80066de:	e00e      	b.n	80066fe <HAL_PCD_EP_ClrStall+0xa4>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68f9      	ldr	r1, [r7, #12]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f005 f96a 	bl	800b9c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	460b      	mov	r3, r1
 8006710:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006712:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006716:	2b00      	cmp	r3, #0
 8006718:	da0c      	bge.n	8006734 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800671a:	78fb      	ldrb	r3, [r7, #3]
 800671c:	f003 020f 	and.w	r2, r3, #15
 8006720:	4613      	mov	r3, r2
 8006722:	00db      	lsls	r3, r3, #3
 8006724:	4413      	add	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	3310      	adds	r3, #16
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	4413      	add	r3, r2
 800672e:	3304      	adds	r3, #4
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	e00c      	b.n	800674e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006734:	78fb      	ldrb	r3, [r7, #3]
 8006736:	f003 020f 	and.w	r2, r3, #15
 800673a:	4613      	mov	r3, r2
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	4413      	add	r3, r2
 800674a:	3304      	adds	r3, #4
 800674c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68f9      	ldr	r1, [r7, #12]
 8006754:	4618      	mov	r0, r3
 8006756:	f004 ff89 	bl	800b66c <USB_EPStopXfer>
 800675a:	4603      	mov	r3, r0
 800675c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800675e:	7afb      	ldrb	r3, [r7, #11]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b08a      	sub	sp, #40	@ 0x28
 800676c:	af02      	add	r7, sp, #8
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	4613      	mov	r3, r2
 8006780:	00db      	lsls	r3, r3, #3
 8006782:	4413      	add	r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	3310      	adds	r3, #16
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	4413      	add	r3, r2
 800678c:	3304      	adds	r3, #4
 800678e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	695a      	ldr	r2, [r3, #20]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	429a      	cmp	r2, r3
 800679a:	d901      	bls.n	80067a0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e06b      	b.n	8006878 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	69fa      	ldr	r2, [r7, #28]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d902      	bls.n	80067bc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	3303      	adds	r3, #3
 80067c0:	089b      	lsrs	r3, r3, #2
 80067c2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067c4:	e02a      	b.n	800681c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	691a      	ldr	r2, [r3, #16]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	69fa      	ldr	r2, [r7, #28]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d902      	bls.n	80067e2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	3303      	adds	r3, #3
 80067e6:	089b      	lsrs	r3, r3, #2
 80067e8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	68d9      	ldr	r1, [r3, #12]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	b2da      	uxtb	r2, r3
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	4603      	mov	r3, r0
 80067fe:	6978      	ldr	r0, [r7, #20]
 8006800:	f004 ffde 	bl	800b7c0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	441a      	add	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	695a      	ldr	r2, [r3, #20]
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	441a      	add	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	429a      	cmp	r2, r3
 8006830:	d809      	bhi.n	8006846 <PCD_WriteEmptyTxFifo+0xde>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	695a      	ldr	r2, [r3, #20]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800683a:	429a      	cmp	r2, r3
 800683c:	d203      	bcs.n	8006846 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1bf      	bne.n	80067c6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	691a      	ldr	r2, [r3, #16]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	429a      	cmp	r2, r3
 8006850:	d811      	bhi.n	8006876 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	f003 030f 	and.w	r3, r3, #15
 8006858:	2201      	movs	r2, #1
 800685a:	fa02 f303 	lsl.w	r3, r2, r3
 800685e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006866:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	43db      	mvns	r3, r3
 800686c:	6939      	ldr	r1, [r7, #16]
 800686e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006872:	4013      	ands	r3, r2
 8006874:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3720      	adds	r7, #32
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b088      	sub	sp, #32
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	333c      	adds	r3, #60	@ 0x3c
 8006898:	3304      	adds	r3, #4
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	799b      	ldrb	r3, [r3, #6]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d17b      	bne.n	80069ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f003 0308 	and.w	r3, r3, #8
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d015      	beq.n	80068ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	4a61      	ldr	r2, [pc, #388]	@ (8006a48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	f240 80b9 	bls.w	8006a3c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f000 80b3 	beq.w	8006a3c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e2:	461a      	mov	r2, r3
 80068e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068e8:	6093      	str	r3, [r2, #8]
 80068ea:	e0a7      	b.n	8006a3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f003 0320 	and.w	r3, r3, #32
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d009      	beq.n	800690a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006902:	461a      	mov	r2, r3
 8006904:	2320      	movs	r3, #32
 8006906:	6093      	str	r3, [r2, #8]
 8006908:	e098      	b.n	8006a3c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006910:	2b00      	cmp	r3, #0
 8006912:	f040 8093 	bne.w	8006a3c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	4a4b      	ldr	r2, [pc, #300]	@ (8006a48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d90f      	bls.n	800693e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006924:	2b00      	cmp	r3, #0
 8006926:	d00a      	beq.n	800693e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006934:	461a      	mov	r2, r3
 8006936:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800693a:	6093      	str	r3, [r2, #8]
 800693c:	e07e      	b.n	8006a3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	4613      	mov	r3, r2
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	4413      	add	r3, r2
 8006950:	3304      	adds	r3, #4
 8006952:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a1a      	ldr	r2, [r3, #32]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	0159      	lsls	r1, r3, #5
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	440b      	add	r3, r1
 8006960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006964:	691b      	ldr	r3, [r3, #16]
 8006966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800696a:	1ad2      	subs	r2, r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d114      	bne.n	80069a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d109      	bne.n	8006992 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006988:	461a      	mov	r2, r3
 800698a:	2101      	movs	r1, #1
 800698c:	f005 f9ae 	bl	800bcec <USB_EP0_OutStart>
 8006990:	e006      	b.n	80069a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	68da      	ldr	r2, [r3, #12]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	441a      	add	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f00a fba4 	bl	80110f4 <HAL_PCD_DataOutStageCallback>
 80069ac:	e046      	b.n	8006a3c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	4a26      	ldr	r2, [pc, #152]	@ (8006a4c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d124      	bne.n	8006a00 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00a      	beq.n	80069d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069cc:	461a      	mov	r2, r3
 80069ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069d2:	6093      	str	r3, [r2, #8]
 80069d4:	e032      	b.n	8006a3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f003 0320 	and.w	r3, r3, #32
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d008      	beq.n	80069f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ec:	461a      	mov	r2, r3
 80069ee:	2320      	movs	r3, #32
 80069f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f00a fb7b 	bl	80110f4 <HAL_PCD_DataOutStageCallback>
 80069fe:	e01d      	b.n	8006a3c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d114      	bne.n	8006a30 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	4413      	add	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	440b      	add	r3, r1
 8006a14:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d108      	bne.n	8006a30 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6818      	ldr	r0, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a28:	461a      	mov	r2, r3
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	f005 f95e 	bl	800bcec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f00a fb5c 	bl	80110f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3720      	adds	r7, #32
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	4f54300a 	.word	0x4f54300a
 8006a4c:	4f54310a 	.word	0x4f54310a

08006a50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	333c      	adds	r3, #60	@ 0x3c
 8006a68:	3304      	adds	r3, #4
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4a15      	ldr	r2, [pc, #84]	@ (8006ad8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d90e      	bls.n	8006aa4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d009      	beq.n	8006aa4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aa2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f00a fb13 	bl	80110d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4a0a      	ldr	r2, [pc, #40]	@ (8006ad8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d90c      	bls.n	8006acc <PCD_EP_OutSetupPacket_int+0x7c>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	799b      	ldrb	r3, [r3, #6]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d108      	bne.n	8006acc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	f005 f910 	bl	800bcec <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	4f54300a 	.word	0x4f54300a

08006adc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	70fb      	strb	r3, [r7, #3]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006af4:	78fb      	ldrb	r3, [r7, #3]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d107      	bne.n	8006b0a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006afa:	883b      	ldrh	r3, [r7, #0]
 8006afc:	0419      	lsls	r1, r3, #16
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b08:	e028      	b.n	8006b5c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b10:	0c1b      	lsrs	r3, r3, #16
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	4413      	add	r3, r2
 8006b16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73fb      	strb	r3, [r7, #15]
 8006b1c:	e00d      	b.n	8006b3a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
 8006b24:	3340      	adds	r3, #64	@ 0x40
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	0c1b      	lsrs	r3, r3, #16
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	4413      	add	r3, r2
 8006b32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	3301      	adds	r3, #1
 8006b38:	73fb      	strb	r3, [r7, #15]
 8006b3a:	7bfa      	ldrb	r2, [r7, #15]
 8006b3c:	78fb      	ldrb	r3, [r7, #3]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d3ec      	bcc.n	8006b1e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006b44:	883b      	ldrh	r3, [r7, #0]
 8006b46:	0418      	lsls	r0, r3, #16
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6819      	ldr	r1, [r3, #0]
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	4302      	orrs	r2, r0
 8006b54:	3340      	adds	r3, #64	@ 0x40
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	440b      	add	r3, r1
 8006b5a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3714      	adds	r7, #20
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	460b      	mov	r3, r1
 8006b74:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	887a      	ldrh	r2, [r7, #2]
 8006b7c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d101      	bne.n	8006bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e267      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d075      	beq.n	8006cae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006bc2:	4b88      	ldr	r3, [pc, #544]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 030c 	and.w	r3, r3, #12
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d00c      	beq.n	8006be8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bce:	4b85      	ldr	r3, [pc, #532]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006bd6:	2b08      	cmp	r3, #8
 8006bd8:	d112      	bne.n	8006c00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bda:	4b82      	ldr	r3, [pc, #520]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006be2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006be6:	d10b      	bne.n	8006c00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006be8:	4b7e      	ldr	r3, [pc, #504]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d05b      	beq.n	8006cac <HAL_RCC_OscConfig+0x108>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d157      	bne.n	8006cac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e242      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c08:	d106      	bne.n	8006c18 <HAL_RCC_OscConfig+0x74>
 8006c0a:	4b76      	ldr	r3, [pc, #472]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a75      	ldr	r2, [pc, #468]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	e01d      	b.n	8006c54 <HAL_RCC_OscConfig+0xb0>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c20:	d10c      	bne.n	8006c3c <HAL_RCC_OscConfig+0x98>
 8006c22:	4b70      	ldr	r3, [pc, #448]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a6f      	ldr	r2, [pc, #444]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a6c      	ldr	r2, [pc, #432]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c38:	6013      	str	r3, [r2, #0]
 8006c3a:	e00b      	b.n	8006c54 <HAL_RCC_OscConfig+0xb0>
 8006c3c:	4b69      	ldr	r3, [pc, #420]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a68      	ldr	r2, [pc, #416]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	4b66      	ldr	r3, [pc, #408]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a65      	ldr	r2, [pc, #404]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d013      	beq.n	8006c84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c5c:	f7fd f82c 	bl	8003cb8 <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c64:	f7fd f828 	bl	8003cb8 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b64      	cmp	r3, #100	@ 0x64
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e207      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c76:	4b5b      	ldr	r3, [pc, #364]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0f0      	beq.n	8006c64 <HAL_RCC_OscConfig+0xc0>
 8006c82:	e014      	b.n	8006cae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c84:	f7fd f818 	bl	8003cb8 <HAL_GetTick>
 8006c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c8c:	f7fd f814 	bl	8003cb8 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b64      	cmp	r3, #100	@ 0x64
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e1f3      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c9e:	4b51      	ldr	r3, [pc, #324]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1f0      	bne.n	8006c8c <HAL_RCC_OscConfig+0xe8>
 8006caa:	e000      	b.n	8006cae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d063      	beq.n	8006d82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006cba:	4b4a      	ldr	r3, [pc, #296]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f003 030c 	and.w	r3, r3, #12
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00b      	beq.n	8006cde <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cc6:	4b47      	ldr	r3, [pc, #284]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006cce:	2b08      	cmp	r3, #8
 8006cd0:	d11c      	bne.n	8006d0c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cd2:	4b44      	ldr	r3, [pc, #272]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d116      	bne.n	8006d0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cde:	4b41      	ldr	r3, [pc, #260]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d005      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x152>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d001      	beq.n	8006cf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e1c7      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	00db      	lsls	r3, r3, #3
 8006d04:	4937      	ldr	r1, [pc, #220]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d0a:	e03a      	b.n	8006d82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d020      	beq.n	8006d56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d14:	4b34      	ldr	r3, [pc, #208]	@ (8006de8 <HAL_RCC_OscConfig+0x244>)
 8006d16:	2201      	movs	r2, #1
 8006d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d1a:	f7fc ffcd 	bl	8003cb8 <HAL_GetTick>
 8006d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d20:	e008      	b.n	8006d34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d22:	f7fc ffc9 	bl	8003cb8 <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d901      	bls.n	8006d34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e1a8      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d34:	4b2b      	ldr	r3, [pc, #172]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0f0      	beq.n	8006d22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d40:	4b28      	ldr	r3, [pc, #160]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	00db      	lsls	r3, r3, #3
 8006d4e:	4925      	ldr	r1, [pc, #148]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	600b      	str	r3, [r1, #0]
 8006d54:	e015      	b.n	8006d82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d56:	4b24      	ldr	r3, [pc, #144]	@ (8006de8 <HAL_RCC_OscConfig+0x244>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d5c:	f7fc ffac 	bl	8003cb8 <HAL_GetTick>
 8006d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d62:	e008      	b.n	8006d76 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d64:	f7fc ffa8 	bl	8003cb8 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d901      	bls.n	8006d76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e187      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d76:	4b1b      	ldr	r3, [pc, #108]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d1f0      	bne.n	8006d64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0308 	and.w	r3, r3, #8
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d036      	beq.n	8006dfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d016      	beq.n	8006dc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d96:	4b15      	ldr	r3, [pc, #84]	@ (8006dec <HAL_RCC_OscConfig+0x248>)
 8006d98:	2201      	movs	r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d9c:	f7fc ff8c 	bl	8003cb8 <HAL_GetTick>
 8006da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006da2:	e008      	b.n	8006db6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006da4:	f7fc ff88 	bl	8003cb8 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d901      	bls.n	8006db6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e167      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006db6:	4b0b      	ldr	r3, [pc, #44]	@ (8006de4 <HAL_RCC_OscConfig+0x240>)
 8006db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dba:	f003 0302 	and.w	r3, r3, #2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d0f0      	beq.n	8006da4 <HAL_RCC_OscConfig+0x200>
 8006dc2:	e01b      	b.n	8006dfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dc4:	4b09      	ldr	r3, [pc, #36]	@ (8006dec <HAL_RCC_OscConfig+0x248>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dca:	f7fc ff75 	bl	8003cb8 <HAL_GetTick>
 8006dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dd0:	e00e      	b.n	8006df0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dd2:	f7fc ff71 	bl	8003cb8 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d907      	bls.n	8006df0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e150      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
 8006de4:	40023800 	.word	0x40023800
 8006de8:	42470000 	.word	0x42470000
 8006dec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006df0:	4b88      	ldr	r3, [pc, #544]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1ea      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 8097 	beq.w	8006f38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e0e:	4b81      	ldr	r3, [pc, #516]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10f      	bne.n	8006e3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60bb      	str	r3, [r7, #8]
 8006e1e:	4b7d      	ldr	r3, [pc, #500]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e22:	4a7c      	ldr	r2, [pc, #496]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e2a:	4b7a      	ldr	r3, [pc, #488]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e32:	60bb      	str	r3, [r7, #8]
 8006e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e36:	2301      	movs	r3, #1
 8006e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e3a:	4b77      	ldr	r3, [pc, #476]	@ (8007018 <HAL_RCC_OscConfig+0x474>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d118      	bne.n	8006e78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e46:	4b74      	ldr	r3, [pc, #464]	@ (8007018 <HAL_RCC_OscConfig+0x474>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a73      	ldr	r2, [pc, #460]	@ (8007018 <HAL_RCC_OscConfig+0x474>)
 8006e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e52:	f7fc ff31 	bl	8003cb8 <HAL_GetTick>
 8006e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e58:	e008      	b.n	8006e6c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e5a:	f7fc ff2d 	bl	8003cb8 <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d901      	bls.n	8006e6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	e10c      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e6c:	4b6a      	ldr	r3, [pc, #424]	@ (8007018 <HAL_RCC_OscConfig+0x474>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d0f0      	beq.n	8006e5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d106      	bne.n	8006e8e <HAL_RCC_OscConfig+0x2ea>
 8006e80:	4b64      	ldr	r3, [pc, #400]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e84:	4a63      	ldr	r2, [pc, #396]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006e86:	f043 0301 	orr.w	r3, r3, #1
 8006e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e8c:	e01c      	b.n	8006ec8 <HAL_RCC_OscConfig+0x324>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	2b05      	cmp	r3, #5
 8006e94:	d10c      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x30c>
 8006e96:	4b5f      	ldr	r3, [pc, #380]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e9a:	4a5e      	ldr	r2, [pc, #376]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006e9c:	f043 0304 	orr.w	r3, r3, #4
 8006ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ea6:	4a5b      	ldr	r2, [pc, #364]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006ea8:	f043 0301 	orr.w	r3, r3, #1
 8006eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8006eae:	e00b      	b.n	8006ec8 <HAL_RCC_OscConfig+0x324>
 8006eb0:	4b58      	ldr	r3, [pc, #352]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb4:	4a57      	ldr	r2, [pc, #348]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006eb6:	f023 0301 	bic.w	r3, r3, #1
 8006eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ebc:	4b55      	ldr	r3, [pc, #340]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ec0:	4a54      	ldr	r2, [pc, #336]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006ec2:	f023 0304 	bic.w	r3, r3, #4
 8006ec6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d015      	beq.n	8006efc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed0:	f7fc fef2 	bl	8003cb8 <HAL_GetTick>
 8006ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ed6:	e00a      	b.n	8006eee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ed8:	f7fc feee 	bl	8003cb8 <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e0cb      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eee:	4b49      	ldr	r3, [pc, #292]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0ee      	beq.n	8006ed8 <HAL_RCC_OscConfig+0x334>
 8006efa:	e014      	b.n	8006f26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006efc:	f7fc fedc 	bl	8003cb8 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f02:	e00a      	b.n	8006f1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f04:	f7fc fed8 	bl	8003cb8 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d901      	bls.n	8006f1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e0b5      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1ee      	bne.n	8006f04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f26:	7dfb      	ldrb	r3, [r7, #23]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d105      	bne.n	8006f38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f2c:	4b39      	ldr	r3, [pc, #228]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f30:	4a38      	ldr	r2, [pc, #224]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006f32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 80a1 	beq.w	8007084 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f42:	4b34      	ldr	r3, [pc, #208]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f003 030c 	and.w	r3, r3, #12
 8006f4a:	2b08      	cmp	r3, #8
 8006f4c:	d05c      	beq.n	8007008 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d141      	bne.n	8006fda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f56:	4b31      	ldr	r3, [pc, #196]	@ (800701c <HAL_RCC_OscConfig+0x478>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f5c:	f7fc feac 	bl	8003cb8 <HAL_GetTick>
 8006f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f62:	e008      	b.n	8006f76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f64:	f7fc fea8 	bl	8003cb8 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d901      	bls.n	8006f76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e087      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f76:	4b27      	ldr	r3, [pc, #156]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1f0      	bne.n	8006f64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	69da      	ldr	r2, [r3, #28]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f90:	019b      	lsls	r3, r3, #6
 8006f92:	431a      	orrs	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f98:	085b      	lsrs	r3, r3, #1
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	041b      	lsls	r3, r3, #16
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa4:	061b      	lsls	r3, r3, #24
 8006fa6:	491b      	ldr	r1, [pc, #108]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fac:	4b1b      	ldr	r3, [pc, #108]	@ (800701c <HAL_RCC_OscConfig+0x478>)
 8006fae:	2201      	movs	r2, #1
 8006fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb2:	f7fc fe81 	bl	8003cb8 <HAL_GetTick>
 8006fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fb8:	e008      	b.n	8006fcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fba:	f7fc fe7d 	bl	8003cb8 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e05c      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fcc:	4b11      	ldr	r3, [pc, #68]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0f0      	beq.n	8006fba <HAL_RCC_OscConfig+0x416>
 8006fd8:	e054      	b.n	8007084 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fda:	4b10      	ldr	r3, [pc, #64]	@ (800701c <HAL_RCC_OscConfig+0x478>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe0:	f7fc fe6a 	bl	8003cb8 <HAL_GetTick>
 8006fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fe6:	e008      	b.n	8006ffa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fe8:	f7fc fe66 	bl	8003cb8 <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	2b02      	cmp	r3, #2
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e045      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ffa:	4b06      	ldr	r3, [pc, #24]	@ (8007014 <HAL_RCC_OscConfig+0x470>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1f0      	bne.n	8006fe8 <HAL_RCC_OscConfig+0x444>
 8007006:	e03d      	b.n	8007084 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d107      	bne.n	8007020 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e038      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
 8007014:	40023800 	.word	0x40023800
 8007018:	40007000 	.word	0x40007000
 800701c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007020:	4b1b      	ldr	r3, [pc, #108]	@ (8007090 <HAL_RCC_OscConfig+0x4ec>)
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d028      	beq.n	8007080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007038:	429a      	cmp	r2, r3
 800703a:	d121      	bne.n	8007080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007046:	429a      	cmp	r2, r3
 8007048:	d11a      	bne.n	8007080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007050:	4013      	ands	r3, r2
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007056:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007058:	4293      	cmp	r3, r2
 800705a:	d111      	bne.n	8007080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007066:	085b      	lsrs	r3, r3, #1
 8007068:	3b01      	subs	r3, #1
 800706a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800706c:	429a      	cmp	r2, r3
 800706e:	d107      	bne.n	8007080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800707c:	429a      	cmp	r2, r3
 800707e:	d001      	beq.n	8007084 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e000      	b.n	8007086 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	40023800 	.word	0x40023800

08007094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d101      	bne.n	80070a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e0cc      	b.n	8007242 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070a8:	4b68      	ldr	r3, [pc, #416]	@ (800724c <HAL_RCC_ClockConfig+0x1b8>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d90c      	bls.n	80070d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070b6:	4b65      	ldr	r3, [pc, #404]	@ (800724c <HAL_RCC_ClockConfig+0x1b8>)
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	b2d2      	uxtb	r2, r2
 80070bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070be:	4b63      	ldr	r3, [pc, #396]	@ (800724c <HAL_RCC_ClockConfig+0x1b8>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0307 	and.w	r3, r3, #7
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d001      	beq.n	80070d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070cc:	2301      	movs	r3, #1
 80070ce:	e0b8      	b.n	8007242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0302 	and.w	r3, r3, #2
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d020      	beq.n	800711e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0304 	and.w	r3, r3, #4
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070e8:	4b59      	ldr	r3, [pc, #356]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	4a58      	ldr	r2, [pc, #352]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 80070ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80070f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0308 	and.w	r3, r3, #8
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d005      	beq.n	800710c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007100:	4b53      	ldr	r3, [pc, #332]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	4a52      	ldr	r2, [pc, #328]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007106:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800710a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800710c:	4b50      	ldr	r3, [pc, #320]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	494d      	ldr	r1, [pc, #308]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 800711a:	4313      	orrs	r3, r2
 800711c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d044      	beq.n	80071b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d107      	bne.n	8007142 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007132:	4b47      	ldr	r3, [pc, #284]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d119      	bne.n	8007172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e07f      	b.n	8007242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	2b02      	cmp	r3, #2
 8007148:	d003      	beq.n	8007152 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800714e:	2b03      	cmp	r3, #3
 8007150:	d107      	bne.n	8007162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007152:	4b3f      	ldr	r3, [pc, #252]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d109      	bne.n	8007172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e06f      	b.n	8007242 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007162:	4b3b      	ldr	r3, [pc, #236]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e067      	b.n	8007242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007172:	4b37      	ldr	r3, [pc, #220]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f023 0203 	bic.w	r2, r3, #3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	4934      	ldr	r1, [pc, #208]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007180:	4313      	orrs	r3, r2
 8007182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007184:	f7fc fd98 	bl	8003cb8 <HAL_GetTick>
 8007188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800718a:	e00a      	b.n	80071a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800718c:	f7fc fd94 	bl	8003cb8 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800719a:	4293      	cmp	r3, r2
 800719c:	d901      	bls.n	80071a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e04f      	b.n	8007242 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071a2:	4b2b      	ldr	r3, [pc, #172]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f003 020c 	and.w	r2, r3, #12
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d1eb      	bne.n	800718c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071b4:	4b25      	ldr	r3, [pc, #148]	@ (800724c <HAL_RCC_ClockConfig+0x1b8>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d20c      	bcs.n	80071dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071c2:	4b22      	ldr	r3, [pc, #136]	@ (800724c <HAL_RCC_ClockConfig+0x1b8>)
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ca:	4b20      	ldr	r3, [pc, #128]	@ (800724c <HAL_RCC_ClockConfig+0x1b8>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0307 	and.w	r3, r3, #7
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d001      	beq.n	80071dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e032      	b.n	8007242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0304 	and.w	r3, r3, #4
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d008      	beq.n	80071fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071e8:	4b19      	ldr	r3, [pc, #100]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	4916      	ldr	r1, [pc, #88]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0308 	and.w	r3, r3, #8
 8007202:	2b00      	cmp	r3, #0
 8007204:	d009      	beq.n	800721a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007206:	4b12      	ldr	r3, [pc, #72]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	490e      	ldr	r1, [pc, #56]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007216:	4313      	orrs	r3, r2
 8007218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800721a:	f000 f821 	bl	8007260 <HAL_RCC_GetSysClockFreq>
 800721e:	4602      	mov	r2, r0
 8007220:	4b0b      	ldr	r3, [pc, #44]	@ (8007250 <HAL_RCC_ClockConfig+0x1bc>)
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	091b      	lsrs	r3, r3, #4
 8007226:	f003 030f 	and.w	r3, r3, #15
 800722a:	490a      	ldr	r1, [pc, #40]	@ (8007254 <HAL_RCC_ClockConfig+0x1c0>)
 800722c:	5ccb      	ldrb	r3, [r1, r3]
 800722e:	fa22 f303 	lsr.w	r3, r2, r3
 8007232:	4a09      	ldr	r2, [pc, #36]	@ (8007258 <HAL_RCC_ClockConfig+0x1c4>)
 8007234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007236:	4b09      	ldr	r3, [pc, #36]	@ (800725c <HAL_RCC_ClockConfig+0x1c8>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4618      	mov	r0, r3
 800723c:	f7fb fce8 	bl	8002c10 <HAL_InitTick>

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	40023c00 	.word	0x40023c00
 8007250:	40023800 	.word	0x40023800
 8007254:	080215cc 	.word	0x080215cc
 8007258:	2000000c 	.word	0x2000000c
 800725c:	20000010 	.word	0x20000010

08007260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007264:	b094      	sub	sp, #80	@ 0x50
 8007266:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007274:	2300      	movs	r3, #0
 8007276:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007278:	4b79      	ldr	r3, [pc, #484]	@ (8007460 <HAL_RCC_GetSysClockFreq+0x200>)
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f003 030c 	and.w	r3, r3, #12
 8007280:	2b08      	cmp	r3, #8
 8007282:	d00d      	beq.n	80072a0 <HAL_RCC_GetSysClockFreq+0x40>
 8007284:	2b08      	cmp	r3, #8
 8007286:	f200 80e1 	bhi.w	800744c <HAL_RCC_GetSysClockFreq+0x1ec>
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <HAL_RCC_GetSysClockFreq+0x34>
 800728e:	2b04      	cmp	r3, #4
 8007290:	d003      	beq.n	800729a <HAL_RCC_GetSysClockFreq+0x3a>
 8007292:	e0db      	b.n	800744c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007294:	4b73      	ldr	r3, [pc, #460]	@ (8007464 <HAL_RCC_GetSysClockFreq+0x204>)
 8007296:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007298:	e0db      	b.n	8007452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800729a:	4b73      	ldr	r3, [pc, #460]	@ (8007468 <HAL_RCC_GetSysClockFreq+0x208>)
 800729c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800729e:	e0d8      	b.n	8007452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072a0:	4b6f      	ldr	r3, [pc, #444]	@ (8007460 <HAL_RCC_GetSysClockFreq+0x200>)
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072aa:	4b6d      	ldr	r3, [pc, #436]	@ (8007460 <HAL_RCC_GetSysClockFreq+0x200>)
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d063      	beq.n	800737e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072b6:	4b6a      	ldr	r3, [pc, #424]	@ (8007460 <HAL_RCC_GetSysClockFreq+0x200>)
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	099b      	lsrs	r3, r3, #6
 80072bc:	2200      	movs	r2, #0
 80072be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80072c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80072c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80072ca:	2300      	movs	r3, #0
 80072cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80072d2:	4622      	mov	r2, r4
 80072d4:	462b      	mov	r3, r5
 80072d6:	f04f 0000 	mov.w	r0, #0
 80072da:	f04f 0100 	mov.w	r1, #0
 80072de:	0159      	lsls	r1, r3, #5
 80072e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072e4:	0150      	lsls	r0, r2, #5
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	4621      	mov	r1, r4
 80072ec:	1a51      	subs	r1, r2, r1
 80072ee:	6139      	str	r1, [r7, #16]
 80072f0:	4629      	mov	r1, r5
 80072f2:	eb63 0301 	sbc.w	r3, r3, r1
 80072f6:	617b      	str	r3, [r7, #20]
 80072f8:	f04f 0200 	mov.w	r2, #0
 80072fc:	f04f 0300 	mov.w	r3, #0
 8007300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007304:	4659      	mov	r1, fp
 8007306:	018b      	lsls	r3, r1, #6
 8007308:	4651      	mov	r1, sl
 800730a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800730e:	4651      	mov	r1, sl
 8007310:	018a      	lsls	r2, r1, #6
 8007312:	4651      	mov	r1, sl
 8007314:	ebb2 0801 	subs.w	r8, r2, r1
 8007318:	4659      	mov	r1, fp
 800731a:	eb63 0901 	sbc.w	r9, r3, r1
 800731e:	f04f 0200 	mov.w	r2, #0
 8007322:	f04f 0300 	mov.w	r3, #0
 8007326:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800732a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800732e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007332:	4690      	mov	r8, r2
 8007334:	4699      	mov	r9, r3
 8007336:	4623      	mov	r3, r4
 8007338:	eb18 0303 	adds.w	r3, r8, r3
 800733c:	60bb      	str	r3, [r7, #8]
 800733e:	462b      	mov	r3, r5
 8007340:	eb49 0303 	adc.w	r3, r9, r3
 8007344:	60fb      	str	r3, [r7, #12]
 8007346:	f04f 0200 	mov.w	r2, #0
 800734a:	f04f 0300 	mov.w	r3, #0
 800734e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007352:	4629      	mov	r1, r5
 8007354:	024b      	lsls	r3, r1, #9
 8007356:	4621      	mov	r1, r4
 8007358:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800735c:	4621      	mov	r1, r4
 800735e:	024a      	lsls	r2, r1, #9
 8007360:	4610      	mov	r0, r2
 8007362:	4619      	mov	r1, r3
 8007364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007366:	2200      	movs	r2, #0
 8007368:	62bb      	str	r3, [r7, #40]	@ 0x28
 800736a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800736c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007370:	f7f9 f9f2 	bl	8000758 <__aeabi_uldivmod>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4613      	mov	r3, r2
 800737a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800737c:	e058      	b.n	8007430 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800737e:	4b38      	ldr	r3, [pc, #224]	@ (8007460 <HAL_RCC_GetSysClockFreq+0x200>)
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	099b      	lsrs	r3, r3, #6
 8007384:	2200      	movs	r2, #0
 8007386:	4618      	mov	r0, r3
 8007388:	4611      	mov	r1, r2
 800738a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800738e:	623b      	str	r3, [r7, #32]
 8007390:	2300      	movs	r3, #0
 8007392:	627b      	str	r3, [r7, #36]	@ 0x24
 8007394:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007398:	4642      	mov	r2, r8
 800739a:	464b      	mov	r3, r9
 800739c:	f04f 0000 	mov.w	r0, #0
 80073a0:	f04f 0100 	mov.w	r1, #0
 80073a4:	0159      	lsls	r1, r3, #5
 80073a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073aa:	0150      	lsls	r0, r2, #5
 80073ac:	4602      	mov	r2, r0
 80073ae:	460b      	mov	r3, r1
 80073b0:	4641      	mov	r1, r8
 80073b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80073b6:	4649      	mov	r1, r9
 80073b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80073bc:	f04f 0200 	mov.w	r2, #0
 80073c0:	f04f 0300 	mov.w	r3, #0
 80073c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80073c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80073cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80073d0:	ebb2 040a 	subs.w	r4, r2, sl
 80073d4:	eb63 050b 	sbc.w	r5, r3, fp
 80073d8:	f04f 0200 	mov.w	r2, #0
 80073dc:	f04f 0300 	mov.w	r3, #0
 80073e0:	00eb      	lsls	r3, r5, #3
 80073e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073e6:	00e2      	lsls	r2, r4, #3
 80073e8:	4614      	mov	r4, r2
 80073ea:	461d      	mov	r5, r3
 80073ec:	4643      	mov	r3, r8
 80073ee:	18e3      	adds	r3, r4, r3
 80073f0:	603b      	str	r3, [r7, #0]
 80073f2:	464b      	mov	r3, r9
 80073f4:	eb45 0303 	adc.w	r3, r5, r3
 80073f8:	607b      	str	r3, [r7, #4]
 80073fa:	f04f 0200 	mov.w	r2, #0
 80073fe:	f04f 0300 	mov.w	r3, #0
 8007402:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007406:	4629      	mov	r1, r5
 8007408:	028b      	lsls	r3, r1, #10
 800740a:	4621      	mov	r1, r4
 800740c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007410:	4621      	mov	r1, r4
 8007412:	028a      	lsls	r2, r1, #10
 8007414:	4610      	mov	r0, r2
 8007416:	4619      	mov	r1, r3
 8007418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800741a:	2200      	movs	r2, #0
 800741c:	61bb      	str	r3, [r7, #24]
 800741e:	61fa      	str	r2, [r7, #28]
 8007420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007424:	f7f9 f998 	bl	8000758 <__aeabi_uldivmod>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4613      	mov	r3, r2
 800742e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007430:	4b0b      	ldr	r3, [pc, #44]	@ (8007460 <HAL_RCC_GetSysClockFreq+0x200>)
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	0c1b      	lsrs	r3, r3, #16
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	3301      	adds	r3, #1
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007440:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007444:	fbb2 f3f3 	udiv	r3, r2, r3
 8007448:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800744a:	e002      	b.n	8007452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800744c:	4b05      	ldr	r3, [pc, #20]	@ (8007464 <HAL_RCC_GetSysClockFreq+0x204>)
 800744e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007452:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007454:	4618      	mov	r0, r3
 8007456:	3750      	adds	r7, #80	@ 0x50
 8007458:	46bd      	mov	sp, r7
 800745a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800745e:	bf00      	nop
 8007460:	40023800 	.word	0x40023800
 8007464:	00f42400 	.word	0x00f42400
 8007468:	007a1200 	.word	0x007a1200

0800746c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007470:	4b03      	ldr	r3, [pc, #12]	@ (8007480 <HAL_RCC_GetHCLKFreq+0x14>)
 8007472:	681b      	ldr	r3, [r3, #0]
}
 8007474:	4618      	mov	r0, r3
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	2000000c 	.word	0x2000000c

08007484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007488:	f7ff fff0 	bl	800746c <HAL_RCC_GetHCLKFreq>
 800748c:	4602      	mov	r2, r0
 800748e:	4b05      	ldr	r3, [pc, #20]	@ (80074a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	0a9b      	lsrs	r3, r3, #10
 8007494:	f003 0307 	and.w	r3, r3, #7
 8007498:	4903      	ldr	r1, [pc, #12]	@ (80074a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800749a:	5ccb      	ldrb	r3, [r1, r3]
 800749c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	40023800 	.word	0x40023800
 80074a8:	080215dc 	.word	0x080215dc

080074ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80074b0:	f7ff ffdc 	bl	800746c <HAL_RCC_GetHCLKFreq>
 80074b4:	4602      	mov	r2, r0
 80074b6:	4b05      	ldr	r3, [pc, #20]	@ (80074cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	0b5b      	lsrs	r3, r3, #13
 80074bc:	f003 0307 	and.w	r3, r3, #7
 80074c0:	4903      	ldr	r1, [pc, #12]	@ (80074d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074c2:	5ccb      	ldrb	r3, [r1, r3]
 80074c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	40023800 	.word	0x40023800
 80074d0:	080215dc 	.word	0x080215dc

080074d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	220f      	movs	r2, #15
 80074e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80074e4:	4b12      	ldr	r3, [pc, #72]	@ (8007530 <HAL_RCC_GetClockConfig+0x5c>)
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f003 0203 	and.w	r2, r3, #3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80074f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007530 <HAL_RCC_GetClockConfig+0x5c>)
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80074fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007530 <HAL_RCC_GetClockConfig+0x5c>)
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007508:	4b09      	ldr	r3, [pc, #36]	@ (8007530 <HAL_RCC_GetClockConfig+0x5c>)
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	08db      	lsrs	r3, r3, #3
 800750e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007516:	4b07      	ldr	r3, [pc, #28]	@ (8007534 <HAL_RCC_GetClockConfig+0x60>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 0207 	and.w	r2, r3, #7
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	601a      	str	r2, [r3, #0]
}
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	40023800 	.word	0x40023800
 8007534:	40023c00 	.word	0x40023c00

08007538 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e01c      	b.n	8007584 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	795b      	ldrb	r3, [r3, #5]
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d105      	bne.n	8007560 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7fb fa8c 	bl	8002a78 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2202      	movs	r2, #2
 8007564:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f042 0204 	orr.w	r2, r2, #4
 8007574:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e07b      	b.n	8007696 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d108      	bne.n	80075b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075ae:	d009      	beq.n	80075c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	61da      	str	r2, [r3, #28]
 80075b6:	e005      	b.n	80075c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d106      	bne.n	80075e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7fb faa2 	bl	8002b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2202      	movs	r2, #2
 80075e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800760c:	431a      	orrs	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007616:	431a      	orrs	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	431a      	orrs	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	431a      	orrs	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007634:	431a      	orrs	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	69db      	ldr	r3, [r3, #28]
 800763a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800763e:	431a      	orrs	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007648:	ea42 0103 	orr.w	r1, r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007650:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	430a      	orrs	r2, r1
 800765a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	0c1b      	lsrs	r3, r3, #16
 8007662:	f003 0104 	and.w	r1, r3, #4
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800766a:	f003 0210 	and.w	r2, r3, #16
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	430a      	orrs	r2, r1
 8007674:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69da      	ldr	r2, [r3, #28]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007684:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b082      	sub	sp, #8
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d101      	bne.n	80076b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076ac:	2301      	movs	r3, #1
 80076ae:	e041      	b.n	8007734 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d106      	bne.n	80076ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7fc f827 	bl	8003718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2202      	movs	r2, #2
 80076ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	3304      	adds	r3, #4
 80076da:	4619      	mov	r1, r3
 80076dc:	4610      	mov	r0, r2
 80076de:	f000 ffe3 	bl	80086a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2201      	movs	r2, #1
 80076f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	3708      	adds	r7, #8
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b01      	cmp	r3, #1
 800774e:	d001      	beq.n	8007754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e04e      	b.n	80077f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2202      	movs	r2, #2
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68da      	ldr	r2, [r3, #12]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f042 0201 	orr.w	r2, r2, #1
 800776a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a23      	ldr	r2, [pc, #140]	@ (8007800 <HAL_TIM_Base_Start_IT+0xc4>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d022      	beq.n	80077bc <HAL_TIM_Base_Start_IT+0x80>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800777e:	d01d      	beq.n	80077bc <HAL_TIM_Base_Start_IT+0x80>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a1f      	ldr	r2, [pc, #124]	@ (8007804 <HAL_TIM_Base_Start_IT+0xc8>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d018      	beq.n	80077bc <HAL_TIM_Base_Start_IT+0x80>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a1e      	ldr	r2, [pc, #120]	@ (8007808 <HAL_TIM_Base_Start_IT+0xcc>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d013      	beq.n	80077bc <HAL_TIM_Base_Start_IT+0x80>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1c      	ldr	r2, [pc, #112]	@ (800780c <HAL_TIM_Base_Start_IT+0xd0>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d00e      	beq.n	80077bc <HAL_TIM_Base_Start_IT+0x80>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a1b      	ldr	r2, [pc, #108]	@ (8007810 <HAL_TIM_Base_Start_IT+0xd4>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d009      	beq.n	80077bc <HAL_TIM_Base_Start_IT+0x80>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a19      	ldr	r2, [pc, #100]	@ (8007814 <HAL_TIM_Base_Start_IT+0xd8>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d004      	beq.n	80077bc <HAL_TIM_Base_Start_IT+0x80>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a18      	ldr	r2, [pc, #96]	@ (8007818 <HAL_TIM_Base_Start_IT+0xdc>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d111      	bne.n	80077e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2b06      	cmp	r3, #6
 80077cc:	d010      	beq.n	80077f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f042 0201 	orr.w	r2, r2, #1
 80077dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077de:	e007      	b.n	80077f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f042 0201 	orr.w	r2, r2, #1
 80077ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	40010000 	.word	0x40010000
 8007804:	40000400 	.word	0x40000400
 8007808:	40000800 	.word	0x40000800
 800780c:	40000c00 	.word	0x40000c00
 8007810:	40010400 	.word	0x40010400
 8007814:	40014000 	.word	0x40014000
 8007818:	40001800 	.word	0x40001800

0800781c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e041      	b.n	80078b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d106      	bne.n	8007848 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f839 	bl	80078ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2202      	movs	r2, #2
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3304      	adds	r3, #4
 8007858:	4619      	mov	r1, r3
 800785a:	4610      	mov	r0, r2
 800785c:	f000 ff24 	bl	80086a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2201      	movs	r2, #1
 80078a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
	...

080078d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d109      	bne.n	80078f4 <HAL_TIM_PWM_Start+0x24>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	bf14      	ite	ne
 80078ec:	2301      	movne	r3, #1
 80078ee:	2300      	moveq	r3, #0
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	e022      	b.n	800793a <HAL_TIM_PWM_Start+0x6a>
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d109      	bne.n	800790e <HAL_TIM_PWM_Start+0x3e>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b01      	cmp	r3, #1
 8007904:	bf14      	ite	ne
 8007906:	2301      	movne	r3, #1
 8007908:	2300      	moveq	r3, #0
 800790a:	b2db      	uxtb	r3, r3
 800790c:	e015      	b.n	800793a <HAL_TIM_PWM_Start+0x6a>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b08      	cmp	r3, #8
 8007912:	d109      	bne.n	8007928 <HAL_TIM_PWM_Start+0x58>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b01      	cmp	r3, #1
 800791e:	bf14      	ite	ne
 8007920:	2301      	movne	r3, #1
 8007922:	2300      	moveq	r3, #0
 8007924:	b2db      	uxtb	r3, r3
 8007926:	e008      	b.n	800793a <HAL_TIM_PWM_Start+0x6a>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b01      	cmp	r3, #1
 8007932:	bf14      	ite	ne
 8007934:	2301      	movne	r3, #1
 8007936:	2300      	moveq	r3, #0
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e07c      	b.n	8007a3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d104      	bne.n	8007952 <HAL_TIM_PWM_Start+0x82>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007950:	e013      	b.n	800797a <HAL_TIM_PWM_Start+0xaa>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b04      	cmp	r3, #4
 8007956:	d104      	bne.n	8007962 <HAL_TIM_PWM_Start+0x92>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007960:	e00b      	b.n	800797a <HAL_TIM_PWM_Start+0xaa>
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b08      	cmp	r3, #8
 8007966:	d104      	bne.n	8007972 <HAL_TIM_PWM_Start+0xa2>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007970:	e003      	b.n	800797a <HAL_TIM_PWM_Start+0xaa>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2202      	movs	r2, #2
 8007976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2201      	movs	r2, #1
 8007980:	6839      	ldr	r1, [r7, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f001 fab0 	bl	8008ee8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a2d      	ldr	r2, [pc, #180]	@ (8007a44 <HAL_TIM_PWM_Start+0x174>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d004      	beq.n	800799c <HAL_TIM_PWM_Start+0xcc>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a2c      	ldr	r2, [pc, #176]	@ (8007a48 <HAL_TIM_PWM_Start+0x178>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d101      	bne.n	80079a0 <HAL_TIM_PWM_Start+0xd0>
 800799c:	2301      	movs	r3, #1
 800799e:	e000      	b.n	80079a2 <HAL_TIM_PWM_Start+0xd2>
 80079a0:	2300      	movs	r3, #0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d007      	beq.n	80079b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80079b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a22      	ldr	r2, [pc, #136]	@ (8007a44 <HAL_TIM_PWM_Start+0x174>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d022      	beq.n	8007a06 <HAL_TIM_PWM_Start+0x136>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079c8:	d01d      	beq.n	8007a06 <HAL_TIM_PWM_Start+0x136>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a1f      	ldr	r2, [pc, #124]	@ (8007a4c <HAL_TIM_PWM_Start+0x17c>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d018      	beq.n	8007a06 <HAL_TIM_PWM_Start+0x136>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a1d      	ldr	r2, [pc, #116]	@ (8007a50 <HAL_TIM_PWM_Start+0x180>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d013      	beq.n	8007a06 <HAL_TIM_PWM_Start+0x136>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a1c      	ldr	r2, [pc, #112]	@ (8007a54 <HAL_TIM_PWM_Start+0x184>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d00e      	beq.n	8007a06 <HAL_TIM_PWM_Start+0x136>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a16      	ldr	r2, [pc, #88]	@ (8007a48 <HAL_TIM_PWM_Start+0x178>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d009      	beq.n	8007a06 <HAL_TIM_PWM_Start+0x136>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a18      	ldr	r2, [pc, #96]	@ (8007a58 <HAL_TIM_PWM_Start+0x188>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d004      	beq.n	8007a06 <HAL_TIM_PWM_Start+0x136>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a16      	ldr	r2, [pc, #88]	@ (8007a5c <HAL_TIM_PWM_Start+0x18c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d111      	bne.n	8007a2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	f003 0307 	and.w	r3, r3, #7
 8007a10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2b06      	cmp	r3, #6
 8007a16:	d010      	beq.n	8007a3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0201 	orr.w	r2, r2, #1
 8007a26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a28:	e007      	b.n	8007a3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f042 0201 	orr.w	r2, r2, #1
 8007a38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	40010000 	.word	0x40010000
 8007a48:	40010400 	.word	0x40010400
 8007a4c:	40000400 	.word	0x40000400
 8007a50:	40000800 	.word	0x40000800
 8007a54:	40000c00 	.word	0x40000c00
 8007a58:	40014000 	.word	0x40014000
 8007a5c:	40001800 	.word	0x40001800

08007a60 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e041      	b.n	8007af6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d106      	bne.n	8007a8c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7fb fd88 	bl	800359c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	4610      	mov	r0, r2
 8007aa0:	f000 fe02 	bl	80086a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
	...

08007b00 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d104      	bne.n	8007b1e <HAL_TIM_IC_Start_IT+0x1e>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	e013      	b.n	8007b46 <HAL_TIM_IC_Start_IT+0x46>
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b04      	cmp	r3, #4
 8007b22:	d104      	bne.n	8007b2e <HAL_TIM_IC_Start_IT+0x2e>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	e00b      	b.n	8007b46 <HAL_TIM_IC_Start_IT+0x46>
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b08      	cmp	r3, #8
 8007b32:	d104      	bne.n	8007b3e <HAL_TIM_IC_Start_IT+0x3e>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	e003      	b.n	8007b46 <HAL_TIM_IC_Start_IT+0x46>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d104      	bne.n	8007b58 <HAL_TIM_IC_Start_IT+0x58>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	e013      	b.n	8007b80 <HAL_TIM_IC_Start_IT+0x80>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2b04      	cmp	r3, #4
 8007b5c:	d104      	bne.n	8007b68 <HAL_TIM_IC_Start_IT+0x68>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	e00b      	b.n	8007b80 <HAL_TIM_IC_Start_IT+0x80>
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2b08      	cmp	r3, #8
 8007b6c:	d104      	bne.n	8007b78 <HAL_TIM_IC_Start_IT+0x78>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	e003      	b.n	8007b80 <HAL_TIM_IC_Start_IT+0x80>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d102      	bne.n	8007b8e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b88:	7b7b      	ldrb	r3, [r7, #13]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d001      	beq.n	8007b92 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e0cc      	b.n	8007d2c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d104      	bne.n	8007ba2 <HAL_TIM_IC_Start_IT+0xa2>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ba0:	e013      	b.n	8007bca <HAL_TIM_IC_Start_IT+0xca>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b04      	cmp	r3, #4
 8007ba6:	d104      	bne.n	8007bb2 <HAL_TIM_IC_Start_IT+0xb2>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2202      	movs	r2, #2
 8007bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bb0:	e00b      	b.n	8007bca <HAL_TIM_IC_Start_IT+0xca>
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	2b08      	cmp	r3, #8
 8007bb6:	d104      	bne.n	8007bc2 <HAL_TIM_IC_Start_IT+0xc2>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bc0:	e003      	b.n	8007bca <HAL_TIM_IC_Start_IT+0xca>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d104      	bne.n	8007bda <HAL_TIM_IC_Start_IT+0xda>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007bd8:	e013      	b.n	8007c02 <HAL_TIM_IC_Start_IT+0x102>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	2b04      	cmp	r3, #4
 8007bde:	d104      	bne.n	8007bea <HAL_TIM_IC_Start_IT+0xea>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2202      	movs	r2, #2
 8007be4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007be8:	e00b      	b.n	8007c02 <HAL_TIM_IC_Start_IT+0x102>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d104      	bne.n	8007bfa <HAL_TIM_IC_Start_IT+0xfa>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bf8:	e003      	b.n	8007c02 <HAL_TIM_IC_Start_IT+0x102>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b0c      	cmp	r3, #12
 8007c06:	d841      	bhi.n	8007c8c <HAL_TIM_IC_Start_IT+0x18c>
 8007c08:	a201      	add	r2, pc, #4	@ (adr r2, 8007c10 <HAL_TIM_IC_Start_IT+0x110>)
 8007c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0e:	bf00      	nop
 8007c10:	08007c45 	.word	0x08007c45
 8007c14:	08007c8d 	.word	0x08007c8d
 8007c18:	08007c8d 	.word	0x08007c8d
 8007c1c:	08007c8d 	.word	0x08007c8d
 8007c20:	08007c57 	.word	0x08007c57
 8007c24:	08007c8d 	.word	0x08007c8d
 8007c28:	08007c8d 	.word	0x08007c8d
 8007c2c:	08007c8d 	.word	0x08007c8d
 8007c30:	08007c69 	.word	0x08007c69
 8007c34:	08007c8d 	.word	0x08007c8d
 8007c38:	08007c8d 	.word	0x08007c8d
 8007c3c:	08007c8d 	.word	0x08007c8d
 8007c40:	08007c7b 	.word	0x08007c7b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f042 0202 	orr.w	r2, r2, #2
 8007c52:	60da      	str	r2, [r3, #12]
      break;
 8007c54:	e01d      	b.n	8007c92 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68da      	ldr	r2, [r3, #12]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f042 0204 	orr.w	r2, r2, #4
 8007c64:	60da      	str	r2, [r3, #12]
      break;
 8007c66:	e014      	b.n	8007c92 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68da      	ldr	r2, [r3, #12]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f042 0208 	orr.w	r2, r2, #8
 8007c76:	60da      	str	r2, [r3, #12]
      break;
 8007c78:	e00b      	b.n	8007c92 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68da      	ldr	r2, [r3, #12]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f042 0210 	orr.w	r2, r2, #16
 8007c88:	60da      	str	r2, [r3, #12]
      break;
 8007c8a:	e002      	b.n	8007c92 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c90:	bf00      	nop
  }

  if (status == HAL_OK)
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d148      	bne.n	8007d2a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f001 f921 	bl	8008ee8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a22      	ldr	r2, [pc, #136]	@ (8007d34 <HAL_TIM_IC_Start_IT+0x234>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d022      	beq.n	8007cf6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cb8:	d01d      	beq.n	8007cf6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8007d38 <HAL_TIM_IC_Start_IT+0x238>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d018      	beq.n	8007cf6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8007d3c <HAL_TIM_IC_Start_IT+0x23c>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d013      	beq.n	8007cf6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8007d40 <HAL_TIM_IC_Start_IT+0x240>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d00e      	beq.n	8007cf6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a19      	ldr	r2, [pc, #100]	@ (8007d44 <HAL_TIM_IC_Start_IT+0x244>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d009      	beq.n	8007cf6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a18      	ldr	r2, [pc, #96]	@ (8007d48 <HAL_TIM_IC_Start_IT+0x248>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d004      	beq.n	8007cf6 <HAL_TIM_IC_Start_IT+0x1f6>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a16      	ldr	r2, [pc, #88]	@ (8007d4c <HAL_TIM_IC_Start_IT+0x24c>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d111      	bne.n	8007d1a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	f003 0307 	and.w	r3, r3, #7
 8007d00:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2b06      	cmp	r3, #6
 8007d06:	d010      	beq.n	8007d2a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f042 0201 	orr.w	r2, r2, #1
 8007d16:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d18:	e007      	b.n	8007d2a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f042 0201 	orr.w	r2, r2, #1
 8007d28:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	40010000 	.word	0x40010000
 8007d38:	40000400 	.word	0x40000400
 8007d3c:	40000800 	.word	0x40000800
 8007d40:	40000c00 	.word	0x40000c00
 8007d44:	40010400 	.word	0x40010400
 8007d48:	40014000 	.word	0x40014000
 8007d4c:	40001800 	.word	0x40001800

08007d50 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e097      	b.n	8007e94 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d106      	bne.n	8007d7e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7fb fb8d 	bl	8003498 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2202      	movs	r2, #2
 8007d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	6812      	ldr	r2, [r2, #0]
 8007d90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d94:	f023 0307 	bic.w	r3, r3, #7
 8007d98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	3304      	adds	r3, #4
 8007da2:	4619      	mov	r1, r3
 8007da4:	4610      	mov	r0, r2
 8007da6:	f000 fc7f 	bl	80086a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dd2:	f023 0303 	bic.w	r3, r3, #3
 8007dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	021b      	lsls	r3, r3, #8
 8007de2:	4313      	orrs	r3, r2
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007df0:	f023 030c 	bic.w	r3, r3, #12
 8007df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007dfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	68da      	ldr	r2, [r3, #12]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	69db      	ldr	r3, [r3, #28]
 8007e0a:	021b      	lsls	r3, r3, #8
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	011a      	lsls	r2, r3, #4
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	6a1b      	ldr	r3, [r3, #32]
 8007e1e:	031b      	lsls	r3, r3, #12
 8007e20:	4313      	orrs	r3, r2
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007e2e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007e36:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	011b      	lsls	r3, r3, #4
 8007e42:	4313      	orrs	r3, r2
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2201      	movs	r2, #1
 8007e76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007eac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007eb4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ebc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007ec4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d110      	bne.n	8007eee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d102      	bne.n	8007ed8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ed2:	7b7b      	ldrb	r3, [r7, #13]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d001      	beq.n	8007edc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e069      	b.n	8007fb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2202      	movs	r2, #2
 8007ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007eec:	e031      	b.n	8007f52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b04      	cmp	r3, #4
 8007ef2:	d110      	bne.n	8007f16 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d102      	bne.n	8007f00 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007efa:	7b3b      	ldrb	r3, [r7, #12]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d001      	beq.n	8007f04 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e055      	b.n	8007fb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2202      	movs	r2, #2
 8007f08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f14:	e01d      	b.n	8007f52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d108      	bne.n	8007f2e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f1c:	7bbb      	ldrb	r3, [r7, #14]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d105      	bne.n	8007f2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f22:	7b7b      	ldrb	r3, [r7, #13]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d102      	bne.n	8007f2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f28:	7b3b      	ldrb	r3, [r7, #12]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d001      	beq.n	8007f32 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e03e      	b.n	8007fb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2202      	movs	r2, #2
 8007f36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2202      	movs	r2, #2
 8007f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2202      	movs	r2, #2
 8007f4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d003      	beq.n	8007f60 <HAL_TIM_Encoder_Start+0xc4>
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	2b04      	cmp	r3, #4
 8007f5c:	d008      	beq.n	8007f70 <HAL_TIM_Encoder_Start+0xd4>
 8007f5e:	e00f      	b.n	8007f80 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2201      	movs	r2, #1
 8007f66:	2100      	movs	r1, #0
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 ffbd 	bl	8008ee8 <TIM_CCxChannelCmd>
      break;
 8007f6e:	e016      	b.n	8007f9e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2201      	movs	r2, #1
 8007f76:	2104      	movs	r1, #4
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 ffb5 	bl	8008ee8 <TIM_CCxChannelCmd>
      break;
 8007f7e:	e00e      	b.n	8007f9e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2201      	movs	r2, #1
 8007f86:	2100      	movs	r1, #0
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f000 ffad 	bl	8008ee8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2201      	movs	r2, #1
 8007f94:	2104      	movs	r1, #4
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 ffa6 	bl	8008ee8 <TIM_CCxChannelCmd>
      break;
 8007f9c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f042 0201 	orr.w	r2, r2, #1
 8007fac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f003 0302 	and.w	r3, r3, #2
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d020      	beq.n	800801c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f003 0302 	and.w	r3, r3, #2
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d01b      	beq.n	800801c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f06f 0202 	mvn.w	r2, #2
 8007fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	f003 0303 	and.w	r3, r3, #3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d003      	beq.n	800800a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7f9 fc2e 	bl	8001864 <HAL_TIM_IC_CaptureCallback>
 8008008:	e005      	b.n	8008016 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 fb2e 	bl	800866c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fb35 	bl	8008680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f003 0304 	and.w	r3, r3, #4
 8008022:	2b00      	cmp	r3, #0
 8008024:	d020      	beq.n	8008068 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01b      	beq.n	8008068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f06f 0204 	mvn.w	r2, #4
 8008038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2202      	movs	r2, #2
 800803e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7f9 fc08 	bl	8001864 <HAL_TIM_IC_CaptureCallback>
 8008054:	e005      	b.n	8008062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fb08 	bl	800866c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fb0f 	bl	8008680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	f003 0308 	and.w	r3, r3, #8
 800806e:	2b00      	cmp	r3, #0
 8008070:	d020      	beq.n	80080b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f003 0308 	and.w	r3, r3, #8
 8008078:	2b00      	cmp	r3, #0
 800807a:	d01b      	beq.n	80080b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f06f 0208 	mvn.w	r2, #8
 8008084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2204      	movs	r2, #4
 800808a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f003 0303 	and.w	r3, r3, #3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7f9 fbe2 	bl	8001864 <HAL_TIM_IC_CaptureCallback>
 80080a0:	e005      	b.n	80080ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fae2 	bl	800866c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fae9 	bl	8008680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f003 0310 	and.w	r3, r3, #16
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d020      	beq.n	8008100 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f003 0310 	and.w	r3, r3, #16
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d01b      	beq.n	8008100 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f06f 0210 	mvn.w	r2, #16
 80080d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2208      	movs	r2, #8
 80080d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	69db      	ldr	r3, [r3, #28]
 80080de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7f9 fbbc 	bl	8001864 <HAL_TIM_IC_CaptureCallback>
 80080ec:	e005      	b.n	80080fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fabc 	bl	800866c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fac3 	bl	8008680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00c      	beq.n	8008124 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f003 0301 	and.w	r3, r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	d007      	beq.n	8008124 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f06f 0201 	mvn.w	r2, #1
 800811c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7fa fa32 	bl	8002588 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00c      	beq.n	8008148 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008134:	2b00      	cmp	r3, #0
 8008136:	d007      	beq.n	8008148 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f001 f888 	bl	8009258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00c      	beq.n	800816c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008158:	2b00      	cmp	r3, #0
 800815a:	d007      	beq.n	800816c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fa94 	bl	8008694 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f003 0320 	and.w	r3, r3, #32
 8008172:	2b00      	cmp	r3, #0
 8008174:	d00c      	beq.n	8008190 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f003 0320 	and.w	r3, r3, #32
 800817c:	2b00      	cmp	r3, #0
 800817e:	d007      	beq.n	8008190 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f06f 0220 	mvn.w	r2, #32
 8008188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f001 f85a 	bl	8009244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008190:	bf00      	nop
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d101      	bne.n	80081b6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80081b2:	2302      	movs	r3, #2
 80081b4:	e088      	b.n	80082c8 <HAL_TIM_IC_ConfigChannel+0x130>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d11b      	bne.n	80081fc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80081d4:	f000 fcc4 	bl	8008b60 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699a      	ldr	r2, [r3, #24]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f022 020c 	bic.w	r2, r2, #12
 80081e6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6999      	ldr	r1, [r3, #24]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	689a      	ldr	r2, [r3, #8]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	430a      	orrs	r2, r1
 80081f8:	619a      	str	r2, [r3, #24]
 80081fa:	e060      	b.n	80082be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b04      	cmp	r3, #4
 8008200:	d11c      	bne.n	800823c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008212:	f000 fd48 	bl	8008ca6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	699a      	ldr	r2, [r3, #24]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008224:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	6999      	ldr	r1, [r3, #24]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	021a      	lsls	r2, r3, #8
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	430a      	orrs	r2, r1
 8008238:	619a      	str	r2, [r3, #24]
 800823a:	e040      	b.n	80082be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b08      	cmp	r3, #8
 8008240:	d11b      	bne.n	800827a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008252:	f000 fd95 	bl	8008d80 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	69da      	ldr	r2, [r3, #28]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f022 020c 	bic.w	r2, r2, #12
 8008264:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	69d9      	ldr	r1, [r3, #28]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	689a      	ldr	r2, [r3, #8]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	430a      	orrs	r2, r1
 8008276:	61da      	str	r2, [r3, #28]
 8008278:	e021      	b.n	80082be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b0c      	cmp	r3, #12
 800827e:	d11c      	bne.n	80082ba <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008290:	f000 fdb2 	bl	8008df8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	69da      	ldr	r2, [r3, #28]
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80082a2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	69d9      	ldr	r1, [r3, #28]
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	021a      	lsls	r2, r3, #8
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	430a      	orrs	r2, r1
 80082b6:	61da      	str	r2, [r3, #28]
 80082b8:	e001      	b.n	80082be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082dc:	2300      	movs	r3, #0
 80082de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d101      	bne.n	80082ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082ea:	2302      	movs	r3, #2
 80082ec:	e0ae      	b.n	800844c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b0c      	cmp	r3, #12
 80082fa:	f200 809f 	bhi.w	800843c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80082fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008304 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	08008339 	.word	0x08008339
 8008308:	0800843d 	.word	0x0800843d
 800830c:	0800843d 	.word	0x0800843d
 8008310:	0800843d 	.word	0x0800843d
 8008314:	08008379 	.word	0x08008379
 8008318:	0800843d 	.word	0x0800843d
 800831c:	0800843d 	.word	0x0800843d
 8008320:	0800843d 	.word	0x0800843d
 8008324:	080083bb 	.word	0x080083bb
 8008328:	0800843d 	.word	0x0800843d
 800832c:	0800843d 	.word	0x0800843d
 8008330:	0800843d 	.word	0x0800843d
 8008334:	080083fb 	.word	0x080083fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68b9      	ldr	r1, [r7, #8]
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fa5e 	bl	8008800 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699a      	ldr	r2, [r3, #24]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f042 0208 	orr.w	r2, r2, #8
 8008352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	699a      	ldr	r2, [r3, #24]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f022 0204 	bic.w	r2, r2, #4
 8008362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6999      	ldr	r1, [r3, #24]
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	691a      	ldr	r2, [r3, #16]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	619a      	str	r2, [r3, #24]
      break;
 8008376:	e064      	b.n	8008442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68b9      	ldr	r1, [r7, #8]
 800837e:	4618      	mov	r0, r3
 8008380:	f000 faae 	bl	80088e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	699a      	ldr	r2, [r3, #24]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	699a      	ldr	r2, [r3, #24]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	6999      	ldr	r1, [r3, #24]
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	021a      	lsls	r2, r3, #8
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	430a      	orrs	r2, r1
 80083b6:	619a      	str	r2, [r3, #24]
      break;
 80083b8:	e043      	b.n	8008442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68b9      	ldr	r1, [r7, #8]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 fb03 	bl	80089cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69da      	ldr	r2, [r3, #28]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f042 0208 	orr.w	r2, r2, #8
 80083d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69da      	ldr	r2, [r3, #28]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f022 0204 	bic.w	r2, r2, #4
 80083e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	69d9      	ldr	r1, [r3, #28]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	691a      	ldr	r2, [r3, #16]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	430a      	orrs	r2, r1
 80083f6:	61da      	str	r2, [r3, #28]
      break;
 80083f8:	e023      	b.n	8008442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	68b9      	ldr	r1, [r7, #8]
 8008400:	4618      	mov	r0, r3
 8008402:	f000 fb57 	bl	8008ab4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	69da      	ldr	r2, [r3, #28]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	69da      	ldr	r2, [r3, #28]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	69d9      	ldr	r1, [r3, #28]
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	021a      	lsls	r2, r3, #8
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	61da      	str	r2, [r3, #28]
      break;
 800843a:	e002      	b.n	8008442 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	75fb      	strb	r3, [r7, #23]
      break;
 8008440:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800844a:	7dfb      	ldrb	r3, [r7, #23]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3718      	adds	r7, #24
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008468:	2b01      	cmp	r3, #1
 800846a:	d101      	bne.n	8008470 <HAL_TIM_ConfigClockSource+0x1c>
 800846c:	2302      	movs	r3, #2
 800846e:	e0b4      	b.n	80085da <HAL_TIM_ConfigClockSource+0x186>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800848e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	68ba      	ldr	r2, [r7, #8]
 800849e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084a8:	d03e      	beq.n	8008528 <HAL_TIM_ConfigClockSource+0xd4>
 80084aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084ae:	f200 8087 	bhi.w	80085c0 <HAL_TIM_ConfigClockSource+0x16c>
 80084b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084b6:	f000 8086 	beq.w	80085c6 <HAL_TIM_ConfigClockSource+0x172>
 80084ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084be:	d87f      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x16c>
 80084c0:	2b70      	cmp	r3, #112	@ 0x70
 80084c2:	d01a      	beq.n	80084fa <HAL_TIM_ConfigClockSource+0xa6>
 80084c4:	2b70      	cmp	r3, #112	@ 0x70
 80084c6:	d87b      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x16c>
 80084c8:	2b60      	cmp	r3, #96	@ 0x60
 80084ca:	d050      	beq.n	800856e <HAL_TIM_ConfigClockSource+0x11a>
 80084cc:	2b60      	cmp	r3, #96	@ 0x60
 80084ce:	d877      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x16c>
 80084d0:	2b50      	cmp	r3, #80	@ 0x50
 80084d2:	d03c      	beq.n	800854e <HAL_TIM_ConfigClockSource+0xfa>
 80084d4:	2b50      	cmp	r3, #80	@ 0x50
 80084d6:	d873      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x16c>
 80084d8:	2b40      	cmp	r3, #64	@ 0x40
 80084da:	d058      	beq.n	800858e <HAL_TIM_ConfigClockSource+0x13a>
 80084dc:	2b40      	cmp	r3, #64	@ 0x40
 80084de:	d86f      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x16c>
 80084e0:	2b30      	cmp	r3, #48	@ 0x30
 80084e2:	d064      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x15a>
 80084e4:	2b30      	cmp	r3, #48	@ 0x30
 80084e6:	d86b      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x16c>
 80084e8:	2b20      	cmp	r3, #32
 80084ea:	d060      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x15a>
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	d867      	bhi.n	80085c0 <HAL_TIM_ConfigClockSource+0x16c>
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d05c      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x15a>
 80084f4:	2b10      	cmp	r3, #16
 80084f6:	d05a      	beq.n	80085ae <HAL_TIM_ConfigClockSource+0x15a>
 80084f8:	e062      	b.n	80085c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800850a:	f000 fccd 	bl	8008ea8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800851c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	609a      	str	r2, [r3, #8]
      break;
 8008526:	e04f      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008538:	f000 fcb6 	bl	8008ea8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	689a      	ldr	r2, [r3, #8]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800854a:	609a      	str	r2, [r3, #8]
      break;
 800854c:	e03c      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800855a:	461a      	mov	r2, r3
 800855c:	f000 fb74 	bl	8008c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2150      	movs	r1, #80	@ 0x50
 8008566:	4618      	mov	r0, r3
 8008568:	f000 fc83 	bl	8008e72 <TIM_ITRx_SetConfig>
      break;
 800856c:	e02c      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800857a:	461a      	mov	r2, r3
 800857c:	f000 fbd0 	bl	8008d20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2160      	movs	r1, #96	@ 0x60
 8008586:	4618      	mov	r0, r3
 8008588:	f000 fc73 	bl	8008e72 <TIM_ITRx_SetConfig>
      break;
 800858c:	e01c      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800859a:	461a      	mov	r2, r3
 800859c:	f000 fb54 	bl	8008c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2140      	movs	r1, #64	@ 0x40
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 fc63 	bl	8008e72 <TIM_ITRx_SetConfig>
      break;
 80085ac:	e00c      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4619      	mov	r1, r3
 80085b8:	4610      	mov	r0, r2
 80085ba:	f000 fc5a 	bl	8008e72 <TIM_ITRx_SetConfig>
      break;
 80085be:	e003      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	73fb      	strb	r3, [r7, #15]
      break;
 80085c4:	e000      	b.n	80085c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80085c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
	...

080085e4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2b0c      	cmp	r3, #12
 80085f6:	d831      	bhi.n	800865c <HAL_TIM_ReadCapturedValue+0x78>
 80085f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008600 <HAL_TIM_ReadCapturedValue+0x1c>)
 80085fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fe:	bf00      	nop
 8008600:	08008635 	.word	0x08008635
 8008604:	0800865d 	.word	0x0800865d
 8008608:	0800865d 	.word	0x0800865d
 800860c:	0800865d 	.word	0x0800865d
 8008610:	0800863f 	.word	0x0800863f
 8008614:	0800865d 	.word	0x0800865d
 8008618:	0800865d 	.word	0x0800865d
 800861c:	0800865d 	.word	0x0800865d
 8008620:	08008649 	.word	0x08008649
 8008624:	0800865d 	.word	0x0800865d
 8008628:	0800865d 	.word	0x0800865d
 800862c:	0800865d 	.word	0x0800865d
 8008630:	08008653 	.word	0x08008653
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800863a:	60fb      	str	r3, [r7, #12]

      break;
 800863c:	e00f      	b.n	800865e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008644:	60fb      	str	r3, [r7, #12]

      break;
 8008646:	e00a      	b.n	800865e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800864e:	60fb      	str	r3, [r7, #12]

      break;
 8008650:	e005      	b.n	800865e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008658:	60fb      	str	r3, [r7, #12]

      break;
 800865a:	e000      	b.n	800865e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800865c:	bf00      	nop
  }

  return tmpreg;
 800865e:	68fb      	ldr	r3, [r7, #12]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a46      	ldr	r2, [pc, #280]	@ (80087d4 <TIM_Base_SetConfig+0x12c>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d013      	beq.n	80086e8 <TIM_Base_SetConfig+0x40>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086c6:	d00f      	beq.n	80086e8 <TIM_Base_SetConfig+0x40>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a43      	ldr	r2, [pc, #268]	@ (80087d8 <TIM_Base_SetConfig+0x130>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d00b      	beq.n	80086e8 <TIM_Base_SetConfig+0x40>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a42      	ldr	r2, [pc, #264]	@ (80087dc <TIM_Base_SetConfig+0x134>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d007      	beq.n	80086e8 <TIM_Base_SetConfig+0x40>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a41      	ldr	r2, [pc, #260]	@ (80087e0 <TIM_Base_SetConfig+0x138>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d003      	beq.n	80086e8 <TIM_Base_SetConfig+0x40>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a40      	ldr	r2, [pc, #256]	@ (80087e4 <TIM_Base_SetConfig+0x13c>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d108      	bne.n	80086fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a35      	ldr	r2, [pc, #212]	@ (80087d4 <TIM_Base_SetConfig+0x12c>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d02b      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008708:	d027      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a32      	ldr	r2, [pc, #200]	@ (80087d8 <TIM_Base_SetConfig+0x130>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d023      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a31      	ldr	r2, [pc, #196]	@ (80087dc <TIM_Base_SetConfig+0x134>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d01f      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a30      	ldr	r2, [pc, #192]	@ (80087e0 <TIM_Base_SetConfig+0x138>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d01b      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a2f      	ldr	r2, [pc, #188]	@ (80087e4 <TIM_Base_SetConfig+0x13c>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d017      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a2e      	ldr	r2, [pc, #184]	@ (80087e8 <TIM_Base_SetConfig+0x140>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d013      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a2d      	ldr	r2, [pc, #180]	@ (80087ec <TIM_Base_SetConfig+0x144>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d00f      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a2c      	ldr	r2, [pc, #176]	@ (80087f0 <TIM_Base_SetConfig+0x148>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d00b      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a2b      	ldr	r2, [pc, #172]	@ (80087f4 <TIM_Base_SetConfig+0x14c>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d007      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a2a      	ldr	r2, [pc, #168]	@ (80087f8 <TIM_Base_SetConfig+0x150>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d003      	beq.n	800875a <TIM_Base_SetConfig+0xb2>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a29      	ldr	r2, [pc, #164]	@ (80087fc <TIM_Base_SetConfig+0x154>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d108      	bne.n	800876c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	4313      	orrs	r3, r2
 800876a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	695b      	ldr	r3, [r3, #20]
 8008776:	4313      	orrs	r3, r2
 8008778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	689a      	ldr	r2, [r3, #8]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a10      	ldr	r2, [pc, #64]	@ (80087d4 <TIM_Base_SetConfig+0x12c>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d003      	beq.n	80087a0 <TIM_Base_SetConfig+0xf8>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a12      	ldr	r2, [pc, #72]	@ (80087e4 <TIM_Base_SetConfig+0x13c>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d103      	bne.n	80087a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	691a      	ldr	r2, [r3, #16]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d105      	bne.n	80087c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	f023 0201 	bic.w	r2, r3, #1
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	611a      	str	r2, [r3, #16]
  }
}
 80087c6:	bf00      	nop
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	40010000 	.word	0x40010000
 80087d8:	40000400 	.word	0x40000400
 80087dc:	40000800 	.word	0x40000800
 80087e0:	40000c00 	.word	0x40000c00
 80087e4:	40010400 	.word	0x40010400
 80087e8:	40014000 	.word	0x40014000
 80087ec:	40014400 	.word	0x40014400
 80087f0:	40014800 	.word	0x40014800
 80087f4:	40001800 	.word	0x40001800
 80087f8:	40001c00 	.word	0x40001c00
 80087fc:	40002000 	.word	0x40002000

08008800 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a1b      	ldr	r3, [r3, #32]
 8008814:	f023 0201 	bic.w	r2, r3, #1
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800882e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f023 0303 	bic.w	r3, r3, #3
 8008836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68fa      	ldr	r2, [r7, #12]
 800883e:	4313      	orrs	r3, r2
 8008840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f023 0302 	bic.w	r3, r3, #2
 8008848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	4313      	orrs	r3, r2
 8008852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a20      	ldr	r2, [pc, #128]	@ (80088d8 <TIM_OC1_SetConfig+0xd8>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d003      	beq.n	8008864 <TIM_OC1_SetConfig+0x64>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a1f      	ldr	r2, [pc, #124]	@ (80088dc <TIM_OC1_SetConfig+0xdc>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d10c      	bne.n	800887e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	f023 0308 	bic.w	r3, r3, #8
 800886a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	697a      	ldr	r2, [r7, #20]
 8008872:	4313      	orrs	r3, r2
 8008874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f023 0304 	bic.w	r3, r3, #4
 800887c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a15      	ldr	r2, [pc, #84]	@ (80088d8 <TIM_OC1_SetConfig+0xd8>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d003      	beq.n	800888e <TIM_OC1_SetConfig+0x8e>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4a14      	ldr	r2, [pc, #80]	@ (80088dc <TIM_OC1_SetConfig+0xdc>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d111      	bne.n	80088b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800889c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	693a      	ldr	r2, [r7, #16]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	693a      	ldr	r2, [r7, #16]
 80088b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	685a      	ldr	r2, [r3, #4]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	697a      	ldr	r2, [r7, #20]
 80088ca:	621a      	str	r2, [r3, #32]
}
 80088cc:	bf00      	nop
 80088ce:	371c      	adds	r7, #28
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	40010000 	.word	0x40010000
 80088dc:	40010400 	.word	0x40010400

080088e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b087      	sub	sp, #28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a1b      	ldr	r3, [r3, #32]
 80088f4:	f023 0210 	bic.w	r2, r3, #16
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	699b      	ldr	r3, [r3, #24]
 8008906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800890e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	021b      	lsls	r3, r3, #8
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	4313      	orrs	r3, r2
 8008922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	f023 0320 	bic.w	r3, r3, #32
 800892a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	011b      	lsls	r3, r3, #4
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	4313      	orrs	r3, r2
 8008936:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a22      	ldr	r2, [pc, #136]	@ (80089c4 <TIM_OC2_SetConfig+0xe4>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d003      	beq.n	8008948 <TIM_OC2_SetConfig+0x68>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a21      	ldr	r2, [pc, #132]	@ (80089c8 <TIM_OC2_SetConfig+0xe8>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d10d      	bne.n	8008964 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800894e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	011b      	lsls	r3, r3, #4
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	4313      	orrs	r3, r2
 800895a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008962:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a17      	ldr	r2, [pc, #92]	@ (80089c4 <TIM_OC2_SetConfig+0xe4>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d003      	beq.n	8008974 <TIM_OC2_SetConfig+0x94>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4a16      	ldr	r2, [pc, #88]	@ (80089c8 <TIM_OC2_SetConfig+0xe8>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d113      	bne.n	800899c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800897a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008982:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	693a      	ldr	r2, [r7, #16]
 800898c:	4313      	orrs	r3, r2
 800898e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	4313      	orrs	r3, r2
 800899a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	621a      	str	r2, [r3, #32]
}
 80089b6:	bf00      	nop
 80089b8:	371c      	adds	r7, #28
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	40010000 	.word	0x40010000
 80089c8:	40010400 	.word	0x40010400

080089cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a1b      	ldr	r3, [r3, #32]
 80089e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	69db      	ldr	r3, [r3, #28]
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f023 0303 	bic.w	r3, r3, #3
 8008a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	021b      	lsls	r3, r3, #8
 8008a1c:	697a      	ldr	r2, [r7, #20]
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a21      	ldr	r2, [pc, #132]	@ (8008aac <TIM_OC3_SetConfig+0xe0>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d003      	beq.n	8008a32 <TIM_OC3_SetConfig+0x66>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a20      	ldr	r2, [pc, #128]	@ (8008ab0 <TIM_OC3_SetConfig+0xe4>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d10d      	bne.n	8008a4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	021b      	lsls	r3, r3, #8
 8008a40:	697a      	ldr	r2, [r7, #20]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a16      	ldr	r2, [pc, #88]	@ (8008aac <TIM_OC3_SetConfig+0xe0>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d003      	beq.n	8008a5e <TIM_OC3_SetConfig+0x92>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a15      	ldr	r2, [pc, #84]	@ (8008ab0 <TIM_OC3_SetConfig+0xe4>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d113      	bne.n	8008a86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	011b      	lsls	r3, r3, #4
 8008a74:	693a      	ldr	r2, [r7, #16]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	011b      	lsls	r3, r3, #4
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	621a      	str	r2, [r3, #32]
}
 8008aa0:	bf00      	nop
 8008aa2:	371c      	adds	r7, #28
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	40010000 	.word	0x40010000
 8008ab0:	40010400 	.word	0x40010400

08008ab4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a1b      	ldr	r3, [r3, #32]
 8008ac2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	021b      	lsls	r3, r3, #8
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	031b      	lsls	r3, r3, #12
 8008b06:	693a      	ldr	r2, [r7, #16]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a12      	ldr	r2, [pc, #72]	@ (8008b58 <TIM_OC4_SetConfig+0xa4>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d003      	beq.n	8008b1c <TIM_OC4_SetConfig+0x68>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a11      	ldr	r2, [pc, #68]	@ (8008b5c <TIM_OC4_SetConfig+0xa8>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d109      	bne.n	8008b30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	019b      	lsls	r3, r3, #6
 8008b2a:	697a      	ldr	r2, [r7, #20]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685a      	ldr	r2, [r3, #4]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	693a      	ldr	r2, [r7, #16]
 8008b48:	621a      	str	r2, [r3, #32]
}
 8008b4a:	bf00      	nop
 8008b4c:	371c      	adds	r7, #28
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr
 8008b56:	bf00      	nop
 8008b58:	40010000 	.word	0x40010000
 8008b5c:	40010400 	.word	0x40010400

08008b60 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b087      	sub	sp, #28
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
 8008b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	f023 0201 	bic.w	r2, r3, #1
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	4a28      	ldr	r2, [pc, #160]	@ (8008c2c <TIM_TI1_SetConfig+0xcc>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d01b      	beq.n	8008bc6 <TIM_TI1_SetConfig+0x66>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b94:	d017      	beq.n	8008bc6 <TIM_TI1_SetConfig+0x66>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	4a25      	ldr	r2, [pc, #148]	@ (8008c30 <TIM_TI1_SetConfig+0xd0>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d013      	beq.n	8008bc6 <TIM_TI1_SetConfig+0x66>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	4a24      	ldr	r2, [pc, #144]	@ (8008c34 <TIM_TI1_SetConfig+0xd4>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00f      	beq.n	8008bc6 <TIM_TI1_SetConfig+0x66>
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	4a23      	ldr	r2, [pc, #140]	@ (8008c38 <TIM_TI1_SetConfig+0xd8>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d00b      	beq.n	8008bc6 <TIM_TI1_SetConfig+0x66>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4a22      	ldr	r2, [pc, #136]	@ (8008c3c <TIM_TI1_SetConfig+0xdc>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d007      	beq.n	8008bc6 <TIM_TI1_SetConfig+0x66>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	4a21      	ldr	r2, [pc, #132]	@ (8008c40 <TIM_TI1_SetConfig+0xe0>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d003      	beq.n	8008bc6 <TIM_TI1_SetConfig+0x66>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	4a20      	ldr	r2, [pc, #128]	@ (8008c44 <TIM_TI1_SetConfig+0xe4>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d101      	bne.n	8008bca <TIM_TI1_SetConfig+0x6a>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e000      	b.n	8008bcc <TIM_TI1_SetConfig+0x6c>
 8008bca:	2300      	movs	r3, #0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d008      	beq.n	8008be2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	f023 0303 	bic.w	r3, r3, #3
 8008bd6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008bd8:	697a      	ldr	r2, [r7, #20]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	617b      	str	r3, [r7, #20]
 8008be0:	e003      	b.n	8008bea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	f043 0301 	orr.w	r3, r3, #1
 8008be8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008bf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	011b      	lsls	r3, r3, #4
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	f023 030a 	bic.w	r3, r3, #10
 8008c04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	f003 030a 	and.w	r3, r3, #10
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	697a      	ldr	r2, [r7, #20]
 8008c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	621a      	str	r2, [r3, #32]
}
 8008c1e:	bf00      	nop
 8008c20:	371c      	adds	r7, #28
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	40010000 	.word	0x40010000
 8008c30:	40000400 	.word	0x40000400
 8008c34:	40000800 	.word	0x40000800
 8008c38:	40000c00 	.word	0x40000c00
 8008c3c:	40010400 	.word	0x40010400
 8008c40:	40014000 	.word	0x40014000
 8008c44:	40001800 	.word	0x40001800

08008c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	f023 0201 	bic.w	r2, r3, #1
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	011b      	lsls	r3, r3, #4
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f023 030a 	bic.w	r3, r3, #10
 8008c84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	621a      	str	r2, [r3, #32]
}
 8008c9a:	bf00      	nop
 8008c9c:	371c      	adds	r7, #28
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b087      	sub	sp, #28
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	60f8      	str	r0, [r7, #12]
 8008cae:	60b9      	str	r1, [r7, #8]
 8008cb0:	607a      	str	r2, [r7, #4]
 8008cb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6a1b      	ldr	r3, [r3, #32]
 8008cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	f023 0210 	bic.w	r2, r3, #16
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	021b      	lsls	r3, r3, #8
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ce4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	031b      	lsls	r3, r3, #12
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	011b      	lsls	r3, r3, #4
 8008cfe:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	621a      	str	r2, [r3, #32]
}
 8008d14:	bf00      	nop
 8008d16:	371c      	adds	r7, #28
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b087      	sub	sp, #28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6a1b      	ldr	r3, [r3, #32]
 8008d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	f023 0210 	bic.w	r2, r3, #16
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	699b      	ldr	r3, [r3, #24]
 8008d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	031b      	lsls	r3, r3, #12
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	011b      	lsls	r3, r3, #4
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	621a      	str	r2, [r3, #32]
}
 8008d74:	bf00      	nop
 8008d76:	371c      	adds	r7, #28
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b087      	sub	sp, #28
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
 8008d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	69db      	ldr	r3, [r3, #28]
 8008da4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	f023 0303 	bic.w	r3, r3, #3
 8008dac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008dbc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	011b      	lsls	r3, r3, #4
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	021b      	lsls	r3, r3, #8
 8008dd6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	693a      	ldr	r2, [r7, #16]
 8008de4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	621a      	str	r2, [r3, #32]
}
 8008dec:	bf00      	nop
 8008dee:	371c      	adds	r7, #28
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b087      	sub	sp, #28
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
 8008e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6a1b      	ldr	r3, [r3, #32]
 8008e10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	69db      	ldr	r3, [r3, #28]
 8008e1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e24:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	021b      	lsls	r3, r3, #8
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e36:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	031b      	lsls	r3, r3, #12
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	693a      	ldr	r2, [r7, #16]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008e4a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	031b      	lsls	r3, r3, #12
 8008e50:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008e54:	697a      	ldr	r2, [r7, #20]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	621a      	str	r2, [r3, #32]
}
 8008e66:	bf00      	nop
 8008e68:	371c      	adds	r7, #28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b085      	sub	sp, #20
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	f043 0307 	orr.w	r3, r3, #7
 8008e94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	609a      	str	r2, [r3, #8]
}
 8008e9c:	bf00      	nop
 8008e9e:	3714      	adds	r7, #20
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b087      	sub	sp, #28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
 8008eb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ec2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	021a      	lsls	r2, r3, #8
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	431a      	orrs	r2, r3
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	697a      	ldr	r2, [r7, #20]
 8008ed2:	4313      	orrs	r3, r2
 8008ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	609a      	str	r2, [r3, #8]
}
 8008edc:	bf00      	nop
 8008ede:	371c      	adds	r7, #28
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b087      	sub	sp, #28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	f003 031f 	and.w	r3, r3, #31
 8008efa:	2201      	movs	r2, #1
 8008efc:	fa02 f303 	lsl.w	r3, r2, r3
 8008f00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6a1a      	ldr	r2, [r3, #32]
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	43db      	mvns	r3, r3
 8008f0a:	401a      	ands	r2, r3
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6a1a      	ldr	r2, [r3, #32]
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f003 031f 	and.w	r3, r3, #31
 8008f1a:	6879      	ldr	r1, [r7, #4]
 8008f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008f20:	431a      	orrs	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	621a      	str	r2, [r3, #32]
}
 8008f26:	bf00      	nop
 8008f28:	371c      	adds	r7, #28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
	...

08008f34 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d109      	bne.n	8008f58 <HAL_TIMEx_PWMN_Start+0x24>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	bf14      	ite	ne
 8008f50:	2301      	movne	r3, #1
 8008f52:	2300      	moveq	r3, #0
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	e022      	b.n	8008f9e <HAL_TIMEx_PWMN_Start+0x6a>
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	2b04      	cmp	r3, #4
 8008f5c:	d109      	bne.n	8008f72 <HAL_TIMEx_PWMN_Start+0x3e>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	bf14      	ite	ne
 8008f6a:	2301      	movne	r3, #1
 8008f6c:	2300      	moveq	r3, #0
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	e015      	b.n	8008f9e <HAL_TIMEx_PWMN_Start+0x6a>
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2b08      	cmp	r3, #8
 8008f76:	d109      	bne.n	8008f8c <HAL_TIMEx_PWMN_Start+0x58>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	bf14      	ite	ne
 8008f84:	2301      	movne	r3, #1
 8008f86:	2300      	moveq	r3, #0
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	e008      	b.n	8008f9e <HAL_TIMEx_PWMN_Start+0x6a>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	bf14      	ite	ne
 8008f98:	2301      	movne	r3, #1
 8008f9a:	2300      	moveq	r3, #0
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e06d      	b.n	8009082 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <HAL_TIMEx_PWMN_Start+0x82>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008fb4:	e013      	b.n	8008fde <HAL_TIMEx_PWMN_Start+0xaa>
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	d104      	bne.n	8008fc6 <HAL_TIMEx_PWMN_Start+0x92>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008fc4:	e00b      	b.n	8008fde <HAL_TIMEx_PWMN_Start+0xaa>
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b08      	cmp	r3, #8
 8008fca:	d104      	bne.n	8008fd6 <HAL_TIMEx_PWMN_Start+0xa2>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fd4:	e003      	b.n	8008fde <HAL_TIMEx_PWMN_Start+0xaa>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2202      	movs	r2, #2
 8008fda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2204      	movs	r2, #4
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 f940 	bl	800926c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ffa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a22      	ldr	r2, [pc, #136]	@ (800908c <HAL_TIMEx_PWMN_Start+0x158>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d022      	beq.n	800904c <HAL_TIMEx_PWMN_Start+0x118>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800900e:	d01d      	beq.n	800904c <HAL_TIMEx_PWMN_Start+0x118>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a1e      	ldr	r2, [pc, #120]	@ (8009090 <HAL_TIMEx_PWMN_Start+0x15c>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d018      	beq.n	800904c <HAL_TIMEx_PWMN_Start+0x118>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a1d      	ldr	r2, [pc, #116]	@ (8009094 <HAL_TIMEx_PWMN_Start+0x160>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d013      	beq.n	800904c <HAL_TIMEx_PWMN_Start+0x118>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a1b      	ldr	r2, [pc, #108]	@ (8009098 <HAL_TIMEx_PWMN_Start+0x164>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d00e      	beq.n	800904c <HAL_TIMEx_PWMN_Start+0x118>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a1a      	ldr	r2, [pc, #104]	@ (800909c <HAL_TIMEx_PWMN_Start+0x168>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d009      	beq.n	800904c <HAL_TIMEx_PWMN_Start+0x118>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a18      	ldr	r2, [pc, #96]	@ (80090a0 <HAL_TIMEx_PWMN_Start+0x16c>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d004      	beq.n	800904c <HAL_TIMEx_PWMN_Start+0x118>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a17      	ldr	r2, [pc, #92]	@ (80090a4 <HAL_TIMEx_PWMN_Start+0x170>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d111      	bne.n	8009070 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f003 0307 	and.w	r3, r3, #7
 8009056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2b06      	cmp	r3, #6
 800905c:	d010      	beq.n	8009080 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f042 0201 	orr.w	r2, r2, #1
 800906c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800906e:	e007      	b.n	8009080 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f042 0201 	orr.w	r2, r2, #1
 800907e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	40010000 	.word	0x40010000
 8009090:	40000400 	.word	0x40000400
 8009094:	40000800 	.word	0x40000800
 8009098:	40000c00 	.word	0x40000c00
 800909c:	40010400 	.word	0x40010400
 80090a0:	40014000 	.word	0x40014000
 80090a4:	40001800 	.word	0x40001800

080090a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d101      	bne.n	80090c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090bc:	2302      	movs	r3, #2
 80090be:	e05a      	b.n	8009176 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a21      	ldr	r2, [pc, #132]	@ (8009184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d022      	beq.n	800914a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800910c:	d01d      	beq.n	800914a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a1d      	ldr	r2, [pc, #116]	@ (8009188 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d018      	beq.n	800914a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a1b      	ldr	r2, [pc, #108]	@ (800918c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d013      	beq.n	800914a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a1a      	ldr	r2, [pc, #104]	@ (8009190 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d00e      	beq.n	800914a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a18      	ldr	r2, [pc, #96]	@ (8009194 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d009      	beq.n	800914a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a17      	ldr	r2, [pc, #92]	@ (8009198 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d004      	beq.n	800914a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a15      	ldr	r2, [pc, #84]	@ (800919c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d10c      	bne.n	8009164 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	4313      	orrs	r3, r2
 800915a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3714      	adds	r7, #20
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	40010000 	.word	0x40010000
 8009188:	40000400 	.word	0x40000400
 800918c:	40000800 	.word	0x40000800
 8009190:	40000c00 	.word	0x40000c00
 8009194:	40010400 	.word	0x40010400
 8009198:	40014000 	.word	0x40014000
 800919c:	40001800 	.word	0x40001800

080091a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80091aa:	2300      	movs	r3, #0
 80091ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d101      	bne.n	80091bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80091b8:	2302      	movs	r3, #2
 80091ba:	e03d      	b.n	8009238 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	4313      	orrs	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	4313      	orrs	r3, r2
 80091de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	4313      	orrs	r3, r2
 8009208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	695b      	ldr	r3, [r3, #20]
 8009214:	4313      	orrs	r3, r2
 8009216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	4313      	orrs	r3, r2
 8009224:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800926c:	b480      	push	{r7}
 800926e:	b087      	sub	sp, #28
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	f003 030f 	and.w	r3, r3, #15
 800927e:	2204      	movs	r2, #4
 8009280:	fa02 f303 	lsl.w	r3, r2, r3
 8009284:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6a1a      	ldr	r2, [r3, #32]
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	43db      	mvns	r3, r3
 800928e:	401a      	ands	r2, r3
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6a1a      	ldr	r2, [r3, #32]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	f003 030f 	and.w	r3, r3, #15
 800929e:	6879      	ldr	r1, [r7, #4]
 80092a0:	fa01 f303 	lsl.w	r3, r1, r3
 80092a4:	431a      	orrs	r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	621a      	str	r2, [r3, #32]
}
 80092aa:	bf00      	nop
 80092ac:	371c      	adds	r7, #28
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b082      	sub	sp, #8
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	e042      	b.n	800934e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092ce:	b2db      	uxtb	r3, r3
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d106      	bne.n	80092e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7fa fb49 	bl	8003974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2224      	movs	r2, #36	@ 0x24
 80092e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68da      	ldr	r2, [r3, #12]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 ffca 	bl	800a294 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	691a      	ldr	r2, [r3, #16]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800930e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	695a      	ldr	r2, [r3, #20]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800931e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68da      	ldr	r2, [r3, #12]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800932e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2220      	movs	r2, #32
 800933a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2220      	movs	r2, #32
 8009342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
	...

08009358 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08c      	sub	sp, #48	@ 0x30
 800935c:	af00      	add	r7, sp, #0
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	60b9      	str	r1, [r7, #8]
 8009362:	4613      	mov	r3, r2
 8009364:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b20      	cmp	r3, #32
 8009370:	d156      	bne.n	8009420 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <HAL_UART_Transmit_DMA+0x26>
 8009378:	88fb      	ldrh	r3, [r7, #6]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e04f      	b.n	8009422 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	88fa      	ldrh	r2, [r7, #6]
 800938c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	88fa      	ldrh	r2, [r7, #6]
 8009392:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2221      	movs	r2, #33	@ 0x21
 800939e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a6:	4a21      	ldr	r2, [pc, #132]	@ (800942c <HAL_UART_Transmit_DMA+0xd4>)
 80093a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093ae:	4a20      	ldr	r2, [pc, #128]	@ (8009430 <HAL_UART_Transmit_DMA+0xd8>)
 80093b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093b6:	4a1f      	ldr	r2, [pc, #124]	@ (8009434 <HAL_UART_Transmit_DMA+0xdc>)
 80093b8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093be:	2200      	movs	r2, #0
 80093c0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80093c2:	f107 0308 	add.w	r3, r7, #8
 80093c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80093cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ce:	6819      	ldr	r1, [r3, #0]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3304      	adds	r3, #4
 80093d6:	461a      	mov	r2, r3
 80093d8:	88fb      	ldrh	r3, [r7, #6]
 80093da:	f7fb fb43 	bl	8004a64 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80093e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3314      	adds	r3, #20
 80093ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	e853 3f00 	ldrex	r3, [r3]
 80093f6:	617b      	str	r3, [r7, #20]
   return(result);
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	3314      	adds	r3, #20
 8009406:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009408:	627a      	str	r2, [r7, #36]	@ 0x24
 800940a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940c:	6a39      	ldr	r1, [r7, #32]
 800940e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009410:	e841 2300 	strex	r3, r2, [r1]
 8009414:	61fb      	str	r3, [r7, #28]
   return(result);
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1e5      	bne.n	80093e8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	e000      	b.n	8009422 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8009420:	2302      	movs	r3, #2
  }
}
 8009422:	4618      	mov	r0, r3
 8009424:	3730      	adds	r7, #48	@ 0x30
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	08009b21 	.word	0x08009b21
 8009430:	08009bbb 	.word	0x08009bbb
 8009434:	08009d3f 	.word	0x08009d3f

08009438 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	4613      	mov	r3, r2
 8009444:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b20      	cmp	r3, #32
 8009450:	d112      	bne.n	8009478 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d002      	beq.n	800945e <HAL_UART_Receive_DMA+0x26>
 8009458:	88fb      	ldrh	r3, [r7, #6]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d101      	bne.n	8009462 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e00b      	b.n	800947a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2200      	movs	r2, #0
 8009466:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009468:	88fb      	ldrh	r3, [r7, #6]
 800946a:	461a      	mov	r2, r3
 800946c:	68b9      	ldr	r1, [r7, #8]
 800946e:	68f8      	ldr	r0, [r7, #12]
 8009470:	f000 fcb0 	bl	8009dd4 <UART_Start_Receive_DMA>
 8009474:	4603      	mov	r3, r0
 8009476:	e000      	b.n	800947a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009478:	2302      	movs	r3, #2
  }
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b090      	sub	sp, #64	@ 0x40
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800948a:	2300      	movs	r3, #0
 800948c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	695b      	ldr	r3, [r3, #20]
 8009494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009498:	2b80      	cmp	r3, #128	@ 0x80
 800949a:	bf0c      	ite	eq
 800949c:	2301      	moveq	r3, #1
 800949e:	2300      	movne	r3, #0
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	2b21      	cmp	r3, #33	@ 0x21
 80094ae:	d128      	bne.n	8009502 <HAL_UART_DMAStop+0x80>
 80094b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d025      	beq.n	8009502 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	3314      	adds	r3, #20
 80094bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c0:	e853 3f00 	ldrex	r3, [r3]
 80094c4:	623b      	str	r3, [r7, #32]
   return(result);
 80094c6:	6a3b      	ldr	r3, [r7, #32]
 80094c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3314      	adds	r3, #20
 80094d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80094d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1e5      	bne.n	80094b6 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d004      	beq.n	80094fc <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fb fb0c 	bl	8004b14 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fd03 	bl	8009f08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	695b      	ldr	r3, [r3, #20]
 8009508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800950c:	2b40      	cmp	r3, #64	@ 0x40
 800950e:	bf0c      	ite	eq
 8009510:	2301      	moveq	r3, #1
 8009512:	2300      	movne	r3, #0
 8009514:	b2db      	uxtb	r3, r3
 8009516:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800951e:	b2db      	uxtb	r3, r3
 8009520:	2b22      	cmp	r3, #34	@ 0x22
 8009522:	d128      	bne.n	8009576 <HAL_UART_DMAStop+0xf4>
 8009524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d025      	beq.n	8009576 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	3314      	adds	r3, #20
 8009530:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	e853 3f00 	ldrex	r3, [r3]
 8009538:	60fb      	str	r3, [r7, #12]
   return(result);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009540:	637b      	str	r3, [r7, #52]	@ 0x34
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	3314      	adds	r3, #20
 8009548:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800954a:	61fa      	str	r2, [r7, #28]
 800954c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954e:	69b9      	ldr	r1, [r7, #24]
 8009550:	69fa      	ldr	r2, [r7, #28]
 8009552:	e841 2300 	strex	r3, r2, [r1]
 8009556:	617b      	str	r3, [r7, #20]
   return(result);
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1e5      	bne.n	800952a <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009562:	2b00      	cmp	r3, #0
 8009564:	d004      	beq.n	8009570 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800956a:	4618      	mov	r0, r3
 800956c:	f7fb fad2 	bl	8004b14 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 fcf1 	bl	8009f58 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3740      	adds	r7, #64	@ 0x40
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b0ba      	sub	sp, #232	@ 0xe8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80095a6:	2300      	movs	r3, #0
 80095a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80095ac:	2300      	movs	r3, #0
 80095ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80095b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095b6:	f003 030f 	and.w	r3, r3, #15
 80095ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80095be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d10f      	bne.n	80095e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095ca:	f003 0320 	and.w	r3, r3, #32
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d009      	beq.n	80095e6 <HAL_UART_IRQHandler+0x66>
 80095d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095d6:	f003 0320 	and.w	r3, r3, #32
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d003      	beq.n	80095e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fd99 	bl	800a116 <UART_Receive_IT>
      return;
 80095e4:	e25b      	b.n	8009a9e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80095e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	f000 80de 	beq.w	80097ac <HAL_UART_IRQHandler+0x22c>
 80095f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d106      	bne.n	800960a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80095fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009600:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009604:	2b00      	cmp	r3, #0
 8009606:	f000 80d1 	beq.w	80097ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800960a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00b      	beq.n	800962e <HAL_UART_IRQHandler+0xae>
 8009616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800961a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800961e:	2b00      	cmp	r3, #0
 8009620:	d005      	beq.n	800962e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009626:	f043 0201 	orr.w	r2, r3, #1
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800962e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009632:	f003 0304 	and.w	r3, r3, #4
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00b      	beq.n	8009652 <HAL_UART_IRQHandler+0xd2>
 800963a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	2b00      	cmp	r3, #0
 8009644:	d005      	beq.n	8009652 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800964a:	f043 0202 	orr.w	r2, r3, #2
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009656:	f003 0302 	and.w	r3, r3, #2
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00b      	beq.n	8009676 <HAL_UART_IRQHandler+0xf6>
 800965e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	d005      	beq.n	8009676 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800966e:	f043 0204 	orr.w	r2, r3, #4
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800967a:	f003 0308 	and.w	r3, r3, #8
 800967e:	2b00      	cmp	r3, #0
 8009680:	d011      	beq.n	80096a6 <HAL_UART_IRQHandler+0x126>
 8009682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009686:	f003 0320 	and.w	r3, r3, #32
 800968a:	2b00      	cmp	r3, #0
 800968c:	d105      	bne.n	800969a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800968e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009692:	f003 0301 	and.w	r3, r3, #1
 8009696:	2b00      	cmp	r3, #0
 8009698:	d005      	beq.n	80096a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800969e:	f043 0208 	orr.w	r2, r3, #8
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 81f2 	beq.w	8009a94 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80096b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096b4:	f003 0320 	and.w	r3, r3, #32
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d008      	beq.n	80096ce <HAL_UART_IRQHandler+0x14e>
 80096bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096c0:	f003 0320 	and.w	r3, r3, #32
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d002      	beq.n	80096ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fd24 	bl	800a116 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096d8:	2b40      	cmp	r3, #64	@ 0x40
 80096da:	bf0c      	ite	eq
 80096dc:	2301      	moveq	r3, #1
 80096de:	2300      	movne	r3, #0
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096ea:	f003 0308 	and.w	r3, r3, #8
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d103      	bne.n	80096fa <HAL_UART_IRQHandler+0x17a>
 80096f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d04f      	beq.n	800979a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fc2c 	bl	8009f58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800970a:	2b40      	cmp	r3, #64	@ 0x40
 800970c:	d141      	bne.n	8009792 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	3314      	adds	r3, #20
 8009714:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009718:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800971c:	e853 3f00 	ldrex	r3, [r3]
 8009720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009724:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009728:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800972c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	3314      	adds	r3, #20
 8009736:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800973a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800973e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009742:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009746:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800974a:	e841 2300 	strex	r3, r2, [r1]
 800974e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1d9      	bne.n	800970e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800975e:	2b00      	cmp	r3, #0
 8009760:	d013      	beq.n	800978a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009766:	4a7e      	ldr	r2, [pc, #504]	@ (8009960 <HAL_UART_IRQHandler+0x3e0>)
 8009768:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800976e:	4618      	mov	r0, r3
 8009770:	f7fb fa40 	bl	8004bf4 <HAL_DMA_Abort_IT>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d016      	beq.n	80097a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800977e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009784:	4610      	mov	r0, r2
 8009786:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009788:	e00e      	b.n	80097a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f000 f9b2 	bl	8009af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009790:	e00a      	b.n	80097a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f9ae 	bl	8009af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009798:	e006      	b.n	80097a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f9aa 	bl	8009af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80097a6:	e175      	b.n	8009a94 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a8:	bf00      	nop
    return;
 80097aa:	e173      	b.n	8009a94 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	f040 814f 	bne.w	8009a54 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80097b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097ba:	f003 0310 	and.w	r3, r3, #16
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f000 8148 	beq.w	8009a54 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80097c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097c8:	f003 0310 	and.w	r3, r3, #16
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 8141 	beq.w	8009a54 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097d2:	2300      	movs	r3, #0
 80097d4:	60bb      	str	r3, [r7, #8]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	60bb      	str	r3, [r7, #8]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	60bb      	str	r3, [r7, #8]
 80097e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	695b      	ldr	r3, [r3, #20]
 80097ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097f2:	2b40      	cmp	r3, #64	@ 0x40
 80097f4:	f040 80b6 	bne.w	8009964 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009804:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009808:	2b00      	cmp	r3, #0
 800980a:	f000 8145 	beq.w	8009a98 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009812:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009816:	429a      	cmp	r2, r3
 8009818:	f080 813e 	bcs.w	8009a98 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009822:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009828:	69db      	ldr	r3, [r3, #28]
 800982a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800982e:	f000 8088 	beq.w	8009942 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	330c      	adds	r3, #12
 8009838:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009840:	e853 3f00 	ldrex	r3, [r3]
 8009844:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009848:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800984c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009850:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	330c      	adds	r3, #12
 800985a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800985e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009862:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009866:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800986a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009876:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1d9      	bne.n	8009832 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	3314      	adds	r3, #20
 8009884:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009886:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009888:	e853 3f00 	ldrex	r3, [r3]
 800988c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800988e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009890:	f023 0301 	bic.w	r3, r3, #1
 8009894:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	3314      	adds	r3, #20
 800989e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80098a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80098a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80098aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80098ae:	e841 2300 	strex	r3, r2, [r1]
 80098b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80098b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d1e1      	bne.n	800987e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	3314      	adds	r3, #20
 80098c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098c4:	e853 3f00 	ldrex	r3, [r3]
 80098c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80098ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80098cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3314      	adds	r3, #20
 80098da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80098de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80098e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80098e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80098e6:	e841 2300 	strex	r3, r2, [r1]
 80098ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80098ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1e3      	bne.n	80098ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2220      	movs	r2, #32
 80098f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	330c      	adds	r3, #12
 8009906:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800990a:	e853 3f00 	ldrex	r3, [r3]
 800990e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009912:	f023 0310 	bic.w	r3, r3, #16
 8009916:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	330c      	adds	r3, #12
 8009920:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009924:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009926:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009928:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800992a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800992c:	e841 2300 	strex	r3, r2, [r1]
 8009930:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009932:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1e3      	bne.n	8009900 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800993c:	4618      	mov	r0, r3
 800993e:	f7fb f8e9 	bl	8004b14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2202      	movs	r2, #2
 8009946:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009950:	b29b      	uxth	r3, r3
 8009952:	1ad3      	subs	r3, r2, r3
 8009954:	b29b      	uxth	r3, r3
 8009956:	4619      	mov	r1, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f8d5 	bl	8009b08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800995e:	e09b      	b.n	8009a98 <HAL_UART_IRQHandler+0x518>
 8009960:	0800a01f 	.word	0x0800a01f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800996c:	b29b      	uxth	r3, r3
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009978:	b29b      	uxth	r3, r3
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 808e 	beq.w	8009a9c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009980:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009984:	2b00      	cmp	r3, #0
 8009986:	f000 8089 	beq.w	8009a9c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	330c      	adds	r3, #12
 8009990:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009994:	e853 3f00 	ldrex	r3, [r3]
 8009998:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800999a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800999c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80099a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	330c      	adds	r3, #12
 80099aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80099ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80099b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099b6:	e841 2300 	strex	r3, r2, [r1]
 80099ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80099bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1e3      	bne.n	800998a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	3314      	adds	r3, #20
 80099c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099cc:	e853 3f00 	ldrex	r3, [r3]
 80099d0:	623b      	str	r3, [r7, #32]
   return(result);
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	f023 0301 	bic.w	r3, r3, #1
 80099d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3314      	adds	r3, #20
 80099e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80099e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80099e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099ee:	e841 2300 	strex	r3, r2, [r1]
 80099f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d1e3      	bne.n	80099c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2220      	movs	r2, #32
 80099fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	330c      	adds	r3, #12
 8009a0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	e853 3f00 	ldrex	r3, [r3]
 8009a16:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f023 0310 	bic.w	r3, r3, #16
 8009a1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	330c      	adds	r3, #12
 8009a28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009a2c:	61fa      	str	r2, [r7, #28]
 8009a2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a30:	69b9      	ldr	r1, [r7, #24]
 8009a32:	69fa      	ldr	r2, [r7, #28]
 8009a34:	e841 2300 	strex	r3, r2, [r1]
 8009a38:	617b      	str	r3, [r7, #20]
   return(result);
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1e3      	bne.n	8009a08 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2202      	movs	r2, #2
 8009a44:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 f85b 	bl	8009b08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a52:	e023      	b.n	8009a9c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d009      	beq.n	8009a74 <HAL_UART_IRQHandler+0x4f4>
 8009a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d003      	beq.n	8009a74 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 faea 	bl	800a046 <UART_Transmit_IT>
    return;
 8009a72:	e014      	b.n	8009a9e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00e      	beq.n	8009a9e <HAL_UART_IRQHandler+0x51e>
 8009a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d008      	beq.n	8009a9e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fb2a 	bl	800a0e6 <UART_EndTransmit_IT>
    return;
 8009a92:	e004      	b.n	8009a9e <HAL_UART_IRQHandler+0x51e>
    return;
 8009a94:	bf00      	nop
 8009a96:	e002      	b.n	8009a9e <HAL_UART_IRQHandler+0x51e>
      return;
 8009a98:	bf00      	nop
 8009a9a:	e000      	b.n	8009a9e <HAL_UART_IRQHandler+0x51e>
      return;
 8009a9c:	bf00      	nop
  }
}
 8009a9e:	37e8      	adds	r7, #232	@ 0xe8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009ad4:	bf00      	nop
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b090      	sub	sp, #64	@ 0x40
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d137      	bne.n	8009bac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b3e:	2200      	movs	r2, #0
 8009b40:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3314      	adds	r3, #20
 8009b48:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b4c:	e853 3f00 	ldrex	r3, [r3]
 8009b50:	623b      	str	r3, [r7, #32]
   return(result);
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	3314      	adds	r3, #20
 8009b60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b62:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b6a:	e841 2300 	strex	r3, r2, [r1]
 8009b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1e5      	bne.n	8009b42 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	330c      	adds	r3, #12
 8009b7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	e853 3f00 	ldrex	r3, [r3]
 8009b84:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	330c      	adds	r3, #12
 8009b94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009b96:	61fa      	str	r2, [r7, #28]
 8009b98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9a:	69b9      	ldr	r1, [r7, #24]
 8009b9c:	69fa      	ldr	r2, [r7, #28]
 8009b9e:	e841 2300 	strex	r3, r2, [r1]
 8009ba2:	617b      	str	r3, [r7, #20]
   return(result);
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1e5      	bne.n	8009b76 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009baa:	e002      	b.n	8009bb2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009bac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009bae:	f7ff ff79 	bl	8009aa4 <HAL_UART_TxCpltCallback>
}
 8009bb2:	bf00      	nop
 8009bb4:	3740      	adds	r7, #64	@ 0x40
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b084      	sub	sp, #16
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f7ff ff75 	bl	8009ab8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bce:	bf00      	nop
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b09c      	sub	sp, #112	@ 0x70
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009be2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d172      	bne.n	8009cd8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009bf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	330c      	adds	r3, #12
 8009bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c02:	e853 3f00 	ldrex	r3, [r3]
 8009c06:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	330c      	adds	r3, #12
 8009c16:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009c18:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009c1a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c1e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c20:	e841 2300 	strex	r3, r2, [r1]
 8009c24:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d1e5      	bne.n	8009bf8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3314      	adds	r3, #20
 8009c32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c36:	e853 3f00 	ldrex	r3, [r3]
 8009c3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c3e:	f023 0301 	bic.w	r3, r3, #1
 8009c42:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	3314      	adds	r3, #20
 8009c4a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009c4c:	647a      	str	r2, [r7, #68]	@ 0x44
 8009c4e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c54:	e841 2300 	strex	r3, r2, [r1]
 8009c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1e5      	bne.n	8009c2c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	3314      	adds	r3, #20
 8009c66:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6a:	e853 3f00 	ldrex	r3, [r3]
 8009c6e:	623b      	str	r3, [r7, #32]
   return(result);
 8009c70:	6a3b      	ldr	r3, [r7, #32]
 8009c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009c76:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	3314      	adds	r3, #20
 8009c7e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009c80:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c88:	e841 2300 	strex	r3, r2, [r1]
 8009c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1e5      	bne.n	8009c60 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009c94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c96:	2220      	movs	r2, #32
 8009c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d119      	bne.n	8009cd8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ca4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	330c      	adds	r3, #12
 8009caa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	e853 3f00 	ldrex	r3, [r3]
 8009cb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f023 0310 	bic.w	r3, r3, #16
 8009cba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	330c      	adds	r3, #12
 8009cc2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009cc4:	61fa      	str	r2, [r7, #28]
 8009cc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc8:	69b9      	ldr	r1, [r7, #24]
 8009cca:	69fa      	ldr	r2, [r7, #28]
 8009ccc:	e841 2300 	strex	r3, r2, [r1]
 8009cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1e5      	bne.n	8009ca4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cda:	2200      	movs	r2, #0
 8009cdc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d106      	bne.n	8009cf4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ce8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009cea:	4619      	mov	r1, r3
 8009cec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009cee:	f7ff ff0b 	bl	8009b08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009cf2:	e002      	b.n	8009cfa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009cf4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009cf6:	f7ff fee9 	bl	8009acc <HAL_UART_RxCpltCallback>
}
 8009cfa:	bf00      	nop
 8009cfc:	3770      	adds	r7, #112	@ 0x70
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b084      	sub	sp, #16
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d0e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2201      	movs	r2, #1
 8009d14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d108      	bne.n	8009d30 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009d22:	085b      	lsrs	r3, r3, #1
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	4619      	mov	r1, r3
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f7ff feed 	bl	8009b08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d2e:	e002      	b.n	8009d36 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f7ff fed5 	bl	8009ae0 <HAL_UART_RxHalfCpltCallback>
}
 8009d36:	bf00      	nop
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b084      	sub	sp, #16
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009d46:	2300      	movs	r3, #0
 8009d48:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d4e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	695b      	ldr	r3, [r3, #20]
 8009d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d5a:	2b80      	cmp	r3, #128	@ 0x80
 8009d5c:	bf0c      	ite	eq
 8009d5e:	2301      	moveq	r3, #1
 8009d60:	2300      	movne	r3, #0
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b21      	cmp	r3, #33	@ 0x21
 8009d70:	d108      	bne.n	8009d84 <UART_DMAError+0x46>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d005      	beq.n	8009d84 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009d7e:	68b8      	ldr	r0, [r7, #8]
 8009d80:	f000 f8c2 	bl	8009f08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d8e:	2b40      	cmp	r3, #64	@ 0x40
 8009d90:	bf0c      	ite	eq
 8009d92:	2301      	moveq	r3, #1
 8009d94:	2300      	movne	r3, #0
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	2b22      	cmp	r3, #34	@ 0x22
 8009da4:	d108      	bne.n	8009db8 <UART_DMAError+0x7a>
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d005      	beq.n	8009db8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	2200      	movs	r2, #0
 8009db0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009db2:	68b8      	ldr	r0, [r7, #8]
 8009db4:	f000 f8d0 	bl	8009f58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dbc:	f043 0210 	orr.w	r2, r3, #16
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009dc4:	68b8      	ldr	r0, [r7, #8]
 8009dc6:	f7ff fe95 	bl	8009af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dca:	bf00      	nop
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
	...

08009dd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b098      	sub	sp, #96	@ 0x60
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	4613      	mov	r3, r2
 8009de0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	88fa      	ldrh	r2, [r7, #6]
 8009dec:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2222      	movs	r2, #34	@ 0x22
 8009df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e00:	4a3e      	ldr	r2, [pc, #248]	@ (8009efc <UART_Start_Receive_DMA+0x128>)
 8009e02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e08:	4a3d      	ldr	r2, [pc, #244]	@ (8009f00 <UART_Start_Receive_DMA+0x12c>)
 8009e0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e10:	4a3c      	ldr	r2, [pc, #240]	@ (8009f04 <UART_Start_Receive_DMA+0x130>)
 8009e12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e18:	2200      	movs	r2, #0
 8009e1a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009e1c:	f107 0308 	add.w	r3, r7, #8
 8009e20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	88fb      	ldrh	r3, [r7, #6]
 8009e34:	f7fa fe16 	bl	8004a64 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009e38:	2300      	movs	r3, #0
 8009e3a:	613b      	str	r3, [r7, #16]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	613b      	str	r3, [r7, #16]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	613b      	str	r3, [r7, #16]
 8009e4c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d019      	beq.n	8009e8a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	330c      	adds	r3, #12
 8009e5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e60:	e853 3f00 	ldrex	r3, [r3]
 8009e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	330c      	adds	r3, #12
 8009e74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e76:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009e78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009e7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009e7e:	e841 2300 	strex	r3, r2, [r1]
 8009e82:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009e84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1e5      	bne.n	8009e56 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	3314      	adds	r3, #20
 8009e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e94:	e853 3f00 	ldrex	r3, [r3]
 8009e98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e9c:	f043 0301 	orr.w	r3, r3, #1
 8009ea0:	657b      	str	r3, [r7, #84]	@ 0x54
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	3314      	adds	r3, #20
 8009ea8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009eaa:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009eac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009eb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009eb2:	e841 2300 	strex	r3, r2, [r1]
 8009eb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1e5      	bne.n	8009e8a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3314      	adds	r3, #20
 8009ec4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	e853 3f00 	ldrex	r3, [r3]
 8009ecc:	617b      	str	r3, [r7, #20]
   return(result);
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ed4:	653b      	str	r3, [r7, #80]	@ 0x50
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	3314      	adds	r3, #20
 8009edc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009ede:	627a      	str	r2, [r7, #36]	@ 0x24
 8009ee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee2:	6a39      	ldr	r1, [r7, #32]
 8009ee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ee6:	e841 2300 	strex	r3, r2, [r1]
 8009eea:	61fb      	str	r3, [r7, #28]
   return(result);
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d1e5      	bne.n	8009ebe <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3760      	adds	r7, #96	@ 0x60
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	08009bd7 	.word	0x08009bd7
 8009f00:	08009d03 	.word	0x08009d03
 8009f04:	08009d3f 	.word	0x08009d3f

08009f08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b089      	sub	sp, #36	@ 0x24
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	330c      	adds	r3, #12
 8009f16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	e853 3f00 	ldrex	r3, [r3]
 8009f1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009f26:	61fb      	str	r3, [r7, #28]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	330c      	adds	r3, #12
 8009f2e:	69fa      	ldr	r2, [r7, #28]
 8009f30:	61ba      	str	r2, [r7, #24]
 8009f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f34:	6979      	ldr	r1, [r7, #20]
 8009f36:	69ba      	ldr	r2, [r7, #24]
 8009f38:	e841 2300 	strex	r3, r2, [r1]
 8009f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1e5      	bne.n	8009f10 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2220      	movs	r2, #32
 8009f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8009f4c:	bf00      	nop
 8009f4e:	3724      	adds	r7, #36	@ 0x24
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b095      	sub	sp, #84	@ 0x54
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	330c      	adds	r3, #12
 8009f66:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f6a:	e853 3f00 	ldrex	r3, [r3]
 8009f6e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	330c      	adds	r3, #12
 8009f7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009f80:	643a      	str	r2, [r7, #64]	@ 0x40
 8009f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f88:	e841 2300 	strex	r3, r2, [r1]
 8009f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1e5      	bne.n	8009f60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	3314      	adds	r3, #20
 8009f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f9c:	6a3b      	ldr	r3, [r7, #32]
 8009f9e:	e853 3f00 	ldrex	r3, [r3]
 8009fa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	f023 0301 	bic.w	r3, r3, #1
 8009faa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	3314      	adds	r3, #20
 8009fb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009fb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fbc:	e841 2300 	strex	r3, r2, [r1]
 8009fc0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1e5      	bne.n	8009f94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d119      	bne.n	800a004 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	330c      	adds	r3, #12
 8009fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	e853 3f00 	ldrex	r3, [r3]
 8009fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	f023 0310 	bic.w	r3, r3, #16
 8009fe6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	330c      	adds	r3, #12
 8009fee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ff0:	61ba      	str	r2, [r7, #24]
 8009ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ff4:	6979      	ldr	r1, [r7, #20]
 8009ff6:	69ba      	ldr	r2, [r7, #24]
 8009ff8:	e841 2300 	strex	r3, r2, [r1]
 8009ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d1e5      	bne.n	8009fd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2220      	movs	r2, #32
 800a008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a012:	bf00      	nop
 800a014:	3754      	adds	r7, #84	@ 0x54
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr

0800a01e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a01e:	b580      	push	{r7, lr}
 800a020:	b084      	sub	sp, #16
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a02a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2200      	movs	r2, #0
 800a030:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	2200      	movs	r2, #0
 800a036:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f7ff fd5b 	bl	8009af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a03e:	bf00      	nop
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}

0800a046 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a046:	b480      	push	{r7}
 800a048:	b085      	sub	sp, #20
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b21      	cmp	r3, #33	@ 0x21
 800a058:	d13e      	bne.n	800a0d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	689b      	ldr	r3, [r3, #8]
 800a05e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a062:	d114      	bne.n	800a08e <UART_Transmit_IT+0x48>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d110      	bne.n	800a08e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6a1b      	ldr	r3, [r3, #32]
 800a070:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	881b      	ldrh	r3, [r3, #0]
 800a076:	461a      	mov	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a080:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a1b      	ldr	r3, [r3, #32]
 800a086:	1c9a      	adds	r2, r3, #2
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	621a      	str	r2, [r3, #32]
 800a08c:	e008      	b.n	800a0a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a1b      	ldr	r3, [r3, #32]
 800a092:	1c59      	adds	r1, r3, #1
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	6211      	str	r1, [r2, #32]
 800a098:	781a      	ldrb	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10f      	bne.n	800a0d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68da      	ldr	r2, [r3, #12]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a0c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68da      	ldr	r2, [r3, #12]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	e000      	b.n	800a0da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a0d8:	2302      	movs	r3, #2
  }
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3714      	adds	r7, #20
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr

0800a0e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a0e6:	b580      	push	{r7, lr}
 800a0e8:	b082      	sub	sp, #8
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68da      	ldr	r2, [r3, #12]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2220      	movs	r2, #32
 800a102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f7ff fccc 	bl	8009aa4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b08c      	sub	sp, #48	@ 0x30
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a124:	b2db      	uxtb	r3, r3
 800a126:	2b22      	cmp	r3, #34	@ 0x22
 800a128:	f040 80ae 	bne.w	800a288 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	689b      	ldr	r3, [r3, #8]
 800a130:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a134:	d117      	bne.n	800a166 <UART_Receive_IT+0x50>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d113      	bne.n	800a166 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a13e:	2300      	movs	r3, #0
 800a140:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a146:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	b29b      	uxth	r3, r3
 800a150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a154:	b29a      	uxth	r2, r3
 800a156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a158:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a15e:	1c9a      	adds	r2, r3, #2
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	629a      	str	r2, [r3, #40]	@ 0x28
 800a164:	e026      	b.n	800a1b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a16a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800a16c:	2300      	movs	r3, #0
 800a16e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a178:	d007      	beq.n	800a18a <UART_Receive_IT+0x74>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10a      	bne.n	800a198 <UART_Receive_IT+0x82>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d106      	bne.n	800a198 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	b2da      	uxtb	r2, r3
 800a192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a194:	701a      	strb	r2, [r3, #0]
 800a196:	e008      	b.n	800a1aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1a4:	b2da      	uxtb	r2, r3
 800a1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ae:	1c5a      	adds	r2, r3, #1
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a1b8:	b29b      	uxth	r3, r3
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d15d      	bne.n	800a284 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	68da      	ldr	r2, [r3, #12]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f022 0220 	bic.w	r2, r2, #32
 800a1d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	68da      	ldr	r2, [r3, #12]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a1e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	695a      	ldr	r2, [r3, #20]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f022 0201 	bic.w	r2, r2, #1
 800a1f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2220      	movs	r2, #32
 800a1fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d135      	bne.n	800a27a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	330c      	adds	r3, #12
 800a21a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	e853 3f00 	ldrex	r3, [r3]
 800a222:	613b      	str	r3, [r7, #16]
   return(result);
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	f023 0310 	bic.w	r3, r3, #16
 800a22a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	330c      	adds	r3, #12
 800a232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a234:	623a      	str	r2, [r7, #32]
 800a236:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a238:	69f9      	ldr	r1, [r7, #28]
 800a23a:	6a3a      	ldr	r2, [r7, #32]
 800a23c:	e841 2300 	strex	r3, r2, [r1]
 800a240:	61bb      	str	r3, [r7, #24]
   return(result);
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1e5      	bne.n	800a214 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 0310 	and.w	r3, r3, #16
 800a252:	2b10      	cmp	r3, #16
 800a254:	d10a      	bne.n	800a26c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a256:	2300      	movs	r3, #0
 800a258:	60fb      	str	r3, [r7, #12]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	60fb      	str	r3, [r7, #12]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	60fb      	str	r3, [r7, #12]
 800a26a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f7ff fc48 	bl	8009b08 <HAL_UARTEx_RxEventCallback>
 800a278:	e002      	b.n	800a280 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7ff fc26 	bl	8009acc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a280:	2300      	movs	r3, #0
 800a282:	e002      	b.n	800a28a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	e000      	b.n	800a28a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a288:	2302      	movs	r3, #2
  }
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3730      	adds	r7, #48	@ 0x30
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
	...

0800a294 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a298:	b0c0      	sub	sp, #256	@ 0x100
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a2ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2b0:	68d9      	ldr	r1, [r3, #12]
 800a2b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	ea40 0301 	orr.w	r3, r0, r1
 800a2bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a2be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2c2:	689a      	ldr	r2, [r3, #8]
 800a2c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	431a      	orrs	r2, r3
 800a2cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2d0:	695b      	ldr	r3, [r3, #20]
 800a2d2:	431a      	orrs	r2, r3
 800a2d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2d8:	69db      	ldr	r3, [r3, #28]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a2e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a2ec:	f021 010c 	bic.w	r1, r1, #12
 800a2f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a2fa:	430b      	orrs	r3, r1
 800a2fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a2fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	695b      	ldr	r3, [r3, #20]
 800a306:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a30a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a30e:	6999      	ldr	r1, [r3, #24]
 800a310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	ea40 0301 	orr.w	r3, r0, r1
 800a31a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a31c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	4b8f      	ldr	r3, [pc, #572]	@ (800a560 <UART_SetConfig+0x2cc>)
 800a324:	429a      	cmp	r2, r3
 800a326:	d005      	beq.n	800a334 <UART_SetConfig+0xa0>
 800a328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	4b8d      	ldr	r3, [pc, #564]	@ (800a564 <UART_SetConfig+0x2d0>)
 800a330:	429a      	cmp	r2, r3
 800a332:	d104      	bne.n	800a33e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a334:	f7fd f8ba 	bl	80074ac <HAL_RCC_GetPCLK2Freq>
 800a338:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a33c:	e003      	b.n	800a346 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a33e:	f7fd f8a1 	bl	8007484 <HAL_RCC_GetPCLK1Freq>
 800a342:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a34a:	69db      	ldr	r3, [r3, #28]
 800a34c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a350:	f040 810c 	bne.w	800a56c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a354:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a358:	2200      	movs	r2, #0
 800a35a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a35e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a362:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a366:	4622      	mov	r2, r4
 800a368:	462b      	mov	r3, r5
 800a36a:	1891      	adds	r1, r2, r2
 800a36c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a36e:	415b      	adcs	r3, r3
 800a370:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a372:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a376:	4621      	mov	r1, r4
 800a378:	eb12 0801 	adds.w	r8, r2, r1
 800a37c:	4629      	mov	r1, r5
 800a37e:	eb43 0901 	adc.w	r9, r3, r1
 800a382:	f04f 0200 	mov.w	r2, #0
 800a386:	f04f 0300 	mov.w	r3, #0
 800a38a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a38e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a392:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a396:	4690      	mov	r8, r2
 800a398:	4699      	mov	r9, r3
 800a39a:	4623      	mov	r3, r4
 800a39c:	eb18 0303 	adds.w	r3, r8, r3
 800a3a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a3a4:	462b      	mov	r3, r5
 800a3a6:	eb49 0303 	adc.w	r3, r9, r3
 800a3aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a3ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a3ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a3be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a3c2:	460b      	mov	r3, r1
 800a3c4:	18db      	adds	r3, r3, r3
 800a3c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	eb42 0303 	adc.w	r3, r2, r3
 800a3ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800a3d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a3d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a3d8:	f7f6 f9be 	bl	8000758 <__aeabi_uldivmod>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4b61      	ldr	r3, [pc, #388]	@ (800a568 <UART_SetConfig+0x2d4>)
 800a3e2:	fba3 2302 	umull	r2, r3, r3, r2
 800a3e6:	095b      	lsrs	r3, r3, #5
 800a3e8:	011c      	lsls	r4, r3, #4
 800a3ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a3f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a3f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a3fc:	4642      	mov	r2, r8
 800a3fe:	464b      	mov	r3, r9
 800a400:	1891      	adds	r1, r2, r2
 800a402:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a404:	415b      	adcs	r3, r3
 800a406:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a408:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a40c:	4641      	mov	r1, r8
 800a40e:	eb12 0a01 	adds.w	sl, r2, r1
 800a412:	4649      	mov	r1, r9
 800a414:	eb43 0b01 	adc.w	fp, r3, r1
 800a418:	f04f 0200 	mov.w	r2, #0
 800a41c:	f04f 0300 	mov.w	r3, #0
 800a420:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a424:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a428:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a42c:	4692      	mov	sl, r2
 800a42e:	469b      	mov	fp, r3
 800a430:	4643      	mov	r3, r8
 800a432:	eb1a 0303 	adds.w	r3, sl, r3
 800a436:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a43a:	464b      	mov	r3, r9
 800a43c:	eb4b 0303 	adc.w	r3, fp, r3
 800a440:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a450:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a454:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a458:	460b      	mov	r3, r1
 800a45a:	18db      	adds	r3, r3, r3
 800a45c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a45e:	4613      	mov	r3, r2
 800a460:	eb42 0303 	adc.w	r3, r2, r3
 800a464:	647b      	str	r3, [r7, #68]	@ 0x44
 800a466:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a46a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a46e:	f7f6 f973 	bl	8000758 <__aeabi_uldivmod>
 800a472:	4602      	mov	r2, r0
 800a474:	460b      	mov	r3, r1
 800a476:	4611      	mov	r1, r2
 800a478:	4b3b      	ldr	r3, [pc, #236]	@ (800a568 <UART_SetConfig+0x2d4>)
 800a47a:	fba3 2301 	umull	r2, r3, r3, r1
 800a47e:	095b      	lsrs	r3, r3, #5
 800a480:	2264      	movs	r2, #100	@ 0x64
 800a482:	fb02 f303 	mul.w	r3, r2, r3
 800a486:	1acb      	subs	r3, r1, r3
 800a488:	00db      	lsls	r3, r3, #3
 800a48a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a48e:	4b36      	ldr	r3, [pc, #216]	@ (800a568 <UART_SetConfig+0x2d4>)
 800a490:	fba3 2302 	umull	r2, r3, r3, r2
 800a494:	095b      	lsrs	r3, r3, #5
 800a496:	005b      	lsls	r3, r3, #1
 800a498:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a49c:	441c      	add	r4, r3
 800a49e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a4a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a4ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a4b0:	4642      	mov	r2, r8
 800a4b2:	464b      	mov	r3, r9
 800a4b4:	1891      	adds	r1, r2, r2
 800a4b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a4b8:	415b      	adcs	r3, r3
 800a4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a4c0:	4641      	mov	r1, r8
 800a4c2:	1851      	adds	r1, r2, r1
 800a4c4:	6339      	str	r1, [r7, #48]	@ 0x30
 800a4c6:	4649      	mov	r1, r9
 800a4c8:	414b      	adcs	r3, r1
 800a4ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4cc:	f04f 0200 	mov.w	r2, #0
 800a4d0:	f04f 0300 	mov.w	r3, #0
 800a4d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a4d8:	4659      	mov	r1, fp
 800a4da:	00cb      	lsls	r3, r1, #3
 800a4dc:	4651      	mov	r1, sl
 800a4de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4e2:	4651      	mov	r1, sl
 800a4e4:	00ca      	lsls	r2, r1, #3
 800a4e6:	4610      	mov	r0, r2
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	4642      	mov	r2, r8
 800a4ee:	189b      	adds	r3, r3, r2
 800a4f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a4f4:	464b      	mov	r3, r9
 800a4f6:	460a      	mov	r2, r1
 800a4f8:	eb42 0303 	adc.w	r3, r2, r3
 800a4fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a50c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a510:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a514:	460b      	mov	r3, r1
 800a516:	18db      	adds	r3, r3, r3
 800a518:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a51a:	4613      	mov	r3, r2
 800a51c:	eb42 0303 	adc.w	r3, r2, r3
 800a520:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a522:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a526:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a52a:	f7f6 f915 	bl	8000758 <__aeabi_uldivmod>
 800a52e:	4602      	mov	r2, r0
 800a530:	460b      	mov	r3, r1
 800a532:	4b0d      	ldr	r3, [pc, #52]	@ (800a568 <UART_SetConfig+0x2d4>)
 800a534:	fba3 1302 	umull	r1, r3, r3, r2
 800a538:	095b      	lsrs	r3, r3, #5
 800a53a:	2164      	movs	r1, #100	@ 0x64
 800a53c:	fb01 f303 	mul.w	r3, r1, r3
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	00db      	lsls	r3, r3, #3
 800a544:	3332      	adds	r3, #50	@ 0x32
 800a546:	4a08      	ldr	r2, [pc, #32]	@ (800a568 <UART_SetConfig+0x2d4>)
 800a548:	fba2 2303 	umull	r2, r3, r2, r3
 800a54c:	095b      	lsrs	r3, r3, #5
 800a54e:	f003 0207 	and.w	r2, r3, #7
 800a552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4422      	add	r2, r4
 800a55a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a55c:	e106      	b.n	800a76c <UART_SetConfig+0x4d8>
 800a55e:	bf00      	nop
 800a560:	40011000 	.word	0x40011000
 800a564:	40011400 	.word	0x40011400
 800a568:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a56c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a570:	2200      	movs	r2, #0
 800a572:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a576:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a57a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a57e:	4642      	mov	r2, r8
 800a580:	464b      	mov	r3, r9
 800a582:	1891      	adds	r1, r2, r2
 800a584:	6239      	str	r1, [r7, #32]
 800a586:	415b      	adcs	r3, r3
 800a588:	627b      	str	r3, [r7, #36]	@ 0x24
 800a58a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a58e:	4641      	mov	r1, r8
 800a590:	1854      	adds	r4, r2, r1
 800a592:	4649      	mov	r1, r9
 800a594:	eb43 0501 	adc.w	r5, r3, r1
 800a598:	f04f 0200 	mov.w	r2, #0
 800a59c:	f04f 0300 	mov.w	r3, #0
 800a5a0:	00eb      	lsls	r3, r5, #3
 800a5a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a5a6:	00e2      	lsls	r2, r4, #3
 800a5a8:	4614      	mov	r4, r2
 800a5aa:	461d      	mov	r5, r3
 800a5ac:	4643      	mov	r3, r8
 800a5ae:	18e3      	adds	r3, r4, r3
 800a5b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a5b4:	464b      	mov	r3, r9
 800a5b6:	eb45 0303 	adc.w	r3, r5, r3
 800a5ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a5be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a5ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a5ce:	f04f 0200 	mov.w	r2, #0
 800a5d2:	f04f 0300 	mov.w	r3, #0
 800a5d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a5da:	4629      	mov	r1, r5
 800a5dc:	008b      	lsls	r3, r1, #2
 800a5de:	4621      	mov	r1, r4
 800a5e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5e4:	4621      	mov	r1, r4
 800a5e6:	008a      	lsls	r2, r1, #2
 800a5e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a5ec:	f7f6 f8b4 	bl	8000758 <__aeabi_uldivmod>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4b60      	ldr	r3, [pc, #384]	@ (800a778 <UART_SetConfig+0x4e4>)
 800a5f6:	fba3 2302 	umull	r2, r3, r3, r2
 800a5fa:	095b      	lsrs	r3, r3, #5
 800a5fc:	011c      	lsls	r4, r3, #4
 800a5fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a602:	2200      	movs	r2, #0
 800a604:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a608:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a60c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a610:	4642      	mov	r2, r8
 800a612:	464b      	mov	r3, r9
 800a614:	1891      	adds	r1, r2, r2
 800a616:	61b9      	str	r1, [r7, #24]
 800a618:	415b      	adcs	r3, r3
 800a61a:	61fb      	str	r3, [r7, #28]
 800a61c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a620:	4641      	mov	r1, r8
 800a622:	1851      	adds	r1, r2, r1
 800a624:	6139      	str	r1, [r7, #16]
 800a626:	4649      	mov	r1, r9
 800a628:	414b      	adcs	r3, r1
 800a62a:	617b      	str	r3, [r7, #20]
 800a62c:	f04f 0200 	mov.w	r2, #0
 800a630:	f04f 0300 	mov.w	r3, #0
 800a634:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a638:	4659      	mov	r1, fp
 800a63a:	00cb      	lsls	r3, r1, #3
 800a63c:	4651      	mov	r1, sl
 800a63e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a642:	4651      	mov	r1, sl
 800a644:	00ca      	lsls	r2, r1, #3
 800a646:	4610      	mov	r0, r2
 800a648:	4619      	mov	r1, r3
 800a64a:	4603      	mov	r3, r0
 800a64c:	4642      	mov	r2, r8
 800a64e:	189b      	adds	r3, r3, r2
 800a650:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a654:	464b      	mov	r3, r9
 800a656:	460a      	mov	r2, r1
 800a658:	eb42 0303 	adc.w	r3, r2, r3
 800a65c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a66a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a66c:	f04f 0200 	mov.w	r2, #0
 800a670:	f04f 0300 	mov.w	r3, #0
 800a674:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a678:	4649      	mov	r1, r9
 800a67a:	008b      	lsls	r3, r1, #2
 800a67c:	4641      	mov	r1, r8
 800a67e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a682:	4641      	mov	r1, r8
 800a684:	008a      	lsls	r2, r1, #2
 800a686:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a68a:	f7f6 f865 	bl	8000758 <__aeabi_uldivmod>
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	4611      	mov	r1, r2
 800a694:	4b38      	ldr	r3, [pc, #224]	@ (800a778 <UART_SetConfig+0x4e4>)
 800a696:	fba3 2301 	umull	r2, r3, r3, r1
 800a69a:	095b      	lsrs	r3, r3, #5
 800a69c:	2264      	movs	r2, #100	@ 0x64
 800a69e:	fb02 f303 	mul.w	r3, r2, r3
 800a6a2:	1acb      	subs	r3, r1, r3
 800a6a4:	011b      	lsls	r3, r3, #4
 800a6a6:	3332      	adds	r3, #50	@ 0x32
 800a6a8:	4a33      	ldr	r2, [pc, #204]	@ (800a778 <UART_SetConfig+0x4e4>)
 800a6aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ae:	095b      	lsrs	r3, r3, #5
 800a6b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a6b4:	441c      	add	r4, r3
 800a6b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	673b      	str	r3, [r7, #112]	@ 0x70
 800a6be:	677a      	str	r2, [r7, #116]	@ 0x74
 800a6c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a6c4:	4642      	mov	r2, r8
 800a6c6:	464b      	mov	r3, r9
 800a6c8:	1891      	adds	r1, r2, r2
 800a6ca:	60b9      	str	r1, [r7, #8]
 800a6cc:	415b      	adcs	r3, r3
 800a6ce:	60fb      	str	r3, [r7, #12]
 800a6d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6d4:	4641      	mov	r1, r8
 800a6d6:	1851      	adds	r1, r2, r1
 800a6d8:	6039      	str	r1, [r7, #0]
 800a6da:	4649      	mov	r1, r9
 800a6dc:	414b      	adcs	r3, r1
 800a6de:	607b      	str	r3, [r7, #4]
 800a6e0:	f04f 0200 	mov.w	r2, #0
 800a6e4:	f04f 0300 	mov.w	r3, #0
 800a6e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a6ec:	4659      	mov	r1, fp
 800a6ee:	00cb      	lsls	r3, r1, #3
 800a6f0:	4651      	mov	r1, sl
 800a6f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a6f6:	4651      	mov	r1, sl
 800a6f8:	00ca      	lsls	r2, r1, #3
 800a6fa:	4610      	mov	r0, r2
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	4603      	mov	r3, r0
 800a700:	4642      	mov	r2, r8
 800a702:	189b      	adds	r3, r3, r2
 800a704:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a706:	464b      	mov	r3, r9
 800a708:	460a      	mov	r2, r1
 800a70a:	eb42 0303 	adc.w	r3, r2, r3
 800a70e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	663b      	str	r3, [r7, #96]	@ 0x60
 800a71a:	667a      	str	r2, [r7, #100]	@ 0x64
 800a71c:	f04f 0200 	mov.w	r2, #0
 800a720:	f04f 0300 	mov.w	r3, #0
 800a724:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a728:	4649      	mov	r1, r9
 800a72a:	008b      	lsls	r3, r1, #2
 800a72c:	4641      	mov	r1, r8
 800a72e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a732:	4641      	mov	r1, r8
 800a734:	008a      	lsls	r2, r1, #2
 800a736:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a73a:	f7f6 f80d 	bl	8000758 <__aeabi_uldivmod>
 800a73e:	4602      	mov	r2, r0
 800a740:	460b      	mov	r3, r1
 800a742:	4b0d      	ldr	r3, [pc, #52]	@ (800a778 <UART_SetConfig+0x4e4>)
 800a744:	fba3 1302 	umull	r1, r3, r3, r2
 800a748:	095b      	lsrs	r3, r3, #5
 800a74a:	2164      	movs	r1, #100	@ 0x64
 800a74c:	fb01 f303 	mul.w	r3, r1, r3
 800a750:	1ad3      	subs	r3, r2, r3
 800a752:	011b      	lsls	r3, r3, #4
 800a754:	3332      	adds	r3, #50	@ 0x32
 800a756:	4a08      	ldr	r2, [pc, #32]	@ (800a778 <UART_SetConfig+0x4e4>)
 800a758:	fba2 2303 	umull	r2, r3, r2, r3
 800a75c:	095b      	lsrs	r3, r3, #5
 800a75e:	f003 020f 	and.w	r2, r3, #15
 800a762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4422      	add	r2, r4
 800a76a:	609a      	str	r2, [r3, #8]
}
 800a76c:	bf00      	nop
 800a76e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a772:	46bd      	mov	sp, r7
 800a774:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a778:	51eb851f 	.word	0x51eb851f

0800a77c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a77c:	b084      	sub	sp, #16
 800a77e:	b580      	push	{r7, lr}
 800a780:	b084      	sub	sp, #16
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	f107 001c 	add.w	r0, r7, #28
 800a78a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a78e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a792:	2b01      	cmp	r3, #1
 800a794:	d123      	bne.n	800a7de <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a79a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a7aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a7be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d105      	bne.n	800a7d2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f001 fae8 	bl	800bda8 <USB_CoreReset>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	73fb      	strb	r3, [r7, #15]
 800a7dc:	e01b      	b.n	800a816 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f001 fadc 	bl	800bda8 <USB_CoreReset>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a7f4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d106      	bne.n	800a80a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a800:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	639a      	str	r2, [r3, #56]	@ 0x38
 800a808:	e005      	b.n	800a816 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a80e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a816:	7fbb      	ldrb	r3, [r7, #30]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d10b      	bne.n	800a834 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	f043 0206 	orr.w	r2, r3, #6
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	f043 0220 	orr.w	r2, r3, #32
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a834:	7bfb      	ldrb	r3, [r7, #15]
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a840:	b004      	add	sp, #16
 800a842:	4770      	bx	lr

0800a844 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a844:	b480      	push	{r7}
 800a846:	b087      	sub	sp, #28
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	4613      	mov	r3, r2
 800a850:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a852:	79fb      	ldrb	r3, [r7, #7]
 800a854:	2b02      	cmp	r3, #2
 800a856:	d165      	bne.n	800a924 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	4a41      	ldr	r2, [pc, #260]	@ (800a960 <USB_SetTurnaroundTime+0x11c>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d906      	bls.n	800a86e <USB_SetTurnaroundTime+0x2a>
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	4a40      	ldr	r2, [pc, #256]	@ (800a964 <USB_SetTurnaroundTime+0x120>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d202      	bcs.n	800a86e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a868:	230f      	movs	r3, #15
 800a86a:	617b      	str	r3, [r7, #20]
 800a86c:	e062      	b.n	800a934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	4a3c      	ldr	r2, [pc, #240]	@ (800a964 <USB_SetTurnaroundTime+0x120>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d306      	bcc.n	800a884 <USB_SetTurnaroundTime+0x40>
 800a876:	68bb      	ldr	r3, [r7, #8]
 800a878:	4a3b      	ldr	r2, [pc, #236]	@ (800a968 <USB_SetTurnaroundTime+0x124>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d202      	bcs.n	800a884 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a87e:	230e      	movs	r3, #14
 800a880:	617b      	str	r3, [r7, #20]
 800a882:	e057      	b.n	800a934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	4a38      	ldr	r2, [pc, #224]	@ (800a968 <USB_SetTurnaroundTime+0x124>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d306      	bcc.n	800a89a <USB_SetTurnaroundTime+0x56>
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	4a37      	ldr	r2, [pc, #220]	@ (800a96c <USB_SetTurnaroundTime+0x128>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d202      	bcs.n	800a89a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a894:	230d      	movs	r3, #13
 800a896:	617b      	str	r3, [r7, #20]
 800a898:	e04c      	b.n	800a934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	4a33      	ldr	r2, [pc, #204]	@ (800a96c <USB_SetTurnaroundTime+0x128>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d306      	bcc.n	800a8b0 <USB_SetTurnaroundTime+0x6c>
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	4a32      	ldr	r2, [pc, #200]	@ (800a970 <USB_SetTurnaroundTime+0x12c>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d802      	bhi.n	800a8b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a8aa:	230c      	movs	r3, #12
 800a8ac:	617b      	str	r3, [r7, #20]
 800a8ae:	e041      	b.n	800a934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	4a2f      	ldr	r2, [pc, #188]	@ (800a970 <USB_SetTurnaroundTime+0x12c>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d906      	bls.n	800a8c6 <USB_SetTurnaroundTime+0x82>
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	4a2e      	ldr	r2, [pc, #184]	@ (800a974 <USB_SetTurnaroundTime+0x130>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d802      	bhi.n	800a8c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a8c0:	230b      	movs	r3, #11
 800a8c2:	617b      	str	r3, [r7, #20]
 800a8c4:	e036      	b.n	800a934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	4a2a      	ldr	r2, [pc, #168]	@ (800a974 <USB_SetTurnaroundTime+0x130>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d906      	bls.n	800a8dc <USB_SetTurnaroundTime+0x98>
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	4a29      	ldr	r2, [pc, #164]	@ (800a978 <USB_SetTurnaroundTime+0x134>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d802      	bhi.n	800a8dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a8d6:	230a      	movs	r3, #10
 800a8d8:	617b      	str	r3, [r7, #20]
 800a8da:	e02b      	b.n	800a934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	4a26      	ldr	r2, [pc, #152]	@ (800a978 <USB_SetTurnaroundTime+0x134>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d906      	bls.n	800a8f2 <USB_SetTurnaroundTime+0xae>
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	4a25      	ldr	r2, [pc, #148]	@ (800a97c <USB_SetTurnaroundTime+0x138>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d202      	bcs.n	800a8f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a8ec:	2309      	movs	r3, #9
 800a8ee:	617b      	str	r3, [r7, #20]
 800a8f0:	e020      	b.n	800a934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	4a21      	ldr	r2, [pc, #132]	@ (800a97c <USB_SetTurnaroundTime+0x138>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d306      	bcc.n	800a908 <USB_SetTurnaroundTime+0xc4>
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	4a20      	ldr	r2, [pc, #128]	@ (800a980 <USB_SetTurnaroundTime+0x13c>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d802      	bhi.n	800a908 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a902:	2308      	movs	r3, #8
 800a904:	617b      	str	r3, [r7, #20]
 800a906:	e015      	b.n	800a934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	4a1d      	ldr	r2, [pc, #116]	@ (800a980 <USB_SetTurnaroundTime+0x13c>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d906      	bls.n	800a91e <USB_SetTurnaroundTime+0xda>
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	4a1c      	ldr	r2, [pc, #112]	@ (800a984 <USB_SetTurnaroundTime+0x140>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d202      	bcs.n	800a91e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a918:	2307      	movs	r3, #7
 800a91a:	617b      	str	r3, [r7, #20]
 800a91c:	e00a      	b.n	800a934 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a91e:	2306      	movs	r3, #6
 800a920:	617b      	str	r3, [r7, #20]
 800a922:	e007      	b.n	800a934 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a924:	79fb      	ldrb	r3, [r7, #7]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d102      	bne.n	800a930 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a92a:	2309      	movs	r3, #9
 800a92c:	617b      	str	r3, [r7, #20]
 800a92e:	e001      	b.n	800a934 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a930:	2309      	movs	r3, #9
 800a932:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	68da      	ldr	r2, [r3, #12]
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	029b      	lsls	r3, r3, #10
 800a948:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a94c:	431a      	orrs	r2, r3
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	371c      	adds	r7, #28
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr
 800a960:	00d8acbf 	.word	0x00d8acbf
 800a964:	00e4e1c0 	.word	0x00e4e1c0
 800a968:	00f42400 	.word	0x00f42400
 800a96c:	01067380 	.word	0x01067380
 800a970:	011a499f 	.word	0x011a499f
 800a974:	01312cff 	.word	0x01312cff
 800a978:	014ca43f 	.word	0x014ca43f
 800a97c:	016e3600 	.word	0x016e3600
 800a980:	01a6ab1f 	.word	0x01a6ab1f
 800a984:	01e84800 	.word	0x01e84800

0800a988 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a988:	b480      	push	{r7}
 800a98a:	b083      	sub	sp, #12
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	f043 0201 	orr.w	r2, r3, #1
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a99c:	2300      	movs	r3, #0
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	370c      	adds	r7, #12
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr

0800a9aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9aa:	b480      	push	{r7}
 800a9ac:	b083      	sub	sp, #12
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	f023 0201 	bic.w	r2, r3, #1
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a9e8:	78fb      	ldrb	r3, [r7, #3]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d115      	bne.n	800aa1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a9fa:	200a      	movs	r0, #10
 800a9fc:	f7f9 f968 	bl	8003cd0 <HAL_Delay>
      ms += 10U;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	330a      	adds	r3, #10
 800aa04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f001 f93f 	bl	800bc8a <USB_GetMode>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d01e      	beq.n	800aa50 <USB_SetCurrentMode+0x84>
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2bc7      	cmp	r3, #199	@ 0xc7
 800aa16:	d9f0      	bls.n	800a9fa <USB_SetCurrentMode+0x2e>
 800aa18:	e01a      	b.n	800aa50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800aa1a:	78fb      	ldrb	r3, [r7, #3]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d115      	bne.n	800aa4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800aa2c:	200a      	movs	r0, #10
 800aa2e:	f7f9 f94f 	bl	8003cd0 <HAL_Delay>
      ms += 10U;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	330a      	adds	r3, #10
 800aa36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f001 f926 	bl	800bc8a <USB_GetMode>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d005      	beq.n	800aa50 <USB_SetCurrentMode+0x84>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2bc7      	cmp	r3, #199	@ 0xc7
 800aa48:	d9f0      	bls.n	800aa2c <USB_SetCurrentMode+0x60>
 800aa4a:	e001      	b.n	800aa50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e005      	b.n	800aa5c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2bc8      	cmp	r3, #200	@ 0xc8
 800aa54:	d101      	bne.n	800aa5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	e000      	b.n	800aa5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa64:	b084      	sub	sp, #16
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b086      	sub	sp, #24
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
 800aa6e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800aa72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aa76:	2300      	movs	r3, #0
 800aa78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aa7e:	2300      	movs	r3, #0
 800aa80:	613b      	str	r3, [r7, #16]
 800aa82:	e009      	b.n	800aa98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aa84:	687a      	ldr	r2, [r7, #4]
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	3340      	adds	r3, #64	@ 0x40
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	4413      	add	r3, r2
 800aa8e:	2200      	movs	r2, #0
 800aa90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	3301      	adds	r3, #1
 800aa96:	613b      	str	r3, [r7, #16]
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	2b0e      	cmp	r3, #14
 800aa9c:	d9f2      	bls.n	800aa84 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aa9e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d11c      	bne.n	800aae0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aab4:	f043 0302 	orr.w	r3, r3, #2
 800aab8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aabe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aad6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	639a      	str	r2, [r3, #56]	@ 0x38
 800aade:	e00b      	b.n	800aaf8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800aafe:	461a      	mov	r2, r3
 800ab00:	2300      	movs	r3, #0
 800ab02:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab04:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d10d      	bne.n	800ab28 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ab0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d104      	bne.n	800ab1e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ab14:	2100      	movs	r1, #0
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 f968 	bl	800adec <USB_SetDevSpeed>
 800ab1c:	e008      	b.n	800ab30 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ab1e:	2101      	movs	r1, #1
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f963 	bl	800adec <USB_SetDevSpeed>
 800ab26:	e003      	b.n	800ab30 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ab28:	2103      	movs	r1, #3
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f95e 	bl	800adec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ab30:	2110      	movs	r1, #16
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f8fa 	bl	800ad2c <USB_FlushTxFifo>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d001      	beq.n	800ab42 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 f924 	bl	800ad90 <USB_FlushRxFifo>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab58:	461a      	mov	r2, r3
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab64:	461a      	mov	r2, r3
 800ab66:	2300      	movs	r3, #0
 800ab68:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab70:	461a      	mov	r2, r3
 800ab72:	2300      	movs	r3, #0
 800ab74:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab76:	2300      	movs	r3, #0
 800ab78:	613b      	str	r3, [r7, #16]
 800ab7a:	e043      	b.n	800ac04 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab92:	d118      	bne.n	800abc6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d10a      	bne.n	800abb0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	015a      	lsls	r2, r3, #5
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	4413      	add	r3, r2
 800aba2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aba6:	461a      	mov	r2, r3
 800aba8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800abac:	6013      	str	r3, [r2, #0]
 800abae:	e013      	b.n	800abd8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	015a      	lsls	r2, r3, #5
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	4413      	add	r3, r2
 800abb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abbc:	461a      	mov	r2, r3
 800abbe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800abc2:	6013      	str	r3, [r2, #0]
 800abc4:	e008      	b.n	800abd8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	015a      	lsls	r2, r3, #5
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	4413      	add	r3, r2
 800abce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abd2:	461a      	mov	r2, r3
 800abd4:	2300      	movs	r3, #0
 800abd6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	015a      	lsls	r2, r3, #5
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	4413      	add	r3, r2
 800abe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abe4:	461a      	mov	r2, r3
 800abe6:	2300      	movs	r3, #0
 800abe8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	015a      	lsls	r2, r3, #5
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	4413      	add	r3, r2
 800abf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abf6:	461a      	mov	r2, r3
 800abf8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800abfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	3301      	adds	r3, #1
 800ac02:	613b      	str	r3, [r7, #16]
 800ac04:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ac08:	461a      	mov	r2, r3
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d3b5      	bcc.n	800ab7c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac10:	2300      	movs	r3, #0
 800ac12:	613b      	str	r3, [r7, #16]
 800ac14:	e043      	b.n	800ac9e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	015a      	lsls	r2, r3, #5
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac2c:	d118      	bne.n	800ac60 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d10a      	bne.n	800ac4a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	015a      	lsls	r2, r3, #5
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac40:	461a      	mov	r2, r3
 800ac42:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ac46:	6013      	str	r3, [r2, #0]
 800ac48:	e013      	b.n	800ac72 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	015a      	lsls	r2, r3, #5
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	4413      	add	r3, r2
 800ac52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac56:	461a      	mov	r2, r3
 800ac58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ac5c:	6013      	str	r3, [r2, #0]
 800ac5e:	e008      	b.n	800ac72 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	015a      	lsls	r2, r3, #5
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	4413      	add	r3, r2
 800ac68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	2300      	movs	r3, #0
 800ac70:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	015a      	lsls	r2, r3, #5
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	4413      	add	r3, r2
 800ac7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac7e:	461a      	mov	r2, r3
 800ac80:	2300      	movs	r3, #0
 800ac82:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	015a      	lsls	r2, r3, #5
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac90:	461a      	mov	r2, r3
 800ac92:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ac96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	613b      	str	r3, [r7, #16]
 800ac9e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aca2:	461a      	mov	r2, r3
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d3b5      	bcc.n	800ac16 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acb0:	691b      	ldr	r3, [r3, #16]
 800acb2:	68fa      	ldr	r2, [r7, #12]
 800acb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800acb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acbc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800acca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800accc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d105      	bne.n	800ace0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	699b      	ldr	r3, [r3, #24]
 800acd8:	f043 0210 	orr.w	r2, r3, #16
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	699a      	ldr	r2, [r3, #24]
 800ace4:	4b10      	ldr	r3, [pc, #64]	@ (800ad28 <USB_DevInit+0x2c4>)
 800ace6:	4313      	orrs	r3, r2
 800ace8:	687a      	ldr	r2, [r7, #4]
 800acea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800acec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d005      	beq.n	800ad00 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	699b      	ldr	r3, [r3, #24]
 800acf8:	f043 0208 	orr.w	r2, r3, #8
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ad00:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d107      	bne.n	800ad18 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ad10:	f043 0304 	orr.w	r3, r3, #4
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ad18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3718      	adds	r7, #24
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad24:	b004      	add	sp, #16
 800ad26:	4770      	bx	lr
 800ad28:	803c3800 	.word	0x803c3800

0800ad2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b085      	sub	sp, #20
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ad36:	2300      	movs	r3, #0
 800ad38:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad46:	d901      	bls.n	800ad4c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ad48:	2303      	movs	r3, #3
 800ad4a:	e01b      	b.n	800ad84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	691b      	ldr	r3, [r3, #16]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	daf2      	bge.n	800ad3a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ad54:	2300      	movs	r3, #0
 800ad56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	019b      	lsls	r3, r3, #6
 800ad5c:	f043 0220 	orr.w	r2, r3, #32
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	3301      	adds	r3, #1
 800ad68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ad70:	d901      	bls.n	800ad76 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ad72:	2303      	movs	r3, #3
 800ad74:	e006      	b.n	800ad84 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	691b      	ldr	r3, [r3, #16]
 800ad7a:	f003 0320 	and.w	r3, r3, #32
 800ad7e:	2b20      	cmp	r3, #32
 800ad80:	d0f0      	beq.n	800ad64 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3714      	adds	r7, #20
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr

0800ad90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b085      	sub	sp, #20
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ada8:	d901      	bls.n	800adae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800adaa:	2303      	movs	r3, #3
 800adac:	e018      	b.n	800ade0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	daf2      	bge.n	800ad9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800adb6:	2300      	movs	r3, #0
 800adb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2210      	movs	r2, #16
 800adbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	3301      	adds	r3, #1
 800adc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800adcc:	d901      	bls.n	800add2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800adce:	2303      	movs	r3, #3
 800add0:	e006      	b.n	800ade0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	f003 0310 	and.w	r3, r3, #16
 800adda:	2b10      	cmp	r3, #16
 800addc:	d0f0      	beq.n	800adc0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800adde:	2300      	movs	r3, #0
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3714      	adds	r7, #20
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800adec:	b480      	push	{r7}
 800adee:	b085      	sub	sp, #20
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	460b      	mov	r3, r1
 800adf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	78fb      	ldrb	r3, [r7, #3]
 800ae06:	68f9      	ldr	r1, [r7, #12]
 800ae08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ae10:	2300      	movs	r3, #0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3714      	adds	r7, #20
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr

0800ae1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b087      	sub	sp, #28
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	f003 0306 	and.w	r3, r3, #6
 800ae36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d102      	bne.n	800ae44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	75fb      	strb	r3, [r7, #23]
 800ae42:	e00a      	b.n	800ae5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	d002      	beq.n	800ae50 <USB_GetDevSpeed+0x32>
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2b06      	cmp	r3, #6
 800ae4e:	d102      	bne.n	800ae56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ae50:	2302      	movs	r3, #2
 800ae52:	75fb      	strb	r3, [r7, #23]
 800ae54:	e001      	b.n	800ae5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ae56:	230f      	movs	r3, #15
 800ae58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ae5a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	371c      	adds	r7, #28
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	785b      	ldrb	r3, [r3, #1]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d13a      	bne.n	800aefa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae8a:	69da      	ldr	r2, [r3, #28]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	f003 030f 	and.w	r3, r3, #15
 800ae94:	2101      	movs	r1, #1
 800ae96:	fa01 f303 	lsl.w	r3, r1, r3
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	68f9      	ldr	r1, [r7, #12]
 800ae9e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aea2:	4313      	orrs	r3, r2
 800aea4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	015a      	lsls	r2, r3, #5
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	4413      	add	r3, r2
 800aeae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d155      	bne.n	800af68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	015a      	lsls	r2, r3, #5
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	4413      	add	r3, r2
 800aec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	791b      	ldrb	r3, [r3, #4]
 800aed6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aed8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	059b      	lsls	r3, r3, #22
 800aede:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aee0:	4313      	orrs	r3, r2
 800aee2:	68ba      	ldr	r2, [r7, #8]
 800aee4:	0151      	lsls	r1, r2, #5
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	440a      	add	r2, r1
 800aeea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aeee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aef2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aef6:	6013      	str	r3, [r2, #0]
 800aef8:	e036      	b.n	800af68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af00:	69da      	ldr	r2, [r3, #28]
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	f003 030f 	and.w	r3, r3, #15
 800af0a:	2101      	movs	r1, #1
 800af0c:	fa01 f303 	lsl.w	r3, r1, r3
 800af10:	041b      	lsls	r3, r3, #16
 800af12:	68f9      	ldr	r1, [r7, #12]
 800af14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af18:	4313      	orrs	r3, r2
 800af1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	015a      	lsls	r2, r3, #5
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	4413      	add	r3, r2
 800af24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d11a      	bne.n	800af68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	015a      	lsls	r2, r3, #5
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	4413      	add	r3, r2
 800af3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af3e:	681a      	ldr	r2, [r3, #0]
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	791b      	ldrb	r3, [r3, #4]
 800af4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800af4e:	430b      	orrs	r3, r1
 800af50:	4313      	orrs	r3, r2
 800af52:	68ba      	ldr	r2, [r7, #8]
 800af54:	0151      	lsls	r1, r2, #5
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	440a      	add	r2, r1
 800af5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3714      	adds	r7, #20
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr
	...

0800af78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	785b      	ldrb	r3, [r3, #1]
 800af90:	2b01      	cmp	r3, #1
 800af92:	d161      	bne.n	800b058 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	015a      	lsls	r2, r3, #5
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	4413      	add	r3, r2
 800af9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800afa6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800afaa:	d11f      	bne.n	800afec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	015a      	lsls	r2, r3, #5
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	4413      	add	r3, r2
 800afb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	0151      	lsls	r1, r2, #5
 800afbe:	68fa      	ldr	r2, [r7, #12]
 800afc0:	440a      	add	r2, r1
 800afc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afc6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800afca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	015a      	lsls	r2, r3, #5
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	4413      	add	r3, r2
 800afd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	0151      	lsls	r1, r2, #5
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	440a      	add	r2, r1
 800afe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afe6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800afea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aff2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	f003 030f 	and.w	r3, r3, #15
 800affc:	2101      	movs	r1, #1
 800affe:	fa01 f303 	lsl.w	r3, r1, r3
 800b002:	b29b      	uxth	r3, r3
 800b004:	43db      	mvns	r3, r3
 800b006:	68f9      	ldr	r1, [r7, #12]
 800b008:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b00c:	4013      	ands	r3, r2
 800b00e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b016:	69da      	ldr	r2, [r3, #28]
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	f003 030f 	and.w	r3, r3, #15
 800b020:	2101      	movs	r1, #1
 800b022:	fa01 f303 	lsl.w	r3, r1, r3
 800b026:	b29b      	uxth	r3, r3
 800b028:	43db      	mvns	r3, r3
 800b02a:	68f9      	ldr	r1, [r7, #12]
 800b02c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b030:	4013      	ands	r3, r2
 800b032:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	015a      	lsls	r2, r3, #5
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	4413      	add	r3, r2
 800b03c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	0159      	lsls	r1, r3, #5
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	440b      	add	r3, r1
 800b04a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b04e:	4619      	mov	r1, r3
 800b050:	4b35      	ldr	r3, [pc, #212]	@ (800b128 <USB_DeactivateEndpoint+0x1b0>)
 800b052:	4013      	ands	r3, r2
 800b054:	600b      	str	r3, [r1, #0]
 800b056:	e060      	b.n	800b11a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	015a      	lsls	r2, r3, #5
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	4413      	add	r3, r2
 800b060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b06a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b06e:	d11f      	bne.n	800b0b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	015a      	lsls	r2, r3, #5
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	4413      	add	r3, r2
 800b078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	68ba      	ldr	r2, [r7, #8]
 800b080:	0151      	lsls	r1, r2, #5
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	440a      	add	r2, r1
 800b086:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b08a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b08e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	015a      	lsls	r2, r3, #5
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	4413      	add	r3, r2
 800b098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	0151      	lsls	r1, r2, #5
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	440a      	add	r2, r1
 800b0a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b0ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	f003 030f 	and.w	r3, r3, #15
 800b0c0:	2101      	movs	r1, #1
 800b0c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b0c6:	041b      	lsls	r3, r3, #16
 800b0c8:	43db      	mvns	r3, r3
 800b0ca:	68f9      	ldr	r1, [r7, #12]
 800b0cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b0d0:	4013      	ands	r3, r2
 800b0d2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0da:	69da      	ldr	r2, [r3, #28]
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	f003 030f 	and.w	r3, r3, #15
 800b0e4:	2101      	movs	r1, #1
 800b0e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b0ea:	041b      	lsls	r3, r3, #16
 800b0ec:	43db      	mvns	r3, r3
 800b0ee:	68f9      	ldr	r1, [r7, #12]
 800b0f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	015a      	lsls	r2, r3, #5
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	4413      	add	r3, r2
 800b100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	0159      	lsls	r1, r3, #5
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	440b      	add	r3, r1
 800b10e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b112:	4619      	mov	r1, r3
 800b114:	4b05      	ldr	r3, [pc, #20]	@ (800b12c <USB_DeactivateEndpoint+0x1b4>)
 800b116:	4013      	ands	r3, r2
 800b118:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3714      	adds	r7, #20
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr
 800b128:	ec337800 	.word	0xec337800
 800b12c:	eff37800 	.word	0xeff37800

0800b130 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b08a      	sub	sp, #40	@ 0x28
 800b134:	af02      	add	r7, sp, #8
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	4613      	mov	r3, r2
 800b13c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	785b      	ldrb	r3, [r3, #1]
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	f040 817f 	bne.w	800b450 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	691b      	ldr	r3, [r3, #16]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d132      	bne.n	800b1c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	015a      	lsls	r2, r3, #5
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	4413      	add	r3, r2
 800b162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	69ba      	ldr	r2, [r7, #24]
 800b16a:	0151      	lsls	r1, r2, #5
 800b16c:	69fa      	ldr	r2, [r7, #28]
 800b16e:	440a      	add	r2, r1
 800b170:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b174:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b178:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b17c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	015a      	lsls	r2, r3, #5
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	4413      	add	r3, r2
 800b186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	69ba      	ldr	r2, [r7, #24]
 800b18e:	0151      	lsls	r1, r2, #5
 800b190:	69fa      	ldr	r2, [r7, #28]
 800b192:	440a      	add	r2, r1
 800b194:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b198:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b19c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	015a      	lsls	r2, r3, #5
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	69ba      	ldr	r2, [r7, #24]
 800b1ae:	0151      	lsls	r1, r2, #5
 800b1b0:	69fa      	ldr	r2, [r7, #28]
 800b1b2:	440a      	add	r2, r1
 800b1b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1b8:	0cdb      	lsrs	r3, r3, #19
 800b1ba:	04db      	lsls	r3, r3, #19
 800b1bc:	6113      	str	r3, [r2, #16]
 800b1be:	e097      	b.n	800b2f0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	015a      	lsls	r2, r3, #5
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1cc:	691b      	ldr	r3, [r3, #16]
 800b1ce:	69ba      	ldr	r2, [r7, #24]
 800b1d0:	0151      	lsls	r1, r2, #5
 800b1d2:	69fa      	ldr	r2, [r7, #28]
 800b1d4:	440a      	add	r2, r1
 800b1d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1da:	0cdb      	lsrs	r3, r3, #19
 800b1dc:	04db      	lsls	r3, r3, #19
 800b1de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	015a      	lsls	r2, r3, #5
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1ec:	691b      	ldr	r3, [r3, #16]
 800b1ee:	69ba      	ldr	r2, [r7, #24]
 800b1f0:	0151      	lsls	r1, r2, #5
 800b1f2:	69fa      	ldr	r2, [r7, #28]
 800b1f4:	440a      	add	r2, r1
 800b1f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1fa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b1fe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b202:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b204:	69bb      	ldr	r3, [r7, #24]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d11a      	bne.n	800b240 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	691a      	ldr	r2, [r3, #16]
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	429a      	cmp	r2, r3
 800b214:	d903      	bls.n	800b21e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	689a      	ldr	r2, [r3, #8]
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	015a      	lsls	r2, r3, #5
 800b222:	69fb      	ldr	r3, [r7, #28]
 800b224:	4413      	add	r3, r2
 800b226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	69ba      	ldr	r2, [r7, #24]
 800b22e:	0151      	lsls	r1, r2, #5
 800b230:	69fa      	ldr	r2, [r7, #28]
 800b232:	440a      	add	r2, r1
 800b234:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b238:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b23c:	6113      	str	r3, [r2, #16]
 800b23e:	e044      	b.n	800b2ca <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	691a      	ldr	r2, [r3, #16]
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	4413      	add	r3, r2
 800b24a:	1e5a      	subs	r2, r3, #1
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	fbb2 f3f3 	udiv	r3, r2, r3
 800b254:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	015a      	lsls	r2, r3, #5
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	4413      	add	r3, r2
 800b25e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b262:	691a      	ldr	r2, [r3, #16]
 800b264:	8afb      	ldrh	r3, [r7, #22]
 800b266:	04d9      	lsls	r1, r3, #19
 800b268:	4ba4      	ldr	r3, [pc, #656]	@ (800b4fc <USB_EPStartXfer+0x3cc>)
 800b26a:	400b      	ands	r3, r1
 800b26c:	69b9      	ldr	r1, [r7, #24]
 800b26e:	0148      	lsls	r0, r1, #5
 800b270:	69f9      	ldr	r1, [r7, #28]
 800b272:	4401      	add	r1, r0
 800b274:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b278:	4313      	orrs	r3, r2
 800b27a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	791b      	ldrb	r3, [r3, #4]
 800b280:	2b01      	cmp	r3, #1
 800b282:	d122      	bne.n	800b2ca <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	015a      	lsls	r2, r3, #5
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	4413      	add	r3, r2
 800b28c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	69ba      	ldr	r2, [r7, #24]
 800b294:	0151      	lsls	r1, r2, #5
 800b296:	69fa      	ldr	r2, [r7, #28]
 800b298:	440a      	add	r2, r1
 800b29a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b29e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b2a2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	015a      	lsls	r2, r3, #5
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	4413      	add	r3, r2
 800b2ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2b0:	691a      	ldr	r2, [r3, #16]
 800b2b2:	8afb      	ldrh	r3, [r7, #22]
 800b2b4:	075b      	lsls	r3, r3, #29
 800b2b6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800b2ba:	69b9      	ldr	r1, [r7, #24]
 800b2bc:	0148      	lsls	r0, r1, #5
 800b2be:	69f9      	ldr	r1, [r7, #28]
 800b2c0:	4401      	add	r1, r0
 800b2c2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	015a      	lsls	r2, r3, #5
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2d6:	691a      	ldr	r2, [r3, #16]
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	691b      	ldr	r3, [r3, #16]
 800b2dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2e0:	69b9      	ldr	r1, [r7, #24]
 800b2e2:	0148      	lsls	r0, r1, #5
 800b2e4:	69f9      	ldr	r1, [r7, #28]
 800b2e6:	4401      	add	r1, r0
 800b2e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b2f0:	79fb      	ldrb	r3, [r7, #7]
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d14b      	bne.n	800b38e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	69db      	ldr	r3, [r3, #28]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d009      	beq.n	800b312 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	015a      	lsls	r2, r3, #5
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	4413      	add	r3, r2
 800b306:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b30a:	461a      	mov	r2, r3
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	69db      	ldr	r3, [r3, #28]
 800b310:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	791b      	ldrb	r3, [r3, #4]
 800b316:	2b01      	cmp	r3, #1
 800b318:	d128      	bne.n	800b36c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b326:	2b00      	cmp	r3, #0
 800b328:	d110      	bne.n	800b34c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	015a      	lsls	r2, r3, #5
 800b32e:	69fb      	ldr	r3, [r7, #28]
 800b330:	4413      	add	r3, r2
 800b332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	69ba      	ldr	r2, [r7, #24]
 800b33a:	0151      	lsls	r1, r2, #5
 800b33c:	69fa      	ldr	r2, [r7, #28]
 800b33e:	440a      	add	r2, r1
 800b340:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b344:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b348:	6013      	str	r3, [r2, #0]
 800b34a:	e00f      	b.n	800b36c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	015a      	lsls	r2, r3, #5
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	4413      	add	r3, r2
 800b354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	69ba      	ldr	r2, [r7, #24]
 800b35c:	0151      	lsls	r1, r2, #5
 800b35e:	69fa      	ldr	r2, [r7, #28]
 800b360:	440a      	add	r2, r1
 800b362:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b36a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	015a      	lsls	r2, r3, #5
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	4413      	add	r3, r2
 800b374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	69ba      	ldr	r2, [r7, #24]
 800b37c:	0151      	lsls	r1, r2, #5
 800b37e:	69fa      	ldr	r2, [r7, #28]
 800b380:	440a      	add	r2, r1
 800b382:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b386:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b38a:	6013      	str	r3, [r2, #0]
 800b38c:	e166      	b.n	800b65c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	015a      	lsls	r2, r3, #5
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	4413      	add	r3, r2
 800b396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	69ba      	ldr	r2, [r7, #24]
 800b39e:	0151      	lsls	r1, r2, #5
 800b3a0:	69fa      	ldr	r2, [r7, #28]
 800b3a2:	440a      	add	r2, r1
 800b3a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3a8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b3ac:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	791b      	ldrb	r3, [r3, #4]
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d015      	beq.n	800b3e2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f000 814e 	beq.w	800b65c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	f003 030f 	and.w	r3, r3, #15
 800b3d0:	2101      	movs	r1, #1
 800b3d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b3d6:	69f9      	ldr	r1, [r7, #28]
 800b3d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	634b      	str	r3, [r1, #52]	@ 0x34
 800b3e0:	e13c      	b.n	800b65c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d110      	bne.n	800b414 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	015a      	lsls	r2, r3, #5
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	69ba      	ldr	r2, [r7, #24]
 800b402:	0151      	lsls	r1, r2, #5
 800b404:	69fa      	ldr	r2, [r7, #28]
 800b406:	440a      	add	r2, r1
 800b408:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b40c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b410:	6013      	str	r3, [r2, #0]
 800b412:	e00f      	b.n	800b434 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b414:	69bb      	ldr	r3, [r7, #24]
 800b416:	015a      	lsls	r2, r3, #5
 800b418:	69fb      	ldr	r3, [r7, #28]
 800b41a:	4413      	add	r3, r2
 800b41c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	69ba      	ldr	r2, [r7, #24]
 800b424:	0151      	lsls	r1, r2, #5
 800b426:	69fa      	ldr	r2, [r7, #28]
 800b428:	440a      	add	r2, r1
 800b42a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b42e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b432:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	68d9      	ldr	r1, [r3, #12]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	781a      	ldrb	r2, [r3, #0]
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	b298      	uxth	r0, r3
 800b442:	79fb      	ldrb	r3, [r7, #7]
 800b444:	9300      	str	r3, [sp, #0]
 800b446:	4603      	mov	r3, r0
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f000 f9b9 	bl	800b7c0 <USB_WritePacket>
 800b44e:	e105      	b.n	800b65c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	015a      	lsls	r2, r3, #5
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	4413      	add	r3, r2
 800b458:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	69ba      	ldr	r2, [r7, #24]
 800b460:	0151      	lsls	r1, r2, #5
 800b462:	69fa      	ldr	r2, [r7, #28]
 800b464:	440a      	add	r2, r1
 800b466:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b46a:	0cdb      	lsrs	r3, r3, #19
 800b46c:	04db      	lsls	r3, r3, #19
 800b46e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	015a      	lsls	r2, r3, #5
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	4413      	add	r3, r2
 800b478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	69ba      	ldr	r2, [r7, #24]
 800b480:	0151      	lsls	r1, r2, #5
 800b482:	69fa      	ldr	r2, [r7, #28]
 800b484:	440a      	add	r2, r1
 800b486:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b48a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b48e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b492:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d132      	bne.n	800b500 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	691b      	ldr	r3, [r3, #16]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d003      	beq.n	800b4aa <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	689a      	ldr	r2, [r3, #8]
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	689a      	ldr	r2, [r3, #8]
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	015a      	lsls	r2, r3, #5
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4be:	691a      	ldr	r2, [r3, #16]
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	6a1b      	ldr	r3, [r3, #32]
 800b4c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4c8:	69b9      	ldr	r1, [r7, #24]
 800b4ca:	0148      	lsls	r0, r1, #5
 800b4cc:	69f9      	ldr	r1, [r7, #28]
 800b4ce:	4401      	add	r1, r0
 800b4d0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	015a      	lsls	r2, r3, #5
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	4413      	add	r3, r2
 800b4e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	69ba      	ldr	r2, [r7, #24]
 800b4e8:	0151      	lsls	r1, r2, #5
 800b4ea:	69fa      	ldr	r2, [r7, #28]
 800b4ec:	440a      	add	r2, r1
 800b4ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b4f6:	6113      	str	r3, [r2, #16]
 800b4f8:	e062      	b.n	800b5c0 <USB_EPStartXfer+0x490>
 800b4fa:	bf00      	nop
 800b4fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	691b      	ldr	r3, [r3, #16]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d123      	bne.n	800b550 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b508:	69bb      	ldr	r3, [r7, #24]
 800b50a:	015a      	lsls	r2, r3, #5
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	4413      	add	r3, r2
 800b510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b514:	691a      	ldr	r2, [r3, #16]
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b51e:	69b9      	ldr	r1, [r7, #24]
 800b520:	0148      	lsls	r0, r1, #5
 800b522:	69f9      	ldr	r1, [r7, #28]
 800b524:	4401      	add	r1, r0
 800b526:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b52a:	4313      	orrs	r3, r2
 800b52c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	015a      	lsls	r2, r3, #5
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	4413      	add	r3, r2
 800b536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b53a:	691b      	ldr	r3, [r3, #16]
 800b53c:	69ba      	ldr	r2, [r7, #24]
 800b53e:	0151      	lsls	r1, r2, #5
 800b540:	69fa      	ldr	r2, [r7, #28]
 800b542:	440a      	add	r2, r1
 800b544:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b548:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b54c:	6113      	str	r3, [r2, #16]
 800b54e:	e037      	b.n	800b5c0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	691a      	ldr	r2, [r3, #16]
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	4413      	add	r3, r2
 800b55a:	1e5a      	subs	r2, r3, #1
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	fbb2 f3f3 	udiv	r3, r2, r3
 800b564:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	8afa      	ldrh	r2, [r7, #22]
 800b56c:	fb03 f202 	mul.w	r2, r3, r2
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	015a      	lsls	r2, r3, #5
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	4413      	add	r3, r2
 800b57c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b580:	691a      	ldr	r2, [r3, #16]
 800b582:	8afb      	ldrh	r3, [r7, #22]
 800b584:	04d9      	lsls	r1, r3, #19
 800b586:	4b38      	ldr	r3, [pc, #224]	@ (800b668 <USB_EPStartXfer+0x538>)
 800b588:	400b      	ands	r3, r1
 800b58a:	69b9      	ldr	r1, [r7, #24]
 800b58c:	0148      	lsls	r0, r1, #5
 800b58e:	69f9      	ldr	r1, [r7, #28]
 800b590:	4401      	add	r1, r0
 800b592:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b596:	4313      	orrs	r3, r2
 800b598:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	015a      	lsls	r2, r3, #5
 800b59e:	69fb      	ldr	r3, [r7, #28]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5a6:	691a      	ldr	r2, [r3, #16]
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	6a1b      	ldr	r3, [r3, #32]
 800b5ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5b0:	69b9      	ldr	r1, [r7, #24]
 800b5b2:	0148      	lsls	r0, r1, #5
 800b5b4:	69f9      	ldr	r1, [r7, #28]
 800b5b6:	4401      	add	r1, r0
 800b5b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b5c0:	79fb      	ldrb	r3, [r7, #7]
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d10d      	bne.n	800b5e2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d009      	beq.n	800b5e2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	68d9      	ldr	r1, [r3, #12]
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	015a      	lsls	r2, r3, #5
 800b5d6:	69fb      	ldr	r3, [r7, #28]
 800b5d8:	4413      	add	r3, r2
 800b5da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5de:	460a      	mov	r2, r1
 800b5e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	791b      	ldrb	r3, [r3, #4]
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d128      	bne.n	800b63c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d110      	bne.n	800b61c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	015a      	lsls	r2, r3, #5
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	4413      	add	r3, r2
 800b602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	69ba      	ldr	r2, [r7, #24]
 800b60a:	0151      	lsls	r1, r2, #5
 800b60c:	69fa      	ldr	r2, [r7, #28]
 800b60e:	440a      	add	r2, r1
 800b610:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b614:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b618:	6013      	str	r3, [r2, #0]
 800b61a:	e00f      	b.n	800b63c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	015a      	lsls	r2, r3, #5
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	4413      	add	r3, r2
 800b624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	69ba      	ldr	r2, [r7, #24]
 800b62c:	0151      	lsls	r1, r2, #5
 800b62e:	69fa      	ldr	r2, [r7, #28]
 800b630:	440a      	add	r2, r1
 800b632:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b63a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b63c:	69bb      	ldr	r3, [r7, #24]
 800b63e:	015a      	lsls	r2, r3, #5
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	4413      	add	r3, r2
 800b644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	69ba      	ldr	r2, [r7, #24]
 800b64c:	0151      	lsls	r1, r2, #5
 800b64e:	69fa      	ldr	r2, [r7, #28]
 800b650:	440a      	add	r2, r1
 800b652:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b656:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b65a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3720      	adds	r7, #32
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	1ff80000 	.word	0x1ff80000

0800b66c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b087      	sub	sp, #28
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b676:	2300      	movs	r3, #0
 800b678:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b67a:	2300      	movs	r3, #0
 800b67c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	785b      	ldrb	r3, [r3, #1]
 800b686:	2b01      	cmp	r3, #1
 800b688:	d14a      	bne.n	800b720 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	015a      	lsls	r2, r3, #5
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	4413      	add	r3, r2
 800b694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b69e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b6a2:	f040 8086 	bne.w	800b7b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	015a      	lsls	r2, r3, #5
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	7812      	ldrb	r2, [r2, #0]
 800b6ba:	0151      	lsls	r1, r2, #5
 800b6bc:	693a      	ldr	r2, [r7, #16]
 800b6be:	440a      	add	r2, r1
 800b6c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b6c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b6c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	015a      	lsls	r2, r3, #5
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	683a      	ldr	r2, [r7, #0]
 800b6dc:	7812      	ldrb	r2, [r2, #0]
 800b6de:	0151      	lsls	r1, r2, #5
 800b6e0:	693a      	ldr	r2, [r7, #16]
 800b6e2:	440a      	add	r2, r1
 800b6e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b6e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b6ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d902      	bls.n	800b704 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	75fb      	strb	r3, [r7, #23]
          break;
 800b702:	e056      	b.n	800b7b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	015a      	lsls	r2, r3, #5
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	4413      	add	r3, r2
 800b70e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b718:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b71c:	d0e7      	beq.n	800b6ee <USB_EPStopXfer+0x82>
 800b71e:	e048      	b.n	800b7b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	015a      	lsls	r2, r3, #5
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	4413      	add	r3, r2
 800b72a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b734:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b738:	d13b      	bne.n	800b7b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	015a      	lsls	r2, r3, #5
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	4413      	add	r3, r2
 800b744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	683a      	ldr	r2, [r7, #0]
 800b74c:	7812      	ldrb	r2, [r2, #0]
 800b74e:	0151      	lsls	r1, r2, #5
 800b750:	693a      	ldr	r2, [r7, #16]
 800b752:	440a      	add	r2, r1
 800b754:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b758:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b75c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	015a      	lsls	r2, r3, #5
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	4413      	add	r3, r2
 800b768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	683a      	ldr	r2, [r7, #0]
 800b770:	7812      	ldrb	r2, [r2, #0]
 800b772:	0151      	lsls	r1, r2, #5
 800b774:	693a      	ldr	r2, [r7, #16]
 800b776:	440a      	add	r2, r1
 800b778:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b77c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b780:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	3301      	adds	r3, #1
 800b786:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b78e:	4293      	cmp	r3, r2
 800b790:	d902      	bls.n	800b798 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b792:	2301      	movs	r3, #1
 800b794:	75fb      	strb	r3, [r7, #23]
          break;
 800b796:	e00c      	b.n	800b7b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	781b      	ldrb	r3, [r3, #0]
 800b79c:	015a      	lsls	r2, r3, #5
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b7ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b7b0:	d0e7      	beq.n	800b782 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b7b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	371c      	adds	r7, #28
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b089      	sub	sp, #36	@ 0x24
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	4611      	mov	r1, r2
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	71fb      	strb	r3, [r7, #7]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b7de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d123      	bne.n	800b82e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b7e6:	88bb      	ldrh	r3, [r7, #4]
 800b7e8:	3303      	adds	r3, #3
 800b7ea:	089b      	lsrs	r3, r3, #2
 800b7ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	61bb      	str	r3, [r7, #24]
 800b7f2:	e018      	b.n	800b826 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b7f4:	79fb      	ldrb	r3, [r7, #7]
 800b7f6:	031a      	lsls	r2, r3, #12
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	4413      	add	r3, r2
 800b7fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b800:	461a      	mov	r2, r3
 800b802:	69fb      	ldr	r3, [r7, #28]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	3301      	adds	r3, #1
 800b80c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	3301      	adds	r3, #1
 800b812:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b814:	69fb      	ldr	r3, [r7, #28]
 800b816:	3301      	adds	r3, #1
 800b818:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	3301      	adds	r3, #1
 800b81e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b820:	69bb      	ldr	r3, [r7, #24]
 800b822:	3301      	adds	r3, #1
 800b824:	61bb      	str	r3, [r7, #24]
 800b826:	69ba      	ldr	r2, [r7, #24]
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d3e2      	bcc.n	800b7f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b82e:	2300      	movs	r3, #0
}
 800b830:	4618      	mov	r0, r3
 800b832:	3724      	adds	r7, #36	@ 0x24
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b08b      	sub	sp, #44	@ 0x2c
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	4613      	mov	r3, r2
 800b848:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b852:	88fb      	ldrh	r3, [r7, #6]
 800b854:	089b      	lsrs	r3, r3, #2
 800b856:	b29b      	uxth	r3, r3
 800b858:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b85a:	88fb      	ldrh	r3, [r7, #6]
 800b85c:	f003 0303 	and.w	r3, r3, #3
 800b860:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b862:	2300      	movs	r3, #0
 800b864:	623b      	str	r3, [r7, #32]
 800b866:	e014      	b.n	800b892 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b872:	601a      	str	r2, [r3, #0]
    pDest++;
 800b874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b876:	3301      	adds	r3, #1
 800b878:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b87c:	3301      	adds	r3, #1
 800b87e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b882:	3301      	adds	r3, #1
 800b884:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b888:	3301      	adds	r3, #1
 800b88a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b88c:	6a3b      	ldr	r3, [r7, #32]
 800b88e:	3301      	adds	r3, #1
 800b890:	623b      	str	r3, [r7, #32]
 800b892:	6a3a      	ldr	r2, [r7, #32]
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	429a      	cmp	r2, r3
 800b898:	d3e6      	bcc.n	800b868 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b89a:	8bfb      	ldrh	r3, [r7, #30]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d01e      	beq.n	800b8de <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	f107 0310 	add.w	r3, r7, #16
 800b8b0:	6812      	ldr	r2, [r2, #0]
 800b8b2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b8b4:	693a      	ldr	r2, [r7, #16]
 800b8b6:	6a3b      	ldr	r3, [r7, #32]
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	00db      	lsls	r3, r3, #3
 800b8bc:	fa22 f303 	lsr.w	r3, r2, r3
 800b8c0:	b2da      	uxtb	r2, r3
 800b8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c4:	701a      	strb	r2, [r3, #0]
      i++;
 800b8c6:	6a3b      	ldr	r3, [r7, #32]
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	623b      	str	r3, [r7, #32]
      pDest++;
 800b8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ce:	3301      	adds	r3, #1
 800b8d0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b8d2:	8bfb      	ldrh	r3, [r7, #30]
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b8d8:	8bfb      	ldrh	r3, [r7, #30]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1ea      	bne.n	800b8b4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	372c      	adds	r7, #44	@ 0x2c
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	785b      	ldrb	r3, [r3, #1]
 800b904:	2b01      	cmp	r3, #1
 800b906:	d12c      	bne.n	800b962 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	015a      	lsls	r2, r3, #5
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	4413      	add	r3, r2
 800b910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	db12      	blt.n	800b940 <USB_EPSetStall+0x54>
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d00f      	beq.n	800b940 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	015a      	lsls	r2, r3, #5
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	4413      	add	r3, r2
 800b928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	68ba      	ldr	r2, [r7, #8]
 800b930:	0151      	lsls	r1, r2, #5
 800b932:	68fa      	ldr	r2, [r7, #12]
 800b934:	440a      	add	r2, r1
 800b936:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b93a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b93e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	015a      	lsls	r2, r3, #5
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	4413      	add	r3, r2
 800b948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	68ba      	ldr	r2, [r7, #8]
 800b950:	0151      	lsls	r1, r2, #5
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	440a      	add	r2, r1
 800b956:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b95a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b95e:	6013      	str	r3, [r2, #0]
 800b960:	e02b      	b.n	800b9ba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	015a      	lsls	r2, r3, #5
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	4413      	add	r3, r2
 800b96a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	2b00      	cmp	r3, #0
 800b972:	db12      	blt.n	800b99a <USB_EPSetStall+0xae>
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00f      	beq.n	800b99a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	015a      	lsls	r2, r3, #5
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	4413      	add	r3, r2
 800b982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	68ba      	ldr	r2, [r7, #8]
 800b98a:	0151      	lsls	r1, r2, #5
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	440a      	add	r2, r1
 800b990:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b994:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b998:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	015a      	lsls	r2, r3, #5
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	0151      	lsls	r1, r2, #5
 800b9ac:	68fa      	ldr	r2, [r7, #12]
 800b9ae:	440a      	add	r2, r1
 800b9b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b9b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b9b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b9ba:	2300      	movs	r3, #0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3714      	adds	r7, #20
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	785b      	ldrb	r3, [r3, #1]
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d128      	bne.n	800ba36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	015a      	lsls	r2, r3, #5
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	0151      	lsls	r1, r2, #5
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	440a      	add	r2, r1
 800b9fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ba02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	791b      	ldrb	r3, [r3, #4]
 800ba08:	2b03      	cmp	r3, #3
 800ba0a:	d003      	beq.n	800ba14 <USB_EPClearStall+0x4c>
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	791b      	ldrb	r3, [r3, #4]
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d138      	bne.n	800ba86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	015a      	lsls	r2, r3, #5
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	0151      	lsls	r1, r2, #5
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	440a      	add	r2, r1
 800ba2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba32:	6013      	str	r3, [r2, #0]
 800ba34:	e027      	b.n	800ba86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	015a      	lsls	r2, r3, #5
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	0151      	lsls	r1, r2, #5
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	440a      	add	r2, r1
 800ba4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ba54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	791b      	ldrb	r3, [r3, #4]
 800ba5a:	2b03      	cmp	r3, #3
 800ba5c:	d003      	beq.n	800ba66 <USB_EPClearStall+0x9e>
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	791b      	ldrb	r3, [r3, #4]
 800ba62:	2b02      	cmp	r3, #2
 800ba64:	d10f      	bne.n	800ba86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	015a      	lsls	r2, r3, #5
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	68ba      	ldr	r2, [r7, #8]
 800ba76:	0151      	lsls	r1, r2, #5
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	440a      	add	r2, r1
 800ba7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3714      	adds	r7, #20
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b085      	sub	sp, #20
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bab2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bab6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	78fb      	ldrb	r3, [r7, #3]
 800bac2:	011b      	lsls	r3, r3, #4
 800bac4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800bac8:	68f9      	ldr	r1, [r7, #12]
 800baca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bace:	4313      	orrs	r3, r2
 800bad0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bad2:	2300      	movs	r3, #0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3714      	adds	r7, #20
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b085      	sub	sp, #20
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bafa:	f023 0303 	bic.w	r3, r3, #3
 800bafe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	68fa      	ldr	r2, [r7, #12]
 800bb0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb0e:	f023 0302 	bic.w	r3, r3, #2
 800bb12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3714      	adds	r7, #20
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr

0800bb22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb22:	b480      	push	{r7}
 800bb24:	b085      	sub	sp, #20
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	68fa      	ldr	r2, [r7, #12]
 800bb38:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bb3c:	f023 0303 	bic.w	r3, r3, #3
 800bb40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb50:	f043 0302 	orr.w	r3, r3, #2
 800bb54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3714      	adds	r7, #20
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb62:	4770      	bx	lr

0800bb64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	695b      	ldr	r3, [r3, #20]
 800bb70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	699b      	ldr	r3, [r3, #24]
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	4013      	ands	r3, r2
 800bb7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3714      	adds	r7, #20
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr

0800bb8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb8a:	b480      	push	{r7}
 800bb8c:	b085      	sub	sp, #20
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb9c:	699b      	ldr	r3, [r3, #24]
 800bb9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bba6:	69db      	ldr	r3, [r3, #28]
 800bba8:	68ba      	ldr	r2, [r7, #8]
 800bbaa:	4013      	ands	r3, r2
 800bbac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	0c1b      	lsrs	r3, r3, #16
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3714      	adds	r7, #20
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr

0800bbbe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bbbe:	b480      	push	{r7}
 800bbc0:	b085      	sub	sp, #20
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbd0:	699b      	ldr	r3, [r3, #24]
 800bbd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbda:	69db      	ldr	r3, [r3, #28]
 800bbdc:	68ba      	ldr	r2, [r7, #8]
 800bbde:	4013      	ands	r3, r2
 800bbe0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	b29b      	uxth	r3, r3
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr

0800bbf2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bbf2:	b480      	push	{r7}
 800bbf4:	b085      	sub	sp, #20
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bc02:	78fb      	ldrb	r3, [r7, #3]
 800bc04:	015a      	lsls	r2, r3, #5
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	4413      	add	r3, r2
 800bc0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc18:	695b      	ldr	r3, [r3, #20]
 800bc1a:	68ba      	ldr	r2, [r7, #8]
 800bc1c:	4013      	ands	r3, r2
 800bc1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bc20:	68bb      	ldr	r3, [r7, #8]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3714      	adds	r7, #20
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bc2e:	b480      	push	{r7}
 800bc30:	b087      	sub	sp, #28
 800bc32:	af00      	add	r7, sp, #0
 800bc34:	6078      	str	r0, [r7, #4]
 800bc36:	460b      	mov	r3, r1
 800bc38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc50:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bc52:	78fb      	ldrb	r3, [r7, #3]
 800bc54:	f003 030f 	and.w	r3, r3, #15
 800bc58:	68fa      	ldr	r2, [r7, #12]
 800bc5a:	fa22 f303 	lsr.w	r3, r2, r3
 800bc5e:	01db      	lsls	r3, r3, #7
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	693a      	ldr	r2, [r7, #16]
 800bc64:	4313      	orrs	r3, r2
 800bc66:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bc68:	78fb      	ldrb	r3, [r7, #3]
 800bc6a:	015a      	lsls	r2, r3, #5
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	4413      	add	r3, r2
 800bc70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	693a      	ldr	r2, [r7, #16]
 800bc78:	4013      	ands	r3, r2
 800bc7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bc7c:	68bb      	ldr	r3, [r7, #8]
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	371c      	adds	r7, #28
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr

0800bc8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b083      	sub	sp, #12
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	695b      	ldr	r3, [r3, #20]
 800bc96:	f003 0301 	and.w	r3, r3, #1
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	370c      	adds	r7, #12
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr

0800bca6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bca6:	b480      	push	{r7}
 800bca8:	b085      	sub	sp, #20
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	68fa      	ldr	r2, [r7, #12]
 800bcbc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bcc0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800bcc4:	f023 0307 	bic.w	r3, r3, #7
 800bcc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bcd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bcdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b087      	sub	sp, #28
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	460b      	mov	r3, r1
 800bcf6:	607a      	str	r2, [r7, #4]
 800bcf8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	333c      	adds	r3, #60	@ 0x3c
 800bd02:	3304      	adds	r3, #4
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	4a26      	ldr	r2, [pc, #152]	@ (800bda4 <USB_EP0_OutStart+0xb8>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d90a      	bls.n	800bd26 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bd1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd20:	d101      	bne.n	800bd26 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bd22:	2300      	movs	r3, #0
 800bd24:	e037      	b.n	800bd96 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	2300      	movs	r3, #0
 800bd30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bd32:	697b      	ldr	r3, [r7, #20]
 800bd34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd38:	691b      	ldr	r3, [r3, #16]
 800bd3a:	697a      	ldr	r2, [r7, #20]
 800bd3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bd44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd4c:	691b      	ldr	r3, [r3, #16]
 800bd4e:	697a      	ldr	r2, [r7, #20]
 800bd50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd54:	f043 0318 	orr.w	r3, r3, #24
 800bd58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd60:	691b      	ldr	r3, [r3, #16]
 800bd62:	697a      	ldr	r2, [r7, #20]
 800bd64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd68:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bd6c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bd6e:	7afb      	ldrb	r3, [r7, #11]
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d10f      	bne.n	800bd94 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	697a      	ldr	r2, [r7, #20]
 800bd8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd8e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800bd92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	371c      	adds	r7, #28
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	4f54300a 	.word	0x4f54300a

0800bda8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bdc0:	d901      	bls.n	800bdc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	e01b      	b.n	800bdfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	691b      	ldr	r3, [r3, #16]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	daf2      	bge.n	800bdb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	691b      	ldr	r3, [r3, #16]
 800bdd6:	f043 0201 	orr.w	r2, r3, #1
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	3301      	adds	r3, #1
 800bde2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bdea:	d901      	bls.n	800bdf0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bdec:	2303      	movs	r3, #3
 800bdee:	e006      	b.n	800bdfe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	f003 0301 	and.w	r3, r3, #1
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d0f0      	beq.n	800bdde <USB_CoreReset+0x36>

  return HAL_OK;
 800bdfc:	2300      	movs	r3, #0
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3714      	adds	r7, #20
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr
	...

0800be0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	460b      	mov	r3, r1
 800be16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800be18:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800be1c:	f005 fbd4 	bl	80115c8 <USBD_static_malloc>
 800be20:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d109      	bne.n	800be3c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	32b0      	adds	r2, #176	@ 0xb0
 800be32:	2100      	movs	r1, #0
 800be34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800be38:	2302      	movs	r3, #2
 800be3a:	e0d4      	b.n	800bfe6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800be3c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800be40:	2100      	movs	r1, #0
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f014 fb64 	bl	8020510 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	32b0      	adds	r2, #176	@ 0xb0
 800be52:	68f9      	ldr	r1, [r7, #12]
 800be54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	32b0      	adds	r2, #176	@ 0xb0
 800be62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	7c1b      	ldrb	r3, [r3, #16]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d138      	bne.n	800bee6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800be74:	4b5e      	ldr	r3, [pc, #376]	@ (800bff0 <USBD_CDC_Init+0x1e4>)
 800be76:	7819      	ldrb	r1, [r3, #0]
 800be78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be7c:	2202      	movs	r2, #2
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f005 fa7f 	bl	8011382 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800be84:	4b5a      	ldr	r3, [pc, #360]	@ (800bff0 <USBD_CDC_Init+0x1e4>)
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	f003 020f 	and.w	r2, r3, #15
 800be8c:	6879      	ldr	r1, [r7, #4]
 800be8e:	4613      	mov	r3, r2
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4413      	add	r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	440b      	add	r3, r1
 800be98:	3324      	adds	r3, #36	@ 0x24
 800be9a:	2201      	movs	r2, #1
 800be9c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800be9e:	4b55      	ldr	r3, [pc, #340]	@ (800bff4 <USBD_CDC_Init+0x1e8>)
 800bea0:	7819      	ldrb	r1, [r3, #0]
 800bea2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bea6:	2202      	movs	r2, #2
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f005 fa6a 	bl	8011382 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800beae:	4b51      	ldr	r3, [pc, #324]	@ (800bff4 <USBD_CDC_Init+0x1e8>)
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	f003 020f 	and.w	r2, r3, #15
 800beb6:	6879      	ldr	r1, [r7, #4]
 800beb8:	4613      	mov	r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	4413      	add	r3, r2
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	440b      	add	r3, r1
 800bec2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bec6:	2201      	movs	r2, #1
 800bec8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800beca:	4b4b      	ldr	r3, [pc, #300]	@ (800bff8 <USBD_CDC_Init+0x1ec>)
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	f003 020f 	and.w	r2, r3, #15
 800bed2:	6879      	ldr	r1, [r7, #4]
 800bed4:	4613      	mov	r3, r2
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	4413      	add	r3, r2
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	440b      	add	r3, r1
 800bede:	3326      	adds	r3, #38	@ 0x26
 800bee0:	2210      	movs	r2, #16
 800bee2:	801a      	strh	r2, [r3, #0]
 800bee4:	e035      	b.n	800bf52 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bee6:	4b42      	ldr	r3, [pc, #264]	@ (800bff0 <USBD_CDC_Init+0x1e4>)
 800bee8:	7819      	ldrb	r1, [r3, #0]
 800beea:	2340      	movs	r3, #64	@ 0x40
 800beec:	2202      	movs	r2, #2
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f005 fa47 	bl	8011382 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bef4:	4b3e      	ldr	r3, [pc, #248]	@ (800bff0 <USBD_CDC_Init+0x1e4>)
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	f003 020f 	and.w	r2, r3, #15
 800befc:	6879      	ldr	r1, [r7, #4]
 800befe:	4613      	mov	r3, r2
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	4413      	add	r3, r2
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	440b      	add	r3, r1
 800bf08:	3324      	adds	r3, #36	@ 0x24
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bf0e:	4b39      	ldr	r3, [pc, #228]	@ (800bff4 <USBD_CDC_Init+0x1e8>)
 800bf10:	7819      	ldrb	r1, [r3, #0]
 800bf12:	2340      	movs	r3, #64	@ 0x40
 800bf14:	2202      	movs	r2, #2
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f005 fa33 	bl	8011382 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bf1c:	4b35      	ldr	r3, [pc, #212]	@ (800bff4 <USBD_CDC_Init+0x1e8>)
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	f003 020f 	and.w	r2, r3, #15
 800bf24:	6879      	ldr	r1, [r7, #4]
 800bf26:	4613      	mov	r3, r2
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	4413      	add	r3, r2
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	440b      	add	r3, r1
 800bf30:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bf34:	2201      	movs	r2, #1
 800bf36:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bf38:	4b2f      	ldr	r3, [pc, #188]	@ (800bff8 <USBD_CDC_Init+0x1ec>)
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	f003 020f 	and.w	r2, r3, #15
 800bf40:	6879      	ldr	r1, [r7, #4]
 800bf42:	4613      	mov	r3, r2
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	4413      	add	r3, r2
 800bf48:	009b      	lsls	r3, r3, #2
 800bf4a:	440b      	add	r3, r1
 800bf4c:	3326      	adds	r3, #38	@ 0x26
 800bf4e:	2210      	movs	r2, #16
 800bf50:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bf52:	4b29      	ldr	r3, [pc, #164]	@ (800bff8 <USBD_CDC_Init+0x1ec>)
 800bf54:	7819      	ldrb	r1, [r3, #0]
 800bf56:	2308      	movs	r3, #8
 800bf58:	2203      	movs	r2, #3
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f005 fa11 	bl	8011382 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bf60:	4b25      	ldr	r3, [pc, #148]	@ (800bff8 <USBD_CDC_Init+0x1ec>)
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	f003 020f 	and.w	r2, r3, #15
 800bf68:	6879      	ldr	r1, [r7, #4]
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	4413      	add	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	440b      	add	r3, r1
 800bf74:	3324      	adds	r3, #36	@ 0x24
 800bf76:	2201      	movs	r2, #1
 800bf78:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	33b0      	adds	r3, #176	@ 0xb0
 800bf8c:	009b      	lsls	r3, r3, #2
 800bf8e:	4413      	add	r3, r2
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d101      	bne.n	800bfb4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	e018      	b.n	800bfe6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	7c1b      	ldrb	r3, [r3, #16]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10a      	bne.n	800bfd2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bfbc:	4b0d      	ldr	r3, [pc, #52]	@ (800bff4 <USBD_CDC_Init+0x1e8>)
 800bfbe:	7819      	ldrb	r1, [r3, #0]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bfc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f005 fac8 	bl	8011560 <USBD_LL_PrepareReceive>
 800bfd0:	e008      	b.n	800bfe4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bfd2:	4b08      	ldr	r3, [pc, #32]	@ (800bff4 <USBD_CDC_Init+0x1e8>)
 800bfd4:	7819      	ldrb	r1, [r3, #0]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bfdc:	2340      	movs	r3, #64	@ 0x40
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f005 fabe 	bl	8011560 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bfe4:	2300      	movs	r3, #0
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	2000009f 	.word	0x2000009f
 800bff4:	200000a0 	.word	0x200000a0
 800bff8:	200000a1 	.word	0x200000a1

0800bffc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	460b      	mov	r3, r1
 800c006:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c008:	4b3a      	ldr	r3, [pc, #232]	@ (800c0f4 <USBD_CDC_DeInit+0xf8>)
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	4619      	mov	r1, r3
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f005 f9dd 	bl	80113ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c014:	4b37      	ldr	r3, [pc, #220]	@ (800c0f4 <USBD_CDC_DeInit+0xf8>)
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	f003 020f 	and.w	r2, r3, #15
 800c01c:	6879      	ldr	r1, [r7, #4]
 800c01e:	4613      	mov	r3, r2
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	4413      	add	r3, r2
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	440b      	add	r3, r1
 800c028:	3324      	adds	r3, #36	@ 0x24
 800c02a:	2200      	movs	r2, #0
 800c02c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c02e:	4b32      	ldr	r3, [pc, #200]	@ (800c0f8 <USBD_CDC_DeInit+0xfc>)
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	4619      	mov	r1, r3
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f005 f9ca 	bl	80113ce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c03a:	4b2f      	ldr	r3, [pc, #188]	@ (800c0f8 <USBD_CDC_DeInit+0xfc>)
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	f003 020f 	and.w	r2, r3, #15
 800c042:	6879      	ldr	r1, [r7, #4]
 800c044:	4613      	mov	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	4413      	add	r3, r2
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	440b      	add	r3, r1
 800c04e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c052:	2200      	movs	r2, #0
 800c054:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c056:	4b29      	ldr	r3, [pc, #164]	@ (800c0fc <USBD_CDC_DeInit+0x100>)
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	4619      	mov	r1, r3
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f005 f9b6 	bl	80113ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c062:	4b26      	ldr	r3, [pc, #152]	@ (800c0fc <USBD_CDC_DeInit+0x100>)
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	f003 020f 	and.w	r2, r3, #15
 800c06a:	6879      	ldr	r1, [r7, #4]
 800c06c:	4613      	mov	r3, r2
 800c06e:	009b      	lsls	r3, r3, #2
 800c070:	4413      	add	r3, r2
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	440b      	add	r3, r1
 800c076:	3324      	adds	r3, #36	@ 0x24
 800c078:	2200      	movs	r2, #0
 800c07a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c07c:	4b1f      	ldr	r3, [pc, #124]	@ (800c0fc <USBD_CDC_DeInit+0x100>)
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	f003 020f 	and.w	r2, r3, #15
 800c084:	6879      	ldr	r1, [r7, #4]
 800c086:	4613      	mov	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4413      	add	r3, r2
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	440b      	add	r3, r1
 800c090:	3326      	adds	r3, #38	@ 0x26
 800c092:	2200      	movs	r2, #0
 800c094:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	32b0      	adds	r2, #176	@ 0xb0
 800c0a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d01f      	beq.n	800c0e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	33b0      	adds	r3, #176	@ 0xb0
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	4413      	add	r3, r2
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	32b0      	adds	r2, #176	@ 0xb0
 800c0c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f005 fa8a 	bl	80115e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	32b0      	adds	r2, #176	@ 0xb0
 800c0da:	2100      	movs	r1, #0
 800c0dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c0e8:	2300      	movs	r3, #0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	3708      	adds	r7, #8
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}
 800c0f2:	bf00      	nop
 800c0f4:	2000009f 	.word	0x2000009f
 800c0f8:	200000a0 	.word	0x200000a0
 800c0fc:	200000a1 	.word	0x200000a1

0800c100 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	32b0      	adds	r2, #176	@ 0xb0
 800c114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c118:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c11a:	2300      	movs	r3, #0
 800c11c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c11e:	2300      	movs	r3, #0
 800c120:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c122:	2300      	movs	r3, #0
 800c124:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d101      	bne.n	800c130 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c12c:	2303      	movs	r3, #3
 800c12e:	e0bf      	b.n	800c2b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d050      	beq.n	800c1de <USBD_CDC_Setup+0xde>
 800c13c:	2b20      	cmp	r3, #32
 800c13e:	f040 80af 	bne.w	800c2a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	88db      	ldrh	r3, [r3, #6]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d03a      	beq.n	800c1c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	b25b      	sxtb	r3, r3
 800c150:	2b00      	cmp	r3, #0
 800c152:	da1b      	bge.n	800c18c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	33b0      	adds	r3, #176	@ 0xb0
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	4413      	add	r3, r2
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	683a      	ldr	r2, [r7, #0]
 800c168:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c16a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c16c:	683a      	ldr	r2, [r7, #0]
 800c16e:	88d2      	ldrh	r2, [r2, #6]
 800c170:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	88db      	ldrh	r3, [r3, #6]
 800c176:	2b07      	cmp	r3, #7
 800c178:	bf28      	it	cs
 800c17a:	2307      	movcs	r3, #7
 800c17c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	89fa      	ldrh	r2, [r7, #14]
 800c182:	4619      	mov	r1, r3
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f001 fd53 	bl	800dc30 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c18a:	e090      	b.n	800c2ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	785a      	ldrb	r2, [r3, #1]
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	88db      	ldrh	r3, [r3, #6]
 800c19a:	2b3f      	cmp	r3, #63	@ 0x3f
 800c19c:	d803      	bhi.n	800c1a6 <USBD_CDC_Setup+0xa6>
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	88db      	ldrh	r3, [r3, #6]
 800c1a2:	b2da      	uxtb	r2, r3
 800c1a4:	e000      	b.n	800c1a8 <USBD_CDC_Setup+0xa8>
 800c1a6:	2240      	movs	r2, #64	@ 0x40
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c1ae:	6939      	ldr	r1, [r7, #16]
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f001 fd65 	bl	800dc88 <USBD_CtlPrepareRx>
      break;
 800c1be:	e076      	b.n	800c2ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	33b0      	adds	r3, #176	@ 0xb0
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	4413      	add	r3, r2
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	689b      	ldr	r3, [r3, #8]
 800c1d2:	683a      	ldr	r2, [r7, #0]
 800c1d4:	7850      	ldrb	r0, [r2, #1]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	6839      	ldr	r1, [r7, #0]
 800c1da:	4798      	blx	r3
      break;
 800c1dc:	e067      	b.n	800c2ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	785b      	ldrb	r3, [r3, #1]
 800c1e2:	2b0b      	cmp	r3, #11
 800c1e4:	d851      	bhi.n	800c28a <USBD_CDC_Setup+0x18a>
 800c1e6:	a201      	add	r2, pc, #4	@ (adr r2, 800c1ec <USBD_CDC_Setup+0xec>)
 800c1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ec:	0800c21d 	.word	0x0800c21d
 800c1f0:	0800c299 	.word	0x0800c299
 800c1f4:	0800c28b 	.word	0x0800c28b
 800c1f8:	0800c28b 	.word	0x0800c28b
 800c1fc:	0800c28b 	.word	0x0800c28b
 800c200:	0800c28b 	.word	0x0800c28b
 800c204:	0800c28b 	.word	0x0800c28b
 800c208:	0800c28b 	.word	0x0800c28b
 800c20c:	0800c28b 	.word	0x0800c28b
 800c210:	0800c28b 	.word	0x0800c28b
 800c214:	0800c247 	.word	0x0800c247
 800c218:	0800c271 	.word	0x0800c271
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c222:	b2db      	uxtb	r3, r3
 800c224:	2b03      	cmp	r3, #3
 800c226:	d107      	bne.n	800c238 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c228:	f107 030a 	add.w	r3, r7, #10
 800c22c:	2202      	movs	r2, #2
 800c22e:	4619      	mov	r1, r3
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f001 fcfd 	bl	800dc30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c236:	e032      	b.n	800c29e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c238:	6839      	ldr	r1, [r7, #0]
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f001 fc7b 	bl	800db36 <USBD_CtlError>
            ret = USBD_FAIL;
 800c240:	2303      	movs	r3, #3
 800c242:	75fb      	strb	r3, [r7, #23]
          break;
 800c244:	e02b      	b.n	800c29e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	2b03      	cmp	r3, #3
 800c250:	d107      	bne.n	800c262 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c252:	f107 030d 	add.w	r3, r7, #13
 800c256:	2201      	movs	r2, #1
 800c258:	4619      	mov	r1, r3
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f001 fce8 	bl	800dc30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c260:	e01d      	b.n	800c29e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c262:	6839      	ldr	r1, [r7, #0]
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f001 fc66 	bl	800db36 <USBD_CtlError>
            ret = USBD_FAIL;
 800c26a:	2303      	movs	r3, #3
 800c26c:	75fb      	strb	r3, [r7, #23]
          break;
 800c26e:	e016      	b.n	800c29e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c276:	b2db      	uxtb	r3, r3
 800c278:	2b03      	cmp	r3, #3
 800c27a:	d00f      	beq.n	800c29c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c27c:	6839      	ldr	r1, [r7, #0]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f001 fc59 	bl	800db36 <USBD_CtlError>
            ret = USBD_FAIL;
 800c284:	2303      	movs	r3, #3
 800c286:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c288:	e008      	b.n	800c29c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c28a:	6839      	ldr	r1, [r7, #0]
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f001 fc52 	bl	800db36 <USBD_CtlError>
          ret = USBD_FAIL;
 800c292:	2303      	movs	r3, #3
 800c294:	75fb      	strb	r3, [r7, #23]
          break;
 800c296:	e002      	b.n	800c29e <USBD_CDC_Setup+0x19e>
          break;
 800c298:	bf00      	nop
 800c29a:	e008      	b.n	800c2ae <USBD_CDC_Setup+0x1ae>
          break;
 800c29c:	bf00      	nop
      }
      break;
 800c29e:	e006      	b.n	800c2ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c2a0:	6839      	ldr	r1, [r7, #0]
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f001 fc47 	bl	800db36 <USBD_CtlError>
      ret = USBD_FAIL;
 800c2a8:	2303      	movs	r3, #3
 800c2aa:	75fb      	strb	r3, [r7, #23]
      break;
 800c2ac:	bf00      	nop
  }

  return (uint8_t)ret;
 800c2ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3718      	adds	r7, #24
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	32b0      	adds	r2, #176	@ 0xb0
 800c2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d101      	bne.n	800c2e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c2de:	2303      	movs	r3, #3
 800c2e0:	e065      	b.n	800c3ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	32b0      	adds	r2, #176	@ 0xb0
 800c2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c2f2:	78fb      	ldrb	r3, [r7, #3]
 800c2f4:	f003 020f 	and.w	r2, r3, #15
 800c2f8:	6879      	ldr	r1, [r7, #4]
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	4413      	add	r3, r2
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	440b      	add	r3, r1
 800c304:	3318      	adds	r3, #24
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d02f      	beq.n	800c36c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c30c:	78fb      	ldrb	r3, [r7, #3]
 800c30e:	f003 020f 	and.w	r2, r3, #15
 800c312:	6879      	ldr	r1, [r7, #4]
 800c314:	4613      	mov	r3, r2
 800c316:	009b      	lsls	r3, r3, #2
 800c318:	4413      	add	r3, r2
 800c31a:	009b      	lsls	r3, r3, #2
 800c31c:	440b      	add	r3, r1
 800c31e:	3318      	adds	r3, #24
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	78fb      	ldrb	r3, [r7, #3]
 800c324:	f003 010f 	and.w	r1, r3, #15
 800c328:	68f8      	ldr	r0, [r7, #12]
 800c32a:	460b      	mov	r3, r1
 800c32c:	00db      	lsls	r3, r3, #3
 800c32e:	440b      	add	r3, r1
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	4403      	add	r3, r0
 800c334:	331c      	adds	r3, #28
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	fbb2 f1f3 	udiv	r1, r2, r3
 800c33c:	fb01 f303 	mul.w	r3, r1, r3
 800c340:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c342:	2b00      	cmp	r3, #0
 800c344:	d112      	bne.n	800c36c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c346:	78fb      	ldrb	r3, [r7, #3]
 800c348:	f003 020f 	and.w	r2, r3, #15
 800c34c:	6879      	ldr	r1, [r7, #4]
 800c34e:	4613      	mov	r3, r2
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	4413      	add	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	440b      	add	r3, r1
 800c358:	3318      	adds	r3, #24
 800c35a:	2200      	movs	r2, #0
 800c35c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c35e:	78f9      	ldrb	r1, [r7, #3]
 800c360:	2300      	movs	r3, #0
 800c362:	2200      	movs	r2, #0
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f005 f8da 	bl	801151e <USBD_LL_Transmit>
 800c36a:	e01f      	b.n	800c3ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	2200      	movs	r2, #0
 800c370:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	33b0      	adds	r3, #176	@ 0xb0
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	4413      	add	r3, r2
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	691b      	ldr	r3, [r3, #16]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d010      	beq.n	800c3ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	33b0      	adds	r3, #176	@ 0xb0
 800c394:	009b      	lsls	r3, r3, #2
 800c396:	4413      	add	r3, r2
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c3a2:	68ba      	ldr	r2, [r7, #8]
 800c3a4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c3a8:	78fa      	ldrb	r2, [r7, #3]
 800c3aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c3ac:	2300      	movs	r3, #0
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c3b6:	b580      	push	{r7, lr}
 800c3b8:	b084      	sub	sp, #16
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
 800c3be:	460b      	mov	r3, r1
 800c3c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	32b0      	adds	r2, #176	@ 0xb0
 800c3cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	32b0      	adds	r2, #176	@ 0xb0
 800c3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d101      	bne.n	800c3e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	e01a      	b.n	800c41e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c3e8:	78fb      	ldrb	r3, [r7, #3]
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f005 f8d8 	bl	80115a2 <USBD_LL_GetRxDataSize>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	33b0      	adds	r3, #176	@ 0xb0
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4413      	add	r3, r2
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c412:	68fa      	ldr	r2, [r7, #12]
 800c414:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c418:	4611      	mov	r1, r2
 800c41a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c41c:	2300      	movs	r3, #0
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3710      	adds	r7, #16
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b084      	sub	sp, #16
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	32b0      	adds	r2, #176	@ 0xb0
 800c438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c43c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d101      	bne.n	800c448 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c444:	2303      	movs	r3, #3
 800c446:	e024      	b.n	800c492 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c44e:	687a      	ldr	r2, [r7, #4]
 800c450:	33b0      	adds	r3, #176	@ 0xb0
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4413      	add	r3, r2
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d019      	beq.n	800c490 <USBD_CDC_EP0_RxReady+0x6a>
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c462:	2bff      	cmp	r3, #255	@ 0xff
 800c464:	d014      	beq.n	800c490 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	33b0      	adds	r3, #176	@ 0xb0
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	4413      	add	r3, r2
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	68fa      	ldr	r2, [r7, #12]
 800c47a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c47e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c480:	68fa      	ldr	r2, [r7, #12]
 800c482:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c486:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	22ff      	movs	r2, #255	@ 0xff
 800c48c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c490:	2300      	movs	r3, #0
}
 800c492:	4618      	mov	r0, r3
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
	...

0800c49c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b086      	sub	sp, #24
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c4a4:	2182      	movs	r1, #130	@ 0x82
 800c4a6:	4818      	ldr	r0, [pc, #96]	@ (800c508 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c4a8:	f000 fd0f 	bl	800ceca <USBD_GetEpDesc>
 800c4ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c4ae:	2101      	movs	r1, #1
 800c4b0:	4815      	ldr	r0, [pc, #84]	@ (800c508 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c4b2:	f000 fd0a 	bl	800ceca <USBD_GetEpDesc>
 800c4b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c4b8:	2181      	movs	r1, #129	@ 0x81
 800c4ba:	4813      	ldr	r0, [pc, #76]	@ (800c508 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c4bc:	f000 fd05 	bl	800ceca <USBD_GetEpDesc>
 800c4c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d002      	beq.n	800c4ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	2210      	movs	r2, #16
 800c4cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d006      	beq.n	800c4e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c4dc:	711a      	strb	r2, [r3, #4]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d006      	beq.n	800c4f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c4f0:	711a      	strb	r2, [r3, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2243      	movs	r2, #67	@ 0x43
 800c4fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c4fc:	4b02      	ldr	r3, [pc, #8]	@ (800c508 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3718      	adds	r7, #24
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	2000005c 	.word	0x2000005c

0800c50c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b086      	sub	sp, #24
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c514:	2182      	movs	r1, #130	@ 0x82
 800c516:	4818      	ldr	r0, [pc, #96]	@ (800c578 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c518:	f000 fcd7 	bl	800ceca <USBD_GetEpDesc>
 800c51c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c51e:	2101      	movs	r1, #1
 800c520:	4815      	ldr	r0, [pc, #84]	@ (800c578 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c522:	f000 fcd2 	bl	800ceca <USBD_GetEpDesc>
 800c526:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c528:	2181      	movs	r1, #129	@ 0x81
 800c52a:	4813      	ldr	r0, [pc, #76]	@ (800c578 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c52c:	f000 fccd 	bl	800ceca <USBD_GetEpDesc>
 800c530:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d002      	beq.n	800c53e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	2210      	movs	r2, #16
 800c53c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d006      	beq.n	800c552 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	2200      	movs	r2, #0
 800c548:	711a      	strb	r2, [r3, #4]
 800c54a:	2200      	movs	r2, #0
 800c54c:	f042 0202 	orr.w	r2, r2, #2
 800c550:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d006      	beq.n	800c566 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2200      	movs	r2, #0
 800c55c:	711a      	strb	r2, [r3, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	f042 0202 	orr.w	r2, r2, #2
 800c564:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2243      	movs	r2, #67	@ 0x43
 800c56a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c56c:	4b02      	ldr	r3, [pc, #8]	@ (800c578 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3718      	adds	r7, #24
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	2000005c 	.word	0x2000005c

0800c57c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b086      	sub	sp, #24
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c584:	2182      	movs	r1, #130	@ 0x82
 800c586:	4818      	ldr	r0, [pc, #96]	@ (800c5e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c588:	f000 fc9f 	bl	800ceca <USBD_GetEpDesc>
 800c58c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c58e:	2101      	movs	r1, #1
 800c590:	4815      	ldr	r0, [pc, #84]	@ (800c5e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c592:	f000 fc9a 	bl	800ceca <USBD_GetEpDesc>
 800c596:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c598:	2181      	movs	r1, #129	@ 0x81
 800c59a:	4813      	ldr	r0, [pc, #76]	@ (800c5e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c59c:	f000 fc95 	bl	800ceca <USBD_GetEpDesc>
 800c5a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d002      	beq.n	800c5ae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	2210      	movs	r2, #16
 800c5ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d006      	beq.n	800c5c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c5bc:	711a      	strb	r2, [r3, #4]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d006      	beq.n	800c5d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c5d0:	711a      	strb	r2, [r3, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2243      	movs	r2, #67	@ 0x43
 800c5da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c5dc:	4b02      	ldr	r3, [pc, #8]	@ (800c5e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c5de:	4618      	mov	r0, r3
 800c5e0:	3718      	adds	r7, #24
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	bd80      	pop	{r7, pc}
 800c5e6:	bf00      	nop
 800c5e8:	2000005c 	.word	0x2000005c

0800c5ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	220a      	movs	r2, #10
 800c5f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c5fa:	4b03      	ldr	r3, [pc, #12]	@ (800c608 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	370c      	adds	r7, #12
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	20000018 	.word	0x20000018

0800c60c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d101      	bne.n	800c620 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c61c:	2303      	movs	r3, #3
 800c61e:	e009      	b.n	800c634 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	33b0      	adds	r3, #176	@ 0xb0
 800c62a:	009b      	lsls	r3, r3, #2
 800c62c:	4413      	add	r3, r2
 800c62e:	683a      	ldr	r2, [r7, #0]
 800c630:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	370c      	adds	r7, #12
 800c638:	46bd      	mov	sp, r7
 800c63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63e:	4770      	bx	lr

0800c640 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c640:	b480      	push	{r7}
 800c642:	b087      	sub	sp, #28
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	32b0      	adds	r2, #176	@ 0xb0
 800c656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c65a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d101      	bne.n	800c666 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c662:	2303      	movs	r3, #3
 800c664:	e008      	b.n	800c678 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	68ba      	ldr	r2, [r7, #8]
 800c66a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	687a      	ldr	r2, [r7, #4]
 800c672:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c676:	2300      	movs	r3, #0
}
 800c678:	4618      	mov	r0, r3
 800c67a:	371c      	adds	r7, #28
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	32b0      	adds	r2, #176	@ 0xb0
 800c698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c69c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d101      	bne.n	800c6a8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c6a4:	2303      	movs	r3, #3
 800c6a6:	e004      	b.n	800c6b2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	683a      	ldr	r2, [r7, #0]
 800c6ac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3714      	adds	r7, #20
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr
	...

0800c6c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	32b0      	adds	r2, #176	@ 0xb0
 800c6d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6d6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	32b0      	adds	r2, #176	@ 0xb0
 800c6e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d101      	bne.n	800c6ee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c6ea:	2303      	movs	r3, #3
 800c6ec:	e018      	b.n	800c720 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	7c1b      	ldrb	r3, [r3, #16]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d10a      	bne.n	800c70c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c6f6:	4b0c      	ldr	r3, [pc, #48]	@ (800c728 <USBD_CDC_ReceivePacket+0x68>)
 800c6f8:	7819      	ldrb	r1, [r3, #0]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c700:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f004 ff2b 	bl	8011560 <USBD_LL_PrepareReceive>
 800c70a:	e008      	b.n	800c71e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c70c:	4b06      	ldr	r3, [pc, #24]	@ (800c728 <USBD_CDC_ReceivePacket+0x68>)
 800c70e:	7819      	ldrb	r1, [r3, #0]
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c716:	2340      	movs	r3, #64	@ 0x40
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f004 ff21 	bl	8011560 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c71e:	2300      	movs	r3, #0
}
 800c720:	4618      	mov	r0, r3
 800c722:	3710      	adds	r7, #16
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}
 800c728:	200000a0 	.word	0x200000a0

0800c72c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b086      	sub	sp, #24
 800c730:	af00      	add	r7, sp, #0
 800c732:	60f8      	str	r0, [r7, #12]
 800c734:	60b9      	str	r1, [r7, #8]
 800c736:	4613      	mov	r3, r2
 800c738:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d101      	bne.n	800c744 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c740:	2303      	movs	r3, #3
 800c742:	e01f      	b.n	800c784 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2200      	movs	r2, #0
 800c748:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2200      	movs	r2, #0
 800c750:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2200      	movs	r2, #0
 800c758:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d003      	beq.n	800c76a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	68ba      	ldr	r2, [r7, #8]
 800c766:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	2201      	movs	r2, #1
 800c76e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	79fa      	ldrb	r2, [r7, #7]
 800c776:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f004 fd9b 	bl	80112b4 <USBD_LL_Init>
 800c77e:	4603      	mov	r3, r0
 800c780:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c782:	7dfb      	ldrb	r3, [r7, #23]
}
 800c784:	4618      	mov	r0, r3
 800c786:	3718      	adds	r7, #24
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd80      	pop	{r7, pc}

0800c78c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b084      	sub	sp, #16
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c796:	2300      	movs	r3, #0
 800c798:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d101      	bne.n	800c7a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	e025      	b.n	800c7f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	683a      	ldr	r2, [r7, #0]
 800c7a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	32ae      	adds	r2, #174	@ 0xae
 800c7b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d00f      	beq.n	800c7e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	32ae      	adds	r2, #174	@ 0xae
 800c7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7d0:	f107 020e 	add.w	r2, r7, #14
 800c7d4:	4610      	mov	r0, r2
 800c7d6:	4798      	blx	r3
 800c7d8:	4602      	mov	r2, r0
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c7e6:	1c5a      	adds	r2, r3, #1
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c7ee:	2300      	movs	r3, #0
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3710      	adds	r7, #16
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f004 fda3 	bl	801134c <USBD_LL_Start>
 800c806:	4603      	mov	r3, r0
}
 800c808:	4618      	mov	r0, r3
 800c80a:	3708      	adds	r7, #8
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bd80      	pop	{r7, pc}

0800c810 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c818:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	370c      	adds	r7, #12
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c826:	b580      	push	{r7, lr}
 800c828:	b084      	sub	sp, #16
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
 800c82e:	460b      	mov	r3, r1
 800c830:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c832:	2300      	movs	r3, #0
 800c834:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d009      	beq.n	800c854 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	78fa      	ldrb	r2, [r7, #3]
 800c84a:	4611      	mov	r1, r2
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	4798      	blx	r3
 800c850:	4603      	mov	r3, r0
 800c852:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c854:	7bfb      	ldrb	r3, [r7, #15]
}
 800c856:	4618      	mov	r0, r3
 800c858:	3710      	adds	r7, #16
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b084      	sub	sp, #16
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
 800c866:	460b      	mov	r3, r1
 800c868:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c86a:	2300      	movs	r3, #0
 800c86c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	78fa      	ldrb	r2, [r7, #3]
 800c878:	4611      	mov	r1, r2
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	4798      	blx	r3
 800c87e:	4603      	mov	r3, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d001      	beq.n	800c888 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c884:	2303      	movs	r3, #3
 800c886:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c888:	7bfb      	ldrb	r3, [r7, #15]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3710      	adds	r7, #16
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c892:	b580      	push	{r7, lr}
 800c894:	b084      	sub	sp, #16
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c8a2:	6839      	ldr	r1, [r7, #0]
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f001 f90c 	bl	800dac2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c8c6:	f003 031f 	and.w	r3, r3, #31
 800c8ca:	2b02      	cmp	r3, #2
 800c8cc:	d01a      	beq.n	800c904 <USBD_LL_SetupStage+0x72>
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	d822      	bhi.n	800c918 <USBD_LL_SetupStage+0x86>
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d002      	beq.n	800c8dc <USBD_LL_SetupStage+0x4a>
 800c8d6:	2b01      	cmp	r3, #1
 800c8d8:	d00a      	beq.n	800c8f0 <USBD_LL_SetupStage+0x5e>
 800c8da:	e01d      	b.n	800c918 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 fb63 	bl	800cfb0 <USBD_StdDevReq>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	73fb      	strb	r3, [r7, #15]
      break;
 800c8ee:	e020      	b.n	800c932 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 fbcb 	bl	800d094 <USBD_StdItfReq>
 800c8fe:	4603      	mov	r3, r0
 800c900:	73fb      	strb	r3, [r7, #15]
      break;
 800c902:	e016      	b.n	800c932 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c90a:	4619      	mov	r1, r3
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 fc2d 	bl	800d16c <USBD_StdEPReq>
 800c912:	4603      	mov	r3, r0
 800c914:	73fb      	strb	r3, [r7, #15]
      break;
 800c916:	e00c      	b.n	800c932 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c91e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c922:	b2db      	uxtb	r3, r3
 800c924:	4619      	mov	r1, r3
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f004 fd70 	bl	801140c <USBD_LL_StallEP>
 800c92c:	4603      	mov	r3, r0
 800c92e:	73fb      	strb	r3, [r7, #15]
      break;
 800c930:	bf00      	nop
  }

  return ret;
 800c932:	7bfb      	ldrb	r3, [r7, #15]
}
 800c934:	4618      	mov	r0, r3
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b086      	sub	sp, #24
 800c940:	af00      	add	r7, sp, #0
 800c942:	60f8      	str	r0, [r7, #12]
 800c944:	460b      	mov	r3, r1
 800c946:	607a      	str	r2, [r7, #4]
 800c948:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c94a:	2300      	movs	r3, #0
 800c94c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c94e:	7afb      	ldrb	r3, [r7, #11]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d16e      	bne.n	800ca32 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c95a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c962:	2b03      	cmp	r3, #3
 800c964:	f040 8098 	bne.w	800ca98 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	689a      	ldr	r2, [r3, #8]
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	429a      	cmp	r2, r3
 800c972:	d913      	bls.n	800c99c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	689a      	ldr	r2, [r3, #8]
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	1ad2      	subs	r2, r2, r3
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	68da      	ldr	r2, [r3, #12]
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	689b      	ldr	r3, [r3, #8]
 800c98a:	4293      	cmp	r3, r2
 800c98c:	bf28      	it	cs
 800c98e:	4613      	movcs	r3, r2
 800c990:	461a      	mov	r2, r3
 800c992:	6879      	ldr	r1, [r7, #4]
 800c994:	68f8      	ldr	r0, [r7, #12]
 800c996:	f001 f994 	bl	800dcc2 <USBD_CtlContinueRx>
 800c99a:	e07d      	b.n	800ca98 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c9a2:	f003 031f 	and.w	r3, r3, #31
 800c9a6:	2b02      	cmp	r3, #2
 800c9a8:	d014      	beq.n	800c9d4 <USBD_LL_DataOutStage+0x98>
 800c9aa:	2b02      	cmp	r3, #2
 800c9ac:	d81d      	bhi.n	800c9ea <USBD_LL_DataOutStage+0xae>
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d002      	beq.n	800c9b8 <USBD_LL_DataOutStage+0x7c>
 800c9b2:	2b01      	cmp	r3, #1
 800c9b4:	d003      	beq.n	800c9be <USBD_LL_DataOutStage+0x82>
 800c9b6:	e018      	b.n	800c9ea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	75bb      	strb	r3, [r7, #22]
            break;
 800c9bc:	e018      	b.n	800c9f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c9c4:	b2db      	uxtb	r3, r3
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	68f8      	ldr	r0, [r7, #12]
 800c9ca:	f000 fa64 	bl	800ce96 <USBD_CoreFindIF>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	75bb      	strb	r3, [r7, #22]
            break;
 800c9d2:	e00d      	b.n	800c9f0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	4619      	mov	r1, r3
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f000 fa66 	bl	800ceb0 <USBD_CoreFindEP>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	75bb      	strb	r3, [r7, #22]
            break;
 800c9e8:	e002      	b.n	800c9f0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	75bb      	strb	r3, [r7, #22]
            break;
 800c9ee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c9f0:	7dbb      	ldrb	r3, [r7, #22]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d119      	bne.n	800ca2a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	2b03      	cmp	r3, #3
 800ca00:	d113      	bne.n	800ca2a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ca02:	7dba      	ldrb	r2, [r7, #22]
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	32ae      	adds	r2, #174	@ 0xae
 800ca08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca0c:	691b      	ldr	r3, [r3, #16]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d00b      	beq.n	800ca2a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ca12:	7dba      	ldrb	r2, [r7, #22]
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ca1a:	7dba      	ldrb	r2, [r7, #22]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	32ae      	adds	r2, #174	@ 0xae
 800ca20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca24:	691b      	ldr	r3, [r3, #16]
 800ca26:	68f8      	ldr	r0, [r7, #12]
 800ca28:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f001 f95a 	bl	800dce4 <USBD_CtlSendStatus>
 800ca30:	e032      	b.n	800ca98 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ca32:	7afb      	ldrb	r3, [r7, #11]
 800ca34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	68f8      	ldr	r0, [r7, #12]
 800ca3e:	f000 fa37 	bl	800ceb0 <USBD_CoreFindEP>
 800ca42:	4603      	mov	r3, r0
 800ca44:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca46:	7dbb      	ldrb	r3, [r7, #22]
 800ca48:	2bff      	cmp	r3, #255	@ 0xff
 800ca4a:	d025      	beq.n	800ca98 <USBD_LL_DataOutStage+0x15c>
 800ca4c:	7dbb      	ldrb	r3, [r7, #22]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d122      	bne.n	800ca98 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	2b03      	cmp	r3, #3
 800ca5c:	d117      	bne.n	800ca8e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ca5e:	7dba      	ldrb	r2, [r7, #22]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	32ae      	adds	r2, #174	@ 0xae
 800ca64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca68:	699b      	ldr	r3, [r3, #24]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d00f      	beq.n	800ca8e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ca6e:	7dba      	ldrb	r2, [r7, #22]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ca76:	7dba      	ldrb	r2, [r7, #22]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	32ae      	adds	r2, #174	@ 0xae
 800ca7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca80:	699b      	ldr	r3, [r3, #24]
 800ca82:	7afa      	ldrb	r2, [r7, #11]
 800ca84:	4611      	mov	r1, r2
 800ca86:	68f8      	ldr	r0, [r7, #12]
 800ca88:	4798      	blx	r3
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ca8e:	7dfb      	ldrb	r3, [r7, #23]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d001      	beq.n	800ca98 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ca94:	7dfb      	ldrb	r3, [r7, #23]
 800ca96:	e000      	b.n	800ca9a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ca98:	2300      	movs	r3, #0
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3718      	adds	r7, #24
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b086      	sub	sp, #24
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	60f8      	str	r0, [r7, #12]
 800caaa:	460b      	mov	r3, r1
 800caac:	607a      	str	r2, [r7, #4]
 800caae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cab0:	7afb      	ldrb	r3, [r7, #11]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d16f      	bne.n	800cb96 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	3314      	adds	r3, #20
 800caba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cac2:	2b02      	cmp	r3, #2
 800cac4:	d15a      	bne.n	800cb7c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	689a      	ldr	r2, [r3, #8]
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	429a      	cmp	r2, r3
 800cad0:	d914      	bls.n	800cafc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	689a      	ldr	r2, [r3, #8]
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	1ad2      	subs	r2, r2, r3
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	689b      	ldr	r3, [r3, #8]
 800cae4:	461a      	mov	r2, r3
 800cae6:	6879      	ldr	r1, [r7, #4]
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	f001 f8bc 	bl	800dc66 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800caee:	2300      	movs	r3, #0
 800caf0:	2200      	movs	r2, #0
 800caf2:	2100      	movs	r1, #0
 800caf4:	68f8      	ldr	r0, [r7, #12]
 800caf6:	f004 fd33 	bl	8011560 <USBD_LL_PrepareReceive>
 800cafa:	e03f      	b.n	800cb7c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	68da      	ldr	r2, [r3, #12]
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	689b      	ldr	r3, [r3, #8]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d11c      	bne.n	800cb42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	685a      	ldr	r2, [r3, #4]
 800cb0c:	693b      	ldr	r3, [r7, #16]
 800cb0e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d316      	bcc.n	800cb42 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	685a      	ldr	r2, [r3, #4]
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d20f      	bcs.n	800cb42 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cb22:	2200      	movs	r2, #0
 800cb24:	2100      	movs	r1, #0
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f001 f89d 	bl	800dc66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb34:	2300      	movs	r3, #0
 800cb36:	2200      	movs	r2, #0
 800cb38:	2100      	movs	r1, #0
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	f004 fd10 	bl	8011560 <USBD_LL_PrepareReceive>
 800cb40:	e01c      	b.n	800cb7c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	2b03      	cmp	r3, #3
 800cb4c:	d10f      	bne.n	800cb6e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb54:	68db      	ldr	r3, [r3, #12]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d009      	beq.n	800cb6e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	68f8      	ldr	r0, [r7, #12]
 800cb6c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb6e:	2180      	movs	r1, #128	@ 0x80
 800cb70:	68f8      	ldr	r0, [r7, #12]
 800cb72:	f004 fc4b 	bl	801140c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cb76:	68f8      	ldr	r0, [r7, #12]
 800cb78:	f001 f8c7 	bl	800dd0a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d03a      	beq.n	800cbfc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cb86:	68f8      	ldr	r0, [r7, #12]
 800cb88:	f7ff fe42 	bl	800c810 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cb94:	e032      	b.n	800cbfc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cb96:	7afb      	ldrb	r3, [r7, #11]
 800cb98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	4619      	mov	r1, r3
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f000 f985 	bl	800ceb0 <USBD_CoreFindEP>
 800cba6:	4603      	mov	r3, r0
 800cba8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cbaa:	7dfb      	ldrb	r3, [r7, #23]
 800cbac:	2bff      	cmp	r3, #255	@ 0xff
 800cbae:	d025      	beq.n	800cbfc <USBD_LL_DataInStage+0x15a>
 800cbb0:	7dfb      	ldrb	r3, [r7, #23]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d122      	bne.n	800cbfc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	2b03      	cmp	r3, #3
 800cbc0:	d11c      	bne.n	800cbfc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cbc2:	7dfa      	ldrb	r2, [r7, #23]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	32ae      	adds	r2, #174	@ 0xae
 800cbc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbcc:	695b      	ldr	r3, [r3, #20]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d014      	beq.n	800cbfc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cbd2:	7dfa      	ldrb	r2, [r7, #23]
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cbda:	7dfa      	ldrb	r2, [r7, #23]
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	32ae      	adds	r2, #174	@ 0xae
 800cbe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbe4:	695b      	ldr	r3, [r3, #20]
 800cbe6:	7afa      	ldrb	r2, [r7, #11]
 800cbe8:	4611      	mov	r1, r2
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	4798      	blx	r3
 800cbee:	4603      	mov	r3, r0
 800cbf0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cbf2:	7dbb      	ldrb	r3, [r7, #22]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d001      	beq.n	800cbfc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cbf8:	7dbb      	ldrb	r3, [r7, #22]
 800cbfa:	e000      	b.n	800cbfe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cbfc:	2300      	movs	r3, #0
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3718      	adds	r7, #24
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}

0800cc06 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cc06:	b580      	push	{r7, lr}
 800cc08:	b084      	sub	sp, #16
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2201      	movs	r2, #1
 800cc16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2200      	movs	r2, #0
 800cc34:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d014      	beq.n	800cc6c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d00e      	beq.n	800cc6c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	6852      	ldr	r2, [r2, #4]
 800cc5a:	b2d2      	uxtb	r2, r2
 800cc5c:	4611      	mov	r1, r2
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	4798      	blx	r3
 800cc62:	4603      	mov	r3, r0
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d001      	beq.n	800cc6c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cc68:	2303      	movs	r3, #3
 800cc6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cc6c:	2340      	movs	r3, #64	@ 0x40
 800cc6e:	2200      	movs	r2, #0
 800cc70:	2100      	movs	r1, #0
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f004 fb85 	bl	8011382 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2240      	movs	r2, #64	@ 0x40
 800cc84:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cc88:	2340      	movs	r3, #64	@ 0x40
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	2180      	movs	r1, #128	@ 0x80
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f004 fb77 	bl	8011382 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2201      	movs	r2, #1
 800cc98:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2240      	movs	r2, #64	@ 0x40
 800cc9e:	621a      	str	r2, [r3, #32]

  return ret;
 800cca0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3710      	adds	r7, #16
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ccaa:	b480      	push	{r7}
 800ccac:	b083      	sub	sp, #12
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	78fa      	ldrb	r2, [r7, #3]
 800ccba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	370c      	adds	r7, #12
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr

0800ccca <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ccca:	b480      	push	{r7}
 800cccc:	b083      	sub	sp, #12
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccd8:	b2db      	uxtb	r3, r3
 800ccda:	2b04      	cmp	r3, #4
 800ccdc:	d006      	beq.n	800ccec <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cce4:	b2da      	uxtb	r2, r3
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2204      	movs	r2, #4
 800ccf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	370c      	adds	r7, #12
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr

0800cd02 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cd02:	b480      	push	{r7}
 800cd04:	b083      	sub	sp, #12
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	2b04      	cmp	r3, #4
 800cd14:	d106      	bne.n	800cd24 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cd1c:	b2da      	uxtb	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cd24:	2300      	movs	r3, #0
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	370c      	adds	r7, #12
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr

0800cd32 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cd32:	b580      	push	{r7, lr}
 800cd34:	b082      	sub	sp, #8
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd40:	b2db      	uxtb	r3, r3
 800cd42:	2b03      	cmp	r3, #3
 800cd44:	d110      	bne.n	800cd68 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d00b      	beq.n	800cd68 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd56:	69db      	ldr	r3, [r3, #28]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d005      	beq.n	800cd68 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd62:	69db      	ldr	r3, [r3, #28]
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b082      	sub	sp, #8
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
 800cd7a:	460b      	mov	r3, r1
 800cd7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	32ae      	adds	r2, #174	@ 0xae
 800cd88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d101      	bne.n	800cd94 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cd90:	2303      	movs	r3, #3
 800cd92:	e01c      	b.n	800cdce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	2b03      	cmp	r3, #3
 800cd9e:	d115      	bne.n	800cdcc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	32ae      	adds	r2, #174	@ 0xae
 800cdaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdae:	6a1b      	ldr	r3, [r3, #32]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d00b      	beq.n	800cdcc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	32ae      	adds	r2, #174	@ 0xae
 800cdbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdc2:	6a1b      	ldr	r3, [r3, #32]
 800cdc4:	78fa      	ldrb	r2, [r7, #3]
 800cdc6:	4611      	mov	r1, r2
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3708      	adds	r7, #8
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b082      	sub	sp, #8
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
 800cdde:	460b      	mov	r3, r1
 800cde0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	32ae      	adds	r2, #174	@ 0xae
 800cdec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d101      	bne.n	800cdf8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cdf4:	2303      	movs	r3, #3
 800cdf6:	e01c      	b.n	800ce32 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	2b03      	cmp	r3, #3
 800ce02:	d115      	bne.n	800ce30 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	32ae      	adds	r2, #174	@ 0xae
 800ce0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00b      	beq.n	800ce30 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	32ae      	adds	r2, #174	@ 0xae
 800ce22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce28:	78fa      	ldrb	r2, [r7, #3]
 800ce2a:	4611      	mov	r1, r2
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ce30:	2300      	movs	r3, #0
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3708      	adds	r7, #8
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}

0800ce3a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ce3a:	b480      	push	{r7}
 800ce3c:	b083      	sub	sp, #12
 800ce3e:	af00      	add	r7, sp, #0
 800ce40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ce42:	2300      	movs	r3, #0
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	370c      	adds	r7, #12
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d00e      	beq.n	800ce8c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce74:	685b      	ldr	r3, [r3, #4]
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	6852      	ldr	r2, [r2, #4]
 800ce7a:	b2d2      	uxtb	r2, r2
 800ce7c:	4611      	mov	r1, r2
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	4798      	blx	r3
 800ce82:	4603      	mov	r3, r0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d001      	beq.n	800ce8c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ce88:	2303      	movs	r3, #3
 800ce8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3710      	adds	r7, #16
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}

0800ce96 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ce96:	b480      	push	{r7}
 800ce98:	b083      	sub	sp, #12
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
 800ce9e:	460b      	mov	r3, r1
 800cea0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cea2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	370c      	adds	r7, #12
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b083      	sub	sp, #12
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	460b      	mov	r3, r1
 800ceba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cebc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	370c      	adds	r7, #12
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr

0800ceca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ceca:	b580      	push	{r7, lr}
 800cecc:	b086      	sub	sp, #24
 800cece:	af00      	add	r7, sp, #0
 800ced0:	6078      	str	r0, [r7, #4]
 800ced2:	460b      	mov	r3, r1
 800ced4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cede:	2300      	movs	r3, #0
 800cee0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	885b      	ldrh	r3, [r3, #2]
 800cee6:	b29b      	uxth	r3, r3
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	7812      	ldrb	r2, [r2, #0]
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d91f      	bls.n	800cf30 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cef6:	e013      	b.n	800cf20 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cef8:	f107 030a 	add.w	r3, r7, #10
 800cefc:	4619      	mov	r1, r3
 800cefe:	6978      	ldr	r0, [r7, #20]
 800cf00:	f000 f81b 	bl	800cf3a <USBD_GetNextDesc>
 800cf04:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	785b      	ldrb	r3, [r3, #1]
 800cf0a:	2b05      	cmp	r3, #5
 800cf0c:	d108      	bne.n	800cf20 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	789b      	ldrb	r3, [r3, #2]
 800cf16:	78fa      	ldrb	r2, [r7, #3]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d008      	beq.n	800cf2e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	885b      	ldrh	r3, [r3, #2]
 800cf24:	b29a      	uxth	r2, r3
 800cf26:	897b      	ldrh	r3, [r7, #10]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d8e5      	bhi.n	800cef8 <USBD_GetEpDesc+0x2e>
 800cf2c:	e000      	b.n	800cf30 <USBD_GetEpDesc+0x66>
          break;
 800cf2e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cf30:	693b      	ldr	r3, [r7, #16]
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3718      	adds	r7, #24
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cf3a:	b480      	push	{r7}
 800cf3c:	b085      	sub	sp, #20
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	6078      	str	r0, [r7, #4]
 800cf42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	881b      	ldrh	r3, [r3, #0]
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	7812      	ldrb	r2, [r2, #0]
 800cf50:	4413      	add	r3, r2
 800cf52:	b29a      	uxth	r2, r3
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4413      	add	r3, r2
 800cf62:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cf64:	68fb      	ldr	r3, [r7, #12]
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3714      	adds	r7, #20
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr

0800cf72 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cf72:	b480      	push	{r7}
 800cf74:	b087      	sub	sp, #28
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	3301      	adds	r3, #1
 800cf88:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cf90:	8a3b      	ldrh	r3, [r7, #16]
 800cf92:	021b      	lsls	r3, r3, #8
 800cf94:	b21a      	sxth	r2, r3
 800cf96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	b21b      	sxth	r3, r3
 800cf9e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cfa0:	89fb      	ldrh	r3, [r7, #14]
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	371c      	adds	r7, #28
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfac:	4770      	bx	lr
	...

0800cfb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cfc6:	2b40      	cmp	r3, #64	@ 0x40
 800cfc8:	d005      	beq.n	800cfd6 <USBD_StdDevReq+0x26>
 800cfca:	2b40      	cmp	r3, #64	@ 0x40
 800cfcc:	d857      	bhi.n	800d07e <USBD_StdDevReq+0xce>
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00f      	beq.n	800cff2 <USBD_StdDevReq+0x42>
 800cfd2:	2b20      	cmp	r3, #32
 800cfd4:	d153      	bne.n	800d07e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	32ae      	adds	r2, #174	@ 0xae
 800cfe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfe4:	689b      	ldr	r3, [r3, #8]
 800cfe6:	6839      	ldr	r1, [r7, #0]
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	4798      	blx	r3
 800cfec:	4603      	mov	r3, r0
 800cfee:	73fb      	strb	r3, [r7, #15]
      break;
 800cff0:	e04a      	b.n	800d088 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	785b      	ldrb	r3, [r3, #1]
 800cff6:	2b09      	cmp	r3, #9
 800cff8:	d83b      	bhi.n	800d072 <USBD_StdDevReq+0xc2>
 800cffa:	a201      	add	r2, pc, #4	@ (adr r2, 800d000 <USBD_StdDevReq+0x50>)
 800cffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d000:	0800d055 	.word	0x0800d055
 800d004:	0800d069 	.word	0x0800d069
 800d008:	0800d073 	.word	0x0800d073
 800d00c:	0800d05f 	.word	0x0800d05f
 800d010:	0800d073 	.word	0x0800d073
 800d014:	0800d033 	.word	0x0800d033
 800d018:	0800d029 	.word	0x0800d029
 800d01c:	0800d073 	.word	0x0800d073
 800d020:	0800d04b 	.word	0x0800d04b
 800d024:	0800d03d 	.word	0x0800d03d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d028:	6839      	ldr	r1, [r7, #0]
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 fa3c 	bl	800d4a8 <USBD_GetDescriptor>
          break;
 800d030:	e024      	b.n	800d07c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 fba1 	bl	800d77c <USBD_SetAddress>
          break;
 800d03a:	e01f      	b.n	800d07c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d03c:	6839      	ldr	r1, [r7, #0]
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 fbe0 	bl	800d804 <USBD_SetConfig>
 800d044:	4603      	mov	r3, r0
 800d046:	73fb      	strb	r3, [r7, #15]
          break;
 800d048:	e018      	b.n	800d07c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d04a:	6839      	ldr	r1, [r7, #0]
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 fc83 	bl	800d958 <USBD_GetConfig>
          break;
 800d052:	e013      	b.n	800d07c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d054:	6839      	ldr	r1, [r7, #0]
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 fcb4 	bl	800d9c4 <USBD_GetStatus>
          break;
 800d05c:	e00e      	b.n	800d07c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d05e:	6839      	ldr	r1, [r7, #0]
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f000 fce3 	bl	800da2c <USBD_SetFeature>
          break;
 800d066:	e009      	b.n	800d07c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d068:	6839      	ldr	r1, [r7, #0]
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 fd07 	bl	800da7e <USBD_ClrFeature>
          break;
 800d070:	e004      	b.n	800d07c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d072:	6839      	ldr	r1, [r7, #0]
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f000 fd5e 	bl	800db36 <USBD_CtlError>
          break;
 800d07a:	bf00      	nop
      }
      break;
 800d07c:	e004      	b.n	800d088 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d07e:	6839      	ldr	r1, [r7, #0]
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 fd58 	bl	800db36 <USBD_CtlError>
      break;
 800d086:	bf00      	nop
  }

  return ret;
 800d088:	7bfb      	ldrb	r3, [r7, #15]
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3710      	adds	r7, #16
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop

0800d094 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d0aa:	2b40      	cmp	r3, #64	@ 0x40
 800d0ac:	d005      	beq.n	800d0ba <USBD_StdItfReq+0x26>
 800d0ae:	2b40      	cmp	r3, #64	@ 0x40
 800d0b0:	d852      	bhi.n	800d158 <USBD_StdItfReq+0xc4>
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d001      	beq.n	800d0ba <USBD_StdItfReq+0x26>
 800d0b6:	2b20      	cmp	r3, #32
 800d0b8:	d14e      	bne.n	800d158 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d0c0:	b2db      	uxtb	r3, r3
 800d0c2:	3b01      	subs	r3, #1
 800d0c4:	2b02      	cmp	r3, #2
 800d0c6:	d840      	bhi.n	800d14a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	889b      	ldrh	r3, [r3, #4]
 800d0cc:	b2db      	uxtb	r3, r3
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	d836      	bhi.n	800d140 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	889b      	ldrh	r3, [r3, #4]
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	4619      	mov	r1, r3
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f7ff fedb 	bl	800ce96 <USBD_CoreFindIF>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d0e4:	7bbb      	ldrb	r3, [r7, #14]
 800d0e6:	2bff      	cmp	r3, #255	@ 0xff
 800d0e8:	d01d      	beq.n	800d126 <USBD_StdItfReq+0x92>
 800d0ea:	7bbb      	ldrb	r3, [r7, #14]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d11a      	bne.n	800d126 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d0f0:	7bba      	ldrb	r2, [r7, #14]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	32ae      	adds	r2, #174	@ 0xae
 800d0f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0fa:	689b      	ldr	r3, [r3, #8]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d00f      	beq.n	800d120 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d100:	7bba      	ldrb	r2, [r7, #14]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d108:	7bba      	ldrb	r2, [r7, #14]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	32ae      	adds	r2, #174	@ 0xae
 800d10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	6839      	ldr	r1, [r7, #0]
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	4798      	blx	r3
 800d11a:	4603      	mov	r3, r0
 800d11c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d11e:	e004      	b.n	800d12a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d120:	2303      	movs	r3, #3
 800d122:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d124:	e001      	b.n	800d12a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d126:	2303      	movs	r3, #3
 800d128:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	88db      	ldrh	r3, [r3, #6]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d110      	bne.n	800d154 <USBD_StdItfReq+0xc0>
 800d132:	7bfb      	ldrb	r3, [r7, #15]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d10d      	bne.n	800d154 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 fdd3 	bl	800dce4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d13e:	e009      	b.n	800d154 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d140:	6839      	ldr	r1, [r7, #0]
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 fcf7 	bl	800db36 <USBD_CtlError>
          break;
 800d148:	e004      	b.n	800d154 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d14a:	6839      	ldr	r1, [r7, #0]
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 fcf2 	bl	800db36 <USBD_CtlError>
          break;
 800d152:	e000      	b.n	800d156 <USBD_StdItfReq+0xc2>
          break;
 800d154:	bf00      	nop
      }
      break;
 800d156:	e004      	b.n	800d162 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d158:	6839      	ldr	r1, [r7, #0]
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 fceb 	bl	800db36 <USBD_CtlError>
      break;
 800d160:	bf00      	nop
  }

  return ret;
 800d162:	7bfb      	ldrb	r3, [r7, #15]
}
 800d164:	4618      	mov	r0, r3
 800d166:	3710      	adds	r7, #16
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d176:	2300      	movs	r3, #0
 800d178:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	889b      	ldrh	r3, [r3, #4]
 800d17e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d188:	2b40      	cmp	r3, #64	@ 0x40
 800d18a:	d007      	beq.n	800d19c <USBD_StdEPReq+0x30>
 800d18c:	2b40      	cmp	r3, #64	@ 0x40
 800d18e:	f200 817f 	bhi.w	800d490 <USBD_StdEPReq+0x324>
 800d192:	2b00      	cmp	r3, #0
 800d194:	d02a      	beq.n	800d1ec <USBD_StdEPReq+0x80>
 800d196:	2b20      	cmp	r3, #32
 800d198:	f040 817a 	bne.w	800d490 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d19c:	7bbb      	ldrb	r3, [r7, #14]
 800d19e:	4619      	mov	r1, r3
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f7ff fe85 	bl	800ceb0 <USBD_CoreFindEP>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1aa:	7b7b      	ldrb	r3, [r7, #13]
 800d1ac:	2bff      	cmp	r3, #255	@ 0xff
 800d1ae:	f000 8174 	beq.w	800d49a <USBD_StdEPReq+0x32e>
 800d1b2:	7b7b      	ldrb	r3, [r7, #13]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f040 8170 	bne.w	800d49a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d1ba:	7b7a      	ldrb	r2, [r7, #13]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d1c2:	7b7a      	ldrb	r2, [r7, #13]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	32ae      	adds	r2, #174	@ 0xae
 800d1c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1cc:	689b      	ldr	r3, [r3, #8]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	f000 8163 	beq.w	800d49a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d1d4:	7b7a      	ldrb	r2, [r7, #13]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	32ae      	adds	r2, #174	@ 0xae
 800d1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1de:	689b      	ldr	r3, [r3, #8]
 800d1e0:	6839      	ldr	r1, [r7, #0]
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	4798      	blx	r3
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d1ea:	e156      	b.n	800d49a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	785b      	ldrb	r3, [r3, #1]
 800d1f0:	2b03      	cmp	r3, #3
 800d1f2:	d008      	beq.n	800d206 <USBD_StdEPReq+0x9a>
 800d1f4:	2b03      	cmp	r3, #3
 800d1f6:	f300 8145 	bgt.w	800d484 <USBD_StdEPReq+0x318>
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	f000 809b 	beq.w	800d336 <USBD_StdEPReq+0x1ca>
 800d200:	2b01      	cmp	r3, #1
 800d202:	d03c      	beq.n	800d27e <USBD_StdEPReq+0x112>
 800d204:	e13e      	b.n	800d484 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	2b02      	cmp	r3, #2
 800d210:	d002      	beq.n	800d218 <USBD_StdEPReq+0xac>
 800d212:	2b03      	cmp	r3, #3
 800d214:	d016      	beq.n	800d244 <USBD_StdEPReq+0xd8>
 800d216:	e02c      	b.n	800d272 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d218:	7bbb      	ldrb	r3, [r7, #14]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d00d      	beq.n	800d23a <USBD_StdEPReq+0xce>
 800d21e:	7bbb      	ldrb	r3, [r7, #14]
 800d220:	2b80      	cmp	r3, #128	@ 0x80
 800d222:	d00a      	beq.n	800d23a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d224:	7bbb      	ldrb	r3, [r7, #14]
 800d226:	4619      	mov	r1, r3
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f004 f8ef 	bl	801140c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d22e:	2180      	movs	r1, #128	@ 0x80
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f004 f8eb 	bl	801140c <USBD_LL_StallEP>
 800d236:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d238:	e020      	b.n	800d27c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d23a:	6839      	ldr	r1, [r7, #0]
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 fc7a 	bl	800db36 <USBD_CtlError>
              break;
 800d242:	e01b      	b.n	800d27c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	885b      	ldrh	r3, [r3, #2]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d10e      	bne.n	800d26a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d24c:	7bbb      	ldrb	r3, [r7, #14]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d00b      	beq.n	800d26a <USBD_StdEPReq+0xfe>
 800d252:	7bbb      	ldrb	r3, [r7, #14]
 800d254:	2b80      	cmp	r3, #128	@ 0x80
 800d256:	d008      	beq.n	800d26a <USBD_StdEPReq+0xfe>
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	88db      	ldrh	r3, [r3, #6]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d104      	bne.n	800d26a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d260:	7bbb      	ldrb	r3, [r7, #14]
 800d262:	4619      	mov	r1, r3
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f004 f8d1 	bl	801140c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 fd3a 	bl	800dce4 <USBD_CtlSendStatus>

              break;
 800d270:	e004      	b.n	800d27c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d272:	6839      	ldr	r1, [r7, #0]
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f000 fc5e 	bl	800db36 <USBD_CtlError>
              break;
 800d27a:	bf00      	nop
          }
          break;
 800d27c:	e107      	b.n	800d48e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d284:	b2db      	uxtb	r3, r3
 800d286:	2b02      	cmp	r3, #2
 800d288:	d002      	beq.n	800d290 <USBD_StdEPReq+0x124>
 800d28a:	2b03      	cmp	r3, #3
 800d28c:	d016      	beq.n	800d2bc <USBD_StdEPReq+0x150>
 800d28e:	e04b      	b.n	800d328 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d290:	7bbb      	ldrb	r3, [r7, #14]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00d      	beq.n	800d2b2 <USBD_StdEPReq+0x146>
 800d296:	7bbb      	ldrb	r3, [r7, #14]
 800d298:	2b80      	cmp	r3, #128	@ 0x80
 800d29a:	d00a      	beq.n	800d2b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d29c:	7bbb      	ldrb	r3, [r7, #14]
 800d29e:	4619      	mov	r1, r3
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f004 f8b3 	bl	801140c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d2a6:	2180      	movs	r1, #128	@ 0x80
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f004 f8af 	bl	801140c <USBD_LL_StallEP>
 800d2ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d2b0:	e040      	b.n	800d334 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d2b2:	6839      	ldr	r1, [r7, #0]
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 fc3e 	bl	800db36 <USBD_CtlError>
              break;
 800d2ba:	e03b      	b.n	800d334 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	885b      	ldrh	r3, [r3, #2]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d136      	bne.n	800d332 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d2c4:	7bbb      	ldrb	r3, [r7, #14]
 800d2c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d004      	beq.n	800d2d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d2ce:	7bbb      	ldrb	r3, [r7, #14]
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f004 f8b9 	bl	801144a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f000 fd03 	bl	800dce4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d2de:	7bbb      	ldrb	r3, [r7, #14]
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f7ff fde4 	bl	800ceb0 <USBD_CoreFindEP>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2ec:	7b7b      	ldrb	r3, [r7, #13]
 800d2ee:	2bff      	cmp	r3, #255	@ 0xff
 800d2f0:	d01f      	beq.n	800d332 <USBD_StdEPReq+0x1c6>
 800d2f2:	7b7b      	ldrb	r3, [r7, #13]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d11c      	bne.n	800d332 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d2f8:	7b7a      	ldrb	r2, [r7, #13]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d300:	7b7a      	ldrb	r2, [r7, #13]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	32ae      	adds	r2, #174	@ 0xae
 800d306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d010      	beq.n	800d332 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d310:	7b7a      	ldrb	r2, [r7, #13]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	32ae      	adds	r2, #174	@ 0xae
 800d316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	6839      	ldr	r1, [r7, #0]
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	4798      	blx	r3
 800d322:	4603      	mov	r3, r0
 800d324:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d326:	e004      	b.n	800d332 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d328:	6839      	ldr	r1, [r7, #0]
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f000 fc03 	bl	800db36 <USBD_CtlError>
              break;
 800d330:	e000      	b.n	800d334 <USBD_StdEPReq+0x1c8>
              break;
 800d332:	bf00      	nop
          }
          break;
 800d334:	e0ab      	b.n	800d48e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d33c:	b2db      	uxtb	r3, r3
 800d33e:	2b02      	cmp	r3, #2
 800d340:	d002      	beq.n	800d348 <USBD_StdEPReq+0x1dc>
 800d342:	2b03      	cmp	r3, #3
 800d344:	d032      	beq.n	800d3ac <USBD_StdEPReq+0x240>
 800d346:	e097      	b.n	800d478 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d348:	7bbb      	ldrb	r3, [r7, #14]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d007      	beq.n	800d35e <USBD_StdEPReq+0x1f2>
 800d34e:	7bbb      	ldrb	r3, [r7, #14]
 800d350:	2b80      	cmp	r3, #128	@ 0x80
 800d352:	d004      	beq.n	800d35e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d354:	6839      	ldr	r1, [r7, #0]
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f000 fbed 	bl	800db36 <USBD_CtlError>
                break;
 800d35c:	e091      	b.n	800d482 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d35e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d362:	2b00      	cmp	r3, #0
 800d364:	da0b      	bge.n	800d37e <USBD_StdEPReq+0x212>
 800d366:	7bbb      	ldrb	r3, [r7, #14]
 800d368:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d36c:	4613      	mov	r3, r2
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	4413      	add	r3, r2
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	3310      	adds	r3, #16
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	4413      	add	r3, r2
 800d37a:	3304      	adds	r3, #4
 800d37c:	e00b      	b.n	800d396 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d37e:	7bbb      	ldrb	r3, [r7, #14]
 800d380:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d384:	4613      	mov	r3, r2
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	4413      	add	r3, r2
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	4413      	add	r3, r2
 800d394:	3304      	adds	r3, #4
 800d396:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	2200      	movs	r2, #0
 800d39c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	2202      	movs	r2, #2
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	f000 fc43 	bl	800dc30 <USBD_CtlSendData>
              break;
 800d3aa:	e06a      	b.n	800d482 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d3ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	da11      	bge.n	800d3d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d3b4:	7bbb      	ldrb	r3, [r7, #14]
 800d3b6:	f003 020f 	and.w	r2, r3, #15
 800d3ba:	6879      	ldr	r1, [r7, #4]
 800d3bc:	4613      	mov	r3, r2
 800d3be:	009b      	lsls	r3, r3, #2
 800d3c0:	4413      	add	r3, r2
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	440b      	add	r3, r1
 800d3c6:	3324      	adds	r3, #36	@ 0x24
 800d3c8:	881b      	ldrh	r3, [r3, #0]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d117      	bne.n	800d3fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d3ce:	6839      	ldr	r1, [r7, #0]
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f000 fbb0 	bl	800db36 <USBD_CtlError>
                  break;
 800d3d6:	e054      	b.n	800d482 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d3d8:	7bbb      	ldrb	r3, [r7, #14]
 800d3da:	f003 020f 	and.w	r2, r3, #15
 800d3de:	6879      	ldr	r1, [r7, #4]
 800d3e0:	4613      	mov	r3, r2
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	4413      	add	r3, r2
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	440b      	add	r3, r1
 800d3ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d3ee:	881b      	ldrh	r3, [r3, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d104      	bne.n	800d3fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d3f4:	6839      	ldr	r1, [r7, #0]
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 fb9d 	bl	800db36 <USBD_CtlError>
                  break;
 800d3fc:	e041      	b.n	800d482 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d402:	2b00      	cmp	r3, #0
 800d404:	da0b      	bge.n	800d41e <USBD_StdEPReq+0x2b2>
 800d406:	7bbb      	ldrb	r3, [r7, #14]
 800d408:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d40c:	4613      	mov	r3, r2
 800d40e:	009b      	lsls	r3, r3, #2
 800d410:	4413      	add	r3, r2
 800d412:	009b      	lsls	r3, r3, #2
 800d414:	3310      	adds	r3, #16
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	4413      	add	r3, r2
 800d41a:	3304      	adds	r3, #4
 800d41c:	e00b      	b.n	800d436 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d41e:	7bbb      	ldrb	r3, [r7, #14]
 800d420:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d424:	4613      	mov	r3, r2
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	4413      	add	r3, r2
 800d42a:	009b      	lsls	r3, r3, #2
 800d42c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	4413      	add	r3, r2
 800d434:	3304      	adds	r3, #4
 800d436:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d438:	7bbb      	ldrb	r3, [r7, #14]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d002      	beq.n	800d444 <USBD_StdEPReq+0x2d8>
 800d43e:	7bbb      	ldrb	r3, [r7, #14]
 800d440:	2b80      	cmp	r3, #128	@ 0x80
 800d442:	d103      	bne.n	800d44c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	2200      	movs	r2, #0
 800d448:	601a      	str	r2, [r3, #0]
 800d44a:	e00e      	b.n	800d46a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d44c:	7bbb      	ldrb	r3, [r7, #14]
 800d44e:	4619      	mov	r1, r3
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f004 f819 	bl	8011488 <USBD_LL_IsStallEP>
 800d456:	4603      	mov	r3, r0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d003      	beq.n	800d464 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	2201      	movs	r2, #1
 800d460:	601a      	str	r2, [r3, #0]
 800d462:	e002      	b.n	800d46a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	2200      	movs	r2, #0
 800d468:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	2202      	movs	r2, #2
 800d46e:	4619      	mov	r1, r3
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fbdd 	bl	800dc30 <USBD_CtlSendData>
              break;
 800d476:	e004      	b.n	800d482 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d478:	6839      	ldr	r1, [r7, #0]
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 fb5b 	bl	800db36 <USBD_CtlError>
              break;
 800d480:	bf00      	nop
          }
          break;
 800d482:	e004      	b.n	800d48e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d484:	6839      	ldr	r1, [r7, #0]
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 fb55 	bl	800db36 <USBD_CtlError>
          break;
 800d48c:	bf00      	nop
      }
      break;
 800d48e:	e005      	b.n	800d49c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d490:	6839      	ldr	r1, [r7, #0]
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f000 fb4f 	bl	800db36 <USBD_CtlError>
      break;
 800d498:	e000      	b.n	800d49c <USBD_StdEPReq+0x330>
      break;
 800d49a:	bf00      	nop
  }

  return ret;
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
	...

0800d4a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	885b      	ldrh	r3, [r3, #2]
 800d4c2:	0a1b      	lsrs	r3, r3, #8
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	3b01      	subs	r3, #1
 800d4c8:	2b06      	cmp	r3, #6
 800d4ca:	f200 8128 	bhi.w	800d71e <USBD_GetDescriptor+0x276>
 800d4ce:	a201      	add	r2, pc, #4	@ (adr r2, 800d4d4 <USBD_GetDescriptor+0x2c>)
 800d4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4d4:	0800d4f1 	.word	0x0800d4f1
 800d4d8:	0800d509 	.word	0x0800d509
 800d4dc:	0800d549 	.word	0x0800d549
 800d4e0:	0800d71f 	.word	0x0800d71f
 800d4e4:	0800d71f 	.word	0x0800d71f
 800d4e8:	0800d6bf 	.word	0x0800d6bf
 800d4ec:	0800d6eb 	.word	0x0800d6eb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	687a      	ldr	r2, [r7, #4]
 800d4fa:	7c12      	ldrb	r2, [r2, #16]
 800d4fc:	f107 0108 	add.w	r1, r7, #8
 800d500:	4610      	mov	r0, r2
 800d502:	4798      	blx	r3
 800d504:	60f8      	str	r0, [r7, #12]
      break;
 800d506:	e112      	b.n	800d72e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	7c1b      	ldrb	r3, [r3, #16]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d10d      	bne.n	800d52c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d518:	f107 0208 	add.w	r2, r7, #8
 800d51c:	4610      	mov	r0, r2
 800d51e:	4798      	blx	r3
 800d520:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	3301      	adds	r3, #1
 800d526:	2202      	movs	r2, #2
 800d528:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d52a:	e100      	b.n	800d72e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d534:	f107 0208 	add.w	r2, r7, #8
 800d538:	4610      	mov	r0, r2
 800d53a:	4798      	blx	r3
 800d53c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	3301      	adds	r3, #1
 800d542:	2202      	movs	r2, #2
 800d544:	701a      	strb	r2, [r3, #0]
      break;
 800d546:	e0f2      	b.n	800d72e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	885b      	ldrh	r3, [r3, #2]
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	2b05      	cmp	r3, #5
 800d550:	f200 80ac 	bhi.w	800d6ac <USBD_GetDescriptor+0x204>
 800d554:	a201      	add	r2, pc, #4	@ (adr r2, 800d55c <USBD_GetDescriptor+0xb4>)
 800d556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d55a:	bf00      	nop
 800d55c:	0800d575 	.word	0x0800d575
 800d560:	0800d5a9 	.word	0x0800d5a9
 800d564:	0800d5dd 	.word	0x0800d5dd
 800d568:	0800d611 	.word	0x0800d611
 800d56c:	0800d645 	.word	0x0800d645
 800d570:	0800d679 	.word	0x0800d679
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d00b      	beq.n	800d598 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	687a      	ldr	r2, [r7, #4]
 800d58a:	7c12      	ldrb	r2, [r2, #16]
 800d58c:	f107 0108 	add.w	r1, r7, #8
 800d590:	4610      	mov	r0, r2
 800d592:	4798      	blx	r3
 800d594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d596:	e091      	b.n	800d6bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d598:	6839      	ldr	r1, [r7, #0]
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f000 facb 	bl	800db36 <USBD_CtlError>
            err++;
 800d5a0:	7afb      	ldrb	r3, [r7, #11]
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	72fb      	strb	r3, [r7, #11]
          break;
 800d5a6:	e089      	b.n	800d6bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5ae:	689b      	ldr	r3, [r3, #8]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00b      	beq.n	800d5cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5ba:	689b      	ldr	r3, [r3, #8]
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	7c12      	ldrb	r2, [r2, #16]
 800d5c0:	f107 0108 	add.w	r1, r7, #8
 800d5c4:	4610      	mov	r0, r2
 800d5c6:	4798      	blx	r3
 800d5c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5ca:	e077      	b.n	800d6bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d5cc:	6839      	ldr	r1, [r7, #0]
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 fab1 	bl	800db36 <USBD_CtlError>
            err++;
 800d5d4:	7afb      	ldrb	r3, [r7, #11]
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	72fb      	strb	r3, [r7, #11]
          break;
 800d5da:	e06f      	b.n	800d6bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d00b      	beq.n	800d600 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	7c12      	ldrb	r2, [r2, #16]
 800d5f4:	f107 0108 	add.w	r1, r7, #8
 800d5f8:	4610      	mov	r0, r2
 800d5fa:	4798      	blx	r3
 800d5fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5fe:	e05d      	b.n	800d6bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d600:	6839      	ldr	r1, [r7, #0]
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 fa97 	bl	800db36 <USBD_CtlError>
            err++;
 800d608:	7afb      	ldrb	r3, [r7, #11]
 800d60a:	3301      	adds	r3, #1
 800d60c:	72fb      	strb	r3, [r7, #11]
          break;
 800d60e:	e055      	b.n	800d6bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d616:	691b      	ldr	r3, [r3, #16]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d00b      	beq.n	800d634 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d622:	691b      	ldr	r3, [r3, #16]
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	7c12      	ldrb	r2, [r2, #16]
 800d628:	f107 0108 	add.w	r1, r7, #8
 800d62c:	4610      	mov	r0, r2
 800d62e:	4798      	blx	r3
 800d630:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d632:	e043      	b.n	800d6bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d634:	6839      	ldr	r1, [r7, #0]
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f000 fa7d 	bl	800db36 <USBD_CtlError>
            err++;
 800d63c:	7afb      	ldrb	r3, [r7, #11]
 800d63e:	3301      	adds	r3, #1
 800d640:	72fb      	strb	r3, [r7, #11]
          break;
 800d642:	e03b      	b.n	800d6bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d64a:	695b      	ldr	r3, [r3, #20]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d00b      	beq.n	800d668 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d656:	695b      	ldr	r3, [r3, #20]
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	7c12      	ldrb	r2, [r2, #16]
 800d65c:	f107 0108 	add.w	r1, r7, #8
 800d660:	4610      	mov	r0, r2
 800d662:	4798      	blx	r3
 800d664:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d666:	e029      	b.n	800d6bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d668:	6839      	ldr	r1, [r7, #0]
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 fa63 	bl	800db36 <USBD_CtlError>
            err++;
 800d670:	7afb      	ldrb	r3, [r7, #11]
 800d672:	3301      	adds	r3, #1
 800d674:	72fb      	strb	r3, [r7, #11]
          break;
 800d676:	e021      	b.n	800d6bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d67e:	699b      	ldr	r3, [r3, #24]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d00b      	beq.n	800d69c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d68a:	699b      	ldr	r3, [r3, #24]
 800d68c:	687a      	ldr	r2, [r7, #4]
 800d68e:	7c12      	ldrb	r2, [r2, #16]
 800d690:	f107 0108 	add.w	r1, r7, #8
 800d694:	4610      	mov	r0, r2
 800d696:	4798      	blx	r3
 800d698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d69a:	e00f      	b.n	800d6bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d69c:	6839      	ldr	r1, [r7, #0]
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 fa49 	bl	800db36 <USBD_CtlError>
            err++;
 800d6a4:	7afb      	ldrb	r3, [r7, #11]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	72fb      	strb	r3, [r7, #11]
          break;
 800d6aa:	e007      	b.n	800d6bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d6ac:	6839      	ldr	r1, [r7, #0]
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 fa41 	bl	800db36 <USBD_CtlError>
          err++;
 800d6b4:	7afb      	ldrb	r3, [r7, #11]
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d6ba:	bf00      	nop
      }
      break;
 800d6bc:	e037      	b.n	800d72e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	7c1b      	ldrb	r3, [r3, #16]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d109      	bne.n	800d6da <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6ce:	f107 0208 	add.w	r2, r7, #8
 800d6d2:	4610      	mov	r0, r2
 800d6d4:	4798      	blx	r3
 800d6d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d6d8:	e029      	b.n	800d72e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d6da:	6839      	ldr	r1, [r7, #0]
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f000 fa2a 	bl	800db36 <USBD_CtlError>
        err++;
 800d6e2:	7afb      	ldrb	r3, [r7, #11]
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	72fb      	strb	r3, [r7, #11]
      break;
 800d6e8:	e021      	b.n	800d72e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	7c1b      	ldrb	r3, [r3, #16]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d10d      	bne.n	800d70e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6fa:	f107 0208 	add.w	r2, r7, #8
 800d6fe:	4610      	mov	r0, r2
 800d700:	4798      	blx	r3
 800d702:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	3301      	adds	r3, #1
 800d708:	2207      	movs	r2, #7
 800d70a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d70c:	e00f      	b.n	800d72e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d70e:	6839      	ldr	r1, [r7, #0]
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 fa10 	bl	800db36 <USBD_CtlError>
        err++;
 800d716:	7afb      	ldrb	r3, [r7, #11]
 800d718:	3301      	adds	r3, #1
 800d71a:	72fb      	strb	r3, [r7, #11]
      break;
 800d71c:	e007      	b.n	800d72e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d71e:	6839      	ldr	r1, [r7, #0]
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f000 fa08 	bl	800db36 <USBD_CtlError>
      err++;
 800d726:	7afb      	ldrb	r3, [r7, #11]
 800d728:	3301      	adds	r3, #1
 800d72a:	72fb      	strb	r3, [r7, #11]
      break;
 800d72c:	bf00      	nop
  }

  if (err != 0U)
 800d72e:	7afb      	ldrb	r3, [r7, #11]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d11e      	bne.n	800d772 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	88db      	ldrh	r3, [r3, #6]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d016      	beq.n	800d76a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d73c:	893b      	ldrh	r3, [r7, #8]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d00e      	beq.n	800d760 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	88da      	ldrh	r2, [r3, #6]
 800d746:	893b      	ldrh	r3, [r7, #8]
 800d748:	4293      	cmp	r3, r2
 800d74a:	bf28      	it	cs
 800d74c:	4613      	movcs	r3, r2
 800d74e:	b29b      	uxth	r3, r3
 800d750:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d752:	893b      	ldrh	r3, [r7, #8]
 800d754:	461a      	mov	r2, r3
 800d756:	68f9      	ldr	r1, [r7, #12]
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f000 fa69 	bl	800dc30 <USBD_CtlSendData>
 800d75e:	e009      	b.n	800d774 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d760:	6839      	ldr	r1, [r7, #0]
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 f9e7 	bl	800db36 <USBD_CtlError>
 800d768:	e004      	b.n	800d774 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 faba 	bl	800dce4 <USBD_CtlSendStatus>
 800d770:	e000      	b.n	800d774 <USBD_GetDescriptor+0x2cc>
    return;
 800d772:	bf00      	nop
  }
}
 800d774:	3710      	adds	r7, #16
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop

0800d77c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	889b      	ldrh	r3, [r3, #4]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d131      	bne.n	800d7f2 <USBD_SetAddress+0x76>
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	88db      	ldrh	r3, [r3, #6]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d12d      	bne.n	800d7f2 <USBD_SetAddress+0x76>
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	885b      	ldrh	r3, [r3, #2]
 800d79a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d79c:	d829      	bhi.n	800d7f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	885b      	ldrh	r3, [r3, #2]
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	2b03      	cmp	r3, #3
 800d7b4:	d104      	bne.n	800d7c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d7b6:	6839      	ldr	r1, [r7, #0]
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f000 f9bc 	bl	800db36 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7be:	e01d      	b.n	800d7fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	7bfa      	ldrb	r2, [r7, #15]
 800d7c4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d7c8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f003 fe87 	bl	80114e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f000 fa86 	bl	800dce4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d004      	beq.n	800d7e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2202      	movs	r2, #2
 800d7e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7e6:	e009      	b.n	800d7fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2201      	movs	r2, #1
 800d7ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7f0:	e004      	b.n	800d7fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d7f2:	6839      	ldr	r1, [r7, #0]
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f000 f99e 	bl	800db36 <USBD_CtlError>
  }
}
 800d7fa:	bf00      	nop
 800d7fc:	bf00      	nop
 800d7fe:	3710      	adds	r7, #16
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b084      	sub	sp, #16
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
 800d80c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d80e:	2300      	movs	r3, #0
 800d810:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	885b      	ldrh	r3, [r3, #2]
 800d816:	b2da      	uxtb	r2, r3
 800d818:	4b4e      	ldr	r3, [pc, #312]	@ (800d954 <USBD_SetConfig+0x150>)
 800d81a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d81c:	4b4d      	ldr	r3, [pc, #308]	@ (800d954 <USBD_SetConfig+0x150>)
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	2b01      	cmp	r3, #1
 800d822:	d905      	bls.n	800d830 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d824:	6839      	ldr	r1, [r7, #0]
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 f985 	bl	800db36 <USBD_CtlError>
    return USBD_FAIL;
 800d82c:	2303      	movs	r3, #3
 800d82e:	e08c      	b.n	800d94a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d836:	b2db      	uxtb	r3, r3
 800d838:	2b02      	cmp	r3, #2
 800d83a:	d002      	beq.n	800d842 <USBD_SetConfig+0x3e>
 800d83c:	2b03      	cmp	r3, #3
 800d83e:	d029      	beq.n	800d894 <USBD_SetConfig+0x90>
 800d840:	e075      	b.n	800d92e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d842:	4b44      	ldr	r3, [pc, #272]	@ (800d954 <USBD_SetConfig+0x150>)
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d020      	beq.n	800d88c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d84a:	4b42      	ldr	r3, [pc, #264]	@ (800d954 <USBD_SetConfig+0x150>)
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	461a      	mov	r2, r3
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d854:	4b3f      	ldr	r3, [pc, #252]	@ (800d954 <USBD_SetConfig+0x150>)
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	4619      	mov	r1, r3
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f7fe ffe3 	bl	800c826 <USBD_SetClassConfig>
 800d860:	4603      	mov	r3, r0
 800d862:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d864:	7bfb      	ldrb	r3, [r7, #15]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d008      	beq.n	800d87c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d86a:	6839      	ldr	r1, [r7, #0]
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f000 f962 	bl	800db36 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2202      	movs	r2, #2
 800d876:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d87a:	e065      	b.n	800d948 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 fa31 	bl	800dce4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2203      	movs	r2, #3
 800d886:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d88a:	e05d      	b.n	800d948 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 fa29 	bl	800dce4 <USBD_CtlSendStatus>
      break;
 800d892:	e059      	b.n	800d948 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d894:	4b2f      	ldr	r3, [pc, #188]	@ (800d954 <USBD_SetConfig+0x150>)
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d112      	bne.n	800d8c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2202      	movs	r2, #2
 800d8a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d8a4:	4b2b      	ldr	r3, [pc, #172]	@ (800d954 <USBD_SetConfig+0x150>)
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	461a      	mov	r2, r3
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d8ae:	4b29      	ldr	r3, [pc, #164]	@ (800d954 <USBD_SetConfig+0x150>)
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f7fe ffd2 	bl	800c85e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f000 fa12 	bl	800dce4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d8c0:	e042      	b.n	800d948 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d8c2:	4b24      	ldr	r3, [pc, #144]	@ (800d954 <USBD_SetConfig+0x150>)
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	685b      	ldr	r3, [r3, #4]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d02a      	beq.n	800d926 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	b2db      	uxtb	r3, r3
 800d8d6:	4619      	mov	r1, r3
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f7fe ffc0 	bl	800c85e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d8de:	4b1d      	ldr	r3, [pc, #116]	@ (800d954 <USBD_SetConfig+0x150>)
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d8e8:	4b1a      	ldr	r3, [pc, #104]	@ (800d954 <USBD_SetConfig+0x150>)
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f7fe ff99 	bl	800c826 <USBD_SetClassConfig>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d8f8:	7bfb      	ldrb	r3, [r7, #15]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d00f      	beq.n	800d91e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d8fe:	6839      	ldr	r1, [r7, #0]
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 f918 	bl	800db36 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	685b      	ldr	r3, [r3, #4]
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	4619      	mov	r1, r3
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f7fe ffa5 	bl	800c85e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2202      	movs	r2, #2
 800d918:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d91c:	e014      	b.n	800d948 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 f9e0 	bl	800dce4 <USBD_CtlSendStatus>
      break;
 800d924:	e010      	b.n	800d948 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 f9dc 	bl	800dce4 <USBD_CtlSendStatus>
      break;
 800d92c:	e00c      	b.n	800d948 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d92e:	6839      	ldr	r1, [r7, #0]
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f000 f900 	bl	800db36 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d936:	4b07      	ldr	r3, [pc, #28]	@ (800d954 <USBD_SetConfig+0x150>)
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	4619      	mov	r1, r3
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f7fe ff8e 	bl	800c85e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d942:	2303      	movs	r3, #3
 800d944:	73fb      	strb	r3, [r7, #15]
      break;
 800d946:	bf00      	nop
  }

  return ret;
 800d948:	7bfb      	ldrb	r3, [r7, #15]
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	2000b480 	.word	0x2000b480

0800d958 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	88db      	ldrh	r3, [r3, #6]
 800d966:	2b01      	cmp	r3, #1
 800d968:	d004      	beq.n	800d974 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d96a:	6839      	ldr	r1, [r7, #0]
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 f8e2 	bl	800db36 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d972:	e023      	b.n	800d9bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	2b02      	cmp	r3, #2
 800d97e:	dc02      	bgt.n	800d986 <USBD_GetConfig+0x2e>
 800d980:	2b00      	cmp	r3, #0
 800d982:	dc03      	bgt.n	800d98c <USBD_GetConfig+0x34>
 800d984:	e015      	b.n	800d9b2 <USBD_GetConfig+0x5a>
 800d986:	2b03      	cmp	r3, #3
 800d988:	d00b      	beq.n	800d9a2 <USBD_GetConfig+0x4a>
 800d98a:	e012      	b.n	800d9b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2200      	movs	r2, #0
 800d990:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	3308      	adds	r3, #8
 800d996:	2201      	movs	r2, #1
 800d998:	4619      	mov	r1, r3
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 f948 	bl	800dc30 <USBD_CtlSendData>
        break;
 800d9a0:	e00c      	b.n	800d9bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	3304      	adds	r3, #4
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 f940 	bl	800dc30 <USBD_CtlSendData>
        break;
 800d9b0:	e004      	b.n	800d9bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d9b2:	6839      	ldr	r1, [r7, #0]
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f000 f8be 	bl	800db36 <USBD_CtlError>
        break;
 800d9ba:	bf00      	nop
}
 800d9bc:	bf00      	nop
 800d9be:	3708      	adds	r7, #8
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	3b01      	subs	r3, #1
 800d9d8:	2b02      	cmp	r3, #2
 800d9da:	d81e      	bhi.n	800da1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	88db      	ldrh	r3, [r3, #6]
 800d9e0:	2b02      	cmp	r3, #2
 800d9e2:	d004      	beq.n	800d9ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d9e4:	6839      	ldr	r1, [r7, #0]
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 f8a5 	bl	800db36 <USBD_CtlError>
        break;
 800d9ec:	e01a      	b.n	800da24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d005      	beq.n	800da0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	f043 0202 	orr.w	r2, r3, #2
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	330c      	adds	r3, #12
 800da0e:	2202      	movs	r2, #2
 800da10:	4619      	mov	r1, r3
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f000 f90c 	bl	800dc30 <USBD_CtlSendData>
      break;
 800da18:	e004      	b.n	800da24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800da1a:	6839      	ldr	r1, [r7, #0]
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f000 f88a 	bl	800db36 <USBD_CtlError>
      break;
 800da22:	bf00      	nop
  }
}
 800da24:	bf00      	nop
 800da26:	3708      	adds	r7, #8
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}

0800da2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	885b      	ldrh	r3, [r3, #2]
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d107      	bne.n	800da4e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2201      	movs	r2, #1
 800da42:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 f94c 	bl	800dce4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800da4c:	e013      	b.n	800da76 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	885b      	ldrh	r3, [r3, #2]
 800da52:	2b02      	cmp	r3, #2
 800da54:	d10b      	bne.n	800da6e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	889b      	ldrh	r3, [r3, #4]
 800da5a:	0a1b      	lsrs	r3, r3, #8
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	b2da      	uxtb	r2, r3
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 f93c 	bl	800dce4 <USBD_CtlSendStatus>
}
 800da6c:	e003      	b.n	800da76 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800da6e:	6839      	ldr	r1, [r7, #0]
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 f860 	bl	800db36 <USBD_CtlError>
}
 800da76:	bf00      	nop
 800da78:	3708      	adds	r7, #8
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}

0800da7e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da7e:	b580      	push	{r7, lr}
 800da80:	b082      	sub	sp, #8
 800da82:	af00      	add	r7, sp, #0
 800da84:	6078      	str	r0, [r7, #4]
 800da86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	3b01      	subs	r3, #1
 800da92:	2b02      	cmp	r3, #2
 800da94:	d80b      	bhi.n	800daae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	885b      	ldrh	r3, [r3, #2]
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d10c      	bne.n	800dab8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f000 f91c 	bl	800dce4 <USBD_CtlSendStatus>
      }
      break;
 800daac:	e004      	b.n	800dab8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800daae:	6839      	ldr	r1, [r7, #0]
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 f840 	bl	800db36 <USBD_CtlError>
      break;
 800dab6:	e000      	b.n	800daba <USBD_ClrFeature+0x3c>
      break;
 800dab8:	bf00      	nop
  }
}
 800daba:	bf00      	nop
 800dabc:	3708      	adds	r7, #8
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}

0800dac2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b084      	sub	sp, #16
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	6078      	str	r0, [r7, #4]
 800daca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	781a      	ldrb	r2, [r3, #0]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	3301      	adds	r3, #1
 800dadc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	781a      	ldrb	r2, [r3, #0]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	3301      	adds	r3, #1
 800daea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800daec:	68f8      	ldr	r0, [r7, #12]
 800daee:	f7ff fa40 	bl	800cf72 <SWAPBYTE>
 800daf2:	4603      	mov	r3, r0
 800daf4:	461a      	mov	r2, r3
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	3301      	adds	r3, #1
 800dafe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	3301      	adds	r3, #1
 800db04:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800db06:	68f8      	ldr	r0, [r7, #12]
 800db08:	f7ff fa33 	bl	800cf72 <SWAPBYTE>
 800db0c:	4603      	mov	r3, r0
 800db0e:	461a      	mov	r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	3301      	adds	r3, #1
 800db18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	3301      	adds	r3, #1
 800db1e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800db20:	68f8      	ldr	r0, [r7, #12]
 800db22:	f7ff fa26 	bl	800cf72 <SWAPBYTE>
 800db26:	4603      	mov	r3, r0
 800db28:	461a      	mov	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	80da      	strh	r2, [r3, #6]
}
 800db2e:	bf00      	nop
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}

0800db36 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db36:	b580      	push	{r7, lr}
 800db38:	b082      	sub	sp, #8
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
 800db3e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800db40:	2180      	movs	r1, #128	@ 0x80
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f003 fc62 	bl	801140c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800db48:	2100      	movs	r1, #0
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f003 fc5e 	bl	801140c <USBD_LL_StallEP>
}
 800db50:	bf00      	nop
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b086      	sub	sp, #24
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	60f8      	str	r0, [r7, #12]
 800db60:	60b9      	str	r1, [r7, #8]
 800db62:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800db64:	2300      	movs	r3, #0
 800db66:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d042      	beq.n	800dbf4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800db72:	6938      	ldr	r0, [r7, #16]
 800db74:	f000 f842 	bl	800dbfc <USBD_GetLen>
 800db78:	4603      	mov	r3, r0
 800db7a:	3301      	adds	r3, #1
 800db7c:	005b      	lsls	r3, r3, #1
 800db7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db82:	d808      	bhi.n	800db96 <USBD_GetString+0x3e>
 800db84:	6938      	ldr	r0, [r7, #16]
 800db86:	f000 f839 	bl	800dbfc <USBD_GetLen>
 800db8a:	4603      	mov	r3, r0
 800db8c:	3301      	adds	r3, #1
 800db8e:	b29b      	uxth	r3, r3
 800db90:	005b      	lsls	r3, r3, #1
 800db92:	b29a      	uxth	r2, r3
 800db94:	e001      	b.n	800db9a <USBD_GetString+0x42>
 800db96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800db9e:	7dfb      	ldrb	r3, [r7, #23]
 800dba0:	68ba      	ldr	r2, [r7, #8]
 800dba2:	4413      	add	r3, r2
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	7812      	ldrb	r2, [r2, #0]
 800dba8:	701a      	strb	r2, [r3, #0]
  idx++;
 800dbaa:	7dfb      	ldrb	r3, [r7, #23]
 800dbac:	3301      	adds	r3, #1
 800dbae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dbb0:	7dfb      	ldrb	r3, [r7, #23]
 800dbb2:	68ba      	ldr	r2, [r7, #8]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	2203      	movs	r2, #3
 800dbb8:	701a      	strb	r2, [r3, #0]
  idx++;
 800dbba:	7dfb      	ldrb	r3, [r7, #23]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dbc0:	e013      	b.n	800dbea <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800dbc2:	7dfb      	ldrb	r3, [r7, #23]
 800dbc4:	68ba      	ldr	r2, [r7, #8]
 800dbc6:	4413      	add	r3, r2
 800dbc8:	693a      	ldr	r2, [r7, #16]
 800dbca:	7812      	ldrb	r2, [r2, #0]
 800dbcc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	613b      	str	r3, [r7, #16]
    idx++;
 800dbd4:	7dfb      	ldrb	r3, [r7, #23]
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dbda:	7dfb      	ldrb	r3, [r7, #23]
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	4413      	add	r3, r2
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	701a      	strb	r2, [r3, #0]
    idx++;
 800dbe4:	7dfb      	ldrb	r3, [r7, #23]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d1e7      	bne.n	800dbc2 <USBD_GetString+0x6a>
 800dbf2:	e000      	b.n	800dbf6 <USBD_GetString+0x9e>
    return;
 800dbf4:	bf00      	nop
  }
}
 800dbf6:	3718      	adds	r7, #24
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b085      	sub	sp, #20
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dc04:	2300      	movs	r3, #0
 800dc06:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dc0c:	e005      	b.n	800dc1a <USBD_GetLen+0x1e>
  {
    len++;
 800dc0e:	7bfb      	ldrb	r3, [r7, #15]
 800dc10:	3301      	adds	r3, #1
 800dc12:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	3301      	adds	r3, #1
 800dc18:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d1f5      	bne.n	800dc0e <USBD_GetLen+0x12>
  }

  return len;
 800dc22:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3714      	adds	r7, #20
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr

0800dc30 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b084      	sub	sp, #16
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	60f8      	str	r0, [r7, #12]
 800dc38:	60b9      	str	r1, [r7, #8]
 800dc3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2202      	movs	r2, #2
 800dc40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	687a      	ldr	r2, [r7, #4]
 800dc48:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	68ba      	ldr	r2, [r7, #8]
 800dc54:	2100      	movs	r1, #0
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f003 fc61 	bl	801151e <USBD_LL_Transmit>

  return USBD_OK;
 800dc5c:	2300      	movs	r3, #0
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3710      	adds	r7, #16
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}

0800dc66 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dc66:	b580      	push	{r7, lr}
 800dc68:	b084      	sub	sp, #16
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	60f8      	str	r0, [r7, #12]
 800dc6e:	60b9      	str	r1, [r7, #8]
 800dc70:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	68ba      	ldr	r2, [r7, #8]
 800dc76:	2100      	movs	r1, #0
 800dc78:	68f8      	ldr	r0, [r7, #12]
 800dc7a:	f003 fc50 	bl	801151e <USBD_LL_Transmit>

  return USBD_OK;
 800dc7e:	2300      	movs	r3, #0
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3710      	adds	r7, #16
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2203      	movs	r2, #3
 800dc98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	68ba      	ldr	r2, [r7, #8]
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	68f8      	ldr	r0, [r7, #12]
 800dcb4:	f003 fc54 	bl	8011560 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcb8:	2300      	movs	r3, #0
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3710      	adds	r7, #16
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}

0800dcc2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dcc2:	b580      	push	{r7, lr}
 800dcc4:	b084      	sub	sp, #16
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	60f8      	str	r0, [r7, #12]
 800dcca:	60b9      	str	r1, [r7, #8]
 800dccc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	68ba      	ldr	r2, [r7, #8]
 800dcd2:	2100      	movs	r1, #0
 800dcd4:	68f8      	ldr	r0, [r7, #12]
 800dcd6:	f003 fc43 	bl	8011560 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcda:	2300      	movs	r3, #0
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3710      	adds	r7, #16
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2204      	movs	r2, #4
 800dcf0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f003 fc0f 	bl	801151e <USBD_LL_Transmit>

  return USBD_OK;
 800dd00:	2300      	movs	r3, #0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3708      	adds	r7, #8
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b082      	sub	sp, #8
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2205      	movs	r2, #5
 800dd16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	2100      	movs	r1, #0
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f003 fc1d 	bl	8011560 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd26:	2300      	movs	r3, #0
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3708      	adds	r7, #8
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <__NVIC_SetPriority>:
{
 800dd30:	b480      	push	{r7}
 800dd32:	b083      	sub	sp, #12
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	4603      	mov	r3, r0
 800dd38:	6039      	str	r1, [r7, #0]
 800dd3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dd3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	db0a      	blt.n	800dd5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	b2da      	uxtb	r2, r3
 800dd48:	490c      	ldr	r1, [pc, #48]	@ (800dd7c <__NVIC_SetPriority+0x4c>)
 800dd4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd4e:	0112      	lsls	r2, r2, #4
 800dd50:	b2d2      	uxtb	r2, r2
 800dd52:	440b      	add	r3, r1
 800dd54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800dd58:	e00a      	b.n	800dd70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	b2da      	uxtb	r2, r3
 800dd5e:	4908      	ldr	r1, [pc, #32]	@ (800dd80 <__NVIC_SetPriority+0x50>)
 800dd60:	79fb      	ldrb	r3, [r7, #7]
 800dd62:	f003 030f 	and.w	r3, r3, #15
 800dd66:	3b04      	subs	r3, #4
 800dd68:	0112      	lsls	r2, r2, #4
 800dd6a:	b2d2      	uxtb	r2, r2
 800dd6c:	440b      	add	r3, r1
 800dd6e:	761a      	strb	r2, [r3, #24]
}
 800dd70:	bf00      	nop
 800dd72:	370c      	adds	r7, #12
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr
 800dd7c:	e000e100 	.word	0xe000e100
 800dd80:	e000ed00 	.word	0xe000ed00

0800dd84 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800dd84:	b580      	push	{r7, lr}
 800dd86:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800dd88:	4b05      	ldr	r3, [pc, #20]	@ (800dda0 <SysTick_Handler+0x1c>)
 800dd8a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800dd8c:	f001 fe2c 	bl	800f9e8 <xTaskGetSchedulerState>
 800dd90:	4603      	mov	r3, r0
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d001      	beq.n	800dd9a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800dd96:	f002 fce7 	bl	8010768 <xPortSysTickHandler>
  }
}
 800dd9a:	bf00      	nop
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	bf00      	nop
 800dda0:	e000e010 	.word	0xe000e010

0800dda4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800dda4:	b580      	push	{r7, lr}
 800dda6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800dda8:	2100      	movs	r1, #0
 800ddaa:	f06f 0004 	mvn.w	r0, #4
 800ddae:	f7ff ffbf 	bl	800dd30 <__NVIC_SetPriority>
#endif
}
 800ddb2:	bf00      	nop
 800ddb4:	bd80      	pop	{r7, pc}
	...

0800ddb8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ddb8:	b480      	push	{r7}
 800ddba:	b083      	sub	sp, #12
 800ddbc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddbe:	f3ef 8305 	mrs	r3, IPSR
 800ddc2:	603b      	str	r3, [r7, #0]
  return(result);
 800ddc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d003      	beq.n	800ddd2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ddca:	f06f 0305 	mvn.w	r3, #5
 800ddce:	607b      	str	r3, [r7, #4]
 800ddd0:	e00c      	b.n	800ddec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ddd2:	4b0a      	ldr	r3, [pc, #40]	@ (800ddfc <osKernelInitialize+0x44>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d105      	bne.n	800dde6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ddda:	4b08      	ldr	r3, [pc, #32]	@ (800ddfc <osKernelInitialize+0x44>)
 800dddc:	2201      	movs	r2, #1
 800ddde:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dde0:	2300      	movs	r3, #0
 800dde2:	607b      	str	r3, [r7, #4]
 800dde4:	e002      	b.n	800ddec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800dde6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ddea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ddec:	687b      	ldr	r3, [r7, #4]
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	370c      	adds	r7, #12
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop
 800ddfc:	2000b484 	.word	0x2000b484

0800de00 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de06:	f3ef 8305 	mrs	r3, IPSR
 800de0a:	603b      	str	r3, [r7, #0]
  return(result);
 800de0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d003      	beq.n	800de1a <osKernelStart+0x1a>
    stat = osErrorISR;
 800de12:	f06f 0305 	mvn.w	r3, #5
 800de16:	607b      	str	r3, [r7, #4]
 800de18:	e010      	b.n	800de3c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800de1a:	4b0b      	ldr	r3, [pc, #44]	@ (800de48 <osKernelStart+0x48>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d109      	bne.n	800de36 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800de22:	f7ff ffbf 	bl	800dda4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800de26:	4b08      	ldr	r3, [pc, #32]	@ (800de48 <osKernelStart+0x48>)
 800de28:	2202      	movs	r2, #2
 800de2a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800de2c:	f001 f950 	bl	800f0d0 <vTaskStartScheduler>
      stat = osOK;
 800de30:	2300      	movs	r3, #0
 800de32:	607b      	str	r3, [r7, #4]
 800de34:	e002      	b.n	800de3c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800de36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800de3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800de3c:	687b      	ldr	r3, [r7, #4]
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3708      	adds	r7, #8
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	2000b484 	.word	0x2000b484

0800de4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b08e      	sub	sp, #56	@ 0x38
 800de50:	af04      	add	r7, sp, #16
 800de52:	60f8      	str	r0, [r7, #12]
 800de54:	60b9      	str	r1, [r7, #8]
 800de56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800de58:	2300      	movs	r3, #0
 800de5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de5c:	f3ef 8305 	mrs	r3, IPSR
 800de60:	617b      	str	r3, [r7, #20]
  return(result);
 800de62:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800de64:	2b00      	cmp	r3, #0
 800de66:	d17e      	bne.n	800df66 <osThreadNew+0x11a>
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d07b      	beq.n	800df66 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800de6e:	2380      	movs	r3, #128	@ 0x80
 800de70:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800de72:	2318      	movs	r3, #24
 800de74:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800de76:	2300      	movs	r3, #0
 800de78:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800de7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800de7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d045      	beq.n	800df12 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d002      	beq.n	800de94 <osThreadNew+0x48>
        name = attr->name;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	699b      	ldr	r3, [r3, #24]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d002      	beq.n	800dea2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	699b      	ldr	r3, [r3, #24]
 800dea0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dea2:	69fb      	ldr	r3, [r7, #28]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d008      	beq.n	800deba <osThreadNew+0x6e>
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	2b38      	cmp	r3, #56	@ 0x38
 800deac:	d805      	bhi.n	800deba <osThreadNew+0x6e>
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	f003 0301 	and.w	r3, r3, #1
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d001      	beq.n	800debe <osThreadNew+0x72>
        return (NULL);
 800deba:	2300      	movs	r3, #0
 800debc:	e054      	b.n	800df68 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	695b      	ldr	r3, [r3, #20]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d003      	beq.n	800dece <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	695b      	ldr	r3, [r3, #20]
 800deca:	089b      	lsrs	r3, r3, #2
 800decc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	689b      	ldr	r3, [r3, #8]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d00e      	beq.n	800def4 <osThreadNew+0xa8>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	68db      	ldr	r3, [r3, #12]
 800deda:	2ba7      	cmp	r3, #167	@ 0xa7
 800dedc:	d90a      	bls.n	800def4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d006      	beq.n	800def4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	695b      	ldr	r3, [r3, #20]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d002      	beq.n	800def4 <osThreadNew+0xa8>
        mem = 1;
 800deee:	2301      	movs	r3, #1
 800def0:	61bb      	str	r3, [r7, #24]
 800def2:	e010      	b.n	800df16 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	689b      	ldr	r3, [r3, #8]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d10c      	bne.n	800df16 <osThreadNew+0xca>
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	68db      	ldr	r3, [r3, #12]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d108      	bne.n	800df16 <osThreadNew+0xca>
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	691b      	ldr	r3, [r3, #16]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d104      	bne.n	800df16 <osThreadNew+0xca>
          mem = 0;
 800df0c:	2300      	movs	r3, #0
 800df0e:	61bb      	str	r3, [r7, #24]
 800df10:	e001      	b.n	800df16 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800df12:	2300      	movs	r3, #0
 800df14:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d110      	bne.n	800df3e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800df24:	9202      	str	r2, [sp, #8]
 800df26:	9301      	str	r3, [sp, #4]
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	9300      	str	r3, [sp, #0]
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	6a3a      	ldr	r2, [r7, #32]
 800df30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800df32:	68f8      	ldr	r0, [r7, #12]
 800df34:	f000 fed8 	bl	800ece8 <xTaskCreateStatic>
 800df38:	4603      	mov	r3, r0
 800df3a:	613b      	str	r3, [r7, #16]
 800df3c:	e013      	b.n	800df66 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800df3e:	69bb      	ldr	r3, [r7, #24]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d110      	bne.n	800df66 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800df44:	6a3b      	ldr	r3, [r7, #32]
 800df46:	b29a      	uxth	r2, r3
 800df48:	f107 0310 	add.w	r3, r7, #16
 800df4c:	9301      	str	r3, [sp, #4]
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	9300      	str	r3, [sp, #0]
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800df56:	68f8      	ldr	r0, [r7, #12]
 800df58:	f000 ff26 	bl	800eda8 <xTaskCreate>
 800df5c:	4603      	mov	r3, r0
 800df5e:	2b01      	cmp	r3, #1
 800df60:	d001      	beq.n	800df66 <osThreadNew+0x11a>
            hTask = NULL;
 800df62:	2300      	movs	r3, #0
 800df64:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800df66:	693b      	ldr	r3, [r7, #16]
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3728      	adds	r7, #40	@ 0x28
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800df70:	b580      	push	{r7, lr}
 800df72:	b084      	sub	sp, #16
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df78:	f3ef 8305 	mrs	r3, IPSR
 800df7c:	60bb      	str	r3, [r7, #8]
  return(result);
 800df7e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df80:	2b00      	cmp	r3, #0
 800df82:	d003      	beq.n	800df8c <osDelay+0x1c>
    stat = osErrorISR;
 800df84:	f06f 0305 	mvn.w	r3, #5
 800df88:	60fb      	str	r3, [r7, #12]
 800df8a:	e007      	b.n	800df9c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800df8c:	2300      	movs	r3, #0
 800df8e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d002      	beq.n	800df9c <osDelay+0x2c>
      vTaskDelay(ticks);
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f001 f864 	bl	800f064 <vTaskDelay>
    }
  }

  return (stat);
 800df9c:	68fb      	ldr	r3, [r7, #12]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3710      	adds	r7, #16
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}

0800dfa6 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800dfa6:	b580      	push	{r7, lr}
 800dfa8:	b084      	sub	sp, #16
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f002 f9f4 	bl	801039c <pvTimerGetTimerID>
 800dfb4:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d005      	beq.n	800dfc8 <TimerCallback+0x22>
    callb->func (callb->arg);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	68fa      	ldr	r2, [r7, #12]
 800dfc2:	6852      	ldr	r2, [r2, #4]
 800dfc4:	4610      	mov	r0, r2
 800dfc6:	4798      	blx	r3
  }
}
 800dfc8:	bf00      	nop
 800dfca:	3710      	adds	r7, #16
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b08c      	sub	sp, #48	@ 0x30
 800dfd4:	af02      	add	r7, sp, #8
 800dfd6:	60f8      	str	r0, [r7, #12]
 800dfd8:	607a      	str	r2, [r7, #4]
 800dfda:	603b      	str	r3, [r7, #0]
 800dfdc:	460b      	mov	r3, r1
 800dfde:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfe4:	f3ef 8305 	mrs	r3, IPSR
 800dfe8:	613b      	str	r3, [r7, #16]
  return(result);
 800dfea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d163      	bne.n	800e0b8 <osTimerNew+0xe8>
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d060      	beq.n	800e0b8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800dff6:	2008      	movs	r0, #8
 800dff8:	f002 fc48 	bl	801088c <pvPortMalloc>
 800dffc:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d059      	beq.n	800e0b8 <osTimerNew+0xe8>
      callb->func = func;
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	68fa      	ldr	r2, [r7, #12]
 800e008:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	687a      	ldr	r2, [r7, #4]
 800e00e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800e010:	7afb      	ldrb	r3, [r7, #11]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d102      	bne.n	800e01c <osTimerNew+0x4c>
        reload = pdFALSE;
 800e016:	2300      	movs	r3, #0
 800e018:	61fb      	str	r3, [r7, #28]
 800e01a:	e001      	b.n	800e020 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800e01c:	2301      	movs	r3, #1
 800e01e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800e020:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e024:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800e026:	2300      	movs	r3, #0
 800e028:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d01c      	beq.n	800e06a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d002      	beq.n	800e03e <osTimerNew+0x6e>
          name = attr->name;
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	689b      	ldr	r3, [r3, #8]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d006      	beq.n	800e054 <osTimerNew+0x84>
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	2b2b      	cmp	r3, #43	@ 0x2b
 800e04c:	d902      	bls.n	800e054 <osTimerNew+0x84>
          mem = 1;
 800e04e:	2301      	movs	r3, #1
 800e050:	61bb      	str	r3, [r7, #24]
 800e052:	e00c      	b.n	800e06e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	689b      	ldr	r3, [r3, #8]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d108      	bne.n	800e06e <osTimerNew+0x9e>
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d104      	bne.n	800e06e <osTimerNew+0x9e>
            mem = 0;
 800e064:	2300      	movs	r3, #0
 800e066:	61bb      	str	r3, [r7, #24]
 800e068:	e001      	b.n	800e06e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800e06a:	2300      	movs	r3, #0
 800e06c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	2b01      	cmp	r3, #1
 800e072:	d10c      	bne.n	800e08e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	689b      	ldr	r3, [r3, #8]
 800e078:	9301      	str	r3, [sp, #4]
 800e07a:	4b12      	ldr	r3, [pc, #72]	@ (800e0c4 <osTimerNew+0xf4>)
 800e07c:	9300      	str	r3, [sp, #0]
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	69fa      	ldr	r2, [r7, #28]
 800e082:	2101      	movs	r1, #1
 800e084:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e086:	f001 fdfc 	bl	800fc82 <xTimerCreateStatic>
 800e08a:	6238      	str	r0, [r7, #32]
 800e08c:	e00b      	b.n	800e0a6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800e08e:	69bb      	ldr	r3, [r7, #24]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d108      	bne.n	800e0a6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800e094:	4b0b      	ldr	r3, [pc, #44]	@ (800e0c4 <osTimerNew+0xf4>)
 800e096:	9300      	str	r3, [sp, #0]
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	69fa      	ldr	r2, [r7, #28]
 800e09c:	2101      	movs	r1, #1
 800e09e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e0a0:	f001 fdce 	bl	800fc40 <xTimerCreate>
 800e0a4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800e0a6:	6a3b      	ldr	r3, [r7, #32]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d105      	bne.n	800e0b8 <osTimerNew+0xe8>
 800e0ac:	697b      	ldr	r3, [r7, #20]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d002      	beq.n	800e0b8 <osTimerNew+0xe8>
        vPortFree (callb);
 800e0b2:	6978      	ldr	r0, [r7, #20]
 800e0b4:	f002 fcb8 	bl	8010a28 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800e0b8:	6a3b      	ldr	r3, [r7, #32]
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3728      	adds	r7, #40	@ 0x28
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	0800dfa7 	.word	0x0800dfa7

0800e0c8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b088      	sub	sp, #32
 800e0cc:	af02      	add	r7, sp, #8
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e0d6:	f3ef 8305 	mrs	r3, IPSR
 800e0da:	60fb      	str	r3, [r7, #12]
  return(result);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d003      	beq.n	800e0ea <osTimerStart+0x22>
    stat = osErrorISR;
 800e0e2:	f06f 0305 	mvn.w	r3, #5
 800e0e6:	617b      	str	r3, [r7, #20]
 800e0e8:	e017      	b.n	800e11a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d103      	bne.n	800e0f8 <osTimerStart+0x30>
    stat = osErrorParameter;
 800e0f0:	f06f 0303 	mvn.w	r3, #3
 800e0f4:	617b      	str	r3, [r7, #20]
 800e0f6:	e010      	b.n	800e11a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	9300      	str	r3, [sp, #0]
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	683a      	ldr	r2, [r7, #0]
 800e100:	2104      	movs	r1, #4
 800e102:	6938      	ldr	r0, [r7, #16]
 800e104:	f001 fe3a 	bl	800fd7c <xTimerGenericCommand>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b01      	cmp	r3, #1
 800e10c:	d102      	bne.n	800e114 <osTimerStart+0x4c>
      stat = osOK;
 800e10e:	2300      	movs	r3, #0
 800e110:	617b      	str	r3, [r7, #20]
 800e112:	e002      	b.n	800e11a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800e114:	f06f 0302 	mvn.w	r3, #2
 800e118:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800e11a:	697b      	ldr	r3, [r7, #20]
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3718      	adds	r7, #24
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e124:	b480      	push	{r7}
 800e126:	b085      	sub	sp, #20
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	4a07      	ldr	r2, [pc, #28]	@ (800e150 <vApplicationGetIdleTaskMemory+0x2c>)
 800e134:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	4a06      	ldr	r2, [pc, #24]	@ (800e154 <vApplicationGetIdleTaskMemory+0x30>)
 800e13a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2280      	movs	r2, #128	@ 0x80
 800e140:	601a      	str	r2, [r3, #0]
}
 800e142:	bf00      	nop
 800e144:	3714      	adds	r7, #20
 800e146:	46bd      	mov	sp, r7
 800e148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14c:	4770      	bx	lr
 800e14e:	bf00      	nop
 800e150:	2000b488 	.word	0x2000b488
 800e154:	2000b530 	.word	0x2000b530

0800e158 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e158:	b480      	push	{r7}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	60f8      	str	r0, [r7, #12]
 800e160:	60b9      	str	r1, [r7, #8]
 800e162:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	4a07      	ldr	r2, [pc, #28]	@ (800e184 <vApplicationGetTimerTaskMemory+0x2c>)
 800e168:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	4a06      	ldr	r2, [pc, #24]	@ (800e188 <vApplicationGetTimerTaskMemory+0x30>)
 800e16e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e176:	601a      	str	r2, [r3, #0]
}
 800e178:	bf00      	nop
 800e17a:	3714      	adds	r7, #20
 800e17c:	46bd      	mov	sp, r7
 800e17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e182:	4770      	bx	lr
 800e184:	2000b730 	.word	0x2000b730
 800e188:	2000b7d8 	.word	0x2000b7d8

0800e18c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e18c:	b480      	push	{r7}
 800e18e:	b083      	sub	sp, #12
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f103 0208 	add.w	r2, r3, #8
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e1a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	f103 0208 	add.w	r2, r3, #8
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f103 0208 	add.w	r2, r3, #8
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e1c0:	bf00      	nop
 800e1c2:	370c      	adds	r7, #12
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr

0800e1cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b083      	sub	sp, #12
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e1da:	bf00      	nop
 800e1dc:	370c      	adds	r7, #12
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr

0800e1e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e1e6:	b480      	push	{r7}
 800e1e8:	b085      	sub	sp, #20
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
 800e1ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	68fa      	ldr	r2, [r7, #12]
 800e1fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	689a      	ldr	r2, [r3, #8]
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	689b      	ldr	r3, [r3, #8]
 800e208:	683a      	ldr	r2, [r7, #0]
 800e20a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	683a      	ldr	r2, [r7, #0]
 800e210:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	1c5a      	adds	r2, r3, #1
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	601a      	str	r2, [r3, #0]
}
 800e222:	bf00      	nop
 800e224:	3714      	adds	r7, #20
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr

0800e22e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e22e:	b480      	push	{r7}
 800e230:	b085      	sub	sp, #20
 800e232:	af00      	add	r7, sp, #0
 800e234:	6078      	str	r0, [r7, #4]
 800e236:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e244:	d103      	bne.n	800e24e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	691b      	ldr	r3, [r3, #16]
 800e24a:	60fb      	str	r3, [r7, #12]
 800e24c:	e00c      	b.n	800e268 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	3308      	adds	r3, #8
 800e252:	60fb      	str	r3, [r7, #12]
 800e254:	e002      	b.n	800e25c <vListInsert+0x2e>
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	60fb      	str	r3, [r7, #12]
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	68ba      	ldr	r2, [r7, #8]
 800e264:	429a      	cmp	r2, r3
 800e266:	d2f6      	bcs.n	800e256 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	685a      	ldr	r2, [r3, #4]
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	685b      	ldr	r3, [r3, #4]
 800e274:	683a      	ldr	r2, [r7, #0]
 800e276:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	68fa      	ldr	r2, [r7, #12]
 800e27c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	683a      	ldr	r2, [r7, #0]
 800e282:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	687a      	ldr	r2, [r7, #4]
 800e288:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	1c5a      	adds	r2, r3, #1
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	601a      	str	r2, [r3, #0]
}
 800e294:	bf00      	nop
 800e296:	3714      	adds	r7, #20
 800e298:	46bd      	mov	sp, r7
 800e29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29e:	4770      	bx	lr

0800e2a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b085      	sub	sp, #20
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	691b      	ldr	r3, [r3, #16]
 800e2ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	685b      	ldr	r3, [r3, #4]
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	6892      	ldr	r2, [r2, #8]
 800e2b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	689b      	ldr	r3, [r3, #8]
 800e2bc:	687a      	ldr	r2, [r7, #4]
 800e2be:	6852      	ldr	r2, [r2, #4]
 800e2c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	687a      	ldr	r2, [r7, #4]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d103      	bne.n	800e2d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	689a      	ldr	r2, [r3, #8]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	1e5a      	subs	r2, r3, #1
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3714      	adds	r7, #20
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr

0800e2f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d10b      	bne.n	800e320 <xQueueGenericReset+0x2c>
	__asm volatile
 800e308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e30c:	f383 8811 	msr	BASEPRI, r3
 800e310:	f3bf 8f6f 	isb	sy
 800e314:	f3bf 8f4f 	dsb	sy
 800e318:	60bb      	str	r3, [r7, #8]
}
 800e31a:	bf00      	nop
 800e31c:	bf00      	nop
 800e31e:	e7fd      	b.n	800e31c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e320:	f002 f992 	bl	8010648 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681a      	ldr	r2, [r3, #0]
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e32c:	68f9      	ldr	r1, [r7, #12]
 800e32e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e330:	fb01 f303 	mul.w	r3, r1, r3
 800e334:	441a      	add	r2, r3
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2200      	movs	r2, #0
 800e33e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681a      	ldr	r2, [r3, #0]
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e350:	3b01      	subs	r3, #1
 800e352:	68f9      	ldr	r1, [r7, #12]
 800e354:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e356:	fb01 f303 	mul.w	r3, r1, r3
 800e35a:	441a      	add	r2, r3
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	22ff      	movs	r2, #255	@ 0xff
 800e364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	22ff      	movs	r2, #255	@ 0xff
 800e36c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d114      	bne.n	800e3a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	691b      	ldr	r3, [r3, #16]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d01a      	beq.n	800e3b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	3310      	adds	r3, #16
 800e382:	4618      	mov	r0, r3
 800e384:	f001 f942 	bl	800f60c <xTaskRemoveFromEventList>
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d012      	beq.n	800e3b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e38e:	4b0d      	ldr	r3, [pc, #52]	@ (800e3c4 <xQueueGenericReset+0xd0>)
 800e390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e394:	601a      	str	r2, [r3, #0]
 800e396:	f3bf 8f4f 	dsb	sy
 800e39a:	f3bf 8f6f 	isb	sy
 800e39e:	e009      	b.n	800e3b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	3310      	adds	r3, #16
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7ff fef1 	bl	800e18c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	3324      	adds	r3, #36	@ 0x24
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7ff feec 	bl	800e18c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e3b4:	f002 f97a 	bl	80106ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e3b8:	2301      	movs	r3, #1
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3710      	adds	r7, #16
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	e000ed04 	.word	0xe000ed04

0800e3c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b08e      	sub	sp, #56	@ 0x38
 800e3cc:	af02      	add	r7, sp, #8
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	607a      	str	r2, [r7, #4]
 800e3d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d10b      	bne.n	800e3f4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e3dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3e0:	f383 8811 	msr	BASEPRI, r3
 800e3e4:	f3bf 8f6f 	isb	sy
 800e3e8:	f3bf 8f4f 	dsb	sy
 800e3ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e3ee:	bf00      	nop
 800e3f0:	bf00      	nop
 800e3f2:	e7fd      	b.n	800e3f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d10b      	bne.n	800e412 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e3fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3fe:	f383 8811 	msr	BASEPRI, r3
 800e402:	f3bf 8f6f 	isb	sy
 800e406:	f3bf 8f4f 	dsb	sy
 800e40a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e40c:	bf00      	nop
 800e40e:	bf00      	nop
 800e410:	e7fd      	b.n	800e40e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d002      	beq.n	800e41e <xQueueGenericCreateStatic+0x56>
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d001      	beq.n	800e422 <xQueueGenericCreateStatic+0x5a>
 800e41e:	2301      	movs	r3, #1
 800e420:	e000      	b.n	800e424 <xQueueGenericCreateStatic+0x5c>
 800e422:	2300      	movs	r3, #0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d10b      	bne.n	800e440 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e42c:	f383 8811 	msr	BASEPRI, r3
 800e430:	f3bf 8f6f 	isb	sy
 800e434:	f3bf 8f4f 	dsb	sy
 800e438:	623b      	str	r3, [r7, #32]
}
 800e43a:	bf00      	nop
 800e43c:	bf00      	nop
 800e43e:	e7fd      	b.n	800e43c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d102      	bne.n	800e44c <xQueueGenericCreateStatic+0x84>
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d101      	bne.n	800e450 <xQueueGenericCreateStatic+0x88>
 800e44c:	2301      	movs	r3, #1
 800e44e:	e000      	b.n	800e452 <xQueueGenericCreateStatic+0x8a>
 800e450:	2300      	movs	r3, #0
 800e452:	2b00      	cmp	r3, #0
 800e454:	d10b      	bne.n	800e46e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e45a:	f383 8811 	msr	BASEPRI, r3
 800e45e:	f3bf 8f6f 	isb	sy
 800e462:	f3bf 8f4f 	dsb	sy
 800e466:	61fb      	str	r3, [r7, #28]
}
 800e468:	bf00      	nop
 800e46a:	bf00      	nop
 800e46c:	e7fd      	b.n	800e46a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e46e:	2350      	movs	r3, #80	@ 0x50
 800e470:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	2b50      	cmp	r3, #80	@ 0x50
 800e476:	d00b      	beq.n	800e490 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e47c:	f383 8811 	msr	BASEPRI, r3
 800e480:	f3bf 8f6f 	isb	sy
 800e484:	f3bf 8f4f 	dsb	sy
 800e488:	61bb      	str	r3, [r7, #24]
}
 800e48a:	bf00      	nop
 800e48c:	bf00      	nop
 800e48e:	e7fd      	b.n	800e48c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e490:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d00d      	beq.n	800e4b8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e49e:	2201      	movs	r2, #1
 800e4a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e4a4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4aa:	9300      	str	r3, [sp, #0]
 800e4ac:	4613      	mov	r3, r2
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	68b9      	ldr	r1, [r7, #8]
 800e4b2:	68f8      	ldr	r0, [r7, #12]
 800e4b4:	f000 f805 	bl	800e4c2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3730      	adds	r7, #48	@ 0x30
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e4c2:	b580      	push	{r7, lr}
 800e4c4:	b084      	sub	sp, #16
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	60f8      	str	r0, [r7, #12]
 800e4ca:	60b9      	str	r1, [r7, #8]
 800e4cc:	607a      	str	r2, [r7, #4]
 800e4ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d103      	bne.n	800e4de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e4d6:	69bb      	ldr	r3, [r7, #24]
 800e4d8:	69ba      	ldr	r2, [r7, #24]
 800e4da:	601a      	str	r2, [r3, #0]
 800e4dc:	e002      	b.n	800e4e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e4de:	69bb      	ldr	r3, [r7, #24]
 800e4e0:	687a      	ldr	r2, [r7, #4]
 800e4e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	68fa      	ldr	r2, [r7, #12]
 800e4e8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e4ea:	69bb      	ldr	r3, [r7, #24]
 800e4ec:	68ba      	ldr	r2, [r7, #8]
 800e4ee:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e4f0:	2101      	movs	r1, #1
 800e4f2:	69b8      	ldr	r0, [r7, #24]
 800e4f4:	f7ff fefe 	bl	800e2f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e4f8:	69bb      	ldr	r3, [r7, #24]
 800e4fa:	78fa      	ldrb	r2, [r7, #3]
 800e4fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e500:	bf00      	nop
 800e502:	3710      	adds	r7, #16
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b08e      	sub	sp, #56	@ 0x38
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	607a      	str	r2, [r7, #4]
 800e514:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e516:	2300      	movs	r3, #0
 800e518:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e520:	2b00      	cmp	r3, #0
 800e522:	d10b      	bne.n	800e53c <xQueueGenericSend+0x34>
	__asm volatile
 800e524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e528:	f383 8811 	msr	BASEPRI, r3
 800e52c:	f3bf 8f6f 	isb	sy
 800e530:	f3bf 8f4f 	dsb	sy
 800e534:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e536:	bf00      	nop
 800e538:	bf00      	nop
 800e53a:	e7fd      	b.n	800e538 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d103      	bne.n	800e54a <xQueueGenericSend+0x42>
 800e542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e546:	2b00      	cmp	r3, #0
 800e548:	d101      	bne.n	800e54e <xQueueGenericSend+0x46>
 800e54a:	2301      	movs	r3, #1
 800e54c:	e000      	b.n	800e550 <xQueueGenericSend+0x48>
 800e54e:	2300      	movs	r3, #0
 800e550:	2b00      	cmp	r3, #0
 800e552:	d10b      	bne.n	800e56c <xQueueGenericSend+0x64>
	__asm volatile
 800e554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e558:	f383 8811 	msr	BASEPRI, r3
 800e55c:	f3bf 8f6f 	isb	sy
 800e560:	f3bf 8f4f 	dsb	sy
 800e564:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e566:	bf00      	nop
 800e568:	bf00      	nop
 800e56a:	e7fd      	b.n	800e568 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	2b02      	cmp	r3, #2
 800e570:	d103      	bne.n	800e57a <xQueueGenericSend+0x72>
 800e572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e576:	2b01      	cmp	r3, #1
 800e578:	d101      	bne.n	800e57e <xQueueGenericSend+0x76>
 800e57a:	2301      	movs	r3, #1
 800e57c:	e000      	b.n	800e580 <xQueueGenericSend+0x78>
 800e57e:	2300      	movs	r3, #0
 800e580:	2b00      	cmp	r3, #0
 800e582:	d10b      	bne.n	800e59c <xQueueGenericSend+0x94>
	__asm volatile
 800e584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e588:	f383 8811 	msr	BASEPRI, r3
 800e58c:	f3bf 8f6f 	isb	sy
 800e590:	f3bf 8f4f 	dsb	sy
 800e594:	623b      	str	r3, [r7, #32]
}
 800e596:	bf00      	nop
 800e598:	bf00      	nop
 800e59a:	e7fd      	b.n	800e598 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e59c:	f001 fa24 	bl	800f9e8 <xTaskGetSchedulerState>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d102      	bne.n	800e5ac <xQueueGenericSend+0xa4>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d101      	bne.n	800e5b0 <xQueueGenericSend+0xa8>
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	e000      	b.n	800e5b2 <xQueueGenericSend+0xaa>
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d10b      	bne.n	800e5ce <xQueueGenericSend+0xc6>
	__asm volatile
 800e5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ba:	f383 8811 	msr	BASEPRI, r3
 800e5be:	f3bf 8f6f 	isb	sy
 800e5c2:	f3bf 8f4f 	dsb	sy
 800e5c6:	61fb      	str	r3, [r7, #28]
}
 800e5c8:	bf00      	nop
 800e5ca:	bf00      	nop
 800e5cc:	e7fd      	b.n	800e5ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e5ce:	f002 f83b 	bl	8010648 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d302      	bcc.n	800e5e4 <xQueueGenericSend+0xdc>
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	2b02      	cmp	r3, #2
 800e5e2:	d129      	bne.n	800e638 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e5e4:	683a      	ldr	r2, [r7, #0]
 800e5e6:	68b9      	ldr	r1, [r7, #8]
 800e5e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5ea:	f000 fa0f 	bl	800ea0c <prvCopyDataToQueue>
 800e5ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d010      	beq.n	800e61a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5fa:	3324      	adds	r3, #36	@ 0x24
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f001 f805 	bl	800f60c <xTaskRemoveFromEventList>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d013      	beq.n	800e630 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e608:	4b3f      	ldr	r3, [pc, #252]	@ (800e708 <xQueueGenericSend+0x200>)
 800e60a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e60e:	601a      	str	r2, [r3, #0]
 800e610:	f3bf 8f4f 	dsb	sy
 800e614:	f3bf 8f6f 	isb	sy
 800e618:	e00a      	b.n	800e630 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d007      	beq.n	800e630 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e620:	4b39      	ldr	r3, [pc, #228]	@ (800e708 <xQueueGenericSend+0x200>)
 800e622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e626:	601a      	str	r2, [r3, #0]
 800e628:	f3bf 8f4f 	dsb	sy
 800e62c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e630:	f002 f83c 	bl	80106ac <vPortExitCritical>
				return pdPASS;
 800e634:	2301      	movs	r3, #1
 800e636:	e063      	b.n	800e700 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d103      	bne.n	800e646 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e63e:	f002 f835 	bl	80106ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e642:	2300      	movs	r3, #0
 800e644:	e05c      	b.n	800e700 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d106      	bne.n	800e65a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e64c:	f107 0314 	add.w	r3, r7, #20
 800e650:	4618      	mov	r0, r3
 800e652:	f001 f867 	bl	800f724 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e656:	2301      	movs	r3, #1
 800e658:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e65a:	f002 f827 	bl	80106ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e65e:	f000 fda7 	bl	800f1b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e662:	f001 fff1 	bl	8010648 <vPortEnterCritical>
 800e666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e668:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e66c:	b25b      	sxtb	r3, r3
 800e66e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e672:	d103      	bne.n	800e67c <xQueueGenericSend+0x174>
 800e674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e676:	2200      	movs	r2, #0
 800e678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e67e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e682:	b25b      	sxtb	r3, r3
 800e684:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e688:	d103      	bne.n	800e692 <xQueueGenericSend+0x18a>
 800e68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e68c:	2200      	movs	r2, #0
 800e68e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e692:	f002 f80b 	bl	80106ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e696:	1d3a      	adds	r2, r7, #4
 800e698:	f107 0314 	add.w	r3, r7, #20
 800e69c:	4611      	mov	r1, r2
 800e69e:	4618      	mov	r0, r3
 800e6a0:	f001 f856 	bl	800f750 <xTaskCheckForTimeOut>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d124      	bne.n	800e6f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e6aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e6ac:	f000 faa6 	bl	800ebfc <prvIsQueueFull>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d018      	beq.n	800e6e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b8:	3310      	adds	r3, #16
 800e6ba:	687a      	ldr	r2, [r7, #4]
 800e6bc:	4611      	mov	r1, r2
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f000 ff52 	bl	800f568 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e6c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e6c6:	f000 fa31 	bl	800eb2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e6ca:	f000 fd7f 	bl	800f1cc <xTaskResumeAll>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	f47f af7c 	bne.w	800e5ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e6d6:	4b0c      	ldr	r3, [pc, #48]	@ (800e708 <xQueueGenericSend+0x200>)
 800e6d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6dc:	601a      	str	r2, [r3, #0]
 800e6de:	f3bf 8f4f 	dsb	sy
 800e6e2:	f3bf 8f6f 	isb	sy
 800e6e6:	e772      	b.n	800e5ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e6e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e6ea:	f000 fa1f 	bl	800eb2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e6ee:	f000 fd6d 	bl	800f1cc <xTaskResumeAll>
 800e6f2:	e76c      	b.n	800e5ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e6f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e6f6:	f000 fa19 	bl	800eb2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e6fa:	f000 fd67 	bl	800f1cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e6fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e700:	4618      	mov	r0, r3
 800e702:	3738      	adds	r7, #56	@ 0x38
 800e704:	46bd      	mov	sp, r7
 800e706:	bd80      	pop	{r7, pc}
 800e708:	e000ed04 	.word	0xe000ed04

0800e70c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b090      	sub	sp, #64	@ 0x40
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	607a      	str	r2, [r7, #4]
 800e718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e720:	2b00      	cmp	r3, #0
 800e722:	d10b      	bne.n	800e73c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e728:	f383 8811 	msr	BASEPRI, r3
 800e72c:	f3bf 8f6f 	isb	sy
 800e730:	f3bf 8f4f 	dsb	sy
 800e734:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e736:	bf00      	nop
 800e738:	bf00      	nop
 800e73a:	e7fd      	b.n	800e738 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d103      	bne.n	800e74a <xQueueGenericSendFromISR+0x3e>
 800e742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e746:	2b00      	cmp	r3, #0
 800e748:	d101      	bne.n	800e74e <xQueueGenericSendFromISR+0x42>
 800e74a:	2301      	movs	r3, #1
 800e74c:	e000      	b.n	800e750 <xQueueGenericSendFromISR+0x44>
 800e74e:	2300      	movs	r3, #0
 800e750:	2b00      	cmp	r3, #0
 800e752:	d10b      	bne.n	800e76c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e758:	f383 8811 	msr	BASEPRI, r3
 800e75c:	f3bf 8f6f 	isb	sy
 800e760:	f3bf 8f4f 	dsb	sy
 800e764:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e766:	bf00      	nop
 800e768:	bf00      	nop
 800e76a:	e7fd      	b.n	800e768 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	2b02      	cmp	r3, #2
 800e770:	d103      	bne.n	800e77a <xQueueGenericSendFromISR+0x6e>
 800e772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e776:	2b01      	cmp	r3, #1
 800e778:	d101      	bne.n	800e77e <xQueueGenericSendFromISR+0x72>
 800e77a:	2301      	movs	r3, #1
 800e77c:	e000      	b.n	800e780 <xQueueGenericSendFromISR+0x74>
 800e77e:	2300      	movs	r3, #0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d10b      	bne.n	800e79c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e788:	f383 8811 	msr	BASEPRI, r3
 800e78c:	f3bf 8f6f 	isb	sy
 800e790:	f3bf 8f4f 	dsb	sy
 800e794:	623b      	str	r3, [r7, #32]
}
 800e796:	bf00      	nop
 800e798:	bf00      	nop
 800e79a:	e7fd      	b.n	800e798 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e79c:	f002 f834 	bl	8010808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e7a0:	f3ef 8211 	mrs	r2, BASEPRI
 800e7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a8:	f383 8811 	msr	BASEPRI, r3
 800e7ac:	f3bf 8f6f 	isb	sy
 800e7b0:	f3bf 8f4f 	dsb	sy
 800e7b4:	61fa      	str	r2, [r7, #28]
 800e7b6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e7b8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7ba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d302      	bcc.n	800e7ce <xQueueGenericSendFromISR+0xc2>
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	2b02      	cmp	r3, #2
 800e7cc:	d12f      	bne.n	800e82e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e7d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e7de:	683a      	ldr	r2, [r7, #0]
 800e7e0:	68b9      	ldr	r1, [r7, #8]
 800e7e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e7e4:	f000 f912 	bl	800ea0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e7e8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e7ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e7f0:	d112      	bne.n	800e818 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d016      	beq.n	800e828 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7fc:	3324      	adds	r3, #36	@ 0x24
 800e7fe:	4618      	mov	r0, r3
 800e800:	f000 ff04 	bl	800f60c <xTaskRemoveFromEventList>
 800e804:	4603      	mov	r3, r0
 800e806:	2b00      	cmp	r3, #0
 800e808:	d00e      	beq.n	800e828 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d00b      	beq.n	800e828 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	2201      	movs	r2, #1
 800e814:	601a      	str	r2, [r3, #0]
 800e816:	e007      	b.n	800e828 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e818:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e81c:	3301      	adds	r3, #1
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	b25a      	sxtb	r2, r3
 800e822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e824:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e828:	2301      	movs	r3, #1
 800e82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e82c:	e001      	b.n	800e832 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e82e:	2300      	movs	r3, #0
 800e830:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e834:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e83c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e83e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e840:	4618      	mov	r0, r3
 800e842:	3740      	adds	r7, #64	@ 0x40
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b08c      	sub	sp, #48	@ 0x30
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e854:	2300      	movs	r3, #0
 800e856:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d10b      	bne.n	800e87a <xQueueReceive+0x32>
	__asm volatile
 800e862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e866:	f383 8811 	msr	BASEPRI, r3
 800e86a:	f3bf 8f6f 	isb	sy
 800e86e:	f3bf 8f4f 	dsb	sy
 800e872:	623b      	str	r3, [r7, #32]
}
 800e874:	bf00      	nop
 800e876:	bf00      	nop
 800e878:	e7fd      	b.n	800e876 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d103      	bne.n	800e888 <xQueueReceive+0x40>
 800e880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e884:	2b00      	cmp	r3, #0
 800e886:	d101      	bne.n	800e88c <xQueueReceive+0x44>
 800e888:	2301      	movs	r3, #1
 800e88a:	e000      	b.n	800e88e <xQueueReceive+0x46>
 800e88c:	2300      	movs	r3, #0
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d10b      	bne.n	800e8aa <xQueueReceive+0x62>
	__asm volatile
 800e892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e896:	f383 8811 	msr	BASEPRI, r3
 800e89a:	f3bf 8f6f 	isb	sy
 800e89e:	f3bf 8f4f 	dsb	sy
 800e8a2:	61fb      	str	r3, [r7, #28]
}
 800e8a4:	bf00      	nop
 800e8a6:	bf00      	nop
 800e8a8:	e7fd      	b.n	800e8a6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8aa:	f001 f89d 	bl	800f9e8 <xTaskGetSchedulerState>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d102      	bne.n	800e8ba <xQueueReceive+0x72>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d101      	bne.n	800e8be <xQueueReceive+0x76>
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	e000      	b.n	800e8c0 <xQueueReceive+0x78>
 800e8be:	2300      	movs	r3, #0
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d10b      	bne.n	800e8dc <xQueueReceive+0x94>
	__asm volatile
 800e8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8c8:	f383 8811 	msr	BASEPRI, r3
 800e8cc:	f3bf 8f6f 	isb	sy
 800e8d0:	f3bf 8f4f 	dsb	sy
 800e8d4:	61bb      	str	r3, [r7, #24]
}
 800e8d6:	bf00      	nop
 800e8d8:	bf00      	nop
 800e8da:	e7fd      	b.n	800e8d8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e8dc:	f001 feb4 	bl	8010648 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d01f      	beq.n	800e92c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e8ec:	68b9      	ldr	r1, [r7, #8]
 800e8ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e8f0:	f000 f8f6 	bl	800eae0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8f6:	1e5a      	subs	r2, r3, #1
 800e8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8fe:	691b      	ldr	r3, [r3, #16]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d00f      	beq.n	800e924 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e906:	3310      	adds	r3, #16
 800e908:	4618      	mov	r0, r3
 800e90a:	f000 fe7f 	bl	800f60c <xTaskRemoveFromEventList>
 800e90e:	4603      	mov	r3, r0
 800e910:	2b00      	cmp	r3, #0
 800e912:	d007      	beq.n	800e924 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e914:	4b3c      	ldr	r3, [pc, #240]	@ (800ea08 <xQueueReceive+0x1c0>)
 800e916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e91a:	601a      	str	r2, [r3, #0]
 800e91c:	f3bf 8f4f 	dsb	sy
 800e920:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e924:	f001 fec2 	bl	80106ac <vPortExitCritical>
				return pdPASS;
 800e928:	2301      	movs	r3, #1
 800e92a:	e069      	b.n	800ea00 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d103      	bne.n	800e93a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e932:	f001 febb 	bl	80106ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e936:	2300      	movs	r3, #0
 800e938:	e062      	b.n	800ea00 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e93a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d106      	bne.n	800e94e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e940:	f107 0310 	add.w	r3, r7, #16
 800e944:	4618      	mov	r0, r3
 800e946:	f000 feed 	bl	800f724 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e94a:	2301      	movs	r3, #1
 800e94c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e94e:	f001 fead 	bl	80106ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e952:	f000 fc2d 	bl	800f1b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e956:	f001 fe77 	bl	8010648 <vPortEnterCritical>
 800e95a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e95c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e960:	b25b      	sxtb	r3, r3
 800e962:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e966:	d103      	bne.n	800e970 <xQueueReceive+0x128>
 800e968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e96a:	2200      	movs	r2, #0
 800e96c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e972:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e976:	b25b      	sxtb	r3, r3
 800e978:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e97c:	d103      	bne.n	800e986 <xQueueReceive+0x13e>
 800e97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e980:	2200      	movs	r2, #0
 800e982:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e986:	f001 fe91 	bl	80106ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e98a:	1d3a      	adds	r2, r7, #4
 800e98c:	f107 0310 	add.w	r3, r7, #16
 800e990:	4611      	mov	r1, r2
 800e992:	4618      	mov	r0, r3
 800e994:	f000 fedc 	bl	800f750 <xTaskCheckForTimeOut>
 800e998:	4603      	mov	r3, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d123      	bne.n	800e9e6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e99e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9a0:	f000 f916 	bl	800ebd0 <prvIsQueueEmpty>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d017      	beq.n	800e9da <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ac:	3324      	adds	r3, #36	@ 0x24
 800e9ae:	687a      	ldr	r2, [r7, #4]
 800e9b0:	4611      	mov	r1, r2
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f000 fdd8 	bl	800f568 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e9b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9ba:	f000 f8b7 	bl	800eb2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e9be:	f000 fc05 	bl	800f1cc <xTaskResumeAll>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d189      	bne.n	800e8dc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e9c8:	4b0f      	ldr	r3, [pc, #60]	@ (800ea08 <xQueueReceive+0x1c0>)
 800e9ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9ce:	601a      	str	r2, [r3, #0]
 800e9d0:	f3bf 8f4f 	dsb	sy
 800e9d4:	f3bf 8f6f 	isb	sy
 800e9d8:	e780      	b.n	800e8dc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e9da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9dc:	f000 f8a6 	bl	800eb2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e9e0:	f000 fbf4 	bl	800f1cc <xTaskResumeAll>
 800e9e4:	e77a      	b.n	800e8dc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e9e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9e8:	f000 f8a0 	bl	800eb2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9ec:	f000 fbee 	bl	800f1cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9f2:	f000 f8ed 	bl	800ebd0 <prvIsQueueEmpty>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	f43f af6f 	beq.w	800e8dc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e9fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3730      	adds	r7, #48	@ 0x30
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}
 800ea08:	e000ed04 	.word	0xe000ed04

0800ea0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b086      	sub	sp, #24
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d10d      	bne.n	800ea46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d14d      	bne.n	800eace <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	689b      	ldr	r3, [r3, #8]
 800ea36:	4618      	mov	r0, r3
 800ea38:	f000 fff4 	bl	800fa24 <xTaskPriorityDisinherit>
 800ea3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	2200      	movs	r2, #0
 800ea42:	609a      	str	r2, [r3, #8]
 800ea44:	e043      	b.n	800eace <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d119      	bne.n	800ea80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	6858      	ldr	r0, [r3, #4]
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea54:	461a      	mov	r2, r3
 800ea56:	68b9      	ldr	r1, [r7, #8]
 800ea58:	f011 fe79 	bl	802074e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	685a      	ldr	r2, [r3, #4]
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea64:	441a      	add	r2, r3
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	685a      	ldr	r2, [r3, #4]
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	689b      	ldr	r3, [r3, #8]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d32b      	bcc.n	800eace <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	605a      	str	r2, [r3, #4]
 800ea7e:	e026      	b.n	800eace <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	68d8      	ldr	r0, [r3, #12]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea88:	461a      	mov	r2, r3
 800ea8a:	68b9      	ldr	r1, [r7, #8]
 800ea8c:	f011 fe5f 	bl	802074e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	68da      	ldr	r2, [r3, #12]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea98:	425b      	negs	r3, r3
 800ea9a:	441a      	add	r2, r3
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	68da      	ldr	r2, [r3, #12]
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d207      	bcs.n	800eabc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	689a      	ldr	r2, [r3, #8]
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eab4:	425b      	negs	r3, r3
 800eab6:	441a      	add	r2, r3
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2b02      	cmp	r3, #2
 800eac0:	d105      	bne.n	800eace <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d002      	beq.n	800eace <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	3b01      	subs	r3, #1
 800eacc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	1c5a      	adds	r2, r3, #1
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ead6:	697b      	ldr	r3, [r7, #20]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3718      	adds	r7, #24
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d018      	beq.n	800eb24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	68da      	ldr	r2, [r3, #12]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eafa:	441a      	add	r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	68da      	ldr	r2, [r3, #12]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	689b      	ldr	r3, [r3, #8]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d303      	bcc.n	800eb14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681a      	ldr	r2, [r3, #0]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	68d9      	ldr	r1, [r3, #12]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	6838      	ldr	r0, [r7, #0]
 800eb20:	f011 fe15 	bl	802074e <memcpy>
	}
}
 800eb24:	bf00      	nop
 800eb26:	3708      	adds	r7, #8
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}

0800eb2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eb34:	f001 fd88 	bl	8010648 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eb3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eb40:	e011      	b.n	800eb66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d012      	beq.n	800eb70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	3324      	adds	r3, #36	@ 0x24
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f000 fd5c 	bl	800f60c <xTaskRemoveFromEventList>
 800eb54:	4603      	mov	r3, r0
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d001      	beq.n	800eb5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800eb5a:	f000 fe5d 	bl	800f818 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800eb5e:	7bfb      	ldrb	r3, [r7, #15]
 800eb60:	3b01      	subs	r3, #1
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800eb66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	dce9      	bgt.n	800eb42 <prvUnlockQueue+0x16>
 800eb6e:	e000      	b.n	800eb72 <prvUnlockQueue+0x46>
					break;
 800eb70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	22ff      	movs	r2, #255	@ 0xff
 800eb76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800eb7a:	f001 fd97 	bl	80106ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eb7e:	f001 fd63 	bl	8010648 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eb8a:	e011      	b.n	800ebb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	691b      	ldr	r3, [r3, #16]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d012      	beq.n	800ebba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	3310      	adds	r3, #16
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f000 fd37 	bl	800f60c <xTaskRemoveFromEventList>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d001      	beq.n	800eba8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800eba4:	f000 fe38 	bl	800f818 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800eba8:	7bbb      	ldrb	r3, [r7, #14]
 800ebaa:	3b01      	subs	r3, #1
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ebb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	dce9      	bgt.n	800eb8c <prvUnlockQueue+0x60>
 800ebb8:	e000      	b.n	800ebbc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ebba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	22ff      	movs	r2, #255	@ 0xff
 800ebc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ebc4:	f001 fd72 	bl	80106ac <vPortExitCritical>
}
 800ebc8:	bf00      	nop
 800ebca:	3710      	adds	r7, #16
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}

0800ebd0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ebd8:	f001 fd36 	bl	8010648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d102      	bne.n	800ebea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	60fb      	str	r3, [r7, #12]
 800ebe8:	e001      	b.n	800ebee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ebea:	2300      	movs	r3, #0
 800ebec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ebee:	f001 fd5d 	bl	80106ac <vPortExitCritical>

	return xReturn;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3710      	adds	r7, #16
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}

0800ebfc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec04:	f001 fd20 	bl	8010648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d102      	bne.n	800ec1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ec14:	2301      	movs	r3, #1
 800ec16:	60fb      	str	r3, [r7, #12]
 800ec18:	e001      	b.n	800ec1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ec1e:	f001 fd45 	bl	80106ac <vPortExitCritical>

	return xReturn;
 800ec22:	68fb      	ldr	r3, [r7, #12]
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3710      	adds	r7, #16
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ec2c:	b480      	push	{r7}
 800ec2e:	b085      	sub	sp, #20
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec36:	2300      	movs	r3, #0
 800ec38:	60fb      	str	r3, [r7, #12]
 800ec3a:	e014      	b.n	800ec66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ec3c:	4a0f      	ldr	r2, [pc, #60]	@ (800ec7c <vQueueAddToRegistry+0x50>)
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d10b      	bne.n	800ec60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ec48:	490c      	ldr	r1, [pc, #48]	@ (800ec7c <vQueueAddToRegistry+0x50>)
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	683a      	ldr	r2, [r7, #0]
 800ec4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ec52:	4a0a      	ldr	r2, [pc, #40]	@ (800ec7c <vQueueAddToRegistry+0x50>)
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	00db      	lsls	r3, r3, #3
 800ec58:	4413      	add	r3, r2
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ec5e:	e006      	b.n	800ec6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	3301      	adds	r3, #1
 800ec64:	60fb      	str	r3, [r7, #12]
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2b07      	cmp	r3, #7
 800ec6a:	d9e7      	bls.n	800ec3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ec6c:	bf00      	nop
 800ec6e:	bf00      	nop
 800ec70:	3714      	adds	r7, #20
 800ec72:	46bd      	mov	sp, r7
 800ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec78:	4770      	bx	lr
 800ec7a:	bf00      	nop
 800ec7c:	2000bbd8 	.word	0x2000bbd8

0800ec80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b086      	sub	sp, #24
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	60f8      	str	r0, [r7, #12]
 800ec88:	60b9      	str	r1, [r7, #8]
 800ec8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ec90:	f001 fcda 	bl	8010648 <vPortEnterCritical>
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ec9a:	b25b      	sxtb	r3, r3
 800ec9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eca0:	d103      	bne.n	800ecaa <vQueueWaitForMessageRestricted+0x2a>
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	2200      	movs	r2, #0
 800eca6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ecb0:	b25b      	sxtb	r3, r3
 800ecb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ecb6:	d103      	bne.n	800ecc0 <vQueueWaitForMessageRestricted+0x40>
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ecc0:	f001 fcf4 	bl	80106ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d106      	bne.n	800ecda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	3324      	adds	r3, #36	@ 0x24
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	68b9      	ldr	r1, [r7, #8]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f000 fc6d 	bl	800f5b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ecda:	6978      	ldr	r0, [r7, #20]
 800ecdc:	f7ff ff26 	bl	800eb2c <prvUnlockQueue>
	}
 800ece0:	bf00      	nop
 800ece2:	3718      	adds	r7, #24
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b08e      	sub	sp, #56	@ 0x38
 800ecec:	af04      	add	r7, sp, #16
 800ecee:	60f8      	str	r0, [r7, #12]
 800ecf0:	60b9      	str	r1, [r7, #8]
 800ecf2:	607a      	str	r2, [r7, #4]
 800ecf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ecf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d10b      	bne.n	800ed14 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ecfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed00:	f383 8811 	msr	BASEPRI, r3
 800ed04:	f3bf 8f6f 	isb	sy
 800ed08:	f3bf 8f4f 	dsb	sy
 800ed0c:	623b      	str	r3, [r7, #32]
}
 800ed0e:	bf00      	nop
 800ed10:	bf00      	nop
 800ed12:	e7fd      	b.n	800ed10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ed14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d10b      	bne.n	800ed32 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ed1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed1e:	f383 8811 	msr	BASEPRI, r3
 800ed22:	f3bf 8f6f 	isb	sy
 800ed26:	f3bf 8f4f 	dsb	sy
 800ed2a:	61fb      	str	r3, [r7, #28]
}
 800ed2c:	bf00      	nop
 800ed2e:	bf00      	nop
 800ed30:	e7fd      	b.n	800ed2e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ed32:	23a8      	movs	r3, #168	@ 0xa8
 800ed34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	2ba8      	cmp	r3, #168	@ 0xa8
 800ed3a:	d00b      	beq.n	800ed54 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ed3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed40:	f383 8811 	msr	BASEPRI, r3
 800ed44:	f3bf 8f6f 	isb	sy
 800ed48:	f3bf 8f4f 	dsb	sy
 800ed4c:	61bb      	str	r3, [r7, #24]
}
 800ed4e:	bf00      	nop
 800ed50:	bf00      	nop
 800ed52:	e7fd      	b.n	800ed50 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ed54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ed56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d01e      	beq.n	800ed9a <xTaskCreateStatic+0xb2>
 800ed5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d01b      	beq.n	800ed9a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ed62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed64:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ed66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed6a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ed6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed6e:	2202      	movs	r2, #2
 800ed70:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ed74:	2300      	movs	r3, #0
 800ed76:	9303      	str	r3, [sp, #12]
 800ed78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed7a:	9302      	str	r3, [sp, #8]
 800ed7c:	f107 0314 	add.w	r3, r7, #20
 800ed80:	9301      	str	r3, [sp, #4]
 800ed82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed84:	9300      	str	r3, [sp, #0]
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	687a      	ldr	r2, [r7, #4]
 800ed8a:	68b9      	ldr	r1, [r7, #8]
 800ed8c:	68f8      	ldr	r0, [r7, #12]
 800ed8e:	f000 f851 	bl	800ee34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ed92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ed94:	f000 f8f6 	bl	800ef84 <prvAddNewTaskToReadyList>
 800ed98:	e001      	b.n	800ed9e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ed9e:	697b      	ldr	r3, [r7, #20]
	}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3728      	adds	r7, #40	@ 0x28
 800eda4:	46bd      	mov	sp, r7
 800eda6:	bd80      	pop	{r7, pc}

0800eda8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b08c      	sub	sp, #48	@ 0x30
 800edac:	af04      	add	r7, sp, #16
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	603b      	str	r3, [r7, #0]
 800edb4:	4613      	mov	r3, r2
 800edb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800edb8:	88fb      	ldrh	r3, [r7, #6]
 800edba:	009b      	lsls	r3, r3, #2
 800edbc:	4618      	mov	r0, r3
 800edbe:	f001 fd65 	bl	801088c <pvPortMalloc>
 800edc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d00e      	beq.n	800ede8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800edca:	20a8      	movs	r0, #168	@ 0xa8
 800edcc:	f001 fd5e 	bl	801088c <pvPortMalloc>
 800edd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800edd2:	69fb      	ldr	r3, [r7, #28]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d003      	beq.n	800ede0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800edd8:	69fb      	ldr	r3, [r7, #28]
 800edda:	697a      	ldr	r2, [r7, #20]
 800eddc:	631a      	str	r2, [r3, #48]	@ 0x30
 800edde:	e005      	b.n	800edec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ede0:	6978      	ldr	r0, [r7, #20]
 800ede2:	f001 fe21 	bl	8010a28 <vPortFree>
 800ede6:	e001      	b.n	800edec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ede8:	2300      	movs	r3, #0
 800edea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d017      	beq.n	800ee22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800edf2:	69fb      	ldr	r3, [r7, #28]
 800edf4:	2200      	movs	r2, #0
 800edf6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800edfa:	88fa      	ldrh	r2, [r7, #6]
 800edfc:	2300      	movs	r3, #0
 800edfe:	9303      	str	r3, [sp, #12]
 800ee00:	69fb      	ldr	r3, [r7, #28]
 800ee02:	9302      	str	r3, [sp, #8]
 800ee04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee06:	9301      	str	r3, [sp, #4]
 800ee08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee0a:	9300      	str	r3, [sp, #0]
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	68b9      	ldr	r1, [r7, #8]
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	f000 f80f 	bl	800ee34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ee16:	69f8      	ldr	r0, [r7, #28]
 800ee18:	f000 f8b4 	bl	800ef84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ee1c:	2301      	movs	r3, #1
 800ee1e:	61bb      	str	r3, [r7, #24]
 800ee20:	e002      	b.n	800ee28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ee22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ee26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ee28:	69bb      	ldr	r3, [r7, #24]
	}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3720      	adds	r7, #32
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
	...

0800ee34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b088      	sub	sp, #32
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	60b9      	str	r1, [r7, #8]
 800ee3e:	607a      	str	r2, [r7, #4]
 800ee40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ee42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee44:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	009b      	lsls	r3, r3, #2
 800ee4a:	461a      	mov	r2, r3
 800ee4c:	21a5      	movs	r1, #165	@ 0xa5
 800ee4e:	f011 fb5f 	bl	8020510 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ee52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee5c:	3b01      	subs	r3, #1
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	4413      	add	r3, r2
 800ee62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	f023 0307 	bic.w	r3, r3, #7
 800ee6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ee6c:	69bb      	ldr	r3, [r7, #24]
 800ee6e:	f003 0307 	and.w	r3, r3, #7
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d00b      	beq.n	800ee8e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ee76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee7a:	f383 8811 	msr	BASEPRI, r3
 800ee7e:	f3bf 8f6f 	isb	sy
 800ee82:	f3bf 8f4f 	dsb	sy
 800ee86:	617b      	str	r3, [r7, #20]
}
 800ee88:	bf00      	nop
 800ee8a:	bf00      	nop
 800ee8c:	e7fd      	b.n	800ee8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d01f      	beq.n	800eed4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ee94:	2300      	movs	r3, #0
 800ee96:	61fb      	str	r3, [r7, #28]
 800ee98:	e012      	b.n	800eec0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ee9a:	68ba      	ldr	r2, [r7, #8]
 800ee9c:	69fb      	ldr	r3, [r7, #28]
 800ee9e:	4413      	add	r3, r2
 800eea0:	7819      	ldrb	r1, [r3, #0]
 800eea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eea4:	69fb      	ldr	r3, [r7, #28]
 800eea6:	4413      	add	r3, r2
 800eea8:	3334      	adds	r3, #52	@ 0x34
 800eeaa:	460a      	mov	r2, r1
 800eeac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800eeae:	68ba      	ldr	r2, [r7, #8]
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	4413      	add	r3, r2
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d006      	beq.n	800eec8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eeba:	69fb      	ldr	r3, [r7, #28]
 800eebc:	3301      	adds	r3, #1
 800eebe:	61fb      	str	r3, [r7, #28]
 800eec0:	69fb      	ldr	r3, [r7, #28]
 800eec2:	2b0f      	cmp	r3, #15
 800eec4:	d9e9      	bls.n	800ee9a <prvInitialiseNewTask+0x66>
 800eec6:	e000      	b.n	800eeca <prvInitialiseNewTask+0x96>
			{
				break;
 800eec8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eeca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eecc:	2200      	movs	r2, #0
 800eece:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800eed2:	e003      	b.n	800eedc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800eed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eed6:	2200      	movs	r2, #0
 800eed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800eedc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eede:	2b37      	cmp	r3, #55	@ 0x37
 800eee0:	d901      	bls.n	800eee6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800eee2:	2337      	movs	r3, #55	@ 0x37
 800eee4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800eee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eee8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eeea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800eeec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eeee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800eef0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800eef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eef4:	2200      	movs	r2, #0
 800eef6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800eef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eefa:	3304      	adds	r3, #4
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7ff f965 	bl	800e1cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ef02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef04:	3318      	adds	r3, #24
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7ff f960 	bl	800e1cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ef0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef10:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ef18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef1a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ef1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef20:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ef22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef24:	2200      	movs	r2, #0
 800ef26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ef2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ef32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef34:	3354      	adds	r3, #84	@ 0x54
 800ef36:	224c      	movs	r2, #76	@ 0x4c
 800ef38:	2100      	movs	r1, #0
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f011 fae8 	bl	8020510 <memset>
 800ef40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef42:	4a0d      	ldr	r2, [pc, #52]	@ (800ef78 <prvInitialiseNewTask+0x144>)
 800ef44:	659a      	str	r2, [r3, #88]	@ 0x58
 800ef46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef48:	4a0c      	ldr	r2, [pc, #48]	@ (800ef7c <prvInitialiseNewTask+0x148>)
 800ef4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ef4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef4e:	4a0c      	ldr	r2, [pc, #48]	@ (800ef80 <prvInitialiseNewTask+0x14c>)
 800ef50:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ef52:	683a      	ldr	r2, [r7, #0]
 800ef54:	68f9      	ldr	r1, [r7, #12]
 800ef56:	69b8      	ldr	r0, [r7, #24]
 800ef58:	f001 fa42 	bl	80103e0 <pxPortInitialiseStack>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ef60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ef62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d002      	beq.n	800ef6e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ef68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ef6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef6e:	bf00      	nop
 800ef70:	3720      	adds	r7, #32
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	200165d0 	.word	0x200165d0
 800ef7c:	20016638 	.word	0x20016638
 800ef80:	200166a0 	.word	0x200166a0

0800ef84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b082      	sub	sp, #8
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ef8c:	f001 fb5c 	bl	8010648 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ef90:	4b2d      	ldr	r3, [pc, #180]	@ (800f048 <prvAddNewTaskToReadyList+0xc4>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	3301      	adds	r3, #1
 800ef96:	4a2c      	ldr	r2, [pc, #176]	@ (800f048 <prvAddNewTaskToReadyList+0xc4>)
 800ef98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ef9a:	4b2c      	ldr	r3, [pc, #176]	@ (800f04c <prvAddNewTaskToReadyList+0xc8>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d109      	bne.n	800efb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800efa2:	4a2a      	ldr	r2, [pc, #168]	@ (800f04c <prvAddNewTaskToReadyList+0xc8>)
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800efa8:	4b27      	ldr	r3, [pc, #156]	@ (800f048 <prvAddNewTaskToReadyList+0xc4>)
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2b01      	cmp	r3, #1
 800efae:	d110      	bne.n	800efd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800efb0:	f000 fc56 	bl	800f860 <prvInitialiseTaskLists>
 800efb4:	e00d      	b.n	800efd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800efb6:	4b26      	ldr	r3, [pc, #152]	@ (800f050 <prvAddNewTaskToReadyList+0xcc>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d109      	bne.n	800efd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800efbe:	4b23      	ldr	r3, [pc, #140]	@ (800f04c <prvAddNewTaskToReadyList+0xc8>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efc8:	429a      	cmp	r2, r3
 800efca:	d802      	bhi.n	800efd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800efcc:	4a1f      	ldr	r2, [pc, #124]	@ (800f04c <prvAddNewTaskToReadyList+0xc8>)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800efd2:	4b20      	ldr	r3, [pc, #128]	@ (800f054 <prvAddNewTaskToReadyList+0xd0>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	3301      	adds	r3, #1
 800efd8:	4a1e      	ldr	r2, [pc, #120]	@ (800f054 <prvAddNewTaskToReadyList+0xd0>)
 800efda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800efdc:	4b1d      	ldr	r3, [pc, #116]	@ (800f054 <prvAddNewTaskToReadyList+0xd0>)
 800efde:	681a      	ldr	r2, [r3, #0]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efe8:	4b1b      	ldr	r3, [pc, #108]	@ (800f058 <prvAddNewTaskToReadyList+0xd4>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	429a      	cmp	r2, r3
 800efee:	d903      	bls.n	800eff8 <prvAddNewTaskToReadyList+0x74>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eff4:	4a18      	ldr	r2, [pc, #96]	@ (800f058 <prvAddNewTaskToReadyList+0xd4>)
 800eff6:	6013      	str	r3, [r2, #0]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800effc:	4613      	mov	r3, r2
 800effe:	009b      	lsls	r3, r3, #2
 800f000:	4413      	add	r3, r2
 800f002:	009b      	lsls	r3, r3, #2
 800f004:	4a15      	ldr	r2, [pc, #84]	@ (800f05c <prvAddNewTaskToReadyList+0xd8>)
 800f006:	441a      	add	r2, r3
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	3304      	adds	r3, #4
 800f00c:	4619      	mov	r1, r3
 800f00e:	4610      	mov	r0, r2
 800f010:	f7ff f8e9 	bl	800e1e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f014:	f001 fb4a 	bl	80106ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f018:	4b0d      	ldr	r3, [pc, #52]	@ (800f050 <prvAddNewTaskToReadyList+0xcc>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d00e      	beq.n	800f03e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f020:	4b0a      	ldr	r3, [pc, #40]	@ (800f04c <prvAddNewTaskToReadyList+0xc8>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d207      	bcs.n	800f03e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f02e:	4b0c      	ldr	r3, [pc, #48]	@ (800f060 <prvAddNewTaskToReadyList+0xdc>)
 800f030:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f034:	601a      	str	r2, [r3, #0]
 800f036:	f3bf 8f4f 	dsb	sy
 800f03a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f03e:	bf00      	nop
 800f040:	3708      	adds	r7, #8
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	2000c0ec 	.word	0x2000c0ec
 800f04c:	2000bc18 	.word	0x2000bc18
 800f050:	2000c0f8 	.word	0x2000c0f8
 800f054:	2000c108 	.word	0x2000c108
 800f058:	2000c0f4 	.word	0x2000c0f4
 800f05c:	2000bc1c 	.word	0x2000bc1c
 800f060:	e000ed04 	.word	0xe000ed04

0800f064 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f064:	b580      	push	{r7, lr}
 800f066:	b084      	sub	sp, #16
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f06c:	2300      	movs	r3, #0
 800f06e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d018      	beq.n	800f0a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f076:	4b14      	ldr	r3, [pc, #80]	@ (800f0c8 <vTaskDelay+0x64>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d00b      	beq.n	800f096 <vTaskDelay+0x32>
	__asm volatile
 800f07e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f082:	f383 8811 	msr	BASEPRI, r3
 800f086:	f3bf 8f6f 	isb	sy
 800f08a:	f3bf 8f4f 	dsb	sy
 800f08e:	60bb      	str	r3, [r7, #8]
}
 800f090:	bf00      	nop
 800f092:	bf00      	nop
 800f094:	e7fd      	b.n	800f092 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f096:	f000 f88b 	bl	800f1b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f09a:	2100      	movs	r1, #0
 800f09c:	6878      	ldr	r0, [r7, #4]
 800f09e:	f000 fd31 	bl	800fb04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f0a2:	f000 f893 	bl	800f1cc <xTaskResumeAll>
 800f0a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d107      	bne.n	800f0be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f0ae:	4b07      	ldr	r3, [pc, #28]	@ (800f0cc <vTaskDelay+0x68>)
 800f0b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0b4:	601a      	str	r2, [r3, #0]
 800f0b6:	f3bf 8f4f 	dsb	sy
 800f0ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f0be:	bf00      	nop
 800f0c0:	3710      	adds	r7, #16
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}
 800f0c6:	bf00      	nop
 800f0c8:	2000c114 	.word	0x2000c114
 800f0cc:	e000ed04 	.word	0xe000ed04

0800f0d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b08a      	sub	sp, #40	@ 0x28
 800f0d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f0de:	463a      	mov	r2, r7
 800f0e0:	1d39      	adds	r1, r7, #4
 800f0e2:	f107 0308 	add.w	r3, r7, #8
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7ff f81c 	bl	800e124 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f0ec:	6839      	ldr	r1, [r7, #0]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	68ba      	ldr	r2, [r7, #8]
 800f0f2:	9202      	str	r2, [sp, #8]
 800f0f4:	9301      	str	r3, [sp, #4]
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	9300      	str	r3, [sp, #0]
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	460a      	mov	r2, r1
 800f0fe:	4924      	ldr	r1, [pc, #144]	@ (800f190 <vTaskStartScheduler+0xc0>)
 800f100:	4824      	ldr	r0, [pc, #144]	@ (800f194 <vTaskStartScheduler+0xc4>)
 800f102:	f7ff fdf1 	bl	800ece8 <xTaskCreateStatic>
 800f106:	4603      	mov	r3, r0
 800f108:	4a23      	ldr	r2, [pc, #140]	@ (800f198 <vTaskStartScheduler+0xc8>)
 800f10a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f10c:	4b22      	ldr	r3, [pc, #136]	@ (800f198 <vTaskStartScheduler+0xc8>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d002      	beq.n	800f11a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f114:	2301      	movs	r3, #1
 800f116:	617b      	str	r3, [r7, #20]
 800f118:	e001      	b.n	800f11e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f11a:	2300      	movs	r3, #0
 800f11c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	2b01      	cmp	r3, #1
 800f122:	d102      	bne.n	800f12a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f124:	f000 fd42 	bl	800fbac <xTimerCreateTimerTask>
 800f128:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	2b01      	cmp	r3, #1
 800f12e:	d11b      	bne.n	800f168 <vTaskStartScheduler+0x98>
	__asm volatile
 800f130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f134:	f383 8811 	msr	BASEPRI, r3
 800f138:	f3bf 8f6f 	isb	sy
 800f13c:	f3bf 8f4f 	dsb	sy
 800f140:	613b      	str	r3, [r7, #16]
}
 800f142:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f144:	4b15      	ldr	r3, [pc, #84]	@ (800f19c <vTaskStartScheduler+0xcc>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	3354      	adds	r3, #84	@ 0x54
 800f14a:	4a15      	ldr	r2, [pc, #84]	@ (800f1a0 <vTaskStartScheduler+0xd0>)
 800f14c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f14e:	4b15      	ldr	r3, [pc, #84]	@ (800f1a4 <vTaskStartScheduler+0xd4>)
 800f150:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f154:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f156:	4b14      	ldr	r3, [pc, #80]	@ (800f1a8 <vTaskStartScheduler+0xd8>)
 800f158:	2201      	movs	r2, #1
 800f15a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f15c:	4b13      	ldr	r3, [pc, #76]	@ (800f1ac <vTaskStartScheduler+0xdc>)
 800f15e:	2200      	movs	r2, #0
 800f160:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f162:	f001 f9cd 	bl	8010500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f166:	e00f      	b.n	800f188 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f16e:	d10b      	bne.n	800f188 <vTaskStartScheduler+0xb8>
	__asm volatile
 800f170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f174:	f383 8811 	msr	BASEPRI, r3
 800f178:	f3bf 8f6f 	isb	sy
 800f17c:	f3bf 8f4f 	dsb	sy
 800f180:	60fb      	str	r3, [r7, #12]
}
 800f182:	bf00      	nop
 800f184:	bf00      	nop
 800f186:	e7fd      	b.n	800f184 <vTaskStartScheduler+0xb4>
}
 800f188:	bf00      	nop
 800f18a:	3718      	adds	r7, #24
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}
 800f190:	080214e8 	.word	0x080214e8
 800f194:	0800f831 	.word	0x0800f831
 800f198:	2000c110 	.word	0x2000c110
 800f19c:	2000bc18 	.word	0x2000bc18
 800f1a0:	20000bfc 	.word	0x20000bfc
 800f1a4:	2000c10c 	.word	0x2000c10c
 800f1a8:	2000c0f8 	.word	0x2000c0f8
 800f1ac:	2000c0f0 	.word	0x2000c0f0

0800f1b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f1b4:	4b04      	ldr	r3, [pc, #16]	@ (800f1c8 <vTaskSuspendAll+0x18>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	4a03      	ldr	r2, [pc, #12]	@ (800f1c8 <vTaskSuspendAll+0x18>)
 800f1bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f1be:	bf00      	nop
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c6:	4770      	bx	lr
 800f1c8:	2000c114 	.word	0x2000c114

0800f1cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b084      	sub	sp, #16
 800f1d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f1da:	4b42      	ldr	r3, [pc, #264]	@ (800f2e4 <xTaskResumeAll+0x118>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d10b      	bne.n	800f1fa <xTaskResumeAll+0x2e>
	__asm volatile
 800f1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1e6:	f383 8811 	msr	BASEPRI, r3
 800f1ea:	f3bf 8f6f 	isb	sy
 800f1ee:	f3bf 8f4f 	dsb	sy
 800f1f2:	603b      	str	r3, [r7, #0]
}
 800f1f4:	bf00      	nop
 800f1f6:	bf00      	nop
 800f1f8:	e7fd      	b.n	800f1f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f1fa:	f001 fa25 	bl	8010648 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f1fe:	4b39      	ldr	r3, [pc, #228]	@ (800f2e4 <xTaskResumeAll+0x118>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	3b01      	subs	r3, #1
 800f204:	4a37      	ldr	r2, [pc, #220]	@ (800f2e4 <xTaskResumeAll+0x118>)
 800f206:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f208:	4b36      	ldr	r3, [pc, #216]	@ (800f2e4 <xTaskResumeAll+0x118>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d162      	bne.n	800f2d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f210:	4b35      	ldr	r3, [pc, #212]	@ (800f2e8 <xTaskResumeAll+0x11c>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d05e      	beq.n	800f2d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f218:	e02f      	b.n	800f27a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f21a:	4b34      	ldr	r3, [pc, #208]	@ (800f2ec <xTaskResumeAll+0x120>)
 800f21c:	68db      	ldr	r3, [r3, #12]
 800f21e:	68db      	ldr	r3, [r3, #12]
 800f220:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	3318      	adds	r3, #24
 800f226:	4618      	mov	r0, r3
 800f228:	f7ff f83a 	bl	800e2a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	3304      	adds	r3, #4
 800f230:	4618      	mov	r0, r3
 800f232:	f7ff f835 	bl	800e2a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f23a:	4b2d      	ldr	r3, [pc, #180]	@ (800f2f0 <xTaskResumeAll+0x124>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	429a      	cmp	r2, r3
 800f240:	d903      	bls.n	800f24a <xTaskResumeAll+0x7e>
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f246:	4a2a      	ldr	r2, [pc, #168]	@ (800f2f0 <xTaskResumeAll+0x124>)
 800f248:	6013      	str	r3, [r2, #0]
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f24e:	4613      	mov	r3, r2
 800f250:	009b      	lsls	r3, r3, #2
 800f252:	4413      	add	r3, r2
 800f254:	009b      	lsls	r3, r3, #2
 800f256:	4a27      	ldr	r2, [pc, #156]	@ (800f2f4 <xTaskResumeAll+0x128>)
 800f258:	441a      	add	r2, r3
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	3304      	adds	r3, #4
 800f25e:	4619      	mov	r1, r3
 800f260:	4610      	mov	r0, r2
 800f262:	f7fe ffc0 	bl	800e1e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f26a:	4b23      	ldr	r3, [pc, #140]	@ (800f2f8 <xTaskResumeAll+0x12c>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f270:	429a      	cmp	r2, r3
 800f272:	d302      	bcc.n	800f27a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f274:	4b21      	ldr	r3, [pc, #132]	@ (800f2fc <xTaskResumeAll+0x130>)
 800f276:	2201      	movs	r2, #1
 800f278:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f27a:	4b1c      	ldr	r3, [pc, #112]	@ (800f2ec <xTaskResumeAll+0x120>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d1cb      	bne.n	800f21a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d001      	beq.n	800f28c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f288:	f000 fb8e 	bl	800f9a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f28c:	4b1c      	ldr	r3, [pc, #112]	@ (800f300 <xTaskResumeAll+0x134>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d010      	beq.n	800f2ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f298:	f000 f846 	bl	800f328 <xTaskIncrementTick>
 800f29c:	4603      	mov	r3, r0
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d002      	beq.n	800f2a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f2a2:	4b16      	ldr	r3, [pc, #88]	@ (800f2fc <xTaskResumeAll+0x130>)
 800f2a4:	2201      	movs	r2, #1
 800f2a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	3b01      	subs	r3, #1
 800f2ac:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d1f1      	bne.n	800f298 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800f2b4:	4b12      	ldr	r3, [pc, #72]	@ (800f300 <xTaskResumeAll+0x134>)
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f2ba:	4b10      	ldr	r3, [pc, #64]	@ (800f2fc <xTaskResumeAll+0x130>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d009      	beq.n	800f2d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f2c6:	4b0f      	ldr	r3, [pc, #60]	@ (800f304 <xTaskResumeAll+0x138>)
 800f2c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2cc:	601a      	str	r2, [r3, #0]
 800f2ce:	f3bf 8f4f 	dsb	sy
 800f2d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f2d6:	f001 f9e9 	bl	80106ac <vPortExitCritical>

	return xAlreadyYielded;
 800f2da:	68bb      	ldr	r3, [r7, #8]
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3710      	adds	r7, #16
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}
 800f2e4:	2000c114 	.word	0x2000c114
 800f2e8:	2000c0ec 	.word	0x2000c0ec
 800f2ec:	2000c0ac 	.word	0x2000c0ac
 800f2f0:	2000c0f4 	.word	0x2000c0f4
 800f2f4:	2000bc1c 	.word	0x2000bc1c
 800f2f8:	2000bc18 	.word	0x2000bc18
 800f2fc:	2000c100 	.word	0x2000c100
 800f300:	2000c0fc 	.word	0x2000c0fc
 800f304:	e000ed04 	.word	0xe000ed04

0800f308 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f30e:	4b05      	ldr	r3, [pc, #20]	@ (800f324 <xTaskGetTickCount+0x1c>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f314:	687b      	ldr	r3, [r7, #4]
}
 800f316:	4618      	mov	r0, r3
 800f318:	370c      	adds	r7, #12
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr
 800f322:	bf00      	nop
 800f324:	2000c0f0 	.word	0x2000c0f0

0800f328 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b086      	sub	sp, #24
 800f32c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f32e:	2300      	movs	r3, #0
 800f330:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f332:	4b4f      	ldr	r3, [pc, #316]	@ (800f470 <xTaskIncrementTick+0x148>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	f040 8090 	bne.w	800f45c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f33c:	4b4d      	ldr	r3, [pc, #308]	@ (800f474 <xTaskIncrementTick+0x14c>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	3301      	adds	r3, #1
 800f342:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f344:	4a4b      	ldr	r2, [pc, #300]	@ (800f474 <xTaskIncrementTick+0x14c>)
 800f346:	693b      	ldr	r3, [r7, #16]
 800f348:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d121      	bne.n	800f394 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f350:	4b49      	ldr	r3, [pc, #292]	@ (800f478 <xTaskIncrementTick+0x150>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d00b      	beq.n	800f372 <xTaskIncrementTick+0x4a>
	__asm volatile
 800f35a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f35e:	f383 8811 	msr	BASEPRI, r3
 800f362:	f3bf 8f6f 	isb	sy
 800f366:	f3bf 8f4f 	dsb	sy
 800f36a:	603b      	str	r3, [r7, #0]
}
 800f36c:	bf00      	nop
 800f36e:	bf00      	nop
 800f370:	e7fd      	b.n	800f36e <xTaskIncrementTick+0x46>
 800f372:	4b41      	ldr	r3, [pc, #260]	@ (800f478 <xTaskIncrementTick+0x150>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	60fb      	str	r3, [r7, #12]
 800f378:	4b40      	ldr	r3, [pc, #256]	@ (800f47c <xTaskIncrementTick+0x154>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	4a3e      	ldr	r2, [pc, #248]	@ (800f478 <xTaskIncrementTick+0x150>)
 800f37e:	6013      	str	r3, [r2, #0]
 800f380:	4a3e      	ldr	r2, [pc, #248]	@ (800f47c <xTaskIncrementTick+0x154>)
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	6013      	str	r3, [r2, #0]
 800f386:	4b3e      	ldr	r3, [pc, #248]	@ (800f480 <xTaskIncrementTick+0x158>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	3301      	adds	r3, #1
 800f38c:	4a3c      	ldr	r2, [pc, #240]	@ (800f480 <xTaskIncrementTick+0x158>)
 800f38e:	6013      	str	r3, [r2, #0]
 800f390:	f000 fb0a 	bl	800f9a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f394:	4b3b      	ldr	r3, [pc, #236]	@ (800f484 <xTaskIncrementTick+0x15c>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	693a      	ldr	r2, [r7, #16]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d349      	bcc.n	800f432 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f39e:	4b36      	ldr	r3, [pc, #216]	@ (800f478 <xTaskIncrementTick+0x150>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d104      	bne.n	800f3b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3a8:	4b36      	ldr	r3, [pc, #216]	@ (800f484 <xTaskIncrementTick+0x15c>)
 800f3aa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f3ae:	601a      	str	r2, [r3, #0]
					break;
 800f3b0:	e03f      	b.n	800f432 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3b2:	4b31      	ldr	r3, [pc, #196]	@ (800f478 <xTaskIncrementTick+0x150>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	68db      	ldr	r3, [r3, #12]
 800f3ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f3bc:	68bb      	ldr	r3, [r7, #8]
 800f3be:	685b      	ldr	r3, [r3, #4]
 800f3c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f3c2:	693a      	ldr	r2, [r7, #16]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d203      	bcs.n	800f3d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f3ca:	4a2e      	ldr	r2, [pc, #184]	@ (800f484 <xTaskIncrementTick+0x15c>)
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f3d0:	e02f      	b.n	800f432 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	3304      	adds	r3, #4
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7fe ff62 	bl	800e2a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f3dc:	68bb      	ldr	r3, [r7, #8]
 800f3de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d004      	beq.n	800f3ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	3318      	adds	r3, #24
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f7fe ff59 	bl	800e2a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f3f2:	4b25      	ldr	r3, [pc, #148]	@ (800f488 <xTaskIncrementTick+0x160>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d903      	bls.n	800f402 <xTaskIncrementTick+0xda>
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3fe:	4a22      	ldr	r2, [pc, #136]	@ (800f488 <xTaskIncrementTick+0x160>)
 800f400:	6013      	str	r3, [r2, #0]
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f406:	4613      	mov	r3, r2
 800f408:	009b      	lsls	r3, r3, #2
 800f40a:	4413      	add	r3, r2
 800f40c:	009b      	lsls	r3, r3, #2
 800f40e:	4a1f      	ldr	r2, [pc, #124]	@ (800f48c <xTaskIncrementTick+0x164>)
 800f410:	441a      	add	r2, r3
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	3304      	adds	r3, #4
 800f416:	4619      	mov	r1, r3
 800f418:	4610      	mov	r0, r2
 800f41a:	f7fe fee4 	bl	800e1e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f422:	4b1b      	ldr	r3, [pc, #108]	@ (800f490 <xTaskIncrementTick+0x168>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f428:	429a      	cmp	r2, r3
 800f42a:	d3b8      	bcc.n	800f39e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f42c:	2301      	movs	r3, #1
 800f42e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f430:	e7b5      	b.n	800f39e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f432:	4b17      	ldr	r3, [pc, #92]	@ (800f490 <xTaskIncrementTick+0x168>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f438:	4914      	ldr	r1, [pc, #80]	@ (800f48c <xTaskIncrementTick+0x164>)
 800f43a:	4613      	mov	r3, r2
 800f43c:	009b      	lsls	r3, r3, #2
 800f43e:	4413      	add	r3, r2
 800f440:	009b      	lsls	r3, r3, #2
 800f442:	440b      	add	r3, r1
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2b01      	cmp	r3, #1
 800f448:	d901      	bls.n	800f44e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f44a:	2301      	movs	r3, #1
 800f44c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f44e:	4b11      	ldr	r3, [pc, #68]	@ (800f494 <xTaskIncrementTick+0x16c>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d007      	beq.n	800f466 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f456:	2301      	movs	r3, #1
 800f458:	617b      	str	r3, [r7, #20]
 800f45a:	e004      	b.n	800f466 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f45c:	4b0e      	ldr	r3, [pc, #56]	@ (800f498 <xTaskIncrementTick+0x170>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	3301      	adds	r3, #1
 800f462:	4a0d      	ldr	r2, [pc, #52]	@ (800f498 <xTaskIncrementTick+0x170>)
 800f464:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f466:	697b      	ldr	r3, [r7, #20]
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3718      	adds	r7, #24
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}
 800f470:	2000c114 	.word	0x2000c114
 800f474:	2000c0f0 	.word	0x2000c0f0
 800f478:	2000c0a4 	.word	0x2000c0a4
 800f47c:	2000c0a8 	.word	0x2000c0a8
 800f480:	2000c104 	.word	0x2000c104
 800f484:	2000c10c 	.word	0x2000c10c
 800f488:	2000c0f4 	.word	0x2000c0f4
 800f48c:	2000bc1c 	.word	0x2000bc1c
 800f490:	2000bc18 	.word	0x2000bc18
 800f494:	2000c100 	.word	0x2000c100
 800f498:	2000c0fc 	.word	0x2000c0fc

0800f49c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f49c:	b480      	push	{r7}
 800f49e:	b085      	sub	sp, #20
 800f4a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f4a2:	4b2b      	ldr	r3, [pc, #172]	@ (800f550 <vTaskSwitchContext+0xb4>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d003      	beq.n	800f4b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f4aa:	4b2a      	ldr	r3, [pc, #168]	@ (800f554 <vTaskSwitchContext+0xb8>)
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f4b0:	e047      	b.n	800f542 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f4b2:	4b28      	ldr	r3, [pc, #160]	@ (800f554 <vTaskSwitchContext+0xb8>)
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4b8:	4b27      	ldr	r3, [pc, #156]	@ (800f558 <vTaskSwitchContext+0xbc>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	60fb      	str	r3, [r7, #12]
 800f4be:	e011      	b.n	800f4e4 <vTaskSwitchContext+0x48>
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d10b      	bne.n	800f4de <vTaskSwitchContext+0x42>
	__asm volatile
 800f4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4ca:	f383 8811 	msr	BASEPRI, r3
 800f4ce:	f3bf 8f6f 	isb	sy
 800f4d2:	f3bf 8f4f 	dsb	sy
 800f4d6:	607b      	str	r3, [r7, #4]
}
 800f4d8:	bf00      	nop
 800f4da:	bf00      	nop
 800f4dc:	e7fd      	b.n	800f4da <vTaskSwitchContext+0x3e>
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	3b01      	subs	r3, #1
 800f4e2:	60fb      	str	r3, [r7, #12]
 800f4e4:	491d      	ldr	r1, [pc, #116]	@ (800f55c <vTaskSwitchContext+0xc0>)
 800f4e6:	68fa      	ldr	r2, [r7, #12]
 800f4e8:	4613      	mov	r3, r2
 800f4ea:	009b      	lsls	r3, r3, #2
 800f4ec:	4413      	add	r3, r2
 800f4ee:	009b      	lsls	r3, r3, #2
 800f4f0:	440b      	add	r3, r1
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d0e3      	beq.n	800f4c0 <vTaskSwitchContext+0x24>
 800f4f8:	68fa      	ldr	r2, [r7, #12]
 800f4fa:	4613      	mov	r3, r2
 800f4fc:	009b      	lsls	r3, r3, #2
 800f4fe:	4413      	add	r3, r2
 800f500:	009b      	lsls	r3, r3, #2
 800f502:	4a16      	ldr	r2, [pc, #88]	@ (800f55c <vTaskSwitchContext+0xc0>)
 800f504:	4413      	add	r3, r2
 800f506:	60bb      	str	r3, [r7, #8]
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	685b      	ldr	r3, [r3, #4]
 800f50c:	685a      	ldr	r2, [r3, #4]
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	605a      	str	r2, [r3, #4]
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	685a      	ldr	r2, [r3, #4]
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	3308      	adds	r3, #8
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d104      	bne.n	800f528 <vTaskSwitchContext+0x8c>
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	685b      	ldr	r3, [r3, #4]
 800f522:	685a      	ldr	r2, [r3, #4]
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	605a      	str	r2, [r3, #4]
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	68db      	ldr	r3, [r3, #12]
 800f52e:	4a0c      	ldr	r2, [pc, #48]	@ (800f560 <vTaskSwitchContext+0xc4>)
 800f530:	6013      	str	r3, [r2, #0]
 800f532:	4a09      	ldr	r2, [pc, #36]	@ (800f558 <vTaskSwitchContext+0xbc>)
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f538:	4b09      	ldr	r3, [pc, #36]	@ (800f560 <vTaskSwitchContext+0xc4>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	3354      	adds	r3, #84	@ 0x54
 800f53e:	4a09      	ldr	r2, [pc, #36]	@ (800f564 <vTaskSwitchContext+0xc8>)
 800f540:	6013      	str	r3, [r2, #0]
}
 800f542:	bf00      	nop
 800f544:	3714      	adds	r7, #20
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr
 800f54e:	bf00      	nop
 800f550:	2000c114 	.word	0x2000c114
 800f554:	2000c100 	.word	0x2000c100
 800f558:	2000c0f4 	.word	0x2000c0f4
 800f55c:	2000bc1c 	.word	0x2000bc1c
 800f560:	2000bc18 	.word	0x2000bc18
 800f564:	20000bfc 	.word	0x20000bfc

0800f568 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b084      	sub	sp, #16
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d10b      	bne.n	800f590 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f57c:	f383 8811 	msr	BASEPRI, r3
 800f580:	f3bf 8f6f 	isb	sy
 800f584:	f3bf 8f4f 	dsb	sy
 800f588:	60fb      	str	r3, [r7, #12]
}
 800f58a:	bf00      	nop
 800f58c:	bf00      	nop
 800f58e:	e7fd      	b.n	800f58c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f590:	4b07      	ldr	r3, [pc, #28]	@ (800f5b0 <vTaskPlaceOnEventList+0x48>)
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	3318      	adds	r3, #24
 800f596:	4619      	mov	r1, r3
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f7fe fe48 	bl	800e22e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f59e:	2101      	movs	r1, #1
 800f5a0:	6838      	ldr	r0, [r7, #0]
 800f5a2:	f000 faaf 	bl	800fb04 <prvAddCurrentTaskToDelayedList>
}
 800f5a6:	bf00      	nop
 800f5a8:	3710      	adds	r7, #16
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	bd80      	pop	{r7, pc}
 800f5ae:	bf00      	nop
 800f5b0:	2000bc18 	.word	0x2000bc18

0800f5b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b086      	sub	sp, #24
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	60f8      	str	r0, [r7, #12]
 800f5bc:	60b9      	str	r1, [r7, #8]
 800f5be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d10b      	bne.n	800f5de <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5ca:	f383 8811 	msr	BASEPRI, r3
 800f5ce:	f3bf 8f6f 	isb	sy
 800f5d2:	f3bf 8f4f 	dsb	sy
 800f5d6:	617b      	str	r3, [r7, #20]
}
 800f5d8:	bf00      	nop
 800f5da:	bf00      	nop
 800f5dc:	e7fd      	b.n	800f5da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f5de:	4b0a      	ldr	r3, [pc, #40]	@ (800f608 <vTaskPlaceOnEventListRestricted+0x54>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	3318      	adds	r3, #24
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	68f8      	ldr	r0, [r7, #12]
 800f5e8:	f7fe fdfd 	bl	800e1e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d002      	beq.n	800f5f8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f5f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f5f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f5f8:	6879      	ldr	r1, [r7, #4]
 800f5fa:	68b8      	ldr	r0, [r7, #8]
 800f5fc:	f000 fa82 	bl	800fb04 <prvAddCurrentTaskToDelayedList>
	}
 800f600:	bf00      	nop
 800f602:	3718      	adds	r7, #24
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}
 800f608:	2000bc18 	.word	0x2000bc18

0800f60c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b086      	sub	sp, #24
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	68db      	ldr	r3, [r3, #12]
 800f618:	68db      	ldr	r3, [r3, #12]
 800f61a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d10b      	bne.n	800f63a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f626:	f383 8811 	msr	BASEPRI, r3
 800f62a:	f3bf 8f6f 	isb	sy
 800f62e:	f3bf 8f4f 	dsb	sy
 800f632:	60fb      	str	r3, [r7, #12]
}
 800f634:	bf00      	nop
 800f636:	bf00      	nop
 800f638:	e7fd      	b.n	800f636 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	3318      	adds	r3, #24
 800f63e:	4618      	mov	r0, r3
 800f640:	f7fe fe2e 	bl	800e2a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f644:	4b1d      	ldr	r3, [pc, #116]	@ (800f6bc <xTaskRemoveFromEventList+0xb0>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d11d      	bne.n	800f688 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	3304      	adds	r3, #4
 800f650:	4618      	mov	r0, r3
 800f652:	f7fe fe25 	bl	800e2a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f656:	693b      	ldr	r3, [r7, #16]
 800f658:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f65a:	4b19      	ldr	r3, [pc, #100]	@ (800f6c0 <xTaskRemoveFromEventList+0xb4>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	429a      	cmp	r2, r3
 800f660:	d903      	bls.n	800f66a <xTaskRemoveFromEventList+0x5e>
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f666:	4a16      	ldr	r2, [pc, #88]	@ (800f6c0 <xTaskRemoveFromEventList+0xb4>)
 800f668:	6013      	str	r3, [r2, #0]
 800f66a:	693b      	ldr	r3, [r7, #16]
 800f66c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f66e:	4613      	mov	r3, r2
 800f670:	009b      	lsls	r3, r3, #2
 800f672:	4413      	add	r3, r2
 800f674:	009b      	lsls	r3, r3, #2
 800f676:	4a13      	ldr	r2, [pc, #76]	@ (800f6c4 <xTaskRemoveFromEventList+0xb8>)
 800f678:	441a      	add	r2, r3
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	3304      	adds	r3, #4
 800f67e:	4619      	mov	r1, r3
 800f680:	4610      	mov	r0, r2
 800f682:	f7fe fdb0 	bl	800e1e6 <vListInsertEnd>
 800f686:	e005      	b.n	800f694 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f688:	693b      	ldr	r3, [r7, #16]
 800f68a:	3318      	adds	r3, #24
 800f68c:	4619      	mov	r1, r3
 800f68e:	480e      	ldr	r0, [pc, #56]	@ (800f6c8 <xTaskRemoveFromEventList+0xbc>)
 800f690:	f7fe fda9 	bl	800e1e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f698:	4b0c      	ldr	r3, [pc, #48]	@ (800f6cc <xTaskRemoveFromEventList+0xc0>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d905      	bls.n	800f6ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f6a6:	4b0a      	ldr	r3, [pc, #40]	@ (800f6d0 <xTaskRemoveFromEventList+0xc4>)
 800f6a8:	2201      	movs	r2, #1
 800f6aa:	601a      	str	r2, [r3, #0]
 800f6ac:	e001      	b.n	800f6b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f6b2:	697b      	ldr	r3, [r7, #20]
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3718      	adds	r7, #24
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}
 800f6bc:	2000c114 	.word	0x2000c114
 800f6c0:	2000c0f4 	.word	0x2000c0f4
 800f6c4:	2000bc1c 	.word	0x2000bc1c
 800f6c8:	2000c0ac 	.word	0x2000c0ac
 800f6cc:	2000bc18 	.word	0x2000bc18
 800f6d0:	2000c100 	.word	0x2000c100

0800f6d4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d10b      	bne.n	800f6fa <vTaskSetTimeOutState+0x26>
	__asm volatile
 800f6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6e6:	f383 8811 	msr	BASEPRI, r3
 800f6ea:	f3bf 8f6f 	isb	sy
 800f6ee:	f3bf 8f4f 	dsb	sy
 800f6f2:	60fb      	str	r3, [r7, #12]
}
 800f6f4:	bf00      	nop
 800f6f6:	bf00      	nop
 800f6f8:	e7fd      	b.n	800f6f6 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800f6fa:	f000 ffa5 	bl	8010648 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f6fe:	4b07      	ldr	r3, [pc, #28]	@ (800f71c <vTaskSetTimeOutState+0x48>)
 800f700:	681a      	ldr	r2, [r3, #0]
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800f706:	4b06      	ldr	r3, [pc, #24]	@ (800f720 <vTaskSetTimeOutState+0x4c>)
 800f708:	681a      	ldr	r2, [r3, #0]
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800f70e:	f000 ffcd 	bl	80106ac <vPortExitCritical>
}
 800f712:	bf00      	nop
 800f714:	3710      	adds	r7, #16
 800f716:	46bd      	mov	sp, r7
 800f718:	bd80      	pop	{r7, pc}
 800f71a:	bf00      	nop
 800f71c:	2000c104 	.word	0x2000c104
 800f720:	2000c0f0 	.word	0x2000c0f0

0800f724 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f724:	b480      	push	{r7}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f72c:	4b06      	ldr	r3, [pc, #24]	@ (800f748 <vTaskInternalSetTimeOutState+0x24>)
 800f72e:	681a      	ldr	r2, [r3, #0]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f734:	4b05      	ldr	r3, [pc, #20]	@ (800f74c <vTaskInternalSetTimeOutState+0x28>)
 800f736:	681a      	ldr	r2, [r3, #0]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	605a      	str	r2, [r3, #4]
}
 800f73c:	bf00      	nop
 800f73e:	370c      	adds	r7, #12
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr
 800f748:	2000c104 	.word	0x2000c104
 800f74c:	2000c0f0 	.word	0x2000c0f0

0800f750 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b088      	sub	sp, #32
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d10b      	bne.n	800f778 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f764:	f383 8811 	msr	BASEPRI, r3
 800f768:	f3bf 8f6f 	isb	sy
 800f76c:	f3bf 8f4f 	dsb	sy
 800f770:	613b      	str	r3, [r7, #16]
}
 800f772:	bf00      	nop
 800f774:	bf00      	nop
 800f776:	e7fd      	b.n	800f774 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d10b      	bne.n	800f796 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f782:	f383 8811 	msr	BASEPRI, r3
 800f786:	f3bf 8f6f 	isb	sy
 800f78a:	f3bf 8f4f 	dsb	sy
 800f78e:	60fb      	str	r3, [r7, #12]
}
 800f790:	bf00      	nop
 800f792:	bf00      	nop
 800f794:	e7fd      	b.n	800f792 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f796:	f000 ff57 	bl	8010648 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f79a:	4b1d      	ldr	r3, [pc, #116]	@ (800f810 <xTaskCheckForTimeOut+0xc0>)
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	69ba      	ldr	r2, [r7, #24]
 800f7a6:	1ad3      	subs	r3, r2, r3
 800f7a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f7b2:	d102      	bne.n	800f7ba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	61fb      	str	r3, [r7, #28]
 800f7b8:	e023      	b.n	800f802 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681a      	ldr	r2, [r3, #0]
 800f7be:	4b15      	ldr	r3, [pc, #84]	@ (800f814 <xTaskCheckForTimeOut+0xc4>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d007      	beq.n	800f7d6 <xTaskCheckForTimeOut+0x86>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	685b      	ldr	r3, [r3, #4]
 800f7ca:	69ba      	ldr	r2, [r7, #24]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d302      	bcc.n	800f7d6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	61fb      	str	r3, [r7, #28]
 800f7d4:	e015      	b.n	800f802 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	697a      	ldr	r2, [r7, #20]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	d20b      	bcs.n	800f7f8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	681a      	ldr	r2, [r3, #0]
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	1ad2      	subs	r2, r2, r3
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f7ff ff99 	bl	800f724 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	61fb      	str	r3, [r7, #28]
 800f7f6:	e004      	b.n	800f802 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f7fe:	2301      	movs	r3, #1
 800f800:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f802:	f000 ff53 	bl	80106ac <vPortExitCritical>

	return xReturn;
 800f806:	69fb      	ldr	r3, [r7, #28]
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3720      	adds	r7, #32
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	2000c0f0 	.word	0x2000c0f0
 800f814:	2000c104 	.word	0x2000c104

0800f818 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f818:	b480      	push	{r7}
 800f81a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f81c:	4b03      	ldr	r3, [pc, #12]	@ (800f82c <vTaskMissedYield+0x14>)
 800f81e:	2201      	movs	r2, #1
 800f820:	601a      	str	r2, [r3, #0]
}
 800f822:	bf00      	nop
 800f824:	46bd      	mov	sp, r7
 800f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82a:	4770      	bx	lr
 800f82c:	2000c100 	.word	0x2000c100

0800f830 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f838:	f000 f852 	bl	800f8e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f83c:	4b06      	ldr	r3, [pc, #24]	@ (800f858 <prvIdleTask+0x28>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	2b01      	cmp	r3, #1
 800f842:	d9f9      	bls.n	800f838 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f844:	4b05      	ldr	r3, [pc, #20]	@ (800f85c <prvIdleTask+0x2c>)
 800f846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f84a:	601a      	str	r2, [r3, #0]
 800f84c:	f3bf 8f4f 	dsb	sy
 800f850:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f854:	e7f0      	b.n	800f838 <prvIdleTask+0x8>
 800f856:	bf00      	nop
 800f858:	2000bc1c 	.word	0x2000bc1c
 800f85c:	e000ed04 	.word	0xe000ed04

0800f860 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b082      	sub	sp, #8
 800f864:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f866:	2300      	movs	r3, #0
 800f868:	607b      	str	r3, [r7, #4]
 800f86a:	e00c      	b.n	800f886 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f86c:	687a      	ldr	r2, [r7, #4]
 800f86e:	4613      	mov	r3, r2
 800f870:	009b      	lsls	r3, r3, #2
 800f872:	4413      	add	r3, r2
 800f874:	009b      	lsls	r3, r3, #2
 800f876:	4a12      	ldr	r2, [pc, #72]	@ (800f8c0 <prvInitialiseTaskLists+0x60>)
 800f878:	4413      	add	r3, r2
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7fe fc86 	bl	800e18c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	3301      	adds	r3, #1
 800f884:	607b      	str	r3, [r7, #4]
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	2b37      	cmp	r3, #55	@ 0x37
 800f88a:	d9ef      	bls.n	800f86c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f88c:	480d      	ldr	r0, [pc, #52]	@ (800f8c4 <prvInitialiseTaskLists+0x64>)
 800f88e:	f7fe fc7d 	bl	800e18c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f892:	480d      	ldr	r0, [pc, #52]	@ (800f8c8 <prvInitialiseTaskLists+0x68>)
 800f894:	f7fe fc7a 	bl	800e18c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f898:	480c      	ldr	r0, [pc, #48]	@ (800f8cc <prvInitialiseTaskLists+0x6c>)
 800f89a:	f7fe fc77 	bl	800e18c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f89e:	480c      	ldr	r0, [pc, #48]	@ (800f8d0 <prvInitialiseTaskLists+0x70>)
 800f8a0:	f7fe fc74 	bl	800e18c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f8a4:	480b      	ldr	r0, [pc, #44]	@ (800f8d4 <prvInitialiseTaskLists+0x74>)
 800f8a6:	f7fe fc71 	bl	800e18c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f8aa:	4b0b      	ldr	r3, [pc, #44]	@ (800f8d8 <prvInitialiseTaskLists+0x78>)
 800f8ac:	4a05      	ldr	r2, [pc, #20]	@ (800f8c4 <prvInitialiseTaskLists+0x64>)
 800f8ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f8b0:	4b0a      	ldr	r3, [pc, #40]	@ (800f8dc <prvInitialiseTaskLists+0x7c>)
 800f8b2:	4a05      	ldr	r2, [pc, #20]	@ (800f8c8 <prvInitialiseTaskLists+0x68>)
 800f8b4:	601a      	str	r2, [r3, #0]
}
 800f8b6:	bf00      	nop
 800f8b8:	3708      	adds	r7, #8
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop
 800f8c0:	2000bc1c 	.word	0x2000bc1c
 800f8c4:	2000c07c 	.word	0x2000c07c
 800f8c8:	2000c090 	.word	0x2000c090
 800f8cc:	2000c0ac 	.word	0x2000c0ac
 800f8d0:	2000c0c0 	.word	0x2000c0c0
 800f8d4:	2000c0d8 	.word	0x2000c0d8
 800f8d8:	2000c0a4 	.word	0x2000c0a4
 800f8dc:	2000c0a8 	.word	0x2000c0a8

0800f8e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b082      	sub	sp, #8
 800f8e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f8e6:	e019      	b.n	800f91c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f8e8:	f000 feae 	bl	8010648 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8ec:	4b10      	ldr	r3, [pc, #64]	@ (800f930 <prvCheckTasksWaitingTermination+0x50>)
 800f8ee:	68db      	ldr	r3, [r3, #12]
 800f8f0:	68db      	ldr	r3, [r3, #12]
 800f8f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	3304      	adds	r3, #4
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7fe fcd1 	bl	800e2a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f8fe:	4b0d      	ldr	r3, [pc, #52]	@ (800f934 <prvCheckTasksWaitingTermination+0x54>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	3b01      	subs	r3, #1
 800f904:	4a0b      	ldr	r2, [pc, #44]	@ (800f934 <prvCheckTasksWaitingTermination+0x54>)
 800f906:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f908:	4b0b      	ldr	r3, [pc, #44]	@ (800f938 <prvCheckTasksWaitingTermination+0x58>)
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	3b01      	subs	r3, #1
 800f90e:	4a0a      	ldr	r2, [pc, #40]	@ (800f938 <prvCheckTasksWaitingTermination+0x58>)
 800f910:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f912:	f000 fecb 	bl	80106ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f000 f810 	bl	800f93c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f91c:	4b06      	ldr	r3, [pc, #24]	@ (800f938 <prvCheckTasksWaitingTermination+0x58>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d1e1      	bne.n	800f8e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f924:	bf00      	nop
 800f926:	bf00      	nop
 800f928:	3708      	adds	r7, #8
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	2000c0c0 	.word	0x2000c0c0
 800f934:	2000c0ec 	.word	0x2000c0ec
 800f938:	2000c0d4 	.word	0x2000c0d4

0800f93c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b084      	sub	sp, #16
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	3354      	adds	r3, #84	@ 0x54
 800f948:	4618      	mov	r0, r3
 800f94a:	f010 fe2f 	bl	80205ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f954:	2b00      	cmp	r3, #0
 800f956:	d108      	bne.n	800f96a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f95c:	4618      	mov	r0, r3
 800f95e:	f001 f863 	bl	8010a28 <vPortFree>
				vPortFree( pxTCB );
 800f962:	6878      	ldr	r0, [r7, #4]
 800f964:	f001 f860 	bl	8010a28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f968:	e019      	b.n	800f99e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f970:	2b01      	cmp	r3, #1
 800f972:	d103      	bne.n	800f97c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f001 f857 	bl	8010a28 <vPortFree>
	}
 800f97a:	e010      	b.n	800f99e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f982:	2b02      	cmp	r3, #2
 800f984:	d00b      	beq.n	800f99e <prvDeleteTCB+0x62>
	__asm volatile
 800f986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f98a:	f383 8811 	msr	BASEPRI, r3
 800f98e:	f3bf 8f6f 	isb	sy
 800f992:	f3bf 8f4f 	dsb	sy
 800f996:	60fb      	str	r3, [r7, #12]
}
 800f998:	bf00      	nop
 800f99a:	bf00      	nop
 800f99c:	e7fd      	b.n	800f99a <prvDeleteTCB+0x5e>
	}
 800f99e:	bf00      	nop
 800f9a0:	3710      	adds	r7, #16
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
	...

0800f9a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b083      	sub	sp, #12
 800f9ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9ae:	4b0c      	ldr	r3, [pc, #48]	@ (800f9e0 <prvResetNextTaskUnblockTime+0x38>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d104      	bne.n	800f9c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f9b8:	4b0a      	ldr	r3, [pc, #40]	@ (800f9e4 <prvResetNextTaskUnblockTime+0x3c>)
 800f9ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f9be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f9c0:	e008      	b.n	800f9d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9c2:	4b07      	ldr	r3, [pc, #28]	@ (800f9e0 <prvResetNextTaskUnblockTime+0x38>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	68db      	ldr	r3, [r3, #12]
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	685b      	ldr	r3, [r3, #4]
 800f9d0:	4a04      	ldr	r2, [pc, #16]	@ (800f9e4 <prvResetNextTaskUnblockTime+0x3c>)
 800f9d2:	6013      	str	r3, [r2, #0]
}
 800f9d4:	bf00      	nop
 800f9d6:	370c      	adds	r7, #12
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9de:	4770      	bx	lr
 800f9e0:	2000c0a4 	.word	0x2000c0a4
 800f9e4:	2000c10c 	.word	0x2000c10c

0800f9e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b083      	sub	sp, #12
 800f9ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f9ee:	4b0b      	ldr	r3, [pc, #44]	@ (800fa1c <xTaskGetSchedulerState+0x34>)
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d102      	bne.n	800f9fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	607b      	str	r3, [r7, #4]
 800f9fa:	e008      	b.n	800fa0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f9fc:	4b08      	ldr	r3, [pc, #32]	@ (800fa20 <xTaskGetSchedulerState+0x38>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d102      	bne.n	800fa0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fa04:	2302      	movs	r3, #2
 800fa06:	607b      	str	r3, [r7, #4]
 800fa08:	e001      	b.n	800fa0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fa0e:	687b      	ldr	r3, [r7, #4]
	}
 800fa10:	4618      	mov	r0, r3
 800fa12:	370c      	adds	r7, #12
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr
 800fa1c:	2000c0f8 	.word	0x2000c0f8
 800fa20:	2000c114 	.word	0x2000c114

0800fa24 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b086      	sub	sp, #24
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fa30:	2300      	movs	r3, #0
 800fa32:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d058      	beq.n	800faec <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fa3a:	4b2f      	ldr	r3, [pc, #188]	@ (800faf8 <xTaskPriorityDisinherit+0xd4>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	693a      	ldr	r2, [r7, #16]
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d00b      	beq.n	800fa5c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800fa44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa48:	f383 8811 	msr	BASEPRI, r3
 800fa4c:	f3bf 8f6f 	isb	sy
 800fa50:	f3bf 8f4f 	dsb	sy
 800fa54:	60fb      	str	r3, [r7, #12]
}
 800fa56:	bf00      	nop
 800fa58:	bf00      	nop
 800fa5a:	e7fd      	b.n	800fa58 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d10b      	bne.n	800fa7c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800fa64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa68:	f383 8811 	msr	BASEPRI, r3
 800fa6c:	f3bf 8f6f 	isb	sy
 800fa70:	f3bf 8f4f 	dsb	sy
 800fa74:	60bb      	str	r3, [r7, #8]
}
 800fa76:	bf00      	nop
 800fa78:	bf00      	nop
 800fa7a:	e7fd      	b.n	800fa78 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa80:	1e5a      	subs	r2, r3, #1
 800fa82:	693b      	ldr	r3, [r7, #16]
 800fa84:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa8a:	693b      	ldr	r3, [r7, #16]
 800fa8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d02c      	beq.n	800faec <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fa92:	693b      	ldr	r3, [r7, #16]
 800fa94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d128      	bne.n	800faec <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa9a:	693b      	ldr	r3, [r7, #16]
 800fa9c:	3304      	adds	r3, #4
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fe fbfe 	bl	800e2a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800faa4:	693b      	ldr	r3, [r7, #16]
 800faa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800faa8:	693b      	ldr	r3, [r7, #16]
 800faaa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fab0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fabc:	4b0f      	ldr	r3, [pc, #60]	@ (800fafc <xTaskPriorityDisinherit+0xd8>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d903      	bls.n	800facc <xTaskPriorityDisinherit+0xa8>
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fac8:	4a0c      	ldr	r2, [pc, #48]	@ (800fafc <xTaskPriorityDisinherit+0xd8>)
 800faca:	6013      	str	r3, [r2, #0]
 800facc:	693b      	ldr	r3, [r7, #16]
 800face:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fad0:	4613      	mov	r3, r2
 800fad2:	009b      	lsls	r3, r3, #2
 800fad4:	4413      	add	r3, r2
 800fad6:	009b      	lsls	r3, r3, #2
 800fad8:	4a09      	ldr	r2, [pc, #36]	@ (800fb00 <xTaskPriorityDisinherit+0xdc>)
 800fada:	441a      	add	r2, r3
 800fadc:	693b      	ldr	r3, [r7, #16]
 800fade:	3304      	adds	r3, #4
 800fae0:	4619      	mov	r1, r3
 800fae2:	4610      	mov	r0, r2
 800fae4:	f7fe fb7f 	bl	800e1e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fae8:	2301      	movs	r3, #1
 800faea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800faec:	697b      	ldr	r3, [r7, #20]
	}
 800faee:	4618      	mov	r0, r3
 800faf0:	3718      	adds	r7, #24
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	2000bc18 	.word	0x2000bc18
 800fafc:	2000c0f4 	.word	0x2000c0f4
 800fb00:	2000bc1c 	.word	0x2000bc1c

0800fb04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b084      	sub	sp, #16
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fb0e:	4b21      	ldr	r3, [pc, #132]	@ (800fb94 <prvAddCurrentTaskToDelayedList+0x90>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb14:	4b20      	ldr	r3, [pc, #128]	@ (800fb98 <prvAddCurrentTaskToDelayedList+0x94>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	3304      	adds	r3, #4
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fe fbc0 	bl	800e2a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fb26:	d10a      	bne.n	800fb3e <prvAddCurrentTaskToDelayedList+0x3a>
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d007      	beq.n	800fb3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb2e:	4b1a      	ldr	r3, [pc, #104]	@ (800fb98 <prvAddCurrentTaskToDelayedList+0x94>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	3304      	adds	r3, #4
 800fb34:	4619      	mov	r1, r3
 800fb36:	4819      	ldr	r0, [pc, #100]	@ (800fb9c <prvAddCurrentTaskToDelayedList+0x98>)
 800fb38:	f7fe fb55 	bl	800e1e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fb3c:	e026      	b.n	800fb8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fb3e:	68fa      	ldr	r2, [r7, #12]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	4413      	add	r3, r2
 800fb44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fb46:	4b14      	ldr	r3, [pc, #80]	@ (800fb98 <prvAddCurrentTaskToDelayedList+0x94>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	68ba      	ldr	r2, [r7, #8]
 800fb4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fb4e:	68ba      	ldr	r2, [r7, #8]
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	429a      	cmp	r2, r3
 800fb54:	d209      	bcs.n	800fb6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb56:	4b12      	ldr	r3, [pc, #72]	@ (800fba0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fb58:	681a      	ldr	r2, [r3, #0]
 800fb5a:	4b0f      	ldr	r3, [pc, #60]	@ (800fb98 <prvAddCurrentTaskToDelayedList+0x94>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	3304      	adds	r3, #4
 800fb60:	4619      	mov	r1, r3
 800fb62:	4610      	mov	r0, r2
 800fb64:	f7fe fb63 	bl	800e22e <vListInsert>
}
 800fb68:	e010      	b.n	800fb8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fb6a:	4b0e      	ldr	r3, [pc, #56]	@ (800fba4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fb6c:	681a      	ldr	r2, [r3, #0]
 800fb6e:	4b0a      	ldr	r3, [pc, #40]	@ (800fb98 <prvAddCurrentTaskToDelayedList+0x94>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	3304      	adds	r3, #4
 800fb74:	4619      	mov	r1, r3
 800fb76:	4610      	mov	r0, r2
 800fb78:	f7fe fb59 	bl	800e22e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fb7c:	4b0a      	ldr	r3, [pc, #40]	@ (800fba8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	68ba      	ldr	r2, [r7, #8]
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d202      	bcs.n	800fb8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fb86:	4a08      	ldr	r2, [pc, #32]	@ (800fba8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	6013      	str	r3, [r2, #0]
}
 800fb8c:	bf00      	nop
 800fb8e:	3710      	adds	r7, #16
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	2000c0f0 	.word	0x2000c0f0
 800fb98:	2000bc18 	.word	0x2000bc18
 800fb9c:	2000c0d8 	.word	0x2000c0d8
 800fba0:	2000c0a8 	.word	0x2000c0a8
 800fba4:	2000c0a4 	.word	0x2000c0a4
 800fba8:	2000c10c 	.word	0x2000c10c

0800fbac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b08a      	sub	sp, #40	@ 0x28
 800fbb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fbb6:	f000 fbb1 	bl	801031c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fbba:	4b1d      	ldr	r3, [pc, #116]	@ (800fc30 <xTimerCreateTimerTask+0x84>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d021      	beq.n	800fc06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fbca:	1d3a      	adds	r2, r7, #4
 800fbcc:	f107 0108 	add.w	r1, r7, #8
 800fbd0:	f107 030c 	add.w	r3, r7, #12
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7fe fabf 	bl	800e158 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fbda:	6879      	ldr	r1, [r7, #4]
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	68fa      	ldr	r2, [r7, #12]
 800fbe0:	9202      	str	r2, [sp, #8]
 800fbe2:	9301      	str	r3, [sp, #4]
 800fbe4:	2302      	movs	r3, #2
 800fbe6:	9300      	str	r3, [sp, #0]
 800fbe8:	2300      	movs	r3, #0
 800fbea:	460a      	mov	r2, r1
 800fbec:	4911      	ldr	r1, [pc, #68]	@ (800fc34 <xTimerCreateTimerTask+0x88>)
 800fbee:	4812      	ldr	r0, [pc, #72]	@ (800fc38 <xTimerCreateTimerTask+0x8c>)
 800fbf0:	f7ff f87a 	bl	800ece8 <xTaskCreateStatic>
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	4a11      	ldr	r2, [pc, #68]	@ (800fc3c <xTimerCreateTimerTask+0x90>)
 800fbf8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fbfa:	4b10      	ldr	r3, [pc, #64]	@ (800fc3c <xTimerCreateTimerTask+0x90>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d001      	beq.n	800fc06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fc02:	2301      	movs	r3, #1
 800fc04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d10b      	bne.n	800fc24 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800fc0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc10:	f383 8811 	msr	BASEPRI, r3
 800fc14:	f3bf 8f6f 	isb	sy
 800fc18:	f3bf 8f4f 	dsb	sy
 800fc1c:	613b      	str	r3, [r7, #16]
}
 800fc1e:	bf00      	nop
 800fc20:	bf00      	nop
 800fc22:	e7fd      	b.n	800fc20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800fc24:	697b      	ldr	r3, [r7, #20]
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3718      	adds	r7, #24
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	bf00      	nop
 800fc30:	2000c148 	.word	0x2000c148
 800fc34:	080214f0 	.word	0x080214f0
 800fc38:	0800feb5 	.word	0x0800feb5
 800fc3c:	2000c14c 	.word	0x2000c14c

0800fc40 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b088      	sub	sp, #32
 800fc44:	af02      	add	r7, sp, #8
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	607a      	str	r2, [r7, #4]
 800fc4c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800fc4e:	202c      	movs	r0, #44	@ 0x2c
 800fc50:	f000 fe1c 	bl	801088c <pvPortMalloc>
 800fc54:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d00d      	beq.n	800fc78 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	9301      	str	r3, [sp, #4]
 800fc68:	6a3b      	ldr	r3, [r7, #32]
 800fc6a:	9300      	str	r3, [sp, #0]
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	687a      	ldr	r2, [r7, #4]
 800fc70:	68b9      	ldr	r1, [r7, #8]
 800fc72:	68f8      	ldr	r0, [r7, #12]
 800fc74:	f000 f845 	bl	800fd02 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800fc78:	697b      	ldr	r3, [r7, #20]
	}
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	3718      	adds	r7, #24
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800fc82:	b580      	push	{r7, lr}
 800fc84:	b08a      	sub	sp, #40	@ 0x28
 800fc86:	af02      	add	r7, sp, #8
 800fc88:	60f8      	str	r0, [r7, #12]
 800fc8a:	60b9      	str	r1, [r7, #8]
 800fc8c:	607a      	str	r2, [r7, #4]
 800fc8e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800fc90:	232c      	movs	r3, #44	@ 0x2c
 800fc92:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	2b2c      	cmp	r3, #44	@ 0x2c
 800fc98:	d00b      	beq.n	800fcb2 <xTimerCreateStatic+0x30>
	__asm volatile
 800fc9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc9e:	f383 8811 	msr	BASEPRI, r3
 800fca2:	f3bf 8f6f 	isb	sy
 800fca6:	f3bf 8f4f 	dsb	sy
 800fcaa:	61bb      	str	r3, [r7, #24]
}
 800fcac:	bf00      	nop
 800fcae:	bf00      	nop
 800fcb0:	e7fd      	b.n	800fcae <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fcb2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800fcb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d10b      	bne.n	800fcd2 <xTimerCreateStatic+0x50>
	__asm volatile
 800fcba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcbe:	f383 8811 	msr	BASEPRI, r3
 800fcc2:	f3bf 8f6f 	isb	sy
 800fcc6:	f3bf 8f4f 	dsb	sy
 800fcca:	617b      	str	r3, [r7, #20]
}
 800fccc:	bf00      	nop
 800fcce:	bf00      	nop
 800fcd0:	e7fd      	b.n	800fcce <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800fcd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcd4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800fcd6:	69fb      	ldr	r3, [r7, #28]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d00d      	beq.n	800fcf8 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800fcdc:	69fb      	ldr	r3, [r7, #28]
 800fcde:	2202      	movs	r2, #2
 800fce0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	9301      	str	r3, [sp, #4]
 800fce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcea:	9300      	str	r3, [sp, #0]
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	687a      	ldr	r2, [r7, #4]
 800fcf0:	68b9      	ldr	r1, [r7, #8]
 800fcf2:	68f8      	ldr	r0, [r7, #12]
 800fcf4:	f000 f805 	bl	800fd02 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800fcf8:	69fb      	ldr	r3, [r7, #28]
	}
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	3720      	adds	r7, #32
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bd80      	pop	{r7, pc}

0800fd02 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800fd02:	b580      	push	{r7, lr}
 800fd04:	b086      	sub	sp, #24
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	60f8      	str	r0, [r7, #12]
 800fd0a:	60b9      	str	r1, [r7, #8]
 800fd0c:	607a      	str	r2, [r7, #4]
 800fd0e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800fd10:	68bb      	ldr	r3, [r7, #8]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d10b      	bne.n	800fd2e <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800fd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd1a:	f383 8811 	msr	BASEPRI, r3
 800fd1e:	f3bf 8f6f 	isb	sy
 800fd22:	f3bf 8f4f 	dsb	sy
 800fd26:	617b      	str	r3, [r7, #20]
}
 800fd28:	bf00      	nop
 800fd2a:	bf00      	nop
 800fd2c:	e7fd      	b.n	800fd2a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800fd2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d01e      	beq.n	800fd72 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800fd34:	f000 faf2 	bl	801031c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800fd38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd3a:	68fa      	ldr	r2, [r7, #12]
 800fd3c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800fd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd40:	68ba      	ldr	r2, [r7, #8]
 800fd42:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800fd44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd46:	683a      	ldr	r2, [r7, #0]
 800fd48:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800fd4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd4c:	6a3a      	ldr	r2, [r7, #32]
 800fd4e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800fd50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd52:	3304      	adds	r3, #4
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7fe fa39 	bl	800e1cc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d008      	beq.n	800fd72 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800fd60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fd66:	f043 0304 	orr.w	r3, r3, #4
 800fd6a:	b2da      	uxtb	r2, r3
 800fd6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800fd72:	bf00      	nop
 800fd74:	3718      	adds	r7, #24
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bd80      	pop	{r7, pc}
	...

0800fd7c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b08a      	sub	sp, #40	@ 0x28
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	60f8      	str	r0, [r7, #12]
 800fd84:	60b9      	str	r1, [r7, #8]
 800fd86:	607a      	str	r2, [r7, #4]
 800fd88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d10b      	bne.n	800fdac <xTimerGenericCommand+0x30>
	__asm volatile
 800fd94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd98:	f383 8811 	msr	BASEPRI, r3
 800fd9c:	f3bf 8f6f 	isb	sy
 800fda0:	f3bf 8f4f 	dsb	sy
 800fda4:	623b      	str	r3, [r7, #32]
}
 800fda6:	bf00      	nop
 800fda8:	bf00      	nop
 800fdaa:	e7fd      	b.n	800fda8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800fdac:	4b19      	ldr	r3, [pc, #100]	@ (800fe14 <xTimerGenericCommand+0x98>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d02a      	beq.n	800fe0a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800fdb4:	68bb      	ldr	r3, [r7, #8]
 800fdb6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	2b05      	cmp	r3, #5
 800fdc4:	dc18      	bgt.n	800fdf8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fdc6:	f7ff fe0f 	bl	800f9e8 <xTaskGetSchedulerState>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	2b02      	cmp	r3, #2
 800fdce:	d109      	bne.n	800fde4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fdd0:	4b10      	ldr	r3, [pc, #64]	@ (800fe14 <xTimerGenericCommand+0x98>)
 800fdd2:	6818      	ldr	r0, [r3, #0]
 800fdd4:	f107 0110 	add.w	r1, r7, #16
 800fdd8:	2300      	movs	r3, #0
 800fdda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fddc:	f7fe fb94 	bl	800e508 <xQueueGenericSend>
 800fde0:	6278      	str	r0, [r7, #36]	@ 0x24
 800fde2:	e012      	b.n	800fe0a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fde4:	4b0b      	ldr	r3, [pc, #44]	@ (800fe14 <xTimerGenericCommand+0x98>)
 800fde6:	6818      	ldr	r0, [r3, #0]
 800fde8:	f107 0110 	add.w	r1, r7, #16
 800fdec:	2300      	movs	r3, #0
 800fdee:	2200      	movs	r2, #0
 800fdf0:	f7fe fb8a 	bl	800e508 <xQueueGenericSend>
 800fdf4:	6278      	str	r0, [r7, #36]	@ 0x24
 800fdf6:	e008      	b.n	800fe0a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fdf8:	4b06      	ldr	r3, [pc, #24]	@ (800fe14 <xTimerGenericCommand+0x98>)
 800fdfa:	6818      	ldr	r0, [r3, #0]
 800fdfc:	f107 0110 	add.w	r1, r7, #16
 800fe00:	2300      	movs	r3, #0
 800fe02:	683a      	ldr	r2, [r7, #0]
 800fe04:	f7fe fc82 	bl	800e70c <xQueueGenericSendFromISR>
 800fe08:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800fe0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3728      	adds	r7, #40	@ 0x28
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	2000c148 	.word	0x2000c148

0800fe18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b088      	sub	sp, #32
 800fe1c:	af02      	add	r7, sp, #8
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe22:	4b23      	ldr	r3, [pc, #140]	@ (800feb0 <prvProcessExpiredTimer+0x98>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	68db      	ldr	r3, [r3, #12]
 800fe28:	68db      	ldr	r3, [r3, #12]
 800fe2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	3304      	adds	r3, #4
 800fe30:	4618      	mov	r0, r3
 800fe32:	f7fe fa35 	bl	800e2a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fe3c:	f003 0304 	and.w	r3, r3, #4
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d023      	beq.n	800fe8c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	699a      	ldr	r2, [r3, #24]
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	18d1      	adds	r1, r2, r3
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	683a      	ldr	r2, [r7, #0]
 800fe50:	6978      	ldr	r0, [r7, #20]
 800fe52:	f000 f8d5 	bl	8010000 <prvInsertTimerInActiveList>
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d020      	beq.n	800fe9e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	9300      	str	r3, [sp, #0]
 800fe60:	2300      	movs	r3, #0
 800fe62:	687a      	ldr	r2, [r7, #4]
 800fe64:	2100      	movs	r1, #0
 800fe66:	6978      	ldr	r0, [r7, #20]
 800fe68:	f7ff ff88 	bl	800fd7c <xTimerGenericCommand>
 800fe6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d114      	bne.n	800fe9e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800fe74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe78:	f383 8811 	msr	BASEPRI, r3
 800fe7c:	f3bf 8f6f 	isb	sy
 800fe80:	f3bf 8f4f 	dsb	sy
 800fe84:	60fb      	str	r3, [r7, #12]
}
 800fe86:	bf00      	nop
 800fe88:	bf00      	nop
 800fe8a:	e7fd      	b.n	800fe88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fe92:	f023 0301 	bic.w	r3, r3, #1
 800fe96:	b2da      	uxtb	r2, r3
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fe9e:	697b      	ldr	r3, [r7, #20]
 800fea0:	6a1b      	ldr	r3, [r3, #32]
 800fea2:	6978      	ldr	r0, [r7, #20]
 800fea4:	4798      	blx	r3
}
 800fea6:	bf00      	nop
 800fea8:	3718      	adds	r7, #24
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	2000c140 	.word	0x2000c140

0800feb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b084      	sub	sp, #16
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800febc:	f107 0308 	add.w	r3, r7, #8
 800fec0:	4618      	mov	r0, r3
 800fec2:	f000 f859 	bl	800ff78 <prvGetNextExpireTime>
 800fec6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	4619      	mov	r1, r3
 800fecc:	68f8      	ldr	r0, [r7, #12]
 800fece:	f000 f805 	bl	800fedc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800fed2:	f000 f8d7 	bl	8010084 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800fed6:	bf00      	nop
 800fed8:	e7f0      	b.n	800febc <prvTimerTask+0x8>
	...

0800fedc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b084      	sub	sp, #16
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
 800fee4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800fee6:	f7ff f963 	bl	800f1b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800feea:	f107 0308 	add.w	r3, r7, #8
 800feee:	4618      	mov	r0, r3
 800fef0:	f000 f866 	bl	800ffc0 <prvSampleTimeNow>
 800fef4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d130      	bne.n	800ff5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d10a      	bne.n	800ff18 <prvProcessTimerOrBlockTask+0x3c>
 800ff02:	687a      	ldr	r2, [r7, #4]
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d806      	bhi.n	800ff18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ff0a:	f7ff f95f 	bl	800f1cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ff0e:	68f9      	ldr	r1, [r7, #12]
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f7ff ff81 	bl	800fe18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ff16:	e024      	b.n	800ff62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d008      	beq.n	800ff30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ff1e:	4b13      	ldr	r3, [pc, #76]	@ (800ff6c <prvProcessTimerOrBlockTask+0x90>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d101      	bne.n	800ff2c <prvProcessTimerOrBlockTask+0x50>
 800ff28:	2301      	movs	r3, #1
 800ff2a:	e000      	b.n	800ff2e <prvProcessTimerOrBlockTask+0x52>
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ff30:	4b0f      	ldr	r3, [pc, #60]	@ (800ff70 <prvProcessTimerOrBlockTask+0x94>)
 800ff32:	6818      	ldr	r0, [r3, #0]
 800ff34:	687a      	ldr	r2, [r7, #4]
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	1ad3      	subs	r3, r2, r3
 800ff3a:	683a      	ldr	r2, [r7, #0]
 800ff3c:	4619      	mov	r1, r3
 800ff3e:	f7fe fe9f 	bl	800ec80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ff42:	f7ff f943 	bl	800f1cc <xTaskResumeAll>
 800ff46:	4603      	mov	r3, r0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d10a      	bne.n	800ff62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ff4c:	4b09      	ldr	r3, [pc, #36]	@ (800ff74 <prvProcessTimerOrBlockTask+0x98>)
 800ff4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ff52:	601a      	str	r2, [r3, #0]
 800ff54:	f3bf 8f4f 	dsb	sy
 800ff58:	f3bf 8f6f 	isb	sy
}
 800ff5c:	e001      	b.n	800ff62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ff5e:	f7ff f935 	bl	800f1cc <xTaskResumeAll>
}
 800ff62:	bf00      	nop
 800ff64:	3710      	adds	r7, #16
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
 800ff6a:	bf00      	nop
 800ff6c:	2000c144 	.word	0x2000c144
 800ff70:	2000c148 	.word	0x2000c148
 800ff74:	e000ed04 	.word	0xe000ed04

0800ff78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b085      	sub	sp, #20
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ff80:	4b0e      	ldr	r3, [pc, #56]	@ (800ffbc <prvGetNextExpireTime+0x44>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d101      	bne.n	800ff8e <prvGetNextExpireTime+0x16>
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	e000      	b.n	800ff90 <prvGetNextExpireTime+0x18>
 800ff8e:	2200      	movs	r2, #0
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d105      	bne.n	800ffa8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ff9c:	4b07      	ldr	r3, [pc, #28]	@ (800ffbc <prvGetNextExpireTime+0x44>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	68db      	ldr	r3, [r3, #12]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	60fb      	str	r3, [r7, #12]
 800ffa6:	e001      	b.n	800ffac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ffac:	68fb      	ldr	r3, [r7, #12]
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	3714      	adds	r7, #20
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb8:	4770      	bx	lr
 800ffba:	bf00      	nop
 800ffbc:	2000c140 	.word	0x2000c140

0800ffc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b084      	sub	sp, #16
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ffc8:	f7ff f99e 	bl	800f308 <xTaskGetTickCount>
 800ffcc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ffce:	4b0b      	ldr	r3, [pc, #44]	@ (800fffc <prvSampleTimeNow+0x3c>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	68fa      	ldr	r2, [r7, #12]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d205      	bcs.n	800ffe4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ffd8:	f000 f93a 	bl	8010250 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2201      	movs	r2, #1
 800ffe0:	601a      	str	r2, [r3, #0]
 800ffe2:	e002      	b.n	800ffea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ffea:	4a04      	ldr	r2, [pc, #16]	@ (800fffc <prvSampleTimeNow+0x3c>)
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800fff0:	68fb      	ldr	r3, [r7, #12]
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	3710      	adds	r7, #16
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}
 800fffa:	bf00      	nop
 800fffc:	2000c150 	.word	0x2000c150

08010000 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b086      	sub	sp, #24
 8010004:	af00      	add	r7, sp, #0
 8010006:	60f8      	str	r0, [r7, #12]
 8010008:	60b9      	str	r1, [r7, #8]
 801000a:	607a      	str	r2, [r7, #4]
 801000c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801000e:	2300      	movs	r3, #0
 8010010:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	68ba      	ldr	r2, [r7, #8]
 8010016:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	68fa      	ldr	r2, [r7, #12]
 801001c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801001e:	68ba      	ldr	r2, [r7, #8]
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	429a      	cmp	r2, r3
 8010024:	d812      	bhi.n	801004c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010026:	687a      	ldr	r2, [r7, #4]
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	1ad2      	subs	r2, r2, r3
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	699b      	ldr	r3, [r3, #24]
 8010030:	429a      	cmp	r2, r3
 8010032:	d302      	bcc.n	801003a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010034:	2301      	movs	r3, #1
 8010036:	617b      	str	r3, [r7, #20]
 8010038:	e01b      	b.n	8010072 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801003a:	4b10      	ldr	r3, [pc, #64]	@ (801007c <prvInsertTimerInActiveList+0x7c>)
 801003c:	681a      	ldr	r2, [r3, #0]
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	3304      	adds	r3, #4
 8010042:	4619      	mov	r1, r3
 8010044:	4610      	mov	r0, r2
 8010046:	f7fe f8f2 	bl	800e22e <vListInsert>
 801004a:	e012      	b.n	8010072 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801004c:	687a      	ldr	r2, [r7, #4]
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	429a      	cmp	r2, r3
 8010052:	d206      	bcs.n	8010062 <prvInsertTimerInActiveList+0x62>
 8010054:	68ba      	ldr	r2, [r7, #8]
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	429a      	cmp	r2, r3
 801005a:	d302      	bcc.n	8010062 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801005c:	2301      	movs	r3, #1
 801005e:	617b      	str	r3, [r7, #20]
 8010060:	e007      	b.n	8010072 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010062:	4b07      	ldr	r3, [pc, #28]	@ (8010080 <prvInsertTimerInActiveList+0x80>)
 8010064:	681a      	ldr	r2, [r3, #0]
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	3304      	adds	r3, #4
 801006a:	4619      	mov	r1, r3
 801006c:	4610      	mov	r0, r2
 801006e:	f7fe f8de 	bl	800e22e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010072:	697b      	ldr	r3, [r7, #20]
}
 8010074:	4618      	mov	r0, r3
 8010076:	3718      	adds	r7, #24
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	2000c144 	.word	0x2000c144
 8010080:	2000c140 	.word	0x2000c140

08010084 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b08e      	sub	sp, #56	@ 0x38
 8010088:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801008a:	e0ce      	b.n	801022a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2b00      	cmp	r3, #0
 8010090:	da19      	bge.n	80100c6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010092:	1d3b      	adds	r3, r7, #4
 8010094:	3304      	adds	r3, #4
 8010096:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801009a:	2b00      	cmp	r3, #0
 801009c:	d10b      	bne.n	80100b6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801009e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80100a2:	f383 8811 	msr	BASEPRI, r3
 80100a6:	f3bf 8f6f 	isb	sy
 80100aa:	f3bf 8f4f 	dsb	sy
 80100ae:	61fb      	str	r3, [r7, #28]
}
 80100b0:	bf00      	nop
 80100b2:	bf00      	nop
 80100b4:	e7fd      	b.n	80100b2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80100b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80100bc:	6850      	ldr	r0, [r2, #4]
 80100be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80100c0:	6892      	ldr	r2, [r2, #8]
 80100c2:	4611      	mov	r1, r2
 80100c4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	f2c0 80ae 	blt.w	801022a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80100d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100d4:	695b      	ldr	r3, [r3, #20]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d004      	beq.n	80100e4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80100da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100dc:	3304      	adds	r3, #4
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fe f8de 	bl	800e2a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80100e4:	463b      	mov	r3, r7
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7ff ff6a 	bl	800ffc0 <prvSampleTimeNow>
 80100ec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2b09      	cmp	r3, #9
 80100f2:	f200 8097 	bhi.w	8010224 <prvProcessReceivedCommands+0x1a0>
 80100f6:	a201      	add	r2, pc, #4	@ (adr r2, 80100fc <prvProcessReceivedCommands+0x78>)
 80100f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100fc:	08010125 	.word	0x08010125
 8010100:	08010125 	.word	0x08010125
 8010104:	08010125 	.word	0x08010125
 8010108:	0801019b 	.word	0x0801019b
 801010c:	080101af 	.word	0x080101af
 8010110:	080101fb 	.word	0x080101fb
 8010114:	08010125 	.word	0x08010125
 8010118:	08010125 	.word	0x08010125
 801011c:	0801019b 	.word	0x0801019b
 8010120:	080101af 	.word	0x080101af
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010126:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801012a:	f043 0301 	orr.w	r3, r3, #1
 801012e:	b2da      	uxtb	r2, r3
 8010130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010132:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010136:	68ba      	ldr	r2, [r7, #8]
 8010138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801013a:	699b      	ldr	r3, [r3, #24]
 801013c:	18d1      	adds	r1, r2, r3
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010142:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010144:	f7ff ff5c 	bl	8010000 <prvInsertTimerInActiveList>
 8010148:	4603      	mov	r3, r0
 801014a:	2b00      	cmp	r3, #0
 801014c:	d06c      	beq.n	8010228 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801014e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010150:	6a1b      	ldr	r3, [r3, #32]
 8010152:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010154:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010158:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801015c:	f003 0304 	and.w	r3, r3, #4
 8010160:	2b00      	cmp	r3, #0
 8010162:	d061      	beq.n	8010228 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010164:	68ba      	ldr	r2, [r7, #8]
 8010166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010168:	699b      	ldr	r3, [r3, #24]
 801016a:	441a      	add	r2, r3
 801016c:	2300      	movs	r3, #0
 801016e:	9300      	str	r3, [sp, #0]
 8010170:	2300      	movs	r3, #0
 8010172:	2100      	movs	r1, #0
 8010174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010176:	f7ff fe01 	bl	800fd7c <xTimerGenericCommand>
 801017a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801017c:	6a3b      	ldr	r3, [r7, #32]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d152      	bne.n	8010228 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8010182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010186:	f383 8811 	msr	BASEPRI, r3
 801018a:	f3bf 8f6f 	isb	sy
 801018e:	f3bf 8f4f 	dsb	sy
 8010192:	61bb      	str	r3, [r7, #24]
}
 8010194:	bf00      	nop
 8010196:	bf00      	nop
 8010198:	e7fd      	b.n	8010196 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801019a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801019c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80101a0:	f023 0301 	bic.w	r3, r3, #1
 80101a4:	b2da      	uxtb	r2, r3
 80101a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80101ac:	e03d      	b.n	801022a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80101ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80101b4:	f043 0301 	orr.w	r3, r3, #1
 80101b8:	b2da      	uxtb	r2, r3
 80101ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80101c0:	68ba      	ldr	r2, [r7, #8]
 80101c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80101c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101c8:	699b      	ldr	r3, [r3, #24]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d10b      	bne.n	80101e6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80101ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101d2:	f383 8811 	msr	BASEPRI, r3
 80101d6:	f3bf 8f6f 	isb	sy
 80101da:	f3bf 8f4f 	dsb	sy
 80101de:	617b      	str	r3, [r7, #20]
}
 80101e0:	bf00      	nop
 80101e2:	bf00      	nop
 80101e4:	e7fd      	b.n	80101e2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80101e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101e8:	699a      	ldr	r2, [r3, #24]
 80101ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ec:	18d1      	adds	r1, r2, r3
 80101ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80101f4:	f7ff ff04 	bl	8010000 <prvInsertTimerInActiveList>
					break;
 80101f8:	e017      	b.n	801022a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80101fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010200:	f003 0302 	and.w	r3, r3, #2
 8010204:	2b00      	cmp	r3, #0
 8010206:	d103      	bne.n	8010210 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010208:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801020a:	f000 fc0d 	bl	8010a28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801020e:	e00c      	b.n	801022a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010212:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010216:	f023 0301 	bic.w	r3, r3, #1
 801021a:	b2da      	uxtb	r2, r3
 801021c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801021e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010222:	e002      	b.n	801022a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8010224:	bf00      	nop
 8010226:	e000      	b.n	801022a <prvProcessReceivedCommands+0x1a6>
					break;
 8010228:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801022a:	4b08      	ldr	r3, [pc, #32]	@ (801024c <prvProcessReceivedCommands+0x1c8>)
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	1d39      	adds	r1, r7, #4
 8010230:	2200      	movs	r2, #0
 8010232:	4618      	mov	r0, r3
 8010234:	f7fe fb08 	bl	800e848 <xQueueReceive>
 8010238:	4603      	mov	r3, r0
 801023a:	2b00      	cmp	r3, #0
 801023c:	f47f af26 	bne.w	801008c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010240:	bf00      	nop
 8010242:	bf00      	nop
 8010244:	3730      	adds	r7, #48	@ 0x30
 8010246:	46bd      	mov	sp, r7
 8010248:	bd80      	pop	{r7, pc}
 801024a:	bf00      	nop
 801024c:	2000c148 	.word	0x2000c148

08010250 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b088      	sub	sp, #32
 8010254:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010256:	e049      	b.n	80102ec <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010258:	4b2e      	ldr	r3, [pc, #184]	@ (8010314 <prvSwitchTimerLists+0xc4>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	68db      	ldr	r3, [r3, #12]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010262:	4b2c      	ldr	r3, [pc, #176]	@ (8010314 <prvSwitchTimerLists+0xc4>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	68db      	ldr	r3, [r3, #12]
 801026a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	3304      	adds	r3, #4
 8010270:	4618      	mov	r0, r3
 8010272:	f7fe f815 	bl	800e2a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	6a1b      	ldr	r3, [r3, #32]
 801027a:	68f8      	ldr	r0, [r7, #12]
 801027c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010284:	f003 0304 	and.w	r3, r3, #4
 8010288:	2b00      	cmp	r3, #0
 801028a:	d02f      	beq.n	80102ec <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	699b      	ldr	r3, [r3, #24]
 8010290:	693a      	ldr	r2, [r7, #16]
 8010292:	4413      	add	r3, r2
 8010294:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010296:	68ba      	ldr	r2, [r7, #8]
 8010298:	693b      	ldr	r3, [r7, #16]
 801029a:	429a      	cmp	r2, r3
 801029c:	d90e      	bls.n	80102bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	68ba      	ldr	r2, [r7, #8]
 80102a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	68fa      	ldr	r2, [r7, #12]
 80102a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80102aa:	4b1a      	ldr	r3, [pc, #104]	@ (8010314 <prvSwitchTimerLists+0xc4>)
 80102ac:	681a      	ldr	r2, [r3, #0]
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	3304      	adds	r3, #4
 80102b2:	4619      	mov	r1, r3
 80102b4:	4610      	mov	r0, r2
 80102b6:	f7fd ffba 	bl	800e22e <vListInsert>
 80102ba:	e017      	b.n	80102ec <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80102bc:	2300      	movs	r3, #0
 80102be:	9300      	str	r3, [sp, #0]
 80102c0:	2300      	movs	r3, #0
 80102c2:	693a      	ldr	r2, [r7, #16]
 80102c4:	2100      	movs	r1, #0
 80102c6:	68f8      	ldr	r0, [r7, #12]
 80102c8:	f7ff fd58 	bl	800fd7c <xTimerGenericCommand>
 80102cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d10b      	bne.n	80102ec <prvSwitchTimerLists+0x9c>
	__asm volatile
 80102d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102d8:	f383 8811 	msr	BASEPRI, r3
 80102dc:	f3bf 8f6f 	isb	sy
 80102e0:	f3bf 8f4f 	dsb	sy
 80102e4:	603b      	str	r3, [r7, #0]
}
 80102e6:	bf00      	nop
 80102e8:	bf00      	nop
 80102ea:	e7fd      	b.n	80102e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80102ec:	4b09      	ldr	r3, [pc, #36]	@ (8010314 <prvSwitchTimerLists+0xc4>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d1b0      	bne.n	8010258 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80102f6:	4b07      	ldr	r3, [pc, #28]	@ (8010314 <prvSwitchTimerLists+0xc4>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80102fc:	4b06      	ldr	r3, [pc, #24]	@ (8010318 <prvSwitchTimerLists+0xc8>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	4a04      	ldr	r2, [pc, #16]	@ (8010314 <prvSwitchTimerLists+0xc4>)
 8010302:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010304:	4a04      	ldr	r2, [pc, #16]	@ (8010318 <prvSwitchTimerLists+0xc8>)
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	6013      	str	r3, [r2, #0]
}
 801030a:	bf00      	nop
 801030c:	3718      	adds	r7, #24
 801030e:	46bd      	mov	sp, r7
 8010310:	bd80      	pop	{r7, pc}
 8010312:	bf00      	nop
 8010314:	2000c140 	.word	0x2000c140
 8010318:	2000c144 	.word	0x2000c144

0801031c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b082      	sub	sp, #8
 8010320:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010322:	f000 f991 	bl	8010648 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010326:	4b15      	ldr	r3, [pc, #84]	@ (801037c <prvCheckForValidListAndQueue+0x60>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d120      	bne.n	8010370 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801032e:	4814      	ldr	r0, [pc, #80]	@ (8010380 <prvCheckForValidListAndQueue+0x64>)
 8010330:	f7fd ff2c 	bl	800e18c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010334:	4813      	ldr	r0, [pc, #76]	@ (8010384 <prvCheckForValidListAndQueue+0x68>)
 8010336:	f7fd ff29 	bl	800e18c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801033a:	4b13      	ldr	r3, [pc, #76]	@ (8010388 <prvCheckForValidListAndQueue+0x6c>)
 801033c:	4a10      	ldr	r2, [pc, #64]	@ (8010380 <prvCheckForValidListAndQueue+0x64>)
 801033e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010340:	4b12      	ldr	r3, [pc, #72]	@ (801038c <prvCheckForValidListAndQueue+0x70>)
 8010342:	4a10      	ldr	r2, [pc, #64]	@ (8010384 <prvCheckForValidListAndQueue+0x68>)
 8010344:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010346:	2300      	movs	r3, #0
 8010348:	9300      	str	r3, [sp, #0]
 801034a:	4b11      	ldr	r3, [pc, #68]	@ (8010390 <prvCheckForValidListAndQueue+0x74>)
 801034c:	4a11      	ldr	r2, [pc, #68]	@ (8010394 <prvCheckForValidListAndQueue+0x78>)
 801034e:	2110      	movs	r1, #16
 8010350:	200a      	movs	r0, #10
 8010352:	f7fe f839 	bl	800e3c8 <xQueueGenericCreateStatic>
 8010356:	4603      	mov	r3, r0
 8010358:	4a08      	ldr	r2, [pc, #32]	@ (801037c <prvCheckForValidListAndQueue+0x60>)
 801035a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801035c:	4b07      	ldr	r3, [pc, #28]	@ (801037c <prvCheckForValidListAndQueue+0x60>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d005      	beq.n	8010370 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010364:	4b05      	ldr	r3, [pc, #20]	@ (801037c <prvCheckForValidListAndQueue+0x60>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	490b      	ldr	r1, [pc, #44]	@ (8010398 <prvCheckForValidListAndQueue+0x7c>)
 801036a:	4618      	mov	r0, r3
 801036c:	f7fe fc5e 	bl	800ec2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010370:	f000 f99c 	bl	80106ac <vPortExitCritical>
}
 8010374:	bf00      	nop
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
 801037a:	bf00      	nop
 801037c:	2000c148 	.word	0x2000c148
 8010380:	2000c118 	.word	0x2000c118
 8010384:	2000c12c 	.word	0x2000c12c
 8010388:	2000c140 	.word	0x2000c140
 801038c:	2000c144 	.word	0x2000c144
 8010390:	2000c1f4 	.word	0x2000c1f4
 8010394:	2000c154 	.word	0x2000c154
 8010398:	080214f8 	.word	0x080214f8

0801039c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b086      	sub	sp, #24
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d10b      	bne.n	80103c6 <pvTimerGetTimerID+0x2a>
	__asm volatile
 80103ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103b2:	f383 8811 	msr	BASEPRI, r3
 80103b6:	f3bf 8f6f 	isb	sy
 80103ba:	f3bf 8f4f 	dsb	sy
 80103be:	60fb      	str	r3, [r7, #12]
}
 80103c0:	bf00      	nop
 80103c2:	bf00      	nop
 80103c4:	e7fd      	b.n	80103c2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80103c6:	f000 f93f 	bl	8010648 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	69db      	ldr	r3, [r3, #28]
 80103ce:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80103d0:	f000 f96c 	bl	80106ac <vPortExitCritical>

	return pvReturn;
 80103d4:	693b      	ldr	r3, [r7, #16]
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3718      	adds	r7, #24
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}
	...

080103e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80103e0:	b480      	push	{r7}
 80103e2:	b085      	sub	sp, #20
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	60f8      	str	r0, [r7, #12]
 80103e8:	60b9      	str	r1, [r7, #8]
 80103ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	3b04      	subs	r3, #4
 80103f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80103f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	3b04      	subs	r3, #4
 80103fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	f023 0201 	bic.w	r2, r3, #1
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	3b04      	subs	r3, #4
 801040e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010410:	4a0c      	ldr	r2, [pc, #48]	@ (8010444 <pxPortInitialiseStack+0x64>)
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	3b14      	subs	r3, #20
 801041a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801041c:	687a      	ldr	r2, [r7, #4]
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	3b04      	subs	r3, #4
 8010426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	f06f 0202 	mvn.w	r2, #2
 801042e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	3b20      	subs	r3, #32
 8010434:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010436:	68fb      	ldr	r3, [r7, #12]
}
 8010438:	4618      	mov	r0, r3
 801043a:	3714      	adds	r7, #20
 801043c:	46bd      	mov	sp, r7
 801043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010442:	4770      	bx	lr
 8010444:	08010449 	.word	0x08010449

08010448 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010448:	b480      	push	{r7}
 801044a:	b085      	sub	sp, #20
 801044c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801044e:	2300      	movs	r3, #0
 8010450:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010452:	4b13      	ldr	r3, [pc, #76]	@ (80104a0 <prvTaskExitError+0x58>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801045a:	d00b      	beq.n	8010474 <prvTaskExitError+0x2c>
	__asm volatile
 801045c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010460:	f383 8811 	msr	BASEPRI, r3
 8010464:	f3bf 8f6f 	isb	sy
 8010468:	f3bf 8f4f 	dsb	sy
 801046c:	60fb      	str	r3, [r7, #12]
}
 801046e:	bf00      	nop
 8010470:	bf00      	nop
 8010472:	e7fd      	b.n	8010470 <prvTaskExitError+0x28>
	__asm volatile
 8010474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010478:	f383 8811 	msr	BASEPRI, r3
 801047c:	f3bf 8f6f 	isb	sy
 8010480:	f3bf 8f4f 	dsb	sy
 8010484:	60bb      	str	r3, [r7, #8]
}
 8010486:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010488:	bf00      	nop
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d0fc      	beq.n	801048a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010490:	bf00      	nop
 8010492:	bf00      	nop
 8010494:	3714      	adds	r7, #20
 8010496:	46bd      	mov	sp, r7
 8010498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049c:	4770      	bx	lr
 801049e:	bf00      	nop
 80104a0:	200000a4 	.word	0x200000a4
	...

080104b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80104b0:	4b07      	ldr	r3, [pc, #28]	@ (80104d0 <pxCurrentTCBConst2>)
 80104b2:	6819      	ldr	r1, [r3, #0]
 80104b4:	6808      	ldr	r0, [r1, #0]
 80104b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104ba:	f380 8809 	msr	PSP, r0
 80104be:	f3bf 8f6f 	isb	sy
 80104c2:	f04f 0000 	mov.w	r0, #0
 80104c6:	f380 8811 	msr	BASEPRI, r0
 80104ca:	4770      	bx	lr
 80104cc:	f3af 8000 	nop.w

080104d0 <pxCurrentTCBConst2>:
 80104d0:	2000bc18 	.word	0x2000bc18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80104d4:	bf00      	nop
 80104d6:	bf00      	nop

080104d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80104d8:	4808      	ldr	r0, [pc, #32]	@ (80104fc <prvPortStartFirstTask+0x24>)
 80104da:	6800      	ldr	r0, [r0, #0]
 80104dc:	6800      	ldr	r0, [r0, #0]
 80104de:	f380 8808 	msr	MSP, r0
 80104e2:	f04f 0000 	mov.w	r0, #0
 80104e6:	f380 8814 	msr	CONTROL, r0
 80104ea:	b662      	cpsie	i
 80104ec:	b661      	cpsie	f
 80104ee:	f3bf 8f4f 	dsb	sy
 80104f2:	f3bf 8f6f 	isb	sy
 80104f6:	df00      	svc	0
 80104f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80104fa:	bf00      	nop
 80104fc:	e000ed08 	.word	0xe000ed08

08010500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b086      	sub	sp, #24
 8010504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010506:	4b47      	ldr	r3, [pc, #284]	@ (8010624 <xPortStartScheduler+0x124>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	4a47      	ldr	r2, [pc, #284]	@ (8010628 <xPortStartScheduler+0x128>)
 801050c:	4293      	cmp	r3, r2
 801050e:	d10b      	bne.n	8010528 <xPortStartScheduler+0x28>
	__asm volatile
 8010510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010514:	f383 8811 	msr	BASEPRI, r3
 8010518:	f3bf 8f6f 	isb	sy
 801051c:	f3bf 8f4f 	dsb	sy
 8010520:	613b      	str	r3, [r7, #16]
}
 8010522:	bf00      	nop
 8010524:	bf00      	nop
 8010526:	e7fd      	b.n	8010524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010528:	4b3e      	ldr	r3, [pc, #248]	@ (8010624 <xPortStartScheduler+0x124>)
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	4a3f      	ldr	r2, [pc, #252]	@ (801062c <xPortStartScheduler+0x12c>)
 801052e:	4293      	cmp	r3, r2
 8010530:	d10b      	bne.n	801054a <xPortStartScheduler+0x4a>
	__asm volatile
 8010532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010536:	f383 8811 	msr	BASEPRI, r3
 801053a:	f3bf 8f6f 	isb	sy
 801053e:	f3bf 8f4f 	dsb	sy
 8010542:	60fb      	str	r3, [r7, #12]
}
 8010544:	bf00      	nop
 8010546:	bf00      	nop
 8010548:	e7fd      	b.n	8010546 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801054a:	4b39      	ldr	r3, [pc, #228]	@ (8010630 <xPortStartScheduler+0x130>)
 801054c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	781b      	ldrb	r3, [r3, #0]
 8010552:	b2db      	uxtb	r3, r3
 8010554:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010556:	697b      	ldr	r3, [r7, #20]
 8010558:	22ff      	movs	r2, #255	@ 0xff
 801055a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	781b      	ldrb	r3, [r3, #0]
 8010560:	b2db      	uxtb	r3, r3
 8010562:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010564:	78fb      	ldrb	r3, [r7, #3]
 8010566:	b2db      	uxtb	r3, r3
 8010568:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801056c:	b2da      	uxtb	r2, r3
 801056e:	4b31      	ldr	r3, [pc, #196]	@ (8010634 <xPortStartScheduler+0x134>)
 8010570:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010572:	4b31      	ldr	r3, [pc, #196]	@ (8010638 <xPortStartScheduler+0x138>)
 8010574:	2207      	movs	r2, #7
 8010576:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010578:	e009      	b.n	801058e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801057a:	4b2f      	ldr	r3, [pc, #188]	@ (8010638 <xPortStartScheduler+0x138>)
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	3b01      	subs	r3, #1
 8010580:	4a2d      	ldr	r2, [pc, #180]	@ (8010638 <xPortStartScheduler+0x138>)
 8010582:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010584:	78fb      	ldrb	r3, [r7, #3]
 8010586:	b2db      	uxtb	r3, r3
 8010588:	005b      	lsls	r3, r3, #1
 801058a:	b2db      	uxtb	r3, r3
 801058c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801058e:	78fb      	ldrb	r3, [r7, #3]
 8010590:	b2db      	uxtb	r3, r3
 8010592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010596:	2b80      	cmp	r3, #128	@ 0x80
 8010598:	d0ef      	beq.n	801057a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801059a:	4b27      	ldr	r3, [pc, #156]	@ (8010638 <xPortStartScheduler+0x138>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	f1c3 0307 	rsb	r3, r3, #7
 80105a2:	2b04      	cmp	r3, #4
 80105a4:	d00b      	beq.n	80105be <xPortStartScheduler+0xbe>
	__asm volatile
 80105a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105aa:	f383 8811 	msr	BASEPRI, r3
 80105ae:	f3bf 8f6f 	isb	sy
 80105b2:	f3bf 8f4f 	dsb	sy
 80105b6:	60bb      	str	r3, [r7, #8]
}
 80105b8:	bf00      	nop
 80105ba:	bf00      	nop
 80105bc:	e7fd      	b.n	80105ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80105be:	4b1e      	ldr	r3, [pc, #120]	@ (8010638 <xPortStartScheduler+0x138>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	021b      	lsls	r3, r3, #8
 80105c4:	4a1c      	ldr	r2, [pc, #112]	@ (8010638 <xPortStartScheduler+0x138>)
 80105c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80105c8:	4b1b      	ldr	r3, [pc, #108]	@ (8010638 <xPortStartScheduler+0x138>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80105d0:	4a19      	ldr	r2, [pc, #100]	@ (8010638 <xPortStartScheduler+0x138>)
 80105d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	b2da      	uxtb	r2, r3
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80105dc:	4b17      	ldr	r3, [pc, #92]	@ (801063c <xPortStartScheduler+0x13c>)
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	4a16      	ldr	r2, [pc, #88]	@ (801063c <xPortStartScheduler+0x13c>)
 80105e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80105e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80105e8:	4b14      	ldr	r3, [pc, #80]	@ (801063c <xPortStartScheduler+0x13c>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	4a13      	ldr	r2, [pc, #76]	@ (801063c <xPortStartScheduler+0x13c>)
 80105ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80105f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80105f4:	f000 f8da 	bl	80107ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80105f8:	4b11      	ldr	r3, [pc, #68]	@ (8010640 <xPortStartScheduler+0x140>)
 80105fa:	2200      	movs	r2, #0
 80105fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80105fe:	f000 f8f9 	bl	80107f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010602:	4b10      	ldr	r3, [pc, #64]	@ (8010644 <xPortStartScheduler+0x144>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	4a0f      	ldr	r2, [pc, #60]	@ (8010644 <xPortStartScheduler+0x144>)
 8010608:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801060c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801060e:	f7ff ff63 	bl	80104d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010612:	f7fe ff43 	bl	800f49c <vTaskSwitchContext>
	prvTaskExitError();
 8010616:	f7ff ff17 	bl	8010448 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801061a:	2300      	movs	r3, #0
}
 801061c:	4618      	mov	r0, r3
 801061e:	3718      	adds	r7, #24
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}
 8010624:	e000ed00 	.word	0xe000ed00
 8010628:	410fc271 	.word	0x410fc271
 801062c:	410fc270 	.word	0x410fc270
 8010630:	e000e400 	.word	0xe000e400
 8010634:	2000c244 	.word	0x2000c244
 8010638:	2000c248 	.word	0x2000c248
 801063c:	e000ed20 	.word	0xe000ed20
 8010640:	200000a4 	.word	0x200000a4
 8010644:	e000ef34 	.word	0xe000ef34

08010648 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010648:	b480      	push	{r7}
 801064a:	b083      	sub	sp, #12
 801064c:	af00      	add	r7, sp, #0
	__asm volatile
 801064e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010652:	f383 8811 	msr	BASEPRI, r3
 8010656:	f3bf 8f6f 	isb	sy
 801065a:	f3bf 8f4f 	dsb	sy
 801065e:	607b      	str	r3, [r7, #4]
}
 8010660:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010662:	4b10      	ldr	r3, [pc, #64]	@ (80106a4 <vPortEnterCritical+0x5c>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	3301      	adds	r3, #1
 8010668:	4a0e      	ldr	r2, [pc, #56]	@ (80106a4 <vPortEnterCritical+0x5c>)
 801066a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801066c:	4b0d      	ldr	r3, [pc, #52]	@ (80106a4 <vPortEnterCritical+0x5c>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	2b01      	cmp	r3, #1
 8010672:	d110      	bne.n	8010696 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010674:	4b0c      	ldr	r3, [pc, #48]	@ (80106a8 <vPortEnterCritical+0x60>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	b2db      	uxtb	r3, r3
 801067a:	2b00      	cmp	r3, #0
 801067c:	d00b      	beq.n	8010696 <vPortEnterCritical+0x4e>
	__asm volatile
 801067e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010682:	f383 8811 	msr	BASEPRI, r3
 8010686:	f3bf 8f6f 	isb	sy
 801068a:	f3bf 8f4f 	dsb	sy
 801068e:	603b      	str	r3, [r7, #0]
}
 8010690:	bf00      	nop
 8010692:	bf00      	nop
 8010694:	e7fd      	b.n	8010692 <vPortEnterCritical+0x4a>
	}
}
 8010696:	bf00      	nop
 8010698:	370c      	adds	r7, #12
 801069a:	46bd      	mov	sp, r7
 801069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a0:	4770      	bx	lr
 80106a2:	bf00      	nop
 80106a4:	200000a4 	.word	0x200000a4
 80106a8:	e000ed04 	.word	0xe000ed04

080106ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80106ac:	b480      	push	{r7}
 80106ae:	b083      	sub	sp, #12
 80106b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80106b2:	4b12      	ldr	r3, [pc, #72]	@ (80106fc <vPortExitCritical+0x50>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d10b      	bne.n	80106d2 <vPortExitCritical+0x26>
	__asm volatile
 80106ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106be:	f383 8811 	msr	BASEPRI, r3
 80106c2:	f3bf 8f6f 	isb	sy
 80106c6:	f3bf 8f4f 	dsb	sy
 80106ca:	607b      	str	r3, [r7, #4]
}
 80106cc:	bf00      	nop
 80106ce:	bf00      	nop
 80106d0:	e7fd      	b.n	80106ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80106d2:	4b0a      	ldr	r3, [pc, #40]	@ (80106fc <vPortExitCritical+0x50>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	3b01      	subs	r3, #1
 80106d8:	4a08      	ldr	r2, [pc, #32]	@ (80106fc <vPortExitCritical+0x50>)
 80106da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80106dc:	4b07      	ldr	r3, [pc, #28]	@ (80106fc <vPortExitCritical+0x50>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d105      	bne.n	80106f0 <vPortExitCritical+0x44>
 80106e4:	2300      	movs	r3, #0
 80106e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	f383 8811 	msr	BASEPRI, r3
}
 80106ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80106f0:	bf00      	nop
 80106f2:	370c      	adds	r7, #12
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr
 80106fc:	200000a4 	.word	0x200000a4

08010700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010700:	f3ef 8009 	mrs	r0, PSP
 8010704:	f3bf 8f6f 	isb	sy
 8010708:	4b15      	ldr	r3, [pc, #84]	@ (8010760 <pxCurrentTCBConst>)
 801070a:	681a      	ldr	r2, [r3, #0]
 801070c:	f01e 0f10 	tst.w	lr, #16
 8010710:	bf08      	it	eq
 8010712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801071a:	6010      	str	r0, [r2, #0]
 801071c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010720:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010724:	f380 8811 	msr	BASEPRI, r0
 8010728:	f3bf 8f4f 	dsb	sy
 801072c:	f3bf 8f6f 	isb	sy
 8010730:	f7fe feb4 	bl	800f49c <vTaskSwitchContext>
 8010734:	f04f 0000 	mov.w	r0, #0
 8010738:	f380 8811 	msr	BASEPRI, r0
 801073c:	bc09      	pop	{r0, r3}
 801073e:	6819      	ldr	r1, [r3, #0]
 8010740:	6808      	ldr	r0, [r1, #0]
 8010742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010746:	f01e 0f10 	tst.w	lr, #16
 801074a:	bf08      	it	eq
 801074c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010750:	f380 8809 	msr	PSP, r0
 8010754:	f3bf 8f6f 	isb	sy
 8010758:	4770      	bx	lr
 801075a:	bf00      	nop
 801075c:	f3af 8000 	nop.w

08010760 <pxCurrentTCBConst>:
 8010760:	2000bc18 	.word	0x2000bc18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010764:	bf00      	nop
 8010766:	bf00      	nop

08010768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b082      	sub	sp, #8
 801076c:	af00      	add	r7, sp, #0
	__asm volatile
 801076e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010772:	f383 8811 	msr	BASEPRI, r3
 8010776:	f3bf 8f6f 	isb	sy
 801077a:	f3bf 8f4f 	dsb	sy
 801077e:	607b      	str	r3, [r7, #4]
}
 8010780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010782:	f7fe fdd1 	bl	800f328 <xTaskIncrementTick>
 8010786:	4603      	mov	r3, r0
 8010788:	2b00      	cmp	r3, #0
 801078a:	d003      	beq.n	8010794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801078c:	4b06      	ldr	r3, [pc, #24]	@ (80107a8 <xPortSysTickHandler+0x40>)
 801078e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010792:	601a      	str	r2, [r3, #0]
 8010794:	2300      	movs	r3, #0
 8010796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	f383 8811 	msr	BASEPRI, r3
}
 801079e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80107a0:	bf00      	nop
 80107a2:	3708      	adds	r7, #8
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd80      	pop	{r7, pc}
 80107a8:	e000ed04 	.word	0xe000ed04

080107ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80107ac:	b480      	push	{r7}
 80107ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80107b0:	4b0b      	ldr	r3, [pc, #44]	@ (80107e0 <vPortSetupTimerInterrupt+0x34>)
 80107b2:	2200      	movs	r2, #0
 80107b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80107b6:	4b0b      	ldr	r3, [pc, #44]	@ (80107e4 <vPortSetupTimerInterrupt+0x38>)
 80107b8:	2200      	movs	r2, #0
 80107ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80107bc:	4b0a      	ldr	r3, [pc, #40]	@ (80107e8 <vPortSetupTimerInterrupt+0x3c>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	4a0a      	ldr	r2, [pc, #40]	@ (80107ec <vPortSetupTimerInterrupt+0x40>)
 80107c2:	fba2 2303 	umull	r2, r3, r2, r3
 80107c6:	099b      	lsrs	r3, r3, #6
 80107c8:	4a09      	ldr	r2, [pc, #36]	@ (80107f0 <vPortSetupTimerInterrupt+0x44>)
 80107ca:	3b01      	subs	r3, #1
 80107cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80107ce:	4b04      	ldr	r3, [pc, #16]	@ (80107e0 <vPortSetupTimerInterrupt+0x34>)
 80107d0:	2207      	movs	r2, #7
 80107d2:	601a      	str	r2, [r3, #0]
}
 80107d4:	bf00      	nop
 80107d6:	46bd      	mov	sp, r7
 80107d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107dc:	4770      	bx	lr
 80107de:	bf00      	nop
 80107e0:	e000e010 	.word	0xe000e010
 80107e4:	e000e018 	.word	0xe000e018
 80107e8:	2000000c 	.word	0x2000000c
 80107ec:	10624dd3 	.word	0x10624dd3
 80107f0:	e000e014 	.word	0xe000e014

080107f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80107f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010804 <vPortEnableVFP+0x10>
 80107f8:	6801      	ldr	r1, [r0, #0]
 80107fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80107fe:	6001      	str	r1, [r0, #0]
 8010800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010802:	bf00      	nop
 8010804:	e000ed88 	.word	0xe000ed88

08010808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010808:	b480      	push	{r7}
 801080a:	b085      	sub	sp, #20
 801080c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801080e:	f3ef 8305 	mrs	r3, IPSR
 8010812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	2b0f      	cmp	r3, #15
 8010818:	d915      	bls.n	8010846 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801081a:	4a18      	ldr	r2, [pc, #96]	@ (801087c <vPortValidateInterruptPriority+0x74>)
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	4413      	add	r3, r2
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010824:	4b16      	ldr	r3, [pc, #88]	@ (8010880 <vPortValidateInterruptPriority+0x78>)
 8010826:	781b      	ldrb	r3, [r3, #0]
 8010828:	7afa      	ldrb	r2, [r7, #11]
 801082a:	429a      	cmp	r2, r3
 801082c:	d20b      	bcs.n	8010846 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801082e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010832:	f383 8811 	msr	BASEPRI, r3
 8010836:	f3bf 8f6f 	isb	sy
 801083a:	f3bf 8f4f 	dsb	sy
 801083e:	607b      	str	r3, [r7, #4]
}
 8010840:	bf00      	nop
 8010842:	bf00      	nop
 8010844:	e7fd      	b.n	8010842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010846:	4b0f      	ldr	r3, [pc, #60]	@ (8010884 <vPortValidateInterruptPriority+0x7c>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801084e:	4b0e      	ldr	r3, [pc, #56]	@ (8010888 <vPortValidateInterruptPriority+0x80>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	429a      	cmp	r2, r3
 8010854:	d90b      	bls.n	801086e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801085a:	f383 8811 	msr	BASEPRI, r3
 801085e:	f3bf 8f6f 	isb	sy
 8010862:	f3bf 8f4f 	dsb	sy
 8010866:	603b      	str	r3, [r7, #0]
}
 8010868:	bf00      	nop
 801086a:	bf00      	nop
 801086c:	e7fd      	b.n	801086a <vPortValidateInterruptPriority+0x62>
	}
 801086e:	bf00      	nop
 8010870:	3714      	adds	r7, #20
 8010872:	46bd      	mov	sp, r7
 8010874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010878:	4770      	bx	lr
 801087a:	bf00      	nop
 801087c:	e000e3f0 	.word	0xe000e3f0
 8010880:	2000c244 	.word	0x2000c244
 8010884:	e000ed0c 	.word	0xe000ed0c
 8010888:	2000c248 	.word	0x2000c248

0801088c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b08a      	sub	sp, #40	@ 0x28
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010894:	2300      	movs	r3, #0
 8010896:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010898:	f7fe fc8a 	bl	800f1b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801089c:	4b5c      	ldr	r3, [pc, #368]	@ (8010a10 <pvPortMalloc+0x184>)
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d101      	bne.n	80108a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80108a4:	f000 f924 	bl	8010af0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80108a8:	4b5a      	ldr	r3, [pc, #360]	@ (8010a14 <pvPortMalloc+0x188>)
 80108aa:	681a      	ldr	r2, [r3, #0]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	4013      	ands	r3, r2
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	f040 8095 	bne.w	80109e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d01e      	beq.n	80108fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80108bc:	2208      	movs	r2, #8
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	4413      	add	r3, r2
 80108c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f003 0307 	and.w	r3, r3, #7
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d015      	beq.n	80108fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f023 0307 	bic.w	r3, r3, #7
 80108d4:	3308      	adds	r3, #8
 80108d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f003 0307 	and.w	r3, r3, #7
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d00b      	beq.n	80108fa <pvPortMalloc+0x6e>
	__asm volatile
 80108e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108e6:	f383 8811 	msr	BASEPRI, r3
 80108ea:	f3bf 8f6f 	isb	sy
 80108ee:	f3bf 8f4f 	dsb	sy
 80108f2:	617b      	str	r3, [r7, #20]
}
 80108f4:	bf00      	nop
 80108f6:	bf00      	nop
 80108f8:	e7fd      	b.n	80108f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d06f      	beq.n	80109e0 <pvPortMalloc+0x154>
 8010900:	4b45      	ldr	r3, [pc, #276]	@ (8010a18 <pvPortMalloc+0x18c>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	687a      	ldr	r2, [r7, #4]
 8010906:	429a      	cmp	r2, r3
 8010908:	d86a      	bhi.n	80109e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801090a:	4b44      	ldr	r3, [pc, #272]	@ (8010a1c <pvPortMalloc+0x190>)
 801090c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801090e:	4b43      	ldr	r3, [pc, #268]	@ (8010a1c <pvPortMalloc+0x190>)
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010914:	e004      	b.n	8010920 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010918:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801091a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010922:	685b      	ldr	r3, [r3, #4]
 8010924:	687a      	ldr	r2, [r7, #4]
 8010926:	429a      	cmp	r2, r3
 8010928:	d903      	bls.n	8010932 <pvPortMalloc+0xa6>
 801092a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d1f1      	bne.n	8010916 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010932:	4b37      	ldr	r3, [pc, #220]	@ (8010a10 <pvPortMalloc+0x184>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010938:	429a      	cmp	r2, r3
 801093a:	d051      	beq.n	80109e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801093c:	6a3b      	ldr	r3, [r7, #32]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	2208      	movs	r2, #8
 8010942:	4413      	add	r3, r2
 8010944:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010948:	681a      	ldr	r2, [r3, #0]
 801094a:	6a3b      	ldr	r3, [r7, #32]
 801094c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801094e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010950:	685a      	ldr	r2, [r3, #4]
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	1ad2      	subs	r2, r2, r3
 8010956:	2308      	movs	r3, #8
 8010958:	005b      	lsls	r3, r3, #1
 801095a:	429a      	cmp	r2, r3
 801095c:	d920      	bls.n	80109a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801095e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	4413      	add	r3, r2
 8010964:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010966:	69bb      	ldr	r3, [r7, #24]
 8010968:	f003 0307 	and.w	r3, r3, #7
 801096c:	2b00      	cmp	r3, #0
 801096e:	d00b      	beq.n	8010988 <pvPortMalloc+0xfc>
	__asm volatile
 8010970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010974:	f383 8811 	msr	BASEPRI, r3
 8010978:	f3bf 8f6f 	isb	sy
 801097c:	f3bf 8f4f 	dsb	sy
 8010980:	613b      	str	r3, [r7, #16]
}
 8010982:	bf00      	nop
 8010984:	bf00      	nop
 8010986:	e7fd      	b.n	8010984 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801098a:	685a      	ldr	r2, [r3, #4]
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	1ad2      	subs	r2, r2, r3
 8010990:	69bb      	ldr	r3, [r7, #24]
 8010992:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010996:	687a      	ldr	r2, [r7, #4]
 8010998:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801099a:	69b8      	ldr	r0, [r7, #24]
 801099c:	f000 f90a 	bl	8010bb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80109a0:	4b1d      	ldr	r3, [pc, #116]	@ (8010a18 <pvPortMalloc+0x18c>)
 80109a2:	681a      	ldr	r2, [r3, #0]
 80109a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109a6:	685b      	ldr	r3, [r3, #4]
 80109a8:	1ad3      	subs	r3, r2, r3
 80109aa:	4a1b      	ldr	r2, [pc, #108]	@ (8010a18 <pvPortMalloc+0x18c>)
 80109ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80109ae:	4b1a      	ldr	r3, [pc, #104]	@ (8010a18 <pvPortMalloc+0x18c>)
 80109b0:	681a      	ldr	r2, [r3, #0]
 80109b2:	4b1b      	ldr	r3, [pc, #108]	@ (8010a20 <pvPortMalloc+0x194>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	429a      	cmp	r2, r3
 80109b8:	d203      	bcs.n	80109c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80109ba:	4b17      	ldr	r3, [pc, #92]	@ (8010a18 <pvPortMalloc+0x18c>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	4a18      	ldr	r2, [pc, #96]	@ (8010a20 <pvPortMalloc+0x194>)
 80109c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80109c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109c4:	685a      	ldr	r2, [r3, #4]
 80109c6:	4b13      	ldr	r3, [pc, #76]	@ (8010a14 <pvPortMalloc+0x188>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	431a      	orrs	r2, r3
 80109cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80109d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109d2:	2200      	movs	r2, #0
 80109d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80109d6:	4b13      	ldr	r3, [pc, #76]	@ (8010a24 <pvPortMalloc+0x198>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	3301      	adds	r3, #1
 80109dc:	4a11      	ldr	r2, [pc, #68]	@ (8010a24 <pvPortMalloc+0x198>)
 80109de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80109e0:	f7fe fbf4 	bl	800f1cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80109e4:	69fb      	ldr	r3, [r7, #28]
 80109e6:	f003 0307 	and.w	r3, r3, #7
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d00b      	beq.n	8010a06 <pvPortMalloc+0x17a>
	__asm volatile
 80109ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109f2:	f383 8811 	msr	BASEPRI, r3
 80109f6:	f3bf 8f6f 	isb	sy
 80109fa:	f3bf 8f4f 	dsb	sy
 80109fe:	60fb      	str	r3, [r7, #12]
}
 8010a00:	bf00      	nop
 8010a02:	bf00      	nop
 8010a04:	e7fd      	b.n	8010a02 <pvPortMalloc+0x176>
	return pvReturn;
 8010a06:	69fb      	ldr	r3, [r7, #28]
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3728      	adds	r7, #40	@ 0x28
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}
 8010a10:	2000fe54 	.word	0x2000fe54
 8010a14:	2000fe68 	.word	0x2000fe68
 8010a18:	2000fe58 	.word	0x2000fe58
 8010a1c:	2000fe4c 	.word	0x2000fe4c
 8010a20:	2000fe5c 	.word	0x2000fe5c
 8010a24:	2000fe60 	.word	0x2000fe60

08010a28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b086      	sub	sp, #24
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d04f      	beq.n	8010ada <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010a3a:	2308      	movs	r3, #8
 8010a3c:	425b      	negs	r3, r3
 8010a3e:	697a      	ldr	r2, [r7, #20]
 8010a40:	4413      	add	r3, r2
 8010a42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010a48:	693b      	ldr	r3, [r7, #16]
 8010a4a:	685a      	ldr	r2, [r3, #4]
 8010a4c:	4b25      	ldr	r3, [pc, #148]	@ (8010ae4 <vPortFree+0xbc>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	4013      	ands	r3, r2
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d10b      	bne.n	8010a6e <vPortFree+0x46>
	__asm volatile
 8010a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a5a:	f383 8811 	msr	BASEPRI, r3
 8010a5e:	f3bf 8f6f 	isb	sy
 8010a62:	f3bf 8f4f 	dsb	sy
 8010a66:	60fb      	str	r3, [r7, #12]
}
 8010a68:	bf00      	nop
 8010a6a:	bf00      	nop
 8010a6c:	e7fd      	b.n	8010a6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d00b      	beq.n	8010a8e <vPortFree+0x66>
	__asm volatile
 8010a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a7a:	f383 8811 	msr	BASEPRI, r3
 8010a7e:	f3bf 8f6f 	isb	sy
 8010a82:	f3bf 8f4f 	dsb	sy
 8010a86:	60bb      	str	r3, [r7, #8]
}
 8010a88:	bf00      	nop
 8010a8a:	bf00      	nop
 8010a8c:	e7fd      	b.n	8010a8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010a8e:	693b      	ldr	r3, [r7, #16]
 8010a90:	685a      	ldr	r2, [r3, #4]
 8010a92:	4b14      	ldr	r3, [pc, #80]	@ (8010ae4 <vPortFree+0xbc>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	4013      	ands	r3, r2
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d01e      	beq.n	8010ada <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010a9c:	693b      	ldr	r3, [r7, #16]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d11a      	bne.n	8010ada <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	685a      	ldr	r2, [r3, #4]
 8010aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8010ae4 <vPortFree+0xbc>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	43db      	mvns	r3, r3
 8010aae:	401a      	ands	r2, r3
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010ab4:	f7fe fb7c 	bl	800f1b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	685a      	ldr	r2, [r3, #4]
 8010abc:	4b0a      	ldr	r3, [pc, #40]	@ (8010ae8 <vPortFree+0xc0>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	4413      	add	r3, r2
 8010ac2:	4a09      	ldr	r2, [pc, #36]	@ (8010ae8 <vPortFree+0xc0>)
 8010ac4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010ac6:	6938      	ldr	r0, [r7, #16]
 8010ac8:	f000 f874 	bl	8010bb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010acc:	4b07      	ldr	r3, [pc, #28]	@ (8010aec <vPortFree+0xc4>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	3301      	adds	r3, #1
 8010ad2:	4a06      	ldr	r2, [pc, #24]	@ (8010aec <vPortFree+0xc4>)
 8010ad4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010ad6:	f7fe fb79 	bl	800f1cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010ada:	bf00      	nop
 8010adc:	3718      	adds	r7, #24
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd80      	pop	{r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	2000fe68 	.word	0x2000fe68
 8010ae8:	2000fe58 	.word	0x2000fe58
 8010aec:	2000fe64 	.word	0x2000fe64

08010af0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010af0:	b480      	push	{r7}
 8010af2:	b085      	sub	sp, #20
 8010af4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010af6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8010afa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010afc:	4b27      	ldr	r3, [pc, #156]	@ (8010b9c <prvHeapInit+0xac>)
 8010afe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	f003 0307 	and.w	r3, r3, #7
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d00c      	beq.n	8010b24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	3307      	adds	r3, #7
 8010b0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	f023 0307 	bic.w	r3, r3, #7
 8010b16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010b18:	68ba      	ldr	r2, [r7, #8]
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	1ad3      	subs	r3, r2, r3
 8010b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8010b9c <prvHeapInit+0xac>)
 8010b20:	4413      	add	r3, r2
 8010b22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010b28:	4a1d      	ldr	r2, [pc, #116]	@ (8010ba0 <prvHeapInit+0xb0>)
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8010ba0 <prvHeapInit+0xb0>)
 8010b30:	2200      	movs	r2, #0
 8010b32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	68ba      	ldr	r2, [r7, #8]
 8010b38:	4413      	add	r3, r2
 8010b3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010b3c:	2208      	movs	r2, #8
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	1a9b      	subs	r3, r3, r2
 8010b42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	f023 0307 	bic.w	r3, r3, #7
 8010b4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	4a15      	ldr	r2, [pc, #84]	@ (8010ba4 <prvHeapInit+0xb4>)
 8010b50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010b52:	4b14      	ldr	r3, [pc, #80]	@ (8010ba4 <prvHeapInit+0xb4>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	2200      	movs	r2, #0
 8010b58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010b5a:	4b12      	ldr	r3, [pc, #72]	@ (8010ba4 <prvHeapInit+0xb4>)
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	2200      	movs	r2, #0
 8010b60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	68fa      	ldr	r2, [r7, #12]
 8010b6a:	1ad2      	subs	r2, r2, r3
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010b70:	4b0c      	ldr	r3, [pc, #48]	@ (8010ba4 <prvHeapInit+0xb4>)
 8010b72:	681a      	ldr	r2, [r3, #0]
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8010ba8 <prvHeapInit+0xb8>)
 8010b7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	4a09      	ldr	r2, [pc, #36]	@ (8010bac <prvHeapInit+0xbc>)
 8010b86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010b88:	4b09      	ldr	r3, [pc, #36]	@ (8010bb0 <prvHeapInit+0xc0>)
 8010b8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010b8e:	601a      	str	r2, [r3, #0]
}
 8010b90:	bf00      	nop
 8010b92:	3714      	adds	r7, #20
 8010b94:	46bd      	mov	sp, r7
 8010b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9a:	4770      	bx	lr
 8010b9c:	2000c24c 	.word	0x2000c24c
 8010ba0:	2000fe4c 	.word	0x2000fe4c
 8010ba4:	2000fe54 	.word	0x2000fe54
 8010ba8:	2000fe5c 	.word	0x2000fe5c
 8010bac:	2000fe58 	.word	0x2000fe58
 8010bb0:	2000fe68 	.word	0x2000fe68

08010bb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b085      	sub	sp, #20
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010bbc:	4b28      	ldr	r3, [pc, #160]	@ (8010c60 <prvInsertBlockIntoFreeList+0xac>)
 8010bbe:	60fb      	str	r3, [r7, #12]
 8010bc0:	e002      	b.n	8010bc8 <prvInsertBlockIntoFreeList+0x14>
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	60fb      	str	r3, [r7, #12]
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	687a      	ldr	r2, [r7, #4]
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	d8f7      	bhi.n	8010bc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	685b      	ldr	r3, [r3, #4]
 8010bda:	68ba      	ldr	r2, [r7, #8]
 8010bdc:	4413      	add	r3, r2
 8010bde:	687a      	ldr	r2, [r7, #4]
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d108      	bne.n	8010bf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	685a      	ldr	r2, [r3, #4]
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	685b      	ldr	r3, [r3, #4]
 8010bec:	441a      	add	r2, r3
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	685b      	ldr	r3, [r3, #4]
 8010bfe:	68ba      	ldr	r2, [r7, #8]
 8010c00:	441a      	add	r2, r3
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d118      	bne.n	8010c3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	681a      	ldr	r2, [r3, #0]
 8010c0e:	4b15      	ldr	r3, [pc, #84]	@ (8010c64 <prvInsertBlockIntoFreeList+0xb0>)
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d00d      	beq.n	8010c32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	685a      	ldr	r2, [r3, #4]
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	685b      	ldr	r3, [r3, #4]
 8010c20:	441a      	add	r2, r3
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	681a      	ldr	r2, [r3, #0]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	601a      	str	r2, [r3, #0]
 8010c30:	e008      	b.n	8010c44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010c32:	4b0c      	ldr	r3, [pc, #48]	@ (8010c64 <prvInsertBlockIntoFreeList+0xb0>)
 8010c34:	681a      	ldr	r2, [r3, #0]
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	601a      	str	r2, [r3, #0]
 8010c3a:	e003      	b.n	8010c44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	681a      	ldr	r2, [r3, #0]
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010c44:	68fa      	ldr	r2, [r7, #12]
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	429a      	cmp	r2, r3
 8010c4a:	d002      	beq.n	8010c52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	687a      	ldr	r2, [r7, #4]
 8010c50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c52:	bf00      	nop
 8010c54:	3714      	adds	r7, #20
 8010c56:	46bd      	mov	sp, r7
 8010c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5c:	4770      	bx	lr
 8010c5e:	bf00      	nop
 8010c60:	2000fe4c 	.word	0x2000fe4c
 8010c64:	2000fe54 	.word	0x2000fe54

08010c68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	4912      	ldr	r1, [pc, #72]	@ (8010cb8 <MX_USB_DEVICE_Init+0x50>)
 8010c70:	4812      	ldr	r0, [pc, #72]	@ (8010cbc <MX_USB_DEVICE_Init+0x54>)
 8010c72:	f7fb fd5b 	bl	800c72c <USBD_Init>
 8010c76:	4603      	mov	r3, r0
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d001      	beq.n	8010c80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010c7c:	f7f1 fc9e 	bl	80025bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010c80:	490f      	ldr	r1, [pc, #60]	@ (8010cc0 <MX_USB_DEVICE_Init+0x58>)
 8010c82:	480e      	ldr	r0, [pc, #56]	@ (8010cbc <MX_USB_DEVICE_Init+0x54>)
 8010c84:	f7fb fd82 	bl	800c78c <USBD_RegisterClass>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d001      	beq.n	8010c92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010c8e:	f7f1 fc95 	bl	80025bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010c92:	490c      	ldr	r1, [pc, #48]	@ (8010cc4 <MX_USB_DEVICE_Init+0x5c>)
 8010c94:	4809      	ldr	r0, [pc, #36]	@ (8010cbc <MX_USB_DEVICE_Init+0x54>)
 8010c96:	f7fb fcb9 	bl	800c60c <USBD_CDC_RegisterInterface>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d001      	beq.n	8010ca4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010ca0:	f7f1 fc8c 	bl	80025bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010ca4:	4805      	ldr	r0, [pc, #20]	@ (8010cbc <MX_USB_DEVICE_Init+0x54>)
 8010ca6:	f7fb fda7 	bl	800c7f8 <USBD_Start>
 8010caa:	4603      	mov	r3, r0
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d001      	beq.n	8010cb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010cb0:	f7f1 fc84 	bl	80025bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010cb4:	bf00      	nop
 8010cb6:	bd80      	pop	{r7, pc}
 8010cb8:	200000bc 	.word	0x200000bc
 8010cbc:	2000fe6c 	.word	0x2000fe6c
 8010cc0:	20000024 	.word	0x20000024
 8010cc4:	200000a8 	.word	0x200000a8

08010cc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010ccc:	2200      	movs	r2, #0
 8010cce:	4905      	ldr	r1, [pc, #20]	@ (8010ce4 <CDC_Init_FS+0x1c>)
 8010cd0:	4805      	ldr	r0, [pc, #20]	@ (8010ce8 <CDC_Init_FS+0x20>)
 8010cd2:	f7fb fcb5 	bl	800c640 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010cd6:	4905      	ldr	r1, [pc, #20]	@ (8010cec <CDC_Init_FS+0x24>)
 8010cd8:	4803      	ldr	r0, [pc, #12]	@ (8010ce8 <CDC_Init_FS+0x20>)
 8010cda:	f7fb fcd3 	bl	800c684 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010cde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	bd80      	pop	{r7, pc}
 8010ce4:	20010948 	.word	0x20010948
 8010ce8:	2000fe6c 	.word	0x2000fe6c
 8010cec:	20010148 	.word	0x20010148

08010cf0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010cf4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfe:	4770      	bx	lr

08010d00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b083      	sub	sp, #12
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	4603      	mov	r3, r0
 8010d08:	6039      	str	r1, [r7, #0]
 8010d0a:	71fb      	strb	r3, [r7, #7]
 8010d0c:	4613      	mov	r3, r2
 8010d0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010d10:	79fb      	ldrb	r3, [r7, #7]
 8010d12:	2b23      	cmp	r3, #35	@ 0x23
 8010d14:	d84a      	bhi.n	8010dac <CDC_Control_FS+0xac>
 8010d16:	a201      	add	r2, pc, #4	@ (adr r2, 8010d1c <CDC_Control_FS+0x1c>)
 8010d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d1c:	08010dad 	.word	0x08010dad
 8010d20:	08010dad 	.word	0x08010dad
 8010d24:	08010dad 	.word	0x08010dad
 8010d28:	08010dad 	.word	0x08010dad
 8010d2c:	08010dad 	.word	0x08010dad
 8010d30:	08010dad 	.word	0x08010dad
 8010d34:	08010dad 	.word	0x08010dad
 8010d38:	08010dad 	.word	0x08010dad
 8010d3c:	08010dad 	.word	0x08010dad
 8010d40:	08010dad 	.word	0x08010dad
 8010d44:	08010dad 	.word	0x08010dad
 8010d48:	08010dad 	.word	0x08010dad
 8010d4c:	08010dad 	.word	0x08010dad
 8010d50:	08010dad 	.word	0x08010dad
 8010d54:	08010dad 	.word	0x08010dad
 8010d58:	08010dad 	.word	0x08010dad
 8010d5c:	08010dad 	.word	0x08010dad
 8010d60:	08010dad 	.word	0x08010dad
 8010d64:	08010dad 	.word	0x08010dad
 8010d68:	08010dad 	.word	0x08010dad
 8010d6c:	08010dad 	.word	0x08010dad
 8010d70:	08010dad 	.word	0x08010dad
 8010d74:	08010dad 	.word	0x08010dad
 8010d78:	08010dad 	.word	0x08010dad
 8010d7c:	08010dad 	.word	0x08010dad
 8010d80:	08010dad 	.word	0x08010dad
 8010d84:	08010dad 	.word	0x08010dad
 8010d88:	08010dad 	.word	0x08010dad
 8010d8c:	08010dad 	.word	0x08010dad
 8010d90:	08010dad 	.word	0x08010dad
 8010d94:	08010dad 	.word	0x08010dad
 8010d98:	08010dad 	.word	0x08010dad
 8010d9c:	08010dad 	.word	0x08010dad
 8010da0:	08010dad 	.word	0x08010dad
 8010da4:	08010dad 	.word	0x08010dad
 8010da8:	08010dad 	.word	0x08010dad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010dac:	bf00      	nop
  }

  return (USBD_OK);
 8010dae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	370c      	adds	r7, #12
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr

08010dbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b082      	sub	sp, #8
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010dc6:	6879      	ldr	r1, [r7, #4]
 8010dc8:	4805      	ldr	r0, [pc, #20]	@ (8010de0 <CDC_Receive_FS+0x24>)
 8010dca:	f7fb fc5b 	bl	800c684 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010dce:	4804      	ldr	r0, [pc, #16]	@ (8010de0 <CDC_Receive_FS+0x24>)
 8010dd0:	f7fb fc76 	bl	800c6c0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010dd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3708      	adds	r7, #8
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	2000fe6c 	.word	0x2000fe6c

08010de4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010de4:	b480      	push	{r7}
 8010de6:	b087      	sub	sp, #28
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	60f8      	str	r0, [r7, #12]
 8010dec:	60b9      	str	r1, [r7, #8]
 8010dee:	4613      	mov	r3, r2
 8010df0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010df2:	2300      	movs	r3, #0
 8010df4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010df6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	371c      	adds	r7, #28
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e04:	4770      	bx	lr
	...

08010e08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b083      	sub	sp, #12
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	4603      	mov	r3, r0
 8010e10:	6039      	str	r1, [r7, #0]
 8010e12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010e14:	683b      	ldr	r3, [r7, #0]
 8010e16:	2212      	movs	r2, #18
 8010e18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010e1a:	4b03      	ldr	r3, [pc, #12]	@ (8010e28 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	370c      	adds	r7, #12
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr
 8010e28:	200000d8 	.word	0x200000d8

08010e2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e2c:	b480      	push	{r7}
 8010e2e:	b083      	sub	sp, #12
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	4603      	mov	r3, r0
 8010e34:	6039      	str	r1, [r7, #0]
 8010e36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	2204      	movs	r2, #4
 8010e3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010e3e:	4b03      	ldr	r3, [pc, #12]	@ (8010e4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010e40:	4618      	mov	r0, r3
 8010e42:	370c      	adds	r7, #12
 8010e44:	46bd      	mov	sp, r7
 8010e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4a:	4770      	bx	lr
 8010e4c:	200000ec 	.word	0x200000ec

08010e50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b082      	sub	sp, #8
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	4603      	mov	r3, r0
 8010e58:	6039      	str	r1, [r7, #0]
 8010e5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010e5c:	79fb      	ldrb	r3, [r7, #7]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d105      	bne.n	8010e6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010e62:	683a      	ldr	r2, [r7, #0]
 8010e64:	4907      	ldr	r1, [pc, #28]	@ (8010e84 <USBD_FS_ProductStrDescriptor+0x34>)
 8010e66:	4808      	ldr	r0, [pc, #32]	@ (8010e88 <USBD_FS_ProductStrDescriptor+0x38>)
 8010e68:	f7fc fe76 	bl	800db58 <USBD_GetString>
 8010e6c:	e004      	b.n	8010e78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010e6e:	683a      	ldr	r2, [r7, #0]
 8010e70:	4904      	ldr	r1, [pc, #16]	@ (8010e84 <USBD_FS_ProductStrDescriptor+0x34>)
 8010e72:	4805      	ldr	r0, [pc, #20]	@ (8010e88 <USBD_FS_ProductStrDescriptor+0x38>)
 8010e74:	f7fc fe70 	bl	800db58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010e78:	4b02      	ldr	r3, [pc, #8]	@ (8010e84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	3708      	adds	r7, #8
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}
 8010e82:	bf00      	nop
 8010e84:	20011148 	.word	0x20011148
 8010e88:	08021500 	.word	0x08021500

08010e8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b082      	sub	sp, #8
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	4603      	mov	r3, r0
 8010e94:	6039      	str	r1, [r7, #0]
 8010e96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010e98:	683a      	ldr	r2, [r7, #0]
 8010e9a:	4904      	ldr	r1, [pc, #16]	@ (8010eac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010e9c:	4804      	ldr	r0, [pc, #16]	@ (8010eb0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010e9e:	f7fc fe5b 	bl	800db58 <USBD_GetString>
  return USBD_StrDesc;
 8010ea2:	4b02      	ldr	r3, [pc, #8]	@ (8010eac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	3708      	adds	r7, #8
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}
 8010eac:	20011148 	.word	0x20011148
 8010eb0:	0802150c 	.word	0x0802150c

08010eb4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	4603      	mov	r3, r0
 8010ebc:	6039      	str	r1, [r7, #0]
 8010ebe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	221a      	movs	r2, #26
 8010ec4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010ec6:	f000 f843 	bl	8010f50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010eca:	4b02      	ldr	r3, [pc, #8]	@ (8010ed4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3708      	adds	r7, #8
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}
 8010ed4:	200000f0 	.word	0x200000f0

08010ed8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b082      	sub	sp, #8
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	4603      	mov	r3, r0
 8010ee0:	6039      	str	r1, [r7, #0]
 8010ee2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010ee4:	79fb      	ldrb	r3, [r7, #7]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d105      	bne.n	8010ef6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010eea:	683a      	ldr	r2, [r7, #0]
 8010eec:	4907      	ldr	r1, [pc, #28]	@ (8010f0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010eee:	4808      	ldr	r0, [pc, #32]	@ (8010f10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010ef0:	f7fc fe32 	bl	800db58 <USBD_GetString>
 8010ef4:	e004      	b.n	8010f00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010ef6:	683a      	ldr	r2, [r7, #0]
 8010ef8:	4904      	ldr	r1, [pc, #16]	@ (8010f0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010efa:	4805      	ldr	r0, [pc, #20]	@ (8010f10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010efc:	f7fc fe2c 	bl	800db58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010f00:	4b02      	ldr	r3, [pc, #8]	@ (8010f0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3708      	adds	r7, #8
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
 8010f0a:	bf00      	nop
 8010f0c:	20011148 	.word	0x20011148
 8010f10:	08021514 	.word	0x08021514

08010f14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b082      	sub	sp, #8
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	6039      	str	r1, [r7, #0]
 8010f1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010f20:	79fb      	ldrb	r3, [r7, #7]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d105      	bne.n	8010f32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010f26:	683a      	ldr	r2, [r7, #0]
 8010f28:	4907      	ldr	r1, [pc, #28]	@ (8010f48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010f2a:	4808      	ldr	r0, [pc, #32]	@ (8010f4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010f2c:	f7fc fe14 	bl	800db58 <USBD_GetString>
 8010f30:	e004      	b.n	8010f3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010f32:	683a      	ldr	r2, [r7, #0]
 8010f34:	4904      	ldr	r1, [pc, #16]	@ (8010f48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010f36:	4805      	ldr	r0, [pc, #20]	@ (8010f4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010f38:	f7fc fe0e 	bl	800db58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010f3c:	4b02      	ldr	r3, [pc, #8]	@ (8010f48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3708      	adds	r7, #8
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}
 8010f46:	bf00      	nop
 8010f48:	20011148 	.word	0x20011148
 8010f4c:	08021520 	.word	0x08021520

08010f50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b084      	sub	sp, #16
 8010f54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010f56:	4b0f      	ldr	r3, [pc, #60]	@ (8010f94 <Get_SerialNum+0x44>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8010f98 <Get_SerialNum+0x48>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010f62:	4b0e      	ldr	r3, [pc, #56]	@ (8010f9c <Get_SerialNum+0x4c>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010f68:	68fa      	ldr	r2, [r7, #12]
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	4413      	add	r3, r2
 8010f6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d009      	beq.n	8010f8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010f76:	2208      	movs	r2, #8
 8010f78:	4909      	ldr	r1, [pc, #36]	@ (8010fa0 <Get_SerialNum+0x50>)
 8010f7a:	68f8      	ldr	r0, [r7, #12]
 8010f7c:	f000 f814 	bl	8010fa8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010f80:	2204      	movs	r2, #4
 8010f82:	4908      	ldr	r1, [pc, #32]	@ (8010fa4 <Get_SerialNum+0x54>)
 8010f84:	68b8      	ldr	r0, [r7, #8]
 8010f86:	f000 f80f 	bl	8010fa8 <IntToUnicode>
  }
}
 8010f8a:	bf00      	nop
 8010f8c:	3710      	adds	r7, #16
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	bf00      	nop
 8010f94:	1fff7a10 	.word	0x1fff7a10
 8010f98:	1fff7a14 	.word	0x1fff7a14
 8010f9c:	1fff7a18 	.word	0x1fff7a18
 8010fa0:	200000f2 	.word	0x200000f2
 8010fa4:	20000102 	.word	0x20000102

08010fa8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010fa8:	b480      	push	{r7}
 8010faa:	b087      	sub	sp, #28
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	60f8      	str	r0, [r7, #12]
 8010fb0:	60b9      	str	r1, [r7, #8]
 8010fb2:	4613      	mov	r3, r2
 8010fb4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010fba:	2300      	movs	r3, #0
 8010fbc:	75fb      	strb	r3, [r7, #23]
 8010fbe:	e027      	b.n	8011010 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	0f1b      	lsrs	r3, r3, #28
 8010fc4:	2b09      	cmp	r3, #9
 8010fc6:	d80b      	bhi.n	8010fe0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	0f1b      	lsrs	r3, r3, #28
 8010fcc:	b2da      	uxtb	r2, r3
 8010fce:	7dfb      	ldrb	r3, [r7, #23]
 8010fd0:	005b      	lsls	r3, r3, #1
 8010fd2:	4619      	mov	r1, r3
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	440b      	add	r3, r1
 8010fd8:	3230      	adds	r2, #48	@ 0x30
 8010fda:	b2d2      	uxtb	r2, r2
 8010fdc:	701a      	strb	r2, [r3, #0]
 8010fde:	e00a      	b.n	8010ff6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	0f1b      	lsrs	r3, r3, #28
 8010fe4:	b2da      	uxtb	r2, r3
 8010fe6:	7dfb      	ldrb	r3, [r7, #23]
 8010fe8:	005b      	lsls	r3, r3, #1
 8010fea:	4619      	mov	r1, r3
 8010fec:	68bb      	ldr	r3, [r7, #8]
 8010fee:	440b      	add	r3, r1
 8010ff0:	3237      	adds	r2, #55	@ 0x37
 8010ff2:	b2d2      	uxtb	r2, r2
 8010ff4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	011b      	lsls	r3, r3, #4
 8010ffa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010ffc:	7dfb      	ldrb	r3, [r7, #23]
 8010ffe:	005b      	lsls	r3, r3, #1
 8011000:	3301      	adds	r3, #1
 8011002:	68ba      	ldr	r2, [r7, #8]
 8011004:	4413      	add	r3, r2
 8011006:	2200      	movs	r2, #0
 8011008:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801100a:	7dfb      	ldrb	r3, [r7, #23]
 801100c:	3301      	adds	r3, #1
 801100e:	75fb      	strb	r3, [r7, #23]
 8011010:	7dfa      	ldrb	r2, [r7, #23]
 8011012:	79fb      	ldrb	r3, [r7, #7]
 8011014:	429a      	cmp	r2, r3
 8011016:	d3d3      	bcc.n	8010fc0 <IntToUnicode+0x18>
  }
}
 8011018:	bf00      	nop
 801101a:	bf00      	nop
 801101c:	371c      	adds	r7, #28
 801101e:	46bd      	mov	sp, r7
 8011020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011024:	4770      	bx	lr
	...

08011028 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011028:	b580      	push	{r7, lr}
 801102a:	b08a      	sub	sp, #40	@ 0x28
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011030:	f107 0314 	add.w	r3, r7, #20
 8011034:	2200      	movs	r2, #0
 8011036:	601a      	str	r2, [r3, #0]
 8011038:	605a      	str	r2, [r3, #4]
 801103a:	609a      	str	r2, [r3, #8]
 801103c:	60da      	str	r2, [r3, #12]
 801103e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011048:	d13a      	bne.n	80110c0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801104a:	2300      	movs	r3, #0
 801104c:	613b      	str	r3, [r7, #16]
 801104e:	4b1e      	ldr	r3, [pc, #120]	@ (80110c8 <HAL_PCD_MspInit+0xa0>)
 8011050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011052:	4a1d      	ldr	r2, [pc, #116]	@ (80110c8 <HAL_PCD_MspInit+0xa0>)
 8011054:	f043 0301 	orr.w	r3, r3, #1
 8011058:	6313      	str	r3, [r2, #48]	@ 0x30
 801105a:	4b1b      	ldr	r3, [pc, #108]	@ (80110c8 <HAL_PCD_MspInit+0xa0>)
 801105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801105e:	f003 0301 	and.w	r3, r3, #1
 8011062:	613b      	str	r3, [r7, #16]
 8011064:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011066:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801106a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801106c:	2302      	movs	r3, #2
 801106e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011070:	2300      	movs	r3, #0
 8011072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011074:	2303      	movs	r3, #3
 8011076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011078:	230a      	movs	r3, #10
 801107a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801107c:	f107 0314 	add.w	r3, r7, #20
 8011080:	4619      	mov	r1, r3
 8011082:	4812      	ldr	r0, [pc, #72]	@ (80110cc <HAL_PCD_MspInit+0xa4>)
 8011084:	f7f4 f842 	bl	800510c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011088:	4b0f      	ldr	r3, [pc, #60]	@ (80110c8 <HAL_PCD_MspInit+0xa0>)
 801108a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801108c:	4a0e      	ldr	r2, [pc, #56]	@ (80110c8 <HAL_PCD_MspInit+0xa0>)
 801108e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011092:	6353      	str	r3, [r2, #52]	@ 0x34
 8011094:	2300      	movs	r3, #0
 8011096:	60fb      	str	r3, [r7, #12]
 8011098:	4b0b      	ldr	r3, [pc, #44]	@ (80110c8 <HAL_PCD_MspInit+0xa0>)
 801109a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801109c:	4a0a      	ldr	r2, [pc, #40]	@ (80110c8 <HAL_PCD_MspInit+0xa0>)
 801109e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80110a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80110a4:	4b08      	ldr	r3, [pc, #32]	@ (80110c8 <HAL_PCD_MspInit+0xa0>)
 80110a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80110ac:	60fb      	str	r3, [r7, #12]
 80110ae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80110b0:	2200      	movs	r2, #0
 80110b2:	2105      	movs	r1, #5
 80110b4:	2043      	movs	r0, #67	@ 0x43
 80110b6:	f7f3 fbe1 	bl	800487c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80110ba:	2043      	movs	r0, #67	@ 0x43
 80110bc:	f7f3 fbfa 	bl	80048b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80110c0:	bf00      	nop
 80110c2:	3728      	adds	r7, #40	@ 0x28
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}
 80110c8:	40023800 	.word	0x40023800
 80110cc:	40020000 	.word	0x40020000

080110d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b082      	sub	sp, #8
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80110e4:	4619      	mov	r1, r3
 80110e6:	4610      	mov	r0, r2
 80110e8:	f7fb fbd3 	bl	800c892 <USBD_LL_SetupStage>
}
 80110ec:	bf00      	nop
 80110ee:	3708      	adds	r7, #8
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}

080110f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b082      	sub	sp, #8
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
 80110fc:	460b      	mov	r3, r1
 80110fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011106:	78fa      	ldrb	r2, [r7, #3]
 8011108:	6879      	ldr	r1, [r7, #4]
 801110a:	4613      	mov	r3, r2
 801110c:	00db      	lsls	r3, r3, #3
 801110e:	4413      	add	r3, r2
 8011110:	009b      	lsls	r3, r3, #2
 8011112:	440b      	add	r3, r1
 8011114:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011118:	681a      	ldr	r2, [r3, #0]
 801111a:	78fb      	ldrb	r3, [r7, #3]
 801111c:	4619      	mov	r1, r3
 801111e:	f7fb fc0d 	bl	800c93c <USBD_LL_DataOutStage>
}
 8011122:	bf00      	nop
 8011124:	3708      	adds	r7, #8
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}

0801112a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801112a:	b580      	push	{r7, lr}
 801112c:	b082      	sub	sp, #8
 801112e:	af00      	add	r7, sp, #0
 8011130:	6078      	str	r0, [r7, #4]
 8011132:	460b      	mov	r3, r1
 8011134:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801113c:	78fa      	ldrb	r2, [r7, #3]
 801113e:	6879      	ldr	r1, [r7, #4]
 8011140:	4613      	mov	r3, r2
 8011142:	00db      	lsls	r3, r3, #3
 8011144:	4413      	add	r3, r2
 8011146:	009b      	lsls	r3, r3, #2
 8011148:	440b      	add	r3, r1
 801114a:	3320      	adds	r3, #32
 801114c:	681a      	ldr	r2, [r3, #0]
 801114e:	78fb      	ldrb	r3, [r7, #3]
 8011150:	4619      	mov	r1, r3
 8011152:	f7fb fca6 	bl	800caa2 <USBD_LL_DataInStage>
}
 8011156:	bf00      	nop
 8011158:	3708      	adds	r7, #8
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}

0801115e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801115e:	b580      	push	{r7, lr}
 8011160:	b082      	sub	sp, #8
 8011162:	af00      	add	r7, sp, #0
 8011164:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801116c:	4618      	mov	r0, r3
 801116e:	f7fb fde0 	bl	800cd32 <USBD_LL_SOF>
}
 8011172:	bf00      	nop
 8011174:	3708      	adds	r7, #8
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}

0801117a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801117a:	b580      	push	{r7, lr}
 801117c:	b084      	sub	sp, #16
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011182:	2301      	movs	r3, #1
 8011184:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	79db      	ldrb	r3, [r3, #7]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d102      	bne.n	8011194 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801118e:	2300      	movs	r3, #0
 8011190:	73fb      	strb	r3, [r7, #15]
 8011192:	e008      	b.n	80111a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	79db      	ldrb	r3, [r3, #7]
 8011198:	2b02      	cmp	r3, #2
 801119a:	d102      	bne.n	80111a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801119c:	2301      	movs	r3, #1
 801119e:	73fb      	strb	r3, [r7, #15]
 80111a0:	e001      	b.n	80111a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80111a2:	f7f1 fa0b 	bl	80025bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80111ac:	7bfa      	ldrb	r2, [r7, #15]
 80111ae:	4611      	mov	r1, r2
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7fb fd7a 	bl	800ccaa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80111bc:	4618      	mov	r0, r3
 80111be:	f7fb fd22 	bl	800cc06 <USBD_LL_Reset>
}
 80111c2:	bf00      	nop
 80111c4:	3710      	adds	r7, #16
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
	...

080111cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111cc:	b580      	push	{r7, lr}
 80111ce:	b082      	sub	sp, #8
 80111d0:	af00      	add	r7, sp, #0
 80111d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80111da:	4618      	mov	r0, r3
 80111dc:	f7fb fd75 	bl	800ccca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	687a      	ldr	r2, [r7, #4]
 80111ec:	6812      	ldr	r2, [r2, #0]
 80111ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80111f2:	f043 0301 	orr.w	r3, r3, #1
 80111f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	7adb      	ldrb	r3, [r3, #11]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d005      	beq.n	801120c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011200:	4b04      	ldr	r3, [pc, #16]	@ (8011214 <HAL_PCD_SuspendCallback+0x48>)
 8011202:	691b      	ldr	r3, [r3, #16]
 8011204:	4a03      	ldr	r2, [pc, #12]	@ (8011214 <HAL_PCD_SuspendCallback+0x48>)
 8011206:	f043 0306 	orr.w	r3, r3, #6
 801120a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801120c:	bf00      	nop
 801120e:	3708      	adds	r7, #8
 8011210:	46bd      	mov	sp, r7
 8011212:	bd80      	pop	{r7, pc}
 8011214:	e000ed00 	.word	0xe000ed00

08011218 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b082      	sub	sp, #8
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011226:	4618      	mov	r0, r3
 8011228:	f7fb fd6b 	bl	800cd02 <USBD_LL_Resume>
}
 801122c:	bf00      	nop
 801122e:	3708      	adds	r7, #8
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}

08011234 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b082      	sub	sp, #8
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
 801123c:	460b      	mov	r3, r1
 801123e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011246:	78fa      	ldrb	r2, [r7, #3]
 8011248:	4611      	mov	r1, r2
 801124a:	4618      	mov	r0, r3
 801124c:	f7fb fdc3 	bl	800cdd6 <USBD_LL_IsoOUTIncomplete>
}
 8011250:	bf00      	nop
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	460b      	mov	r3, r1
 8011262:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801126a:	78fa      	ldrb	r2, [r7, #3]
 801126c:	4611      	mov	r1, r2
 801126e:	4618      	mov	r0, r3
 8011270:	f7fb fd7f 	bl	800cd72 <USBD_LL_IsoINIncomplete>
}
 8011274:	bf00      	nop
 8011276:	3708      	adds	r7, #8
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}

0801127c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b082      	sub	sp, #8
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801128a:	4618      	mov	r0, r3
 801128c:	f7fb fdd5 	bl	800ce3a <USBD_LL_DevConnected>
}
 8011290:	bf00      	nop
 8011292:	3708      	adds	r7, #8
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}

08011298 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b082      	sub	sp, #8
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7fb fdd2 	bl	800ce50 <USBD_LL_DevDisconnected>
}
 80112ac:	bf00      	nop
 80112ae:	3708      	adds	r7, #8
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}

080112b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	781b      	ldrb	r3, [r3, #0]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d13c      	bne.n	801133e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80112c4:	4a20      	ldr	r2, [pc, #128]	@ (8011348 <USBD_LL_Init+0x94>)
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	4a1e      	ldr	r2, [pc, #120]	@ (8011348 <USBD_LL_Init+0x94>)
 80112d0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80112d4:	4b1c      	ldr	r3, [pc, #112]	@ (8011348 <USBD_LL_Init+0x94>)
 80112d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80112da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80112dc:	4b1a      	ldr	r3, [pc, #104]	@ (8011348 <USBD_LL_Init+0x94>)
 80112de:	2204      	movs	r2, #4
 80112e0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80112e2:	4b19      	ldr	r3, [pc, #100]	@ (8011348 <USBD_LL_Init+0x94>)
 80112e4:	2202      	movs	r2, #2
 80112e6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80112e8:	4b17      	ldr	r3, [pc, #92]	@ (8011348 <USBD_LL_Init+0x94>)
 80112ea:	2200      	movs	r2, #0
 80112ec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80112ee:	4b16      	ldr	r3, [pc, #88]	@ (8011348 <USBD_LL_Init+0x94>)
 80112f0:	2202      	movs	r2, #2
 80112f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80112f4:	4b14      	ldr	r3, [pc, #80]	@ (8011348 <USBD_LL_Init+0x94>)
 80112f6:	2200      	movs	r2, #0
 80112f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80112fa:	4b13      	ldr	r3, [pc, #76]	@ (8011348 <USBD_LL_Init+0x94>)
 80112fc:	2200      	movs	r2, #0
 80112fe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011300:	4b11      	ldr	r3, [pc, #68]	@ (8011348 <USBD_LL_Init+0x94>)
 8011302:	2200      	movs	r2, #0
 8011304:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011306:	4b10      	ldr	r3, [pc, #64]	@ (8011348 <USBD_LL_Init+0x94>)
 8011308:	2200      	movs	r2, #0
 801130a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801130c:	4b0e      	ldr	r3, [pc, #56]	@ (8011348 <USBD_LL_Init+0x94>)
 801130e:	2200      	movs	r2, #0
 8011310:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011312:	480d      	ldr	r0, [pc, #52]	@ (8011348 <USBD_LL_Init+0x94>)
 8011314:	f7f4 f9f4 	bl	8005700 <HAL_PCD_Init>
 8011318:	4603      	mov	r3, r0
 801131a:	2b00      	cmp	r3, #0
 801131c:	d001      	beq.n	8011322 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801131e:	f7f1 f94d 	bl	80025bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011322:	2180      	movs	r1, #128	@ 0x80
 8011324:	4808      	ldr	r0, [pc, #32]	@ (8011348 <USBD_LL_Init+0x94>)
 8011326:	f7f5 fc20 	bl	8006b6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801132a:	2240      	movs	r2, #64	@ 0x40
 801132c:	2100      	movs	r1, #0
 801132e:	4806      	ldr	r0, [pc, #24]	@ (8011348 <USBD_LL_Init+0x94>)
 8011330:	f7f5 fbd4 	bl	8006adc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011334:	2280      	movs	r2, #128	@ 0x80
 8011336:	2101      	movs	r1, #1
 8011338:	4803      	ldr	r0, [pc, #12]	@ (8011348 <USBD_LL_Init+0x94>)
 801133a:	f7f5 fbcf 	bl	8006adc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801133e:	2300      	movs	r3, #0
}
 8011340:	4618      	mov	r0, r3
 8011342:	3708      	adds	r7, #8
 8011344:	46bd      	mov	sp, r7
 8011346:	bd80      	pop	{r7, pc}
 8011348:	20011348 	.word	0x20011348

0801134c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b084      	sub	sp, #16
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011354:	2300      	movs	r3, #0
 8011356:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011358:	2300      	movs	r3, #0
 801135a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011362:	4618      	mov	r0, r3
 8011364:	f7f4 fadb 	bl	800591e <HAL_PCD_Start>
 8011368:	4603      	mov	r3, r0
 801136a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801136c:	7bfb      	ldrb	r3, [r7, #15]
 801136e:	4618      	mov	r0, r3
 8011370:	f000 f942 	bl	80115f8 <USBD_Get_USB_Status>
 8011374:	4603      	mov	r3, r0
 8011376:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011378:	7bbb      	ldrb	r3, [r7, #14]
}
 801137a:	4618      	mov	r0, r3
 801137c:	3710      	adds	r7, #16
 801137e:	46bd      	mov	sp, r7
 8011380:	bd80      	pop	{r7, pc}

08011382 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011382:	b580      	push	{r7, lr}
 8011384:	b084      	sub	sp, #16
 8011386:	af00      	add	r7, sp, #0
 8011388:	6078      	str	r0, [r7, #4]
 801138a:	4608      	mov	r0, r1
 801138c:	4611      	mov	r1, r2
 801138e:	461a      	mov	r2, r3
 8011390:	4603      	mov	r3, r0
 8011392:	70fb      	strb	r3, [r7, #3]
 8011394:	460b      	mov	r3, r1
 8011396:	70bb      	strb	r3, [r7, #2]
 8011398:	4613      	mov	r3, r2
 801139a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801139c:	2300      	movs	r3, #0
 801139e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113a0:	2300      	movs	r3, #0
 80113a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80113aa:	78bb      	ldrb	r3, [r7, #2]
 80113ac:	883a      	ldrh	r2, [r7, #0]
 80113ae:	78f9      	ldrb	r1, [r7, #3]
 80113b0:	f7f4 ffaf 	bl	8006312 <HAL_PCD_EP_Open>
 80113b4:	4603      	mov	r3, r0
 80113b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113b8:	7bfb      	ldrb	r3, [r7, #15]
 80113ba:	4618      	mov	r0, r3
 80113bc:	f000 f91c 	bl	80115f8 <USBD_Get_USB_Status>
 80113c0:	4603      	mov	r3, r0
 80113c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80113c6:	4618      	mov	r0, r3
 80113c8:	3710      	adds	r7, #16
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd80      	pop	{r7, pc}

080113ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113ce:	b580      	push	{r7, lr}
 80113d0:	b084      	sub	sp, #16
 80113d2:	af00      	add	r7, sp, #0
 80113d4:	6078      	str	r0, [r7, #4]
 80113d6:	460b      	mov	r3, r1
 80113d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113da:	2300      	movs	r3, #0
 80113dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113de:	2300      	movs	r3, #0
 80113e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80113e8:	78fa      	ldrb	r2, [r7, #3]
 80113ea:	4611      	mov	r1, r2
 80113ec:	4618      	mov	r0, r3
 80113ee:	f7f4 fffa 	bl	80063e6 <HAL_PCD_EP_Close>
 80113f2:	4603      	mov	r3, r0
 80113f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113f6:	7bfb      	ldrb	r3, [r7, #15]
 80113f8:	4618      	mov	r0, r3
 80113fa:	f000 f8fd 	bl	80115f8 <USBD_Get_USB_Status>
 80113fe:	4603      	mov	r3, r0
 8011400:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011402:	7bbb      	ldrb	r3, [r7, #14]
}
 8011404:	4618      	mov	r0, r3
 8011406:	3710      	adds	r7, #16
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}

0801140c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b084      	sub	sp, #16
 8011410:	af00      	add	r7, sp, #0
 8011412:	6078      	str	r0, [r7, #4]
 8011414:	460b      	mov	r3, r1
 8011416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011418:	2300      	movs	r3, #0
 801141a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801141c:	2300      	movs	r3, #0
 801141e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011426:	78fa      	ldrb	r2, [r7, #3]
 8011428:	4611      	mov	r1, r2
 801142a:	4618      	mov	r0, r3
 801142c:	f7f5 f8b2 	bl	8006594 <HAL_PCD_EP_SetStall>
 8011430:	4603      	mov	r3, r0
 8011432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011434:	7bfb      	ldrb	r3, [r7, #15]
 8011436:	4618      	mov	r0, r3
 8011438:	f000 f8de 	bl	80115f8 <USBD_Get_USB_Status>
 801143c:	4603      	mov	r3, r0
 801143e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011440:	7bbb      	ldrb	r3, [r7, #14]
}
 8011442:	4618      	mov	r0, r3
 8011444:	3710      	adds	r7, #16
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}

0801144a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801144a:	b580      	push	{r7, lr}
 801144c:	b084      	sub	sp, #16
 801144e:	af00      	add	r7, sp, #0
 8011450:	6078      	str	r0, [r7, #4]
 8011452:	460b      	mov	r3, r1
 8011454:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011456:	2300      	movs	r3, #0
 8011458:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801145a:	2300      	movs	r3, #0
 801145c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011464:	78fa      	ldrb	r2, [r7, #3]
 8011466:	4611      	mov	r1, r2
 8011468:	4618      	mov	r0, r3
 801146a:	f7f5 f8f6 	bl	800665a <HAL_PCD_EP_ClrStall>
 801146e:	4603      	mov	r3, r0
 8011470:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011472:	7bfb      	ldrb	r3, [r7, #15]
 8011474:	4618      	mov	r0, r3
 8011476:	f000 f8bf 	bl	80115f8 <USBD_Get_USB_Status>
 801147a:	4603      	mov	r3, r0
 801147c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801147e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011480:	4618      	mov	r0, r3
 8011482:	3710      	adds	r7, #16
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}

08011488 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011488:	b480      	push	{r7}
 801148a:	b085      	sub	sp, #20
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
 8011490:	460b      	mov	r3, r1
 8011492:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801149a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801149c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	da0b      	bge.n	80114bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80114a4:	78fb      	ldrb	r3, [r7, #3]
 80114a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80114aa:	68f9      	ldr	r1, [r7, #12]
 80114ac:	4613      	mov	r3, r2
 80114ae:	00db      	lsls	r3, r3, #3
 80114b0:	4413      	add	r3, r2
 80114b2:	009b      	lsls	r3, r3, #2
 80114b4:	440b      	add	r3, r1
 80114b6:	3316      	adds	r3, #22
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	e00b      	b.n	80114d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80114bc:	78fb      	ldrb	r3, [r7, #3]
 80114be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80114c2:	68f9      	ldr	r1, [r7, #12]
 80114c4:	4613      	mov	r3, r2
 80114c6:	00db      	lsls	r3, r3, #3
 80114c8:	4413      	add	r3, r2
 80114ca:	009b      	lsls	r3, r3, #2
 80114cc:	440b      	add	r3, r1
 80114ce:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80114d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80114d4:	4618      	mov	r0, r3
 80114d6:	3714      	adds	r7, #20
 80114d8:	46bd      	mov	sp, r7
 80114da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114de:	4770      	bx	lr

080114e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b084      	sub	sp, #16
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
 80114e8:	460b      	mov	r3, r1
 80114ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114ec:	2300      	movs	r3, #0
 80114ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114f0:	2300      	movs	r3, #0
 80114f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80114fa:	78fa      	ldrb	r2, [r7, #3]
 80114fc:	4611      	mov	r1, r2
 80114fe:	4618      	mov	r0, r3
 8011500:	f7f4 fee3 	bl	80062ca <HAL_PCD_SetAddress>
 8011504:	4603      	mov	r3, r0
 8011506:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011508:	7bfb      	ldrb	r3, [r7, #15]
 801150a:	4618      	mov	r0, r3
 801150c:	f000 f874 	bl	80115f8 <USBD_Get_USB_Status>
 8011510:	4603      	mov	r3, r0
 8011512:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011514:	7bbb      	ldrb	r3, [r7, #14]
}
 8011516:	4618      	mov	r0, r3
 8011518:	3710      	adds	r7, #16
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}

0801151e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801151e:	b580      	push	{r7, lr}
 8011520:	b086      	sub	sp, #24
 8011522:	af00      	add	r7, sp, #0
 8011524:	60f8      	str	r0, [r7, #12]
 8011526:	607a      	str	r2, [r7, #4]
 8011528:	603b      	str	r3, [r7, #0]
 801152a:	460b      	mov	r3, r1
 801152c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801152e:	2300      	movs	r3, #0
 8011530:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011532:	2300      	movs	r3, #0
 8011534:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801153c:	7af9      	ldrb	r1, [r7, #11]
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	687a      	ldr	r2, [r7, #4]
 8011542:	f7f4 ffed 	bl	8006520 <HAL_PCD_EP_Transmit>
 8011546:	4603      	mov	r3, r0
 8011548:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801154a:	7dfb      	ldrb	r3, [r7, #23]
 801154c:	4618      	mov	r0, r3
 801154e:	f000 f853 	bl	80115f8 <USBD_Get_USB_Status>
 8011552:	4603      	mov	r3, r0
 8011554:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011556:	7dbb      	ldrb	r3, [r7, #22]
}
 8011558:	4618      	mov	r0, r3
 801155a:	3718      	adds	r7, #24
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}

08011560 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b086      	sub	sp, #24
 8011564:	af00      	add	r7, sp, #0
 8011566:	60f8      	str	r0, [r7, #12]
 8011568:	607a      	str	r2, [r7, #4]
 801156a:	603b      	str	r3, [r7, #0]
 801156c:	460b      	mov	r3, r1
 801156e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011570:	2300      	movs	r3, #0
 8011572:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011574:	2300      	movs	r3, #0
 8011576:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801157e:	7af9      	ldrb	r1, [r7, #11]
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	687a      	ldr	r2, [r7, #4]
 8011584:	f7f4 ff79 	bl	800647a <HAL_PCD_EP_Receive>
 8011588:	4603      	mov	r3, r0
 801158a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801158c:	7dfb      	ldrb	r3, [r7, #23]
 801158e:	4618      	mov	r0, r3
 8011590:	f000 f832 	bl	80115f8 <USBD_Get_USB_Status>
 8011594:	4603      	mov	r3, r0
 8011596:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011598:	7dbb      	ldrb	r3, [r7, #22]
}
 801159a:	4618      	mov	r0, r3
 801159c:	3718      	adds	r7, #24
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}

080115a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115a2:	b580      	push	{r7, lr}
 80115a4:	b082      	sub	sp, #8
 80115a6:	af00      	add	r7, sp, #0
 80115a8:	6078      	str	r0, [r7, #4]
 80115aa:	460b      	mov	r3, r1
 80115ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80115b4:	78fa      	ldrb	r2, [r7, #3]
 80115b6:	4611      	mov	r1, r2
 80115b8:	4618      	mov	r0, r3
 80115ba:	f7f4 ff99 	bl	80064f0 <HAL_PCD_EP_GetRxCount>
 80115be:	4603      	mov	r3, r0
}
 80115c0:	4618      	mov	r0, r3
 80115c2:	3708      	adds	r7, #8
 80115c4:	46bd      	mov	sp, r7
 80115c6:	bd80      	pop	{r7, pc}

080115c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80115c8:	b480      	push	{r7}
 80115ca:	b083      	sub	sp, #12
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80115d0:	4b03      	ldr	r3, [pc, #12]	@ (80115e0 <USBD_static_malloc+0x18>)
}
 80115d2:	4618      	mov	r0, r3
 80115d4:	370c      	adds	r7, #12
 80115d6:	46bd      	mov	sp, r7
 80115d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115dc:	4770      	bx	lr
 80115de:	bf00      	nop
 80115e0:	2001182c 	.word	0x2001182c

080115e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80115e4:	b480      	push	{r7}
 80115e6:	b083      	sub	sp, #12
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]

}
 80115ec:	bf00      	nop
 80115ee:	370c      	adds	r7, #12
 80115f0:	46bd      	mov	sp, r7
 80115f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f6:	4770      	bx	lr

080115f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80115f8:	b480      	push	{r7}
 80115fa:	b085      	sub	sp, #20
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	4603      	mov	r3, r0
 8011600:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011602:	2300      	movs	r3, #0
 8011604:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011606:	79fb      	ldrb	r3, [r7, #7]
 8011608:	2b03      	cmp	r3, #3
 801160a:	d817      	bhi.n	801163c <USBD_Get_USB_Status+0x44>
 801160c:	a201      	add	r2, pc, #4	@ (adr r2, 8011614 <USBD_Get_USB_Status+0x1c>)
 801160e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011612:	bf00      	nop
 8011614:	08011625 	.word	0x08011625
 8011618:	0801162b 	.word	0x0801162b
 801161c:	08011631 	.word	0x08011631
 8011620:	08011637 	.word	0x08011637
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011624:	2300      	movs	r3, #0
 8011626:	73fb      	strb	r3, [r7, #15]
    break;
 8011628:	e00b      	b.n	8011642 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801162a:	2303      	movs	r3, #3
 801162c:	73fb      	strb	r3, [r7, #15]
    break;
 801162e:	e008      	b.n	8011642 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011630:	2301      	movs	r3, #1
 8011632:	73fb      	strb	r3, [r7, #15]
    break;
 8011634:	e005      	b.n	8011642 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011636:	2303      	movs	r3, #3
 8011638:	73fb      	strb	r3, [r7, #15]
    break;
 801163a:	e002      	b.n	8011642 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801163c:	2303      	movs	r3, #3
 801163e:	73fb      	strb	r3, [r7, #15]
    break;
 8011640:	bf00      	nop
  }
  return usb_status;
 8011642:	7bfb      	ldrb	r3, [r7, #15]
}
 8011644:	4618      	mov	r0, r3
 8011646:	3714      	adds	r7, #20
 8011648:	46bd      	mov	sp, r7
 801164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164e:	4770      	bx	lr

08011650 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8011650:	4b04      	ldr	r3, [pc, #16]	@ (8011664 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8011652:	681a      	ldr	r2, [r3, #0]
 8011654:	b10a      	cbz	r2, 801165a <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 8011656:	4803      	ldr	r0, [pc, #12]	@ (8011664 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 8011658:	4770      	bx	lr
 801165a:	4a03      	ldr	r2, [pc, #12]	@ (8011668 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 801165c:	4801      	ldr	r0, [pc, #4]	@ (8011664 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 801165e:	6812      	ldr	r2, [r2, #0]
 8011660:	601a      	str	r2, [r3, #0]
 8011662:	4770      	bx	lr
 8011664:	20000114 	.word	0x20000114
 8011668:	200002c8 	.word	0x200002c8

0801166c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 801166c:	4a02      	ldr	r2, [pc, #8]	@ (8011678 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 801166e:	4b03      	ldr	r3, [pc, #12]	@ (801167c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 8011670:	6812      	ldr	r2, [r2, #0]
 8011672:	601a      	str	r2, [r3, #0]
 8011674:	4770      	bx	lr
 8011676:	bf00      	nop
 8011678:	200002c8 	.word	0x200002c8
 801167c:	20000114 	.word	0x20000114

08011680 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 8011680:	f004 bb54 	b.w	8015d2c <geometry_msgs__msg__Twist__init>

08011684 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 8011684:	f004 bb76 	b.w	8015d74 <geometry_msgs__msg__Twist__fini>

08011688 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 8011688:	b510      	push	{r4, lr}
 801168a:	f000 f819 	bl	80116c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 801168e:	4c07      	ldr	r4, [pc, #28]	@ (80116ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 8011690:	60e0      	str	r0, [r4, #12]
 8011692:	f000 f815 	bl	80116c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011696:	4b06      	ldr	r3, [pc, #24]	@ (80116b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 8011698:	64a0      	str	r0, [r4, #72]	@ 0x48
 801169a:	681a      	ldr	r2, [r3, #0]
 801169c:	b10a      	cbz	r2, 80116a2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 801169e:	4804      	ldr	r0, [pc, #16]	@ (80116b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 80116a0:	bd10      	pop	{r4, pc}
 80116a2:	4a04      	ldr	r2, [pc, #16]	@ (80116b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 80116a4:	4802      	ldr	r0, [pc, #8]	@ (80116b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 80116a6:	6812      	ldr	r2, [r2, #0]
 80116a8:	601a      	str	r2, [r3, #0]
 80116aa:	bd10      	pop	{r4, pc}
 80116ac:	20000120 	.word	0x20000120
 80116b0:	20000198 	.word	0x20000198
 80116b4:	200002cc 	.word	0x200002cc

080116b8 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 80116b8:	f004 bb68 	b.w	8015d8c <geometry_msgs__msg__Vector3__init>

080116bc <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 80116bc:	f004 bb6a 	b.w	8015d94 <geometry_msgs__msg__Vector3__fini>

080116c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 80116c0:	4b04      	ldr	r3, [pc, #16]	@ (80116d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 80116c2:	681a      	ldr	r2, [r3, #0]
 80116c4:	b10a      	cbz	r2, 80116ca <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 80116c6:	4803      	ldr	r0, [pc, #12]	@ (80116d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 80116c8:	4770      	bx	lr
 80116ca:	4a03      	ldr	r2, [pc, #12]	@ (80116d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 80116cc:	4801      	ldr	r0, [pc, #4]	@ (80116d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 80116ce:	6812      	ldr	r2, [r2, #0]
 80116d0:	601a      	str	r2, [r3, #0]
 80116d2:	4770      	bx	lr
 80116d4:	20000258 	.word	0x20000258
 80116d8:	200002cc 	.word	0x200002cc

080116dc <get_serialized_size_geometry_msgs__msg__Twist>:
 80116dc:	b570      	push	{r4, r5, r6, lr}
 80116de:	4604      	mov	r4, r0
 80116e0:	b148      	cbz	r0, 80116f6 <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 80116e2:	460d      	mov	r5, r1
 80116e4:	f000 f860 	bl	80117a8 <get_serialized_size_geometry_msgs__msg__Vector3>
 80116e8:	4606      	mov	r6, r0
 80116ea:	1829      	adds	r1, r5, r0
 80116ec:	f104 0018 	add.w	r0, r4, #24
 80116f0:	f000 f85a 	bl	80117a8 <get_serialized_size_geometry_msgs__msg__Vector3>
 80116f4:	4430      	add	r0, r6
 80116f6:	bd70      	pop	{r4, r5, r6, pc}

080116f8 <_Twist__cdr_deserialize>:
 80116f8:	b570      	push	{r4, r5, r6, lr}
 80116fa:	460c      	mov	r4, r1
 80116fc:	b189      	cbz	r1, 8011722 <_Twist__cdr_deserialize+0x2a>
 80116fe:	4605      	mov	r5, r0
 8011700:	f000 f8de 	bl	80118c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011704:	6843      	ldr	r3, [r0, #4]
 8011706:	4621      	mov	r1, r4
 8011708:	68db      	ldr	r3, [r3, #12]
 801170a:	4628      	mov	r0, r5
 801170c:	4798      	blx	r3
 801170e:	f000 f8d7 	bl	80118c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011712:	6843      	ldr	r3, [r0, #4]
 8011714:	f104 0118 	add.w	r1, r4, #24
 8011718:	4628      	mov	r0, r5
 801171a:	68db      	ldr	r3, [r3, #12]
 801171c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011720:	4718      	bx	r3
 8011722:	4608      	mov	r0, r1
 8011724:	bd70      	pop	{r4, r5, r6, pc}
 8011726:	bf00      	nop

08011728 <_Twist__cdr_serialize>:
 8011728:	b510      	push	{r4, lr}
 801172a:	b082      	sub	sp, #8
 801172c:	9101      	str	r1, [sp, #4]
 801172e:	b190      	cbz	r0, 8011756 <_Twist__cdr_serialize+0x2e>
 8011730:	4604      	mov	r4, r0
 8011732:	f000 f8c5 	bl	80118c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011736:	6843      	ldr	r3, [r0, #4]
 8011738:	9901      	ldr	r1, [sp, #4]
 801173a:	689b      	ldr	r3, [r3, #8]
 801173c:	4620      	mov	r0, r4
 801173e:	4798      	blx	r3
 8011740:	f000 f8be 	bl	80118c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 8011744:	6843      	ldr	r3, [r0, #4]
 8011746:	9901      	ldr	r1, [sp, #4]
 8011748:	689b      	ldr	r3, [r3, #8]
 801174a:	f104 0018 	add.w	r0, r4, #24
 801174e:	b002      	add	sp, #8
 8011750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011754:	4718      	bx	r3
 8011756:	b002      	add	sp, #8
 8011758:	bd10      	pop	{r4, pc}
 801175a:	bf00      	nop

0801175c <_Twist__get_serialized_size>:
 801175c:	b538      	push	{r3, r4, r5, lr}
 801175e:	4604      	mov	r4, r0
 8011760:	b148      	cbz	r0, 8011776 <_Twist__get_serialized_size+0x1a>
 8011762:	2100      	movs	r1, #0
 8011764:	f000 f820 	bl	80117a8 <get_serialized_size_geometry_msgs__msg__Vector3>
 8011768:	4605      	mov	r5, r0
 801176a:	4601      	mov	r1, r0
 801176c:	f104 0018 	add.w	r0, r4, #24
 8011770:	f000 f81a 	bl	80117a8 <get_serialized_size_geometry_msgs__msg__Vector3>
 8011774:	4428      	add	r0, r5
 8011776:	bd38      	pop	{r3, r4, r5, pc}

08011778 <_Twist__max_serialized_size>:
 8011778:	b510      	push	{r4, lr}
 801177a:	b082      	sub	sp, #8
 801177c:	2301      	movs	r3, #1
 801177e:	2100      	movs	r1, #0
 8011780:	f10d 0007 	add.w	r0, sp, #7
 8011784:	f88d 3007 	strb.w	r3, [sp, #7]
 8011788:	f000 f87e 	bl	8011888 <max_serialized_size_geometry_msgs__msg__Vector3>
 801178c:	4604      	mov	r4, r0
 801178e:	4601      	mov	r1, r0
 8011790:	f10d 0007 	add.w	r0, sp, #7
 8011794:	f000 f878 	bl	8011888 <max_serialized_size_geometry_msgs__msg__Vector3>
 8011798:	4420      	add	r0, r4
 801179a:	b002      	add	sp, #8
 801179c:	bd10      	pop	{r4, pc}
 801179e:	bf00      	nop

080117a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 80117a0:	4800      	ldr	r0, [pc, #0]	@ (80117a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 80117a2:	4770      	bx	lr
 80117a4:	20000264 	.word	0x20000264

080117a8 <get_serialized_size_geometry_msgs__msg__Vector3>:
 80117a8:	b1b8      	cbz	r0, 80117da <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 80117aa:	b538      	push	{r3, r4, r5, lr}
 80117ac:	460d      	mov	r5, r1
 80117ae:	4628      	mov	r0, r5
 80117b0:	2108      	movs	r1, #8
 80117b2:	f001 fdeb 	bl	801338c <ucdr_alignment>
 80117b6:	f105 0308 	add.w	r3, r5, #8
 80117ba:	181c      	adds	r4, r3, r0
 80117bc:	2108      	movs	r1, #8
 80117be:	4620      	mov	r0, r4
 80117c0:	f001 fde4 	bl	801338c <ucdr_alignment>
 80117c4:	3008      	adds	r0, #8
 80117c6:	4404      	add	r4, r0
 80117c8:	2108      	movs	r1, #8
 80117ca:	4620      	mov	r0, r4
 80117cc:	f001 fdde 	bl	801338c <ucdr_alignment>
 80117d0:	f1c5 0508 	rsb	r5, r5, #8
 80117d4:	4428      	add	r0, r5
 80117d6:	4420      	add	r0, r4
 80117d8:	bd38      	pop	{r3, r4, r5, pc}
 80117da:	4770      	bx	lr

080117dc <_Vector3__cdr_deserialize>:
 80117dc:	b538      	push	{r3, r4, r5, lr}
 80117de:	460c      	mov	r4, r1
 80117e0:	b171      	cbz	r1, 8011800 <_Vector3__cdr_deserialize+0x24>
 80117e2:	4605      	mov	r5, r0
 80117e4:	f001 fcb4 	bl	8013150 <ucdr_deserialize_double>
 80117e8:	f104 0108 	add.w	r1, r4, #8
 80117ec:	4628      	mov	r0, r5
 80117ee:	f001 fcaf 	bl	8013150 <ucdr_deserialize_double>
 80117f2:	f104 0110 	add.w	r1, r4, #16
 80117f6:	4628      	mov	r0, r5
 80117f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117fc:	f001 bca8 	b.w	8013150 <ucdr_deserialize_double>
 8011800:	4608      	mov	r0, r1
 8011802:	bd38      	pop	{r3, r4, r5, pc}

08011804 <_Vector3__cdr_serialize>:
 8011804:	b198      	cbz	r0, 801182e <_Vector3__cdr_serialize+0x2a>
 8011806:	b538      	push	{r3, r4, r5, lr}
 8011808:	ed90 0b00 	vldr	d0, [r0]
 801180c:	460d      	mov	r5, r1
 801180e:	4604      	mov	r4, r0
 8011810:	4608      	mov	r0, r1
 8011812:	f001 fbcd 	bl	8012fb0 <ucdr_serialize_double>
 8011816:	ed94 0b02 	vldr	d0, [r4, #8]
 801181a:	4628      	mov	r0, r5
 801181c:	f001 fbc8 	bl	8012fb0 <ucdr_serialize_double>
 8011820:	ed94 0b04 	vldr	d0, [r4, #16]
 8011824:	4628      	mov	r0, r5
 8011826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801182a:	f001 bbc1 	b.w	8012fb0 <ucdr_serialize_double>
 801182e:	4770      	bx	lr

08011830 <_Vector3__get_serialized_size>:
 8011830:	b198      	cbz	r0, 801185a <_Vector3__get_serialized_size+0x2a>
 8011832:	b510      	push	{r4, lr}
 8011834:	2108      	movs	r1, #8
 8011836:	2000      	movs	r0, #0
 8011838:	f001 fda8 	bl	801338c <ucdr_alignment>
 801183c:	f100 0408 	add.w	r4, r0, #8
 8011840:	2108      	movs	r1, #8
 8011842:	4620      	mov	r0, r4
 8011844:	f001 fda2 	bl	801338c <ucdr_alignment>
 8011848:	3008      	adds	r0, #8
 801184a:	4404      	add	r4, r0
 801184c:	2108      	movs	r1, #8
 801184e:	4620      	mov	r0, r4
 8011850:	f001 fd9c 	bl	801338c <ucdr_alignment>
 8011854:	3008      	adds	r0, #8
 8011856:	4420      	add	r0, r4
 8011858:	bd10      	pop	{r4, pc}
 801185a:	4770      	bx	lr

0801185c <_Vector3__max_serialized_size>:
 801185c:	b538      	push	{r3, r4, r5, lr}
 801185e:	2108      	movs	r1, #8
 8011860:	2000      	movs	r0, #0
 8011862:	f001 fd93 	bl	801338c <ucdr_alignment>
 8011866:	f100 0508 	add.w	r5, r0, #8
 801186a:	2108      	movs	r1, #8
 801186c:	4628      	mov	r0, r5
 801186e:	f001 fd8d 	bl	801338c <ucdr_alignment>
 8011872:	f100 0408 	add.w	r4, r0, #8
 8011876:	442c      	add	r4, r5
 8011878:	2108      	movs	r1, #8
 801187a:	4620      	mov	r0, r4
 801187c:	f001 fd86 	bl	801338c <ucdr_alignment>
 8011880:	3008      	adds	r0, #8
 8011882:	4420      	add	r0, r4
 8011884:	bd38      	pop	{r3, r4, r5, pc}
 8011886:	bf00      	nop

08011888 <max_serialized_size_geometry_msgs__msg__Vector3>:
 8011888:	b570      	push	{r4, r5, r6, lr}
 801188a:	2301      	movs	r3, #1
 801188c:	460c      	mov	r4, r1
 801188e:	7003      	strb	r3, [r0, #0]
 8011890:	2108      	movs	r1, #8
 8011892:	4620      	mov	r0, r4
 8011894:	f001 fd7a 	bl	801338c <ucdr_alignment>
 8011898:	f104 0508 	add.w	r5, r4, #8
 801189c:	1946      	adds	r6, r0, r5
 801189e:	2108      	movs	r1, #8
 80118a0:	4630      	mov	r0, r6
 80118a2:	f001 fd73 	bl	801338c <ucdr_alignment>
 80118a6:	f100 0508 	add.w	r5, r0, #8
 80118aa:	4435      	add	r5, r6
 80118ac:	2108      	movs	r1, #8
 80118ae:	4628      	mov	r0, r5
 80118b0:	f001 fd6c 	bl	801338c <ucdr_alignment>
 80118b4:	f1c4 0408 	rsb	r4, r4, #8
 80118b8:	4420      	add	r0, r4
 80118ba:	4428      	add	r0, r5
 80118bc:	bd70      	pop	{r4, r5, r6, pc}
 80118be:	bf00      	nop

080118c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 80118c0:	4800      	ldr	r0, [pc, #0]	@ (80118c4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 80118c2:	4770      	bx	lr
 80118c4:	2000028c 	.word	0x2000028c

080118c8 <ucdr_serialize_bool>:
 80118c8:	b538      	push	{r3, r4, r5, lr}
 80118ca:	460d      	mov	r5, r1
 80118cc:	2101      	movs	r1, #1
 80118ce:	4604      	mov	r4, r0
 80118d0:	f001 fd10 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 80118d4:	b148      	cbz	r0, 80118ea <ucdr_serialize_bool+0x22>
 80118d6:	68a3      	ldr	r3, [r4, #8]
 80118d8:	701d      	strb	r5, [r3, #0]
 80118da:	68a2      	ldr	r2, [r4, #8]
 80118dc:	6923      	ldr	r3, [r4, #16]
 80118de:	2101      	movs	r1, #1
 80118e0:	440a      	add	r2, r1
 80118e2:	440b      	add	r3, r1
 80118e4:	60a2      	str	r2, [r4, #8]
 80118e6:	6123      	str	r3, [r4, #16]
 80118e8:	7561      	strb	r1, [r4, #21]
 80118ea:	7da0      	ldrb	r0, [r4, #22]
 80118ec:	f080 0001 	eor.w	r0, r0, #1
 80118f0:	bd38      	pop	{r3, r4, r5, pc}
 80118f2:	bf00      	nop

080118f4 <ucdr_deserialize_bool>:
 80118f4:	b538      	push	{r3, r4, r5, lr}
 80118f6:	460d      	mov	r5, r1
 80118f8:	2101      	movs	r1, #1
 80118fa:	4604      	mov	r4, r0
 80118fc:	f001 fcfa 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8011900:	b160      	cbz	r0, 801191c <ucdr_deserialize_bool+0x28>
 8011902:	68a2      	ldr	r2, [r4, #8]
 8011904:	6923      	ldr	r3, [r4, #16]
 8011906:	f812 1b01 	ldrb.w	r1, [r2], #1
 801190a:	3900      	subs	r1, #0
 801190c:	bf18      	it	ne
 801190e:	2101      	movne	r1, #1
 8011910:	7029      	strb	r1, [r5, #0]
 8011912:	3301      	adds	r3, #1
 8011914:	2101      	movs	r1, #1
 8011916:	60a2      	str	r2, [r4, #8]
 8011918:	6123      	str	r3, [r4, #16]
 801191a:	7561      	strb	r1, [r4, #21]
 801191c:	7da0      	ldrb	r0, [r4, #22]
 801191e:	f080 0001 	eor.w	r0, r0, #1
 8011922:	bd38      	pop	{r3, r4, r5, pc}

08011924 <ucdr_serialize_uint8_t>:
 8011924:	b538      	push	{r3, r4, r5, lr}
 8011926:	460d      	mov	r5, r1
 8011928:	2101      	movs	r1, #1
 801192a:	4604      	mov	r4, r0
 801192c:	f001 fce2 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8011930:	b148      	cbz	r0, 8011946 <ucdr_serialize_uint8_t+0x22>
 8011932:	68a3      	ldr	r3, [r4, #8]
 8011934:	701d      	strb	r5, [r3, #0]
 8011936:	68a2      	ldr	r2, [r4, #8]
 8011938:	6923      	ldr	r3, [r4, #16]
 801193a:	2101      	movs	r1, #1
 801193c:	440a      	add	r2, r1
 801193e:	440b      	add	r3, r1
 8011940:	60a2      	str	r2, [r4, #8]
 8011942:	6123      	str	r3, [r4, #16]
 8011944:	7561      	strb	r1, [r4, #21]
 8011946:	7da0      	ldrb	r0, [r4, #22]
 8011948:	f080 0001 	eor.w	r0, r0, #1
 801194c:	bd38      	pop	{r3, r4, r5, pc}
 801194e:	bf00      	nop

08011950 <ucdr_deserialize_uint8_t>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	460d      	mov	r5, r1
 8011954:	2101      	movs	r1, #1
 8011956:	4604      	mov	r4, r0
 8011958:	f001 fccc 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 801195c:	b150      	cbz	r0, 8011974 <ucdr_deserialize_uint8_t+0x24>
 801195e:	68a3      	ldr	r3, [r4, #8]
 8011960:	781b      	ldrb	r3, [r3, #0]
 8011962:	702b      	strb	r3, [r5, #0]
 8011964:	68a2      	ldr	r2, [r4, #8]
 8011966:	6923      	ldr	r3, [r4, #16]
 8011968:	2101      	movs	r1, #1
 801196a:	440a      	add	r2, r1
 801196c:	440b      	add	r3, r1
 801196e:	60a2      	str	r2, [r4, #8]
 8011970:	6123      	str	r3, [r4, #16]
 8011972:	7561      	strb	r1, [r4, #21]
 8011974:	7da0      	ldrb	r0, [r4, #22]
 8011976:	f080 0001 	eor.w	r0, r0, #1
 801197a:	bd38      	pop	{r3, r4, r5, pc}

0801197c <ucdr_serialize_uint16_t>:
 801197c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011980:	b082      	sub	sp, #8
 8011982:	460b      	mov	r3, r1
 8011984:	2102      	movs	r1, #2
 8011986:	4604      	mov	r4, r0
 8011988:	f8ad 3006 	strh.w	r3, [sp, #6]
 801198c:	f001 fd06 	bl	801339c <ucdr_buffer_alignment>
 8011990:	4601      	mov	r1, r0
 8011992:	4620      	mov	r0, r4
 8011994:	7d67      	ldrb	r7, [r4, #21]
 8011996:	f001 fd45 	bl	8013424 <ucdr_advance_buffer>
 801199a:	2102      	movs	r1, #2
 801199c:	4620      	mov	r0, r4
 801199e:	f001 fc9d 	bl	80132dc <ucdr_check_buffer_available_for>
 80119a2:	bb78      	cbnz	r0, 8011a04 <ucdr_serialize_uint16_t+0x88>
 80119a4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80119a8:	42ab      	cmp	r3, r5
 80119aa:	d926      	bls.n	80119fa <ucdr_serialize_uint16_t+0x7e>
 80119ac:	1b5e      	subs	r6, r3, r5
 80119ae:	60a3      	str	r3, [r4, #8]
 80119b0:	6923      	ldr	r3, [r4, #16]
 80119b2:	f1c6 0802 	rsb	r8, r6, #2
 80119b6:	4433      	add	r3, r6
 80119b8:	6123      	str	r3, [r4, #16]
 80119ba:	4641      	mov	r1, r8
 80119bc:	4620      	mov	r0, r4
 80119be:	f001 fc99 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 80119c2:	2800      	cmp	r0, #0
 80119c4:	d03b      	beq.n	8011a3e <ucdr_serialize_uint16_t+0xc2>
 80119c6:	7d23      	ldrb	r3, [r4, #20]
 80119c8:	2b01      	cmp	r3, #1
 80119ca:	d04a      	beq.n	8011a62 <ucdr_serialize_uint16_t+0xe6>
 80119cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80119d0:	702b      	strb	r3, [r5, #0]
 80119d2:	2e00      	cmp	r6, #0
 80119d4:	d040      	beq.n	8011a58 <ucdr_serialize_uint16_t+0xdc>
 80119d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80119da:	706b      	strb	r3, [r5, #1]
 80119dc:	6923      	ldr	r3, [r4, #16]
 80119de:	68a2      	ldr	r2, [r4, #8]
 80119e0:	7da0      	ldrb	r0, [r4, #22]
 80119e2:	3302      	adds	r3, #2
 80119e4:	1b9e      	subs	r6, r3, r6
 80119e6:	4442      	add	r2, r8
 80119e8:	2302      	movs	r3, #2
 80119ea:	f080 0001 	eor.w	r0, r0, #1
 80119ee:	60a2      	str	r2, [r4, #8]
 80119f0:	6126      	str	r6, [r4, #16]
 80119f2:	7563      	strb	r3, [r4, #21]
 80119f4:	b002      	add	sp, #8
 80119f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119fa:	2102      	movs	r1, #2
 80119fc:	4620      	mov	r0, r4
 80119fe:	f001 fc79 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8011a02:	b190      	cbz	r0, 8011a2a <ucdr_serialize_uint16_t+0xae>
 8011a04:	7d23      	ldrb	r3, [r4, #20]
 8011a06:	2b01      	cmp	r3, #1
 8011a08:	68a3      	ldr	r3, [r4, #8]
 8011a0a:	d014      	beq.n	8011a36 <ucdr_serialize_uint16_t+0xba>
 8011a0c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011a10:	701a      	strb	r2, [r3, #0]
 8011a12:	68a3      	ldr	r3, [r4, #8]
 8011a14:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011a18:	705a      	strb	r2, [r3, #1]
 8011a1a:	68a2      	ldr	r2, [r4, #8]
 8011a1c:	6923      	ldr	r3, [r4, #16]
 8011a1e:	3202      	adds	r2, #2
 8011a20:	3302      	adds	r3, #2
 8011a22:	2102      	movs	r1, #2
 8011a24:	60a2      	str	r2, [r4, #8]
 8011a26:	6123      	str	r3, [r4, #16]
 8011a28:	7561      	strb	r1, [r4, #21]
 8011a2a:	7da0      	ldrb	r0, [r4, #22]
 8011a2c:	f080 0001 	eor.w	r0, r0, #1
 8011a30:	b002      	add	sp, #8
 8011a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a36:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011a3a:	801a      	strh	r2, [r3, #0]
 8011a3c:	e7ed      	b.n	8011a1a <ucdr_serialize_uint16_t+0x9e>
 8011a3e:	68a2      	ldr	r2, [r4, #8]
 8011a40:	6923      	ldr	r3, [r4, #16]
 8011a42:	7da0      	ldrb	r0, [r4, #22]
 8011a44:	7567      	strb	r7, [r4, #21]
 8011a46:	1b92      	subs	r2, r2, r6
 8011a48:	1b9b      	subs	r3, r3, r6
 8011a4a:	f080 0001 	eor.w	r0, r0, #1
 8011a4e:	60a2      	str	r2, [r4, #8]
 8011a50:	6123      	str	r3, [r4, #16]
 8011a52:	b002      	add	sp, #8
 8011a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a58:	68a3      	ldr	r3, [r4, #8]
 8011a5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011a5e:	701a      	strb	r2, [r3, #0]
 8011a60:	e7bc      	b.n	80119dc <ucdr_serialize_uint16_t+0x60>
 8011a62:	4628      	mov	r0, r5
 8011a64:	f10d 0506 	add.w	r5, sp, #6
 8011a68:	4629      	mov	r1, r5
 8011a6a:	4632      	mov	r2, r6
 8011a6c:	f00e fe6f 	bl	802074e <memcpy>
 8011a70:	68a0      	ldr	r0, [r4, #8]
 8011a72:	4642      	mov	r2, r8
 8011a74:	19a9      	adds	r1, r5, r6
 8011a76:	f00e fe6a 	bl	802074e <memcpy>
 8011a7a:	e7af      	b.n	80119dc <ucdr_serialize_uint16_t+0x60>

08011a7c <ucdr_serialize_endian_uint16_t>:
 8011a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a80:	b083      	sub	sp, #12
 8011a82:	460d      	mov	r5, r1
 8011a84:	2102      	movs	r1, #2
 8011a86:	4604      	mov	r4, r0
 8011a88:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011a8c:	f001 fc86 	bl	801339c <ucdr_buffer_alignment>
 8011a90:	4601      	mov	r1, r0
 8011a92:	4620      	mov	r0, r4
 8011a94:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011a98:	f001 fcc4 	bl	8013424 <ucdr_advance_buffer>
 8011a9c:	2102      	movs	r1, #2
 8011a9e:	4620      	mov	r0, r4
 8011aa0:	f001 fc1c 	bl	80132dc <ucdr_check_buffer_available_for>
 8011aa4:	bb70      	cbnz	r0, 8011b04 <ucdr_serialize_endian_uint16_t+0x88>
 8011aa6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011aaa:	42be      	cmp	r6, r7
 8011aac:	d925      	bls.n	8011afa <ucdr_serialize_endian_uint16_t+0x7e>
 8011aae:	6923      	ldr	r3, [r4, #16]
 8011ab0:	60a6      	str	r6, [r4, #8]
 8011ab2:	1bf6      	subs	r6, r6, r7
 8011ab4:	4433      	add	r3, r6
 8011ab6:	f1c6 0902 	rsb	r9, r6, #2
 8011aba:	6123      	str	r3, [r4, #16]
 8011abc:	4649      	mov	r1, r9
 8011abe:	4620      	mov	r0, r4
 8011ac0:	f001 fc18 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8011ac4:	2800      	cmp	r0, #0
 8011ac6:	d039      	beq.n	8011b3c <ucdr_serialize_endian_uint16_t+0xc0>
 8011ac8:	2d01      	cmp	r5, #1
 8011aca:	d04a      	beq.n	8011b62 <ucdr_serialize_endian_uint16_t+0xe6>
 8011acc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011ad0:	703b      	strb	r3, [r7, #0]
 8011ad2:	2e00      	cmp	r6, #0
 8011ad4:	d040      	beq.n	8011b58 <ucdr_serialize_endian_uint16_t+0xdc>
 8011ad6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011ada:	707b      	strb	r3, [r7, #1]
 8011adc:	6923      	ldr	r3, [r4, #16]
 8011ade:	68a2      	ldr	r2, [r4, #8]
 8011ae0:	7da0      	ldrb	r0, [r4, #22]
 8011ae2:	3302      	adds	r3, #2
 8011ae4:	444a      	add	r2, r9
 8011ae6:	1b9b      	subs	r3, r3, r6
 8011ae8:	2102      	movs	r1, #2
 8011aea:	f080 0001 	eor.w	r0, r0, #1
 8011aee:	60a2      	str	r2, [r4, #8]
 8011af0:	6123      	str	r3, [r4, #16]
 8011af2:	7561      	strb	r1, [r4, #21]
 8011af4:	b003      	add	sp, #12
 8011af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011afa:	2102      	movs	r1, #2
 8011afc:	4620      	mov	r0, r4
 8011afe:	f001 fbf9 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8011b02:	b188      	cbz	r0, 8011b28 <ucdr_serialize_endian_uint16_t+0xac>
 8011b04:	2d01      	cmp	r5, #1
 8011b06:	68a3      	ldr	r3, [r4, #8]
 8011b08:	d014      	beq.n	8011b34 <ucdr_serialize_endian_uint16_t+0xb8>
 8011b0a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011b0e:	701a      	strb	r2, [r3, #0]
 8011b10:	68a3      	ldr	r3, [r4, #8]
 8011b12:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011b16:	705a      	strb	r2, [r3, #1]
 8011b18:	68a2      	ldr	r2, [r4, #8]
 8011b1a:	6923      	ldr	r3, [r4, #16]
 8011b1c:	3202      	adds	r2, #2
 8011b1e:	3302      	adds	r3, #2
 8011b20:	2102      	movs	r1, #2
 8011b22:	60a2      	str	r2, [r4, #8]
 8011b24:	6123      	str	r3, [r4, #16]
 8011b26:	7561      	strb	r1, [r4, #21]
 8011b28:	7da0      	ldrb	r0, [r4, #22]
 8011b2a:	f080 0001 	eor.w	r0, r0, #1
 8011b2e:	b003      	add	sp, #12
 8011b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b34:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011b38:	801a      	strh	r2, [r3, #0]
 8011b3a:	e7ed      	b.n	8011b18 <ucdr_serialize_endian_uint16_t+0x9c>
 8011b3c:	68a2      	ldr	r2, [r4, #8]
 8011b3e:	6923      	ldr	r3, [r4, #16]
 8011b40:	7da0      	ldrb	r0, [r4, #22]
 8011b42:	f884 8015 	strb.w	r8, [r4, #21]
 8011b46:	1b92      	subs	r2, r2, r6
 8011b48:	1b9b      	subs	r3, r3, r6
 8011b4a:	f080 0001 	eor.w	r0, r0, #1
 8011b4e:	60a2      	str	r2, [r4, #8]
 8011b50:	6123      	str	r3, [r4, #16]
 8011b52:	b003      	add	sp, #12
 8011b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b58:	68a3      	ldr	r3, [r4, #8]
 8011b5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011b5e:	701a      	strb	r2, [r3, #0]
 8011b60:	e7bc      	b.n	8011adc <ucdr_serialize_endian_uint16_t+0x60>
 8011b62:	f10d 0506 	add.w	r5, sp, #6
 8011b66:	4629      	mov	r1, r5
 8011b68:	4632      	mov	r2, r6
 8011b6a:	4638      	mov	r0, r7
 8011b6c:	f00e fdef 	bl	802074e <memcpy>
 8011b70:	68a0      	ldr	r0, [r4, #8]
 8011b72:	464a      	mov	r2, r9
 8011b74:	19a9      	adds	r1, r5, r6
 8011b76:	f00e fdea 	bl	802074e <memcpy>
 8011b7a:	e7af      	b.n	8011adc <ucdr_serialize_endian_uint16_t+0x60>

08011b7c <ucdr_deserialize_uint16_t>:
 8011b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b80:	460d      	mov	r5, r1
 8011b82:	2102      	movs	r1, #2
 8011b84:	4604      	mov	r4, r0
 8011b86:	f001 fc09 	bl	801339c <ucdr_buffer_alignment>
 8011b8a:	4601      	mov	r1, r0
 8011b8c:	4620      	mov	r0, r4
 8011b8e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011b92:	f001 fc47 	bl	8013424 <ucdr_advance_buffer>
 8011b96:	2102      	movs	r1, #2
 8011b98:	4620      	mov	r0, r4
 8011b9a:	f001 fb9f 	bl	80132dc <ucdr_check_buffer_available_for>
 8011b9e:	bb60      	cbnz	r0, 8011bfa <ucdr_deserialize_uint16_t+0x7e>
 8011ba0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011ba4:	42be      	cmp	r6, r7
 8011ba6:	d923      	bls.n	8011bf0 <ucdr_deserialize_uint16_t+0x74>
 8011ba8:	6923      	ldr	r3, [r4, #16]
 8011baa:	60a6      	str	r6, [r4, #8]
 8011bac:	1bf6      	subs	r6, r6, r7
 8011bae:	4433      	add	r3, r6
 8011bb0:	f1c6 0902 	rsb	r9, r6, #2
 8011bb4:	6123      	str	r3, [r4, #16]
 8011bb6:	4649      	mov	r1, r9
 8011bb8:	4620      	mov	r0, r4
 8011bba:	f001 fb9b 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8011bbe:	2800      	cmp	r0, #0
 8011bc0:	d034      	beq.n	8011c2c <ucdr_deserialize_uint16_t+0xb0>
 8011bc2:	7d23      	ldrb	r3, [r4, #20]
 8011bc4:	2b01      	cmp	r3, #1
 8011bc6:	d042      	beq.n	8011c4e <ucdr_deserialize_uint16_t+0xd2>
 8011bc8:	787b      	ldrb	r3, [r7, #1]
 8011bca:	702b      	strb	r3, [r5, #0]
 8011bcc:	2e00      	cmp	r6, #0
 8011bce:	d03a      	beq.n	8011c46 <ucdr_deserialize_uint16_t+0xca>
 8011bd0:	783b      	ldrb	r3, [r7, #0]
 8011bd2:	706b      	strb	r3, [r5, #1]
 8011bd4:	6923      	ldr	r3, [r4, #16]
 8011bd6:	68a2      	ldr	r2, [r4, #8]
 8011bd8:	7da0      	ldrb	r0, [r4, #22]
 8011bda:	2102      	movs	r1, #2
 8011bdc:	3302      	adds	r3, #2
 8011bde:	444a      	add	r2, r9
 8011be0:	1b9b      	subs	r3, r3, r6
 8011be2:	7561      	strb	r1, [r4, #21]
 8011be4:	60a2      	str	r2, [r4, #8]
 8011be6:	6123      	str	r3, [r4, #16]
 8011be8:	f080 0001 	eor.w	r0, r0, #1
 8011bec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bf0:	2102      	movs	r1, #2
 8011bf2:	4620      	mov	r0, r4
 8011bf4:	f001 fb7e 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8011bf8:	b180      	cbz	r0, 8011c1c <ucdr_deserialize_uint16_t+0xa0>
 8011bfa:	7d23      	ldrb	r3, [r4, #20]
 8011bfc:	2b01      	cmp	r3, #1
 8011bfe:	68a3      	ldr	r3, [r4, #8]
 8011c00:	d011      	beq.n	8011c26 <ucdr_deserialize_uint16_t+0xaa>
 8011c02:	785b      	ldrb	r3, [r3, #1]
 8011c04:	702b      	strb	r3, [r5, #0]
 8011c06:	68a3      	ldr	r3, [r4, #8]
 8011c08:	781b      	ldrb	r3, [r3, #0]
 8011c0a:	706b      	strb	r3, [r5, #1]
 8011c0c:	68a2      	ldr	r2, [r4, #8]
 8011c0e:	6923      	ldr	r3, [r4, #16]
 8011c10:	3202      	adds	r2, #2
 8011c12:	3302      	adds	r3, #2
 8011c14:	2102      	movs	r1, #2
 8011c16:	60a2      	str	r2, [r4, #8]
 8011c18:	6123      	str	r3, [r4, #16]
 8011c1a:	7561      	strb	r1, [r4, #21]
 8011c1c:	7da0      	ldrb	r0, [r4, #22]
 8011c1e:	f080 0001 	eor.w	r0, r0, #1
 8011c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c26:	881b      	ldrh	r3, [r3, #0]
 8011c28:	802b      	strh	r3, [r5, #0]
 8011c2a:	e7ef      	b.n	8011c0c <ucdr_deserialize_uint16_t+0x90>
 8011c2c:	68a2      	ldr	r2, [r4, #8]
 8011c2e:	6923      	ldr	r3, [r4, #16]
 8011c30:	7da0      	ldrb	r0, [r4, #22]
 8011c32:	f884 8015 	strb.w	r8, [r4, #21]
 8011c36:	1b92      	subs	r2, r2, r6
 8011c38:	1b9b      	subs	r3, r3, r6
 8011c3a:	60a2      	str	r2, [r4, #8]
 8011c3c:	6123      	str	r3, [r4, #16]
 8011c3e:	f080 0001 	eor.w	r0, r0, #1
 8011c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c46:	68a3      	ldr	r3, [r4, #8]
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	706b      	strb	r3, [r5, #1]
 8011c4c:	e7c2      	b.n	8011bd4 <ucdr_deserialize_uint16_t+0x58>
 8011c4e:	4639      	mov	r1, r7
 8011c50:	4632      	mov	r2, r6
 8011c52:	4628      	mov	r0, r5
 8011c54:	f00e fd7b 	bl	802074e <memcpy>
 8011c58:	68a1      	ldr	r1, [r4, #8]
 8011c5a:	464a      	mov	r2, r9
 8011c5c:	19a8      	adds	r0, r5, r6
 8011c5e:	f00e fd76 	bl	802074e <memcpy>
 8011c62:	e7b7      	b.n	8011bd4 <ucdr_deserialize_uint16_t+0x58>

08011c64 <ucdr_deserialize_endian_uint16_t>:
 8011c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c68:	460e      	mov	r6, r1
 8011c6a:	2102      	movs	r1, #2
 8011c6c:	4604      	mov	r4, r0
 8011c6e:	4615      	mov	r5, r2
 8011c70:	f001 fb94 	bl	801339c <ucdr_buffer_alignment>
 8011c74:	4601      	mov	r1, r0
 8011c76:	4620      	mov	r0, r4
 8011c78:	f894 9015 	ldrb.w	r9, [r4, #21]
 8011c7c:	f001 fbd2 	bl	8013424 <ucdr_advance_buffer>
 8011c80:	2102      	movs	r1, #2
 8011c82:	4620      	mov	r0, r4
 8011c84:	f001 fb2a 	bl	80132dc <ucdr_check_buffer_available_for>
 8011c88:	bb70      	cbnz	r0, 8011ce8 <ucdr_deserialize_endian_uint16_t+0x84>
 8011c8a:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 8011c8e:	4547      	cmp	r7, r8
 8011c90:	d925      	bls.n	8011cde <ucdr_deserialize_endian_uint16_t+0x7a>
 8011c92:	6923      	ldr	r3, [r4, #16]
 8011c94:	60a7      	str	r7, [r4, #8]
 8011c96:	eba7 0708 	sub.w	r7, r7, r8
 8011c9a:	443b      	add	r3, r7
 8011c9c:	f1c7 0a02 	rsb	sl, r7, #2
 8011ca0:	6123      	str	r3, [r4, #16]
 8011ca2:	4651      	mov	r1, sl
 8011ca4:	4620      	mov	r0, r4
 8011ca6:	f001 fb25 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8011caa:	2800      	cmp	r0, #0
 8011cac:	d034      	beq.n	8011d18 <ucdr_deserialize_endian_uint16_t+0xb4>
 8011cae:	2e01      	cmp	r6, #1
 8011cb0:	d043      	beq.n	8011d3a <ucdr_deserialize_endian_uint16_t+0xd6>
 8011cb2:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011cb6:	702b      	strb	r3, [r5, #0]
 8011cb8:	2f00      	cmp	r7, #0
 8011cba:	d03a      	beq.n	8011d32 <ucdr_deserialize_endian_uint16_t+0xce>
 8011cbc:	f898 3000 	ldrb.w	r3, [r8]
 8011cc0:	706b      	strb	r3, [r5, #1]
 8011cc2:	6923      	ldr	r3, [r4, #16]
 8011cc4:	68a2      	ldr	r2, [r4, #8]
 8011cc6:	7da0      	ldrb	r0, [r4, #22]
 8011cc8:	2102      	movs	r1, #2
 8011cca:	3302      	adds	r3, #2
 8011ccc:	4452      	add	r2, sl
 8011cce:	1bdb      	subs	r3, r3, r7
 8011cd0:	7561      	strb	r1, [r4, #21]
 8011cd2:	60a2      	str	r2, [r4, #8]
 8011cd4:	6123      	str	r3, [r4, #16]
 8011cd6:	f080 0001 	eor.w	r0, r0, #1
 8011cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cde:	2102      	movs	r1, #2
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	f001 fb07 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8011ce6:	b178      	cbz	r0, 8011d08 <ucdr_deserialize_endian_uint16_t+0xa4>
 8011ce8:	2e01      	cmp	r6, #1
 8011cea:	68a3      	ldr	r3, [r4, #8]
 8011cec:	d011      	beq.n	8011d12 <ucdr_deserialize_endian_uint16_t+0xae>
 8011cee:	785b      	ldrb	r3, [r3, #1]
 8011cf0:	702b      	strb	r3, [r5, #0]
 8011cf2:	68a3      	ldr	r3, [r4, #8]
 8011cf4:	781b      	ldrb	r3, [r3, #0]
 8011cf6:	706b      	strb	r3, [r5, #1]
 8011cf8:	68a2      	ldr	r2, [r4, #8]
 8011cfa:	6923      	ldr	r3, [r4, #16]
 8011cfc:	3202      	adds	r2, #2
 8011cfe:	3302      	adds	r3, #2
 8011d00:	2102      	movs	r1, #2
 8011d02:	60a2      	str	r2, [r4, #8]
 8011d04:	6123      	str	r3, [r4, #16]
 8011d06:	7561      	strb	r1, [r4, #21]
 8011d08:	7da0      	ldrb	r0, [r4, #22]
 8011d0a:	f080 0001 	eor.w	r0, r0, #1
 8011d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d12:	881b      	ldrh	r3, [r3, #0]
 8011d14:	802b      	strh	r3, [r5, #0]
 8011d16:	e7ef      	b.n	8011cf8 <ucdr_deserialize_endian_uint16_t+0x94>
 8011d18:	68a2      	ldr	r2, [r4, #8]
 8011d1a:	6923      	ldr	r3, [r4, #16]
 8011d1c:	7da0      	ldrb	r0, [r4, #22]
 8011d1e:	f884 9015 	strb.w	r9, [r4, #21]
 8011d22:	1bd2      	subs	r2, r2, r7
 8011d24:	1bdb      	subs	r3, r3, r7
 8011d26:	60a2      	str	r2, [r4, #8]
 8011d28:	6123      	str	r3, [r4, #16]
 8011d2a:	f080 0001 	eor.w	r0, r0, #1
 8011d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d32:	68a3      	ldr	r3, [r4, #8]
 8011d34:	781b      	ldrb	r3, [r3, #0]
 8011d36:	706b      	strb	r3, [r5, #1]
 8011d38:	e7c3      	b.n	8011cc2 <ucdr_deserialize_endian_uint16_t+0x5e>
 8011d3a:	4641      	mov	r1, r8
 8011d3c:	463a      	mov	r2, r7
 8011d3e:	4628      	mov	r0, r5
 8011d40:	f00e fd05 	bl	802074e <memcpy>
 8011d44:	68a1      	ldr	r1, [r4, #8]
 8011d46:	4652      	mov	r2, sl
 8011d48:	19e8      	adds	r0, r5, r7
 8011d4a:	f00e fd00 	bl	802074e <memcpy>
 8011d4e:	e7b8      	b.n	8011cc2 <ucdr_deserialize_endian_uint16_t+0x5e>

08011d50 <ucdr_serialize_uint32_t>:
 8011d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d54:	b082      	sub	sp, #8
 8011d56:	4604      	mov	r4, r0
 8011d58:	9101      	str	r1, [sp, #4]
 8011d5a:	2104      	movs	r1, #4
 8011d5c:	f001 fb1e 	bl	801339c <ucdr_buffer_alignment>
 8011d60:	4601      	mov	r1, r0
 8011d62:	4620      	mov	r0, r4
 8011d64:	7d67      	ldrb	r7, [r4, #21]
 8011d66:	f001 fb5d 	bl	8013424 <ucdr_advance_buffer>
 8011d6a:	2104      	movs	r1, #4
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	f001 fab5 	bl	80132dc <ucdr_check_buffer_available_for>
 8011d72:	2800      	cmp	r0, #0
 8011d74:	d139      	bne.n	8011dea <ucdr_serialize_uint32_t+0x9a>
 8011d76:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011d7a:	42ab      	cmp	r3, r5
 8011d7c:	d930      	bls.n	8011de0 <ucdr_serialize_uint32_t+0x90>
 8011d7e:	1b5e      	subs	r6, r3, r5
 8011d80:	60a3      	str	r3, [r4, #8]
 8011d82:	6923      	ldr	r3, [r4, #16]
 8011d84:	f1c6 0804 	rsb	r8, r6, #4
 8011d88:	4433      	add	r3, r6
 8011d8a:	6123      	str	r3, [r4, #16]
 8011d8c:	4641      	mov	r1, r8
 8011d8e:	4620      	mov	r0, r4
 8011d90:	f001 fab0 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8011d94:	2800      	cmp	r0, #0
 8011d96:	d04c      	beq.n	8011e32 <ucdr_serialize_uint32_t+0xe2>
 8011d98:	7d23      	ldrb	r3, [r4, #20]
 8011d9a:	2b01      	cmp	r3, #1
 8011d9c:	d063      	beq.n	8011e66 <ucdr_serialize_uint32_t+0x116>
 8011d9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011da2:	702b      	strb	r3, [r5, #0]
 8011da4:	2e00      	cmp	r6, #0
 8011da6:	d051      	beq.n	8011e4c <ucdr_serialize_uint32_t+0xfc>
 8011da8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011dac:	706b      	strb	r3, [r5, #1]
 8011dae:	2e01      	cmp	r6, #1
 8011db0:	d050      	beq.n	8011e54 <ucdr_serialize_uint32_t+0x104>
 8011db2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011db6:	70ab      	strb	r3, [r5, #2]
 8011db8:	2e02      	cmp	r6, #2
 8011dba:	d04f      	beq.n	8011e5c <ucdr_serialize_uint32_t+0x10c>
 8011dbc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011dc0:	70eb      	strb	r3, [r5, #3]
 8011dc2:	6923      	ldr	r3, [r4, #16]
 8011dc4:	68a2      	ldr	r2, [r4, #8]
 8011dc6:	7da0      	ldrb	r0, [r4, #22]
 8011dc8:	3304      	adds	r3, #4
 8011dca:	1b9e      	subs	r6, r3, r6
 8011dcc:	4442      	add	r2, r8
 8011dce:	2304      	movs	r3, #4
 8011dd0:	f080 0001 	eor.w	r0, r0, #1
 8011dd4:	60a2      	str	r2, [r4, #8]
 8011dd6:	6126      	str	r6, [r4, #16]
 8011dd8:	7563      	strb	r3, [r4, #21]
 8011dda:	b002      	add	sp, #8
 8011ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011de0:	2104      	movs	r1, #4
 8011de2:	4620      	mov	r0, r4
 8011de4:	f001 fa86 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8011de8:	b1d0      	cbz	r0, 8011e20 <ucdr_serialize_uint32_t+0xd0>
 8011dea:	7d23      	ldrb	r3, [r4, #20]
 8011dec:	2b01      	cmp	r3, #1
 8011dee:	68a3      	ldr	r3, [r4, #8]
 8011df0:	d01c      	beq.n	8011e2c <ucdr_serialize_uint32_t+0xdc>
 8011df2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011df6:	701a      	strb	r2, [r3, #0]
 8011df8:	68a3      	ldr	r3, [r4, #8]
 8011dfa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011dfe:	705a      	strb	r2, [r3, #1]
 8011e00:	68a3      	ldr	r3, [r4, #8]
 8011e02:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011e06:	709a      	strb	r2, [r3, #2]
 8011e08:	68a3      	ldr	r3, [r4, #8]
 8011e0a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011e0e:	70da      	strb	r2, [r3, #3]
 8011e10:	68a2      	ldr	r2, [r4, #8]
 8011e12:	6923      	ldr	r3, [r4, #16]
 8011e14:	3204      	adds	r2, #4
 8011e16:	3304      	adds	r3, #4
 8011e18:	2104      	movs	r1, #4
 8011e1a:	60a2      	str	r2, [r4, #8]
 8011e1c:	6123      	str	r3, [r4, #16]
 8011e1e:	7561      	strb	r1, [r4, #21]
 8011e20:	7da0      	ldrb	r0, [r4, #22]
 8011e22:	f080 0001 	eor.w	r0, r0, #1
 8011e26:	b002      	add	sp, #8
 8011e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e2c:	9a01      	ldr	r2, [sp, #4]
 8011e2e:	601a      	str	r2, [r3, #0]
 8011e30:	e7ee      	b.n	8011e10 <ucdr_serialize_uint32_t+0xc0>
 8011e32:	68a2      	ldr	r2, [r4, #8]
 8011e34:	6923      	ldr	r3, [r4, #16]
 8011e36:	7da0      	ldrb	r0, [r4, #22]
 8011e38:	7567      	strb	r7, [r4, #21]
 8011e3a:	1b92      	subs	r2, r2, r6
 8011e3c:	1b9b      	subs	r3, r3, r6
 8011e3e:	f080 0001 	eor.w	r0, r0, #1
 8011e42:	60a2      	str	r2, [r4, #8]
 8011e44:	6123      	str	r3, [r4, #16]
 8011e46:	b002      	add	sp, #8
 8011e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e4c:	68a3      	ldr	r3, [r4, #8]
 8011e4e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011e52:	701a      	strb	r2, [r3, #0]
 8011e54:	68a3      	ldr	r3, [r4, #8]
 8011e56:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011e5a:	701a      	strb	r2, [r3, #0]
 8011e5c:	68a3      	ldr	r3, [r4, #8]
 8011e5e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011e62:	701a      	strb	r2, [r3, #0]
 8011e64:	e7ad      	b.n	8011dc2 <ucdr_serialize_uint32_t+0x72>
 8011e66:	4628      	mov	r0, r5
 8011e68:	ad01      	add	r5, sp, #4
 8011e6a:	4629      	mov	r1, r5
 8011e6c:	4632      	mov	r2, r6
 8011e6e:	f00e fc6e 	bl	802074e <memcpy>
 8011e72:	68a0      	ldr	r0, [r4, #8]
 8011e74:	4642      	mov	r2, r8
 8011e76:	19a9      	adds	r1, r5, r6
 8011e78:	f00e fc69 	bl	802074e <memcpy>
 8011e7c:	e7a1      	b.n	8011dc2 <ucdr_serialize_uint32_t+0x72>
 8011e7e:	bf00      	nop

08011e80 <ucdr_serialize_endian_uint32_t>:
 8011e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011e84:	b083      	sub	sp, #12
 8011e86:	460d      	mov	r5, r1
 8011e88:	2104      	movs	r1, #4
 8011e8a:	4604      	mov	r4, r0
 8011e8c:	9201      	str	r2, [sp, #4]
 8011e8e:	f001 fa85 	bl	801339c <ucdr_buffer_alignment>
 8011e92:	4601      	mov	r1, r0
 8011e94:	4620      	mov	r0, r4
 8011e96:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011e9a:	f001 fac3 	bl	8013424 <ucdr_advance_buffer>
 8011e9e:	2104      	movs	r1, #4
 8011ea0:	4620      	mov	r0, r4
 8011ea2:	f001 fa1b 	bl	80132dc <ucdr_check_buffer_available_for>
 8011ea6:	2800      	cmp	r0, #0
 8011ea8:	d138      	bne.n	8011f1c <ucdr_serialize_endian_uint32_t+0x9c>
 8011eaa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011eae:	42b7      	cmp	r7, r6
 8011eb0:	d92f      	bls.n	8011f12 <ucdr_serialize_endian_uint32_t+0x92>
 8011eb2:	6923      	ldr	r3, [r4, #16]
 8011eb4:	60a7      	str	r7, [r4, #8]
 8011eb6:	1bbf      	subs	r7, r7, r6
 8011eb8:	443b      	add	r3, r7
 8011eba:	f1c7 0904 	rsb	r9, r7, #4
 8011ebe:	6123      	str	r3, [r4, #16]
 8011ec0:	4649      	mov	r1, r9
 8011ec2:	4620      	mov	r0, r4
 8011ec4:	f001 fa16 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8011ec8:	2800      	cmp	r0, #0
 8011eca:	d04a      	beq.n	8011f62 <ucdr_serialize_endian_uint32_t+0xe2>
 8011ecc:	2d01      	cmp	r5, #1
 8011ece:	d063      	beq.n	8011f98 <ucdr_serialize_endian_uint32_t+0x118>
 8011ed0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011ed4:	7033      	strb	r3, [r6, #0]
 8011ed6:	2f00      	cmp	r7, #0
 8011ed8:	d051      	beq.n	8011f7e <ucdr_serialize_endian_uint32_t+0xfe>
 8011eda:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011ede:	7073      	strb	r3, [r6, #1]
 8011ee0:	2f01      	cmp	r7, #1
 8011ee2:	d050      	beq.n	8011f86 <ucdr_serialize_endian_uint32_t+0x106>
 8011ee4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011ee8:	70b3      	strb	r3, [r6, #2]
 8011eea:	2f02      	cmp	r7, #2
 8011eec:	d04f      	beq.n	8011f8e <ucdr_serialize_endian_uint32_t+0x10e>
 8011eee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011ef2:	70f3      	strb	r3, [r6, #3]
 8011ef4:	6923      	ldr	r3, [r4, #16]
 8011ef6:	68a2      	ldr	r2, [r4, #8]
 8011ef8:	7da0      	ldrb	r0, [r4, #22]
 8011efa:	3304      	adds	r3, #4
 8011efc:	444a      	add	r2, r9
 8011efe:	1bdb      	subs	r3, r3, r7
 8011f00:	2104      	movs	r1, #4
 8011f02:	f080 0001 	eor.w	r0, r0, #1
 8011f06:	60a2      	str	r2, [r4, #8]
 8011f08:	6123      	str	r3, [r4, #16]
 8011f0a:	7561      	strb	r1, [r4, #21]
 8011f0c:	b003      	add	sp, #12
 8011f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f12:	2104      	movs	r1, #4
 8011f14:	4620      	mov	r0, r4
 8011f16:	f001 f9ed 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8011f1a:	b1c8      	cbz	r0, 8011f50 <ucdr_serialize_endian_uint32_t+0xd0>
 8011f1c:	2d01      	cmp	r5, #1
 8011f1e:	68a3      	ldr	r3, [r4, #8]
 8011f20:	d01c      	beq.n	8011f5c <ucdr_serialize_endian_uint32_t+0xdc>
 8011f22:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011f26:	701a      	strb	r2, [r3, #0]
 8011f28:	68a3      	ldr	r3, [r4, #8]
 8011f2a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011f2e:	705a      	strb	r2, [r3, #1]
 8011f30:	68a3      	ldr	r3, [r4, #8]
 8011f32:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011f36:	709a      	strb	r2, [r3, #2]
 8011f38:	68a3      	ldr	r3, [r4, #8]
 8011f3a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011f3e:	70da      	strb	r2, [r3, #3]
 8011f40:	68a2      	ldr	r2, [r4, #8]
 8011f42:	6923      	ldr	r3, [r4, #16]
 8011f44:	3204      	adds	r2, #4
 8011f46:	3304      	adds	r3, #4
 8011f48:	2104      	movs	r1, #4
 8011f4a:	60a2      	str	r2, [r4, #8]
 8011f4c:	6123      	str	r3, [r4, #16]
 8011f4e:	7561      	strb	r1, [r4, #21]
 8011f50:	7da0      	ldrb	r0, [r4, #22]
 8011f52:	f080 0001 	eor.w	r0, r0, #1
 8011f56:	b003      	add	sp, #12
 8011f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f5c:	9a01      	ldr	r2, [sp, #4]
 8011f5e:	601a      	str	r2, [r3, #0]
 8011f60:	e7ee      	b.n	8011f40 <ucdr_serialize_endian_uint32_t+0xc0>
 8011f62:	68a2      	ldr	r2, [r4, #8]
 8011f64:	6923      	ldr	r3, [r4, #16]
 8011f66:	7da0      	ldrb	r0, [r4, #22]
 8011f68:	f884 8015 	strb.w	r8, [r4, #21]
 8011f6c:	1bd2      	subs	r2, r2, r7
 8011f6e:	1bdb      	subs	r3, r3, r7
 8011f70:	f080 0001 	eor.w	r0, r0, #1
 8011f74:	60a2      	str	r2, [r4, #8]
 8011f76:	6123      	str	r3, [r4, #16]
 8011f78:	b003      	add	sp, #12
 8011f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f7e:	68a3      	ldr	r3, [r4, #8]
 8011f80:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011f84:	701a      	strb	r2, [r3, #0]
 8011f86:	68a3      	ldr	r3, [r4, #8]
 8011f88:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011f8c:	701a      	strb	r2, [r3, #0]
 8011f8e:	68a3      	ldr	r3, [r4, #8]
 8011f90:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011f94:	701a      	strb	r2, [r3, #0]
 8011f96:	e7ad      	b.n	8011ef4 <ucdr_serialize_endian_uint32_t+0x74>
 8011f98:	ad01      	add	r5, sp, #4
 8011f9a:	4629      	mov	r1, r5
 8011f9c:	463a      	mov	r2, r7
 8011f9e:	4630      	mov	r0, r6
 8011fa0:	f00e fbd5 	bl	802074e <memcpy>
 8011fa4:	68a0      	ldr	r0, [r4, #8]
 8011fa6:	464a      	mov	r2, r9
 8011fa8:	19e9      	adds	r1, r5, r7
 8011faa:	f00e fbd0 	bl	802074e <memcpy>
 8011fae:	e7a1      	b.n	8011ef4 <ucdr_serialize_endian_uint32_t+0x74>

08011fb0 <ucdr_deserialize_uint32_t>:
 8011fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fb4:	460d      	mov	r5, r1
 8011fb6:	2104      	movs	r1, #4
 8011fb8:	4604      	mov	r4, r0
 8011fba:	f001 f9ef 	bl	801339c <ucdr_buffer_alignment>
 8011fbe:	4601      	mov	r1, r0
 8011fc0:	4620      	mov	r0, r4
 8011fc2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011fc6:	f001 fa2d 	bl	8013424 <ucdr_advance_buffer>
 8011fca:	2104      	movs	r1, #4
 8011fcc:	4620      	mov	r0, r4
 8011fce:	f001 f985 	bl	80132dc <ucdr_check_buffer_available_for>
 8011fd2:	2800      	cmp	r0, #0
 8011fd4:	d138      	bne.n	8012048 <ucdr_deserialize_uint32_t+0x98>
 8011fd6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011fda:	42b7      	cmp	r7, r6
 8011fdc:	d92f      	bls.n	801203e <ucdr_deserialize_uint32_t+0x8e>
 8011fde:	6923      	ldr	r3, [r4, #16]
 8011fe0:	60a7      	str	r7, [r4, #8]
 8011fe2:	1bbf      	subs	r7, r7, r6
 8011fe4:	443b      	add	r3, r7
 8011fe6:	f1c7 0904 	rsb	r9, r7, #4
 8011fea:	6123      	str	r3, [r4, #16]
 8011fec:	4649      	mov	r1, r9
 8011fee:	4620      	mov	r0, r4
 8011ff0:	f001 f980 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8011ff4:	2800      	cmp	r0, #0
 8011ff6:	d046      	beq.n	8012086 <ucdr_deserialize_uint32_t+0xd6>
 8011ff8:	7d23      	ldrb	r3, [r4, #20]
 8011ffa:	2b01      	cmp	r3, #1
 8011ffc:	d05c      	beq.n	80120b8 <ucdr_deserialize_uint32_t+0x108>
 8011ffe:	78f3      	ldrb	r3, [r6, #3]
 8012000:	702b      	strb	r3, [r5, #0]
 8012002:	2f00      	cmp	r7, #0
 8012004:	d04c      	beq.n	80120a0 <ucdr_deserialize_uint32_t+0xf0>
 8012006:	78b3      	ldrb	r3, [r6, #2]
 8012008:	706b      	strb	r3, [r5, #1]
 801200a:	2f01      	cmp	r7, #1
 801200c:	f105 0302 	add.w	r3, r5, #2
 8012010:	d04a      	beq.n	80120a8 <ucdr_deserialize_uint32_t+0xf8>
 8012012:	7873      	ldrb	r3, [r6, #1]
 8012014:	70ab      	strb	r3, [r5, #2]
 8012016:	2f02      	cmp	r7, #2
 8012018:	f105 0303 	add.w	r3, r5, #3
 801201c:	d048      	beq.n	80120b0 <ucdr_deserialize_uint32_t+0x100>
 801201e:	7833      	ldrb	r3, [r6, #0]
 8012020:	70eb      	strb	r3, [r5, #3]
 8012022:	6923      	ldr	r3, [r4, #16]
 8012024:	68a2      	ldr	r2, [r4, #8]
 8012026:	7da0      	ldrb	r0, [r4, #22]
 8012028:	2104      	movs	r1, #4
 801202a:	3304      	adds	r3, #4
 801202c:	444a      	add	r2, r9
 801202e:	1bdb      	subs	r3, r3, r7
 8012030:	7561      	strb	r1, [r4, #21]
 8012032:	60a2      	str	r2, [r4, #8]
 8012034:	6123      	str	r3, [r4, #16]
 8012036:	f080 0001 	eor.w	r0, r0, #1
 801203a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801203e:	2104      	movs	r1, #4
 8012040:	4620      	mov	r0, r4
 8012042:	f001 f957 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8012046:	b1b0      	cbz	r0, 8012076 <ucdr_deserialize_uint32_t+0xc6>
 8012048:	7d23      	ldrb	r3, [r4, #20]
 801204a:	2b01      	cmp	r3, #1
 801204c:	68a3      	ldr	r3, [r4, #8]
 801204e:	d017      	beq.n	8012080 <ucdr_deserialize_uint32_t+0xd0>
 8012050:	78db      	ldrb	r3, [r3, #3]
 8012052:	702b      	strb	r3, [r5, #0]
 8012054:	68a3      	ldr	r3, [r4, #8]
 8012056:	789b      	ldrb	r3, [r3, #2]
 8012058:	706b      	strb	r3, [r5, #1]
 801205a:	68a3      	ldr	r3, [r4, #8]
 801205c:	785b      	ldrb	r3, [r3, #1]
 801205e:	70ab      	strb	r3, [r5, #2]
 8012060:	68a3      	ldr	r3, [r4, #8]
 8012062:	781b      	ldrb	r3, [r3, #0]
 8012064:	70eb      	strb	r3, [r5, #3]
 8012066:	68a2      	ldr	r2, [r4, #8]
 8012068:	6923      	ldr	r3, [r4, #16]
 801206a:	3204      	adds	r2, #4
 801206c:	3304      	adds	r3, #4
 801206e:	2104      	movs	r1, #4
 8012070:	60a2      	str	r2, [r4, #8]
 8012072:	6123      	str	r3, [r4, #16]
 8012074:	7561      	strb	r1, [r4, #21]
 8012076:	7da0      	ldrb	r0, [r4, #22]
 8012078:	f080 0001 	eor.w	r0, r0, #1
 801207c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	602b      	str	r3, [r5, #0]
 8012084:	e7ef      	b.n	8012066 <ucdr_deserialize_uint32_t+0xb6>
 8012086:	68a2      	ldr	r2, [r4, #8]
 8012088:	6923      	ldr	r3, [r4, #16]
 801208a:	7da0      	ldrb	r0, [r4, #22]
 801208c:	f884 8015 	strb.w	r8, [r4, #21]
 8012090:	1bd2      	subs	r2, r2, r7
 8012092:	1bdb      	subs	r3, r3, r7
 8012094:	60a2      	str	r2, [r4, #8]
 8012096:	6123      	str	r3, [r4, #16]
 8012098:	f080 0001 	eor.w	r0, r0, #1
 801209c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120a0:	68a3      	ldr	r3, [r4, #8]
 80120a2:	789b      	ldrb	r3, [r3, #2]
 80120a4:	706b      	strb	r3, [r5, #1]
 80120a6:	1cab      	adds	r3, r5, #2
 80120a8:	68a2      	ldr	r2, [r4, #8]
 80120aa:	7852      	ldrb	r2, [r2, #1]
 80120ac:	f803 2b01 	strb.w	r2, [r3], #1
 80120b0:	68a2      	ldr	r2, [r4, #8]
 80120b2:	7812      	ldrb	r2, [r2, #0]
 80120b4:	701a      	strb	r2, [r3, #0]
 80120b6:	e7b4      	b.n	8012022 <ucdr_deserialize_uint32_t+0x72>
 80120b8:	4631      	mov	r1, r6
 80120ba:	463a      	mov	r2, r7
 80120bc:	4628      	mov	r0, r5
 80120be:	f00e fb46 	bl	802074e <memcpy>
 80120c2:	68a1      	ldr	r1, [r4, #8]
 80120c4:	464a      	mov	r2, r9
 80120c6:	19e8      	adds	r0, r5, r7
 80120c8:	f00e fb41 	bl	802074e <memcpy>
 80120cc:	e7a9      	b.n	8012022 <ucdr_deserialize_uint32_t+0x72>
 80120ce:	bf00      	nop

080120d0 <ucdr_deserialize_endian_uint32_t>:
 80120d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120d4:	460e      	mov	r6, r1
 80120d6:	2104      	movs	r1, #4
 80120d8:	4604      	mov	r4, r0
 80120da:	4615      	mov	r5, r2
 80120dc:	f001 f95e 	bl	801339c <ucdr_buffer_alignment>
 80120e0:	4601      	mov	r1, r0
 80120e2:	4620      	mov	r0, r4
 80120e4:	f894 9015 	ldrb.w	r9, [r4, #21]
 80120e8:	f001 f99c 	bl	8013424 <ucdr_advance_buffer>
 80120ec:	2104      	movs	r1, #4
 80120ee:	4620      	mov	r0, r4
 80120f0:	f001 f8f4 	bl	80132dc <ucdr_check_buffer_available_for>
 80120f4:	2800      	cmp	r0, #0
 80120f6:	d13c      	bne.n	8012172 <ucdr_deserialize_endian_uint32_t+0xa2>
 80120f8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80120fc:	42bb      	cmp	r3, r7
 80120fe:	d933      	bls.n	8012168 <ucdr_deserialize_endian_uint32_t+0x98>
 8012100:	eba3 0807 	sub.w	r8, r3, r7
 8012104:	60a3      	str	r3, [r4, #8]
 8012106:	6923      	ldr	r3, [r4, #16]
 8012108:	f1c8 0a04 	rsb	sl, r8, #4
 801210c:	4443      	add	r3, r8
 801210e:	6123      	str	r3, [r4, #16]
 8012110:	4651      	mov	r1, sl
 8012112:	4620      	mov	r0, r4
 8012114:	f001 f8ee 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8012118:	2800      	cmp	r0, #0
 801211a:	d048      	beq.n	80121ae <ucdr_deserialize_endian_uint32_t+0xde>
 801211c:	2e01      	cmp	r6, #1
 801211e:	d061      	beq.n	80121e4 <ucdr_deserialize_endian_uint32_t+0x114>
 8012120:	78fb      	ldrb	r3, [r7, #3]
 8012122:	702b      	strb	r3, [r5, #0]
 8012124:	f1b8 0f00 	cmp.w	r8, #0
 8012128:	d050      	beq.n	80121cc <ucdr_deserialize_endian_uint32_t+0xfc>
 801212a:	78bb      	ldrb	r3, [r7, #2]
 801212c:	706b      	strb	r3, [r5, #1]
 801212e:	f1b8 0f01 	cmp.w	r8, #1
 8012132:	f105 0302 	add.w	r3, r5, #2
 8012136:	d04d      	beq.n	80121d4 <ucdr_deserialize_endian_uint32_t+0x104>
 8012138:	787b      	ldrb	r3, [r7, #1]
 801213a:	70ab      	strb	r3, [r5, #2]
 801213c:	f1b8 0f02 	cmp.w	r8, #2
 8012140:	f105 0303 	add.w	r3, r5, #3
 8012144:	d04a      	beq.n	80121dc <ucdr_deserialize_endian_uint32_t+0x10c>
 8012146:	783b      	ldrb	r3, [r7, #0]
 8012148:	70eb      	strb	r3, [r5, #3]
 801214a:	6923      	ldr	r3, [r4, #16]
 801214c:	68a2      	ldr	r2, [r4, #8]
 801214e:	7da0      	ldrb	r0, [r4, #22]
 8012150:	2104      	movs	r1, #4
 8012152:	3304      	adds	r3, #4
 8012154:	4452      	add	r2, sl
 8012156:	eba3 0308 	sub.w	r3, r3, r8
 801215a:	7561      	strb	r1, [r4, #21]
 801215c:	60a2      	str	r2, [r4, #8]
 801215e:	6123      	str	r3, [r4, #16]
 8012160:	f080 0001 	eor.w	r0, r0, #1
 8012164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012168:	2104      	movs	r1, #4
 801216a:	4620      	mov	r0, r4
 801216c:	f001 f8c2 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8012170:	b1a8      	cbz	r0, 801219e <ucdr_deserialize_endian_uint32_t+0xce>
 8012172:	2e01      	cmp	r6, #1
 8012174:	68a3      	ldr	r3, [r4, #8]
 8012176:	d017      	beq.n	80121a8 <ucdr_deserialize_endian_uint32_t+0xd8>
 8012178:	78db      	ldrb	r3, [r3, #3]
 801217a:	702b      	strb	r3, [r5, #0]
 801217c:	68a3      	ldr	r3, [r4, #8]
 801217e:	789b      	ldrb	r3, [r3, #2]
 8012180:	706b      	strb	r3, [r5, #1]
 8012182:	68a3      	ldr	r3, [r4, #8]
 8012184:	785b      	ldrb	r3, [r3, #1]
 8012186:	70ab      	strb	r3, [r5, #2]
 8012188:	68a3      	ldr	r3, [r4, #8]
 801218a:	781b      	ldrb	r3, [r3, #0]
 801218c:	70eb      	strb	r3, [r5, #3]
 801218e:	68a2      	ldr	r2, [r4, #8]
 8012190:	6923      	ldr	r3, [r4, #16]
 8012192:	3204      	adds	r2, #4
 8012194:	3304      	adds	r3, #4
 8012196:	2104      	movs	r1, #4
 8012198:	60a2      	str	r2, [r4, #8]
 801219a:	6123      	str	r3, [r4, #16]
 801219c:	7561      	strb	r1, [r4, #21]
 801219e:	7da0      	ldrb	r0, [r4, #22]
 80121a0:	f080 0001 	eor.w	r0, r0, #1
 80121a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	602b      	str	r3, [r5, #0]
 80121ac:	e7ef      	b.n	801218e <ucdr_deserialize_endian_uint32_t+0xbe>
 80121ae:	68a2      	ldr	r2, [r4, #8]
 80121b0:	6923      	ldr	r3, [r4, #16]
 80121b2:	7da0      	ldrb	r0, [r4, #22]
 80121b4:	f884 9015 	strb.w	r9, [r4, #21]
 80121b8:	eba2 0208 	sub.w	r2, r2, r8
 80121bc:	eba3 0308 	sub.w	r3, r3, r8
 80121c0:	60a2      	str	r2, [r4, #8]
 80121c2:	6123      	str	r3, [r4, #16]
 80121c4:	f080 0001 	eor.w	r0, r0, #1
 80121c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121cc:	68a3      	ldr	r3, [r4, #8]
 80121ce:	789b      	ldrb	r3, [r3, #2]
 80121d0:	706b      	strb	r3, [r5, #1]
 80121d2:	1cab      	adds	r3, r5, #2
 80121d4:	68a2      	ldr	r2, [r4, #8]
 80121d6:	7852      	ldrb	r2, [r2, #1]
 80121d8:	f803 2b01 	strb.w	r2, [r3], #1
 80121dc:	68a2      	ldr	r2, [r4, #8]
 80121de:	7812      	ldrb	r2, [r2, #0]
 80121e0:	701a      	strb	r2, [r3, #0]
 80121e2:	e7b2      	b.n	801214a <ucdr_deserialize_endian_uint32_t+0x7a>
 80121e4:	4639      	mov	r1, r7
 80121e6:	4642      	mov	r2, r8
 80121e8:	4628      	mov	r0, r5
 80121ea:	f00e fab0 	bl	802074e <memcpy>
 80121ee:	68a1      	ldr	r1, [r4, #8]
 80121f0:	4652      	mov	r2, sl
 80121f2:	eb05 0008 	add.w	r0, r5, r8
 80121f6:	f00e faaa 	bl	802074e <memcpy>
 80121fa:	e7a6      	b.n	801214a <ucdr_deserialize_endian_uint32_t+0x7a>

080121fc <ucdr_serialize_uint64_t>:
 80121fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012200:	2108      	movs	r1, #8
 8012202:	b082      	sub	sp, #8
 8012204:	4604      	mov	r4, r0
 8012206:	e9cd 2300 	strd	r2, r3, [sp]
 801220a:	f001 f8c7 	bl	801339c <ucdr_buffer_alignment>
 801220e:	4601      	mov	r1, r0
 8012210:	4620      	mov	r0, r4
 8012212:	7d67      	ldrb	r7, [r4, #21]
 8012214:	f001 f906 	bl	8013424 <ucdr_advance_buffer>
 8012218:	2108      	movs	r1, #8
 801221a:	4620      	mov	r0, r4
 801221c:	f001 f85e 	bl	80132dc <ucdr_check_buffer_available_for>
 8012220:	2800      	cmp	r0, #0
 8012222:	d14e      	bne.n	80122c2 <ucdr_serialize_uint64_t+0xc6>
 8012224:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012228:	42ab      	cmp	r3, r5
 801222a:	d945      	bls.n	80122b8 <ucdr_serialize_uint64_t+0xbc>
 801222c:	1b5e      	subs	r6, r3, r5
 801222e:	60a3      	str	r3, [r4, #8]
 8012230:	6923      	ldr	r3, [r4, #16]
 8012232:	f1c6 0808 	rsb	r8, r6, #8
 8012236:	4433      	add	r3, r6
 8012238:	6123      	str	r3, [r4, #16]
 801223a:	4641      	mov	r1, r8
 801223c:	4620      	mov	r0, r4
 801223e:	f001 f859 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8012242:	2800      	cmp	r0, #0
 8012244:	d074      	beq.n	8012330 <ucdr_serialize_uint64_t+0x134>
 8012246:	7d23      	ldrb	r3, [r4, #20]
 8012248:	2b01      	cmp	r3, #1
 801224a:	f000 809b 	beq.w	8012384 <ucdr_serialize_uint64_t+0x188>
 801224e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012252:	702b      	strb	r3, [r5, #0]
 8012254:	2e00      	cmp	r6, #0
 8012256:	d078      	beq.n	801234a <ucdr_serialize_uint64_t+0x14e>
 8012258:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801225c:	706b      	strb	r3, [r5, #1]
 801225e:	2e01      	cmp	r6, #1
 8012260:	d077      	beq.n	8012352 <ucdr_serialize_uint64_t+0x156>
 8012262:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012266:	70ab      	strb	r3, [r5, #2]
 8012268:	2e02      	cmp	r6, #2
 801226a:	d076      	beq.n	801235a <ucdr_serialize_uint64_t+0x15e>
 801226c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012270:	70eb      	strb	r3, [r5, #3]
 8012272:	2e03      	cmp	r6, #3
 8012274:	d075      	beq.n	8012362 <ucdr_serialize_uint64_t+0x166>
 8012276:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801227a:	712b      	strb	r3, [r5, #4]
 801227c:	2e04      	cmp	r6, #4
 801227e:	d074      	beq.n	801236a <ucdr_serialize_uint64_t+0x16e>
 8012280:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012284:	716b      	strb	r3, [r5, #5]
 8012286:	2e05      	cmp	r6, #5
 8012288:	d073      	beq.n	8012372 <ucdr_serialize_uint64_t+0x176>
 801228a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801228e:	71ab      	strb	r3, [r5, #6]
 8012290:	2e06      	cmp	r6, #6
 8012292:	d072      	beq.n	801237a <ucdr_serialize_uint64_t+0x17e>
 8012294:	f89d 3000 	ldrb.w	r3, [sp]
 8012298:	71eb      	strb	r3, [r5, #7]
 801229a:	6923      	ldr	r3, [r4, #16]
 801229c:	68a2      	ldr	r2, [r4, #8]
 801229e:	7da0      	ldrb	r0, [r4, #22]
 80122a0:	3308      	adds	r3, #8
 80122a2:	1b9e      	subs	r6, r3, r6
 80122a4:	4442      	add	r2, r8
 80122a6:	2308      	movs	r3, #8
 80122a8:	f080 0001 	eor.w	r0, r0, #1
 80122ac:	60a2      	str	r2, [r4, #8]
 80122ae:	6126      	str	r6, [r4, #16]
 80122b0:	7563      	strb	r3, [r4, #21]
 80122b2:	b002      	add	sp, #8
 80122b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122b8:	2108      	movs	r1, #8
 80122ba:	4620      	mov	r0, r4
 80122bc:	f001 f81a 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 80122c0:	b350      	cbz	r0, 8012318 <ucdr_serialize_uint64_t+0x11c>
 80122c2:	7d23      	ldrb	r3, [r4, #20]
 80122c4:	2b01      	cmp	r3, #1
 80122c6:	d02d      	beq.n	8012324 <ucdr_serialize_uint64_t+0x128>
 80122c8:	68a3      	ldr	r3, [r4, #8]
 80122ca:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80122ce:	701a      	strb	r2, [r3, #0]
 80122d0:	68a3      	ldr	r3, [r4, #8]
 80122d2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80122d6:	705a      	strb	r2, [r3, #1]
 80122d8:	68a3      	ldr	r3, [r4, #8]
 80122da:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80122de:	709a      	strb	r2, [r3, #2]
 80122e0:	68a3      	ldr	r3, [r4, #8]
 80122e2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80122e6:	70da      	strb	r2, [r3, #3]
 80122e8:	68a3      	ldr	r3, [r4, #8]
 80122ea:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80122ee:	711a      	strb	r2, [r3, #4]
 80122f0:	68a3      	ldr	r3, [r4, #8]
 80122f2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80122f6:	715a      	strb	r2, [r3, #5]
 80122f8:	68a3      	ldr	r3, [r4, #8]
 80122fa:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80122fe:	719a      	strb	r2, [r3, #6]
 8012300:	68a3      	ldr	r3, [r4, #8]
 8012302:	f89d 2000 	ldrb.w	r2, [sp]
 8012306:	71da      	strb	r2, [r3, #7]
 8012308:	68a2      	ldr	r2, [r4, #8]
 801230a:	6923      	ldr	r3, [r4, #16]
 801230c:	3208      	adds	r2, #8
 801230e:	3308      	adds	r3, #8
 8012310:	2108      	movs	r1, #8
 8012312:	60a2      	str	r2, [r4, #8]
 8012314:	6123      	str	r3, [r4, #16]
 8012316:	7561      	strb	r1, [r4, #21]
 8012318:	7da0      	ldrb	r0, [r4, #22]
 801231a:	f080 0001 	eor.w	r0, r0, #1
 801231e:	b002      	add	sp, #8
 8012320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012324:	466b      	mov	r3, sp
 8012326:	cb03      	ldmia	r3!, {r0, r1}
 8012328:	68a3      	ldr	r3, [r4, #8]
 801232a:	6018      	str	r0, [r3, #0]
 801232c:	6059      	str	r1, [r3, #4]
 801232e:	e7eb      	b.n	8012308 <ucdr_serialize_uint64_t+0x10c>
 8012330:	68a2      	ldr	r2, [r4, #8]
 8012332:	6923      	ldr	r3, [r4, #16]
 8012334:	7da0      	ldrb	r0, [r4, #22]
 8012336:	7567      	strb	r7, [r4, #21]
 8012338:	1b92      	subs	r2, r2, r6
 801233a:	1b9b      	subs	r3, r3, r6
 801233c:	f080 0001 	eor.w	r0, r0, #1
 8012340:	60a2      	str	r2, [r4, #8]
 8012342:	6123      	str	r3, [r4, #16]
 8012344:	b002      	add	sp, #8
 8012346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801234a:	68a3      	ldr	r3, [r4, #8]
 801234c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012350:	701a      	strb	r2, [r3, #0]
 8012352:	68a3      	ldr	r3, [r4, #8]
 8012354:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012358:	701a      	strb	r2, [r3, #0]
 801235a:	68a3      	ldr	r3, [r4, #8]
 801235c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012360:	701a      	strb	r2, [r3, #0]
 8012362:	68a3      	ldr	r3, [r4, #8]
 8012364:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012368:	701a      	strb	r2, [r3, #0]
 801236a:	68a3      	ldr	r3, [r4, #8]
 801236c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012370:	701a      	strb	r2, [r3, #0]
 8012372:	68a3      	ldr	r3, [r4, #8]
 8012374:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012378:	701a      	strb	r2, [r3, #0]
 801237a:	68a3      	ldr	r3, [r4, #8]
 801237c:	f89d 2000 	ldrb.w	r2, [sp]
 8012380:	701a      	strb	r2, [r3, #0]
 8012382:	e78a      	b.n	801229a <ucdr_serialize_uint64_t+0x9e>
 8012384:	4628      	mov	r0, r5
 8012386:	466d      	mov	r5, sp
 8012388:	4629      	mov	r1, r5
 801238a:	4632      	mov	r2, r6
 801238c:	f00e f9df 	bl	802074e <memcpy>
 8012390:	68a0      	ldr	r0, [r4, #8]
 8012392:	4642      	mov	r2, r8
 8012394:	19a9      	adds	r1, r5, r6
 8012396:	f00e f9da 	bl	802074e <memcpy>
 801239a:	e77e      	b.n	801229a <ucdr_serialize_uint64_t+0x9e>

0801239c <ucdr_serialize_int16_t>:
 801239c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123a0:	b082      	sub	sp, #8
 80123a2:	460b      	mov	r3, r1
 80123a4:	2102      	movs	r1, #2
 80123a6:	4604      	mov	r4, r0
 80123a8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80123ac:	f000 fff6 	bl	801339c <ucdr_buffer_alignment>
 80123b0:	4601      	mov	r1, r0
 80123b2:	4620      	mov	r0, r4
 80123b4:	7d67      	ldrb	r7, [r4, #21]
 80123b6:	f001 f835 	bl	8013424 <ucdr_advance_buffer>
 80123ba:	2102      	movs	r1, #2
 80123bc:	4620      	mov	r0, r4
 80123be:	f000 ff8d 	bl	80132dc <ucdr_check_buffer_available_for>
 80123c2:	bb78      	cbnz	r0, 8012424 <ucdr_serialize_int16_t+0x88>
 80123c4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80123c8:	42ab      	cmp	r3, r5
 80123ca:	d926      	bls.n	801241a <ucdr_serialize_int16_t+0x7e>
 80123cc:	1b5e      	subs	r6, r3, r5
 80123ce:	60a3      	str	r3, [r4, #8]
 80123d0:	6923      	ldr	r3, [r4, #16]
 80123d2:	f1c6 0802 	rsb	r8, r6, #2
 80123d6:	4433      	add	r3, r6
 80123d8:	6123      	str	r3, [r4, #16]
 80123da:	4641      	mov	r1, r8
 80123dc:	4620      	mov	r0, r4
 80123de:	f000 ff89 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 80123e2:	2800      	cmp	r0, #0
 80123e4:	d03b      	beq.n	801245e <ucdr_serialize_int16_t+0xc2>
 80123e6:	7d23      	ldrb	r3, [r4, #20]
 80123e8:	2b01      	cmp	r3, #1
 80123ea:	d04a      	beq.n	8012482 <ucdr_serialize_int16_t+0xe6>
 80123ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80123f0:	702b      	strb	r3, [r5, #0]
 80123f2:	2e00      	cmp	r6, #0
 80123f4:	d040      	beq.n	8012478 <ucdr_serialize_int16_t+0xdc>
 80123f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80123fa:	706b      	strb	r3, [r5, #1]
 80123fc:	6923      	ldr	r3, [r4, #16]
 80123fe:	68a2      	ldr	r2, [r4, #8]
 8012400:	7da0      	ldrb	r0, [r4, #22]
 8012402:	3302      	adds	r3, #2
 8012404:	1b9e      	subs	r6, r3, r6
 8012406:	4442      	add	r2, r8
 8012408:	2302      	movs	r3, #2
 801240a:	f080 0001 	eor.w	r0, r0, #1
 801240e:	60a2      	str	r2, [r4, #8]
 8012410:	6126      	str	r6, [r4, #16]
 8012412:	7563      	strb	r3, [r4, #21]
 8012414:	b002      	add	sp, #8
 8012416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801241a:	2102      	movs	r1, #2
 801241c:	4620      	mov	r0, r4
 801241e:	f000 ff69 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8012422:	b190      	cbz	r0, 801244a <ucdr_serialize_int16_t+0xae>
 8012424:	7d23      	ldrb	r3, [r4, #20]
 8012426:	2b01      	cmp	r3, #1
 8012428:	68a3      	ldr	r3, [r4, #8]
 801242a:	d014      	beq.n	8012456 <ucdr_serialize_int16_t+0xba>
 801242c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012430:	701a      	strb	r2, [r3, #0]
 8012432:	68a3      	ldr	r3, [r4, #8]
 8012434:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012438:	705a      	strb	r2, [r3, #1]
 801243a:	68a2      	ldr	r2, [r4, #8]
 801243c:	6923      	ldr	r3, [r4, #16]
 801243e:	3202      	adds	r2, #2
 8012440:	3302      	adds	r3, #2
 8012442:	2102      	movs	r1, #2
 8012444:	60a2      	str	r2, [r4, #8]
 8012446:	6123      	str	r3, [r4, #16]
 8012448:	7561      	strb	r1, [r4, #21]
 801244a:	7da0      	ldrb	r0, [r4, #22]
 801244c:	f080 0001 	eor.w	r0, r0, #1
 8012450:	b002      	add	sp, #8
 8012452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012456:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801245a:	801a      	strh	r2, [r3, #0]
 801245c:	e7ed      	b.n	801243a <ucdr_serialize_int16_t+0x9e>
 801245e:	68a2      	ldr	r2, [r4, #8]
 8012460:	6923      	ldr	r3, [r4, #16]
 8012462:	7da0      	ldrb	r0, [r4, #22]
 8012464:	7567      	strb	r7, [r4, #21]
 8012466:	1b92      	subs	r2, r2, r6
 8012468:	1b9b      	subs	r3, r3, r6
 801246a:	f080 0001 	eor.w	r0, r0, #1
 801246e:	60a2      	str	r2, [r4, #8]
 8012470:	6123      	str	r3, [r4, #16]
 8012472:	b002      	add	sp, #8
 8012474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012478:	68a3      	ldr	r3, [r4, #8]
 801247a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801247e:	701a      	strb	r2, [r3, #0]
 8012480:	e7bc      	b.n	80123fc <ucdr_serialize_int16_t+0x60>
 8012482:	4628      	mov	r0, r5
 8012484:	f10d 0506 	add.w	r5, sp, #6
 8012488:	4629      	mov	r1, r5
 801248a:	4632      	mov	r2, r6
 801248c:	f00e f95f 	bl	802074e <memcpy>
 8012490:	68a0      	ldr	r0, [r4, #8]
 8012492:	4642      	mov	r2, r8
 8012494:	19a9      	adds	r1, r5, r6
 8012496:	f00e f95a 	bl	802074e <memcpy>
 801249a:	e7af      	b.n	80123fc <ucdr_serialize_int16_t+0x60>

0801249c <ucdr_deserialize_int16_t>:
 801249c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124a0:	460d      	mov	r5, r1
 80124a2:	2102      	movs	r1, #2
 80124a4:	4604      	mov	r4, r0
 80124a6:	f000 ff79 	bl	801339c <ucdr_buffer_alignment>
 80124aa:	4601      	mov	r1, r0
 80124ac:	4620      	mov	r0, r4
 80124ae:	f894 8015 	ldrb.w	r8, [r4, #21]
 80124b2:	f000 ffb7 	bl	8013424 <ucdr_advance_buffer>
 80124b6:	2102      	movs	r1, #2
 80124b8:	4620      	mov	r0, r4
 80124ba:	f000 ff0f 	bl	80132dc <ucdr_check_buffer_available_for>
 80124be:	bb60      	cbnz	r0, 801251a <ucdr_deserialize_int16_t+0x7e>
 80124c0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80124c4:	42be      	cmp	r6, r7
 80124c6:	d923      	bls.n	8012510 <ucdr_deserialize_int16_t+0x74>
 80124c8:	6923      	ldr	r3, [r4, #16]
 80124ca:	60a6      	str	r6, [r4, #8]
 80124cc:	1bf6      	subs	r6, r6, r7
 80124ce:	4433      	add	r3, r6
 80124d0:	f1c6 0902 	rsb	r9, r6, #2
 80124d4:	6123      	str	r3, [r4, #16]
 80124d6:	4649      	mov	r1, r9
 80124d8:	4620      	mov	r0, r4
 80124da:	f000 ff0b 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 80124de:	2800      	cmp	r0, #0
 80124e0:	d034      	beq.n	801254c <ucdr_deserialize_int16_t+0xb0>
 80124e2:	7d23      	ldrb	r3, [r4, #20]
 80124e4:	2b01      	cmp	r3, #1
 80124e6:	d042      	beq.n	801256e <ucdr_deserialize_int16_t+0xd2>
 80124e8:	787b      	ldrb	r3, [r7, #1]
 80124ea:	702b      	strb	r3, [r5, #0]
 80124ec:	2e00      	cmp	r6, #0
 80124ee:	d03a      	beq.n	8012566 <ucdr_deserialize_int16_t+0xca>
 80124f0:	783b      	ldrb	r3, [r7, #0]
 80124f2:	706b      	strb	r3, [r5, #1]
 80124f4:	6923      	ldr	r3, [r4, #16]
 80124f6:	68a2      	ldr	r2, [r4, #8]
 80124f8:	7da0      	ldrb	r0, [r4, #22]
 80124fa:	2102      	movs	r1, #2
 80124fc:	3302      	adds	r3, #2
 80124fe:	444a      	add	r2, r9
 8012500:	1b9b      	subs	r3, r3, r6
 8012502:	7561      	strb	r1, [r4, #21]
 8012504:	60a2      	str	r2, [r4, #8]
 8012506:	6123      	str	r3, [r4, #16]
 8012508:	f080 0001 	eor.w	r0, r0, #1
 801250c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012510:	2102      	movs	r1, #2
 8012512:	4620      	mov	r0, r4
 8012514:	f000 feee 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8012518:	b180      	cbz	r0, 801253c <ucdr_deserialize_int16_t+0xa0>
 801251a:	7d23      	ldrb	r3, [r4, #20]
 801251c:	2b01      	cmp	r3, #1
 801251e:	68a3      	ldr	r3, [r4, #8]
 8012520:	d011      	beq.n	8012546 <ucdr_deserialize_int16_t+0xaa>
 8012522:	785b      	ldrb	r3, [r3, #1]
 8012524:	702b      	strb	r3, [r5, #0]
 8012526:	68a3      	ldr	r3, [r4, #8]
 8012528:	781b      	ldrb	r3, [r3, #0]
 801252a:	706b      	strb	r3, [r5, #1]
 801252c:	68a2      	ldr	r2, [r4, #8]
 801252e:	6923      	ldr	r3, [r4, #16]
 8012530:	3202      	adds	r2, #2
 8012532:	3302      	adds	r3, #2
 8012534:	2102      	movs	r1, #2
 8012536:	60a2      	str	r2, [r4, #8]
 8012538:	6123      	str	r3, [r4, #16]
 801253a:	7561      	strb	r1, [r4, #21]
 801253c:	7da0      	ldrb	r0, [r4, #22]
 801253e:	f080 0001 	eor.w	r0, r0, #1
 8012542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012546:	881b      	ldrh	r3, [r3, #0]
 8012548:	802b      	strh	r3, [r5, #0]
 801254a:	e7ef      	b.n	801252c <ucdr_deserialize_int16_t+0x90>
 801254c:	68a2      	ldr	r2, [r4, #8]
 801254e:	6923      	ldr	r3, [r4, #16]
 8012550:	7da0      	ldrb	r0, [r4, #22]
 8012552:	f884 8015 	strb.w	r8, [r4, #21]
 8012556:	1b92      	subs	r2, r2, r6
 8012558:	1b9b      	subs	r3, r3, r6
 801255a:	60a2      	str	r2, [r4, #8]
 801255c:	6123      	str	r3, [r4, #16]
 801255e:	f080 0001 	eor.w	r0, r0, #1
 8012562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012566:	68a3      	ldr	r3, [r4, #8]
 8012568:	781b      	ldrb	r3, [r3, #0]
 801256a:	706b      	strb	r3, [r5, #1]
 801256c:	e7c2      	b.n	80124f4 <ucdr_deserialize_int16_t+0x58>
 801256e:	4639      	mov	r1, r7
 8012570:	4632      	mov	r2, r6
 8012572:	4628      	mov	r0, r5
 8012574:	f00e f8eb 	bl	802074e <memcpy>
 8012578:	68a1      	ldr	r1, [r4, #8]
 801257a:	464a      	mov	r2, r9
 801257c:	19a8      	adds	r0, r5, r6
 801257e:	f00e f8e6 	bl	802074e <memcpy>
 8012582:	e7b7      	b.n	80124f4 <ucdr_deserialize_int16_t+0x58>

08012584 <ucdr_serialize_int32_t>:
 8012584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012588:	b082      	sub	sp, #8
 801258a:	4604      	mov	r4, r0
 801258c:	9101      	str	r1, [sp, #4]
 801258e:	2104      	movs	r1, #4
 8012590:	f000 ff04 	bl	801339c <ucdr_buffer_alignment>
 8012594:	4601      	mov	r1, r0
 8012596:	4620      	mov	r0, r4
 8012598:	7d67      	ldrb	r7, [r4, #21]
 801259a:	f000 ff43 	bl	8013424 <ucdr_advance_buffer>
 801259e:	2104      	movs	r1, #4
 80125a0:	4620      	mov	r0, r4
 80125a2:	f000 fe9b 	bl	80132dc <ucdr_check_buffer_available_for>
 80125a6:	2800      	cmp	r0, #0
 80125a8:	d139      	bne.n	801261e <ucdr_serialize_int32_t+0x9a>
 80125aa:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80125ae:	42ab      	cmp	r3, r5
 80125b0:	d930      	bls.n	8012614 <ucdr_serialize_int32_t+0x90>
 80125b2:	1b5e      	subs	r6, r3, r5
 80125b4:	60a3      	str	r3, [r4, #8]
 80125b6:	6923      	ldr	r3, [r4, #16]
 80125b8:	f1c6 0804 	rsb	r8, r6, #4
 80125bc:	4433      	add	r3, r6
 80125be:	6123      	str	r3, [r4, #16]
 80125c0:	4641      	mov	r1, r8
 80125c2:	4620      	mov	r0, r4
 80125c4:	f000 fe96 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 80125c8:	2800      	cmp	r0, #0
 80125ca:	d04c      	beq.n	8012666 <ucdr_serialize_int32_t+0xe2>
 80125cc:	7d23      	ldrb	r3, [r4, #20]
 80125ce:	2b01      	cmp	r3, #1
 80125d0:	d063      	beq.n	801269a <ucdr_serialize_int32_t+0x116>
 80125d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80125d6:	702b      	strb	r3, [r5, #0]
 80125d8:	2e00      	cmp	r6, #0
 80125da:	d051      	beq.n	8012680 <ucdr_serialize_int32_t+0xfc>
 80125dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80125e0:	706b      	strb	r3, [r5, #1]
 80125e2:	2e01      	cmp	r6, #1
 80125e4:	d050      	beq.n	8012688 <ucdr_serialize_int32_t+0x104>
 80125e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80125ea:	70ab      	strb	r3, [r5, #2]
 80125ec:	2e02      	cmp	r6, #2
 80125ee:	d04f      	beq.n	8012690 <ucdr_serialize_int32_t+0x10c>
 80125f0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80125f4:	70eb      	strb	r3, [r5, #3]
 80125f6:	6923      	ldr	r3, [r4, #16]
 80125f8:	68a2      	ldr	r2, [r4, #8]
 80125fa:	7da0      	ldrb	r0, [r4, #22]
 80125fc:	3304      	adds	r3, #4
 80125fe:	1b9e      	subs	r6, r3, r6
 8012600:	4442      	add	r2, r8
 8012602:	2304      	movs	r3, #4
 8012604:	f080 0001 	eor.w	r0, r0, #1
 8012608:	60a2      	str	r2, [r4, #8]
 801260a:	6126      	str	r6, [r4, #16]
 801260c:	7563      	strb	r3, [r4, #21]
 801260e:	b002      	add	sp, #8
 8012610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012614:	2104      	movs	r1, #4
 8012616:	4620      	mov	r0, r4
 8012618:	f000 fe6c 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 801261c:	b1d0      	cbz	r0, 8012654 <ucdr_serialize_int32_t+0xd0>
 801261e:	7d23      	ldrb	r3, [r4, #20]
 8012620:	2b01      	cmp	r3, #1
 8012622:	68a3      	ldr	r3, [r4, #8]
 8012624:	d01c      	beq.n	8012660 <ucdr_serialize_int32_t+0xdc>
 8012626:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801262a:	701a      	strb	r2, [r3, #0]
 801262c:	68a3      	ldr	r3, [r4, #8]
 801262e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012632:	705a      	strb	r2, [r3, #1]
 8012634:	68a3      	ldr	r3, [r4, #8]
 8012636:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801263a:	709a      	strb	r2, [r3, #2]
 801263c:	68a3      	ldr	r3, [r4, #8]
 801263e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012642:	70da      	strb	r2, [r3, #3]
 8012644:	68a2      	ldr	r2, [r4, #8]
 8012646:	6923      	ldr	r3, [r4, #16]
 8012648:	3204      	adds	r2, #4
 801264a:	3304      	adds	r3, #4
 801264c:	2104      	movs	r1, #4
 801264e:	60a2      	str	r2, [r4, #8]
 8012650:	6123      	str	r3, [r4, #16]
 8012652:	7561      	strb	r1, [r4, #21]
 8012654:	7da0      	ldrb	r0, [r4, #22]
 8012656:	f080 0001 	eor.w	r0, r0, #1
 801265a:	b002      	add	sp, #8
 801265c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012660:	9a01      	ldr	r2, [sp, #4]
 8012662:	601a      	str	r2, [r3, #0]
 8012664:	e7ee      	b.n	8012644 <ucdr_serialize_int32_t+0xc0>
 8012666:	68a2      	ldr	r2, [r4, #8]
 8012668:	6923      	ldr	r3, [r4, #16]
 801266a:	7da0      	ldrb	r0, [r4, #22]
 801266c:	7567      	strb	r7, [r4, #21]
 801266e:	1b92      	subs	r2, r2, r6
 8012670:	1b9b      	subs	r3, r3, r6
 8012672:	f080 0001 	eor.w	r0, r0, #1
 8012676:	60a2      	str	r2, [r4, #8]
 8012678:	6123      	str	r3, [r4, #16]
 801267a:	b002      	add	sp, #8
 801267c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012680:	68a3      	ldr	r3, [r4, #8]
 8012682:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012686:	701a      	strb	r2, [r3, #0]
 8012688:	68a3      	ldr	r3, [r4, #8]
 801268a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801268e:	701a      	strb	r2, [r3, #0]
 8012690:	68a3      	ldr	r3, [r4, #8]
 8012692:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012696:	701a      	strb	r2, [r3, #0]
 8012698:	e7ad      	b.n	80125f6 <ucdr_serialize_int32_t+0x72>
 801269a:	4628      	mov	r0, r5
 801269c:	ad01      	add	r5, sp, #4
 801269e:	4629      	mov	r1, r5
 80126a0:	4632      	mov	r2, r6
 80126a2:	f00e f854 	bl	802074e <memcpy>
 80126a6:	68a0      	ldr	r0, [r4, #8]
 80126a8:	4642      	mov	r2, r8
 80126aa:	19a9      	adds	r1, r5, r6
 80126ac:	f00e f84f 	bl	802074e <memcpy>
 80126b0:	e7a1      	b.n	80125f6 <ucdr_serialize_int32_t+0x72>
 80126b2:	bf00      	nop

080126b4 <ucdr_deserialize_int32_t>:
 80126b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126b8:	460d      	mov	r5, r1
 80126ba:	2104      	movs	r1, #4
 80126bc:	4604      	mov	r4, r0
 80126be:	f000 fe6d 	bl	801339c <ucdr_buffer_alignment>
 80126c2:	4601      	mov	r1, r0
 80126c4:	4620      	mov	r0, r4
 80126c6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80126ca:	f000 feab 	bl	8013424 <ucdr_advance_buffer>
 80126ce:	2104      	movs	r1, #4
 80126d0:	4620      	mov	r0, r4
 80126d2:	f000 fe03 	bl	80132dc <ucdr_check_buffer_available_for>
 80126d6:	2800      	cmp	r0, #0
 80126d8:	d138      	bne.n	801274c <ucdr_deserialize_int32_t+0x98>
 80126da:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80126de:	42b7      	cmp	r7, r6
 80126e0:	d92f      	bls.n	8012742 <ucdr_deserialize_int32_t+0x8e>
 80126e2:	6923      	ldr	r3, [r4, #16]
 80126e4:	60a7      	str	r7, [r4, #8]
 80126e6:	1bbf      	subs	r7, r7, r6
 80126e8:	443b      	add	r3, r7
 80126ea:	f1c7 0904 	rsb	r9, r7, #4
 80126ee:	6123      	str	r3, [r4, #16]
 80126f0:	4649      	mov	r1, r9
 80126f2:	4620      	mov	r0, r4
 80126f4:	f000 fdfe 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 80126f8:	2800      	cmp	r0, #0
 80126fa:	d046      	beq.n	801278a <ucdr_deserialize_int32_t+0xd6>
 80126fc:	7d23      	ldrb	r3, [r4, #20]
 80126fe:	2b01      	cmp	r3, #1
 8012700:	d05c      	beq.n	80127bc <ucdr_deserialize_int32_t+0x108>
 8012702:	78f3      	ldrb	r3, [r6, #3]
 8012704:	702b      	strb	r3, [r5, #0]
 8012706:	2f00      	cmp	r7, #0
 8012708:	d04c      	beq.n	80127a4 <ucdr_deserialize_int32_t+0xf0>
 801270a:	78b3      	ldrb	r3, [r6, #2]
 801270c:	706b      	strb	r3, [r5, #1]
 801270e:	2f01      	cmp	r7, #1
 8012710:	f105 0302 	add.w	r3, r5, #2
 8012714:	d04a      	beq.n	80127ac <ucdr_deserialize_int32_t+0xf8>
 8012716:	7873      	ldrb	r3, [r6, #1]
 8012718:	70ab      	strb	r3, [r5, #2]
 801271a:	2f02      	cmp	r7, #2
 801271c:	f105 0303 	add.w	r3, r5, #3
 8012720:	d048      	beq.n	80127b4 <ucdr_deserialize_int32_t+0x100>
 8012722:	7833      	ldrb	r3, [r6, #0]
 8012724:	70eb      	strb	r3, [r5, #3]
 8012726:	6923      	ldr	r3, [r4, #16]
 8012728:	68a2      	ldr	r2, [r4, #8]
 801272a:	7da0      	ldrb	r0, [r4, #22]
 801272c:	2104      	movs	r1, #4
 801272e:	3304      	adds	r3, #4
 8012730:	444a      	add	r2, r9
 8012732:	1bdb      	subs	r3, r3, r7
 8012734:	7561      	strb	r1, [r4, #21]
 8012736:	60a2      	str	r2, [r4, #8]
 8012738:	6123      	str	r3, [r4, #16]
 801273a:	f080 0001 	eor.w	r0, r0, #1
 801273e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012742:	2104      	movs	r1, #4
 8012744:	4620      	mov	r0, r4
 8012746:	f000 fdd5 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 801274a:	b1b0      	cbz	r0, 801277a <ucdr_deserialize_int32_t+0xc6>
 801274c:	7d23      	ldrb	r3, [r4, #20]
 801274e:	2b01      	cmp	r3, #1
 8012750:	68a3      	ldr	r3, [r4, #8]
 8012752:	d017      	beq.n	8012784 <ucdr_deserialize_int32_t+0xd0>
 8012754:	78db      	ldrb	r3, [r3, #3]
 8012756:	702b      	strb	r3, [r5, #0]
 8012758:	68a3      	ldr	r3, [r4, #8]
 801275a:	789b      	ldrb	r3, [r3, #2]
 801275c:	706b      	strb	r3, [r5, #1]
 801275e:	68a3      	ldr	r3, [r4, #8]
 8012760:	785b      	ldrb	r3, [r3, #1]
 8012762:	70ab      	strb	r3, [r5, #2]
 8012764:	68a3      	ldr	r3, [r4, #8]
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	70eb      	strb	r3, [r5, #3]
 801276a:	68a2      	ldr	r2, [r4, #8]
 801276c:	6923      	ldr	r3, [r4, #16]
 801276e:	3204      	adds	r2, #4
 8012770:	3304      	adds	r3, #4
 8012772:	2104      	movs	r1, #4
 8012774:	60a2      	str	r2, [r4, #8]
 8012776:	6123      	str	r3, [r4, #16]
 8012778:	7561      	strb	r1, [r4, #21]
 801277a:	7da0      	ldrb	r0, [r4, #22]
 801277c:	f080 0001 	eor.w	r0, r0, #1
 8012780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	602b      	str	r3, [r5, #0]
 8012788:	e7ef      	b.n	801276a <ucdr_deserialize_int32_t+0xb6>
 801278a:	68a2      	ldr	r2, [r4, #8]
 801278c:	6923      	ldr	r3, [r4, #16]
 801278e:	7da0      	ldrb	r0, [r4, #22]
 8012790:	f884 8015 	strb.w	r8, [r4, #21]
 8012794:	1bd2      	subs	r2, r2, r7
 8012796:	1bdb      	subs	r3, r3, r7
 8012798:	60a2      	str	r2, [r4, #8]
 801279a:	6123      	str	r3, [r4, #16]
 801279c:	f080 0001 	eor.w	r0, r0, #1
 80127a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127a4:	68a3      	ldr	r3, [r4, #8]
 80127a6:	789b      	ldrb	r3, [r3, #2]
 80127a8:	706b      	strb	r3, [r5, #1]
 80127aa:	1cab      	adds	r3, r5, #2
 80127ac:	68a2      	ldr	r2, [r4, #8]
 80127ae:	7852      	ldrb	r2, [r2, #1]
 80127b0:	f803 2b01 	strb.w	r2, [r3], #1
 80127b4:	68a2      	ldr	r2, [r4, #8]
 80127b6:	7812      	ldrb	r2, [r2, #0]
 80127b8:	701a      	strb	r2, [r3, #0]
 80127ba:	e7b4      	b.n	8012726 <ucdr_deserialize_int32_t+0x72>
 80127bc:	4631      	mov	r1, r6
 80127be:	463a      	mov	r2, r7
 80127c0:	4628      	mov	r0, r5
 80127c2:	f00d ffc4 	bl	802074e <memcpy>
 80127c6:	68a1      	ldr	r1, [r4, #8]
 80127c8:	464a      	mov	r2, r9
 80127ca:	19e8      	adds	r0, r5, r7
 80127cc:	f00d ffbf 	bl	802074e <memcpy>
 80127d0:	e7a9      	b.n	8012726 <ucdr_deserialize_int32_t+0x72>
 80127d2:	bf00      	nop

080127d4 <ucdr_serialize_int64_t>:
 80127d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127d8:	2108      	movs	r1, #8
 80127da:	b082      	sub	sp, #8
 80127dc:	4604      	mov	r4, r0
 80127de:	e9cd 2300 	strd	r2, r3, [sp]
 80127e2:	f000 fddb 	bl	801339c <ucdr_buffer_alignment>
 80127e6:	4601      	mov	r1, r0
 80127e8:	4620      	mov	r0, r4
 80127ea:	7d67      	ldrb	r7, [r4, #21]
 80127ec:	f000 fe1a 	bl	8013424 <ucdr_advance_buffer>
 80127f0:	2108      	movs	r1, #8
 80127f2:	4620      	mov	r0, r4
 80127f4:	f000 fd72 	bl	80132dc <ucdr_check_buffer_available_for>
 80127f8:	2800      	cmp	r0, #0
 80127fa:	d14e      	bne.n	801289a <ucdr_serialize_int64_t+0xc6>
 80127fc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012800:	42ab      	cmp	r3, r5
 8012802:	d945      	bls.n	8012890 <ucdr_serialize_int64_t+0xbc>
 8012804:	1b5e      	subs	r6, r3, r5
 8012806:	60a3      	str	r3, [r4, #8]
 8012808:	6923      	ldr	r3, [r4, #16]
 801280a:	f1c6 0808 	rsb	r8, r6, #8
 801280e:	4433      	add	r3, r6
 8012810:	6123      	str	r3, [r4, #16]
 8012812:	4641      	mov	r1, r8
 8012814:	4620      	mov	r0, r4
 8012816:	f000 fd6d 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 801281a:	2800      	cmp	r0, #0
 801281c:	d074      	beq.n	8012908 <ucdr_serialize_int64_t+0x134>
 801281e:	7d23      	ldrb	r3, [r4, #20]
 8012820:	2b01      	cmp	r3, #1
 8012822:	f000 809b 	beq.w	801295c <ucdr_serialize_int64_t+0x188>
 8012826:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801282a:	702b      	strb	r3, [r5, #0]
 801282c:	2e00      	cmp	r6, #0
 801282e:	d078      	beq.n	8012922 <ucdr_serialize_int64_t+0x14e>
 8012830:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012834:	706b      	strb	r3, [r5, #1]
 8012836:	2e01      	cmp	r6, #1
 8012838:	d077      	beq.n	801292a <ucdr_serialize_int64_t+0x156>
 801283a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801283e:	70ab      	strb	r3, [r5, #2]
 8012840:	2e02      	cmp	r6, #2
 8012842:	d076      	beq.n	8012932 <ucdr_serialize_int64_t+0x15e>
 8012844:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012848:	70eb      	strb	r3, [r5, #3]
 801284a:	2e03      	cmp	r6, #3
 801284c:	d075      	beq.n	801293a <ucdr_serialize_int64_t+0x166>
 801284e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012852:	712b      	strb	r3, [r5, #4]
 8012854:	2e04      	cmp	r6, #4
 8012856:	d074      	beq.n	8012942 <ucdr_serialize_int64_t+0x16e>
 8012858:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801285c:	716b      	strb	r3, [r5, #5]
 801285e:	2e05      	cmp	r6, #5
 8012860:	d073      	beq.n	801294a <ucdr_serialize_int64_t+0x176>
 8012862:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012866:	71ab      	strb	r3, [r5, #6]
 8012868:	2e06      	cmp	r6, #6
 801286a:	d072      	beq.n	8012952 <ucdr_serialize_int64_t+0x17e>
 801286c:	f89d 3000 	ldrb.w	r3, [sp]
 8012870:	71eb      	strb	r3, [r5, #7]
 8012872:	6923      	ldr	r3, [r4, #16]
 8012874:	68a2      	ldr	r2, [r4, #8]
 8012876:	7da0      	ldrb	r0, [r4, #22]
 8012878:	3308      	adds	r3, #8
 801287a:	1b9e      	subs	r6, r3, r6
 801287c:	4442      	add	r2, r8
 801287e:	2308      	movs	r3, #8
 8012880:	f080 0001 	eor.w	r0, r0, #1
 8012884:	60a2      	str	r2, [r4, #8]
 8012886:	6126      	str	r6, [r4, #16]
 8012888:	7563      	strb	r3, [r4, #21]
 801288a:	b002      	add	sp, #8
 801288c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012890:	2108      	movs	r1, #8
 8012892:	4620      	mov	r0, r4
 8012894:	f000 fd2e 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8012898:	b350      	cbz	r0, 80128f0 <ucdr_serialize_int64_t+0x11c>
 801289a:	7d23      	ldrb	r3, [r4, #20]
 801289c:	2b01      	cmp	r3, #1
 801289e:	d02d      	beq.n	80128fc <ucdr_serialize_int64_t+0x128>
 80128a0:	68a3      	ldr	r3, [r4, #8]
 80128a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80128a6:	701a      	strb	r2, [r3, #0]
 80128a8:	68a3      	ldr	r3, [r4, #8]
 80128aa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80128ae:	705a      	strb	r2, [r3, #1]
 80128b0:	68a3      	ldr	r3, [r4, #8]
 80128b2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80128b6:	709a      	strb	r2, [r3, #2]
 80128b8:	68a3      	ldr	r3, [r4, #8]
 80128ba:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80128be:	70da      	strb	r2, [r3, #3]
 80128c0:	68a3      	ldr	r3, [r4, #8]
 80128c2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80128c6:	711a      	strb	r2, [r3, #4]
 80128c8:	68a3      	ldr	r3, [r4, #8]
 80128ca:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80128ce:	715a      	strb	r2, [r3, #5]
 80128d0:	68a3      	ldr	r3, [r4, #8]
 80128d2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80128d6:	719a      	strb	r2, [r3, #6]
 80128d8:	68a3      	ldr	r3, [r4, #8]
 80128da:	f89d 2000 	ldrb.w	r2, [sp]
 80128de:	71da      	strb	r2, [r3, #7]
 80128e0:	68a2      	ldr	r2, [r4, #8]
 80128e2:	6923      	ldr	r3, [r4, #16]
 80128e4:	3208      	adds	r2, #8
 80128e6:	3308      	adds	r3, #8
 80128e8:	2108      	movs	r1, #8
 80128ea:	60a2      	str	r2, [r4, #8]
 80128ec:	6123      	str	r3, [r4, #16]
 80128ee:	7561      	strb	r1, [r4, #21]
 80128f0:	7da0      	ldrb	r0, [r4, #22]
 80128f2:	f080 0001 	eor.w	r0, r0, #1
 80128f6:	b002      	add	sp, #8
 80128f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128fc:	466b      	mov	r3, sp
 80128fe:	cb03      	ldmia	r3!, {r0, r1}
 8012900:	68a3      	ldr	r3, [r4, #8]
 8012902:	6018      	str	r0, [r3, #0]
 8012904:	6059      	str	r1, [r3, #4]
 8012906:	e7eb      	b.n	80128e0 <ucdr_serialize_int64_t+0x10c>
 8012908:	68a2      	ldr	r2, [r4, #8]
 801290a:	6923      	ldr	r3, [r4, #16]
 801290c:	7da0      	ldrb	r0, [r4, #22]
 801290e:	7567      	strb	r7, [r4, #21]
 8012910:	1b92      	subs	r2, r2, r6
 8012912:	1b9b      	subs	r3, r3, r6
 8012914:	f080 0001 	eor.w	r0, r0, #1
 8012918:	60a2      	str	r2, [r4, #8]
 801291a:	6123      	str	r3, [r4, #16]
 801291c:	b002      	add	sp, #8
 801291e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012922:	68a3      	ldr	r3, [r4, #8]
 8012924:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012928:	701a      	strb	r2, [r3, #0]
 801292a:	68a3      	ldr	r3, [r4, #8]
 801292c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012930:	701a      	strb	r2, [r3, #0]
 8012932:	68a3      	ldr	r3, [r4, #8]
 8012934:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012938:	701a      	strb	r2, [r3, #0]
 801293a:	68a3      	ldr	r3, [r4, #8]
 801293c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012940:	701a      	strb	r2, [r3, #0]
 8012942:	68a3      	ldr	r3, [r4, #8]
 8012944:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012948:	701a      	strb	r2, [r3, #0]
 801294a:	68a3      	ldr	r3, [r4, #8]
 801294c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012950:	701a      	strb	r2, [r3, #0]
 8012952:	68a3      	ldr	r3, [r4, #8]
 8012954:	f89d 2000 	ldrb.w	r2, [sp]
 8012958:	701a      	strb	r2, [r3, #0]
 801295a:	e78a      	b.n	8012872 <ucdr_serialize_int64_t+0x9e>
 801295c:	4628      	mov	r0, r5
 801295e:	466d      	mov	r5, sp
 8012960:	4629      	mov	r1, r5
 8012962:	4632      	mov	r2, r6
 8012964:	f00d fef3 	bl	802074e <memcpy>
 8012968:	68a0      	ldr	r0, [r4, #8]
 801296a:	4642      	mov	r2, r8
 801296c:	19a9      	adds	r1, r5, r6
 801296e:	f00d feee 	bl	802074e <memcpy>
 8012972:	e77e      	b.n	8012872 <ucdr_serialize_int64_t+0x9e>

08012974 <ucdr_deserialize_int64_t>:
 8012974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012978:	460d      	mov	r5, r1
 801297a:	2108      	movs	r1, #8
 801297c:	4604      	mov	r4, r0
 801297e:	f000 fd0d 	bl	801339c <ucdr_buffer_alignment>
 8012982:	4601      	mov	r1, r0
 8012984:	4620      	mov	r0, r4
 8012986:	f894 9015 	ldrb.w	r9, [r4, #21]
 801298a:	f000 fd4b 	bl	8013424 <ucdr_advance_buffer>
 801298e:	2108      	movs	r1, #8
 8012990:	4620      	mov	r0, r4
 8012992:	f000 fca3 	bl	80132dc <ucdr_check_buffer_available_for>
 8012996:	2800      	cmp	r0, #0
 8012998:	d151      	bne.n	8012a3e <ucdr_deserialize_int64_t+0xca>
 801299a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801299e:	42be      	cmp	r6, r7
 80129a0:	d948      	bls.n	8012a34 <ucdr_deserialize_int64_t+0xc0>
 80129a2:	6923      	ldr	r3, [r4, #16]
 80129a4:	60a6      	str	r6, [r4, #8]
 80129a6:	1bf6      	subs	r6, r6, r7
 80129a8:	4433      	add	r3, r6
 80129aa:	f1c6 0808 	rsb	r8, r6, #8
 80129ae:	6123      	str	r3, [r4, #16]
 80129b0:	4641      	mov	r1, r8
 80129b2:	4620      	mov	r0, r4
 80129b4:	f000 fc9e 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 80129b8:	2800      	cmp	r0, #0
 80129ba:	d06d      	beq.n	8012a98 <ucdr_deserialize_int64_t+0x124>
 80129bc:	7d23      	ldrb	r3, [r4, #20]
 80129be:	2b01      	cmp	r3, #1
 80129c0:	f000 8093 	beq.w	8012aea <ucdr_deserialize_int64_t+0x176>
 80129c4:	79fb      	ldrb	r3, [r7, #7]
 80129c6:	702b      	strb	r3, [r5, #0]
 80129c8:	2e00      	cmp	r6, #0
 80129ca:	d072      	beq.n	8012ab2 <ucdr_deserialize_int64_t+0x13e>
 80129cc:	79bb      	ldrb	r3, [r7, #6]
 80129ce:	706b      	strb	r3, [r5, #1]
 80129d0:	2e01      	cmp	r6, #1
 80129d2:	f105 0302 	add.w	r3, r5, #2
 80129d6:	d070      	beq.n	8012aba <ucdr_deserialize_int64_t+0x146>
 80129d8:	797b      	ldrb	r3, [r7, #5]
 80129da:	70ab      	strb	r3, [r5, #2]
 80129dc:	2e02      	cmp	r6, #2
 80129de:	f105 0303 	add.w	r3, r5, #3
 80129e2:	d06e      	beq.n	8012ac2 <ucdr_deserialize_int64_t+0x14e>
 80129e4:	793b      	ldrb	r3, [r7, #4]
 80129e6:	70eb      	strb	r3, [r5, #3]
 80129e8:	2e03      	cmp	r6, #3
 80129ea:	f105 0304 	add.w	r3, r5, #4
 80129ee:	d06c      	beq.n	8012aca <ucdr_deserialize_int64_t+0x156>
 80129f0:	78fb      	ldrb	r3, [r7, #3]
 80129f2:	712b      	strb	r3, [r5, #4]
 80129f4:	2e04      	cmp	r6, #4
 80129f6:	f105 0305 	add.w	r3, r5, #5
 80129fa:	d06a      	beq.n	8012ad2 <ucdr_deserialize_int64_t+0x15e>
 80129fc:	78bb      	ldrb	r3, [r7, #2]
 80129fe:	716b      	strb	r3, [r5, #5]
 8012a00:	2e05      	cmp	r6, #5
 8012a02:	f105 0306 	add.w	r3, r5, #6
 8012a06:	d068      	beq.n	8012ada <ucdr_deserialize_int64_t+0x166>
 8012a08:	787b      	ldrb	r3, [r7, #1]
 8012a0a:	71ab      	strb	r3, [r5, #6]
 8012a0c:	2e06      	cmp	r6, #6
 8012a0e:	f105 0307 	add.w	r3, r5, #7
 8012a12:	d066      	beq.n	8012ae2 <ucdr_deserialize_int64_t+0x16e>
 8012a14:	783b      	ldrb	r3, [r7, #0]
 8012a16:	71eb      	strb	r3, [r5, #7]
 8012a18:	6923      	ldr	r3, [r4, #16]
 8012a1a:	68a2      	ldr	r2, [r4, #8]
 8012a1c:	7da0      	ldrb	r0, [r4, #22]
 8012a1e:	3308      	adds	r3, #8
 8012a20:	1b9e      	subs	r6, r3, r6
 8012a22:	2308      	movs	r3, #8
 8012a24:	4442      	add	r2, r8
 8012a26:	7563      	strb	r3, [r4, #21]
 8012a28:	60a2      	str	r2, [r4, #8]
 8012a2a:	6126      	str	r6, [r4, #16]
 8012a2c:	f080 0001 	eor.w	r0, r0, #1
 8012a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a34:	2108      	movs	r1, #8
 8012a36:	4620      	mov	r0, r4
 8012a38:	f000 fc5c 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8012a3c:	b310      	cbz	r0, 8012a84 <ucdr_deserialize_int64_t+0x110>
 8012a3e:	7d23      	ldrb	r3, [r4, #20]
 8012a40:	2b01      	cmp	r3, #1
 8012a42:	68a3      	ldr	r3, [r4, #8]
 8012a44:	d023      	beq.n	8012a8e <ucdr_deserialize_int64_t+0x11a>
 8012a46:	79db      	ldrb	r3, [r3, #7]
 8012a48:	702b      	strb	r3, [r5, #0]
 8012a4a:	68a3      	ldr	r3, [r4, #8]
 8012a4c:	799b      	ldrb	r3, [r3, #6]
 8012a4e:	706b      	strb	r3, [r5, #1]
 8012a50:	68a3      	ldr	r3, [r4, #8]
 8012a52:	795b      	ldrb	r3, [r3, #5]
 8012a54:	70ab      	strb	r3, [r5, #2]
 8012a56:	68a3      	ldr	r3, [r4, #8]
 8012a58:	791b      	ldrb	r3, [r3, #4]
 8012a5a:	70eb      	strb	r3, [r5, #3]
 8012a5c:	68a3      	ldr	r3, [r4, #8]
 8012a5e:	78db      	ldrb	r3, [r3, #3]
 8012a60:	712b      	strb	r3, [r5, #4]
 8012a62:	68a3      	ldr	r3, [r4, #8]
 8012a64:	789b      	ldrb	r3, [r3, #2]
 8012a66:	716b      	strb	r3, [r5, #5]
 8012a68:	68a3      	ldr	r3, [r4, #8]
 8012a6a:	785b      	ldrb	r3, [r3, #1]
 8012a6c:	71ab      	strb	r3, [r5, #6]
 8012a6e:	68a3      	ldr	r3, [r4, #8]
 8012a70:	781b      	ldrb	r3, [r3, #0]
 8012a72:	71eb      	strb	r3, [r5, #7]
 8012a74:	68a2      	ldr	r2, [r4, #8]
 8012a76:	6923      	ldr	r3, [r4, #16]
 8012a78:	3208      	adds	r2, #8
 8012a7a:	3308      	adds	r3, #8
 8012a7c:	2108      	movs	r1, #8
 8012a7e:	60a2      	str	r2, [r4, #8]
 8012a80:	6123      	str	r3, [r4, #16]
 8012a82:	7561      	strb	r1, [r4, #21]
 8012a84:	7da0      	ldrb	r0, [r4, #22]
 8012a86:	f080 0001 	eor.w	r0, r0, #1
 8012a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a8e:	681a      	ldr	r2, [r3, #0]
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	606b      	str	r3, [r5, #4]
 8012a94:	602a      	str	r2, [r5, #0]
 8012a96:	e7ed      	b.n	8012a74 <ucdr_deserialize_int64_t+0x100>
 8012a98:	68a2      	ldr	r2, [r4, #8]
 8012a9a:	6923      	ldr	r3, [r4, #16]
 8012a9c:	7da0      	ldrb	r0, [r4, #22]
 8012a9e:	f884 9015 	strb.w	r9, [r4, #21]
 8012aa2:	1b92      	subs	r2, r2, r6
 8012aa4:	1b9b      	subs	r3, r3, r6
 8012aa6:	60a2      	str	r2, [r4, #8]
 8012aa8:	6123      	str	r3, [r4, #16]
 8012aaa:	f080 0001 	eor.w	r0, r0, #1
 8012aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ab2:	68a3      	ldr	r3, [r4, #8]
 8012ab4:	799b      	ldrb	r3, [r3, #6]
 8012ab6:	706b      	strb	r3, [r5, #1]
 8012ab8:	1cab      	adds	r3, r5, #2
 8012aba:	68a2      	ldr	r2, [r4, #8]
 8012abc:	7952      	ldrb	r2, [r2, #5]
 8012abe:	f803 2b01 	strb.w	r2, [r3], #1
 8012ac2:	68a2      	ldr	r2, [r4, #8]
 8012ac4:	7912      	ldrb	r2, [r2, #4]
 8012ac6:	f803 2b01 	strb.w	r2, [r3], #1
 8012aca:	68a2      	ldr	r2, [r4, #8]
 8012acc:	78d2      	ldrb	r2, [r2, #3]
 8012ace:	f803 2b01 	strb.w	r2, [r3], #1
 8012ad2:	68a2      	ldr	r2, [r4, #8]
 8012ad4:	7892      	ldrb	r2, [r2, #2]
 8012ad6:	f803 2b01 	strb.w	r2, [r3], #1
 8012ada:	68a2      	ldr	r2, [r4, #8]
 8012adc:	7852      	ldrb	r2, [r2, #1]
 8012ade:	f803 2b01 	strb.w	r2, [r3], #1
 8012ae2:	68a2      	ldr	r2, [r4, #8]
 8012ae4:	7812      	ldrb	r2, [r2, #0]
 8012ae6:	701a      	strb	r2, [r3, #0]
 8012ae8:	e796      	b.n	8012a18 <ucdr_deserialize_int64_t+0xa4>
 8012aea:	4639      	mov	r1, r7
 8012aec:	4632      	mov	r2, r6
 8012aee:	4628      	mov	r0, r5
 8012af0:	f00d fe2d 	bl	802074e <memcpy>
 8012af4:	68a1      	ldr	r1, [r4, #8]
 8012af6:	4642      	mov	r2, r8
 8012af8:	19a8      	adds	r0, r5, r6
 8012afa:	f00d fe28 	bl	802074e <memcpy>
 8012afe:	e78b      	b.n	8012a18 <ucdr_deserialize_int64_t+0xa4>

08012b00 <ucdr_serialize_float>:
 8012b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b04:	2104      	movs	r1, #4
 8012b06:	b082      	sub	sp, #8
 8012b08:	4604      	mov	r4, r0
 8012b0a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012b0e:	f000 fc45 	bl	801339c <ucdr_buffer_alignment>
 8012b12:	4601      	mov	r1, r0
 8012b14:	4620      	mov	r0, r4
 8012b16:	7d67      	ldrb	r7, [r4, #21]
 8012b18:	f000 fc84 	bl	8013424 <ucdr_advance_buffer>
 8012b1c:	2104      	movs	r1, #4
 8012b1e:	4620      	mov	r0, r4
 8012b20:	f000 fbdc 	bl	80132dc <ucdr_check_buffer_available_for>
 8012b24:	2800      	cmp	r0, #0
 8012b26:	d139      	bne.n	8012b9c <ucdr_serialize_float+0x9c>
 8012b28:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012b2c:	42ab      	cmp	r3, r5
 8012b2e:	d930      	bls.n	8012b92 <ucdr_serialize_float+0x92>
 8012b30:	1b5e      	subs	r6, r3, r5
 8012b32:	60a3      	str	r3, [r4, #8]
 8012b34:	6923      	ldr	r3, [r4, #16]
 8012b36:	f1c6 0804 	rsb	r8, r6, #4
 8012b3a:	4433      	add	r3, r6
 8012b3c:	6123      	str	r3, [r4, #16]
 8012b3e:	4641      	mov	r1, r8
 8012b40:	4620      	mov	r0, r4
 8012b42:	f000 fbd7 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8012b46:	2800      	cmp	r0, #0
 8012b48:	d04c      	beq.n	8012be4 <ucdr_serialize_float+0xe4>
 8012b4a:	7d23      	ldrb	r3, [r4, #20]
 8012b4c:	2b01      	cmp	r3, #1
 8012b4e:	d063      	beq.n	8012c18 <ucdr_serialize_float+0x118>
 8012b50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012b54:	702b      	strb	r3, [r5, #0]
 8012b56:	2e00      	cmp	r6, #0
 8012b58:	d051      	beq.n	8012bfe <ucdr_serialize_float+0xfe>
 8012b5a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012b5e:	706b      	strb	r3, [r5, #1]
 8012b60:	2e01      	cmp	r6, #1
 8012b62:	d050      	beq.n	8012c06 <ucdr_serialize_float+0x106>
 8012b64:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012b68:	70ab      	strb	r3, [r5, #2]
 8012b6a:	2e02      	cmp	r6, #2
 8012b6c:	d04f      	beq.n	8012c0e <ucdr_serialize_float+0x10e>
 8012b6e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012b72:	70eb      	strb	r3, [r5, #3]
 8012b74:	6923      	ldr	r3, [r4, #16]
 8012b76:	68a2      	ldr	r2, [r4, #8]
 8012b78:	7da0      	ldrb	r0, [r4, #22]
 8012b7a:	3304      	adds	r3, #4
 8012b7c:	1b9e      	subs	r6, r3, r6
 8012b7e:	4442      	add	r2, r8
 8012b80:	2304      	movs	r3, #4
 8012b82:	f080 0001 	eor.w	r0, r0, #1
 8012b86:	60a2      	str	r2, [r4, #8]
 8012b88:	6126      	str	r6, [r4, #16]
 8012b8a:	7563      	strb	r3, [r4, #21]
 8012b8c:	b002      	add	sp, #8
 8012b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b92:	2104      	movs	r1, #4
 8012b94:	4620      	mov	r0, r4
 8012b96:	f000 fbad 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8012b9a:	b1d0      	cbz	r0, 8012bd2 <ucdr_serialize_float+0xd2>
 8012b9c:	7d23      	ldrb	r3, [r4, #20]
 8012b9e:	2b01      	cmp	r3, #1
 8012ba0:	68a3      	ldr	r3, [r4, #8]
 8012ba2:	d01c      	beq.n	8012bde <ucdr_serialize_float+0xde>
 8012ba4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012ba8:	701a      	strb	r2, [r3, #0]
 8012baa:	68a3      	ldr	r3, [r4, #8]
 8012bac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012bb0:	705a      	strb	r2, [r3, #1]
 8012bb2:	68a3      	ldr	r3, [r4, #8]
 8012bb4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012bb8:	709a      	strb	r2, [r3, #2]
 8012bba:	68a3      	ldr	r3, [r4, #8]
 8012bbc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012bc0:	70da      	strb	r2, [r3, #3]
 8012bc2:	68a2      	ldr	r2, [r4, #8]
 8012bc4:	6923      	ldr	r3, [r4, #16]
 8012bc6:	3204      	adds	r2, #4
 8012bc8:	3304      	adds	r3, #4
 8012bca:	2104      	movs	r1, #4
 8012bcc:	60a2      	str	r2, [r4, #8]
 8012bce:	6123      	str	r3, [r4, #16]
 8012bd0:	7561      	strb	r1, [r4, #21]
 8012bd2:	7da0      	ldrb	r0, [r4, #22]
 8012bd4:	f080 0001 	eor.w	r0, r0, #1
 8012bd8:	b002      	add	sp, #8
 8012bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bde:	9a01      	ldr	r2, [sp, #4]
 8012be0:	601a      	str	r2, [r3, #0]
 8012be2:	e7ee      	b.n	8012bc2 <ucdr_serialize_float+0xc2>
 8012be4:	68a2      	ldr	r2, [r4, #8]
 8012be6:	6923      	ldr	r3, [r4, #16]
 8012be8:	7da0      	ldrb	r0, [r4, #22]
 8012bea:	7567      	strb	r7, [r4, #21]
 8012bec:	1b92      	subs	r2, r2, r6
 8012bee:	1b9b      	subs	r3, r3, r6
 8012bf0:	f080 0001 	eor.w	r0, r0, #1
 8012bf4:	60a2      	str	r2, [r4, #8]
 8012bf6:	6123      	str	r3, [r4, #16]
 8012bf8:	b002      	add	sp, #8
 8012bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bfe:	68a3      	ldr	r3, [r4, #8]
 8012c00:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012c04:	701a      	strb	r2, [r3, #0]
 8012c06:	68a3      	ldr	r3, [r4, #8]
 8012c08:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012c0c:	701a      	strb	r2, [r3, #0]
 8012c0e:	68a3      	ldr	r3, [r4, #8]
 8012c10:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012c14:	701a      	strb	r2, [r3, #0]
 8012c16:	e7ad      	b.n	8012b74 <ucdr_serialize_float+0x74>
 8012c18:	4628      	mov	r0, r5
 8012c1a:	ad01      	add	r5, sp, #4
 8012c1c:	4629      	mov	r1, r5
 8012c1e:	4632      	mov	r2, r6
 8012c20:	f00d fd95 	bl	802074e <memcpy>
 8012c24:	68a0      	ldr	r0, [r4, #8]
 8012c26:	4642      	mov	r2, r8
 8012c28:	19a9      	adds	r1, r5, r6
 8012c2a:	f00d fd90 	bl	802074e <memcpy>
 8012c2e:	e7a1      	b.n	8012b74 <ucdr_serialize_float+0x74>

08012c30 <ucdr_serialize_endian_float>:
 8012c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c34:	460d      	mov	r5, r1
 8012c36:	b083      	sub	sp, #12
 8012c38:	2104      	movs	r1, #4
 8012c3a:	4604      	mov	r4, r0
 8012c3c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012c40:	f000 fbac 	bl	801339c <ucdr_buffer_alignment>
 8012c44:	4601      	mov	r1, r0
 8012c46:	4620      	mov	r0, r4
 8012c48:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012c4c:	f000 fbea 	bl	8013424 <ucdr_advance_buffer>
 8012c50:	2104      	movs	r1, #4
 8012c52:	4620      	mov	r0, r4
 8012c54:	f000 fb42 	bl	80132dc <ucdr_check_buffer_available_for>
 8012c58:	2800      	cmp	r0, #0
 8012c5a:	d138      	bne.n	8012cce <ucdr_serialize_endian_float+0x9e>
 8012c5c:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012c60:	42b7      	cmp	r7, r6
 8012c62:	d92f      	bls.n	8012cc4 <ucdr_serialize_endian_float+0x94>
 8012c64:	6923      	ldr	r3, [r4, #16]
 8012c66:	60a7      	str	r7, [r4, #8]
 8012c68:	1bbf      	subs	r7, r7, r6
 8012c6a:	443b      	add	r3, r7
 8012c6c:	f1c7 0904 	rsb	r9, r7, #4
 8012c70:	6123      	str	r3, [r4, #16]
 8012c72:	4649      	mov	r1, r9
 8012c74:	4620      	mov	r0, r4
 8012c76:	f000 fb3d 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8012c7a:	2800      	cmp	r0, #0
 8012c7c:	d04a      	beq.n	8012d14 <ucdr_serialize_endian_float+0xe4>
 8012c7e:	2d01      	cmp	r5, #1
 8012c80:	d063      	beq.n	8012d4a <ucdr_serialize_endian_float+0x11a>
 8012c82:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012c86:	7033      	strb	r3, [r6, #0]
 8012c88:	2f00      	cmp	r7, #0
 8012c8a:	d051      	beq.n	8012d30 <ucdr_serialize_endian_float+0x100>
 8012c8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012c90:	7073      	strb	r3, [r6, #1]
 8012c92:	2f01      	cmp	r7, #1
 8012c94:	d050      	beq.n	8012d38 <ucdr_serialize_endian_float+0x108>
 8012c96:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012c9a:	70b3      	strb	r3, [r6, #2]
 8012c9c:	2f02      	cmp	r7, #2
 8012c9e:	d04f      	beq.n	8012d40 <ucdr_serialize_endian_float+0x110>
 8012ca0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012ca4:	70f3      	strb	r3, [r6, #3]
 8012ca6:	6923      	ldr	r3, [r4, #16]
 8012ca8:	68a2      	ldr	r2, [r4, #8]
 8012caa:	7da0      	ldrb	r0, [r4, #22]
 8012cac:	3304      	adds	r3, #4
 8012cae:	444a      	add	r2, r9
 8012cb0:	1bdb      	subs	r3, r3, r7
 8012cb2:	2104      	movs	r1, #4
 8012cb4:	f080 0001 	eor.w	r0, r0, #1
 8012cb8:	60a2      	str	r2, [r4, #8]
 8012cba:	6123      	str	r3, [r4, #16]
 8012cbc:	7561      	strb	r1, [r4, #21]
 8012cbe:	b003      	add	sp, #12
 8012cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012cc4:	2104      	movs	r1, #4
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	f000 fb14 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8012ccc:	b1c8      	cbz	r0, 8012d02 <ucdr_serialize_endian_float+0xd2>
 8012cce:	2d01      	cmp	r5, #1
 8012cd0:	68a3      	ldr	r3, [r4, #8]
 8012cd2:	d01c      	beq.n	8012d0e <ucdr_serialize_endian_float+0xde>
 8012cd4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012cd8:	701a      	strb	r2, [r3, #0]
 8012cda:	68a3      	ldr	r3, [r4, #8]
 8012cdc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012ce0:	705a      	strb	r2, [r3, #1]
 8012ce2:	68a3      	ldr	r3, [r4, #8]
 8012ce4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012ce8:	709a      	strb	r2, [r3, #2]
 8012cea:	68a3      	ldr	r3, [r4, #8]
 8012cec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012cf0:	70da      	strb	r2, [r3, #3]
 8012cf2:	68a2      	ldr	r2, [r4, #8]
 8012cf4:	6923      	ldr	r3, [r4, #16]
 8012cf6:	3204      	adds	r2, #4
 8012cf8:	3304      	adds	r3, #4
 8012cfa:	2104      	movs	r1, #4
 8012cfc:	60a2      	str	r2, [r4, #8]
 8012cfe:	6123      	str	r3, [r4, #16]
 8012d00:	7561      	strb	r1, [r4, #21]
 8012d02:	7da0      	ldrb	r0, [r4, #22]
 8012d04:	f080 0001 	eor.w	r0, r0, #1
 8012d08:	b003      	add	sp, #12
 8012d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d0e:	9a01      	ldr	r2, [sp, #4]
 8012d10:	601a      	str	r2, [r3, #0]
 8012d12:	e7ee      	b.n	8012cf2 <ucdr_serialize_endian_float+0xc2>
 8012d14:	68a2      	ldr	r2, [r4, #8]
 8012d16:	6923      	ldr	r3, [r4, #16]
 8012d18:	7da0      	ldrb	r0, [r4, #22]
 8012d1a:	f884 8015 	strb.w	r8, [r4, #21]
 8012d1e:	1bd2      	subs	r2, r2, r7
 8012d20:	1bdb      	subs	r3, r3, r7
 8012d22:	f080 0001 	eor.w	r0, r0, #1
 8012d26:	60a2      	str	r2, [r4, #8]
 8012d28:	6123      	str	r3, [r4, #16]
 8012d2a:	b003      	add	sp, #12
 8012d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d30:	68a3      	ldr	r3, [r4, #8]
 8012d32:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012d36:	701a      	strb	r2, [r3, #0]
 8012d38:	68a3      	ldr	r3, [r4, #8]
 8012d3a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012d3e:	701a      	strb	r2, [r3, #0]
 8012d40:	68a3      	ldr	r3, [r4, #8]
 8012d42:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012d46:	701a      	strb	r2, [r3, #0]
 8012d48:	e7ad      	b.n	8012ca6 <ucdr_serialize_endian_float+0x76>
 8012d4a:	ad01      	add	r5, sp, #4
 8012d4c:	4629      	mov	r1, r5
 8012d4e:	463a      	mov	r2, r7
 8012d50:	4630      	mov	r0, r6
 8012d52:	f00d fcfc 	bl	802074e <memcpy>
 8012d56:	68a0      	ldr	r0, [r4, #8]
 8012d58:	464a      	mov	r2, r9
 8012d5a:	19e9      	adds	r1, r5, r7
 8012d5c:	f00d fcf7 	bl	802074e <memcpy>
 8012d60:	e7a1      	b.n	8012ca6 <ucdr_serialize_endian_float+0x76>
 8012d62:	bf00      	nop

08012d64 <ucdr_deserialize_float>:
 8012d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d68:	460d      	mov	r5, r1
 8012d6a:	2104      	movs	r1, #4
 8012d6c:	4604      	mov	r4, r0
 8012d6e:	f000 fb15 	bl	801339c <ucdr_buffer_alignment>
 8012d72:	4601      	mov	r1, r0
 8012d74:	4620      	mov	r0, r4
 8012d76:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012d7a:	f000 fb53 	bl	8013424 <ucdr_advance_buffer>
 8012d7e:	2104      	movs	r1, #4
 8012d80:	4620      	mov	r0, r4
 8012d82:	f000 faab 	bl	80132dc <ucdr_check_buffer_available_for>
 8012d86:	2800      	cmp	r0, #0
 8012d88:	d138      	bne.n	8012dfc <ucdr_deserialize_float+0x98>
 8012d8a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012d8e:	42b7      	cmp	r7, r6
 8012d90:	d92f      	bls.n	8012df2 <ucdr_deserialize_float+0x8e>
 8012d92:	6923      	ldr	r3, [r4, #16]
 8012d94:	60a7      	str	r7, [r4, #8]
 8012d96:	1bbf      	subs	r7, r7, r6
 8012d98:	443b      	add	r3, r7
 8012d9a:	f1c7 0904 	rsb	r9, r7, #4
 8012d9e:	6123      	str	r3, [r4, #16]
 8012da0:	4649      	mov	r1, r9
 8012da2:	4620      	mov	r0, r4
 8012da4:	f000 faa6 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8012da8:	2800      	cmp	r0, #0
 8012daa:	d046      	beq.n	8012e3a <ucdr_deserialize_float+0xd6>
 8012dac:	7d23      	ldrb	r3, [r4, #20]
 8012dae:	2b01      	cmp	r3, #1
 8012db0:	d05c      	beq.n	8012e6c <ucdr_deserialize_float+0x108>
 8012db2:	78f3      	ldrb	r3, [r6, #3]
 8012db4:	702b      	strb	r3, [r5, #0]
 8012db6:	2f00      	cmp	r7, #0
 8012db8:	d04c      	beq.n	8012e54 <ucdr_deserialize_float+0xf0>
 8012dba:	78b3      	ldrb	r3, [r6, #2]
 8012dbc:	706b      	strb	r3, [r5, #1]
 8012dbe:	2f01      	cmp	r7, #1
 8012dc0:	f105 0302 	add.w	r3, r5, #2
 8012dc4:	d04a      	beq.n	8012e5c <ucdr_deserialize_float+0xf8>
 8012dc6:	7873      	ldrb	r3, [r6, #1]
 8012dc8:	70ab      	strb	r3, [r5, #2]
 8012dca:	2f02      	cmp	r7, #2
 8012dcc:	f105 0303 	add.w	r3, r5, #3
 8012dd0:	d048      	beq.n	8012e64 <ucdr_deserialize_float+0x100>
 8012dd2:	7833      	ldrb	r3, [r6, #0]
 8012dd4:	70eb      	strb	r3, [r5, #3]
 8012dd6:	6923      	ldr	r3, [r4, #16]
 8012dd8:	68a2      	ldr	r2, [r4, #8]
 8012dda:	7da0      	ldrb	r0, [r4, #22]
 8012ddc:	2104      	movs	r1, #4
 8012dde:	3304      	adds	r3, #4
 8012de0:	444a      	add	r2, r9
 8012de2:	1bdb      	subs	r3, r3, r7
 8012de4:	7561      	strb	r1, [r4, #21]
 8012de6:	60a2      	str	r2, [r4, #8]
 8012de8:	6123      	str	r3, [r4, #16]
 8012dea:	f080 0001 	eor.w	r0, r0, #1
 8012dee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012df2:	2104      	movs	r1, #4
 8012df4:	4620      	mov	r0, r4
 8012df6:	f000 fa7d 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8012dfa:	b1b0      	cbz	r0, 8012e2a <ucdr_deserialize_float+0xc6>
 8012dfc:	7d23      	ldrb	r3, [r4, #20]
 8012dfe:	2b01      	cmp	r3, #1
 8012e00:	68a3      	ldr	r3, [r4, #8]
 8012e02:	d017      	beq.n	8012e34 <ucdr_deserialize_float+0xd0>
 8012e04:	78db      	ldrb	r3, [r3, #3]
 8012e06:	702b      	strb	r3, [r5, #0]
 8012e08:	68a3      	ldr	r3, [r4, #8]
 8012e0a:	789b      	ldrb	r3, [r3, #2]
 8012e0c:	706b      	strb	r3, [r5, #1]
 8012e0e:	68a3      	ldr	r3, [r4, #8]
 8012e10:	785b      	ldrb	r3, [r3, #1]
 8012e12:	70ab      	strb	r3, [r5, #2]
 8012e14:	68a3      	ldr	r3, [r4, #8]
 8012e16:	781b      	ldrb	r3, [r3, #0]
 8012e18:	70eb      	strb	r3, [r5, #3]
 8012e1a:	68a2      	ldr	r2, [r4, #8]
 8012e1c:	6923      	ldr	r3, [r4, #16]
 8012e1e:	3204      	adds	r2, #4
 8012e20:	3304      	adds	r3, #4
 8012e22:	2104      	movs	r1, #4
 8012e24:	60a2      	str	r2, [r4, #8]
 8012e26:	6123      	str	r3, [r4, #16]
 8012e28:	7561      	strb	r1, [r4, #21]
 8012e2a:	7da0      	ldrb	r0, [r4, #22]
 8012e2c:	f080 0001 	eor.w	r0, r0, #1
 8012e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	602b      	str	r3, [r5, #0]
 8012e38:	e7ef      	b.n	8012e1a <ucdr_deserialize_float+0xb6>
 8012e3a:	68a2      	ldr	r2, [r4, #8]
 8012e3c:	6923      	ldr	r3, [r4, #16]
 8012e3e:	7da0      	ldrb	r0, [r4, #22]
 8012e40:	f884 8015 	strb.w	r8, [r4, #21]
 8012e44:	1bd2      	subs	r2, r2, r7
 8012e46:	1bdb      	subs	r3, r3, r7
 8012e48:	60a2      	str	r2, [r4, #8]
 8012e4a:	6123      	str	r3, [r4, #16]
 8012e4c:	f080 0001 	eor.w	r0, r0, #1
 8012e50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e54:	68a3      	ldr	r3, [r4, #8]
 8012e56:	789b      	ldrb	r3, [r3, #2]
 8012e58:	706b      	strb	r3, [r5, #1]
 8012e5a:	1cab      	adds	r3, r5, #2
 8012e5c:	68a2      	ldr	r2, [r4, #8]
 8012e5e:	7852      	ldrb	r2, [r2, #1]
 8012e60:	f803 2b01 	strb.w	r2, [r3], #1
 8012e64:	68a2      	ldr	r2, [r4, #8]
 8012e66:	7812      	ldrb	r2, [r2, #0]
 8012e68:	701a      	strb	r2, [r3, #0]
 8012e6a:	e7b4      	b.n	8012dd6 <ucdr_deserialize_float+0x72>
 8012e6c:	4631      	mov	r1, r6
 8012e6e:	463a      	mov	r2, r7
 8012e70:	4628      	mov	r0, r5
 8012e72:	f00d fc6c 	bl	802074e <memcpy>
 8012e76:	68a1      	ldr	r1, [r4, #8]
 8012e78:	464a      	mov	r2, r9
 8012e7a:	19e8      	adds	r0, r5, r7
 8012e7c:	f00d fc67 	bl	802074e <memcpy>
 8012e80:	e7a9      	b.n	8012dd6 <ucdr_deserialize_float+0x72>
 8012e82:	bf00      	nop

08012e84 <ucdr_deserialize_endian_float>:
 8012e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e88:	460e      	mov	r6, r1
 8012e8a:	2104      	movs	r1, #4
 8012e8c:	4604      	mov	r4, r0
 8012e8e:	4615      	mov	r5, r2
 8012e90:	f000 fa84 	bl	801339c <ucdr_buffer_alignment>
 8012e94:	4601      	mov	r1, r0
 8012e96:	4620      	mov	r0, r4
 8012e98:	f894 9015 	ldrb.w	r9, [r4, #21]
 8012e9c:	f000 fac2 	bl	8013424 <ucdr_advance_buffer>
 8012ea0:	2104      	movs	r1, #4
 8012ea2:	4620      	mov	r0, r4
 8012ea4:	f000 fa1a 	bl	80132dc <ucdr_check_buffer_available_for>
 8012ea8:	2800      	cmp	r0, #0
 8012eaa:	d13c      	bne.n	8012f26 <ucdr_deserialize_endian_float+0xa2>
 8012eac:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8012eb0:	42bb      	cmp	r3, r7
 8012eb2:	d933      	bls.n	8012f1c <ucdr_deserialize_endian_float+0x98>
 8012eb4:	eba3 0807 	sub.w	r8, r3, r7
 8012eb8:	60a3      	str	r3, [r4, #8]
 8012eba:	6923      	ldr	r3, [r4, #16]
 8012ebc:	f1c8 0a04 	rsb	sl, r8, #4
 8012ec0:	4443      	add	r3, r8
 8012ec2:	6123      	str	r3, [r4, #16]
 8012ec4:	4651      	mov	r1, sl
 8012ec6:	4620      	mov	r0, r4
 8012ec8:	f000 fa14 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8012ecc:	2800      	cmp	r0, #0
 8012ece:	d048      	beq.n	8012f62 <ucdr_deserialize_endian_float+0xde>
 8012ed0:	2e01      	cmp	r6, #1
 8012ed2:	d061      	beq.n	8012f98 <ucdr_deserialize_endian_float+0x114>
 8012ed4:	78fb      	ldrb	r3, [r7, #3]
 8012ed6:	702b      	strb	r3, [r5, #0]
 8012ed8:	f1b8 0f00 	cmp.w	r8, #0
 8012edc:	d050      	beq.n	8012f80 <ucdr_deserialize_endian_float+0xfc>
 8012ede:	78bb      	ldrb	r3, [r7, #2]
 8012ee0:	706b      	strb	r3, [r5, #1]
 8012ee2:	f1b8 0f01 	cmp.w	r8, #1
 8012ee6:	f105 0302 	add.w	r3, r5, #2
 8012eea:	d04d      	beq.n	8012f88 <ucdr_deserialize_endian_float+0x104>
 8012eec:	787b      	ldrb	r3, [r7, #1]
 8012eee:	70ab      	strb	r3, [r5, #2]
 8012ef0:	f1b8 0f02 	cmp.w	r8, #2
 8012ef4:	f105 0303 	add.w	r3, r5, #3
 8012ef8:	d04a      	beq.n	8012f90 <ucdr_deserialize_endian_float+0x10c>
 8012efa:	783b      	ldrb	r3, [r7, #0]
 8012efc:	70eb      	strb	r3, [r5, #3]
 8012efe:	6923      	ldr	r3, [r4, #16]
 8012f00:	68a2      	ldr	r2, [r4, #8]
 8012f02:	7da0      	ldrb	r0, [r4, #22]
 8012f04:	2104      	movs	r1, #4
 8012f06:	3304      	adds	r3, #4
 8012f08:	4452      	add	r2, sl
 8012f0a:	eba3 0308 	sub.w	r3, r3, r8
 8012f0e:	7561      	strb	r1, [r4, #21]
 8012f10:	60a2      	str	r2, [r4, #8]
 8012f12:	6123      	str	r3, [r4, #16]
 8012f14:	f080 0001 	eor.w	r0, r0, #1
 8012f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f1c:	2104      	movs	r1, #4
 8012f1e:	4620      	mov	r0, r4
 8012f20:	f000 f9e8 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8012f24:	b1a8      	cbz	r0, 8012f52 <ucdr_deserialize_endian_float+0xce>
 8012f26:	2e01      	cmp	r6, #1
 8012f28:	68a3      	ldr	r3, [r4, #8]
 8012f2a:	d017      	beq.n	8012f5c <ucdr_deserialize_endian_float+0xd8>
 8012f2c:	78db      	ldrb	r3, [r3, #3]
 8012f2e:	702b      	strb	r3, [r5, #0]
 8012f30:	68a3      	ldr	r3, [r4, #8]
 8012f32:	789b      	ldrb	r3, [r3, #2]
 8012f34:	706b      	strb	r3, [r5, #1]
 8012f36:	68a3      	ldr	r3, [r4, #8]
 8012f38:	785b      	ldrb	r3, [r3, #1]
 8012f3a:	70ab      	strb	r3, [r5, #2]
 8012f3c:	68a3      	ldr	r3, [r4, #8]
 8012f3e:	781b      	ldrb	r3, [r3, #0]
 8012f40:	70eb      	strb	r3, [r5, #3]
 8012f42:	68a2      	ldr	r2, [r4, #8]
 8012f44:	6923      	ldr	r3, [r4, #16]
 8012f46:	3204      	adds	r2, #4
 8012f48:	3304      	adds	r3, #4
 8012f4a:	2104      	movs	r1, #4
 8012f4c:	60a2      	str	r2, [r4, #8]
 8012f4e:	6123      	str	r3, [r4, #16]
 8012f50:	7561      	strb	r1, [r4, #21]
 8012f52:	7da0      	ldrb	r0, [r4, #22]
 8012f54:	f080 0001 	eor.w	r0, r0, #1
 8012f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	602b      	str	r3, [r5, #0]
 8012f60:	e7ef      	b.n	8012f42 <ucdr_deserialize_endian_float+0xbe>
 8012f62:	68a2      	ldr	r2, [r4, #8]
 8012f64:	6923      	ldr	r3, [r4, #16]
 8012f66:	7da0      	ldrb	r0, [r4, #22]
 8012f68:	f884 9015 	strb.w	r9, [r4, #21]
 8012f6c:	eba2 0208 	sub.w	r2, r2, r8
 8012f70:	eba3 0308 	sub.w	r3, r3, r8
 8012f74:	60a2      	str	r2, [r4, #8]
 8012f76:	6123      	str	r3, [r4, #16]
 8012f78:	f080 0001 	eor.w	r0, r0, #1
 8012f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f80:	68a3      	ldr	r3, [r4, #8]
 8012f82:	789b      	ldrb	r3, [r3, #2]
 8012f84:	706b      	strb	r3, [r5, #1]
 8012f86:	1cab      	adds	r3, r5, #2
 8012f88:	68a2      	ldr	r2, [r4, #8]
 8012f8a:	7852      	ldrb	r2, [r2, #1]
 8012f8c:	f803 2b01 	strb.w	r2, [r3], #1
 8012f90:	68a2      	ldr	r2, [r4, #8]
 8012f92:	7812      	ldrb	r2, [r2, #0]
 8012f94:	701a      	strb	r2, [r3, #0]
 8012f96:	e7b2      	b.n	8012efe <ucdr_deserialize_endian_float+0x7a>
 8012f98:	4639      	mov	r1, r7
 8012f9a:	4642      	mov	r2, r8
 8012f9c:	4628      	mov	r0, r5
 8012f9e:	f00d fbd6 	bl	802074e <memcpy>
 8012fa2:	68a1      	ldr	r1, [r4, #8]
 8012fa4:	4652      	mov	r2, sl
 8012fa6:	eb05 0008 	add.w	r0, r5, r8
 8012faa:	f00d fbd0 	bl	802074e <memcpy>
 8012fae:	e7a6      	b.n	8012efe <ucdr_deserialize_endian_float+0x7a>

08012fb0 <ucdr_serialize_double>:
 8012fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fb4:	2108      	movs	r1, #8
 8012fb6:	b082      	sub	sp, #8
 8012fb8:	4604      	mov	r4, r0
 8012fba:	ed8d 0b00 	vstr	d0, [sp]
 8012fbe:	f000 f9ed 	bl	801339c <ucdr_buffer_alignment>
 8012fc2:	4601      	mov	r1, r0
 8012fc4:	4620      	mov	r0, r4
 8012fc6:	7d67      	ldrb	r7, [r4, #21]
 8012fc8:	f000 fa2c 	bl	8013424 <ucdr_advance_buffer>
 8012fcc:	2108      	movs	r1, #8
 8012fce:	4620      	mov	r0, r4
 8012fd0:	f000 f984 	bl	80132dc <ucdr_check_buffer_available_for>
 8012fd4:	2800      	cmp	r0, #0
 8012fd6:	d14e      	bne.n	8013076 <ucdr_serialize_double+0xc6>
 8012fd8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012fdc:	42ab      	cmp	r3, r5
 8012fde:	d945      	bls.n	801306c <ucdr_serialize_double+0xbc>
 8012fe0:	1b5e      	subs	r6, r3, r5
 8012fe2:	60a3      	str	r3, [r4, #8]
 8012fe4:	6923      	ldr	r3, [r4, #16]
 8012fe6:	f1c6 0808 	rsb	r8, r6, #8
 8012fea:	4433      	add	r3, r6
 8012fec:	6123      	str	r3, [r4, #16]
 8012fee:	4641      	mov	r1, r8
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	f000 f97f 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8012ff6:	2800      	cmp	r0, #0
 8012ff8:	d074      	beq.n	80130e4 <ucdr_serialize_double+0x134>
 8012ffa:	7d23      	ldrb	r3, [r4, #20]
 8012ffc:	2b01      	cmp	r3, #1
 8012ffe:	f000 809b 	beq.w	8013138 <ucdr_serialize_double+0x188>
 8013002:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8013006:	702b      	strb	r3, [r5, #0]
 8013008:	2e00      	cmp	r6, #0
 801300a:	d078      	beq.n	80130fe <ucdr_serialize_double+0x14e>
 801300c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013010:	706b      	strb	r3, [r5, #1]
 8013012:	2e01      	cmp	r6, #1
 8013014:	d077      	beq.n	8013106 <ucdr_serialize_double+0x156>
 8013016:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801301a:	70ab      	strb	r3, [r5, #2]
 801301c:	2e02      	cmp	r6, #2
 801301e:	d076      	beq.n	801310e <ucdr_serialize_double+0x15e>
 8013020:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013024:	70eb      	strb	r3, [r5, #3]
 8013026:	2e03      	cmp	r6, #3
 8013028:	d075      	beq.n	8013116 <ucdr_serialize_double+0x166>
 801302a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801302e:	712b      	strb	r3, [r5, #4]
 8013030:	2e04      	cmp	r6, #4
 8013032:	d074      	beq.n	801311e <ucdr_serialize_double+0x16e>
 8013034:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8013038:	716b      	strb	r3, [r5, #5]
 801303a:	2e05      	cmp	r6, #5
 801303c:	d073      	beq.n	8013126 <ucdr_serialize_double+0x176>
 801303e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8013042:	71ab      	strb	r3, [r5, #6]
 8013044:	2e06      	cmp	r6, #6
 8013046:	d072      	beq.n	801312e <ucdr_serialize_double+0x17e>
 8013048:	f89d 3000 	ldrb.w	r3, [sp]
 801304c:	71eb      	strb	r3, [r5, #7]
 801304e:	6923      	ldr	r3, [r4, #16]
 8013050:	68a2      	ldr	r2, [r4, #8]
 8013052:	7da0      	ldrb	r0, [r4, #22]
 8013054:	3308      	adds	r3, #8
 8013056:	1b9e      	subs	r6, r3, r6
 8013058:	4442      	add	r2, r8
 801305a:	2308      	movs	r3, #8
 801305c:	f080 0001 	eor.w	r0, r0, #1
 8013060:	60a2      	str	r2, [r4, #8]
 8013062:	6126      	str	r6, [r4, #16]
 8013064:	7563      	strb	r3, [r4, #21]
 8013066:	b002      	add	sp, #8
 8013068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801306c:	2108      	movs	r1, #8
 801306e:	4620      	mov	r0, r4
 8013070:	f000 f940 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8013074:	b350      	cbz	r0, 80130cc <ucdr_serialize_double+0x11c>
 8013076:	7d23      	ldrb	r3, [r4, #20]
 8013078:	2b01      	cmp	r3, #1
 801307a:	d02d      	beq.n	80130d8 <ucdr_serialize_double+0x128>
 801307c:	68a3      	ldr	r3, [r4, #8]
 801307e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8013082:	701a      	strb	r2, [r3, #0]
 8013084:	68a3      	ldr	r3, [r4, #8]
 8013086:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801308a:	705a      	strb	r2, [r3, #1]
 801308c:	68a3      	ldr	r3, [r4, #8]
 801308e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8013092:	709a      	strb	r2, [r3, #2]
 8013094:	68a3      	ldr	r3, [r4, #8]
 8013096:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801309a:	70da      	strb	r2, [r3, #3]
 801309c:	68a3      	ldr	r3, [r4, #8]
 801309e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80130a2:	711a      	strb	r2, [r3, #4]
 80130a4:	68a3      	ldr	r3, [r4, #8]
 80130a6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80130aa:	715a      	strb	r2, [r3, #5]
 80130ac:	68a3      	ldr	r3, [r4, #8]
 80130ae:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80130b2:	719a      	strb	r2, [r3, #6]
 80130b4:	68a3      	ldr	r3, [r4, #8]
 80130b6:	f89d 2000 	ldrb.w	r2, [sp]
 80130ba:	71da      	strb	r2, [r3, #7]
 80130bc:	68a2      	ldr	r2, [r4, #8]
 80130be:	6923      	ldr	r3, [r4, #16]
 80130c0:	3208      	adds	r2, #8
 80130c2:	3308      	adds	r3, #8
 80130c4:	2108      	movs	r1, #8
 80130c6:	60a2      	str	r2, [r4, #8]
 80130c8:	6123      	str	r3, [r4, #16]
 80130ca:	7561      	strb	r1, [r4, #21]
 80130cc:	7da0      	ldrb	r0, [r4, #22]
 80130ce:	f080 0001 	eor.w	r0, r0, #1
 80130d2:	b002      	add	sp, #8
 80130d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130d8:	466b      	mov	r3, sp
 80130da:	cb03      	ldmia	r3!, {r0, r1}
 80130dc:	68a3      	ldr	r3, [r4, #8]
 80130de:	6018      	str	r0, [r3, #0]
 80130e0:	6059      	str	r1, [r3, #4]
 80130e2:	e7eb      	b.n	80130bc <ucdr_serialize_double+0x10c>
 80130e4:	68a2      	ldr	r2, [r4, #8]
 80130e6:	6923      	ldr	r3, [r4, #16]
 80130e8:	7da0      	ldrb	r0, [r4, #22]
 80130ea:	7567      	strb	r7, [r4, #21]
 80130ec:	1b92      	subs	r2, r2, r6
 80130ee:	1b9b      	subs	r3, r3, r6
 80130f0:	f080 0001 	eor.w	r0, r0, #1
 80130f4:	60a2      	str	r2, [r4, #8]
 80130f6:	6123      	str	r3, [r4, #16]
 80130f8:	b002      	add	sp, #8
 80130fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130fe:	68a3      	ldr	r3, [r4, #8]
 8013100:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8013104:	701a      	strb	r2, [r3, #0]
 8013106:	68a3      	ldr	r3, [r4, #8]
 8013108:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801310c:	701a      	strb	r2, [r3, #0]
 801310e:	68a3      	ldr	r3, [r4, #8]
 8013110:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8013114:	701a      	strb	r2, [r3, #0]
 8013116:	68a3      	ldr	r3, [r4, #8]
 8013118:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801311c:	701a      	strb	r2, [r3, #0]
 801311e:	68a3      	ldr	r3, [r4, #8]
 8013120:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8013124:	701a      	strb	r2, [r3, #0]
 8013126:	68a3      	ldr	r3, [r4, #8]
 8013128:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801312c:	701a      	strb	r2, [r3, #0]
 801312e:	68a3      	ldr	r3, [r4, #8]
 8013130:	f89d 2000 	ldrb.w	r2, [sp]
 8013134:	701a      	strb	r2, [r3, #0]
 8013136:	e78a      	b.n	801304e <ucdr_serialize_double+0x9e>
 8013138:	4628      	mov	r0, r5
 801313a:	466d      	mov	r5, sp
 801313c:	4629      	mov	r1, r5
 801313e:	4632      	mov	r2, r6
 8013140:	f00d fb05 	bl	802074e <memcpy>
 8013144:	68a0      	ldr	r0, [r4, #8]
 8013146:	4642      	mov	r2, r8
 8013148:	19a9      	adds	r1, r5, r6
 801314a:	f00d fb00 	bl	802074e <memcpy>
 801314e:	e77e      	b.n	801304e <ucdr_serialize_double+0x9e>

08013150 <ucdr_deserialize_double>:
 8013150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013154:	460d      	mov	r5, r1
 8013156:	2108      	movs	r1, #8
 8013158:	4604      	mov	r4, r0
 801315a:	f000 f91f 	bl	801339c <ucdr_buffer_alignment>
 801315e:	4601      	mov	r1, r0
 8013160:	4620      	mov	r0, r4
 8013162:	f894 9015 	ldrb.w	r9, [r4, #21]
 8013166:	f000 f95d 	bl	8013424 <ucdr_advance_buffer>
 801316a:	2108      	movs	r1, #8
 801316c:	4620      	mov	r0, r4
 801316e:	f000 f8b5 	bl	80132dc <ucdr_check_buffer_available_for>
 8013172:	2800      	cmp	r0, #0
 8013174:	d151      	bne.n	801321a <ucdr_deserialize_double+0xca>
 8013176:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801317a:	42be      	cmp	r6, r7
 801317c:	d948      	bls.n	8013210 <ucdr_deserialize_double+0xc0>
 801317e:	6923      	ldr	r3, [r4, #16]
 8013180:	60a6      	str	r6, [r4, #8]
 8013182:	1bf6      	subs	r6, r6, r7
 8013184:	4433      	add	r3, r6
 8013186:	f1c6 0808 	rsb	r8, r6, #8
 801318a:	6123      	str	r3, [r4, #16]
 801318c:	4641      	mov	r1, r8
 801318e:	4620      	mov	r0, r4
 8013190:	f000 f8b0 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8013194:	2800      	cmp	r0, #0
 8013196:	d06d      	beq.n	8013274 <ucdr_deserialize_double+0x124>
 8013198:	7d23      	ldrb	r3, [r4, #20]
 801319a:	2b01      	cmp	r3, #1
 801319c:	f000 8093 	beq.w	80132c6 <ucdr_deserialize_double+0x176>
 80131a0:	79fb      	ldrb	r3, [r7, #7]
 80131a2:	702b      	strb	r3, [r5, #0]
 80131a4:	2e00      	cmp	r6, #0
 80131a6:	d072      	beq.n	801328e <ucdr_deserialize_double+0x13e>
 80131a8:	79bb      	ldrb	r3, [r7, #6]
 80131aa:	706b      	strb	r3, [r5, #1]
 80131ac:	2e01      	cmp	r6, #1
 80131ae:	f105 0302 	add.w	r3, r5, #2
 80131b2:	d070      	beq.n	8013296 <ucdr_deserialize_double+0x146>
 80131b4:	797b      	ldrb	r3, [r7, #5]
 80131b6:	70ab      	strb	r3, [r5, #2]
 80131b8:	2e02      	cmp	r6, #2
 80131ba:	f105 0303 	add.w	r3, r5, #3
 80131be:	d06e      	beq.n	801329e <ucdr_deserialize_double+0x14e>
 80131c0:	793b      	ldrb	r3, [r7, #4]
 80131c2:	70eb      	strb	r3, [r5, #3]
 80131c4:	2e03      	cmp	r6, #3
 80131c6:	f105 0304 	add.w	r3, r5, #4
 80131ca:	d06c      	beq.n	80132a6 <ucdr_deserialize_double+0x156>
 80131cc:	78fb      	ldrb	r3, [r7, #3]
 80131ce:	712b      	strb	r3, [r5, #4]
 80131d0:	2e04      	cmp	r6, #4
 80131d2:	f105 0305 	add.w	r3, r5, #5
 80131d6:	d06a      	beq.n	80132ae <ucdr_deserialize_double+0x15e>
 80131d8:	78bb      	ldrb	r3, [r7, #2]
 80131da:	716b      	strb	r3, [r5, #5]
 80131dc:	2e05      	cmp	r6, #5
 80131de:	f105 0306 	add.w	r3, r5, #6
 80131e2:	d068      	beq.n	80132b6 <ucdr_deserialize_double+0x166>
 80131e4:	787b      	ldrb	r3, [r7, #1]
 80131e6:	71ab      	strb	r3, [r5, #6]
 80131e8:	2e06      	cmp	r6, #6
 80131ea:	f105 0307 	add.w	r3, r5, #7
 80131ee:	d066      	beq.n	80132be <ucdr_deserialize_double+0x16e>
 80131f0:	783b      	ldrb	r3, [r7, #0]
 80131f2:	71eb      	strb	r3, [r5, #7]
 80131f4:	6923      	ldr	r3, [r4, #16]
 80131f6:	68a2      	ldr	r2, [r4, #8]
 80131f8:	7da0      	ldrb	r0, [r4, #22]
 80131fa:	3308      	adds	r3, #8
 80131fc:	1b9e      	subs	r6, r3, r6
 80131fe:	2308      	movs	r3, #8
 8013200:	4442      	add	r2, r8
 8013202:	7563      	strb	r3, [r4, #21]
 8013204:	60a2      	str	r2, [r4, #8]
 8013206:	6126      	str	r6, [r4, #16]
 8013208:	f080 0001 	eor.w	r0, r0, #1
 801320c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013210:	2108      	movs	r1, #8
 8013212:	4620      	mov	r0, r4
 8013214:	f000 f86e 	bl	80132f4 <ucdr_check_final_buffer_behavior>
 8013218:	b310      	cbz	r0, 8013260 <ucdr_deserialize_double+0x110>
 801321a:	7d23      	ldrb	r3, [r4, #20]
 801321c:	2b01      	cmp	r3, #1
 801321e:	68a3      	ldr	r3, [r4, #8]
 8013220:	d023      	beq.n	801326a <ucdr_deserialize_double+0x11a>
 8013222:	79db      	ldrb	r3, [r3, #7]
 8013224:	702b      	strb	r3, [r5, #0]
 8013226:	68a3      	ldr	r3, [r4, #8]
 8013228:	799b      	ldrb	r3, [r3, #6]
 801322a:	706b      	strb	r3, [r5, #1]
 801322c:	68a3      	ldr	r3, [r4, #8]
 801322e:	795b      	ldrb	r3, [r3, #5]
 8013230:	70ab      	strb	r3, [r5, #2]
 8013232:	68a3      	ldr	r3, [r4, #8]
 8013234:	791b      	ldrb	r3, [r3, #4]
 8013236:	70eb      	strb	r3, [r5, #3]
 8013238:	68a3      	ldr	r3, [r4, #8]
 801323a:	78db      	ldrb	r3, [r3, #3]
 801323c:	712b      	strb	r3, [r5, #4]
 801323e:	68a3      	ldr	r3, [r4, #8]
 8013240:	789b      	ldrb	r3, [r3, #2]
 8013242:	716b      	strb	r3, [r5, #5]
 8013244:	68a3      	ldr	r3, [r4, #8]
 8013246:	785b      	ldrb	r3, [r3, #1]
 8013248:	71ab      	strb	r3, [r5, #6]
 801324a:	68a3      	ldr	r3, [r4, #8]
 801324c:	781b      	ldrb	r3, [r3, #0]
 801324e:	71eb      	strb	r3, [r5, #7]
 8013250:	68a2      	ldr	r2, [r4, #8]
 8013252:	6923      	ldr	r3, [r4, #16]
 8013254:	3208      	adds	r2, #8
 8013256:	3308      	adds	r3, #8
 8013258:	2108      	movs	r1, #8
 801325a:	60a2      	str	r2, [r4, #8]
 801325c:	6123      	str	r3, [r4, #16]
 801325e:	7561      	strb	r1, [r4, #21]
 8013260:	7da0      	ldrb	r0, [r4, #22]
 8013262:	f080 0001 	eor.w	r0, r0, #1
 8013266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801326a:	681a      	ldr	r2, [r3, #0]
 801326c:	685b      	ldr	r3, [r3, #4]
 801326e:	606b      	str	r3, [r5, #4]
 8013270:	602a      	str	r2, [r5, #0]
 8013272:	e7ed      	b.n	8013250 <ucdr_deserialize_double+0x100>
 8013274:	68a2      	ldr	r2, [r4, #8]
 8013276:	6923      	ldr	r3, [r4, #16]
 8013278:	7da0      	ldrb	r0, [r4, #22]
 801327a:	f884 9015 	strb.w	r9, [r4, #21]
 801327e:	1b92      	subs	r2, r2, r6
 8013280:	1b9b      	subs	r3, r3, r6
 8013282:	60a2      	str	r2, [r4, #8]
 8013284:	6123      	str	r3, [r4, #16]
 8013286:	f080 0001 	eor.w	r0, r0, #1
 801328a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801328e:	68a3      	ldr	r3, [r4, #8]
 8013290:	799b      	ldrb	r3, [r3, #6]
 8013292:	706b      	strb	r3, [r5, #1]
 8013294:	1cab      	adds	r3, r5, #2
 8013296:	68a2      	ldr	r2, [r4, #8]
 8013298:	7952      	ldrb	r2, [r2, #5]
 801329a:	f803 2b01 	strb.w	r2, [r3], #1
 801329e:	68a2      	ldr	r2, [r4, #8]
 80132a0:	7912      	ldrb	r2, [r2, #4]
 80132a2:	f803 2b01 	strb.w	r2, [r3], #1
 80132a6:	68a2      	ldr	r2, [r4, #8]
 80132a8:	78d2      	ldrb	r2, [r2, #3]
 80132aa:	f803 2b01 	strb.w	r2, [r3], #1
 80132ae:	68a2      	ldr	r2, [r4, #8]
 80132b0:	7892      	ldrb	r2, [r2, #2]
 80132b2:	f803 2b01 	strb.w	r2, [r3], #1
 80132b6:	68a2      	ldr	r2, [r4, #8]
 80132b8:	7852      	ldrb	r2, [r2, #1]
 80132ba:	f803 2b01 	strb.w	r2, [r3], #1
 80132be:	68a2      	ldr	r2, [r4, #8]
 80132c0:	7812      	ldrb	r2, [r2, #0]
 80132c2:	701a      	strb	r2, [r3, #0]
 80132c4:	e796      	b.n	80131f4 <ucdr_deserialize_double+0xa4>
 80132c6:	4639      	mov	r1, r7
 80132c8:	4632      	mov	r2, r6
 80132ca:	4628      	mov	r0, r5
 80132cc:	f00d fa3f 	bl	802074e <memcpy>
 80132d0:	68a1      	ldr	r1, [r4, #8]
 80132d2:	4642      	mov	r2, r8
 80132d4:	19a8      	adds	r0, r5, r6
 80132d6:	f00d fa3a 	bl	802074e <memcpy>
 80132da:	e78b      	b.n	80131f4 <ucdr_deserialize_double+0xa4>

080132dc <ucdr_check_buffer_available_for>:
 80132dc:	7d83      	ldrb	r3, [r0, #22]
 80132de:	b93b      	cbnz	r3, 80132f0 <ucdr_check_buffer_available_for+0x14>
 80132e0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80132e4:	4419      	add	r1, r3
 80132e6:	4288      	cmp	r0, r1
 80132e8:	bf34      	ite	cc
 80132ea:	2000      	movcc	r0, #0
 80132ec:	2001      	movcs	r0, #1
 80132ee:	4770      	bx	lr
 80132f0:	2000      	movs	r0, #0
 80132f2:	4770      	bx	lr

080132f4 <ucdr_check_final_buffer_behavior>:
 80132f4:	7d83      	ldrb	r3, [r0, #22]
 80132f6:	b943      	cbnz	r3, 801330a <ucdr_check_final_buffer_behavior+0x16>
 80132f8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80132fc:	4291      	cmp	r1, r2
 80132fe:	b510      	push	{r4, lr}
 8013300:	4604      	mov	r4, r0
 8013302:	d205      	bcs.n	8013310 <ucdr_check_final_buffer_behavior+0x1c>
 8013304:	2301      	movs	r3, #1
 8013306:	4618      	mov	r0, r3
 8013308:	bd10      	pop	{r4, pc}
 801330a:	2300      	movs	r3, #0
 801330c:	4618      	mov	r0, r3
 801330e:	4770      	bx	lr
 8013310:	6982      	ldr	r2, [r0, #24]
 8013312:	b13a      	cbz	r2, 8013324 <ucdr_check_final_buffer_behavior+0x30>
 8013314:	69c1      	ldr	r1, [r0, #28]
 8013316:	4790      	blx	r2
 8013318:	f080 0301 	eor.w	r3, r0, #1
 801331c:	b2db      	uxtb	r3, r3
 801331e:	75a0      	strb	r0, [r4, #22]
 8013320:	4618      	mov	r0, r3
 8013322:	bd10      	pop	{r4, pc}
 8013324:	2001      	movs	r0, #1
 8013326:	75a0      	strb	r0, [r4, #22]
 8013328:	e7fa      	b.n	8013320 <ucdr_check_final_buffer_behavior+0x2c>
 801332a:	bf00      	nop

0801332c <ucdr_set_on_full_buffer_callback>:
 801332c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8013330:	4770      	bx	lr
 8013332:	bf00      	nop

08013334 <ucdr_init_buffer_origin_offset_endian>:
 8013334:	b410      	push	{r4}
 8013336:	9c01      	ldr	r4, [sp, #4]
 8013338:	6001      	str	r1, [r0, #0]
 801333a:	440a      	add	r2, r1
 801333c:	6042      	str	r2, [r0, #4]
 801333e:	190a      	adds	r2, r1, r4
 8013340:	441c      	add	r4, r3
 8013342:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8013346:	6082      	str	r2, [r0, #8]
 8013348:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801334c:	7503      	strb	r3, [r0, #20]
 801334e:	2200      	movs	r2, #0
 8013350:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8013354:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013358:	7542      	strb	r2, [r0, #21]
 801335a:	7582      	strb	r2, [r0, #22]
 801335c:	4770      	bx	lr
 801335e:	bf00      	nop

08013360 <ucdr_init_buffer_origin_offset>:
 8013360:	b510      	push	{r4, lr}
 8013362:	b082      	sub	sp, #8
 8013364:	9c04      	ldr	r4, [sp, #16]
 8013366:	9400      	str	r4, [sp, #0]
 8013368:	2401      	movs	r4, #1
 801336a:	9401      	str	r4, [sp, #4]
 801336c:	f7ff ffe2 	bl	8013334 <ucdr_init_buffer_origin_offset_endian>
 8013370:	b002      	add	sp, #8
 8013372:	bd10      	pop	{r4, pc}

08013374 <ucdr_init_buffer_origin>:
 8013374:	b510      	push	{r4, lr}
 8013376:	b082      	sub	sp, #8
 8013378:	2400      	movs	r4, #0
 801337a:	9400      	str	r4, [sp, #0]
 801337c:	f7ff fff0 	bl	8013360 <ucdr_init_buffer_origin_offset>
 8013380:	b002      	add	sp, #8
 8013382:	bd10      	pop	{r4, pc}

08013384 <ucdr_init_buffer>:
 8013384:	2300      	movs	r3, #0
 8013386:	f7ff bff5 	b.w	8013374 <ucdr_init_buffer_origin>
 801338a:	bf00      	nop

0801338c <ucdr_alignment>:
 801338c:	fbb0 f3f1 	udiv	r3, r0, r1
 8013390:	fb03 0011 	mls	r0, r3, r1, r0
 8013394:	1a08      	subs	r0, r1, r0
 8013396:	3901      	subs	r1, #1
 8013398:	4008      	ands	r0, r1
 801339a:	4770      	bx	lr

0801339c <ucdr_buffer_alignment>:
 801339c:	7d43      	ldrb	r3, [r0, #21]
 801339e:	428b      	cmp	r3, r1
 80133a0:	d208      	bcs.n	80133b4 <ucdr_buffer_alignment+0x18>
 80133a2:	6900      	ldr	r0, [r0, #16]
 80133a4:	fbb0 f3f1 	udiv	r3, r0, r1
 80133a8:	fb01 0013 	mls	r0, r1, r3, r0
 80133ac:	1a08      	subs	r0, r1, r0
 80133ae:	3901      	subs	r1, #1
 80133b0:	4008      	ands	r0, r1
 80133b2:	4770      	bx	lr
 80133b4:	2000      	movs	r0, #0
 80133b6:	4770      	bx	lr

080133b8 <ucdr_align_to>:
 80133b8:	b538      	push	{r3, r4, r5, lr}
 80133ba:	4604      	mov	r4, r0
 80133bc:	460d      	mov	r5, r1
 80133be:	f7ff ffed 	bl	801339c <ucdr_buffer_alignment>
 80133c2:	68a3      	ldr	r3, [r4, #8]
 80133c4:	6921      	ldr	r1, [r4, #16]
 80133c6:	7565      	strb	r5, [r4, #21]
 80133c8:	181a      	adds	r2, r3, r0
 80133ca:	6863      	ldr	r3, [r4, #4]
 80133cc:	4293      	cmp	r3, r2
 80133ce:	4408      	add	r0, r1
 80133d0:	bf28      	it	cs
 80133d2:	4613      	movcs	r3, r2
 80133d4:	6120      	str	r0, [r4, #16]
 80133d6:	60a3      	str	r3, [r4, #8]
 80133d8:	bd38      	pop	{r3, r4, r5, pc}
 80133da:	bf00      	nop

080133dc <ucdr_buffer_length>:
 80133dc:	6882      	ldr	r2, [r0, #8]
 80133de:	6800      	ldr	r0, [r0, #0]
 80133e0:	1a10      	subs	r0, r2, r0
 80133e2:	4770      	bx	lr

080133e4 <ucdr_buffer_remaining>:
 80133e4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80133e8:	1a10      	subs	r0, r2, r0
 80133ea:	4770      	bx	lr

080133ec <ucdr_check_final_buffer_behavior_array>:
 80133ec:	b538      	push	{r3, r4, r5, lr}
 80133ee:	7d83      	ldrb	r3, [r0, #22]
 80133f0:	b963      	cbnz	r3, 801340c <ucdr_check_final_buffer_behavior_array+0x20>
 80133f2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80133f6:	429a      	cmp	r2, r3
 80133f8:	4604      	mov	r4, r0
 80133fa:	460d      	mov	r5, r1
 80133fc:	d308      	bcc.n	8013410 <ucdr_check_final_buffer_behavior_array+0x24>
 80133fe:	b139      	cbz	r1, 8013410 <ucdr_check_final_buffer_behavior_array+0x24>
 8013400:	6983      	ldr	r3, [r0, #24]
 8013402:	b163      	cbz	r3, 801341e <ucdr_check_final_buffer_behavior_array+0x32>
 8013404:	69c1      	ldr	r1, [r0, #28]
 8013406:	4798      	blx	r3
 8013408:	75a0      	strb	r0, [r4, #22]
 801340a:	b108      	cbz	r0, 8013410 <ucdr_check_final_buffer_behavior_array+0x24>
 801340c:	2000      	movs	r0, #0
 801340e:	bd38      	pop	{r3, r4, r5, pc}
 8013410:	4620      	mov	r0, r4
 8013412:	f7ff ffe7 	bl	80133e4 <ucdr_buffer_remaining>
 8013416:	42a8      	cmp	r0, r5
 8013418:	bf28      	it	cs
 801341a:	4628      	movcs	r0, r5
 801341c:	bd38      	pop	{r3, r4, r5, pc}
 801341e:	2301      	movs	r3, #1
 8013420:	7583      	strb	r3, [r0, #22]
 8013422:	e7f3      	b.n	801340c <ucdr_check_final_buffer_behavior_array+0x20>

08013424 <ucdr_advance_buffer>:
 8013424:	b538      	push	{r3, r4, r5, lr}
 8013426:	4604      	mov	r4, r0
 8013428:	460d      	mov	r5, r1
 801342a:	f7ff ff57 	bl	80132dc <ucdr_check_buffer_available_for>
 801342e:	b178      	cbz	r0, 8013450 <ucdr_advance_buffer+0x2c>
 8013430:	6923      	ldr	r3, [r4, #16]
 8013432:	68a2      	ldr	r2, [r4, #8]
 8013434:	442b      	add	r3, r5
 8013436:	6123      	str	r3, [r4, #16]
 8013438:	2301      	movs	r3, #1
 801343a:	442a      	add	r2, r5
 801343c:	7563      	strb	r3, [r4, #21]
 801343e:	60a2      	str	r2, [r4, #8]
 8013440:	bd38      	pop	{r3, r4, r5, pc}
 8013442:	68a2      	ldr	r2, [r4, #8]
 8013444:	6923      	ldr	r3, [r4, #16]
 8013446:	4402      	add	r2, r0
 8013448:	4403      	add	r3, r0
 801344a:	1a2d      	subs	r5, r5, r0
 801344c:	60a2      	str	r2, [r4, #8]
 801344e:	6123      	str	r3, [r4, #16]
 8013450:	4629      	mov	r1, r5
 8013452:	2201      	movs	r2, #1
 8013454:	4620      	mov	r0, r4
 8013456:	f7ff ffc9 	bl	80133ec <ucdr_check_final_buffer_behavior_array>
 801345a:	2800      	cmp	r0, #0
 801345c:	d1f1      	bne.n	8013442 <ucdr_advance_buffer+0x1e>
 801345e:	2301      	movs	r3, #1
 8013460:	7563      	strb	r3, [r4, #21]
 8013462:	bd38      	pop	{r3, r4, r5, pc}

08013464 <rcl_get_zero_initialized_publisher>:
 8013464:	4b01      	ldr	r3, [pc, #4]	@ (801346c <rcl_get_zero_initialized_publisher+0x8>)
 8013466:	6818      	ldr	r0, [r3, #0]
 8013468:	4770      	bx	lr
 801346a:	bf00      	nop
 801346c:	080217ac 	.word	0x080217ac

08013470 <rcl_publisher_init>:
 8013470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013474:	b088      	sub	sp, #32
 8013476:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8013478:	2d00      	cmp	r5, #0
 801347a:	d069      	beq.n	8013550 <rcl_publisher_init+0xe0>
 801347c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 8013480:	4604      	mov	r4, r0
 8013482:	4648      	mov	r0, r9
 8013484:	460e      	mov	r6, r1
 8013486:	4690      	mov	r8, r2
 8013488:	461f      	mov	r7, r3
 801348a:	f001 f83d 	bl	8014508 <rcutils_allocator_is_valid>
 801348e:	2800      	cmp	r0, #0
 8013490:	d05e      	beq.n	8013550 <rcl_publisher_init+0xe0>
 8013492:	2c00      	cmp	r4, #0
 8013494:	d05c      	beq.n	8013550 <rcl_publisher_init+0xe0>
 8013496:	f8d4 a000 	ldr.w	sl, [r4]
 801349a:	f1ba 0f00 	cmp.w	sl, #0
 801349e:	d004      	beq.n	80134aa <rcl_publisher_init+0x3a>
 80134a0:	2764      	movs	r7, #100	@ 0x64
 80134a2:	4638      	mov	r0, r7
 80134a4:	b008      	add	sp, #32
 80134a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134aa:	4630      	mov	r0, r6
 80134ac:	f006 f802 	bl	80194b4 <rcl_node_is_valid>
 80134b0:	2800      	cmp	r0, #0
 80134b2:	d052      	beq.n	801355a <rcl_publisher_init+0xea>
 80134b4:	f1b8 0f00 	cmp.w	r8, #0
 80134b8:	d04a      	beq.n	8013550 <rcl_publisher_init+0xe0>
 80134ba:	2f00      	cmp	r7, #0
 80134bc:	d048      	beq.n	8013550 <rcl_publisher_init+0xe0>
 80134be:	e9cd aa03 	strd	sl, sl, [sp, #12]
 80134c2:	aa07      	add	r2, sp, #28
 80134c4:	9205      	str	r2, [sp, #20]
 80134c6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 80134ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80134ce:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80134d2:	f8cd a01c 	str.w	sl, [sp, #28]
 80134d6:	4639      	mov	r1, r7
 80134d8:	e899 000c 	ldmia.w	r9, {r2, r3}
 80134dc:	4630      	mov	r0, r6
 80134de:	f006 f83d 	bl	801955c <rcl_node_resolve_name>
 80134e2:	4607      	mov	r7, r0
 80134e4:	2800      	cmp	r0, #0
 80134e6:	d14f      	bne.n	8013588 <rcl_publisher_init+0x118>
 80134e8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80134ea:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 80134ec:	20c8      	movs	r0, #200	@ 0xc8
 80134ee:	4798      	blx	r3
 80134f0:	6020      	str	r0, [r4, #0]
 80134f2:	2800      	cmp	r0, #0
 80134f4:	d04e      	beq.n	8013594 <rcl_publisher_init+0x124>
 80134f6:	4630      	mov	r0, r6
 80134f8:	f005 fffe 	bl	80194f8 <rcl_node_get_rmw_handle>
 80134fc:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8013500:	9300      	str	r3, [sp, #0]
 8013502:	9a07      	ldr	r2, [sp, #28]
 8013504:	6827      	ldr	r7, [r4, #0]
 8013506:	462b      	mov	r3, r5
 8013508:	4641      	mov	r1, r8
 801350a:	f001 f90b 	bl	8014724 <rmw_create_publisher>
 801350e:	6823      	ldr	r3, [r4, #0]
 8013510:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 8013514:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8013518:	b370      	cbz	r0, 8013578 <rcl_publisher_init+0x108>
 801351a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 801351e:	f001 f9e1 	bl	80148e4 <rmw_publisher_get_actual_qos>
 8013522:	6823      	ldr	r3, [r4, #0]
 8013524:	4607      	mov	r7, r0
 8013526:	b9d0      	cbnz	r0, 801355e <rcl_publisher_init+0xee>
 8013528:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 801352c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 8013530:	4629      	mov	r1, r5
 8013532:	2270      	movs	r2, #112	@ 0x70
 8013534:	4618      	mov	r0, r3
 8013536:	f00d f90a 	bl	802074e <memcpy>
 801353a:	6832      	ldr	r2, [r6, #0]
 801353c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 8013540:	9807      	ldr	r0, [sp, #28]
 8013542:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8013544:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8013546:	4798      	blx	r3
 8013548:	4638      	mov	r0, r7
 801354a:	b008      	add	sp, #32
 801354c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013550:	270b      	movs	r7, #11
 8013552:	4638      	mov	r0, r7
 8013554:	b008      	add	sp, #32
 8013556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801355a:	27c8      	movs	r7, #200	@ 0xc8
 801355c:	e7a1      	b.n	80134a2 <rcl_publisher_init+0x32>
 801355e:	b18b      	cbz	r3, 8013584 <rcl_publisher_init+0x114>
 8013560:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8013564:	b142      	cbz	r2, 8013578 <rcl_publisher_init+0x108>
 8013566:	4630      	mov	r0, r6
 8013568:	f005 ffc6 	bl	80194f8 <rcl_node_get_rmw_handle>
 801356c:	6823      	ldr	r3, [r4, #0]
 801356e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 8013572:	f001 f9b9 	bl	80148e8 <rmw_destroy_publisher>
 8013576:	6823      	ldr	r3, [r4, #0]
 8013578:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 801357a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 801357c:	4618      	mov	r0, r3
 801357e:	4790      	blx	r2
 8013580:	2300      	movs	r3, #0
 8013582:	6023      	str	r3, [r4, #0]
 8013584:	2701      	movs	r7, #1
 8013586:	e7db      	b.n	8013540 <rcl_publisher_init+0xd0>
 8013588:	2867      	cmp	r0, #103	@ 0x67
 801358a:	d0d9      	beq.n	8013540 <rcl_publisher_init+0xd0>
 801358c:	2869      	cmp	r0, #105	@ 0x69
 801358e:	d003      	beq.n	8013598 <rcl_publisher_init+0x128>
 8013590:	280a      	cmp	r0, #10
 8013592:	d1f7      	bne.n	8013584 <rcl_publisher_init+0x114>
 8013594:	270a      	movs	r7, #10
 8013596:	e7d3      	b.n	8013540 <rcl_publisher_init+0xd0>
 8013598:	2767      	movs	r7, #103	@ 0x67
 801359a:	e7d1      	b.n	8013540 <rcl_publisher_init+0xd0>

0801359c <rcl_publisher_get_default_options>:
 801359c:	b570      	push	{r4, r5, r6, lr}
 801359e:	4d14      	ldr	r5, [pc, #80]	@ (80135f0 <rcl_publisher_get_default_options+0x54>)
 80135a0:	4914      	ldr	r1, [pc, #80]	@ (80135f4 <rcl_publisher_get_default_options+0x58>)
 80135a2:	b088      	sub	sp, #32
 80135a4:	4604      	mov	r4, r0
 80135a6:	2250      	movs	r2, #80	@ 0x50
 80135a8:	4628      	mov	r0, r5
 80135aa:	f00d f8d0 	bl	802074e <memcpy>
 80135ae:	a802      	add	r0, sp, #8
 80135b0:	f000 ff9c 	bl	80144ec <rcutils_get_default_allocator>
 80135b4:	f10d 0c08 	add.w	ip, sp, #8
 80135b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80135bc:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 80135c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80135c4:	466e      	mov	r6, sp
 80135c6:	f8dc 3000 	ldr.w	r3, [ip]
 80135ca:	f8ce 3000 	str.w	r3, [lr]
 80135ce:	4630      	mov	r0, r6
 80135d0:	f001 f82a 	bl	8014628 <rmw_get_default_publisher_options>
 80135d4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80135d8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 80135dc:	e883 0003 	stmia.w	r3, {r0, r1}
 80135e0:	2270      	movs	r2, #112	@ 0x70
 80135e2:	4629      	mov	r1, r5
 80135e4:	4620      	mov	r0, r4
 80135e6:	f00d f8b2 	bl	802074e <memcpy>
 80135ea:	4620      	mov	r0, r4
 80135ec:	b008      	add	sp, #32
 80135ee:	bd70      	pop	{r4, r5, r6, pc}
 80135f0:	20011a50 	.word	0x20011a50
 80135f4:	080217b0 	.word	0x080217b0

080135f8 <rcl_publish>:
 80135f8:	b1f8      	cbz	r0, 801363a <rcl_publish+0x42>
 80135fa:	6803      	ldr	r3, [r0, #0]
 80135fc:	b570      	push	{r4, r5, r6, lr}
 80135fe:	4604      	mov	r4, r0
 8013600:	b1b3      	cbz	r3, 8013630 <rcl_publish+0x38>
 8013602:	4616      	mov	r6, r2
 8013604:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 8013608:	b192      	cbz	r2, 8013630 <rcl_publish+0x38>
 801360a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 801360e:	460d      	mov	r5, r1
 8013610:	f005 fb76 	bl	8018d00 <rcl_context_is_valid>
 8013614:	b160      	cbz	r0, 8013630 <rcl_publish+0x38>
 8013616:	6823      	ldr	r3, [r4, #0]
 8013618:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 801361c:	b140      	cbz	r0, 8013630 <rcl_publish+0x38>
 801361e:	b155      	cbz	r5, 8013636 <rcl_publish+0x3e>
 8013620:	4632      	mov	r2, r6
 8013622:	4629      	mov	r1, r5
 8013624:	f001 f81e 	bl	8014664 <rmw_publish>
 8013628:	3800      	subs	r0, #0
 801362a:	bf18      	it	ne
 801362c:	2001      	movne	r0, #1
 801362e:	bd70      	pop	{r4, r5, r6, pc}
 8013630:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8013634:	bd70      	pop	{r4, r5, r6, pc}
 8013636:	200b      	movs	r0, #11
 8013638:	bd70      	pop	{r4, r5, r6, pc}
 801363a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 801363e:	4770      	bx	lr

08013640 <rcl_publisher_is_valid>:
 8013640:	b1a0      	cbz	r0, 801366c <rcl_publisher_is_valid+0x2c>
 8013642:	6803      	ldr	r3, [r0, #0]
 8013644:	b510      	push	{r4, lr}
 8013646:	4604      	mov	r4, r0
 8013648:	b173      	cbz	r3, 8013668 <rcl_publisher_is_valid+0x28>
 801364a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 801364e:	b15a      	cbz	r2, 8013668 <rcl_publisher_is_valid+0x28>
 8013650:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8013654:	f005 fb54 	bl	8018d00 <rcl_context_is_valid>
 8013658:	b130      	cbz	r0, 8013668 <rcl_publisher_is_valid+0x28>
 801365a:	6823      	ldr	r3, [r4, #0]
 801365c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8013660:	3800      	subs	r0, #0
 8013662:	bf18      	it	ne
 8013664:	2001      	movne	r0, #1
 8013666:	bd10      	pop	{r4, pc}
 8013668:	2000      	movs	r0, #0
 801366a:	bd10      	pop	{r4, pc}
 801366c:	2000      	movs	r0, #0
 801366e:	4770      	bx	lr

08013670 <rcl_publisher_is_valid_except_context>:
 8013670:	b130      	cbz	r0, 8013680 <rcl_publisher_is_valid_except_context+0x10>
 8013672:	6800      	ldr	r0, [r0, #0]
 8013674:	b120      	cbz	r0, 8013680 <rcl_publisher_is_valid_except_context+0x10>
 8013676:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 801367a:	3800      	subs	r0, #0
 801367c:	bf18      	it	ne
 801367e:	2001      	movne	r0, #1
 8013680:	4770      	bx	lr
 8013682:	bf00      	nop

08013684 <_rclc_check_for_new_data>:
 8013684:	2800      	cmp	r0, #0
 8013686:	d046      	beq.n	8013716 <_rclc_check_for_new_data+0x92>
 8013688:	b510      	push	{r4, lr}
 801368a:	7802      	ldrb	r2, [r0, #0]
 801368c:	b084      	sub	sp, #16
 801368e:	4603      	mov	r3, r0
 8013690:	2a0a      	cmp	r2, #10
 8013692:	d842      	bhi.n	801371a <_rclc_check_for_new_data+0x96>
 8013694:	e8df f002 	tbb	[pc, r2]
 8013698:	14181212 	.word	0x14181212
 801369c:	06060614 	.word	0x06060614
 80136a0:	2e1a      	.short	0x2e1a
 80136a2:	16          	.byte	0x16
 80136a3:	00          	.byte	0x00
 80136a4:	6a0a      	ldr	r2, [r1, #32]
 80136a6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80136a8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80136ac:	2000      	movs	r0, #0
 80136ae:	1a12      	subs	r2, r2, r0
 80136b0:	bf18      	it	ne
 80136b2:	2201      	movne	r2, #1
 80136b4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80136b8:	b004      	add	sp, #16
 80136ba:	bd10      	pop	{r4, pc}
 80136bc:	680a      	ldr	r2, [r1, #0]
 80136be:	e7f2      	b.n	80136a6 <_rclc_check_for_new_data+0x22>
 80136c0:	698a      	ldr	r2, [r1, #24]
 80136c2:	e7f0      	b.n	80136a6 <_rclc_check_for_new_data+0x22>
 80136c4:	688a      	ldr	r2, [r1, #8]
 80136c6:	e7ee      	b.n	80136a6 <_rclc_check_for_new_data+0x22>
 80136c8:	690a      	ldr	r2, [r1, #16]
 80136ca:	e7ec      	b.n	80136a6 <_rclc_check_for_new_data+0x22>
 80136cc:	685c      	ldr	r4, [r3, #4]
 80136ce:	4608      	mov	r0, r1
 80136d0:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 80136d4:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 80136d8:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 80136dc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80136e0:	9300      	str	r3, [sp, #0]
 80136e2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 80136e6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 80136ea:	f104 0110 	add.w	r1, r4, #16
 80136ee:	f007 fbff 	bl	801aef0 <rcl_action_client_wait_set_get_entities_ready>
 80136f2:	e7e1      	b.n	80136b8 <_rclc_check_for_new_data+0x34>
 80136f4:	685c      	ldr	r4, [r3, #4]
 80136f6:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 80136fa:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 80136fe:	e9cd 3200 	strd	r3, r2, [sp]
 8013702:	4608      	mov	r0, r1
 8013704:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 8013708:	f104 0220 	add.w	r2, r4, #32
 801370c:	f104 0110 	add.w	r1, r4, #16
 8013710:	f007 fe04 	bl	801b31c <rcl_action_server_wait_set_get_entities_ready>
 8013714:	e7d0      	b.n	80136b8 <_rclc_check_for_new_data+0x34>
 8013716:	200b      	movs	r0, #11
 8013718:	4770      	bx	lr
 801371a:	2001      	movs	r0, #1
 801371c:	e7cc      	b.n	80136b8 <_rclc_check_for_new_data+0x34>
 801371e:	bf00      	nop

08013720 <_rclc_take_new_data>:
 8013720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013722:	b09b      	sub	sp, #108	@ 0x6c
 8013724:	2800      	cmp	r0, #0
 8013726:	f000 8088 	beq.w	801383a <_rclc_take_new_data+0x11a>
 801372a:	7803      	ldrb	r3, [r0, #0]
 801372c:	4604      	mov	r4, r0
 801372e:	2b0a      	cmp	r3, #10
 8013730:	f200 8167 	bhi.w	8013a02 <_rclc_take_new_data+0x2e2>
 8013734:	e8df f003 	tbb	[pc, r3]
 8013738:	44152d2d 	.word	0x44152d2d
 801373c:	19191944 	.word	0x19191944
 8013740:	065a      	.short	0x065a
 8013742:	15          	.byte	0x15
 8013743:	00          	.byte	0x00
 8013744:	6840      	ldr	r0, [r0, #4]
 8013746:	f890 3020 	ldrb.w	r3, [r0, #32]
 801374a:	2b00      	cmp	r3, #0
 801374c:	f040 80b2 	bne.w	80138b4 <_rclc_take_new_data+0x194>
 8013750:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 8013754:	2b00      	cmp	r3, #0
 8013756:	f040 80e4 	bne.w	8013922 <_rclc_take_new_data+0x202>
 801375a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 801375e:	2b00      	cmp	r3, #0
 8013760:	d16f      	bne.n	8013842 <_rclc_take_new_data+0x122>
 8013762:	2500      	movs	r5, #0
 8013764:	4628      	mov	r0, r5
 8013766:	b01b      	add	sp, #108	@ 0x6c
 8013768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801376a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 801376c:	6a0b      	ldr	r3, [r1, #32]
 801376e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d0f5      	beq.n	8013762 <_rclc_take_new_data+0x42>
 8013776:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 801377a:	f104 0110 	add.w	r1, r4, #16
 801377e:	f006 f897 	bl	80198b0 <rcl_take_request>
 8013782:	4605      	mov	r5, r0
 8013784:	2800      	cmp	r0, #0
 8013786:	d0ec      	beq.n	8013762 <_rclc_take_new_data+0x42>
 8013788:	f240 2359 	movw	r3, #601	@ 0x259
 801378c:	4298      	cmp	r0, r3
 801378e:	d013      	beq.n	80137b8 <_rclc_take_new_data+0x98>
 8013790:	e029      	b.n	80137e6 <_rclc_take_new_data+0xc6>
 8013792:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 8013794:	680b      	ldr	r3, [r1, #0]
 8013796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d0e1      	beq.n	8013762 <_rclc_take_new_data+0x42>
 801379e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 80137a2:	2300      	movs	r3, #0
 80137a4:	aa0a      	add	r2, sp, #40	@ 0x28
 80137a6:	f006 f9bf 	bl	8019b28 <rcl_take>
 80137aa:	4605      	mov	r5, r0
 80137ac:	2800      	cmp	r0, #0
 80137ae:	d0d9      	beq.n	8013764 <_rclc_take_new_data+0x44>
 80137b0:	f240 1391 	movw	r3, #401	@ 0x191
 80137b4:	4298      	cmp	r0, r3
 80137b6:	d116      	bne.n	80137e6 <_rclc_take_new_data+0xc6>
 80137b8:	2300      	movs	r3, #0
 80137ba:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 80137be:	e7d1      	b.n	8013764 <_rclc_take_new_data+0x44>
 80137c0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80137c2:	698b      	ldr	r3, [r1, #24]
 80137c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d0ca      	beq.n	8013762 <_rclc_take_new_data+0x42>
 80137cc:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 80137d0:	f104 0110 	add.w	r1, r4, #16
 80137d4:	f005 fa24 	bl	8018c20 <rcl_take_response>
 80137d8:	4605      	mov	r5, r0
 80137da:	2800      	cmp	r0, #0
 80137dc:	d0c1      	beq.n	8013762 <_rclc_take_new_data+0x42>
 80137de:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80137e2:	4298      	cmp	r0, r3
 80137e4:	d0be      	beq.n	8013764 <_rclc_take_new_data+0x44>
 80137e6:	f000 feb3 	bl	8014550 <rcutils_reset_error>
 80137ea:	e7bb      	b.n	8013764 <_rclc_take_new_data+0x44>
 80137ec:	6840      	ldr	r0, [r0, #4]
 80137ee:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d17d      	bne.n	80138f2 <_rclc_take_new_data+0x1d2>
 80137f6:	69c3      	ldr	r3, [r0, #28]
 80137f8:	b11b      	cbz	r3, 8013802 <_rclc_take_new_data+0xe2>
 80137fa:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d144      	bne.n	801388c <_rclc_take_new_data+0x16c>
 8013802:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8013806:	2b00      	cmp	r3, #0
 8013808:	f040 80ac 	bne.w	8013964 <_rclc_take_new_data+0x244>
 801380c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8013810:	2b00      	cmp	r3, #0
 8013812:	d0a6      	beq.n	8013762 <_rclc_take_new_data+0x42>
 8013814:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8013816:	a90a      	add	r1, sp, #40	@ 0x28
 8013818:	3010      	adds	r0, #16
 801381a:	f007 fa41 	bl	801aca0 <rcl_action_take_result_response>
 801381e:	4605      	mov	r5, r0
 8013820:	2800      	cmp	r0, #0
 8013822:	d1e0      	bne.n	80137e6 <_rclc_take_new_data+0xc6>
 8013824:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013828:	6860      	ldr	r0, [r4, #4]
 801382a:	f007 fe9b 	bl	801b564 <rclc_action_find_handle_by_result_request_sequence_number>
 801382e:	2800      	cmp	r0, #0
 8013830:	d098      	beq.n	8013764 <_rclc_take_new_data+0x44>
 8013832:	2301      	movs	r3, #1
 8013834:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 8013838:	e794      	b.n	8013764 <_rclc_take_new_data+0x44>
 801383a:	250b      	movs	r5, #11
 801383c:	4628      	mov	r0, r5
 801383e:	b01b      	add	sp, #108	@ 0x6c
 8013840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013842:	ae04      	add	r6, sp, #16
 8013844:	aa0a      	add	r2, sp, #40	@ 0x28
 8013846:	3010      	adds	r0, #16
 8013848:	4631      	mov	r1, r6
 801384a:	f007 fc9b 	bl	801b184 <rcl_action_take_cancel_request>
 801384e:	4605      	mov	r5, r0
 8013850:	2800      	cmp	r0, #0
 8013852:	d1c8      	bne.n	80137e6 <_rclc_take_new_data+0xc6>
 8013854:	6860      	ldr	r0, [r4, #4]
 8013856:	a90a      	add	r1, sp, #40	@ 0x28
 8013858:	f007 fe42 	bl	801b4e0 <rclc_action_find_goal_handle_by_uuid>
 801385c:	4607      	mov	r7, r0
 801385e:	2800      	cmp	r0, #0
 8013860:	f000 80bb 	beq.w	80139da <_rclc_take_new_data+0x2ba>
 8013864:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8013868:	2101      	movs	r1, #1
 801386a:	f007 fdc3 	bl	801b3f4 <rcl_action_transition_goal_state>
 801386e:	2803      	cmp	r0, #3
 8013870:	4684      	mov	ip, r0
 8013872:	f040 80a7 	bne.w	80139c4 <_rclc_take_new_data+0x2a4>
 8013876:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013878:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 801387c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801387e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8013882:	e884 0003 	stmia.w	r4, {r0, r1}
 8013886:	f887 c008 	strb.w	ip, [r7, #8]
 801388a:	e76b      	b.n	8013764 <_rclc_take_new_data+0x44>
 801388c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801388e:	3010      	adds	r0, #16
 8013890:	f007 fa86 	bl	801ada0 <rcl_action_take_feedback>
 8013894:	4605      	mov	r5, r0
 8013896:	2800      	cmp	r0, #0
 8013898:	d1a5      	bne.n	80137e6 <_rclc_take_new_data+0xc6>
 801389a:	6860      	ldr	r0, [r4, #4]
 801389c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 801389e:	f007 fe1f 	bl	801b4e0 <rclc_action_find_goal_handle_by_uuid>
 80138a2:	4603      	mov	r3, r0
 80138a4:	2800      	cmp	r0, #0
 80138a6:	f000 80a3 	beq.w	80139f0 <_rclc_take_new_data+0x2d0>
 80138aa:	2201      	movs	r2, #1
 80138ac:	6860      	ldr	r0, [r4, #4]
 80138ae:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80138b2:	e7a6      	b.n	8013802 <_rclc_take_new_data+0xe2>
 80138b4:	f007 fdee 	bl	801b494 <rclc_action_take_goal_handle>
 80138b8:	4606      	mov	r6, r0
 80138ba:	6860      	ldr	r0, [r4, #4]
 80138bc:	2e00      	cmp	r6, #0
 80138be:	f43f af47 	beq.w	8013750 <_rclc_take_new_data+0x30>
 80138c2:	6070      	str	r0, [r6, #4]
 80138c4:	69f2      	ldr	r2, [r6, #28]
 80138c6:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 80138ca:	3010      	adds	r0, #16
 80138cc:	f007 fba4 	bl	801b018 <rcl_action_take_goal_request>
 80138d0:	4605      	mov	r5, r0
 80138d2:	2800      	cmp	r0, #0
 80138d4:	f040 808e 	bne.w	80139f4 <_rclc_take_new_data+0x2d4>
 80138d8:	69f7      	ldr	r7, [r6, #28]
 80138da:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80138dc:	7235      	strb	r5, [r6, #8]
 80138de:	f8c6 0009 	str.w	r0, [r6, #9]
 80138e2:	f8c6 100d 	str.w	r1, [r6, #13]
 80138e6:	6860      	ldr	r0, [r4, #4]
 80138e8:	f8c6 2011 	str.w	r2, [r6, #17]
 80138ec:	f8c6 3015 	str.w	r3, [r6, #21]
 80138f0:	e72e      	b.n	8013750 <_rclc_take_new_data+0x30>
 80138f2:	aa04      	add	r2, sp, #16
 80138f4:	a90a      	add	r1, sp, #40	@ 0x28
 80138f6:	3010      	adds	r0, #16
 80138f8:	f007 f95a 	bl	801abb0 <rcl_action_take_goal_response>
 80138fc:	4605      	mov	r5, r0
 80138fe:	2800      	cmp	r0, #0
 8013900:	f47f af71 	bne.w	80137e6 <_rclc_take_new_data+0xc6>
 8013904:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8013908:	6860      	ldr	r0, [r4, #4]
 801390a:	f007 fe19 	bl	801b540 <rclc_action_find_handle_by_goal_request_sequence_number>
 801390e:	b130      	cbz	r0, 801391e <_rclc_take_new_data+0x1fe>
 8013910:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8013914:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8013918:	2201      	movs	r2, #1
 801391a:	f880 2020 	strb.w	r2, [r0, #32]
 801391e:	6860      	ldr	r0, [r4, #4]
 8013920:	e769      	b.n	80137f6 <_rclc_take_new_data+0xd6>
 8013922:	aa04      	add	r2, sp, #16
 8013924:	3010      	adds	r0, #16
 8013926:	a90a      	add	r1, sp, #40	@ 0x28
 8013928:	f007 fbec 	bl	801b104 <rcl_action_take_result_request>
 801392c:	4605      	mov	r5, r0
 801392e:	2800      	cmp	r0, #0
 8013930:	f47f af59 	bne.w	80137e6 <_rclc_take_new_data+0xc6>
 8013934:	6860      	ldr	r0, [r4, #4]
 8013936:	a904      	add	r1, sp, #16
 8013938:	f007 fdd2 	bl	801b4e0 <rclc_action_find_goal_handle_by_uuid>
 801393c:	4607      	mov	r7, r0
 801393e:	b160      	cbz	r0, 801395a <_rclc_take_new_data+0x23a>
 8013940:	ad0a      	add	r5, sp, #40	@ 0x28
 8013942:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8013946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013948:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 801394a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801394e:	f04f 0c02 	mov.w	ip, #2
 8013952:	e886 0003 	stmia.w	r6, {r0, r1}
 8013956:	f887 c008 	strb.w	ip, [r7, #8]
 801395a:	6860      	ldr	r0, [r4, #4]
 801395c:	2300      	movs	r3, #0
 801395e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 8013962:	e6fa      	b.n	801375a <_rclc_take_new_data+0x3a>
 8013964:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 8013968:	a90a      	add	r1, sp, #40	@ 0x28
 801396a:	3010      	adds	r0, #16
 801396c:	f007 f9d8 	bl	801ad20 <rcl_action_take_cancel_response>
 8013970:	4605      	mov	r5, r0
 8013972:	2800      	cmp	r0, #0
 8013974:	f47f af37 	bne.w	80137e6 <_rclc_take_new_data+0xc6>
 8013978:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801397c:	6860      	ldr	r0, [r4, #4]
 801397e:	f007 fe03 	bl	801b588 <rclc_action_find_handle_by_cancel_request_sequence_number>
 8013982:	4606      	mov	r6, r0
 8013984:	6860      	ldr	r0, [r4, #4]
 8013986:	2e00      	cmp	r6, #0
 8013988:	f43f af40 	beq.w	801380c <_rclc_take_new_data+0xec>
 801398c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801398e:	2701      	movs	r7, #1
 8013990:	84b7      	strh	r7, [r6, #36]	@ 0x24
 8013992:	2b00      	cmp	r3, #0
 8013994:	f43f af3a 	beq.w	801380c <_rclc_take_new_data+0xec>
 8013998:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801399a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 801399e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80139a2:	f007 fd9d 	bl	801b4e0 <rclc_action_find_goal_handle_by_uuid>
 80139a6:	b138      	cbz	r0, 80139b8 <_rclc_take_new_data+0x298>
 80139a8:	6860      	ldr	r0, [r4, #4]
 80139aa:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80139ac:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 80139b0:	3501      	adds	r5, #1
 80139b2:	42ab      	cmp	r3, r5
 80139b4:	d8f0      	bhi.n	8013998 <_rclc_take_new_data+0x278>
 80139b6:	e729      	b.n	801380c <_rclc_take_new_data+0xec>
 80139b8:	6860      	ldr	r0, [r4, #4]
 80139ba:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80139bc:	3501      	adds	r5, #1
 80139be:	42ab      	cmp	r3, r5
 80139c0:	d8ea      	bhi.n	8013998 <_rclc_take_new_data+0x278>
 80139c2:	e723      	b.n	801380c <_rclc_take_new_data+0xec>
 80139c4:	ab06      	add	r3, sp, #24
 80139c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80139c8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80139cc:	2103      	movs	r1, #3
 80139ce:	e896 000c 	ldmia.w	r6, {r2, r3}
 80139d2:	6860      	ldr	r0, [r4, #4]
 80139d4:	f007 fe4c 	bl	801b670 <rclc_action_server_goal_cancel_reject>
 80139d8:	e6c4      	b.n	8013764 <_rclc_take_new_data+0x44>
 80139da:	ab06      	add	r3, sp, #24
 80139dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80139de:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80139e2:	2102      	movs	r1, #2
 80139e4:	e896 000c 	ldmia.w	r6, {r2, r3}
 80139e8:	6860      	ldr	r0, [r4, #4]
 80139ea:	f007 fe41 	bl	801b670 <rclc_action_server_goal_cancel_reject>
 80139ee:	e6b9      	b.n	8013764 <_rclc_take_new_data+0x44>
 80139f0:	6860      	ldr	r0, [r4, #4]
 80139f2:	e706      	b.n	8013802 <_rclc_take_new_data+0xe2>
 80139f4:	6860      	ldr	r0, [r4, #4]
 80139f6:	4631      	mov	r1, r6
 80139f8:	f007 fd5c 	bl	801b4b4 <rclc_action_remove_used_goal_handle>
 80139fc:	f000 fda8 	bl	8014550 <rcutils_reset_error>
 8013a00:	e6b0      	b.n	8013764 <_rclc_take_new_data+0x44>
 8013a02:	2501      	movs	r5, #1
 8013a04:	e6ae      	b.n	8013764 <_rclc_take_new_data+0x44>
 8013a06:	bf00      	nop

08013a08 <_rclc_execute.part.0>:
 8013a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a0a:	7803      	ldrb	r3, [r0, #0]
 8013a0c:	b087      	sub	sp, #28
 8013a0e:	4604      	mov	r4, r0
 8013a10:	2b0a      	cmp	r3, #10
 8013a12:	f200 8136 	bhi.w	8013c82 <_rclc_execute.part.0+0x27a>
 8013a16:	e8df f003 	tbb	[pc, r3]
 8013a1a:	435e      	.short	0x435e
 8013a1c:	06a1664f 	.word	0x06a1664f
 8013a20:	6c1e0606 	.word	0x6c1e0606
 8013a24:	59          	.byte	0x59
 8013a25:	00          	.byte	0x00
 8013a26:	2b06      	cmp	r3, #6
 8013a28:	f000 8122 	beq.w	8013c70 <_rclc_execute.part.0+0x268>
 8013a2c:	2b07      	cmp	r3, #7
 8013a2e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013a30:	f040 8118 	bne.w	8013c64 <_rclc_execute.part.0+0x25c>
 8013a34:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 8013a38:	6880      	ldr	r0, [r0, #8]
 8013a3a:	4798      	blx	r3
 8013a3c:	f104 0110 	add.w	r1, r4, #16
 8013a40:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8013a42:	6860      	ldr	r0, [r4, #4]
 8013a44:	f005 ff74 	bl	8019930 <rcl_send_response>
 8013a48:	2800      	cmp	r0, #0
 8013a4a:	d033      	beq.n	8013ab4 <_rclc_execute.part.0+0xac>
 8013a4c:	9005      	str	r0, [sp, #20]
 8013a4e:	f000 fd7f 	bl	8014550 <rcutils_reset_error>
 8013a52:	9805      	ldr	r0, [sp, #20]
 8013a54:	e02e      	b.n	8013ab4 <_rclc_execute.part.0+0xac>
 8013a56:	6840      	ldr	r0, [r0, #4]
 8013a58:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	f000 8086 	beq.w	8013b6e <_rclc_execute.part.0+0x166>
 8013a62:	2600      	movs	r6, #0
 8013a64:	2701      	movs	r7, #1
 8013a66:	e004      	b.n	8013a72 <_rclc_execute.part.0+0x6a>
 8013a68:	f007 fcee 	bl	801b448 <rclc_action_send_result_request>
 8013a6c:	b998      	cbnz	r0, 8013a96 <_rclc_execute.part.0+0x8e>
 8013a6e:	722f      	strb	r7, [r5, #8]
 8013a70:	6860      	ldr	r0, [r4, #4]
 8013a72:	f007 fd9b 	bl	801b5ac <rclc_action_find_first_handle_with_goal_response>
 8013a76:	4605      	mov	r5, r0
 8013a78:	2800      	cmp	r0, #0
 8013a7a:	d077      	beq.n	8013b6c <_rclc_execute.part.0+0x164>
 8013a7c:	6863      	ldr	r3, [r4, #4]
 8013a7e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013a80:	699b      	ldr	r3, [r3, #24]
 8013a82:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 8013a86:	f885 6020 	strb.w	r6, [r5, #32]
 8013a8a:	4798      	blx	r3
 8013a8c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 8013a90:	4628      	mov	r0, r5
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d1e8      	bne.n	8013a68 <_rclc_execute.part.0+0x60>
 8013a96:	6860      	ldr	r0, [r4, #4]
 8013a98:	4629      	mov	r1, r5
 8013a9a:	f007 fd0b 	bl	801b4b4 <rclc_action_remove_used_goal_handle>
 8013a9e:	e7e7      	b.n	8013a70 <_rclc_execute.part.0+0x68>
 8013aa0:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8013aa4:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 8013aa8:	2d00      	cmp	r5, #0
 8013aaa:	f000 80c9 	beq.w	8013c40 <_rclc_execute.part.0+0x238>
 8013aae:	6880      	ldr	r0, [r0, #8]
 8013ab0:	4798      	blx	r3
 8013ab2:	2000      	movs	r0, #0
 8013ab4:	b007      	add	sp, #28
 8013ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ab8:	6840      	ldr	r0, [r0, #4]
 8013aba:	f006 f939 	bl	8019d30 <rcl_timer_call>
 8013abe:	f240 3321 	movw	r3, #801	@ 0x321
 8013ac2:	4298      	cmp	r0, r3
 8013ac4:	d004      	beq.n	8013ad0 <_rclc_execute.part.0+0xc8>
 8013ac6:	2800      	cmp	r0, #0
 8013ac8:	d0f4      	beq.n	8013ab4 <_rclc_execute.part.0+0xac>
 8013aca:	e7bf      	b.n	8013a4c <_rclc_execute.part.0+0x44>
 8013acc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013ace:	4798      	blx	r3
 8013ad0:	2000      	movs	r0, #0
 8013ad2:	b007      	add	sp, #28
 8013ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ad6:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 8013ada:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013adc:	b925      	cbnz	r5, 8013ae8 <_rclc_execute.part.0+0xe0>
 8013ade:	4628      	mov	r0, r5
 8013ae0:	4798      	blx	r3
 8013ae2:	4628      	mov	r0, r5
 8013ae4:	e7e6      	b.n	8013ab4 <_rclc_execute.part.0+0xac>
 8013ae6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013ae8:	68a0      	ldr	r0, [r4, #8]
 8013aea:	4798      	blx	r3
 8013aec:	2000      	movs	r0, #0
 8013aee:	b007      	add	sp, #28
 8013af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013af2:	6840      	ldr	r0, [r0, #4]
 8013af4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8013af8:	bb3b      	cbnz	r3, 8013b4a <_rclc_execute.part.0+0x142>
 8013afa:	f890 3020 	ldrb.w	r3, [r0, #32]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d07b      	beq.n	8013bfa <_rclc_execute.part.0+0x1f2>
 8013b02:	f640 0634 	movw	r6, #2100	@ 0x834
 8013b06:	2701      	movs	r7, #1
 8013b08:	e007      	b.n	8013b1a <_rclc_execute.part.0+0x112>
 8013b0a:	4628      	mov	r0, r5
 8013b0c:	f007 fd66 	bl	801b5dc <rclc_action_server_response_goal_request>
 8013b10:	6860      	ldr	r0, [r4, #4]
 8013b12:	4629      	mov	r1, r5
 8013b14:	f007 fcce 	bl	801b4b4 <rclc_action_remove_used_goal_handle>
 8013b18:	6860      	ldr	r0, [r4, #4]
 8013b1a:	2100      	movs	r1, #0
 8013b1c:	f007 fcf8 	bl	801b510 <rclc_action_find_first_handle_by_status>
 8013b20:	4605      	mov	r5, r0
 8013b22:	2800      	cmp	r0, #0
 8013b24:	d066      	beq.n	8013bf4 <_rclc_execute.part.0+0x1ec>
 8013b26:	6863      	ldr	r3, [r4, #4]
 8013b28:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013b2a:	699b      	ldr	r3, [r3, #24]
 8013b2c:	4798      	blx	r3
 8013b2e:	42b0      	cmp	r0, r6
 8013b30:	f04f 0100 	mov.w	r1, #0
 8013b34:	d1e9      	bne.n	8013b0a <_rclc_execute.part.0+0x102>
 8013b36:	2101      	movs	r1, #1
 8013b38:	4628      	mov	r0, r5
 8013b3a:	f007 fd4f 	bl	801b5dc <rclc_action_server_response_goal_request>
 8013b3e:	722f      	strb	r7, [r5, #8]
 8013b40:	e7ea      	b.n	8013b18 <_rclc_execute.part.0+0x110>
 8013b42:	6848      	ldr	r0, [r1, #4]
 8013b44:	f007 fcb6 	bl	801b4b4 <rclc_action_remove_used_goal_handle>
 8013b48:	6860      	ldr	r0, [r4, #4]
 8013b4a:	f007 fced 	bl	801b528 <rclc_action_find_first_terminated_handle>
 8013b4e:	4601      	mov	r1, r0
 8013b50:	2800      	cmp	r0, #0
 8013b52:	d1f6      	bne.n	8013b42 <_rclc_execute.part.0+0x13a>
 8013b54:	6860      	ldr	r0, [r4, #4]
 8013b56:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8013b5a:	e7ce      	b.n	8013afa <_rclc_execute.part.0+0xf2>
 8013b5c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013b5e:	6880      	ldr	r0, [r0, #8]
 8013b60:	f104 0110 	add.w	r1, r4, #16
 8013b64:	4798      	blx	r3
 8013b66:	2000      	movs	r0, #0
 8013b68:	b007      	add	sp, #28
 8013b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b6c:	6860      	ldr	r0, [r4, #4]
 8013b6e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8013b72:	b18b      	cbz	r3, 8013b98 <_rclc_execute.part.0+0x190>
 8013b74:	68c5      	ldr	r5, [r0, #12]
 8013b76:	b32d      	cbz	r5, 8013bc4 <_rclc_execute.part.0+0x1bc>
 8013b78:	2600      	movs	r6, #0
 8013b7a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 8013b7e:	b143      	cbz	r3, 8013b92 <_rclc_execute.part.0+0x18a>
 8013b80:	69c3      	ldr	r3, [r0, #28]
 8013b82:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 8013b86:	b123      	cbz	r3, 8013b92 <_rclc_execute.part.0+0x18a>
 8013b88:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8013b8a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013b8c:	4628      	mov	r0, r5
 8013b8e:	4798      	blx	r3
 8013b90:	6860      	ldr	r0, [r4, #4]
 8013b92:	682d      	ldr	r5, [r5, #0]
 8013b94:	2d00      	cmp	r5, #0
 8013b96:	d1f0      	bne.n	8013b7a <_rclc_execute.part.0+0x172>
 8013b98:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8013b9c:	b193      	cbz	r3, 8013bc4 <_rclc_execute.part.0+0x1bc>
 8013b9e:	68c5      	ldr	r5, [r0, #12]
 8013ba0:	b185      	cbz	r5, 8013bc4 <_rclc_execute.part.0+0x1bc>
 8013ba2:	2600      	movs	r6, #0
 8013ba4:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 8013ba8:	b14b      	cbz	r3, 8013bbe <_rclc_execute.part.0+0x1b6>
 8013baa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013bac:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 8013bb0:	b12b      	cbz	r3, 8013bbe <_rclc_execute.part.0+0x1b6>
 8013bb2:	4628      	mov	r0, r5
 8013bb4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8013bb8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013bba:	4798      	blx	r3
 8013bbc:	6860      	ldr	r0, [r4, #4]
 8013bbe:	682d      	ldr	r5, [r5, #0]
 8013bc0:	2d00      	cmp	r5, #0
 8013bc2:	d1ef      	bne.n	8013ba4 <_rclc_execute.part.0+0x19c>
 8013bc4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d081      	beq.n	8013ad0 <_rclc_execute.part.0+0xc8>
 8013bcc:	2700      	movs	r7, #0
 8013bce:	e00b      	b.n	8013be8 <_rclc_execute.part.0+0x1e0>
 8013bd0:	6863      	ldr	r3, [r4, #4]
 8013bd2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013bd4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013bd6:	6a1e      	ldr	r6, [r3, #32]
 8013bd8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 8013bdc:	47b0      	blx	r6
 8013bde:	6860      	ldr	r0, [r4, #4]
 8013be0:	4629      	mov	r1, r5
 8013be2:	f007 fc67 	bl	801b4b4 <rclc_action_remove_used_goal_handle>
 8013be6:	6860      	ldr	r0, [r4, #4]
 8013be8:	f007 fcec 	bl	801b5c4 <rclc_action_find_first_handle_with_result_response>
 8013bec:	4605      	mov	r5, r0
 8013bee:	2800      	cmp	r0, #0
 8013bf0:	d1ee      	bne.n	8013bd0 <_rclc_execute.part.0+0x1c8>
 8013bf2:	e76d      	b.n	8013ad0 <_rclc_execute.part.0+0xc8>
 8013bf4:	6860      	ldr	r0, [r4, #4]
 8013bf6:	f880 5020 	strb.w	r5, [r0, #32]
 8013bfa:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	f43f af66 	beq.w	8013ad0 <_rclc_execute.part.0+0xc8>
 8013c04:	68c5      	ldr	r5, [r0, #12]
 8013c06:	b1b5      	cbz	r5, 8013c36 <_rclc_execute.part.0+0x22e>
 8013c08:	2602      	movs	r6, #2
 8013c0a:	e001      	b.n	8013c10 <_rclc_execute.part.0+0x208>
 8013c0c:	682d      	ldr	r5, [r5, #0]
 8013c0e:	b195      	cbz	r5, 8013c36 <_rclc_execute.part.0+0x22e>
 8013c10:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8013c14:	2b03      	cmp	r3, #3
 8013c16:	d1f9      	bne.n	8013c0c <_rclc_execute.part.0+0x204>
 8013c18:	69c3      	ldr	r3, [r0, #28]
 8013c1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013c1c:	4628      	mov	r0, r5
 8013c1e:	4798      	blx	r3
 8013c20:	4603      	mov	r3, r0
 8013c22:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 8013c26:	4628      	mov	r0, r5
 8013c28:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 8013c2c:	b163      	cbz	r3, 8013c48 <_rclc_execute.part.0+0x240>
 8013c2e:	f007 fcf3 	bl	801b618 <rclc_action_server_goal_cancel_accept>
 8013c32:	6860      	ldr	r0, [r4, #4]
 8013c34:	e7ea      	b.n	8013c0c <_rclc_execute.part.0+0x204>
 8013c36:	2300      	movs	r3, #0
 8013c38:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	e739      	b.n	8013ab4 <_rclc_execute.part.0+0xac>
 8013c40:	4628      	mov	r0, r5
 8013c42:	4798      	blx	r3
 8013c44:	4628      	mov	r0, r5
 8013c46:	e735      	b.n	8013ab4 <_rclc_execute.part.0+0xac>
 8013c48:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8013c4a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013c4e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 8013c52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013c56:	6860      	ldr	r0, [r4, #4]
 8013c58:	2101      	movs	r1, #1
 8013c5a:	f007 fd09 	bl	801b670 <rclc_action_server_goal_cancel_reject>
 8013c5e:	722e      	strb	r6, [r5, #8]
 8013c60:	6860      	ldr	r0, [r4, #4]
 8013c62:	e7d3      	b.n	8013c0c <_rclc_execute.part.0+0x204>
 8013c64:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8013c66:	6880      	ldr	r0, [r0, #8]
 8013c68:	4798      	blx	r3
 8013c6a:	f104 0110 	add.w	r1, r4, #16
 8013c6e:	e6e7      	b.n	8013a40 <_rclc_execute.part.0+0x38>
 8013c70:	f100 0110 	add.w	r1, r0, #16
 8013c74:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013c76:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8013c78:	6880      	ldr	r0, [r0, #8]
 8013c7a:	9105      	str	r1, [sp, #20]
 8013c7c:	4798      	blx	r3
 8013c7e:	9905      	ldr	r1, [sp, #20]
 8013c80:	e6de      	b.n	8013a40 <_rclc_execute.part.0+0x38>
 8013c82:	2001      	movs	r0, #1
 8013c84:	e716      	b.n	8013ab4 <_rclc_execute.part.0+0xac>
 8013c86:	bf00      	nop

08013c88 <rclc_executor_trigger_any>:
 8013c88:	2800      	cmp	r0, #0
 8013c8a:	d03f      	beq.n	8013d0c <rclc_executor_trigger_any+0x84>
 8013c8c:	2900      	cmp	r1, #0
 8013c8e:	d03e      	beq.n	8013d0e <rclc_executor_trigger_any+0x86>
 8013c90:	4603      	mov	r3, r0
 8013c92:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 8013c96:	2200      	movs	r2, #0
 8013c98:	2800      	cmp	r0, #0
 8013c9a:	d037      	beq.n	8013d0c <rclc_executor_trigger_any+0x84>
 8013c9c:	b430      	push	{r4, r5}
 8013c9e:	f893 c000 	ldrb.w	ip, [r3]
 8013ca2:	f1bc 0f08 	cmp.w	ip, #8
 8013ca6:	d11e      	bne.n	8013ce6 <rclc_executor_trigger_any+0x5e>
 8013ca8:	685c      	ldr	r4, [r3, #4]
 8013caa:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8013cac:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 8013cb0:	d105      	bne.n	8013cbe <rclc_executor_trigger_any+0x36>
 8013cb2:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8013cb6:	b910      	cbnz	r0, 8013cbe <rclc_executor_trigger_any+0x36>
 8013cb8:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 8013cbc:	b128      	cbz	r0, 8013cca <rclc_executor_trigger_any+0x42>
 8013cbe:	bc30      	pop	{r4, r5}
 8013cc0:	4770      	bx	lr
 8013cc2:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 8013cc6:	2800      	cmp	r0, #0
 8013cc8:	d1f9      	bne.n	8013cbe <rclc_executor_trigger_any+0x36>
 8013cca:	3201      	adds	r2, #1
 8013ccc:	4291      	cmp	r1, r2
 8013cce:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8013cd2:	d018      	beq.n	8013d06 <rclc_executor_trigger_any+0x7e>
 8013cd4:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 8013cd8:	2800      	cmp	r0, #0
 8013cda:	d0f0      	beq.n	8013cbe <rclc_executor_trigger_any+0x36>
 8013cdc:	f893 c000 	ldrb.w	ip, [r3]
 8013ce0:	f1bc 0f08 	cmp.w	ip, #8
 8013ce4:	d0e0      	beq.n	8013ca8 <rclc_executor_trigger_any+0x20>
 8013ce6:	f1bc 0f09 	cmp.w	ip, #9
 8013cea:	d1ea      	bne.n	8013cc2 <rclc_executor_trigger_any+0x3a>
 8013cec:	685c      	ldr	r4, [r3, #4]
 8013cee:	6a25      	ldr	r5, [r4, #32]
 8013cf0:	2d00      	cmp	r5, #0
 8013cf2:	d1e4      	bne.n	8013cbe <rclc_executor_trigger_any+0x36>
 8013cf4:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8013cf8:	2800      	cmp	r0, #0
 8013cfa:	d1e0      	bne.n	8013cbe <rclc_executor_trigger_any+0x36>
 8013cfc:	3201      	adds	r2, #1
 8013cfe:	4291      	cmp	r1, r2
 8013d00:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8013d04:	d1e6      	bne.n	8013cd4 <rclc_executor_trigger_any+0x4c>
 8013d06:	2000      	movs	r0, #0
 8013d08:	bc30      	pop	{r4, r5}
 8013d0a:	4770      	bx	lr
 8013d0c:	4770      	bx	lr
 8013d0e:	4608      	mov	r0, r1
 8013d10:	4770      	bx	lr
 8013d12:	bf00      	nop
 8013d14:	0000      	movs	r0, r0
	...

08013d18 <rclc_executor_init>:
 8013d18:	2800      	cmp	r0, #0
 8013d1a:	d05f      	beq.n	8013ddc <rclc_executor_init+0xc4>
 8013d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d20:	460c      	mov	r4, r1
 8013d22:	b0b0      	sub	sp, #192	@ 0xc0
 8013d24:	2900      	cmp	r1, #0
 8013d26:	d051      	beq.n	8013dcc <rclc_executor_init+0xb4>
 8013d28:	4605      	mov	r5, r0
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	4616      	mov	r6, r2
 8013d2e:	461f      	mov	r7, r3
 8013d30:	f000 fbea 	bl	8014508 <rcutils_allocator_is_valid>
 8013d34:	2800      	cmp	r0, #0
 8013d36:	d049      	beq.n	8013dcc <rclc_executor_init+0xb4>
 8013d38:	2e00      	cmp	r6, #0
 8013d3a:	d047      	beq.n	8013dcc <rclc_executor_init+0xb4>
 8013d3c:	492c      	ldr	r1, [pc, #176]	@ (8013df0 <rclc_executor_init+0xd8>)
 8013d3e:	2288      	movs	r2, #136	@ 0x88
 8013d40:	a80e      	add	r0, sp, #56	@ 0x38
 8013d42:	f00c fd04 	bl	802074e <memcpy>
 8013d46:	a90e      	add	r1, sp, #56	@ 0x38
 8013d48:	2288      	movs	r2, #136	@ 0x88
 8013d4a:	4628      	mov	r0, r5
 8013d4c:	f00c fcff 	bl	802074e <memcpy>
 8013d50:	602c      	str	r4, [r5, #0]
 8013d52:	4668      	mov	r0, sp
 8013d54:	60ae      	str	r6, [r5, #8]
 8013d56:	466c      	mov	r4, sp
 8013d58:	f006 f95c 	bl	801a014 <rcl_get_zero_initialized_wait_set>
 8013d5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013d5e:	f105 0c14 	add.w	ip, r5, #20
 8013d62:	f8d7 8000 	ldr.w	r8, [r7]
 8013d66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013d6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013d72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013d76:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 8013de8 <rclc_executor_init+0xd0>
 8013d7a:	6823      	ldr	r3, [r4, #0]
 8013d7c:	f8cc 3000 	str.w	r3, [ip]
 8013d80:	6939      	ldr	r1, [r7, #16]
 8013d82:	612f      	str	r7, [r5, #16]
 8013d84:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 8013d88:	01b0      	lsls	r0, r6, #6
 8013d8a:	47c0      	blx	r8
 8013d8c:	6068      	str	r0, [r5, #4]
 8013d8e:	b338      	cbz	r0, 8013de0 <rclc_executor_init+0xc8>
 8013d90:	2400      	movs	r4, #0
 8013d92:	e000      	b.n	8013d96 <rclc_executor_init+0x7e>
 8013d94:	6868      	ldr	r0, [r5, #4]
 8013d96:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8013d9a:	4631      	mov	r1, r6
 8013d9c:	3401      	adds	r4, #1
 8013d9e:	f000 fa6b 	bl	8014278 <rclc_executor_handle_init>
 8013da2:	42a6      	cmp	r6, r4
 8013da4:	d1f6      	bne.n	8013d94 <rclc_executor_init+0x7c>
 8013da6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 8013daa:	f000 fa5b 	bl	8014264 <rclc_executor_handle_counters_zero_init>
 8013dae:	4a11      	ldr	r2, [pc, #68]	@ (8013df4 <rclc_executor_init+0xdc>)
 8013db0:	686b      	ldr	r3, [r5, #4]
 8013db2:	2000      	movs	r0, #0
 8013db4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 8013db8:	b163      	cbz	r3, 8013dd4 <rclc_executor_init+0xbc>
 8013dba:	692b      	ldr	r3, [r5, #16]
 8013dbc:	b153      	cbz	r3, 8013dd4 <rclc_executor_init+0xbc>
 8013dbe:	68ab      	ldr	r3, [r5, #8]
 8013dc0:	b143      	cbz	r3, 8013dd4 <rclc_executor_init+0xbc>
 8013dc2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 8013dc6:	b030      	add	sp, #192	@ 0xc0
 8013dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dcc:	200b      	movs	r0, #11
 8013dce:	b030      	add	sp, #192	@ 0xc0
 8013dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	b030      	add	sp, #192	@ 0xc0
 8013dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ddc:	200b      	movs	r0, #11
 8013dde:	4770      	bx	lr
 8013de0:	200a      	movs	r0, #10
 8013de2:	e7f4      	b.n	8013dce <rclc_executor_init+0xb6>
 8013de4:	f3af 8000 	nop.w
 8013de8:	3b9aca00 	.word	0x3b9aca00
 8013dec:	00000000 	.word	0x00000000
 8013df0:	08021800 	.word	0x08021800
 8013df4:	08013c89 	.word	0x08013c89

08013df8 <rclc_executor_add_subscription>:
 8013df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dfa:	f89d e018 	ldrb.w	lr, [sp, #24]
 8013dfe:	b338      	cbz	r0, 8013e50 <rclc_executor_add_subscription+0x58>
 8013e00:	b331      	cbz	r1, 8013e50 <rclc_executor_add_subscription+0x58>
 8013e02:	b32a      	cbz	r2, 8013e50 <rclc_executor_add_subscription+0x58>
 8013e04:	b323      	cbz	r3, 8013e50 <rclc_executor_add_subscription+0x58>
 8013e06:	4604      	mov	r4, r0
 8013e08:	e9d0 5002 	ldrd	r5, r0, [r0, #8]
 8013e0c:	42a8      	cmp	r0, r5
 8013e0e:	d301      	bcc.n	8013e14 <rclc_executor_add_subscription+0x1c>
 8013e10:	2001      	movs	r0, #1
 8013e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e14:	6866      	ldr	r6, [r4, #4]
 8013e16:	0187      	lsls	r7, r0, #6
 8013e18:	eb06 1c80 	add.w	ip, r6, r0, lsl #6
 8013e1c:	2500      	movs	r5, #0
 8013e1e:	55f5      	strb	r5, [r6, r7]
 8013e20:	3001      	adds	r0, #1
 8013e22:	f8cc 3030 	str.w	r3, [ip, #48]	@ 0x30
 8013e26:	f8cc 502c 	str.w	r5, [ip, #44]	@ 0x2c
 8013e2a:	2301      	movs	r3, #1
 8013e2c:	f104 0514 	add.w	r5, r4, #20
 8013e30:	e9cc 1201 	strd	r1, r2, [ip, #4]
 8013e34:	f88c e001 	strb.w	lr, [ip, #1]
 8013e38:	f8ac 3038 	strh.w	r3, [ip, #56]	@ 0x38
 8013e3c:	60e0      	str	r0, [r4, #12]
 8013e3e:	4628      	mov	r0, r5
 8013e40:	f006 f8fc 	bl	801a03c <rcl_wait_set_is_valid>
 8013e44:	b930      	cbnz	r0, 8013e54 <rclc_executor_add_subscription+0x5c>
 8013e46:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8013e48:	3301      	adds	r3, #1
 8013e4a:	2000      	movs	r0, #0
 8013e4c:	64a3      	str	r3, [r4, #72]	@ 0x48
 8013e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e50:	200b      	movs	r0, #11
 8013e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e54:	4628      	mov	r0, r5
 8013e56:	f006 f8f7 	bl	801a048 <rcl_wait_set_fini>
 8013e5a:	2800      	cmp	r0, #0
 8013e5c:	d0f3      	beq.n	8013e46 <rclc_executor_add_subscription+0x4e>
 8013e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013e60 <rclc_executor_prepare>:
 8013e60:	2800      	cmp	r0, #0
 8013e62:	d044      	beq.n	8013eee <rclc_executor_prepare+0x8e>
 8013e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e66:	f100 0514 	add.w	r5, r0, #20
 8013e6a:	b09b      	sub	sp, #108	@ 0x6c
 8013e6c:	4604      	mov	r4, r0
 8013e6e:	4628      	mov	r0, r5
 8013e70:	f006 f8e4 	bl	801a03c <rcl_wait_set_is_valid>
 8013e74:	b110      	cbz	r0, 8013e7c <rclc_executor_prepare+0x1c>
 8013e76:	2000      	movs	r0, #0
 8013e78:	b01b      	add	sp, #108	@ 0x6c
 8013e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e7c:	4628      	mov	r0, r5
 8013e7e:	f006 f8e3 	bl	801a048 <rcl_wait_set_fini>
 8013e82:	2800      	cmp	r0, #0
 8013e84:	d130      	bne.n	8013ee8 <rclc_executor_prepare+0x88>
 8013e86:	a80c      	add	r0, sp, #48	@ 0x30
 8013e88:	f006 f8c4 	bl	801a014 <rcl_get_zero_initialized_wait_set>
 8013e8c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8013e90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013e94:	46ae      	mov	lr, r5
 8013e96:	6927      	ldr	r7, [r4, #16]
 8013e98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013e9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013ea0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013ea4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013ea8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013eac:	f8dc 3000 	ldr.w	r3, [ip]
 8013eb0:	f8ce 3000 	str.w	r3, [lr]
 8013eb4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013eb6:	ae04      	add	r6, sp, #16
 8013eb8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	6822      	ldr	r2, [r4, #0]
 8013ebe:	6033      	str	r3, [r6, #0]
 8013ec0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013ec2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8013ec4:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013ec8:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 8013ecc:	e9cd 2100 	strd	r2, r1, [sp]
 8013ed0:	4628      	mov	r0, r5
 8013ed2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8013ed4:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8013ed6:	f006 fbb5 	bl	801a644 <rcl_wait_set_init>
 8013eda:	2800      	cmp	r0, #0
 8013edc:	d0cc      	beq.n	8013e78 <rclc_executor_prepare+0x18>
 8013ede:	900b      	str	r0, [sp, #44]	@ 0x2c
 8013ee0:	f000 fb36 	bl	8014550 <rcutils_reset_error>
 8013ee4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8013ee6:	e7c7      	b.n	8013e78 <rclc_executor_prepare+0x18>
 8013ee8:	f000 fb32 	bl	8014550 <rcutils_reset_error>
 8013eec:	e7cb      	b.n	8013e86 <rclc_executor_prepare+0x26>
 8013eee:	200b      	movs	r0, #11
 8013ef0:	4770      	bx	lr
 8013ef2:	bf00      	nop

08013ef4 <rclc_executor_spin_some.part.0>:
 8013ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ef8:	f100 0614 	add.w	r6, r0, #20
 8013efc:	b083      	sub	sp, #12
 8013efe:	4691      	mov	r9, r2
 8013f00:	4698      	mov	r8, r3
 8013f02:	4605      	mov	r5, r0
 8013f04:	f7ff ffac 	bl	8013e60 <rclc_executor_prepare>
 8013f08:	4630      	mov	r0, r6
 8013f0a:	f006 f969 	bl	801a1e0 <rcl_wait_set_clear>
 8013f0e:	4607      	mov	r7, r0
 8013f10:	2800      	cmp	r0, #0
 8013f12:	f040 80ed 	bne.w	80140f0 <rclc_executor_spin_some.part.0+0x1fc>
 8013f16:	68ab      	ldr	r3, [r5, #8]
 8013f18:	4604      	mov	r4, r0
 8013f1a:	b303      	cbz	r3, 8013f5e <rclc_executor_spin_some.part.0+0x6a>
 8013f1c:	6869      	ldr	r1, [r5, #4]
 8013f1e:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8013f22:	01a2      	lsls	r2, r4, #6
 8013f24:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 8013f28:	b1cb      	cbz	r3, 8013f5e <rclc_executor_spin_some.part.0+0x6a>
 8013f2a:	5c8b      	ldrb	r3, [r1, r2]
 8013f2c:	2b0a      	cmp	r3, #10
 8013f2e:	f200 80d8 	bhi.w	80140e2 <rclc_executor_spin_some.part.0+0x1ee>
 8013f32:	e8df f003 	tbb	[pc, r3]
 8013f36:	9c9c      	.short	0x9c9c
 8013f38:	068c8ca7 	.word	0x068c8ca7
 8013f3c:	bdc90606 	.word	0xbdc90606
 8013f40:	b2          	.byte	0xb2
 8013f41:	00          	.byte	0x00
 8013f42:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8013f46:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8013f4a:	4630      	mov	r0, r6
 8013f4c:	f006 fc90 	bl	801a870 <rcl_wait_set_add_service>
 8013f50:	2800      	cmp	r0, #0
 8013f52:	f040 8086 	bne.w	8014062 <rclc_executor_spin_some.part.0+0x16e>
 8013f56:	68ab      	ldr	r3, [r5, #8]
 8013f58:	3401      	adds	r4, #1
 8013f5a:	429c      	cmp	r4, r3
 8013f5c:	d3de      	bcc.n	8013f1c <rclc_executor_spin_some.part.0+0x28>
 8013f5e:	4643      	mov	r3, r8
 8013f60:	464a      	mov	r2, r9
 8013f62:	4630      	mov	r0, r6
 8013f64:	f006 fcb0 	bl	801a8c8 <rcl_wait>
 8013f68:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	f000 80c7 	beq.w	8014100 <rclc_executor_spin_some.part.0+0x20c>
 8013f72:	2b01      	cmp	r3, #1
 8013f74:	f040 80b5 	bne.w	80140e2 <rclc_executor_spin_some.part.0+0x1ee>
 8013f78:	68ab      	ldr	r3, [r5, #8]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	f000 8159 	beq.w	8014232 <rclc_executor_spin_some.part.0+0x33e>
 8013f80:	2400      	movs	r4, #0
 8013f82:	46a0      	mov	r8, r4
 8013f84:	f240 1991 	movw	r9, #401	@ 0x191
 8013f88:	e00a      	b.n	8013fa0 <rclc_executor_spin_some.part.0+0xac>
 8013f8a:	f7ff fb7b 	bl	8013684 <_rclc_check_for_new_data>
 8013f8e:	4604      	mov	r4, r0
 8013f90:	b110      	cbz	r0, 8013f98 <rclc_executor_spin_some.part.0+0xa4>
 8013f92:	4548      	cmp	r0, r9
 8013f94:	f040 80b2 	bne.w	80140fc <rclc_executor_spin_some.part.0+0x208>
 8013f98:	68ab      	ldr	r3, [r5, #8]
 8013f9a:	4598      	cmp	r8, r3
 8013f9c:	f080 8126 	bcs.w	80141ec <rclc_executor_spin_some.part.0+0x2f8>
 8013fa0:	686a      	ldr	r2, [r5, #4]
 8013fa2:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8013fa6:	4631      	mov	r1, r6
 8013fa8:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8013fac:	f108 0801 	add.w	r8, r8, #1
 8013fb0:	f1bc 0f00 	cmp.w	ip, #0
 8013fb4:	d1e9      	bne.n	8013f8a <rclc_executor_spin_some.part.0+0x96>
 8013fb6:	4619      	mov	r1, r3
 8013fb8:	4610      	mov	r0, r2
 8013fba:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8013fbe:	4798      	blx	r3
 8013fc0:	2800      	cmp	r0, #0
 8013fc2:	f000 809b 	beq.w	80140fc <rclc_executor_spin_some.part.0+0x208>
 8013fc6:	68ab      	ldr	r3, [r5, #8]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	f000 8097 	beq.w	80140fc <rclc_executor_spin_some.part.0+0x208>
 8013fce:	f04f 0800 	mov.w	r8, #0
 8013fd2:	f240 1991 	movw	r9, #401	@ 0x191
 8013fd6:	e009      	b.n	8013fec <rclc_executor_spin_some.part.0+0xf8>
 8013fd8:	f7ff fba2 	bl	8013720 <_rclc_take_new_data>
 8013fdc:	4604      	mov	r4, r0
 8013fde:	b110      	cbz	r0, 8013fe6 <rclc_executor_spin_some.part.0+0xf2>
 8013fe0:	4548      	cmp	r0, r9
 8013fe2:	f040 808b 	bne.w	80140fc <rclc_executor_spin_some.part.0+0x208>
 8013fe6:	68ab      	ldr	r3, [r5, #8]
 8013fe8:	4598      	cmp	r8, r3
 8013fea:	d209      	bcs.n	8014000 <rclc_executor_spin_some.part.0+0x10c>
 8013fec:	6868      	ldr	r0, [r5, #4]
 8013fee:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8013ff2:	4631      	mov	r1, r6
 8013ff4:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 8013ff8:	f108 0801 	add.w	r8, r8, #1
 8013ffc:	2a00      	cmp	r2, #0
 8013ffe:	d1eb      	bne.n	8013fd8 <rclc_executor_spin_some.part.0+0xe4>
 8014000:	2600      	movs	r6, #0
 8014002:	b97b      	cbnz	r3, 8014024 <rclc_executor_spin_some.part.0+0x130>
 8014004:	e07a      	b.n	80140fc <rclc_executor_spin_some.part.0+0x208>
 8014006:	f812 200c 	ldrb.w	r2, [r2, ip]
 801400a:	2a08      	cmp	r2, #8
 801400c:	f000 80fd 	beq.w	801420a <rclc_executor_spin_some.part.0+0x316>
 8014010:	2a09      	cmp	r2, #9
 8014012:	f000 80ef 	beq.w	80141f4 <rclc_executor_spin_some.part.0+0x300>
 8014016:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 801401a:	b98a      	cbnz	r2, 8014040 <rclc_executor_spin_some.part.0+0x14c>
 801401c:	3601      	adds	r6, #1
 801401e:	429e      	cmp	r6, r3
 8014020:	d262      	bcs.n	80140e8 <rclc_executor_spin_some.part.0+0x1f4>
 8014022:	2400      	movs	r4, #0
 8014024:	686a      	ldr	r2, [r5, #4]
 8014026:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 801402a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 801402e:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 8014032:	2900      	cmp	r1, #0
 8014034:	d062      	beq.n	80140fc <rclc_executor_spin_some.part.0+0x208>
 8014036:	7841      	ldrb	r1, [r0, #1]
 8014038:	2900      	cmp	r1, #0
 801403a:	d0e4      	beq.n	8014006 <rclc_executor_spin_some.part.0+0x112>
 801403c:	2901      	cmp	r1, #1
 801403e:	d1ed      	bne.n	801401c <rclc_executor_spin_some.part.0+0x128>
 8014040:	f7ff fce2 	bl	8013a08 <_rclc_execute.part.0>
 8014044:	2800      	cmp	r0, #0
 8014046:	f040 80b6 	bne.w	80141b6 <rclc_executor_spin_some.part.0+0x2c2>
 801404a:	68ab      	ldr	r3, [r5, #8]
 801404c:	e7e6      	b.n	801401c <rclc_executor_spin_some.part.0+0x128>
 801404e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014052:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014056:	4630      	mov	r0, r6
 8014058:	f006 fbde 	bl	801a818 <rcl_wait_set_add_client>
 801405c:	2800      	cmp	r0, #0
 801405e:	f43f af7a 	beq.w	8013f56 <rclc_executor_spin_some.part.0+0x62>
 8014062:	9001      	str	r0, [sp, #4]
 8014064:	f000 fa74 	bl	8014550 <rcutils_reset_error>
 8014068:	9801      	ldr	r0, [sp, #4]
 801406a:	4607      	mov	r7, r0
 801406c:	e03c      	b.n	80140e8 <rclc_executor_spin_some.part.0+0x1f4>
 801406e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014072:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 8014076:	4630      	mov	r0, r6
 8014078:	f006 f886 	bl	801a188 <rcl_wait_set_add_subscription>
 801407c:	2800      	cmp	r0, #0
 801407e:	f43f af6a 	beq.w	8013f56 <rclc_executor_spin_some.part.0+0x62>
 8014082:	e7ee      	b.n	8014062 <rclc_executor_spin_some.part.0+0x16e>
 8014084:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014088:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 801408c:	4630      	mov	r0, r6
 801408e:	f006 fb93 	bl	801a7b8 <rcl_wait_set_add_timer>
 8014092:	2800      	cmp	r0, #0
 8014094:	f43f af5f 	beq.w	8013f56 <rclc_executor_spin_some.part.0+0x62>
 8014098:	e7e3      	b.n	8014062 <rclc_executor_spin_some.part.0+0x16e>
 801409a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801409e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80140a2:	4630      	mov	r0, r6
 80140a4:	f006 fb5c 	bl	801a760 <rcl_wait_set_add_guard_condition>
 80140a8:	2800      	cmp	r0, #0
 80140aa:	f43f af54 	beq.w	8013f56 <rclc_executor_spin_some.part.0+0x62>
 80140ae:	e7d8      	b.n	8014062 <rclc_executor_spin_some.part.0+0x16e>
 80140b0:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80140b4:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80140b8:	3110      	adds	r1, #16
 80140ba:	4630      	mov	r0, r6
 80140bc:	f007 f8da 	bl	801b274 <rcl_action_wait_set_add_action_server>
 80140c0:	2800      	cmp	r0, #0
 80140c2:	f43f af48 	beq.w	8013f56 <rclc_executor_spin_some.part.0+0x62>
 80140c6:	e7cc      	b.n	8014062 <rclc_executor_spin_some.part.0+0x16e>
 80140c8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80140cc:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 80140d0:	3110      	adds	r1, #16
 80140d2:	2300      	movs	r3, #0
 80140d4:	4630      	mov	r0, r6
 80140d6:	f006 fea7 	bl	801ae28 <rcl_action_wait_set_add_action_client>
 80140da:	2800      	cmp	r0, #0
 80140dc:	f43f af3b 	beq.w	8013f56 <rclc_executor_spin_some.part.0+0x62>
 80140e0:	e7bf      	b.n	8014062 <rclc_executor_spin_some.part.0+0x16e>
 80140e2:	f000 fa35 	bl	8014550 <rcutils_reset_error>
 80140e6:	2701      	movs	r7, #1
 80140e8:	4638      	mov	r0, r7
 80140ea:	b003      	add	sp, #12
 80140ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140f0:	f000 fa2e 	bl	8014550 <rcutils_reset_error>
 80140f4:	4638      	mov	r0, r7
 80140f6:	b003      	add	sp, #12
 80140f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140fc:	4627      	mov	r7, r4
 80140fe:	e7f3      	b.n	80140e8 <rclc_executor_spin_some.part.0+0x1f4>
 8014100:	68ab      	ldr	r3, [r5, #8]
 8014102:	2b00      	cmp	r3, #0
 8014104:	f000 8092 	beq.w	801422c <rclc_executor_spin_some.part.0+0x338>
 8014108:	2400      	movs	r4, #0
 801410a:	46a0      	mov	r8, r4
 801410c:	f240 1991 	movw	r9, #401	@ 0x191
 8014110:	e008      	b.n	8014124 <rclc_executor_spin_some.part.0+0x230>
 8014112:	f7ff fab7 	bl	8013684 <_rclc_check_for_new_data>
 8014116:	4604      	mov	r4, r0
 8014118:	b108      	cbz	r0, 801411e <rclc_executor_spin_some.part.0+0x22a>
 801411a:	4548      	cmp	r0, r9
 801411c:	d1ee      	bne.n	80140fc <rclc_executor_spin_some.part.0+0x208>
 801411e:	68ab      	ldr	r3, [r5, #8]
 8014120:	4598      	cmp	r8, r3
 8014122:	d265      	bcs.n	80141f0 <rclc_executor_spin_some.part.0+0x2fc>
 8014124:	686a      	ldr	r2, [r5, #4]
 8014126:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 801412a:	4631      	mov	r1, r6
 801412c:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 8014130:	f108 0801 	add.w	r8, r8, #1
 8014134:	f1bc 0f00 	cmp.w	ip, #0
 8014138:	d1eb      	bne.n	8014112 <rclc_executor_spin_some.part.0+0x21e>
 801413a:	4619      	mov	r1, r3
 801413c:	4610      	mov	r0, r2
 801413e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 8014142:	4798      	blx	r3
 8014144:	2800      	cmp	r0, #0
 8014146:	d0d9      	beq.n	80140fc <rclc_executor_spin_some.part.0+0x208>
 8014148:	68ab      	ldr	r3, [r5, #8]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d0d6      	beq.n	80140fc <rclc_executor_spin_some.part.0+0x208>
 801414e:	f04f 0800 	mov.w	r8, #0
 8014152:	f240 1991 	movw	r9, #401	@ 0x191
 8014156:	f240 2a59 	movw	sl, #601	@ 0x259
 801415a:	e00e      	b.n	801417a <rclc_executor_spin_some.part.0+0x286>
 801415c:	f813 300b 	ldrb.w	r3, [r3, fp]
 8014160:	2b08      	cmp	r3, #8
 8014162:	d033      	beq.n	80141cc <rclc_executor_spin_some.part.0+0x2d8>
 8014164:	2b09      	cmp	r3, #9
 8014166:	d028      	beq.n	80141ba <rclc_executor_spin_some.part.0+0x2c6>
 8014168:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 801416c:	b9fb      	cbnz	r3, 80141ae <rclc_executor_spin_some.part.0+0x2ba>
 801416e:	68ab      	ldr	r3, [r5, #8]
 8014170:	f108 0801 	add.w	r8, r8, #1
 8014174:	4598      	cmp	r8, r3
 8014176:	d2b7      	bcs.n	80140e8 <rclc_executor_spin_some.part.0+0x1f4>
 8014178:	2400      	movs	r4, #0
 801417a:	6868      	ldr	r0, [r5, #4]
 801417c:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8014180:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8014184:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 8014188:	2b00      	cmp	r3, #0
 801418a:	d0b7      	beq.n	80140fc <rclc_executor_spin_some.part.0+0x208>
 801418c:	4631      	mov	r1, r6
 801418e:	f7ff fac7 	bl	8013720 <_rclc_take_new_data>
 8014192:	b118      	cbz	r0, 801419c <rclc_executor_spin_some.part.0+0x2a8>
 8014194:	4548      	cmp	r0, r9
 8014196:	d001      	beq.n	801419c <rclc_executor_spin_some.part.0+0x2a8>
 8014198:	4550      	cmp	r0, sl
 801419a:	d10c      	bne.n	80141b6 <rclc_executor_spin_some.part.0+0x2c2>
 801419c:	686b      	ldr	r3, [r5, #4]
 801419e:	eb13 000b 	adds.w	r0, r3, fp
 80141a2:	d021      	beq.n	80141e8 <rclc_executor_spin_some.part.0+0x2f4>
 80141a4:	7842      	ldrb	r2, [r0, #1]
 80141a6:	2a00      	cmp	r2, #0
 80141a8:	d0d8      	beq.n	801415c <rclc_executor_spin_some.part.0+0x268>
 80141aa:	2a01      	cmp	r2, #1
 80141ac:	d1df      	bne.n	801416e <rclc_executor_spin_some.part.0+0x27a>
 80141ae:	f7ff fc2b 	bl	8013a08 <_rclc_execute.part.0>
 80141b2:	2800      	cmp	r0, #0
 80141b4:	d0db      	beq.n	801416e <rclc_executor_spin_some.part.0+0x27a>
 80141b6:	4607      	mov	r7, r0
 80141b8:	e796      	b.n	80140e8 <rclc_executor_spin_some.part.0+0x1f4>
 80141ba:	6843      	ldr	r3, [r0, #4]
 80141bc:	6a1a      	ldr	r2, [r3, #32]
 80141be:	2a00      	cmp	r2, #0
 80141c0:	d1f5      	bne.n	80141ae <rclc_executor_spin_some.part.0+0x2ba>
 80141c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d0d1      	beq.n	801416e <rclc_executor_spin_some.part.0+0x27a>
 80141ca:	e7f0      	b.n	80141ae <rclc_executor_spin_some.part.0+0x2ba>
 80141cc:	6843      	ldr	r3, [r0, #4]
 80141ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80141d0:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80141d4:	d1eb      	bne.n	80141ae <rclc_executor_spin_some.part.0+0x2ba>
 80141d6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80141da:	2a00      	cmp	r2, #0
 80141dc:	d1e7      	bne.n	80141ae <rclc_executor_spin_some.part.0+0x2ba>
 80141de:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d0c3      	beq.n	801416e <rclc_executor_spin_some.part.0+0x27a>
 80141e6:	e7e2      	b.n	80141ae <rclc_executor_spin_some.part.0+0x2ba>
 80141e8:	270b      	movs	r7, #11
 80141ea:	e77d      	b.n	80140e8 <rclc_executor_spin_some.part.0+0x1f4>
 80141ec:	686a      	ldr	r2, [r5, #4]
 80141ee:	e6e2      	b.n	8013fb6 <rclc_executor_spin_some.part.0+0xc2>
 80141f0:	686a      	ldr	r2, [r5, #4]
 80141f2:	e7a2      	b.n	801413a <rclc_executor_spin_some.part.0+0x246>
 80141f4:	6842      	ldr	r2, [r0, #4]
 80141f6:	6a11      	ldr	r1, [r2, #32]
 80141f8:	2900      	cmp	r1, #0
 80141fa:	f47f af21 	bne.w	8014040 <rclc_executor_spin_some.part.0+0x14c>
 80141fe:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8014202:	2a00      	cmp	r2, #0
 8014204:	f43f af0a 	beq.w	801401c <rclc_executor_spin_some.part.0+0x128>
 8014208:	e71a      	b.n	8014040 <rclc_executor_spin_some.part.0+0x14c>
 801420a:	6842      	ldr	r2, [r0, #4]
 801420c:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 801420e:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 8014212:	f47f af15 	bne.w	8014040 <rclc_executor_spin_some.part.0+0x14c>
 8014216:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 801421a:	2900      	cmp	r1, #0
 801421c:	f47f af10 	bne.w	8014040 <rclc_executor_spin_some.part.0+0x14c>
 8014220:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 8014224:	2a00      	cmp	r2, #0
 8014226:	f43f aef9 	beq.w	801401c <rclc_executor_spin_some.part.0+0x128>
 801422a:	e709      	b.n	8014040 <rclc_executor_spin_some.part.0+0x14c>
 801422c:	686a      	ldr	r2, [r5, #4]
 801422e:	461c      	mov	r4, r3
 8014230:	e783      	b.n	801413a <rclc_executor_spin_some.part.0+0x246>
 8014232:	686a      	ldr	r2, [r5, #4]
 8014234:	461c      	mov	r4, r3
 8014236:	e6be      	b.n	8013fb6 <rclc_executor_spin_some.part.0+0xc2>

08014238 <rclc_executor_spin_some>:
 8014238:	b190      	cbz	r0, 8014260 <rclc_executor_spin_some+0x28>
 801423a:	b570      	push	{r4, r5, r6, lr}
 801423c:	4604      	mov	r4, r0
 801423e:	6800      	ldr	r0, [r0, #0]
 8014240:	4616      	mov	r6, r2
 8014242:	461d      	mov	r5, r3
 8014244:	f004 fd5c 	bl	8018d00 <rcl_context_is_valid>
 8014248:	b130      	cbz	r0, 8014258 <rclc_executor_spin_some+0x20>
 801424a:	4632      	mov	r2, r6
 801424c:	462b      	mov	r3, r5
 801424e:	4620      	mov	r0, r4
 8014250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014254:	f7ff be4e 	b.w	8013ef4 <rclc_executor_spin_some.part.0>
 8014258:	f000 f97a 	bl	8014550 <rcutils_reset_error>
 801425c:	2001      	movs	r0, #1
 801425e:	bd70      	pop	{r4, r5, r6, pc}
 8014260:	200b      	movs	r0, #11
 8014262:	4770      	bx	lr

08014264 <rclc_executor_handle_counters_zero_init>:
 8014264:	b130      	cbz	r0, 8014274 <rclc_executor_handle_counters_zero_init+0x10>
 8014266:	b508      	push	{r3, lr}
 8014268:	2220      	movs	r2, #32
 801426a:	2100      	movs	r1, #0
 801426c:	f00c f950 	bl	8020510 <memset>
 8014270:	2000      	movs	r0, #0
 8014272:	bd08      	pop	{r3, pc}
 8014274:	200b      	movs	r0, #11
 8014276:	4770      	bx	lr

08014278 <rclc_executor_handle_init>:
 8014278:	b168      	cbz	r0, 8014296 <rclc_executor_handle_init+0x1e>
 801427a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 80142a0 <rclc_executor_handle_init+0x28>
 801427e:	2300      	movs	r3, #0
 8014280:	220b      	movs	r2, #11
 8014282:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 8014286:	e9c0 3301 	strd	r3, r3, [r0, #4]
 801428a:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 801428e:	8002      	strh	r2, [r0, #0]
 8014290:	8703      	strh	r3, [r0, #56]	@ 0x38
 8014292:	4618      	mov	r0, r3
 8014294:	4770      	bx	lr
 8014296:	200b      	movs	r0, #11
 8014298:	4770      	bx	lr
 801429a:	bf00      	nop
 801429c:	f3af 8000 	nop.w
	...

080142a8 <rclc_support_init>:
 80142a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142ac:	b086      	sub	sp, #24
 80142ae:	b3b8      	cbz	r0, 8014320 <rclc_support_init+0x78>
 80142b0:	461c      	mov	r4, r3
 80142b2:	b3ab      	cbz	r3, 8014320 <rclc_support_init+0x78>
 80142b4:	460f      	mov	r7, r1
 80142b6:	4690      	mov	r8, r2
 80142b8:	4606      	mov	r6, r0
 80142ba:	f004 fe8b 	bl	8018fd4 <rcl_get_zero_initialized_init_options>
 80142be:	f104 030c 	add.w	r3, r4, #12
 80142c2:	9005      	str	r0, [sp, #20]
 80142c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80142c8:	e88d 0003 	stmia.w	sp, {r0, r1}
 80142cc:	a805      	add	r0, sp, #20
 80142ce:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80142d2:	f004 fe81 	bl	8018fd8 <rcl_init_options_init>
 80142d6:	4605      	mov	r5, r0
 80142d8:	b9e0      	cbnz	r0, 8014314 <rclc_support_init+0x6c>
 80142da:	ad02      	add	r5, sp, #8
 80142dc:	4628      	mov	r0, r5
 80142de:	f004 fd05 	bl	8018cec <rcl_get_zero_initialized_context>
 80142e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80142e6:	4633      	mov	r3, r6
 80142e8:	e886 0003 	stmia.w	r6, {r0, r1}
 80142ec:	aa05      	add	r2, sp, #20
 80142ee:	4641      	mov	r1, r8
 80142f0:	4638      	mov	r0, r7
 80142f2:	f004 fd6b 	bl	8018dcc <rcl_init>
 80142f6:	4605      	mov	r5, r0
 80142f8:	b9b8      	cbnz	r0, 801432a <rclc_support_init+0x82>
 80142fa:	60b4      	str	r4, [r6, #8]
 80142fc:	4622      	mov	r2, r4
 80142fe:	f106 010c 	add.w	r1, r6, #12
 8014302:	2003      	movs	r0, #3
 8014304:	f005 fc90 	bl	8019c28 <rcl_clock_init>
 8014308:	4605      	mov	r5, r0
 801430a:	b970      	cbnz	r0, 801432a <rclc_support_init+0x82>
 801430c:	a805      	add	r0, sp, #20
 801430e:	f004 fec9 	bl	80190a4 <rcl_init_options_fini>
 8014312:	b108      	cbz	r0, 8014318 <rclc_support_init+0x70>
 8014314:	f000 f91c 	bl	8014550 <rcutils_reset_error>
 8014318:	4628      	mov	r0, r5
 801431a:	b006      	add	sp, #24
 801431c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014320:	250b      	movs	r5, #11
 8014322:	4628      	mov	r0, r5
 8014324:	b006      	add	sp, #24
 8014326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801432a:	f000 f911 	bl	8014550 <rcutils_reset_error>
 801432e:	a805      	add	r0, sp, #20
 8014330:	f004 feb8 	bl	80190a4 <rcl_init_options_fini>
 8014334:	2800      	cmp	r0, #0
 8014336:	d0ef      	beq.n	8014318 <rclc_support_init+0x70>
 8014338:	e7ec      	b.n	8014314 <rclc_support_init+0x6c>
 801433a:	bf00      	nop

0801433c <rclc_node_init_default>:
 801433c:	b3b8      	cbz	r0, 80143ae <rclc_node_init_default+0x72>
 801433e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014342:	460d      	mov	r5, r1
 8014344:	b0a1      	sub	sp, #132	@ 0x84
 8014346:	b329      	cbz	r1, 8014394 <rclc_node_init_default+0x58>
 8014348:	4616      	mov	r6, r2
 801434a:	b31a      	cbz	r2, 8014394 <rclc_node_init_default+0x58>
 801434c:	461f      	mov	r7, r3
 801434e:	b30b      	cbz	r3, 8014394 <rclc_node_init_default+0x58>
 8014350:	f10d 0810 	add.w	r8, sp, #16
 8014354:	4604      	mov	r4, r0
 8014356:	4640      	mov	r0, r8
 8014358:	f004 ff5c 	bl	8019214 <rcl_get_zero_initialized_node>
 801435c:	e898 0003 	ldmia.w	r8, {r0, r1}
 8014360:	f10d 0918 	add.w	r9, sp, #24
 8014364:	e884 0003 	stmia.w	r4, {r0, r1}
 8014368:	4648      	mov	r0, r9
 801436a:	f005 f8cb 	bl	8019504 <rcl_node_get_default_options>
 801436e:	4640      	mov	r0, r8
 8014370:	f004 ff50 	bl	8019214 <rcl_get_zero_initialized_node>
 8014374:	f8cd 9000 	str.w	r9, [sp]
 8014378:	e898 0003 	ldmia.w	r8, {r0, r1}
 801437c:	463b      	mov	r3, r7
 801437e:	e884 0003 	stmia.w	r4, {r0, r1}
 8014382:	4632      	mov	r2, r6
 8014384:	4629      	mov	r1, r5
 8014386:	4620      	mov	r0, r4
 8014388:	f004 ff4e 	bl	8019228 <rcl_node_init>
 801438c:	b930      	cbnz	r0, 801439c <rclc_node_init_default+0x60>
 801438e:	b021      	add	sp, #132	@ 0x84
 8014390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014394:	200b      	movs	r0, #11
 8014396:	b021      	add	sp, #132	@ 0x84
 8014398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801439c:	9003      	str	r0, [sp, #12]
 801439e:	f000 f8d7 	bl	8014550 <rcutils_reset_error>
 80143a2:	f000 f8d5 	bl	8014550 <rcutils_reset_error>
 80143a6:	9803      	ldr	r0, [sp, #12]
 80143a8:	b021      	add	sp, #132	@ 0x84
 80143aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143ae:	200b      	movs	r0, #11
 80143b0:	4770      	bx	lr
 80143b2:	bf00      	nop

080143b4 <rclc_publisher_init_default>:
 80143b4:	b368      	cbz	r0, 8014412 <rclc_publisher_init_default+0x5e>
 80143b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143ba:	460d      	mov	r5, r1
 80143bc:	b0a0      	sub	sp, #128	@ 0x80
 80143be:	b321      	cbz	r1, 801440a <rclc_publisher_init_default+0x56>
 80143c0:	4616      	mov	r6, r2
 80143c2:	b312      	cbz	r2, 801440a <rclc_publisher_init_default+0x56>
 80143c4:	461f      	mov	r7, r3
 80143c6:	b303      	cbz	r3, 801440a <rclc_publisher_init_default+0x56>
 80143c8:	4604      	mov	r4, r0
 80143ca:	f7ff f84b 	bl	8013464 <rcl_get_zero_initialized_publisher>
 80143ce:	f10d 0810 	add.w	r8, sp, #16
 80143d2:	6020      	str	r0, [r4, #0]
 80143d4:	4640      	mov	r0, r8
 80143d6:	f7ff f8e1 	bl	801359c <rcl_publisher_get_default_options>
 80143da:	490f      	ldr	r1, [pc, #60]	@ (8014418 <rclc_publisher_init_default+0x64>)
 80143dc:	2250      	movs	r2, #80	@ 0x50
 80143de:	4640      	mov	r0, r8
 80143e0:	f00c f9b5 	bl	802074e <memcpy>
 80143e4:	f8cd 8000 	str.w	r8, [sp]
 80143e8:	463b      	mov	r3, r7
 80143ea:	4632      	mov	r2, r6
 80143ec:	4629      	mov	r1, r5
 80143ee:	4620      	mov	r0, r4
 80143f0:	f7ff f83e 	bl	8013470 <rcl_publisher_init>
 80143f4:	b910      	cbnz	r0, 80143fc <rclc_publisher_init_default+0x48>
 80143f6:	b020      	add	sp, #128	@ 0x80
 80143f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143fc:	9003      	str	r0, [sp, #12]
 80143fe:	f000 f8a7 	bl	8014550 <rcutils_reset_error>
 8014402:	9803      	ldr	r0, [sp, #12]
 8014404:	b020      	add	sp, #128	@ 0x80
 8014406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801440a:	200b      	movs	r0, #11
 801440c:	b020      	add	sp, #128	@ 0x80
 801440e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014412:	200b      	movs	r0, #11
 8014414:	4770      	bx	lr
 8014416:	bf00      	nop
 8014418:	08021888 	.word	0x08021888

0801441c <rclc_subscription_init_default>:
 801441c:	b368      	cbz	r0, 801447a <rclc_subscription_init_default+0x5e>
 801441e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014422:	460d      	mov	r5, r1
 8014424:	b0a0      	sub	sp, #128	@ 0x80
 8014426:	b321      	cbz	r1, 8014472 <rclc_subscription_init_default+0x56>
 8014428:	4616      	mov	r6, r2
 801442a:	b312      	cbz	r2, 8014472 <rclc_subscription_init_default+0x56>
 801442c:	461f      	mov	r7, r3
 801442e:	b303      	cbz	r3, 8014472 <rclc_subscription_init_default+0x56>
 8014430:	4604      	mov	r4, r0
 8014432:	f005 fa9d 	bl	8019970 <rcl_get_zero_initialized_subscription>
 8014436:	f10d 0810 	add.w	r8, sp, #16
 801443a:	6020      	str	r0, [r4, #0]
 801443c:	4640      	mov	r0, r8
 801443e:	f005 fb45 	bl	8019acc <rcl_subscription_get_default_options>
 8014442:	490f      	ldr	r1, [pc, #60]	@ (8014480 <rclc_subscription_init_default+0x64>)
 8014444:	2250      	movs	r2, #80	@ 0x50
 8014446:	4640      	mov	r0, r8
 8014448:	f00c f981 	bl	802074e <memcpy>
 801444c:	f8cd 8000 	str.w	r8, [sp]
 8014450:	463b      	mov	r3, r7
 8014452:	4632      	mov	r2, r6
 8014454:	4629      	mov	r1, r5
 8014456:	4620      	mov	r0, r4
 8014458:	f005 fa90 	bl	801997c <rcl_subscription_init>
 801445c:	b910      	cbnz	r0, 8014464 <rclc_subscription_init_default+0x48>
 801445e:	b020      	add	sp, #128	@ 0x80
 8014460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014464:	9003      	str	r0, [sp, #12]
 8014466:	f000 f873 	bl	8014550 <rcutils_reset_error>
 801446a:	9803      	ldr	r0, [sp, #12]
 801446c:	b020      	add	sp, #128	@ 0x80
 801446e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014472:	200b      	movs	r0, #11
 8014474:	b020      	add	sp, #128	@ 0x80
 8014476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801447a:	200b      	movs	r0, #11
 801447c:	4770      	bx	lr
 801447e:	bf00      	nop
 8014480:	080218d8 	.word	0x080218d8

08014484 <__default_zero_allocate>:
 8014484:	f00b bb5a 	b.w	801fb3c <calloc>

08014488 <__default_reallocate>:
 8014488:	f00b bcf8 	b.w	801fe7c <realloc>

0801448c <__default_deallocate>:
 801448c:	f00b bbd4 	b.w	801fc38 <free>

08014490 <__default_allocate>:
 8014490:	f00b bbca 	b.w	801fc28 <malloc>

08014494 <rcutils_get_zero_initialized_allocator>:
 8014494:	b510      	push	{r4, lr}
 8014496:	4c05      	ldr	r4, [pc, #20]	@ (80144ac <rcutils_get_zero_initialized_allocator+0x18>)
 8014498:	4686      	mov	lr, r0
 801449a:	4684      	mov	ip, r0
 801449c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801449e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80144a2:	6823      	ldr	r3, [r4, #0]
 80144a4:	f8cc 3000 	str.w	r3, [ip]
 80144a8:	4670      	mov	r0, lr
 80144aa:	bd10      	pop	{r4, pc}
 80144ac:	08021928 	.word	0x08021928

080144b0 <rcutils_set_default_allocator>:
 80144b0:	b1a8      	cbz	r0, 80144de <rcutils_set_default_allocator+0x2e>
 80144b2:	6802      	ldr	r2, [r0, #0]
 80144b4:	b1a2      	cbz	r2, 80144e0 <rcutils_set_default_allocator+0x30>
 80144b6:	6841      	ldr	r1, [r0, #4]
 80144b8:	b1a1      	cbz	r1, 80144e4 <rcutils_set_default_allocator+0x34>
 80144ba:	b410      	push	{r4}
 80144bc:	68c4      	ldr	r4, [r0, #12]
 80144be:	b164      	cbz	r4, 80144da <rcutils_set_default_allocator+0x2a>
 80144c0:	6880      	ldr	r0, [r0, #8]
 80144c2:	b138      	cbz	r0, 80144d4 <rcutils_set_default_allocator+0x24>
 80144c4:	4b08      	ldr	r3, [pc, #32]	@ (80144e8 <rcutils_set_default_allocator+0x38>)
 80144c6:	601a      	str	r2, [r3, #0]
 80144c8:	2200      	movs	r2, #0
 80144ca:	e9c3 4203 	strd	r4, r2, [r3, #12]
 80144ce:	e9c3 1001 	strd	r1, r0, [r3, #4]
 80144d2:	2001      	movs	r0, #1
 80144d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80144d8:	4770      	bx	lr
 80144da:	4620      	mov	r0, r4
 80144dc:	e7fa      	b.n	80144d4 <rcutils_set_default_allocator+0x24>
 80144de:	4770      	bx	lr
 80144e0:	4610      	mov	r0, r2
 80144e2:	4770      	bx	lr
 80144e4:	4608      	mov	r0, r1
 80144e6:	4770      	bx	lr
 80144e8:	200002b4 	.word	0x200002b4

080144ec <rcutils_get_default_allocator>:
 80144ec:	b510      	push	{r4, lr}
 80144ee:	4c05      	ldr	r4, [pc, #20]	@ (8014504 <rcutils_get_default_allocator+0x18>)
 80144f0:	4686      	mov	lr, r0
 80144f2:	4684      	mov	ip, r0
 80144f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80144f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80144fa:	6823      	ldr	r3, [r4, #0]
 80144fc:	f8cc 3000 	str.w	r3, [ip]
 8014500:	4670      	mov	r0, lr
 8014502:	bd10      	pop	{r4, pc}
 8014504:	200002b4 	.word	0x200002b4

08014508 <rcutils_allocator_is_valid>:
 8014508:	b158      	cbz	r0, 8014522 <rcutils_allocator_is_valid+0x1a>
 801450a:	6803      	ldr	r3, [r0, #0]
 801450c:	b143      	cbz	r3, 8014520 <rcutils_allocator_is_valid+0x18>
 801450e:	6843      	ldr	r3, [r0, #4]
 8014510:	b133      	cbz	r3, 8014520 <rcutils_allocator_is_valid+0x18>
 8014512:	68c3      	ldr	r3, [r0, #12]
 8014514:	b123      	cbz	r3, 8014520 <rcutils_allocator_is_valid+0x18>
 8014516:	6880      	ldr	r0, [r0, #8]
 8014518:	3800      	subs	r0, #0
 801451a:	bf18      	it	ne
 801451c:	2001      	movne	r0, #1
 801451e:	4770      	bx	lr
 8014520:	4618      	mov	r0, r3
 8014522:	4770      	bx	lr

08014524 <rcutils_get_error_string>:
 8014524:	4b06      	ldr	r3, [pc, #24]	@ (8014540 <rcutils_get_error_string+0x1c>)
 8014526:	781b      	ldrb	r3, [r3, #0]
 8014528:	b13b      	cbz	r3, 801453a <rcutils_get_error_string+0x16>
 801452a:	4b06      	ldr	r3, [pc, #24]	@ (8014544 <rcutils_get_error_string+0x20>)
 801452c:	781a      	ldrb	r2, [r3, #0]
 801452e:	b90a      	cbnz	r2, 8014534 <rcutils_get_error_string+0x10>
 8014530:	2201      	movs	r2, #1
 8014532:	701a      	strb	r2, [r3, #0]
 8014534:	4b04      	ldr	r3, [pc, #16]	@ (8014548 <rcutils_get_error_string+0x24>)
 8014536:	7818      	ldrb	r0, [r3, #0]
 8014538:	4770      	bx	lr
 801453a:	4b04      	ldr	r3, [pc, #16]	@ (801454c <rcutils_get_error_string+0x28>)
 801453c:	7818      	ldrb	r0, [r3, #0]
 801453e:	4770      	bx	lr
 8014540:	20011ac0 	.word	0x20011ac0
 8014544:	20011ad9 	.word	0x20011ad9
 8014548:	20011ad8 	.word	0x20011ad8
 801454c:	08021b38 	.word	0x08021b38

08014550 <rcutils_reset_error>:
 8014550:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8014570 <rcutils_reset_error+0x20>
 8014554:	4a08      	ldr	r2, [pc, #32]	@ (8014578 <rcutils_reset_error+0x28>)
 8014556:	4809      	ldr	r0, [pc, #36]	@ (801457c <rcutils_reset_error+0x2c>)
 8014558:	4909      	ldr	r1, [pc, #36]	@ (8014580 <rcutils_reset_error+0x30>)
 801455a:	2300      	movs	r3, #0
 801455c:	8013      	strh	r3, [r2, #0]
 801455e:	ed82 7b02 	vstr	d7, [r2, #8]
 8014562:	4a08      	ldr	r2, [pc, #32]	@ (8014584 <rcutils_reset_error+0x34>)
 8014564:	7003      	strb	r3, [r0, #0]
 8014566:	700b      	strb	r3, [r1, #0]
 8014568:	7013      	strb	r3, [r2, #0]
 801456a:	4770      	bx	lr
 801456c:	f3af 8000 	nop.w
	...
 8014578:	20011ac8 	.word	0x20011ac8
 801457c:	20011ad9 	.word	0x20011ad9
 8014580:	20011ad8 	.word	0x20011ad8
 8014584:	20011ac0 	.word	0x20011ac0

08014588 <rcutils_system_time_now>:
 8014588:	b308      	cbz	r0, 80145ce <rcutils_system_time_now+0x46>
 801458a:	b570      	push	{r4, r5, r6, lr}
 801458c:	b084      	sub	sp, #16
 801458e:	4604      	mov	r4, r0
 8014590:	4669      	mov	r1, sp
 8014592:	2001      	movs	r0, #1
 8014594:	f7ee f904 	bl	80027a0 <clock_gettime>
 8014598:	e9dd 3500 	ldrd	r3, r5, [sp]
 801459c:	2d00      	cmp	r5, #0
 801459e:	db13      	blt.n	80145c8 <rcutils_system_time_now+0x40>
 80145a0:	9902      	ldr	r1, [sp, #8]
 80145a2:	2900      	cmp	r1, #0
 80145a4:	db0d      	blt.n	80145c2 <rcutils_system_time_now+0x3a>
 80145a6:	4e0b      	ldr	r6, [pc, #44]	@ (80145d4 <rcutils_system_time_now+0x4c>)
 80145a8:	fba3 3206 	umull	r3, r2, r3, r6
 80145ac:	185b      	adds	r3, r3, r1
 80145ae:	fb06 2205 	mla	r2, r6, r5, r2
 80145b2:	f04f 0000 	mov.w	r0, #0
 80145b6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 80145ba:	e9c4 3200 	strd	r3, r2, [r4]
 80145be:	b004      	add	sp, #16
 80145c0:	bd70      	pop	{r4, r5, r6, pc}
 80145c2:	ea53 0205 	orrs.w	r2, r3, r5
 80145c6:	d1ee      	bne.n	80145a6 <rcutils_system_time_now+0x1e>
 80145c8:	2002      	movs	r0, #2
 80145ca:	b004      	add	sp, #16
 80145cc:	bd70      	pop	{r4, r5, r6, pc}
 80145ce:	200b      	movs	r0, #11
 80145d0:	4770      	bx	lr
 80145d2:	bf00      	nop
 80145d4:	3b9aca00 	.word	0x3b9aca00

080145d8 <rcutils_steady_time_now>:
 80145d8:	b308      	cbz	r0, 801461e <rcutils_steady_time_now+0x46>
 80145da:	b570      	push	{r4, r5, r6, lr}
 80145dc:	b084      	sub	sp, #16
 80145de:	4604      	mov	r4, r0
 80145e0:	4669      	mov	r1, sp
 80145e2:	2000      	movs	r0, #0
 80145e4:	f7ee f8dc 	bl	80027a0 <clock_gettime>
 80145e8:	e9dd 3500 	ldrd	r3, r5, [sp]
 80145ec:	2d00      	cmp	r5, #0
 80145ee:	db13      	blt.n	8014618 <rcutils_steady_time_now+0x40>
 80145f0:	9902      	ldr	r1, [sp, #8]
 80145f2:	2900      	cmp	r1, #0
 80145f4:	db0d      	blt.n	8014612 <rcutils_steady_time_now+0x3a>
 80145f6:	4e0b      	ldr	r6, [pc, #44]	@ (8014624 <rcutils_steady_time_now+0x4c>)
 80145f8:	fba3 3206 	umull	r3, r2, r3, r6
 80145fc:	185b      	adds	r3, r3, r1
 80145fe:	fb06 2205 	mla	r2, r6, r5, r2
 8014602:	f04f 0000 	mov.w	r0, #0
 8014606:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 801460a:	e9c4 3200 	strd	r3, r2, [r4]
 801460e:	b004      	add	sp, #16
 8014610:	bd70      	pop	{r4, r5, r6, pc}
 8014612:	ea53 0205 	orrs.w	r2, r3, r5
 8014616:	d1ee      	bne.n	80145f6 <rcutils_steady_time_now+0x1e>
 8014618:	2002      	movs	r0, #2
 801461a:	b004      	add	sp, #16
 801461c:	bd70      	pop	{r4, r5, r6, pc}
 801461e:	200b      	movs	r0, #11
 8014620:	4770      	bx	lr
 8014622:	bf00      	nop
 8014624:	3b9aca00 	.word	0x3b9aca00

08014628 <rmw_get_default_publisher_options>:
 8014628:	2200      	movs	r2, #0
 801462a:	6002      	str	r2, [r0, #0]
 801462c:	7102      	strb	r2, [r0, #4]
 801462e:	4770      	bx	lr

08014630 <rmw_uros_set_custom_transport>:
 8014630:	b470      	push	{r4, r5, r6}
 8014632:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8014636:	b162      	cbz	r2, 8014652 <rmw_uros_set_custom_transport+0x22>
 8014638:	b15b      	cbz	r3, 8014652 <rmw_uros_set_custom_transport+0x22>
 801463a:	b155      	cbz	r5, 8014652 <rmw_uros_set_custom_transport+0x22>
 801463c:	b14e      	cbz	r6, 8014652 <rmw_uros_set_custom_transport+0x22>
 801463e:	4c06      	ldr	r4, [pc, #24]	@ (8014658 <rmw_uros_set_custom_transport+0x28>)
 8014640:	7020      	strb	r0, [r4, #0]
 8014642:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8014646:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801464a:	6166      	str	r6, [r4, #20]
 801464c:	2000      	movs	r0, #0
 801464e:	bc70      	pop	{r4, r5, r6}
 8014650:	4770      	bx	lr
 8014652:	200b      	movs	r0, #11
 8014654:	bc70      	pop	{r4, r5, r6}
 8014656:	4770      	bx	lr
 8014658:	20011adc 	.word	0x20011adc

0801465c <flush_session>:
 801465c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 801465e:	f002 bb2f 	b.w	8016cc0 <uxr_run_session_until_confirm_delivery>
 8014662:	bf00      	nop

08014664 <rmw_publish>:
 8014664:	2800      	cmp	r0, #0
 8014666:	d053      	beq.n	8014710 <rmw_publish+0xac>
 8014668:	b570      	push	{r4, r5, r6, lr}
 801466a:	460d      	mov	r5, r1
 801466c:	b08e      	sub	sp, #56	@ 0x38
 801466e:	2900      	cmp	r1, #0
 8014670:	d04b      	beq.n	801470a <rmw_publish+0xa6>
 8014672:	4604      	mov	r4, r0
 8014674:	6800      	ldr	r0, [r0, #0]
 8014676:	f000 fce1 	bl	801503c <is_uxrce_rmw_identifier_valid>
 801467a:	2800      	cmp	r0, #0
 801467c:	d045      	beq.n	801470a <rmw_publish+0xa6>
 801467e:	6866      	ldr	r6, [r4, #4]
 8014680:	2e00      	cmp	r6, #0
 8014682:	d042      	beq.n	801470a <rmw_publish+0xa6>
 8014684:	69b4      	ldr	r4, [r6, #24]
 8014686:	4628      	mov	r0, r5
 8014688:	6923      	ldr	r3, [r4, #16]
 801468a:	4798      	blx	r3
 801468c:	69f3      	ldr	r3, [r6, #28]
 801468e:	9005      	str	r0, [sp, #20]
 8014690:	b113      	cbz	r3, 8014698 <rmw_publish+0x34>
 8014692:	a805      	add	r0, sp, #20
 8014694:	4798      	blx	r3
 8014696:	9805      	ldr	r0, [sp, #20]
 8014698:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801469c:	691b      	ldr	r3, [r3, #16]
 801469e:	9000      	str	r0, [sp, #0]
 80146a0:	6972      	ldr	r2, [r6, #20]
 80146a2:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80146a4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80146a8:	ab06      	add	r3, sp, #24
 80146aa:	f003 f8f5 	bl	8017898 <uxr_prepare_output_stream>
 80146ae:	b1d8      	cbz	r0, 80146e8 <rmw_publish+0x84>
 80146b0:	68a3      	ldr	r3, [r4, #8]
 80146b2:	a906      	add	r1, sp, #24
 80146b4:	4628      	mov	r0, r5
 80146b6:	4798      	blx	r3
 80146b8:	6a33      	ldr	r3, [r6, #32]
 80146ba:	4604      	mov	r4, r0
 80146bc:	b10b      	cbz	r3, 80146c2 <rmw_publish+0x5e>
 80146be:	a806      	add	r0, sp, #24
 80146c0:	4798      	blx	r3
 80146c2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 80146c6:	2b01      	cmp	r3, #1
 80146c8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80146cc:	d022      	beq.n	8014714 <rmw_publish+0xb0>
 80146ce:	6918      	ldr	r0, [r3, #16]
 80146d0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 80146d2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80146d6:	f002 faf3 	bl	8016cc0 <uxr_run_session_until_confirm_delivery>
 80146da:	4020      	ands	r0, r4
 80146dc:	b2c4      	uxtb	r4, r0
 80146de:	f084 0001 	eor.w	r0, r4, #1
 80146e2:	b2c0      	uxtb	r0, r0
 80146e4:	b00e      	add	sp, #56	@ 0x38
 80146e6:	bd70      	pop	{r4, r5, r6, pc}
 80146e8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 80146ec:	6918      	ldr	r0, [r3, #16]
 80146ee:	9b05      	ldr	r3, [sp, #20]
 80146f0:	9300      	str	r3, [sp, #0]
 80146f2:	4b0b      	ldr	r3, [pc, #44]	@ (8014720 <rmw_publish+0xbc>)
 80146f4:	9301      	str	r3, [sp, #4]
 80146f6:	9602      	str	r6, [sp, #8]
 80146f8:	6972      	ldr	r2, [r6, #20]
 80146fa:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 80146fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014700:	ab06      	add	r3, sp, #24
 8014702:	f003 f8f9 	bl	80178f8 <uxr_prepare_output_stream_fragmented>
 8014706:	2800      	cmp	r0, #0
 8014708:	d1d2      	bne.n	80146b0 <rmw_publish+0x4c>
 801470a:	2001      	movs	r0, #1
 801470c:	b00e      	add	sp, #56	@ 0x38
 801470e:	bd70      	pop	{r4, r5, r6, pc}
 8014710:	2001      	movs	r0, #1
 8014712:	4770      	bx	lr
 8014714:	6918      	ldr	r0, [r3, #16]
 8014716:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801471a:	f001 ff11 	bl	8016540 <uxr_flash_output_streams>
 801471e:	e7de      	b.n	80146de <rmw_publish+0x7a>
 8014720:	0801465d 	.word	0x0801465d

08014724 <rmw_create_publisher>:
 8014724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014728:	b087      	sub	sp, #28
 801472a:	2800      	cmp	r0, #0
 801472c:	f000 80cf 	beq.w	80148ce <rmw_create_publisher+0x1aa>
 8014730:	460e      	mov	r6, r1
 8014732:	2900      	cmp	r1, #0
 8014734:	f000 80cb 	beq.w	80148ce <rmw_create_publisher+0x1aa>
 8014738:	4604      	mov	r4, r0
 801473a:	6800      	ldr	r0, [r0, #0]
 801473c:	4615      	mov	r5, r2
 801473e:	4698      	mov	r8, r3
 8014740:	f000 fc7c 	bl	801503c <is_uxrce_rmw_identifier_valid>
 8014744:	2800      	cmp	r0, #0
 8014746:	f000 80c2 	beq.w	80148ce <rmw_create_publisher+0x1aa>
 801474a:	2d00      	cmp	r5, #0
 801474c:	f000 80bf 	beq.w	80148ce <rmw_create_publisher+0x1aa>
 8014750:	782b      	ldrb	r3, [r5, #0]
 8014752:	2b00      	cmp	r3, #0
 8014754:	f000 80bb 	beq.w	80148ce <rmw_create_publisher+0x1aa>
 8014758:	f1b8 0f00 	cmp.w	r8, #0
 801475c:	f000 80b7 	beq.w	80148ce <rmw_create_publisher+0x1aa>
 8014760:	485d      	ldr	r0, [pc, #372]	@ (80148d8 <rmw_create_publisher+0x1b4>)
 8014762:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014766:	f007 fd03 	bl	801c170 <get_memory>
 801476a:	2800      	cmp	r0, #0
 801476c:	f000 80af 	beq.w	80148ce <rmw_create_publisher+0x1aa>
 8014770:	6884      	ldr	r4, [r0, #8]
 8014772:	2300      	movs	r3, #0
 8014774:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8014778:	f007 fd62 	bl	801c240 <rmw_get_implementation_identifier>
 801477c:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 8014780:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 8014784:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 8014788:	4628      	mov	r0, r5
 801478a:	f7eb fd2b 	bl	80001e4 <strlen>
 801478e:	3001      	adds	r0, #1
 8014790:	283c      	cmp	r0, #60	@ 0x3c
 8014792:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 8014796:	f200 8097 	bhi.w	80148c8 <rmw_create_publisher+0x1a4>
 801479a:	4a50      	ldr	r2, [pc, #320]	@ (80148dc <rmw_create_publisher+0x1b8>)
 801479c:	462b      	mov	r3, r5
 801479e:	213c      	movs	r1, #60	@ 0x3c
 80147a0:	4650      	mov	r0, sl
 80147a2:	f00b fd47 	bl	8020234 <sniprintf>
 80147a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80147aa:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80147ac:	4641      	mov	r1, r8
 80147ae:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 80147b2:	2250      	movs	r2, #80	@ 0x50
 80147b4:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80147b8:	f00b ffc9 	bl	802074e <memcpy>
 80147bc:	f898 3008 	ldrb.w	r3, [r8, #8]
 80147c0:	4947      	ldr	r1, [pc, #284]	@ (80148e0 <rmw_create_publisher+0x1bc>)
 80147c2:	2b02      	cmp	r3, #2
 80147c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80147c8:	bf0c      	ite	eq
 80147ca:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 80147ce:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 80147d2:	67a3      	str	r3, [r4, #120]	@ 0x78
 80147d4:	2300      	movs	r3, #0
 80147d6:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80147da:	4630      	mov	r0, r6
 80147dc:	f000 fc3c 	bl	8015058 <get_message_typesupport_handle>
 80147e0:	2800      	cmp	r0, #0
 80147e2:	d071      	beq.n	80148c8 <rmw_create_publisher+0x1a4>
 80147e4:	6842      	ldr	r2, [r0, #4]
 80147e6:	61a2      	str	r2, [r4, #24]
 80147e8:	2a00      	cmp	r2, #0
 80147ea:	d06d      	beq.n	80148c8 <rmw_create_publisher+0x1a4>
 80147ec:	4629      	mov	r1, r5
 80147ee:	4643      	mov	r3, r8
 80147f0:	4648      	mov	r0, r9
 80147f2:	f007 ff8b 	bl	801c70c <create_topic>
 80147f6:	6260      	str	r0, [r4, #36]	@ 0x24
 80147f8:	2800      	cmp	r0, #0
 80147fa:	d065      	beq.n	80148c8 <rmw_create_publisher+0x1a4>
 80147fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014800:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014804:	2103      	movs	r1, #3
 8014806:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 801480a:	1c42      	adds	r2, r0, #1
 801480c:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 8014810:	f001 fd48 	bl	80162a4 <uxr_object_id>
 8014814:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 8014818:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801481c:	6120      	str	r0, [r4, #16]
 801481e:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 8014822:	6910      	ldr	r0, [r2, #16]
 8014824:	2506      	movs	r5, #6
 8014826:	9500      	str	r5, [sp, #0]
 8014828:	6819      	ldr	r1, [r3, #0]
 801482a:	6922      	ldr	r2, [r4, #16]
 801482c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8014830:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014834:	f001 fbe8 	bl	8016008 <uxr_buffer_create_publisher_bin>
 8014838:	4602      	mov	r2, r0
 801483a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801483e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8014842:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8014846:	f000 fb79 	bl	8014f3c <run_xrce_session>
 801484a:	b3c8      	cbz	r0, 80148c0 <rmw_create_publisher+0x19c>
 801484c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014850:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 8014854:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014858:	2105      	movs	r1, #5
 801485a:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 801485e:	1c42      	adds	r2, r0, #1
 8014860:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 8014864:	f001 fd1e 	bl	80162a4 <uxr_object_id>
 8014868:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801486c:	6160      	str	r0, [r4, #20]
 801486e:	691e      	ldr	r6, [r3, #16]
 8014870:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014874:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8014878:	f10d 0a10 	add.w	sl, sp, #16
 801487c:	4641      	mov	r1, r8
 801487e:	4650      	mov	r0, sl
 8014880:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 8014884:	f000 fb76 	bl	8014f74 <convert_qos_profile>
 8014888:	9503      	str	r5, [sp, #12]
 801488a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801488e:	9001      	str	r0, [sp, #4]
 8014890:	f8ad 1008 	strh.w	r1, [sp, #8]
 8014894:	f8db 3010 	ldr.w	r3, [fp, #16]
 8014898:	9300      	str	r3, [sp, #0]
 801489a:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 801489e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80148a2:	f8d8 1000 	ldr.w	r1, [r8]
 80148a6:	4630      	mov	r0, r6
 80148a8:	f001 fc0e 	bl	80160c8 <uxr_buffer_create_datawriter_bin>
 80148ac:	4602      	mov	r2, r0
 80148ae:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80148b2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80148b6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80148ba:	f000 fb3f 	bl	8014f3c <run_xrce_session>
 80148be:	b938      	cbnz	r0, 80148d0 <rmw_create_publisher+0x1ac>
 80148c0:	4805      	ldr	r0, [pc, #20]	@ (80148d8 <rmw_create_publisher+0x1b4>)
 80148c2:	4621      	mov	r1, r4
 80148c4:	f007 fc64 	bl	801c190 <put_memory>
 80148c8:	4638      	mov	r0, r7
 80148ca:	f000 f9dd 	bl	8014c88 <rmw_uxrce_fini_publisher_memory>
 80148ce:	2700      	movs	r7, #0
 80148d0:	4638      	mov	r0, r7
 80148d2:	b007      	add	sp, #28
 80148d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148d8:	200163d4 	.word	0x200163d4
 80148dc:	0802194c 	.word	0x0802194c
 80148e0:	080216e0 	.word	0x080216e0

080148e4 <rmw_publisher_get_actual_qos>:
 80148e4:	2000      	movs	r0, #0
 80148e6:	4770      	bx	lr

080148e8 <rmw_destroy_publisher>:
 80148e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148ea:	b128      	cbz	r0, 80148f8 <rmw_destroy_publisher+0x10>
 80148ec:	4604      	mov	r4, r0
 80148ee:	6800      	ldr	r0, [r0, #0]
 80148f0:	460d      	mov	r5, r1
 80148f2:	f000 fba3 	bl	801503c <is_uxrce_rmw_identifier_valid>
 80148f6:	b910      	cbnz	r0, 80148fe <rmw_destroy_publisher+0x16>
 80148f8:	2401      	movs	r4, #1
 80148fa:	4620      	mov	r0, r4
 80148fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148fe:	6863      	ldr	r3, [r4, #4]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d0f9      	beq.n	80148f8 <rmw_destroy_publisher+0x10>
 8014904:	2d00      	cmp	r5, #0
 8014906:	d0f7      	beq.n	80148f8 <rmw_destroy_publisher+0x10>
 8014908:	6828      	ldr	r0, [r5, #0]
 801490a:	f000 fb97 	bl	801503c <is_uxrce_rmw_identifier_valid>
 801490e:	2800      	cmp	r0, #0
 8014910:	d0f2      	beq.n	80148f8 <rmw_destroy_publisher+0x10>
 8014912:	686c      	ldr	r4, [r5, #4]
 8014914:	2c00      	cmp	r4, #0
 8014916:	d0ef      	beq.n	80148f8 <rmw_destroy_publisher+0x10>
 8014918:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 801491a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 801491e:	f007 ff59 	bl	801c7d4 <destroy_topic>
 8014922:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8014926:	6962      	ldr	r2, [r4, #20]
 8014928:	6918      	ldr	r0, [r3, #16]
 801492a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801492e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014932:	6819      	ldr	r1, [r3, #0]
 8014934:	f001 fab4 	bl	8015ea0 <uxr_buffer_delete_entity>
 8014938:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 801493c:	6922      	ldr	r2, [r4, #16]
 801493e:	691b      	ldr	r3, [r3, #16]
 8014940:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 8014944:	4604      	mov	r4, r0
 8014946:	6809      	ldr	r1, [r1, #0]
 8014948:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801494c:	f001 faa8 	bl	8015ea0 <uxr_buffer_delete_entity>
 8014950:	693e      	ldr	r6, [r7, #16]
 8014952:	4622      	mov	r2, r4
 8014954:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8014958:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 801495c:	4604      	mov	r4, r0
 801495e:	4630      	mov	r0, r6
 8014960:	f000 faec 	bl	8014f3c <run_xrce_session>
 8014964:	693e      	ldr	r6, [r7, #16]
 8014966:	4622      	mov	r2, r4
 8014968:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 801496c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 8014970:	4604      	mov	r4, r0
 8014972:	4630      	mov	r0, r6
 8014974:	f000 fae2 	bl	8014f3c <run_xrce_session>
 8014978:	b12c      	cbz	r4, 8014986 <rmw_destroy_publisher+0x9e>
 801497a:	b120      	cbz	r0, 8014986 <rmw_destroy_publisher+0x9e>
 801497c:	2400      	movs	r4, #0
 801497e:	4628      	mov	r0, r5
 8014980:	f000 f982 	bl	8014c88 <rmw_uxrce_fini_publisher_memory>
 8014984:	e7b9      	b.n	80148fa <rmw_destroy_publisher+0x12>
 8014986:	2402      	movs	r4, #2
 8014988:	e7f9      	b.n	801497e <rmw_destroy_publisher+0x96>
 801498a:	bf00      	nop

0801498c <rmw_uxrce_init_service_memory>:
 801498c:	b1e2      	cbz	r2, 80149c8 <rmw_uxrce_init_service_memory+0x3c>
 801498e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014992:	7b05      	ldrb	r5, [r0, #12]
 8014994:	4606      	mov	r6, r0
 8014996:	b9ad      	cbnz	r5, 80149c4 <rmw_uxrce_init_service_memory+0x38>
 8014998:	23c8      	movs	r3, #200	@ 0xc8
 801499a:	e9c0 5500 	strd	r5, r5, [r0]
 801499e:	6083      	str	r3, [r0, #8]
 80149a0:	f240 1301 	movw	r3, #257	@ 0x101
 80149a4:	4617      	mov	r7, r2
 80149a6:	8183      	strh	r3, [r0, #12]
 80149a8:	460c      	mov	r4, r1
 80149aa:	46a8      	mov	r8, r5
 80149ac:	4621      	mov	r1, r4
 80149ae:	4630      	mov	r0, r6
 80149b0:	3501      	adds	r5, #1
 80149b2:	f007 fbed 	bl	801c190 <put_memory>
 80149b6:	42af      	cmp	r7, r5
 80149b8:	60a4      	str	r4, [r4, #8]
 80149ba:	f884 800c 	strb.w	r8, [r4, #12]
 80149be:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80149c2:	d1f3      	bne.n	80149ac <rmw_uxrce_init_service_memory+0x20>
 80149c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149c8:	4770      	bx	lr
 80149ca:	bf00      	nop

080149cc <rmw_uxrce_init_client_memory>:
 80149cc:	b1e2      	cbz	r2, 8014a08 <rmw_uxrce_init_client_memory+0x3c>
 80149ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149d2:	7b05      	ldrb	r5, [r0, #12]
 80149d4:	4606      	mov	r6, r0
 80149d6:	b9ad      	cbnz	r5, 8014a04 <rmw_uxrce_init_client_memory+0x38>
 80149d8:	23c8      	movs	r3, #200	@ 0xc8
 80149da:	e9c0 5500 	strd	r5, r5, [r0]
 80149de:	6083      	str	r3, [r0, #8]
 80149e0:	f240 1301 	movw	r3, #257	@ 0x101
 80149e4:	4617      	mov	r7, r2
 80149e6:	8183      	strh	r3, [r0, #12]
 80149e8:	460c      	mov	r4, r1
 80149ea:	46a8      	mov	r8, r5
 80149ec:	4621      	mov	r1, r4
 80149ee:	4630      	mov	r0, r6
 80149f0:	3501      	adds	r5, #1
 80149f2:	f007 fbcd 	bl	801c190 <put_memory>
 80149f6:	42af      	cmp	r7, r5
 80149f8:	60a4      	str	r4, [r4, #8]
 80149fa:	f884 800c 	strb.w	r8, [r4, #12]
 80149fe:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 8014a02:	d1f3      	bne.n	80149ec <rmw_uxrce_init_client_memory+0x20>
 8014a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a08:	4770      	bx	lr
 8014a0a:	bf00      	nop

08014a0c <rmw_uxrce_init_publisher_memory>:
 8014a0c:	b1e2      	cbz	r2, 8014a48 <rmw_uxrce_init_publisher_memory+0x3c>
 8014a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a12:	7b05      	ldrb	r5, [r0, #12]
 8014a14:	4606      	mov	r6, r0
 8014a16:	b9ad      	cbnz	r5, 8014a44 <rmw_uxrce_init_publisher_memory+0x38>
 8014a18:	23d8      	movs	r3, #216	@ 0xd8
 8014a1a:	e9c0 5500 	strd	r5, r5, [r0]
 8014a1e:	6083      	str	r3, [r0, #8]
 8014a20:	f240 1301 	movw	r3, #257	@ 0x101
 8014a24:	4617      	mov	r7, r2
 8014a26:	8183      	strh	r3, [r0, #12]
 8014a28:	460c      	mov	r4, r1
 8014a2a:	46a8      	mov	r8, r5
 8014a2c:	4621      	mov	r1, r4
 8014a2e:	4630      	mov	r0, r6
 8014a30:	3501      	adds	r5, #1
 8014a32:	f007 fbad 	bl	801c190 <put_memory>
 8014a36:	42af      	cmp	r7, r5
 8014a38:	60a4      	str	r4, [r4, #8]
 8014a3a:	f884 800c 	strb.w	r8, [r4, #12]
 8014a3e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8014a42:	d1f3      	bne.n	8014a2c <rmw_uxrce_init_publisher_memory+0x20>
 8014a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a48:	4770      	bx	lr
 8014a4a:	bf00      	nop

08014a4c <rmw_uxrce_init_subscription_memory>:
 8014a4c:	b1e2      	cbz	r2, 8014a88 <rmw_uxrce_init_subscription_memory+0x3c>
 8014a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a52:	7b05      	ldrb	r5, [r0, #12]
 8014a54:	4606      	mov	r6, r0
 8014a56:	b9ad      	cbnz	r5, 8014a84 <rmw_uxrce_init_subscription_memory+0x38>
 8014a58:	23d8      	movs	r3, #216	@ 0xd8
 8014a5a:	e9c0 5500 	strd	r5, r5, [r0]
 8014a5e:	6083      	str	r3, [r0, #8]
 8014a60:	f240 1301 	movw	r3, #257	@ 0x101
 8014a64:	4617      	mov	r7, r2
 8014a66:	8183      	strh	r3, [r0, #12]
 8014a68:	460c      	mov	r4, r1
 8014a6a:	46a8      	mov	r8, r5
 8014a6c:	4621      	mov	r1, r4
 8014a6e:	4630      	mov	r0, r6
 8014a70:	3501      	adds	r5, #1
 8014a72:	f007 fb8d 	bl	801c190 <put_memory>
 8014a76:	42af      	cmp	r7, r5
 8014a78:	60a4      	str	r4, [r4, #8]
 8014a7a:	f884 800c 	strb.w	r8, [r4, #12]
 8014a7e:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 8014a82:	d1f3      	bne.n	8014a6c <rmw_uxrce_init_subscription_memory+0x20>
 8014a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a88:	4770      	bx	lr
 8014a8a:	bf00      	nop

08014a8c <rmw_uxrce_init_node_memory>:
 8014a8c:	b1e2      	cbz	r2, 8014ac8 <rmw_uxrce_init_node_memory+0x3c>
 8014a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a92:	7b05      	ldrb	r5, [r0, #12]
 8014a94:	4606      	mov	r6, r0
 8014a96:	b9ad      	cbnz	r5, 8014ac4 <rmw_uxrce_init_node_memory+0x38>
 8014a98:	23a4      	movs	r3, #164	@ 0xa4
 8014a9a:	e9c0 5500 	strd	r5, r5, [r0]
 8014a9e:	6083      	str	r3, [r0, #8]
 8014aa0:	f240 1301 	movw	r3, #257	@ 0x101
 8014aa4:	4617      	mov	r7, r2
 8014aa6:	8183      	strh	r3, [r0, #12]
 8014aa8:	460c      	mov	r4, r1
 8014aaa:	46a8      	mov	r8, r5
 8014aac:	4621      	mov	r1, r4
 8014aae:	4630      	mov	r0, r6
 8014ab0:	3501      	adds	r5, #1
 8014ab2:	f007 fb6d 	bl	801c190 <put_memory>
 8014ab6:	42af      	cmp	r7, r5
 8014ab8:	60a4      	str	r4, [r4, #8]
 8014aba:	f884 800c 	strb.w	r8, [r4, #12]
 8014abe:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 8014ac2:	d1f3      	bne.n	8014aac <rmw_uxrce_init_node_memory+0x20>
 8014ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ac8:	4770      	bx	lr
 8014aca:	bf00      	nop

08014acc <rmw_uxrce_init_session_memory>:
 8014acc:	b1ea      	cbz	r2, 8014b0a <rmw_uxrce_init_session_memory+0x3e>
 8014ace:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ad2:	7b05      	ldrb	r5, [r0, #12]
 8014ad4:	4606      	mov	r6, r0
 8014ad6:	b9b5      	cbnz	r5, 8014b06 <rmw_uxrce_init_session_memory+0x3a>
 8014ad8:	e9c0 5500 	strd	r5, r5, [r0]
 8014adc:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 8014ae0:	f240 1301 	movw	r3, #257	@ 0x101
 8014ae4:	4617      	mov	r7, r2
 8014ae6:	f8c0 8008 	str.w	r8, [r0, #8]
 8014aea:	460c      	mov	r4, r1
 8014aec:	8183      	strh	r3, [r0, #12]
 8014aee:	46a9      	mov	r9, r5
 8014af0:	4621      	mov	r1, r4
 8014af2:	4630      	mov	r0, r6
 8014af4:	3501      	adds	r5, #1
 8014af6:	f007 fb4b 	bl	801c190 <put_memory>
 8014afa:	42af      	cmp	r7, r5
 8014afc:	60a4      	str	r4, [r4, #8]
 8014afe:	f884 900c 	strb.w	r9, [r4, #12]
 8014b02:	4444      	add	r4, r8
 8014b04:	d1f4      	bne.n	8014af0 <rmw_uxrce_init_session_memory+0x24>
 8014b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b0a:	4770      	bx	lr

08014b0c <rmw_uxrce_init_topic_memory>:
 8014b0c:	b1e2      	cbz	r2, 8014b48 <rmw_uxrce_init_topic_memory+0x3c>
 8014b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b12:	7b05      	ldrb	r5, [r0, #12]
 8014b14:	4606      	mov	r6, r0
 8014b16:	b9ad      	cbnz	r5, 8014b44 <rmw_uxrce_init_topic_memory+0x38>
 8014b18:	231c      	movs	r3, #28
 8014b1a:	e9c0 5500 	strd	r5, r5, [r0]
 8014b1e:	6083      	str	r3, [r0, #8]
 8014b20:	f240 1301 	movw	r3, #257	@ 0x101
 8014b24:	4617      	mov	r7, r2
 8014b26:	8183      	strh	r3, [r0, #12]
 8014b28:	460c      	mov	r4, r1
 8014b2a:	46a8      	mov	r8, r5
 8014b2c:	4621      	mov	r1, r4
 8014b2e:	4630      	mov	r0, r6
 8014b30:	3501      	adds	r5, #1
 8014b32:	f007 fb2d 	bl	801c190 <put_memory>
 8014b36:	42af      	cmp	r7, r5
 8014b38:	60a4      	str	r4, [r4, #8]
 8014b3a:	f884 800c 	strb.w	r8, [r4, #12]
 8014b3e:	f104 041c 	add.w	r4, r4, #28
 8014b42:	d1f3      	bne.n	8014b2c <rmw_uxrce_init_topic_memory+0x20>
 8014b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b48:	4770      	bx	lr
 8014b4a:	bf00      	nop

08014b4c <rmw_uxrce_init_static_input_buffer_memory>:
 8014b4c:	b1ea      	cbz	r2, 8014b8a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8014b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b52:	7b05      	ldrb	r5, [r0, #12]
 8014b54:	4606      	mov	r6, r0
 8014b56:	b9b5      	cbnz	r5, 8014b86 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8014b58:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8014b5c:	e9c0 5500 	strd	r5, r5, [r0]
 8014b60:	6083      	str	r3, [r0, #8]
 8014b62:	f240 1301 	movw	r3, #257	@ 0x101
 8014b66:	4617      	mov	r7, r2
 8014b68:	8183      	strh	r3, [r0, #12]
 8014b6a:	460c      	mov	r4, r1
 8014b6c:	46a8      	mov	r8, r5
 8014b6e:	4621      	mov	r1, r4
 8014b70:	4630      	mov	r0, r6
 8014b72:	3501      	adds	r5, #1
 8014b74:	f007 fb0c 	bl	801c190 <put_memory>
 8014b78:	42af      	cmp	r7, r5
 8014b7a:	60a4      	str	r4, [r4, #8]
 8014b7c:	f884 800c 	strb.w	r8, [r4, #12]
 8014b80:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8014b84:	d1f3      	bne.n	8014b6e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8014b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b8a:	4770      	bx	lr

08014b8c <rmw_uxrce_init_init_options_impl_memory>:
 8014b8c:	b1e2      	cbz	r2, 8014bc8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8014b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b92:	7b05      	ldrb	r5, [r0, #12]
 8014b94:	4606      	mov	r6, r0
 8014b96:	b9ad      	cbnz	r5, 8014bc4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8014b98:	232c      	movs	r3, #44	@ 0x2c
 8014b9a:	e9c0 5500 	strd	r5, r5, [r0]
 8014b9e:	6083      	str	r3, [r0, #8]
 8014ba0:	f240 1301 	movw	r3, #257	@ 0x101
 8014ba4:	4617      	mov	r7, r2
 8014ba6:	8183      	strh	r3, [r0, #12]
 8014ba8:	460c      	mov	r4, r1
 8014baa:	46a8      	mov	r8, r5
 8014bac:	4621      	mov	r1, r4
 8014bae:	4630      	mov	r0, r6
 8014bb0:	3501      	adds	r5, #1
 8014bb2:	f007 faed 	bl	801c190 <put_memory>
 8014bb6:	42af      	cmp	r7, r5
 8014bb8:	60a4      	str	r4, [r4, #8]
 8014bba:	f884 800c 	strb.w	r8, [r4, #12]
 8014bbe:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 8014bc2:	d1f3      	bne.n	8014bac <rmw_uxrce_init_init_options_impl_memory+0x20>
 8014bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bc8:	4770      	bx	lr
 8014bca:	bf00      	nop

08014bcc <rmw_uxrce_init_wait_set_memory>:
 8014bcc:	b1e2      	cbz	r2, 8014c08 <rmw_uxrce_init_wait_set_memory+0x3c>
 8014bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bd2:	7b05      	ldrb	r5, [r0, #12]
 8014bd4:	4606      	mov	r6, r0
 8014bd6:	b9ad      	cbnz	r5, 8014c04 <rmw_uxrce_init_wait_set_memory+0x38>
 8014bd8:	231c      	movs	r3, #28
 8014bda:	e9c0 5500 	strd	r5, r5, [r0]
 8014bde:	6083      	str	r3, [r0, #8]
 8014be0:	f240 1301 	movw	r3, #257	@ 0x101
 8014be4:	4617      	mov	r7, r2
 8014be6:	8183      	strh	r3, [r0, #12]
 8014be8:	460c      	mov	r4, r1
 8014bea:	46a8      	mov	r8, r5
 8014bec:	4621      	mov	r1, r4
 8014bee:	4630      	mov	r0, r6
 8014bf0:	3501      	adds	r5, #1
 8014bf2:	f007 facd 	bl	801c190 <put_memory>
 8014bf6:	42af      	cmp	r7, r5
 8014bf8:	60a4      	str	r4, [r4, #8]
 8014bfa:	f884 800c 	strb.w	r8, [r4, #12]
 8014bfe:	f104 041c 	add.w	r4, r4, #28
 8014c02:	d1f3      	bne.n	8014bec <rmw_uxrce_init_wait_set_memory+0x20>
 8014c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c08:	4770      	bx	lr
 8014c0a:	bf00      	nop

08014c0c <rmw_uxrce_init_guard_condition_memory>:
 8014c0c:	b1e2      	cbz	r2, 8014c48 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8014c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c12:	7b05      	ldrb	r5, [r0, #12]
 8014c14:	4606      	mov	r6, r0
 8014c16:	b9ad      	cbnz	r5, 8014c44 <rmw_uxrce_init_guard_condition_memory+0x38>
 8014c18:	2320      	movs	r3, #32
 8014c1a:	e9c0 5500 	strd	r5, r5, [r0]
 8014c1e:	6083      	str	r3, [r0, #8]
 8014c20:	f240 1301 	movw	r3, #257	@ 0x101
 8014c24:	4617      	mov	r7, r2
 8014c26:	8183      	strh	r3, [r0, #12]
 8014c28:	460c      	mov	r4, r1
 8014c2a:	46a8      	mov	r8, r5
 8014c2c:	4621      	mov	r1, r4
 8014c2e:	4630      	mov	r0, r6
 8014c30:	3501      	adds	r5, #1
 8014c32:	f007 faad 	bl	801c190 <put_memory>
 8014c36:	42af      	cmp	r7, r5
 8014c38:	60a4      	str	r4, [r4, #8]
 8014c3a:	f884 800c 	strb.w	r8, [r4, #12]
 8014c3e:	f104 0420 	add.w	r4, r4, #32
 8014c42:	d1f3      	bne.n	8014c2c <rmw_uxrce_init_guard_condition_memory+0x20>
 8014c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c48:	4770      	bx	lr
 8014c4a:	bf00      	nop

08014c4c <rmw_uxrce_fini_session_memory>:
 8014c4c:	4601      	mov	r1, r0
 8014c4e:	4801      	ldr	r0, [pc, #4]	@ (8014c54 <rmw_uxrce_fini_session_memory+0x8>)
 8014c50:	f007 ba9e 	b.w	801c190 <put_memory>
 8014c54:	200163f4 	.word	0x200163f4

08014c58 <rmw_uxrce_fini_node_memory>:
 8014c58:	b538      	push	{r3, r4, r5, lr}
 8014c5a:	4604      	mov	r4, r0
 8014c5c:	6800      	ldr	r0, [r0, #0]
 8014c5e:	b128      	cbz	r0, 8014c6c <rmw_uxrce_fini_node_memory+0x14>
 8014c60:	4b07      	ldr	r3, [pc, #28]	@ (8014c80 <rmw_uxrce_fini_node_memory+0x28>)
 8014c62:	6819      	ldr	r1, [r3, #0]
 8014c64:	f7eb fab4 	bl	80001d0 <strcmp>
 8014c68:	b940      	cbnz	r0, 8014c7c <rmw_uxrce_fini_node_memory+0x24>
 8014c6a:	6020      	str	r0, [r4, #0]
 8014c6c:	6861      	ldr	r1, [r4, #4]
 8014c6e:	b129      	cbz	r1, 8014c7c <rmw_uxrce_fini_node_memory+0x24>
 8014c70:	2500      	movs	r5, #0
 8014c72:	4804      	ldr	r0, [pc, #16]	@ (8014c84 <rmw_uxrce_fini_node_memory+0x2c>)
 8014c74:	610d      	str	r5, [r1, #16]
 8014c76:	f007 fa8b 	bl	801c190 <put_memory>
 8014c7a:	6065      	str	r5, [r4, #4]
 8014c7c:	bd38      	pop	{r3, r4, r5, pc}
 8014c7e:	bf00      	nop
 8014c80:	08022734 	.word	0x08022734
 8014c84:	200163c4 	.word	0x200163c4

08014c88 <rmw_uxrce_fini_publisher_memory>:
 8014c88:	b510      	push	{r4, lr}
 8014c8a:	4604      	mov	r4, r0
 8014c8c:	6800      	ldr	r0, [r0, #0]
 8014c8e:	b128      	cbz	r0, 8014c9c <rmw_uxrce_fini_publisher_memory+0x14>
 8014c90:	4b06      	ldr	r3, [pc, #24]	@ (8014cac <rmw_uxrce_fini_publisher_memory+0x24>)
 8014c92:	6819      	ldr	r1, [r3, #0]
 8014c94:	f7eb fa9c 	bl	80001d0 <strcmp>
 8014c98:	b938      	cbnz	r0, 8014caa <rmw_uxrce_fini_publisher_memory+0x22>
 8014c9a:	6020      	str	r0, [r4, #0]
 8014c9c:	6861      	ldr	r1, [r4, #4]
 8014c9e:	b121      	cbz	r1, 8014caa <rmw_uxrce_fini_publisher_memory+0x22>
 8014ca0:	4803      	ldr	r0, [pc, #12]	@ (8014cb0 <rmw_uxrce_fini_publisher_memory+0x28>)
 8014ca2:	f007 fa75 	bl	801c190 <put_memory>
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	6063      	str	r3, [r4, #4]
 8014caa:	bd10      	pop	{r4, pc}
 8014cac:	08022734 	.word	0x08022734
 8014cb0:	200163d4 	.word	0x200163d4

08014cb4 <rmw_uxrce_fini_subscription_memory>:
 8014cb4:	b510      	push	{r4, lr}
 8014cb6:	4604      	mov	r4, r0
 8014cb8:	6800      	ldr	r0, [r0, #0]
 8014cba:	b128      	cbz	r0, 8014cc8 <rmw_uxrce_fini_subscription_memory+0x14>
 8014cbc:	4b06      	ldr	r3, [pc, #24]	@ (8014cd8 <rmw_uxrce_fini_subscription_memory+0x24>)
 8014cbe:	6819      	ldr	r1, [r3, #0]
 8014cc0:	f7eb fa86 	bl	80001d0 <strcmp>
 8014cc4:	b938      	cbnz	r0, 8014cd6 <rmw_uxrce_fini_subscription_memory+0x22>
 8014cc6:	6020      	str	r0, [r4, #0]
 8014cc8:	6861      	ldr	r1, [r4, #4]
 8014cca:	b121      	cbz	r1, 8014cd6 <rmw_uxrce_fini_subscription_memory+0x22>
 8014ccc:	4803      	ldr	r0, [pc, #12]	@ (8014cdc <rmw_uxrce_fini_subscription_memory+0x28>)
 8014cce:	f007 fa5f 	bl	801c190 <put_memory>
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	6063      	str	r3, [r4, #4]
 8014cd6:	bd10      	pop	{r4, pc}
 8014cd8:	08022734 	.word	0x08022734
 8014cdc:	20016414 	.word	0x20016414

08014ce0 <rmw_uxrce_fini_service_memory>:
 8014ce0:	b510      	push	{r4, lr}
 8014ce2:	4604      	mov	r4, r0
 8014ce4:	6800      	ldr	r0, [r0, #0]
 8014ce6:	b128      	cbz	r0, 8014cf4 <rmw_uxrce_fini_service_memory+0x14>
 8014ce8:	4b06      	ldr	r3, [pc, #24]	@ (8014d04 <rmw_uxrce_fini_service_memory+0x24>)
 8014cea:	6819      	ldr	r1, [r3, #0]
 8014cec:	f7eb fa70 	bl	80001d0 <strcmp>
 8014cf0:	b938      	cbnz	r0, 8014d02 <rmw_uxrce_fini_service_memory+0x22>
 8014cf2:	6020      	str	r0, [r4, #0]
 8014cf4:	6861      	ldr	r1, [r4, #4]
 8014cf6:	b121      	cbz	r1, 8014d02 <rmw_uxrce_fini_service_memory+0x22>
 8014cf8:	4803      	ldr	r0, [pc, #12]	@ (8014d08 <rmw_uxrce_fini_service_memory+0x28>)
 8014cfa:	f007 fa49 	bl	801c190 <put_memory>
 8014cfe:	2300      	movs	r3, #0
 8014d00:	6063      	str	r3, [r4, #4]
 8014d02:	bd10      	pop	{r4, pc}
 8014d04:	08022734 	.word	0x08022734
 8014d08:	200163e4 	.word	0x200163e4

08014d0c <rmw_uxrce_fini_client_memory>:
 8014d0c:	b510      	push	{r4, lr}
 8014d0e:	4604      	mov	r4, r0
 8014d10:	6800      	ldr	r0, [r0, #0]
 8014d12:	b128      	cbz	r0, 8014d20 <rmw_uxrce_fini_client_memory+0x14>
 8014d14:	4b06      	ldr	r3, [pc, #24]	@ (8014d30 <rmw_uxrce_fini_client_memory+0x24>)
 8014d16:	6819      	ldr	r1, [r3, #0]
 8014d18:	f7eb fa5a 	bl	80001d0 <strcmp>
 8014d1c:	b938      	cbnz	r0, 8014d2e <rmw_uxrce_fini_client_memory+0x22>
 8014d1e:	6020      	str	r0, [r4, #0]
 8014d20:	6861      	ldr	r1, [r4, #4]
 8014d22:	b121      	cbz	r1, 8014d2e <rmw_uxrce_fini_client_memory+0x22>
 8014d24:	4803      	ldr	r0, [pc, #12]	@ (8014d34 <rmw_uxrce_fini_client_memory+0x28>)
 8014d26:	f007 fa33 	bl	801c190 <put_memory>
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	6063      	str	r3, [r4, #4]
 8014d2e:	bd10      	pop	{r4, pc}
 8014d30:	08022734 	.word	0x08022734
 8014d34:	20011af8 	.word	0x20011af8

08014d38 <rmw_uxrce_fini_topic_memory>:
 8014d38:	b510      	push	{r4, lr}
 8014d3a:	4604      	mov	r4, r0
 8014d3c:	4621      	mov	r1, r4
 8014d3e:	4803      	ldr	r0, [pc, #12]	@ (8014d4c <rmw_uxrce_fini_topic_memory+0x14>)
 8014d40:	f007 fa26 	bl	801c190 <put_memory>
 8014d44:	2300      	movs	r3, #0
 8014d46:	61a3      	str	r3, [r4, #24]
 8014d48:	bd10      	pop	{r4, pc}
 8014d4a:	bf00      	nop
 8014d4c:	20016424 	.word	0x20016424

08014d50 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8014d50:	b082      	sub	sp, #8
 8014d52:	b530      	push	{r4, r5, lr}
 8014d54:	4925      	ldr	r1, [pc, #148]	@ (8014dec <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8014d56:	680d      	ldr	r5, [r1, #0]
 8014d58:	ac03      	add	r4, sp, #12
 8014d5a:	e884 000c 	stmia.w	r4, {r2, r3}
 8014d5e:	461c      	mov	r4, r3
 8014d60:	2d00      	cmp	r5, #0
 8014d62:	d041      	beq.n	8014de8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8014d64:	462b      	mov	r3, r5
 8014d66:	2100      	movs	r1, #0
 8014d68:	689a      	ldr	r2, [r3, #8]
 8014d6a:	685b      	ldr	r3, [r3, #4]
 8014d6c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 8014d70:	4290      	cmp	r0, r2
 8014d72:	bf08      	it	eq
 8014d74:	3101      	addeq	r1, #1
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d1f6      	bne.n	8014d68 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8014d7a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8014d7e:	2b02      	cmp	r3, #2
 8014d80:	d029      	beq.n	8014dd6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8014d82:	d907      	bls.n	8014d94 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8014d84:	2b03      	cmp	r3, #3
 8014d86:	d005      	beq.n	8014d94 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8014d88:	2100      	movs	r1, #0
 8014d8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d8e:	4608      	mov	r0, r1
 8014d90:	b002      	add	sp, #8
 8014d92:	4770      	bx	lr
 8014d94:	b314      	cbz	r4, 8014ddc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8014d96:	428c      	cmp	r4, r1
 8014d98:	d820      	bhi.n	8014ddc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8014d9a:	2d00      	cmp	r5, #0
 8014d9c:	d0f4      	beq.n	8014d88 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8014d9e:	2100      	movs	r1, #0
 8014da0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8014da4:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8014da8:	e002      	b.n	8014db0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 8014daa:	686d      	ldr	r5, [r5, #4]
 8014dac:	2d00      	cmp	r5, #0
 8014dae:	d0ec      	beq.n	8014d8a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8014db0:	68ab      	ldr	r3, [r5, #8]
 8014db2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 8014db6:	4290      	cmp	r0, r2
 8014db8:	d1f7      	bne.n	8014daa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8014dba:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8014dbe:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 8014dc2:	4562      	cmp	r2, ip
 8014dc4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014dc8:	eb73 0e04 	sbcs.w	lr, r3, r4
 8014dcc:	daed      	bge.n	8014daa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8014dce:	4694      	mov	ip, r2
 8014dd0:	461c      	mov	r4, r3
 8014dd2:	4629      	mov	r1, r5
 8014dd4:	e7e9      	b.n	8014daa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8014dd6:	b10c      	cbz	r4, 8014ddc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8014dd8:	428c      	cmp	r4, r1
 8014dda:	d9d5      	bls.n	8014d88 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 8014ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014de0:	4802      	ldr	r0, [pc, #8]	@ (8014dec <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8014de2:	b002      	add	sp, #8
 8014de4:	f007 b9c4 	b.w	801c170 <get_memory>
 8014de8:	4629      	mov	r1, r5
 8014dea:	e7c6      	b.n	8014d7a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8014dec:	20016404 	.word	0x20016404

08014df0 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8014df0:	4b11      	ldr	r3, [pc, #68]	@ (8014e38 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	b530      	push	{r4, r5, lr}
 8014df6:	b1e3      	cbz	r3, 8014e32 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8014df8:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8014dfc:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8014e00:	2400      	movs	r4, #0
 8014e02:	e001      	b.n	8014e08 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8014e04:	685b      	ldr	r3, [r3, #4]
 8014e06:	b193      	cbz	r3, 8014e2e <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 8014e08:	689a      	ldr	r2, [r3, #8]
 8014e0a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 8014e0e:	4288      	cmp	r0, r1
 8014e10:	d1f8      	bne.n	8014e04 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8014e12:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8014e16:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 8014e1a:	4571      	cmp	r1, lr
 8014e1c:	eb72 050c 	sbcs.w	r5, r2, ip
 8014e20:	daf0      	bge.n	8014e04 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8014e22:	461c      	mov	r4, r3
 8014e24:	685b      	ldr	r3, [r3, #4]
 8014e26:	468e      	mov	lr, r1
 8014e28:	4694      	mov	ip, r2
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d1ec      	bne.n	8014e08 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8014e2e:	4620      	mov	r0, r4
 8014e30:	bd30      	pop	{r4, r5, pc}
 8014e32:	461c      	mov	r4, r3
 8014e34:	4620      	mov	r0, r4
 8014e36:	bd30      	pop	{r4, r5, pc}
 8014e38:	20016404 	.word	0x20016404
 8014e3c:	00000000 	.word	0x00000000

08014e40 <rmw_uxrce_clean_expired_static_input_buffer>:
 8014e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e44:	4b3c      	ldr	r3, [pc, #240]	@ (8014f38 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8014e46:	ed2d 8b06 	vpush	{d8-d10}
 8014e4a:	681f      	ldr	r7, [r3, #0]
 8014e4c:	b08d      	sub	sp, #52	@ 0x34
 8014e4e:	f008 fad5 	bl	801d3fc <rmw_uros_epoch_nanos>
 8014e52:	2f00      	cmp	r7, #0
 8014e54:	d05d      	beq.n	8014f12 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8014e56:	46b8      	mov	r8, r7
 8014e58:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 8014f20 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8014e5c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014e60:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8014e64:	2b04      	cmp	r3, #4
 8014e66:	ed9f ab30 	vldr	d10, [pc, #192]	@ 8014f28 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8014e6a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 8014f30 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8014e6e:	4681      	mov	r9, r0
 8014e70:	468a      	mov	sl, r1
 8014e72:	ac04      	add	r4, sp, #16
 8014e74:	d03f      	beq.n	8014ef6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8014e76:	2b05      	cmp	r3, #5
 8014e78:	d044      	beq.n	8014f04 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8014e7a:	2b03      	cmp	r3, #3
 8014e7c:	d03b      	beq.n	8014ef6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8014e7e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8014e82:	ed8d ab06 	vstr	d10, [sp, #24]
 8014e86:	ed8d 8b08 	vstr	d8, [sp, #32]
 8014e8a:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 8014e8e:	ab08      	add	r3, sp, #32
 8014e90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014e92:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014e96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014e9a:	f006 ff9d 	bl	801bdd8 <rmw_time_equal>
 8014e9e:	b118      	cbz	r0, 8014ea8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8014ea0:	ed8d 9b04 	vstr	d9, [sp, #16]
 8014ea4:	ed8d 8b06 	vstr	d8, [sp, #24]
 8014ea8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014eac:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 8014eb0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 8014eb4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8014eb8:	f006 ffe2 	bl	801be80 <rmw_time_total_nsec>
 8014ebc:	1830      	adds	r0, r6, r0
 8014ebe:	eb47 0101 	adc.w	r1, r7, r1
 8014ec2:	4548      	cmp	r0, r9
 8014ec4:	eb71 030a 	sbcs.w	r3, r1, sl
 8014ec8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 8014ecc:	db05      	blt.n	8014eda <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8014ece:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8014ed2:	4591      	cmp	r9, r2
 8014ed4:	eb7a 0303 	sbcs.w	r3, sl, r3
 8014ed8:	da03      	bge.n	8014ee2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8014eda:	4817      	ldr	r0, [pc, #92]	@ (8014f38 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8014edc:	4641      	mov	r1, r8
 8014ede:	f007 f957 	bl	801c190 <put_memory>
 8014ee2:	f1bb 0f00 	cmp.w	fp, #0
 8014ee6:	d014      	beq.n	8014f12 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8014ee8:	46d8      	mov	r8, fp
 8014eea:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014eee:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8014ef2:	2b04      	cmp	r3, #4
 8014ef4:	d1bf      	bne.n	8014e76 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8014ef6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8014efa:	3340      	adds	r3, #64	@ 0x40
 8014efc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014efe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014f02:	e7c0      	b.n	8014e86 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8014f04:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8014f08:	3348      	adds	r3, #72	@ 0x48
 8014f0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014f0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014f10:	e7b9      	b.n	8014e86 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8014f12:	b00d      	add	sp, #52	@ 0x34
 8014f14:	ecbd 8b06 	vpop	{d8-d10}
 8014f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f1c:	f3af 8000 	nop.w
	...
 8014f28:	00000001 	.word	0x00000001
 8014f2c:	00000000 	.word	0x00000000
 8014f30:	0000001e 	.word	0x0000001e
 8014f34:	00000000 	.word	0x00000000
 8014f38:	20016404 	.word	0x20016404

08014f3c <run_xrce_session>:
 8014f3c:	b510      	push	{r4, lr}
 8014f3e:	788c      	ldrb	r4, [r1, #2]
 8014f40:	b086      	sub	sp, #24
 8014f42:	2c01      	cmp	r4, #1
 8014f44:	f8ad 200e 	strh.w	r2, [sp, #14]
 8014f48:	d00c      	beq.n	8014f64 <run_xrce_session+0x28>
 8014f4a:	4619      	mov	r1, r3
 8014f4c:	2301      	movs	r3, #1
 8014f4e:	9300      	str	r3, [sp, #0]
 8014f50:	f10d 020e 	add.w	r2, sp, #14
 8014f54:	f10d 0317 	add.w	r3, sp, #23
 8014f58:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014f5c:	f001 fed6 	bl	8016d0c <uxr_run_session_until_all_status>
 8014f60:	b006      	add	sp, #24
 8014f62:	bd10      	pop	{r4, pc}
 8014f64:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8014f68:	f001 faea 	bl	8016540 <uxr_flash_output_streams>
 8014f6c:	4620      	mov	r0, r4
 8014f6e:	b006      	add	sp, #24
 8014f70:	bd10      	pop	{r4, pc}
 8014f72:	bf00      	nop

08014f74 <convert_qos_profile>:
 8014f74:	7a4a      	ldrb	r2, [r1, #9]
 8014f76:	f891 c008 	ldrb.w	ip, [r1, #8]
 8014f7a:	2a02      	cmp	r2, #2
 8014f7c:	bf18      	it	ne
 8014f7e:	2200      	movne	r2, #0
 8014f80:	7002      	strb	r2, [r0, #0]
 8014f82:	780a      	ldrb	r2, [r1, #0]
 8014f84:	8889      	ldrh	r1, [r1, #4]
 8014f86:	8081      	strh	r1, [r0, #4]
 8014f88:	f1ac 0c02 	sub.w	ip, ip, #2
 8014f8c:	f1a2 0202 	sub.w	r2, r2, #2
 8014f90:	fabc fc8c 	clz	ip, ip
 8014f94:	fab2 f282 	clz	r2, r2
 8014f98:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8014f9c:	0952      	lsrs	r2, r2, #5
 8014f9e:	f880 c001 	strb.w	ip, [r0, #1]
 8014fa2:	7082      	strb	r2, [r0, #2]
 8014fa4:	4770      	bx	lr
 8014fa6:	bf00      	nop

08014fa8 <generate_type_name>:
 8014fa8:	b530      	push	{r4, r5, lr}
 8014faa:	2300      	movs	r3, #0
 8014fac:	700b      	strb	r3, [r1, #0]
 8014fae:	6803      	ldr	r3, [r0, #0]
 8014fb0:	b087      	sub	sp, #28
 8014fb2:	4614      	mov	r4, r2
 8014fb4:	b1d3      	cbz	r3, 8014fec <generate_type_name+0x44>
 8014fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8014ff4 <generate_type_name+0x4c>)
 8014fb8:	4615      	mov	r5, r2
 8014fba:	9203      	str	r2, [sp, #12]
 8014fbc:	9500      	str	r5, [sp, #0]
 8014fbe:	6842      	ldr	r2, [r0, #4]
 8014fc0:	480d      	ldr	r0, [pc, #52]	@ (8014ff8 <generate_type_name+0x50>)
 8014fc2:	9001      	str	r0, [sp, #4]
 8014fc4:	4608      	mov	r0, r1
 8014fc6:	490d      	ldr	r1, [pc, #52]	@ (8014ffc <generate_type_name+0x54>)
 8014fc8:	9204      	str	r2, [sp, #16]
 8014fca:	9105      	str	r1, [sp, #20]
 8014fcc:	9102      	str	r1, [sp, #8]
 8014fce:	4a0c      	ldr	r2, [pc, #48]	@ (8015000 <generate_type_name+0x58>)
 8014fd0:	4621      	mov	r1, r4
 8014fd2:	f00b f92f 	bl	8020234 <sniprintf>
 8014fd6:	2800      	cmp	r0, #0
 8014fd8:	db05      	blt.n	8014fe6 <generate_type_name+0x3e>
 8014fda:	4284      	cmp	r4, r0
 8014fdc:	bfd4      	ite	le
 8014fde:	2000      	movle	r0, #0
 8014fe0:	2001      	movgt	r0, #1
 8014fe2:	b007      	add	sp, #28
 8014fe4:	bd30      	pop	{r4, r5, pc}
 8014fe6:	2000      	movs	r0, #0
 8014fe8:	b007      	add	sp, #28
 8014fea:	bd30      	pop	{r4, r5, pc}
 8014fec:	4b05      	ldr	r3, [pc, #20]	@ (8015004 <generate_type_name+0x5c>)
 8014fee:	4a01      	ldr	r2, [pc, #4]	@ (8014ff4 <generate_type_name+0x4c>)
 8014ff0:	461d      	mov	r5, r3
 8014ff2:	e7e2      	b.n	8014fba <generate_type_name+0x12>
 8014ff4:	0802193c 	.word	0x0802193c
 8014ff8:	08021954 	.word	0x08021954
 8014ffc:	08021950 	.word	0x08021950
 8015000:	08021940 	.word	0x08021940
 8015004:	080229c0 	.word	0x080229c0

08015008 <generate_topic_name>:
 8015008:	b510      	push	{r4, lr}
 801500a:	b082      	sub	sp, #8
 801500c:	4614      	mov	r4, r2
 801500e:	9000      	str	r0, [sp, #0]
 8015010:	4b08      	ldr	r3, [pc, #32]	@ (8015034 <generate_topic_name+0x2c>)
 8015012:	4a09      	ldr	r2, [pc, #36]	@ (8015038 <generate_topic_name+0x30>)
 8015014:	4608      	mov	r0, r1
 8015016:	4621      	mov	r1, r4
 8015018:	f00b f90c 	bl	8020234 <sniprintf>
 801501c:	2800      	cmp	r0, #0
 801501e:	db05      	blt.n	801502c <generate_topic_name+0x24>
 8015020:	4284      	cmp	r4, r0
 8015022:	bfd4      	ite	le
 8015024:	2000      	movle	r0, #0
 8015026:	2001      	movgt	r0, #1
 8015028:	b002      	add	sp, #8
 801502a:	bd10      	pop	{r4, pc}
 801502c:	2000      	movs	r0, #0
 801502e:	b002      	add	sp, #8
 8015030:	bd10      	pop	{r4, pc}
 8015032:	bf00      	nop
 8015034:	08021960 	.word	0x08021960
 8015038:	08021958 	.word	0x08021958

0801503c <is_uxrce_rmw_identifier_valid>:
 801503c:	b510      	push	{r4, lr}
 801503e:	4604      	mov	r4, r0
 8015040:	b140      	cbz	r0, 8015054 <is_uxrce_rmw_identifier_valid+0x18>
 8015042:	f007 f8fd 	bl	801c240 <rmw_get_implementation_identifier>
 8015046:	4601      	mov	r1, r0
 8015048:	4620      	mov	r0, r4
 801504a:	f7eb f8c1 	bl	80001d0 <strcmp>
 801504e:	fab0 f080 	clz	r0, r0
 8015052:	0940      	lsrs	r0, r0, #5
 8015054:	bd10      	pop	{r4, pc}
 8015056:	bf00      	nop

08015058 <get_message_typesupport_handle>:
 8015058:	6883      	ldr	r3, [r0, #8]
 801505a:	4718      	bx	r3

0801505c <get_message_typesupport_handle_function>:
 801505c:	b510      	push	{r4, lr}
 801505e:	4604      	mov	r4, r0
 8015060:	6800      	ldr	r0, [r0, #0]
 8015062:	f7eb f8b5 	bl	80001d0 <strcmp>
 8015066:	2800      	cmp	r0, #0
 8015068:	bf0c      	ite	eq
 801506a:	4620      	moveq	r0, r4
 801506c:	2000      	movne	r0, #0
 801506e:	bd10      	pop	{r4, pc}

08015070 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8015070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015074:	6805      	ldr	r5, [r0, #0]
 8015076:	4604      	mov	r4, r0
 8015078:	4628      	mov	r0, r5
 801507a:	460e      	mov	r6, r1
 801507c:	f7eb f8a8 	bl	80001d0 <strcmp>
 8015080:	b1c8      	cbz	r0, 80150b6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8015082:	4b11      	ldr	r3, [pc, #68]	@ (80150c8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	429d      	cmp	r5, r3
 8015088:	d112      	bne.n	80150b0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 801508a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801508e:	f8d8 4000 	ldr.w	r4, [r8]
 8015092:	b16c      	cbz	r4, 80150b0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8015094:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8015098:	2700      	movs	r7, #0
 801509a:	3d04      	subs	r5, #4
 801509c:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80150a0:	4631      	mov	r1, r6
 80150a2:	f7eb f895 	bl	80001d0 <strcmp>
 80150a6:	00bb      	lsls	r3, r7, #2
 80150a8:	b140      	cbz	r0, 80150bc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80150aa:	3701      	adds	r7, #1
 80150ac:	42bc      	cmp	r4, r7
 80150ae:	d1f5      	bne.n	801509c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80150b0:	2000      	movs	r0, #0
 80150b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150b6:	4620      	mov	r0, r4
 80150b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80150c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150c4:	58d3      	ldr	r3, [r2, r3]
 80150c6:	4718      	bx	r3
 80150c8:	200002c8 	.word	0x200002c8

080150cc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 80150cc:	4b04      	ldr	r3, [pc, #16]	@ (80150e0 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>)
 80150ce:	681a      	ldr	r2, [r3, #0]
 80150d0:	b10a      	cbz	r2, 80150d6 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0xa>
 80150d2:	4803      	ldr	r0, [pc, #12]	@ (80150e0 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>)
 80150d4:	4770      	bx	lr
 80150d6:	4a03      	ldr	r2, [pc, #12]	@ (80150e4 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x18>)
 80150d8:	4801      	ldr	r0, [pc, #4]	@ (80150e0 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>)
 80150da:	6812      	ldr	r2, [r2, #0]
 80150dc:	601a      	str	r2, [r3, #0]
 80150de:	4770      	bx	lr
 80150e0:	200002d8 	.word	0x200002d8
 80150e4:	200002c8 	.word	0x200002c8

080150e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 80150e8:	4a02      	ldr	r2, [pc, #8]	@ (80150f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0xc>)
 80150ea:	4b03      	ldr	r3, [pc, #12]	@ (80150f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x10>)
 80150ec:	6812      	ldr	r2, [r2, #0]
 80150ee:	601a      	str	r2, [r3, #0]
 80150f0:	4770      	bx	lr
 80150f2:	bf00      	nop
 80150f4:	200002c8 	.word	0x200002c8
 80150f8:	200002d8 	.word	0x200002d8

080150fc <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 80150fc:	4b04      	ldr	r3, [pc, #16]	@ (8015110 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 80150fe:	681a      	ldr	r2, [r3, #0]
 8015100:	b10a      	cbz	r2, 8015106 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0xa>
 8015102:	4803      	ldr	r0, [pc, #12]	@ (8015110 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 8015104:	4770      	bx	lr
 8015106:	4a03      	ldr	r2, [pc, #12]	@ (8015114 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x18>)
 8015108:	4801      	ldr	r0, [pc, #4]	@ (8015110 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 801510a:	6812      	ldr	r2, [r2, #0]
 801510c:	601a      	str	r2, [r3, #0]
 801510e:	4770      	bx	lr
 8015110:	200002ec 	.word	0x200002ec
 8015114:	200002c8 	.word	0x200002c8

08015118 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 8015118:	4a02      	ldr	r2, [pc, #8]	@ (8015124 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0xc>)
 801511a:	4b03      	ldr	r3, [pc, #12]	@ (8015128 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x10>)
 801511c:	6812      	ldr	r2, [r2, #0]
 801511e:	601a      	str	r2, [r3, #0]
 8015120:	4770      	bx	lr
 8015122:	bf00      	nop
 8015124:	200002c8 	.word	0x200002c8
 8015128:	200002ec 	.word	0x200002ec

0801512c <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__size_function__BatteryState__cell_voltage>:
 801512c:	6840      	ldr	r0, [r0, #4]
 801512e:	4770      	bx	lr

08015130 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_const_function__BatteryState__cell_voltage>:
 8015130:	6800      	ldr	r0, [r0, #0]
 8015132:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8015136:	4770      	bx	lr

08015138 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__fetch_function__BatteryState__cell_voltage>:
 8015138:	6803      	ldr	r3, [r0, #0]
 801513a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801513e:	680b      	ldr	r3, [r1, #0]
 8015140:	6013      	str	r3, [r2, #0]
 8015142:	4770      	bx	lr

08015144 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__assign_function__BatteryState__cell_voltage>:
 8015144:	6803      	ldr	r3, [r0, #0]
 8015146:	6812      	ldr	r2, [r2, #0]
 8015148:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801514c:	600a      	str	r2, [r1, #0]
 801514e:	4770      	bx	lr

08015150 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__BatteryState_init_function>:
 8015150:	f008 b98e 	b.w	801d470 <sensor_msgs__msg__BatteryState__init>

08015154 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__BatteryState_fini_function>:
 8015154:	f008 b9fc 	b.w	801d550 <sensor_msgs__msg__BatteryState__fini>

08015158 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__resize_function__BatteryState__cell_voltage>:
 8015158:	b510      	push	{r4, lr}
 801515a:	b082      	sub	sp, #8
 801515c:	4604      	mov	r4, r0
 801515e:	9101      	str	r1, [sp, #4]
 8015160:	f008 f972 	bl	801d448 <rosidl_runtime_c__float__Sequence__fini>
 8015164:	9901      	ldr	r1, [sp, #4]
 8015166:	4620      	mov	r0, r4
 8015168:	b002      	add	sp, #8
 801516a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801516e:	f008 b953 	b.w	801d418 <rosidl_runtime_c__float__Sequence__init>
 8015172:	bf00      	nop

08015174 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__size_function__BatteryState__cell_temperature>:
 8015174:	6840      	ldr	r0, [r0, #4]
 8015176:	4770      	bx	lr

08015178 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_const_function__BatteryState__cell_temperature>:
 8015178:	6800      	ldr	r0, [r0, #0]
 801517a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801517e:	4770      	bx	lr

08015180 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_function__BatteryState__cell_temperature>:
 8015180:	6800      	ldr	r0, [r0, #0]
 8015182:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8015186:	4770      	bx	lr

08015188 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_function__BatteryState__cell_voltage>:
 8015188:	6800      	ldr	r0, [r0, #0]
 801518a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 801518e:	4770      	bx	lr

08015190 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__fetch_function__BatteryState__cell_temperature>:
 8015190:	6803      	ldr	r3, [r0, #0]
 8015192:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8015196:	680b      	ldr	r3, [r1, #0]
 8015198:	6013      	str	r3, [r2, #0]
 801519a:	4770      	bx	lr

0801519c <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__assign_function__BatteryState__cell_temperature>:
 801519c:	6803      	ldr	r3, [r0, #0]
 801519e:	6812      	ldr	r2, [r2, #0]
 80151a0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80151a4:	600a      	str	r2, [r1, #0]
 80151a6:	4770      	bx	lr

080151a8 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__resize_function__BatteryState__cell_temperature>:
 80151a8:	b510      	push	{r4, lr}
 80151aa:	b082      	sub	sp, #8
 80151ac:	4604      	mov	r4, r0
 80151ae:	9101      	str	r1, [sp, #4]
 80151b0:	f008 f94a 	bl	801d448 <rosidl_runtime_c__float__Sequence__fini>
 80151b4:	9901      	ldr	r1, [sp, #4]
 80151b6:	4620      	mov	r0, r4
 80151b8:	b002      	add	sp, #8
 80151ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80151be:	f008 b92b 	b.w	801d418 <rosidl_runtime_c__float__Sequence__init>
 80151c2:	bf00      	nop

080151c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 80151c4:	b508      	push	{r3, lr}
 80151c6:	f000 fb51 	bl	801586c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80151ca:	4b06      	ldr	r3, [pc, #24]	@ (80151e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x20>)
 80151cc:	4906      	ldr	r1, [pc, #24]	@ (80151e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x24>)
 80151ce:	681a      	ldr	r2, [r3, #0]
 80151d0:	60c8      	str	r0, [r1, #12]
 80151d2:	b10a      	cbz	r2, 80151d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>
 80151d4:	4803      	ldr	r0, [pc, #12]	@ (80151e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x20>)
 80151d6:	bd08      	pop	{r3, pc}
 80151d8:	4a04      	ldr	r2, [pc, #16]	@ (80151ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x28>)
 80151da:	4802      	ldr	r0, [pc, #8]	@ (80151e4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x20>)
 80151dc:	6812      	ldr	r2, [r2, #0]
 80151de:	601a      	str	r2, [r3, #0]
 80151e0:	bd08      	pop	{r3, pc}
 80151e2:	bf00      	nop
 80151e4:	200006b8 	.word	0x200006b8
 80151e8:	200002f8 	.word	0x200002f8
 80151ec:	200002cc 	.word	0x200002cc

080151f0 <sensor_msgs__msg__Temperature__rosidl_typesupport_introspection_c__Temperature_init_function>:
 80151f0:	f008 b9c6 	b.w	801d580 <sensor_msgs__msg__Temperature__init>

080151f4 <sensor_msgs__msg__Temperature__rosidl_typesupport_introspection_c__Temperature_fini_function>:
 80151f4:	f008 b9d6 	b.w	801d5a4 <sensor_msgs__msg__Temperature__fini>

080151f8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 80151f8:	b508      	push	{r3, lr}
 80151fa:	f000 fb37 	bl	801586c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80151fe:	4b06      	ldr	r3, [pc, #24]	@ (8015218 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 8015200:	4906      	ldr	r1, [pc, #24]	@ (801521c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x24>)
 8015202:	681a      	ldr	r2, [r3, #0]
 8015204:	60c8      	str	r0, [r1, #12]
 8015206:	b10a      	cbz	r2, 801520c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>
 8015208:	4803      	ldr	r0, [pc, #12]	@ (8015218 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 801520a:	bd08      	pop	{r3, pc}
 801520c:	4a04      	ldr	r2, [pc, #16]	@ (8015220 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x28>)
 801520e:	4802      	ldr	r0, [pc, #8]	@ (8015218 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 8015210:	6812      	ldr	r2, [r2, #0]
 8015212:	601a      	str	r2, [r3, #0]
 8015214:	bd08      	pop	{r3, pc}
 8015216:	bf00      	nop
 8015218:	20000778 	.word	0x20000778
 801521c:	200006c4 	.word	0x200006c4
 8015220:	200002cc 	.word	0x200002cc

08015224 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0>:
 8015224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015228:	460e      	mov	r6, r1
 801522a:	4607      	mov	r7, r0
 801522c:	f000 fc22 	bl	8015a74 <get_serialized_size_std_msgs__msg__Header>
 8015230:	1835      	adds	r5, r6, r0
 8015232:	2104      	movs	r1, #4
 8015234:	4628      	mov	r0, r5
 8015236:	f7fe f8a9 	bl	801338c <ucdr_alignment>
 801523a:	1d04      	adds	r4, r0, #4
 801523c:	442c      	add	r4, r5
 801523e:	2104      	movs	r1, #4
 8015240:	4620      	mov	r0, r4
 8015242:	f7fe f8a3 	bl	801338c <ucdr_alignment>
 8015246:	1d05      	adds	r5, r0, #4
 8015248:	442c      	add	r4, r5
 801524a:	2104      	movs	r1, #4
 801524c:	4620      	mov	r0, r4
 801524e:	f7fe f89d 	bl	801338c <ucdr_alignment>
 8015252:	1d05      	adds	r5, r0, #4
 8015254:	4425      	add	r5, r4
 8015256:	2104      	movs	r1, #4
 8015258:	4628      	mov	r0, r5
 801525a:	f7fe f897 	bl	801338c <ucdr_alignment>
 801525e:	3004      	adds	r0, #4
 8015260:	4405      	add	r5, r0
 8015262:	2104      	movs	r1, #4
 8015264:	4628      	mov	r0, r5
 8015266:	f7fe f891 	bl	801338c <ucdr_alignment>
 801526a:	3004      	adds	r0, #4
 801526c:	1944      	adds	r4, r0, r5
 801526e:	2104      	movs	r1, #4
 8015270:	4620      	mov	r0, r4
 8015272:	f7fe f88b 	bl	801338c <ucdr_alignment>
 8015276:	1d05      	adds	r5, r0, #4
 8015278:	4425      	add	r5, r4
 801527a:	2104      	movs	r1, #4
 801527c:	4628      	mov	r0, r5
 801527e:	f7fe f885 	bl	801338c <ucdr_alignment>
 8015282:	3004      	adds	r0, #4
 8015284:	4405      	add	r5, r0
 8015286:	2101      	movs	r1, #1
 8015288:	4628      	mov	r0, r5
 801528a:	f7fe f87f 	bl	801338c <ucdr_alignment>
 801528e:	3001      	adds	r0, #1
 8015290:	1944      	adds	r4, r0, r5
 8015292:	2101      	movs	r1, #1
 8015294:	4620      	mov	r0, r4
 8015296:	f7fe f879 	bl	801338c <ucdr_alignment>
 801529a:	1c45      	adds	r5, r0, #1
 801529c:	4425      	add	r5, r4
 801529e:	2101      	movs	r1, #1
 80152a0:	4628      	mov	r0, r5
 80152a2:	f7fe f873 	bl	801338c <ucdr_alignment>
 80152a6:	3001      	adds	r0, #1
 80152a8:	4405      	add	r5, r0
 80152aa:	2101      	movs	r1, #1
 80152ac:	4628      	mov	r0, r5
 80152ae:	f7fe f86d 	bl	801338c <ucdr_alignment>
 80152b2:	3001      	adds	r0, #1
 80152b4:	1944      	adds	r4, r0, r5
 80152b6:	4620      	mov	r0, r4
 80152b8:	2104      	movs	r1, #4
 80152ba:	f8d7 8038 	ldr.w	r8, [r7, #56]	@ 0x38
 80152be:	f7fe f865 	bl	801338c <ucdr_alignment>
 80152c2:	1d05      	adds	r5, r0, #4
 80152c4:	442c      	add	r4, r5
 80152c6:	f1b8 0f00 	cmp.w	r8, #0
 80152ca:	d11e      	bne.n	801530a <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xe6>
 80152cc:	4620      	mov	r0, r4
 80152ce:	2104      	movs	r1, #4
 80152d0:	f8d7 8044 	ldr.w	r8, [r7, #68]	@ 0x44
 80152d4:	f7fe f85a 	bl	801338c <ucdr_alignment>
 80152d8:	4404      	add	r4, r0
 80152da:	3404      	adds	r4, #4
 80152dc:	f1b8 0f00 	cmp.w	r8, #0
 80152e0:	d11b      	bne.n	801531a <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xf6>
 80152e2:	2104      	movs	r1, #4
 80152e4:	4620      	mov	r0, r4
 80152e6:	f7fe f851 	bl	801338c <ucdr_alignment>
 80152ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80152ec:	3305      	adds	r3, #5
 80152ee:	441c      	add	r4, r3
 80152f0:	4404      	add	r4, r0
 80152f2:	2104      	movs	r1, #4
 80152f4:	4620      	mov	r0, r4
 80152f6:	f7fe f849 	bl	801338c <ucdr_alignment>
 80152fa:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80152fc:	f1c6 0605 	rsb	r6, r6, #5
 8015300:	440e      	add	r6, r1
 8015302:	4430      	add	r0, r6
 8015304:	4420      	add	r0, r4
 8015306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801530a:	4620      	mov	r0, r4
 801530c:	2104      	movs	r1, #4
 801530e:	f7fe f83d 	bl	801338c <ucdr_alignment>
 8015312:	eb04 0588 	add.w	r5, r4, r8, lsl #2
 8015316:	1944      	adds	r4, r0, r5
 8015318:	e7d8      	b.n	80152cc <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xa8>
 801531a:	4620      	mov	r0, r4
 801531c:	2104      	movs	r1, #4
 801531e:	f7fe f835 	bl	801338c <ucdr_alignment>
 8015322:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8015326:	4404      	add	r4, r0
 8015328:	e7db      	b.n	80152e2 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xbe>
 801532a:	bf00      	nop

0801532c <get_serialized_size_sensor_msgs__msg__BatteryState>:
 801532c:	b108      	cbz	r0, 8015332 <get_serialized_size_sensor_msgs__msg__BatteryState+0x6>
 801532e:	f7ff bf79 	b.w	8015224 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0>
 8015332:	4770      	bx	lr

08015334 <_BatteryState__get_serialized_size>:
 8015334:	b110      	cbz	r0, 801533c <_BatteryState__get_serialized_size+0x8>
 8015336:	2100      	movs	r1, #0
 8015338:	f7ff bf74 	b.w	8015224 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0>
 801533c:	4770      	bx	lr
 801533e:	bf00      	nop

08015340 <_BatteryState__cdr_deserialize>:
 8015340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015342:	460c      	mov	r4, r1
 8015344:	b083      	sub	sp, #12
 8015346:	2900      	cmp	r1, #0
 8015348:	f000 80a1 	beq.w	801548e <_BatteryState__cdr_deserialize+0x14e>
 801534c:	4605      	mov	r5, r0
 801534e:	f000 fc13 	bl	8015b78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8015352:	6843      	ldr	r3, [r0, #4]
 8015354:	4621      	mov	r1, r4
 8015356:	68db      	ldr	r3, [r3, #12]
 8015358:	4628      	mov	r0, r5
 801535a:	4798      	blx	r3
 801535c:	f104 0114 	add.w	r1, r4, #20
 8015360:	4628      	mov	r0, r5
 8015362:	f7fd fcff 	bl	8012d64 <ucdr_deserialize_float>
 8015366:	f104 0118 	add.w	r1, r4, #24
 801536a:	4628      	mov	r0, r5
 801536c:	f7fd fcfa 	bl	8012d64 <ucdr_deserialize_float>
 8015370:	f104 011c 	add.w	r1, r4, #28
 8015374:	4628      	mov	r0, r5
 8015376:	f7fd fcf5 	bl	8012d64 <ucdr_deserialize_float>
 801537a:	f104 0120 	add.w	r1, r4, #32
 801537e:	4628      	mov	r0, r5
 8015380:	f7fd fcf0 	bl	8012d64 <ucdr_deserialize_float>
 8015384:	f104 0124 	add.w	r1, r4, #36	@ 0x24
 8015388:	4628      	mov	r0, r5
 801538a:	f7fd fceb 	bl	8012d64 <ucdr_deserialize_float>
 801538e:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8015392:	4628      	mov	r0, r5
 8015394:	f7fd fce6 	bl	8012d64 <ucdr_deserialize_float>
 8015398:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 801539c:	4628      	mov	r0, r5
 801539e:	f7fd fce1 	bl	8012d64 <ucdr_deserialize_float>
 80153a2:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80153a6:	4628      	mov	r0, r5
 80153a8:	f7fc fad2 	bl	8011950 <ucdr_deserialize_uint8_t>
 80153ac:	f104 0131 	add.w	r1, r4, #49	@ 0x31
 80153b0:	4628      	mov	r0, r5
 80153b2:	f7fc facd 	bl	8011950 <ucdr_deserialize_uint8_t>
 80153b6:	f104 0132 	add.w	r1, r4, #50	@ 0x32
 80153ba:	4628      	mov	r0, r5
 80153bc:	f7fc fac8 	bl	8011950 <ucdr_deserialize_uint8_t>
 80153c0:	f104 0133 	add.w	r1, r4, #51	@ 0x33
 80153c4:	4628      	mov	r0, r5
 80153c6:	f7fc fa95 	bl	80118f4 <ucdr_deserialize_bool>
 80153ca:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 80153cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80153ce:	ab01      	add	r3, sp, #4
 80153d0:	4632      	mov	r2, r6
 80153d2:	4628      	mov	r0, r5
 80153d4:	f000 fd4a 	bl	8015e6c <ucdr_deserialize_sequence_float>
 80153d8:	9b01      	ldr	r3, [sp, #4]
 80153da:	bb40      	cbnz	r0, 801542e <_BatteryState__cdr_deserialize+0xee>
 80153dc:	429e      	cmp	r6, r3
 80153de:	d35e      	bcc.n	801549e <_BatteryState__cdr_deserialize+0x15e>
 80153e0:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
 80153e2:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80153e4:	ab01      	add	r3, sp, #4
 80153e6:	4632      	mov	r2, r6
 80153e8:	4628      	mov	r0, r5
 80153ea:	f000 fd3f 	bl	8015e6c <ucdr_deserialize_sequence_float>
 80153ee:	9b01      	ldr	r3, [sp, #4]
 80153f0:	2800      	cmp	r0, #0
 80153f2:	d03c      	beq.n	801546e <_BatteryState__cdr_deserialize+0x12e>
 80153f4:	6463      	str	r3, [r4, #68]	@ 0x44
 80153f6:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 80153f8:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80153fa:	ab01      	add	r3, sp, #4
 80153fc:	4632      	mov	r2, r6
 80153fe:	4628      	mov	r0, r5
 8015400:	f000 fcdc 	bl	8015dbc <ucdr_deserialize_sequence_char>
 8015404:	9b01      	ldr	r3, [sp, #4]
 8015406:	b320      	cbz	r0, 8015452 <_BatteryState__cdr_deserialize+0x112>
 8015408:	2b00      	cmp	r3, #0
 801540a:	d146      	bne.n	801549a <_BatteryState__cdr_deserialize+0x15a>
 801540c:	6523      	str	r3, [r4, #80]	@ 0x50
 801540e:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 8015410:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8015412:	ab01      	add	r3, sp, #4
 8015414:	463a      	mov	r2, r7
 8015416:	4628      	mov	r0, r5
 8015418:	f000 fcd0 	bl	8015dbc <ucdr_deserialize_sequence_char>
 801541c:	9b01      	ldr	r3, [sp, #4]
 801541e:	4606      	mov	r6, r0
 8015420:	b138      	cbz	r0, 8015432 <_BatteryState__cdr_deserialize+0xf2>
 8015422:	2b00      	cmp	r3, #0
 8015424:	d137      	bne.n	8015496 <_BatteryState__cdr_deserialize+0x156>
 8015426:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8015428:	4630      	mov	r0, r6
 801542a:	b003      	add	sp, #12
 801542c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801542e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8015430:	e7d6      	b.n	80153e0 <_BatteryState__cdr_deserialize+0xa0>
 8015432:	429f      	cmp	r7, r3
 8015434:	d2f8      	bcs.n	8015428 <_BatteryState__cdr_deserialize+0xe8>
 8015436:	2101      	movs	r1, #1
 8015438:	75a8      	strb	r0, [r5, #22]
 801543a:	7569      	strb	r1, [r5, #21]
 801543c:	4628      	mov	r0, r5
 801543e:	65e6      	str	r6, [r4, #92]	@ 0x5c
 8015440:	f7fd ffba 	bl	80133b8 <ucdr_align_to>
 8015444:	4628      	mov	r0, r5
 8015446:	9901      	ldr	r1, [sp, #4]
 8015448:	f7fd ffec 	bl	8013424 <ucdr_advance_buffer>
 801544c:	4630      	mov	r0, r6
 801544e:	b003      	add	sp, #12
 8015450:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015452:	429e      	cmp	r6, r3
 8015454:	d2db      	bcs.n	801540e <_BatteryState__cdr_deserialize+0xce>
 8015456:	2101      	movs	r1, #1
 8015458:	75a8      	strb	r0, [r5, #22]
 801545a:	7569      	strb	r1, [r5, #21]
 801545c:	6520      	str	r0, [r4, #80]	@ 0x50
 801545e:	4628      	mov	r0, r5
 8015460:	f7fd ffaa 	bl	80133b8 <ucdr_align_to>
 8015464:	9901      	ldr	r1, [sp, #4]
 8015466:	4628      	mov	r0, r5
 8015468:	f7fd ffdc 	bl	8013424 <ucdr_advance_buffer>
 801546c:	e7cf      	b.n	801540e <_BatteryState__cdr_deserialize+0xce>
 801546e:	429e      	cmp	r6, r3
 8015470:	d2c1      	bcs.n	80153f6 <_BatteryState__cdr_deserialize+0xb6>
 8015472:	2301      	movs	r3, #1
 8015474:	75a8      	strb	r0, [r5, #22]
 8015476:	756b      	strb	r3, [r5, #21]
 8015478:	2104      	movs	r1, #4
 801547a:	6460      	str	r0, [r4, #68]	@ 0x44
 801547c:	4628      	mov	r0, r5
 801547e:	f7fd ff9b 	bl	80133b8 <ucdr_align_to>
 8015482:	9901      	ldr	r1, [sp, #4]
 8015484:	4628      	mov	r0, r5
 8015486:	0089      	lsls	r1, r1, #2
 8015488:	f7fd ffcc 	bl	8013424 <ucdr_advance_buffer>
 801548c:	e7b3      	b.n	80153f6 <_BatteryState__cdr_deserialize+0xb6>
 801548e:	460e      	mov	r6, r1
 8015490:	4630      	mov	r0, r6
 8015492:	b003      	add	sp, #12
 8015494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015496:	3b01      	subs	r3, #1
 8015498:	e7c5      	b.n	8015426 <_BatteryState__cdr_deserialize+0xe6>
 801549a:	3b01      	subs	r3, #1
 801549c:	e7b6      	b.n	801540c <_BatteryState__cdr_deserialize+0xcc>
 801549e:	2301      	movs	r3, #1
 80154a0:	75a8      	strb	r0, [r5, #22]
 80154a2:	756b      	strb	r3, [r5, #21]
 80154a4:	2104      	movs	r1, #4
 80154a6:	63a0      	str	r0, [r4, #56]	@ 0x38
 80154a8:	4628      	mov	r0, r5
 80154aa:	f7fd ff85 	bl	80133b8 <ucdr_align_to>
 80154ae:	9901      	ldr	r1, [sp, #4]
 80154b0:	4628      	mov	r0, r5
 80154b2:	0089      	lsls	r1, r1, #2
 80154b4:	f7fd ffb6 	bl	8013424 <ucdr_advance_buffer>
 80154b8:	e792      	b.n	80153e0 <_BatteryState__cdr_deserialize+0xa0>
 80154ba:	bf00      	nop

080154bc <_BatteryState__cdr_serialize>:
 80154bc:	2800      	cmp	r0, #0
 80154be:	d065      	beq.n	801558c <_BatteryState__cdr_serialize+0xd0>
 80154c0:	b570      	push	{r4, r5, r6, lr}
 80154c2:	4604      	mov	r4, r0
 80154c4:	460d      	mov	r5, r1
 80154c6:	f000 fb57 	bl	8015b78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80154ca:	6843      	ldr	r3, [r0, #4]
 80154cc:	4629      	mov	r1, r5
 80154ce:	689b      	ldr	r3, [r3, #8]
 80154d0:	4620      	mov	r0, r4
 80154d2:	4798      	blx	r3
 80154d4:	ed94 0a05 	vldr	s0, [r4, #20]
 80154d8:	4628      	mov	r0, r5
 80154da:	f7fd fb11 	bl	8012b00 <ucdr_serialize_float>
 80154de:	ed94 0a06 	vldr	s0, [r4, #24]
 80154e2:	4628      	mov	r0, r5
 80154e4:	f7fd fb0c 	bl	8012b00 <ucdr_serialize_float>
 80154e8:	ed94 0a07 	vldr	s0, [r4, #28]
 80154ec:	4628      	mov	r0, r5
 80154ee:	f7fd fb07 	bl	8012b00 <ucdr_serialize_float>
 80154f2:	ed94 0a08 	vldr	s0, [r4, #32]
 80154f6:	4628      	mov	r0, r5
 80154f8:	f7fd fb02 	bl	8012b00 <ucdr_serialize_float>
 80154fc:	ed94 0a09 	vldr	s0, [r4, #36]	@ 0x24
 8015500:	4628      	mov	r0, r5
 8015502:	f7fd fafd 	bl	8012b00 <ucdr_serialize_float>
 8015506:	ed94 0a0a 	vldr	s0, [r4, #40]	@ 0x28
 801550a:	4628      	mov	r0, r5
 801550c:	f7fd faf8 	bl	8012b00 <ucdr_serialize_float>
 8015510:	ed94 0a0b 	vldr	s0, [r4, #44]	@ 0x2c
 8015514:	4628      	mov	r0, r5
 8015516:	f7fd faf3 	bl	8012b00 <ucdr_serialize_float>
 801551a:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 801551e:	4628      	mov	r0, r5
 8015520:	f7fc fa00 	bl	8011924 <ucdr_serialize_uint8_t>
 8015524:	f894 1031 	ldrb.w	r1, [r4, #49]	@ 0x31
 8015528:	4628      	mov	r0, r5
 801552a:	f7fc f9fb 	bl	8011924 <ucdr_serialize_uint8_t>
 801552e:	f894 1032 	ldrb.w	r1, [r4, #50]	@ 0x32
 8015532:	4628      	mov	r0, r5
 8015534:	f7fc f9f6 	bl	8011924 <ucdr_serialize_uint8_t>
 8015538:	f894 1033 	ldrb.w	r1, [r4, #51]	@ 0x33
 801553c:	4628      	mov	r0, r5
 801553e:	f7fc f9c3 	bl	80118c8 <ucdr_serialize_bool>
 8015542:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	@ 0x34
 8015546:	4628      	mov	r0, r5
 8015548:	f000 fc7e 	bl	8015e48 <ucdr_serialize_sequence_float>
 801554c:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	@ 0x40
 8015550:	4628      	mov	r0, r5
 8015552:	f000 fc79 	bl	8015e48 <ucdr_serialize_sequence_float>
 8015556:	6ce6      	ldr	r6, [r4, #76]	@ 0x4c
 8015558:	b1ae      	cbz	r6, 8015586 <_BatteryState__cdr_serialize+0xca>
 801555a:	4630      	mov	r0, r6
 801555c:	f7ea fe42 	bl	80001e4 <strlen>
 8015560:	1c42      	adds	r2, r0, #1
 8015562:	6520      	str	r0, [r4, #80]	@ 0x50
 8015564:	4631      	mov	r1, r6
 8015566:	4628      	mov	r0, r5
 8015568:	f000 fc16 	bl	8015d98 <ucdr_serialize_sequence_char>
 801556c:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 801556e:	b176      	cbz	r6, 801558e <_BatteryState__cdr_serialize+0xd2>
 8015570:	4630      	mov	r0, r6
 8015572:	f7ea fe37 	bl	80001e4 <strlen>
 8015576:	4631      	mov	r1, r6
 8015578:	65e0      	str	r0, [r4, #92]	@ 0x5c
 801557a:	1c42      	adds	r2, r0, #1
 801557c:	4628      	mov	r0, r5
 801557e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015582:	f000 bc09 	b.w	8015d98 <ucdr_serialize_sequence_char>
 8015586:	4632      	mov	r2, r6
 8015588:	4630      	mov	r0, r6
 801558a:	e7ea      	b.n	8015562 <_BatteryState__cdr_serialize+0xa6>
 801558c:	4770      	bx	lr
 801558e:	4630      	mov	r0, r6
 8015590:	65e0      	str	r0, [r4, #92]	@ 0x5c
 8015592:	4632      	mov	r2, r6
 8015594:	4631      	mov	r1, r6
 8015596:	4628      	mov	r0, r5
 8015598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801559c:	f000 bbfc 	b.w	8015d98 <ucdr_serialize_sequence_char>

080155a0 <max_serialized_size_sensor_msgs__msg__BatteryState>:
 80155a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155a4:	f04f 0801 	mov.w	r8, #1
 80155a8:	f880 8000 	strb.w	r8, [r0]
 80155ac:	460c      	mov	r4, r1
 80155ae:	4607      	mov	r7, r0
 80155b0:	f000 fad8 	bl	8015b64 <max_serialized_size_std_msgs__msg__Header>
 80155b4:	1825      	adds	r5, r4, r0
 80155b6:	2104      	movs	r1, #4
 80155b8:	4628      	mov	r0, r5
 80155ba:	f7fd fee7 	bl	801338c <ucdr_alignment>
 80155be:	1d06      	adds	r6, r0, #4
 80155c0:	4435      	add	r5, r6
 80155c2:	2104      	movs	r1, #4
 80155c4:	4628      	mov	r0, r5
 80155c6:	f7fd fee1 	bl	801338c <ucdr_alignment>
 80155ca:	1d06      	adds	r6, r0, #4
 80155cc:	442e      	add	r6, r5
 80155ce:	2104      	movs	r1, #4
 80155d0:	4630      	mov	r0, r6
 80155d2:	f7fd fedb 	bl	801338c <ucdr_alignment>
 80155d6:	3004      	adds	r0, #4
 80155d8:	4406      	add	r6, r0
 80155da:	2104      	movs	r1, #4
 80155dc:	4630      	mov	r0, r6
 80155de:	f7fd fed5 	bl	801338c <ucdr_alignment>
 80155e2:	3004      	adds	r0, #4
 80155e4:	1985      	adds	r5, r0, r6
 80155e6:	2104      	movs	r1, #4
 80155e8:	4628      	mov	r0, r5
 80155ea:	f7fd fecf 	bl	801338c <ucdr_alignment>
 80155ee:	1d06      	adds	r6, r0, #4
 80155f0:	442e      	add	r6, r5
 80155f2:	2104      	movs	r1, #4
 80155f4:	4630      	mov	r0, r6
 80155f6:	f7fd fec9 	bl	801338c <ucdr_alignment>
 80155fa:	3004      	adds	r0, #4
 80155fc:	4406      	add	r6, r0
 80155fe:	2104      	movs	r1, #4
 8015600:	4630      	mov	r0, r6
 8015602:	f7fd fec3 	bl	801338c <ucdr_alignment>
 8015606:	3004      	adds	r0, #4
 8015608:	1985      	adds	r5, r0, r6
 801560a:	4641      	mov	r1, r8
 801560c:	4628      	mov	r0, r5
 801560e:	f7fd febd 	bl	801338c <ucdr_alignment>
 8015612:	eb00 0608 	add.w	r6, r0, r8
 8015616:	442e      	add	r6, r5
 8015618:	4641      	mov	r1, r8
 801561a:	4630      	mov	r0, r6
 801561c:	f7fd feb6 	bl	801338c <ucdr_alignment>
 8015620:	eb00 0508 	add.w	r5, r0, r8
 8015624:	442e      	add	r6, r5
 8015626:	4641      	mov	r1, r8
 8015628:	4630      	mov	r0, r6
 801562a:	f7fd feaf 	bl	801338c <ucdr_alignment>
 801562e:	eb00 0508 	add.w	r5, r0, r8
 8015632:	4435      	add	r5, r6
 8015634:	4641      	mov	r1, r8
 8015636:	4628      	mov	r0, r5
 8015638:	f7fd fea8 	bl	801338c <ucdr_alignment>
 801563c:	eba8 0404 	sub.w	r4, r8, r4
 8015640:	2300      	movs	r3, #0
 8015642:	4420      	add	r0, r4
 8015644:	703b      	strb	r3, [r7, #0]
 8015646:	4428      	add	r0, r5
 8015648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801564c <_BatteryState__max_serialized_size>:
 801564c:	b500      	push	{lr}
 801564e:	b083      	sub	sp, #12
 8015650:	2100      	movs	r1, #0
 8015652:	f10d 0007 	add.w	r0, sp, #7
 8015656:	f7ff ffa3 	bl	80155a0 <max_serialized_size_sensor_msgs__msg__BatteryState>
 801565a:	b003      	add	sp, #12
 801565c:	f85d fb04 	ldr.w	pc, [sp], #4

08015660 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 8015660:	4800      	ldr	r0, [pc, #0]	@ (8015664 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x4>)
 8015662:	4770      	bx	lr
 8015664:	20000784 	.word	0x20000784

08015668 <get_serialized_size_sensor_msgs__msg__Temperature>:
 8015668:	b538      	push	{r3, r4, r5, lr}
 801566a:	b188      	cbz	r0, 8015690 <get_serialized_size_sensor_msgs__msg__Temperature+0x28>
 801566c:	460d      	mov	r5, r1
 801566e:	f000 fa01 	bl	8015a74 <get_serialized_size_std_msgs__msg__Header>
 8015672:	182c      	adds	r4, r5, r0
 8015674:	2108      	movs	r1, #8
 8015676:	4620      	mov	r0, r4
 8015678:	f7fd fe88 	bl	801338c <ucdr_alignment>
 801567c:	3008      	adds	r0, #8
 801567e:	4404      	add	r4, r0
 8015680:	2108      	movs	r1, #8
 8015682:	4620      	mov	r0, r4
 8015684:	f7fd fe82 	bl	801338c <ucdr_alignment>
 8015688:	f1c5 0508 	rsb	r5, r5, #8
 801568c:	4428      	add	r0, r5
 801568e:	4420      	add	r0, r4
 8015690:	bd38      	pop	{r3, r4, r5, pc}
 8015692:	bf00      	nop

08015694 <_Temperature__cdr_deserialize>:
 8015694:	b538      	push	{r3, r4, r5, lr}
 8015696:	460c      	mov	r4, r1
 8015698:	b199      	cbz	r1, 80156c2 <_Temperature__cdr_deserialize+0x2e>
 801569a:	4605      	mov	r5, r0
 801569c:	f000 fa6c 	bl	8015b78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80156a0:	6843      	ldr	r3, [r0, #4]
 80156a2:	4621      	mov	r1, r4
 80156a4:	68db      	ldr	r3, [r3, #12]
 80156a6:	4628      	mov	r0, r5
 80156a8:	4798      	blx	r3
 80156aa:	f104 0118 	add.w	r1, r4, #24
 80156ae:	4628      	mov	r0, r5
 80156b0:	f7fd fd4e 	bl	8013150 <ucdr_deserialize_double>
 80156b4:	f104 0120 	add.w	r1, r4, #32
 80156b8:	4628      	mov	r0, r5
 80156ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156be:	f7fd bd47 	b.w	8013150 <ucdr_deserialize_double>
 80156c2:	4608      	mov	r0, r1
 80156c4:	bd38      	pop	{r3, r4, r5, pc}
 80156c6:	bf00      	nop

080156c8 <_Temperature__cdr_serialize>:
 80156c8:	b1a8      	cbz	r0, 80156f6 <_Temperature__cdr_serialize+0x2e>
 80156ca:	b538      	push	{r3, r4, r5, lr}
 80156cc:	460d      	mov	r5, r1
 80156ce:	4604      	mov	r4, r0
 80156d0:	f000 fa52 	bl	8015b78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 80156d4:	6843      	ldr	r3, [r0, #4]
 80156d6:	4629      	mov	r1, r5
 80156d8:	689b      	ldr	r3, [r3, #8]
 80156da:	4620      	mov	r0, r4
 80156dc:	4798      	blx	r3
 80156de:	ed94 0b06 	vldr	d0, [r4, #24]
 80156e2:	4628      	mov	r0, r5
 80156e4:	f7fd fc64 	bl	8012fb0 <ucdr_serialize_double>
 80156e8:	ed94 0b08 	vldr	d0, [r4, #32]
 80156ec:	4628      	mov	r0, r5
 80156ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156f2:	f7fd bc5d 	b.w	8012fb0 <ucdr_serialize_double>
 80156f6:	4770      	bx	lr

080156f8 <_Temperature__get_serialized_size>:
 80156f8:	b188      	cbz	r0, 801571e <_Temperature__get_serialized_size+0x26>
 80156fa:	b510      	push	{r4, lr}
 80156fc:	2100      	movs	r1, #0
 80156fe:	f000 f9b9 	bl	8015a74 <get_serialized_size_std_msgs__msg__Header>
 8015702:	2108      	movs	r1, #8
 8015704:	4604      	mov	r4, r0
 8015706:	f7fd fe41 	bl	801338c <ucdr_alignment>
 801570a:	4420      	add	r0, r4
 801570c:	f100 0408 	add.w	r4, r0, #8
 8015710:	2108      	movs	r1, #8
 8015712:	4620      	mov	r0, r4
 8015714:	f7fd fe3a 	bl	801338c <ucdr_alignment>
 8015718:	3008      	adds	r0, #8
 801571a:	4420      	add	r0, r4
 801571c:	bd10      	pop	{r4, pc}
 801571e:	4770      	bx	lr

08015720 <_Temperature__max_serialized_size>:
 8015720:	b510      	push	{r4, lr}
 8015722:	b082      	sub	sp, #8
 8015724:	2301      	movs	r3, #1
 8015726:	2100      	movs	r1, #0
 8015728:	f10d 0007 	add.w	r0, sp, #7
 801572c:	f88d 3007 	strb.w	r3, [sp, #7]
 8015730:	f000 fa18 	bl	8015b64 <max_serialized_size_std_msgs__msg__Header>
 8015734:	2108      	movs	r1, #8
 8015736:	4604      	mov	r4, r0
 8015738:	f7fd fe28 	bl	801338c <ucdr_alignment>
 801573c:	4420      	add	r0, r4
 801573e:	f100 0408 	add.w	r4, r0, #8
 8015742:	2108      	movs	r1, #8
 8015744:	4620      	mov	r0, r4
 8015746:	f7fd fe21 	bl	801338c <ucdr_alignment>
 801574a:	3008      	adds	r0, #8
 801574c:	4420      	add	r0, r4
 801574e:	b002      	add	sp, #8
 8015750:	bd10      	pop	{r4, pc}
 8015752:	bf00      	nop

08015754 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 8015754:	4800      	ldr	r0, [pc, #0]	@ (8015758 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x4>)
 8015756:	4770      	bx	lr
 8015758:	200007ac 	.word	0x200007ac

0801575c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 801575c:	4b04      	ldr	r3, [pc, #16]	@ (8015770 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 801575e:	681a      	ldr	r2, [r3, #0]
 8015760:	b10a      	cbz	r2, 8015766 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0xa>
 8015762:	4803      	ldr	r0, [pc, #12]	@ (8015770 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8015764:	4770      	bx	lr
 8015766:	4a03      	ldr	r2, [pc, #12]	@ (8015774 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x18>)
 8015768:	4801      	ldr	r0, [pc, #4]	@ (8015770 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 801576a:	6812      	ldr	r2, [r2, #0]
 801576c:	601a      	str	r2, [r3, #0]
 801576e:	4770      	bx	lr
 8015770:	200007dc 	.word	0x200007dc
 8015774:	200002c8 	.word	0x200002c8

08015778 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 8015778:	4a02      	ldr	r2, [pc, #8]	@ (8015784 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0xc>)
 801577a:	4b03      	ldr	r3, [pc, #12]	@ (8015788 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x10>)
 801577c:	6812      	ldr	r2, [r2, #0]
 801577e:	601a      	str	r2, [r3, #0]
 8015780:	4770      	bx	lr
 8015782:	bf00      	nop
 8015784:	200002c8 	.word	0x200002c8
 8015788:	200007dc 	.word	0x200007dc

0801578c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64>:
 801578c:	4b04      	ldr	r3, [pc, #16]	@ (80157a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64+0x14>)
 801578e:	681a      	ldr	r2, [r3, #0]
 8015790:	b10a      	cbz	r2, 8015796 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64+0xa>
 8015792:	4803      	ldr	r0, [pc, #12]	@ (80157a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64+0x14>)
 8015794:	4770      	bx	lr
 8015796:	4a03      	ldr	r2, [pc, #12]	@ (80157a4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64+0x18>)
 8015798:	4801      	ldr	r0, [pc, #4]	@ (80157a0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64+0x14>)
 801579a:	6812      	ldr	r2, [r2, #0]
 801579c:	601a      	str	r2, [r3, #0]
 801579e:	4770      	bx	lr
 80157a0:	200007f0 	.word	0x200007f0
 80157a4:	200002c8 	.word	0x200002c8

080157a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64>:
 80157a8:	4a02      	ldr	r2, [pc, #8]	@ (80157b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64+0xc>)
 80157aa:	4b03      	ldr	r3, [pc, #12]	@ (80157b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64+0x10>)
 80157ac:	6812      	ldr	r2, [r2, #0]
 80157ae:	601a      	str	r2, [r3, #0]
 80157b0:	4770      	bx	lr
 80157b2:	bf00      	nop
 80157b4:	200002c8 	.word	0x200002c8
 80157b8:	200007f0 	.word	0x200007f0

080157bc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80157bc:	4b04      	ldr	r3, [pc, #16]	@ (80157d0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80157be:	681a      	ldr	r2, [r3, #0]
 80157c0:	b10a      	cbz	r2, 80157c6 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 80157c2:	4803      	ldr	r0, [pc, #12]	@ (80157d0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80157c4:	4770      	bx	lr
 80157c6:	4a03      	ldr	r2, [pc, #12]	@ (80157d4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 80157c8:	4801      	ldr	r0, [pc, #4]	@ (80157d0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80157ca:	6812      	ldr	r2, [r2, #0]
 80157cc:	601a      	str	r2, [r3, #0]
 80157ce:	4770      	bx	lr
 80157d0:	20000804 	.word	0x20000804
 80157d4:	200002c8 	.word	0x200002c8

080157d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80157d8:	4a02      	ldr	r2, [pc, #8]	@ (80157e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 80157da:	4b03      	ldr	r3, [pc, #12]	@ (80157e8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 80157dc:	6812      	ldr	r2, [r2, #0]
 80157de:	601a      	str	r2, [r3, #0]
 80157e0:	4770      	bx	lr
 80157e2:	bf00      	nop
 80157e4:	200002c8 	.word	0x200002c8
 80157e8:	20000804 	.word	0x20000804

080157ec <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 80157ec:	4b04      	ldr	r3, [pc, #16]	@ (8015800 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 80157ee:	681a      	ldr	r2, [r3, #0]
 80157f0:	b10a      	cbz	r2, 80157f6 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0xa>
 80157f2:	4803      	ldr	r0, [pc, #12]	@ (8015800 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 80157f4:	4770      	bx	lr
 80157f6:	4a03      	ldr	r2, [pc, #12]	@ (8015804 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x18>)
 80157f8:	4801      	ldr	r0, [pc, #4]	@ (8015800 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 80157fa:	6812      	ldr	r2, [r2, #0]
 80157fc:	601a      	str	r2, [r3, #0]
 80157fe:	4770      	bx	lr
 8015800:	20000818 	.word	0x20000818
 8015804:	200002c8 	.word	0x200002c8

08015808 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 8015808:	4a02      	ldr	r2, [pc, #8]	@ (8015814 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0xc>)
 801580a:	4b03      	ldr	r3, [pc, #12]	@ (8015818 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x10>)
 801580c:	6812      	ldr	r2, [r2, #0]
 801580e:	601a      	str	r2, [r3, #0]
 8015810:	4770      	bx	lr
 8015812:	bf00      	nop
 8015814:	200002c8 	.word	0x200002c8
 8015818:	20000818 	.word	0x20000818

0801581c <std_msgs__msg__ColorRGBA__rosidl_typesupport_introspection_c__ColorRGBA_init_function>:
 801581c:	f007 bec6 	b.w	801d5ac <std_msgs__msg__ColorRGBA__init>

08015820 <std_msgs__msg__ColorRGBA__rosidl_typesupport_introspection_c__ColorRGBA_fini_function>:
 8015820:	f007 bec8 	b.w	801d5b4 <std_msgs__msg__ColorRGBA__fini>

08015824 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 8015824:	4b04      	ldr	r3, [pc, #16]	@ (8015838 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8015826:	681a      	ldr	r2, [r3, #0]
 8015828:	b10a      	cbz	r2, 801582e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0xa>
 801582a:	4803      	ldr	r0, [pc, #12]	@ (8015838 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 801582c:	4770      	bx	lr
 801582e:	4a03      	ldr	r2, [pc, #12]	@ (801583c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x18>)
 8015830:	4801      	ldr	r0, [pc, #4]	@ (8015838 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8015832:	6812      	ldr	r2, [r2, #0]
 8015834:	601a      	str	r2, [r3, #0]
 8015836:	4770      	bx	lr
 8015838:	20000914 	.word	0x20000914
 801583c:	200002cc 	.word	0x200002cc

08015840 <std_msgs__msg__Float64__rosidl_typesupport_introspection_c__Float64_init_function>:
 8015840:	f007 beba 	b.w	801d5b8 <std_msgs__msg__Float64__init>

08015844 <std_msgs__msg__Float64__rosidl_typesupport_introspection_c__Float64_fini_function>:
 8015844:	f007 bebc 	b.w	801d5c0 <std_msgs__msg__Float64__fini>

08015848 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64>:
 8015848:	4b04      	ldr	r3, [pc, #16]	@ (801585c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64+0x14>)
 801584a:	681a      	ldr	r2, [r3, #0]
 801584c:	b10a      	cbz	r2, 8015852 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64+0xa>
 801584e:	4803      	ldr	r0, [pc, #12]	@ (801585c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64+0x14>)
 8015850:	4770      	bx	lr
 8015852:	4a03      	ldr	r2, [pc, #12]	@ (8015860 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64+0x18>)
 8015854:	4801      	ldr	r0, [pc, #4]	@ (801585c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64+0x14>)
 8015856:	6812      	ldr	r2, [r2, #0]
 8015858:	601a      	str	r2, [r3, #0]
 801585a:	4770      	bx	lr
 801585c:	2000095c 	.word	0x2000095c
 8015860:	200002cc 	.word	0x200002cc

08015864 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8015864:	f007 beae 	b.w	801d5c4 <std_msgs__msg__Header__init>

08015868 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8015868:	f007 bed0 	b.w	801d60c <std_msgs__msg__Header__fini>

0801586c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 801586c:	b508      	push	{r3, lr}
 801586e:	f000 f9e7 	bl	8015c40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8015872:	4b06      	ldr	r3, [pc, #24]	@ (801588c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8015874:	4906      	ldr	r1, [pc, #24]	@ (8015890 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8015876:	681a      	ldr	r2, [r3, #0]
 8015878:	60c8      	str	r0, [r1, #12]
 801587a:	b10a      	cbz	r2, 8015880 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 801587c:	4803      	ldr	r0, [pc, #12]	@ (801588c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 801587e:	bd08      	pop	{r3, pc}
 8015880:	4a04      	ldr	r2, [pc, #16]	@ (8015894 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8015882:	4802      	ldr	r0, [pc, #8]	@ (801588c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8015884:	6812      	ldr	r2, [r2, #0]
 8015886:	601a      	str	r2, [r3, #0]
 8015888:	bd08      	pop	{r3, pc}
 801588a:	bf00      	nop
 801588c:	200009e0 	.word	0x200009e0
 8015890:	20000968 	.word	0x20000968
 8015894:	200002cc 	.word	0x200002cc

08015898 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8015898:	f007 bec4 	b.w	801d624 <std_msgs__msg__Int32__init>

0801589c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 801589c:	f007 bec6 	b.w	801d62c <std_msgs__msg__Int32__fini>

080158a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80158a0:	4b04      	ldr	r3, [pc, #16]	@ (80158b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80158a2:	681a      	ldr	r2, [r3, #0]
 80158a4:	b10a      	cbz	r2, 80158aa <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 80158a6:	4803      	ldr	r0, [pc, #12]	@ (80158b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80158a8:	4770      	bx	lr
 80158aa:	4a03      	ldr	r2, [pc, #12]	@ (80158b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 80158ac:	4801      	ldr	r0, [pc, #4]	@ (80158b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80158ae:	6812      	ldr	r2, [r2, #0]
 80158b0:	601a      	str	r2, [r3, #0]
 80158b2:	4770      	bx	lr
 80158b4:	20000a28 	.word	0x20000a28
 80158b8:	200002cc 	.word	0x200002cc

080158bc <std_msgs__msg__Int64__rosidl_typesupport_introspection_c__Int64_init_function>:
 80158bc:	f007 beb8 	b.w	801d630 <std_msgs__msg__Int64__init>

080158c0 <std_msgs__msg__Int64__rosidl_typesupport_introspection_c__Int64_fini_function>:
 80158c0:	f007 beba 	b.w	801d638 <std_msgs__msg__Int64__fini>

080158c4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 80158c4:	4b04      	ldr	r3, [pc, #16]	@ (80158d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 80158c6:	681a      	ldr	r2, [r3, #0]
 80158c8:	b10a      	cbz	r2, 80158ce <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0xa>
 80158ca:	4803      	ldr	r0, [pc, #12]	@ (80158d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 80158cc:	4770      	bx	lr
 80158ce:	4a03      	ldr	r2, [pc, #12]	@ (80158dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x18>)
 80158d0:	4801      	ldr	r0, [pc, #4]	@ (80158d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 80158d2:	6812      	ldr	r2, [r2, #0]
 80158d4:	601a      	str	r2, [r3, #0]
 80158d6:	4770      	bx	lr
 80158d8:	20000a70 	.word	0x20000a70
 80158dc:	200002cc 	.word	0x200002cc

080158e0 <get_serialized_size_std_msgs__msg__ColorRGBA>:
 80158e0:	b1e0      	cbz	r0, 801591c <get_serialized_size_std_msgs__msg__ColorRGBA+0x3c>
 80158e2:	b570      	push	{r4, r5, r6, lr}
 80158e4:	460d      	mov	r5, r1
 80158e6:	4628      	mov	r0, r5
 80158e8:	2104      	movs	r1, #4
 80158ea:	f7fd fd4f 	bl	801338c <ucdr_alignment>
 80158ee:	1d2b      	adds	r3, r5, #4
 80158f0:	181e      	adds	r6, r3, r0
 80158f2:	2104      	movs	r1, #4
 80158f4:	4630      	mov	r0, r6
 80158f6:	f7fd fd49 	bl	801338c <ucdr_alignment>
 80158fa:	1d04      	adds	r4, r0, #4
 80158fc:	4434      	add	r4, r6
 80158fe:	2104      	movs	r1, #4
 8015900:	4620      	mov	r0, r4
 8015902:	f7fd fd43 	bl	801338c <ucdr_alignment>
 8015906:	3004      	adds	r0, #4
 8015908:	4404      	add	r4, r0
 801590a:	2104      	movs	r1, #4
 801590c:	4620      	mov	r0, r4
 801590e:	f7fd fd3d 	bl	801338c <ucdr_alignment>
 8015912:	f1c5 0504 	rsb	r5, r5, #4
 8015916:	4428      	add	r0, r5
 8015918:	4420      	add	r0, r4
 801591a:	bd70      	pop	{r4, r5, r6, pc}
 801591c:	4770      	bx	lr
 801591e:	bf00      	nop

08015920 <_ColorRGBA__cdr_deserialize>:
 8015920:	b538      	push	{r3, r4, r5, lr}
 8015922:	460c      	mov	r4, r1
 8015924:	b191      	cbz	r1, 801594c <_ColorRGBA__cdr_deserialize+0x2c>
 8015926:	4605      	mov	r5, r0
 8015928:	f7fd fa1c 	bl	8012d64 <ucdr_deserialize_float>
 801592c:	1d21      	adds	r1, r4, #4
 801592e:	4628      	mov	r0, r5
 8015930:	f7fd fa18 	bl	8012d64 <ucdr_deserialize_float>
 8015934:	f104 0108 	add.w	r1, r4, #8
 8015938:	4628      	mov	r0, r5
 801593a:	f7fd fa13 	bl	8012d64 <ucdr_deserialize_float>
 801593e:	f104 010c 	add.w	r1, r4, #12
 8015942:	4628      	mov	r0, r5
 8015944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015948:	f7fd ba0c 	b.w	8012d64 <ucdr_deserialize_float>
 801594c:	4608      	mov	r0, r1
 801594e:	bd38      	pop	{r3, r4, r5, pc}

08015950 <_ColorRGBA__cdr_serialize>:
 8015950:	b1c0      	cbz	r0, 8015984 <_ColorRGBA__cdr_serialize+0x34>
 8015952:	b538      	push	{r3, r4, r5, lr}
 8015954:	ed90 0a00 	vldr	s0, [r0]
 8015958:	460d      	mov	r5, r1
 801595a:	4604      	mov	r4, r0
 801595c:	4608      	mov	r0, r1
 801595e:	f7fd f8cf 	bl	8012b00 <ucdr_serialize_float>
 8015962:	ed94 0a01 	vldr	s0, [r4, #4]
 8015966:	4628      	mov	r0, r5
 8015968:	f7fd f8ca 	bl	8012b00 <ucdr_serialize_float>
 801596c:	ed94 0a02 	vldr	s0, [r4, #8]
 8015970:	4628      	mov	r0, r5
 8015972:	f7fd f8c5 	bl	8012b00 <ucdr_serialize_float>
 8015976:	ed94 0a03 	vldr	s0, [r4, #12]
 801597a:	4628      	mov	r0, r5
 801597c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015980:	f7fd b8be 	b.w	8012b00 <ucdr_serialize_float>
 8015984:	4770      	bx	lr
 8015986:	bf00      	nop

08015988 <_ColorRGBA__get_serialized_size>:
 8015988:	b1c0      	cbz	r0, 80159bc <_ColorRGBA__get_serialized_size+0x34>
 801598a:	b538      	push	{r3, r4, r5, lr}
 801598c:	2104      	movs	r1, #4
 801598e:	2000      	movs	r0, #0
 8015990:	f7fd fcfc 	bl	801338c <ucdr_alignment>
 8015994:	1d05      	adds	r5, r0, #4
 8015996:	2104      	movs	r1, #4
 8015998:	4628      	mov	r0, r5
 801599a:	f7fd fcf7 	bl	801338c <ucdr_alignment>
 801599e:	1d04      	adds	r4, r0, #4
 80159a0:	442c      	add	r4, r5
 80159a2:	2104      	movs	r1, #4
 80159a4:	4620      	mov	r0, r4
 80159a6:	f7fd fcf1 	bl	801338c <ucdr_alignment>
 80159aa:	3004      	adds	r0, #4
 80159ac:	4404      	add	r4, r0
 80159ae:	2104      	movs	r1, #4
 80159b0:	4620      	mov	r0, r4
 80159b2:	f7fd fceb 	bl	801338c <ucdr_alignment>
 80159b6:	3004      	adds	r0, #4
 80159b8:	4420      	add	r0, r4
 80159ba:	bd38      	pop	{r3, r4, r5, pc}
 80159bc:	4770      	bx	lr
 80159be:	bf00      	nop

080159c0 <_ColorRGBA__max_serialized_size>:
 80159c0:	b538      	push	{r3, r4, r5, lr}
 80159c2:	2104      	movs	r1, #4
 80159c4:	2000      	movs	r0, #0
 80159c6:	f7fd fce1 	bl	801338c <ucdr_alignment>
 80159ca:	1d05      	adds	r5, r0, #4
 80159cc:	2104      	movs	r1, #4
 80159ce:	4628      	mov	r0, r5
 80159d0:	f7fd fcdc 	bl	801338c <ucdr_alignment>
 80159d4:	1d04      	adds	r4, r0, #4
 80159d6:	442c      	add	r4, r5
 80159d8:	2104      	movs	r1, #4
 80159da:	4620      	mov	r0, r4
 80159dc:	f7fd fcd6 	bl	801338c <ucdr_alignment>
 80159e0:	3004      	adds	r0, #4
 80159e2:	4404      	add	r4, r0
 80159e4:	2104      	movs	r1, #4
 80159e6:	4620      	mov	r0, r4
 80159e8:	f7fd fcd0 	bl	801338c <ucdr_alignment>
 80159ec:	3004      	adds	r0, #4
 80159ee:	4420      	add	r0, r4
 80159f0:	bd38      	pop	{r3, r4, r5, pc}
 80159f2:	bf00      	nop

080159f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 80159f4:	4800      	ldr	r0, [pc, #0]	@ (80159f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x4>)
 80159f6:	4770      	bx	lr
 80159f8:	20000a7c 	.word	0x20000a7c

080159fc <_Float64__max_serialized_size>:
 80159fc:	b508      	push	{r3, lr}
 80159fe:	2108      	movs	r1, #8
 8015a00:	2000      	movs	r0, #0
 8015a02:	f7fd fcc3 	bl	801338c <ucdr_alignment>
 8015a06:	3008      	adds	r0, #8
 8015a08:	bd08      	pop	{r3, pc}
 8015a0a:	bf00      	nop

08015a0c <_Float64__cdr_deserialize>:
 8015a0c:	b109      	cbz	r1, 8015a12 <_Float64__cdr_deserialize+0x6>
 8015a0e:	f7fd bb9f 	b.w	8013150 <ucdr_deserialize_double>
 8015a12:	4608      	mov	r0, r1
 8015a14:	4770      	bx	lr
 8015a16:	bf00      	nop

08015a18 <_Float64__get_serialized_size>:
 8015a18:	b130      	cbz	r0, 8015a28 <_Float64__get_serialized_size+0x10>
 8015a1a:	b508      	push	{r3, lr}
 8015a1c:	2108      	movs	r1, #8
 8015a1e:	2000      	movs	r0, #0
 8015a20:	f7fd fcb4 	bl	801338c <ucdr_alignment>
 8015a24:	3008      	adds	r0, #8
 8015a26:	bd08      	pop	{r3, pc}
 8015a28:	4770      	bx	lr
 8015a2a:	bf00      	nop

08015a2c <_Float64__cdr_serialize>:
 8015a2c:	b120      	cbz	r0, 8015a38 <_Float64__cdr_serialize+0xc>
 8015a2e:	ed90 0b00 	vldr	d0, [r0]
 8015a32:	4608      	mov	r0, r1
 8015a34:	f7fd babc 	b.w	8012fb0 <ucdr_serialize_double>
 8015a38:	4770      	bx	lr
 8015a3a:	bf00      	nop

08015a3c <get_serialized_size_std_msgs__msg__Float64>:
 8015a3c:	b138      	cbz	r0, 8015a4e <get_serialized_size_std_msgs__msg__Float64+0x12>
 8015a3e:	b508      	push	{r3, lr}
 8015a40:	460b      	mov	r3, r1
 8015a42:	4618      	mov	r0, r3
 8015a44:	2108      	movs	r1, #8
 8015a46:	f7fd fca1 	bl	801338c <ucdr_alignment>
 8015a4a:	3008      	adds	r0, #8
 8015a4c:	bd08      	pop	{r3, pc}
 8015a4e:	4770      	bx	lr

08015a50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64>:
 8015a50:	4800      	ldr	r0, [pc, #0]	@ (8015a54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64+0x4>)
 8015a52:	4770      	bx	lr
 8015a54:	20000aa4 	.word	0x20000aa4

08015a58 <_Header__max_serialized_size>:
 8015a58:	b500      	push	{lr}
 8015a5a:	b083      	sub	sp, #12
 8015a5c:	2301      	movs	r3, #1
 8015a5e:	2100      	movs	r1, #0
 8015a60:	f10d 0007 	add.w	r0, sp, #7
 8015a64:	f88d 3007 	strb.w	r3, [sp, #7]
 8015a68:	f000 f948 	bl	8015cfc <max_serialized_size_builtin_interfaces__msg__Time>
 8015a6c:	b003      	add	sp, #12
 8015a6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a72:	bf00      	nop

08015a74 <get_serialized_size_std_msgs__msg__Header>:
 8015a74:	b570      	push	{r4, r5, r6, lr}
 8015a76:	4605      	mov	r5, r0
 8015a78:	b168      	cbz	r0, 8015a96 <get_serialized_size_std_msgs__msg__Header+0x22>
 8015a7a:	460c      	mov	r4, r1
 8015a7c:	f000 f8ee 	bl	8015c5c <get_serialized_size_builtin_interfaces__msg__Time>
 8015a80:	1826      	adds	r6, r4, r0
 8015a82:	2104      	movs	r1, #4
 8015a84:	4630      	mov	r0, r6
 8015a86:	f7fd fc81 	bl	801338c <ucdr_alignment>
 8015a8a:	68e9      	ldr	r1, [r5, #12]
 8015a8c:	f1c4 0405 	rsb	r4, r4, #5
 8015a90:	440c      	add	r4, r1
 8015a92:	4404      	add	r4, r0
 8015a94:	19a0      	adds	r0, r4, r6
 8015a96:	bd70      	pop	{r4, r5, r6, pc}

08015a98 <_Header__cdr_deserialize>:
 8015a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a9a:	460c      	mov	r4, r1
 8015a9c:	b083      	sub	sp, #12
 8015a9e:	b1e1      	cbz	r1, 8015ada <_Header__cdr_deserialize+0x42>
 8015aa0:	4606      	mov	r6, r0
 8015aa2:	f000 f93f 	bl	8015d24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8015aa6:	6843      	ldr	r3, [r0, #4]
 8015aa8:	4621      	mov	r1, r4
 8015aaa:	68db      	ldr	r3, [r3, #12]
 8015aac:	4630      	mov	r0, r6
 8015aae:	4798      	blx	r3
 8015ab0:	6927      	ldr	r7, [r4, #16]
 8015ab2:	68a1      	ldr	r1, [r4, #8]
 8015ab4:	ab01      	add	r3, sp, #4
 8015ab6:	463a      	mov	r2, r7
 8015ab8:	4630      	mov	r0, r6
 8015aba:	f000 f97f 	bl	8015dbc <ucdr_deserialize_sequence_char>
 8015abe:	9b01      	ldr	r3, [sp, #4]
 8015ac0:	4605      	mov	r5, r0
 8015ac2:	b920      	cbnz	r0, 8015ace <_Header__cdr_deserialize+0x36>
 8015ac4:	429f      	cmp	r7, r3
 8015ac6:	d30c      	bcc.n	8015ae2 <_Header__cdr_deserialize+0x4a>
 8015ac8:	4628      	mov	r0, r5
 8015aca:	b003      	add	sp, #12
 8015acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ace:	b103      	cbz	r3, 8015ad2 <_Header__cdr_deserialize+0x3a>
 8015ad0:	3b01      	subs	r3, #1
 8015ad2:	4628      	mov	r0, r5
 8015ad4:	60e3      	str	r3, [r4, #12]
 8015ad6:	b003      	add	sp, #12
 8015ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ada:	460d      	mov	r5, r1
 8015adc:	4628      	mov	r0, r5
 8015ade:	b003      	add	sp, #12
 8015ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ae2:	2101      	movs	r1, #1
 8015ae4:	75b0      	strb	r0, [r6, #22]
 8015ae6:	7571      	strb	r1, [r6, #21]
 8015ae8:	4630      	mov	r0, r6
 8015aea:	60e5      	str	r5, [r4, #12]
 8015aec:	f7fd fc64 	bl	80133b8 <ucdr_align_to>
 8015af0:	4630      	mov	r0, r6
 8015af2:	9901      	ldr	r1, [sp, #4]
 8015af4:	f7fd fc96 	bl	8013424 <ucdr_advance_buffer>
 8015af8:	4628      	mov	r0, r5
 8015afa:	b003      	add	sp, #12
 8015afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015afe:	bf00      	nop

08015b00 <_Header__cdr_serialize>:
 8015b00:	b1f8      	cbz	r0, 8015b42 <_Header__cdr_serialize+0x42>
 8015b02:	b570      	push	{r4, r5, r6, lr}
 8015b04:	4604      	mov	r4, r0
 8015b06:	460d      	mov	r5, r1
 8015b08:	f000 f90c 	bl	8015d24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8015b0c:	6843      	ldr	r3, [r0, #4]
 8015b0e:	4629      	mov	r1, r5
 8015b10:	689b      	ldr	r3, [r3, #8]
 8015b12:	4620      	mov	r0, r4
 8015b14:	4798      	blx	r3
 8015b16:	68a6      	ldr	r6, [r4, #8]
 8015b18:	b156      	cbz	r6, 8015b30 <_Header__cdr_serialize+0x30>
 8015b1a:	4630      	mov	r0, r6
 8015b1c:	f7ea fb62 	bl	80001e4 <strlen>
 8015b20:	4631      	mov	r1, r6
 8015b22:	60e0      	str	r0, [r4, #12]
 8015b24:	1c42      	adds	r2, r0, #1
 8015b26:	4628      	mov	r0, r5
 8015b28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b2c:	f000 b934 	b.w	8015d98 <ucdr_serialize_sequence_char>
 8015b30:	4630      	mov	r0, r6
 8015b32:	60e0      	str	r0, [r4, #12]
 8015b34:	4632      	mov	r2, r6
 8015b36:	4631      	mov	r1, r6
 8015b38:	4628      	mov	r0, r5
 8015b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015b3e:	f000 b92b 	b.w	8015d98 <ucdr_serialize_sequence_char>
 8015b42:	4770      	bx	lr

08015b44 <_Header__get_serialized_size>:
 8015b44:	b538      	push	{r3, r4, r5, lr}
 8015b46:	4604      	mov	r4, r0
 8015b48:	b150      	cbz	r0, 8015b60 <_Header__get_serialized_size+0x1c>
 8015b4a:	2100      	movs	r1, #0
 8015b4c:	f000 f886 	bl	8015c5c <get_serialized_size_builtin_interfaces__msg__Time>
 8015b50:	2104      	movs	r1, #4
 8015b52:	4605      	mov	r5, r0
 8015b54:	f7fd fc1a 	bl	801338c <ucdr_alignment>
 8015b58:	68e2      	ldr	r2, [r4, #12]
 8015b5a:	3205      	adds	r2, #5
 8015b5c:	1953      	adds	r3, r2, r5
 8015b5e:	4418      	add	r0, r3
 8015b60:	bd38      	pop	{r3, r4, r5, pc}
 8015b62:	bf00      	nop

08015b64 <max_serialized_size_std_msgs__msg__Header>:
 8015b64:	b510      	push	{r4, lr}
 8015b66:	2301      	movs	r3, #1
 8015b68:	4604      	mov	r4, r0
 8015b6a:	7003      	strb	r3, [r0, #0]
 8015b6c:	f000 f8c6 	bl	8015cfc <max_serialized_size_builtin_interfaces__msg__Time>
 8015b70:	2300      	movs	r3, #0
 8015b72:	7023      	strb	r3, [r4, #0]
 8015b74:	bd10      	pop	{r4, pc}
 8015b76:	bf00      	nop

08015b78 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8015b78:	4800      	ldr	r0, [pc, #0]	@ (8015b7c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8015b7a:	4770      	bx	lr
 8015b7c:	20000acc 	.word	0x20000acc

08015b80 <_Int32__max_serialized_size>:
 8015b80:	b508      	push	{r3, lr}
 8015b82:	2104      	movs	r1, #4
 8015b84:	2000      	movs	r0, #0
 8015b86:	f7fd fc01 	bl	801338c <ucdr_alignment>
 8015b8a:	3004      	adds	r0, #4
 8015b8c:	bd08      	pop	{r3, pc}
 8015b8e:	bf00      	nop

08015b90 <_Int32__cdr_deserialize>:
 8015b90:	b109      	cbz	r1, 8015b96 <_Int32__cdr_deserialize+0x6>
 8015b92:	f7fc bd8f 	b.w	80126b4 <ucdr_deserialize_int32_t>
 8015b96:	4608      	mov	r0, r1
 8015b98:	4770      	bx	lr
 8015b9a:	bf00      	nop

08015b9c <get_serialized_size_std_msgs__msg__Int32>:
 8015b9c:	b138      	cbz	r0, 8015bae <get_serialized_size_std_msgs__msg__Int32+0x12>
 8015b9e:	b508      	push	{r3, lr}
 8015ba0:	460b      	mov	r3, r1
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	2104      	movs	r1, #4
 8015ba6:	f7fd fbf1 	bl	801338c <ucdr_alignment>
 8015baa:	3004      	adds	r0, #4
 8015bac:	bd08      	pop	{r3, pc}
 8015bae:	4770      	bx	lr

08015bb0 <_Int32__cdr_serialize>:
 8015bb0:	460a      	mov	r2, r1
 8015bb2:	b118      	cbz	r0, 8015bbc <_Int32__cdr_serialize+0xc>
 8015bb4:	6801      	ldr	r1, [r0, #0]
 8015bb6:	4610      	mov	r0, r2
 8015bb8:	f7fc bce4 	b.w	8012584 <ucdr_serialize_int32_t>
 8015bbc:	4770      	bx	lr
 8015bbe:	bf00      	nop

08015bc0 <_Int32__get_serialized_size>:
 8015bc0:	b130      	cbz	r0, 8015bd0 <_Int32__get_serialized_size+0x10>
 8015bc2:	b508      	push	{r3, lr}
 8015bc4:	2104      	movs	r1, #4
 8015bc6:	2000      	movs	r0, #0
 8015bc8:	f7fd fbe0 	bl	801338c <ucdr_alignment>
 8015bcc:	3004      	adds	r0, #4
 8015bce:	bd08      	pop	{r3, pc}
 8015bd0:	4770      	bx	lr
 8015bd2:	bf00      	nop

08015bd4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8015bd4:	4800      	ldr	r0, [pc, #0]	@ (8015bd8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8015bd6:	4770      	bx	lr
 8015bd8:	20000af4 	.word	0x20000af4

08015bdc <_Int64__max_serialized_size>:
 8015bdc:	b508      	push	{r3, lr}
 8015bde:	2108      	movs	r1, #8
 8015be0:	2000      	movs	r0, #0
 8015be2:	f7fd fbd3 	bl	801338c <ucdr_alignment>
 8015be6:	3008      	adds	r0, #8
 8015be8:	bd08      	pop	{r3, pc}
 8015bea:	bf00      	nop

08015bec <_Int64__cdr_deserialize>:
 8015bec:	b109      	cbz	r1, 8015bf2 <_Int64__cdr_deserialize+0x6>
 8015bee:	f7fc bec1 	b.w	8012974 <ucdr_deserialize_int64_t>
 8015bf2:	4608      	mov	r0, r1
 8015bf4:	4770      	bx	lr
 8015bf6:	bf00      	nop

08015bf8 <_Int64__get_serialized_size>:
 8015bf8:	b130      	cbz	r0, 8015c08 <_Int64__get_serialized_size+0x10>
 8015bfa:	b508      	push	{r3, lr}
 8015bfc:	2108      	movs	r1, #8
 8015bfe:	2000      	movs	r0, #0
 8015c00:	f7fd fbc4 	bl	801338c <ucdr_alignment>
 8015c04:	3008      	adds	r0, #8
 8015c06:	bd08      	pop	{r3, pc}
 8015c08:	4770      	bx	lr
 8015c0a:	bf00      	nop

08015c0c <_Int64__cdr_serialize>:
 8015c0c:	b120      	cbz	r0, 8015c18 <_Int64__cdr_serialize+0xc>
 8015c0e:	e9d0 2300 	ldrd	r2, r3, [r0]
 8015c12:	4608      	mov	r0, r1
 8015c14:	f7fc bdde 	b.w	80127d4 <ucdr_serialize_int64_t>
 8015c18:	4770      	bx	lr
 8015c1a:	bf00      	nop

08015c1c <get_serialized_size_std_msgs__msg__Int64>:
 8015c1c:	b138      	cbz	r0, 8015c2e <get_serialized_size_std_msgs__msg__Int64+0x12>
 8015c1e:	b508      	push	{r3, lr}
 8015c20:	460b      	mov	r3, r1
 8015c22:	4618      	mov	r0, r3
 8015c24:	2108      	movs	r1, #8
 8015c26:	f7fd fbb1 	bl	801338c <ucdr_alignment>
 8015c2a:	3008      	adds	r0, #8
 8015c2c:	bd08      	pop	{r3, pc}
 8015c2e:	4770      	bx	lr

08015c30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 8015c30:	4800      	ldr	r0, [pc, #0]	@ (8015c34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int64+0x4>)
 8015c32:	4770      	bx	lr
 8015c34:	20000b1c 	.word	0x20000b1c

08015c38 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8015c38:	f007 bd00 	b.w	801d63c <builtin_interfaces__msg__Time__init>

08015c3c <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8015c3c:	f007 bd02 	b.w	801d644 <builtin_interfaces__msg__Time__fini>

08015c40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8015c40:	4b04      	ldr	r3, [pc, #16]	@ (8015c54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8015c42:	681a      	ldr	r2, [r3, #0]
 8015c44:	b10a      	cbz	r2, 8015c4a <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8015c46:	4803      	ldr	r0, [pc, #12]	@ (8015c54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8015c48:	4770      	bx	lr
 8015c4a:	4a03      	ldr	r2, [pc, #12]	@ (8015c58 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8015c4c:	4801      	ldr	r0, [pc, #4]	@ (8015c54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8015c4e:	6812      	ldr	r2, [r2, #0]
 8015c50:	601a      	str	r2, [r3, #0]
 8015c52:	4770      	bx	lr
 8015c54:	20000bbc 	.word	0x20000bbc
 8015c58:	200002cc 	.word	0x200002cc

08015c5c <get_serialized_size_builtin_interfaces__msg__Time>:
 8015c5c:	b180      	cbz	r0, 8015c80 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8015c5e:	b538      	push	{r3, r4, r5, lr}
 8015c60:	460d      	mov	r5, r1
 8015c62:	4628      	mov	r0, r5
 8015c64:	2104      	movs	r1, #4
 8015c66:	f7fd fb91 	bl	801338c <ucdr_alignment>
 8015c6a:	1d2b      	adds	r3, r5, #4
 8015c6c:	181c      	adds	r4, r3, r0
 8015c6e:	2104      	movs	r1, #4
 8015c70:	4620      	mov	r0, r4
 8015c72:	f7fd fb8b 	bl	801338c <ucdr_alignment>
 8015c76:	f1c5 0504 	rsb	r5, r5, #4
 8015c7a:	4428      	add	r0, r5
 8015c7c:	4420      	add	r0, r4
 8015c7e:	bd38      	pop	{r3, r4, r5, pc}
 8015c80:	4770      	bx	lr
 8015c82:	bf00      	nop

08015c84 <_Time__cdr_deserialize>:
 8015c84:	b538      	push	{r3, r4, r5, lr}
 8015c86:	460c      	mov	r4, r1
 8015c88:	b141      	cbz	r1, 8015c9c <_Time__cdr_deserialize+0x18>
 8015c8a:	4605      	mov	r5, r0
 8015c8c:	f7fc fd12 	bl	80126b4 <ucdr_deserialize_int32_t>
 8015c90:	1d21      	adds	r1, r4, #4
 8015c92:	4628      	mov	r0, r5
 8015c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c98:	f7fc b98a 	b.w	8011fb0 <ucdr_deserialize_uint32_t>
 8015c9c:	4608      	mov	r0, r1
 8015c9e:	bd38      	pop	{r3, r4, r5, pc}

08015ca0 <_Time__cdr_serialize>:
 8015ca0:	b160      	cbz	r0, 8015cbc <_Time__cdr_serialize+0x1c>
 8015ca2:	b538      	push	{r3, r4, r5, lr}
 8015ca4:	460d      	mov	r5, r1
 8015ca6:	4604      	mov	r4, r0
 8015ca8:	6801      	ldr	r1, [r0, #0]
 8015caa:	4628      	mov	r0, r5
 8015cac:	f7fc fc6a 	bl	8012584 <ucdr_serialize_int32_t>
 8015cb0:	6861      	ldr	r1, [r4, #4]
 8015cb2:	4628      	mov	r0, r5
 8015cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015cb8:	f7fc b84a 	b.w	8011d50 <ucdr_serialize_uint32_t>
 8015cbc:	4770      	bx	lr
 8015cbe:	bf00      	nop

08015cc0 <_Time__get_serialized_size>:
 8015cc0:	b160      	cbz	r0, 8015cdc <_Time__get_serialized_size+0x1c>
 8015cc2:	b510      	push	{r4, lr}
 8015cc4:	2104      	movs	r1, #4
 8015cc6:	2000      	movs	r0, #0
 8015cc8:	f7fd fb60 	bl	801338c <ucdr_alignment>
 8015ccc:	1d04      	adds	r4, r0, #4
 8015cce:	2104      	movs	r1, #4
 8015cd0:	4620      	mov	r0, r4
 8015cd2:	f7fd fb5b 	bl	801338c <ucdr_alignment>
 8015cd6:	3004      	adds	r0, #4
 8015cd8:	4420      	add	r0, r4
 8015cda:	bd10      	pop	{r4, pc}
 8015cdc:	4770      	bx	lr
 8015cde:	bf00      	nop

08015ce0 <_Time__max_serialized_size>:
 8015ce0:	b510      	push	{r4, lr}
 8015ce2:	2104      	movs	r1, #4
 8015ce4:	2000      	movs	r0, #0
 8015ce6:	f7fd fb51 	bl	801338c <ucdr_alignment>
 8015cea:	1d04      	adds	r4, r0, #4
 8015cec:	2104      	movs	r1, #4
 8015cee:	4620      	mov	r0, r4
 8015cf0:	f7fd fb4c 	bl	801338c <ucdr_alignment>
 8015cf4:	3004      	adds	r0, #4
 8015cf6:	4420      	add	r0, r4
 8015cf8:	bd10      	pop	{r4, pc}
 8015cfa:	bf00      	nop

08015cfc <max_serialized_size_builtin_interfaces__msg__Time>:
 8015cfc:	b538      	push	{r3, r4, r5, lr}
 8015cfe:	460c      	mov	r4, r1
 8015d00:	2301      	movs	r3, #1
 8015d02:	7003      	strb	r3, [r0, #0]
 8015d04:	2104      	movs	r1, #4
 8015d06:	4620      	mov	r0, r4
 8015d08:	f7fd fb40 	bl	801338c <ucdr_alignment>
 8015d0c:	1d25      	adds	r5, r4, #4
 8015d0e:	4405      	add	r5, r0
 8015d10:	2104      	movs	r1, #4
 8015d12:	4628      	mov	r0, r5
 8015d14:	f7fd fb3a 	bl	801338c <ucdr_alignment>
 8015d18:	f1c4 0404 	rsb	r4, r4, #4
 8015d1c:	4420      	add	r0, r4
 8015d1e:	4428      	add	r0, r5
 8015d20:	bd38      	pop	{r3, r4, r5, pc}
 8015d22:	bf00      	nop

08015d24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8015d24:	4800      	ldr	r0, [pc, #0]	@ (8015d28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8015d26:	4770      	bx	lr
 8015d28:	20000bc8 	.word	0x20000bc8

08015d2c <geometry_msgs__msg__Twist__init>:
 8015d2c:	b570      	push	{r4, r5, r6, lr}
 8015d2e:	4605      	mov	r5, r0
 8015d30:	b1a8      	cbz	r0, 8015d5e <geometry_msgs__msg__Twist__init+0x32>
 8015d32:	f000 f82b 	bl	8015d8c <geometry_msgs__msg__Vector3__init>
 8015d36:	4604      	mov	r4, r0
 8015d38:	b140      	cbz	r0, 8015d4c <geometry_msgs__msg__Twist__init+0x20>
 8015d3a:	f105 0618 	add.w	r6, r5, #24
 8015d3e:	4630      	mov	r0, r6
 8015d40:	f000 f824 	bl	8015d8c <geometry_msgs__msg__Vector3__init>
 8015d44:	4604      	mov	r4, r0
 8015d46:	b168      	cbz	r0, 8015d64 <geometry_msgs__msg__Twist__init+0x38>
 8015d48:	4620      	mov	r0, r4
 8015d4a:	bd70      	pop	{r4, r5, r6, pc}
 8015d4c:	4628      	mov	r0, r5
 8015d4e:	f000 f821 	bl	8015d94 <geometry_msgs__msg__Vector3__fini>
 8015d52:	f105 0018 	add.w	r0, r5, #24
 8015d56:	f000 f81d 	bl	8015d94 <geometry_msgs__msg__Vector3__fini>
 8015d5a:	4620      	mov	r0, r4
 8015d5c:	bd70      	pop	{r4, r5, r6, pc}
 8015d5e:	4604      	mov	r4, r0
 8015d60:	4620      	mov	r0, r4
 8015d62:	bd70      	pop	{r4, r5, r6, pc}
 8015d64:	4628      	mov	r0, r5
 8015d66:	f000 f815 	bl	8015d94 <geometry_msgs__msg__Vector3__fini>
 8015d6a:	4630      	mov	r0, r6
 8015d6c:	f000 f812 	bl	8015d94 <geometry_msgs__msg__Vector3__fini>
 8015d70:	e7ea      	b.n	8015d48 <geometry_msgs__msg__Twist__init+0x1c>
 8015d72:	bf00      	nop

08015d74 <geometry_msgs__msg__Twist__fini>:
 8015d74:	b148      	cbz	r0, 8015d8a <geometry_msgs__msg__Twist__fini+0x16>
 8015d76:	b510      	push	{r4, lr}
 8015d78:	4604      	mov	r4, r0
 8015d7a:	f000 f80b 	bl	8015d94 <geometry_msgs__msg__Vector3__fini>
 8015d7e:	f104 0018 	add.w	r0, r4, #24
 8015d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d86:	f000 b805 	b.w	8015d94 <geometry_msgs__msg__Vector3__fini>
 8015d8a:	4770      	bx	lr

08015d8c <geometry_msgs__msg__Vector3__init>:
 8015d8c:	3800      	subs	r0, #0
 8015d8e:	bf18      	it	ne
 8015d90:	2001      	movne	r0, #1
 8015d92:	4770      	bx	lr

08015d94 <geometry_msgs__msg__Vector3__fini>:
 8015d94:	4770      	bx	lr
 8015d96:	bf00      	nop

08015d98 <ucdr_serialize_sequence_char>:
 8015d98:	b570      	push	{r4, r5, r6, lr}
 8015d9a:	4615      	mov	r5, r2
 8015d9c:	460e      	mov	r6, r1
 8015d9e:	7d01      	ldrb	r1, [r0, #20]
 8015da0:	4604      	mov	r4, r0
 8015da2:	f7fc f86d 	bl	8011e80 <ucdr_serialize_endian_uint32_t>
 8015da6:	b90d      	cbnz	r5, 8015dac <ucdr_serialize_sequence_char+0x14>
 8015da8:	2001      	movs	r0, #1
 8015daa:	bd70      	pop	{r4, r5, r6, pc}
 8015dac:	7d21      	ldrb	r1, [r4, #20]
 8015dae:	462b      	mov	r3, r5
 8015db0:	4632      	mov	r2, r6
 8015db2:	4620      	mov	r0, r4
 8015db4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015db8:	f007 bc46 	b.w	801d648 <ucdr_serialize_endian_array_char>

08015dbc <ucdr_deserialize_sequence_char>:
 8015dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dc0:	461d      	mov	r5, r3
 8015dc2:	4616      	mov	r6, r2
 8015dc4:	460f      	mov	r7, r1
 8015dc6:	461a      	mov	r2, r3
 8015dc8:	7d01      	ldrb	r1, [r0, #20]
 8015dca:	4604      	mov	r4, r0
 8015dcc:	f7fc f980 	bl	80120d0 <ucdr_deserialize_endian_uint32_t>
 8015dd0:	682b      	ldr	r3, [r5, #0]
 8015dd2:	429e      	cmp	r6, r3
 8015dd4:	bf3c      	itt	cc
 8015dd6:	2201      	movcc	r2, #1
 8015dd8:	75a2      	strbcc	r2, [r4, #22]
 8015dda:	b913      	cbnz	r3, 8015de2 <ucdr_deserialize_sequence_char+0x26>
 8015ddc:	2001      	movs	r0, #1
 8015dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015de2:	7d21      	ldrb	r1, [r4, #20]
 8015de4:	463a      	mov	r2, r7
 8015de6:	4620      	mov	r0, r4
 8015de8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015dec:	f007 bc5e 	b.w	801d6ac <ucdr_deserialize_endian_array_char>

08015df0 <ucdr_serialize_sequence_uint8_t>:
 8015df0:	b570      	push	{r4, r5, r6, lr}
 8015df2:	4615      	mov	r5, r2
 8015df4:	460e      	mov	r6, r1
 8015df6:	7d01      	ldrb	r1, [r0, #20]
 8015df8:	4604      	mov	r4, r0
 8015dfa:	f7fc f841 	bl	8011e80 <ucdr_serialize_endian_uint32_t>
 8015dfe:	b90d      	cbnz	r5, 8015e04 <ucdr_serialize_sequence_uint8_t+0x14>
 8015e00:	2001      	movs	r0, #1
 8015e02:	bd70      	pop	{r4, r5, r6, pc}
 8015e04:	7d21      	ldrb	r1, [r4, #20]
 8015e06:	462b      	mov	r3, r5
 8015e08:	4632      	mov	r2, r6
 8015e0a:	4620      	mov	r0, r4
 8015e0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e10:	f007 bcb0 	b.w	801d774 <ucdr_serialize_endian_array_uint8_t>

08015e14 <ucdr_deserialize_sequence_uint8_t>:
 8015e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e18:	461d      	mov	r5, r3
 8015e1a:	4616      	mov	r6, r2
 8015e1c:	460f      	mov	r7, r1
 8015e1e:	461a      	mov	r2, r3
 8015e20:	7d01      	ldrb	r1, [r0, #20]
 8015e22:	4604      	mov	r4, r0
 8015e24:	f7fc f954 	bl	80120d0 <ucdr_deserialize_endian_uint32_t>
 8015e28:	682b      	ldr	r3, [r5, #0]
 8015e2a:	429e      	cmp	r6, r3
 8015e2c:	bf3c      	itt	cc
 8015e2e:	2201      	movcc	r2, #1
 8015e30:	75a2      	strbcc	r2, [r4, #22]
 8015e32:	b913      	cbnz	r3, 8015e3a <ucdr_deserialize_sequence_uint8_t+0x26>
 8015e34:	2001      	movs	r0, #1
 8015e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e3a:	7d21      	ldrb	r1, [r4, #20]
 8015e3c:	463a      	mov	r2, r7
 8015e3e:	4620      	mov	r0, r4
 8015e40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e44:	f007 bcfa 	b.w	801d83c <ucdr_deserialize_endian_array_uint8_t>

08015e48 <ucdr_serialize_sequence_float>:
 8015e48:	b570      	push	{r4, r5, r6, lr}
 8015e4a:	4615      	mov	r5, r2
 8015e4c:	460e      	mov	r6, r1
 8015e4e:	7d01      	ldrb	r1, [r0, #20]
 8015e50:	4604      	mov	r4, r0
 8015e52:	f7fc f815 	bl	8011e80 <ucdr_serialize_endian_uint32_t>
 8015e56:	b90d      	cbnz	r5, 8015e5c <ucdr_serialize_sequence_float+0x14>
 8015e58:	2001      	movs	r0, #1
 8015e5a:	bd70      	pop	{r4, r5, r6, pc}
 8015e5c:	7d21      	ldrb	r1, [r4, #20]
 8015e5e:	462b      	mov	r3, r5
 8015e60:	4632      	mov	r2, r6
 8015e62:	4620      	mov	r0, r4
 8015e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e68:	f007 bd1a 	b.w	801d8a0 <ucdr_serialize_endian_array_float>

08015e6c <ucdr_deserialize_sequence_float>:
 8015e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e70:	461d      	mov	r5, r3
 8015e72:	4616      	mov	r6, r2
 8015e74:	460f      	mov	r7, r1
 8015e76:	461a      	mov	r2, r3
 8015e78:	7d01      	ldrb	r1, [r0, #20]
 8015e7a:	4604      	mov	r4, r0
 8015e7c:	f7fc f928 	bl	80120d0 <ucdr_deserialize_endian_uint32_t>
 8015e80:	682b      	ldr	r3, [r5, #0]
 8015e82:	429e      	cmp	r6, r3
 8015e84:	bf3c      	itt	cc
 8015e86:	2201      	movcc	r2, #1
 8015e88:	75a2      	strbcc	r2, [r4, #22]
 8015e8a:	b913      	cbnz	r3, 8015e92 <ucdr_deserialize_sequence_float+0x26>
 8015e8c:	2001      	movs	r0, #1
 8015e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e92:	7d21      	ldrb	r1, [r4, #20]
 8015e94:	463a      	mov	r2, r7
 8015e96:	4620      	mov	r0, r4
 8015e98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e9c:	f007 bd54 	b.w	801d948 <ucdr_deserialize_endian_array_float>

08015ea0 <uxr_buffer_delete_entity>:
 8015ea0:	b510      	push	{r4, lr}
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	b08e      	sub	sp, #56	@ 0x38
 8015ea6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8015eaa:	2303      	movs	r3, #3
 8015eac:	9300      	str	r3, [sp, #0]
 8015eae:	2204      	movs	r2, #4
 8015eb0:	ab06      	add	r3, sp, #24
 8015eb2:	4604      	mov	r4, r0
 8015eb4:	9103      	str	r1, [sp, #12]
 8015eb6:	f001 f951 	bl	801715c <uxr_prepare_stream_to_write_submessage>
 8015eba:	b918      	cbnz	r0, 8015ec4 <uxr_buffer_delete_entity+0x24>
 8015ebc:	4604      	mov	r4, r0
 8015ebe:	4620      	mov	r0, r4
 8015ec0:	b00e      	add	sp, #56	@ 0x38
 8015ec2:	bd10      	pop	{r4, pc}
 8015ec4:	9902      	ldr	r1, [sp, #8]
 8015ec6:	aa05      	add	r2, sp, #20
 8015ec8:	4620      	mov	r0, r4
 8015eca:	f001 fa7d 	bl	80173c8 <uxr_init_base_object_request>
 8015ece:	a905      	add	r1, sp, #20
 8015ed0:	4604      	mov	r4, r0
 8015ed2:	a806      	add	r0, sp, #24
 8015ed4:	f002 fcce 	bl	8018874 <uxr_serialize_DELETE_Payload>
 8015ed8:	4620      	mov	r0, r4
 8015eda:	b00e      	add	sp, #56	@ 0x38
 8015edc:	bd10      	pop	{r4, pc}
 8015ede:	bf00      	nop

08015ee0 <uxr_common_create_entity>:
 8015ee0:	b510      	push	{r4, lr}
 8015ee2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8015ee6:	b08c      	sub	sp, #48	@ 0x30
 8015ee8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8015eec:	f1bc 0f01 	cmp.w	ip, #1
 8015ef0:	bf0c      	ite	eq
 8015ef2:	f003 0201 	andeq.w	r2, r3, #1
 8015ef6:	2200      	movne	r2, #0
 8015ef8:	330e      	adds	r3, #14
 8015efa:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8015efe:	9101      	str	r1, [sp, #4]
 8015f00:	441a      	add	r2, r3
 8015f02:	2301      	movs	r3, #1
 8015f04:	9300      	str	r3, [sp, #0]
 8015f06:	9903      	ldr	r1, [sp, #12]
 8015f08:	ab04      	add	r3, sp, #16
 8015f0a:	b292      	uxth	r2, r2
 8015f0c:	4604      	mov	r4, r0
 8015f0e:	f001 f925 	bl	801715c <uxr_prepare_stream_to_write_submessage>
 8015f12:	b918      	cbnz	r0, 8015f1c <uxr_common_create_entity+0x3c>
 8015f14:	4604      	mov	r4, r0
 8015f16:	4620      	mov	r0, r4
 8015f18:	b00c      	add	sp, #48	@ 0x30
 8015f1a:	bd10      	pop	{r4, pc}
 8015f1c:	9902      	ldr	r1, [sp, #8]
 8015f1e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015f20:	4620      	mov	r0, r4
 8015f22:	f001 fa51 	bl	80173c8 <uxr_init_base_object_request>
 8015f26:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8015f28:	4604      	mov	r4, r0
 8015f2a:	a804      	add	r0, sp, #16
 8015f2c:	f002 fbfe 	bl	801872c <uxr_serialize_CREATE_Payload>
 8015f30:	4620      	mov	r0, r4
 8015f32:	b00c      	add	sp, #48	@ 0x30
 8015f34:	bd10      	pop	{r4, pc}
 8015f36:	bf00      	nop

08015f38 <uxr_buffer_create_participant_bin>:
 8015f38:	b570      	push	{r4, r5, r6, lr}
 8015f3a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8015f3e:	ac11      	add	r4, sp, #68	@ 0x44
 8015f40:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8015f44:	2303      	movs	r3, #3
 8015f46:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8015f4a:	7223      	strb	r3, [r4, #8]
 8015f4c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8015f4e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8015f52:	2201      	movs	r2, #1
 8015f54:	2100      	movs	r1, #0
 8015f56:	4605      	mov	r5, r0
 8015f58:	7122      	strb	r2, [r4, #4]
 8015f5a:	f88d 1014 	strb.w	r1, [sp, #20]
 8015f5e:	b1cb      	cbz	r3, 8015f94 <uxr_buffer_create_participant_bin+0x5c>
 8015f60:	f88d 201c 	strb.w	r2, [sp, #28]
 8015f64:	9308      	str	r3, [sp, #32]
 8015f66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015f6a:	a915      	add	r1, sp, #84	@ 0x54
 8015f6c:	a809      	add	r0, sp, #36	@ 0x24
 8015f6e:	f7fd fa09 	bl	8013384 <ucdr_init_buffer>
 8015f72:	a905      	add	r1, sp, #20
 8015f74:	a809      	add	r0, sp, #36	@ 0x24
 8015f76:	f001 ffbb 	bl	8017ef0 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8015f7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015f7c:	9600      	str	r6, [sp, #0]
 8015f7e:	9401      	str	r4, [sp, #4]
 8015f80:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015f84:	60e3      	str	r3, [r4, #12]
 8015f86:	4628      	mov	r0, r5
 8015f88:	b29b      	uxth	r3, r3
 8015f8a:	f7ff ffa9 	bl	8015ee0 <uxr_common_create_entity>
 8015f8e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8015f92:	bd70      	pop	{r4, r5, r6, pc}
 8015f94:	f88d 301c 	strb.w	r3, [sp, #28]
 8015f98:	e7e5      	b.n	8015f66 <uxr_buffer_create_participant_bin+0x2e>
 8015f9a:	bf00      	nop

08015f9c <uxr_buffer_create_topic_bin>:
 8015f9c:	b570      	push	{r4, r5, r6, lr}
 8015f9e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8015fa2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8015fa6:	9105      	str	r1, [sp, #20]
 8015fa8:	4605      	mov	r5, r0
 8015faa:	a997      	add	r1, sp, #604	@ 0x25c
 8015fac:	4618      	mov	r0, r3
 8015fae:	2302      	movs	r3, #2
 8015fb0:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8015fb4:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8015fb8:	f000 f996 	bl	80162e8 <uxr_object_id_to_raw>
 8015fbc:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8015fbe:	9306      	str	r3, [sp, #24]
 8015fc0:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8015fc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8015fc4:	2303      	movs	r3, #3
 8015fc6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8015fca:	2301      	movs	r3, #1
 8015fcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015fd0:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8015fd4:	a917      	add	r1, sp, #92	@ 0x5c
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	a80b      	add	r0, sp, #44	@ 0x2c
 8015fda:	f88d 301c 	strb.w	r3, [sp, #28]
 8015fde:	f7fd f9d1 	bl	8013384 <ucdr_init_buffer>
 8015fe2:	a906      	add	r1, sp, #24
 8015fe4:	a80b      	add	r0, sp, #44	@ 0x2c
 8015fe6:	f001 ffa5 	bl	8017f34 <uxr_serialize_OBJK_Topic_Binary>
 8015fea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015fec:	9316      	str	r3, [sp, #88]	@ 0x58
 8015fee:	ac13      	add	r4, sp, #76	@ 0x4c
 8015ff0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8015ff4:	9600      	str	r6, [sp, #0]
 8015ff6:	9401      	str	r4, [sp, #4]
 8015ff8:	b29b      	uxth	r3, r3
 8015ffa:	4628      	mov	r0, r5
 8015ffc:	f7ff ff70 	bl	8015ee0 <uxr_common_create_entity>
 8016000:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8016004:	bd70      	pop	{r4, r5, r6, pc}
 8016006:	bf00      	nop

08016008 <uxr_buffer_create_publisher_bin>:
 8016008:	b5f0      	push	{r4, r5, r6, r7, lr}
 801600a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 801600e:	4605      	mov	r5, r0
 8016010:	9105      	str	r1, [sp, #20]
 8016012:	4618      	mov	r0, r3
 8016014:	2603      	movs	r6, #3
 8016016:	a992      	add	r1, sp, #584	@ 0x248
 8016018:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801601c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8016020:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8016024:	f000 f960 	bl	80162e8 <uxr_object_id_to_raw>
 8016028:	2300      	movs	r3, #0
 801602a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801602e:	a912      	add	r1, sp, #72	@ 0x48
 8016030:	a806      	add	r0, sp, #24
 8016032:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8016036:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 801603a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 801603e:	f7fd f9a1 	bl	8013384 <ucdr_init_buffer>
 8016042:	a993      	add	r1, sp, #588	@ 0x24c
 8016044:	a806      	add	r0, sp, #24
 8016046:	f002 f829 	bl	801809c <uxr_serialize_OBJK_Publisher_Binary>
 801604a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801604c:	9311      	str	r3, [sp, #68]	@ 0x44
 801604e:	ac0e      	add	r4, sp, #56	@ 0x38
 8016050:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8016054:	9700      	str	r7, [sp, #0]
 8016056:	9401      	str	r4, [sp, #4]
 8016058:	b29b      	uxth	r3, r3
 801605a:	4628      	mov	r0, r5
 801605c:	f7ff ff40 	bl	8015ee0 <uxr_common_create_entity>
 8016060:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8016064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016066:	bf00      	nop

08016068 <uxr_buffer_create_subscriber_bin>:
 8016068:	b570      	push	{r4, r5, r6, lr}
 801606a:	f5ad 6d91 	sub.w	sp, sp, #1160	@ 0x488
 801606e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8016072:	9105      	str	r1, [sp, #20]
 8016074:	4605      	mov	r5, r0
 8016076:	a992      	add	r1, sp, #584	@ 0x248
 8016078:	4618      	mov	r0, r3
 801607a:	2304      	movs	r3, #4
 801607c:	f89d 6498 	ldrb.w	r6, [sp, #1176]	@ 0x498
 8016080:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
 8016084:	f000 f930 	bl	80162e8 <uxr_object_id_to_raw>
 8016088:	2300      	movs	r3, #0
 801608a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801608e:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8016092:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8016096:	a912      	add	r1, sp, #72	@ 0x48
 8016098:	2303      	movs	r3, #3
 801609a:	a806      	add	r0, sp, #24
 801609c:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80160a0:	f7fd f970 	bl	8013384 <ucdr_init_buffer>
 80160a4:	a993      	add	r1, sp, #588	@ 0x24c
 80160a6:	a806      	add	r0, sp, #24
 80160a8:	f002 f8a8 	bl	80181fc <uxr_serialize_OBJK_Subscriber_Binary>
 80160ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80160ae:	9311      	str	r3, [sp, #68]	@ 0x44
 80160b0:	ac0e      	add	r4, sp, #56	@ 0x38
 80160b2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80160b6:	9600      	str	r6, [sp, #0]
 80160b8:	9401      	str	r4, [sp, #4]
 80160ba:	b29b      	uxth	r3, r3
 80160bc:	4628      	mov	r0, r5
 80160be:	f7ff ff0f 	bl	8015ee0 <uxr_common_create_entity>
 80160c2:	f50d 6d91 	add.w	sp, sp, #1160	@ 0x488
 80160c6:	bd70      	pop	{r4, r5, r6, pc}

080160c8 <uxr_buffer_create_datawriter_bin>:
 80160c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160cc:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80160d0:	ac1d      	add	r4, sp, #116	@ 0x74
 80160d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80160d6:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 80160da:	9105      	str	r1, [sp, #20]
 80160dc:	4606      	mov	r6, r0
 80160de:	a9a1      	add	r1, sp, #644	@ 0x284
 80160e0:	4618      	mov	r0, r3
 80160e2:	2305      	movs	r3, #5
 80160e4:	7123      	strb	r3, [r4, #4]
 80160e6:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 80160ea:	2703      	movs	r7, #3
 80160ec:	f000 f8fc 	bl	80162e8 <uxr_object_id_to_raw>
 80160f0:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 80160f2:	7227      	strb	r7, [r4, #8]
 80160f4:	a90e      	add	r1, sp, #56	@ 0x38
 80160f6:	f000 f8f7 	bl	80162e8 <uxr_object_id_to_raw>
 80160fa:	2300      	movs	r3, #0
 80160fc:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8016100:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8016104:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8016108:	3d00      	subs	r5, #0
 801610a:	bf18      	it	ne
 801610c:	2501      	movne	r5, #1
 801610e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8016112:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8016116:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801611a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801611e:	2301      	movs	r3, #1
 8016120:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8016124:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8016128:	bb8a      	cbnz	r2, 801618e <uxr_buffer_create_datawriter_bin+0xc6>
 801612a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801612e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8016132:	f04f 0c13 	mov.w	ip, #19
 8016136:	250b      	movs	r5, #11
 8016138:	2221      	movs	r2, #33	@ 0x21
 801613a:	2111      	movs	r1, #17
 801613c:	2009      	movs	r0, #9
 801613e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8016142:	b923      	cbnz	r3, 801614e <uxr_buffer_create_datawriter_bin+0x86>
 8016144:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8016148:	4672      	mov	r2, lr
 801614a:	4661      	mov	r1, ip
 801614c:	4628      	mov	r0, r5
 801614e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8016152:	2b01      	cmp	r3, #1
 8016154:	d025      	beq.n	80161a2 <uxr_buffer_create_datawriter_bin+0xda>
 8016156:	2b03      	cmp	r3, #3
 8016158:	d029      	beq.n	80161ae <uxr_buffer_create_datawriter_bin+0xe6>
 801615a:	b32b      	cbz	r3, 80161a8 <uxr_buffer_create_datawriter_bin+0xe0>
 801615c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016160:	a921      	add	r1, sp, #132	@ 0x84
 8016162:	a806      	add	r0, sp, #24
 8016164:	f7fd f90e 	bl	8013384 <ucdr_init_buffer>
 8016168:	a90e      	add	r1, sp, #56	@ 0x38
 801616a:	a806      	add	r0, sp, #24
 801616c:	f002 f8f8 	bl	8018360 <uxr_serialize_OBJK_DataWriter_Binary>
 8016170:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016172:	f8cd 8000 	str.w	r8, [sp]
 8016176:	9401      	str	r4, [sp, #4]
 8016178:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801617c:	60e3      	str	r3, [r4, #12]
 801617e:	4630      	mov	r0, r6
 8016180:	b29b      	uxth	r3, r3
 8016182:	f7ff fead 	bl	8015ee0 <uxr_common_create_entity>
 8016186:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801618a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801618e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8016192:	f04f 0c12 	mov.w	ip, #18
 8016196:	250a      	movs	r5, #10
 8016198:	2220      	movs	r2, #32
 801619a:	2110      	movs	r1, #16
 801619c:	2008      	movs	r0, #8
 801619e:	2702      	movs	r7, #2
 80161a0:	e7cd      	b.n	801613e <uxr_buffer_create_datawriter_bin+0x76>
 80161a2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80161a6:	e7d9      	b.n	801615c <uxr_buffer_create_datawriter_bin+0x94>
 80161a8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80161ac:	e7d6      	b.n	801615c <uxr_buffer_create_datawriter_bin+0x94>
 80161ae:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80161b2:	e7d3      	b.n	801615c <uxr_buffer_create_datawriter_bin+0x94>

080161b4 <uxr_buffer_create_datareader_bin>:
 80161b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161b8:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80161bc:	ac1f      	add	r4, sp, #124	@ 0x7c
 80161be:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80161c2:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	@ 0x2b0
 80161c6:	9105      	str	r1, [sp, #20]
 80161c8:	4606      	mov	r6, r0
 80161ca:	a9a3      	add	r1, sp, #652	@ 0x28c
 80161cc:	4618      	mov	r0, r3
 80161ce:	2306      	movs	r3, #6
 80161d0:	7123      	strb	r3, [r4, #4]
 80161d2:	f89d 82b4 	ldrb.w	r8, [sp, #692]	@ 0x2b4
 80161d6:	2703      	movs	r7, #3
 80161d8:	f000 f886 	bl	80162e8 <uxr_object_id_to_raw>
 80161dc:	98aa      	ldr	r0, [sp, #680]	@ 0x2a8
 80161de:	7227      	strb	r7, [r4, #8]
 80161e0:	a90e      	add	r1, sp, #56	@ 0x38
 80161e2:	f000 f881 	bl	80162e8 <uxr_object_id_to_raw>
 80161e6:	2300      	movs	r3, #0
 80161e8:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 80161ec:	f89d 22ad 	ldrb.w	r2, [sp, #685]	@ 0x2ad
 80161f0:	f88d 3070 	strb.w	r3, [sp, #112]	@ 0x70
 80161f4:	3d00      	subs	r5, #0
 80161f6:	bf18      	it	ne
 80161f8:	2501      	movne	r5, #1
 80161fa:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 80161fe:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8016202:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8016206:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801620a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801620e:	2301      	movs	r3, #1
 8016210:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8016214:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8016218:	bb8a      	cbnz	r2, 801627e <uxr_buffer_create_datareader_bin+0xca>
 801621a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801621e:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8016222:	f04f 0c13 	mov.w	ip, #19
 8016226:	250b      	movs	r5, #11
 8016228:	2221      	movs	r2, #33	@ 0x21
 801622a:	2111      	movs	r1, #17
 801622c:	2009      	movs	r0, #9
 801622e:	f89d 32ae 	ldrb.w	r3, [sp, #686]	@ 0x2ae
 8016232:	b923      	cbnz	r3, 801623e <uxr_buffer_create_datareader_bin+0x8a>
 8016234:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8016238:	4672      	mov	r2, lr
 801623a:	4661      	mov	r1, ip
 801623c:	4628      	mov	r0, r5
 801623e:	f89d 32ac 	ldrb.w	r3, [sp, #684]	@ 0x2ac
 8016242:	2b01      	cmp	r3, #1
 8016244:	d025      	beq.n	8016292 <uxr_buffer_create_datareader_bin+0xde>
 8016246:	2b03      	cmp	r3, #3
 8016248:	d029      	beq.n	801629e <uxr_buffer_create_datareader_bin+0xea>
 801624a:	b32b      	cbz	r3, 8016298 <uxr_buffer_create_datareader_bin+0xe4>
 801624c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016250:	a923      	add	r1, sp, #140	@ 0x8c
 8016252:	a806      	add	r0, sp, #24
 8016254:	f7fd f896 	bl	8013384 <ucdr_init_buffer>
 8016258:	a90e      	add	r1, sp, #56	@ 0x38
 801625a:	a806      	add	r0, sp, #24
 801625c:	f002 f844 	bl	80182e8 <uxr_serialize_OBJK_DataReader_Binary>
 8016260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016262:	f8cd 8000 	str.w	r8, [sp]
 8016266:	9401      	str	r4, [sp, #4]
 8016268:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801626c:	60e3      	str	r3, [r4, #12]
 801626e:	4630      	mov	r0, r6
 8016270:	b29b      	uxth	r3, r3
 8016272:	f7ff fe35 	bl	8015ee0 <uxr_common_create_entity>
 8016276:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801627a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801627e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8016282:	f04f 0c12 	mov.w	ip, #18
 8016286:	250a      	movs	r5, #10
 8016288:	2220      	movs	r2, #32
 801628a:	2110      	movs	r1, #16
 801628c:	2008      	movs	r0, #8
 801628e:	2702      	movs	r7, #2
 8016290:	e7cd      	b.n	801622e <uxr_buffer_create_datareader_bin+0x7a>
 8016292:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8016296:	e7d9      	b.n	801624c <uxr_buffer_create_datareader_bin+0x98>
 8016298:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 801629c:	e7d6      	b.n	801624c <uxr_buffer_create_datareader_bin+0x98>
 801629e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80162a2:	e7d3      	b.n	801624c <uxr_buffer_create_datareader_bin+0x98>

080162a4 <uxr_object_id>:
 80162a4:	b082      	sub	sp, #8
 80162a6:	2300      	movs	r3, #0
 80162a8:	f88d 1006 	strb.w	r1, [sp, #6]
 80162ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80162b0:	f360 030f 	bfi	r3, r0, #0, #16
 80162b4:	f362 431f 	bfi	r3, r2, #16, #16
 80162b8:	4618      	mov	r0, r3
 80162ba:	b002      	add	sp, #8
 80162bc:	4770      	bx	lr
 80162be:	bf00      	nop

080162c0 <uxr_object_id_from_raw>:
 80162c0:	7843      	ldrb	r3, [r0, #1]
 80162c2:	7801      	ldrb	r1, [r0, #0]
 80162c4:	b082      	sub	sp, #8
 80162c6:	f003 020f 	and.w	r2, r3, #15
 80162ca:	f88d 2006 	strb.w	r2, [sp, #6]
 80162ce:	091b      	lsrs	r3, r3, #4
 80162d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80162d4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80162d8:	2000      	movs	r0, #0
 80162da:	f363 000f 	bfi	r0, r3, #0, #16
 80162de:	f362 401f 	bfi	r0, r2, #16, #16
 80162e2:	b002      	add	sp, #8
 80162e4:	4770      	bx	lr
 80162e6:	bf00      	nop

080162e8 <uxr_object_id_to_raw>:
 80162e8:	4602      	mov	r2, r0
 80162ea:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80162ee:	b082      	sub	sp, #8
 80162f0:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80162f4:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80162f8:	f881 c000 	strb.w	ip, [r1]
 80162fc:	7048      	strb	r0, [r1, #1]
 80162fe:	b002      	add	sp, #8
 8016300:	4770      	bx	lr
 8016302:	bf00      	nop

08016304 <on_get_fragmentation_info>:
 8016304:	b500      	push	{lr}
 8016306:	b08b      	sub	sp, #44	@ 0x2c
 8016308:	4601      	mov	r1, r0
 801630a:	2204      	movs	r2, #4
 801630c:	a802      	add	r0, sp, #8
 801630e:	f7fd f839 	bl	8013384 <ucdr_init_buffer>
 8016312:	f10d 0305 	add.w	r3, sp, #5
 8016316:	f10d 0206 	add.w	r2, sp, #6
 801631a:	a901      	add	r1, sp, #4
 801631c:	a802      	add	r0, sp, #8
 801631e:	f001 f9d5 	bl	80176cc <uxr_read_submessage_header>
 8016322:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8016326:	2b0d      	cmp	r3, #13
 8016328:	d003      	beq.n	8016332 <on_get_fragmentation_info+0x2e>
 801632a:	2000      	movs	r0, #0
 801632c:	b00b      	add	sp, #44	@ 0x2c
 801632e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016332:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8016336:	f013 0f02 	tst.w	r3, #2
 801633a:	bf14      	ite	ne
 801633c:	2002      	movne	r0, #2
 801633e:	2001      	moveq	r0, #1
 8016340:	b00b      	add	sp, #44	@ 0x2c
 8016342:	f85d fb04 	ldr.w	pc, [sp], #4
 8016346:	bf00      	nop

08016348 <read_submessage_get_info>:
 8016348:	b570      	push	{r4, r5, r6, lr}
 801634a:	2500      	movs	r5, #0
 801634c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8016350:	4604      	mov	r4, r0
 8016352:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8016356:	460e      	mov	r6, r1
 8016358:	a810      	add	r0, sp, #64	@ 0x40
 801635a:	4629      	mov	r1, r5
 801635c:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8016360:	f00a f8d6 	bl	8020510 <memset>
 8016364:	a903      	add	r1, sp, #12
 8016366:	4630      	mov	r0, r6
 8016368:	f002 fa70 	bl	801884c <uxr_deserialize_GET_INFO_Payload>
 801636c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8016370:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8016374:	4620      	mov	r0, r4
 8016376:	f001 f81f 	bl	80173b8 <uxr_session_header_offset>
 801637a:	462b      	mov	r3, r5
 801637c:	9000      	str	r0, [sp, #0]
 801637e:	220c      	movs	r2, #12
 8016380:	a905      	add	r1, sp, #20
 8016382:	a808      	add	r0, sp, #32
 8016384:	f7fc ffec 	bl	8013360 <ucdr_init_buffer_origin_offset>
 8016388:	a910      	add	r1, sp, #64	@ 0x40
 801638a:	a808      	add	r0, sp, #32
 801638c:	f002 fad0 	bl	8018930 <uxr_serialize_INFO_Payload>
 8016390:	9b08      	ldr	r3, [sp, #32]
 8016392:	462a      	mov	r2, r5
 8016394:	4629      	mov	r1, r5
 8016396:	4620      	mov	r0, r4
 8016398:	f000 ffb8 	bl	801730c <uxr_stamp_session_header>
 801639c:	a808      	add	r0, sp, #32
 801639e:	f7fd f81d 	bl	80133dc <ucdr_buffer_length>
 80163a2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80163a4:	4602      	mov	r2, r0
 80163a6:	a905      	add	r1, sp, #20
 80163a8:	e9d3 0400 	ldrd	r0, r4, [r3]
 80163ac:	47a0      	blx	r4
 80163ae:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 80163b2:	bd70      	pop	{r4, r5, r6, pc}

080163b4 <write_submessage_acknack.isra.0>:
 80163b4:	b570      	push	{r4, r5, r6, lr}
 80163b6:	b092      	sub	sp, #72	@ 0x48
 80163b8:	4605      	mov	r5, r0
 80163ba:	460e      	mov	r6, r1
 80163bc:	4614      	mov	r4, r2
 80163be:	f000 fffb 	bl	80173b8 <uxr_session_header_offset>
 80163c2:	a905      	add	r1, sp, #20
 80163c4:	9000      	str	r0, [sp, #0]
 80163c6:	2300      	movs	r3, #0
 80163c8:	a80a      	add	r0, sp, #40	@ 0x28
 80163ca:	2211      	movs	r2, #17
 80163cc:	f7fc ffc8 	bl	8013360 <ucdr_init_buffer_origin_offset>
 80163d0:	2218      	movs	r2, #24
 80163d2:	fb02 5404 	mla	r4, r2, r4, r5
 80163d6:	2300      	movs	r3, #0
 80163d8:	2205      	movs	r2, #5
 80163da:	3450      	adds	r4, #80	@ 0x50
 80163dc:	210a      	movs	r1, #10
 80163de:	a80a      	add	r0, sp, #40	@ 0x28
 80163e0:	f001 f95a 	bl	8017698 <uxr_buffer_submessage_header>
 80163e4:	a903      	add	r1, sp, #12
 80163e6:	4620      	mov	r0, r4
 80163e8:	f007 fd80 	bl	801deec <uxr_compute_acknack>
 80163ec:	ba40      	rev16	r0, r0
 80163ee:	f8ad 000e 	strh.w	r0, [sp, #14]
 80163f2:	a903      	add	r1, sp, #12
 80163f4:	a80a      	add	r0, sp, #40	@ 0x28
 80163f6:	f88d 6010 	strb.w	r6, [sp, #16]
 80163fa:	f002 fb09 	bl	8018a10 <uxr_serialize_ACKNACK_Payload>
 80163fe:	2200      	movs	r2, #0
 8016400:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016402:	4611      	mov	r1, r2
 8016404:	4628      	mov	r0, r5
 8016406:	f000 ff81 	bl	801730c <uxr_stamp_session_header>
 801640a:	a80a      	add	r0, sp, #40	@ 0x28
 801640c:	f7fc ffe6 	bl	80133dc <ucdr_buffer_length>
 8016410:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8016412:	4602      	mov	r2, r0
 8016414:	a905      	add	r1, sp, #20
 8016416:	e9d3 0400 	ldrd	r0, r4, [r3]
 801641a:	47a0      	blx	r4
 801641c:	b012      	add	sp, #72	@ 0x48
 801641e:	bd70      	pop	{r4, r5, r6, pc}

08016420 <uxr_init_session>:
 8016420:	b510      	push	{r4, lr}
 8016422:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8016458 <uxr_init_session+0x38>
 8016426:	2300      	movs	r3, #0
 8016428:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 801642c:	4604      	mov	r4, r0
 801642e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 8016432:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 8016436:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 801643a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 801643e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8016442:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8016446:	2181      	movs	r1, #129	@ 0x81
 8016448:	f000 fecc 	bl	80171e4 <uxr_init_session_info>
 801644c:	f104 0008 	add.w	r0, r4, #8
 8016450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016454:	f001 b83c 	b.w	80174d0 <uxr_init_stream_storage>
	...

08016460 <uxr_set_status_callback>:
 8016460:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8016464:	4770      	bx	lr
 8016466:	bf00      	nop

08016468 <uxr_set_topic_callback>:
 8016468:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801646c:	4770      	bx	lr
 801646e:	bf00      	nop

08016470 <uxr_set_request_callback>:
 8016470:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8016474:	4770      	bx	lr
 8016476:	bf00      	nop

08016478 <uxr_set_reply_callback>:
 8016478:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801647c:	4770      	bx	lr
 801647e:	bf00      	nop

08016480 <uxr_create_output_best_effort_stream>:
 8016480:	b510      	push	{r4, lr}
 8016482:	b084      	sub	sp, #16
 8016484:	e9cd 2100 	strd	r2, r1, [sp]
 8016488:	4604      	mov	r4, r0
 801648a:	f000 ff95 	bl	80173b8 <uxr_session_header_offset>
 801648e:	e9dd 2100 	ldrd	r2, r1, [sp]
 8016492:	4603      	mov	r3, r0
 8016494:	f104 0008 	add.w	r0, r4, #8
 8016498:	b004      	add	sp, #16
 801649a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801649e:	f001 b861 	b.w	8017564 <uxr_add_output_best_effort_buffer>
 80164a2:	bf00      	nop

080164a4 <uxr_create_output_reliable_stream>:
 80164a4:	b510      	push	{r4, lr}
 80164a6:	b088      	sub	sp, #32
 80164a8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80164ac:	4604      	mov	r4, r0
 80164ae:	9303      	str	r3, [sp, #12]
 80164b0:	f000 ff82 	bl	80173b8 <uxr_session_header_offset>
 80164b4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80164b8:	9000      	str	r0, [sp, #0]
 80164ba:	9905      	ldr	r1, [sp, #20]
 80164bc:	f104 0008 	add.w	r0, r4, #8
 80164c0:	f001 f864 	bl	801758c <uxr_add_output_reliable_buffer>
 80164c4:	2200      	movs	r2, #0
 80164c6:	b2c3      	uxtb	r3, r0
 80164c8:	f363 0207 	bfi	r2, r3, #0, #8
 80164cc:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80164d0:	f363 220f 	bfi	r2, r3, #8, #8
 80164d4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80164d8:	f363 4217 	bfi	r2, r3, #16, #8
 80164dc:	0e03      	lsrs	r3, r0, #24
 80164de:	f363 621f 	bfi	r2, r3, #24, #8
 80164e2:	4610      	mov	r0, r2
 80164e4:	b008      	add	sp, #32
 80164e6:	bd10      	pop	{r4, pc}

080164e8 <uxr_create_input_best_effort_stream>:
 80164e8:	b082      	sub	sp, #8
 80164ea:	3008      	adds	r0, #8
 80164ec:	b002      	add	sp, #8
 80164ee:	f001 b867 	b.w	80175c0 <uxr_add_input_best_effort_buffer>
 80164f2:	bf00      	nop

080164f4 <uxr_create_input_reliable_stream>:
 80164f4:	b510      	push	{r4, lr}
 80164f6:	b084      	sub	sp, #16
 80164f8:	4c0b      	ldr	r4, [pc, #44]	@ (8016528 <uxr_create_input_reliable_stream+0x34>)
 80164fa:	9400      	str	r4, [sp, #0]
 80164fc:	3008      	adds	r0, #8
 80164fe:	f001 f875 	bl	80175ec <uxr_add_input_reliable_buffer>
 8016502:	2200      	movs	r2, #0
 8016504:	b2c3      	uxtb	r3, r0
 8016506:	f363 0207 	bfi	r2, r3, #0, #8
 801650a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801650e:	f363 220f 	bfi	r2, r3, #8, #8
 8016512:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8016516:	f363 4217 	bfi	r2, r3, #16, #8
 801651a:	0e03      	lsrs	r3, r0, #24
 801651c:	f363 621f 	bfi	r2, r3, #24, #8
 8016520:	4610      	mov	r0, r2
 8016522:	b004      	add	sp, #16
 8016524:	bd10      	pop	{r4, pc}
 8016526:	bf00      	nop
 8016528:	08016305 	.word	0x08016305

0801652c <uxr_epoch_nanos>:
 801652c:	b510      	push	{r4, lr}
 801652e:	4604      	mov	r4, r0
 8016530:	f001 f912 	bl	8017758 <uxr_nanos>
 8016534:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 8016538:	1ac0      	subs	r0, r0, r3
 801653a:	eb61 0102 	sbc.w	r1, r1, r2
 801653e:	bd10      	pop	{r4, pc}

08016540 <uxr_flash_output_streams>:
 8016540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016544:	7e03      	ldrb	r3, [r0, #24]
 8016546:	b084      	sub	sp, #16
 8016548:	4604      	mov	r4, r0
 801654a:	2b00      	cmp	r3, #0
 801654c:	d035      	beq.n	80165ba <uxr_flash_output_streams+0x7a>
 801654e:	f04f 0900 	mov.w	r9, #0
 8016552:	4648      	mov	r0, r9
 8016554:	f10d 0802 	add.w	r8, sp, #2
 8016558:	af03      	add	r7, sp, #12
 801655a:	ae02      	add	r6, sp, #8
 801655c:	e006      	b.n	801656c <uxr_flash_output_streams+0x2c>
 801655e:	7e23      	ldrb	r3, [r4, #24]
 8016560:	f109 0901 	add.w	r9, r9, #1
 8016564:	fa5f f089 	uxtb.w	r0, r9
 8016568:	4283      	cmp	r3, r0
 801656a:	d926      	bls.n	80165ba <uxr_flash_output_streams+0x7a>
 801656c:	2201      	movs	r2, #1
 801656e:	4611      	mov	r1, r2
 8016570:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8016574:	f000 ff58 	bl	8017428 <uxr_stream_id>
 8016578:	3508      	adds	r5, #8
 801657a:	4684      	mov	ip, r0
 801657c:	4643      	mov	r3, r8
 801657e:	463a      	mov	r2, r7
 8016580:	4631      	mov	r1, r6
 8016582:	4628      	mov	r0, r5
 8016584:	f8cd c004 	str.w	ip, [sp, #4]
 8016588:	f007 fd36 	bl	801dff8 <uxr_prepare_best_effort_buffer_to_send>
 801658c:	2800      	cmp	r0, #0
 801658e:	d0e6      	beq.n	801655e <uxr_flash_output_streams+0x1e>
 8016590:	9b02      	ldr	r3, [sp, #8]
 8016592:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8016596:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801659a:	4620      	mov	r0, r4
 801659c:	f000 feb6 	bl	801730c <uxr_stamp_session_header>
 80165a0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80165a2:	9a03      	ldr	r2, [sp, #12]
 80165a4:	685d      	ldr	r5, [r3, #4]
 80165a6:	6818      	ldr	r0, [r3, #0]
 80165a8:	9902      	ldr	r1, [sp, #8]
 80165aa:	47a8      	blx	r5
 80165ac:	f109 0901 	add.w	r9, r9, #1
 80165b0:	7e23      	ldrb	r3, [r4, #24]
 80165b2:	fa5f f089 	uxtb.w	r0, r9
 80165b6:	4283      	cmp	r3, r0
 80165b8:	d8d8      	bhi.n	801656c <uxr_flash_output_streams+0x2c>
 80165ba:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80165be:	b38b      	cbz	r3, 8016624 <uxr_flash_output_streams+0xe4>
 80165c0:	f04f 0900 	mov.w	r9, #0
 80165c4:	f10d 0802 	add.w	r8, sp, #2
 80165c8:	af03      	add	r7, sp, #12
 80165ca:	ae02      	add	r6, sp, #8
 80165cc:	4648      	mov	r0, r9
 80165ce:	2201      	movs	r2, #1
 80165d0:	2102      	movs	r1, #2
 80165d2:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80165d6:	f000 ff27 	bl	8017428 <uxr_stream_id>
 80165da:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80165de:	3520      	adds	r5, #32
 80165e0:	9001      	str	r0, [sp, #4]
 80165e2:	e00d      	b.n	8016600 <uxr_flash_output_streams+0xc0>
 80165e4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80165e8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80165ec:	9b02      	ldr	r3, [sp, #8]
 80165ee:	f000 fe8d 	bl	801730c <uxr_stamp_session_header>
 80165f2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80165f4:	9a03      	ldr	r2, [sp, #12]
 80165f6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80165fa:	9902      	ldr	r1, [sp, #8]
 80165fc:	6818      	ldr	r0, [r3, #0]
 80165fe:	47d0      	blx	sl
 8016600:	4643      	mov	r3, r8
 8016602:	463a      	mov	r2, r7
 8016604:	4631      	mov	r1, r6
 8016606:	4628      	mov	r0, r5
 8016608:	f007 ff02 	bl	801e410 <uxr_prepare_next_reliable_buffer_to_send>
 801660c:	4603      	mov	r3, r0
 801660e:	4620      	mov	r0, r4
 8016610:	2b00      	cmp	r3, #0
 8016612:	d1e7      	bne.n	80165e4 <uxr_flash_output_streams+0xa4>
 8016614:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8016618:	f109 0901 	add.w	r9, r9, #1
 801661c:	fa5f f089 	uxtb.w	r0, r9
 8016620:	4283      	cmp	r3, r0
 8016622:	d8d4      	bhi.n	80165ce <uxr_flash_output_streams+0x8e>
 8016624:	b004      	add	sp, #16
 8016626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801662a:	bf00      	nop

0801662c <read_submessage_info>:
 801662c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016630:	460d      	mov	r5, r1
 8016632:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8016636:	4669      	mov	r1, sp
 8016638:	4607      	mov	r7, r0
 801663a:	4628      	mov	r0, r5
 801663c:	f002 f814 	bl	8018668 <uxr_deserialize_BaseObjectReply>
 8016640:	a902      	add	r1, sp, #8
 8016642:	4604      	mov	r4, r0
 8016644:	4628      	mov	r0, r5
 8016646:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801664a:	f7fb f953 	bl	80118f4 <ucdr_deserialize_bool>
 801664e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8016652:	4004      	ands	r4, r0
 8016654:	b2e4      	uxtb	r4, r4
 8016656:	b95b      	cbnz	r3, 8016670 <read_submessage_info+0x44>
 8016658:	a987      	add	r1, sp, #540	@ 0x21c
 801665a:	4628      	mov	r0, r5
 801665c:	f7fb f94a 	bl	80118f4 <ucdr_deserialize_bool>
 8016660:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8016664:	4606      	mov	r6, r0
 8016666:	b94b      	cbnz	r3, 801667c <read_submessage_info+0x50>
 8016668:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801666c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016670:	a903      	add	r1, sp, #12
 8016672:	4628      	mov	r0, r5
 8016674:	f001 fea0 	bl	80183b8 <uxr_deserialize_ObjectVariant>
 8016678:	4004      	ands	r4, r0
 801667a:	e7ed      	b.n	8016658 <read_submessage_info+0x2c>
 801667c:	a988      	add	r1, sp, #544	@ 0x220
 801667e:	4628      	mov	r0, r5
 8016680:	f7fb f966 	bl	8011950 <ucdr_deserialize_uint8_t>
 8016684:	4234      	tst	r4, r6
 8016686:	d0ef      	beq.n	8016668 <read_submessage_info+0x3c>
 8016688:	2800      	cmp	r0, #0
 801668a:	d0ed      	beq.n	8016668 <read_submessage_info+0x3c>
 801668c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8016690:	2b0d      	cmp	r3, #13
 8016692:	d1e9      	bne.n	8016668 <read_submessage_info+0x3c>
 8016694:	a98a      	add	r1, sp, #552	@ 0x228
 8016696:	4628      	mov	r0, r5
 8016698:	f7fb ff00 	bl	801249c <ucdr_deserialize_int16_t>
 801669c:	b140      	cbz	r0, 80166b0 <read_submessage_info+0x84>
 801669e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	dd07      	ble.n	80166b6 <read_submessage_info+0x8a>
 80166a6:	f1b8 0f00 	cmp.w	r8, #0
 80166aa:	bf14      	ite	ne
 80166ac:	2001      	movne	r0, #1
 80166ae:	2002      	moveq	r0, #2
 80166b0:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 80166b4:	e7d8      	b.n	8016668 <read_submessage_info+0x3c>
 80166b6:	2000      	movs	r0, #0
 80166b8:	e7fa      	b.n	80166b0 <read_submessage_info+0x84>
 80166ba:	bf00      	nop

080166bc <read_submessage_list>:
 80166bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166c0:	b097      	sub	sp, #92	@ 0x5c
 80166c2:	4ec1      	ldr	r6, [pc, #772]	@ (80169c8 <read_submessage_list+0x30c>)
 80166c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80166c6:	4604      	mov	r4, r0
 80166c8:	460d      	mov	r5, r1
 80166ca:	f04f 0801 	mov.w	r8, #1
 80166ce:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 80166d2:	aa0c      	add	r2, sp, #48	@ 0x30
 80166d4:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 80166d8:	4628      	mov	r0, r5
 80166da:	f000 fff7 	bl	80176cc <uxr_read_submessage_header>
 80166de:	2800      	cmp	r0, #0
 80166e0:	f000 813e 	beq.w	8016960 <read_submessage_list+0x2a4>
 80166e4:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 80166e8:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80166ec:	3b02      	subs	r3, #2
 80166ee:	2b0d      	cmp	r3, #13
 80166f0:	d8ed      	bhi.n	80166ce <read_submessage_list+0x12>
 80166f2:	a101      	add	r1, pc, #4	@ (adr r1, 80166f8 <read_submessage_list+0x3c>)
 80166f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80166f8:	08016957 	.word	0x08016957
 80166fc:	080166cf 	.word	0x080166cf
 8016700:	08016947 	.word	0x08016947
 8016704:	080168e5 	.word	0x080168e5
 8016708:	080168db 	.word	0x080168db
 801670c:	080166cf 	.word	0x080166cf
 8016710:	080166cf 	.word	0x080166cf
 8016714:	0801683b 	.word	0x0801683b
 8016718:	080167cb 	.word	0x080167cb
 801671c:	0801678b 	.word	0x0801678b
 8016720:	080166cf 	.word	0x080166cf
 8016724:	080166cf 	.word	0x080166cf
 8016728:	080166cf 	.word	0x080166cf
 801672c:	08016731 	.word	0x08016731
 8016730:	a910      	add	r1, sp, #64	@ 0x40
 8016732:	4628      	mov	r0, r5
 8016734:	f002 f9bc 	bl	8018ab0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8016738:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 801673c:	f1b9 0f00 	cmp.w	r9, #0
 8016740:	f000 8116 	beq.w	8016970 <read_submessage_list+0x2b4>
 8016744:	f001 f808 	bl	8017758 <uxr_nanos>
 8016748:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801674a:	4602      	mov	r2, r0
 801674c:	460b      	mov	r3, r1
 801674e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8016750:	2100      	movs	r1, #0
 8016752:	468c      	mov	ip, r1
 8016754:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8016758:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 801675c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801675e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8016760:	468c      	mov	ip, r1
 8016762:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8016766:	46e2      	mov	sl, ip
 8016768:	46bc      	mov	ip, r7
 801676a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 801676e:	fbc0 7106 	smlal	r7, r1, r0, r6
 8016772:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8016776:	e9cd 7100 	strd	r7, r1, [sp]
 801677a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 801677e:	9106      	str	r1, [sp, #24]
 8016780:	4620      	mov	r0, r4
 8016782:	47c8      	blx	r9
 8016784:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8016788:	e7a1      	b.n	80166ce <read_submessage_list+0x12>
 801678a:	a910      	add	r1, sp, #64	@ 0x40
 801678c:	4628      	mov	r0, r5
 801678e:	f002 f97d 	bl	8018a8c <uxr_deserialize_HEARTBEAT_Payload>
 8016792:	2100      	movs	r1, #0
 8016794:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8016798:	f000 fe70 	bl	801747c <uxr_stream_id_from_raw>
 801679c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80167a0:	900f      	str	r0, [sp, #60]	@ 0x3c
 80167a2:	4639      	mov	r1, r7
 80167a4:	f104 0008 	add.w	r0, r4, #8
 80167a8:	f000 ff56 	bl	8017658 <uxr_get_input_reliable_stream>
 80167ac:	2800      	cmp	r0, #0
 80167ae:	d08e      	beq.n	80166ce <read_submessage_list+0x12>
 80167b0:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80167b4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 80167b8:	f007 fb8c 	bl	801ded4 <uxr_process_heartbeat>
 80167bc:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 80167c0:	463a      	mov	r2, r7
 80167c2:	4620      	mov	r0, r4
 80167c4:	f7ff fdf6 	bl	80163b4 <write_submessage_acknack.isra.0>
 80167c8:	e781      	b.n	80166ce <read_submessage_list+0x12>
 80167ca:	a910      	add	r1, sp, #64	@ 0x40
 80167cc:	4628      	mov	r0, r5
 80167ce:	f002 f935 	bl	8018a3c <uxr_deserialize_ACKNACK_Payload>
 80167d2:	2100      	movs	r1, #0
 80167d4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 80167d8:	f000 fe50 	bl	801747c <uxr_stream_id_from_raw>
 80167dc:	900d      	str	r0, [sp, #52]	@ 0x34
 80167de:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80167e2:	f104 0008 	add.w	r0, r4, #8
 80167e6:	f000 ff23 	bl	8017630 <uxr_get_output_reliable_stream>
 80167ea:	4607      	mov	r7, r0
 80167ec:	2800      	cmp	r0, #0
 80167ee:	f43f af6e 	beq.w	80166ce <read_submessage_list+0x12>
 80167f2:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 80167f6:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 80167fa:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80167fe:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8016802:	b289      	uxth	r1, r1
 8016804:	f007 feae 	bl	801e564 <uxr_process_acknack>
 8016808:	4638      	mov	r0, r7
 801680a:	f007 fe6b 	bl	801e4e4 <uxr_begin_output_nack_buffer_it>
 801680e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8016812:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8016816:	e006      	b.n	8016826 <read_submessage_list+0x16a>
 8016818:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801681a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801681c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8016820:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016822:	6818      	ldr	r0, [r3, #0]
 8016824:	47c8      	blx	r9
 8016826:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 801682a:	aa0f      	add	r2, sp, #60	@ 0x3c
 801682c:	4651      	mov	r1, sl
 801682e:	4638      	mov	r0, r7
 8016830:	f007 fe5a 	bl	801e4e8 <uxr_next_reliable_nack_buffer_to_send>
 8016834:	2800      	cmp	r0, #0
 8016836:	d1ef      	bne.n	8016818 <read_submessage_list+0x15c>
 8016838:	e749      	b.n	80166ce <read_submessage_list+0x12>
 801683a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 801683e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8016842:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8016846:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801684a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 801684e:	4651      	mov	r1, sl
 8016850:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8016854:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8016858:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 801685c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8016860:	4628      	mov	r0, r5
 8016862:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8016866:	f001 fe49 	bl	80184fc <uxr_deserialize_BaseObjectRequest>
 801686a:	4650      	mov	r0, sl
 801686c:	a90f      	add	r1, sp, #60	@ 0x3c
 801686e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8016872:	f000 fdc7 	bl	8017404 <uxr_parse_base_object_request>
 8016876:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 801687a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801687c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8016880:	9110      	str	r1, [sp, #64]	@ 0x40
 8016882:	3f04      	subs	r7, #4
 8016884:	f009 090e 	and.w	r9, r9, #14
 8016888:	b2bf      	uxth	r7, r7
 801688a:	f1bb 0f00 	cmp.w	fp, #0
 801688e:	d006      	beq.n	801689e <read_submessage_list+0x1e2>
 8016890:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8016894:	9300      	str	r3, [sp, #0]
 8016896:	4652      	mov	r2, sl
 8016898:	2300      	movs	r3, #0
 801689a:	4620      	mov	r0, r4
 801689c:	47d8      	blx	fp
 801689e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80168a0:	b16a      	cbz	r2, 80168be <read_submessage_list+0x202>
 80168a2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80168a4:	2100      	movs	r1, #0
 80168a6:	3802      	subs	r0, #2
 80168a8:	e002      	b.n	80168b0 <read_submessage_list+0x1f4>
 80168aa:	3101      	adds	r1, #1
 80168ac:	4291      	cmp	r1, r2
 80168ae:	d006      	beq.n	80168be <read_submessage_list+0x202>
 80168b0:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80168b4:	4553      	cmp	r3, sl
 80168b6:	d1f8      	bne.n	80168aa <read_submessage_list+0x1ee>
 80168b8:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80168ba:	2200      	movs	r2, #0
 80168bc:	545a      	strb	r2, [r3, r1]
 80168be:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 80168c2:	9102      	str	r1, [sp, #8]
 80168c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80168c6:	9101      	str	r1, [sp, #4]
 80168c8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80168ca:	9100      	str	r1, [sp, #0]
 80168cc:	464b      	mov	r3, r9
 80168ce:	463a      	mov	r2, r7
 80168d0:	4629      	mov	r1, r5
 80168d2:	4620      	mov	r0, r4
 80168d4:	f007 ff04 	bl	801e6e0 <read_submessage_format>
 80168d8:	e6f9      	b.n	80166ce <read_submessage_list+0x12>
 80168da:	4629      	mov	r1, r5
 80168dc:	4620      	mov	r0, r4
 80168de:	f7ff fea5 	bl	801662c <read_submessage_info>
 80168e2:	e6f4      	b.n	80166ce <read_submessage_list+0x12>
 80168e4:	2a00      	cmp	r2, #0
 80168e6:	d03e      	beq.n	8016966 <read_submessage_list+0x2aa>
 80168e8:	a910      	add	r1, sp, #64	@ 0x40
 80168ea:	4628      	mov	r0, r5
 80168ec:	f002 f802 	bl	80188f4 <uxr_deserialize_STATUS_Payload>
 80168f0:	a90e      	add	r1, sp, #56	@ 0x38
 80168f2:	aa0d      	add	r2, sp, #52	@ 0x34
 80168f4:	a810      	add	r0, sp, #64	@ 0x40
 80168f6:	f000 fd85 	bl	8017404 <uxr_parse_base_object_request>
 80168fa:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 80168fe:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8016900:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8016904:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 8016908:	910f      	str	r1, [sp, #60]	@ 0x3c
 801690a:	f1ba 0f00 	cmp.w	sl, #0
 801690e:	d006      	beq.n	801691e <read_submessage_list+0x262>
 8016910:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8016914:	9300      	str	r3, [sp, #0]
 8016916:	463a      	mov	r2, r7
 8016918:	464b      	mov	r3, r9
 801691a:	4620      	mov	r0, r4
 801691c:	47d0      	blx	sl
 801691e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8016920:	2a00      	cmp	r2, #0
 8016922:	f43f aed4 	beq.w	80166ce <read_submessage_list+0x12>
 8016926:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8016928:	2100      	movs	r1, #0
 801692a:	3802      	subs	r0, #2
 801692c:	e003      	b.n	8016936 <read_submessage_list+0x27a>
 801692e:	3101      	adds	r1, #1
 8016930:	4291      	cmp	r1, r2
 8016932:	f43f aecc 	beq.w	80166ce <read_submessage_list+0x12>
 8016936:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801693a:	42bb      	cmp	r3, r7
 801693c:	d1f7      	bne.n	801692e <read_submessage_list+0x272>
 801693e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8016940:	f803 9001 	strb.w	r9, [r3, r1]
 8016944:	e6c3      	b.n	80166ce <read_submessage_list+0x12>
 8016946:	2a00      	cmp	r2, #0
 8016948:	f47f aec1 	bne.w	80166ce <read_submessage_list+0x12>
 801694c:	4629      	mov	r1, r5
 801694e:	4620      	mov	r0, r4
 8016950:	f000 fc9e 	bl	8017290 <uxr_read_create_session_status>
 8016954:	e6bb      	b.n	80166ce <read_submessage_list+0x12>
 8016956:	4629      	mov	r1, r5
 8016958:	4620      	mov	r0, r4
 801695a:	f7ff fcf5 	bl	8016348 <read_submessage_get_info>
 801695e:	e6b6      	b.n	80166ce <read_submessage_list+0x12>
 8016960:	b017      	add	sp, #92	@ 0x5c
 8016962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016966:	4629      	mov	r1, r5
 8016968:	4620      	mov	r0, r4
 801696a:	f000 fc9d 	bl	80172a8 <uxr_read_delete_session_status>
 801696e:	e6ae      	b.n	80166ce <read_submessage_list+0x12>
 8016970:	f000 fef2 	bl	8017758 <uxr_nanos>
 8016974:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016976:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8016978:	464f      	mov	r7, r9
 801697a:	fbc3 2706 	smlal	r2, r7, r3, r6
 801697e:	1812      	adds	r2, r2, r0
 8016980:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016982:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8016984:	eb47 0101 	adc.w	r1, r7, r1
 8016988:	464f      	mov	r7, r9
 801698a:	fbc3 0706 	smlal	r0, r7, r3, r6
 801698e:	463b      	mov	r3, r7
 8016990:	4684      	mov	ip, r0
 8016992:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8016996:	fbc7 0906 	smlal	r0, r9, r7, r6
 801699a:	eb1c 0c00 	adds.w	ip, ip, r0
 801699e:	464f      	mov	r7, r9
 80169a0:	eb43 0307 	adc.w	r3, r3, r7
 80169a4:	ebb2 0c0c 	subs.w	ip, r2, ip
 80169a8:	eb61 0303 	sbc.w	r3, r1, r3
 80169ac:	0fda      	lsrs	r2, r3, #31
 80169ae:	eb12 020c 	adds.w	r2, r2, ip
 80169b2:	f143 0300 	adc.w	r3, r3, #0
 80169b6:	0852      	lsrs	r2, r2, #1
 80169b8:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80169bc:	105b      	asrs	r3, r3, #1
 80169be:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 80169c2:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 80169c6:	e6dd      	b.n	8016784 <read_submessage_list+0xc8>
 80169c8:	3b9aca00 	.word	0x3b9aca00

080169cc <listen_message_reliably>:
 80169cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169d0:	1e0b      	subs	r3, r1, #0
 80169d2:	b09d      	sub	sp, #116	@ 0x74
 80169d4:	bfb8      	it	lt
 80169d6:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 80169da:	4680      	mov	r8, r0
 80169dc:	9305      	str	r3, [sp, #20]
 80169de:	f000 fea1 	bl	8017724 <uxr_millis>
 80169e2:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 80169e6:	4681      	mov	r9, r0
 80169e8:	2a00      	cmp	r2, #0
 80169ea:	f000 80a1 	beq.w	8016b30 <listen_message_reliably+0x164>
 80169ee:	2600      	movs	r6, #0
 80169f0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80169f4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80169f8:	9303      	str	r3, [sp, #12]
 80169fa:	4630      	mov	r0, r6
 80169fc:	460f      	mov	r7, r1
 80169fe:	e00f      	b.n	8016a20 <listen_message_reliably+0x54>
 8016a00:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8016a04:	9903      	ldr	r1, [sp, #12]
 8016a06:	455a      	cmp	r2, fp
 8016a08:	f106 0601 	add.w	r6, r6, #1
 8016a0c:	eb73 0101 	sbcs.w	r1, r3, r1
 8016a10:	b2f0      	uxtb	r0, r6
 8016a12:	da01      	bge.n	8016a18 <listen_message_reliably+0x4c>
 8016a14:	4693      	mov	fp, r2
 8016a16:	9303      	str	r3, [sp, #12]
 8016a18:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8016a1c:	4283      	cmp	r3, r0
 8016a1e:	d960      	bls.n	8016ae2 <listen_message_reliably+0x116>
 8016a20:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8016a24:	2102      	movs	r1, #2
 8016a26:	2201      	movs	r2, #1
 8016a28:	f000 fcfe 	bl	8017428 <uxr_stream_id>
 8016a2c:	00e4      	lsls	r4, r4, #3
 8016a2e:	f104 0520 	add.w	r5, r4, #32
 8016a32:	4445      	add	r5, r8
 8016a34:	4601      	mov	r1, r0
 8016a36:	463b      	mov	r3, r7
 8016a38:	464a      	mov	r2, r9
 8016a3a:	4628      	mov	r0, r5
 8016a3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8016a3e:	f007 fd27 	bl	801e490 <uxr_update_output_stream_heartbeat_timestamp>
 8016a42:	eb08 0304 	add.w	r3, r8, r4
 8016a46:	2800      	cmp	r0, #0
 8016a48:	d0da      	beq.n	8016a00 <listen_message_reliably+0x34>
 8016a4a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8016a4e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8016a52:	9304      	str	r3, [sp, #16]
 8016a54:	4640      	mov	r0, r8
 8016a56:	f000 fcaf 	bl	80173b8 <uxr_session_header_offset>
 8016a5a:	3501      	adds	r5, #1
 8016a5c:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8016a60:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8016a64:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8016a68:	2300      	movs	r3, #0
 8016a6a:	2211      	movs	r2, #17
 8016a6c:	9000      	str	r0, [sp, #0]
 8016a6e:	a90c      	add	r1, sp, #48	@ 0x30
 8016a70:	4650      	mov	r0, sl
 8016a72:	f7fc fc75 	bl	8013360 <ucdr_init_buffer_origin_offset>
 8016a76:	2300      	movs	r3, #0
 8016a78:	2205      	movs	r2, #5
 8016a7a:	210b      	movs	r1, #11
 8016a7c:	4650      	mov	r0, sl
 8016a7e:	f000 fe0b 	bl	8017698 <uxr_buffer_submessage_header>
 8016a82:	8968      	ldrh	r0, [r5, #10]
 8016a84:	2101      	movs	r1, #1
 8016a86:	f007 fef5 	bl	801e874 <uxr_seq_num_add>
 8016a8a:	892b      	ldrh	r3, [r5, #8]
 8016a8c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8016a90:	4602      	mov	r2, r0
 8016a92:	9b04      	ldr	r3, [sp, #16]
 8016a94:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8016a98:	a90a      	add	r1, sp, #40	@ 0x28
 8016a9a:	4650      	mov	r0, sl
 8016a9c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8016aa0:	f001 ffe0 	bl	8018a64 <uxr_serialize_HEARTBEAT_Payload>
 8016aa4:	2200      	movs	r2, #0
 8016aa6:	4611      	mov	r1, r2
 8016aa8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016aaa:	4640      	mov	r0, r8
 8016aac:	f000 fc2e 	bl	801730c <uxr_stamp_session_header>
 8016ab0:	4650      	mov	r0, sl
 8016ab2:	f7fc fc93 	bl	80133dc <ucdr_buffer_length>
 8016ab6:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8016aba:	4602      	mov	r2, r0
 8016abc:	a90c      	add	r1, sp, #48	@ 0x30
 8016abe:	e9d3 0500 	ldrd	r0, r5, [r3]
 8016ac2:	4444      	add	r4, r8
 8016ac4:	47a8      	blx	r5
 8016ac6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8016aca:	9903      	ldr	r1, [sp, #12]
 8016acc:	455a      	cmp	r2, fp
 8016ace:	f106 0601 	add.w	r6, r6, #1
 8016ad2:	eb73 0101 	sbcs.w	r1, r3, r1
 8016ad6:	b2f0      	uxtb	r0, r6
 8016ad8:	db9c      	blt.n	8016a14 <listen_message_reliably+0x48>
 8016ada:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8016ade:	4283      	cmp	r3, r0
 8016ae0:	d89e      	bhi.n	8016a20 <listen_message_reliably+0x54>
 8016ae2:	9a03      	ldr	r2, [sp, #12]
 8016ae4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016ae8:	429a      	cmp	r2, r3
 8016aea:	bf08      	it	eq
 8016aec:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8016af0:	d01e      	beq.n	8016b30 <listen_message_reliably+0x164>
 8016af2:	ebab 0309 	sub.w	r3, fp, r9
 8016af6:	9905      	ldr	r1, [sp, #20]
 8016af8:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	bf08      	it	eq
 8016b00:	2301      	moveq	r3, #1
 8016b02:	4299      	cmp	r1, r3
 8016b04:	bfa8      	it	ge
 8016b06:	4619      	movge	r1, r3
 8016b08:	6894      	ldr	r4, [r2, #8]
 8016b0a:	6810      	ldr	r0, [r2, #0]
 8016b0c:	4689      	mov	r9, r1
 8016b0e:	460b      	mov	r3, r1
 8016b10:	aa08      	add	r2, sp, #32
 8016b12:	a907      	add	r1, sp, #28
 8016b14:	47a0      	blx	r4
 8016b16:	b968      	cbnz	r0, 8016b34 <listen_message_reliably+0x168>
 8016b18:	9b05      	ldr	r3, [sp, #20]
 8016b1a:	eba3 0309 	sub.w	r3, r3, r9
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	9305      	str	r3, [sp, #20]
 8016b22:	f73f af5c 	bgt.w	80169de <listen_message_reliably+0x12>
 8016b26:	4604      	mov	r4, r0
 8016b28:	4620      	mov	r0, r4
 8016b2a:	b01d      	add	sp, #116	@ 0x74
 8016b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b30:	9b05      	ldr	r3, [sp, #20]
 8016b32:	e7e0      	b.n	8016af6 <listen_message_reliably+0x12a>
 8016b34:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8016b38:	4604      	mov	r4, r0
 8016b3a:	a80c      	add	r0, sp, #48	@ 0x30
 8016b3c:	f7fc fc22 	bl	8013384 <ucdr_init_buffer>
 8016b40:	2500      	movs	r5, #0
 8016b42:	f10d 031a 	add.w	r3, sp, #26
 8016b46:	aa06      	add	r2, sp, #24
 8016b48:	a90c      	add	r1, sp, #48	@ 0x30
 8016b4a:	4640      	mov	r0, r8
 8016b4c:	f88d 5018 	strb.w	r5, [sp, #24]
 8016b50:	f000 fbf0 	bl	8017334 <uxr_read_session_header>
 8016b54:	b918      	cbnz	r0, 8016b5e <listen_message_reliably+0x192>
 8016b56:	4620      	mov	r0, r4
 8016b58:	b01d      	add	sp, #116	@ 0x74
 8016b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b5e:	4629      	mov	r1, r5
 8016b60:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8016b64:	f000 fc8a 	bl	801747c <uxr_stream_id_from_raw>
 8016b68:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8016b6c:	2d01      	cmp	r5, #1
 8016b6e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8016b72:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8016b76:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8016b7a:	d04b      	beq.n	8016c14 <listen_message_reliably+0x248>
 8016b7c:	2d02      	cmp	r5, #2
 8016b7e:	d00f      	beq.n	8016ba0 <listen_message_reliably+0x1d4>
 8016b80:	2d00      	cmp	r5, #0
 8016b82:	d1e8      	bne.n	8016b56 <listen_message_reliably+0x18a>
 8016b84:	4629      	mov	r1, r5
 8016b86:	4628      	mov	r0, r5
 8016b88:	f000 fc78 	bl	801747c <uxr_stream_id_from_raw>
 8016b8c:	a90c      	add	r1, sp, #48	@ 0x30
 8016b8e:	4602      	mov	r2, r0
 8016b90:	4640      	mov	r0, r8
 8016b92:	920a      	str	r2, [sp, #40]	@ 0x28
 8016b94:	f7ff fd92 	bl	80166bc <read_submessage_list>
 8016b98:	4620      	mov	r0, r4
 8016b9a:	b01d      	add	sp, #116	@ 0x74
 8016b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ba0:	4631      	mov	r1, r6
 8016ba2:	f108 0008 	add.w	r0, r8, #8
 8016ba6:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8016baa:	f000 fd55 	bl	8017658 <uxr_get_input_reliable_stream>
 8016bae:	4607      	mov	r7, r0
 8016bb0:	b338      	cbz	r0, 8016c02 <listen_message_reliably+0x236>
 8016bb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016bb4:	9203      	str	r2, [sp, #12]
 8016bb6:	a80c      	add	r0, sp, #48	@ 0x30
 8016bb8:	f7fc fc14 	bl	80133e4 <ucdr_buffer_remaining>
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	f10d 0019 	add.w	r0, sp, #25
 8016bc2:	9000      	str	r0, [sp, #0]
 8016bc4:	9a03      	ldr	r2, [sp, #12]
 8016bc6:	4651      	mov	r1, sl
 8016bc8:	4638      	mov	r0, r7
 8016bca:	f007 f889 	bl	801dce0 <uxr_receive_reliable_message>
 8016bce:	b1c0      	cbz	r0, 8016c02 <listen_message_reliably+0x236>
 8016bd0:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8016bd4:	b393      	cbz	r3, 8016c3c <listen_message_reliably+0x270>
 8016bd6:	ad14      	add	r5, sp, #80	@ 0x50
 8016bd8:	f04f 0a02 	mov.w	sl, #2
 8016bdc:	e00a      	b.n	8016bf4 <listen_message_reliably+0x228>
 8016bde:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8016be2:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8016be6:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8016bea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016bec:	4629      	mov	r1, r5
 8016bee:	4640      	mov	r0, r8
 8016bf0:	f7ff fd64 	bl	80166bc <read_submessage_list>
 8016bf4:	2204      	movs	r2, #4
 8016bf6:	4629      	mov	r1, r5
 8016bf8:	4638      	mov	r0, r7
 8016bfa:	f007 f8f1 	bl	801dde0 <uxr_next_input_reliable_buffer_available>
 8016bfe:	2800      	cmp	r0, #0
 8016c00:	d1ed      	bne.n	8016bde <listen_message_reliably+0x212>
 8016c02:	4640      	mov	r0, r8
 8016c04:	4632      	mov	r2, r6
 8016c06:	4649      	mov	r1, r9
 8016c08:	f7ff fbd4 	bl	80163b4 <write_submessage_acknack.isra.0>
 8016c0c:	4620      	mov	r0, r4
 8016c0e:	b01d      	add	sp, #116	@ 0x74
 8016c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c14:	4631      	mov	r1, r6
 8016c16:	f108 0008 	add.w	r0, r8, #8
 8016c1a:	f000 fd13 	bl	8017644 <uxr_get_input_best_effort_stream>
 8016c1e:	2800      	cmp	r0, #0
 8016c20:	d099      	beq.n	8016b56 <listen_message_reliably+0x18a>
 8016c22:	4651      	mov	r1, sl
 8016c24:	f006 ffc8 	bl	801dbb8 <uxr_receive_best_effort_message>
 8016c28:	2800      	cmp	r0, #0
 8016c2a:	d094      	beq.n	8016b56 <listen_message_reliably+0x18a>
 8016c2c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8016c30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016c32:	a90c      	add	r1, sp, #48	@ 0x30
 8016c34:	4640      	mov	r0, r8
 8016c36:	f7ff fd41 	bl	80166bc <read_submessage_list>
 8016c3a:	e78c      	b.n	8016b56 <listen_message_reliably+0x18a>
 8016c3c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8016c40:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016c42:	a90c      	add	r1, sp, #48	@ 0x30
 8016c44:	4640      	mov	r0, r8
 8016c46:	f7ff fd39 	bl	80166bc <read_submessage_list>
 8016c4a:	e7c4      	b.n	8016bd6 <listen_message_reliably+0x20a>

08016c4c <uxr_run_session_timeout>:
 8016c4c:	b570      	push	{r4, r5, r6, lr}
 8016c4e:	4604      	mov	r4, r0
 8016c50:	460d      	mov	r5, r1
 8016c52:	f000 fd67 	bl	8017724 <uxr_millis>
 8016c56:	4606      	mov	r6, r0
 8016c58:	4620      	mov	r0, r4
 8016c5a:	f7ff fc71 	bl	8016540 <uxr_flash_output_streams>
 8016c5e:	4629      	mov	r1, r5
 8016c60:	4620      	mov	r0, r4
 8016c62:	f7ff feb3 	bl	80169cc <listen_message_reliably>
 8016c66:	f000 fd5d 	bl	8017724 <uxr_millis>
 8016c6a:	1b83      	subs	r3, r0, r6
 8016c6c:	1ae9      	subs	r1, r5, r3
 8016c6e:	2900      	cmp	r1, #0
 8016c70:	dcf6      	bgt.n	8016c60 <uxr_run_session_timeout+0x14>
 8016c72:	f104 0008 	add.w	r0, r4, #8
 8016c76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c7a:	f000 bcf7 	b.w	801766c <uxr_output_streams_confirmed>
 8016c7e:	bf00      	nop

08016c80 <uxr_run_session_until_data>:
 8016c80:	b570      	push	{r4, r5, r6, lr}
 8016c82:	4604      	mov	r4, r0
 8016c84:	460d      	mov	r5, r1
 8016c86:	f000 fd4d 	bl	8017724 <uxr_millis>
 8016c8a:	4606      	mov	r6, r0
 8016c8c:	4620      	mov	r0, r4
 8016c8e:	f7ff fc57 	bl	8016540 <uxr_flash_output_streams>
 8016c92:	2300      	movs	r3, #0
 8016c94:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8016c98:	4629      	mov	r1, r5
 8016c9a:	e005      	b.n	8016ca8 <uxr_run_session_until_data+0x28>
 8016c9c:	f000 fd42 	bl	8017724 <uxr_millis>
 8016ca0:	1b83      	subs	r3, r0, r6
 8016ca2:	1ae9      	subs	r1, r5, r3
 8016ca4:	2900      	cmp	r1, #0
 8016ca6:	dd07      	ble.n	8016cb8 <uxr_run_session_until_data+0x38>
 8016ca8:	4620      	mov	r0, r4
 8016caa:	f7ff fe8f 	bl	80169cc <listen_message_reliably>
 8016cae:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8016cb2:	2800      	cmp	r0, #0
 8016cb4:	d0f2      	beq.n	8016c9c <uxr_run_session_until_data+0x1c>
 8016cb6:	bd70      	pop	{r4, r5, r6, pc}
 8016cb8:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8016cbc:	bd70      	pop	{r4, r5, r6, pc}
 8016cbe:	bf00      	nop

08016cc0 <uxr_run_session_until_confirm_delivery>:
 8016cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cc4:	4606      	mov	r6, r0
 8016cc6:	460d      	mov	r5, r1
 8016cc8:	f000 fd2c 	bl	8017724 <uxr_millis>
 8016ccc:	4607      	mov	r7, r0
 8016cce:	4630      	mov	r0, r6
 8016cd0:	f7ff fc36 	bl	8016540 <uxr_flash_output_streams>
 8016cd4:	2d00      	cmp	r5, #0
 8016cd6:	f106 0808 	add.w	r8, r6, #8
 8016cda:	bfa8      	it	ge
 8016cdc:	462c      	movge	r4, r5
 8016cde:	da07      	bge.n	8016cf0 <uxr_run_session_until_confirm_delivery+0x30>
 8016ce0:	e00e      	b.n	8016d00 <uxr_run_session_until_confirm_delivery+0x40>
 8016ce2:	f7ff fe73 	bl	80169cc <listen_message_reliably>
 8016ce6:	f000 fd1d 	bl	8017724 <uxr_millis>
 8016cea:	1bc3      	subs	r3, r0, r7
 8016cec:	1aec      	subs	r4, r5, r3
 8016cee:	d407      	bmi.n	8016d00 <uxr_run_session_until_confirm_delivery+0x40>
 8016cf0:	4640      	mov	r0, r8
 8016cf2:	f000 fcbb 	bl	801766c <uxr_output_streams_confirmed>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	4621      	mov	r1, r4
 8016cfa:	4630      	mov	r0, r6
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d0f0      	beq.n	8016ce2 <uxr_run_session_until_confirm_delivery+0x22>
 8016d00:	4640      	mov	r0, r8
 8016d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d06:	f000 bcb1 	b.w	801766c <uxr_output_streams_confirmed>
 8016d0a:	bf00      	nop

08016d0c <uxr_run_session_until_all_status>:
 8016d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d10:	9c08      	ldr	r4, [sp, #32]
 8016d12:	4606      	mov	r6, r0
 8016d14:	460f      	mov	r7, r1
 8016d16:	4691      	mov	r9, r2
 8016d18:	461d      	mov	r5, r3
 8016d1a:	f7ff fc11 	bl	8016540 <uxr_flash_output_streams>
 8016d1e:	b124      	cbz	r4, 8016d2a <uxr_run_session_until_all_status+0x1e>
 8016d20:	4622      	mov	r2, r4
 8016d22:	21ff      	movs	r1, #255	@ 0xff
 8016d24:	4628      	mov	r0, r5
 8016d26:	f009 fbf3 	bl	8020510 <memset>
 8016d2a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8016d2e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8016d30:	f000 fcf8 	bl	8017724 <uxr_millis>
 8016d34:	3d01      	subs	r5, #1
 8016d36:	f1a9 0902 	sub.w	r9, r9, #2
 8016d3a:	4680      	mov	r8, r0
 8016d3c:	4639      	mov	r1, r7
 8016d3e:	4630      	mov	r0, r6
 8016d40:	f7ff fe44 	bl	80169cc <listen_message_reliably>
 8016d44:	f000 fcee 	bl	8017724 <uxr_millis>
 8016d48:	eba0 0008 	sub.w	r0, r0, r8
 8016d4c:	1a39      	subs	r1, r7, r0
 8016d4e:	b344      	cbz	r4, 8016da2 <uxr_run_session_until_all_status+0x96>
 8016d50:	4628      	mov	r0, r5
 8016d52:	46ac      	mov	ip, r5
 8016d54:	2301      	movs	r3, #1
 8016d56:	e002      	b.n	8016d5e <uxr_run_session_until_all_status+0x52>
 8016d58:	42a3      	cmp	r3, r4
 8016d5a:	d20d      	bcs.n	8016d78 <uxr_run_session_until_all_status+0x6c>
 8016d5c:	3301      	adds	r3, #1
 8016d5e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8016d62:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8016d66:	d1f7      	bne.n	8016d58 <uxr_run_session_until_all_status+0x4c>
 8016d68:	42a3      	cmp	r3, r4
 8016d6a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8016d6e:	d213      	bcs.n	8016d98 <uxr_run_session_until_all_status+0x8c>
 8016d70:	2a00      	cmp	r2, #0
 8016d72:	d0f3      	beq.n	8016d5c <uxr_run_session_until_all_status+0x50>
 8016d74:	2900      	cmp	r1, #0
 8016d76:	dce2      	bgt.n	8016d3e <uxr_run_session_until_all_status+0x32>
 8016d78:	2300      	movs	r3, #0
 8016d7a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8016d7c:	442c      	add	r4, r5
 8016d7e:	e001      	b.n	8016d84 <uxr_run_session_until_all_status+0x78>
 8016d80:	2b01      	cmp	r3, #1
 8016d82:	d812      	bhi.n	8016daa <uxr_run_session_until_all_status+0x9e>
 8016d84:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8016d88:	4284      	cmp	r4, r0
 8016d8a:	d1f9      	bne.n	8016d80 <uxr_run_session_until_all_status+0x74>
 8016d8c:	2b01      	cmp	r3, #1
 8016d8e:	bf8c      	ite	hi
 8016d90:	2000      	movhi	r0, #0
 8016d92:	2001      	movls	r0, #1
 8016d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d98:	2900      	cmp	r1, #0
 8016d9a:	dded      	ble.n	8016d78 <uxr_run_session_until_all_status+0x6c>
 8016d9c:	2a00      	cmp	r2, #0
 8016d9e:	d1ce      	bne.n	8016d3e <uxr_run_session_until_all_status+0x32>
 8016da0:	e7ea      	b.n	8016d78 <uxr_run_session_until_all_status+0x6c>
 8016da2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8016da4:	2001      	movs	r0, #1
 8016da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016daa:	2000      	movs	r0, #0
 8016dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016db0 <wait_session_status>:
 8016db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016db4:	4604      	mov	r4, r0
 8016db6:	b09d      	sub	sp, #116	@ 0x74
 8016db8:	20ff      	movs	r0, #255	@ 0xff
 8016dba:	7160      	strb	r0, [r4, #5]
 8016dbc:	9303      	str	r3, [sp, #12]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	f000 80b6 	beq.w	8016f30 <wait_session_status+0x180>
 8016dc4:	468a      	mov	sl, r1
 8016dc6:	4691      	mov	r9, r2
 8016dc8:	f04f 0b00 	mov.w	fp, #0
 8016dcc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016dce:	464a      	mov	r2, r9
 8016dd0:	e9d3 0500 	ldrd	r0, r5, [r3]
 8016dd4:	4651      	mov	r1, sl
 8016dd6:	47a8      	blx	r5
 8016dd8:	f000 fca4 	bl	8017724 <uxr_millis>
 8016ddc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016de0:	4605      	mov	r5, r0
 8016de2:	e009      	b.n	8016df8 <wait_session_status+0x48>
 8016de4:	f000 fc9e 	bl	8017724 <uxr_millis>
 8016de8:	1b40      	subs	r0, r0, r5
 8016dea:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	dd40      	ble.n	8016e74 <wait_session_status+0xc4>
 8016df2:	7960      	ldrb	r0, [r4, #5]
 8016df4:	28ff      	cmp	r0, #255	@ 0xff
 8016df6:	d145      	bne.n	8016e84 <wait_session_status+0xd4>
 8016df8:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8016dfa:	a908      	add	r1, sp, #32
 8016dfc:	6896      	ldr	r6, [r2, #8]
 8016dfe:	6810      	ldr	r0, [r2, #0]
 8016e00:	aa09      	add	r2, sp, #36	@ 0x24
 8016e02:	47b0      	blx	r6
 8016e04:	2800      	cmp	r0, #0
 8016e06:	d0ed      	beq.n	8016de4 <wait_session_status+0x34>
 8016e08:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8016e0c:	a80c      	add	r0, sp, #48	@ 0x30
 8016e0e:	f7fc fab9 	bl	8013384 <ucdr_init_buffer>
 8016e12:	2600      	movs	r6, #0
 8016e14:	f10d 031e 	add.w	r3, sp, #30
 8016e18:	aa07      	add	r2, sp, #28
 8016e1a:	a90c      	add	r1, sp, #48	@ 0x30
 8016e1c:	4620      	mov	r0, r4
 8016e1e:	f88d 601c 	strb.w	r6, [sp, #28]
 8016e22:	f000 fa87 	bl	8017334 <uxr_read_session_header>
 8016e26:	2800      	cmp	r0, #0
 8016e28:	d0dc      	beq.n	8016de4 <wait_session_status+0x34>
 8016e2a:	4631      	mov	r1, r6
 8016e2c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8016e30:	f000 fb24 	bl	801747c <uxr_stream_id_from_raw>
 8016e34:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8016e38:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8016e3c:	9302      	str	r3, [sp, #8]
 8016e3e:	2f01      	cmp	r7, #1
 8016e40:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8016e44:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8016e48:	d05c      	beq.n	8016f04 <wait_session_status+0x154>
 8016e4a:	2f02      	cmp	r7, #2
 8016e4c:	d020      	beq.n	8016e90 <wait_session_status+0xe0>
 8016e4e:	2f00      	cmp	r7, #0
 8016e50:	d1c8      	bne.n	8016de4 <wait_session_status+0x34>
 8016e52:	4639      	mov	r1, r7
 8016e54:	4638      	mov	r0, r7
 8016e56:	f000 fb11 	bl	801747c <uxr_stream_id_from_raw>
 8016e5a:	a90c      	add	r1, sp, #48	@ 0x30
 8016e5c:	4602      	mov	r2, r0
 8016e5e:	900b      	str	r0, [sp, #44]	@ 0x2c
 8016e60:	4620      	mov	r0, r4
 8016e62:	f7ff fc2b 	bl	80166bc <read_submessage_list>
 8016e66:	f000 fc5d 	bl	8017724 <uxr_millis>
 8016e6a:	1b40      	subs	r0, r0, r5
 8016e6c:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	dcbe      	bgt.n	8016df2 <wait_session_status+0x42>
 8016e74:	9b03      	ldr	r3, [sp, #12]
 8016e76:	7960      	ldrb	r0, [r4, #5]
 8016e78:	f10b 0b01 	add.w	fp, fp, #1
 8016e7c:	455b      	cmp	r3, fp
 8016e7e:	d001      	beq.n	8016e84 <wait_session_status+0xd4>
 8016e80:	28ff      	cmp	r0, #255	@ 0xff
 8016e82:	d0a3      	beq.n	8016dcc <wait_session_status+0x1c>
 8016e84:	38ff      	subs	r0, #255	@ 0xff
 8016e86:	bf18      	it	ne
 8016e88:	2001      	movne	r0, #1
 8016e8a:	b01d      	add	sp, #116	@ 0x74
 8016e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e90:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8016e94:	9304      	str	r3, [sp, #16]
 8016e96:	4631      	mov	r1, r6
 8016e98:	f104 0008 	add.w	r0, r4, #8
 8016e9c:	f000 fbdc 	bl	8017658 <uxr_get_input_reliable_stream>
 8016ea0:	4680      	mov	r8, r0
 8016ea2:	b348      	cbz	r0, 8016ef8 <wait_session_status+0x148>
 8016ea4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016ea6:	9205      	str	r2, [sp, #20]
 8016ea8:	a80c      	add	r0, sp, #48	@ 0x30
 8016eaa:	f7fc fa9b 	bl	80133e4 <ucdr_buffer_remaining>
 8016eae:	4603      	mov	r3, r0
 8016eb0:	f10d 001d 	add.w	r0, sp, #29
 8016eb4:	9000      	str	r0, [sp, #0]
 8016eb6:	9a05      	ldr	r2, [sp, #20]
 8016eb8:	9902      	ldr	r1, [sp, #8]
 8016eba:	4640      	mov	r0, r8
 8016ebc:	f006 ff10 	bl	801dce0 <uxr_receive_reliable_message>
 8016ec0:	b1d0      	cbz	r0, 8016ef8 <wait_session_status+0x148>
 8016ec2:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d03a      	beq.n	8016f40 <wait_session_status+0x190>
 8016eca:	9f04      	ldr	r7, [sp, #16]
 8016ecc:	e00a      	b.n	8016ee4 <wait_session_status+0x134>
 8016ece:	f04f 0302 	mov.w	r3, #2
 8016ed2:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8016ed6:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8016eda:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8016ede:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016ee0:	f7ff fbec 	bl	80166bc <read_submessage_list>
 8016ee4:	a914      	add	r1, sp, #80	@ 0x50
 8016ee6:	2204      	movs	r2, #4
 8016ee8:	4640      	mov	r0, r8
 8016eea:	f006 ff79 	bl	801dde0 <uxr_next_input_reliable_buffer_available>
 8016eee:	4603      	mov	r3, r0
 8016ef0:	a914      	add	r1, sp, #80	@ 0x50
 8016ef2:	4620      	mov	r0, r4
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d1ea      	bne.n	8016ece <wait_session_status+0x11e>
 8016ef8:	9904      	ldr	r1, [sp, #16]
 8016efa:	4632      	mov	r2, r6
 8016efc:	4620      	mov	r0, r4
 8016efe:	f7ff fa59 	bl	80163b4 <write_submessage_acknack.isra.0>
 8016f02:	e76f      	b.n	8016de4 <wait_session_status+0x34>
 8016f04:	4631      	mov	r1, r6
 8016f06:	f104 0008 	add.w	r0, r4, #8
 8016f0a:	f000 fb9b 	bl	8017644 <uxr_get_input_best_effort_stream>
 8016f0e:	2800      	cmp	r0, #0
 8016f10:	f43f af68 	beq.w	8016de4 <wait_session_status+0x34>
 8016f14:	9902      	ldr	r1, [sp, #8]
 8016f16:	f006 fe4f 	bl	801dbb8 <uxr_receive_best_effort_message>
 8016f1a:	2800      	cmp	r0, #0
 8016f1c:	f43f af62 	beq.w	8016de4 <wait_session_status+0x34>
 8016f20:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8016f24:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016f26:	a90c      	add	r1, sp, #48	@ 0x30
 8016f28:	4620      	mov	r0, r4
 8016f2a:	f7ff fbc7 	bl	80166bc <read_submessage_list>
 8016f2e:	e759      	b.n	8016de4 <wait_session_status+0x34>
 8016f30:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016f32:	e9d3 0400 	ldrd	r0, r4, [r3]
 8016f36:	47a0      	blx	r4
 8016f38:	2001      	movs	r0, #1
 8016f3a:	b01d      	add	sp, #116	@ 0x74
 8016f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f40:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8016f44:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016f46:	a90c      	add	r1, sp, #48	@ 0x30
 8016f48:	4620      	mov	r0, r4
 8016f4a:	f7ff fbb7 	bl	80166bc <read_submessage_list>
 8016f4e:	e7bc      	b.n	8016eca <wait_session_status+0x11a>

08016f50 <uxr_delete_session_retries>:
 8016f50:	b530      	push	{r4, r5, lr}
 8016f52:	b08f      	sub	sp, #60	@ 0x3c
 8016f54:	4604      	mov	r4, r0
 8016f56:	460d      	mov	r5, r1
 8016f58:	f000 fa2e 	bl	80173b8 <uxr_session_header_offset>
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	2210      	movs	r2, #16
 8016f60:	9000      	str	r0, [sp, #0]
 8016f62:	a902      	add	r1, sp, #8
 8016f64:	a806      	add	r0, sp, #24
 8016f66:	f7fc f9fb 	bl	8013360 <ucdr_init_buffer_origin_offset>
 8016f6a:	a906      	add	r1, sp, #24
 8016f6c:	4620      	mov	r0, r4
 8016f6e:	f000 f973 	bl	8017258 <uxr_buffer_delete_session>
 8016f72:	2200      	movs	r2, #0
 8016f74:	4611      	mov	r1, r2
 8016f76:	9b06      	ldr	r3, [sp, #24]
 8016f78:	4620      	mov	r0, r4
 8016f7a:	f000 f9c7 	bl	801730c <uxr_stamp_session_header>
 8016f7e:	a806      	add	r0, sp, #24
 8016f80:	f7fc fa2c 	bl	80133dc <ucdr_buffer_length>
 8016f84:	462b      	mov	r3, r5
 8016f86:	4602      	mov	r2, r0
 8016f88:	a902      	add	r1, sp, #8
 8016f8a:	4620      	mov	r0, r4
 8016f8c:	f7ff ff10 	bl	8016db0 <wait_session_status>
 8016f90:	b118      	cbz	r0, 8016f9a <uxr_delete_session_retries+0x4a>
 8016f92:	7960      	ldrb	r0, [r4, #5]
 8016f94:	fab0 f080 	clz	r0, r0
 8016f98:	0940      	lsrs	r0, r0, #5
 8016f9a:	b00f      	add	sp, #60	@ 0x3c
 8016f9c:	bd30      	pop	{r4, r5, pc}
 8016f9e:	bf00      	nop

08016fa0 <uxr_create_session>:
 8016fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fa4:	f100 0b08 	add.w	fp, r0, #8
 8016fa8:	b0ab      	sub	sp, #172	@ 0xac
 8016faa:	4604      	mov	r4, r0
 8016fac:	4658      	mov	r0, fp
 8016fae:	f000 fa99 	bl	80174e4 <uxr_reset_stream_storage>
 8016fb2:	4620      	mov	r0, r4
 8016fb4:	f000 fa00 	bl	80173b8 <uxr_session_header_offset>
 8016fb8:	2300      	movs	r3, #0
 8016fba:	9000      	str	r0, [sp, #0]
 8016fbc:	221c      	movs	r2, #28
 8016fbe:	a90b      	add	r1, sp, #44	@ 0x2c
 8016fc0:	a812      	add	r0, sp, #72	@ 0x48
 8016fc2:	f7fc f9cd 	bl	8013360 <ucdr_init_buffer_origin_offset>
 8016fc6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016fc8:	8a1a      	ldrh	r2, [r3, #16]
 8016fca:	3a04      	subs	r2, #4
 8016fcc:	b292      	uxth	r2, r2
 8016fce:	a912      	add	r1, sp, #72	@ 0x48
 8016fd0:	4620      	mov	r0, r4
 8016fd2:	f000 f917 	bl	8017204 <uxr_buffer_create_session>
 8016fd6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016fd8:	4620      	mov	r0, r4
 8016fda:	f000 f983 	bl	80172e4 <uxr_stamp_create_session_header>
 8016fde:	a812      	add	r0, sp, #72	@ 0x48
 8016fe0:	f7fc f9fc 	bl	80133dc <ucdr_buffer_length>
 8016fe4:	23ff      	movs	r3, #255	@ 0xff
 8016fe6:	7163      	strb	r3, [r4, #5]
 8016fe8:	230a      	movs	r3, #10
 8016fea:	46da      	mov	sl, fp
 8016fec:	9303      	str	r3, [sp, #12]
 8016fee:	4683      	mov	fp, r0
 8016ff0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8016ff2:	465a      	mov	r2, fp
 8016ff4:	e9d3 0500 	ldrd	r0, r5, [r3]
 8016ff8:	a90b      	add	r1, sp, #44	@ 0x2c
 8016ffa:	47a8      	blx	r5
 8016ffc:	f000 fb92 	bl	8017724 <uxr_millis>
 8017000:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017004:	4605      	mov	r5, r0
 8017006:	e009      	b.n	801701c <uxr_create_session+0x7c>
 8017008:	f000 fb8c 	bl	8017724 <uxr_millis>
 801700c:	1b40      	subs	r0, r0, r5
 801700e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8017012:	2b00      	cmp	r3, #0
 8017014:	7962      	ldrb	r2, [r4, #5]
 8017016:	dd38      	ble.n	801708a <uxr_create_session+0xea>
 8017018:	2aff      	cmp	r2, #255	@ 0xff
 801701a:	d13c      	bne.n	8017096 <uxr_create_session+0xf6>
 801701c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801701e:	a907      	add	r1, sp, #28
 8017020:	6896      	ldr	r6, [r2, #8]
 8017022:	6810      	ldr	r0, [r2, #0]
 8017024:	aa08      	add	r2, sp, #32
 8017026:	47b0      	blx	r6
 8017028:	2800      	cmp	r0, #0
 801702a:	d0ed      	beq.n	8017008 <uxr_create_session+0x68>
 801702c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8017030:	a81a      	add	r0, sp, #104	@ 0x68
 8017032:	f7fc f9a7 	bl	8013384 <ucdr_init_buffer>
 8017036:	2600      	movs	r6, #0
 8017038:	f10d 031a 	add.w	r3, sp, #26
 801703c:	aa06      	add	r2, sp, #24
 801703e:	a91a      	add	r1, sp, #104	@ 0x68
 8017040:	4620      	mov	r0, r4
 8017042:	f88d 6018 	strb.w	r6, [sp, #24]
 8017046:	f000 f975 	bl	8017334 <uxr_read_session_header>
 801704a:	2800      	cmp	r0, #0
 801704c:	d0dc      	beq.n	8017008 <uxr_create_session+0x68>
 801704e:	4631      	mov	r1, r6
 8017050:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8017054:	f000 fa12 	bl	801747c <uxr_stream_id_from_raw>
 8017058:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801705c:	2e01      	cmp	r6, #1
 801705e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8017062:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 8017066:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801706a:	d053      	beq.n	8017114 <uxr_create_session+0x174>
 801706c:	2e02      	cmp	r6, #2
 801706e:	d018      	beq.n	80170a2 <uxr_create_session+0x102>
 8017070:	2e00      	cmp	r6, #0
 8017072:	d1c9      	bne.n	8017008 <uxr_create_session+0x68>
 8017074:	4631      	mov	r1, r6
 8017076:	4630      	mov	r0, r6
 8017078:	f000 fa00 	bl	801747c <uxr_stream_id_from_raw>
 801707c:	a91a      	add	r1, sp, #104	@ 0x68
 801707e:	4602      	mov	r2, r0
 8017080:	900a      	str	r0, [sp, #40]	@ 0x28
 8017082:	4620      	mov	r0, r4
 8017084:	f7ff fb1a 	bl	80166bc <read_submessage_list>
 8017088:	e7be      	b.n	8017008 <uxr_create_session+0x68>
 801708a:	9b03      	ldr	r3, [sp, #12]
 801708c:	3b01      	subs	r3, #1
 801708e:	9303      	str	r3, [sp, #12]
 8017090:	d001      	beq.n	8017096 <uxr_create_session+0xf6>
 8017092:	2aff      	cmp	r2, #255	@ 0xff
 8017094:	d0ac      	beq.n	8016ff0 <uxr_create_session+0x50>
 8017096:	2a00      	cmp	r2, #0
 8017098:	d051      	beq.n	801713e <uxr_create_session+0x19e>
 801709a:	2000      	movs	r0, #0
 801709c:	b02b      	add	sp, #172	@ 0xac
 801709e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170a2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80170a6:	9304      	str	r3, [sp, #16]
 80170a8:	4639      	mov	r1, r7
 80170aa:	4650      	mov	r0, sl
 80170ac:	f000 fad4 	bl	8017658 <uxr_get_input_reliable_stream>
 80170b0:	4680      	mov	r8, r0
 80170b2:	b348      	cbz	r0, 8017108 <uxr_create_session+0x168>
 80170b4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80170b6:	9205      	str	r2, [sp, #20]
 80170b8:	a81a      	add	r0, sp, #104	@ 0x68
 80170ba:	f7fc f993 	bl	80133e4 <ucdr_buffer_remaining>
 80170be:	4603      	mov	r3, r0
 80170c0:	f10d 0019 	add.w	r0, sp, #25
 80170c4:	9000      	str	r0, [sp, #0]
 80170c6:	9a05      	ldr	r2, [sp, #20]
 80170c8:	4649      	mov	r1, r9
 80170ca:	4640      	mov	r0, r8
 80170cc:	f006 fe08 	bl	801dce0 <uxr_receive_reliable_message>
 80170d0:	b1d0      	cbz	r0, 8017108 <uxr_create_session+0x168>
 80170d2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d038      	beq.n	801714c <uxr_create_session+0x1ac>
 80170da:	9e04      	ldr	r6, [sp, #16]
 80170dc:	e00a      	b.n	80170f4 <uxr_create_session+0x154>
 80170de:	f04f 0302 	mov.w	r3, #2
 80170e2:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 80170e6:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 80170ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80170ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80170f0:	f7ff fae4 	bl	80166bc <read_submessage_list>
 80170f4:	a922      	add	r1, sp, #136	@ 0x88
 80170f6:	2204      	movs	r2, #4
 80170f8:	4640      	mov	r0, r8
 80170fa:	f006 fe71 	bl	801dde0 <uxr_next_input_reliable_buffer_available>
 80170fe:	4603      	mov	r3, r0
 8017100:	a922      	add	r1, sp, #136	@ 0x88
 8017102:	4620      	mov	r0, r4
 8017104:	2b00      	cmp	r3, #0
 8017106:	d1ea      	bne.n	80170de <uxr_create_session+0x13e>
 8017108:	9904      	ldr	r1, [sp, #16]
 801710a:	463a      	mov	r2, r7
 801710c:	4620      	mov	r0, r4
 801710e:	f7ff f951 	bl	80163b4 <write_submessage_acknack.isra.0>
 8017112:	e779      	b.n	8017008 <uxr_create_session+0x68>
 8017114:	4639      	mov	r1, r7
 8017116:	4650      	mov	r0, sl
 8017118:	f000 fa94 	bl	8017644 <uxr_get_input_best_effort_stream>
 801711c:	2800      	cmp	r0, #0
 801711e:	f43f af73 	beq.w	8017008 <uxr_create_session+0x68>
 8017122:	4649      	mov	r1, r9
 8017124:	f006 fd48 	bl	801dbb8 <uxr_receive_best_effort_message>
 8017128:	2800      	cmp	r0, #0
 801712a:	f43f af6d 	beq.w	8017008 <uxr_create_session+0x68>
 801712e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8017132:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017134:	a91a      	add	r1, sp, #104	@ 0x68
 8017136:	4620      	mov	r0, r4
 8017138:	f7ff fac0 	bl	80166bc <read_submessage_list>
 801713c:	e764      	b.n	8017008 <uxr_create_session+0x68>
 801713e:	4650      	mov	r0, sl
 8017140:	f000 f9d0 	bl	80174e4 <uxr_reset_stream_storage>
 8017144:	2001      	movs	r0, #1
 8017146:	b02b      	add	sp, #172	@ 0xac
 8017148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801714c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 8017150:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017152:	a91a      	add	r1, sp, #104	@ 0x68
 8017154:	4620      	mov	r0, r4
 8017156:	f7ff fab1 	bl	80166bc <read_submessage_list>
 801715a:	e7be      	b.n	80170da <uxr_create_session+0x13a>

0801715c <uxr_prepare_stream_to_write_submessage>:
 801715c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017160:	b082      	sub	sp, #8
 8017162:	4682      	mov	sl, r0
 8017164:	4610      	mov	r0, r2
 8017166:	4615      	mov	r5, r2
 8017168:	461e      	mov	r6, r3
 801716a:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 801716e:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 8017172:	9101      	str	r1, [sp, #4]
 8017174:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8017178:	f000 face 	bl	8017718 <uxr_submessage_padding>
 801717c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8017180:	f105 0904 	add.w	r9, r5, #4
 8017184:	2b01      	cmp	r3, #1
 8017186:	4481      	add	r9, r0
 8017188:	d01d      	beq.n	80171c6 <uxr_prepare_stream_to_write_submessage+0x6a>
 801718a:	2b02      	cmp	r3, #2
 801718c:	d116      	bne.n	80171bc <uxr_prepare_stream_to_write_submessage+0x60>
 801718e:	4621      	mov	r1, r4
 8017190:	f10a 0008 	add.w	r0, sl, #8
 8017194:	f000 fa4c 	bl	8017630 <uxr_get_output_reliable_stream>
 8017198:	4604      	mov	r4, r0
 801719a:	b158      	cbz	r0, 80171b4 <uxr_prepare_stream_to_write_submessage+0x58>
 801719c:	4649      	mov	r1, r9
 801719e:	4632      	mov	r2, r6
 80171a0:	f006 ffda 	bl	801e158 <uxr_prepare_reliable_buffer_to_write>
 80171a4:	4604      	mov	r4, r0
 80171a6:	b12c      	cbz	r4, 80171b4 <uxr_prepare_stream_to_write_submessage+0x58>
 80171a8:	4643      	mov	r3, r8
 80171aa:	b2aa      	uxth	r2, r5
 80171ac:	4639      	mov	r1, r7
 80171ae:	4630      	mov	r0, r6
 80171b0:	f000 fa72 	bl	8017698 <uxr_buffer_submessage_header>
 80171b4:	4620      	mov	r0, r4
 80171b6:	b002      	add	sp, #8
 80171b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171bc:	2400      	movs	r4, #0
 80171be:	4620      	mov	r0, r4
 80171c0:	b002      	add	sp, #8
 80171c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171c6:	4621      	mov	r1, r4
 80171c8:	f10a 0008 	add.w	r0, sl, #8
 80171cc:	f000 fa28 	bl	8017620 <uxr_get_output_best_effort_stream>
 80171d0:	4604      	mov	r4, r0
 80171d2:	2800      	cmp	r0, #0
 80171d4:	d0ee      	beq.n	80171b4 <uxr_prepare_stream_to_write_submessage+0x58>
 80171d6:	4649      	mov	r1, r9
 80171d8:	4632      	mov	r2, r6
 80171da:	f006 feed 	bl	801dfb8 <uxr_prepare_best_effort_buffer_to_write>
 80171de:	4604      	mov	r4, r0
 80171e0:	e7e1      	b.n	80171a6 <uxr_prepare_stream_to_write_submessage+0x4a>
 80171e2:	bf00      	nop

080171e4 <uxr_init_session_info>:
 80171e4:	0e13      	lsrs	r3, r2, #24
 80171e6:	7043      	strb	r3, [r0, #1]
 80171e8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80171ec:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80171f0:	7001      	strb	r1, [r0, #0]
 80171f2:	70c3      	strb	r3, [r0, #3]
 80171f4:	2109      	movs	r1, #9
 80171f6:	23ff      	movs	r3, #255	@ 0xff
 80171f8:	f880 c002 	strb.w	ip, [r0, #2]
 80171fc:	7102      	strb	r2, [r0, #4]
 80171fe:	80c1      	strh	r1, [r0, #6]
 8017200:	7143      	strb	r3, [r0, #5]
 8017202:	4770      	bx	lr

08017204 <uxr_buffer_create_session>:
 8017204:	b530      	push	{r4, r5, lr}
 8017206:	b089      	sub	sp, #36	@ 0x24
 8017208:	2300      	movs	r3, #0
 801720a:	4d12      	ldr	r5, [pc, #72]	@ (8017254 <uxr_buffer_create_session+0x50>)
 801720c:	9307      	str	r3, [sp, #28]
 801720e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8017212:	2201      	movs	r2, #1
 8017214:	9301      	str	r3, [sp, #4]
 8017216:	80c2      	strh	r2, [r0, #6]
 8017218:	f88d 2004 	strb.w	r2, [sp, #4]
 801721c:	682a      	ldr	r2, [r5, #0]
 801721e:	9200      	str	r2, [sp, #0]
 8017220:	88aa      	ldrh	r2, [r5, #4]
 8017222:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017226:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801722a:	9202      	str	r2, [sp, #8]
 801722c:	460c      	mov	r4, r1
 801722e:	7802      	ldrb	r2, [r0, #0]
 8017230:	9303      	str	r3, [sp, #12]
 8017232:	4619      	mov	r1, r3
 8017234:	f88d 200c 	strb.w	r2, [sp, #12]
 8017238:	4620      	mov	r0, r4
 801723a:	2210      	movs	r2, #16
 801723c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8017240:	9306      	str	r3, [sp, #24]
 8017242:	f000 fa29 	bl	8017698 <uxr_buffer_submessage_header>
 8017246:	4669      	mov	r1, sp
 8017248:	4620      	mov	r0, r4
 801724a:	f001 fa6d 	bl	8018728 <uxr_serialize_CREATE_CLIENT_Payload>
 801724e:	b009      	add	sp, #36	@ 0x24
 8017250:	bd30      	pop	{r4, r5, pc}
 8017252:	bf00      	nop
 8017254:	08021530 	.word	0x08021530

08017258 <uxr_buffer_delete_session>:
 8017258:	b510      	push	{r4, lr}
 801725a:	4b0c      	ldr	r3, [pc, #48]	@ (801728c <uxr_buffer_delete_session+0x34>)
 801725c:	b082      	sub	sp, #8
 801725e:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8017262:	f8ad c006 	strh.w	ip, [sp, #6]
 8017266:	460c      	mov	r4, r1
 8017268:	2202      	movs	r2, #2
 801726a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801726e:	80c2      	strh	r2, [r0, #6]
 8017270:	f8ad 3004 	strh.w	r3, [sp, #4]
 8017274:	2204      	movs	r2, #4
 8017276:	2300      	movs	r3, #0
 8017278:	2103      	movs	r1, #3
 801727a:	4620      	mov	r0, r4
 801727c:	f000 fa0c 	bl	8017698 <uxr_buffer_submessage_header>
 8017280:	a901      	add	r1, sp, #4
 8017282:	4620      	mov	r0, r4
 8017284:	f001 faf6 	bl	8018874 <uxr_serialize_DELETE_Payload>
 8017288:	b002      	add	sp, #8
 801728a:	bd10      	pop	{r4, pc}
 801728c:	08021530 	.word	0x08021530

08017290 <uxr_read_create_session_status>:
 8017290:	b510      	push	{r4, lr}
 8017292:	b088      	sub	sp, #32
 8017294:	4604      	mov	r4, r0
 8017296:	4608      	mov	r0, r1
 8017298:	a901      	add	r1, sp, #4
 801729a:	f001 fafb 	bl	8018894 <uxr_deserialize_STATUS_AGENT_Payload>
 801729e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80172a2:	7163      	strb	r3, [r4, #5]
 80172a4:	b008      	add	sp, #32
 80172a6:	bd10      	pop	{r4, pc}

080172a8 <uxr_read_delete_session_status>:
 80172a8:	b510      	push	{r4, lr}
 80172aa:	4604      	mov	r4, r0
 80172ac:	b084      	sub	sp, #16
 80172ae:	4608      	mov	r0, r1
 80172b0:	a902      	add	r1, sp, #8
 80172b2:	f001 fb1f 	bl	80188f4 <uxr_deserialize_STATUS_Payload>
 80172b6:	88e3      	ldrh	r3, [r4, #6]
 80172b8:	2b02      	cmp	r3, #2
 80172ba:	d001      	beq.n	80172c0 <uxr_read_delete_session_status+0x18>
 80172bc:	b004      	add	sp, #16
 80172be:	bd10      	pop	{r4, pc}
 80172c0:	f10d 000a 	add.w	r0, sp, #10
 80172c4:	f7fe fffc 	bl	80162c0 <uxr_object_id_from_raw>
 80172c8:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80172cc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80172d0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80172d4:	b29b      	uxth	r3, r3
 80172d6:	2b02      	cmp	r3, #2
 80172d8:	bf04      	itt	eq
 80172da:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80172de:	7163      	strbeq	r3, [r4, #5]
 80172e0:	b004      	add	sp, #16
 80172e2:	bd10      	pop	{r4, pc}

080172e4 <uxr_stamp_create_session_header>:
 80172e4:	b510      	push	{r4, lr}
 80172e6:	2208      	movs	r2, #8
 80172e8:	b08a      	sub	sp, #40	@ 0x28
 80172ea:	4604      	mov	r4, r0
 80172ec:	eb0d 0002 	add.w	r0, sp, r2
 80172f0:	f7fc f848 	bl	8013384 <ucdr_init_buffer>
 80172f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172f8:	9400      	str	r4, [sp, #0]
 80172fa:	2300      	movs	r3, #0
 80172fc:	461a      	mov	r2, r3
 80172fe:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8017302:	a802      	add	r0, sp, #8
 8017304:	f000 fbc2 	bl	8017a8c <uxr_serialize_message_header>
 8017308:	b00a      	add	sp, #40	@ 0x28
 801730a:	bd10      	pop	{r4, pc}

0801730c <uxr_stamp_session_header>:
 801730c:	b530      	push	{r4, r5, lr}
 801730e:	b08d      	sub	sp, #52	@ 0x34
 8017310:	4604      	mov	r4, r0
 8017312:	460d      	mov	r5, r1
 8017314:	9203      	str	r2, [sp, #12]
 8017316:	4619      	mov	r1, r3
 8017318:	a804      	add	r0, sp, #16
 801731a:	2208      	movs	r2, #8
 801731c:	f7fc f832 	bl	8013384 <ucdr_init_buffer>
 8017320:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017324:	9b03      	ldr	r3, [sp, #12]
 8017326:	9400      	str	r4, [sp, #0]
 8017328:	462a      	mov	r2, r5
 801732a:	a804      	add	r0, sp, #16
 801732c:	f000 fbae 	bl	8017a8c <uxr_serialize_message_header>
 8017330:	b00d      	add	sp, #52	@ 0x34
 8017332:	bd30      	pop	{r4, r5, pc}

08017334 <uxr_read_session_header>:
 8017334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017338:	4607      	mov	r7, r0
 801733a:	b084      	sub	sp, #16
 801733c:	4608      	mov	r0, r1
 801733e:	460c      	mov	r4, r1
 8017340:	4615      	mov	r5, r2
 8017342:	461e      	mov	r6, r3
 8017344:	f7fc f84e 	bl	80133e4 <ucdr_buffer_remaining>
 8017348:	2808      	cmp	r0, #8
 801734a:	d803      	bhi.n	8017354 <uxr_read_session_header+0x20>
 801734c:	2000      	movs	r0, #0
 801734e:	b004      	add	sp, #16
 8017350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017354:	f10d 080c 	add.w	r8, sp, #12
 8017358:	4633      	mov	r3, r6
 801735a:	462a      	mov	r2, r5
 801735c:	f8cd 8000 	str.w	r8, [sp]
 8017360:	4620      	mov	r0, r4
 8017362:	f10d 010b 	add.w	r1, sp, #11
 8017366:	f000 fbaf 	bl	8017ac8 <uxr_deserialize_message_header>
 801736a:	783a      	ldrb	r2, [r7, #0]
 801736c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8017370:	4293      	cmp	r3, r2
 8017372:	d1eb      	bne.n	801734c <uxr_read_session_header+0x18>
 8017374:	061b      	lsls	r3, r3, #24
 8017376:	d41c      	bmi.n	80173b2 <uxr_read_session_header+0x7e>
 8017378:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801737c:	787b      	ldrb	r3, [r7, #1]
 801737e:	429a      	cmp	r2, r3
 8017380:	d003      	beq.n	801738a <uxr_read_session_header+0x56>
 8017382:	2001      	movs	r0, #1
 8017384:	f080 0001 	eor.w	r0, r0, #1
 8017388:	e7e1      	b.n	801734e <uxr_read_session_header+0x1a>
 801738a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801738e:	78bb      	ldrb	r3, [r7, #2]
 8017390:	429a      	cmp	r2, r3
 8017392:	f107 0102 	add.w	r1, r7, #2
 8017396:	d1f4      	bne.n	8017382 <uxr_read_session_header+0x4e>
 8017398:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801739c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80173a0:	429a      	cmp	r2, r3
 80173a2:	d1ee      	bne.n	8017382 <uxr_read_session_header+0x4e>
 80173a4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80173a8:	784b      	ldrb	r3, [r1, #1]
 80173aa:	429a      	cmp	r2, r3
 80173ac:	d1e9      	bne.n	8017382 <uxr_read_session_header+0x4e>
 80173ae:	2000      	movs	r0, #0
 80173b0:	e7e8      	b.n	8017384 <uxr_read_session_header+0x50>
 80173b2:	2001      	movs	r0, #1
 80173b4:	e7cb      	b.n	801734e <uxr_read_session_header+0x1a>
 80173b6:	bf00      	nop

080173b8 <uxr_session_header_offset>:
 80173b8:	f990 3000 	ldrsb.w	r3, [r0]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	bfac      	ite	ge
 80173c0:	2008      	movge	r0, #8
 80173c2:	2004      	movlt	r0, #4
 80173c4:	4770      	bx	lr
 80173c6:	bf00      	nop

080173c8 <uxr_init_base_object_request>:
 80173c8:	b510      	push	{r4, lr}
 80173ca:	88c3      	ldrh	r3, [r0, #6]
 80173cc:	b082      	sub	sp, #8
 80173ce:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 80173d2:	9101      	str	r1, [sp, #4]
 80173d4:	f1a3 010a 	sub.w	r1, r3, #10
 80173d8:	b289      	uxth	r1, r1
 80173da:	42a1      	cmp	r1, r4
 80173dc:	d80e      	bhi.n	80173fc <uxr_init_base_object_request+0x34>
 80173de:	3301      	adds	r3, #1
 80173e0:	b29c      	uxth	r4, r3
 80173e2:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80173e6:	b2db      	uxtb	r3, r3
 80173e8:	80c4      	strh	r4, [r0, #6]
 80173ea:	9801      	ldr	r0, [sp, #4]
 80173ec:	7011      	strb	r1, [r2, #0]
 80173ee:	7053      	strb	r3, [r2, #1]
 80173f0:	1c91      	adds	r1, r2, #2
 80173f2:	f7fe ff79 	bl	80162e8 <uxr_object_id_to_raw>
 80173f6:	4620      	mov	r0, r4
 80173f8:	b002      	add	sp, #8
 80173fa:	bd10      	pop	{r4, pc}
 80173fc:	230a      	movs	r3, #10
 80173fe:	2100      	movs	r1, #0
 8017400:	461c      	mov	r4, r3
 8017402:	e7f1      	b.n	80173e8 <uxr_init_base_object_request+0x20>

08017404 <uxr_parse_base_object_request>:
 8017404:	b570      	push	{r4, r5, r6, lr}
 8017406:	4604      	mov	r4, r0
 8017408:	3002      	adds	r0, #2
 801740a:	460d      	mov	r5, r1
 801740c:	4616      	mov	r6, r2
 801740e:	f7fe ff57 	bl	80162c0 <uxr_object_id_from_raw>
 8017412:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8017416:	8028      	strh	r0, [r5, #0]
 8017418:	806b      	strh	r3, [r5, #2]
 801741a:	7822      	ldrb	r2, [r4, #0]
 801741c:	7863      	ldrb	r3, [r4, #1]
 801741e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8017422:	8033      	strh	r3, [r6, #0]
 8017424:	bd70      	pop	{r4, r5, r6, pc}
 8017426:	bf00      	nop

08017428 <uxr_stream_id>:
 8017428:	2901      	cmp	r1, #1
 801742a:	b082      	sub	sp, #8
 801742c:	d01d      	beq.n	801746a <uxr_stream_id+0x42>
 801742e:	2902      	cmp	r1, #2
 8017430:	f04f 0c00 	mov.w	ip, #0
 8017434:	d01e      	beq.n	8017474 <uxr_stream_id+0x4c>
 8017436:	2300      	movs	r3, #0
 8017438:	f36c 0307 	bfi	r3, ip, #0, #8
 801743c:	f360 230f 	bfi	r3, r0, #8, #8
 8017440:	f361 4317 	bfi	r3, r1, #16, #8
 8017444:	f362 631f 	bfi	r3, r2, #24, #8
 8017448:	b2da      	uxtb	r2, r3
 801744a:	2000      	movs	r0, #0
 801744c:	f362 0007 	bfi	r0, r2, #0, #8
 8017450:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8017454:	f362 200f 	bfi	r0, r2, #8, #8
 8017458:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801745c:	f362 4017 	bfi	r0, r2, #16, #8
 8017460:	0e1b      	lsrs	r3, r3, #24
 8017462:	f363 601f 	bfi	r0, r3, #24, #8
 8017466:	b002      	add	sp, #8
 8017468:	4770      	bx	lr
 801746a:	f100 0c01 	add.w	ip, r0, #1
 801746e:	fa5f fc8c 	uxtb.w	ip, ip
 8017472:	e7e0      	b.n	8017436 <uxr_stream_id+0xe>
 8017474:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8017478:	e7dd      	b.n	8017436 <uxr_stream_id+0xe>
 801747a:	bf00      	nop

0801747c <uxr_stream_id_from_raw>:
 801747c:	b082      	sub	sp, #8
 801747e:	b130      	cbz	r0, 801748e <uxr_stream_id_from_raw+0x12>
 8017480:	0603      	lsls	r3, r0, #24
 8017482:	d420      	bmi.n	80174c6 <uxr_stream_id_from_raw+0x4a>
 8017484:	1e42      	subs	r2, r0, #1
 8017486:	b2d2      	uxtb	r2, r2
 8017488:	f04f 0c01 	mov.w	ip, #1
 801748c:	e001      	b.n	8017492 <uxr_stream_id_from_raw+0x16>
 801748e:	4684      	mov	ip, r0
 8017490:	4602      	mov	r2, r0
 8017492:	2300      	movs	r3, #0
 8017494:	f360 0307 	bfi	r3, r0, #0, #8
 8017498:	f362 230f 	bfi	r3, r2, #8, #8
 801749c:	f36c 4317 	bfi	r3, ip, #16, #8
 80174a0:	f361 631f 	bfi	r3, r1, #24, #8
 80174a4:	b2da      	uxtb	r2, r3
 80174a6:	2000      	movs	r0, #0
 80174a8:	f362 0007 	bfi	r0, r2, #0, #8
 80174ac:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80174b0:	f362 200f 	bfi	r0, r2, #8, #8
 80174b4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80174b8:	f362 4017 	bfi	r0, r2, #16, #8
 80174bc:	0e1b      	lsrs	r3, r3, #24
 80174be:	f363 601f 	bfi	r0, r3, #24, #8
 80174c2:	b002      	add	sp, #8
 80174c4:	4770      	bx	lr
 80174c6:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 80174ca:	f04f 0c02 	mov.w	ip, #2
 80174ce:	e7e0      	b.n	8017492 <uxr_stream_id_from_raw+0x16>

080174d0 <uxr_init_stream_storage>:
 80174d0:	2300      	movs	r3, #0
 80174d2:	7403      	strb	r3, [r0, #16]
 80174d4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80174d8:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 80174dc:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 80174e0:	4770      	bx	lr
 80174e2:	bf00      	nop

080174e4 <uxr_reset_stream_storage>:
 80174e4:	b570      	push	{r4, r5, r6, lr}
 80174e6:	7c03      	ldrb	r3, [r0, #16]
 80174e8:	4604      	mov	r4, r0
 80174ea:	b153      	cbz	r3, 8017502 <uxr_reset_stream_storage+0x1e>
 80174ec:	4606      	mov	r6, r0
 80174ee:	2500      	movs	r5, #0
 80174f0:	4630      	mov	r0, r6
 80174f2:	f006 fd5b 	bl	801dfac <uxr_reset_output_best_effort_stream>
 80174f6:	7c23      	ldrb	r3, [r4, #16]
 80174f8:	3501      	adds	r5, #1
 80174fa:	42ab      	cmp	r3, r5
 80174fc:	f106 0610 	add.w	r6, r6, #16
 8017500:	d8f6      	bhi.n	80174f0 <uxr_reset_stream_storage+0xc>
 8017502:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017506:	b163      	cbz	r3, 8017522 <uxr_reset_stream_storage+0x3e>
 8017508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801750c:	2500      	movs	r5, #0
 801750e:	4630      	mov	r0, r6
 8017510:	f006 fb4e 	bl	801dbb0 <uxr_reset_input_best_effort_stream>
 8017514:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017518:	3501      	adds	r5, #1
 801751a:	42ab      	cmp	r3, r5
 801751c:	f106 0602 	add.w	r6, r6, #2
 8017520:	d8f5      	bhi.n	801750e <uxr_reset_stream_storage+0x2a>
 8017522:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8017526:	b163      	cbz	r3, 8017542 <uxr_reset_stream_storage+0x5e>
 8017528:	f104 0618 	add.w	r6, r4, #24
 801752c:	2500      	movs	r5, #0
 801752e:	4630      	mov	r0, r6
 8017530:	f006 fde8 	bl	801e104 <uxr_reset_output_reliable_stream>
 8017534:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8017538:	3501      	adds	r5, #1
 801753a:	42ab      	cmp	r3, r5
 801753c:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8017540:	d8f5      	bhi.n	801752e <uxr_reset_stream_storage+0x4a>
 8017542:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8017546:	b163      	cbz	r3, 8017562 <uxr_reset_stream_storage+0x7e>
 8017548:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 801754c:	2500      	movs	r5, #0
 801754e:	4630      	mov	r0, r6
 8017550:	f006 fba2 	bl	801dc98 <uxr_reset_input_reliable_stream>
 8017554:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8017558:	3501      	adds	r5, #1
 801755a:	42ab      	cmp	r3, r5
 801755c:	f106 0618 	add.w	r6, r6, #24
 8017560:	d8f5      	bhi.n	801754e <uxr_reset_stream_storage+0x6a>
 8017562:	bd70      	pop	{r4, r5, r6, pc}

08017564 <uxr_add_output_best_effort_buffer>:
 8017564:	b510      	push	{r4, lr}
 8017566:	7c04      	ldrb	r4, [r0, #16]
 8017568:	f104 0c01 	add.w	ip, r4, #1
 801756c:	b082      	sub	sp, #8
 801756e:	f880 c010 	strb.w	ip, [r0, #16]
 8017572:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8017576:	f006 fd0f 	bl	801df98 <uxr_init_output_best_effort_stream>
 801757a:	2201      	movs	r2, #1
 801757c:	4611      	mov	r1, r2
 801757e:	4620      	mov	r0, r4
 8017580:	b002      	add	sp, #8
 8017582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017586:	f7ff bf4f 	b.w	8017428 <uxr_stream_id>
 801758a:	bf00      	nop

0801758c <uxr_add_output_reliable_buffer>:
 801758c:	b510      	push	{r4, lr}
 801758e:	b084      	sub	sp, #16
 8017590:	4684      	mov	ip, r0
 8017592:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8017596:	9000      	str	r0, [sp, #0]
 8017598:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 801759c:	2028      	movs	r0, #40	@ 0x28
 801759e:	fb00 c004 	mla	r0, r0, r4, ip
 80175a2:	f104 0e01 	add.w	lr, r4, #1
 80175a6:	3018      	adds	r0, #24
 80175a8:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 80175ac:	f006 fd72 	bl	801e094 <uxr_init_output_reliable_stream>
 80175b0:	2201      	movs	r2, #1
 80175b2:	2102      	movs	r1, #2
 80175b4:	4620      	mov	r0, r4
 80175b6:	b004      	add	sp, #16
 80175b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175bc:	f7ff bf34 	b.w	8017428 <uxr_stream_id>

080175c0 <uxr_add_input_best_effort_buffer>:
 80175c0:	b510      	push	{r4, lr}
 80175c2:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 80175c6:	4603      	mov	r3, r0
 80175c8:	1c62      	adds	r2, r4, #1
 80175ca:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 80175ce:	b082      	sub	sp, #8
 80175d0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80175d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80175d8:	f006 fae6 	bl	801dba8 <uxr_init_input_best_effort_stream>
 80175dc:	2200      	movs	r2, #0
 80175de:	2101      	movs	r1, #1
 80175e0:	4620      	mov	r0, r4
 80175e2:	b002      	add	sp, #8
 80175e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80175e8:	f7ff bf1e 	b.w	8017428 <uxr_stream_id>

080175ec <uxr_add_input_reliable_buffer>:
 80175ec:	b510      	push	{r4, lr}
 80175ee:	b084      	sub	sp, #16
 80175f0:	4684      	mov	ip, r0
 80175f2:	9806      	ldr	r0, [sp, #24]
 80175f4:	9000      	str	r0, [sp, #0]
 80175f6:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 80175fa:	2018      	movs	r0, #24
 80175fc:	fb00 c004 	mla	r0, r0, r4, ip
 8017600:	f104 0e01 	add.w	lr, r4, #1
 8017604:	3048      	adds	r0, #72	@ 0x48
 8017606:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 801760a:	f006 fb19 	bl	801dc40 <uxr_init_input_reliable_stream>
 801760e:	2200      	movs	r2, #0
 8017610:	2102      	movs	r1, #2
 8017612:	4620      	mov	r0, r4
 8017614:	b004      	add	sp, #16
 8017616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801761a:	f7ff bf05 	b.w	8017428 <uxr_stream_id>
 801761e:	bf00      	nop

08017620 <uxr_get_output_best_effort_stream>:
 8017620:	7c03      	ldrb	r3, [r0, #16]
 8017622:	428b      	cmp	r3, r1
 8017624:	bf8c      	ite	hi
 8017626:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801762a:	2000      	movls	r0, #0
 801762c:	4770      	bx	lr
 801762e:	bf00      	nop

08017630 <uxr_get_output_reliable_stream>:
 8017630:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8017634:	428b      	cmp	r3, r1
 8017636:	bf83      	ittte	hi
 8017638:	2328      	movhi	r3, #40	@ 0x28
 801763a:	fb03 0001 	mlahi	r0, r3, r1, r0
 801763e:	3018      	addhi	r0, #24
 8017640:	2000      	movls	r0, #0
 8017642:	4770      	bx	lr

08017644 <uxr_get_input_best_effort_stream>:
 8017644:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8017648:	428b      	cmp	r3, r1
 801764a:	bf86      	itte	hi
 801764c:	3121      	addhi	r1, #33	@ 0x21
 801764e:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8017652:	2000      	movls	r0, #0
 8017654:	4770      	bx	lr
 8017656:	bf00      	nop

08017658 <uxr_get_input_reliable_stream>:
 8017658:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 801765c:	428b      	cmp	r3, r1
 801765e:	bf83      	ittte	hi
 8017660:	2318      	movhi	r3, #24
 8017662:	fb03 0001 	mlahi	r0, r3, r1, r0
 8017666:	3048      	addhi	r0, #72	@ 0x48
 8017668:	2000      	movls	r0, #0
 801766a:	4770      	bx	lr

0801766c <uxr_output_streams_confirmed>:
 801766c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8017670:	b183      	cbz	r3, 8017694 <uxr_output_streams_confirmed+0x28>
 8017672:	b570      	push	{r4, r5, r6, lr}
 8017674:	4606      	mov	r6, r0
 8017676:	f100 0518 	add.w	r5, r0, #24
 801767a:	2400      	movs	r4, #0
 801767c:	e001      	b.n	8017682 <uxr_output_streams_confirmed+0x16>
 801767e:	3528      	adds	r5, #40	@ 0x28
 8017680:	b138      	cbz	r0, 8017692 <uxr_output_streams_confirmed+0x26>
 8017682:	4628      	mov	r0, r5
 8017684:	f006 ff9c 	bl	801e5c0 <uxr_is_output_up_to_date>
 8017688:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 801768c:	3401      	adds	r4, #1
 801768e:	42a3      	cmp	r3, r4
 8017690:	d8f5      	bhi.n	801767e <uxr_output_streams_confirmed+0x12>
 8017692:	bd70      	pop	{r4, r5, r6, pc}
 8017694:	2001      	movs	r0, #1
 8017696:	4770      	bx	lr

08017698 <uxr_buffer_submessage_header>:
 8017698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801769a:	4604      	mov	r4, r0
 801769c:	460e      	mov	r6, r1
 801769e:	2104      	movs	r1, #4
 80176a0:	4615      	mov	r5, r2
 80176a2:	461f      	mov	r7, r3
 80176a4:	f7fb fe88 	bl	80133b8 <ucdr_align_to>
 80176a8:	2301      	movs	r3, #1
 80176aa:	ea47 0203 	orr.w	r2, r7, r3
 80176ae:	4631      	mov	r1, r6
 80176b0:	7523      	strb	r3, [r4, #20]
 80176b2:	4620      	mov	r0, r4
 80176b4:	462b      	mov	r3, r5
 80176b6:	f000 fa27 	bl	8017b08 <uxr_serialize_submessage_header>
 80176ba:	4620      	mov	r0, r4
 80176bc:	f7fb fe92 	bl	80133e4 <ucdr_buffer_remaining>
 80176c0:	42a8      	cmp	r0, r5
 80176c2:	bf34      	ite	cc
 80176c4:	2000      	movcc	r0, #0
 80176c6:	2001      	movcs	r0, #1
 80176c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80176ca:	bf00      	nop

080176cc <uxr_read_submessage_header>:
 80176cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176d0:	4604      	mov	r4, r0
 80176d2:	460d      	mov	r5, r1
 80176d4:	2104      	movs	r1, #4
 80176d6:	4616      	mov	r6, r2
 80176d8:	4698      	mov	r8, r3
 80176da:	f7fb fe6d 	bl	80133b8 <ucdr_align_to>
 80176de:	4620      	mov	r0, r4
 80176e0:	f7fb fe80 	bl	80133e4 <ucdr_buffer_remaining>
 80176e4:	2803      	cmp	r0, #3
 80176e6:	bf8c      	ite	hi
 80176e8:	2701      	movhi	r7, #1
 80176ea:	2700      	movls	r7, #0
 80176ec:	d802      	bhi.n	80176f4 <uxr_read_submessage_header+0x28>
 80176ee:	4638      	mov	r0, r7
 80176f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176f4:	4633      	mov	r3, r6
 80176f6:	4642      	mov	r2, r8
 80176f8:	4620      	mov	r0, r4
 80176fa:	4629      	mov	r1, r5
 80176fc:	f000 fa18 	bl	8017b30 <uxr_deserialize_submessage_header>
 8017700:	f898 3000 	ldrb.w	r3, [r8]
 8017704:	f003 0201 	and.w	r2, r3, #1
 8017708:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 801770c:	f888 3000 	strb.w	r3, [r8]
 8017710:	7522      	strb	r2, [r4, #20]
 8017712:	4638      	mov	r0, r7
 8017714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017718 <uxr_submessage_padding>:
 8017718:	f010 0003 	ands.w	r0, r0, #3
 801771c:	bf18      	it	ne
 801771e:	f1c0 0004 	rsbne	r0, r0, #4
 8017722:	4770      	bx	lr

08017724 <uxr_millis>:
 8017724:	b510      	push	{r4, lr}
 8017726:	b084      	sub	sp, #16
 8017728:	4669      	mov	r1, sp
 801772a:	2001      	movs	r0, #1
 801772c:	f7eb f838 	bl	80027a0 <clock_gettime>
 8017730:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8017734:	4906      	ldr	r1, [pc, #24]	@ (8017750 <uxr_millis+0x2c>)
 8017736:	fba0 0301 	umull	r0, r3, r0, r1
 801773a:	1900      	adds	r0, r0, r4
 801773c:	fb01 3102 	mla	r1, r1, r2, r3
 8017740:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8017744:	4a03      	ldr	r2, [pc, #12]	@ (8017754 <uxr_millis+0x30>)
 8017746:	2300      	movs	r3, #0
 8017748:	f7e8 ffb6 	bl	80006b8 <__aeabi_ldivmod>
 801774c:	b004      	add	sp, #16
 801774e:	bd10      	pop	{r4, pc}
 8017750:	3b9aca00 	.word	0x3b9aca00
 8017754:	000f4240 	.word	0x000f4240

08017758 <uxr_nanos>:
 8017758:	b510      	push	{r4, lr}
 801775a:	b084      	sub	sp, #16
 801775c:	4669      	mov	r1, sp
 801775e:	2001      	movs	r0, #1
 8017760:	f7eb f81e 	bl	80027a0 <clock_gettime>
 8017764:	4a06      	ldr	r2, [pc, #24]	@ (8017780 <uxr_nanos+0x28>)
 8017766:	9800      	ldr	r0, [sp, #0]
 8017768:	9902      	ldr	r1, [sp, #8]
 801776a:	9c01      	ldr	r4, [sp, #4]
 801776c:	fba0 0302 	umull	r0, r3, r0, r2
 8017770:	1840      	adds	r0, r0, r1
 8017772:	fb02 3304 	mla	r3, r2, r4, r3
 8017776:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801777a:	b004      	add	sp, #16
 801777c:	bd10      	pop	{r4, pc}
 801777e:	bf00      	nop
 8017780:	3b9aca00 	.word	0x3b9aca00

08017784 <on_full_output_buffer_fragmented>:
 8017784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017788:	460c      	mov	r4, r1
 801778a:	b08a      	sub	sp, #40	@ 0x28
 801778c:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8017790:	4606      	mov	r6, r0
 8017792:	f104 0008 	add.w	r0, r4, #8
 8017796:	f7ff ff4b 	bl	8017630 <uxr_get_output_reliable_stream>
 801779a:	4605      	mov	r5, r0
 801779c:	f006 ff1a 	bl	801e5d4 <get_available_free_slots>
 80177a0:	b968      	cbnz	r0, 80177be <on_full_output_buffer_fragmented+0x3a>
 80177a2:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 80177a6:	4620      	mov	r0, r4
 80177a8:	4798      	blx	r3
 80177aa:	b918      	cbnz	r0, 80177b4 <on_full_output_buffer_fragmented+0x30>
 80177ac:	2001      	movs	r0, #1
 80177ae:	b00a      	add	sp, #40	@ 0x28
 80177b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177b4:	4628      	mov	r0, r5
 80177b6:	f006 ff0d 	bl	801e5d4 <get_available_free_slots>
 80177ba:	2800      	cmp	r0, #0
 80177bc:	d0f6      	beq.n	80177ac <on_full_output_buffer_fragmented+0x28>
 80177be:	8929      	ldrh	r1, [r5, #8]
 80177c0:	89eb      	ldrh	r3, [r5, #14]
 80177c2:	7b28      	ldrb	r0, [r5, #12]
 80177c4:	686a      	ldr	r2, [r5, #4]
 80177c6:	fbb2 f8f1 	udiv	r8, r2, r1
 80177ca:	fbb3 f2f1 	udiv	r2, r3, r1
 80177ce:	fb01 3112 	mls	r1, r1, r2, r3
 80177d2:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 80177d6:	b289      	uxth	r1, r1
 80177d8:	fb08 f101 	mul.w	r1, r8, r1
 80177dc:	30fc      	adds	r0, #252	@ 0xfc
 80177de:	f1a8 0804 	sub.w	r8, r8, #4
 80177e2:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80177e6:	4440      	add	r0, r8
 80177e8:	b287      	uxth	r7, r0
 80177ea:	1bdb      	subs	r3, r3, r7
 80177ec:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 80177f0:	682b      	ldr	r3, [r5, #0]
 80177f2:	3104      	adds	r1, #4
 80177f4:	4419      	add	r1, r3
 80177f6:	4642      	mov	r2, r8
 80177f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80177fc:	9300      	str	r3, [sp, #0]
 80177fe:	a802      	add	r0, sp, #8
 8017800:	2300      	movs	r3, #0
 8017802:	f7fb fdad 	bl	8013360 <ucdr_init_buffer_origin_offset>
 8017806:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801780a:	f102 0308 	add.w	r3, r2, #8
 801780e:	4543      	cmp	r3, r8
 8017810:	d928      	bls.n	8017864 <on_full_output_buffer_fragmented+0xe0>
 8017812:	463a      	mov	r2, r7
 8017814:	2300      	movs	r3, #0
 8017816:	210d      	movs	r1, #13
 8017818:	a802      	add	r0, sp, #8
 801781a:	f7ff ff3d 	bl	8017698 <uxr_buffer_submessage_header>
 801781e:	8929      	ldrh	r1, [r5, #8]
 8017820:	89eb      	ldrh	r3, [r5, #14]
 8017822:	fbb3 f2f1 	udiv	r2, r3, r1
 8017826:	fb01 3312 	mls	r3, r1, r2, r3
 801782a:	b29b      	uxth	r3, r3
 801782c:	686a      	ldr	r2, [r5, #4]
 801782e:	fbb2 f2f1 	udiv	r2, r2, r1
 8017832:	fb02 f303 	mul.w	r3, r2, r3
 8017836:	682a      	ldr	r2, [r5, #0]
 8017838:	f842 8003 	str.w	r8, [r2, r3]
 801783c:	89e8      	ldrh	r0, [r5, #14]
 801783e:	2101      	movs	r1, #1
 8017840:	f007 f818 	bl	801e874 <uxr_seq_num_add>
 8017844:	9904      	ldr	r1, [sp, #16]
 8017846:	9a03      	ldr	r2, [sp, #12]
 8017848:	81e8      	strh	r0, [r5, #14]
 801784a:	1a52      	subs	r2, r2, r1
 801784c:	4630      	mov	r0, r6
 801784e:	f7fb fd99 	bl	8013384 <ucdr_init_buffer>
 8017852:	4630      	mov	r0, r6
 8017854:	490f      	ldr	r1, [pc, #60]	@ (8017894 <on_full_output_buffer_fragmented+0x110>)
 8017856:	4622      	mov	r2, r4
 8017858:	f7fb fd68 	bl	801332c <ucdr_set_on_full_buffer_callback>
 801785c:	2000      	movs	r0, #0
 801785e:	b00a      	add	sp, #40	@ 0x28
 8017860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017864:	b292      	uxth	r2, r2
 8017866:	2302      	movs	r3, #2
 8017868:	210d      	movs	r1, #13
 801786a:	a802      	add	r0, sp, #8
 801786c:	f7ff ff14 	bl	8017698 <uxr_buffer_submessage_header>
 8017870:	8928      	ldrh	r0, [r5, #8]
 8017872:	89eb      	ldrh	r3, [r5, #14]
 8017874:	fbb3 f1f0 	udiv	r1, r3, r0
 8017878:	fb00 3311 	mls	r3, r0, r1, r3
 801787c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8017880:	6869      	ldr	r1, [r5, #4]
 8017882:	fbb1 f1f0 	udiv	r1, r1, r0
 8017886:	b29b      	uxth	r3, r3
 8017888:	fb01 f303 	mul.w	r3, r1, r3
 801788c:	6829      	ldr	r1, [r5, #0]
 801788e:	3208      	adds	r2, #8
 8017890:	50ca      	str	r2, [r1, r3]
 8017892:	e7d3      	b.n	801783c <on_full_output_buffer_fragmented+0xb8>
 8017894:	08017785 	.word	0x08017785

08017898 <uxr_prepare_output_stream>:
 8017898:	b5f0      	push	{r4, r5, r6, r7, lr}
 801789a:	b087      	sub	sp, #28
 801789c:	2707      	movs	r7, #7
 801789e:	9202      	str	r2, [sp, #8]
 80178a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80178a2:	9103      	str	r1, [sp, #12]
 80178a4:	2500      	movs	r5, #0
 80178a6:	3204      	adds	r2, #4
 80178a8:	e9cd 7500 	strd	r7, r5, [sp]
 80178ac:	461c      	mov	r4, r3
 80178ae:	4606      	mov	r6, r0
 80178b0:	f7ff fc54 	bl	801715c <uxr_prepare_stream_to_write_submessage>
 80178b4:	f080 0201 	eor.w	r2, r0, #1
 80178b8:	b2d2      	uxtb	r2, r2
 80178ba:	75a2      	strb	r2, [r4, #22]
 80178bc:	b112      	cbz	r2, 80178c4 <uxr_prepare_output_stream+0x2c>
 80178be:	4628      	mov	r0, r5
 80178c0:	b007      	add	sp, #28
 80178c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80178c4:	aa05      	add	r2, sp, #20
 80178c6:	9902      	ldr	r1, [sp, #8]
 80178c8:	4630      	mov	r0, r6
 80178ca:	f7ff fd7d 	bl	80173c8 <uxr_init_base_object_request>
 80178ce:	a905      	add	r1, sp, #20
 80178d0:	4605      	mov	r5, r0
 80178d2:	4620      	mov	r0, r4
 80178d4:	f001 f88c 	bl	80189f0 <uxr_serialize_WRITE_DATA_Payload_Data>
 80178d8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80178dc:	69a6      	ldr	r6, [r4, #24]
 80178de:	69e7      	ldr	r7, [r4, #28]
 80178e0:	1a52      	subs	r2, r2, r1
 80178e2:	4620      	mov	r0, r4
 80178e4:	f7fb fd4e 	bl	8013384 <ucdr_init_buffer>
 80178e8:	4620      	mov	r0, r4
 80178ea:	463a      	mov	r2, r7
 80178ec:	4631      	mov	r1, r6
 80178ee:	f7fb fd1d 	bl	801332c <ucdr_set_on_full_buffer_callback>
 80178f2:	4628      	mov	r0, r5
 80178f4:	b007      	add	sp, #28
 80178f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080178f8 <uxr_prepare_output_stream_fragmented>:
 80178f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178fc:	b091      	sub	sp, #68	@ 0x44
 80178fe:	4605      	mov	r5, r0
 8017900:	9105      	str	r1, [sp, #20]
 8017902:	3008      	adds	r0, #8
 8017904:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017908:	461e      	mov	r6, r3
 801790a:	9204      	str	r2, [sp, #16]
 801790c:	f7ff fe90 	bl	8017630 <uxr_get_output_reliable_stream>
 8017910:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8017914:	2b01      	cmp	r3, #1
 8017916:	f000 8091 	beq.w	8017a3c <uxr_prepare_output_stream_fragmented+0x144>
 801791a:	4604      	mov	r4, r0
 801791c:	2800      	cmp	r0, #0
 801791e:	f000 808d 	beq.w	8017a3c <uxr_prepare_output_stream_fragmented+0x144>
 8017922:	f006 fe57 	bl	801e5d4 <get_available_free_slots>
 8017926:	2800      	cmp	r0, #0
 8017928:	f000 8083 	beq.w	8017a32 <uxr_prepare_output_stream_fragmented+0x13a>
 801792c:	8922      	ldrh	r2, [r4, #8]
 801792e:	89e7      	ldrh	r7, [r4, #14]
 8017930:	fbb7 f9f2 	udiv	r9, r7, r2
 8017934:	fb02 7919 	mls	r9, r2, r9, r7
 8017938:	fa1f f989 	uxth.w	r9, r9
 801793c:	6863      	ldr	r3, [r4, #4]
 801793e:	fbb3 f2f2 	udiv	r2, r3, r2
 8017942:	6823      	ldr	r3, [r4, #0]
 8017944:	9203      	str	r2, [sp, #12]
 8017946:	fb02 f909 	mul.w	r9, r2, r9
 801794a:	f109 0904 	add.w	r9, r9, #4
 801794e:	4499      	add	r9, r3
 8017950:	7b23      	ldrb	r3, [r4, #12]
 8017952:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8017956:	4543      	cmp	r3, r8
 8017958:	f1a2 0b04 	sub.w	fp, r2, #4
 801795c:	d37a      	bcc.n	8017a54 <uxr_prepare_output_stream_fragmented+0x15c>
 801795e:	f1ab 0a04 	sub.w	sl, fp, #4
 8017962:	ebaa 0a03 	sub.w	sl, sl, r3
 8017966:	465a      	mov	r2, fp
 8017968:	2300      	movs	r3, #0
 801796a:	4649      	mov	r1, r9
 801796c:	a808      	add	r0, sp, #32
 801796e:	f8cd 8000 	str.w	r8, [sp]
 8017972:	f7fb fcf5 	bl	8013360 <ucdr_init_buffer_origin_offset>
 8017976:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8017978:	fa1f fa8a 	uxth.w	sl, sl
 801797c:	4652      	mov	r2, sl
 801797e:	f103 0a08 	add.w	sl, r3, #8
 8017982:	45da      	cmp	sl, fp
 8017984:	bf34      	ite	cc
 8017986:	2302      	movcc	r3, #2
 8017988:	2300      	movcs	r3, #0
 801798a:	210d      	movs	r1, #13
 801798c:	a808      	add	r0, sp, #32
 801798e:	f7ff fe83 	bl	8017698 <uxr_buffer_submessage_header>
 8017992:	8921      	ldrh	r1, [r4, #8]
 8017994:	fbb7 f2f1 	udiv	r2, r7, r1
 8017998:	fb01 7212 	mls	r2, r1, r2, r7
 801799c:	b292      	uxth	r2, r2
 801799e:	6863      	ldr	r3, [r4, #4]
 80179a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80179a4:	fb02 f303 	mul.w	r3, r2, r3
 80179a8:	6822      	ldr	r2, [r4, #0]
 80179aa:	4638      	mov	r0, r7
 80179ac:	f842 b003 	str.w	fp, [r2, r3]
 80179b0:	2101      	movs	r1, #1
 80179b2:	f006 ff5f 	bl	801e874 <uxr_seq_num_add>
 80179b6:	9b03      	ldr	r3, [sp, #12]
 80179b8:	f108 0104 	add.w	r1, r8, #4
 80179bc:	f1a3 0208 	sub.w	r2, r3, #8
 80179c0:	eba2 0208 	sub.w	r2, r2, r8
 80179c4:	4449      	add	r1, r9
 80179c6:	4607      	mov	r7, r0
 80179c8:	4630      	mov	r0, r6
 80179ca:	f7fb fcdb 	bl	8013384 <ucdr_init_buffer>
 80179ce:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80179d0:	81e7      	strh	r7, [r4, #14]
 80179d2:	1d1a      	adds	r2, r3, #4
 80179d4:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80179d8:	bf28      	it	cs
 80179da:	2200      	movcs	r2, #0
 80179dc:	2300      	movs	r3, #0
 80179de:	b292      	uxth	r2, r2
 80179e0:	2107      	movs	r1, #7
 80179e2:	4630      	mov	r0, r6
 80179e4:	f7ff fe58 	bl	8017698 <uxr_buffer_submessage_header>
 80179e8:	9904      	ldr	r1, [sp, #16]
 80179ea:	aa07      	add	r2, sp, #28
 80179ec:	4628      	mov	r0, r5
 80179ee:	f7ff fceb 	bl	80173c8 <uxr_init_base_object_request>
 80179f2:	4604      	mov	r4, r0
 80179f4:	b318      	cbz	r0, 8017a3e <uxr_prepare_output_stream_fragmented+0x146>
 80179f6:	a907      	add	r1, sp, #28
 80179f8:	4630      	mov	r0, r6
 80179fa:	f000 fff9 	bl	80189f0 <uxr_serialize_WRITE_DATA_Payload_Data>
 80179fe:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8017a02:	4630      	mov	r0, r6
 8017a04:	1a52      	subs	r2, r2, r1
 8017a06:	f7fb fcbd 	bl	8013384 <ucdr_init_buffer>
 8017a0a:	9b05      	ldr	r3, [sp, #20]
 8017a0c:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8017a10:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8017a12:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8017a16:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8017a18:	491b      	ldr	r1, [pc, #108]	@ (8017a88 <uxr_prepare_output_stream_fragmented+0x190>)
 8017a1a:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8017a1e:	4630      	mov	r0, r6
 8017a20:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8017a24:	462a      	mov	r2, r5
 8017a26:	f7fb fc81 	bl	801332c <ucdr_set_on_full_buffer_callback>
 8017a2a:	4620      	mov	r0, r4
 8017a2c:	b011      	add	sp, #68	@ 0x44
 8017a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a32:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8017a34:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8017a36:	4628      	mov	r0, r5
 8017a38:	4798      	blx	r3
 8017a3a:	b920      	cbnz	r0, 8017a46 <uxr_prepare_output_stream_fragmented+0x14e>
 8017a3c:	2400      	movs	r4, #0
 8017a3e:	4620      	mov	r0, r4
 8017a40:	b011      	add	sp, #68	@ 0x44
 8017a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a46:	4620      	mov	r0, r4
 8017a48:	f006 fdc4 	bl	801e5d4 <get_available_free_slots>
 8017a4c:	2800      	cmp	r0, #0
 8017a4e:	f47f af6d 	bne.w	801792c <uxr_prepare_output_stream_fragmented+0x34>
 8017a52:	e7f3      	b.n	8017a3c <uxr_prepare_output_stream_fragmented+0x144>
 8017a54:	4638      	mov	r0, r7
 8017a56:	2101      	movs	r1, #1
 8017a58:	f006 ff0c 	bl	801e874 <uxr_seq_num_add>
 8017a5c:	8921      	ldrh	r1, [r4, #8]
 8017a5e:	fbb0 f2f1 	udiv	r2, r0, r1
 8017a62:	fb01 0912 	mls	r9, r1, r2, r0
 8017a66:	fa1f f289 	uxth.w	r2, r9
 8017a6a:	6863      	ldr	r3, [r4, #4]
 8017a6c:	fbb3 f9f1 	udiv	r9, r3, r1
 8017a70:	6823      	ldr	r3, [r4, #0]
 8017a72:	fb02 f909 	mul.w	r9, r2, r9
 8017a76:	f109 0904 	add.w	r9, r9, #4
 8017a7a:	4499      	add	r9, r3
 8017a7c:	4607      	mov	r7, r0
 8017a7e:	7b23      	ldrb	r3, [r4, #12]
 8017a80:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8017a84:	e76b      	b.n	801795e <uxr_prepare_output_stream_fragmented+0x66>
 8017a86:	bf00      	nop
 8017a88:	08017785 	.word	0x08017785

08017a8c <uxr_serialize_message_header>:
 8017a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a8e:	b083      	sub	sp, #12
 8017a90:	4616      	mov	r6, r2
 8017a92:	4604      	mov	r4, r0
 8017a94:	9301      	str	r3, [sp, #4]
 8017a96:	460d      	mov	r5, r1
 8017a98:	9f08      	ldr	r7, [sp, #32]
 8017a9a:	f7f9 ff43 	bl	8011924 <ucdr_serialize_uint8_t>
 8017a9e:	4631      	mov	r1, r6
 8017aa0:	4620      	mov	r0, r4
 8017aa2:	f7f9 ff3f 	bl	8011924 <ucdr_serialize_uint8_t>
 8017aa6:	9a01      	ldr	r2, [sp, #4]
 8017aa8:	2101      	movs	r1, #1
 8017aaa:	4620      	mov	r0, r4
 8017aac:	f7f9 ffe6 	bl	8011a7c <ucdr_serialize_endian_uint16_t>
 8017ab0:	062b      	lsls	r3, r5, #24
 8017ab2:	d501      	bpl.n	8017ab8 <uxr_serialize_message_header+0x2c>
 8017ab4:	b003      	add	sp, #12
 8017ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ab8:	2204      	movs	r2, #4
 8017aba:	4639      	mov	r1, r7
 8017abc:	4620      	mov	r0, r4
 8017abe:	b003      	add	sp, #12
 8017ac0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017ac4:	f005 be24 	b.w	801d710 <ucdr_serialize_array_uint8_t>

08017ac8 <uxr_deserialize_message_header>:
 8017ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017aca:	b083      	sub	sp, #12
 8017acc:	4616      	mov	r6, r2
 8017ace:	4604      	mov	r4, r0
 8017ad0:	9301      	str	r3, [sp, #4]
 8017ad2:	460d      	mov	r5, r1
 8017ad4:	9f08      	ldr	r7, [sp, #32]
 8017ad6:	f7f9 ff3b 	bl	8011950 <ucdr_deserialize_uint8_t>
 8017ada:	4631      	mov	r1, r6
 8017adc:	4620      	mov	r0, r4
 8017ade:	f7f9 ff37 	bl	8011950 <ucdr_deserialize_uint8_t>
 8017ae2:	9a01      	ldr	r2, [sp, #4]
 8017ae4:	2101      	movs	r1, #1
 8017ae6:	4620      	mov	r0, r4
 8017ae8:	f7fa f8bc 	bl	8011c64 <ucdr_deserialize_endian_uint16_t>
 8017aec:	f995 3000 	ldrsb.w	r3, [r5]
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	da01      	bge.n	8017af8 <uxr_deserialize_message_header+0x30>
 8017af4:	b003      	add	sp, #12
 8017af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017af8:	2204      	movs	r2, #4
 8017afa:	4639      	mov	r1, r7
 8017afc:	4620      	mov	r0, r4
 8017afe:	b003      	add	sp, #12
 8017b00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017b04:	f005 be68 	b.w	801d7d8 <ucdr_deserialize_array_uint8_t>

08017b08 <uxr_serialize_submessage_header>:
 8017b08:	b530      	push	{r4, r5, lr}
 8017b0a:	b083      	sub	sp, #12
 8017b0c:	4615      	mov	r5, r2
 8017b0e:	4604      	mov	r4, r0
 8017b10:	9301      	str	r3, [sp, #4]
 8017b12:	f7f9 ff07 	bl	8011924 <ucdr_serialize_uint8_t>
 8017b16:	4629      	mov	r1, r5
 8017b18:	4620      	mov	r0, r4
 8017b1a:	f7f9 ff03 	bl	8011924 <ucdr_serialize_uint8_t>
 8017b1e:	9a01      	ldr	r2, [sp, #4]
 8017b20:	2101      	movs	r1, #1
 8017b22:	4620      	mov	r0, r4
 8017b24:	b003      	add	sp, #12
 8017b26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017b2a:	f7f9 bfa7 	b.w	8011a7c <ucdr_serialize_endian_uint16_t>
 8017b2e:	bf00      	nop

08017b30 <uxr_deserialize_submessage_header>:
 8017b30:	b530      	push	{r4, r5, lr}
 8017b32:	b083      	sub	sp, #12
 8017b34:	4615      	mov	r5, r2
 8017b36:	4604      	mov	r4, r0
 8017b38:	9301      	str	r3, [sp, #4]
 8017b3a:	f7f9 ff09 	bl	8011950 <ucdr_deserialize_uint8_t>
 8017b3e:	4629      	mov	r1, r5
 8017b40:	4620      	mov	r0, r4
 8017b42:	f7f9 ff05 	bl	8011950 <ucdr_deserialize_uint8_t>
 8017b46:	9a01      	ldr	r2, [sp, #4]
 8017b48:	2101      	movs	r1, #1
 8017b4a:	4620      	mov	r0, r4
 8017b4c:	b003      	add	sp, #12
 8017b4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017b52:	f7fa b887 	b.w	8011c64 <ucdr_deserialize_endian_uint16_t>
 8017b56:	bf00      	nop

08017b58 <uxr_serialize_CLIENT_Representation>:
 8017b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b5c:	2204      	movs	r2, #4
 8017b5e:	460e      	mov	r6, r1
 8017b60:	4605      	mov	r5, r0
 8017b62:	f005 fdd5 	bl	801d710 <ucdr_serialize_array_uint8_t>
 8017b66:	2202      	movs	r2, #2
 8017b68:	4607      	mov	r7, r0
 8017b6a:	1d31      	adds	r1, r6, #4
 8017b6c:	4628      	mov	r0, r5
 8017b6e:	f005 fdcf 	bl	801d710 <ucdr_serialize_array_uint8_t>
 8017b72:	4038      	ands	r0, r7
 8017b74:	2202      	movs	r2, #2
 8017b76:	1db1      	adds	r1, r6, #6
 8017b78:	b2c7      	uxtb	r7, r0
 8017b7a:	4628      	mov	r0, r5
 8017b7c:	f005 fdc8 	bl	801d710 <ucdr_serialize_array_uint8_t>
 8017b80:	2204      	movs	r2, #4
 8017b82:	4007      	ands	r7, r0
 8017b84:	f106 0108 	add.w	r1, r6, #8
 8017b88:	4628      	mov	r0, r5
 8017b8a:	f005 fdc1 	bl	801d710 <ucdr_serialize_array_uint8_t>
 8017b8e:	7b31      	ldrb	r1, [r6, #12]
 8017b90:	4007      	ands	r7, r0
 8017b92:	4628      	mov	r0, r5
 8017b94:	f7f9 fec6 	bl	8011924 <ucdr_serialize_uint8_t>
 8017b98:	7b71      	ldrb	r1, [r6, #13]
 8017b9a:	4007      	ands	r7, r0
 8017b9c:	4628      	mov	r0, r5
 8017b9e:	f7f9 fe93 	bl	80118c8 <ucdr_serialize_bool>
 8017ba2:	7b73      	ldrb	r3, [r6, #13]
 8017ba4:	ea07 0800 	and.w	r8, r7, r0
 8017ba8:	b93b      	cbnz	r3, 8017bba <uxr_serialize_CLIENT_Representation+0x62>
 8017baa:	8bb1      	ldrh	r1, [r6, #28]
 8017bac:	4628      	mov	r0, r5
 8017bae:	f7f9 fee5 	bl	801197c <ucdr_serialize_uint16_t>
 8017bb2:	ea08 0000 	and.w	r0, r8, r0
 8017bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017bba:	6931      	ldr	r1, [r6, #16]
 8017bbc:	4628      	mov	r0, r5
 8017bbe:	f7fa f8c7 	bl	8011d50 <ucdr_serialize_uint32_t>
 8017bc2:	6933      	ldr	r3, [r6, #16]
 8017bc4:	b1e3      	cbz	r3, 8017c00 <uxr_serialize_CLIENT_Representation+0xa8>
 8017bc6:	b1c0      	cbz	r0, 8017bfa <uxr_serialize_CLIENT_Representation+0xa2>
 8017bc8:	4637      	mov	r7, r6
 8017bca:	f04f 0900 	mov.w	r9, #0
 8017bce:	e001      	b.n	8017bd4 <uxr_serialize_CLIENT_Representation+0x7c>
 8017bd0:	3708      	adds	r7, #8
 8017bd2:	b194      	cbz	r4, 8017bfa <uxr_serialize_CLIENT_Representation+0xa2>
 8017bd4:	6979      	ldr	r1, [r7, #20]
 8017bd6:	4628      	mov	r0, r5
 8017bd8:	f005 ff0c 	bl	801d9f4 <ucdr_serialize_string>
 8017bdc:	69b9      	ldr	r1, [r7, #24]
 8017bde:	4604      	mov	r4, r0
 8017be0:	4628      	mov	r0, r5
 8017be2:	f005 ff07 	bl	801d9f4 <ucdr_serialize_string>
 8017be6:	6933      	ldr	r3, [r6, #16]
 8017be8:	f109 0901 	add.w	r9, r9, #1
 8017bec:	4004      	ands	r4, r0
 8017bee:	4599      	cmp	r9, r3
 8017bf0:	b2e4      	uxtb	r4, r4
 8017bf2:	d3ed      	bcc.n	8017bd0 <uxr_serialize_CLIENT_Representation+0x78>
 8017bf4:	ea08 0804 	and.w	r8, r8, r4
 8017bf8:	e7d7      	b.n	8017baa <uxr_serialize_CLIENT_Representation+0x52>
 8017bfa:	f04f 0800 	mov.w	r8, #0
 8017bfe:	e7d4      	b.n	8017baa <uxr_serialize_CLIENT_Representation+0x52>
 8017c00:	ea08 0800 	and.w	r8, r8, r0
 8017c04:	e7d1      	b.n	8017baa <uxr_serialize_CLIENT_Representation+0x52>
 8017c06:	bf00      	nop

08017c08 <uxr_deserialize_CLIENT_Representation>:
 8017c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c0c:	2204      	movs	r2, #4
 8017c0e:	460c      	mov	r4, r1
 8017c10:	4605      	mov	r5, r0
 8017c12:	f005 fde1 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 8017c16:	2202      	movs	r2, #2
 8017c18:	4607      	mov	r7, r0
 8017c1a:	1d21      	adds	r1, r4, #4
 8017c1c:	4628      	mov	r0, r5
 8017c1e:	f005 fddb 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 8017c22:	4038      	ands	r0, r7
 8017c24:	2202      	movs	r2, #2
 8017c26:	1da1      	adds	r1, r4, #6
 8017c28:	b2c6      	uxtb	r6, r0
 8017c2a:	4628      	mov	r0, r5
 8017c2c:	f005 fdd4 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 8017c30:	2204      	movs	r2, #4
 8017c32:	4006      	ands	r6, r0
 8017c34:	f104 0108 	add.w	r1, r4, #8
 8017c38:	4628      	mov	r0, r5
 8017c3a:	f005 fdcd 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 8017c3e:	f104 010c 	add.w	r1, r4, #12
 8017c42:	4006      	ands	r6, r0
 8017c44:	4628      	mov	r0, r5
 8017c46:	f7f9 fe83 	bl	8011950 <ucdr_deserialize_uint8_t>
 8017c4a:	f104 010d 	add.w	r1, r4, #13
 8017c4e:	ea06 0700 	and.w	r7, r6, r0
 8017c52:	4628      	mov	r0, r5
 8017c54:	f7f9 fe4e 	bl	80118f4 <ucdr_deserialize_bool>
 8017c58:	7b63      	ldrb	r3, [r4, #13]
 8017c5a:	4007      	ands	r7, r0
 8017c5c:	b93b      	cbnz	r3, 8017c6e <uxr_deserialize_CLIENT_Representation+0x66>
 8017c5e:	f104 011c 	add.w	r1, r4, #28
 8017c62:	4628      	mov	r0, r5
 8017c64:	f7f9 ff8a 	bl	8011b7c <ucdr_deserialize_uint16_t>
 8017c68:	4038      	ands	r0, r7
 8017c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c6e:	f104 0110 	add.w	r1, r4, #16
 8017c72:	4628      	mov	r0, r5
 8017c74:	f7fa f99c 	bl	8011fb0 <ucdr_deserialize_uint32_t>
 8017c78:	6923      	ldr	r3, [r4, #16]
 8017c7a:	2b01      	cmp	r3, #1
 8017c7c:	d903      	bls.n	8017c86 <uxr_deserialize_CLIENT_Representation+0x7e>
 8017c7e:	2301      	movs	r3, #1
 8017c80:	75ab      	strb	r3, [r5, #22]
 8017c82:	2700      	movs	r7, #0
 8017c84:	e7eb      	b.n	8017c5e <uxr_deserialize_CLIENT_Representation+0x56>
 8017c86:	b30b      	cbz	r3, 8017ccc <uxr_deserialize_CLIENT_Representation+0xc4>
 8017c88:	2800      	cmp	r0, #0
 8017c8a:	d0fa      	beq.n	8017c82 <uxr_deserialize_CLIENT_Representation+0x7a>
 8017c8c:	46a0      	mov	r8, r4
 8017c8e:	f04f 0900 	mov.w	r9, #0
 8017c92:	e001      	b.n	8017c98 <uxr_deserialize_CLIENT_Representation+0x90>
 8017c94:	2e00      	cmp	r6, #0
 8017c96:	d0f4      	beq.n	8017c82 <uxr_deserialize_CLIENT_Representation+0x7a>
 8017c98:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8017c9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017ca0:	4628      	mov	r0, r5
 8017ca2:	f005 feb7 	bl	801da14 <ucdr_deserialize_string>
 8017ca6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017caa:	4606      	mov	r6, r0
 8017cac:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8017cb0:	4628      	mov	r0, r5
 8017cb2:	f005 feaf 	bl	801da14 <ucdr_deserialize_string>
 8017cb6:	6923      	ldr	r3, [r4, #16]
 8017cb8:	f109 0901 	add.w	r9, r9, #1
 8017cbc:	4006      	ands	r6, r0
 8017cbe:	4599      	cmp	r9, r3
 8017cc0:	f108 0808 	add.w	r8, r8, #8
 8017cc4:	b2f6      	uxtb	r6, r6
 8017cc6:	d3e5      	bcc.n	8017c94 <uxr_deserialize_CLIENT_Representation+0x8c>
 8017cc8:	4037      	ands	r7, r6
 8017cca:	e7c8      	b.n	8017c5e <uxr_deserialize_CLIENT_Representation+0x56>
 8017ccc:	4007      	ands	r7, r0
 8017cce:	e7c6      	b.n	8017c5e <uxr_deserialize_CLIENT_Representation+0x56>

08017cd0 <uxr_serialize_AGENT_Representation>:
 8017cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017cd4:	2204      	movs	r2, #4
 8017cd6:	460f      	mov	r7, r1
 8017cd8:	4605      	mov	r5, r0
 8017cda:	f005 fd19 	bl	801d710 <ucdr_serialize_array_uint8_t>
 8017cde:	2202      	movs	r2, #2
 8017ce0:	4604      	mov	r4, r0
 8017ce2:	1d39      	adds	r1, r7, #4
 8017ce4:	4628      	mov	r0, r5
 8017ce6:	f005 fd13 	bl	801d710 <ucdr_serialize_array_uint8_t>
 8017cea:	4020      	ands	r0, r4
 8017cec:	2202      	movs	r2, #2
 8017cee:	1db9      	adds	r1, r7, #6
 8017cf0:	b2c4      	uxtb	r4, r0
 8017cf2:	4628      	mov	r0, r5
 8017cf4:	f005 fd0c 	bl	801d710 <ucdr_serialize_array_uint8_t>
 8017cf8:	7a39      	ldrb	r1, [r7, #8]
 8017cfa:	4004      	ands	r4, r0
 8017cfc:	4628      	mov	r0, r5
 8017cfe:	f7f9 fde3 	bl	80118c8 <ucdr_serialize_bool>
 8017d02:	7a3b      	ldrb	r3, [r7, #8]
 8017d04:	ea00 0804 	and.w	r8, r0, r4
 8017d08:	b913      	cbnz	r3, 8017d10 <uxr_serialize_AGENT_Representation+0x40>
 8017d0a:	4640      	mov	r0, r8
 8017d0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d10:	68f9      	ldr	r1, [r7, #12]
 8017d12:	4628      	mov	r0, r5
 8017d14:	f7fa f81c 	bl	8011d50 <ucdr_serialize_uint32_t>
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	b303      	cbz	r3, 8017d5e <uxr_serialize_AGENT_Representation+0x8e>
 8017d1c:	b1d0      	cbz	r0, 8017d54 <uxr_serialize_AGENT_Representation+0x84>
 8017d1e:	463e      	mov	r6, r7
 8017d20:	f04f 0900 	mov.w	r9, #0
 8017d24:	e001      	b.n	8017d2a <uxr_serialize_AGENT_Representation+0x5a>
 8017d26:	3608      	adds	r6, #8
 8017d28:	b1a4      	cbz	r4, 8017d54 <uxr_serialize_AGENT_Representation+0x84>
 8017d2a:	6931      	ldr	r1, [r6, #16]
 8017d2c:	4628      	mov	r0, r5
 8017d2e:	f005 fe61 	bl	801d9f4 <ucdr_serialize_string>
 8017d32:	6971      	ldr	r1, [r6, #20]
 8017d34:	4604      	mov	r4, r0
 8017d36:	4628      	mov	r0, r5
 8017d38:	f005 fe5c 	bl	801d9f4 <ucdr_serialize_string>
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	f109 0901 	add.w	r9, r9, #1
 8017d42:	4004      	ands	r4, r0
 8017d44:	4599      	cmp	r9, r3
 8017d46:	b2e4      	uxtb	r4, r4
 8017d48:	d3ed      	bcc.n	8017d26 <uxr_serialize_AGENT_Representation+0x56>
 8017d4a:	ea08 0804 	and.w	r8, r8, r4
 8017d4e:	4640      	mov	r0, r8
 8017d50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d54:	f04f 0800 	mov.w	r8, #0
 8017d58:	4640      	mov	r0, r8
 8017d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d5e:	ea08 0800 	and.w	r8, r8, r0
 8017d62:	e7d2      	b.n	8017d0a <uxr_serialize_AGENT_Representation+0x3a>

08017d64 <uxr_serialize_DATAWRITER_Representation>:
 8017d64:	b570      	push	{r4, r5, r6, lr}
 8017d66:	460d      	mov	r5, r1
 8017d68:	7809      	ldrb	r1, [r1, #0]
 8017d6a:	4606      	mov	r6, r0
 8017d6c:	f7f9 fdda 	bl	8011924 <ucdr_serialize_uint8_t>
 8017d70:	4604      	mov	r4, r0
 8017d72:	b130      	cbz	r0, 8017d82 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8017d74:	782b      	ldrb	r3, [r5, #0]
 8017d76:	2b02      	cmp	r3, #2
 8017d78:	d00c      	beq.n	8017d94 <uxr_serialize_DATAWRITER_Representation+0x30>
 8017d7a:	2b03      	cmp	r3, #3
 8017d7c:	d010      	beq.n	8017da0 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8017d7e:	2b01      	cmp	r3, #1
 8017d80:	d008      	beq.n	8017d94 <uxr_serialize_DATAWRITER_Representation+0x30>
 8017d82:	2202      	movs	r2, #2
 8017d84:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8017d88:	4630      	mov	r0, r6
 8017d8a:	f005 fcc1 	bl	801d710 <ucdr_serialize_array_uint8_t>
 8017d8e:	4020      	ands	r0, r4
 8017d90:	b2c0      	uxtb	r0, r0
 8017d92:	bd70      	pop	{r4, r5, r6, pc}
 8017d94:	6869      	ldr	r1, [r5, #4]
 8017d96:	4630      	mov	r0, r6
 8017d98:	f005 fe2c 	bl	801d9f4 <ucdr_serialize_string>
 8017d9c:	4604      	mov	r4, r0
 8017d9e:	e7f0      	b.n	8017d82 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8017da0:	4629      	mov	r1, r5
 8017da2:	4630      	mov	r0, r6
 8017da4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8017da8:	3104      	adds	r1, #4
 8017daa:	f7fe f821 	bl	8015df0 <ucdr_serialize_sequence_uint8_t>
 8017dae:	4604      	mov	r4, r0
 8017db0:	e7e7      	b.n	8017d82 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8017db2:	bf00      	nop

08017db4 <uxr_serialize_ObjectVariant.part.0>:
 8017db4:	b570      	push	{r4, r5, r6, lr}
 8017db6:	780b      	ldrb	r3, [r1, #0]
 8017db8:	3b01      	subs	r3, #1
 8017dba:	460c      	mov	r4, r1
 8017dbc:	4605      	mov	r5, r0
 8017dbe:	2b0d      	cmp	r3, #13
 8017dc0:	d854      	bhi.n	8017e6c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8017dc2:	e8df f003 	tbb	[pc, r3]
 8017dc6:	0730      	.short	0x0730
 8017dc8:	07071b1b 	.word	0x07071b1b
 8017dcc:	0c530707 	.word	0x0c530707
 8017dd0:	494e0c0c 	.word	0x494e0c0c
 8017dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017dd8:	3104      	adds	r1, #4
 8017dda:	f7ff bfc3 	b.w	8017d64 <uxr_serialize_DATAWRITER_Representation>
 8017dde:	7909      	ldrb	r1, [r1, #4]
 8017de0:	f7f9 fda0 	bl	8011924 <ucdr_serialize_uint8_t>
 8017de4:	b1e8      	cbz	r0, 8017e22 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8017de6:	7923      	ldrb	r3, [r4, #4]
 8017de8:	2b01      	cmp	r3, #1
 8017dea:	d001      	beq.n	8017df0 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8017dec:	2b02      	cmp	r3, #2
 8017dee:	d13d      	bne.n	8017e6c <uxr_serialize_ObjectVariant.part.0+0xb8>
 8017df0:	68a1      	ldr	r1, [r4, #8]
 8017df2:	4628      	mov	r0, r5
 8017df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017df8:	f005 bdfc 	b.w	801d9f4 <ucdr_serialize_string>
 8017dfc:	7909      	ldrb	r1, [r1, #4]
 8017dfe:	f7f9 fd91 	bl	8011924 <ucdr_serialize_uint8_t>
 8017e02:	4606      	mov	r6, r0
 8017e04:	b120      	cbz	r0, 8017e10 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8017e06:	7923      	ldrb	r3, [r4, #4]
 8017e08:	2b02      	cmp	r3, #2
 8017e0a:	d039      	beq.n	8017e80 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8017e0c:	2b03      	cmp	r3, #3
 8017e0e:	d02f      	beq.n	8017e70 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8017e10:	2202      	movs	r2, #2
 8017e12:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8017e16:	4628      	mov	r0, r5
 8017e18:	f005 fc7a 	bl	801d710 <ucdr_serialize_array_uint8_t>
 8017e1c:	4030      	ands	r0, r6
 8017e1e:	b2c0      	uxtb	r0, r0
 8017e20:	bd70      	pop	{r4, r5, r6, pc}
 8017e22:	2000      	movs	r0, #0
 8017e24:	bd70      	pop	{r4, r5, r6, pc}
 8017e26:	7909      	ldrb	r1, [r1, #4]
 8017e28:	f7f9 fd7c 	bl	8011924 <ucdr_serialize_uint8_t>
 8017e2c:	4606      	mov	r6, r0
 8017e2e:	b158      	cbz	r0, 8017e48 <uxr_serialize_ObjectVariant.part.0+0x94>
 8017e30:	7923      	ldrb	r3, [r4, #4]
 8017e32:	2b02      	cmp	r3, #2
 8017e34:	d003      	beq.n	8017e3e <uxr_serialize_ObjectVariant.part.0+0x8a>
 8017e36:	2b03      	cmp	r3, #3
 8017e38:	d028      	beq.n	8017e8c <uxr_serialize_ObjectVariant.part.0+0xd8>
 8017e3a:	2b01      	cmp	r3, #1
 8017e3c:	d104      	bne.n	8017e48 <uxr_serialize_ObjectVariant.part.0+0x94>
 8017e3e:	68a1      	ldr	r1, [r4, #8]
 8017e40:	4628      	mov	r0, r5
 8017e42:	f005 fdd7 	bl	801d9f4 <ucdr_serialize_string>
 8017e46:	4606      	mov	r6, r0
 8017e48:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8017e4c:	4628      	mov	r0, r5
 8017e4e:	f7fa faa5 	bl	801239c <ucdr_serialize_int16_t>
 8017e52:	4030      	ands	r0, r6
 8017e54:	b2c0      	uxtb	r0, r0
 8017e56:	bd70      	pop	{r4, r5, r6, pc}
 8017e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e5c:	3104      	adds	r1, #4
 8017e5e:	f7ff be7b 	b.w	8017b58 <uxr_serialize_CLIENT_Representation>
 8017e62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e66:	3104      	adds	r1, #4
 8017e68:	f7ff bf32 	b.w	8017cd0 <uxr_serialize_AGENT_Representation>
 8017e6c:	2001      	movs	r0, #1
 8017e6e:	bd70      	pop	{r4, r5, r6, pc}
 8017e70:	68a2      	ldr	r2, [r4, #8]
 8017e72:	f104 010c 	add.w	r1, r4, #12
 8017e76:	4628      	mov	r0, r5
 8017e78:	f7fd ffba 	bl	8015df0 <ucdr_serialize_sequence_uint8_t>
 8017e7c:	4606      	mov	r6, r0
 8017e7e:	e7c7      	b.n	8017e10 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8017e80:	68a1      	ldr	r1, [r4, #8]
 8017e82:	4628      	mov	r0, r5
 8017e84:	f005 fdb6 	bl	801d9f4 <ucdr_serialize_string>
 8017e88:	4606      	mov	r6, r0
 8017e8a:	e7c1      	b.n	8017e10 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8017e8c:	68a2      	ldr	r2, [r4, #8]
 8017e8e:	f104 010c 	add.w	r1, r4, #12
 8017e92:	4628      	mov	r0, r5
 8017e94:	f7fd ffac 	bl	8015df0 <ucdr_serialize_sequence_uint8_t>
 8017e98:	4606      	mov	r6, r0
 8017e9a:	e7d5      	b.n	8017e48 <uxr_serialize_ObjectVariant.part.0+0x94>

08017e9c <uxr_deserialize_DATAWRITER_Representation>:
 8017e9c:	b570      	push	{r4, r5, r6, lr}
 8017e9e:	4606      	mov	r6, r0
 8017ea0:	460d      	mov	r5, r1
 8017ea2:	f7f9 fd55 	bl	8011950 <ucdr_deserialize_uint8_t>
 8017ea6:	4604      	mov	r4, r0
 8017ea8:	b130      	cbz	r0, 8017eb8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8017eaa:	782b      	ldrb	r3, [r5, #0]
 8017eac:	2b02      	cmp	r3, #2
 8017eae:	d00c      	beq.n	8017eca <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8017eb0:	2b03      	cmp	r3, #3
 8017eb2:	d012      	beq.n	8017eda <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8017eb4:	2b01      	cmp	r3, #1
 8017eb6:	d008      	beq.n	8017eca <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8017eb8:	2202      	movs	r2, #2
 8017eba:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8017ebe:	4630      	mov	r0, r6
 8017ec0:	f005 fc8a 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 8017ec4:	4020      	ands	r0, r4
 8017ec6:	b2c0      	uxtb	r0, r0
 8017ec8:	bd70      	pop	{r4, r5, r6, pc}
 8017eca:	6869      	ldr	r1, [r5, #4]
 8017ecc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017ed0:	4630      	mov	r0, r6
 8017ed2:	f005 fd9f 	bl	801da14 <ucdr_deserialize_string>
 8017ed6:	4604      	mov	r4, r0
 8017ed8:	e7ee      	b.n	8017eb8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8017eda:	1d2b      	adds	r3, r5, #4
 8017edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017ee0:	f105 0108 	add.w	r1, r5, #8
 8017ee4:	4630      	mov	r0, r6
 8017ee6:	f7fd ff95 	bl	8015e14 <ucdr_deserialize_sequence_uint8_t>
 8017eea:	4604      	mov	r4, r0
 8017eec:	e7e4      	b.n	8017eb8 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8017eee:	bf00      	nop

08017ef0 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8017ef0:	b570      	push	{r4, r5, r6, lr}
 8017ef2:	460d      	mov	r5, r1
 8017ef4:	7809      	ldrb	r1, [r1, #0]
 8017ef6:	4606      	mov	r6, r0
 8017ef8:	f7f9 fce6 	bl	80118c8 <ucdr_serialize_bool>
 8017efc:	782b      	ldrb	r3, [r5, #0]
 8017efe:	4604      	mov	r4, r0
 8017f00:	b94b      	cbnz	r3, 8017f16 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8017f02:	7a29      	ldrb	r1, [r5, #8]
 8017f04:	4630      	mov	r0, r6
 8017f06:	f7f9 fcdf 	bl	80118c8 <ucdr_serialize_bool>
 8017f0a:	7a2b      	ldrb	r3, [r5, #8]
 8017f0c:	4004      	ands	r4, r0
 8017f0e:	b2e4      	uxtb	r4, r4
 8017f10:	b943      	cbnz	r3, 8017f24 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8017f12:	4620      	mov	r0, r4
 8017f14:	bd70      	pop	{r4, r5, r6, pc}
 8017f16:	6869      	ldr	r1, [r5, #4]
 8017f18:	4630      	mov	r0, r6
 8017f1a:	f005 fd6b 	bl	801d9f4 <ucdr_serialize_string>
 8017f1e:	4004      	ands	r4, r0
 8017f20:	b2e4      	uxtb	r4, r4
 8017f22:	e7ee      	b.n	8017f02 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8017f24:	68e9      	ldr	r1, [r5, #12]
 8017f26:	4630      	mov	r0, r6
 8017f28:	f005 fd64 	bl	801d9f4 <ucdr_serialize_string>
 8017f2c:	4004      	ands	r4, r0
 8017f2e:	4620      	mov	r0, r4
 8017f30:	bd70      	pop	{r4, r5, r6, pc}
 8017f32:	bf00      	nop

08017f34 <uxr_serialize_OBJK_Topic_Binary>:
 8017f34:	b570      	push	{r4, r5, r6, lr}
 8017f36:	460d      	mov	r5, r1
 8017f38:	6809      	ldr	r1, [r1, #0]
 8017f3a:	4606      	mov	r6, r0
 8017f3c:	f005 fd5a 	bl	801d9f4 <ucdr_serialize_string>
 8017f40:	7929      	ldrb	r1, [r5, #4]
 8017f42:	4604      	mov	r4, r0
 8017f44:	4630      	mov	r0, r6
 8017f46:	f7f9 fcbf 	bl	80118c8 <ucdr_serialize_bool>
 8017f4a:	792b      	ldrb	r3, [r5, #4]
 8017f4c:	4004      	ands	r4, r0
 8017f4e:	b2e4      	uxtb	r4, r4
 8017f50:	b943      	cbnz	r3, 8017f64 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8017f52:	7b29      	ldrb	r1, [r5, #12]
 8017f54:	4630      	mov	r0, r6
 8017f56:	f7f9 fcb7 	bl	80118c8 <ucdr_serialize_bool>
 8017f5a:	7b2b      	ldrb	r3, [r5, #12]
 8017f5c:	4004      	ands	r4, r0
 8017f5e:	b93b      	cbnz	r3, 8017f70 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8017f60:	4620      	mov	r0, r4
 8017f62:	bd70      	pop	{r4, r5, r6, pc}
 8017f64:	68a9      	ldr	r1, [r5, #8]
 8017f66:	4630      	mov	r0, r6
 8017f68:	f005 fd44 	bl	801d9f4 <ucdr_serialize_string>
 8017f6c:	4004      	ands	r4, r0
 8017f6e:	e7f0      	b.n	8017f52 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8017f70:	6929      	ldr	r1, [r5, #16]
 8017f72:	4630      	mov	r0, r6
 8017f74:	f005 fd3e 	bl	801d9f4 <ucdr_serialize_string>
 8017f78:	4004      	ands	r4, r0
 8017f7a:	b2e4      	uxtb	r4, r4
 8017f7c:	4620      	mov	r0, r4
 8017f7e:	bd70      	pop	{r4, r5, r6, pc}

08017f80 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8017f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f84:	460c      	mov	r4, r1
 8017f86:	7809      	ldrb	r1, [r1, #0]
 8017f88:	4606      	mov	r6, r0
 8017f8a:	f7f9 fc9d 	bl	80118c8 <ucdr_serialize_bool>
 8017f8e:	7823      	ldrb	r3, [r4, #0]
 8017f90:	4605      	mov	r5, r0
 8017f92:	b96b      	cbnz	r3, 8017fb0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8017f94:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8017f98:	4630      	mov	r0, r6
 8017f9a:	f7f9 fc95 	bl	80118c8 <ucdr_serialize_bool>
 8017f9e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8017fa2:	4005      	ands	r5, r0
 8017fa4:	b2ed      	uxtb	r5, r5
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d169      	bne.n	801807e <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8017faa:	4628      	mov	r0, r5
 8017fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fb0:	6861      	ldr	r1, [r4, #4]
 8017fb2:	4630      	mov	r0, r6
 8017fb4:	f7f9 fecc 	bl	8011d50 <ucdr_serialize_uint32_t>
 8017fb8:	6863      	ldr	r3, [r4, #4]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d06b      	beq.n	8018096 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8017fbe:	2800      	cmp	r0, #0
 8017fc0:	d067      	beq.n	8018092 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8017fc2:	68a1      	ldr	r1, [r4, #8]
 8017fc4:	4630      	mov	r0, r6
 8017fc6:	f005 fd15 	bl	801d9f4 <ucdr_serialize_string>
 8017fca:	6863      	ldr	r3, [r4, #4]
 8017fcc:	2b01      	cmp	r3, #1
 8017fce:	d953      	bls.n	8018078 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017fd0:	2800      	cmp	r0, #0
 8017fd2:	d05e      	beq.n	8018092 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8017fd4:	68e1      	ldr	r1, [r4, #12]
 8017fd6:	4630      	mov	r0, r6
 8017fd8:	f005 fd0c 	bl	801d9f4 <ucdr_serialize_string>
 8017fdc:	6863      	ldr	r3, [r4, #4]
 8017fde:	2b02      	cmp	r3, #2
 8017fe0:	d94a      	bls.n	8018078 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017fe2:	2800      	cmp	r0, #0
 8017fe4:	d055      	beq.n	8018092 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8017fe6:	6921      	ldr	r1, [r4, #16]
 8017fe8:	4630      	mov	r0, r6
 8017fea:	f005 fd03 	bl	801d9f4 <ucdr_serialize_string>
 8017fee:	6863      	ldr	r3, [r4, #4]
 8017ff0:	2b03      	cmp	r3, #3
 8017ff2:	d941      	bls.n	8018078 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8017ff4:	2800      	cmp	r0, #0
 8017ff6:	d04c      	beq.n	8018092 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8017ff8:	6961      	ldr	r1, [r4, #20]
 8017ffa:	4630      	mov	r0, r6
 8017ffc:	f005 fcfa 	bl	801d9f4 <ucdr_serialize_string>
 8018000:	6863      	ldr	r3, [r4, #4]
 8018002:	2b04      	cmp	r3, #4
 8018004:	d938      	bls.n	8018078 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8018006:	2800      	cmp	r0, #0
 8018008:	d043      	beq.n	8018092 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801800a:	69a1      	ldr	r1, [r4, #24]
 801800c:	4630      	mov	r0, r6
 801800e:	f005 fcf1 	bl	801d9f4 <ucdr_serialize_string>
 8018012:	6863      	ldr	r3, [r4, #4]
 8018014:	2b05      	cmp	r3, #5
 8018016:	d92f      	bls.n	8018078 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8018018:	2800      	cmp	r0, #0
 801801a:	d03a      	beq.n	8018092 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801801c:	69e1      	ldr	r1, [r4, #28]
 801801e:	4630      	mov	r0, r6
 8018020:	f005 fce8 	bl	801d9f4 <ucdr_serialize_string>
 8018024:	6863      	ldr	r3, [r4, #4]
 8018026:	2b06      	cmp	r3, #6
 8018028:	d926      	bls.n	8018078 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801802a:	b390      	cbz	r0, 8018092 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801802c:	6a21      	ldr	r1, [r4, #32]
 801802e:	4630      	mov	r0, r6
 8018030:	f005 fce0 	bl	801d9f4 <ucdr_serialize_string>
 8018034:	6863      	ldr	r3, [r4, #4]
 8018036:	2b07      	cmp	r3, #7
 8018038:	d91e      	bls.n	8018078 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801803a:	b350      	cbz	r0, 8018092 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801803c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801803e:	4630      	mov	r0, r6
 8018040:	f005 fcd8 	bl	801d9f4 <ucdr_serialize_string>
 8018044:	6863      	ldr	r3, [r4, #4]
 8018046:	2b08      	cmp	r3, #8
 8018048:	d916      	bls.n	8018078 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801804a:	b310      	cbz	r0, 8018092 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801804c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801804e:	4630      	mov	r0, r6
 8018050:	f005 fcd0 	bl	801d9f4 <ucdr_serialize_string>
 8018054:	6863      	ldr	r3, [r4, #4]
 8018056:	2b09      	cmp	r3, #9
 8018058:	d90e      	bls.n	8018078 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801805a:	b1d0      	cbz	r0, 8018092 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801805c:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8018060:	2709      	movs	r7, #9
 8018062:	e000      	b.n	8018066 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8018064:	b1a8      	cbz	r0, 8018092 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8018066:	f858 1b04 	ldr.w	r1, [r8], #4
 801806a:	4630      	mov	r0, r6
 801806c:	f005 fcc2 	bl	801d9f4 <ucdr_serialize_string>
 8018070:	6862      	ldr	r2, [r4, #4]
 8018072:	3701      	adds	r7, #1
 8018074:	4297      	cmp	r7, r2
 8018076:	d3f5      	bcc.n	8018064 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8018078:	4005      	ands	r5, r0
 801807a:	b2ed      	uxtb	r5, r5
 801807c:	e78a      	b.n	8017f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801807e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8018080:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8018084:	4630      	mov	r0, r6
 8018086:	f7fd feb3 	bl	8015df0 <ucdr_serialize_sequence_uint8_t>
 801808a:	4005      	ands	r5, r0
 801808c:	4628      	mov	r0, r5
 801808e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018092:	2500      	movs	r5, #0
 8018094:	e77e      	b.n	8017f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8018096:	4028      	ands	r0, r5
 8018098:	b2c5      	uxtb	r5, r0
 801809a:	e77b      	b.n	8017f94 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0801809c <uxr_serialize_OBJK_Publisher_Binary>:
 801809c:	b570      	push	{r4, r5, r6, lr}
 801809e:	460d      	mov	r5, r1
 80180a0:	7809      	ldrb	r1, [r1, #0]
 80180a2:	4606      	mov	r6, r0
 80180a4:	f7f9 fc10 	bl	80118c8 <ucdr_serialize_bool>
 80180a8:	782b      	ldrb	r3, [r5, #0]
 80180aa:	4604      	mov	r4, r0
 80180ac:	b94b      	cbnz	r3, 80180c2 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80180ae:	7a29      	ldrb	r1, [r5, #8]
 80180b0:	4630      	mov	r0, r6
 80180b2:	f7f9 fc09 	bl	80118c8 <ucdr_serialize_bool>
 80180b6:	7a2b      	ldrb	r3, [r5, #8]
 80180b8:	4004      	ands	r4, r0
 80180ba:	b2e4      	uxtb	r4, r4
 80180bc:	b943      	cbnz	r3, 80180d0 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80180be:	4620      	mov	r0, r4
 80180c0:	bd70      	pop	{r4, r5, r6, pc}
 80180c2:	6869      	ldr	r1, [r5, #4]
 80180c4:	4630      	mov	r0, r6
 80180c6:	f005 fc95 	bl	801d9f4 <ucdr_serialize_string>
 80180ca:	4004      	ands	r4, r0
 80180cc:	b2e4      	uxtb	r4, r4
 80180ce:	e7ee      	b.n	80180ae <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80180d0:	f105 010c 	add.w	r1, r5, #12
 80180d4:	4630      	mov	r0, r6
 80180d6:	f7ff ff53 	bl	8017f80 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80180da:	4004      	ands	r4, r0
 80180dc:	4620      	mov	r0, r4
 80180de:	bd70      	pop	{r4, r5, r6, pc}

080180e0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 80180e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180e4:	460c      	mov	r4, r1
 80180e6:	7809      	ldrb	r1, [r1, #0]
 80180e8:	4606      	mov	r6, r0
 80180ea:	f7f9 fbed 	bl	80118c8 <ucdr_serialize_bool>
 80180ee:	7823      	ldrb	r3, [r4, #0]
 80180f0:	4605      	mov	r5, r0
 80180f2:	b96b      	cbnz	r3, 8018110 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 80180f4:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80180f8:	4630      	mov	r0, r6
 80180fa:	f7f9 fbe5 	bl	80118c8 <ucdr_serialize_bool>
 80180fe:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8018102:	4005      	ands	r5, r0
 8018104:	b2ed      	uxtb	r5, r5
 8018106:	2b00      	cmp	r3, #0
 8018108:	d169      	bne.n	80181de <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 801810a:	4628      	mov	r0, r5
 801810c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018110:	6861      	ldr	r1, [r4, #4]
 8018112:	4630      	mov	r0, r6
 8018114:	f7f9 fe1c 	bl	8011d50 <ucdr_serialize_uint32_t>
 8018118:	6863      	ldr	r3, [r4, #4]
 801811a:	2b00      	cmp	r3, #0
 801811c:	d06b      	beq.n	80181f6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 801811e:	2800      	cmp	r0, #0
 8018120:	d067      	beq.n	80181f2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8018122:	68a1      	ldr	r1, [r4, #8]
 8018124:	4630      	mov	r0, r6
 8018126:	f005 fc65 	bl	801d9f4 <ucdr_serialize_string>
 801812a:	6863      	ldr	r3, [r4, #4]
 801812c:	2b01      	cmp	r3, #1
 801812e:	d953      	bls.n	80181d8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8018130:	2800      	cmp	r0, #0
 8018132:	d05e      	beq.n	80181f2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8018134:	68e1      	ldr	r1, [r4, #12]
 8018136:	4630      	mov	r0, r6
 8018138:	f005 fc5c 	bl	801d9f4 <ucdr_serialize_string>
 801813c:	6863      	ldr	r3, [r4, #4]
 801813e:	2b02      	cmp	r3, #2
 8018140:	d94a      	bls.n	80181d8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8018142:	2800      	cmp	r0, #0
 8018144:	d055      	beq.n	80181f2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8018146:	6921      	ldr	r1, [r4, #16]
 8018148:	4630      	mov	r0, r6
 801814a:	f005 fc53 	bl	801d9f4 <ucdr_serialize_string>
 801814e:	6863      	ldr	r3, [r4, #4]
 8018150:	2b03      	cmp	r3, #3
 8018152:	d941      	bls.n	80181d8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8018154:	2800      	cmp	r0, #0
 8018156:	d04c      	beq.n	80181f2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8018158:	6961      	ldr	r1, [r4, #20]
 801815a:	4630      	mov	r0, r6
 801815c:	f005 fc4a 	bl	801d9f4 <ucdr_serialize_string>
 8018160:	6863      	ldr	r3, [r4, #4]
 8018162:	2b04      	cmp	r3, #4
 8018164:	d938      	bls.n	80181d8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8018166:	2800      	cmp	r0, #0
 8018168:	d043      	beq.n	80181f2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801816a:	69a1      	ldr	r1, [r4, #24]
 801816c:	4630      	mov	r0, r6
 801816e:	f005 fc41 	bl	801d9f4 <ucdr_serialize_string>
 8018172:	6863      	ldr	r3, [r4, #4]
 8018174:	2b05      	cmp	r3, #5
 8018176:	d92f      	bls.n	80181d8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8018178:	2800      	cmp	r0, #0
 801817a:	d03a      	beq.n	80181f2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801817c:	69e1      	ldr	r1, [r4, #28]
 801817e:	4630      	mov	r0, r6
 8018180:	f005 fc38 	bl	801d9f4 <ucdr_serialize_string>
 8018184:	6863      	ldr	r3, [r4, #4]
 8018186:	2b06      	cmp	r3, #6
 8018188:	d926      	bls.n	80181d8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801818a:	b390      	cbz	r0, 80181f2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801818c:	6a21      	ldr	r1, [r4, #32]
 801818e:	4630      	mov	r0, r6
 8018190:	f005 fc30 	bl	801d9f4 <ucdr_serialize_string>
 8018194:	6863      	ldr	r3, [r4, #4]
 8018196:	2b07      	cmp	r3, #7
 8018198:	d91e      	bls.n	80181d8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801819a:	b350      	cbz	r0, 80181f2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 801819c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801819e:	4630      	mov	r0, r6
 80181a0:	f005 fc28 	bl	801d9f4 <ucdr_serialize_string>
 80181a4:	6863      	ldr	r3, [r4, #4]
 80181a6:	2b08      	cmp	r3, #8
 80181a8:	d916      	bls.n	80181d8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80181aa:	b310      	cbz	r0, 80181f2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80181ac:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80181ae:	4630      	mov	r0, r6
 80181b0:	f005 fc20 	bl	801d9f4 <ucdr_serialize_string>
 80181b4:	6863      	ldr	r3, [r4, #4]
 80181b6:	2b09      	cmp	r3, #9
 80181b8:	d90e      	bls.n	80181d8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 80181ba:	b1d0      	cbz	r0, 80181f2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80181bc:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80181c0:	2709      	movs	r7, #9
 80181c2:	e000      	b.n	80181c6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80181c4:	b1a8      	cbz	r0, 80181f2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80181c6:	f858 1b04 	ldr.w	r1, [r8], #4
 80181ca:	4630      	mov	r0, r6
 80181cc:	f005 fc12 	bl	801d9f4 <ucdr_serialize_string>
 80181d0:	6862      	ldr	r2, [r4, #4]
 80181d2:	3701      	adds	r7, #1
 80181d4:	4297      	cmp	r7, r2
 80181d6:	d3f5      	bcc.n	80181c4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80181d8:	4005      	ands	r5, r0
 80181da:	b2ed      	uxtb	r5, r5
 80181dc:	e78a      	b.n	80180f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80181de:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80181e0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80181e4:	4630      	mov	r0, r6
 80181e6:	f7fd fe03 	bl	8015df0 <ucdr_serialize_sequence_uint8_t>
 80181ea:	4005      	ands	r5, r0
 80181ec:	4628      	mov	r0, r5
 80181ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181f2:	2500      	movs	r5, #0
 80181f4:	e77e      	b.n	80180f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80181f6:	4028      	ands	r0, r5
 80181f8:	b2c5      	uxtb	r5, r0
 80181fa:	e77b      	b.n	80180f4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

080181fc <uxr_serialize_OBJK_Subscriber_Binary>:
 80181fc:	b570      	push	{r4, r5, r6, lr}
 80181fe:	460d      	mov	r5, r1
 8018200:	7809      	ldrb	r1, [r1, #0]
 8018202:	4606      	mov	r6, r0
 8018204:	f7f9 fb60 	bl	80118c8 <ucdr_serialize_bool>
 8018208:	782b      	ldrb	r3, [r5, #0]
 801820a:	4604      	mov	r4, r0
 801820c:	b94b      	cbnz	r3, 8018222 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 801820e:	7a29      	ldrb	r1, [r5, #8]
 8018210:	4630      	mov	r0, r6
 8018212:	f7f9 fb59 	bl	80118c8 <ucdr_serialize_bool>
 8018216:	7a2b      	ldrb	r3, [r5, #8]
 8018218:	4004      	ands	r4, r0
 801821a:	b2e4      	uxtb	r4, r4
 801821c:	b943      	cbnz	r3, 8018230 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 801821e:	4620      	mov	r0, r4
 8018220:	bd70      	pop	{r4, r5, r6, pc}
 8018222:	6869      	ldr	r1, [r5, #4]
 8018224:	4630      	mov	r0, r6
 8018226:	f005 fbe5 	bl	801d9f4 <ucdr_serialize_string>
 801822a:	4004      	ands	r4, r0
 801822c:	b2e4      	uxtb	r4, r4
 801822e:	e7ee      	b.n	801820e <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8018230:	f105 010c 	add.w	r1, r5, #12
 8018234:	4630      	mov	r0, r6
 8018236:	f7ff ff53 	bl	80180e0 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 801823a:	4004      	ands	r4, r0
 801823c:	4620      	mov	r0, r4
 801823e:	bd70      	pop	{r4, r5, r6, pc}

08018240 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8018240:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8018244:	4688      	mov	r8, r1
 8018246:	8809      	ldrh	r1, [r1, #0]
 8018248:	4681      	mov	r9, r0
 801824a:	f7f9 fb97 	bl	801197c <ucdr_serialize_uint16_t>
 801824e:	f898 1002 	ldrb.w	r1, [r8, #2]
 8018252:	4606      	mov	r6, r0
 8018254:	4648      	mov	r0, r9
 8018256:	f7f9 fb37 	bl	80118c8 <ucdr_serialize_bool>
 801825a:	f898 3002 	ldrb.w	r3, [r8, #2]
 801825e:	4006      	ands	r6, r0
 8018260:	b2f5      	uxtb	r5, r6
 8018262:	b9eb      	cbnz	r3, 80182a0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8018264:	f898 1006 	ldrb.w	r1, [r8, #6]
 8018268:	4648      	mov	r0, r9
 801826a:	f7f9 fb2d 	bl	80118c8 <ucdr_serialize_bool>
 801826e:	f898 3006 	ldrb.w	r3, [r8, #6]
 8018272:	4005      	ands	r5, r0
 8018274:	bb7b      	cbnz	r3, 80182d6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8018276:	f898 100c 	ldrb.w	r1, [r8, #12]
 801827a:	4648      	mov	r0, r9
 801827c:	f7f9 fb24 	bl	80118c8 <ucdr_serialize_bool>
 8018280:	f898 300c 	ldrb.w	r3, [r8, #12]
 8018284:	4005      	ands	r5, r0
 8018286:	b9f3      	cbnz	r3, 80182c6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8018288:	f898 1014 	ldrb.w	r1, [r8, #20]
 801828c:	4648      	mov	r0, r9
 801828e:	f7f9 fb1b 	bl	80118c8 <ucdr_serialize_bool>
 8018292:	f898 3014 	ldrb.w	r3, [r8, #20]
 8018296:	4005      	ands	r5, r0
 8018298:	b94b      	cbnz	r3, 80182ae <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801829a:	4628      	mov	r0, r5
 801829c:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80182a0:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80182a4:	4648      	mov	r0, r9
 80182a6:	f7f9 fb69 	bl	801197c <ucdr_serialize_uint16_t>
 80182aa:	4005      	ands	r5, r0
 80182ac:	e7da      	b.n	8018264 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80182ae:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80182b2:	f108 011c 	add.w	r1, r8, #28
 80182b6:	4648      	mov	r0, r9
 80182b8:	f7fd fd9a 	bl	8015df0 <ucdr_serialize_sequence_uint8_t>
 80182bc:	4028      	ands	r0, r5
 80182be:	b2c5      	uxtb	r5, r0
 80182c0:	4628      	mov	r0, r5
 80182c2:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80182c6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80182ca:	4648      	mov	r0, r9
 80182cc:	f7f9 fd40 	bl	8011d50 <ucdr_serialize_uint32_t>
 80182d0:	4028      	ands	r0, r5
 80182d2:	b2c5      	uxtb	r5, r0
 80182d4:	e7d8      	b.n	8018288 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80182d6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80182da:	4648      	mov	r0, r9
 80182dc:	f7f9 fd38 	bl	8011d50 <ucdr_serialize_uint32_t>
 80182e0:	4028      	ands	r0, r5
 80182e2:	b2c5      	uxtb	r5, r0
 80182e4:	e7c7      	b.n	8018276 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80182e6:	bf00      	nop

080182e8 <uxr_serialize_OBJK_DataReader_Binary>:
 80182e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182ea:	2202      	movs	r2, #2
 80182ec:	460c      	mov	r4, r1
 80182ee:	4606      	mov	r6, r0
 80182f0:	f005 fa0e 	bl	801d710 <ucdr_serialize_array_uint8_t>
 80182f4:	78a1      	ldrb	r1, [r4, #2]
 80182f6:	4605      	mov	r5, r0
 80182f8:	4630      	mov	r0, r6
 80182fa:	f7f9 fae5 	bl	80118c8 <ucdr_serialize_bool>
 80182fe:	78a3      	ldrb	r3, [r4, #2]
 8018300:	4005      	ands	r5, r0
 8018302:	b2ed      	uxtb	r5, r5
 8018304:	b90b      	cbnz	r3, 801830a <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8018306:	4628      	mov	r0, r5
 8018308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801830a:	f104 0108 	add.w	r1, r4, #8
 801830e:	4630      	mov	r0, r6
 8018310:	f7ff ff96 	bl	8018240 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8018314:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8018318:	4607      	mov	r7, r0
 801831a:	4630      	mov	r0, r6
 801831c:	f7f9 fad4 	bl	80118c8 <ucdr_serialize_bool>
 8018320:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8018324:	4038      	ands	r0, r7
 8018326:	b2c7      	uxtb	r7, r0
 8018328:	b95b      	cbnz	r3, 8018342 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 801832a:	f894 1038 	ldrb.w	r1, [r4, #56]	@ 0x38
 801832e:	4630      	mov	r0, r6
 8018330:	f7f9 faca 	bl	80118c8 <ucdr_serialize_bool>
 8018334:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8018338:	4007      	ands	r7, r0
 801833a:	b94b      	cbnz	r3, 8018350 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 801833c:	403d      	ands	r5, r7
 801833e:	4628      	mov	r0, r5
 8018340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018342:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	@ 0x30
 8018346:	4630      	mov	r0, r6
 8018348:	f7f9 ff58 	bl	80121fc <ucdr_serialize_uint64_t>
 801834c:	4007      	ands	r7, r0
 801834e:	e7ec      	b.n	801832a <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8018350:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8018352:	4630      	mov	r0, r6
 8018354:	f005 fb4e 	bl	801d9f4 <ucdr_serialize_string>
 8018358:	4007      	ands	r7, r0
 801835a:	b2ff      	uxtb	r7, r7
 801835c:	e7ee      	b.n	801833c <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801835e:	bf00      	nop

08018360 <uxr_serialize_OBJK_DataWriter_Binary>:
 8018360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018362:	2202      	movs	r2, #2
 8018364:	460d      	mov	r5, r1
 8018366:	4606      	mov	r6, r0
 8018368:	f005 f9d2 	bl	801d710 <ucdr_serialize_array_uint8_t>
 801836c:	78a9      	ldrb	r1, [r5, #2]
 801836e:	4604      	mov	r4, r0
 8018370:	4630      	mov	r0, r6
 8018372:	f7f9 faa9 	bl	80118c8 <ucdr_serialize_bool>
 8018376:	78ab      	ldrb	r3, [r5, #2]
 8018378:	4004      	ands	r4, r0
 801837a:	b2e4      	uxtb	r4, r4
 801837c:	b90b      	cbnz	r3, 8018382 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801837e:	4620      	mov	r0, r4
 8018380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018382:	f105 0108 	add.w	r1, r5, #8
 8018386:	4630      	mov	r0, r6
 8018388:	f7ff ff5a 	bl	8018240 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801838c:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8018390:	4607      	mov	r7, r0
 8018392:	4630      	mov	r0, r6
 8018394:	f7f9 fa98 	bl	80118c8 <ucdr_serialize_bool>
 8018398:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801839c:	4038      	ands	r0, r7
 801839e:	b2c7      	uxtb	r7, r0
 80183a0:	b913      	cbnz	r3, 80183a8 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80183a2:	403c      	ands	r4, r7
 80183a4:	4620      	mov	r0, r4
 80183a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183a8:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 80183ac:	4630      	mov	r0, r6
 80183ae:	f7f9 ff25 	bl	80121fc <ucdr_serialize_uint64_t>
 80183b2:	4007      	ands	r7, r0
 80183b4:	e7f5      	b.n	80183a2 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80183b6:	bf00      	nop

080183b8 <uxr_deserialize_ObjectVariant>:
 80183b8:	b570      	push	{r4, r5, r6, lr}
 80183ba:	4605      	mov	r5, r0
 80183bc:	460e      	mov	r6, r1
 80183be:	f7f9 fac7 	bl	8011950 <ucdr_deserialize_uint8_t>
 80183c2:	b168      	cbz	r0, 80183e0 <uxr_deserialize_ObjectVariant+0x28>
 80183c4:	7833      	ldrb	r3, [r6, #0]
 80183c6:	3b01      	subs	r3, #1
 80183c8:	4604      	mov	r4, r0
 80183ca:	2b0d      	cmp	r3, #13
 80183cc:	d809      	bhi.n	80183e2 <uxr_deserialize_ObjectVariant+0x2a>
 80183ce:	e8df f003 	tbb	[pc, r3]
 80183d2:	0a41      	.short	0x0a41
 80183d4:	0a0a2323 	.word	0x0a0a2323
 80183d8:	10080a0a 	.word	0x10080a0a
 80183dc:	565c1010 	.word	0x565c1010
 80183e0:	2400      	movs	r4, #0
 80183e2:	4620      	mov	r0, r4
 80183e4:	bd70      	pop	{r4, r5, r6, pc}
 80183e6:	1d31      	adds	r1, r6, #4
 80183e8:	4628      	mov	r0, r5
 80183ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183ee:	f7ff bd55 	b.w	8017e9c <uxr_deserialize_DATAWRITER_Representation>
 80183f2:	1d31      	adds	r1, r6, #4
 80183f4:	4628      	mov	r0, r5
 80183f6:	f7f9 faab 	bl	8011950 <ucdr_deserialize_uint8_t>
 80183fa:	2800      	cmp	r0, #0
 80183fc:	d0f0      	beq.n	80183e0 <uxr_deserialize_ObjectVariant+0x28>
 80183fe:	7933      	ldrb	r3, [r6, #4]
 8018400:	2b01      	cmp	r3, #1
 8018402:	d001      	beq.n	8018408 <uxr_deserialize_ObjectVariant+0x50>
 8018404:	2b02      	cmp	r3, #2
 8018406:	d1ec      	bne.n	80183e2 <uxr_deserialize_ObjectVariant+0x2a>
 8018408:	68b1      	ldr	r1, [r6, #8]
 801840a:	4628      	mov	r0, r5
 801840c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018414:	f005 bafe 	b.w	801da14 <ucdr_deserialize_string>
 8018418:	1d31      	adds	r1, r6, #4
 801841a:	4628      	mov	r0, r5
 801841c:	f7f9 fa98 	bl	8011950 <ucdr_deserialize_uint8_t>
 8018420:	4604      	mov	r4, r0
 8018422:	b170      	cbz	r0, 8018442 <uxr_deserialize_ObjectVariant+0x8a>
 8018424:	7933      	ldrb	r3, [r6, #4]
 8018426:	2b02      	cmp	r3, #2
 8018428:	d04c      	beq.n	80184c4 <uxr_deserialize_ObjectVariant+0x10c>
 801842a:	2b03      	cmp	r3, #3
 801842c:	d109      	bne.n	8018442 <uxr_deserialize_ObjectVariant+0x8a>
 801842e:	f106 0308 	add.w	r3, r6, #8
 8018432:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018436:	f106 010c 	add.w	r1, r6, #12
 801843a:	4628      	mov	r0, r5
 801843c:	f7fd fcea 	bl	8015e14 <ucdr_deserialize_sequence_uint8_t>
 8018440:	4604      	mov	r4, r0
 8018442:	2202      	movs	r2, #2
 8018444:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8018448:	4628      	mov	r0, r5
 801844a:	f005 f9c5 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 801844e:	4020      	ands	r0, r4
 8018450:	b2c4      	uxtb	r4, r0
 8018452:	e7c6      	b.n	80183e2 <uxr_deserialize_ObjectVariant+0x2a>
 8018454:	1d31      	adds	r1, r6, #4
 8018456:	4628      	mov	r0, r5
 8018458:	f7f9 fa7a 	bl	8011950 <ucdr_deserialize_uint8_t>
 801845c:	4604      	mov	r4, r0
 801845e:	b130      	cbz	r0, 801846e <uxr_deserialize_ObjectVariant+0xb6>
 8018460:	7933      	ldrb	r3, [r6, #4]
 8018462:	2b02      	cmp	r3, #2
 8018464:	d036      	beq.n	80184d4 <uxr_deserialize_ObjectVariant+0x11c>
 8018466:	2b03      	cmp	r3, #3
 8018468:	d03c      	beq.n	80184e4 <uxr_deserialize_ObjectVariant+0x12c>
 801846a:	2b01      	cmp	r3, #1
 801846c:	d032      	beq.n	80184d4 <uxr_deserialize_ObjectVariant+0x11c>
 801846e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8018472:	4628      	mov	r0, r5
 8018474:	f7fa f812 	bl	801249c <ucdr_deserialize_int16_t>
 8018478:	4020      	ands	r0, r4
 801847a:	b2c4      	uxtb	r4, r0
 801847c:	e7b1      	b.n	80183e2 <uxr_deserialize_ObjectVariant+0x2a>
 801847e:	1d31      	adds	r1, r6, #4
 8018480:	4628      	mov	r0, r5
 8018482:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018486:	f7ff bbbf 	b.w	8017c08 <uxr_deserialize_CLIENT_Representation>
 801848a:	2204      	movs	r2, #4
 801848c:	18b1      	adds	r1, r6, r2
 801848e:	4628      	mov	r0, r5
 8018490:	f005 f9a2 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 8018494:	2202      	movs	r2, #2
 8018496:	f106 0108 	add.w	r1, r6, #8
 801849a:	4604      	mov	r4, r0
 801849c:	4628      	mov	r0, r5
 801849e:	f005 f99b 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 80184a2:	2202      	movs	r2, #2
 80184a4:	4004      	ands	r4, r0
 80184a6:	f106 010a 	add.w	r1, r6, #10
 80184aa:	4628      	mov	r0, r5
 80184ac:	f005 f994 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 80184b0:	b2e4      	uxtb	r4, r4
 80184b2:	4603      	mov	r3, r0
 80184b4:	f106 010c 	add.w	r1, r6, #12
 80184b8:	4628      	mov	r0, r5
 80184ba:	401c      	ands	r4, r3
 80184bc:	f7f9 fa1a 	bl	80118f4 <ucdr_deserialize_bool>
 80184c0:	4004      	ands	r4, r0
 80184c2:	e78e      	b.n	80183e2 <uxr_deserialize_ObjectVariant+0x2a>
 80184c4:	68b1      	ldr	r1, [r6, #8]
 80184c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80184ca:	4628      	mov	r0, r5
 80184cc:	f005 faa2 	bl	801da14 <ucdr_deserialize_string>
 80184d0:	4604      	mov	r4, r0
 80184d2:	e7b6      	b.n	8018442 <uxr_deserialize_ObjectVariant+0x8a>
 80184d4:	68b1      	ldr	r1, [r6, #8]
 80184d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80184da:	4628      	mov	r0, r5
 80184dc:	f005 fa9a 	bl	801da14 <ucdr_deserialize_string>
 80184e0:	4604      	mov	r4, r0
 80184e2:	e7c4      	b.n	801846e <uxr_deserialize_ObjectVariant+0xb6>
 80184e4:	f106 0308 	add.w	r3, r6, #8
 80184e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80184ec:	f106 010c 	add.w	r1, r6, #12
 80184f0:	4628      	mov	r0, r5
 80184f2:	f7fd fc8f 	bl	8015e14 <ucdr_deserialize_sequence_uint8_t>
 80184f6:	4604      	mov	r4, r0
 80184f8:	e7b9      	b.n	801846e <uxr_deserialize_ObjectVariant+0xb6>
 80184fa:	bf00      	nop

080184fc <uxr_deserialize_BaseObjectRequest>:
 80184fc:	b570      	push	{r4, r5, r6, lr}
 80184fe:	2202      	movs	r2, #2
 8018500:	4605      	mov	r5, r0
 8018502:	460e      	mov	r6, r1
 8018504:	f005 f968 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 8018508:	2202      	movs	r2, #2
 801850a:	4604      	mov	r4, r0
 801850c:	18b1      	adds	r1, r6, r2
 801850e:	4628      	mov	r0, r5
 8018510:	f005 f962 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 8018514:	4020      	ands	r0, r4
 8018516:	b2c0      	uxtb	r0, r0
 8018518:	bd70      	pop	{r4, r5, r6, pc}
 801851a:	bf00      	nop

0801851c <uxr_serialize_ActivityInfoVariant>:
 801851c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018520:	460d      	mov	r5, r1
 8018522:	7809      	ldrb	r1, [r1, #0]
 8018524:	4607      	mov	r7, r0
 8018526:	f7f9 f9fd 	bl	8011924 <ucdr_serialize_uint8_t>
 801852a:	4681      	mov	r9, r0
 801852c:	b138      	cbz	r0, 801853e <uxr_serialize_ActivityInfoVariant+0x22>
 801852e:	782b      	ldrb	r3, [r5, #0]
 8018530:	2b06      	cmp	r3, #6
 8018532:	f000 8082 	beq.w	801863a <uxr_serialize_ActivityInfoVariant+0x11e>
 8018536:	2b0d      	cmp	r3, #13
 8018538:	d016      	beq.n	8018568 <uxr_serialize_ActivityInfoVariant+0x4c>
 801853a:	2b05      	cmp	r3, #5
 801853c:	d002      	beq.n	8018544 <uxr_serialize_ActivityInfoVariant+0x28>
 801853e:	4648      	mov	r0, r9
 8018540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018544:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8018548:	4638      	mov	r0, r7
 801854a:	f7f9 ff27 	bl	801239c <ucdr_serialize_int16_t>
 801854e:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8018552:	4681      	mov	r9, r0
 8018554:	4638      	mov	r0, r7
 8018556:	f7f9 fe51 	bl	80121fc <ucdr_serialize_uint64_t>
 801855a:	ea09 0000 	and.w	r0, r9, r0
 801855e:	fa5f f980 	uxtb.w	r9, r0
 8018562:	4648      	mov	r0, r9
 8018564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018568:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801856c:	4638      	mov	r0, r7
 801856e:	f7f9 ff15 	bl	801239c <ucdr_serialize_int16_t>
 8018572:	68e9      	ldr	r1, [r5, #12]
 8018574:	4681      	mov	r9, r0
 8018576:	4638      	mov	r0, r7
 8018578:	f7f9 fbea 	bl	8011d50 <ucdr_serialize_uint32_t>
 801857c:	68eb      	ldr	r3, [r5, #12]
 801857e:	2b00      	cmp	r3, #0
 8018580:	d0eb      	beq.n	801855a <uxr_serialize_ActivityInfoVariant+0x3e>
 8018582:	b320      	cbz	r0, 80185ce <uxr_serialize_ActivityInfoVariant+0xb2>
 8018584:	f105 080c 	add.w	r8, r5, #12
 8018588:	2600      	movs	r6, #0
 801858a:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 801858e:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8018592:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8018596:	4638      	mov	r0, r7
 8018598:	f7f9 f9c4 	bl	8011924 <ucdr_serialize_uint8_t>
 801859c:	2800      	cmp	r0, #0
 801859e:	d053      	beq.n	8018648 <uxr_serialize_ActivityInfoVariant+0x12c>
 80185a0:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80185a4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80185a8:	0074      	lsls	r4, r6, #1
 80185aa:	00c9      	lsls	r1, r1, #3
 80185ac:	2b03      	cmp	r3, #3
 80185ae:	d854      	bhi.n	801865a <uxr_serialize_ActivityInfoVariant+0x13e>
 80185b0:	e8df f003 	tbb	[pc, r3]
 80185b4:	02102132 	.word	0x02102132
 80185b8:	4441      	add	r1, r8
 80185ba:	4638      	mov	r0, r7
 80185bc:	6889      	ldr	r1, [r1, #8]
 80185be:	f005 fa19 	bl	801d9f4 <ucdr_serialize_string>
 80185c2:	68ea      	ldr	r2, [r5, #12]
 80185c4:	3601      	adds	r6, #1
 80185c6:	4296      	cmp	r6, r2
 80185c8:	d242      	bcs.n	8018650 <uxr_serialize_ActivityInfoVariant+0x134>
 80185ca:	2800      	cmp	r0, #0
 80185cc:	d1dd      	bne.n	801858a <uxr_serialize_ActivityInfoVariant+0x6e>
 80185ce:	f04f 0900 	mov.w	r9, #0
 80185d2:	e7b4      	b.n	801853e <uxr_serialize_ActivityInfoVariant+0x22>
 80185d4:	3108      	adds	r1, #8
 80185d6:	4441      	add	r1, r8
 80185d8:	2210      	movs	r2, #16
 80185da:	4638      	mov	r0, r7
 80185dc:	f005 f898 	bl	801d710 <ucdr_serialize_array_uint8_t>
 80185e0:	4434      	add	r4, r6
 80185e2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80185e6:	4604      	mov	r4, r0
 80185e8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80185ea:	4638      	mov	r0, r7
 80185ec:	f7f9 fbb0 	bl	8011d50 <ucdr_serialize_uint32_t>
 80185f0:	4020      	ands	r0, r4
 80185f2:	b2c0      	uxtb	r0, r0
 80185f4:	e7e5      	b.n	80185c2 <uxr_serialize_ActivityInfoVariant+0xa6>
 80185f6:	3108      	adds	r1, #8
 80185f8:	4441      	add	r1, r8
 80185fa:	2204      	movs	r2, #4
 80185fc:	4638      	mov	r0, r7
 80185fe:	f005 f887 	bl	801d710 <ucdr_serialize_array_uint8_t>
 8018602:	4434      	add	r4, r6
 8018604:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8018608:	4604      	mov	r4, r0
 801860a:	8b19      	ldrh	r1, [r3, #24]
 801860c:	4638      	mov	r0, r7
 801860e:	f7f9 f9b5 	bl	801197c <ucdr_serialize_uint16_t>
 8018612:	4020      	ands	r0, r4
 8018614:	b2c0      	uxtb	r0, r0
 8018616:	e7d4      	b.n	80185c2 <uxr_serialize_ActivityInfoVariant+0xa6>
 8018618:	3108      	adds	r1, #8
 801861a:	4441      	add	r1, r8
 801861c:	2202      	movs	r2, #2
 801861e:	4638      	mov	r0, r7
 8018620:	f005 f876 	bl	801d710 <ucdr_serialize_array_uint8_t>
 8018624:	4434      	add	r4, r6
 8018626:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 801862a:	4604      	mov	r4, r0
 801862c:	7d99      	ldrb	r1, [r3, #22]
 801862e:	4638      	mov	r0, r7
 8018630:	f7f9 f978 	bl	8011924 <ucdr_serialize_uint8_t>
 8018634:	4020      	ands	r0, r4
 8018636:	b2c0      	uxtb	r0, r0
 8018638:	e7c3      	b.n	80185c2 <uxr_serialize_ActivityInfoVariant+0xa6>
 801863a:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801863e:	4638      	mov	r0, r7
 8018640:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018644:	f7f9 beaa 	b.w	801239c <ucdr_serialize_int16_t>
 8018648:	68ea      	ldr	r2, [r5, #12]
 801864a:	3601      	adds	r6, #1
 801864c:	42b2      	cmp	r2, r6
 801864e:	d8be      	bhi.n	80185ce <uxr_serialize_ActivityInfoVariant+0xb2>
 8018650:	ea09 0900 	and.w	r9, r9, r0
 8018654:	fa5f f989 	uxtb.w	r9, r9
 8018658:	e771      	b.n	801853e <uxr_serialize_ActivityInfoVariant+0x22>
 801865a:	68eb      	ldr	r3, [r5, #12]
 801865c:	3601      	adds	r6, #1
 801865e:	429e      	cmp	r6, r3
 8018660:	f10a 0a18 	add.w	sl, sl, #24
 8018664:	d395      	bcc.n	8018592 <uxr_serialize_ActivityInfoVariant+0x76>
 8018666:	e76a      	b.n	801853e <uxr_serialize_ActivityInfoVariant+0x22>

08018668 <uxr_deserialize_BaseObjectReply>:
 8018668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801866c:	2202      	movs	r2, #2
 801866e:	4606      	mov	r6, r0
 8018670:	460f      	mov	r7, r1
 8018672:	f005 f8b1 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 8018676:	2202      	movs	r2, #2
 8018678:	18b9      	adds	r1, r7, r2
 801867a:	4605      	mov	r5, r0
 801867c:	4630      	mov	r0, r6
 801867e:	f005 f8ab 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 8018682:	1d39      	adds	r1, r7, #4
 8018684:	4680      	mov	r8, r0
 8018686:	4630      	mov	r0, r6
 8018688:	f7f9 f962 	bl	8011950 <ucdr_deserialize_uint8_t>
 801868c:	1d79      	adds	r1, r7, #5
 801868e:	4604      	mov	r4, r0
 8018690:	4630      	mov	r0, r6
 8018692:	f7f9 f95d 	bl	8011950 <ucdr_deserialize_uint8_t>
 8018696:	ea05 0508 	and.w	r5, r5, r8
 801869a:	402c      	ands	r4, r5
 801869c:	4020      	ands	r0, r4
 801869e:	b2c0      	uxtb	r0, r0
 80186a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080186a4 <uxr_serialize_ReadSpecification>:
 80186a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186a8:	460e      	mov	r6, r1
 80186aa:	7809      	ldrb	r1, [r1, #0]
 80186ac:	4607      	mov	r7, r0
 80186ae:	f7f9 f939 	bl	8011924 <ucdr_serialize_uint8_t>
 80186b2:	7871      	ldrb	r1, [r6, #1]
 80186b4:	4604      	mov	r4, r0
 80186b6:	4638      	mov	r0, r7
 80186b8:	f7f9 f934 	bl	8011924 <ucdr_serialize_uint8_t>
 80186bc:	78b1      	ldrb	r1, [r6, #2]
 80186be:	4004      	ands	r4, r0
 80186c0:	4638      	mov	r0, r7
 80186c2:	f7f9 f901 	bl	80118c8 <ucdr_serialize_bool>
 80186c6:	78b3      	ldrb	r3, [r6, #2]
 80186c8:	b2e4      	uxtb	r4, r4
 80186ca:	4004      	ands	r4, r0
 80186cc:	b94b      	cbnz	r3, 80186e2 <uxr_serialize_ReadSpecification+0x3e>
 80186ce:	7a31      	ldrb	r1, [r6, #8]
 80186d0:	4638      	mov	r0, r7
 80186d2:	f7f9 f8f9 	bl	80118c8 <ucdr_serialize_bool>
 80186d6:	7a33      	ldrb	r3, [r6, #8]
 80186d8:	4004      	ands	r4, r0
 80186da:	b943      	cbnz	r3, 80186ee <uxr_serialize_ReadSpecification+0x4a>
 80186dc:	4620      	mov	r0, r4
 80186de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186e2:	6871      	ldr	r1, [r6, #4]
 80186e4:	4638      	mov	r0, r7
 80186e6:	f005 f985 	bl	801d9f4 <ucdr_serialize_string>
 80186ea:	4004      	ands	r4, r0
 80186ec:	e7ef      	b.n	80186ce <uxr_serialize_ReadSpecification+0x2a>
 80186ee:	8971      	ldrh	r1, [r6, #10]
 80186f0:	4638      	mov	r0, r7
 80186f2:	f7f9 f943 	bl	801197c <ucdr_serialize_uint16_t>
 80186f6:	89b1      	ldrh	r1, [r6, #12]
 80186f8:	4605      	mov	r5, r0
 80186fa:	4638      	mov	r0, r7
 80186fc:	f7f9 f93e 	bl	801197c <ucdr_serialize_uint16_t>
 8018700:	89f1      	ldrh	r1, [r6, #14]
 8018702:	4005      	ands	r5, r0
 8018704:	4638      	mov	r0, r7
 8018706:	f7f9 f939 	bl	801197c <ucdr_serialize_uint16_t>
 801870a:	8a31      	ldrh	r1, [r6, #16]
 801870c:	4680      	mov	r8, r0
 801870e:	4638      	mov	r0, r7
 8018710:	f7f9 f934 	bl	801197c <ucdr_serialize_uint16_t>
 8018714:	b2ed      	uxtb	r5, r5
 8018716:	4025      	ands	r5, r4
 8018718:	ea08 0505 	and.w	r5, r8, r5
 801871c:	ea00 0405 	and.w	r4, r0, r5
 8018720:	4620      	mov	r0, r4
 8018722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018726:	bf00      	nop

08018728 <uxr_serialize_CREATE_CLIENT_Payload>:
 8018728:	f7ff ba16 	b.w	8017b58 <uxr_serialize_CLIENT_Representation>

0801872c <uxr_serialize_CREATE_Payload>:
 801872c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801872e:	2202      	movs	r2, #2
 8018730:	4607      	mov	r7, r0
 8018732:	460e      	mov	r6, r1
 8018734:	f004 ffec 	bl	801d710 <ucdr_serialize_array_uint8_t>
 8018738:	2202      	movs	r2, #2
 801873a:	18b1      	adds	r1, r6, r2
 801873c:	4605      	mov	r5, r0
 801873e:	4638      	mov	r0, r7
 8018740:	f004 ffe6 	bl	801d710 <ucdr_serialize_array_uint8_t>
 8018744:	7931      	ldrb	r1, [r6, #4]
 8018746:	4604      	mov	r4, r0
 8018748:	4638      	mov	r0, r7
 801874a:	f7f9 f8eb 	bl	8011924 <ucdr_serialize_uint8_t>
 801874e:	b170      	cbz	r0, 801876e <uxr_serialize_CREATE_Payload+0x42>
 8018750:	7933      	ldrb	r3, [r6, #4]
 8018752:	402c      	ands	r4, r5
 8018754:	3b01      	subs	r3, #1
 8018756:	b2e4      	uxtb	r4, r4
 8018758:	2b0d      	cmp	r3, #13
 801875a:	d809      	bhi.n	8018770 <uxr_serialize_CREATE_Payload+0x44>
 801875c:	e8df f003 	tbb	[pc, r3]
 8018760:	23230a4c 	.word	0x23230a4c
 8018764:	0a0a0a0a 	.word	0x0a0a0a0a
 8018768:	12121208 	.word	0x12121208
 801876c:	3e45      	.short	0x3e45
 801876e:	2400      	movs	r4, #0
 8018770:	4620      	mov	r0, r4
 8018772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018774:	f106 0108 	add.w	r1, r6, #8
 8018778:	4638      	mov	r0, r7
 801877a:	f7ff faf3 	bl	8017d64 <uxr_serialize_DATAWRITER_Representation>
 801877e:	4004      	ands	r4, r0
 8018780:	4620      	mov	r0, r4
 8018782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018784:	7a31      	ldrb	r1, [r6, #8]
 8018786:	4638      	mov	r0, r7
 8018788:	f7f9 f8cc 	bl	8011924 <ucdr_serialize_uint8_t>
 801878c:	2800      	cmp	r0, #0
 801878e:	d0ee      	beq.n	801876e <uxr_serialize_CREATE_Payload+0x42>
 8018790:	7a33      	ldrb	r3, [r6, #8]
 8018792:	2b01      	cmp	r3, #1
 8018794:	d001      	beq.n	801879a <uxr_serialize_CREATE_Payload+0x6e>
 8018796:	2b02      	cmp	r3, #2
 8018798:	d1ea      	bne.n	8018770 <uxr_serialize_CREATE_Payload+0x44>
 801879a:	68f1      	ldr	r1, [r6, #12]
 801879c:	4638      	mov	r0, r7
 801879e:	f005 f929 	bl	801d9f4 <ucdr_serialize_string>
 80187a2:	4004      	ands	r4, r0
 80187a4:	e7e4      	b.n	8018770 <uxr_serialize_CREATE_Payload+0x44>
 80187a6:	7a31      	ldrb	r1, [r6, #8]
 80187a8:	4638      	mov	r0, r7
 80187aa:	f7f9 f8bb 	bl	8011924 <ucdr_serialize_uint8_t>
 80187ae:	4605      	mov	r5, r0
 80187b0:	b158      	cbz	r0, 80187ca <uxr_serialize_CREATE_Payload+0x9e>
 80187b2:	7a33      	ldrb	r3, [r6, #8]
 80187b4:	2b02      	cmp	r3, #2
 80187b6:	d034      	beq.n	8018822 <uxr_serialize_CREATE_Payload+0xf6>
 80187b8:	2b03      	cmp	r3, #3
 80187ba:	d106      	bne.n	80187ca <uxr_serialize_CREATE_Payload+0x9e>
 80187bc:	68f2      	ldr	r2, [r6, #12]
 80187be:	f106 0110 	add.w	r1, r6, #16
 80187c2:	4638      	mov	r0, r7
 80187c4:	f7fd fb14 	bl	8015df0 <ucdr_serialize_sequence_uint8_t>
 80187c8:	4605      	mov	r5, r0
 80187ca:	2202      	movs	r2, #2
 80187cc:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 80187d0:	4638      	mov	r0, r7
 80187d2:	f004 ff9d 	bl	801d710 <ucdr_serialize_array_uint8_t>
 80187d6:	4028      	ands	r0, r5
 80187d8:	4004      	ands	r4, r0
 80187da:	e7c9      	b.n	8018770 <uxr_serialize_CREATE_Payload+0x44>
 80187dc:	f106 0108 	add.w	r1, r6, #8
 80187e0:	4638      	mov	r0, r7
 80187e2:	f7ff f9b9 	bl	8017b58 <uxr_serialize_CLIENT_Representation>
 80187e6:	4004      	ands	r4, r0
 80187e8:	e7c2      	b.n	8018770 <uxr_serialize_CREATE_Payload+0x44>
 80187ea:	f106 0108 	add.w	r1, r6, #8
 80187ee:	4638      	mov	r0, r7
 80187f0:	f7ff fa6e 	bl	8017cd0 <uxr_serialize_AGENT_Representation>
 80187f4:	4004      	ands	r4, r0
 80187f6:	e7bb      	b.n	8018770 <uxr_serialize_CREATE_Payload+0x44>
 80187f8:	7a31      	ldrb	r1, [r6, #8]
 80187fa:	4638      	mov	r0, r7
 80187fc:	f7f9 f892 	bl	8011924 <ucdr_serialize_uint8_t>
 8018800:	4605      	mov	r5, r0
 8018802:	b130      	cbz	r0, 8018812 <uxr_serialize_CREATE_Payload+0xe6>
 8018804:	7a33      	ldrb	r3, [r6, #8]
 8018806:	2b02      	cmp	r3, #2
 8018808:	d011      	beq.n	801882e <uxr_serialize_CREATE_Payload+0x102>
 801880a:	2b03      	cmp	r3, #3
 801880c:	d015      	beq.n	801883a <uxr_serialize_CREATE_Payload+0x10e>
 801880e:	2b01      	cmp	r3, #1
 8018810:	d00d      	beq.n	801882e <uxr_serialize_CREATE_Payload+0x102>
 8018812:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8018816:	4638      	mov	r0, r7
 8018818:	f7f9 fdc0 	bl	801239c <ucdr_serialize_int16_t>
 801881c:	4028      	ands	r0, r5
 801881e:	4004      	ands	r4, r0
 8018820:	e7a6      	b.n	8018770 <uxr_serialize_CREATE_Payload+0x44>
 8018822:	68f1      	ldr	r1, [r6, #12]
 8018824:	4638      	mov	r0, r7
 8018826:	f005 f8e5 	bl	801d9f4 <ucdr_serialize_string>
 801882a:	4605      	mov	r5, r0
 801882c:	e7cd      	b.n	80187ca <uxr_serialize_CREATE_Payload+0x9e>
 801882e:	68f1      	ldr	r1, [r6, #12]
 8018830:	4638      	mov	r0, r7
 8018832:	f005 f8df 	bl	801d9f4 <ucdr_serialize_string>
 8018836:	4605      	mov	r5, r0
 8018838:	e7eb      	b.n	8018812 <uxr_serialize_CREATE_Payload+0xe6>
 801883a:	68f2      	ldr	r2, [r6, #12]
 801883c:	f106 0110 	add.w	r1, r6, #16
 8018840:	4638      	mov	r0, r7
 8018842:	f7fd fad5 	bl	8015df0 <ucdr_serialize_sequence_uint8_t>
 8018846:	4605      	mov	r5, r0
 8018848:	e7e3      	b.n	8018812 <uxr_serialize_CREATE_Payload+0xe6>
 801884a:	bf00      	nop

0801884c <uxr_deserialize_GET_INFO_Payload>:
 801884c:	b570      	push	{r4, r5, r6, lr}
 801884e:	2202      	movs	r2, #2
 8018850:	4605      	mov	r5, r0
 8018852:	460e      	mov	r6, r1
 8018854:	f004 ffc0 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 8018858:	2202      	movs	r2, #2
 801885a:	18b1      	adds	r1, r6, r2
 801885c:	4604      	mov	r4, r0
 801885e:	4628      	mov	r0, r5
 8018860:	f004 ffba 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 8018864:	1d31      	adds	r1, r6, #4
 8018866:	4004      	ands	r4, r0
 8018868:	4628      	mov	r0, r5
 801886a:	f7f9 fba1 	bl	8011fb0 <ucdr_deserialize_uint32_t>
 801886e:	b2e4      	uxtb	r4, r4
 8018870:	4020      	ands	r0, r4
 8018872:	bd70      	pop	{r4, r5, r6, pc}

08018874 <uxr_serialize_DELETE_Payload>:
 8018874:	b570      	push	{r4, r5, r6, lr}
 8018876:	2202      	movs	r2, #2
 8018878:	4605      	mov	r5, r0
 801887a:	460e      	mov	r6, r1
 801887c:	f004 ff48 	bl	801d710 <ucdr_serialize_array_uint8_t>
 8018880:	2202      	movs	r2, #2
 8018882:	4604      	mov	r4, r0
 8018884:	18b1      	adds	r1, r6, r2
 8018886:	4628      	mov	r0, r5
 8018888:	f004 ff42 	bl	801d710 <ucdr_serialize_array_uint8_t>
 801888c:	4020      	ands	r0, r4
 801888e:	b2c0      	uxtb	r0, r0
 8018890:	bd70      	pop	{r4, r5, r6, pc}
 8018892:	bf00      	nop

08018894 <uxr_deserialize_STATUS_AGENT_Payload>:
 8018894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018898:	4605      	mov	r5, r0
 801889a:	460e      	mov	r6, r1
 801889c:	f7f9 f858 	bl	8011950 <ucdr_deserialize_uint8_t>
 80188a0:	1c71      	adds	r1, r6, #1
 80188a2:	4604      	mov	r4, r0
 80188a4:	4628      	mov	r0, r5
 80188a6:	f7f9 f853 	bl	8011950 <ucdr_deserialize_uint8_t>
 80188aa:	2204      	movs	r2, #4
 80188ac:	18b1      	adds	r1, r6, r2
 80188ae:	4680      	mov	r8, r0
 80188b0:	4628      	mov	r0, r5
 80188b2:	f004 ff91 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 80188b6:	f106 0108 	add.w	r1, r6, #8
 80188ba:	4607      	mov	r7, r0
 80188bc:	2202      	movs	r2, #2
 80188be:	4628      	mov	r0, r5
 80188c0:	f004 ff8a 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 80188c4:	ea04 0308 	and.w	r3, r4, r8
 80188c8:	b2db      	uxtb	r3, r3
 80188ca:	ea03 0407 	and.w	r4, r3, r7
 80188ce:	2202      	movs	r2, #2
 80188d0:	4607      	mov	r7, r0
 80188d2:	f106 010a 	add.w	r1, r6, #10
 80188d6:	4628      	mov	r0, r5
 80188d8:	f004 ff7e 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 80188dc:	f106 010c 	add.w	r1, r6, #12
 80188e0:	4603      	mov	r3, r0
 80188e2:	4628      	mov	r0, r5
 80188e4:	461d      	mov	r5, r3
 80188e6:	f7f9 f805 	bl	80118f4 <ucdr_deserialize_bool>
 80188ea:	403c      	ands	r4, r7
 80188ec:	4025      	ands	r5, r4
 80188ee:	4028      	ands	r0, r5
 80188f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080188f4 <uxr_deserialize_STATUS_Payload>:
 80188f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188f8:	2202      	movs	r2, #2
 80188fa:	4606      	mov	r6, r0
 80188fc:	460f      	mov	r7, r1
 80188fe:	f004 ff6b 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 8018902:	2202      	movs	r2, #2
 8018904:	18b9      	adds	r1, r7, r2
 8018906:	4605      	mov	r5, r0
 8018908:	4630      	mov	r0, r6
 801890a:	f004 ff65 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 801890e:	1d39      	adds	r1, r7, #4
 8018910:	4680      	mov	r8, r0
 8018912:	4630      	mov	r0, r6
 8018914:	f7f9 f81c 	bl	8011950 <ucdr_deserialize_uint8_t>
 8018918:	1d79      	adds	r1, r7, #5
 801891a:	4604      	mov	r4, r0
 801891c:	4630      	mov	r0, r6
 801891e:	f7f9 f817 	bl	8011950 <ucdr_deserialize_uint8_t>
 8018922:	ea05 0508 	and.w	r5, r5, r8
 8018926:	402c      	ands	r4, r5
 8018928:	4020      	ands	r0, r4
 801892a:	b2c0      	uxtb	r0, r0
 801892c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018930 <uxr_serialize_INFO_Payload>:
 8018930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018934:	2202      	movs	r2, #2
 8018936:	460c      	mov	r4, r1
 8018938:	4605      	mov	r5, r0
 801893a:	f004 fee9 	bl	801d710 <ucdr_serialize_array_uint8_t>
 801893e:	2202      	movs	r2, #2
 8018940:	18a1      	adds	r1, r4, r2
 8018942:	4680      	mov	r8, r0
 8018944:	4628      	mov	r0, r5
 8018946:	f004 fee3 	bl	801d710 <ucdr_serialize_array_uint8_t>
 801894a:	7921      	ldrb	r1, [r4, #4]
 801894c:	4607      	mov	r7, r0
 801894e:	4628      	mov	r0, r5
 8018950:	f7f8 ffe8 	bl	8011924 <ucdr_serialize_uint8_t>
 8018954:	7961      	ldrb	r1, [r4, #5]
 8018956:	4606      	mov	r6, r0
 8018958:	4628      	mov	r0, r5
 801895a:	f7f8 ffe3 	bl	8011924 <ucdr_serialize_uint8_t>
 801895e:	ea08 0807 	and.w	r8, r8, r7
 8018962:	ea06 0608 	and.w	r6, r6, r8
 8018966:	4006      	ands	r6, r0
 8018968:	7a21      	ldrb	r1, [r4, #8]
 801896a:	4628      	mov	r0, r5
 801896c:	f7f8 ffac 	bl	80118c8 <ucdr_serialize_bool>
 8018970:	7a23      	ldrb	r3, [r4, #8]
 8018972:	b2f7      	uxtb	r7, r6
 8018974:	4606      	mov	r6, r0
 8018976:	b96b      	cbnz	r3, 8018994 <uxr_serialize_INFO_Payload+0x64>
 8018978:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 801897c:	4628      	mov	r0, r5
 801897e:	f7f8 ffa3 	bl	80118c8 <ucdr_serialize_bool>
 8018982:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8018986:	4030      	ands	r0, r6
 8018988:	b2c6      	uxtb	r6, r0
 801898a:	b983      	cbnz	r3, 80189ae <uxr_serialize_INFO_Payload+0x7e>
 801898c:	ea06 0007 	and.w	r0, r6, r7
 8018990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018994:	7b21      	ldrb	r1, [r4, #12]
 8018996:	4628      	mov	r0, r5
 8018998:	f7f8 ffc4 	bl	8011924 <ucdr_serialize_uint8_t>
 801899c:	b188      	cbz	r0, 80189c2 <uxr_serialize_INFO_Payload+0x92>
 801899e:	f104 010c 	add.w	r1, r4, #12
 80189a2:	4628      	mov	r0, r5
 80189a4:	f7ff fa06 	bl	8017db4 <uxr_serialize_ObjectVariant.part.0>
 80189a8:	4030      	ands	r0, r6
 80189aa:	b2c6      	uxtb	r6, r0
 80189ac:	e7e4      	b.n	8018978 <uxr_serialize_INFO_Payload+0x48>
 80189ae:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 80189b2:	4628      	mov	r0, r5
 80189b4:	f7ff fdb2 	bl	801851c <uxr_serialize_ActivityInfoVariant>
 80189b8:	4006      	ands	r6, r0
 80189ba:	ea06 0007 	and.w	r0, r6, r7
 80189be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189c2:	4606      	mov	r6, r0
 80189c4:	e7d8      	b.n	8018978 <uxr_serialize_INFO_Payload+0x48>
 80189c6:	bf00      	nop

080189c8 <uxr_serialize_READ_DATA_Payload>:
 80189c8:	b570      	push	{r4, r5, r6, lr}
 80189ca:	2202      	movs	r2, #2
 80189cc:	4605      	mov	r5, r0
 80189ce:	460e      	mov	r6, r1
 80189d0:	f004 fe9e 	bl	801d710 <ucdr_serialize_array_uint8_t>
 80189d4:	2202      	movs	r2, #2
 80189d6:	18b1      	adds	r1, r6, r2
 80189d8:	4604      	mov	r4, r0
 80189da:	4628      	mov	r0, r5
 80189dc:	f004 fe98 	bl	801d710 <ucdr_serialize_array_uint8_t>
 80189e0:	1d31      	adds	r1, r6, #4
 80189e2:	4004      	ands	r4, r0
 80189e4:	4628      	mov	r0, r5
 80189e6:	f7ff fe5d 	bl	80186a4 <uxr_serialize_ReadSpecification>
 80189ea:	b2e4      	uxtb	r4, r4
 80189ec:	4020      	ands	r0, r4
 80189ee:	bd70      	pop	{r4, r5, r6, pc}

080189f0 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80189f0:	b570      	push	{r4, r5, r6, lr}
 80189f2:	2202      	movs	r2, #2
 80189f4:	4605      	mov	r5, r0
 80189f6:	460e      	mov	r6, r1
 80189f8:	f004 fe8a 	bl	801d710 <ucdr_serialize_array_uint8_t>
 80189fc:	2202      	movs	r2, #2
 80189fe:	4604      	mov	r4, r0
 8018a00:	18b1      	adds	r1, r6, r2
 8018a02:	4628      	mov	r0, r5
 8018a04:	f004 fe84 	bl	801d710 <ucdr_serialize_array_uint8_t>
 8018a08:	4020      	ands	r0, r4
 8018a0a:	b2c0      	uxtb	r0, r0
 8018a0c:	bd70      	pop	{r4, r5, r6, pc}
 8018a0e:	bf00      	nop

08018a10 <uxr_serialize_ACKNACK_Payload>:
 8018a10:	b570      	push	{r4, r5, r6, lr}
 8018a12:	460c      	mov	r4, r1
 8018a14:	460e      	mov	r6, r1
 8018a16:	f834 1b02 	ldrh.w	r1, [r4], #2
 8018a1a:	4605      	mov	r5, r0
 8018a1c:	f7f8 ffae 	bl	801197c <ucdr_serialize_uint16_t>
 8018a20:	2202      	movs	r2, #2
 8018a22:	4621      	mov	r1, r4
 8018a24:	4604      	mov	r4, r0
 8018a26:	4628      	mov	r0, r5
 8018a28:	f004 fe72 	bl	801d710 <ucdr_serialize_array_uint8_t>
 8018a2c:	7931      	ldrb	r1, [r6, #4]
 8018a2e:	4004      	ands	r4, r0
 8018a30:	4628      	mov	r0, r5
 8018a32:	f7f8 ff77 	bl	8011924 <ucdr_serialize_uint8_t>
 8018a36:	b2e4      	uxtb	r4, r4
 8018a38:	4020      	ands	r0, r4
 8018a3a:	bd70      	pop	{r4, r5, r6, pc}

08018a3c <uxr_deserialize_ACKNACK_Payload>:
 8018a3c:	b570      	push	{r4, r5, r6, lr}
 8018a3e:	4605      	mov	r5, r0
 8018a40:	460e      	mov	r6, r1
 8018a42:	f7f9 f89b 	bl	8011b7c <ucdr_deserialize_uint16_t>
 8018a46:	2202      	movs	r2, #2
 8018a48:	18b1      	adds	r1, r6, r2
 8018a4a:	4604      	mov	r4, r0
 8018a4c:	4628      	mov	r0, r5
 8018a4e:	f004 fec3 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 8018a52:	1d31      	adds	r1, r6, #4
 8018a54:	4004      	ands	r4, r0
 8018a56:	4628      	mov	r0, r5
 8018a58:	f7f8 ff7a 	bl	8011950 <ucdr_deserialize_uint8_t>
 8018a5c:	b2e4      	uxtb	r4, r4
 8018a5e:	4020      	ands	r0, r4
 8018a60:	bd70      	pop	{r4, r5, r6, pc}
 8018a62:	bf00      	nop

08018a64 <uxr_serialize_HEARTBEAT_Payload>:
 8018a64:	b570      	push	{r4, r5, r6, lr}
 8018a66:	460d      	mov	r5, r1
 8018a68:	8809      	ldrh	r1, [r1, #0]
 8018a6a:	4606      	mov	r6, r0
 8018a6c:	f7f8 ff86 	bl	801197c <ucdr_serialize_uint16_t>
 8018a70:	8869      	ldrh	r1, [r5, #2]
 8018a72:	4604      	mov	r4, r0
 8018a74:	4630      	mov	r0, r6
 8018a76:	f7f8 ff81 	bl	801197c <ucdr_serialize_uint16_t>
 8018a7a:	7929      	ldrb	r1, [r5, #4]
 8018a7c:	4004      	ands	r4, r0
 8018a7e:	4630      	mov	r0, r6
 8018a80:	f7f8 ff50 	bl	8011924 <ucdr_serialize_uint8_t>
 8018a84:	b2e4      	uxtb	r4, r4
 8018a86:	4020      	ands	r0, r4
 8018a88:	bd70      	pop	{r4, r5, r6, pc}
 8018a8a:	bf00      	nop

08018a8c <uxr_deserialize_HEARTBEAT_Payload>:
 8018a8c:	b570      	push	{r4, r5, r6, lr}
 8018a8e:	4605      	mov	r5, r0
 8018a90:	460e      	mov	r6, r1
 8018a92:	f7f9 f873 	bl	8011b7c <ucdr_deserialize_uint16_t>
 8018a96:	1cb1      	adds	r1, r6, #2
 8018a98:	4604      	mov	r4, r0
 8018a9a:	4628      	mov	r0, r5
 8018a9c:	f7f9 f86e 	bl	8011b7c <ucdr_deserialize_uint16_t>
 8018aa0:	1d31      	adds	r1, r6, #4
 8018aa2:	4004      	ands	r4, r0
 8018aa4:	4628      	mov	r0, r5
 8018aa6:	f7f8 ff53 	bl	8011950 <ucdr_deserialize_uint8_t>
 8018aaa:	b2e4      	uxtb	r4, r4
 8018aac:	4020      	ands	r0, r4
 8018aae:	bd70      	pop	{r4, r5, r6, pc}

08018ab0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8018ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ab4:	4605      	mov	r5, r0
 8018ab6:	460e      	mov	r6, r1
 8018ab8:	f7f9 fdfc 	bl	80126b4 <ucdr_deserialize_int32_t>
 8018abc:	1d31      	adds	r1, r6, #4
 8018abe:	4607      	mov	r7, r0
 8018ac0:	4628      	mov	r0, r5
 8018ac2:	f7f9 fa75 	bl	8011fb0 <ucdr_deserialize_uint32_t>
 8018ac6:	f106 0108 	add.w	r1, r6, #8
 8018aca:	4680      	mov	r8, r0
 8018acc:	4628      	mov	r0, r5
 8018ace:	f7f9 fdf1 	bl	80126b4 <ucdr_deserialize_int32_t>
 8018ad2:	f106 010c 	add.w	r1, r6, #12
 8018ad6:	4604      	mov	r4, r0
 8018ad8:	4628      	mov	r0, r5
 8018ada:	f7f9 fa69 	bl	8011fb0 <ucdr_deserialize_uint32_t>
 8018ade:	ea07 0708 	and.w	r7, r7, r8
 8018ae2:	403c      	ands	r4, r7
 8018ae4:	f106 0110 	add.w	r1, r6, #16
 8018ae8:	4004      	ands	r4, r0
 8018aea:	4628      	mov	r0, r5
 8018aec:	f7f9 fde2 	bl	80126b4 <ucdr_deserialize_int32_t>
 8018af0:	f106 0114 	add.w	r1, r6, #20
 8018af4:	4607      	mov	r7, r0
 8018af6:	4628      	mov	r0, r5
 8018af8:	f7f9 fa5a 	bl	8011fb0 <ucdr_deserialize_uint32_t>
 8018afc:	b2e4      	uxtb	r4, r4
 8018afe:	403c      	ands	r4, r7
 8018b00:	4020      	ands	r0, r4
 8018b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b06:	bf00      	nop

08018b08 <uxr_serialize_SampleIdentity>:
 8018b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b0c:	220c      	movs	r2, #12
 8018b0e:	4604      	mov	r4, r0
 8018b10:	460d      	mov	r5, r1
 8018b12:	f004 fdfd 	bl	801d710 <ucdr_serialize_array_uint8_t>
 8018b16:	2203      	movs	r2, #3
 8018b18:	f105 010c 	add.w	r1, r5, #12
 8018b1c:	4607      	mov	r7, r0
 8018b1e:	4620      	mov	r0, r4
 8018b20:	f004 fdf6 	bl	801d710 <ucdr_serialize_array_uint8_t>
 8018b24:	7be9      	ldrb	r1, [r5, #15]
 8018b26:	4680      	mov	r8, r0
 8018b28:	4620      	mov	r0, r4
 8018b2a:	f7f8 fefb 	bl	8011924 <ucdr_serialize_uint8_t>
 8018b2e:	6929      	ldr	r1, [r5, #16]
 8018b30:	4606      	mov	r6, r0
 8018b32:	4620      	mov	r0, r4
 8018b34:	f7f9 fd26 	bl	8012584 <ucdr_serialize_int32_t>
 8018b38:	6969      	ldr	r1, [r5, #20]
 8018b3a:	4603      	mov	r3, r0
 8018b3c:	4620      	mov	r0, r4
 8018b3e:	ea07 0708 	and.w	r7, r7, r8
 8018b42:	461c      	mov	r4, r3
 8018b44:	f7f9 f904 	bl	8011d50 <ucdr_serialize_uint32_t>
 8018b48:	403e      	ands	r6, r7
 8018b4a:	4034      	ands	r4, r6
 8018b4c:	4020      	ands	r0, r4
 8018b4e:	b2c0      	uxtb	r0, r0
 8018b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018b54 <uxr_deserialize_SampleIdentity>:
 8018b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b58:	220c      	movs	r2, #12
 8018b5a:	4604      	mov	r4, r0
 8018b5c:	460d      	mov	r5, r1
 8018b5e:	f004 fe3b 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 8018b62:	2203      	movs	r2, #3
 8018b64:	f105 010c 	add.w	r1, r5, #12
 8018b68:	4607      	mov	r7, r0
 8018b6a:	4620      	mov	r0, r4
 8018b6c:	f004 fe34 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 8018b70:	f105 010f 	add.w	r1, r5, #15
 8018b74:	4680      	mov	r8, r0
 8018b76:	4620      	mov	r0, r4
 8018b78:	f7f8 feea 	bl	8011950 <ucdr_deserialize_uint8_t>
 8018b7c:	f105 0110 	add.w	r1, r5, #16
 8018b80:	4606      	mov	r6, r0
 8018b82:	4620      	mov	r0, r4
 8018b84:	f7f9 fd96 	bl	80126b4 <ucdr_deserialize_int32_t>
 8018b88:	f105 0114 	add.w	r1, r5, #20
 8018b8c:	4603      	mov	r3, r0
 8018b8e:	4620      	mov	r0, r4
 8018b90:	ea07 0708 	and.w	r7, r7, r8
 8018b94:	461c      	mov	r4, r3
 8018b96:	f7f9 fa0b 	bl	8011fb0 <ucdr_deserialize_uint32_t>
 8018b9a:	403e      	ands	r6, r7
 8018b9c:	4034      	ands	r4, r6
 8018b9e:	4020      	ands	r0, r4
 8018ba0:	b2c0      	uxtb	r0, r0
 8018ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ba6:	bf00      	nop

08018ba8 <rcl_client_get_rmw_handle>:
 8018ba8:	b118      	cbz	r0, 8018bb2 <rcl_client_get_rmw_handle+0xa>
 8018baa:	6800      	ldr	r0, [r0, #0]
 8018bac:	b108      	cbz	r0, 8018bb2 <rcl_client_get_rmw_handle+0xa>
 8018bae:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8018bb2:	4770      	bx	lr

08018bb4 <rcl_send_request>:
 8018bb4:	b570      	push	{r4, r5, r6, lr}
 8018bb6:	b082      	sub	sp, #8
 8018bb8:	b1e8      	cbz	r0, 8018bf6 <rcl_send_request+0x42>
 8018bba:	4604      	mov	r4, r0
 8018bbc:	6800      	ldr	r0, [r0, #0]
 8018bbe:	b1d0      	cbz	r0, 8018bf6 <rcl_send_request+0x42>
 8018bc0:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8018bc4:	b1bb      	cbz	r3, 8018bf6 <rcl_send_request+0x42>
 8018bc6:	460e      	mov	r6, r1
 8018bc8:	b1d1      	cbz	r1, 8018c00 <rcl_send_request+0x4c>
 8018bca:	4615      	mov	r5, r2
 8018bcc:	b1c2      	cbz	r2, 8018c00 <rcl_send_request+0x4c>
 8018bce:	2105      	movs	r1, #5
 8018bd0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8018bd4:	f002 fd6c 	bl	801b6b0 <__atomic_load_8>
 8018bd8:	6823      	ldr	r3, [r4, #0]
 8018bda:	e9c5 0100 	strd	r0, r1, [r5]
 8018bde:	462a      	mov	r2, r5
 8018be0:	4631      	mov	r1, r6
 8018be2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8018be6:	f003 ff29 	bl	801ca3c <rmw_send_request>
 8018bea:	4606      	mov	r6, r0
 8018bec:	b160      	cbz	r0, 8018c08 <rcl_send_request+0x54>
 8018bee:	2601      	movs	r6, #1
 8018bf0:	4630      	mov	r0, r6
 8018bf2:	b002      	add	sp, #8
 8018bf4:	bd70      	pop	{r4, r5, r6, pc}
 8018bf6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8018bfa:	4630      	mov	r0, r6
 8018bfc:	b002      	add	sp, #8
 8018bfe:	bd70      	pop	{r4, r5, r6, pc}
 8018c00:	260b      	movs	r6, #11
 8018c02:	4630      	mov	r0, r6
 8018c04:	b002      	add	sp, #8
 8018c06:	bd70      	pop	{r4, r5, r6, pc}
 8018c08:	6820      	ldr	r0, [r4, #0]
 8018c0a:	2105      	movs	r1, #5
 8018c0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018c10:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8018c14:	9100      	str	r1, [sp, #0]
 8018c16:	f002 fdb7 	bl	801b788 <__atomic_exchange_8>
 8018c1a:	4630      	mov	r0, r6
 8018c1c:	b002      	add	sp, #8
 8018c1e:	bd70      	pop	{r4, r5, r6, pc}

08018c20 <rcl_take_response>:
 8018c20:	b570      	push	{r4, r5, r6, lr}
 8018c22:	468e      	mov	lr, r1
 8018c24:	460c      	mov	r4, r1
 8018c26:	4616      	mov	r6, r2
 8018c28:	4605      	mov	r5, r0
 8018c2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018c2e:	b08c      	sub	sp, #48	@ 0x30
 8018c30:	f10d 0c18 	add.w	ip, sp, #24
 8018c34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018c38:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8018c3c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018c40:	b35d      	cbz	r5, 8018c9a <rcl_take_response+0x7a>
 8018c42:	682b      	ldr	r3, [r5, #0]
 8018c44:	b34b      	cbz	r3, 8018c9a <rcl_take_response+0x7a>
 8018c46:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8018c4a:	b330      	cbz	r0, 8018c9a <rcl_take_response+0x7a>
 8018c4c:	b346      	cbz	r6, 8018ca0 <rcl_take_response+0x80>
 8018c4e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8018ca8 <rcl_take_response+0x88>
 8018c52:	2300      	movs	r3, #0
 8018c54:	f88d 3007 	strb.w	r3, [sp, #7]
 8018c58:	4632      	mov	r2, r6
 8018c5a:	f10d 0307 	add.w	r3, sp, #7
 8018c5e:	a902      	add	r1, sp, #8
 8018c60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018c64:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018c68:	f003 fff0 	bl	801cc4c <rmw_take_response>
 8018c6c:	4605      	mov	r5, r0
 8018c6e:	b9c8      	cbnz	r0, 8018ca4 <rcl_take_response+0x84>
 8018c70:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8018c74:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8018c78:	2a00      	cmp	r2, #0
 8018c7a:	bf08      	it	eq
 8018c7c:	461d      	moveq	r5, r3
 8018c7e:	f10d 0e18 	add.w	lr, sp, #24
 8018c82:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018c86:	46a4      	mov	ip, r4
 8018c88:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018c8c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8018c90:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018c94:	4628      	mov	r0, r5
 8018c96:	b00c      	add	sp, #48	@ 0x30
 8018c98:	bd70      	pop	{r4, r5, r6, pc}
 8018c9a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8018c9e:	e7ee      	b.n	8018c7e <rcl_take_response+0x5e>
 8018ca0:	250b      	movs	r5, #11
 8018ca2:	e7ec      	b.n	8018c7e <rcl_take_response+0x5e>
 8018ca4:	2501      	movs	r5, #1
 8018ca6:	e7ea      	b.n	8018c7e <rcl_take_response+0x5e>
	...

08018cb0 <rcl_client_is_valid>:
 8018cb0:	b130      	cbz	r0, 8018cc0 <rcl_client_is_valid+0x10>
 8018cb2:	6800      	ldr	r0, [r0, #0]
 8018cb4:	b120      	cbz	r0, 8018cc0 <rcl_client_is_valid+0x10>
 8018cb6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8018cba:	3800      	subs	r0, #0
 8018cbc:	bf18      	it	ne
 8018cbe:	2001      	movne	r0, #1
 8018cc0:	4770      	bx	lr
 8018cc2:	bf00      	nop

08018cc4 <rcl_convert_rmw_ret_to_rcl_ret>:
 8018cc4:	280b      	cmp	r0, #11
 8018cc6:	dc0d      	bgt.n	8018ce4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8018cc8:	2800      	cmp	r0, #0
 8018cca:	db09      	blt.n	8018ce0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8018ccc:	280b      	cmp	r0, #11
 8018cce:	d807      	bhi.n	8018ce0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8018cd0:	e8df f000 	tbb	[pc, r0]
 8018cd4:	07060607 	.word	0x07060607
 8018cd8:	06060606 	.word	0x06060606
 8018cdc:	07070606 	.word	0x07070606
 8018ce0:	2001      	movs	r0, #1
 8018ce2:	4770      	bx	lr
 8018ce4:	28cb      	cmp	r0, #203	@ 0xcb
 8018ce6:	bf18      	it	ne
 8018ce8:	2001      	movne	r0, #1
 8018cea:	4770      	bx	lr

08018cec <rcl_get_zero_initialized_context>:
 8018cec:	4a03      	ldr	r2, [pc, #12]	@ (8018cfc <rcl_get_zero_initialized_context+0x10>)
 8018cee:	4603      	mov	r3, r0
 8018cf0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018cf4:	e883 0003 	stmia.w	r3, {r0, r1}
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	4770      	bx	lr
 8018cfc:	0802217c 	.word	0x0802217c

08018d00 <rcl_context_is_valid>:
 8018d00:	b118      	cbz	r0, 8018d0a <rcl_context_is_valid+0xa>
 8018d02:	6840      	ldr	r0, [r0, #4]
 8018d04:	3800      	subs	r0, #0
 8018d06:	bf18      	it	ne
 8018d08:	2001      	movne	r0, #1
 8018d0a:	4770      	bx	lr

08018d0c <__cleanup_context>:
 8018d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018d10:	4606      	mov	r6, r0
 8018d12:	6800      	ldr	r0, [r0, #0]
 8018d14:	2300      	movs	r3, #0
 8018d16:	6073      	str	r3, [r6, #4]
 8018d18:	2800      	cmp	r0, #0
 8018d1a:	d049      	beq.n	8018db0 <__cleanup_context+0xa4>
 8018d1c:	6947      	ldr	r7, [r0, #20]
 8018d1e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8018d22:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8018d26:	b137      	cbz	r7, 8018d36 <__cleanup_context+0x2a>
 8018d28:	3014      	adds	r0, #20
 8018d2a:	f000 f9bb 	bl	80190a4 <rcl_init_options_fini>
 8018d2e:	4607      	mov	r7, r0
 8018d30:	2800      	cmp	r0, #0
 8018d32:	d144      	bne.n	8018dbe <__cleanup_context+0xb2>
 8018d34:	6830      	ldr	r0, [r6, #0]
 8018d36:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8018d38:	b143      	cbz	r3, 8018d4c <__cleanup_context+0x40>
 8018d3a:	3028      	adds	r0, #40	@ 0x28
 8018d3c:	f003 fcb4 	bl	801c6a8 <rmw_context_fini>
 8018d40:	b118      	cbz	r0, 8018d4a <__cleanup_context+0x3e>
 8018d42:	2f00      	cmp	r7, #0
 8018d44:	d03e      	beq.n	8018dc4 <__cleanup_context+0xb8>
 8018d46:	f7fb fc03 	bl	8014550 <rcutils_reset_error>
 8018d4a:	6830      	ldr	r0, [r6, #0]
 8018d4c:	6a03      	ldr	r3, [r0, #32]
 8018d4e:	b1db      	cbz	r3, 8018d88 <__cleanup_context+0x7c>
 8018d50:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8018d54:	2a01      	cmp	r2, #1
 8018d56:	f17c 0100 	sbcs.w	r1, ip, #0
 8018d5a:	db11      	blt.n	8018d80 <__cleanup_context+0x74>
 8018d5c:	2400      	movs	r4, #0
 8018d5e:	4625      	mov	r5, r4
 8018d60:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018d64:	4649      	mov	r1, r9
 8018d66:	b1b8      	cbz	r0, 8018d98 <__cleanup_context+0x8c>
 8018d68:	47c0      	blx	r8
 8018d6a:	6833      	ldr	r3, [r6, #0]
 8018d6c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8018d70:	3401      	adds	r4, #1
 8018d72:	f145 0500 	adc.w	r5, r5, #0
 8018d76:	4294      	cmp	r4, r2
 8018d78:	eb75 010c 	sbcs.w	r1, r5, ip
 8018d7c:	6a1b      	ldr	r3, [r3, #32]
 8018d7e:	dbef      	blt.n	8018d60 <__cleanup_context+0x54>
 8018d80:	4618      	mov	r0, r3
 8018d82:	4649      	mov	r1, r9
 8018d84:	47c0      	blx	r8
 8018d86:	6830      	ldr	r0, [r6, #0]
 8018d88:	4649      	mov	r1, r9
 8018d8a:	47c0      	blx	r8
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	e9c6 3300 	strd	r3, r3, [r6]
 8018d92:	4638      	mov	r0, r7
 8018d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d98:	3401      	adds	r4, #1
 8018d9a:	f145 0500 	adc.w	r5, r5, #0
 8018d9e:	4294      	cmp	r4, r2
 8018da0:	eb75 010c 	sbcs.w	r1, r5, ip
 8018da4:	dbdc      	blt.n	8018d60 <__cleanup_context+0x54>
 8018da6:	4618      	mov	r0, r3
 8018da8:	4649      	mov	r1, r9
 8018daa:	47c0      	blx	r8
 8018dac:	6830      	ldr	r0, [r6, #0]
 8018dae:	e7eb      	b.n	8018d88 <__cleanup_context+0x7c>
 8018db0:	4607      	mov	r7, r0
 8018db2:	2300      	movs	r3, #0
 8018db4:	e9c6 3300 	strd	r3, r3, [r6]
 8018db8:	4638      	mov	r0, r7
 8018dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018dbe:	f7fb fbc7 	bl	8014550 <rcutils_reset_error>
 8018dc2:	e7b7      	b.n	8018d34 <__cleanup_context+0x28>
 8018dc4:	f7ff ff7e 	bl	8018cc4 <rcl_convert_rmw_ret_to_rcl_ret>
 8018dc8:	4607      	mov	r7, r0
 8018dca:	e7bc      	b.n	8018d46 <__cleanup_context+0x3a>

08018dcc <rcl_init>:
 8018dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018dd0:	1e05      	subs	r5, r0, #0
 8018dd2:	b09e      	sub	sp, #120	@ 0x78
 8018dd4:	460e      	mov	r6, r1
 8018dd6:	4690      	mov	r8, r2
 8018dd8:	461f      	mov	r7, r3
 8018dda:	f340 809c 	ble.w	8018f16 <rcl_init+0x14a>
 8018dde:	2900      	cmp	r1, #0
 8018de0:	f000 809c 	beq.w	8018f1c <rcl_init+0x150>
 8018de4:	f1a1 0e04 	sub.w	lr, r1, #4
 8018de8:	f04f 0c00 	mov.w	ip, #0
 8018dec:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8018df0:	f10c 0c01 	add.w	ip, ip, #1
 8018df4:	2c00      	cmp	r4, #0
 8018df6:	f000 8091 	beq.w	8018f1c <rcl_init+0x150>
 8018dfa:	4565      	cmp	r5, ip
 8018dfc:	d1f6      	bne.n	8018dec <rcl_init+0x20>
 8018dfe:	f1b8 0f00 	cmp.w	r8, #0
 8018e02:	f000 808b 	beq.w	8018f1c <rcl_init+0x150>
 8018e06:	f8d8 4000 	ldr.w	r4, [r8]
 8018e0a:	2c00      	cmp	r4, #0
 8018e0c:	f000 8086 	beq.w	8018f1c <rcl_init+0x150>
 8018e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018e12:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8018e16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018e1a:	6823      	ldr	r3, [r4, #0]
 8018e1c:	f8cc 3000 	str.w	r3, [ip]
 8018e20:	a819      	add	r0, sp, #100	@ 0x64
 8018e22:	f7fb fb71 	bl	8014508 <rcutils_allocator_is_valid>
 8018e26:	2800      	cmp	r0, #0
 8018e28:	d078      	beq.n	8018f1c <rcl_init+0x150>
 8018e2a:	2f00      	cmp	r7, #0
 8018e2c:	d076      	beq.n	8018f1c <rcl_init+0x150>
 8018e2e:	683b      	ldr	r3, [r7, #0]
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d178      	bne.n	8018f26 <rcl_init+0x15a>
 8018e34:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8018e38:	2178      	movs	r1, #120	@ 0x78
 8018e3a:	2001      	movs	r0, #1
 8018e3c:	4798      	blx	r3
 8018e3e:	4604      	mov	r4, r0
 8018e40:	6038      	str	r0, [r7, #0]
 8018e42:	2800      	cmp	r0, #0
 8018e44:	f000 80b6 	beq.w	8018fb4 <rcl_init+0x1e8>
 8018e48:	a802      	add	r0, sp, #8
 8018e4a:	f002 ff81 	bl	801bd50 <rmw_get_zero_initialized_context>
 8018e4e:	a902      	add	r1, sp, #8
 8018e50:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8018e54:	2250      	movs	r2, #80	@ 0x50
 8018e56:	ac19      	add	r4, sp, #100	@ 0x64
 8018e58:	f007 fc79 	bl	802074e <memcpy>
 8018e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018e5e:	f8d7 e000 	ldr.w	lr, [r7]
 8018e62:	46f4      	mov	ip, lr
 8018e64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018e68:	6823      	ldr	r3, [r4, #0]
 8018e6a:	f8cc 3000 	str.w	r3, [ip]
 8018e6e:	f10e 0114 	add.w	r1, lr, #20
 8018e72:	4640      	mov	r0, r8
 8018e74:	f000 f940 	bl	80190f8 <rcl_init_options_copy>
 8018e78:	4604      	mov	r4, r0
 8018e7a:	2800      	cmp	r0, #0
 8018e7c:	d144      	bne.n	8018f08 <rcl_init+0x13c>
 8018e7e:	f8d7 9000 	ldr.w	r9, [r7]
 8018e82:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8018e86:	f8c9 0020 	str.w	r0, [r9, #32]
 8018e8a:	f8c9 5018 	str.w	r5, [r9, #24]
 8018e8e:	f8c9 801c 	str.w	r8, [r9, #28]
 8018e92:	2d00      	cmp	r5, #0
 8018e94:	d04e      	beq.n	8018f34 <rcl_init+0x168>
 8018e96:	2e00      	cmp	r6, #0
 8018e98:	d04c      	beq.n	8018f34 <rcl_init+0x168>
 8018e9a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8018e9e:	2104      	movs	r1, #4
 8018ea0:	4628      	mov	r0, r5
 8018ea2:	4798      	blx	r3
 8018ea4:	f8c9 0020 	str.w	r0, [r9, #32]
 8018ea8:	f8d7 9000 	ldr.w	r9, [r7]
 8018eac:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8018eb0:	46ca      	mov	sl, r9
 8018eb2:	b343      	cbz	r3, 8018f06 <rcl_init+0x13a>
 8018eb4:	2d01      	cmp	r5, #1
 8018eb6:	f178 0300 	sbcs.w	r3, r8, #0
 8018eba:	db3b      	blt.n	8018f34 <rcl_init+0x168>
 8018ebc:	2400      	movs	r4, #0
 8018ebe:	3e04      	subs	r6, #4
 8018ec0:	46a1      	mov	r9, r4
 8018ec2:	e00b      	b.n	8018edc <rcl_init+0x110>
 8018ec4:	6831      	ldr	r1, [r6, #0]
 8018ec6:	f007 fc42 	bl	802074e <memcpy>
 8018eca:	3401      	adds	r4, #1
 8018ecc:	f149 0900 	adc.w	r9, r9, #0
 8018ed0:	45c8      	cmp	r8, r9
 8018ed2:	bf08      	it	eq
 8018ed4:	42a5      	cmpeq	r5, r4
 8018ed6:	d02b      	beq.n	8018f30 <rcl_init+0x164>
 8018ed8:	f8d7 a000 	ldr.w	sl, [r7]
 8018edc:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8018ee0:	f7e7 f980 	bl	80001e4 <strlen>
 8018ee4:	1c42      	adds	r2, r0, #1
 8018ee6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8018ee8:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8018eea:	f8da a020 	ldr.w	sl, [sl, #32]
 8018eee:	9201      	str	r2, [sp, #4]
 8018ef0:	4610      	mov	r0, r2
 8018ef2:	4798      	blx	r3
 8018ef4:	683b      	ldr	r3, [r7, #0]
 8018ef6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8018efa:	6a1b      	ldr	r3, [r3, #32]
 8018efc:	9a01      	ldr	r2, [sp, #4]
 8018efe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018f02:	2800      	cmp	r0, #0
 8018f04:	d1de      	bne.n	8018ec4 <rcl_init+0xf8>
 8018f06:	240a      	movs	r4, #10
 8018f08:	4638      	mov	r0, r7
 8018f0a:	f7ff feff 	bl	8018d0c <__cleanup_context>
 8018f0e:	4620      	mov	r0, r4
 8018f10:	b01e      	add	sp, #120	@ 0x78
 8018f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f16:	2900      	cmp	r1, #0
 8018f18:	f43f af71 	beq.w	8018dfe <rcl_init+0x32>
 8018f1c:	240b      	movs	r4, #11
 8018f1e:	4620      	mov	r0, r4
 8018f20:	b01e      	add	sp, #120	@ 0x78
 8018f22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f26:	2464      	movs	r4, #100	@ 0x64
 8018f28:	4620      	mov	r0, r4
 8018f2a:	b01e      	add	sp, #120	@ 0x78
 8018f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f30:	f8d7 9000 	ldr.w	r9, [r7]
 8018f34:	4926      	ldr	r1, [pc, #152]	@ (8018fd0 <rcl_init+0x204>)
 8018f36:	680b      	ldr	r3, [r1, #0]
 8018f38:	3301      	adds	r3, #1
 8018f3a:	d036      	beq.n	8018faa <rcl_init+0x1de>
 8018f3c:	600b      	str	r3, [r1, #0]
 8018f3e:	461a      	mov	r2, r3
 8018f40:	2400      	movs	r4, #0
 8018f42:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8018f46:	607b      	str	r3, [r7, #4]
 8018f48:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8018f4a:	3301      	adds	r3, #1
 8018f4c:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8018f50:	d034      	beq.n	8018fbc <rcl_init+0x1f0>
 8018f52:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8018f56:	b93b      	cbnz	r3, 8018f68 <rcl_init+0x19c>
 8018f58:	3030      	adds	r0, #48	@ 0x30
 8018f5a:	f000 f939 	bl	80191d0 <rcl_get_localhost_only>
 8018f5e:	4604      	mov	r4, r0
 8018f60:	2800      	cmp	r0, #0
 8018f62:	d1d1      	bne.n	8018f08 <rcl_init+0x13c>
 8018f64:	683b      	ldr	r3, [r7, #0]
 8018f66:	6958      	ldr	r0, [r3, #20]
 8018f68:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8018f6a:	aa18      	add	r2, sp, #96	@ 0x60
 8018f6c:	a917      	add	r1, sp, #92	@ 0x5c
 8018f6e:	f001 f83f 	bl	8019ff0 <rcl_validate_enclave_name>
 8018f72:	4604      	mov	r4, r0
 8018f74:	2800      	cmp	r0, #0
 8018f76:	d1c7      	bne.n	8018f08 <rcl_init+0x13c>
 8018f78:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8018f7a:	b9eb      	cbnz	r3, 8018fb8 <rcl_init+0x1ec>
 8018f7c:	6839      	ldr	r1, [r7, #0]
 8018f7e:	694b      	ldr	r3, [r1, #20]
 8018f80:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8018f82:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8018f86:	f000 fc3d 	bl	8019804 <rcl_get_security_options_from_environment>
 8018f8a:	4604      	mov	r4, r0
 8018f8c:	2800      	cmp	r0, #0
 8018f8e:	d1bb      	bne.n	8018f08 <rcl_init+0x13c>
 8018f90:	6839      	ldr	r1, [r7, #0]
 8018f92:	6948      	ldr	r0, [r1, #20]
 8018f94:	3128      	adds	r1, #40	@ 0x28
 8018f96:	3018      	adds	r0, #24
 8018f98:	f003 fa50 	bl	801c43c <rmw_init>
 8018f9c:	4604      	mov	r4, r0
 8018f9e:	2800      	cmp	r0, #0
 8018fa0:	d0bd      	beq.n	8018f1e <rcl_init+0x152>
 8018fa2:	f7ff fe8f 	bl	8018cc4 <rcl_convert_rmw_ret_to_rcl_ret>
 8018fa6:	4604      	mov	r4, r0
 8018fa8:	e7ae      	b.n	8018f08 <rcl_init+0x13c>
 8018faa:	2201      	movs	r2, #1
 8018fac:	461c      	mov	r4, r3
 8018fae:	600a      	str	r2, [r1, #0]
 8018fb0:	4613      	mov	r3, r2
 8018fb2:	e7c6      	b.n	8018f42 <rcl_init+0x176>
 8018fb4:	240a      	movs	r4, #10
 8018fb6:	e7b2      	b.n	8018f1e <rcl_init+0x152>
 8018fb8:	2401      	movs	r4, #1
 8018fba:	e7a5      	b.n	8018f08 <rcl_init+0x13c>
 8018fbc:	3024      	adds	r0, #36	@ 0x24
 8018fbe:	f006 f90b 	bl	801f1d8 <rcl_get_default_domain_id>
 8018fc2:	4604      	mov	r4, r0
 8018fc4:	2800      	cmp	r0, #0
 8018fc6:	d19f      	bne.n	8018f08 <rcl_init+0x13c>
 8018fc8:	683b      	ldr	r3, [r7, #0]
 8018fca:	6958      	ldr	r0, [r3, #20]
 8018fcc:	e7c1      	b.n	8018f52 <rcl_init+0x186>
 8018fce:	bf00      	nop
 8018fd0:	20016444 	.word	0x20016444

08018fd4 <rcl_get_zero_initialized_init_options>:
 8018fd4:	2000      	movs	r0, #0
 8018fd6:	4770      	bx	lr

08018fd8 <rcl_init_options_init>:
 8018fd8:	b084      	sub	sp, #16
 8018fda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018fdc:	b097      	sub	sp, #92	@ 0x5c
 8018fde:	ae1d      	add	r6, sp, #116	@ 0x74
 8018fe0:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8018fe4:	2800      	cmp	r0, #0
 8018fe6:	d058      	beq.n	801909a <rcl_init_options_init+0xc2>
 8018fe8:	6803      	ldr	r3, [r0, #0]
 8018fea:	4605      	mov	r5, r0
 8018fec:	b133      	cbz	r3, 8018ffc <rcl_init_options_init+0x24>
 8018fee:	2464      	movs	r4, #100	@ 0x64
 8018ff0:	4620      	mov	r0, r4
 8018ff2:	b017      	add	sp, #92	@ 0x5c
 8018ff4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018ff8:	b004      	add	sp, #16
 8018ffa:	4770      	bx	lr
 8018ffc:	4630      	mov	r0, r6
 8018ffe:	f7fb fa83 	bl	8014508 <rcutils_allocator_is_valid>
 8019002:	2800      	cmp	r0, #0
 8019004:	d049      	beq.n	801909a <rcl_init_options_init+0xc2>
 8019006:	46b4      	mov	ip, r6
 8019008:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801900c:	ac11      	add	r4, sp, #68	@ 0x44
 801900e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019010:	f8dc 3000 	ldr.w	r3, [ip]
 8019014:	6023      	str	r3, [r4, #0]
 8019016:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8019018:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801901a:	2050      	movs	r0, #80	@ 0x50
 801901c:	4798      	blx	r3
 801901e:	4604      	mov	r4, r0
 8019020:	6028      	str	r0, [r5, #0]
 8019022:	2800      	cmp	r0, #0
 8019024:	d03b      	beq.n	801909e <rcl_init_options_init+0xc6>
 8019026:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801902a:	4686      	mov	lr, r0
 801902c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019030:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019034:	f8dc 3000 	ldr.w	r3, [ip]
 8019038:	f8ce 3000 	str.w	r3, [lr]
 801903c:	a802      	add	r0, sp, #8
 801903e:	f002 fe97 	bl	801bd70 <rmw_get_zero_initialized_init_options>
 8019042:	f10d 0e08 	add.w	lr, sp, #8
 8019046:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801904a:	f104 0c18 	add.w	ip, r4, #24
 801904e:	682f      	ldr	r7, [r5, #0]
 8019050:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019054:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019058:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801905c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019060:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019064:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8019068:	ac20      	add	r4, sp, #128	@ 0x80
 801906a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801906e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8019072:	e88d 0003 	stmia.w	sp, {r0, r1}
 8019076:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 801907a:	f107 0018 	add.w	r0, r7, #24
 801907e:	f003 f8e5 	bl	801c24c <rmw_init_options_init>
 8019082:	4604      	mov	r4, r0
 8019084:	2800      	cmp	r0, #0
 8019086:	d0b3      	beq.n	8018ff0 <rcl_init_options_init+0x18>
 8019088:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801908a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801908c:	6828      	ldr	r0, [r5, #0]
 801908e:	4798      	blx	r3
 8019090:	4620      	mov	r0, r4
 8019092:	f7ff fe17 	bl	8018cc4 <rcl_convert_rmw_ret_to_rcl_ret>
 8019096:	4604      	mov	r4, r0
 8019098:	e7aa      	b.n	8018ff0 <rcl_init_options_init+0x18>
 801909a:	240b      	movs	r4, #11
 801909c:	e7a8      	b.n	8018ff0 <rcl_init_options_init+0x18>
 801909e:	240a      	movs	r4, #10
 80190a0:	e7a6      	b.n	8018ff0 <rcl_init_options_init+0x18>
 80190a2:	bf00      	nop

080190a4 <rcl_init_options_fini>:
 80190a4:	b530      	push	{r4, r5, lr}
 80190a6:	b087      	sub	sp, #28
 80190a8:	b1f0      	cbz	r0, 80190e8 <rcl_init_options_fini+0x44>
 80190aa:	6803      	ldr	r3, [r0, #0]
 80190ac:	4604      	mov	r4, r0
 80190ae:	b1db      	cbz	r3, 80190e8 <rcl_init_options_fini+0x44>
 80190b0:	469c      	mov	ip, r3
 80190b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80190b6:	f10d 0e04 	add.w	lr, sp, #4
 80190ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80190be:	f8dc 3000 	ldr.w	r3, [ip]
 80190c2:	f8ce 3000 	str.w	r3, [lr]
 80190c6:	a801      	add	r0, sp, #4
 80190c8:	f7fb fa1e 	bl	8014508 <rcutils_allocator_is_valid>
 80190cc:	b160      	cbz	r0, 80190e8 <rcl_init_options_fini+0x44>
 80190ce:	6820      	ldr	r0, [r4, #0]
 80190d0:	3018      	adds	r0, #24
 80190d2:	f003 f96b 	bl	801c3ac <rmw_init_options_fini>
 80190d6:	4605      	mov	r5, r0
 80190d8:	b950      	cbnz	r0, 80190f0 <rcl_init_options_fini+0x4c>
 80190da:	6820      	ldr	r0, [r4, #0]
 80190dc:	9b02      	ldr	r3, [sp, #8]
 80190de:	9905      	ldr	r1, [sp, #20]
 80190e0:	4798      	blx	r3
 80190e2:	4628      	mov	r0, r5
 80190e4:	b007      	add	sp, #28
 80190e6:	bd30      	pop	{r4, r5, pc}
 80190e8:	250b      	movs	r5, #11
 80190ea:	4628      	mov	r0, r5
 80190ec:	b007      	add	sp, #28
 80190ee:	bd30      	pop	{r4, r5, pc}
 80190f0:	f7ff fde8 	bl	8018cc4 <rcl_convert_rmw_ret_to_rcl_ret>
 80190f4:	4605      	mov	r5, r0
 80190f6:	e7f8      	b.n	80190ea <rcl_init_options_fini+0x46>

080190f8 <rcl_init_options_copy>:
 80190f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190fc:	b094      	sub	sp, #80	@ 0x50
 80190fe:	2800      	cmp	r0, #0
 8019100:	d058      	beq.n	80191b4 <rcl_init_options_copy+0xbc>
 8019102:	4604      	mov	r4, r0
 8019104:	6800      	ldr	r0, [r0, #0]
 8019106:	2800      	cmp	r0, #0
 8019108:	d054      	beq.n	80191b4 <rcl_init_options_copy+0xbc>
 801910a:	460e      	mov	r6, r1
 801910c:	f7fb f9fc 	bl	8014508 <rcutils_allocator_is_valid>
 8019110:	2800      	cmp	r0, #0
 8019112:	d04f      	beq.n	80191b4 <rcl_init_options_copy+0xbc>
 8019114:	2e00      	cmp	r6, #0
 8019116:	d04d      	beq.n	80191b4 <rcl_init_options_copy+0xbc>
 8019118:	6833      	ldr	r3, [r6, #0]
 801911a:	b123      	cbz	r3, 8019126 <rcl_init_options_copy+0x2e>
 801911c:	2464      	movs	r4, #100	@ 0x64
 801911e:	4620      	mov	r0, r4
 8019120:	b014      	add	sp, #80	@ 0x50
 8019122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019126:	6827      	ldr	r7, [r4, #0]
 8019128:	46bc      	mov	ip, r7
 801912a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801912e:	ad0f      	add	r5, sp, #60	@ 0x3c
 8019130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019132:	f8dc 3000 	ldr.w	r3, [ip]
 8019136:	f8d7 8000 	ldr.w	r8, [r7]
 801913a:	602b      	str	r3, [r5, #0]
 801913c:	4619      	mov	r1, r3
 801913e:	2050      	movs	r0, #80	@ 0x50
 8019140:	47c0      	blx	r8
 8019142:	4605      	mov	r5, r0
 8019144:	6030      	str	r0, [r6, #0]
 8019146:	b3d0      	cbz	r0, 80191be <rcl_init_options_copy+0xc6>
 8019148:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 801914c:	4686      	mov	lr, r0
 801914e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019152:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019156:	f8dc 3000 	ldr.w	r3, [ip]
 801915a:	f8ce 3000 	str.w	r3, [lr]
 801915e:	4668      	mov	r0, sp
 8019160:	f002 fe06 	bl	801bd70 <rmw_get_zero_initialized_init_options>
 8019164:	46ee      	mov	lr, sp
 8019166:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801916a:	f105 0c18 	add.w	ip, r5, #24
 801916e:	6824      	ldr	r4, [r4, #0]
 8019170:	6835      	ldr	r5, [r6, #0]
 8019172:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019176:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801917a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801917e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019182:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019186:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801918a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801918e:	f104 0018 	add.w	r0, r4, #24
 8019192:	f105 0118 	add.w	r1, r5, #24
 8019196:	f003 f8c1 	bl	801c31c <rmw_init_options_copy>
 801919a:	4604      	mov	r4, r0
 801919c:	2800      	cmp	r0, #0
 801919e:	d0be      	beq.n	801911e <rcl_init_options_copy+0x26>
 80191a0:	f7fb f9c0 	bl	8014524 <rcutils_get_error_string>
 80191a4:	f7fb f9d4 	bl	8014550 <rcutils_reset_error>
 80191a8:	4630      	mov	r0, r6
 80191aa:	f7ff ff7b 	bl	80190a4 <rcl_init_options_fini>
 80191ae:	b140      	cbz	r0, 80191c2 <rcl_init_options_copy+0xca>
 80191b0:	4604      	mov	r4, r0
 80191b2:	e7b4      	b.n	801911e <rcl_init_options_copy+0x26>
 80191b4:	240b      	movs	r4, #11
 80191b6:	4620      	mov	r0, r4
 80191b8:	b014      	add	sp, #80	@ 0x50
 80191ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191be:	240a      	movs	r4, #10
 80191c0:	e7ad      	b.n	801911e <rcl_init_options_copy+0x26>
 80191c2:	4620      	mov	r0, r4
 80191c4:	b014      	add	sp, #80	@ 0x50
 80191c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80191ca:	f7ff bd7b 	b.w	8018cc4 <rcl_convert_rmw_ret_to_rcl_ret>
 80191ce:	bf00      	nop

080191d0 <rcl_get_localhost_only>:
 80191d0:	b510      	push	{r4, lr}
 80191d2:	b082      	sub	sp, #8
 80191d4:	2300      	movs	r3, #0
 80191d6:	9301      	str	r3, [sp, #4]
 80191d8:	b1b8      	cbz	r0, 801920a <rcl_get_localhost_only+0x3a>
 80191da:	4604      	mov	r4, r0
 80191dc:	a901      	add	r1, sp, #4
 80191de:	480c      	ldr	r0, [pc, #48]	@ (8019210 <rcl_get_localhost_only+0x40>)
 80191e0:	f002 fb0a 	bl	801b7f8 <rcutils_get_env>
 80191e4:	b110      	cbz	r0, 80191ec <rcl_get_localhost_only+0x1c>
 80191e6:	2001      	movs	r0, #1
 80191e8:	b002      	add	sp, #8
 80191ea:	bd10      	pop	{r4, pc}
 80191ec:	9b01      	ldr	r3, [sp, #4]
 80191ee:	b113      	cbz	r3, 80191f6 <rcl_get_localhost_only+0x26>
 80191f0:	781a      	ldrb	r2, [r3, #0]
 80191f2:	2a31      	cmp	r2, #49	@ 0x31
 80191f4:	d004      	beq.n	8019200 <rcl_get_localhost_only+0x30>
 80191f6:	2302      	movs	r3, #2
 80191f8:	2000      	movs	r0, #0
 80191fa:	7023      	strb	r3, [r4, #0]
 80191fc:	b002      	add	sp, #8
 80191fe:	bd10      	pop	{r4, pc}
 8019200:	785b      	ldrb	r3, [r3, #1]
 8019202:	2b00      	cmp	r3, #0
 8019204:	d1f7      	bne.n	80191f6 <rcl_get_localhost_only+0x26>
 8019206:	2301      	movs	r3, #1
 8019208:	e7f6      	b.n	80191f8 <rcl_get_localhost_only+0x28>
 801920a:	200b      	movs	r0, #11
 801920c:	b002      	add	sp, #8
 801920e:	bd10      	pop	{r4, pc}
 8019210:	08022184 	.word	0x08022184

08019214 <rcl_get_zero_initialized_node>:
 8019214:	4a03      	ldr	r2, [pc, #12]	@ (8019224 <rcl_get_zero_initialized_node+0x10>)
 8019216:	4603      	mov	r3, r0
 8019218:	e892 0003 	ldmia.w	r2, {r0, r1}
 801921c:	e883 0003 	stmia.w	r3, {r0, r1}
 8019220:	4618      	mov	r0, r3
 8019222:	4770      	bx	lr
 8019224:	080221ac 	.word	0x080221ac

08019228 <rcl_node_init>:
 8019228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801922c:	b0a9      	sub	sp, #164	@ 0xa4
 801922e:	4604      	mov	r4, r0
 8019230:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8019234:	a823      	add	r0, sp, #140	@ 0x8c
 8019236:	460e      	mov	r6, r1
 8019238:	4615      	mov	r5, r2
 801923a:	461f      	mov	r7, r3
 801923c:	f006 f9f4 	bl	801f628 <rcl_guard_condition_get_default_options>
 8019240:	f1b8 0f00 	cmp.w	r8, #0
 8019244:	f000 80e6 	beq.w	8019414 <rcl_node_init+0x1ec>
 8019248:	4640      	mov	r0, r8
 801924a:	f7fb f95d 	bl	8014508 <rcutils_allocator_is_valid>
 801924e:	2800      	cmp	r0, #0
 8019250:	f000 80e0 	beq.w	8019414 <rcl_node_init+0x1ec>
 8019254:	2e00      	cmp	r6, #0
 8019256:	f000 80dd 	beq.w	8019414 <rcl_node_init+0x1ec>
 801925a:	2d00      	cmp	r5, #0
 801925c:	f000 80da 	beq.w	8019414 <rcl_node_init+0x1ec>
 8019260:	2c00      	cmp	r4, #0
 8019262:	f000 80d7 	beq.w	8019414 <rcl_node_init+0x1ec>
 8019266:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801926a:	f1b9 0f00 	cmp.w	r9, #0
 801926e:	f040 80fd 	bne.w	801946c <rcl_node_init+0x244>
 8019272:	2f00      	cmp	r7, #0
 8019274:	f000 80ce 	beq.w	8019414 <rcl_node_init+0x1ec>
 8019278:	4638      	mov	r0, r7
 801927a:	f7ff fd41 	bl	8018d00 <rcl_context_is_valid>
 801927e:	4682      	mov	sl, r0
 8019280:	2800      	cmp	r0, #0
 8019282:	f000 80cd 	beq.w	8019420 <rcl_node_init+0x1f8>
 8019286:	464a      	mov	r2, r9
 8019288:	a922      	add	r1, sp, #136	@ 0x88
 801928a:	4630      	mov	r0, r6
 801928c:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8019290:	f002 ff10 	bl	801c0b4 <rmw_validate_node_name>
 8019294:	4681      	mov	r9, r0
 8019296:	2800      	cmp	r0, #0
 8019298:	f040 80be 	bne.w	8019418 <rcl_node_init+0x1f0>
 801929c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801929e:	2800      	cmp	r0, #0
 80192a0:	f040 80f0 	bne.w	8019484 <rcl_node_init+0x25c>
 80192a4:	4628      	mov	r0, r5
 80192a6:	f7e6 ff9d 	bl	80001e4 <strlen>
 80192aa:	2800      	cmp	r0, #0
 80192ac:	f040 80bb 	bne.w	8019426 <rcl_node_init+0x1fe>
 80192b0:	4d7c      	ldr	r5, [pc, #496]	@ (80194a4 <rcl_node_init+0x27c>)
 80192b2:	a922      	add	r1, sp, #136	@ 0x88
 80192b4:	2200      	movs	r2, #0
 80192b6:	4628      	mov	r0, r5
 80192b8:	f002 fede 	bl	801c078 <rmw_validate_namespace>
 80192bc:	4681      	mov	r9, r0
 80192be:	2800      	cmp	r0, #0
 80192c0:	f040 80aa 	bne.w	8019418 <rcl_node_init+0x1f0>
 80192c4:	4682      	mov	sl, r0
 80192c6:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80192c8:	2800      	cmp	r0, #0
 80192ca:	f040 80e0 	bne.w	801948e <rcl_node_init+0x266>
 80192ce:	f8d8 3000 	ldr.w	r3, [r8]
 80192d2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80192d6:	2078      	movs	r0, #120	@ 0x78
 80192d8:	4798      	blx	r3
 80192da:	4681      	mov	r9, r0
 80192dc:	6060      	str	r0, [r4, #4]
 80192de:	2800      	cmp	r0, #0
 80192e0:	f000 80ca 	beq.w	8019478 <rcl_node_init+0x250>
 80192e4:	2200      	movs	r2, #0
 80192e6:	2300      	movs	r3, #0
 80192e8:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 80192ec:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 80192f0:	a808      	add	r0, sp, #32
 80192f2:	f000 f907 	bl	8019504 <rcl_node_get_default_options>
 80192f6:	a908      	add	r1, sp, #32
 80192f8:	4648      	mov	r0, r9
 80192fa:	2268      	movs	r2, #104	@ 0x68
 80192fc:	f007 fa27 	bl	802074e <memcpy>
 8019300:	6861      	ldr	r1, [r4, #4]
 8019302:	6027      	str	r7, [r4, #0]
 8019304:	4640      	mov	r0, r8
 8019306:	f000 f90b 	bl	8019520 <rcl_node_options_copy>
 801930a:	2800      	cmp	r0, #0
 801930c:	d158      	bne.n	80193c0 <rcl_node_init+0x198>
 801930e:	4628      	mov	r0, r5
 8019310:	f7e6 ff68 	bl	80001e4 <strlen>
 8019314:	4428      	add	r0, r5
 8019316:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801931a:	e9cd 5603 	strd	r5, r6, [sp, #12]
 801931e:	2b2f      	cmp	r3, #47	@ 0x2f
 8019320:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8019324:	9300      	str	r3, [sp, #0]
 8019326:	bf0c      	ite	eq
 8019328:	4b5f      	ldreq	r3, [pc, #380]	@ (80194a8 <rcl_node_init+0x280>)
 801932a:	4b60      	ldrne	r3, [pc, #384]	@ (80194ac <rcl_node_init+0x284>)
 801932c:	9302      	str	r3, [sp, #8]
 801932e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8019332:	9301      	str	r3, [sp, #4]
 8019334:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8019338:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801933c:	f002 fa84 	bl	801b848 <rcutils_format_string_limit>
 8019340:	6823      	ldr	r3, [r4, #0]
 8019342:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 8019346:	6818      	ldr	r0, [r3, #0]
 8019348:	4631      	mov	r1, r6
 801934a:	3028      	adds	r0, #40	@ 0x28
 801934c:	462a      	mov	r2, r5
 801934e:	6866      	ldr	r6, [r4, #4]
 8019350:	f003 fadc 	bl	801c90c <rmw_create_node>
 8019354:	6863      	ldr	r3, [r4, #4]
 8019356:	66b0      	str	r0, [r6, #104]	@ 0x68
 8019358:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801935a:	2800      	cmp	r0, #0
 801935c:	d032      	beq.n	80193c4 <rcl_node_init+0x19c>
 801935e:	f003 fb67 	bl	801ca30 <rmw_node_get_graph_guard_condition>
 8019362:	4681      	mov	r9, r0
 8019364:	b360      	cbz	r0, 80193c0 <rcl_node_init+0x198>
 8019366:	f8d8 3000 	ldr.w	r3, [r8]
 801936a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801936e:	6866      	ldr	r6, [r4, #4]
 8019370:	2008      	movs	r0, #8
 8019372:	4798      	blx	r3
 8019374:	6863      	ldr	r3, [r4, #4]
 8019376:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8019378:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 801937c:	f1bb 0f00 	cmp.w	fp, #0
 8019380:	d020      	beq.n	80193c4 <rcl_node_init+0x19c>
 8019382:	a806      	add	r0, sp, #24
 8019384:	f006 f8c0 	bl	801f508 <rcl_get_zero_initialized_guard_condition>
 8019388:	a806      	add	r0, sp, #24
 801938a:	c803      	ldmia	r0, {r0, r1}
 801938c:	6863      	ldr	r3, [r4, #4]
 801938e:	46c4      	mov	ip, r8
 8019390:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8019394:	e88b 0003 	stmia.w	fp, {r0, r1}
 8019398:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801939c:	ae23      	add	r6, sp, #140	@ 0x8c
 801939e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80193a0:	f8dc 3000 	ldr.w	r3, [ip]
 80193a4:	6033      	str	r3, [r6, #0]
 80193a6:	ab28      	add	r3, sp, #160	@ 0xa0
 80193a8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80193ac:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80193b0:	4649      	mov	r1, r9
 80193b2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80193b4:	463a      	mov	r2, r7
 80193b6:	4670      	mov	r0, lr
 80193b8:	f006 f8b0 	bl	801f51c <rcl_guard_condition_init_from_rmw>
 80193bc:	4681      	mov	r9, r0
 80193be:	b328      	cbz	r0, 801940c <rcl_node_init+0x1e4>
 80193c0:	6863      	ldr	r3, [r4, #4]
 80193c2:	b1f3      	cbz	r3, 8019402 <rcl_node_init+0x1da>
 80193c4:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80193c6:	b128      	cbz	r0, 80193d4 <rcl_node_init+0x1ac>
 80193c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80193cc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80193d0:	4798      	blx	r3
 80193d2:	6863      	ldr	r3, [r4, #4]
 80193d4:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80193d6:	b110      	cbz	r0, 80193de <rcl_node_init+0x1b6>
 80193d8:	f003 fab0 	bl	801c93c <rmw_destroy_node>
 80193dc:	6863      	ldr	r3, [r4, #4]
 80193de:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80193e0:	b148      	cbz	r0, 80193f6 <rcl_node_init+0x1ce>
 80193e2:	f006 f8fb 	bl	801f5dc <rcl_guard_condition_fini>
 80193e6:	6863      	ldr	r3, [r4, #4]
 80193e8:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80193ec:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80193ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80193f2:	4798      	blx	r3
 80193f4:	6863      	ldr	r3, [r4, #4]
 80193f6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80193fa:	4618      	mov	r0, r3
 80193fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019400:	4798      	blx	r3
 8019402:	2300      	movs	r3, #0
 8019404:	e9c4 3300 	strd	r3, r3, [r4]
 8019408:	f04f 0901 	mov.w	r9, #1
 801940c:	f1ba 0f00 	cmp.w	sl, #0
 8019410:	d125      	bne.n	801945e <rcl_node_init+0x236>
 8019412:	e001      	b.n	8019418 <rcl_node_init+0x1f0>
 8019414:	f04f 090b 	mov.w	r9, #11
 8019418:	4648      	mov	r0, r9
 801941a:	b029      	add	sp, #164	@ 0xa4
 801941c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019420:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8019424:	e7f8      	b.n	8019418 <rcl_node_init+0x1f0>
 8019426:	782b      	ldrb	r3, [r5, #0]
 8019428:	2b2f      	cmp	r3, #47	@ 0x2f
 801942a:	f43f af42 	beq.w	80192b2 <rcl_node_init+0x8a>
 801942e:	9503      	str	r5, [sp, #12]
 8019430:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8019434:	9300      	str	r3, [sp, #0]
 8019436:	4b1e      	ldr	r3, [pc, #120]	@ (80194b0 <rcl_node_init+0x288>)
 8019438:	9302      	str	r3, [sp, #8]
 801943a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801943e:	9301      	str	r3, [sp, #4]
 8019440:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8019444:	f002 fa00 	bl	801b848 <rcutils_format_string_limit>
 8019448:	4605      	mov	r5, r0
 801944a:	b340      	cbz	r0, 801949e <rcl_node_init+0x276>
 801944c:	2200      	movs	r2, #0
 801944e:	a922      	add	r1, sp, #136	@ 0x88
 8019450:	9222      	str	r2, [sp, #136]	@ 0x88
 8019452:	f002 fe11 	bl	801c078 <rmw_validate_namespace>
 8019456:	4681      	mov	r9, r0
 8019458:	2800      	cmp	r0, #0
 801945a:	f43f af34 	beq.w	80192c6 <rcl_node_init+0x9e>
 801945e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019462:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8019466:	4628      	mov	r0, r5
 8019468:	4798      	blx	r3
 801946a:	e7d5      	b.n	8019418 <rcl_node_init+0x1f0>
 801946c:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8019470:	4648      	mov	r0, r9
 8019472:	b029      	add	sp, #164	@ 0xa4
 8019474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019478:	f04f 090a 	mov.w	r9, #10
 801947c:	f1ba 0f00 	cmp.w	sl, #0
 8019480:	d1ed      	bne.n	801945e <rcl_node_init+0x236>
 8019482:	e7c9      	b.n	8019418 <rcl_node_init+0x1f0>
 8019484:	f002 fe68 	bl	801c158 <rmw_node_name_validation_result_string>
 8019488:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 801948c:	e7c4      	b.n	8019418 <rcl_node_init+0x1f0>
 801948e:	f002 fe05 	bl	801c09c <rmw_namespace_validation_result_string>
 8019492:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8019496:	f1ba 0f00 	cmp.w	sl, #0
 801949a:	d1e0      	bne.n	801945e <rcl_node_init+0x236>
 801949c:	e7bc      	b.n	8019418 <rcl_node_init+0x1f0>
 801949e:	f04f 090a 	mov.w	r9, #10
 80194a2:	e7b9      	b.n	8019418 <rcl_node_init+0x1f0>
 80194a4:	0802219c 	.word	0x0802219c
 80194a8:	08021958 	.word	0x08021958
 80194ac:	080221a4 	.word	0x080221a4
 80194b0:	080221a0 	.word	0x080221a0

080194b4 <rcl_node_is_valid>:
 80194b4:	b130      	cbz	r0, 80194c4 <rcl_node_is_valid+0x10>
 80194b6:	6843      	ldr	r3, [r0, #4]
 80194b8:	b123      	cbz	r3, 80194c4 <rcl_node_is_valid+0x10>
 80194ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80194bc:	b113      	cbz	r3, 80194c4 <rcl_node_is_valid+0x10>
 80194be:	6800      	ldr	r0, [r0, #0]
 80194c0:	f7ff bc1e 	b.w	8018d00 <rcl_context_is_valid>
 80194c4:	2000      	movs	r0, #0
 80194c6:	4770      	bx	lr

080194c8 <rcl_node_get_name>:
 80194c8:	b120      	cbz	r0, 80194d4 <rcl_node_get_name+0xc>
 80194ca:	6840      	ldr	r0, [r0, #4]
 80194cc:	b110      	cbz	r0, 80194d4 <rcl_node_get_name+0xc>
 80194ce:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80194d0:	b100      	cbz	r0, 80194d4 <rcl_node_get_name+0xc>
 80194d2:	6880      	ldr	r0, [r0, #8]
 80194d4:	4770      	bx	lr
 80194d6:	bf00      	nop

080194d8 <rcl_node_get_namespace>:
 80194d8:	b120      	cbz	r0, 80194e4 <rcl_node_get_namespace+0xc>
 80194da:	6840      	ldr	r0, [r0, #4]
 80194dc:	b110      	cbz	r0, 80194e4 <rcl_node_get_namespace+0xc>
 80194de:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80194e0:	b100      	cbz	r0, 80194e4 <rcl_node_get_namespace+0xc>
 80194e2:	68c0      	ldr	r0, [r0, #12]
 80194e4:	4770      	bx	lr
 80194e6:	bf00      	nop

080194e8 <rcl_node_get_options>:
 80194e8:	b128      	cbz	r0, 80194f6 <rcl_node_get_options+0xe>
 80194ea:	6840      	ldr	r0, [r0, #4]
 80194ec:	b118      	cbz	r0, 80194f6 <rcl_node_get_options+0xe>
 80194ee:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	bf08      	it	eq
 80194f4:	2000      	moveq	r0, #0
 80194f6:	4770      	bx	lr

080194f8 <rcl_node_get_rmw_handle>:
 80194f8:	b110      	cbz	r0, 8019500 <rcl_node_get_rmw_handle+0x8>
 80194fa:	6840      	ldr	r0, [r0, #4]
 80194fc:	b100      	cbz	r0, 8019500 <rcl_node_get_rmw_handle+0x8>
 80194fe:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8019500:	4770      	bx	lr
 8019502:	bf00      	nop

08019504 <rcl_node_get_default_options>:
 8019504:	b510      	push	{r4, lr}
 8019506:	2268      	movs	r2, #104	@ 0x68
 8019508:	4604      	mov	r4, r0
 801950a:	2100      	movs	r1, #0
 801950c:	f007 f800 	bl	8020510 <memset>
 8019510:	4620      	mov	r0, r4
 8019512:	f7fa ffeb 	bl	80144ec <rcutils_get_default_allocator>
 8019516:	2301      	movs	r3, #1
 8019518:	7523      	strb	r3, [r4, #20]
 801951a:	4620      	mov	r0, r4
 801951c:	bd10      	pop	{r4, pc}
 801951e:	bf00      	nop

08019520 <rcl_node_options_copy>:
 8019520:	b1d0      	cbz	r0, 8019558 <rcl_node_options_copy+0x38>
 8019522:	b570      	push	{r4, r5, r6, lr}
 8019524:	460c      	mov	r4, r1
 8019526:	b1a9      	cbz	r1, 8019554 <rcl_node_options_copy+0x34>
 8019528:	4288      	cmp	r0, r1
 801952a:	4684      	mov	ip, r0
 801952c:	d012      	beq.n	8019554 <rcl_node_options_copy+0x34>
 801952e:	4605      	mov	r5, r0
 8019530:	8a86      	ldrh	r6, [r0, #20]
 8019532:	468e      	mov	lr, r1
 8019534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019536:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801953a:	682b      	ldr	r3, [r5, #0]
 801953c:	f8ce 3000 	str.w	r3, [lr]
 8019540:	f10c 0118 	add.w	r1, ip, #24
 8019544:	2250      	movs	r2, #80	@ 0x50
 8019546:	82a6      	strh	r6, [r4, #20]
 8019548:	f104 0018 	add.w	r0, r4, #24
 801954c:	f007 f8ff 	bl	802074e <memcpy>
 8019550:	2000      	movs	r0, #0
 8019552:	bd70      	pop	{r4, r5, r6, pc}
 8019554:	200b      	movs	r0, #11
 8019556:	bd70      	pop	{r4, r5, r6, pc}
 8019558:	200b      	movs	r0, #11
 801955a:	4770      	bx	lr

0801955c <rcl_node_resolve_name>:
 801955c:	b082      	sub	sp, #8
 801955e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019562:	b091      	sub	sp, #68	@ 0x44
 8019564:	ac1a      	add	r4, sp, #104	@ 0x68
 8019566:	e884 000c 	stmia.w	r4, {r2, r3}
 801956a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801956e:	2800      	cmp	r0, #0
 8019570:	d03b      	beq.n	80195ea <rcl_node_resolve_name+0x8e>
 8019572:	460c      	mov	r4, r1
 8019574:	4605      	mov	r5, r0
 8019576:	f7ff ffb7 	bl	80194e8 <rcl_node_get_options>
 801957a:	2800      	cmp	r0, #0
 801957c:	d037      	beq.n	80195ee <rcl_node_resolve_name+0x92>
 801957e:	4628      	mov	r0, r5
 8019580:	f7ff ffa2 	bl	80194c8 <rcl_node_get_name>
 8019584:	4606      	mov	r6, r0
 8019586:	4628      	mov	r0, r5
 8019588:	f7ff ffa6 	bl	80194d8 <rcl_node_get_namespace>
 801958c:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8019590:	4681      	mov	r9, r0
 8019592:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019596:	ad0b      	add	r5, sp, #44	@ 0x2c
 8019598:	46ac      	mov	ip, r5
 801959a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801959e:	f8de 3000 	ldr.w	r3, [lr]
 80195a2:	f8cc 3000 	str.w	r3, [ip]
 80195a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80195a8:	b1fb      	cbz	r3, 80195ea <rcl_node_resolve_name+0x8e>
 80195aa:	468a      	mov	sl, r1
 80195ac:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 80195b0:	f002 faa2 	bl	801baf8 <rcutils_get_zero_initialized_string_map>
 80195b4:	ab10      	add	r3, sp, #64	@ 0x40
 80195b6:	9008      	str	r0, [sp, #32]
 80195b8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80195bc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80195c0:	2100      	movs	r1, #0
 80195c2:	e895 000c 	ldmia.w	r5, {r2, r3}
 80195c6:	a808      	add	r0, sp, #32
 80195c8:	f002 fb0e 	bl	801bbe8 <rcutils_string_map_init>
 80195cc:	4607      	mov	r7, r0
 80195ce:	b180      	cbz	r0, 80195f2 <rcl_node_resolve_name+0x96>
 80195d0:	f7fa ffa8 	bl	8014524 <rcutils_get_error_string>
 80195d4:	f7fa ffbc 	bl	8014550 <rcutils_reset_error>
 80195d8:	2f0a      	cmp	r7, #10
 80195da:	bf18      	it	ne
 80195dc:	2701      	movne	r7, #1
 80195de:	4638      	mov	r0, r7
 80195e0:	b011      	add	sp, #68	@ 0x44
 80195e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195e6:	b002      	add	sp, #8
 80195e8:	4770      	bx	lr
 80195ea:	270b      	movs	r7, #11
 80195ec:	e7f7      	b.n	80195de <rcl_node_resolve_name+0x82>
 80195ee:	2701      	movs	r7, #1
 80195f0:	e7f5      	b.n	80195de <rcl_node_resolve_name+0x82>
 80195f2:	9009      	str	r0, [sp, #36]	@ 0x24
 80195f4:	9007      	str	r0, [sp, #28]
 80195f6:	a808      	add	r0, sp, #32
 80195f8:	f005 ff80 	bl	801f4fc <rcl_get_default_topic_name_substitutions>
 80195fc:	4607      	mov	r7, r0
 80195fe:	b1a8      	cbz	r0, 801962c <rcl_node_resolve_name+0xd0>
 8019600:	280a      	cmp	r0, #10
 8019602:	9c07      	ldr	r4, [sp, #28]
 8019604:	d000      	beq.n	8019608 <rcl_node_resolve_name+0xac>
 8019606:	2701      	movs	r7, #1
 8019608:	a808      	add	r0, sp, #32
 801960a:	f002 fb2d 	bl	801bc68 <rcutils_string_map_fini>
 801960e:	2800      	cmp	r0, #0
 8019610:	d13d      	bne.n	801968e <rcl_node_resolve_name+0x132>
 8019612:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019614:	4659      	mov	r1, fp
 8019616:	47d0      	blx	sl
 8019618:	4659      	mov	r1, fp
 801961a:	4620      	mov	r0, r4
 801961c:	47d0      	blx	sl
 801961e:	f1b8 0f00 	cmp.w	r8, #0
 8019622:	d0dc      	beq.n	80195de <rcl_node_resolve_name+0x82>
 8019624:	2f67      	cmp	r7, #103	@ 0x67
 8019626:	bf08      	it	eq
 8019628:	2768      	moveq	r7, #104	@ 0x68
 801962a:	e7d8      	b.n	80195de <rcl_node_resolve_name+0x82>
 801962c:	ab09      	add	r3, sp, #36	@ 0x24
 801962e:	9305      	str	r3, [sp, #20]
 8019630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019632:	46ec      	mov	ip, sp
 8019634:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019638:	682b      	ldr	r3, [r5, #0]
 801963a:	f8cc 3000 	str.w	r3, [ip]
 801963e:	464a      	mov	r2, r9
 8019640:	4631      	mov	r1, r6
 8019642:	4620      	mov	r0, r4
 8019644:	ab08      	add	r3, sp, #32
 8019646:	f005 fdfb 	bl	801f240 <rcl_expand_topic_name>
 801964a:	4607      	mov	r7, r0
 801964c:	b9b8      	cbnz	r0, 801967e <rcl_node_resolve_name+0x122>
 801964e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8019650:	9009      	str	r0, [sp, #36]	@ 0x24
 8019652:	4602      	mov	r2, r0
 8019654:	a90a      	add	r1, sp, #40	@ 0x28
 8019656:	4620      	mov	r0, r4
 8019658:	f002 fc4a 	bl	801bef0 <rmw_validate_full_topic_name>
 801965c:	b988      	cbnz	r0, 8019682 <rcl_node_resolve_name+0x126>
 801965e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8019660:	b9d5      	cbnz	r5, 8019698 <rcl_node_resolve_name+0x13c>
 8019662:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8019664:	a808      	add	r0, sp, #32
 8019666:	601c      	str	r4, [r3, #0]
 8019668:	f002 fafe 	bl	801bc68 <rcutils_string_map_fini>
 801966c:	4607      	mov	r7, r0
 801966e:	b1a8      	cbz	r0, 801969c <rcl_node_resolve_name+0x140>
 8019670:	f7fa ff58 	bl	8014524 <rcutils_get_error_string>
 8019674:	462c      	mov	r4, r5
 8019676:	f7fa ff6b 	bl	8014550 <rcutils_reset_error>
 801967a:	2701      	movs	r7, #1
 801967c:	e7c9      	b.n	8019612 <rcl_node_resolve_name+0xb6>
 801967e:	9c07      	ldr	r4, [sp, #28]
 8019680:	e7c2      	b.n	8019608 <rcl_node_resolve_name+0xac>
 8019682:	f7fa ff4f 	bl	8014524 <rcutils_get_error_string>
 8019686:	2701      	movs	r7, #1
 8019688:	f7fa ff62 	bl	8014550 <rcutils_reset_error>
 801968c:	e7bc      	b.n	8019608 <rcl_node_resolve_name+0xac>
 801968e:	f7fa ff49 	bl	8014524 <rcutils_get_error_string>
 8019692:	f7fa ff5d 	bl	8014550 <rcutils_reset_error>
 8019696:	e7bc      	b.n	8019612 <rcl_node_resolve_name+0xb6>
 8019698:	2767      	movs	r7, #103	@ 0x67
 801969a:	e7b5      	b.n	8019608 <rcl_node_resolve_name+0xac>
 801969c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801969e:	4659      	mov	r1, fp
 80196a0:	47d0      	blx	sl
 80196a2:	4659      	mov	r1, fp
 80196a4:	4638      	mov	r0, r7
 80196a6:	47d0      	blx	sl
 80196a8:	e799      	b.n	80195de <rcl_node_resolve_name+0x82>
 80196aa:	bf00      	nop

080196ac <exact_match_lookup>:
 80196ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196ae:	f102 0708 	add.w	r7, r2, #8
 80196b2:	460b      	mov	r3, r1
 80196b4:	4614      	mov	r4, r2
 80196b6:	4606      	mov	r6, r0
 80196b8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80196bc:	b085      	sub	sp, #20
 80196be:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80196c2:	4618      	mov	r0, r3
 80196c4:	4919      	ldr	r1, [pc, #100]	@ (801972c <exact_match_lookup+0x80>)
 80196c6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80196ca:	f002 f8af 	bl	801b82c <rcutils_join_path>
 80196ce:	7833      	ldrb	r3, [r6, #0]
 80196d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80196d2:	4605      	mov	r5, r0
 80196d4:	d023      	beq.n	801971e <exact_match_lookup+0x72>
 80196d6:	f104 030c 	add.w	r3, r4, #12
 80196da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80196de:	e88d 0003 	stmia.w	sp, {r0, r1}
 80196e2:	1c70      	adds	r0, r6, #1
 80196e4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80196e8:	f002 f8a6 	bl	801b838 <rcutils_to_native_path>
 80196ec:	4606      	mov	r6, r0
 80196ee:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80196f2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80196f6:	4631      	mov	r1, r6
 80196f8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80196fc:	4628      	mov	r0, r5
 80196fe:	f002 f895 	bl	801b82c <rcutils_join_path>
 8019702:	6862      	ldr	r2, [r4, #4]
 8019704:	6921      	ldr	r1, [r4, #16]
 8019706:	4603      	mov	r3, r0
 8019708:	4630      	mov	r0, r6
 801970a:	461e      	mov	r6, r3
 801970c:	4790      	blx	r2
 801970e:	4628      	mov	r0, r5
 8019710:	6863      	ldr	r3, [r4, #4]
 8019712:	6921      	ldr	r1, [r4, #16]
 8019714:	4798      	blx	r3
 8019716:	4635      	mov	r5, r6
 8019718:	4628      	mov	r0, r5
 801971a:	b005      	add	sp, #20
 801971c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801971e:	7873      	ldrb	r3, [r6, #1]
 8019720:	2b00      	cmp	r3, #0
 8019722:	d1d8      	bne.n	80196d6 <exact_match_lookup+0x2a>
 8019724:	4628      	mov	r0, r5
 8019726:	b005      	add	sp, #20
 8019728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801972a:	bf00      	nop
 801972c:	080221f0 	.word	0x080221f0

08019730 <rcl_get_secure_root>:
 8019730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019734:	b085      	sub	sp, #20
 8019736:	b168      	cbz	r0, 8019754 <rcl_get_secure_root+0x24>
 8019738:	4607      	mov	r7, r0
 801973a:	4608      	mov	r0, r1
 801973c:	460c      	mov	r4, r1
 801973e:	f7fa fee3 	bl	8014508 <rcutils_allocator_is_valid>
 8019742:	b138      	cbz	r0, 8019754 <rcl_get_secure_root+0x24>
 8019744:	2300      	movs	r3, #0
 8019746:	482d      	ldr	r0, [pc, #180]	@ (80197fc <rcl_get_secure_root+0xcc>)
 8019748:	9303      	str	r3, [sp, #12]
 801974a:	a903      	add	r1, sp, #12
 801974c:	f002 f854 	bl	801b7f8 <rcutils_get_env>
 8019750:	4605      	mov	r5, r0
 8019752:	b120      	cbz	r0, 801975e <rcl_get_secure_root+0x2e>
 8019754:	2500      	movs	r5, #0
 8019756:	4628      	mov	r0, r5
 8019758:	b005      	add	sp, #20
 801975a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801975e:	9b03      	ldr	r3, [sp, #12]
 8019760:	781a      	ldrb	r2, [r3, #0]
 8019762:	2a00      	cmp	r2, #0
 8019764:	d0f6      	beq.n	8019754 <rcl_get_secure_root+0x24>
 8019766:	f104 090c 	add.w	r9, r4, #12
 801976a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801976e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8019772:	4618      	mov	r0, r3
 8019774:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8019778:	f002 f980 	bl	801ba7c <rcutils_strdup>
 801977c:	4680      	mov	r8, r0
 801977e:	2800      	cmp	r0, #0
 8019780:	d0e8      	beq.n	8019754 <rcl_get_secure_root+0x24>
 8019782:	481f      	ldr	r0, [pc, #124]	@ (8019800 <rcl_get_secure_root+0xd0>)
 8019784:	9503      	str	r5, [sp, #12]
 8019786:	a903      	add	r1, sp, #12
 8019788:	f002 f836 	bl	801b7f8 <rcutils_get_env>
 801978c:	b160      	cbz	r0, 80197a8 <rcl_get_secure_root+0x78>
 801978e:	2600      	movs	r6, #0
 8019790:	6863      	ldr	r3, [r4, #4]
 8019792:	6921      	ldr	r1, [r4, #16]
 8019794:	4630      	mov	r0, r6
 8019796:	4798      	blx	r3
 8019798:	4640      	mov	r0, r8
 801979a:	6863      	ldr	r3, [r4, #4]
 801979c:	6921      	ldr	r1, [r4, #16]
 801979e:	4798      	blx	r3
 80197a0:	4628      	mov	r0, r5
 80197a2:	b005      	add	sp, #20
 80197a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80197a8:	9b03      	ldr	r3, [sp, #12]
 80197aa:	781e      	ldrb	r6, [r3, #0]
 80197ac:	b1f6      	cbz	r6, 80197ec <rcl_get_secure_root+0xbc>
 80197ae:	e899 0003 	ldmia.w	r9, {r0, r1}
 80197b2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80197b6:	4618      	mov	r0, r3
 80197b8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80197bc:	f002 f95e 	bl	801ba7c <rcutils_strdup>
 80197c0:	4606      	mov	r6, r0
 80197c2:	2800      	cmp	r0, #0
 80197c4:	d0e3      	beq.n	801978e <rcl_get_secure_root+0x5e>
 80197c6:	4622      	mov	r2, r4
 80197c8:	4641      	mov	r1, r8
 80197ca:	f7ff ff6f 	bl	80196ac <exact_match_lookup>
 80197ce:	4605      	mov	r5, r0
 80197d0:	2d00      	cmp	r5, #0
 80197d2:	d0dd      	beq.n	8019790 <rcl_get_secure_root+0x60>
 80197d4:	4628      	mov	r0, r5
 80197d6:	f002 f827 	bl	801b828 <rcutils_is_directory>
 80197da:	4603      	mov	r3, r0
 80197dc:	2800      	cmp	r0, #0
 80197de:	d1d7      	bne.n	8019790 <rcl_get_secure_root+0x60>
 80197e0:	4628      	mov	r0, r5
 80197e2:	6921      	ldr	r1, [r4, #16]
 80197e4:	461d      	mov	r5, r3
 80197e6:	6863      	ldr	r3, [r4, #4]
 80197e8:	4798      	blx	r3
 80197ea:	e7d1      	b.n	8019790 <rcl_get_secure_root+0x60>
 80197ec:	4622      	mov	r2, r4
 80197ee:	4638      	mov	r0, r7
 80197f0:	4641      	mov	r1, r8
 80197f2:	f7ff ff5b 	bl	80196ac <exact_match_lookup>
 80197f6:	4605      	mov	r5, r0
 80197f8:	e7ea      	b.n	80197d0 <rcl_get_secure_root+0xa0>
 80197fa:	bf00      	nop
 80197fc:	080221fc 	.word	0x080221fc
 8019800:	08022214 	.word	0x08022214

08019804 <rcl_get_security_options_from_environment>:
 8019804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019808:	b082      	sub	sp, #8
 801980a:	2300      	movs	r3, #0
 801980c:	4606      	mov	r6, r0
 801980e:	460f      	mov	r7, r1
 8019810:	4820      	ldr	r0, [pc, #128]	@ (8019894 <rcl_get_security_options_from_environment+0x90>)
 8019812:	9301      	str	r3, [sp, #4]
 8019814:	a901      	add	r1, sp, #4
 8019816:	4690      	mov	r8, r2
 8019818:	f001 ffee 	bl	801b7f8 <rcutils_get_env>
 801981c:	b120      	cbz	r0, 8019828 <rcl_get_security_options_from_environment+0x24>
 801981e:	2501      	movs	r5, #1
 8019820:	4628      	mov	r0, r5
 8019822:	b002      	add	sp, #8
 8019824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019828:	491b      	ldr	r1, [pc, #108]	@ (8019898 <rcl_get_security_options_from_environment+0x94>)
 801982a:	4604      	mov	r4, r0
 801982c:	9801      	ldr	r0, [sp, #4]
 801982e:	f7e6 fccf 	bl	80001d0 <strcmp>
 8019832:	4605      	mov	r5, r0
 8019834:	b9e8      	cbnz	r0, 8019872 <rcl_get_security_options_from_environment+0x6e>
 8019836:	9001      	str	r0, [sp, #4]
 8019838:	f1b8 0f00 	cmp.w	r8, #0
 801983c:	d020      	beq.n	8019880 <rcl_get_security_options_from_environment+0x7c>
 801983e:	4817      	ldr	r0, [pc, #92]	@ (801989c <rcl_get_security_options_from_environment+0x98>)
 8019840:	a901      	add	r1, sp, #4
 8019842:	f001 ffd9 	bl	801b7f8 <rcutils_get_env>
 8019846:	2800      	cmp	r0, #0
 8019848:	d1e9      	bne.n	801981e <rcl_get_security_options_from_environment+0x1a>
 801984a:	4915      	ldr	r1, [pc, #84]	@ (80198a0 <rcl_get_security_options_from_environment+0x9c>)
 801984c:	9801      	ldr	r0, [sp, #4]
 801984e:	f7e6 fcbf 	bl	80001d0 <strcmp>
 8019852:	fab0 f080 	clz	r0, r0
 8019856:	0940      	lsrs	r0, r0, #5
 8019858:	f888 0000 	strb.w	r0, [r8]
 801985c:	4639      	mov	r1, r7
 801985e:	4630      	mov	r0, r6
 8019860:	f7ff ff66 	bl	8019730 <rcl_get_secure_root>
 8019864:	b170      	cbz	r0, 8019884 <rcl_get_security_options_from_environment+0x80>
 8019866:	f8c8 0004 	str.w	r0, [r8, #4]
 801986a:	4628      	mov	r0, r5
 801986c:	b002      	add	sp, #8
 801986e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019872:	4625      	mov	r5, r4
 8019874:	4628      	mov	r0, r5
 8019876:	f888 4000 	strb.w	r4, [r8]
 801987a:	b002      	add	sp, #8
 801987c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019880:	250b      	movs	r5, #11
 8019882:	e7cd      	b.n	8019820 <rcl_get_security_options_from_environment+0x1c>
 8019884:	f898 5000 	ldrb.w	r5, [r8]
 8019888:	f1a5 0501 	sub.w	r5, r5, #1
 801988c:	fab5 f585 	clz	r5, r5
 8019890:	096d      	lsrs	r5, r5, #5
 8019892:	e7c5      	b.n	8019820 <rcl_get_security_options_from_environment+0x1c>
 8019894:	080221b4 	.word	0x080221b4
 8019898:	080221c8 	.word	0x080221c8
 801989c:	080221d0 	.word	0x080221d0
 80198a0:	080221e8 	.word	0x080221e8

080198a4 <rcl_service_get_rmw_handle>:
 80198a4:	b118      	cbz	r0, 80198ae <rcl_service_get_rmw_handle+0xa>
 80198a6:	6800      	ldr	r0, [r0, #0]
 80198a8:	b108      	cbz	r0, 80198ae <rcl_service_get_rmw_handle+0xa>
 80198aa:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80198ae:	4770      	bx	lr

080198b0 <rcl_take_request>:
 80198b0:	b570      	push	{r4, r5, r6, lr}
 80198b2:	468e      	mov	lr, r1
 80198b4:	460c      	mov	r4, r1
 80198b6:	4616      	mov	r6, r2
 80198b8:	4605      	mov	r5, r0
 80198ba:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80198be:	b08c      	sub	sp, #48	@ 0x30
 80198c0:	f10d 0c18 	add.w	ip, sp, #24
 80198c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80198c8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80198cc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80198d0:	b30d      	cbz	r5, 8019916 <rcl_take_request+0x66>
 80198d2:	682b      	ldr	r3, [r5, #0]
 80198d4:	b1fb      	cbz	r3, 8019916 <rcl_take_request+0x66>
 80198d6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80198da:	b1e0      	cbz	r0, 8019916 <rcl_take_request+0x66>
 80198dc:	b336      	cbz	r6, 801992c <rcl_take_request+0x7c>
 80198de:	2300      	movs	r3, #0
 80198e0:	f88d 3007 	strb.w	r3, [sp, #7]
 80198e4:	4632      	mov	r2, r6
 80198e6:	f10d 0307 	add.w	r3, sp, #7
 80198ea:	a902      	add	r1, sp, #8
 80198ec:	f003 f8f4 	bl	801cad8 <rmw_take_request>
 80198f0:	4605      	mov	r5, r0
 80198f2:	b198      	cbz	r0, 801991c <rcl_take_request+0x6c>
 80198f4:	280a      	cmp	r0, #10
 80198f6:	bf18      	it	ne
 80198f8:	2501      	movne	r5, #1
 80198fa:	f10d 0e18 	add.w	lr, sp, #24
 80198fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019902:	46a4      	mov	ip, r4
 8019904:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019908:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801990c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8019910:	4628      	mov	r0, r5
 8019912:	b00c      	add	sp, #48	@ 0x30
 8019914:	bd70      	pop	{r4, r5, r6, pc}
 8019916:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801991a:	e7ee      	b.n	80198fa <rcl_take_request+0x4a>
 801991c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8019920:	f240 2359 	movw	r3, #601	@ 0x259
 8019924:	2a00      	cmp	r2, #0
 8019926:	bf08      	it	eq
 8019928:	461d      	moveq	r5, r3
 801992a:	e7e6      	b.n	80198fa <rcl_take_request+0x4a>
 801992c:	250b      	movs	r5, #11
 801992e:	e7e4      	b.n	80198fa <rcl_take_request+0x4a>

08019930 <rcl_send_response>:
 8019930:	b168      	cbz	r0, 801994e <rcl_send_response+0x1e>
 8019932:	6800      	ldr	r0, [r0, #0]
 8019934:	b158      	cbz	r0, 801994e <rcl_send_response+0x1e>
 8019936:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801993a:	b140      	cbz	r0, 801994e <rcl_send_response+0x1e>
 801993c:	b151      	cbz	r1, 8019954 <rcl_send_response+0x24>
 801993e:	b510      	push	{r4, lr}
 8019940:	b152      	cbz	r2, 8019958 <rcl_send_response+0x28>
 8019942:	f003 f927 	bl	801cb94 <rmw_send_response>
 8019946:	3800      	subs	r0, #0
 8019948:	bf18      	it	ne
 801994a:	2001      	movne	r0, #1
 801994c:	bd10      	pop	{r4, pc}
 801994e:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8019952:	4770      	bx	lr
 8019954:	200b      	movs	r0, #11
 8019956:	4770      	bx	lr
 8019958:	200b      	movs	r0, #11
 801995a:	bd10      	pop	{r4, pc}

0801995c <rcl_service_is_valid>:
 801995c:	b130      	cbz	r0, 801996c <rcl_service_is_valid+0x10>
 801995e:	6800      	ldr	r0, [r0, #0]
 8019960:	b120      	cbz	r0, 801996c <rcl_service_is_valid+0x10>
 8019962:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8019966:	3800      	subs	r0, #0
 8019968:	bf18      	it	ne
 801996a:	2001      	movne	r0, #1
 801996c:	4770      	bx	lr
 801996e:	bf00      	nop

08019970 <rcl_get_zero_initialized_subscription>:
 8019970:	4b01      	ldr	r3, [pc, #4]	@ (8019978 <rcl_get_zero_initialized_subscription+0x8>)
 8019972:	6818      	ldr	r0, [r3, #0]
 8019974:	4770      	bx	lr
 8019976:	bf00      	nop
 8019978:	08022234 	.word	0x08022234

0801997c <rcl_subscription_init>:
 801997c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019980:	b089      	sub	sp, #36	@ 0x24
 8019982:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8019984:	b1d6      	cbz	r6, 80199bc <rcl_subscription_init+0x40>
 8019986:	f106 0950 	add.w	r9, r6, #80	@ 0x50
 801998a:	4604      	mov	r4, r0
 801998c:	4648      	mov	r0, r9
 801998e:	460d      	mov	r5, r1
 8019990:	4690      	mov	r8, r2
 8019992:	461f      	mov	r7, r3
 8019994:	f7fa fdb8 	bl	8014508 <rcutils_allocator_is_valid>
 8019998:	b180      	cbz	r0, 80199bc <rcl_subscription_init+0x40>
 801999a:	b17c      	cbz	r4, 80199bc <rcl_subscription_init+0x40>
 801999c:	4628      	mov	r0, r5
 801999e:	f7ff fd89 	bl	80194b4 <rcl_node_is_valid>
 80199a2:	2800      	cmp	r0, #0
 80199a4:	d054      	beq.n	8019a50 <rcl_subscription_init+0xd4>
 80199a6:	f1b8 0f00 	cmp.w	r8, #0
 80199aa:	d007      	beq.n	80199bc <rcl_subscription_init+0x40>
 80199ac:	b137      	cbz	r7, 80199bc <rcl_subscription_init+0x40>
 80199ae:	6823      	ldr	r3, [r4, #0]
 80199b0:	b14b      	cbz	r3, 80199c6 <rcl_subscription_init+0x4a>
 80199b2:	2764      	movs	r7, #100	@ 0x64
 80199b4:	4638      	mov	r0, r7
 80199b6:	b009      	add	sp, #36	@ 0x24
 80199b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199bc:	270b      	movs	r7, #11
 80199be:	4638      	mov	r0, r7
 80199c0:	b009      	add	sp, #36	@ 0x24
 80199c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80199c6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80199ca:	aa07      	add	r2, sp, #28
 80199cc:	9205      	str	r2, [sp, #20]
 80199ce:	9307      	str	r3, [sp, #28]
 80199d0:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 80199d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80199d8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80199dc:	4639      	mov	r1, r7
 80199de:	e899 000c 	ldmia.w	r9, {r2, r3}
 80199e2:	4628      	mov	r0, r5
 80199e4:	f7ff fdba 	bl	801955c <rcl_node_resolve_name>
 80199e8:	4607      	mov	r7, r0
 80199ea:	2800      	cmp	r0, #0
 80199ec:	d15f      	bne.n	8019aae <rcl_subscription_init+0x132>
 80199ee:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	@ 0x5c
 80199f2:	21c8      	movs	r1, #200	@ 0xc8
 80199f4:	2001      	movs	r0, #1
 80199f6:	4798      	blx	r3
 80199f8:	6020      	str	r0, [r4, #0]
 80199fa:	2800      	cmp	r0, #0
 80199fc:	d05d      	beq.n	8019aba <rcl_subscription_init+0x13e>
 80199fe:	4628      	mov	r0, r5
 8019a00:	f7ff fd7a 	bl	80194f8 <rcl_node_get_rmw_handle>
 8019a04:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 8019a08:	9300      	str	r3, [sp, #0]
 8019a0a:	9a07      	ldr	r2, [sp, #28]
 8019a0c:	6827      	ldr	r7, [r4, #0]
 8019a0e:	4641      	mov	r1, r8
 8019a10:	4633      	mov	r3, r6
 8019a12:	f003 f9a9 	bl	801cd68 <rmw_create_subscription>
 8019a16:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
 8019a1a:	6827      	ldr	r7, [r4, #0]
 8019a1c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8019a20:	b348      	cbz	r0, 8019a76 <rcl_subscription_init+0xfa>
 8019a22:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8019a26:	f003 fa85 	bl	801cf34 <rmw_subscription_get_actual_qos>
 8019a2a:	4607      	mov	r7, r0
 8019a2c:	b9a8      	cbnz	r0, 8019a5a <rcl_subscription_init+0xde>
 8019a2e:	6820      	ldr	r0, [r4, #0]
 8019a30:	f896 3048 	ldrb.w	r3, [r6, #72]	@ 0x48
 8019a34:	f880 30b8 	strb.w	r3, [r0, #184]	@ 0xb8
 8019a38:	2270      	movs	r2, #112	@ 0x70
 8019a3a:	4631      	mov	r1, r6
 8019a3c:	f006 fe87 	bl	802074e <memcpy>
 8019a40:	9807      	ldr	r0, [sp, #28]
 8019a42:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8019a44:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8019a46:	4798      	blx	r3
 8019a48:	4638      	mov	r0, r7
 8019a4a:	b009      	add	sp, #36	@ 0x24
 8019a4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a50:	27c8      	movs	r7, #200	@ 0xc8
 8019a52:	4638      	mov	r0, r7
 8019a54:	b009      	add	sp, #36	@ 0x24
 8019a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019a5a:	6827      	ldr	r7, [r4, #0]
 8019a5c:	b32f      	cbz	r7, 8019aaa <rcl_subscription_init+0x12e>
 8019a5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8019a62:	b14b      	cbz	r3, 8019a78 <rcl_subscription_init+0xfc>
 8019a64:	4628      	mov	r0, r5
 8019a66:	f7ff fd47 	bl	80194f8 <rcl_node_get_rmw_handle>
 8019a6a:	6823      	ldr	r3, [r4, #0]
 8019a6c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8019a70:	f003 fa62 	bl	801cf38 <rmw_destroy_subscription>
 8019a74:	6827      	ldr	r7, [r4, #0]
 8019a76:	b197      	cbz	r7, 8019a9e <rcl_subscription_init+0x122>
 8019a78:	f107 0550 	add.w	r5, r7, #80	@ 0x50
 8019a7c:	4628      	mov	r0, r5
 8019a7e:	f7fa fd43 	bl	8014508 <rcutils_allocator_is_valid>
 8019a82:	b158      	cbz	r0, 8019a9c <rcl_subscription_init+0x120>
 8019a84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8019a86:	b148      	cbz	r0, 8019a9c <rcl_subscription_init+0x120>
 8019a88:	4629      	mov	r1, r5
 8019a8a:	f002 f985 	bl	801bd98 <rmw_subscription_content_filter_options_fini>
 8019a8e:	4605      	mov	r5, r0
 8019a90:	b9b8      	cbnz	r0, 8019ac2 <rcl_subscription_init+0x146>
 8019a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019a94:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8019a96:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8019a98:	4798      	blx	r3
 8019a9a:	66fd      	str	r5, [r7, #108]	@ 0x6c
 8019a9c:	6827      	ldr	r7, [r4, #0]
 8019a9e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8019aa0:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 8019aa2:	4638      	mov	r0, r7
 8019aa4:	4798      	blx	r3
 8019aa6:	2300      	movs	r3, #0
 8019aa8:	6023      	str	r3, [r4, #0]
 8019aaa:	2701      	movs	r7, #1
 8019aac:	e7c8      	b.n	8019a40 <rcl_subscription_init+0xc4>
 8019aae:	2867      	cmp	r0, #103	@ 0x67
 8019ab0:	d0c6      	beq.n	8019a40 <rcl_subscription_init+0xc4>
 8019ab2:	2869      	cmp	r0, #105	@ 0x69
 8019ab4:	d003      	beq.n	8019abe <rcl_subscription_init+0x142>
 8019ab6:	280a      	cmp	r0, #10
 8019ab8:	d1f7      	bne.n	8019aaa <rcl_subscription_init+0x12e>
 8019aba:	270a      	movs	r7, #10
 8019abc:	e7c0      	b.n	8019a40 <rcl_subscription_init+0xc4>
 8019abe:	2767      	movs	r7, #103	@ 0x67
 8019ac0:	e7be      	b.n	8019a40 <rcl_subscription_init+0xc4>
 8019ac2:	f7ff f8ff 	bl	8018cc4 <rcl_convert_rmw_ret_to_rcl_ret>
 8019ac6:	6827      	ldr	r7, [r4, #0]
 8019ac8:	e7e9      	b.n	8019a9e <rcl_subscription_init+0x122>
 8019aca:	bf00      	nop

08019acc <rcl_subscription_get_default_options>:
 8019acc:	b570      	push	{r4, r5, r6, lr}
 8019ace:	4d14      	ldr	r5, [pc, #80]	@ (8019b20 <rcl_subscription_get_default_options+0x54>)
 8019ad0:	4914      	ldr	r1, [pc, #80]	@ (8019b24 <rcl_subscription_get_default_options+0x58>)
 8019ad2:	b08a      	sub	sp, #40	@ 0x28
 8019ad4:	4604      	mov	r4, r0
 8019ad6:	2250      	movs	r2, #80	@ 0x50
 8019ad8:	4628      	mov	r0, r5
 8019ada:	f006 fe38 	bl	802074e <memcpy>
 8019ade:	a804      	add	r0, sp, #16
 8019ae0:	f7fa fd04 	bl	80144ec <rcutils_get_default_allocator>
 8019ae4:	f10d 0c10 	add.w	ip, sp, #16
 8019ae8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019aec:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 8019af0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019af4:	466e      	mov	r6, sp
 8019af6:	f8dc 3000 	ldr.w	r3, [ip]
 8019afa:	f8ce 3000 	str.w	r3, [lr]
 8019afe:	4630      	mov	r0, r6
 8019b00:	f002 f964 	bl	801bdcc <rmw_get_default_subscription_options>
 8019b04:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8019b08:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 8019b0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019b10:	2270      	movs	r2, #112	@ 0x70
 8019b12:	4629      	mov	r1, r5
 8019b14:	4620      	mov	r0, r4
 8019b16:	f006 fe1a 	bl	802074e <memcpy>
 8019b1a:	4620      	mov	r0, r4
 8019b1c:	b00a      	add	sp, #40	@ 0x28
 8019b1e:	bd70      	pop	{r4, r5, r6, pc}
 8019b20:	20016448 	.word	0x20016448
 8019b24:	08022238 	.word	0x08022238

08019b28 <rcl_take>:
 8019b28:	2800      	cmp	r0, #0
 8019b2a:	d04a      	beq.n	8019bc2 <rcl_take+0x9a>
 8019b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b30:	4604      	mov	r4, r0
 8019b32:	6800      	ldr	r0, [r0, #0]
 8019b34:	b0a4      	sub	sp, #144	@ 0x90
 8019b36:	2800      	cmp	r0, #0
 8019b38:	d03b      	beq.n	8019bb2 <rcl_take+0x8a>
 8019b3a:	461f      	mov	r7, r3
 8019b3c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d036      	beq.n	8019bb2 <rcl_take+0x8a>
 8019b44:	460e      	mov	r6, r1
 8019b46:	2900      	cmp	r1, #0
 8019b48:	d039      	beq.n	8019bbe <rcl_take+0x96>
 8019b4a:	4615      	mov	r5, r2
 8019b4c:	2a00      	cmp	r2, #0
 8019b4e:	d03c      	beq.n	8019bca <rcl_take+0xa2>
 8019b50:	a802      	add	r0, sp, #8
 8019b52:	f002 f9c5 	bl	801bee0 <rmw_get_zero_initialized_message_info>
 8019b56:	f10d 0c08 	add.w	ip, sp, #8
 8019b5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019b5e:	46ae      	mov	lr, r5
 8019b60:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019b64:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019b68:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019b6c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019b70:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019b74:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8019b78:	f04f 0800 	mov.w	r8, #0
 8019b7c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8019b80:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8019b84:	6822      	ldr	r2, [r4, #0]
 8019b86:	462b      	mov	r3, r5
 8019b88:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8019b8c:	9700      	str	r7, [sp, #0]
 8019b8e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8019b92:	4631      	mov	r1, r6
 8019b94:	f003 fa30 	bl	801cff8 <rmw_take_with_info>
 8019b98:	4603      	mov	r3, r0
 8019b9a:	b9c0      	cbnz	r0, 8019bce <rcl_take+0xa6>
 8019b9c:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8019ba0:	f240 1291 	movw	r2, #401	@ 0x191
 8019ba4:	2900      	cmp	r1, #0
 8019ba6:	bf08      	it	eq
 8019ba8:	4613      	moveq	r3, r2
 8019baa:	4618      	mov	r0, r3
 8019bac:	b024      	add	sp, #144	@ 0x90
 8019bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bb2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8019bb6:	4618      	mov	r0, r3
 8019bb8:	b024      	add	sp, #144	@ 0x90
 8019bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bbe:	230b      	movs	r3, #11
 8019bc0:	e7f3      	b.n	8019baa <rcl_take+0x82>
 8019bc2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8019bc6:	4618      	mov	r0, r3
 8019bc8:	4770      	bx	lr
 8019bca:	ad14      	add	r5, sp, #80	@ 0x50
 8019bcc:	e7c0      	b.n	8019b50 <rcl_take+0x28>
 8019bce:	f7ff f879 	bl	8018cc4 <rcl_convert_rmw_ret_to_rcl_ret>
 8019bd2:	4603      	mov	r3, r0
 8019bd4:	e7e9      	b.n	8019baa <rcl_take+0x82>
 8019bd6:	bf00      	nop

08019bd8 <rcl_subscription_get_rmw_handle>:
 8019bd8:	b118      	cbz	r0, 8019be2 <rcl_subscription_get_rmw_handle+0xa>
 8019bda:	6800      	ldr	r0, [r0, #0]
 8019bdc:	b108      	cbz	r0, 8019be2 <rcl_subscription_get_rmw_handle+0xa>
 8019bde:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8019be2:	4770      	bx	lr

08019be4 <rcl_subscription_is_valid>:
 8019be4:	b130      	cbz	r0, 8019bf4 <rcl_subscription_is_valid+0x10>
 8019be6:	6800      	ldr	r0, [r0, #0]
 8019be8:	b120      	cbz	r0, 8019bf4 <rcl_subscription_is_valid+0x10>
 8019bea:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8019bee:	3800      	subs	r0, #0
 8019bf0:	bf18      	it	ne
 8019bf2:	2001      	movne	r0, #1
 8019bf4:	4770      	bx	lr
 8019bf6:	bf00      	nop

08019bf8 <rcl_get_system_time>:
 8019bf8:	4608      	mov	r0, r1
 8019bfa:	f7fa bcc5 	b.w	8014588 <rcutils_system_time_now>
 8019bfe:	bf00      	nop

08019c00 <rcl_get_steady_time>:
 8019c00:	4608      	mov	r0, r1
 8019c02:	f7fa bce9 	b.w	80145d8 <rcutils_steady_time_now>
 8019c06:	bf00      	nop

08019c08 <rcl_get_ros_time>:
 8019c08:	7a03      	ldrb	r3, [r0, #8]
 8019c0a:	b510      	push	{r4, lr}
 8019c0c:	460c      	mov	r4, r1
 8019c0e:	b133      	cbz	r3, 8019c1e <rcl_get_ros_time+0x16>
 8019c10:	2105      	movs	r1, #5
 8019c12:	f001 fd4d 	bl	801b6b0 <__atomic_load_8>
 8019c16:	e9c4 0100 	strd	r0, r1, [r4]
 8019c1a:	2000      	movs	r0, #0
 8019c1c:	bd10      	pop	{r4, pc}
 8019c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019c22:	4608      	mov	r0, r1
 8019c24:	f7fa bcb0 	b.w	8014588 <rcutils_system_time_now>

08019c28 <rcl_clock_init>:
 8019c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c2a:	4605      	mov	r5, r0
 8019c2c:	4610      	mov	r0, r2
 8019c2e:	4614      	mov	r4, r2
 8019c30:	460e      	mov	r6, r1
 8019c32:	f7fa fc69 	bl	8014508 <rcutils_allocator_is_valid>
 8019c36:	b128      	cbz	r0, 8019c44 <rcl_clock_init+0x1c>
 8019c38:	2d03      	cmp	r5, #3
 8019c3a:	d803      	bhi.n	8019c44 <rcl_clock_init+0x1c>
 8019c3c:	e8df f005 	tbb	[pc, r5]
 8019c40:	06532e1d 	.word	0x06532e1d
 8019c44:	f04f 0c0b 	mov.w	ip, #11
 8019c48:	4660      	mov	r0, ip
 8019c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c4c:	2e00      	cmp	r6, #0
 8019c4e:	d0f9      	beq.n	8019c44 <rcl_clock_init+0x1c>
 8019c50:	2c00      	cmp	r4, #0
 8019c52:	d0f7      	beq.n	8019c44 <rcl_clock_init+0x1c>
 8019c54:	2300      	movs	r3, #0
 8019c56:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8019c5a:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8019d10 <rcl_clock_init+0xe8>
 8019c5e:	6133      	str	r3, [r6, #16]
 8019c60:	f106 0514 	add.w	r5, r6, #20
 8019c64:	469c      	mov	ip, r3
 8019c66:	2703      	movs	r7, #3
 8019c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019c6c:	6823      	ldr	r3, [r4, #0]
 8019c6e:	602b      	str	r3, [r5, #0]
 8019c70:	7037      	strb	r7, [r6, #0]
 8019c72:	f8c6 e00c 	str.w	lr, [r6, #12]
 8019c76:	4660      	mov	r0, ip
 8019c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c7a:	2e00      	cmp	r6, #0
 8019c7c:	d0e2      	beq.n	8019c44 <rcl_clock_init+0x1c>
 8019c7e:	2300      	movs	r3, #0
 8019c80:	7033      	strb	r3, [r6, #0]
 8019c82:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8019c86:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8019c8a:	469c      	mov	ip, r3
 8019c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019c8e:	f106 0514 	add.w	r5, r6, #20
 8019c92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019c94:	6823      	ldr	r3, [r4, #0]
 8019c96:	602b      	str	r3, [r5, #0]
 8019c98:	4660      	mov	r0, ip
 8019c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c9c:	2e00      	cmp	r6, #0
 8019c9e:	d0d1      	beq.n	8019c44 <rcl_clock_init+0x1c>
 8019ca0:	2c00      	cmp	r4, #0
 8019ca2:	d0cf      	beq.n	8019c44 <rcl_clock_init+0x1c>
 8019ca4:	2700      	movs	r7, #0
 8019ca6:	7037      	strb	r7, [r6, #0]
 8019ca8:	46a4      	mov	ip, r4
 8019caa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019cae:	f106 0514 	add.w	r5, r6, #20
 8019cb2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8019cb6:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8019cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019cbc:	f8dc 3000 	ldr.w	r3, [ip]
 8019cc0:	602b      	str	r3, [r5, #0]
 8019cc2:	6921      	ldr	r1, [r4, #16]
 8019cc4:	6823      	ldr	r3, [r4, #0]
 8019cc6:	2010      	movs	r0, #16
 8019cc8:	4798      	blx	r3
 8019cca:	6130      	str	r0, [r6, #16]
 8019ccc:	b1d0      	cbz	r0, 8019d04 <rcl_clock_init+0xdc>
 8019cce:	2200      	movs	r2, #0
 8019cd0:	2300      	movs	r3, #0
 8019cd2:	e9c0 2300 	strd	r2, r3, [r0]
 8019cd6:	2301      	movs	r3, #1
 8019cd8:	7207      	strb	r7, [r0, #8]
 8019cda:	4a0c      	ldr	r2, [pc, #48]	@ (8019d0c <rcl_clock_init+0xe4>)
 8019cdc:	7033      	strb	r3, [r6, #0]
 8019cde:	46bc      	mov	ip, r7
 8019ce0:	60f2      	str	r2, [r6, #12]
 8019ce2:	4660      	mov	r0, ip
 8019ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019ce6:	2e00      	cmp	r6, #0
 8019ce8:	d0ac      	beq.n	8019c44 <rcl_clock_init+0x1c>
 8019cea:	2c00      	cmp	r4, #0
 8019cec:	d0aa      	beq.n	8019c44 <rcl_clock_init+0x1c>
 8019cee:	2300      	movs	r3, #0
 8019cf0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8019cf4:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8019d14 <rcl_clock_init+0xec>
 8019cf8:	6133      	str	r3, [r6, #16]
 8019cfa:	f106 0514 	add.w	r5, r6, #20
 8019cfe:	469c      	mov	ip, r3
 8019d00:	2702      	movs	r7, #2
 8019d02:	e7b1      	b.n	8019c68 <rcl_clock_init+0x40>
 8019d04:	f04f 0c0a 	mov.w	ip, #10
 8019d08:	e79e      	b.n	8019c48 <rcl_clock_init+0x20>
 8019d0a:	bf00      	nop
 8019d0c:	08019c09 	.word	0x08019c09
 8019d10:	08019c01 	.word	0x08019c01
 8019d14:	08019bf9 	.word	0x08019bf9

08019d18 <rcl_clock_get_now>:
 8019d18:	b140      	cbz	r0, 8019d2c <rcl_clock_get_now+0x14>
 8019d1a:	b139      	cbz	r1, 8019d2c <rcl_clock_get_now+0x14>
 8019d1c:	7803      	ldrb	r3, [r0, #0]
 8019d1e:	b11b      	cbz	r3, 8019d28 <rcl_clock_get_now+0x10>
 8019d20:	68c3      	ldr	r3, [r0, #12]
 8019d22:	b10b      	cbz	r3, 8019d28 <rcl_clock_get_now+0x10>
 8019d24:	6900      	ldr	r0, [r0, #16]
 8019d26:	4718      	bx	r3
 8019d28:	2001      	movs	r0, #1
 8019d2a:	4770      	bx	lr
 8019d2c:	200b      	movs	r0, #11
 8019d2e:	4770      	bx	lr

08019d30 <rcl_timer_call>:
 8019d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d34:	b087      	sub	sp, #28
 8019d36:	2800      	cmp	r0, #0
 8019d38:	d06d      	beq.n	8019e16 <rcl_timer_call+0xe6>
 8019d3a:	6803      	ldr	r3, [r0, #0]
 8019d3c:	4604      	mov	r4, r0
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d063      	beq.n	8019e0a <rcl_timer_call+0xda>
 8019d42:	f3bf 8f5b 	dmb	ish
 8019d46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019d4a:	f3bf 8f5b 	dmb	ish
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d150      	bne.n	8019df4 <rcl_timer_call+0xc4>
 8019d52:	6803      	ldr	r3, [r0, #0]
 8019d54:	a904      	add	r1, sp, #16
 8019d56:	6818      	ldr	r0, [r3, #0]
 8019d58:	f7ff ffde 	bl	8019d18 <rcl_clock_get_now>
 8019d5c:	4605      	mov	r5, r0
 8019d5e:	2800      	cmp	r0, #0
 8019d60:	d14a      	bne.n	8019df8 <rcl_timer_call+0xc8>
 8019d62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	db4a      	blt.n	8019e00 <rcl_timer_call+0xd0>
 8019d6a:	6820      	ldr	r0, [r4, #0]
 8019d6c:	f04f 0a05 	mov.w	sl, #5
 8019d70:	f8cd a000 	str.w	sl, [sp]
 8019d74:	3020      	adds	r0, #32
 8019d76:	f001 fd07 	bl	801b788 <__atomic_exchange_8>
 8019d7a:	6823      	ldr	r3, [r4, #0]
 8019d7c:	f3bf 8f5b 	dmb	ish
 8019d80:	4680      	mov	r8, r0
 8019d82:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8019d86:	f3bf 8f5b 	dmb	ish
 8019d8a:	6820      	ldr	r0, [r4, #0]
 8019d8c:	4689      	mov	r9, r1
 8019d8e:	3028      	adds	r0, #40	@ 0x28
 8019d90:	4651      	mov	r1, sl
 8019d92:	f001 fc8d 	bl	801b6b0 <__atomic_load_8>
 8019d96:	4606      	mov	r6, r0
 8019d98:	6820      	ldr	r0, [r4, #0]
 8019d9a:	460f      	mov	r7, r1
 8019d9c:	3018      	adds	r0, #24
 8019d9e:	4651      	mov	r1, sl
 8019da0:	f001 fc86 	bl	801b6b0 <__atomic_load_8>
 8019da4:	1836      	adds	r6, r6, r0
 8019da6:	4602      	mov	r2, r0
 8019da8:	4682      	mov	sl, r0
 8019daa:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 8019dae:	eb47 0701 	adc.w	r7, r7, r1
 8019db2:	4286      	cmp	r6, r0
 8019db4:	460b      	mov	r3, r1
 8019db6:	eb77 010c 	sbcs.w	r1, r7, ip
 8019dba:	da04      	bge.n	8019dc6 <rcl_timer_call+0x96>
 8019dbc:	ea53 0102 	orrs.w	r1, r3, r2
 8019dc0:	d12e      	bne.n	8019e20 <rcl_timer_call+0xf0>
 8019dc2:	4606      	mov	r6, r0
 8019dc4:	4667      	mov	r7, ip
 8019dc6:	6820      	ldr	r0, [r4, #0]
 8019dc8:	2105      	movs	r1, #5
 8019dca:	4632      	mov	r2, r6
 8019dcc:	463b      	mov	r3, r7
 8019dce:	3028      	adds	r0, #40	@ 0x28
 8019dd0:	9100      	str	r1, [sp, #0]
 8019dd2:	f001 fca3 	bl	801b71c <__atomic_store_8>
 8019dd6:	f1bb 0f00 	cmp.w	fp, #0
 8019dda:	d00d      	beq.n	8019df8 <rcl_timer_call+0xc8>
 8019ddc:	9a04      	ldr	r2, [sp, #16]
 8019dde:	9b05      	ldr	r3, [sp, #20]
 8019de0:	ebb2 0208 	subs.w	r2, r2, r8
 8019de4:	4620      	mov	r0, r4
 8019de6:	eb63 0309 	sbc.w	r3, r3, r9
 8019dea:	47d8      	blx	fp
 8019dec:	4628      	mov	r0, r5
 8019dee:	b007      	add	sp, #28
 8019df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019df4:	f240 3521 	movw	r5, #801	@ 0x321
 8019df8:	4628      	mov	r0, r5
 8019dfa:	b007      	add	sp, #28
 8019dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e00:	2501      	movs	r5, #1
 8019e02:	4628      	mov	r0, r5
 8019e04:	b007      	add	sp, #28
 8019e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e0a:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8019e0e:	4628      	mov	r0, r5
 8019e10:	b007      	add	sp, #28
 8019e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e16:	250b      	movs	r5, #11
 8019e18:	4628      	mov	r0, r5
 8019e1a:	b007      	add	sp, #28
 8019e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e20:	1b80      	subs	r0, r0, r6
 8019e22:	eb6c 0107 	sbc.w	r1, ip, r7
 8019e26:	3801      	subs	r0, #1
 8019e28:	f161 0100 	sbc.w	r1, r1, #0
 8019e2c:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8019e30:	f7e6 fc42 	bl	80006b8 <__aeabi_ldivmod>
 8019e34:	9b02      	ldr	r3, [sp, #8]
 8019e36:	3001      	adds	r0, #1
 8019e38:	f141 0100 	adc.w	r1, r1, #0
 8019e3c:	fb00 f303 	mul.w	r3, r0, r3
 8019e40:	fb01 330a 	mla	r3, r1, sl, r3
 8019e44:	fba0 0a0a 	umull	r0, sl, r0, sl
 8019e48:	1986      	adds	r6, r0, r6
 8019e4a:	4453      	add	r3, sl
 8019e4c:	eb43 0707 	adc.w	r7, r3, r7
 8019e50:	e7b9      	b.n	8019dc6 <rcl_timer_call+0x96>
 8019e52:	bf00      	nop

08019e54 <rcl_timer_is_ready>:
 8019e54:	b570      	push	{r4, r5, r6, lr}
 8019e56:	b082      	sub	sp, #8
 8019e58:	b378      	cbz	r0, 8019eba <rcl_timer_is_ready+0x66>
 8019e5a:	6803      	ldr	r3, [r0, #0]
 8019e5c:	4604      	mov	r4, r0
 8019e5e:	b383      	cbz	r3, 8019ec2 <rcl_timer_is_ready+0x6e>
 8019e60:	460d      	mov	r5, r1
 8019e62:	b351      	cbz	r1, 8019eba <rcl_timer_is_ready+0x66>
 8019e64:	f3bf 8f5b 	dmb	ish
 8019e68:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019e6c:	f3bf 8f5b 	dmb	ish
 8019e70:	b953      	cbnz	r3, 8019e88 <rcl_timer_is_ready+0x34>
 8019e72:	6803      	ldr	r3, [r0, #0]
 8019e74:	4669      	mov	r1, sp
 8019e76:	6818      	ldr	r0, [r3, #0]
 8019e78:	f7ff ff4e 	bl	8019d18 <rcl_clock_get_now>
 8019e7c:	4606      	mov	r6, r0
 8019e7e:	b140      	cbz	r0, 8019e92 <rcl_timer_is_ready+0x3e>
 8019e80:	f240 3321 	movw	r3, #801	@ 0x321
 8019e84:	4298      	cmp	r0, r3
 8019e86:	d101      	bne.n	8019e8c <rcl_timer_is_ready+0x38>
 8019e88:	2600      	movs	r6, #0
 8019e8a:	702e      	strb	r6, [r5, #0]
 8019e8c:	4630      	mov	r0, r6
 8019e8e:	b002      	add	sp, #8
 8019e90:	bd70      	pop	{r4, r5, r6, pc}
 8019e92:	6820      	ldr	r0, [r4, #0]
 8019e94:	2105      	movs	r1, #5
 8019e96:	3028      	adds	r0, #40	@ 0x28
 8019e98:	f001 fc0a 	bl	801b6b0 <__atomic_load_8>
 8019e9c:	9b00      	ldr	r3, [sp, #0]
 8019e9e:	1ac0      	subs	r0, r0, r3
 8019ea0:	9b01      	ldr	r3, [sp, #4]
 8019ea2:	eb61 0103 	sbc.w	r1, r1, r3
 8019ea6:	2801      	cmp	r0, #1
 8019ea8:	f171 0300 	sbcs.w	r3, r1, #0
 8019eac:	bfb4      	ite	lt
 8019eae:	2301      	movlt	r3, #1
 8019eb0:	2300      	movge	r3, #0
 8019eb2:	4630      	mov	r0, r6
 8019eb4:	702b      	strb	r3, [r5, #0]
 8019eb6:	b002      	add	sp, #8
 8019eb8:	bd70      	pop	{r4, r5, r6, pc}
 8019eba:	260b      	movs	r6, #11
 8019ebc:	4630      	mov	r0, r6
 8019ebe:	b002      	add	sp, #8
 8019ec0:	bd70      	pop	{r4, r5, r6, pc}
 8019ec2:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8019ec6:	e7e1      	b.n	8019e8c <rcl_timer_is_ready+0x38>

08019ec8 <rcl_timer_get_time_until_next_call>:
 8019ec8:	b570      	push	{r4, r5, r6, lr}
 8019eca:	b082      	sub	sp, #8
 8019ecc:	b330      	cbz	r0, 8019f1c <rcl_timer_get_time_until_next_call+0x54>
 8019ece:	6803      	ldr	r3, [r0, #0]
 8019ed0:	4604      	mov	r4, r0
 8019ed2:	b33b      	cbz	r3, 8019f24 <rcl_timer_get_time_until_next_call+0x5c>
 8019ed4:	460d      	mov	r5, r1
 8019ed6:	b309      	cbz	r1, 8019f1c <rcl_timer_get_time_until_next_call+0x54>
 8019ed8:	f3bf 8f5b 	dmb	ish
 8019edc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019ee0:	f3bf 8f5b 	dmb	ish
 8019ee4:	b9ab      	cbnz	r3, 8019f12 <rcl_timer_get_time_until_next_call+0x4a>
 8019ee6:	6803      	ldr	r3, [r0, #0]
 8019ee8:	4669      	mov	r1, sp
 8019eea:	6818      	ldr	r0, [r3, #0]
 8019eec:	f7ff ff14 	bl	8019d18 <rcl_clock_get_now>
 8019ef0:	4606      	mov	r6, r0
 8019ef2:	b958      	cbnz	r0, 8019f0c <rcl_timer_get_time_until_next_call+0x44>
 8019ef4:	6820      	ldr	r0, [r4, #0]
 8019ef6:	2105      	movs	r1, #5
 8019ef8:	3028      	adds	r0, #40	@ 0x28
 8019efa:	f001 fbd9 	bl	801b6b0 <__atomic_load_8>
 8019efe:	9b00      	ldr	r3, [sp, #0]
 8019f00:	1ac0      	subs	r0, r0, r3
 8019f02:	9b01      	ldr	r3, [sp, #4]
 8019f04:	6028      	str	r0, [r5, #0]
 8019f06:	eb61 0103 	sbc.w	r1, r1, r3
 8019f0a:	6069      	str	r1, [r5, #4]
 8019f0c:	4630      	mov	r0, r6
 8019f0e:	b002      	add	sp, #8
 8019f10:	bd70      	pop	{r4, r5, r6, pc}
 8019f12:	f240 3621 	movw	r6, #801	@ 0x321
 8019f16:	4630      	mov	r0, r6
 8019f18:	b002      	add	sp, #8
 8019f1a:	bd70      	pop	{r4, r5, r6, pc}
 8019f1c:	260b      	movs	r6, #11
 8019f1e:	4630      	mov	r0, r6
 8019f20:	b002      	add	sp, #8
 8019f22:	bd70      	pop	{r4, r5, r6, pc}
 8019f24:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8019f28:	e7f0      	b.n	8019f0c <rcl_timer_get_time_until_next_call+0x44>
 8019f2a:	bf00      	nop

08019f2c <rcl_timer_get_guard_condition>:
 8019f2c:	b130      	cbz	r0, 8019f3c <rcl_timer_get_guard_condition+0x10>
 8019f2e:	6800      	ldr	r0, [r0, #0]
 8019f30:	b120      	cbz	r0, 8019f3c <rcl_timer_get_guard_condition+0x10>
 8019f32:	68c3      	ldr	r3, [r0, #12]
 8019f34:	b10b      	cbz	r3, 8019f3a <rcl_timer_get_guard_condition+0xe>
 8019f36:	3008      	adds	r0, #8
 8019f38:	4770      	bx	lr
 8019f3a:	4618      	mov	r0, r3
 8019f3c:	4770      	bx	lr
 8019f3e:	bf00      	nop

08019f40 <rcl_validate_enclave_name_with_size>:
 8019f40:	b378      	cbz	r0, 8019fa2 <rcl_validate_enclave_name_with_size+0x62>
 8019f42:	b570      	push	{r4, r5, r6, lr}
 8019f44:	4615      	mov	r5, r2
 8019f46:	b0c2      	sub	sp, #264	@ 0x108
 8019f48:	b302      	cbz	r2, 8019f8c <rcl_validate_enclave_name_with_size+0x4c>
 8019f4a:	461e      	mov	r6, r3
 8019f4c:	466a      	mov	r2, sp
 8019f4e:	ab01      	add	r3, sp, #4
 8019f50:	460c      	mov	r4, r1
 8019f52:	f002 f843 	bl	801bfdc <rmw_validate_namespace_with_size>
 8019f56:	4684      	mov	ip, r0
 8019f58:	b9e8      	cbnz	r0, 8019f96 <rcl_validate_enclave_name_with_size+0x56>
 8019f5a:	9b00      	ldr	r3, [sp, #0]
 8019f5c:	b923      	cbnz	r3, 8019f68 <rcl_validate_enclave_name_with_size+0x28>
 8019f5e:	2300      	movs	r3, #0
 8019f60:	602b      	str	r3, [r5, #0]
 8019f62:	4660      	mov	r0, ip
 8019f64:	b042      	add	sp, #264	@ 0x108
 8019f66:	bd70      	pop	{r4, r5, r6, pc}
 8019f68:	2b07      	cmp	r3, #7
 8019f6a:	d007      	beq.n	8019f7c <rcl_validate_enclave_name_with_size+0x3c>
 8019f6c:	1e5a      	subs	r2, r3, #1
 8019f6e:	2a05      	cmp	r2, #5
 8019f70:	d833      	bhi.n	8019fda <rcl_validate_enclave_name_with_size+0x9a>
 8019f72:	e8df f002 	tbb	[pc, r2]
 8019f76:	2c2f      	.short	0x2c2f
 8019f78:	1a232629 	.word	0x1a232629
 8019f7c:	2cff      	cmp	r4, #255	@ 0xff
 8019f7e:	d9ee      	bls.n	8019f5e <rcl_validate_enclave_name_with_size+0x1e>
 8019f80:	602b      	str	r3, [r5, #0]
 8019f82:	2e00      	cmp	r6, #0
 8019f84:	d0ed      	beq.n	8019f62 <rcl_validate_enclave_name_with_size+0x22>
 8019f86:	23fe      	movs	r3, #254	@ 0xfe
 8019f88:	6033      	str	r3, [r6, #0]
 8019f8a:	e7ea      	b.n	8019f62 <rcl_validate_enclave_name_with_size+0x22>
 8019f8c:	f04f 0c0b 	mov.w	ip, #11
 8019f90:	4660      	mov	r0, ip
 8019f92:	b042      	add	sp, #264	@ 0x108
 8019f94:	bd70      	pop	{r4, r5, r6, pc}
 8019f96:	f7fe fe95 	bl	8018cc4 <rcl_convert_rmw_ret_to_rcl_ret>
 8019f9a:	4684      	mov	ip, r0
 8019f9c:	4660      	mov	r0, ip
 8019f9e:	b042      	add	sp, #264	@ 0x108
 8019fa0:	bd70      	pop	{r4, r5, r6, pc}
 8019fa2:	f04f 0c0b 	mov.w	ip, #11
 8019fa6:	4660      	mov	r0, ip
 8019fa8:	4770      	bx	lr
 8019faa:	2306      	movs	r3, #6
 8019fac:	602b      	str	r3, [r5, #0]
 8019fae:	2e00      	cmp	r6, #0
 8019fb0:	d0d7      	beq.n	8019f62 <rcl_validate_enclave_name_with_size+0x22>
 8019fb2:	9b01      	ldr	r3, [sp, #4]
 8019fb4:	6033      	str	r3, [r6, #0]
 8019fb6:	4660      	mov	r0, ip
 8019fb8:	b042      	add	sp, #264	@ 0x108
 8019fba:	bd70      	pop	{r4, r5, r6, pc}
 8019fbc:	2305      	movs	r3, #5
 8019fbe:	602b      	str	r3, [r5, #0]
 8019fc0:	e7f5      	b.n	8019fae <rcl_validate_enclave_name_with_size+0x6e>
 8019fc2:	2304      	movs	r3, #4
 8019fc4:	602b      	str	r3, [r5, #0]
 8019fc6:	e7f2      	b.n	8019fae <rcl_validate_enclave_name_with_size+0x6e>
 8019fc8:	2303      	movs	r3, #3
 8019fca:	602b      	str	r3, [r5, #0]
 8019fcc:	e7ef      	b.n	8019fae <rcl_validate_enclave_name_with_size+0x6e>
 8019fce:	2302      	movs	r3, #2
 8019fd0:	602b      	str	r3, [r5, #0]
 8019fd2:	e7ec      	b.n	8019fae <rcl_validate_enclave_name_with_size+0x6e>
 8019fd4:	2301      	movs	r3, #1
 8019fd6:	602b      	str	r3, [r5, #0]
 8019fd8:	e7e9      	b.n	8019fae <rcl_validate_enclave_name_with_size+0x6e>
 8019fda:	4a04      	ldr	r2, [pc, #16]	@ (8019fec <rcl_validate_enclave_name_with_size+0xac>)
 8019fdc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019fe0:	a802      	add	r0, sp, #8
 8019fe2:	f001 fd1f 	bl	801ba24 <rcutils_snprintf>
 8019fe6:	f04f 0c01 	mov.w	ip, #1
 8019fea:	e7ba      	b.n	8019f62 <rcl_validate_enclave_name_with_size+0x22>
 8019fec:	08022288 	.word	0x08022288

08019ff0 <rcl_validate_enclave_name>:
 8019ff0:	b168      	cbz	r0, 801a00e <rcl_validate_enclave_name+0x1e>
 8019ff2:	b570      	push	{r4, r5, r6, lr}
 8019ff4:	460d      	mov	r5, r1
 8019ff6:	4616      	mov	r6, r2
 8019ff8:	4604      	mov	r4, r0
 8019ffa:	f7e6 f8f3 	bl	80001e4 <strlen>
 8019ffe:	4633      	mov	r3, r6
 801a000:	4601      	mov	r1, r0
 801a002:	462a      	mov	r2, r5
 801a004:	4620      	mov	r0, r4
 801a006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a00a:	f7ff bf99 	b.w	8019f40 <rcl_validate_enclave_name_with_size>
 801a00e:	200b      	movs	r0, #11
 801a010:	4770      	bx	lr
 801a012:	bf00      	nop

0801a014 <rcl_get_zero_initialized_wait_set>:
 801a014:	b510      	push	{r4, lr}
 801a016:	4c08      	ldr	r4, [pc, #32]	@ (801a038 <rcl_get_zero_initialized_wait_set+0x24>)
 801a018:	4686      	mov	lr, r0
 801a01a:	4684      	mov	ip, r0
 801a01c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a01e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a022:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a024:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a02a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a02e:	6823      	ldr	r3, [r4, #0]
 801a030:	f8cc 3000 	str.w	r3, [ip]
 801a034:	4670      	mov	r0, lr
 801a036:	bd10      	pop	{r4, pc}
 801a038:	080222e8 	.word	0x080222e8

0801a03c <rcl_wait_set_is_valid>:
 801a03c:	b118      	cbz	r0, 801a046 <rcl_wait_set_is_valid+0xa>
 801a03e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801a040:	3800      	subs	r0, #0
 801a042:	bf18      	it	ne
 801a044:	2001      	movne	r0, #1
 801a046:	4770      	bx	lr

0801a048 <rcl_wait_set_fini>:
 801a048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a04c:	b082      	sub	sp, #8
 801a04e:	2800      	cmp	r0, #0
 801a050:	f000 8095 	beq.w	801a17e <rcl_wait_set_fini+0x136>
 801a054:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801a056:	4604      	mov	r4, r0
 801a058:	2e00      	cmp	r6, #0
 801a05a:	f000 808c 	beq.w	801a176 <rcl_wait_set_fini+0x12e>
 801a05e:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 801a060:	f003 f9b8 	bl	801d3d4 <rmw_destroy_wait_set>
 801a064:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a066:	1e06      	subs	r6, r0, #0
 801a068:	bf18      	it	ne
 801a06a:	f44f 7661 	movne.w	r6, #900	@ 0x384
 801a06e:	2d00      	cmp	r5, #0
 801a070:	f000 8081 	beq.w	801a176 <rcl_wait_set_fini+0x12e>
 801a074:	6820      	ldr	r0, [r4, #0]
 801a076:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801a07a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801a07c:	2700      	movs	r7, #0
 801a07e:	6067      	str	r7, [r4, #4]
 801a080:	602f      	str	r7, [r5, #0]
 801a082:	b120      	cbz	r0, 801a08e <rcl_wait_set_fini+0x46>
 801a084:	9101      	str	r1, [sp, #4]
 801a086:	47c0      	blx	r8
 801a088:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a08a:	9901      	ldr	r1, [sp, #4]
 801a08c:	6027      	str	r7, [r4, #0]
 801a08e:	68a8      	ldr	r0, [r5, #8]
 801a090:	b120      	cbz	r0, 801a09c <rcl_wait_set_fini+0x54>
 801a092:	47c0      	blx	r8
 801a094:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a096:	2300      	movs	r3, #0
 801a098:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801a09c:	68a0      	ldr	r0, [r4, #8]
 801a09e:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801a0a0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801a0a2:	f04f 0800 	mov.w	r8, #0
 801a0a6:	f8c4 800c 	str.w	r8, [r4, #12]
 801a0aa:	f8c5 800c 	str.w	r8, [r5, #12]
 801a0ae:	b128      	cbz	r0, 801a0bc <rcl_wait_set_fini+0x74>
 801a0b0:	47b8      	blx	r7
 801a0b2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a0b4:	f8c4 8008 	str.w	r8, [r4, #8]
 801a0b8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801a0ba:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801a0bc:	6968      	ldr	r0, [r5, #20]
 801a0be:	f04f 0800 	mov.w	r8, #0
 801a0c2:	f8c5 8010 	str.w	r8, [r5, #16]
 801a0c6:	b128      	cbz	r0, 801a0d4 <rcl_wait_set_fini+0x8c>
 801a0c8:	47b8      	blx	r7
 801a0ca:	f8c5 8014 	str.w	r8, [r5, #20]
 801a0ce:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a0d0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801a0d2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801a0d4:	6920      	ldr	r0, [r4, #16]
 801a0d6:	f04f 0800 	mov.w	r8, #0
 801a0da:	f8c4 8014 	str.w	r8, [r4, #20]
 801a0de:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 801a0e2:	b128      	cbz	r0, 801a0f0 <rcl_wait_set_fini+0xa8>
 801a0e4:	47b8      	blx	r7
 801a0e6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a0e8:	f8c4 8010 	str.w	r8, [r4, #16]
 801a0ec:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801a0ee:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801a0f0:	69a0      	ldr	r0, [r4, #24]
 801a0f2:	f04f 0800 	mov.w	r8, #0
 801a0f6:	f8c4 801c 	str.w	r8, [r4, #28]
 801a0fa:	f8c5 8018 	str.w	r8, [r5, #24]
 801a0fe:	b128      	cbz	r0, 801a10c <rcl_wait_set_fini+0xc4>
 801a100:	9101      	str	r1, [sp, #4]
 801a102:	47b8      	blx	r7
 801a104:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a106:	9901      	ldr	r1, [sp, #4]
 801a108:	f8c4 8018 	str.w	r8, [r4, #24]
 801a10c:	6a28      	ldr	r0, [r5, #32]
 801a10e:	b120      	cbz	r0, 801a11a <rcl_wait_set_fini+0xd2>
 801a110:	47b8      	blx	r7
 801a112:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a114:	2300      	movs	r3, #0
 801a116:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801a11a:	6a20      	ldr	r0, [r4, #32]
 801a11c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801a120:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801a122:	2700      	movs	r7, #0
 801a124:	6267      	str	r7, [r4, #36]	@ 0x24
 801a126:	626f      	str	r7, [r5, #36]	@ 0x24
 801a128:	b120      	cbz	r0, 801a134 <rcl_wait_set_fini+0xec>
 801a12a:	9101      	str	r1, [sp, #4]
 801a12c:	47c0      	blx	r8
 801a12e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a130:	9901      	ldr	r1, [sp, #4]
 801a132:	6227      	str	r7, [r4, #32]
 801a134:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801a136:	b120      	cbz	r0, 801a142 <rcl_wait_set_fini+0xfa>
 801a138:	47c0      	blx	r8
 801a13a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a13c:	2300      	movs	r3, #0
 801a13e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801a142:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801a144:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801a148:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801a14a:	2700      	movs	r7, #0
 801a14c:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801a14e:	632f      	str	r7, [r5, #48]	@ 0x30
 801a150:	b120      	cbz	r0, 801a15c <rcl_wait_set_fini+0x114>
 801a152:	9101      	str	r1, [sp, #4]
 801a154:	47c0      	blx	r8
 801a156:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a158:	9901      	ldr	r1, [sp, #4]
 801a15a:	62a7      	str	r7, [r4, #40]	@ 0x28
 801a15c:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801a15e:	b120      	cbz	r0, 801a16a <rcl_wait_set_fini+0x122>
 801a160:	47c0      	blx	r8
 801a162:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a164:	2300      	movs	r3, #0
 801a166:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801a16a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801a16c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801a16e:	4628      	mov	r0, r5
 801a170:	4798      	blx	r3
 801a172:	2300      	movs	r3, #0
 801a174:	6323      	str	r3, [r4, #48]	@ 0x30
 801a176:	4630      	mov	r0, r6
 801a178:	b002      	add	sp, #8
 801a17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a17e:	260b      	movs	r6, #11
 801a180:	4630      	mov	r0, r6
 801a182:	b002      	add	sp, #8
 801a184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a188 <rcl_wait_set_add_subscription>:
 801a188:	b318      	cbz	r0, 801a1d2 <rcl_wait_set_add_subscription+0x4a>
 801a18a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a18c:	b570      	push	{r4, r5, r6, lr}
 801a18e:	4604      	mov	r4, r0
 801a190:	b30b      	cbz	r3, 801a1d6 <rcl_wait_set_add_subscription+0x4e>
 801a192:	b319      	cbz	r1, 801a1dc <rcl_wait_set_add_subscription+0x54>
 801a194:	681d      	ldr	r5, [r3, #0]
 801a196:	6840      	ldr	r0, [r0, #4]
 801a198:	4285      	cmp	r5, r0
 801a19a:	d217      	bcs.n	801a1cc <rcl_wait_set_add_subscription+0x44>
 801a19c:	6820      	ldr	r0, [r4, #0]
 801a19e:	1c6e      	adds	r6, r5, #1
 801a1a0:	601e      	str	r6, [r3, #0]
 801a1a2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801a1a6:	b102      	cbz	r2, 801a1aa <rcl_wait_set_add_subscription+0x22>
 801a1a8:	6015      	str	r5, [r2, #0]
 801a1aa:	4608      	mov	r0, r1
 801a1ac:	f7ff fd14 	bl	8019bd8 <rcl_subscription_get_rmw_handle>
 801a1b0:	b150      	cbz	r0, 801a1c8 <rcl_wait_set_add_subscription+0x40>
 801a1b2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a1b4:	6842      	ldr	r2, [r0, #4]
 801a1b6:	689b      	ldr	r3, [r3, #8]
 801a1b8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a1bc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801a1be:	6853      	ldr	r3, [r2, #4]
 801a1c0:	3301      	adds	r3, #1
 801a1c2:	2000      	movs	r0, #0
 801a1c4:	6053      	str	r3, [r2, #4]
 801a1c6:	bd70      	pop	{r4, r5, r6, pc}
 801a1c8:	2001      	movs	r0, #1
 801a1ca:	bd70      	pop	{r4, r5, r6, pc}
 801a1cc:	f240 3086 	movw	r0, #902	@ 0x386
 801a1d0:	bd70      	pop	{r4, r5, r6, pc}
 801a1d2:	200b      	movs	r0, #11
 801a1d4:	4770      	bx	lr
 801a1d6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a1da:	bd70      	pop	{r4, r5, r6, pc}
 801a1dc:	200b      	movs	r0, #11
 801a1de:	bd70      	pop	{r4, r5, r6, pc}

0801a1e0 <rcl_wait_set_clear>:
 801a1e0:	2800      	cmp	r0, #0
 801a1e2:	d073      	beq.n	801a2cc <rcl_wait_set_clear+0xec>
 801a1e4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a1e6:	b510      	push	{r4, lr}
 801a1e8:	4604      	mov	r4, r0
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d070      	beq.n	801a2d0 <rcl_wait_set_clear+0xf0>
 801a1ee:	6800      	ldr	r0, [r0, #0]
 801a1f0:	b138      	cbz	r0, 801a202 <rcl_wait_set_clear+0x22>
 801a1f2:	6862      	ldr	r2, [r4, #4]
 801a1f4:	2100      	movs	r1, #0
 801a1f6:	0092      	lsls	r2, r2, #2
 801a1f8:	f006 f98a 	bl	8020510 <memset>
 801a1fc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a1fe:	2200      	movs	r2, #0
 801a200:	601a      	str	r2, [r3, #0]
 801a202:	68a0      	ldr	r0, [r4, #8]
 801a204:	b138      	cbz	r0, 801a216 <rcl_wait_set_clear+0x36>
 801a206:	68e2      	ldr	r2, [r4, #12]
 801a208:	2100      	movs	r1, #0
 801a20a:	0092      	lsls	r2, r2, #2
 801a20c:	f006 f980 	bl	8020510 <memset>
 801a210:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a212:	2200      	movs	r2, #0
 801a214:	60da      	str	r2, [r3, #12]
 801a216:	69a0      	ldr	r0, [r4, #24]
 801a218:	b138      	cbz	r0, 801a22a <rcl_wait_set_clear+0x4a>
 801a21a:	69e2      	ldr	r2, [r4, #28]
 801a21c:	2100      	movs	r1, #0
 801a21e:	0092      	lsls	r2, r2, #2
 801a220:	f006 f976 	bl	8020510 <memset>
 801a224:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a226:	2200      	movs	r2, #0
 801a228:	619a      	str	r2, [r3, #24]
 801a22a:	6a20      	ldr	r0, [r4, #32]
 801a22c:	b138      	cbz	r0, 801a23e <rcl_wait_set_clear+0x5e>
 801a22e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801a230:	2100      	movs	r1, #0
 801a232:	0092      	lsls	r2, r2, #2
 801a234:	f006 f96c 	bl	8020510 <memset>
 801a238:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a23a:	2200      	movs	r2, #0
 801a23c:	625a      	str	r2, [r3, #36]	@ 0x24
 801a23e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801a240:	b138      	cbz	r0, 801a252 <rcl_wait_set_clear+0x72>
 801a242:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 801a244:	2100      	movs	r1, #0
 801a246:	0092      	lsls	r2, r2, #2
 801a248:	f006 f962 	bl	8020510 <memset>
 801a24c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a24e:	2200      	movs	r2, #0
 801a250:	631a      	str	r2, [r3, #48]	@ 0x30
 801a252:	6920      	ldr	r0, [r4, #16]
 801a254:	b138      	cbz	r0, 801a266 <rcl_wait_set_clear+0x86>
 801a256:	6962      	ldr	r2, [r4, #20]
 801a258:	2100      	movs	r1, #0
 801a25a:	0092      	lsls	r2, r2, #2
 801a25c:	f006 f958 	bl	8020510 <memset>
 801a260:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a262:	2200      	movs	r2, #0
 801a264:	641a      	str	r2, [r3, #64]	@ 0x40
 801a266:	6898      	ldr	r0, [r3, #8]
 801a268:	b138      	cbz	r0, 801a27a <rcl_wait_set_clear+0x9a>
 801a26a:	685a      	ldr	r2, [r3, #4]
 801a26c:	2100      	movs	r1, #0
 801a26e:	0092      	lsls	r2, r2, #2
 801a270:	f006 f94e 	bl	8020510 <memset>
 801a274:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a276:	2200      	movs	r2, #0
 801a278:	605a      	str	r2, [r3, #4]
 801a27a:	6958      	ldr	r0, [r3, #20]
 801a27c:	b138      	cbz	r0, 801a28e <rcl_wait_set_clear+0xae>
 801a27e:	691a      	ldr	r2, [r3, #16]
 801a280:	2100      	movs	r1, #0
 801a282:	0092      	lsls	r2, r2, #2
 801a284:	f006 f944 	bl	8020510 <memset>
 801a288:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a28a:	2200      	movs	r2, #0
 801a28c:	611a      	str	r2, [r3, #16]
 801a28e:	6a18      	ldr	r0, [r3, #32]
 801a290:	b138      	cbz	r0, 801a2a2 <rcl_wait_set_clear+0xc2>
 801a292:	69da      	ldr	r2, [r3, #28]
 801a294:	2100      	movs	r1, #0
 801a296:	0092      	lsls	r2, r2, #2
 801a298:	f006 f93a 	bl	8020510 <memset>
 801a29c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a29e:	2200      	movs	r2, #0
 801a2a0:	61da      	str	r2, [r3, #28]
 801a2a2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 801a2a4:	b138      	cbz	r0, 801a2b6 <rcl_wait_set_clear+0xd6>
 801a2a6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801a2a8:	2100      	movs	r1, #0
 801a2aa:	0092      	lsls	r2, r2, #2
 801a2ac:	f006 f930 	bl	8020510 <memset>
 801a2b0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a2b2:	2200      	movs	r2, #0
 801a2b4:	629a      	str	r2, [r3, #40]	@ 0x28
 801a2b6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801a2b8:	b138      	cbz	r0, 801a2ca <rcl_wait_set_clear+0xea>
 801a2ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a2bc:	2100      	movs	r1, #0
 801a2be:	0092      	lsls	r2, r2, #2
 801a2c0:	f006 f926 	bl	8020510 <memset>
 801a2c4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a2c6:	2000      	movs	r0, #0
 801a2c8:	6358      	str	r0, [r3, #52]	@ 0x34
 801a2ca:	bd10      	pop	{r4, pc}
 801a2cc:	200b      	movs	r0, #11
 801a2ce:	4770      	bx	lr
 801a2d0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a2d4:	bd10      	pop	{r4, pc}
 801a2d6:	bf00      	nop

0801a2d8 <rcl_wait_set_resize>:
 801a2d8:	2800      	cmp	r0, #0
 801a2da:	f000 8185 	beq.w	801a5e8 <rcl_wait_set_resize+0x310>
 801a2de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2e2:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 801a2e4:	b083      	sub	sp, #12
 801a2e6:	4605      	mov	r5, r0
 801a2e8:	2c00      	cmp	r4, #0
 801a2ea:	f000 817f 	beq.w	801a5ec <rcl_wait_set_resize+0x314>
 801a2ee:	f04f 0900 	mov.w	r9, #0
 801a2f2:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 801a2f6:	461f      	mov	r7, r3
 801a2f8:	4688      	mov	r8, r1
 801a2fa:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801a2fe:	4616      	mov	r6, r2
 801a300:	f8c0 9004 	str.w	r9, [r0, #4]
 801a304:	f8c4 9000 	str.w	r9, [r4]
 801a308:	2900      	cmp	r1, #0
 801a30a:	f000 80bd 	beq.w	801a488 <rcl_wait_set_resize+0x1b0>
 801a30e:	008c      	lsls	r4, r1, #2
 801a310:	6800      	ldr	r0, [r0, #0]
 801a312:	9301      	str	r3, [sp, #4]
 801a314:	4652      	mov	r2, sl
 801a316:	4621      	mov	r1, r4
 801a318:	4798      	blx	r3
 801a31a:	9b01      	ldr	r3, [sp, #4]
 801a31c:	6028      	str	r0, [r5, #0]
 801a31e:	2800      	cmp	r0, #0
 801a320:	f000 80cb 	beq.w	801a4ba <rcl_wait_set_resize+0x1e2>
 801a324:	4622      	mov	r2, r4
 801a326:	4649      	mov	r1, r9
 801a328:	9301      	str	r3, [sp, #4]
 801a32a:	f006 f8f1 	bl	8020510 <memset>
 801a32e:	f8c5 8004 	str.w	r8, [r5, #4]
 801a332:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801a336:	9b01      	ldr	r3, [sp, #4]
 801a338:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801a33c:	f8c8 9004 	str.w	r9, [r8, #4]
 801a340:	4652      	mov	r2, sl
 801a342:	4621      	mov	r1, r4
 801a344:	4798      	blx	r3
 801a346:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a348:	f8c8 0008 	str.w	r0, [r8, #8]
 801a34c:	689b      	ldr	r3, [r3, #8]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	f000 80ac 	beq.w	801a4ac <rcl_wait_set_resize+0x1d4>
 801a354:	4622      	mov	r2, r4
 801a356:	4649      	mov	r1, r9
 801a358:	4618      	mov	r0, r3
 801a35a:	f006 f8d9 	bl	8020510 <memset>
 801a35e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a360:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801a364:	f04f 0800 	mov.w	r8, #0
 801a368:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 801a36c:	f8c5 800c 	str.w	r8, [r5, #12]
 801a370:	f8c4 800c 	str.w	r8, [r4, #12]
 801a374:	2e00      	cmp	r6, #0
 801a376:	f040 80a4 	bne.w	801a4c2 <rcl_wait_set_resize+0x1ea>
 801a37a:	68a8      	ldr	r0, [r5, #8]
 801a37c:	b128      	cbz	r0, 801a38a <rcl_wait_set_resize+0xb2>
 801a37e:	4649      	mov	r1, r9
 801a380:	4790      	blx	r2
 801a382:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a384:	60ae      	str	r6, [r5, #8]
 801a386:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801a38a:	f04f 0800 	mov.w	r8, #0
 801a38e:	19f6      	adds	r6, r6, r7
 801a390:	f8c4 8010 	str.w	r8, [r4, #16]
 801a394:	f040 80ac 	bne.w	801a4f0 <rcl_wait_set_resize+0x218>
 801a398:	6960      	ldr	r0, [r4, #20]
 801a39a:	b130      	cbz	r0, 801a3aa <rcl_wait_set_resize+0xd2>
 801a39c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801a39e:	4649      	mov	r1, r9
 801a3a0:	4798      	blx	r3
 801a3a2:	6166      	str	r6, [r4, #20]
 801a3a4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a3a6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801a3aa:	2600      	movs	r6, #0
 801a3ac:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801a3b0:	616e      	str	r6, [r5, #20]
 801a3b2:	6426      	str	r6, [r4, #64]	@ 0x40
 801a3b4:	2f00      	cmp	r7, #0
 801a3b6:	f040 80ad 	bne.w	801a514 <rcl_wait_set_resize+0x23c>
 801a3ba:	6928      	ldr	r0, [r5, #16]
 801a3bc:	b138      	cbz	r0, 801a3ce <rcl_wait_set_resize+0xf6>
 801a3be:	4649      	mov	r1, r9
 801a3c0:	47d0      	blx	sl
 801a3c2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a3c4:	612f      	str	r7, [r5, #16]
 801a3c6:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801a3ca:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801a3ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a3d0:	2600      	movs	r6, #0
 801a3d2:	61ee      	str	r6, [r5, #28]
 801a3d4:	61a6      	str	r6, [r4, #24]
 801a3d6:	2b00      	cmp	r3, #0
 801a3d8:	f040 80af 	bne.w	801a53a <rcl_wait_set_resize+0x262>
 801a3dc:	69a8      	ldr	r0, [r5, #24]
 801a3de:	b120      	cbz	r0, 801a3ea <rcl_wait_set_resize+0x112>
 801a3e0:	4649      	mov	r1, r9
 801a3e2:	47d0      	blx	sl
 801a3e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a3e6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a3e8:	61ab      	str	r3, [r5, #24]
 801a3ea:	6a20      	ldr	r0, [r4, #32]
 801a3ec:	b128      	cbz	r0, 801a3fa <rcl_wait_set_resize+0x122>
 801a3ee:	4649      	mov	r1, r9
 801a3f0:	47d0      	blx	sl
 801a3f2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a3f4:	2300      	movs	r3, #0
 801a3f6:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801a3fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a3fc:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801a3fe:	2600      	movs	r6, #0
 801a400:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801a404:	626e      	str	r6, [r5, #36]	@ 0x24
 801a406:	6266      	str	r6, [r4, #36]	@ 0x24
 801a408:	2b00      	cmp	r3, #0
 801a40a:	f000 80b6 	beq.w	801a57a <rcl_wait_set_resize+0x2a2>
 801a40e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801a412:	6a28      	ldr	r0, [r5, #32]
 801a414:	463a      	mov	r2, r7
 801a416:	4651      	mov	r1, sl
 801a418:	47c8      	blx	r9
 801a41a:	6228      	str	r0, [r5, #32]
 801a41c:	2800      	cmp	r0, #0
 801a41e:	d04c      	beq.n	801a4ba <rcl_wait_set_resize+0x1e2>
 801a420:	4652      	mov	r2, sl
 801a422:	4631      	mov	r1, r6
 801a424:	f006 f874 	bl	8020510 <memset>
 801a428:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a42a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a42c:	626b      	str	r3, [r5, #36]	@ 0x24
 801a42e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801a430:	62a6      	str	r6, [r4, #40]	@ 0x28
 801a432:	463a      	mov	r2, r7
 801a434:	4651      	mov	r1, sl
 801a436:	47c8      	blx	r9
 801a438:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a43a:	62e0      	str	r0, [r4, #44]	@ 0x2c
 801a43c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801a43e:	2c00      	cmp	r4, #0
 801a440:	f000 80f0 	beq.w	801a624 <rcl_wait_set_resize+0x34c>
 801a444:	4620      	mov	r0, r4
 801a446:	4652      	mov	r2, sl
 801a448:	4631      	mov	r1, r6
 801a44a:	f006 f861 	bl	8020510 <memset>
 801a44e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a450:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a452:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 801a454:	2600      	movs	r6, #0
 801a456:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801a45a:	62ee      	str	r6, [r5, #44]	@ 0x2c
 801a45c:	6326      	str	r6, [r4, #48]	@ 0x30
 801a45e:	2b00      	cmp	r3, #0
 801a460:	f040 809d 	bne.w	801a59e <rcl_wait_set_resize+0x2c6>
 801a464:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801a466:	b120      	cbz	r0, 801a472 <rcl_wait_set_resize+0x19a>
 801a468:	4639      	mov	r1, r7
 801a46a:	47c0      	blx	r8
 801a46c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a46e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a470:	62ab      	str	r3, [r5, #40]	@ 0x28
 801a472:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 801a474:	b310      	cbz	r0, 801a4bc <rcl_wait_set_resize+0x1e4>
 801a476:	4639      	mov	r1, r7
 801a478:	47c0      	blx	r8
 801a47a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a47c:	2000      	movs	r0, #0
 801a47e:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 801a482:	b003      	add	sp, #12
 801a484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a488:	6800      	ldr	r0, [r0, #0]
 801a48a:	b120      	cbz	r0, 801a496 <rcl_wait_set_resize+0x1be>
 801a48c:	4651      	mov	r1, sl
 801a48e:	47d8      	blx	fp
 801a490:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a492:	f8c5 8000 	str.w	r8, [r5]
 801a496:	68a0      	ldr	r0, [r4, #8]
 801a498:	2800      	cmp	r0, #0
 801a49a:	f43f af61 	beq.w	801a360 <rcl_wait_set_resize+0x88>
 801a49e:	4651      	mov	r1, sl
 801a4a0:	47d8      	blx	fp
 801a4a2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a4a4:	2300      	movs	r3, #0
 801a4a6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801a4aa:	e759      	b.n	801a360 <rcl_wait_set_resize+0x88>
 801a4ac:	6828      	ldr	r0, [r5, #0]
 801a4ae:	9301      	str	r3, [sp, #4]
 801a4b0:	4651      	mov	r1, sl
 801a4b2:	47d8      	blx	fp
 801a4b4:	9b01      	ldr	r3, [sp, #4]
 801a4b6:	e9c5 3300 	strd	r3, r3, [r5]
 801a4ba:	200a      	movs	r0, #10
 801a4bc:	b003      	add	sp, #12
 801a4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4c2:	00b4      	lsls	r4, r6, #2
 801a4c4:	68a8      	ldr	r0, [r5, #8]
 801a4c6:	464a      	mov	r2, r9
 801a4c8:	4621      	mov	r1, r4
 801a4ca:	4798      	blx	r3
 801a4cc:	60a8      	str	r0, [r5, #8]
 801a4ce:	2800      	cmp	r0, #0
 801a4d0:	d0f3      	beq.n	801a4ba <rcl_wait_set_resize+0x1e2>
 801a4d2:	4622      	mov	r2, r4
 801a4d4:	4641      	mov	r1, r8
 801a4d6:	f006 f81b 	bl	8020510 <memset>
 801a4da:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a4dc:	60ee      	str	r6, [r5, #12]
 801a4de:	f04f 0800 	mov.w	r8, #0
 801a4e2:	19f6      	adds	r6, r6, r7
 801a4e4:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801a4e8:	f8c4 8010 	str.w	r8, [r4, #16]
 801a4ec:	f43f af54 	beq.w	801a398 <rcl_wait_set_resize+0xc0>
 801a4f0:	00b6      	lsls	r6, r6, #2
 801a4f2:	464a      	mov	r2, r9
 801a4f4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801a4f6:	6960      	ldr	r0, [r4, #20]
 801a4f8:	4631      	mov	r1, r6
 801a4fa:	4798      	blx	r3
 801a4fc:	4681      	mov	r9, r0
 801a4fe:	6160      	str	r0, [r4, #20]
 801a500:	2800      	cmp	r0, #0
 801a502:	d076      	beq.n	801a5f2 <rcl_wait_set_resize+0x31a>
 801a504:	4632      	mov	r2, r6
 801a506:	4641      	mov	r1, r8
 801a508:	f006 f802 	bl	8020510 <memset>
 801a50c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a50e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801a512:	e74a      	b.n	801a3aa <rcl_wait_set_resize+0xd2>
 801a514:	00bc      	lsls	r4, r7, #2
 801a516:	6928      	ldr	r0, [r5, #16]
 801a518:	464a      	mov	r2, r9
 801a51a:	4621      	mov	r1, r4
 801a51c:	47c0      	blx	r8
 801a51e:	6128      	str	r0, [r5, #16]
 801a520:	2800      	cmp	r0, #0
 801a522:	d0ca      	beq.n	801a4ba <rcl_wait_set_resize+0x1e2>
 801a524:	4622      	mov	r2, r4
 801a526:	4631      	mov	r1, r6
 801a528:	f005 fff2 	bl	8020510 <memset>
 801a52c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a52e:	616f      	str	r7, [r5, #20]
 801a530:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801a534:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801a538:	e749      	b.n	801a3ce <rcl_wait_set_resize+0xf6>
 801a53a:	009c      	lsls	r4, r3, #2
 801a53c:	69a8      	ldr	r0, [r5, #24]
 801a53e:	464a      	mov	r2, r9
 801a540:	4621      	mov	r1, r4
 801a542:	47c0      	blx	r8
 801a544:	61a8      	str	r0, [r5, #24]
 801a546:	2800      	cmp	r0, #0
 801a548:	d0b7      	beq.n	801a4ba <rcl_wait_set_resize+0x1e2>
 801a54a:	4622      	mov	r2, r4
 801a54c:	4631      	mov	r1, r6
 801a54e:	f005 ffdf 	bl	8020510 <memset>
 801a552:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 801a554:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a556:	61eb      	str	r3, [r5, #28]
 801a558:	6a38      	ldr	r0, [r7, #32]
 801a55a:	61fe      	str	r6, [r7, #28]
 801a55c:	464a      	mov	r2, r9
 801a55e:	4621      	mov	r1, r4
 801a560:	47c0      	blx	r8
 801a562:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a564:	6238      	str	r0, [r7, #32]
 801a566:	6a1f      	ldr	r7, [r3, #32]
 801a568:	2f00      	cmp	r7, #0
 801a56a:	d054      	beq.n	801a616 <rcl_wait_set_resize+0x33e>
 801a56c:	4622      	mov	r2, r4
 801a56e:	4631      	mov	r1, r6
 801a570:	4638      	mov	r0, r7
 801a572:	f005 ffcd 	bl	8020510 <memset>
 801a576:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a578:	e73f      	b.n	801a3fa <rcl_wait_set_resize+0x122>
 801a57a:	6a28      	ldr	r0, [r5, #32]
 801a57c:	b120      	cbz	r0, 801a588 <rcl_wait_set_resize+0x2b0>
 801a57e:	4639      	mov	r1, r7
 801a580:	47c0      	blx	r8
 801a582:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a584:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a586:	622b      	str	r3, [r5, #32]
 801a588:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801a58a:	2800      	cmp	r0, #0
 801a58c:	f43f af60 	beq.w	801a450 <rcl_wait_set_resize+0x178>
 801a590:	4639      	mov	r1, r7
 801a592:	47c0      	blx	r8
 801a594:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801a596:	2300      	movs	r3, #0
 801a598:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801a59c:	e758      	b.n	801a450 <rcl_wait_set_resize+0x178>
 801a59e:	009c      	lsls	r4, r3, #2
 801a5a0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801a5a2:	463a      	mov	r2, r7
 801a5a4:	4621      	mov	r1, r4
 801a5a6:	47c8      	blx	r9
 801a5a8:	62a8      	str	r0, [r5, #40]	@ 0x28
 801a5aa:	2800      	cmp	r0, #0
 801a5ac:	d085      	beq.n	801a4ba <rcl_wait_set_resize+0x1e2>
 801a5ae:	4622      	mov	r2, r4
 801a5b0:	4631      	mov	r1, r6
 801a5b2:	f005 ffad 	bl	8020510 <memset>
 801a5b6:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801a5ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a5bc:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801a5be:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 801a5c2:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 801a5c6:	463a      	mov	r2, r7
 801a5c8:	4621      	mov	r1, r4
 801a5ca:	47c8      	blx	r9
 801a5cc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a5ce:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 801a5d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a5d4:	b36b      	cbz	r3, 801a632 <rcl_wait_set_resize+0x35a>
 801a5d6:	4622      	mov	r2, r4
 801a5d8:	4631      	mov	r1, r6
 801a5da:	4618      	mov	r0, r3
 801a5dc:	f005 ff98 	bl	8020510 <memset>
 801a5e0:	4630      	mov	r0, r6
 801a5e2:	b003      	add	sp, #12
 801a5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5e8:	200b      	movs	r0, #11
 801a5ea:	4770      	bx	lr
 801a5ec:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a5f0:	e764      	b.n	801a4bc <rcl_wait_set_resize+0x1e4>
 801a5f2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a5f4:	68a8      	ldr	r0, [r5, #8]
 801a5f6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801a5f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a5fa:	4798      	blx	r3
 801a5fc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a5fe:	6928      	ldr	r0, [r5, #16]
 801a600:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801a602:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 801a604:	f8c5 900c 	str.w	r9, [r5, #12]
 801a608:	f8c5 9008 	str.w	r9, [r5, #8]
 801a60c:	4790      	blx	r2
 801a60e:	e9c5 9904 	strd	r9, r9, [r5, #16]
 801a612:	200a      	movs	r0, #10
 801a614:	e752      	b.n	801a4bc <rcl_wait_set_resize+0x1e4>
 801a616:	69a8      	ldr	r0, [r5, #24]
 801a618:	4649      	mov	r1, r9
 801a61a:	47d0      	blx	sl
 801a61c:	e9c5 7706 	strd	r7, r7, [r5, #24]
 801a620:	200a      	movs	r0, #10
 801a622:	e74b      	b.n	801a4bc <rcl_wait_set_resize+0x1e4>
 801a624:	6a28      	ldr	r0, [r5, #32]
 801a626:	4639      	mov	r1, r7
 801a628:	47c0      	blx	r8
 801a62a:	e9c5 4408 	strd	r4, r4, [r5, #32]
 801a62e:	200a      	movs	r0, #10
 801a630:	e744      	b.n	801a4bc <rcl_wait_set_resize+0x1e4>
 801a632:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801a634:	9301      	str	r3, [sp, #4]
 801a636:	4639      	mov	r1, r7
 801a638:	47c0      	blx	r8
 801a63a:	9b01      	ldr	r3, [sp, #4]
 801a63c:	200a      	movs	r0, #10
 801a63e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 801a642:	e73b      	b.n	801a4bc <rcl_wait_set_resize+0x1e4>

0801a644 <rcl_wait_set_init>:
 801a644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a648:	b084      	sub	sp, #16
 801a64a:	4604      	mov	r4, r0
 801a64c:	a810      	add	r0, sp, #64	@ 0x40
 801a64e:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 801a652:	460f      	mov	r7, r1
 801a654:	4690      	mov	r8, r2
 801a656:	4699      	mov	r9, r3
 801a658:	f7f9 ff56 	bl	8014508 <rcutils_allocator_is_valid>
 801a65c:	2800      	cmp	r0, #0
 801a65e:	d06b      	beq.n	801a738 <rcl_wait_set_init+0xf4>
 801a660:	2c00      	cmp	r4, #0
 801a662:	d069      	beq.n	801a738 <rcl_wait_set_init+0xf4>
 801a664:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801a666:	b125      	cbz	r5, 801a672 <rcl_wait_set_init+0x2e>
 801a668:	2564      	movs	r5, #100	@ 0x64
 801a66a:	4628      	mov	r0, r5
 801a66c:	b004      	add	sp, #16
 801a66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a672:	f1ba 0f00 	cmp.w	sl, #0
 801a676:	d05f      	beq.n	801a738 <rcl_wait_set_init+0xf4>
 801a678:	4650      	mov	r0, sl
 801a67a:	f7fe fb41 	bl	8018d00 <rcl_context_is_valid>
 801a67e:	2800      	cmp	r0, #0
 801a680:	d067      	beq.n	801a752 <rcl_wait_set_init+0x10e>
 801a682:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a684:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801a686:	205c      	movs	r0, #92	@ 0x5c
 801a688:	4798      	blx	r3
 801a68a:	6320      	str	r0, [r4, #48]	@ 0x30
 801a68c:	2800      	cmp	r0, #0
 801a68e:	d062      	beq.n	801a756 <rcl_wait_set_init+0x112>
 801a690:	4629      	mov	r1, r5
 801a692:	225c      	movs	r2, #92	@ 0x5c
 801a694:	f005 ff3c 	bl	8020510 <memset>
 801a698:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 801a69c:	eb03 0e02 	add.w	lr, r3, r2
 801a6a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a6a2:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 801a6a4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 801a6a8:	449e      	add	lr, r3
 801a6aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801a6ae:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801a6b2:	e9c6 5504 	strd	r5, r5, [r6, #16]
 801a6b6:	e9c6 5507 	strd	r5, r5, [r6, #28]
 801a6ba:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 801a6be:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 801a6c2:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 801a6c6:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 801a6ca:	f8da a000 	ldr.w	sl, [sl]
 801a6ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a6d0:	44c6      	add	lr, r8
 801a6d2:	f8dc 3000 	ldr.w	r3, [ip]
 801a6d6:	602b      	str	r3, [r5, #0]
 801a6d8:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 801a6dc:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 801a6e0:	f002 fe6e 	bl	801d3c0 <rmw_create_wait_set>
 801a6e4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a6e6:	63f0      	str	r0, [r6, #60]	@ 0x3c
 801a6e8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801a6ea:	b350      	cbz	r0, 801a742 <rcl_wait_set_init+0xfe>
 801a6ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a6ee:	9302      	str	r3, [sp, #8]
 801a6f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a6f2:	9301      	str	r3, [sp, #4]
 801a6f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a6f6:	9300      	str	r3, [sp, #0]
 801a6f8:	4642      	mov	r2, r8
 801a6fa:	464b      	mov	r3, r9
 801a6fc:	4639      	mov	r1, r7
 801a6fe:	4620      	mov	r0, r4
 801a700:	f7ff fdea 	bl	801a2d8 <rcl_wait_set_resize>
 801a704:	4605      	mov	r5, r0
 801a706:	2800      	cmp	r0, #0
 801a708:	d0af      	beq.n	801a66a <rcl_wait_set_init+0x26>
 801a70a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a70c:	bb2b      	cbnz	r3, 801a75a <rcl_wait_set_init+0x116>
 801a70e:	2600      	movs	r6, #0
 801a710:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801a714:	9600      	str	r6, [sp, #0]
 801a716:	4633      	mov	r3, r6
 801a718:	4632      	mov	r2, r6
 801a71a:	4631      	mov	r1, r6
 801a71c:	4620      	mov	r0, r4
 801a71e:	f7ff fddb 	bl	801a2d8 <rcl_wait_set_resize>
 801a722:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 801a724:	2800      	cmp	r0, #0
 801a726:	d0a0      	beq.n	801a66a <rcl_wait_set_init+0x26>
 801a728:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801a72a:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801a72c:	4798      	blx	r3
 801a72e:	4628      	mov	r0, r5
 801a730:	6326      	str	r6, [r4, #48]	@ 0x30
 801a732:	b004      	add	sp, #16
 801a734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a738:	250b      	movs	r5, #11
 801a73a:	4628      	mov	r0, r5
 801a73c:	b004      	add	sp, #16
 801a73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a742:	2501      	movs	r5, #1
 801a744:	f002 fe46 	bl	801d3d4 <rmw_destroy_wait_set>
 801a748:	2800      	cmp	r0, #0
 801a74a:	bf18      	it	ne
 801a74c:	f44f 7561 	movne.w	r5, #900	@ 0x384
 801a750:	e7dd      	b.n	801a70e <rcl_wait_set_init+0xca>
 801a752:	2565      	movs	r5, #101	@ 0x65
 801a754:	e789      	b.n	801a66a <rcl_wait_set_init+0x26>
 801a756:	250a      	movs	r5, #10
 801a758:	e787      	b.n	801a66a <rcl_wait_set_init+0x26>
 801a75a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801a75c:	e7f2      	b.n	801a744 <rcl_wait_set_init+0x100>
 801a75e:	bf00      	nop

0801a760 <rcl_wait_set_add_guard_condition>:
 801a760:	b318      	cbz	r0, 801a7aa <rcl_wait_set_add_guard_condition+0x4a>
 801a762:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a764:	b570      	push	{r4, r5, r6, lr}
 801a766:	4604      	mov	r4, r0
 801a768:	b30b      	cbz	r3, 801a7ae <rcl_wait_set_add_guard_condition+0x4e>
 801a76a:	b319      	cbz	r1, 801a7b4 <rcl_wait_set_add_guard_condition+0x54>
 801a76c:	68dd      	ldr	r5, [r3, #12]
 801a76e:	68c0      	ldr	r0, [r0, #12]
 801a770:	4285      	cmp	r5, r0
 801a772:	d217      	bcs.n	801a7a4 <rcl_wait_set_add_guard_condition+0x44>
 801a774:	68a0      	ldr	r0, [r4, #8]
 801a776:	1c6e      	adds	r6, r5, #1
 801a778:	60de      	str	r6, [r3, #12]
 801a77a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801a77e:	b102      	cbz	r2, 801a782 <rcl_wait_set_add_guard_condition+0x22>
 801a780:	6015      	str	r5, [r2, #0]
 801a782:	4608      	mov	r0, r1
 801a784:	f004 ff6c 	bl	801f660 <rcl_guard_condition_get_rmw_handle>
 801a788:	b150      	cbz	r0, 801a7a0 <rcl_wait_set_add_guard_condition+0x40>
 801a78a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a78c:	6842      	ldr	r2, [r0, #4]
 801a78e:	695b      	ldr	r3, [r3, #20]
 801a790:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a794:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801a796:	6913      	ldr	r3, [r2, #16]
 801a798:	3301      	adds	r3, #1
 801a79a:	2000      	movs	r0, #0
 801a79c:	6113      	str	r3, [r2, #16]
 801a79e:	bd70      	pop	{r4, r5, r6, pc}
 801a7a0:	2001      	movs	r0, #1
 801a7a2:	bd70      	pop	{r4, r5, r6, pc}
 801a7a4:	f240 3086 	movw	r0, #902	@ 0x386
 801a7a8:	bd70      	pop	{r4, r5, r6, pc}
 801a7aa:	200b      	movs	r0, #11
 801a7ac:	4770      	bx	lr
 801a7ae:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a7b2:	bd70      	pop	{r4, r5, r6, pc}
 801a7b4:	200b      	movs	r0, #11
 801a7b6:	bd70      	pop	{r4, r5, r6, pc}

0801a7b8 <rcl_wait_set_add_timer>:
 801a7b8:	b328      	cbz	r0, 801a806 <rcl_wait_set_add_timer+0x4e>
 801a7ba:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a7bc:	b570      	push	{r4, r5, r6, lr}
 801a7be:	4604      	mov	r4, r0
 801a7c0:	b31b      	cbz	r3, 801a80a <rcl_wait_set_add_timer+0x52>
 801a7c2:	b329      	cbz	r1, 801a810 <rcl_wait_set_add_timer+0x58>
 801a7c4:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 801a7c6:	6965      	ldr	r5, [r4, #20]
 801a7c8:	42a8      	cmp	r0, r5
 801a7ca:	d219      	bcs.n	801a800 <rcl_wait_set_add_timer+0x48>
 801a7cc:	6925      	ldr	r5, [r4, #16]
 801a7ce:	1c46      	adds	r6, r0, #1
 801a7d0:	641e      	str	r6, [r3, #64]	@ 0x40
 801a7d2:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 801a7d6:	b102      	cbz	r2, 801a7da <rcl_wait_set_add_timer+0x22>
 801a7d8:	6010      	str	r0, [r2, #0]
 801a7da:	4608      	mov	r0, r1
 801a7dc:	f7ff fba6 	bl	8019f2c <rcl_timer_get_guard_condition>
 801a7e0:	b168      	cbz	r0, 801a7fe <rcl_wait_set_add_timer+0x46>
 801a7e2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801a7e4:	68e3      	ldr	r3, [r4, #12]
 801a7e6:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 801a7e8:	3b01      	subs	r3, #1
 801a7ea:	441d      	add	r5, r3
 801a7ec:	f004 ff38 	bl	801f660 <rcl_guard_condition_get_rmw_handle>
 801a7f0:	b180      	cbz	r0, 801a814 <rcl_wait_set_add_timer+0x5c>
 801a7f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a7f4:	6842      	ldr	r2, [r0, #4]
 801a7f6:	695b      	ldr	r3, [r3, #20]
 801a7f8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a7fc:	2000      	movs	r0, #0
 801a7fe:	bd70      	pop	{r4, r5, r6, pc}
 801a800:	f240 3086 	movw	r0, #902	@ 0x386
 801a804:	bd70      	pop	{r4, r5, r6, pc}
 801a806:	200b      	movs	r0, #11
 801a808:	4770      	bx	lr
 801a80a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a80e:	bd70      	pop	{r4, r5, r6, pc}
 801a810:	200b      	movs	r0, #11
 801a812:	bd70      	pop	{r4, r5, r6, pc}
 801a814:	2001      	movs	r0, #1
 801a816:	bd70      	pop	{r4, r5, r6, pc}

0801a818 <rcl_wait_set_add_client>:
 801a818:	b318      	cbz	r0, 801a862 <rcl_wait_set_add_client+0x4a>
 801a81a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a81c:	b570      	push	{r4, r5, r6, lr}
 801a81e:	4604      	mov	r4, r0
 801a820:	b30b      	cbz	r3, 801a866 <rcl_wait_set_add_client+0x4e>
 801a822:	b319      	cbz	r1, 801a86c <rcl_wait_set_add_client+0x54>
 801a824:	699d      	ldr	r5, [r3, #24]
 801a826:	69c0      	ldr	r0, [r0, #28]
 801a828:	4285      	cmp	r5, r0
 801a82a:	d217      	bcs.n	801a85c <rcl_wait_set_add_client+0x44>
 801a82c:	69a0      	ldr	r0, [r4, #24]
 801a82e:	1c6e      	adds	r6, r5, #1
 801a830:	619e      	str	r6, [r3, #24]
 801a832:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801a836:	b102      	cbz	r2, 801a83a <rcl_wait_set_add_client+0x22>
 801a838:	6015      	str	r5, [r2, #0]
 801a83a:	4608      	mov	r0, r1
 801a83c:	f7fe f9b4 	bl	8018ba8 <rcl_client_get_rmw_handle>
 801a840:	b150      	cbz	r0, 801a858 <rcl_wait_set_add_client+0x40>
 801a842:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a844:	6842      	ldr	r2, [r0, #4]
 801a846:	6a1b      	ldr	r3, [r3, #32]
 801a848:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a84c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801a84e:	69d3      	ldr	r3, [r2, #28]
 801a850:	3301      	adds	r3, #1
 801a852:	2000      	movs	r0, #0
 801a854:	61d3      	str	r3, [r2, #28]
 801a856:	bd70      	pop	{r4, r5, r6, pc}
 801a858:	2001      	movs	r0, #1
 801a85a:	bd70      	pop	{r4, r5, r6, pc}
 801a85c:	f240 3086 	movw	r0, #902	@ 0x386
 801a860:	bd70      	pop	{r4, r5, r6, pc}
 801a862:	200b      	movs	r0, #11
 801a864:	4770      	bx	lr
 801a866:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a86a:	bd70      	pop	{r4, r5, r6, pc}
 801a86c:	200b      	movs	r0, #11
 801a86e:	bd70      	pop	{r4, r5, r6, pc}

0801a870 <rcl_wait_set_add_service>:
 801a870:	b318      	cbz	r0, 801a8ba <rcl_wait_set_add_service+0x4a>
 801a872:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801a874:	b570      	push	{r4, r5, r6, lr}
 801a876:	4604      	mov	r4, r0
 801a878:	b30b      	cbz	r3, 801a8be <rcl_wait_set_add_service+0x4e>
 801a87a:	b319      	cbz	r1, 801a8c4 <rcl_wait_set_add_service+0x54>
 801a87c:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801a87e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801a880:	4285      	cmp	r5, r0
 801a882:	d217      	bcs.n	801a8b4 <rcl_wait_set_add_service+0x44>
 801a884:	6a20      	ldr	r0, [r4, #32]
 801a886:	1c6e      	adds	r6, r5, #1
 801a888:	625e      	str	r6, [r3, #36]	@ 0x24
 801a88a:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 801a88e:	b102      	cbz	r2, 801a892 <rcl_wait_set_add_service+0x22>
 801a890:	6015      	str	r5, [r2, #0]
 801a892:	4608      	mov	r0, r1
 801a894:	f7ff f806 	bl	80198a4 <rcl_service_get_rmw_handle>
 801a898:	b150      	cbz	r0, 801a8b0 <rcl_wait_set_add_service+0x40>
 801a89a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801a89c:	6842      	ldr	r2, [r0, #4]
 801a89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a8a0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a8a4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801a8a6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 801a8a8:	3301      	adds	r3, #1
 801a8aa:	2000      	movs	r0, #0
 801a8ac:	6293      	str	r3, [r2, #40]	@ 0x28
 801a8ae:	bd70      	pop	{r4, r5, r6, pc}
 801a8b0:	2001      	movs	r0, #1
 801a8b2:	bd70      	pop	{r4, r5, r6, pc}
 801a8b4:	f240 3086 	movw	r0, #902	@ 0x386
 801a8b8:	bd70      	pop	{r4, r5, r6, pc}
 801a8ba:	200b      	movs	r0, #11
 801a8bc:	4770      	bx	lr
 801a8be:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801a8c2:	bd70      	pop	{r4, r5, r6, pc}
 801a8c4:	200b      	movs	r0, #11
 801a8c6:	bd70      	pop	{r4, r5, r6, pc}

0801a8c8 <rcl_wait>:
 801a8c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8cc:	ed2d 8b02 	vpush	{d8}
 801a8d0:	b08d      	sub	sp, #52	@ 0x34
 801a8d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a8d6:	2800      	cmp	r0, #0
 801a8d8:	f000 8143 	beq.w	801ab62 <rcl_wait+0x29a>
 801a8dc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801a8de:	4605      	mov	r5, r0
 801a8e0:	2e00      	cmp	r6, #0
 801a8e2:	f000 8112 	beq.w	801ab0a <rcl_wait+0x242>
 801a8e6:	6843      	ldr	r3, [r0, #4]
 801a8e8:	b983      	cbnz	r3, 801a90c <rcl_wait+0x44>
 801a8ea:	68eb      	ldr	r3, [r5, #12]
 801a8ec:	b973      	cbnz	r3, 801a90c <rcl_wait+0x44>
 801a8ee:	696b      	ldr	r3, [r5, #20]
 801a8f0:	b963      	cbnz	r3, 801a90c <rcl_wait+0x44>
 801a8f2:	69eb      	ldr	r3, [r5, #28]
 801a8f4:	b953      	cbnz	r3, 801a90c <rcl_wait+0x44>
 801a8f6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 801a8f8:	b943      	cbnz	r3, 801a90c <rcl_wait+0x44>
 801a8fa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 801a8fc:	b933      	cbnz	r3, 801a90c <rcl_wait+0x44>
 801a8fe:	f240 3085 	movw	r0, #901	@ 0x385
 801a902:	b00d      	add	sp, #52	@ 0x34
 801a904:	ecbd 8b02 	vpop	{d8}
 801a908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a90c:	9b04      	ldr	r3, [sp, #16]
 801a90e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 801a910:	2b01      	cmp	r3, #1
 801a912:	9b05      	ldr	r3, [sp, #20]
 801a914:	f173 0300 	sbcs.w	r3, r3, #0
 801a918:	f2c0 80f0 	blt.w	801aafc <rcl_wait+0x234>
 801a91c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 801a920:	4643      	mov	r3, r8
 801a922:	2a00      	cmp	r2, #0
 801a924:	f000 8133 	beq.w	801ab8e <rcl_wait+0x2c6>
 801a928:	2400      	movs	r4, #0
 801a92a:	4613      	mov	r3, r2
 801a92c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 801aba0 <rcl_wait+0x2d8>
 801a930:	46a2      	mov	sl, r4
 801a932:	46a3      	mov	fp, r4
 801a934:	f240 3921 	movw	r9, #801	@ 0x321
 801a938:	4632      	mov	r2, r6
 801a93a:	e014      	b.n	801a966 <rcl_wait+0x9e>
 801a93c:	2800      	cmp	r0, #0
 801a93e:	d1e0      	bne.n	801a902 <rcl_wait+0x3a>
 801a940:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a944:	4542      	cmp	r2, r8
 801a946:	eb73 0107 	sbcs.w	r1, r3, r7
 801a94a:	da03      	bge.n	801a954 <rcl_wait+0x8c>
 801a94c:	4690      	mov	r8, r2
 801a94e:	461f      	mov	r7, r3
 801a950:	f04f 0b01 	mov.w	fp, #1
 801a954:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801a956:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801a958:	3401      	adds	r4, #1
 801a95a:	f14a 0a00 	adc.w	sl, sl, #0
 801a95e:	429c      	cmp	r4, r3
 801a960:	f17a 0100 	sbcs.w	r1, sl, #0
 801a964:	d228      	bcs.n	801a9b8 <rcl_wait+0xf0>
 801a966:	6928      	ldr	r0, [r5, #16]
 801a968:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801a96c:	a908      	add	r1, sp, #32
 801a96e:	00a6      	lsls	r6, r4, #2
 801a970:	2800      	cmp	r0, #0
 801a972:	d0f1      	beq.n	801a958 <rcl_wait+0x90>
 801a974:	68eb      	ldr	r3, [r5, #12]
 801a976:	f8d2 c014 	ldr.w	ip, [r2, #20]
 801a97a:	4423      	add	r3, r4
 801a97c:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801a980:	f1be 0f00 	cmp.w	lr, #0
 801a984:	d006      	beq.n	801a994 <rcl_wait+0xcc>
 801a986:	6913      	ldr	r3, [r2, #16]
 801a988:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801a98c:	3301      	adds	r3, #1
 801a98e:	6113      	str	r3, [r2, #16]
 801a990:	692b      	ldr	r3, [r5, #16]
 801a992:	5998      	ldr	r0, [r3, r6]
 801a994:	ed8d 8b08 	vstr	d8, [sp, #32]
 801a998:	f7ff fa96 	bl	8019ec8 <rcl_timer_get_time_until_next_call>
 801a99c:	4548      	cmp	r0, r9
 801a99e:	d1cd      	bne.n	801a93c <rcl_wait+0x74>
 801a9a0:	692b      	ldr	r3, [r5, #16]
 801a9a2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801a9a4:	2100      	movs	r1, #0
 801a9a6:	5199      	str	r1, [r3, r6]
 801a9a8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801a9aa:	3401      	adds	r4, #1
 801a9ac:	f14a 0a00 	adc.w	sl, sl, #0
 801a9b0:	429c      	cmp	r4, r3
 801a9b2:	f17a 0100 	sbcs.w	r1, sl, #0
 801a9b6:	d3d6      	bcc.n	801a966 <rcl_wait+0x9e>
 801a9b8:	4616      	mov	r6, r2
 801a9ba:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801a9be:	4313      	orrs	r3, r2
 801a9c0:	46d9      	mov	r9, fp
 801a9c2:	f040 80a9 	bne.w	801ab18 <rcl_wait+0x250>
 801a9c6:	2300      	movs	r3, #0
 801a9c8:	2200      	movs	r2, #0
 801a9ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a9ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801a9d2:	ab08      	add	r3, sp, #32
 801a9d4:	9302      	str	r3, [sp, #8]
 801a9d6:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 801a9d8:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801a9dc:	e9cd 3200 	strd	r3, r2, [sp]
 801a9e0:	f106 0110 	add.w	r1, r6, #16
 801a9e4:	f106 031c 	add.w	r3, r6, #28
 801a9e8:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801a9ec:	1d30      	adds	r0, r6, #4
 801a9ee:	f002 fb6f 	bl	801d0d0 <rmw_wait>
 801a9f2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801a9f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801a9f6:	4680      	mov	r8, r0
 801a9f8:	b1ca      	cbz	r2, 801aa2e <rcl_wait+0x166>
 801a9fa:	2400      	movs	r4, #0
 801a9fc:	4627      	mov	r7, r4
 801a9fe:	692a      	ldr	r2, [r5, #16]
 801aa00:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 801aa04:	f10d 011f 	add.w	r1, sp, #31
 801aa08:	00a6      	lsls	r6, r4, #2
 801aa0a:	b160      	cbz	r0, 801aa26 <rcl_wait+0x15e>
 801aa0c:	f88d 701f 	strb.w	r7, [sp, #31]
 801aa10:	f7ff fa20 	bl	8019e54 <rcl_timer_is_ready>
 801aa14:	2800      	cmp	r0, #0
 801aa16:	f47f af74 	bne.w	801a902 <rcl_wait+0x3a>
 801aa1a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801aa1e:	b90b      	cbnz	r3, 801aa24 <rcl_wait+0x15c>
 801aa20:	692a      	ldr	r2, [r5, #16]
 801aa22:	5193      	str	r3, [r2, r6]
 801aa24:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801aa26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801aa28:	3401      	adds	r4, #1
 801aa2a:	42a2      	cmp	r2, r4
 801aa2c:	d8e7      	bhi.n	801a9fe <rcl_wait+0x136>
 801aa2e:	f038 0002 	bics.w	r0, r8, #2
 801aa32:	f040 8090 	bne.w	801ab56 <rcl_wait+0x28e>
 801aa36:	686e      	ldr	r6, [r5, #4]
 801aa38:	4602      	mov	r2, r0
 801aa3a:	b91e      	cbnz	r6, 801aa44 <rcl_wait+0x17c>
 801aa3c:	e00d      	b.n	801aa5a <rcl_wait+0x192>
 801aa3e:	3201      	adds	r2, #1
 801aa40:	42b2      	cmp	r2, r6
 801aa42:	d00a      	beq.n	801aa5a <rcl_wait+0x192>
 801aa44:	6899      	ldr	r1, [r3, #8]
 801aa46:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801aa4a:	2900      	cmp	r1, #0
 801aa4c:	d1f7      	bne.n	801aa3e <rcl_wait+0x176>
 801aa4e:	682c      	ldr	r4, [r5, #0]
 801aa50:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801aa54:	3201      	adds	r2, #1
 801aa56:	42b2      	cmp	r2, r6
 801aa58:	d1f4      	bne.n	801aa44 <rcl_wait+0x17c>
 801aa5a:	68ee      	ldr	r6, [r5, #12]
 801aa5c:	2200      	movs	r2, #0
 801aa5e:	b91e      	cbnz	r6, 801aa68 <rcl_wait+0x1a0>
 801aa60:	e00d      	b.n	801aa7e <rcl_wait+0x1b6>
 801aa62:	3201      	adds	r2, #1
 801aa64:	42b2      	cmp	r2, r6
 801aa66:	d00a      	beq.n	801aa7e <rcl_wait+0x1b6>
 801aa68:	6959      	ldr	r1, [r3, #20]
 801aa6a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801aa6e:	2900      	cmp	r1, #0
 801aa70:	d1f7      	bne.n	801aa62 <rcl_wait+0x19a>
 801aa72:	68ac      	ldr	r4, [r5, #8]
 801aa74:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801aa78:	3201      	adds	r2, #1
 801aa7a:	42b2      	cmp	r2, r6
 801aa7c:	d1f4      	bne.n	801aa68 <rcl_wait+0x1a0>
 801aa7e:	69ee      	ldr	r6, [r5, #28]
 801aa80:	2200      	movs	r2, #0
 801aa82:	b91e      	cbnz	r6, 801aa8c <rcl_wait+0x1c4>
 801aa84:	e00d      	b.n	801aaa2 <rcl_wait+0x1da>
 801aa86:	3201      	adds	r2, #1
 801aa88:	42b2      	cmp	r2, r6
 801aa8a:	d00a      	beq.n	801aaa2 <rcl_wait+0x1da>
 801aa8c:	6a19      	ldr	r1, [r3, #32]
 801aa8e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801aa92:	2900      	cmp	r1, #0
 801aa94:	d1f7      	bne.n	801aa86 <rcl_wait+0x1be>
 801aa96:	69ac      	ldr	r4, [r5, #24]
 801aa98:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801aa9c:	3201      	adds	r2, #1
 801aa9e:	42b2      	cmp	r2, r6
 801aaa0:	d1f4      	bne.n	801aa8c <rcl_wait+0x1c4>
 801aaa2:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 801aaa4:	2200      	movs	r2, #0
 801aaa6:	b91e      	cbnz	r6, 801aab0 <rcl_wait+0x1e8>
 801aaa8:	e00d      	b.n	801aac6 <rcl_wait+0x1fe>
 801aaaa:	3201      	adds	r2, #1
 801aaac:	4296      	cmp	r6, r2
 801aaae:	d00a      	beq.n	801aac6 <rcl_wait+0x1fe>
 801aab0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801aab2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801aab6:	2900      	cmp	r1, #0
 801aab8:	d1f7      	bne.n	801aaaa <rcl_wait+0x1e2>
 801aaba:	6a2c      	ldr	r4, [r5, #32]
 801aabc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801aac0:	3201      	adds	r2, #1
 801aac2:	4296      	cmp	r6, r2
 801aac4:	d1f4      	bne.n	801aab0 <rcl_wait+0x1e8>
 801aac6:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 801aac8:	2200      	movs	r2, #0
 801aaca:	b91e      	cbnz	r6, 801aad4 <rcl_wait+0x20c>
 801aacc:	e00d      	b.n	801aaea <rcl_wait+0x222>
 801aace:	3201      	adds	r2, #1
 801aad0:	42b2      	cmp	r2, r6
 801aad2:	d00a      	beq.n	801aaea <rcl_wait+0x222>
 801aad4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801aad6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801aada:	2900      	cmp	r1, #0
 801aadc:	d1f7      	bne.n	801aace <rcl_wait+0x206>
 801aade:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 801aae0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 801aae4:	3201      	adds	r2, #1
 801aae6:	42b2      	cmp	r2, r6
 801aae8:	d1f4      	bne.n	801aad4 <rcl_wait+0x20c>
 801aaea:	f1b8 0f02 	cmp.w	r8, #2
 801aaee:	f47f af08 	bne.w	801a902 <rcl_wait+0x3a>
 801aaf2:	464b      	mov	r3, r9
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	bf08      	it	eq
 801aaf8:	2002      	moveq	r0, #2
 801aafa:	e702      	b.n	801a902 <rcl_wait+0x3a>
 801aafc:	2a00      	cmp	r2, #0
 801aafe:	d03a      	beq.n	801ab76 <rcl_wait+0x2ae>
 801ab00:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801ab04:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801ab08:	e70e      	b.n	801a928 <rcl_wait+0x60>
 801ab0a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801ab0e:	b00d      	add	sp, #52	@ 0x34
 801ab10:	ecbd 8b02 	vpop	{d8}
 801ab14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab18:	9b04      	ldr	r3, [sp, #16]
 801ab1a:	2b01      	cmp	r3, #1
 801ab1c:	9b05      	ldr	r3, [sp, #20]
 801ab1e:	f173 0300 	sbcs.w	r3, r3, #0
 801ab22:	db24      	blt.n	801ab6e <rcl_wait+0x2a6>
 801ab24:	2f00      	cmp	r7, #0
 801ab26:	bfbc      	itt	lt
 801ab28:	f04f 0800 	movlt.w	r8, #0
 801ab2c:	4647      	movlt	r7, r8
 801ab2e:	a31e      	add	r3, pc, #120	@ (adr r3, 801aba8 <rcl_wait+0x2e0>)
 801ab30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab34:	4640      	mov	r0, r8
 801ab36:	4639      	mov	r1, r7
 801ab38:	f7e5 fdbe 	bl	80006b8 <__aeabi_ldivmod>
 801ab3c:	a31a      	add	r3, pc, #104	@ (adr r3, 801aba8 <rcl_wait+0x2e0>)
 801ab3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab42:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ab46:	4640      	mov	r0, r8
 801ab48:	4639      	mov	r1, r7
 801ab4a:	f7e5 fdb5 	bl	80006b8 <__aeabi_ldivmod>
 801ab4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 801ab52:	ab08      	add	r3, sp, #32
 801ab54:	e73e      	b.n	801a9d4 <rcl_wait+0x10c>
 801ab56:	2001      	movs	r0, #1
 801ab58:	b00d      	add	sp, #52	@ 0x34
 801ab5a:	ecbd 8b02 	vpop	{d8}
 801ab5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab62:	200b      	movs	r0, #11
 801ab64:	b00d      	add	sp, #52	@ 0x34
 801ab66:	ecbd 8b02 	vpop	{d8}
 801ab6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab6e:	465b      	mov	r3, fp
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d1d7      	bne.n	801ab24 <rcl_wait+0x25c>
 801ab74:	e72e      	b.n	801a9d4 <rcl_wait+0x10c>
 801ab76:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801ab7a:	430b      	orrs	r3, r1
 801ab7c:	bf08      	it	eq
 801ab7e:	4691      	moveq	r9, r2
 801ab80:	f43f af21 	beq.w	801a9c6 <rcl_wait+0xfe>
 801ab84:	9b04      	ldr	r3, [sp, #16]
 801ab86:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801ab8a:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 801ab8e:	2b01      	cmp	r3, #1
 801ab90:	9b05      	ldr	r3, [sp, #20]
 801ab92:	f173 0300 	sbcs.w	r3, r3, #0
 801ab96:	f04f 0300 	mov.w	r3, #0
 801ab9a:	4699      	mov	r9, r3
 801ab9c:	dac2      	bge.n	801ab24 <rcl_wait+0x25c>
 801ab9e:	e719      	b.n	801a9d4 <rcl_wait+0x10c>
 801aba0:	ffffffff 	.word	0xffffffff
 801aba4:	7fffffff 	.word	0x7fffffff
 801aba8:	3b9aca00 	.word	0x3b9aca00
 801abac:	00000000 	.word	0x00000000

0801abb0 <rcl_action_take_goal_response>:
 801abb0:	2800      	cmp	r0, #0
 801abb2:	d039      	beq.n	801ac28 <rcl_action_take_goal_response+0x78>
 801abb4:	b570      	push	{r4, r5, r6, lr}
 801abb6:	4604      	mov	r4, r0
 801abb8:	6800      	ldr	r0, [r0, #0]
 801abba:	b380      	cbz	r0, 801ac1e <rcl_action_take_goal_response+0x6e>
 801abbc:	460d      	mov	r5, r1
 801abbe:	4616      	mov	r6, r2
 801abc0:	f7fe f876 	bl	8018cb0 <rcl_client_is_valid>
 801abc4:	b330      	cbz	r0, 801ac14 <rcl_action_take_goal_response+0x64>
 801abc6:	6820      	ldr	r0, [r4, #0]
 801abc8:	3004      	adds	r0, #4
 801abca:	f7fe f871 	bl	8018cb0 <rcl_client_is_valid>
 801abce:	b308      	cbz	r0, 801ac14 <rcl_action_take_goal_response+0x64>
 801abd0:	6820      	ldr	r0, [r4, #0]
 801abd2:	3008      	adds	r0, #8
 801abd4:	f7fe f86c 	bl	8018cb0 <rcl_client_is_valid>
 801abd8:	b1e0      	cbz	r0, 801ac14 <rcl_action_take_goal_response+0x64>
 801abda:	6820      	ldr	r0, [r4, #0]
 801abdc:	300c      	adds	r0, #12
 801abde:	f7ff f801 	bl	8019be4 <rcl_subscription_is_valid>
 801abe2:	b1b8      	cbz	r0, 801ac14 <rcl_action_take_goal_response+0x64>
 801abe4:	6820      	ldr	r0, [r4, #0]
 801abe6:	3010      	adds	r0, #16
 801abe8:	f7fe fffc 	bl	8019be4 <rcl_subscription_is_valid>
 801abec:	b190      	cbz	r0, 801ac14 <rcl_action_take_goal_response+0x64>
 801abee:	b1cd      	cbz	r5, 801ac24 <rcl_action_take_goal_response+0x74>
 801abf0:	b1c6      	cbz	r6, 801ac24 <rcl_action_take_goal_response+0x74>
 801abf2:	6820      	ldr	r0, [r4, #0]
 801abf4:	4632      	mov	r2, r6
 801abf6:	4629      	mov	r1, r5
 801abf8:	f7fe f812 	bl	8018c20 <rcl_take_response>
 801abfc:	b148      	cbz	r0, 801ac12 <rcl_action_take_goal_response+0x62>
 801abfe:	280a      	cmp	r0, #10
 801ac00:	d007      	beq.n	801ac12 <rcl_action_take_goal_response+0x62>
 801ac02:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801ac06:	f640 0337 	movw	r3, #2103	@ 0x837
 801ac0a:	4290      	cmp	r0, r2
 801ac0c:	bf0c      	ite	eq
 801ac0e:	4618      	moveq	r0, r3
 801ac10:	2001      	movne	r0, #1
 801ac12:	bd70      	pop	{r4, r5, r6, pc}
 801ac14:	f7f9 fc9c 	bl	8014550 <rcutils_reset_error>
 801ac18:	f640 0036 	movw	r0, #2102	@ 0x836
 801ac1c:	bd70      	pop	{r4, r5, r6, pc}
 801ac1e:	f640 0036 	movw	r0, #2102	@ 0x836
 801ac22:	bd70      	pop	{r4, r5, r6, pc}
 801ac24:	200b      	movs	r0, #11
 801ac26:	bd70      	pop	{r4, r5, r6, pc}
 801ac28:	f640 0036 	movw	r0, #2102	@ 0x836
 801ac2c:	4770      	bx	lr
 801ac2e:	bf00      	nop

0801ac30 <rcl_action_send_result_request>:
 801ac30:	b390      	cbz	r0, 801ac98 <rcl_action_send_result_request+0x68>
 801ac32:	b570      	push	{r4, r5, r6, lr}
 801ac34:	4604      	mov	r4, r0
 801ac36:	6800      	ldr	r0, [r0, #0]
 801ac38:	b348      	cbz	r0, 801ac8e <rcl_action_send_result_request+0x5e>
 801ac3a:	460d      	mov	r5, r1
 801ac3c:	4616      	mov	r6, r2
 801ac3e:	f7fe f837 	bl	8018cb0 <rcl_client_is_valid>
 801ac42:	b1f8      	cbz	r0, 801ac84 <rcl_action_send_result_request+0x54>
 801ac44:	6820      	ldr	r0, [r4, #0]
 801ac46:	3004      	adds	r0, #4
 801ac48:	f7fe f832 	bl	8018cb0 <rcl_client_is_valid>
 801ac4c:	b1d0      	cbz	r0, 801ac84 <rcl_action_send_result_request+0x54>
 801ac4e:	6820      	ldr	r0, [r4, #0]
 801ac50:	3008      	adds	r0, #8
 801ac52:	f7fe f82d 	bl	8018cb0 <rcl_client_is_valid>
 801ac56:	b1a8      	cbz	r0, 801ac84 <rcl_action_send_result_request+0x54>
 801ac58:	6820      	ldr	r0, [r4, #0]
 801ac5a:	300c      	adds	r0, #12
 801ac5c:	f7fe ffc2 	bl	8019be4 <rcl_subscription_is_valid>
 801ac60:	b180      	cbz	r0, 801ac84 <rcl_action_send_result_request+0x54>
 801ac62:	6820      	ldr	r0, [r4, #0]
 801ac64:	3010      	adds	r0, #16
 801ac66:	f7fe ffbd 	bl	8019be4 <rcl_subscription_is_valid>
 801ac6a:	b158      	cbz	r0, 801ac84 <rcl_action_send_result_request+0x54>
 801ac6c:	b195      	cbz	r5, 801ac94 <rcl_action_send_result_request+0x64>
 801ac6e:	b18e      	cbz	r6, 801ac94 <rcl_action_send_result_request+0x64>
 801ac70:	6820      	ldr	r0, [r4, #0]
 801ac72:	4632      	mov	r2, r6
 801ac74:	4629      	mov	r1, r5
 801ac76:	3008      	adds	r0, #8
 801ac78:	f7fd ff9c 	bl	8018bb4 <rcl_send_request>
 801ac7c:	3800      	subs	r0, #0
 801ac7e:	bf18      	it	ne
 801ac80:	2001      	movne	r0, #1
 801ac82:	bd70      	pop	{r4, r5, r6, pc}
 801ac84:	f7f9 fc64 	bl	8014550 <rcutils_reset_error>
 801ac88:	f640 0036 	movw	r0, #2102	@ 0x836
 801ac8c:	bd70      	pop	{r4, r5, r6, pc}
 801ac8e:	f640 0036 	movw	r0, #2102	@ 0x836
 801ac92:	bd70      	pop	{r4, r5, r6, pc}
 801ac94:	200b      	movs	r0, #11
 801ac96:	bd70      	pop	{r4, r5, r6, pc}
 801ac98:	f640 0036 	movw	r0, #2102	@ 0x836
 801ac9c:	4770      	bx	lr
 801ac9e:	bf00      	nop

0801aca0 <rcl_action_take_result_response>:
 801aca0:	2800      	cmp	r0, #0
 801aca2:	d03a      	beq.n	801ad1a <rcl_action_take_result_response+0x7a>
 801aca4:	b570      	push	{r4, r5, r6, lr}
 801aca6:	4604      	mov	r4, r0
 801aca8:	6800      	ldr	r0, [r0, #0]
 801acaa:	b388      	cbz	r0, 801ad10 <rcl_action_take_result_response+0x70>
 801acac:	460d      	mov	r5, r1
 801acae:	4616      	mov	r6, r2
 801acb0:	f7fd fffe 	bl	8018cb0 <rcl_client_is_valid>
 801acb4:	b338      	cbz	r0, 801ad06 <rcl_action_take_result_response+0x66>
 801acb6:	6820      	ldr	r0, [r4, #0]
 801acb8:	3004      	adds	r0, #4
 801acba:	f7fd fff9 	bl	8018cb0 <rcl_client_is_valid>
 801acbe:	b310      	cbz	r0, 801ad06 <rcl_action_take_result_response+0x66>
 801acc0:	6820      	ldr	r0, [r4, #0]
 801acc2:	3008      	adds	r0, #8
 801acc4:	f7fd fff4 	bl	8018cb0 <rcl_client_is_valid>
 801acc8:	b1e8      	cbz	r0, 801ad06 <rcl_action_take_result_response+0x66>
 801acca:	6820      	ldr	r0, [r4, #0]
 801accc:	300c      	adds	r0, #12
 801acce:	f7fe ff89 	bl	8019be4 <rcl_subscription_is_valid>
 801acd2:	b1c0      	cbz	r0, 801ad06 <rcl_action_take_result_response+0x66>
 801acd4:	6820      	ldr	r0, [r4, #0]
 801acd6:	3010      	adds	r0, #16
 801acd8:	f7fe ff84 	bl	8019be4 <rcl_subscription_is_valid>
 801acdc:	b198      	cbz	r0, 801ad06 <rcl_action_take_result_response+0x66>
 801acde:	b1d5      	cbz	r5, 801ad16 <rcl_action_take_result_response+0x76>
 801ace0:	b1ce      	cbz	r6, 801ad16 <rcl_action_take_result_response+0x76>
 801ace2:	6820      	ldr	r0, [r4, #0]
 801ace4:	4632      	mov	r2, r6
 801ace6:	4629      	mov	r1, r5
 801ace8:	3008      	adds	r0, #8
 801acea:	f7fd ff99 	bl	8018c20 <rcl_take_response>
 801acee:	b148      	cbz	r0, 801ad04 <rcl_action_take_result_response+0x64>
 801acf0:	280a      	cmp	r0, #10
 801acf2:	d007      	beq.n	801ad04 <rcl_action_take_result_response+0x64>
 801acf4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801acf8:	f640 0337 	movw	r3, #2103	@ 0x837
 801acfc:	4290      	cmp	r0, r2
 801acfe:	bf0c      	ite	eq
 801ad00:	4618      	moveq	r0, r3
 801ad02:	2001      	movne	r0, #1
 801ad04:	bd70      	pop	{r4, r5, r6, pc}
 801ad06:	f7f9 fc23 	bl	8014550 <rcutils_reset_error>
 801ad0a:	f640 0036 	movw	r0, #2102	@ 0x836
 801ad0e:	bd70      	pop	{r4, r5, r6, pc}
 801ad10:	f640 0036 	movw	r0, #2102	@ 0x836
 801ad14:	bd70      	pop	{r4, r5, r6, pc}
 801ad16:	200b      	movs	r0, #11
 801ad18:	bd70      	pop	{r4, r5, r6, pc}
 801ad1a:	f640 0036 	movw	r0, #2102	@ 0x836
 801ad1e:	4770      	bx	lr

0801ad20 <rcl_action_take_cancel_response>:
 801ad20:	2800      	cmp	r0, #0
 801ad22:	d03a      	beq.n	801ad9a <rcl_action_take_cancel_response+0x7a>
 801ad24:	b570      	push	{r4, r5, r6, lr}
 801ad26:	4604      	mov	r4, r0
 801ad28:	6800      	ldr	r0, [r0, #0]
 801ad2a:	b388      	cbz	r0, 801ad90 <rcl_action_take_cancel_response+0x70>
 801ad2c:	460d      	mov	r5, r1
 801ad2e:	4616      	mov	r6, r2
 801ad30:	f7fd ffbe 	bl	8018cb0 <rcl_client_is_valid>
 801ad34:	b338      	cbz	r0, 801ad86 <rcl_action_take_cancel_response+0x66>
 801ad36:	6820      	ldr	r0, [r4, #0]
 801ad38:	3004      	adds	r0, #4
 801ad3a:	f7fd ffb9 	bl	8018cb0 <rcl_client_is_valid>
 801ad3e:	b310      	cbz	r0, 801ad86 <rcl_action_take_cancel_response+0x66>
 801ad40:	6820      	ldr	r0, [r4, #0]
 801ad42:	3008      	adds	r0, #8
 801ad44:	f7fd ffb4 	bl	8018cb0 <rcl_client_is_valid>
 801ad48:	b1e8      	cbz	r0, 801ad86 <rcl_action_take_cancel_response+0x66>
 801ad4a:	6820      	ldr	r0, [r4, #0]
 801ad4c:	300c      	adds	r0, #12
 801ad4e:	f7fe ff49 	bl	8019be4 <rcl_subscription_is_valid>
 801ad52:	b1c0      	cbz	r0, 801ad86 <rcl_action_take_cancel_response+0x66>
 801ad54:	6820      	ldr	r0, [r4, #0]
 801ad56:	3010      	adds	r0, #16
 801ad58:	f7fe ff44 	bl	8019be4 <rcl_subscription_is_valid>
 801ad5c:	b198      	cbz	r0, 801ad86 <rcl_action_take_cancel_response+0x66>
 801ad5e:	b1d5      	cbz	r5, 801ad96 <rcl_action_take_cancel_response+0x76>
 801ad60:	b1ce      	cbz	r6, 801ad96 <rcl_action_take_cancel_response+0x76>
 801ad62:	6820      	ldr	r0, [r4, #0]
 801ad64:	4632      	mov	r2, r6
 801ad66:	4629      	mov	r1, r5
 801ad68:	3004      	adds	r0, #4
 801ad6a:	f7fd ff59 	bl	8018c20 <rcl_take_response>
 801ad6e:	b148      	cbz	r0, 801ad84 <rcl_action_take_cancel_response+0x64>
 801ad70:	280a      	cmp	r0, #10
 801ad72:	d007      	beq.n	801ad84 <rcl_action_take_cancel_response+0x64>
 801ad74:	f240 12f5 	movw	r2, #501	@ 0x1f5
 801ad78:	f640 0337 	movw	r3, #2103	@ 0x837
 801ad7c:	4290      	cmp	r0, r2
 801ad7e:	bf0c      	ite	eq
 801ad80:	4618      	moveq	r0, r3
 801ad82:	2001      	movne	r0, #1
 801ad84:	bd70      	pop	{r4, r5, r6, pc}
 801ad86:	f7f9 fbe3 	bl	8014550 <rcutils_reset_error>
 801ad8a:	f640 0036 	movw	r0, #2102	@ 0x836
 801ad8e:	bd70      	pop	{r4, r5, r6, pc}
 801ad90:	f640 0036 	movw	r0, #2102	@ 0x836
 801ad94:	bd70      	pop	{r4, r5, r6, pc}
 801ad96:	200b      	movs	r0, #11
 801ad98:	bd70      	pop	{r4, r5, r6, pc}
 801ad9a:	f640 0036 	movw	r0, #2102	@ 0x836
 801ad9e:	4770      	bx	lr

0801ada0 <rcl_action_take_feedback>:
 801ada0:	2800      	cmp	r0, #0
 801ada2:	d038      	beq.n	801ae16 <rcl_action_take_feedback+0x76>
 801ada4:	b530      	push	{r4, r5, lr}
 801ada6:	4604      	mov	r4, r0
 801ada8:	6800      	ldr	r0, [r0, #0]
 801adaa:	b091      	sub	sp, #68	@ 0x44
 801adac:	b378      	cbz	r0, 801ae0e <rcl_action_take_feedback+0x6e>
 801adae:	460d      	mov	r5, r1
 801adb0:	f7fd ff7e 	bl	8018cb0 <rcl_client_is_valid>
 801adb4:	b328      	cbz	r0, 801ae02 <rcl_action_take_feedback+0x62>
 801adb6:	6820      	ldr	r0, [r4, #0]
 801adb8:	3004      	adds	r0, #4
 801adba:	f7fd ff79 	bl	8018cb0 <rcl_client_is_valid>
 801adbe:	b300      	cbz	r0, 801ae02 <rcl_action_take_feedback+0x62>
 801adc0:	6820      	ldr	r0, [r4, #0]
 801adc2:	3008      	adds	r0, #8
 801adc4:	f7fd ff74 	bl	8018cb0 <rcl_client_is_valid>
 801adc8:	b1d8      	cbz	r0, 801ae02 <rcl_action_take_feedback+0x62>
 801adca:	6820      	ldr	r0, [r4, #0]
 801adcc:	300c      	adds	r0, #12
 801adce:	f7fe ff09 	bl	8019be4 <rcl_subscription_is_valid>
 801add2:	b1b0      	cbz	r0, 801ae02 <rcl_action_take_feedback+0x62>
 801add4:	6820      	ldr	r0, [r4, #0]
 801add6:	3010      	adds	r0, #16
 801add8:	f7fe ff04 	bl	8019be4 <rcl_subscription_is_valid>
 801addc:	b188      	cbz	r0, 801ae02 <rcl_action_take_feedback+0x62>
 801adde:	b1ed      	cbz	r5, 801ae1c <rcl_action_take_feedback+0x7c>
 801ade0:	6820      	ldr	r0, [r4, #0]
 801ade2:	2300      	movs	r3, #0
 801ade4:	466a      	mov	r2, sp
 801ade6:	4629      	mov	r1, r5
 801ade8:	300c      	adds	r0, #12
 801adea:	f7fe fe9d 	bl	8019b28 <rcl_take>
 801adee:	b160      	cbz	r0, 801ae0a <rcl_action_take_feedback+0x6a>
 801adf0:	f240 1391 	movw	r3, #401	@ 0x191
 801adf4:	4298      	cmp	r0, r3
 801adf6:	d014      	beq.n	801ae22 <rcl_action_take_feedback+0x82>
 801adf8:	280a      	cmp	r0, #10
 801adfa:	bf18      	it	ne
 801adfc:	2001      	movne	r0, #1
 801adfe:	b011      	add	sp, #68	@ 0x44
 801ae00:	bd30      	pop	{r4, r5, pc}
 801ae02:	f7f9 fba5 	bl	8014550 <rcutils_reset_error>
 801ae06:	f640 0036 	movw	r0, #2102	@ 0x836
 801ae0a:	b011      	add	sp, #68	@ 0x44
 801ae0c:	bd30      	pop	{r4, r5, pc}
 801ae0e:	f640 0036 	movw	r0, #2102	@ 0x836
 801ae12:	b011      	add	sp, #68	@ 0x44
 801ae14:	bd30      	pop	{r4, r5, pc}
 801ae16:	f640 0036 	movw	r0, #2102	@ 0x836
 801ae1a:	4770      	bx	lr
 801ae1c:	200b      	movs	r0, #11
 801ae1e:	b011      	add	sp, #68	@ 0x44
 801ae20:	bd30      	pop	{r4, r5, pc}
 801ae22:	f640 0037 	movw	r0, #2103	@ 0x837
 801ae26:	e7f0      	b.n	801ae0a <rcl_action_take_feedback+0x6a>

0801ae28 <rcl_action_wait_set_add_action_client>:
 801ae28:	2800      	cmp	r0, #0
 801ae2a:	d048      	beq.n	801aebe <rcl_action_wait_set_add_action_client+0x96>
 801ae2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae2e:	460c      	mov	r4, r1
 801ae30:	2900      	cmp	r1, #0
 801ae32:	d03c      	beq.n	801aeae <rcl_action_wait_set_add_action_client+0x86>
 801ae34:	4605      	mov	r5, r0
 801ae36:	6808      	ldr	r0, [r1, #0]
 801ae38:	2800      	cmp	r0, #0
 801ae3a:	d038      	beq.n	801aeae <rcl_action_wait_set_add_action_client+0x86>
 801ae3c:	4617      	mov	r7, r2
 801ae3e:	461e      	mov	r6, r3
 801ae40:	f7fd ff36 	bl	8018cb0 <rcl_client_is_valid>
 801ae44:	b3b0      	cbz	r0, 801aeb4 <rcl_action_wait_set_add_action_client+0x8c>
 801ae46:	6820      	ldr	r0, [r4, #0]
 801ae48:	3004      	adds	r0, #4
 801ae4a:	f7fd ff31 	bl	8018cb0 <rcl_client_is_valid>
 801ae4e:	b388      	cbz	r0, 801aeb4 <rcl_action_wait_set_add_action_client+0x8c>
 801ae50:	6820      	ldr	r0, [r4, #0]
 801ae52:	3008      	adds	r0, #8
 801ae54:	f7fd ff2c 	bl	8018cb0 <rcl_client_is_valid>
 801ae58:	b360      	cbz	r0, 801aeb4 <rcl_action_wait_set_add_action_client+0x8c>
 801ae5a:	6820      	ldr	r0, [r4, #0]
 801ae5c:	300c      	adds	r0, #12
 801ae5e:	f7fe fec1 	bl	8019be4 <rcl_subscription_is_valid>
 801ae62:	b338      	cbz	r0, 801aeb4 <rcl_action_wait_set_add_action_client+0x8c>
 801ae64:	6820      	ldr	r0, [r4, #0]
 801ae66:	3010      	adds	r0, #16
 801ae68:	f7fe febc 	bl	8019be4 <rcl_subscription_is_valid>
 801ae6c:	b310      	cbz	r0, 801aeb4 <rcl_action_wait_set_add_action_client+0x8c>
 801ae6e:	6821      	ldr	r1, [r4, #0]
 801ae70:	4628      	mov	r0, r5
 801ae72:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801ae76:	f7ff fccf 	bl	801a818 <rcl_wait_set_add_client>
 801ae7a:	b9b8      	cbnz	r0, 801aeac <rcl_action_wait_set_add_action_client+0x84>
 801ae7c:	6821      	ldr	r1, [r4, #0]
 801ae7e:	4628      	mov	r0, r5
 801ae80:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801ae84:	3104      	adds	r1, #4
 801ae86:	f7ff fcc7 	bl	801a818 <rcl_wait_set_add_client>
 801ae8a:	b978      	cbnz	r0, 801aeac <rcl_action_wait_set_add_action_client+0x84>
 801ae8c:	6821      	ldr	r1, [r4, #0]
 801ae8e:	4628      	mov	r0, r5
 801ae90:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801ae94:	3108      	adds	r1, #8
 801ae96:	f7ff fcbf 	bl	801a818 <rcl_wait_set_add_client>
 801ae9a:	b938      	cbnz	r0, 801aeac <rcl_action_wait_set_add_action_client+0x84>
 801ae9c:	6821      	ldr	r1, [r4, #0]
 801ae9e:	4628      	mov	r0, r5
 801aea0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 801aea4:	310c      	adds	r1, #12
 801aea6:	f7ff f96f 	bl	801a188 <rcl_wait_set_add_subscription>
 801aeaa:	b158      	cbz	r0, 801aec4 <rcl_action_wait_set_add_action_client+0x9c>
 801aeac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aeae:	f640 0036 	movw	r0, #2102	@ 0x836
 801aeb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aeb4:	f7f9 fb4c 	bl	8014550 <rcutils_reset_error>
 801aeb8:	f640 0036 	movw	r0, #2102	@ 0x836
 801aebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aebe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801aec2:	4770      	bx	lr
 801aec4:	6821      	ldr	r1, [r4, #0]
 801aec6:	4628      	mov	r0, r5
 801aec8:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801aecc:	3110      	adds	r1, #16
 801aece:	f7ff f95b 	bl	801a188 <rcl_wait_set_add_subscription>
 801aed2:	2800      	cmp	r0, #0
 801aed4:	d1ea      	bne.n	801aeac <rcl_action_wait_set_add_action_client+0x84>
 801aed6:	b11f      	cbz	r7, 801aee0 <rcl_action_wait_set_add_action_client+0xb8>
 801aed8:	6823      	ldr	r3, [r4, #0]
 801aeda:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801aede:	603b      	str	r3, [r7, #0]
 801aee0:	2e00      	cmp	r6, #0
 801aee2:	d0e3      	beq.n	801aeac <rcl_action_wait_set_add_action_client+0x84>
 801aee4:	6823      	ldr	r3, [r4, #0]
 801aee6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801aeea:	6033      	str	r3, [r6, #0]
 801aeec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aeee:	bf00      	nop

0801aef0 <rcl_action_client_wait_set_get_entities_ready>:
 801aef0:	2800      	cmp	r0, #0
 801aef2:	f000 808d 	beq.w	801b010 <rcl_action_client_wait_set_get_entities_ready+0x120>
 801aef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aefa:	460c      	mov	r4, r1
 801aefc:	2900      	cmp	r1, #0
 801aefe:	d077      	beq.n	801aff0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801af00:	4605      	mov	r5, r0
 801af02:	6808      	ldr	r0, [r1, #0]
 801af04:	2800      	cmp	r0, #0
 801af06:	d073      	beq.n	801aff0 <rcl_action_client_wait_set_get_entities_ready+0x100>
 801af08:	4616      	mov	r6, r2
 801af0a:	461f      	mov	r7, r3
 801af0c:	f7fd fed0 	bl	8018cb0 <rcl_client_is_valid>
 801af10:	2800      	cmp	r0, #0
 801af12:	d071      	beq.n	801aff8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801af14:	6820      	ldr	r0, [r4, #0]
 801af16:	3004      	adds	r0, #4
 801af18:	f7fd feca 	bl	8018cb0 <rcl_client_is_valid>
 801af1c:	2800      	cmp	r0, #0
 801af1e:	d06b      	beq.n	801aff8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801af20:	6820      	ldr	r0, [r4, #0]
 801af22:	3008      	adds	r0, #8
 801af24:	f7fd fec4 	bl	8018cb0 <rcl_client_is_valid>
 801af28:	2800      	cmp	r0, #0
 801af2a:	d065      	beq.n	801aff8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801af2c:	6820      	ldr	r0, [r4, #0]
 801af2e:	300c      	adds	r0, #12
 801af30:	f7fe fe58 	bl	8019be4 <rcl_subscription_is_valid>
 801af34:	2800      	cmp	r0, #0
 801af36:	d05f      	beq.n	801aff8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801af38:	6820      	ldr	r0, [r4, #0]
 801af3a:	3010      	adds	r0, #16
 801af3c:	f7fe fe52 	bl	8019be4 <rcl_subscription_is_valid>
 801af40:	2800      	cmp	r0, #0
 801af42:	d059      	beq.n	801aff8 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801af44:	2e00      	cmp	r6, #0
 801af46:	d060      	beq.n	801b00a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801af48:	2f00      	cmp	r7, #0
 801af4a:	d05e      	beq.n	801b00a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801af4c:	9b06      	ldr	r3, [sp, #24]
 801af4e:	2b00      	cmp	r3, #0
 801af50:	d05b      	beq.n	801b00a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801af52:	9b07      	ldr	r3, [sp, #28]
 801af54:	2b00      	cmp	r3, #0
 801af56:	d058      	beq.n	801b00a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801af58:	9b08      	ldr	r3, [sp, #32]
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	d055      	beq.n	801b00a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801af5e:	6823      	ldr	r3, [r4, #0]
 801af60:	686a      	ldr	r2, [r5, #4]
 801af62:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801af66:	428a      	cmp	r2, r1
 801af68:	d94c      	bls.n	801b004 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801af6a:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 801af6e:	4282      	cmp	r2, r0
 801af70:	d948      	bls.n	801b004 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801af72:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801af76:	69ea      	ldr	r2, [r5, #28]
 801af78:	42a2      	cmp	r2, r4
 801af7a:	d943      	bls.n	801b004 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801af7c:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 801af80:	4562      	cmp	r2, ip
 801af82:	d93f      	bls.n	801b004 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801af84:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 801af88:	4572      	cmp	r2, lr
 801af8a:	d93b      	bls.n	801b004 <rcl_action_client_wait_set_get_entities_ready+0x114>
 801af8c:	69aa      	ldr	r2, [r5, #24]
 801af8e:	682d      	ldr	r5, [r5, #0]
 801af90:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801af94:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 801af98:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 801af9c:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 801afa0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 801afa4:	f103 0c0c 	add.w	ip, r3, #12
 801afa8:	eba5 050c 	sub.w	r5, r5, ip
 801afac:	fab5 f585 	clz	r5, r5
 801afb0:	096d      	lsrs	r5, r5, #5
 801afb2:	7035      	strb	r5, [r6, #0]
 801afb4:	f103 0510 	add.w	r5, r3, #16
 801afb8:	1b64      	subs	r4, r4, r5
 801afba:	fab4 f484 	clz	r4, r4
 801afbe:	0964      	lsrs	r4, r4, #5
 801afc0:	703c      	strb	r4, [r7, #0]
 801afc2:	eba3 0008 	sub.w	r0, r3, r8
 801afc6:	1d1c      	adds	r4, r3, #4
 801afc8:	3308      	adds	r3, #8
 801afca:	1ad3      	subs	r3, r2, r3
 801afcc:	fab0 f080 	clz	r0, r0
 801afd0:	9a06      	ldr	r2, [sp, #24]
 801afd2:	0940      	lsrs	r0, r0, #5
 801afd4:	1b09      	subs	r1, r1, r4
 801afd6:	7010      	strb	r0, [r2, #0]
 801afd8:	fab1 f181 	clz	r1, r1
 801afdc:	9a07      	ldr	r2, [sp, #28]
 801afde:	0949      	lsrs	r1, r1, #5
 801afe0:	7011      	strb	r1, [r2, #0]
 801afe2:	fab3 f383 	clz	r3, r3
 801afe6:	9a08      	ldr	r2, [sp, #32]
 801afe8:	095b      	lsrs	r3, r3, #5
 801afea:	2000      	movs	r0, #0
 801afec:	7013      	strb	r3, [r2, #0]
 801afee:	e001      	b.n	801aff4 <rcl_action_client_wait_set_get_entities_ready+0x104>
 801aff0:	f640 0036 	movw	r0, #2102	@ 0x836
 801aff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aff8:	f7f9 faaa 	bl	8014550 <rcutils_reset_error>
 801affc:	f640 0036 	movw	r0, #2102	@ 0x836
 801b000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b004:	2001      	movs	r0, #1
 801b006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b00a:	200b      	movs	r0, #11
 801b00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b010:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801b014:	4770      	bx	lr
 801b016:	bf00      	nop

0801b018 <rcl_action_take_goal_request>:
 801b018:	2800      	cmp	r0, #0
 801b01a:	d039      	beq.n	801b090 <rcl_action_take_goal_request+0x78>
 801b01c:	b570      	push	{r4, r5, r6, lr}
 801b01e:	4604      	mov	r4, r0
 801b020:	6800      	ldr	r0, [r0, #0]
 801b022:	b380      	cbz	r0, 801b086 <rcl_action_take_goal_request+0x6e>
 801b024:	460d      	mov	r5, r1
 801b026:	4616      	mov	r6, r2
 801b028:	f7fe fc98 	bl	801995c <rcl_service_is_valid>
 801b02c:	b330      	cbz	r0, 801b07c <rcl_action_take_goal_request+0x64>
 801b02e:	6820      	ldr	r0, [r4, #0]
 801b030:	3004      	adds	r0, #4
 801b032:	f7fe fc93 	bl	801995c <rcl_service_is_valid>
 801b036:	b308      	cbz	r0, 801b07c <rcl_action_take_goal_request+0x64>
 801b038:	6820      	ldr	r0, [r4, #0]
 801b03a:	3008      	adds	r0, #8
 801b03c:	f7fe fc8e 	bl	801995c <rcl_service_is_valid>
 801b040:	b1e0      	cbz	r0, 801b07c <rcl_action_take_goal_request+0x64>
 801b042:	6820      	ldr	r0, [r4, #0]
 801b044:	300c      	adds	r0, #12
 801b046:	f7f8 fafb 	bl	8013640 <rcl_publisher_is_valid>
 801b04a:	b1b8      	cbz	r0, 801b07c <rcl_action_take_goal_request+0x64>
 801b04c:	6820      	ldr	r0, [r4, #0]
 801b04e:	3010      	adds	r0, #16
 801b050:	f7f8 faf6 	bl	8013640 <rcl_publisher_is_valid>
 801b054:	b190      	cbz	r0, 801b07c <rcl_action_take_goal_request+0x64>
 801b056:	b1cd      	cbz	r5, 801b08c <rcl_action_take_goal_request+0x74>
 801b058:	b1c6      	cbz	r6, 801b08c <rcl_action_take_goal_request+0x74>
 801b05a:	6820      	ldr	r0, [r4, #0]
 801b05c:	4632      	mov	r2, r6
 801b05e:	4629      	mov	r1, r5
 801b060:	f7fe fc26 	bl	80198b0 <rcl_take_request>
 801b064:	b148      	cbz	r0, 801b07a <rcl_action_take_goal_request+0x62>
 801b066:	280a      	cmp	r0, #10
 801b068:	d007      	beq.n	801b07a <rcl_action_take_goal_request+0x62>
 801b06a:	f240 2259 	movw	r2, #601	@ 0x259
 801b06e:	f640 0399 	movw	r3, #2201	@ 0x899
 801b072:	4290      	cmp	r0, r2
 801b074:	bf0c      	ite	eq
 801b076:	4618      	moveq	r0, r3
 801b078:	2001      	movne	r0, #1
 801b07a:	bd70      	pop	{r4, r5, r6, pc}
 801b07c:	f7f9 fa68 	bl	8014550 <rcutils_reset_error>
 801b080:	f640 0098 	movw	r0, #2200	@ 0x898
 801b084:	bd70      	pop	{r4, r5, r6, pc}
 801b086:	f640 0098 	movw	r0, #2200	@ 0x898
 801b08a:	bd70      	pop	{r4, r5, r6, pc}
 801b08c:	200b      	movs	r0, #11
 801b08e:	bd70      	pop	{r4, r5, r6, pc}
 801b090:	f640 0098 	movw	r0, #2200	@ 0x898
 801b094:	4770      	bx	lr
 801b096:	bf00      	nop

0801b098 <rcl_action_send_goal_response>:
 801b098:	b388      	cbz	r0, 801b0fe <rcl_action_send_goal_response+0x66>
 801b09a:	b570      	push	{r4, r5, r6, lr}
 801b09c:	4604      	mov	r4, r0
 801b09e:	6800      	ldr	r0, [r0, #0]
 801b0a0:	b340      	cbz	r0, 801b0f4 <rcl_action_send_goal_response+0x5c>
 801b0a2:	460d      	mov	r5, r1
 801b0a4:	4616      	mov	r6, r2
 801b0a6:	f7fe fc59 	bl	801995c <rcl_service_is_valid>
 801b0aa:	b1f0      	cbz	r0, 801b0ea <rcl_action_send_goal_response+0x52>
 801b0ac:	6820      	ldr	r0, [r4, #0]
 801b0ae:	3004      	adds	r0, #4
 801b0b0:	f7fe fc54 	bl	801995c <rcl_service_is_valid>
 801b0b4:	b1c8      	cbz	r0, 801b0ea <rcl_action_send_goal_response+0x52>
 801b0b6:	6820      	ldr	r0, [r4, #0]
 801b0b8:	3008      	adds	r0, #8
 801b0ba:	f7fe fc4f 	bl	801995c <rcl_service_is_valid>
 801b0be:	b1a0      	cbz	r0, 801b0ea <rcl_action_send_goal_response+0x52>
 801b0c0:	6820      	ldr	r0, [r4, #0]
 801b0c2:	300c      	adds	r0, #12
 801b0c4:	f7f8 fabc 	bl	8013640 <rcl_publisher_is_valid>
 801b0c8:	b178      	cbz	r0, 801b0ea <rcl_action_send_goal_response+0x52>
 801b0ca:	6820      	ldr	r0, [r4, #0]
 801b0cc:	3010      	adds	r0, #16
 801b0ce:	f7f8 fab7 	bl	8013640 <rcl_publisher_is_valid>
 801b0d2:	b150      	cbz	r0, 801b0ea <rcl_action_send_goal_response+0x52>
 801b0d4:	b18d      	cbz	r5, 801b0fa <rcl_action_send_goal_response+0x62>
 801b0d6:	b186      	cbz	r6, 801b0fa <rcl_action_send_goal_response+0x62>
 801b0d8:	6820      	ldr	r0, [r4, #0]
 801b0da:	4632      	mov	r2, r6
 801b0dc:	4629      	mov	r1, r5
 801b0de:	f7fe fc27 	bl	8019930 <rcl_send_response>
 801b0e2:	3800      	subs	r0, #0
 801b0e4:	bf18      	it	ne
 801b0e6:	2001      	movne	r0, #1
 801b0e8:	bd70      	pop	{r4, r5, r6, pc}
 801b0ea:	f7f9 fa31 	bl	8014550 <rcutils_reset_error>
 801b0ee:	f640 0098 	movw	r0, #2200	@ 0x898
 801b0f2:	bd70      	pop	{r4, r5, r6, pc}
 801b0f4:	f640 0098 	movw	r0, #2200	@ 0x898
 801b0f8:	bd70      	pop	{r4, r5, r6, pc}
 801b0fa:	200b      	movs	r0, #11
 801b0fc:	bd70      	pop	{r4, r5, r6, pc}
 801b0fe:	f640 0098 	movw	r0, #2200	@ 0x898
 801b102:	4770      	bx	lr

0801b104 <rcl_action_take_result_request>:
 801b104:	2800      	cmp	r0, #0
 801b106:	d03a      	beq.n	801b17e <rcl_action_take_result_request+0x7a>
 801b108:	b570      	push	{r4, r5, r6, lr}
 801b10a:	4604      	mov	r4, r0
 801b10c:	6800      	ldr	r0, [r0, #0]
 801b10e:	b388      	cbz	r0, 801b174 <rcl_action_take_result_request+0x70>
 801b110:	460d      	mov	r5, r1
 801b112:	4616      	mov	r6, r2
 801b114:	f7fe fc22 	bl	801995c <rcl_service_is_valid>
 801b118:	b338      	cbz	r0, 801b16a <rcl_action_take_result_request+0x66>
 801b11a:	6820      	ldr	r0, [r4, #0]
 801b11c:	3004      	adds	r0, #4
 801b11e:	f7fe fc1d 	bl	801995c <rcl_service_is_valid>
 801b122:	b310      	cbz	r0, 801b16a <rcl_action_take_result_request+0x66>
 801b124:	6820      	ldr	r0, [r4, #0]
 801b126:	3008      	adds	r0, #8
 801b128:	f7fe fc18 	bl	801995c <rcl_service_is_valid>
 801b12c:	b1e8      	cbz	r0, 801b16a <rcl_action_take_result_request+0x66>
 801b12e:	6820      	ldr	r0, [r4, #0]
 801b130:	300c      	adds	r0, #12
 801b132:	f7f8 fa85 	bl	8013640 <rcl_publisher_is_valid>
 801b136:	b1c0      	cbz	r0, 801b16a <rcl_action_take_result_request+0x66>
 801b138:	6820      	ldr	r0, [r4, #0]
 801b13a:	3010      	adds	r0, #16
 801b13c:	f7f8 fa80 	bl	8013640 <rcl_publisher_is_valid>
 801b140:	b198      	cbz	r0, 801b16a <rcl_action_take_result_request+0x66>
 801b142:	b1d5      	cbz	r5, 801b17a <rcl_action_take_result_request+0x76>
 801b144:	b1ce      	cbz	r6, 801b17a <rcl_action_take_result_request+0x76>
 801b146:	6820      	ldr	r0, [r4, #0]
 801b148:	4632      	mov	r2, r6
 801b14a:	4629      	mov	r1, r5
 801b14c:	3008      	adds	r0, #8
 801b14e:	f7fe fbaf 	bl	80198b0 <rcl_take_request>
 801b152:	b148      	cbz	r0, 801b168 <rcl_action_take_result_request+0x64>
 801b154:	280a      	cmp	r0, #10
 801b156:	d007      	beq.n	801b168 <rcl_action_take_result_request+0x64>
 801b158:	f240 2259 	movw	r2, #601	@ 0x259
 801b15c:	f640 0399 	movw	r3, #2201	@ 0x899
 801b160:	4290      	cmp	r0, r2
 801b162:	bf0c      	ite	eq
 801b164:	4618      	moveq	r0, r3
 801b166:	2001      	movne	r0, #1
 801b168:	bd70      	pop	{r4, r5, r6, pc}
 801b16a:	f7f9 f9f1 	bl	8014550 <rcutils_reset_error>
 801b16e:	f640 0098 	movw	r0, #2200	@ 0x898
 801b172:	bd70      	pop	{r4, r5, r6, pc}
 801b174:	f640 0098 	movw	r0, #2200	@ 0x898
 801b178:	bd70      	pop	{r4, r5, r6, pc}
 801b17a:	200b      	movs	r0, #11
 801b17c:	bd70      	pop	{r4, r5, r6, pc}
 801b17e:	f640 0098 	movw	r0, #2200	@ 0x898
 801b182:	4770      	bx	lr

0801b184 <rcl_action_take_cancel_request>:
 801b184:	2800      	cmp	r0, #0
 801b186:	d03a      	beq.n	801b1fe <rcl_action_take_cancel_request+0x7a>
 801b188:	b570      	push	{r4, r5, r6, lr}
 801b18a:	4604      	mov	r4, r0
 801b18c:	6800      	ldr	r0, [r0, #0]
 801b18e:	b388      	cbz	r0, 801b1f4 <rcl_action_take_cancel_request+0x70>
 801b190:	460d      	mov	r5, r1
 801b192:	4616      	mov	r6, r2
 801b194:	f7fe fbe2 	bl	801995c <rcl_service_is_valid>
 801b198:	b338      	cbz	r0, 801b1ea <rcl_action_take_cancel_request+0x66>
 801b19a:	6820      	ldr	r0, [r4, #0]
 801b19c:	3004      	adds	r0, #4
 801b19e:	f7fe fbdd 	bl	801995c <rcl_service_is_valid>
 801b1a2:	b310      	cbz	r0, 801b1ea <rcl_action_take_cancel_request+0x66>
 801b1a4:	6820      	ldr	r0, [r4, #0]
 801b1a6:	3008      	adds	r0, #8
 801b1a8:	f7fe fbd8 	bl	801995c <rcl_service_is_valid>
 801b1ac:	b1e8      	cbz	r0, 801b1ea <rcl_action_take_cancel_request+0x66>
 801b1ae:	6820      	ldr	r0, [r4, #0]
 801b1b0:	300c      	adds	r0, #12
 801b1b2:	f7f8 fa45 	bl	8013640 <rcl_publisher_is_valid>
 801b1b6:	b1c0      	cbz	r0, 801b1ea <rcl_action_take_cancel_request+0x66>
 801b1b8:	6820      	ldr	r0, [r4, #0]
 801b1ba:	3010      	adds	r0, #16
 801b1bc:	f7f8 fa40 	bl	8013640 <rcl_publisher_is_valid>
 801b1c0:	b198      	cbz	r0, 801b1ea <rcl_action_take_cancel_request+0x66>
 801b1c2:	b1d5      	cbz	r5, 801b1fa <rcl_action_take_cancel_request+0x76>
 801b1c4:	b1ce      	cbz	r6, 801b1fa <rcl_action_take_cancel_request+0x76>
 801b1c6:	6820      	ldr	r0, [r4, #0]
 801b1c8:	4632      	mov	r2, r6
 801b1ca:	4629      	mov	r1, r5
 801b1cc:	3004      	adds	r0, #4
 801b1ce:	f7fe fb6f 	bl	80198b0 <rcl_take_request>
 801b1d2:	b148      	cbz	r0, 801b1e8 <rcl_action_take_cancel_request+0x64>
 801b1d4:	280a      	cmp	r0, #10
 801b1d6:	d007      	beq.n	801b1e8 <rcl_action_take_cancel_request+0x64>
 801b1d8:	f240 2259 	movw	r2, #601	@ 0x259
 801b1dc:	f640 0399 	movw	r3, #2201	@ 0x899
 801b1e0:	4290      	cmp	r0, r2
 801b1e2:	bf0c      	ite	eq
 801b1e4:	4618      	moveq	r0, r3
 801b1e6:	2001      	movne	r0, #1
 801b1e8:	bd70      	pop	{r4, r5, r6, pc}
 801b1ea:	f7f9 f9b1 	bl	8014550 <rcutils_reset_error>
 801b1ee:	f640 0098 	movw	r0, #2200	@ 0x898
 801b1f2:	bd70      	pop	{r4, r5, r6, pc}
 801b1f4:	f640 0098 	movw	r0, #2200	@ 0x898
 801b1f8:	bd70      	pop	{r4, r5, r6, pc}
 801b1fa:	200b      	movs	r0, #11
 801b1fc:	bd70      	pop	{r4, r5, r6, pc}
 801b1fe:	f640 0098 	movw	r0, #2200	@ 0x898
 801b202:	4770      	bx	lr

0801b204 <rcl_action_send_cancel_response>:
 801b204:	b390      	cbz	r0, 801b26c <rcl_action_send_cancel_response+0x68>
 801b206:	b570      	push	{r4, r5, r6, lr}
 801b208:	4604      	mov	r4, r0
 801b20a:	6800      	ldr	r0, [r0, #0]
 801b20c:	b348      	cbz	r0, 801b262 <rcl_action_send_cancel_response+0x5e>
 801b20e:	460d      	mov	r5, r1
 801b210:	4616      	mov	r6, r2
 801b212:	f7fe fba3 	bl	801995c <rcl_service_is_valid>
 801b216:	b1f8      	cbz	r0, 801b258 <rcl_action_send_cancel_response+0x54>
 801b218:	6820      	ldr	r0, [r4, #0]
 801b21a:	3004      	adds	r0, #4
 801b21c:	f7fe fb9e 	bl	801995c <rcl_service_is_valid>
 801b220:	b1d0      	cbz	r0, 801b258 <rcl_action_send_cancel_response+0x54>
 801b222:	6820      	ldr	r0, [r4, #0]
 801b224:	3008      	adds	r0, #8
 801b226:	f7fe fb99 	bl	801995c <rcl_service_is_valid>
 801b22a:	b1a8      	cbz	r0, 801b258 <rcl_action_send_cancel_response+0x54>
 801b22c:	6820      	ldr	r0, [r4, #0]
 801b22e:	300c      	adds	r0, #12
 801b230:	f7f8 fa06 	bl	8013640 <rcl_publisher_is_valid>
 801b234:	b180      	cbz	r0, 801b258 <rcl_action_send_cancel_response+0x54>
 801b236:	6820      	ldr	r0, [r4, #0]
 801b238:	3010      	adds	r0, #16
 801b23a:	f7f8 fa01 	bl	8013640 <rcl_publisher_is_valid>
 801b23e:	b158      	cbz	r0, 801b258 <rcl_action_send_cancel_response+0x54>
 801b240:	b195      	cbz	r5, 801b268 <rcl_action_send_cancel_response+0x64>
 801b242:	b18e      	cbz	r6, 801b268 <rcl_action_send_cancel_response+0x64>
 801b244:	6820      	ldr	r0, [r4, #0]
 801b246:	4632      	mov	r2, r6
 801b248:	4629      	mov	r1, r5
 801b24a:	3004      	adds	r0, #4
 801b24c:	f7fe fb70 	bl	8019930 <rcl_send_response>
 801b250:	3800      	subs	r0, #0
 801b252:	bf18      	it	ne
 801b254:	2001      	movne	r0, #1
 801b256:	bd70      	pop	{r4, r5, r6, pc}
 801b258:	f7f9 f97a 	bl	8014550 <rcutils_reset_error>
 801b25c:	f640 0098 	movw	r0, #2200	@ 0x898
 801b260:	bd70      	pop	{r4, r5, r6, pc}
 801b262:	f640 0098 	movw	r0, #2200	@ 0x898
 801b266:	bd70      	pop	{r4, r5, r6, pc}
 801b268:	200b      	movs	r0, #11
 801b26a:	bd70      	pop	{r4, r5, r6, pc}
 801b26c:	f640 0098 	movw	r0, #2200	@ 0x898
 801b270:	4770      	bx	lr
 801b272:	bf00      	nop

0801b274 <rcl_action_wait_set_add_action_server>:
 801b274:	2800      	cmp	r0, #0
 801b276:	d04d      	beq.n	801b314 <rcl_action_wait_set_add_action_server+0xa0>
 801b278:	b570      	push	{r4, r5, r6, lr}
 801b27a:	460c      	mov	r4, r1
 801b27c:	b159      	cbz	r1, 801b296 <rcl_action_wait_set_add_action_server+0x22>
 801b27e:	4605      	mov	r5, r0
 801b280:	6808      	ldr	r0, [r1, #0]
 801b282:	b140      	cbz	r0, 801b296 <rcl_action_wait_set_add_action_server+0x22>
 801b284:	4616      	mov	r6, r2
 801b286:	f7fe fb69 	bl	801995c <rcl_service_is_valid>
 801b28a:	b120      	cbz	r0, 801b296 <rcl_action_wait_set_add_action_server+0x22>
 801b28c:	6820      	ldr	r0, [r4, #0]
 801b28e:	3004      	adds	r0, #4
 801b290:	f7fe fb64 	bl	801995c <rcl_service_is_valid>
 801b294:	b910      	cbnz	r0, 801b29c <rcl_action_wait_set_add_action_server+0x28>
 801b296:	f640 0098 	movw	r0, #2200	@ 0x898
 801b29a:	bd70      	pop	{r4, r5, r6, pc}
 801b29c:	6820      	ldr	r0, [r4, #0]
 801b29e:	3008      	adds	r0, #8
 801b2a0:	f7fe fb5c 	bl	801995c <rcl_service_is_valid>
 801b2a4:	2800      	cmp	r0, #0
 801b2a6:	d0f6      	beq.n	801b296 <rcl_action_wait_set_add_action_server+0x22>
 801b2a8:	6820      	ldr	r0, [r4, #0]
 801b2aa:	300c      	adds	r0, #12
 801b2ac:	f7f8 f9e0 	bl	8013670 <rcl_publisher_is_valid_except_context>
 801b2b0:	2800      	cmp	r0, #0
 801b2b2:	d0f0      	beq.n	801b296 <rcl_action_wait_set_add_action_server+0x22>
 801b2b4:	6820      	ldr	r0, [r4, #0]
 801b2b6:	3010      	adds	r0, #16
 801b2b8:	f7f8 f9da 	bl	8013670 <rcl_publisher_is_valid_except_context>
 801b2bc:	2800      	cmp	r0, #0
 801b2be:	d0ea      	beq.n	801b296 <rcl_action_wait_set_add_action_server+0x22>
 801b2c0:	6821      	ldr	r1, [r4, #0]
 801b2c2:	4628      	mov	r0, r5
 801b2c4:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801b2c8:	f7ff fad2 	bl	801a870 <rcl_wait_set_add_service>
 801b2cc:	2800      	cmp	r0, #0
 801b2ce:	d1e4      	bne.n	801b29a <rcl_action_wait_set_add_action_server+0x26>
 801b2d0:	6821      	ldr	r1, [r4, #0]
 801b2d2:	4628      	mov	r0, r5
 801b2d4:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801b2d8:	3104      	adds	r1, #4
 801b2da:	f7ff fac9 	bl	801a870 <rcl_wait_set_add_service>
 801b2de:	2800      	cmp	r0, #0
 801b2e0:	d1db      	bne.n	801b29a <rcl_action_wait_set_add_action_server+0x26>
 801b2e2:	6821      	ldr	r1, [r4, #0]
 801b2e4:	4628      	mov	r0, r5
 801b2e6:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801b2ea:	3108      	adds	r1, #8
 801b2ec:	f7ff fac0 	bl	801a870 <rcl_wait_set_add_service>
 801b2f0:	2800      	cmp	r0, #0
 801b2f2:	d1d2      	bne.n	801b29a <rcl_action_wait_set_add_action_server+0x26>
 801b2f4:	6821      	ldr	r1, [r4, #0]
 801b2f6:	4628      	mov	r0, r5
 801b2f8:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 801b2fc:	3114      	adds	r1, #20
 801b2fe:	f7ff fa5b 	bl	801a7b8 <rcl_wait_set_add_timer>
 801b302:	2800      	cmp	r0, #0
 801b304:	d1c9      	bne.n	801b29a <rcl_action_wait_set_add_action_server+0x26>
 801b306:	2e00      	cmp	r6, #0
 801b308:	d0c7      	beq.n	801b29a <rcl_action_wait_set_add_action_server+0x26>
 801b30a:	6823      	ldr	r3, [r4, #0]
 801b30c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801b310:	6033      	str	r3, [r6, #0]
 801b312:	bd70      	pop	{r4, r5, r6, pc}
 801b314:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801b318:	4770      	bx	lr
 801b31a:	bf00      	nop

0801b31c <rcl_action_server_wait_set_get_entities_ready>:
 801b31c:	2800      	cmp	r0, #0
 801b31e:	d05a      	beq.n	801b3d6 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801b320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b322:	460c      	mov	r4, r1
 801b324:	b161      	cbz	r1, 801b340 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801b326:	4605      	mov	r5, r0
 801b328:	6808      	ldr	r0, [r1, #0]
 801b32a:	b148      	cbz	r0, 801b340 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801b32c:	4616      	mov	r6, r2
 801b32e:	461f      	mov	r7, r3
 801b330:	f7fe fb14 	bl	801995c <rcl_service_is_valid>
 801b334:	b120      	cbz	r0, 801b340 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801b336:	6820      	ldr	r0, [r4, #0]
 801b338:	3004      	adds	r0, #4
 801b33a:	f7fe fb0f 	bl	801995c <rcl_service_is_valid>
 801b33e:	b910      	cbnz	r0, 801b346 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801b340:	f640 0098 	movw	r0, #2200	@ 0x898
 801b344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b346:	6820      	ldr	r0, [r4, #0]
 801b348:	3008      	adds	r0, #8
 801b34a:	f7fe fb07 	bl	801995c <rcl_service_is_valid>
 801b34e:	2800      	cmp	r0, #0
 801b350:	d0f6      	beq.n	801b340 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801b352:	6820      	ldr	r0, [r4, #0]
 801b354:	300c      	adds	r0, #12
 801b356:	f7f8 f98b 	bl	8013670 <rcl_publisher_is_valid_except_context>
 801b35a:	2800      	cmp	r0, #0
 801b35c:	d0f0      	beq.n	801b340 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801b35e:	6820      	ldr	r0, [r4, #0]
 801b360:	3010      	adds	r0, #16
 801b362:	f7f8 f985 	bl	8013670 <rcl_publisher_is_valid_except_context>
 801b366:	2800      	cmp	r0, #0
 801b368:	d0ea      	beq.n	801b340 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801b36a:	b3be      	cbz	r6, 801b3dc <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801b36c:	b3b7      	cbz	r7, 801b3dc <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801b36e:	9b06      	ldr	r3, [sp, #24]
 801b370:	b3a3      	cbz	r3, 801b3dc <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801b372:	9b07      	ldr	r3, [sp, #28]
 801b374:	b393      	cbz	r3, 801b3dc <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801b376:	6821      	ldr	r1, [r4, #0]
 801b378:	692a      	ldr	r2, [r5, #16]
 801b37a:	6a2c      	ldr	r4, [r5, #32]
 801b37c:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801b380:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 801b384:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 801b388:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 801b38c:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801b390:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 801b394:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801b398:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 801b39c:	1a64      	subs	r4, r4, r1
 801b39e:	fab4 f484 	clz	r4, r4
 801b3a2:	0964      	lsrs	r4, r4, #5
 801b3a4:	7034      	strb	r4, [r6, #0]
 801b3a6:	1d0c      	adds	r4, r1, #4
 801b3a8:	1b1b      	subs	r3, r3, r4
 801b3aa:	fab3 f383 	clz	r3, r3
 801b3ae:	095b      	lsrs	r3, r3, #5
 801b3b0:	f101 0408 	add.w	r4, r1, #8
 801b3b4:	703b      	strb	r3, [r7, #0]
 801b3b6:	f101 0314 	add.w	r3, r1, #20
 801b3ba:	1b01      	subs	r1, r0, r4
 801b3bc:	1ad3      	subs	r3, r2, r3
 801b3be:	fab1 f181 	clz	r1, r1
 801b3c2:	9a06      	ldr	r2, [sp, #24]
 801b3c4:	0949      	lsrs	r1, r1, #5
 801b3c6:	7011      	strb	r1, [r2, #0]
 801b3c8:	fab3 f383 	clz	r3, r3
 801b3cc:	9a07      	ldr	r2, [sp, #28]
 801b3ce:	095b      	lsrs	r3, r3, #5
 801b3d0:	2000      	movs	r0, #0
 801b3d2:	7013      	strb	r3, [r2, #0]
 801b3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3d6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801b3da:	4770      	bx	lr
 801b3dc:	200b      	movs	r0, #11
 801b3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b3e0 <_execute_event_handler>:
 801b3e0:	2002      	movs	r0, #2
 801b3e2:	4770      	bx	lr

0801b3e4 <_cancel_goal_event_handler>:
 801b3e4:	2003      	movs	r0, #3
 801b3e6:	4770      	bx	lr

0801b3e8 <_succeed_event_handler>:
 801b3e8:	2004      	movs	r0, #4
 801b3ea:	4770      	bx	lr

0801b3ec <_abort_event_handler>:
 801b3ec:	2006      	movs	r0, #6
 801b3ee:	4770      	bx	lr

0801b3f0 <_canceled_event_handler>:
 801b3f0:	2005      	movs	r0, #5
 801b3f2:	4770      	bx	lr

0801b3f4 <rcl_action_transition_goal_state>:
 801b3f4:	b2c2      	uxtb	r2, r0
 801b3f6:	2a06      	cmp	r2, #6
 801b3f8:	d80c      	bhi.n	801b414 <rcl_action_transition_goal_state+0x20>
 801b3fa:	2904      	cmp	r1, #4
 801b3fc:	d80a      	bhi.n	801b414 <rcl_action_transition_goal_state+0x20>
 801b3fe:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801b402:	b410      	push	{r4}
 801b404:	1853      	adds	r3, r2, r1
 801b406:	4c06      	ldr	r4, [pc, #24]	@ (801b420 <rcl_action_transition_goal_state+0x2c>)
 801b408:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801b40c:	b123      	cbz	r3, 801b418 <rcl_action_transition_goal_state+0x24>
 801b40e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b412:	4718      	bx	r3
 801b414:	2000      	movs	r0, #0
 801b416:	4770      	bx	lr
 801b418:	2000      	movs	r0, #0
 801b41a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b41e:	4770      	bx	lr
 801b420:	0802231c 	.word	0x0802231c

0801b424 <rcl_action_get_zero_initialized_cancel_response>:
 801b424:	b510      	push	{r4, lr}
 801b426:	4c07      	ldr	r4, [pc, #28]	@ (801b444 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 801b428:	4686      	mov	lr, r0
 801b42a:	4684      	mov	ip, r0
 801b42c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b42e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b434:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b438:	6823      	ldr	r3, [r4, #0]
 801b43a:	f8cc 3000 	str.w	r3, [ip]
 801b43e:	4670      	mov	r0, lr
 801b440:	bd10      	pop	{r4, pc}
 801b442:	bf00      	nop
 801b444:	080223a8 	.word	0x080223a8

0801b448 <rclc_action_send_result_request>:
 801b448:	b1d0      	cbz	r0, 801b480 <rclc_action_send_result_request+0x38>
 801b44a:	b500      	push	{lr}
 801b44c:	4684      	mov	ip, r0
 801b44e:	b087      	sub	sp, #28
 801b450:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801b454:	f8dc 100d 	ldr.w	r1, [ip, #13]
 801b458:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801b45c:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801b460:	f10d 0e08 	add.w	lr, sp, #8
 801b464:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b468:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801b46c:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801b470:	a902      	add	r1, sp, #8
 801b472:	3010      	adds	r0, #16
 801b474:	f7ff fbdc 	bl	801ac30 <rcl_action_send_result_request>
 801b478:	b920      	cbnz	r0, 801b484 <rclc_action_send_result_request+0x3c>
 801b47a:	b007      	add	sp, #28
 801b47c:	f85d fb04 	ldr.w	pc, [sp], #4
 801b480:	200b      	movs	r0, #11
 801b482:	4770      	bx	lr
 801b484:	9001      	str	r0, [sp, #4]
 801b486:	f7f9 f863 	bl	8014550 <rcutils_reset_error>
 801b48a:	9801      	ldr	r0, [sp, #4]
 801b48c:	b007      	add	sp, #28
 801b48e:	f85d fb04 	ldr.w	pc, [sp], #4
 801b492:	bf00      	nop

0801b494 <rclc_action_take_goal_handle>:
 801b494:	b160      	cbz	r0, 801b4b0 <rclc_action_take_goal_handle+0x1c>
 801b496:	6883      	ldr	r3, [r0, #8]
 801b498:	b143      	cbz	r3, 801b4ac <rclc_action_take_goal_handle+0x18>
 801b49a:	6819      	ldr	r1, [r3, #0]
 801b49c:	6081      	str	r1, [r0, #8]
 801b49e:	2200      	movs	r2, #0
 801b4a0:	721a      	strb	r2, [r3, #8]
 801b4a2:	68c1      	ldr	r1, [r0, #12]
 801b4a4:	6019      	str	r1, [r3, #0]
 801b4a6:	621a      	str	r2, [r3, #32]
 801b4a8:	849a      	strh	r2, [r3, #36]	@ 0x24
 801b4aa:	60c3      	str	r3, [r0, #12]
 801b4ac:	4618      	mov	r0, r3
 801b4ae:	4770      	bx	lr
 801b4b0:	4603      	mov	r3, r0
 801b4b2:	e7fb      	b.n	801b4ac <rclc_action_take_goal_handle+0x18>

0801b4b4 <rclc_action_remove_used_goal_handle>:
 801b4b4:	b180      	cbz	r0, 801b4d8 <rclc_action_remove_used_goal_handle+0x24>
 801b4b6:	b179      	cbz	r1, 801b4d8 <rclc_action_remove_used_goal_handle+0x24>
 801b4b8:	68c3      	ldr	r3, [r0, #12]
 801b4ba:	4299      	cmp	r1, r3
 801b4bc:	d00d      	beq.n	801b4da <rclc_action_remove_used_goal_handle+0x26>
 801b4be:	b12b      	cbz	r3, 801b4cc <rclc_action_remove_used_goal_handle+0x18>
 801b4c0:	681a      	ldr	r2, [r3, #0]
 801b4c2:	4291      	cmp	r1, r2
 801b4c4:	d003      	beq.n	801b4ce <rclc_action_remove_used_goal_handle+0x1a>
 801b4c6:	4613      	mov	r3, r2
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d1f9      	bne.n	801b4c0 <rclc_action_remove_used_goal_handle+0xc>
 801b4cc:	4770      	bx	lr
 801b4ce:	680a      	ldr	r2, [r1, #0]
 801b4d0:	601a      	str	r2, [r3, #0]
 801b4d2:	6883      	ldr	r3, [r0, #8]
 801b4d4:	600b      	str	r3, [r1, #0]
 801b4d6:	6081      	str	r1, [r0, #8]
 801b4d8:	4770      	bx	lr
 801b4da:	680b      	ldr	r3, [r1, #0]
 801b4dc:	60c3      	str	r3, [r0, #12]
 801b4de:	e7f8      	b.n	801b4d2 <rclc_action_remove_used_goal_handle+0x1e>

0801b4e0 <rclc_action_find_goal_handle_by_uuid>:
 801b4e0:	b538      	push	{r3, r4, r5, lr}
 801b4e2:	b180      	cbz	r0, 801b506 <rclc_action_find_goal_handle_by_uuid+0x26>
 801b4e4:	460d      	mov	r5, r1
 801b4e6:	b181      	cbz	r1, 801b50a <rclc_action_find_goal_handle_by_uuid+0x2a>
 801b4e8:	68c4      	ldr	r4, [r0, #12]
 801b4ea:	b914      	cbnz	r4, 801b4f2 <rclc_action_find_goal_handle_by_uuid+0x12>
 801b4ec:	e009      	b.n	801b502 <rclc_action_find_goal_handle_by_uuid+0x22>
 801b4ee:	6824      	ldr	r4, [r4, #0]
 801b4f0:	b13c      	cbz	r4, 801b502 <rclc_action_find_goal_handle_by_uuid+0x22>
 801b4f2:	f104 0009 	add.w	r0, r4, #9
 801b4f6:	2210      	movs	r2, #16
 801b4f8:	4629      	mov	r1, r5
 801b4fa:	f004 ffdf 	bl	80204bc <memcmp>
 801b4fe:	2800      	cmp	r0, #0
 801b500:	d1f5      	bne.n	801b4ee <rclc_action_find_goal_handle_by_uuid+0xe>
 801b502:	4620      	mov	r0, r4
 801b504:	bd38      	pop	{r3, r4, r5, pc}
 801b506:	4604      	mov	r4, r0
 801b508:	e7fb      	b.n	801b502 <rclc_action_find_goal_handle_by_uuid+0x22>
 801b50a:	460c      	mov	r4, r1
 801b50c:	e7f9      	b.n	801b502 <rclc_action_find_goal_handle_by_uuid+0x22>
 801b50e:	bf00      	nop

0801b510 <rclc_action_find_first_handle_by_status>:
 801b510:	b140      	cbz	r0, 801b524 <rclc_action_find_first_handle_by_status+0x14>
 801b512:	68c0      	ldr	r0, [r0, #12]
 801b514:	b910      	cbnz	r0, 801b51c <rclc_action_find_first_handle_by_status+0xc>
 801b516:	e005      	b.n	801b524 <rclc_action_find_first_handle_by_status+0x14>
 801b518:	6800      	ldr	r0, [r0, #0]
 801b51a:	b118      	cbz	r0, 801b524 <rclc_action_find_first_handle_by_status+0x14>
 801b51c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801b520:	428b      	cmp	r3, r1
 801b522:	d1f9      	bne.n	801b518 <rclc_action_find_first_handle_by_status+0x8>
 801b524:	4770      	bx	lr
 801b526:	bf00      	nop

0801b528 <rclc_action_find_first_terminated_handle>:
 801b528:	b140      	cbz	r0, 801b53c <rclc_action_find_first_terminated_handle+0x14>
 801b52a:	68c0      	ldr	r0, [r0, #12]
 801b52c:	b910      	cbnz	r0, 801b534 <rclc_action_find_first_terminated_handle+0xc>
 801b52e:	e005      	b.n	801b53c <rclc_action_find_first_terminated_handle+0x14>
 801b530:	6800      	ldr	r0, [r0, #0]
 801b532:	b118      	cbz	r0, 801b53c <rclc_action_find_first_terminated_handle+0x14>
 801b534:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801b538:	2b03      	cmp	r3, #3
 801b53a:	ddf9      	ble.n	801b530 <rclc_action_find_first_terminated_handle+0x8>
 801b53c:	4770      	bx	lr
 801b53e:	bf00      	nop

0801b540 <rclc_action_find_handle_by_goal_request_sequence_number>:
 801b540:	b170      	cbz	r0, 801b560 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801b542:	68c0      	ldr	r0, [r0, #12]
 801b544:	b160      	cbz	r0, 801b560 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801b546:	b410      	push	{r4}
 801b548:	e001      	b.n	801b54e <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801b54a:	6800      	ldr	r0, [r0, #0]
 801b54c:	b128      	cbz	r0, 801b55a <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801b54e:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801b552:	4299      	cmp	r1, r3
 801b554:	bf08      	it	eq
 801b556:	4294      	cmpeq	r4, r2
 801b558:	d1f7      	bne.n	801b54a <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801b55a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b55e:	4770      	bx	lr
 801b560:	4770      	bx	lr
 801b562:	bf00      	nop

0801b564 <rclc_action_find_handle_by_result_request_sequence_number>:
 801b564:	b170      	cbz	r0, 801b584 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801b566:	68c0      	ldr	r0, [r0, #12]
 801b568:	b160      	cbz	r0, 801b584 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801b56a:	b410      	push	{r4}
 801b56c:	e001      	b.n	801b572 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801b56e:	6800      	ldr	r0, [r0, #0]
 801b570:	b128      	cbz	r0, 801b57e <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801b572:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801b576:	4299      	cmp	r1, r3
 801b578:	bf08      	it	eq
 801b57a:	4294      	cmpeq	r4, r2
 801b57c:	d1f7      	bne.n	801b56e <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801b57e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b582:	4770      	bx	lr
 801b584:	4770      	bx	lr
 801b586:	bf00      	nop

0801b588 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801b588:	b170      	cbz	r0, 801b5a8 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801b58a:	68c0      	ldr	r0, [r0, #12]
 801b58c:	b160      	cbz	r0, 801b5a8 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801b58e:	b410      	push	{r4}
 801b590:	e001      	b.n	801b596 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801b592:	6800      	ldr	r0, [r0, #0]
 801b594:	b128      	cbz	r0, 801b5a2 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801b596:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 801b59a:	4299      	cmp	r1, r3
 801b59c:	bf08      	it	eq
 801b59e:	4294      	cmpeq	r4, r2
 801b5a0:	d1f7      	bne.n	801b592 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 801b5a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b5a6:	4770      	bx	lr
 801b5a8:	4770      	bx	lr
 801b5aa:	bf00      	nop

0801b5ac <rclc_action_find_first_handle_with_goal_response>:
 801b5ac:	b140      	cbz	r0, 801b5c0 <rclc_action_find_first_handle_with_goal_response+0x14>
 801b5ae:	68c0      	ldr	r0, [r0, #12]
 801b5b0:	b910      	cbnz	r0, 801b5b8 <rclc_action_find_first_handle_with_goal_response+0xc>
 801b5b2:	e005      	b.n	801b5c0 <rclc_action_find_first_handle_with_goal_response+0x14>
 801b5b4:	6800      	ldr	r0, [r0, #0]
 801b5b6:	b118      	cbz	r0, 801b5c0 <rclc_action_find_first_handle_with_goal_response+0x14>
 801b5b8:	f890 3020 	ldrb.w	r3, [r0, #32]
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d0f9      	beq.n	801b5b4 <rclc_action_find_first_handle_with_goal_response+0x8>
 801b5c0:	4770      	bx	lr
 801b5c2:	bf00      	nop

0801b5c4 <rclc_action_find_first_handle_with_result_response>:
 801b5c4:	b140      	cbz	r0, 801b5d8 <rclc_action_find_first_handle_with_result_response+0x14>
 801b5c6:	68c0      	ldr	r0, [r0, #12]
 801b5c8:	b910      	cbnz	r0, 801b5d0 <rclc_action_find_first_handle_with_result_response+0xc>
 801b5ca:	e005      	b.n	801b5d8 <rclc_action_find_first_handle_with_result_response+0x14>
 801b5cc:	6800      	ldr	r0, [r0, #0]
 801b5ce:	b118      	cbz	r0, 801b5d8 <rclc_action_find_first_handle_with_result_response+0x14>
 801b5d0:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d0f9      	beq.n	801b5cc <rclc_action_find_first_handle_with_result_response+0x8>
 801b5d8:	4770      	bx	lr
 801b5da:	bf00      	nop

0801b5dc <rclc_action_server_response_goal_request>:
 801b5dc:	b198      	cbz	r0, 801b606 <rclc_action_server_response_goal_request+0x2a>
 801b5de:	b510      	push	{r4, lr}
 801b5e0:	6844      	ldr	r4, [r0, #4]
 801b5e2:	b086      	sub	sp, #24
 801b5e4:	2200      	movs	r2, #0
 801b5e6:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801b5ea:	460b      	mov	r3, r1
 801b5ec:	9205      	str	r2, [sp, #20]
 801b5ee:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 801b5f2:	aa03      	add	r2, sp, #12
 801b5f4:	f104 0010 	add.w	r0, r4, #16
 801b5f8:	f88d 300c 	strb.w	r3, [sp, #12]
 801b5fc:	f7ff fd4c 	bl	801b098 <rcl_action_send_goal_response>
 801b600:	b918      	cbnz	r0, 801b60a <rclc_action_server_response_goal_request+0x2e>
 801b602:	b006      	add	sp, #24
 801b604:	bd10      	pop	{r4, pc}
 801b606:	200b      	movs	r0, #11
 801b608:	4770      	bx	lr
 801b60a:	9001      	str	r0, [sp, #4]
 801b60c:	f7f8 ffa0 	bl	8014550 <rcutils_reset_error>
 801b610:	9801      	ldr	r0, [sp, #4]
 801b612:	b006      	add	sp, #24
 801b614:	bd10      	pop	{r4, pc}
 801b616:	bf00      	nop

0801b618 <rclc_action_server_goal_cancel_accept>:
 801b618:	b310      	cbz	r0, 801b660 <rclc_action_server_goal_cancel_accept+0x48>
 801b61a:	b510      	push	{r4, lr}
 801b61c:	b090      	sub	sp, #64	@ 0x40
 801b61e:	4604      	mov	r4, r0
 801b620:	a806      	add	r0, sp, #24
 801b622:	f7ff feff 	bl	801b424 <rcl_action_get_zero_initialized_cancel_response>
 801b626:	2300      	movs	r3, #0
 801b628:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801b62c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801b630:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801b634:	f88d 3018 	strb.w	r3, [sp, #24]
 801b638:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801b63c:	f8cd d01c 	str.w	sp, [sp, #28]
 801b640:	46ec      	mov	ip, sp
 801b642:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b646:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 801b668 <rclc_action_server_goal_cancel_accept+0x50>
 801b64a:	6860      	ldr	r0, [r4, #4]
 801b64c:	aa06      	add	r2, sp, #24
 801b64e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801b652:	3010      	adds	r0, #16
 801b654:	ed8d 7b08 	vstr	d7, [sp, #32]
 801b658:	f7ff fdd4 	bl	801b204 <rcl_action_send_cancel_response>
 801b65c:	b010      	add	sp, #64	@ 0x40
 801b65e:	bd10      	pop	{r4, pc}
 801b660:	200b      	movs	r0, #11
 801b662:	4770      	bx	lr
 801b664:	f3af 8000 	nop.w
 801b668:	00000001 	.word	0x00000001
 801b66c:	00000001 	.word	0x00000001

0801b670 <rclc_action_server_goal_cancel_reject>:
 801b670:	b082      	sub	sp, #8
 801b672:	b530      	push	{r4, r5, lr}
 801b674:	b08b      	sub	sp, #44	@ 0x2c
 801b676:	ac0e      	add	r4, sp, #56	@ 0x38
 801b678:	e884 000c 	stmia.w	r4, {r2, r3}
 801b67c:	b188      	cbz	r0, 801b6a2 <rclc_action_server_goal_cancel_reject+0x32>
 801b67e:	4604      	mov	r4, r0
 801b680:	a801      	add	r0, sp, #4
 801b682:	460d      	mov	r5, r1
 801b684:	f7ff fece 	bl	801b424 <rcl_action_get_zero_initialized_cancel_response>
 801b688:	aa01      	add	r2, sp, #4
 801b68a:	a90e      	add	r1, sp, #56	@ 0x38
 801b68c:	f104 0010 	add.w	r0, r4, #16
 801b690:	f88d 5004 	strb.w	r5, [sp, #4]
 801b694:	f7ff fdb6 	bl	801b204 <rcl_action_send_cancel_response>
 801b698:	b00b      	add	sp, #44	@ 0x2c
 801b69a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b69e:	b002      	add	sp, #8
 801b6a0:	4770      	bx	lr
 801b6a2:	200b      	movs	r0, #11
 801b6a4:	b00b      	add	sp, #44	@ 0x2c
 801b6a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b6aa:	b002      	add	sp, #8
 801b6ac:	4770      	bx	lr
 801b6ae:	bf00      	nop

0801b6b0 <__atomic_load_8>:
 801b6b0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801b6b4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801b6b8:	4a15      	ldr	r2, [pc, #84]	@ (801b710 <__atomic_load_8+0x60>)
 801b6ba:	4b16      	ldr	r3, [pc, #88]	@ (801b714 <__atomic_load_8+0x64>)
 801b6bc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801b6c0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801b6c4:	fb02 f101 	mul.w	r1, r2, r1
 801b6c8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801b6cc:	fba3 2301 	umull	r2, r3, r3, r1
 801b6d0:	091b      	lsrs	r3, r3, #4
 801b6d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801b6d6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 801b6da:	b4d0      	push	{r4, r6, r7}
 801b6dc:	4c0e      	ldr	r4, [pc, #56]	@ (801b718 <__atomic_load_8+0x68>)
 801b6de:	1ac9      	subs	r1, r1, r3
 801b6e0:	1862      	adds	r2, r4, r1
 801b6e2:	f04f 0c01 	mov.w	ip, #1
 801b6e6:	e8d2 3f4f 	ldrexb	r3, [r2]
 801b6ea:	e8c2 cf46 	strexb	r6, ip, [r2]
 801b6ee:	2e00      	cmp	r6, #0
 801b6f0:	d1f9      	bne.n	801b6e6 <__atomic_load_8+0x36>
 801b6f2:	f3bf 8f5b 	dmb	ish
 801b6f6:	b2db      	uxtb	r3, r3
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d1f4      	bne.n	801b6e6 <__atomic_load_8+0x36>
 801b6fc:	e9d0 6700 	ldrd	r6, r7, [r0]
 801b700:	f3bf 8f5b 	dmb	ish
 801b704:	5463      	strb	r3, [r4, r1]
 801b706:	4630      	mov	r0, r6
 801b708:	4639      	mov	r1, r7
 801b70a:	bcd0      	pop	{r4, r6, r7}
 801b70c:	4770      	bx	lr
 801b70e:	bf00      	nop
 801b710:	27d4eb2d 	.word	0x27d4eb2d
 801b714:	b21642c9 	.word	0xb21642c9
 801b718:	200164b8 	.word	0x200164b8

0801b71c <__atomic_store_8>:
 801b71c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801b720:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 801b724:	b570      	push	{r4, r5, r6, lr}
 801b726:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801b72a:	4c14      	ldr	r4, [pc, #80]	@ (801b77c <__atomic_store_8+0x60>)
 801b72c:	4d14      	ldr	r5, [pc, #80]	@ (801b780 <__atomic_store_8+0x64>)
 801b72e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 801b732:	fb04 f101 	mul.w	r1, r4, r1
 801b736:	4c13      	ldr	r4, [pc, #76]	@ (801b784 <__atomic_store_8+0x68>)
 801b738:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 801b73c:	fba4 4e01 	umull	r4, lr, r4, r1
 801b740:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801b744:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 801b748:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 801b74c:	eba1 0e0e 	sub.w	lr, r1, lr
 801b750:	eb05 0c0e 	add.w	ip, r5, lr
 801b754:	f04f 0401 	mov.w	r4, #1
 801b758:	e8dc 1f4f 	ldrexb	r1, [ip]
 801b75c:	e8cc 4f46 	strexb	r6, r4, [ip]
 801b760:	2e00      	cmp	r6, #0
 801b762:	d1f9      	bne.n	801b758 <__atomic_store_8+0x3c>
 801b764:	f3bf 8f5b 	dmb	ish
 801b768:	b2c9      	uxtb	r1, r1
 801b76a:	2900      	cmp	r1, #0
 801b76c:	d1f4      	bne.n	801b758 <__atomic_store_8+0x3c>
 801b76e:	e9c0 2300 	strd	r2, r3, [r0]
 801b772:	f3bf 8f5b 	dmb	ish
 801b776:	f805 100e 	strb.w	r1, [r5, lr]
 801b77a:	bd70      	pop	{r4, r5, r6, pc}
 801b77c:	27d4eb2d 	.word	0x27d4eb2d
 801b780:	200164b8 	.word	0x200164b8
 801b784:	b21642c9 	.word	0xb21642c9

0801b788 <__atomic_exchange_8>:
 801b788:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 801b78c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 801b790:	4916      	ldr	r1, [pc, #88]	@ (801b7ec <__atomic_exchange_8+0x64>)
 801b792:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801b796:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 801b79a:	fb01 fc0c 	mul.w	ip, r1, ip
 801b79e:	4914      	ldr	r1, [pc, #80]	@ (801b7f0 <__atomic_exchange_8+0x68>)
 801b7a0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801b7a4:	b570      	push	{r4, r5, r6, lr}
 801b7a6:	4605      	mov	r5, r0
 801b7a8:	fba1 010c 	umull	r0, r1, r1, ip
 801b7ac:	0909      	lsrs	r1, r1, #4
 801b7ae:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 801b7b2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 801b7b6:	4e0f      	ldr	r6, [pc, #60]	@ (801b7f4 <__atomic_exchange_8+0x6c>)
 801b7b8:	ebac 0c01 	sub.w	ip, ip, r1
 801b7bc:	eb06 010c 	add.w	r1, r6, ip
 801b7c0:	f04f 0e01 	mov.w	lr, #1
 801b7c4:	e8d1 4f4f 	ldrexb	r4, [r1]
 801b7c8:	e8c1 ef40 	strexb	r0, lr, [r1]
 801b7cc:	2800      	cmp	r0, #0
 801b7ce:	d1f9      	bne.n	801b7c4 <__atomic_exchange_8+0x3c>
 801b7d0:	f3bf 8f5b 	dmb	ish
 801b7d4:	b2e4      	uxtb	r4, r4
 801b7d6:	2c00      	cmp	r4, #0
 801b7d8:	d1f4      	bne.n	801b7c4 <__atomic_exchange_8+0x3c>
 801b7da:	e9d5 0100 	ldrd	r0, r1, [r5]
 801b7de:	e9c5 2300 	strd	r2, r3, [r5]
 801b7e2:	f3bf 8f5b 	dmb	ish
 801b7e6:	f806 400c 	strb.w	r4, [r6, ip]
 801b7ea:	bd70      	pop	{r4, r5, r6, pc}
 801b7ec:	27d4eb2d 	.word	0x27d4eb2d
 801b7f0:	b21642c9 	.word	0xb21642c9
 801b7f4:	200164b8 	.word	0x200164b8

0801b7f8 <rcutils_get_env>:
 801b7f8:	b168      	cbz	r0, 801b816 <rcutils_get_env+0x1e>
 801b7fa:	b510      	push	{r4, lr}
 801b7fc:	460c      	mov	r4, r1
 801b7fe:	b129      	cbz	r1, 801b80c <rcutils_get_env+0x14>
 801b800:	f004 f9ca 	bl	801fb98 <getenv>
 801b804:	b120      	cbz	r0, 801b810 <rcutils_get_env+0x18>
 801b806:	6020      	str	r0, [r4, #0]
 801b808:	2000      	movs	r0, #0
 801b80a:	bd10      	pop	{r4, pc}
 801b80c:	4803      	ldr	r0, [pc, #12]	@ (801b81c <rcutils_get_env+0x24>)
 801b80e:	bd10      	pop	{r4, pc}
 801b810:	4b03      	ldr	r3, [pc, #12]	@ (801b820 <rcutils_get_env+0x28>)
 801b812:	6023      	str	r3, [r4, #0]
 801b814:	bd10      	pop	{r4, pc}
 801b816:	4803      	ldr	r0, [pc, #12]	@ (801b824 <rcutils_get_env+0x2c>)
 801b818:	4770      	bx	lr
 801b81a:	bf00      	nop
 801b81c:	080223e8 	.word	0x080223e8
 801b820:	080229c0 	.word	0x080229c0
 801b824:	080223cc 	.word	0x080223cc

0801b828 <rcutils_is_directory>:
 801b828:	2000      	movs	r0, #0
 801b82a:	4770      	bx	lr

0801b82c <rcutils_join_path>:
 801b82c:	b082      	sub	sp, #8
 801b82e:	e88d 000c 	stmia.w	sp, {r2, r3}
 801b832:	2000      	movs	r0, #0
 801b834:	b002      	add	sp, #8
 801b836:	4770      	bx	lr

0801b838 <rcutils_to_native_path>:
 801b838:	b084      	sub	sp, #16
 801b83a:	a801      	add	r0, sp, #4
 801b83c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801b840:	b004      	add	sp, #16
 801b842:	2000      	movs	r0, #0
 801b844:	4770      	bx	lr
 801b846:	bf00      	nop

0801b848 <rcutils_format_string_limit>:
 801b848:	b40f      	push	{r0, r1, r2, r3}
 801b84a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b84c:	b083      	sub	sp, #12
 801b84e:	ac08      	add	r4, sp, #32
 801b850:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801b852:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801b856:	b34e      	cbz	r6, 801b8ac <rcutils_format_string_limit+0x64>
 801b858:	a808      	add	r0, sp, #32
 801b85a:	f7f8 fe55 	bl	8014508 <rcutils_allocator_is_valid>
 801b85e:	b328      	cbz	r0, 801b8ac <rcutils_format_string_limit+0x64>
 801b860:	2100      	movs	r1, #0
 801b862:	ab0f      	add	r3, sp, #60	@ 0x3c
 801b864:	4632      	mov	r2, r6
 801b866:	4608      	mov	r0, r1
 801b868:	e9cd 3300 	strd	r3, r3, [sp]
 801b86c:	f000 f8f4 	bl	801ba58 <rcutils_vsnprintf>
 801b870:	1c43      	adds	r3, r0, #1
 801b872:	4605      	mov	r5, r0
 801b874:	d01a      	beq.n	801b8ac <rcutils_format_string_limit+0x64>
 801b876:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b878:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b87a:	1c47      	adds	r7, r0, #1
 801b87c:	429f      	cmp	r7, r3
 801b87e:	bf84      	itt	hi
 801b880:	461f      	movhi	r7, r3
 801b882:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 801b886:	4638      	mov	r0, r7
 801b888:	9b08      	ldr	r3, [sp, #32]
 801b88a:	4798      	blx	r3
 801b88c:	4604      	mov	r4, r0
 801b88e:	b168      	cbz	r0, 801b8ac <rcutils_format_string_limit+0x64>
 801b890:	9b01      	ldr	r3, [sp, #4]
 801b892:	4632      	mov	r2, r6
 801b894:	4639      	mov	r1, r7
 801b896:	f000 f8df 	bl	801ba58 <rcutils_vsnprintf>
 801b89a:	2800      	cmp	r0, #0
 801b89c:	db02      	blt.n	801b8a4 <rcutils_format_string_limit+0x5c>
 801b89e:	2300      	movs	r3, #0
 801b8a0:	5563      	strb	r3, [r4, r5]
 801b8a2:	e004      	b.n	801b8ae <rcutils_format_string_limit+0x66>
 801b8a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8a6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801b8a8:	4620      	mov	r0, r4
 801b8aa:	4798      	blx	r3
 801b8ac:	2400      	movs	r4, #0
 801b8ae:	4620      	mov	r0, r4
 801b8b0:	b003      	add	sp, #12
 801b8b2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b8b6:	b004      	add	sp, #16
 801b8b8:	4770      	bx	lr
 801b8ba:	bf00      	nop

0801b8bc <rcutils_repl_str>:
 801b8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8c0:	ed2d 8b02 	vpush	{d8}
 801b8c4:	b087      	sub	sp, #28
 801b8c6:	4680      	mov	r8, r0
 801b8c8:	4608      	mov	r0, r1
 801b8ca:	f8cd 8004 	str.w	r8, [sp, #4]
 801b8ce:	ee08 2a10 	vmov	s16, r2
 801b8d2:	468a      	mov	sl, r1
 801b8d4:	4699      	mov	r9, r3
 801b8d6:	f7e4 fc85 	bl	80001e4 <strlen>
 801b8da:	2600      	movs	r6, #0
 801b8dc:	4647      	mov	r7, r8
 801b8de:	9002      	str	r0, [sp, #8]
 801b8e0:	46b3      	mov	fp, r6
 801b8e2:	2510      	movs	r5, #16
 801b8e4:	46b0      	mov	r8, r6
 801b8e6:	e01d      	b.n	801b924 <rcutils_repl_str+0x68>
 801b8e8:	f10b 0b01 	add.w	fp, fp, #1
 801b8ec:	455e      	cmp	r6, fp
 801b8ee:	d211      	bcs.n	801b914 <rcutils_repl_str+0x58>
 801b8f0:	442e      	add	r6, r5
 801b8f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801b8f6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801b8fa:	00b1      	lsls	r1, r6, #2
 801b8fc:	4798      	blx	r3
 801b8fe:	2800      	cmp	r0, #0
 801b900:	f000 8088 	beq.w	801ba14 <rcutils_repl_str+0x158>
 801b904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b908:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 801b90c:	4680      	mov	r8, r0
 801b90e:	bf28      	it	cs
 801b910:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801b914:	9a01      	ldr	r2, [sp, #4]
 801b916:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801b91a:	1aa2      	subs	r2, r4, r2
 801b91c:	f843 2c04 	str.w	r2, [r3, #-4]
 801b920:	9b02      	ldr	r3, [sp, #8]
 801b922:	18e7      	adds	r7, r4, r3
 801b924:	4651      	mov	r1, sl
 801b926:	4638      	mov	r0, r7
 801b928:	f004 fe19 	bl	802055e <strstr>
 801b92c:	4604      	mov	r4, r0
 801b92e:	4640      	mov	r0, r8
 801b930:	2c00      	cmp	r4, #0
 801b932:	d1d9      	bne.n	801b8e8 <rcutils_repl_str+0x2c>
 801b934:	46b8      	mov	r8, r7
 801b936:	4607      	mov	r7, r0
 801b938:	4640      	mov	r0, r8
 801b93a:	f7e4 fc53 	bl	80001e4 <strlen>
 801b93e:	9b01      	ldr	r3, [sp, #4]
 801b940:	eba8 0303 	sub.w	r3, r8, r3
 801b944:	181c      	adds	r4, r3, r0
 801b946:	9404      	str	r4, [sp, #16]
 801b948:	f1bb 0f00 	cmp.w	fp, #0
 801b94c:	d04a      	beq.n	801b9e4 <rcutils_repl_str+0x128>
 801b94e:	ee18 0a10 	vmov	r0, s16
 801b952:	f7e4 fc47 	bl	80001e4 <strlen>
 801b956:	9b02      	ldr	r3, [sp, #8]
 801b958:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801b95c:	1ac3      	subs	r3, r0, r3
 801b95e:	fb0b 4303 	mla	r3, fp, r3, r4
 801b962:	461a      	mov	r2, r3
 801b964:	9305      	str	r3, [sp, #20]
 801b966:	4606      	mov	r6, r0
 801b968:	f8d9 3000 	ldr.w	r3, [r9]
 801b96c:	1c50      	adds	r0, r2, #1
 801b96e:	4798      	blx	r3
 801b970:	9003      	str	r0, [sp, #12]
 801b972:	2800      	cmp	r0, #0
 801b974:	d04f      	beq.n	801ba16 <rcutils_repl_str+0x15a>
 801b976:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801b97a:	683a      	ldr	r2, [r7, #0]
 801b97c:	4641      	mov	r1, r8
 801b97e:	f004 fee6 	bl	802074e <memcpy>
 801b982:	683d      	ldr	r5, [r7, #0]
 801b984:	9b03      	ldr	r3, [sp, #12]
 801b986:	9701      	str	r7, [sp, #4]
 801b988:	46ba      	mov	sl, r7
 801b98a:	441d      	add	r5, r3
 801b98c:	9f02      	ldr	r7, [sp, #8]
 801b98e:	f8cd 9008 	str.w	r9, [sp, #8]
 801b992:	2401      	movs	r4, #1
 801b994:	46d1      	mov	r9, sl
 801b996:	ee18 aa10 	vmov	sl, s16
 801b99a:	e00a      	b.n	801b9b2 <rcutils_repl_str+0xf6>
 801b99c:	f8d9 5000 	ldr.w	r5, [r9]
 801b9a0:	1aaa      	subs	r2, r5, r2
 801b9a2:	1885      	adds	r5, r0, r2
 801b9a4:	f004 fed3 	bl	802074e <memcpy>
 801b9a8:	45a3      	cmp	fp, r4
 801b9aa:	f104 0201 	add.w	r2, r4, #1
 801b9ae:	d935      	bls.n	801ba1c <rcutils_repl_str+0x160>
 801b9b0:	4614      	mov	r4, r2
 801b9b2:	4632      	mov	r2, r6
 801b9b4:	4651      	mov	r1, sl
 801b9b6:	4628      	mov	r0, r5
 801b9b8:	f004 fec9 	bl	802074e <memcpy>
 801b9bc:	f859 2b04 	ldr.w	r2, [r9], #4
 801b9c0:	45a3      	cmp	fp, r4
 801b9c2:	443a      	add	r2, r7
 801b9c4:	eb05 0006 	add.w	r0, r5, r6
 801b9c8:	eb08 0102 	add.w	r1, r8, r2
 801b9cc:	d1e6      	bne.n	801b99c <rcutils_repl_str+0xe0>
 801b9ce:	9b04      	ldr	r3, [sp, #16]
 801b9d0:	1a9a      	subs	r2, r3, r2
 801b9d2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 801b9d6:	f004 feba 	bl	802074e <memcpy>
 801b9da:	9a03      	ldr	r2, [sp, #12]
 801b9dc:	9905      	ldr	r1, [sp, #20]
 801b9de:	2300      	movs	r3, #0
 801b9e0:	5453      	strb	r3, [r2, r1]
 801b9e2:	e00b      	b.n	801b9fc <rcutils_repl_str+0x140>
 801b9e4:	4620      	mov	r0, r4
 801b9e6:	f8d9 3000 	ldr.w	r3, [r9]
 801b9ea:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801b9ee:	3001      	adds	r0, #1
 801b9f0:	4798      	blx	r3
 801b9f2:	9003      	str	r0, [sp, #12]
 801b9f4:	b110      	cbz	r0, 801b9fc <rcutils_repl_str+0x140>
 801b9f6:	9901      	ldr	r1, [sp, #4]
 801b9f8:	f004 fea1 	bl	802073e <strcpy>
 801b9fc:	4638      	mov	r0, r7
 801b9fe:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801ba02:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801ba06:	4798      	blx	r3
 801ba08:	9803      	ldr	r0, [sp, #12]
 801ba0a:	b007      	add	sp, #28
 801ba0c:	ecbd 8b02 	vpop	{d8}
 801ba10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba14:	4647      	mov	r7, r8
 801ba16:	2300      	movs	r3, #0
 801ba18:	9303      	str	r3, [sp, #12]
 801ba1a:	e7ef      	b.n	801b9fc <rcutils_repl_str+0x140>
 801ba1c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 801ba20:	e7db      	b.n	801b9da <rcutils_repl_str+0x11e>
 801ba22:	bf00      	nop

0801ba24 <rcutils_snprintf>:
 801ba24:	b40c      	push	{r2, r3}
 801ba26:	b530      	push	{r4, r5, lr}
 801ba28:	b083      	sub	sp, #12
 801ba2a:	ab06      	add	r3, sp, #24
 801ba2c:	f853 2b04 	ldr.w	r2, [r3], #4
 801ba30:	9301      	str	r3, [sp, #4]
 801ba32:	b152      	cbz	r2, 801ba4a <rcutils_snprintf+0x26>
 801ba34:	b138      	cbz	r0, 801ba46 <rcutils_snprintf+0x22>
 801ba36:	b141      	cbz	r1, 801ba4a <rcutils_snprintf+0x26>
 801ba38:	f004 fc9e 	bl	8020378 <vsniprintf>
 801ba3c:	b003      	add	sp, #12
 801ba3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ba42:	b002      	add	sp, #8
 801ba44:	4770      	bx	lr
 801ba46:	2900      	cmp	r1, #0
 801ba48:	d0f6      	beq.n	801ba38 <rcutils_snprintf+0x14>
 801ba4a:	f004 fe4b 	bl	80206e4 <__errno>
 801ba4e:	2316      	movs	r3, #22
 801ba50:	6003      	str	r3, [r0, #0]
 801ba52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ba56:	e7f1      	b.n	801ba3c <rcutils_snprintf+0x18>

0801ba58 <rcutils_vsnprintf>:
 801ba58:	b570      	push	{r4, r5, r6, lr}
 801ba5a:	b13a      	cbz	r2, 801ba6c <rcutils_vsnprintf+0x14>
 801ba5c:	b120      	cbz	r0, 801ba68 <rcutils_vsnprintf+0x10>
 801ba5e:	b129      	cbz	r1, 801ba6c <rcutils_vsnprintf+0x14>
 801ba60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ba64:	f004 bc88 	b.w	8020378 <vsniprintf>
 801ba68:	2900      	cmp	r1, #0
 801ba6a:	d0f9      	beq.n	801ba60 <rcutils_vsnprintf+0x8>
 801ba6c:	f004 fe3a 	bl	80206e4 <__errno>
 801ba70:	2316      	movs	r3, #22
 801ba72:	6003      	str	r3, [r0, #0]
 801ba74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ba78:	bd70      	pop	{r4, r5, r6, pc}
 801ba7a:	bf00      	nop

0801ba7c <rcutils_strdup>:
 801ba7c:	b084      	sub	sp, #16
 801ba7e:	b570      	push	{r4, r5, r6, lr}
 801ba80:	b082      	sub	sp, #8
 801ba82:	ac07      	add	r4, sp, #28
 801ba84:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 801ba88:	4605      	mov	r5, r0
 801ba8a:	b1b0      	cbz	r0, 801baba <rcutils_strdup+0x3e>
 801ba8c:	f7e4 fbaa 	bl	80001e4 <strlen>
 801ba90:	1c42      	adds	r2, r0, #1
 801ba92:	9b07      	ldr	r3, [sp, #28]
 801ba94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ba96:	9201      	str	r2, [sp, #4]
 801ba98:	4606      	mov	r6, r0
 801ba9a:	4610      	mov	r0, r2
 801ba9c:	4798      	blx	r3
 801ba9e:	4604      	mov	r4, r0
 801baa0:	b128      	cbz	r0, 801baae <rcutils_strdup+0x32>
 801baa2:	9a01      	ldr	r2, [sp, #4]
 801baa4:	4629      	mov	r1, r5
 801baa6:	f004 fe52 	bl	802074e <memcpy>
 801baaa:	2300      	movs	r3, #0
 801baac:	55a3      	strb	r3, [r4, r6]
 801baae:	4620      	mov	r0, r4
 801bab0:	b002      	add	sp, #8
 801bab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bab6:	b004      	add	sp, #16
 801bab8:	4770      	bx	lr
 801baba:	4604      	mov	r4, r0
 801babc:	e7f7      	b.n	801baae <rcutils_strdup+0x32>
 801babe:	bf00      	nop

0801bac0 <rcutils_strndup>:
 801bac0:	b082      	sub	sp, #8
 801bac2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bac4:	ac06      	add	r4, sp, #24
 801bac6:	e884 000c 	stmia.w	r4, {r2, r3}
 801baca:	4605      	mov	r5, r0
 801bacc:	b188      	cbz	r0, 801baf2 <rcutils_strndup+0x32>
 801bace:	1c4f      	adds	r7, r1, #1
 801bad0:	460e      	mov	r6, r1
 801bad2:	4638      	mov	r0, r7
 801bad4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bad6:	4790      	blx	r2
 801bad8:	4604      	mov	r4, r0
 801bada:	b128      	cbz	r0, 801bae8 <rcutils_strndup+0x28>
 801badc:	463a      	mov	r2, r7
 801bade:	4629      	mov	r1, r5
 801bae0:	f004 fe35 	bl	802074e <memcpy>
 801bae4:	2300      	movs	r3, #0
 801bae6:	55a3      	strb	r3, [r4, r6]
 801bae8:	4620      	mov	r0, r4
 801baea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801baee:	b002      	add	sp, #8
 801baf0:	4770      	bx	lr
 801baf2:	4604      	mov	r4, r0
 801baf4:	e7f8      	b.n	801bae8 <rcutils_strndup+0x28>
 801baf6:	bf00      	nop

0801baf8 <rcutils_get_zero_initialized_string_map>:
 801baf8:	4b01      	ldr	r3, [pc, #4]	@ (801bb00 <rcutils_get_zero_initialized_string_map+0x8>)
 801bafa:	2000      	movs	r0, #0
 801bafc:	6018      	str	r0, [r3, #0]
 801bafe:	4770      	bx	lr
 801bb00:	200164d0 	.word	0x200164d0

0801bb04 <rcutils_string_map_reserve>:
 801bb04:	2800      	cmp	r0, #0
 801bb06:	d05f      	beq.n	801bbc8 <rcutils_string_map_reserve+0xc4>
 801bb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb0c:	460c      	mov	r4, r1
 801bb0e:	6801      	ldr	r1, [r0, #0]
 801bb10:	b082      	sub	sp, #8
 801bb12:	4605      	mov	r5, r0
 801bb14:	b129      	cbz	r1, 801bb22 <rcutils_string_map_reserve+0x1e>
 801bb16:	68cb      	ldr	r3, [r1, #12]
 801bb18:	42a3      	cmp	r3, r4
 801bb1a:	d906      	bls.n	801bb2a <rcutils_string_map_reserve+0x26>
 801bb1c:	461c      	mov	r4, r3
 801bb1e:	2900      	cmp	r1, #0
 801bb20:	d1f9      	bne.n	801bb16 <rcutils_string_map_reserve+0x12>
 801bb22:	201f      	movs	r0, #31
 801bb24:	b002      	add	sp, #8
 801bb26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb2a:	688b      	ldr	r3, [r1, #8]
 801bb2c:	42a3      	cmp	r3, r4
 801bb2e:	d047      	beq.n	801bbc0 <rcutils_string_map_reserve+0xbc>
 801bb30:	6a0e      	ldr	r6, [r1, #32]
 801bb32:	2c00      	cmp	r4, #0
 801bb34:	d034      	beq.n	801bba0 <rcutils_string_map_reserve+0x9c>
 801bb36:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801bb3a:	d243      	bcs.n	801bbc4 <rcutils_string_map_reserve+0xc0>
 801bb3c:	00a7      	lsls	r7, r4, #2
 801bb3e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801bb42:	6808      	ldr	r0, [r1, #0]
 801bb44:	4632      	mov	r2, r6
 801bb46:	4639      	mov	r1, r7
 801bb48:	47c0      	blx	r8
 801bb4a:	2800      	cmp	r0, #0
 801bb4c:	d03a      	beq.n	801bbc4 <rcutils_string_map_reserve+0xc0>
 801bb4e:	682b      	ldr	r3, [r5, #0]
 801bb50:	4632      	mov	r2, r6
 801bb52:	6018      	str	r0, [r3, #0]
 801bb54:	4639      	mov	r1, r7
 801bb56:	6858      	ldr	r0, [r3, #4]
 801bb58:	47c0      	blx	r8
 801bb5a:	2800      	cmp	r0, #0
 801bb5c:	d032      	beq.n	801bbc4 <rcutils_string_map_reserve+0xc0>
 801bb5e:	682d      	ldr	r5, [r5, #0]
 801bb60:	68ab      	ldr	r3, [r5, #8]
 801bb62:	6068      	str	r0, [r5, #4]
 801bb64:	42a3      	cmp	r3, r4
 801bb66:	d226      	bcs.n	801bbb6 <rcutils_string_map_reserve+0xb2>
 801bb68:	682a      	ldr	r2, [r5, #0]
 801bb6a:	eb00 0c07 	add.w	ip, r0, r7
 801bb6e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801bb72:	45e6      	cmp	lr, ip
 801bb74:	ea4f 0183 	mov.w	r1, r3, lsl #2
 801bb78:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 801bb7c:	d203      	bcs.n	801bb86 <rcutils_string_map_reserve+0x82>
 801bb7e:	eb02 0c07 	add.w	ip, r2, r7
 801bb82:	4566      	cmp	r6, ip
 801bb84:	d322      	bcc.n	801bbcc <rcutils_string_map_reserve+0xc8>
 801bb86:	1ae3      	subs	r3, r4, r3
 801bb88:	009a      	lsls	r2, r3, #2
 801bb8a:	4670      	mov	r0, lr
 801bb8c:	2100      	movs	r1, #0
 801bb8e:	9201      	str	r2, [sp, #4]
 801bb90:	f004 fcbe 	bl	8020510 <memset>
 801bb94:	9a01      	ldr	r2, [sp, #4]
 801bb96:	2100      	movs	r1, #0
 801bb98:	4630      	mov	r0, r6
 801bb9a:	f004 fcb9 	bl	8020510 <memset>
 801bb9e:	e00a      	b.n	801bbb6 <rcutils_string_map_reserve+0xb2>
 801bba0:	694f      	ldr	r7, [r1, #20]
 801bba2:	6808      	ldr	r0, [r1, #0]
 801bba4:	4631      	mov	r1, r6
 801bba6:	47b8      	blx	r7
 801bba8:	682b      	ldr	r3, [r5, #0]
 801bbaa:	4631      	mov	r1, r6
 801bbac:	6858      	ldr	r0, [r3, #4]
 801bbae:	601c      	str	r4, [r3, #0]
 801bbb0:	47b8      	blx	r7
 801bbb2:	682d      	ldr	r5, [r5, #0]
 801bbb4:	606c      	str	r4, [r5, #4]
 801bbb6:	2000      	movs	r0, #0
 801bbb8:	60ac      	str	r4, [r5, #8]
 801bbba:	b002      	add	sp, #8
 801bbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbc0:	2000      	movs	r0, #0
 801bbc2:	e7af      	b.n	801bb24 <rcutils_string_map_reserve+0x20>
 801bbc4:	200a      	movs	r0, #10
 801bbc6:	e7ad      	b.n	801bb24 <rcutils_string_map_reserve+0x20>
 801bbc8:	200b      	movs	r0, #11
 801bbca:	4770      	bx	lr
 801bbcc:	1f0b      	subs	r3, r1, #4
 801bbce:	4418      	add	r0, r3
 801bbd0:	4413      	add	r3, r2
 801bbd2:	3a04      	subs	r2, #4
 801bbd4:	4417      	add	r7, r2
 801bbd6:	2200      	movs	r2, #0
 801bbd8:	f843 2f04 	str.w	r2, [r3, #4]!
 801bbdc:	42bb      	cmp	r3, r7
 801bbde:	f840 2f04 	str.w	r2, [r0, #4]!
 801bbe2:	d1f9      	bne.n	801bbd8 <rcutils_string_map_reserve+0xd4>
 801bbe4:	e7e7      	b.n	801bbb6 <rcutils_string_map_reserve+0xb2>
 801bbe6:	bf00      	nop

0801bbe8 <rcutils_string_map_init>:
 801bbe8:	b082      	sub	sp, #8
 801bbea:	b570      	push	{r4, r5, r6, lr}
 801bbec:	ac04      	add	r4, sp, #16
 801bbee:	e884 000c 	stmia.w	r4, {r2, r3}
 801bbf2:	b380      	cbz	r0, 801bc56 <rcutils_string_map_init+0x6e>
 801bbf4:	6806      	ldr	r6, [r0, #0]
 801bbf6:	4604      	mov	r4, r0
 801bbf8:	b12e      	cbz	r6, 801bc06 <rcutils_string_map_init+0x1e>
 801bbfa:	251e      	movs	r5, #30
 801bbfc:	4628      	mov	r0, r5
 801bbfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bc02:	b002      	add	sp, #8
 801bc04:	4770      	bx	lr
 801bc06:	a804      	add	r0, sp, #16
 801bc08:	460d      	mov	r5, r1
 801bc0a:	f7f8 fc7d 	bl	8014508 <rcutils_allocator_is_valid>
 801bc0e:	b310      	cbz	r0, 801bc56 <rcutils_string_map_init+0x6e>
 801bc10:	9b04      	ldr	r3, [sp, #16]
 801bc12:	9908      	ldr	r1, [sp, #32]
 801bc14:	2024      	movs	r0, #36	@ 0x24
 801bc16:	4798      	blx	r3
 801bc18:	6020      	str	r0, [r4, #0]
 801bc1a:	b310      	cbz	r0, 801bc62 <rcutils_string_map_init+0x7a>
 801bc1c:	f10d 0e10 	add.w	lr, sp, #16
 801bc20:	e9c0 6600 	strd	r6, r6, [r0]
 801bc24:	e9c0 6602 	strd	r6, r6, [r0, #8]
 801bc28:	f100 0c10 	add.w	ip, r0, #16
 801bc2c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bc30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bc34:	f8de 3000 	ldr.w	r3, [lr]
 801bc38:	f8cc 3000 	str.w	r3, [ip]
 801bc3c:	4629      	mov	r1, r5
 801bc3e:	4620      	mov	r0, r4
 801bc40:	f7ff ff60 	bl	801bb04 <rcutils_string_map_reserve>
 801bc44:	4605      	mov	r5, r0
 801bc46:	2800      	cmp	r0, #0
 801bc48:	d0d8      	beq.n	801bbfc <rcutils_string_map_init+0x14>
 801bc4a:	9b05      	ldr	r3, [sp, #20]
 801bc4c:	9908      	ldr	r1, [sp, #32]
 801bc4e:	6820      	ldr	r0, [r4, #0]
 801bc50:	4798      	blx	r3
 801bc52:	6026      	str	r6, [r4, #0]
 801bc54:	e7d2      	b.n	801bbfc <rcutils_string_map_init+0x14>
 801bc56:	250b      	movs	r5, #11
 801bc58:	4628      	mov	r0, r5
 801bc5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bc5e:	b002      	add	sp, #8
 801bc60:	4770      	bx	lr
 801bc62:	250a      	movs	r5, #10
 801bc64:	e7ca      	b.n	801bbfc <rcutils_string_map_init+0x14>
 801bc66:	bf00      	nop

0801bc68 <rcutils_string_map_fini>:
 801bc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc6c:	b082      	sub	sp, #8
 801bc6e:	2800      	cmp	r0, #0
 801bc70:	d03a      	beq.n	801bce8 <rcutils_string_map_fini+0x80>
 801bc72:	6804      	ldr	r4, [r0, #0]
 801bc74:	4606      	mov	r6, r0
 801bc76:	2c00      	cmp	r4, #0
 801bc78:	d032      	beq.n	801bce0 <rcutils_string_map_fini+0x78>
 801bc7a:	68a3      	ldr	r3, [r4, #8]
 801bc7c:	b32b      	cbz	r3, 801bcca <rcutils_string_map_fini+0x62>
 801bc7e:	2500      	movs	r5, #0
 801bc80:	6822      	ldr	r2, [r4, #0]
 801bc82:	462f      	mov	r7, r5
 801bc84:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801bc88:	b1e0      	cbz	r0, 801bcc4 <rcutils_string_map_fini+0x5c>
 801bc8a:	6a21      	ldr	r1, [r4, #32]
 801bc8c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 801bc90:	9101      	str	r1, [sp, #4]
 801bc92:	47c0      	blx	r8
 801bc94:	e9d4 2300 	ldrd	r2, r3, [r4]
 801bc98:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801bc9c:	9901      	ldr	r1, [sp, #4]
 801bc9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801bca2:	47c0      	blx	r8
 801bca4:	68e3      	ldr	r3, [r4, #12]
 801bca6:	6862      	ldr	r2, [r4, #4]
 801bca8:	3b01      	subs	r3, #1
 801bcaa:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 801bcae:	60e3      	str	r3, [r4, #12]
 801bcb0:	6834      	ldr	r4, [r6, #0]
 801bcb2:	68a3      	ldr	r3, [r4, #8]
 801bcb4:	3501      	adds	r5, #1
 801bcb6:	429d      	cmp	r5, r3
 801bcb8:	d207      	bcs.n	801bcca <rcutils_string_map_fini+0x62>
 801bcba:	6822      	ldr	r2, [r4, #0]
 801bcbc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 801bcc0:	2800      	cmp	r0, #0
 801bcc2:	d1e2      	bne.n	801bc8a <rcutils_string_map_fini+0x22>
 801bcc4:	3501      	adds	r5, #1
 801bcc6:	429d      	cmp	r5, r3
 801bcc8:	d3dc      	bcc.n	801bc84 <rcutils_string_map_fini+0x1c>
 801bcca:	2100      	movs	r1, #0
 801bccc:	4630      	mov	r0, r6
 801bcce:	f7ff ff19 	bl	801bb04 <rcutils_string_map_reserve>
 801bcd2:	4604      	mov	r4, r0
 801bcd4:	b920      	cbnz	r0, 801bce0 <rcutils_string_map_fini+0x78>
 801bcd6:	6830      	ldr	r0, [r6, #0]
 801bcd8:	6943      	ldr	r3, [r0, #20]
 801bcda:	6a01      	ldr	r1, [r0, #32]
 801bcdc:	4798      	blx	r3
 801bcde:	6034      	str	r4, [r6, #0]
 801bce0:	4620      	mov	r0, r4
 801bce2:	b002      	add	sp, #8
 801bce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bce8:	240b      	movs	r4, #11
 801bcea:	4620      	mov	r0, r4
 801bcec:	b002      	add	sp, #8
 801bcee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcf2:	bf00      	nop

0801bcf4 <rcutils_string_map_getn>:
 801bcf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcf8:	b300      	cbz	r0, 801bd3c <rcutils_string_map_getn+0x48>
 801bcfa:	6807      	ldr	r7, [r0, #0]
 801bcfc:	b1ff      	cbz	r7, 801bd3e <rcutils_string_map_getn+0x4a>
 801bcfe:	4688      	mov	r8, r1
 801bd00:	b1e1      	cbz	r1, 801bd3c <rcutils_string_map_getn+0x48>
 801bd02:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801bd06:	683e      	ldr	r6, [r7, #0]
 801bd08:	f1ba 0f00 	cmp.w	sl, #0
 801bd0c:	d016      	beq.n	801bd3c <rcutils_string_map_getn+0x48>
 801bd0e:	4691      	mov	r9, r2
 801bd10:	3e04      	subs	r6, #4
 801bd12:	2400      	movs	r4, #0
 801bd14:	f856 5f04 	ldr.w	r5, [r6, #4]!
 801bd18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801bd1c:	4628      	mov	r0, r5
 801bd1e:	3401      	adds	r4, #1
 801bd20:	b155      	cbz	r5, 801bd38 <rcutils_string_map_getn+0x44>
 801bd22:	f7e4 fa5f 	bl	80001e4 <strlen>
 801bd26:	4548      	cmp	r0, r9
 801bd28:	4602      	mov	r2, r0
 801bd2a:	4629      	mov	r1, r5
 801bd2c:	bf38      	it	cc
 801bd2e:	464a      	movcc	r2, r9
 801bd30:	4640      	mov	r0, r8
 801bd32:	f004 fc02 	bl	802053a <strncmp>
 801bd36:	b128      	cbz	r0, 801bd44 <rcutils_string_map_getn+0x50>
 801bd38:	45a2      	cmp	sl, r4
 801bd3a:	d1eb      	bne.n	801bd14 <rcutils_string_map_getn+0x20>
 801bd3c:	2700      	movs	r7, #0
 801bd3e:	4638      	mov	r0, r7
 801bd40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	f853 700b 	ldr.w	r7, [r3, fp]
 801bd4a:	4638      	mov	r0, r7
 801bd4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bd50 <rmw_get_zero_initialized_context>:
 801bd50:	b510      	push	{r4, lr}
 801bd52:	4604      	mov	r4, r0
 801bd54:	3010      	adds	r0, #16
 801bd56:	f000 f80b 	bl	801bd70 <rmw_get_zero_initialized_init_options>
 801bd5a:	2300      	movs	r3, #0
 801bd5c:	2000      	movs	r0, #0
 801bd5e:	2100      	movs	r1, #0
 801bd60:	e9c4 0100 	strd	r0, r1, [r4]
 801bd64:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 801bd68:	60a3      	str	r3, [r4, #8]
 801bd6a:	4620      	mov	r0, r4
 801bd6c:	bd10      	pop	{r4, pc}
 801bd6e:	bf00      	nop

0801bd70 <rmw_get_zero_initialized_init_options>:
 801bd70:	b510      	push	{r4, lr}
 801bd72:	2238      	movs	r2, #56	@ 0x38
 801bd74:	4604      	mov	r4, r0
 801bd76:	2100      	movs	r1, #0
 801bd78:	f004 fbca 	bl	8020510 <memset>
 801bd7c:	f104 0010 	add.w	r0, r4, #16
 801bd80:	f000 f806 	bl	801bd90 <rmw_get_default_security_options>
 801bd84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bd88:	60e3      	str	r3, [r4, #12]
 801bd8a:	4620      	mov	r0, r4
 801bd8c:	bd10      	pop	{r4, pc}
 801bd8e:	bf00      	nop

0801bd90 <rmw_get_default_security_options>:
 801bd90:	2200      	movs	r2, #0
 801bd92:	7002      	strb	r2, [r0, #0]
 801bd94:	6042      	str	r2, [r0, #4]
 801bd96:	4770      	bx	lr

0801bd98 <rmw_subscription_content_filter_options_fini>:
 801bd98:	b1b0      	cbz	r0, 801bdc8 <rmw_subscription_content_filter_options_fini+0x30>
 801bd9a:	b538      	push	{r3, r4, r5, lr}
 801bd9c:	4604      	mov	r4, r0
 801bd9e:	4608      	mov	r0, r1
 801bda0:	460d      	mov	r5, r1
 801bda2:	f7f8 fbb1 	bl	8014508 <rcutils_allocator_is_valid>
 801bda6:	b168      	cbz	r0, 801bdc4 <rmw_subscription_content_filter_options_fini+0x2c>
 801bda8:	6820      	ldr	r0, [r4, #0]
 801bdaa:	b120      	cbz	r0, 801bdb6 <rmw_subscription_content_filter_options_fini+0x1e>
 801bdac:	686b      	ldr	r3, [r5, #4]
 801bdae:	6929      	ldr	r1, [r5, #16]
 801bdb0:	4798      	blx	r3
 801bdb2:	2300      	movs	r3, #0
 801bdb4:	6023      	str	r3, [r4, #0]
 801bdb6:	1d20      	adds	r0, r4, #4
 801bdb8:	f003 fd2a 	bl	801f810 <rcutils_string_array_fini>
 801bdbc:	3800      	subs	r0, #0
 801bdbe:	bf18      	it	ne
 801bdc0:	2001      	movne	r0, #1
 801bdc2:	bd38      	pop	{r3, r4, r5, pc}
 801bdc4:	200b      	movs	r0, #11
 801bdc6:	bd38      	pop	{r3, r4, r5, pc}
 801bdc8:	200b      	movs	r0, #11
 801bdca:	4770      	bx	lr

0801bdcc <rmw_get_default_subscription_options>:
 801bdcc:	2200      	movs	r2, #0
 801bdce:	e9c0 2200 	strd	r2, r2, [r0]
 801bdd2:	6082      	str	r2, [r0, #8]
 801bdd4:	4770      	bx	lr
 801bdd6:	bf00      	nop

0801bdd8 <rmw_time_equal>:
 801bdd8:	b4f0      	push	{r4, r5, r6, r7}
 801bdda:	b084      	sub	sp, #16
 801bddc:	ac04      	add	r4, sp, #16
 801bdde:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801bde2:	4603      	mov	r3, r0
 801bde4:	4924      	ldr	r1, [pc, #144]	@ (801be78 <rmw_time_equal+0xa0>)
 801bde6:	9e03      	ldr	r6, [sp, #12]
 801bde8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801bdec:	2202      	movs	r2, #2
 801bdee:	4299      	cmp	r1, r3
 801bdf0:	41aa      	sbcs	r2, r5
 801bdf2:	d330      	bcc.n	801be56 <rmw_time_equal+0x7e>
 801bdf4:	4c21      	ldr	r4, [pc, #132]	@ (801be7c <rmw_time_equal+0xa4>)
 801bdf6:	fba3 3204 	umull	r3, r2, r3, r4
 801bdfa:	fb04 2205 	mla	r2, r4, r5, r2
 801bdfe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801be02:	43dd      	mvns	r5, r3
 801be04:	1a8c      	subs	r4, r1, r2
 801be06:	4285      	cmp	r5, r0
 801be08:	41b4      	sbcs	r4, r6
 801be0a:	d332      	bcc.n	801be72 <rmw_time_equal+0x9a>
 801be0c:	eb10 0c03 	adds.w	ip, r0, r3
 801be10:	eb42 0106 	adc.w	r1, r2, r6
 801be14:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801be18:	4817      	ldr	r0, [pc, #92]	@ (801be78 <rmw_time_equal+0xa0>)
 801be1a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801be1c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801be1e:	2202      	movs	r2, #2
 801be20:	4298      	cmp	r0, r3
 801be22:	41b2      	sbcs	r2, r6
 801be24:	d31c      	bcc.n	801be60 <rmw_time_equal+0x88>
 801be26:	4c15      	ldr	r4, [pc, #84]	@ (801be7c <rmw_time_equal+0xa4>)
 801be28:	fba3 3204 	umull	r3, r2, r3, r4
 801be2c:	fb04 2206 	mla	r2, r4, r6, r2
 801be30:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801be34:	43de      	mvns	r6, r3
 801be36:	1a84      	subs	r4, r0, r2
 801be38:	42ae      	cmp	r6, r5
 801be3a:	41bc      	sbcs	r4, r7
 801be3c:	d315      	bcc.n	801be6a <rmw_time_equal+0x92>
 801be3e:	195b      	adds	r3, r3, r5
 801be40:	eb42 0207 	adc.w	r2, r2, r7
 801be44:	428a      	cmp	r2, r1
 801be46:	bf08      	it	eq
 801be48:	4563      	cmpeq	r3, ip
 801be4a:	bf0c      	ite	eq
 801be4c:	2001      	moveq	r0, #1
 801be4e:	2000      	movne	r0, #0
 801be50:	b004      	add	sp, #16
 801be52:	bcf0      	pop	{r4, r5, r6, r7}
 801be54:	4770      	bx	lr
 801be56:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801be5a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801be5e:	e7d9      	b.n	801be14 <rmw_time_equal+0x3c>
 801be60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801be64:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801be68:	e7ec      	b.n	801be44 <rmw_time_equal+0x6c>
 801be6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801be6e:	4602      	mov	r2, r0
 801be70:	e7e8      	b.n	801be44 <rmw_time_equal+0x6c>
 801be72:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801be76:	e7cd      	b.n	801be14 <rmw_time_equal+0x3c>
 801be78:	25c17d04 	.word	0x25c17d04
 801be7c:	3b9aca00 	.word	0x3b9aca00

0801be80 <rmw_time_total_nsec>:
 801be80:	b470      	push	{r4, r5, r6}
 801be82:	b085      	sub	sp, #20
 801be84:	ac04      	add	r4, sp, #16
 801be86:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801be8a:	4603      	mov	r3, r0
 801be8c:	4912      	ldr	r1, [pc, #72]	@ (801bed8 <rmw_time_total_nsec+0x58>)
 801be8e:	9e03      	ldr	r6, [sp, #12]
 801be90:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801be94:	2202      	movs	r2, #2
 801be96:	4299      	cmp	r1, r3
 801be98:	41aa      	sbcs	r2, r5
 801be9a:	d311      	bcc.n	801bec0 <rmw_time_total_nsec+0x40>
 801be9c:	4c0f      	ldr	r4, [pc, #60]	@ (801bedc <rmw_time_total_nsec+0x5c>)
 801be9e:	fba3 3204 	umull	r3, r2, r3, r4
 801bea2:	fb04 2205 	mla	r2, r4, r5, r2
 801bea6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801beaa:	43dd      	mvns	r5, r3
 801beac:	1a8c      	subs	r4, r1, r2
 801beae:	4285      	cmp	r5, r0
 801beb0:	41b4      	sbcs	r4, r6
 801beb2:	d30c      	bcc.n	801bece <rmw_time_total_nsec+0x4e>
 801beb4:	1818      	adds	r0, r3, r0
 801beb6:	eb42 0106 	adc.w	r1, r2, r6
 801beba:	b005      	add	sp, #20
 801bebc:	bc70      	pop	{r4, r5, r6}
 801bebe:	4770      	bx	lr
 801bec0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bec4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801bec8:	b005      	add	sp, #20
 801beca:	bc70      	pop	{r4, r5, r6}
 801becc:	4770      	bx	lr
 801bece:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bed2:	b005      	add	sp, #20
 801bed4:	bc70      	pop	{r4, r5, r6}
 801bed6:	4770      	bx	lr
 801bed8:	25c17d04 	.word	0x25c17d04
 801bedc:	3b9aca00 	.word	0x3b9aca00

0801bee0 <rmw_get_zero_initialized_message_info>:
 801bee0:	b510      	push	{r4, lr}
 801bee2:	2240      	movs	r2, #64	@ 0x40
 801bee4:	4604      	mov	r4, r0
 801bee6:	2100      	movs	r1, #0
 801bee8:	f004 fb12 	bl	8020510 <memset>
 801beec:	4620      	mov	r0, r4
 801beee:	bd10      	pop	{r4, pc}

0801bef0 <rmw_validate_full_topic_name>:
 801bef0:	2800      	cmp	r0, #0
 801bef2:	d057      	beq.n	801bfa4 <rmw_validate_full_topic_name+0xb4>
 801bef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bef8:	460d      	mov	r5, r1
 801befa:	2900      	cmp	r1, #0
 801befc:	d054      	beq.n	801bfa8 <rmw_validate_full_topic_name+0xb8>
 801befe:	4616      	mov	r6, r2
 801bf00:	4604      	mov	r4, r0
 801bf02:	f7e4 f96f 	bl	80001e4 <strlen>
 801bf06:	b148      	cbz	r0, 801bf1c <rmw_validate_full_topic_name+0x2c>
 801bf08:	7823      	ldrb	r3, [r4, #0]
 801bf0a:	2b2f      	cmp	r3, #47	@ 0x2f
 801bf0c:	d00d      	beq.n	801bf2a <rmw_validate_full_topic_name+0x3a>
 801bf0e:	2302      	movs	r3, #2
 801bf10:	602b      	str	r3, [r5, #0]
 801bf12:	b13e      	cbz	r6, 801bf24 <rmw_validate_full_topic_name+0x34>
 801bf14:	2000      	movs	r0, #0
 801bf16:	6030      	str	r0, [r6, #0]
 801bf18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf1c:	2301      	movs	r3, #1
 801bf1e:	602b      	str	r3, [r5, #0]
 801bf20:	2e00      	cmp	r6, #0
 801bf22:	d1f7      	bne.n	801bf14 <rmw_validate_full_topic_name+0x24>
 801bf24:	2000      	movs	r0, #0
 801bf26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf2a:	1e43      	subs	r3, r0, #1
 801bf2c:	5ce2      	ldrb	r2, [r4, r3]
 801bf2e:	2a2f      	cmp	r2, #47	@ 0x2f
 801bf30:	d03c      	beq.n	801bfac <rmw_validate_full_topic_name+0xbc>
 801bf32:	1e63      	subs	r3, r4, #1
 801bf34:	eb03 0800 	add.w	r8, r3, r0
 801bf38:	f1c4 0e01 	rsb	lr, r4, #1
 801bf3c:	eb0e 0703 	add.w	r7, lr, r3
 801bf40:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801bf44:	f021 0220 	bic.w	r2, r1, #32
 801bf48:	3a41      	subs	r2, #65	@ 0x41
 801bf4a:	2a19      	cmp	r2, #25
 801bf4c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 801bf50:	d90b      	bls.n	801bf6a <rmw_validate_full_topic_name+0x7a>
 801bf52:	295f      	cmp	r1, #95	@ 0x5f
 801bf54:	d009      	beq.n	801bf6a <rmw_validate_full_topic_name+0x7a>
 801bf56:	f1bc 0f0a 	cmp.w	ip, #10
 801bf5a:	d906      	bls.n	801bf6a <rmw_validate_full_topic_name+0x7a>
 801bf5c:	2304      	movs	r3, #4
 801bf5e:	602b      	str	r3, [r5, #0]
 801bf60:	2e00      	cmp	r6, #0
 801bf62:	d0df      	beq.n	801bf24 <rmw_validate_full_topic_name+0x34>
 801bf64:	6037      	str	r7, [r6, #0]
 801bf66:	2000      	movs	r0, #0
 801bf68:	e7d6      	b.n	801bf18 <rmw_validate_full_topic_name+0x28>
 801bf6a:	4543      	cmp	r3, r8
 801bf6c:	d1e6      	bne.n	801bf3c <rmw_validate_full_topic_name+0x4c>
 801bf6e:	4f1a      	ldr	r7, [pc, #104]	@ (801bfd8 <rmw_validate_full_topic_name+0xe8>)
 801bf70:	2301      	movs	r3, #1
 801bf72:	e004      	b.n	801bf7e <rmw_validate_full_topic_name+0x8e>
 801bf74:	4298      	cmp	r0, r3
 801bf76:	f104 0401 	add.w	r4, r4, #1
 801bf7a:	d91c      	bls.n	801bfb6 <rmw_validate_full_topic_name+0xc6>
 801bf7c:	4613      	mov	r3, r2
 801bf7e:	4298      	cmp	r0, r3
 801bf80:	f103 0201 	add.w	r2, r3, #1
 801bf84:	d0f6      	beq.n	801bf74 <rmw_validate_full_topic_name+0x84>
 801bf86:	7821      	ldrb	r1, [r4, #0]
 801bf88:	292f      	cmp	r1, #47	@ 0x2f
 801bf8a:	d1f3      	bne.n	801bf74 <rmw_validate_full_topic_name+0x84>
 801bf8c:	7861      	ldrb	r1, [r4, #1]
 801bf8e:	292f      	cmp	r1, #47	@ 0x2f
 801bf90:	d01c      	beq.n	801bfcc <rmw_validate_full_topic_name+0xdc>
 801bf92:	5dc9      	ldrb	r1, [r1, r7]
 801bf94:	0749      	lsls	r1, r1, #29
 801bf96:	d5ed      	bpl.n	801bf74 <rmw_validate_full_topic_name+0x84>
 801bf98:	2206      	movs	r2, #6
 801bf9a:	602a      	str	r2, [r5, #0]
 801bf9c:	2e00      	cmp	r6, #0
 801bf9e:	d0c1      	beq.n	801bf24 <rmw_validate_full_topic_name+0x34>
 801bfa0:	6033      	str	r3, [r6, #0]
 801bfa2:	e7bf      	b.n	801bf24 <rmw_validate_full_topic_name+0x34>
 801bfa4:	200b      	movs	r0, #11
 801bfa6:	4770      	bx	lr
 801bfa8:	200b      	movs	r0, #11
 801bfaa:	e7b5      	b.n	801bf18 <rmw_validate_full_topic_name+0x28>
 801bfac:	2203      	movs	r2, #3
 801bfae:	602a      	str	r2, [r5, #0]
 801bfb0:	2e00      	cmp	r6, #0
 801bfb2:	d1f5      	bne.n	801bfa0 <rmw_validate_full_topic_name+0xb0>
 801bfb4:	e7b6      	b.n	801bf24 <rmw_validate_full_topic_name+0x34>
 801bfb6:	28f7      	cmp	r0, #247	@ 0xf7
 801bfb8:	d802      	bhi.n	801bfc0 <rmw_validate_full_topic_name+0xd0>
 801bfba:	2000      	movs	r0, #0
 801bfbc:	6028      	str	r0, [r5, #0]
 801bfbe:	e7ab      	b.n	801bf18 <rmw_validate_full_topic_name+0x28>
 801bfc0:	2307      	movs	r3, #7
 801bfc2:	602b      	str	r3, [r5, #0]
 801bfc4:	2e00      	cmp	r6, #0
 801bfc6:	d0ad      	beq.n	801bf24 <rmw_validate_full_topic_name+0x34>
 801bfc8:	23f6      	movs	r3, #246	@ 0xf6
 801bfca:	e7e9      	b.n	801bfa0 <rmw_validate_full_topic_name+0xb0>
 801bfcc:	2205      	movs	r2, #5
 801bfce:	602a      	str	r2, [r5, #0]
 801bfd0:	2e00      	cmp	r6, #0
 801bfd2:	d1e5      	bne.n	801bfa0 <rmw_validate_full_topic_name+0xb0>
 801bfd4:	e7a6      	b.n	801bf24 <rmw_validate_full_topic_name+0x34>
 801bfd6:	bf00      	nop
 801bfd8:	08022ad6 	.word	0x08022ad6

0801bfdc <rmw_validate_namespace_with_size>:
 801bfdc:	b340      	cbz	r0, 801c030 <rmw_validate_namespace_with_size+0x54>
 801bfde:	b570      	push	{r4, r5, r6, lr}
 801bfe0:	4614      	mov	r4, r2
 801bfe2:	b0c2      	sub	sp, #264	@ 0x108
 801bfe4:	b332      	cbz	r2, 801c034 <rmw_validate_namespace_with_size+0x58>
 801bfe6:	2901      	cmp	r1, #1
 801bfe8:	460d      	mov	r5, r1
 801bfea:	461e      	mov	r6, r3
 801bfec:	d102      	bne.n	801bff4 <rmw_validate_namespace_with_size+0x18>
 801bfee:	7803      	ldrb	r3, [r0, #0]
 801bff0:	2b2f      	cmp	r3, #47	@ 0x2f
 801bff2:	d012      	beq.n	801c01a <rmw_validate_namespace_with_size+0x3e>
 801bff4:	aa01      	add	r2, sp, #4
 801bff6:	4669      	mov	r1, sp
 801bff8:	f7ff ff7a 	bl	801bef0 <rmw_validate_full_topic_name>
 801bffc:	b978      	cbnz	r0, 801c01e <rmw_validate_namespace_with_size+0x42>
 801bffe:	9b00      	ldr	r3, [sp, #0]
 801c000:	b14b      	cbz	r3, 801c016 <rmw_validate_namespace_with_size+0x3a>
 801c002:	2b07      	cmp	r3, #7
 801c004:	d007      	beq.n	801c016 <rmw_validate_namespace_with_size+0x3a>
 801c006:	1e5a      	subs	r2, r3, #1
 801c008:	2a05      	cmp	r2, #5
 801c00a:	d82b      	bhi.n	801c064 <rmw_validate_namespace_with_size+0x88>
 801c00c:	e8df f002 	tbb	[pc, r2]
 801c010:	1e212427 	.word	0x1e212427
 801c014:	141b      	.short	0x141b
 801c016:	2df5      	cmp	r5, #245	@ 0xf5
 801c018:	d803      	bhi.n	801c022 <rmw_validate_namespace_with_size+0x46>
 801c01a:	2000      	movs	r0, #0
 801c01c:	6020      	str	r0, [r4, #0]
 801c01e:	b042      	add	sp, #264	@ 0x108
 801c020:	bd70      	pop	{r4, r5, r6, pc}
 801c022:	2307      	movs	r3, #7
 801c024:	6023      	str	r3, [r4, #0]
 801c026:	2e00      	cmp	r6, #0
 801c028:	d0f9      	beq.n	801c01e <rmw_validate_namespace_with_size+0x42>
 801c02a:	23f4      	movs	r3, #244	@ 0xf4
 801c02c:	6033      	str	r3, [r6, #0]
 801c02e:	e7f6      	b.n	801c01e <rmw_validate_namespace_with_size+0x42>
 801c030:	200b      	movs	r0, #11
 801c032:	4770      	bx	lr
 801c034:	200b      	movs	r0, #11
 801c036:	e7f2      	b.n	801c01e <rmw_validate_namespace_with_size+0x42>
 801c038:	2306      	movs	r3, #6
 801c03a:	6023      	str	r3, [r4, #0]
 801c03c:	2e00      	cmp	r6, #0
 801c03e:	d0ee      	beq.n	801c01e <rmw_validate_namespace_with_size+0x42>
 801c040:	9b01      	ldr	r3, [sp, #4]
 801c042:	6033      	str	r3, [r6, #0]
 801c044:	e7eb      	b.n	801c01e <rmw_validate_namespace_with_size+0x42>
 801c046:	2305      	movs	r3, #5
 801c048:	6023      	str	r3, [r4, #0]
 801c04a:	e7f7      	b.n	801c03c <rmw_validate_namespace_with_size+0x60>
 801c04c:	2304      	movs	r3, #4
 801c04e:	6023      	str	r3, [r4, #0]
 801c050:	e7f4      	b.n	801c03c <rmw_validate_namespace_with_size+0x60>
 801c052:	2303      	movs	r3, #3
 801c054:	6023      	str	r3, [r4, #0]
 801c056:	e7f1      	b.n	801c03c <rmw_validate_namespace_with_size+0x60>
 801c058:	2302      	movs	r3, #2
 801c05a:	6023      	str	r3, [r4, #0]
 801c05c:	e7ee      	b.n	801c03c <rmw_validate_namespace_with_size+0x60>
 801c05e:	2301      	movs	r3, #1
 801c060:	6023      	str	r3, [r4, #0]
 801c062:	e7eb      	b.n	801c03c <rmw_validate_namespace_with_size+0x60>
 801c064:	4a03      	ldr	r2, [pc, #12]	@ (801c074 <rmw_validate_namespace_with_size+0x98>)
 801c066:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c06a:	a802      	add	r0, sp, #8
 801c06c:	f7ff fcda 	bl	801ba24 <rcutils_snprintf>
 801c070:	2001      	movs	r0, #1
 801c072:	e7d4      	b.n	801c01e <rmw_validate_namespace_with_size+0x42>
 801c074:	08022404 	.word	0x08022404

0801c078 <rmw_validate_namespace>:
 801c078:	b168      	cbz	r0, 801c096 <rmw_validate_namespace+0x1e>
 801c07a:	b570      	push	{r4, r5, r6, lr}
 801c07c:	460d      	mov	r5, r1
 801c07e:	4616      	mov	r6, r2
 801c080:	4604      	mov	r4, r0
 801c082:	f7e4 f8af 	bl	80001e4 <strlen>
 801c086:	4633      	mov	r3, r6
 801c088:	4601      	mov	r1, r0
 801c08a:	462a      	mov	r2, r5
 801c08c:	4620      	mov	r0, r4
 801c08e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c092:	f7ff bfa3 	b.w	801bfdc <rmw_validate_namespace_with_size>
 801c096:	200b      	movs	r0, #11
 801c098:	4770      	bx	lr
 801c09a:	bf00      	nop

0801c09c <rmw_namespace_validation_result_string>:
 801c09c:	2807      	cmp	r0, #7
 801c09e:	bf9a      	itte	ls
 801c0a0:	4b02      	ldrls	r3, [pc, #8]	@ (801c0ac <rmw_namespace_validation_result_string+0x10>)
 801c0a2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801c0a6:	4802      	ldrhi	r0, [pc, #8]	@ (801c0b0 <rmw_namespace_validation_result_string+0x14>)
 801c0a8:	4770      	bx	lr
 801c0aa:	bf00      	nop
 801c0ac:	080225fc 	.word	0x080225fc
 801c0b0:	08022454 	.word	0x08022454

0801c0b4 <rmw_validate_node_name>:
 801c0b4:	2800      	cmp	r0, #0
 801c0b6:	d03b      	beq.n	801c130 <rmw_validate_node_name+0x7c>
 801c0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0bc:	460d      	mov	r5, r1
 801c0be:	2900      	cmp	r1, #0
 801c0c0:	d038      	beq.n	801c134 <rmw_validate_node_name+0x80>
 801c0c2:	4616      	mov	r6, r2
 801c0c4:	4604      	mov	r4, r0
 801c0c6:	f7e4 f88d 	bl	80001e4 <strlen>
 801c0ca:	b1e0      	cbz	r0, 801c106 <rmw_validate_node_name+0x52>
 801c0cc:	1e63      	subs	r3, r4, #1
 801c0ce:	eb03 0800 	add.w	r8, r3, r0
 801c0d2:	f1c4 0101 	rsb	r1, r4, #1
 801c0d6:	18cf      	adds	r7, r1, r3
 801c0d8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801c0dc:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 801c0e0:	f02e 0c20 	bic.w	ip, lr, #32
 801c0e4:	2a09      	cmp	r2, #9
 801c0e6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 801c0ea:	d914      	bls.n	801c116 <rmw_validate_node_name+0x62>
 801c0ec:	f1bc 0f19 	cmp.w	ip, #25
 801c0f0:	d911      	bls.n	801c116 <rmw_validate_node_name+0x62>
 801c0f2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801c0f6:	d00e      	beq.n	801c116 <rmw_validate_node_name+0x62>
 801c0f8:	2302      	movs	r3, #2
 801c0fa:	602b      	str	r3, [r5, #0]
 801c0fc:	b106      	cbz	r6, 801c100 <rmw_validate_node_name+0x4c>
 801c0fe:	6037      	str	r7, [r6, #0]
 801c100:	2000      	movs	r0, #0
 801c102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c106:	2301      	movs	r3, #1
 801c108:	602b      	str	r3, [r5, #0]
 801c10a:	2e00      	cmp	r6, #0
 801c10c:	d0f8      	beq.n	801c100 <rmw_validate_node_name+0x4c>
 801c10e:	2000      	movs	r0, #0
 801c110:	6030      	str	r0, [r6, #0]
 801c112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c116:	4543      	cmp	r3, r8
 801c118:	d1dd      	bne.n	801c0d6 <rmw_validate_node_name+0x22>
 801c11a:	7822      	ldrb	r2, [r4, #0]
 801c11c:	4b0d      	ldr	r3, [pc, #52]	@ (801c154 <rmw_validate_node_name+0xa0>)
 801c11e:	5cd3      	ldrb	r3, [r2, r3]
 801c120:	f013 0304 	ands.w	r3, r3, #4
 801c124:	d110      	bne.n	801c148 <rmw_validate_node_name+0x94>
 801c126:	28ff      	cmp	r0, #255	@ 0xff
 801c128:	d806      	bhi.n	801c138 <rmw_validate_node_name+0x84>
 801c12a:	602b      	str	r3, [r5, #0]
 801c12c:	4618      	mov	r0, r3
 801c12e:	e7e8      	b.n	801c102 <rmw_validate_node_name+0x4e>
 801c130:	200b      	movs	r0, #11
 801c132:	4770      	bx	lr
 801c134:	200b      	movs	r0, #11
 801c136:	e7e4      	b.n	801c102 <rmw_validate_node_name+0x4e>
 801c138:	2204      	movs	r2, #4
 801c13a:	602a      	str	r2, [r5, #0]
 801c13c:	2e00      	cmp	r6, #0
 801c13e:	d0df      	beq.n	801c100 <rmw_validate_node_name+0x4c>
 801c140:	22fe      	movs	r2, #254	@ 0xfe
 801c142:	6032      	str	r2, [r6, #0]
 801c144:	4618      	mov	r0, r3
 801c146:	e7dc      	b.n	801c102 <rmw_validate_node_name+0x4e>
 801c148:	2303      	movs	r3, #3
 801c14a:	602b      	str	r3, [r5, #0]
 801c14c:	2e00      	cmp	r6, #0
 801c14e:	d1de      	bne.n	801c10e <rmw_validate_node_name+0x5a>
 801c150:	e7d6      	b.n	801c100 <rmw_validate_node_name+0x4c>
 801c152:	bf00      	nop
 801c154:	08022ad6 	.word	0x08022ad6

0801c158 <rmw_node_name_validation_result_string>:
 801c158:	2804      	cmp	r0, #4
 801c15a:	bf9a      	itte	ls
 801c15c:	4b02      	ldrls	r3, [pc, #8]	@ (801c168 <rmw_node_name_validation_result_string+0x10>)
 801c15e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801c162:	4802      	ldrhi	r0, [pc, #8]	@ (801c16c <rmw_node_name_validation_result_string+0x14>)
 801c164:	4770      	bx	lr
 801c166:	bf00      	nop
 801c168:	08022708 	.word	0x08022708
 801c16c:	0802261c 	.word	0x0802261c

0801c170 <get_memory>:
 801c170:	4603      	mov	r3, r0
 801c172:	6840      	ldr	r0, [r0, #4]
 801c174:	b158      	cbz	r0, 801c18e <get_memory+0x1e>
 801c176:	6842      	ldr	r2, [r0, #4]
 801c178:	605a      	str	r2, [r3, #4]
 801c17a:	b10a      	cbz	r2, 801c180 <get_memory+0x10>
 801c17c:	2100      	movs	r1, #0
 801c17e:	6011      	str	r1, [r2, #0]
 801c180:	681a      	ldr	r2, [r3, #0]
 801c182:	6042      	str	r2, [r0, #4]
 801c184:	b102      	cbz	r2, 801c188 <get_memory+0x18>
 801c186:	6010      	str	r0, [r2, #0]
 801c188:	2200      	movs	r2, #0
 801c18a:	6002      	str	r2, [r0, #0]
 801c18c:	6018      	str	r0, [r3, #0]
 801c18e:	4770      	bx	lr

0801c190 <put_memory>:
 801c190:	680b      	ldr	r3, [r1, #0]
 801c192:	b10b      	cbz	r3, 801c198 <put_memory+0x8>
 801c194:	684a      	ldr	r2, [r1, #4]
 801c196:	605a      	str	r2, [r3, #4]
 801c198:	684a      	ldr	r2, [r1, #4]
 801c19a:	b102      	cbz	r2, 801c19e <put_memory+0xe>
 801c19c:	6013      	str	r3, [r2, #0]
 801c19e:	6803      	ldr	r3, [r0, #0]
 801c1a0:	428b      	cmp	r3, r1
 801c1a2:	6843      	ldr	r3, [r0, #4]
 801c1a4:	bf08      	it	eq
 801c1a6:	6002      	streq	r2, [r0, #0]
 801c1a8:	604b      	str	r3, [r1, #4]
 801c1aa:	b103      	cbz	r3, 801c1ae <put_memory+0x1e>
 801c1ac:	6019      	str	r1, [r3, #0]
 801c1ae:	2300      	movs	r3, #0
 801c1b0:	600b      	str	r3, [r1, #0]
 801c1b2:	6041      	str	r1, [r0, #4]
 801c1b4:	4770      	bx	lr
 801c1b6:	bf00      	nop

0801c1b8 <rmw_destroy_client>:
 801c1b8:	b570      	push	{r4, r5, r6, lr}
 801c1ba:	b128      	cbz	r0, 801c1c8 <rmw_destroy_client+0x10>
 801c1bc:	4604      	mov	r4, r0
 801c1be:	6800      	ldr	r0, [r0, #0]
 801c1c0:	460d      	mov	r5, r1
 801c1c2:	f7f8 ff3b 	bl	801503c <is_uxrce_rmw_identifier_valid>
 801c1c6:	b910      	cbnz	r0, 801c1ce <rmw_destroy_client+0x16>
 801c1c8:	2401      	movs	r4, #1
 801c1ca:	4620      	mov	r0, r4
 801c1cc:	bd70      	pop	{r4, r5, r6, pc}
 801c1ce:	6863      	ldr	r3, [r4, #4]
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	d0f9      	beq.n	801c1c8 <rmw_destroy_client+0x10>
 801c1d4:	2d00      	cmp	r5, #0
 801c1d6:	d0f7      	beq.n	801c1c8 <rmw_destroy_client+0x10>
 801c1d8:	6828      	ldr	r0, [r5, #0]
 801c1da:	f7f8 ff2f 	bl	801503c <is_uxrce_rmw_identifier_valid>
 801c1de:	2800      	cmp	r0, #0
 801c1e0:	d0f2      	beq.n	801c1c8 <rmw_destroy_client+0x10>
 801c1e2:	686e      	ldr	r6, [r5, #4]
 801c1e4:	2e00      	cmp	r6, #0
 801c1e6:	d0ef      	beq.n	801c1c8 <rmw_destroy_client+0x10>
 801c1e8:	6864      	ldr	r4, [r4, #4]
 801c1ea:	6932      	ldr	r2, [r6, #16]
 801c1ec:	6920      	ldr	r0, [r4, #16]
 801c1ee:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801c1f2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801c1f6:	6819      	ldr	r1, [r3, #0]
 801c1f8:	f002 fa46 	bl	801e688 <uxr_buffer_cancel_data>
 801c1fc:	4602      	mov	r2, r0
 801c1fe:	6920      	ldr	r0, [r4, #16]
 801c200:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801c204:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801c208:	f7f8 fe98 	bl	8014f3c <run_xrce_session>
 801c20c:	6920      	ldr	r0, [r4, #16]
 801c20e:	6932      	ldr	r2, [r6, #16]
 801c210:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801c214:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801c218:	6819      	ldr	r1, [r3, #0]
 801c21a:	f7f9 fe41 	bl	8015ea0 <uxr_buffer_delete_entity>
 801c21e:	4602      	mov	r2, r0
 801c220:	6920      	ldr	r0, [r4, #16]
 801c222:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801c226:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801c22a:	f7f8 fe87 	bl	8014f3c <run_xrce_session>
 801c22e:	2800      	cmp	r0, #0
 801c230:	4628      	mov	r0, r5
 801c232:	bf14      	ite	ne
 801c234:	2400      	movne	r4, #0
 801c236:	2402      	moveq	r4, #2
 801c238:	f7f8 fd68 	bl	8014d0c <rmw_uxrce_fini_client_memory>
 801c23c:	e7c5      	b.n	801c1ca <rmw_destroy_client+0x12>
 801c23e:	bf00      	nop

0801c240 <rmw_get_implementation_identifier>:
 801c240:	4b01      	ldr	r3, [pc, #4]	@ (801c248 <rmw_get_implementation_identifier+0x8>)
 801c242:	6818      	ldr	r0, [r3, #0]
 801c244:	4770      	bx	lr
 801c246:	bf00      	nop
 801c248:	08022734 	.word	0x08022734

0801c24c <rmw_init_options_init>:
 801c24c:	b084      	sub	sp, #16
 801c24e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c250:	b083      	sub	sp, #12
 801c252:	ad09      	add	r5, sp, #36	@ 0x24
 801c254:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 801c258:	b130      	cbz	r0, 801c268 <rmw_init_options_init+0x1c>
 801c25a:	4604      	mov	r4, r0
 801c25c:	4628      	mov	r0, r5
 801c25e:	f7f8 f953 	bl	8014508 <rcutils_allocator_is_valid>
 801c262:	b108      	cbz	r0, 801c268 <rmw_init_options_init+0x1c>
 801c264:	68a6      	ldr	r6, [r4, #8]
 801c266:	b12e      	cbz	r6, 801c274 <rmw_init_options_init+0x28>
 801c268:	200b      	movs	r0, #11
 801c26a:	b003      	add	sp, #12
 801c26c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c270:	b004      	add	sp, #16
 801c272:	4770      	bx	lr
 801c274:	2200      	movs	r2, #0
 801c276:	2300      	movs	r3, #0
 801c278:	e9c4 2300 	strd	r2, r3, [r4]
 801c27c:	4b22      	ldr	r3, [pc, #136]	@ (801c308 <rmw_init_options_init+0xbc>)
 801c27e:	f8df e098 	ldr.w	lr, [pc, #152]	@ 801c318 <rmw_init_options_init+0xcc>
 801c282:	681b      	ldr	r3, [r3, #0]
 801c284:	60a3      	str	r3, [r4, #8]
 801c286:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801c288:	f104 0c20 	add.w	ip, r4, #32
 801c28c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c290:	466f      	mov	r7, sp
 801c292:	682b      	ldr	r3, [r5, #0]
 801c294:	f8cc 3000 	str.w	r3, [ip]
 801c298:	4638      	mov	r0, r7
 801c29a:	f8c4 e01c 	str.w	lr, [r4, #28]
 801c29e:	60e6      	str	r6, [r4, #12]
 801c2a0:	f7ff fd76 	bl	801bd90 <rmw_get_default_security_options>
 801c2a4:	e897 0003 	ldmia.w	r7, {r0, r1}
 801c2a8:	f104 0310 	add.w	r3, r4, #16
 801c2ac:	e883 0003 	stmia.w	r3, {r0, r1}
 801c2b0:	2203      	movs	r2, #3
 801c2b2:	4816      	ldr	r0, [pc, #88]	@ (801c30c <rmw_init_options_init+0xc0>)
 801c2b4:	4916      	ldr	r1, [pc, #88]	@ (801c310 <rmw_init_options_init+0xc4>)
 801c2b6:	7626      	strb	r6, [r4, #24]
 801c2b8:	f7f8 fc68 	bl	8014b8c <rmw_uxrce_init_init_options_impl_memory>
 801c2bc:	4813      	ldr	r0, [pc, #76]	@ (801c30c <rmw_init_options_init+0xc0>)
 801c2be:	f7ff ff57 	bl	801c170 <get_memory>
 801c2c2:	b1f0      	cbz	r0, 801c302 <rmw_init_options_init+0xb6>
 801c2c4:	4a13      	ldr	r2, [pc, #76]	@ (801c314 <rmw_init_options_init+0xc8>)
 801c2c6:	6883      	ldr	r3, [r0, #8]
 801c2c8:	6851      	ldr	r1, [r2, #4]
 801c2ca:	7810      	ldrb	r0, [r2, #0]
 801c2cc:	6363      	str	r3, [r4, #52]	@ 0x34
 801c2ce:	7418      	strb	r0, [r3, #16]
 801c2d0:	6159      	str	r1, [r3, #20]
 801c2d2:	68d1      	ldr	r1, [r2, #12]
 801c2d4:	61d9      	str	r1, [r3, #28]
 801c2d6:	6911      	ldr	r1, [r2, #16]
 801c2d8:	6219      	str	r1, [r3, #32]
 801c2da:	6951      	ldr	r1, [r2, #20]
 801c2dc:	6892      	ldr	r2, [r2, #8]
 801c2de:	619a      	str	r2, [r3, #24]
 801c2e0:	6259      	str	r1, [r3, #36]	@ 0x24
 801c2e2:	f7fb fa39 	bl	8017758 <uxr_nanos>
 801c2e6:	f003 fd5d 	bl	801fda4 <srand>
 801c2ea:	f003 fd89 	bl	801fe00 <rand>
 801c2ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c2f0:	6298      	str	r0, [r3, #40]	@ 0x28
 801c2f2:	2800      	cmp	r0, #0
 801c2f4:	d0f9      	beq.n	801c2ea <rmw_init_options_init+0x9e>
 801c2f6:	2000      	movs	r0, #0
 801c2f8:	b003      	add	sp, #12
 801c2fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801c2fe:	b004      	add	sp, #16
 801c300:	4770      	bx	lr
 801c302:	2001      	movs	r0, #1
 801c304:	e7b1      	b.n	801c26a <rmw_init_options_init+0x1e>
 801c306:	bf00      	nop
 801c308:	08022734 	.word	0x08022734
 801c30c:	200163b4 	.word	0x200163b4
 801c310:	20011c50 	.word	0x20011c50
 801c314:	20011adc 	.word	0x20011adc
 801c318:	0802219c 	.word	0x0802219c

0801c31c <rmw_init_options_copy>:
 801c31c:	b570      	push	{r4, r5, r6, lr}
 801c31e:	b158      	cbz	r0, 801c338 <rmw_init_options_copy+0x1c>
 801c320:	460d      	mov	r5, r1
 801c322:	b149      	cbz	r1, 801c338 <rmw_init_options_copy+0x1c>
 801c324:	4604      	mov	r4, r0
 801c326:	6880      	ldr	r0, [r0, #8]
 801c328:	b120      	cbz	r0, 801c334 <rmw_init_options_copy+0x18>
 801c32a:	4b1e      	ldr	r3, [pc, #120]	@ (801c3a4 <rmw_init_options_copy+0x88>)
 801c32c:	6819      	ldr	r1, [r3, #0]
 801c32e:	f7e3 ff4f 	bl	80001d0 <strcmp>
 801c332:	bb90      	cbnz	r0, 801c39a <rmw_init_options_copy+0x7e>
 801c334:	68ab      	ldr	r3, [r5, #8]
 801c336:	b113      	cbz	r3, 801c33e <rmw_init_options_copy+0x22>
 801c338:	250b      	movs	r5, #11
 801c33a:	4628      	mov	r0, r5
 801c33c:	bd70      	pop	{r4, r5, r6, pc}
 801c33e:	4623      	mov	r3, r4
 801c340:	462a      	mov	r2, r5
 801c342:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 801c346:	f8d3 c000 	ldr.w	ip, [r3]
 801c34a:	6858      	ldr	r0, [r3, #4]
 801c34c:	6899      	ldr	r1, [r3, #8]
 801c34e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801c352:	f8c2 e00c 	str.w	lr, [r2, #12]
 801c356:	3310      	adds	r3, #16
 801c358:	42b3      	cmp	r3, r6
 801c35a:	f8c2 c000 	str.w	ip, [r2]
 801c35e:	6050      	str	r0, [r2, #4]
 801c360:	6091      	str	r1, [r2, #8]
 801c362:	f102 0210 	add.w	r2, r2, #16
 801c366:	d1ee      	bne.n	801c346 <rmw_init_options_copy+0x2a>
 801c368:	6819      	ldr	r1, [r3, #0]
 801c36a:	685b      	ldr	r3, [r3, #4]
 801c36c:	480e      	ldr	r0, [pc, #56]	@ (801c3a8 <rmw_init_options_copy+0x8c>)
 801c36e:	6053      	str	r3, [r2, #4]
 801c370:	6011      	str	r1, [r2, #0]
 801c372:	f7ff fefd 	bl	801c170 <get_memory>
 801c376:	b198      	cbz	r0, 801c3a0 <rmw_init_options_copy+0x84>
 801c378:	6883      	ldr	r3, [r0, #8]
 801c37a:	636b      	str	r3, [r5, #52]	@ 0x34
 801c37c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801c37e:	f102 0c10 	add.w	ip, r2, #16
 801c382:	f103 0410 	add.w	r4, r3, #16
 801c386:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801c38a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801c38c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801c390:	2500      	movs	r5, #0
 801c392:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801c396:	4628      	mov	r0, r5
 801c398:	bd70      	pop	{r4, r5, r6, pc}
 801c39a:	250c      	movs	r5, #12
 801c39c:	4628      	mov	r0, r5
 801c39e:	bd70      	pop	{r4, r5, r6, pc}
 801c3a0:	2501      	movs	r5, #1
 801c3a2:	e7ca      	b.n	801c33a <rmw_init_options_copy+0x1e>
 801c3a4:	08022734 	.word	0x08022734
 801c3a8:	200163b4 	.word	0x200163b4

0801c3ac <rmw_init_options_fini>:
 801c3ac:	2800      	cmp	r0, #0
 801c3ae:	d03d      	beq.n	801c42c <rmw_init_options_fini+0x80>
 801c3b0:	b510      	push	{r4, lr}
 801c3b2:	4604      	mov	r4, r0
 801c3b4:	b08e      	sub	sp, #56	@ 0x38
 801c3b6:	3020      	adds	r0, #32
 801c3b8:	f7f8 f8a6 	bl	8014508 <rcutils_allocator_is_valid>
 801c3bc:	b360      	cbz	r0, 801c418 <rmw_init_options_fini+0x6c>
 801c3be:	68a0      	ldr	r0, [r4, #8]
 801c3c0:	b120      	cbz	r0, 801c3cc <rmw_init_options_fini+0x20>
 801c3c2:	4b1c      	ldr	r3, [pc, #112]	@ (801c434 <rmw_init_options_fini+0x88>)
 801c3c4:	6819      	ldr	r1, [r3, #0]
 801c3c6:	f7e3 ff03 	bl	80001d0 <strcmp>
 801c3ca:	bb68      	cbnz	r0, 801c428 <rmw_init_options_fini+0x7c>
 801c3cc:	4b1a      	ldr	r3, [pc, #104]	@ (801c438 <rmw_init_options_fini+0x8c>)
 801c3ce:	6819      	ldr	r1, [r3, #0]
 801c3d0:	b331      	cbz	r1, 801c420 <rmw_init_options_fini+0x74>
 801c3d2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801c3d4:	e001      	b.n	801c3da <rmw_init_options_fini+0x2e>
 801c3d6:	6849      	ldr	r1, [r1, #4]
 801c3d8:	b311      	cbz	r1, 801c420 <rmw_init_options_fini+0x74>
 801c3da:	688b      	ldr	r3, [r1, #8]
 801c3dc:	429a      	cmp	r2, r3
 801c3de:	d1fa      	bne.n	801c3d6 <rmw_init_options_fini+0x2a>
 801c3e0:	4815      	ldr	r0, [pc, #84]	@ (801c438 <rmw_init_options_fini+0x8c>)
 801c3e2:	f7ff fed5 	bl	801c190 <put_memory>
 801c3e6:	4668      	mov	r0, sp
 801c3e8:	f7ff fcc2 	bl	801bd70 <rmw_get_zero_initialized_init_options>
 801c3ec:	46ee      	mov	lr, sp
 801c3ee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c3f2:	46a4      	mov	ip, r4
 801c3f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c3f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c3fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c400:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c404:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c408:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801c40c:	e88c 0003 	stmia.w	ip, {r0, r1}
 801c410:	2300      	movs	r3, #0
 801c412:	4618      	mov	r0, r3
 801c414:	b00e      	add	sp, #56	@ 0x38
 801c416:	bd10      	pop	{r4, pc}
 801c418:	230b      	movs	r3, #11
 801c41a:	4618      	mov	r0, r3
 801c41c:	b00e      	add	sp, #56	@ 0x38
 801c41e:	bd10      	pop	{r4, pc}
 801c420:	2301      	movs	r3, #1
 801c422:	4618      	mov	r0, r3
 801c424:	b00e      	add	sp, #56	@ 0x38
 801c426:	bd10      	pop	{r4, pc}
 801c428:	230c      	movs	r3, #12
 801c42a:	e7f2      	b.n	801c412 <rmw_init_options_fini+0x66>
 801c42c:	230b      	movs	r3, #11
 801c42e:	4618      	mov	r0, r3
 801c430:	4770      	bx	lr
 801c432:	bf00      	nop
 801c434:	08022734 	.word	0x08022734
 801c438:	200163b4 	.word	0x200163b4

0801c43c <rmw_init>:
 801c43c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c440:	b083      	sub	sp, #12
 801c442:	2800      	cmp	r0, #0
 801c444:	f000 80d3 	beq.w	801c5ee <rmw_init+0x1b2>
 801c448:	460e      	mov	r6, r1
 801c44a:	2900      	cmp	r1, #0
 801c44c:	f000 80cf 	beq.w	801c5ee <rmw_init+0x1b2>
 801c450:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801c452:	4605      	mov	r5, r0
 801c454:	2b00      	cmp	r3, #0
 801c456:	f000 80ca 	beq.w	801c5ee <rmw_init+0x1b2>
 801c45a:	4b78      	ldr	r3, [pc, #480]	@ (801c63c <rmw_init+0x200>)
 801c45c:	6880      	ldr	r0, [r0, #8]
 801c45e:	681f      	ldr	r7, [r3, #0]
 801c460:	b128      	cbz	r0, 801c46e <rmw_init+0x32>
 801c462:	4639      	mov	r1, r7
 801c464:	f7e3 feb4 	bl	80001d0 <strcmp>
 801c468:	2800      	cmp	r0, #0
 801c46a:	f040 80ca 	bne.w	801c602 <rmw_init+0x1c6>
 801c46e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c472:	4c73      	ldr	r4, [pc, #460]	@ (801c640 <rmw_init+0x204>)
 801c474:	4973      	ldr	r1, [pc, #460]	@ (801c644 <rmw_init+0x208>)
 801c476:	4874      	ldr	r0, [pc, #464]	@ (801c648 <rmw_init+0x20c>)
 801c478:	60b7      	str	r7, [r6, #8]
 801c47a:	e9c6 2300 	strd	r2, r3, [r6]
 801c47e:	68eb      	ldr	r3, [r5, #12]
 801c480:	64b3      	str	r3, [r6, #72]	@ 0x48
 801c482:	2201      	movs	r2, #1
 801c484:	f7f8 fb22 	bl	8014acc <rmw_uxrce_init_session_memory>
 801c488:	4620      	mov	r0, r4
 801c48a:	4970      	ldr	r1, [pc, #448]	@ (801c64c <rmw_init+0x210>)
 801c48c:	2204      	movs	r2, #4
 801c48e:	f7f8 fb5d 	bl	8014b4c <rmw_uxrce_init_static_input_buffer_memory>
 801c492:	f04f 0800 	mov.w	r8, #0
 801c496:	486c      	ldr	r0, [pc, #432]	@ (801c648 <rmw_init+0x20c>)
 801c498:	f884 800d 	strb.w	r8, [r4, #13]
 801c49c:	f7ff fe68 	bl	801c170 <get_memory>
 801c4a0:	2800      	cmp	r0, #0
 801c4a2:	f000 80a9 	beq.w	801c5f8 <rmw_init+0x1bc>
 801c4a6:	6884      	ldr	r4, [r0, #8]
 801c4a8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 801c4aa:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 801c4ac:	f890 c010 	ldrb.w	ip, [r0, #16]
 801c4b0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 801c4b4:	9101      	str	r1, [sp, #4]
 801c4b6:	6a00      	ldr	r0, [r0, #32]
 801c4b8:	9000      	str	r0, [sp, #0]
 801c4ba:	f104 0910 	add.w	r9, r4, #16
 801c4be:	4661      	mov	r1, ip
 801c4c0:	4648      	mov	r0, r9
 801c4c2:	f001 fb2b 	bl	801db1c <uxr_set_custom_transport_callbacks>
 801c4c6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 801c4ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801c4ce:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 801c4d2:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 801c4d6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 801c4da:	495d      	ldr	r1, [pc, #372]	@ (801c650 <rmw_init+0x214>)
 801c4dc:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 801c4e0:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 801c4e4:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 801c4e8:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 801c4ec:	4859      	ldr	r0, [pc, #356]	@ (801c654 <rmw_init+0x218>)
 801c4ee:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 801c4f2:	2201      	movs	r2, #1
 801c4f4:	64f4      	str	r4, [r6, #76]	@ 0x4c
 801c4f6:	f7f8 fac9 	bl	8014a8c <rmw_uxrce_init_node_memory>
 801c4fa:	4957      	ldr	r1, [pc, #348]	@ (801c658 <rmw_init+0x21c>)
 801c4fc:	4857      	ldr	r0, [pc, #348]	@ (801c65c <rmw_init+0x220>)
 801c4fe:	2205      	movs	r2, #5
 801c500:	f7f8 faa4 	bl	8014a4c <rmw_uxrce_init_subscription_memory>
 801c504:	4956      	ldr	r1, [pc, #344]	@ (801c660 <rmw_init+0x224>)
 801c506:	4857      	ldr	r0, [pc, #348]	@ (801c664 <rmw_init+0x228>)
 801c508:	220a      	movs	r2, #10
 801c50a:	f7f8 fa7f 	bl	8014a0c <rmw_uxrce_init_publisher_memory>
 801c50e:	4956      	ldr	r1, [pc, #344]	@ (801c668 <rmw_init+0x22c>)
 801c510:	4856      	ldr	r0, [pc, #344]	@ (801c66c <rmw_init+0x230>)
 801c512:	2201      	movs	r2, #1
 801c514:	f7f8 fa3a 	bl	801498c <rmw_uxrce_init_service_memory>
 801c518:	4955      	ldr	r1, [pc, #340]	@ (801c670 <rmw_init+0x234>)
 801c51a:	4856      	ldr	r0, [pc, #344]	@ (801c674 <rmw_init+0x238>)
 801c51c:	2201      	movs	r2, #1
 801c51e:	f7f8 fa55 	bl	80149cc <rmw_uxrce_init_client_memory>
 801c522:	4955      	ldr	r1, [pc, #340]	@ (801c678 <rmw_init+0x23c>)
 801c524:	4855      	ldr	r0, [pc, #340]	@ (801c67c <rmw_init+0x240>)
 801c526:	220f      	movs	r2, #15
 801c528:	f7f8 faf0 	bl	8014b0c <rmw_uxrce_init_topic_memory>
 801c52c:	4954      	ldr	r1, [pc, #336]	@ (801c680 <rmw_init+0x244>)
 801c52e:	4855      	ldr	r0, [pc, #340]	@ (801c684 <rmw_init+0x248>)
 801c530:	2203      	movs	r2, #3
 801c532:	f7f8 fb2b 	bl	8014b8c <rmw_uxrce_init_init_options_impl_memory>
 801c536:	4954      	ldr	r1, [pc, #336]	@ (801c688 <rmw_init+0x24c>)
 801c538:	4854      	ldr	r0, [pc, #336]	@ (801c68c <rmw_init+0x250>)
 801c53a:	2204      	movs	r2, #4
 801c53c:	f7f8 fb46 	bl	8014bcc <rmw_uxrce_init_wait_set_memory>
 801c540:	4953      	ldr	r1, [pc, #332]	@ (801c690 <rmw_init+0x254>)
 801c542:	4854      	ldr	r0, [pc, #336]	@ (801c694 <rmw_init+0x258>)
 801c544:	2204      	movs	r2, #4
 801c546:	f7f8 fb61 	bl	8014c0c <rmw_uxrce_init_guard_condition_memory>
 801c54a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 801c54c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 801c54e:	4642      	mov	r2, r8
 801c550:	f000 fda6 	bl	801d0a0 <rmw_uxrce_transport_init>
 801c554:	4607      	mov	r7, r0
 801c556:	2800      	cmp	r0, #0
 801c558:	d158      	bne.n	801c60c <rmw_init+0x1d0>
 801c55a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 801c55c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 801c560:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c562:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 801c566:	4628      	mov	r0, r5
 801c568:	f7f9 ff5a 	bl	8016420 <uxr_init_session>
 801c56c:	494a      	ldr	r1, [pc, #296]	@ (801c698 <rmw_init+0x25c>)
 801c56e:	4622      	mov	r2, r4
 801c570:	4628      	mov	r0, r5
 801c572:	f7f9 ff79 	bl	8016468 <uxr_set_topic_callback>
 801c576:	4949      	ldr	r1, [pc, #292]	@ (801c69c <rmw_init+0x260>)
 801c578:	463a      	mov	r2, r7
 801c57a:	4628      	mov	r0, r5
 801c57c:	f7f9 ff70 	bl	8016460 <uxr_set_status_callback>
 801c580:	4947      	ldr	r1, [pc, #284]	@ (801c6a0 <rmw_init+0x264>)
 801c582:	463a      	mov	r2, r7
 801c584:	4628      	mov	r0, r5
 801c586:	f7f9 ff73 	bl	8016470 <uxr_set_request_callback>
 801c58a:	4946      	ldr	r1, [pc, #280]	@ (801c6a4 <rmw_init+0x268>)
 801c58c:	463a      	mov	r2, r7
 801c58e:	4628      	mov	r0, r5
 801c590:	f7f9 ff72 	bl	8016478 <uxr_set_reply_callback>
 801c594:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801c598:	2304      	movs	r3, #4
 801c59a:	0092      	lsls	r2, r2, #2
 801c59c:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 801c5a0:	4628      	mov	r0, r5
 801c5a2:	f7f9 ffa7 	bl	80164f4 <uxr_create_input_reliable_stream>
 801c5a6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801c5aa:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 801c5ae:	0092      	lsls	r2, r2, #2
 801c5b0:	2304      	movs	r3, #4
 801c5b2:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 801c5b6:	4628      	mov	r0, r5
 801c5b8:	f7f9 ff74 	bl	80164a4 <uxr_create_output_reliable_stream>
 801c5bc:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 801c5c0:	4628      	mov	r0, r5
 801c5c2:	f7f9 ff91 	bl	80164e8 <uxr_create_input_best_effort_stream>
 801c5c6:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 801c5ca:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 801c5ce:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 801c5d2:	3114      	adds	r1, #20
 801c5d4:	4628      	mov	r0, r5
 801c5d6:	f7f9 ff53 	bl	8016480 <uxr_create_output_best_effort_stream>
 801c5da:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 801c5de:	4628      	mov	r0, r5
 801c5e0:	f7fa fcde 	bl	8016fa0 <uxr_create_session>
 801c5e4:	b1f8      	cbz	r0, 801c626 <rmw_init+0x1ea>
 801c5e6:	4638      	mov	r0, r7
 801c5e8:	b003      	add	sp, #12
 801c5ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c5ee:	270b      	movs	r7, #11
 801c5f0:	4638      	mov	r0, r7
 801c5f2:	b003      	add	sp, #12
 801c5f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c5f8:	2701      	movs	r7, #1
 801c5fa:	4638      	mov	r0, r7
 801c5fc:	b003      	add	sp, #12
 801c5fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c602:	270c      	movs	r7, #12
 801c604:	4638      	mov	r0, r7
 801c606:	b003      	add	sp, #12
 801c608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c60c:	4648      	mov	r0, r9
 801c60e:	f001 fac7 	bl	801dba0 <uxr_close_custom_transport>
 801c612:	480d      	ldr	r0, [pc, #52]	@ (801c648 <rmw_init+0x20c>)
 801c614:	4621      	mov	r1, r4
 801c616:	f7ff fdbb 	bl	801c190 <put_memory>
 801c61a:	4638      	mov	r0, r7
 801c61c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 801c620:	b003      	add	sp, #12
 801c622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c626:	4648      	mov	r0, r9
 801c628:	f001 faba 	bl	801dba0 <uxr_close_custom_transport>
 801c62c:	4806      	ldr	r0, [pc, #24]	@ (801c648 <rmw_init+0x20c>)
 801c62e:	4621      	mov	r1, r4
 801c630:	f7ff fdae 	bl	801c190 <put_memory>
 801c634:	64f7      	str	r7, [r6, #76]	@ 0x4c
 801c636:	2701      	movs	r7, #1
 801c638:	e7d5      	b.n	801c5e6 <rmw_init+0x1aa>
 801c63a:	bf00      	nop
 801c63c:	08022734 	.word	0x08022734
 801c640:	20016404 	.word	0x20016404
 801c644:	200126b0 	.word	0x200126b0
 801c648:	200163f4 	.word	0x200163f4
 801c64c:	20013c58 	.word	0x20013c58
 801c650:	20011cd4 	.word	0x20011cd4
 801c654:	200163c4 	.word	0x200163c4
 801c658:	20015d58 	.word	0x20015d58
 801c65c:	20016414 	.word	0x20016414
 801c660:	20011d78 	.word	0x20011d78
 801c664:	200163d4 	.word	0x200163d4
 801c668:	200125e8 	.word	0x200125e8
 801c66c:	200163e4 	.word	0x200163e4
 801c670:	20011b08 	.word	0x20011b08
 801c674:	20011af8 	.word	0x20011af8
 801c678:	20016190 	.word	0x20016190
 801c67c:	20016424 	.word	0x20016424
 801c680:	20011c50 	.word	0x20011c50
 801c684:	200163b4 	.word	0x200163b4
 801c688:	20016334 	.word	0x20016334
 801c68c:	20016434 	.word	0x20016434
 801c690:	20011bd0 	.word	0x20011bd0
 801c694:	200163a4 	.word	0x200163a4
 801c698:	0801f869 	.word	0x0801f869
 801c69c:	0801f861 	.word	0x0801f861
 801c6a0:	0801f901 	.word	0x0801f901
 801c6a4:	0801f99d 	.word	0x0801f99d

0801c6a8 <rmw_context_fini>:
 801c6a8:	4b17      	ldr	r3, [pc, #92]	@ (801c708 <rmw_context_fini+0x60>)
 801c6aa:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 801c6ac:	b570      	push	{r4, r5, r6, lr}
 801c6ae:	681c      	ldr	r4, [r3, #0]
 801c6b0:	4605      	mov	r5, r0
 801c6b2:	b334      	cbz	r4, 801c702 <rmw_context_fini+0x5a>
 801c6b4:	2600      	movs	r6, #0
 801c6b6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801c6ba:	6902      	ldr	r2, [r0, #16]
 801c6bc:	428a      	cmp	r2, r1
 801c6be:	d018      	beq.n	801c6f2 <rmw_context_fini+0x4a>
 801c6c0:	2c00      	cmp	r4, #0
 801c6c2:	d1f8      	bne.n	801c6b6 <rmw_context_fini+0xe>
 801c6c4:	b189      	cbz	r1, 801c6ea <rmw_context_fini+0x42>
 801c6c6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 801c6ca:	789b      	ldrb	r3, [r3, #2]
 801c6cc:	2b01      	cmp	r3, #1
 801c6ce:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 801c6d2:	bf14      	ite	ne
 801c6d4:	210a      	movne	r1, #10
 801c6d6:	2100      	moveq	r1, #0
 801c6d8:	f7fa fc3a 	bl	8016f50 <uxr_delete_session_retries>
 801c6dc:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801c6de:	f7f8 fab5 	bl	8014c4c <rmw_uxrce_fini_session_memory>
 801c6e2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 801c6e4:	3010      	adds	r0, #16
 801c6e6:	f001 fa5b 	bl	801dba0 <uxr_close_custom_transport>
 801c6ea:	2300      	movs	r3, #0
 801c6ec:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801c6ee:	4630      	mov	r0, r6
 801c6f0:	bd70      	pop	{r4, r5, r6, pc}
 801c6f2:	3018      	adds	r0, #24
 801c6f4:	f000 f922 	bl	801c93c <rmw_destroy_node>
 801c6f8:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801c6fa:	4606      	mov	r6, r0
 801c6fc:	2c00      	cmp	r4, #0
 801c6fe:	d1da      	bne.n	801c6b6 <rmw_context_fini+0xe>
 801c700:	e7e0      	b.n	801c6c4 <rmw_context_fini+0x1c>
 801c702:	4626      	mov	r6, r4
 801c704:	e7de      	b.n	801c6c4 <rmw_context_fini+0x1c>
 801c706:	bf00      	nop
 801c708:	200163c4 	.word	0x200163c4

0801c70c <create_topic>:
 801c70c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c710:	4605      	mov	r5, r0
 801c712:	b084      	sub	sp, #16
 801c714:	482c      	ldr	r0, [pc, #176]	@ (801c7c8 <create_topic+0xbc>)
 801c716:	460f      	mov	r7, r1
 801c718:	4616      	mov	r6, r2
 801c71a:	f7ff fd29 	bl	801c170 <get_memory>
 801c71e:	4604      	mov	r4, r0
 801c720:	2800      	cmp	r0, #0
 801c722:	d038      	beq.n	801c796 <create_topic+0x8a>
 801c724:	692b      	ldr	r3, [r5, #16]
 801c726:	6884      	ldr	r4, [r0, #8]
 801c728:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 801c7d0 <create_topic+0xc4>
 801c72c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c730:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801c734:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801c738:	1c42      	adds	r2, r0, #1
 801c73a:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 801c73e:	2102      	movs	r1, #2
 801c740:	f7f9 fdb0 	bl	80162a4 <uxr_object_id>
 801c744:	223c      	movs	r2, #60	@ 0x3c
 801c746:	6120      	str	r0, [r4, #16]
 801c748:	4641      	mov	r1, r8
 801c74a:	4638      	mov	r0, r7
 801c74c:	f7f8 fc5c 	bl	8015008 <generate_topic_name>
 801c750:	4607      	mov	r7, r0
 801c752:	b320      	cbz	r0, 801c79e <create_topic+0x92>
 801c754:	4f1d      	ldr	r7, [pc, #116]	@ (801c7cc <create_topic+0xc0>)
 801c756:	4630      	mov	r0, r6
 801c758:	2264      	movs	r2, #100	@ 0x64
 801c75a:	4639      	mov	r1, r7
 801c75c:	f7f8 fc24 	bl	8014fa8 <generate_type_name>
 801c760:	4606      	mov	r6, r0
 801c762:	b320      	cbz	r0, 801c7ae <create_topic+0xa2>
 801c764:	6928      	ldr	r0, [r5, #16]
 801c766:	2306      	movs	r3, #6
 801c768:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801c76c:	f8cd 8000 	str.w	r8, [sp]
 801c770:	e9cd 7301 	strd	r7, r3, [sp, #4]
 801c774:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801c778:	696b      	ldr	r3, [r5, #20]
 801c77a:	6811      	ldr	r1, [r2, #0]
 801c77c:	6922      	ldr	r2, [r4, #16]
 801c77e:	f7f9 fc0d 	bl	8015f9c <uxr_buffer_create_topic_bin>
 801c782:	4602      	mov	r2, r0
 801c784:	6928      	ldr	r0, [r5, #16]
 801c786:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801c78a:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801c78e:	f7f8 fbd5 	bl	8014f3c <run_xrce_session>
 801c792:	4605      	mov	r5, r0
 801c794:	b198      	cbz	r0, 801c7be <create_topic+0xb2>
 801c796:	4620      	mov	r0, r4
 801c798:	b004      	add	sp, #16
 801c79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c79e:	4620      	mov	r0, r4
 801c7a0:	f7f8 faca 	bl	8014d38 <rmw_uxrce_fini_topic_memory>
 801c7a4:	463c      	mov	r4, r7
 801c7a6:	4620      	mov	r0, r4
 801c7a8:	b004      	add	sp, #16
 801c7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7ae:	4620      	mov	r0, r4
 801c7b0:	f7f8 fac2 	bl	8014d38 <rmw_uxrce_fini_topic_memory>
 801c7b4:	4634      	mov	r4, r6
 801c7b6:	4620      	mov	r0, r4
 801c7b8:	b004      	add	sp, #16
 801c7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c7be:	4620      	mov	r0, r4
 801c7c0:	f7f8 faba 	bl	8014d38 <rmw_uxrce_fini_topic_memory>
 801c7c4:	462c      	mov	r4, r5
 801c7c6:	e7e6      	b.n	801c796 <create_topic+0x8a>
 801c7c8:	20016424 	.word	0x20016424
 801c7cc:	20016510 	.word	0x20016510
 801c7d0:	200164d4 	.word	0x200164d4

0801c7d4 <destroy_topic>:
 801c7d4:	b538      	push	{r3, r4, r5, lr}
 801c7d6:	6985      	ldr	r5, [r0, #24]
 801c7d8:	b1d5      	cbz	r5, 801c810 <destroy_topic+0x3c>
 801c7da:	4604      	mov	r4, r0
 801c7dc:	6928      	ldr	r0, [r5, #16]
 801c7de:	6922      	ldr	r2, [r4, #16]
 801c7e0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801c7e4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801c7e8:	6819      	ldr	r1, [r3, #0]
 801c7ea:	f7f9 fb59 	bl	8015ea0 <uxr_buffer_delete_entity>
 801c7ee:	4602      	mov	r2, r0
 801c7f0:	6928      	ldr	r0, [r5, #16]
 801c7f2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801c7f6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801c7fa:	f7f8 fb9f 	bl	8014f3c <run_xrce_session>
 801c7fe:	2800      	cmp	r0, #0
 801c800:	4620      	mov	r0, r4
 801c802:	bf14      	ite	ne
 801c804:	2400      	movne	r4, #0
 801c806:	2402      	moveq	r4, #2
 801c808:	f7f8 fa96 	bl	8014d38 <rmw_uxrce_fini_topic_memory>
 801c80c:	4620      	mov	r0, r4
 801c80e:	bd38      	pop	{r3, r4, r5, pc}
 801c810:	2401      	movs	r4, #1
 801c812:	4620      	mov	r0, r4
 801c814:	bd38      	pop	{r3, r4, r5, pc}
 801c816:	bf00      	nop

0801c818 <create_node>:
 801c818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c81c:	b083      	sub	sp, #12
 801c81e:	2b00      	cmp	r3, #0
 801c820:	d05f      	beq.n	801c8e2 <create_node+0xca>
 801c822:	4606      	mov	r6, r0
 801c824:	4835      	ldr	r0, [pc, #212]	@ (801c8fc <create_node+0xe4>)
 801c826:	460f      	mov	r7, r1
 801c828:	4690      	mov	r8, r2
 801c82a:	461d      	mov	r5, r3
 801c82c:	f7ff fca0 	bl	801c170 <get_memory>
 801c830:	2800      	cmp	r0, #0
 801c832:	d056      	beq.n	801c8e2 <create_node+0xca>
 801c834:	6884      	ldr	r4, [r0, #8]
 801c836:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 801c838:	6123      	str	r3, [r4, #16]
 801c83a:	f7ff fd01 	bl	801c240 <rmw_get_implementation_identifier>
 801c83e:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 801c842:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801c846:	f8c4 9020 	str.w	r9, [r4, #32]
 801c84a:	4630      	mov	r0, r6
 801c84c:	f7e3 fcca 	bl	80001e4 <strlen>
 801c850:	1c42      	adds	r2, r0, #1
 801c852:	2a3c      	cmp	r2, #60	@ 0x3c
 801c854:	f104 0518 	add.w	r5, r4, #24
 801c858:	d840      	bhi.n	801c8dc <create_node+0xc4>
 801c85a:	4648      	mov	r0, r9
 801c85c:	4631      	mov	r1, r6
 801c85e:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 801c862:	f003 ff74 	bl	802074e <memcpy>
 801c866:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 801c86a:	4638      	mov	r0, r7
 801c86c:	f7e3 fcba 	bl	80001e4 <strlen>
 801c870:	1c42      	adds	r2, r0, #1
 801c872:	2a3c      	cmp	r2, #60	@ 0x3c
 801c874:	d832      	bhi.n	801c8dc <create_node+0xc4>
 801c876:	4639      	mov	r1, r7
 801c878:	4648      	mov	r0, r9
 801c87a:	f003 ff68 	bl	802074e <memcpy>
 801c87e:	6923      	ldr	r3, [r4, #16]
 801c880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801c884:	2101      	movs	r1, #1
 801c886:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 801c88a:	1842      	adds	r2, r0, r1
 801c88c:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 801c890:	f7f9 fd08 	bl	80162a4 <uxr_object_id>
 801c894:	6160      	str	r0, [r4, #20]
 801c896:	783b      	ldrb	r3, [r7, #0]
 801c898:	2b2f      	cmp	r3, #47	@ 0x2f
 801c89a:	d127      	bne.n	801c8ec <create_node+0xd4>
 801c89c:	787b      	ldrb	r3, [r7, #1]
 801c89e:	bb2b      	cbnz	r3, 801c8ec <create_node+0xd4>
 801c8a0:	4a17      	ldr	r2, [pc, #92]	@ (801c900 <create_node+0xe8>)
 801c8a2:	4818      	ldr	r0, [pc, #96]	@ (801c904 <create_node+0xec>)
 801c8a4:	4633      	mov	r3, r6
 801c8a6:	213c      	movs	r1, #60	@ 0x3c
 801c8a8:	f003 fcc4 	bl	8020234 <sniprintf>
 801c8ac:	6920      	ldr	r0, [r4, #16]
 801c8ae:	4915      	ldr	r1, [pc, #84]	@ (801c904 <create_node+0xec>)
 801c8b0:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801c8b4:	9100      	str	r1, [sp, #0]
 801c8b6:	2106      	movs	r1, #6
 801c8b8:	9101      	str	r1, [sp, #4]
 801c8ba:	6811      	ldr	r1, [r2, #0]
 801c8bc:	6962      	ldr	r2, [r4, #20]
 801c8be:	fa1f f388 	uxth.w	r3, r8
 801c8c2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801c8c6:	f7f9 fb37 	bl	8015f38 <uxr_buffer_create_participant_bin>
 801c8ca:	4602      	mov	r2, r0
 801c8cc:	6920      	ldr	r0, [r4, #16]
 801c8ce:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801c8d2:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801c8d6:	f7f8 fb31 	bl	8014f3c <run_xrce_session>
 801c8da:	b918      	cbnz	r0, 801c8e4 <create_node+0xcc>
 801c8dc:	4628      	mov	r0, r5
 801c8de:	f7f8 f9bb 	bl	8014c58 <rmw_uxrce_fini_node_memory>
 801c8e2:	2500      	movs	r5, #0
 801c8e4:	4628      	mov	r0, r5
 801c8e6:	b003      	add	sp, #12
 801c8e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c8ec:	4a06      	ldr	r2, [pc, #24]	@ (801c908 <create_node+0xf0>)
 801c8ee:	9600      	str	r6, [sp, #0]
 801c8f0:	463b      	mov	r3, r7
 801c8f2:	213c      	movs	r1, #60	@ 0x3c
 801c8f4:	4803      	ldr	r0, [pc, #12]	@ (801c904 <create_node+0xec>)
 801c8f6:	f003 fc9d 	bl	8020234 <sniprintf>
 801c8fa:	e7d7      	b.n	801c8ac <create_node+0x94>
 801c8fc:	200163c4 	.word	0x200163c4
 801c900:	0802194c 	.word	0x0802194c
 801c904:	20016574 	.word	0x20016574
 801c908:	080221a4 	.word	0x080221a4

0801c90c <rmw_create_node>:
 801c90c:	b199      	cbz	r1, 801c936 <rmw_create_node+0x2a>
 801c90e:	780b      	ldrb	r3, [r1, #0]
 801c910:	468c      	mov	ip, r1
 801c912:	b183      	cbz	r3, 801c936 <rmw_create_node+0x2a>
 801c914:	b410      	push	{r4}
 801c916:	4614      	mov	r4, r2
 801c918:	b14a      	cbz	r2, 801c92e <rmw_create_node+0x22>
 801c91a:	7813      	ldrb	r3, [r2, #0]
 801c91c:	b13b      	cbz	r3, 801c92e <rmw_create_node+0x22>
 801c91e:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 801c920:	4603      	mov	r3, r0
 801c922:	4621      	mov	r1, r4
 801c924:	4660      	mov	r0, ip
 801c926:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c92a:	f7ff bf75 	b.w	801c818 <create_node>
 801c92e:	2000      	movs	r0, #0
 801c930:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c934:	4770      	bx	lr
 801c936:	2000      	movs	r0, #0
 801c938:	4770      	bx	lr
 801c93a:	bf00      	nop

0801c93c <rmw_destroy_node>:
 801c93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c93e:	2800      	cmp	r0, #0
 801c940:	d066      	beq.n	801ca10 <rmw_destroy_node+0xd4>
 801c942:	4607      	mov	r7, r0
 801c944:	6800      	ldr	r0, [r0, #0]
 801c946:	b128      	cbz	r0, 801c954 <rmw_destroy_node+0x18>
 801c948:	4b34      	ldr	r3, [pc, #208]	@ (801ca1c <rmw_destroy_node+0xe0>)
 801c94a:	6819      	ldr	r1, [r3, #0]
 801c94c:	f7e3 fc40 	bl	80001d0 <strcmp>
 801c950:	2800      	cmp	r0, #0
 801c952:	d15d      	bne.n	801ca10 <rmw_destroy_node+0xd4>
 801c954:	687c      	ldr	r4, [r7, #4]
 801c956:	2c00      	cmp	r4, #0
 801c958:	d05a      	beq.n	801ca10 <rmw_destroy_node+0xd4>
 801c95a:	4b31      	ldr	r3, [pc, #196]	@ (801ca20 <rmw_destroy_node+0xe4>)
 801c95c:	681d      	ldr	r5, [r3, #0]
 801c95e:	2d00      	cmp	r5, #0
 801c960:	d059      	beq.n	801ca16 <rmw_destroy_node+0xda>
 801c962:	2600      	movs	r6, #0
 801c964:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 801c968:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 801c96c:	429c      	cmp	r4, r3
 801c96e:	d047      	beq.n	801ca00 <rmw_destroy_node+0xc4>
 801c970:	2d00      	cmp	r5, #0
 801c972:	d1f7      	bne.n	801c964 <rmw_destroy_node+0x28>
 801c974:	4b2b      	ldr	r3, [pc, #172]	@ (801ca24 <rmw_destroy_node+0xe8>)
 801c976:	681d      	ldr	r5, [r3, #0]
 801c978:	b15d      	cbz	r5, 801c992 <rmw_destroy_node+0x56>
 801c97a:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 801c97e:	6a0b      	ldr	r3, [r1, #32]
 801c980:	429c      	cmp	r4, r3
 801c982:	d1f9      	bne.n	801c978 <rmw_destroy_node+0x3c>
 801c984:	317c      	adds	r1, #124	@ 0x7c
 801c986:	4638      	mov	r0, r7
 801c988:	f000 fad6 	bl	801cf38 <rmw_destroy_subscription>
 801c98c:	4606      	mov	r6, r0
 801c98e:	2d00      	cmp	r5, #0
 801c990:	d1f3      	bne.n	801c97a <rmw_destroy_node+0x3e>
 801c992:	4b25      	ldr	r3, [pc, #148]	@ (801ca28 <rmw_destroy_node+0xec>)
 801c994:	681d      	ldr	r5, [r3, #0]
 801c996:	b15d      	cbz	r5, 801c9b0 <rmw_destroy_node+0x74>
 801c998:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 801c99c:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801c99e:	429c      	cmp	r4, r3
 801c9a0:	d1f9      	bne.n	801c996 <rmw_destroy_node+0x5a>
 801c9a2:	317c      	adds	r1, #124	@ 0x7c
 801c9a4:	4638      	mov	r0, r7
 801c9a6:	f000 f99b 	bl	801cce0 <rmw_destroy_service>
 801c9aa:	4606      	mov	r6, r0
 801c9ac:	2d00      	cmp	r5, #0
 801c9ae:	d1f3      	bne.n	801c998 <rmw_destroy_node+0x5c>
 801c9b0:	4b1e      	ldr	r3, [pc, #120]	@ (801ca2c <rmw_destroy_node+0xf0>)
 801c9b2:	681d      	ldr	r5, [r3, #0]
 801c9b4:	b15d      	cbz	r5, 801c9ce <rmw_destroy_node+0x92>
 801c9b6:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 801c9ba:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 801c9bc:	429c      	cmp	r4, r3
 801c9be:	d1f9      	bne.n	801c9b4 <rmw_destroy_node+0x78>
 801c9c0:	317c      	adds	r1, #124	@ 0x7c
 801c9c2:	4638      	mov	r0, r7
 801c9c4:	f7ff fbf8 	bl	801c1b8 <rmw_destroy_client>
 801c9c8:	4606      	mov	r6, r0
 801c9ca:	2d00      	cmp	r5, #0
 801c9cc:	d1f3      	bne.n	801c9b6 <rmw_destroy_node+0x7a>
 801c9ce:	6920      	ldr	r0, [r4, #16]
 801c9d0:	6962      	ldr	r2, [r4, #20]
 801c9d2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801c9d6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801c9da:	6819      	ldr	r1, [r3, #0]
 801c9dc:	f7f9 fa60 	bl	8015ea0 <uxr_buffer_delete_entity>
 801c9e0:	4602      	mov	r2, r0
 801c9e2:	6920      	ldr	r0, [r4, #16]
 801c9e4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801c9e8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801c9ec:	f7f8 faa6 	bl	8014f3c <run_xrce_session>
 801c9f0:	2800      	cmp	r0, #0
 801c9f2:	bf08      	it	eq
 801c9f4:	2602      	moveq	r6, #2
 801c9f6:	4638      	mov	r0, r7
 801c9f8:	f7f8 f92e 	bl	8014c58 <rmw_uxrce_fini_node_memory>
 801c9fc:	4630      	mov	r0, r6
 801c9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ca00:	3184      	adds	r1, #132	@ 0x84
 801ca02:	4638      	mov	r0, r7
 801ca04:	f7f7 ff70 	bl	80148e8 <rmw_destroy_publisher>
 801ca08:	4606      	mov	r6, r0
 801ca0a:	2d00      	cmp	r5, #0
 801ca0c:	d1aa      	bne.n	801c964 <rmw_destroy_node+0x28>
 801ca0e:	e7b1      	b.n	801c974 <rmw_destroy_node+0x38>
 801ca10:	2601      	movs	r6, #1
 801ca12:	4630      	mov	r0, r6
 801ca14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ca16:	462e      	mov	r6, r5
 801ca18:	e7ac      	b.n	801c974 <rmw_destroy_node+0x38>
 801ca1a:	bf00      	nop
 801ca1c:	08022734 	.word	0x08022734
 801ca20:	200163d4 	.word	0x200163d4
 801ca24:	20016414 	.word	0x20016414
 801ca28:	200163e4 	.word	0x200163e4
 801ca2c:	20011af8 	.word	0x20011af8

0801ca30 <rmw_node_get_graph_guard_condition>:
 801ca30:	6843      	ldr	r3, [r0, #4]
 801ca32:	6918      	ldr	r0, [r3, #16]
 801ca34:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 801ca38:	4770      	bx	lr
 801ca3a:	bf00      	nop

0801ca3c <rmw_send_request>:
 801ca3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ca40:	4604      	mov	r4, r0
 801ca42:	6800      	ldr	r0, [r0, #0]
 801ca44:	b08b      	sub	sp, #44	@ 0x2c
 801ca46:	460e      	mov	r6, r1
 801ca48:	4615      	mov	r5, r2
 801ca4a:	b128      	cbz	r0, 801ca58 <rmw_send_request+0x1c>
 801ca4c:	4b21      	ldr	r3, [pc, #132]	@ (801cad4 <rmw_send_request+0x98>)
 801ca4e:	6819      	ldr	r1, [r3, #0]
 801ca50:	f7e3 fbbe 	bl	80001d0 <strcmp>
 801ca54:	2800      	cmp	r0, #0
 801ca56:	d139      	bne.n	801cacc <rmw_send_request+0x90>
 801ca58:	6864      	ldr	r4, [r4, #4]
 801ca5a:	6963      	ldr	r3, [r4, #20]
 801ca5c:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801ca60:	689b      	ldr	r3, [r3, #8]
 801ca62:	4798      	blx	r3
 801ca64:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801ca68:	4630      	mov	r0, r6
 801ca6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ca6e:	4798      	blx	r3
 801ca70:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801ca74:	9000      	str	r0, [sp, #0]
 801ca76:	6922      	ldr	r2, [r4, #16]
 801ca78:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801ca7a:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801ca7e:	ab02      	add	r3, sp, #8
 801ca80:	f7fa ff0a 	bl	8017898 <uxr_prepare_output_stream>
 801ca84:	2700      	movs	r7, #0
 801ca86:	6028      	str	r0, [r5, #0]
 801ca88:	606f      	str	r7, [r5, #4]
 801ca8a:	b198      	cbz	r0, 801cab4 <rmw_send_request+0x78>
 801ca8c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801ca90:	a902      	add	r1, sp, #8
 801ca92:	4630      	mov	r0, r6
 801ca94:	4798      	blx	r3
 801ca96:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 801ca9a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801ca9e:	2b01      	cmp	r3, #1
 801caa0:	d00c      	beq.n	801cabc <rmw_send_request+0x80>
 801caa2:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801caa4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801caa8:	f7fa f90a 	bl	8016cc0 <uxr_run_session_until_confirm_delivery>
 801caac:	4638      	mov	r0, r7
 801caae:	b00b      	add	sp, #44	@ 0x2c
 801cab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cab4:	2001      	movs	r0, #1
 801cab6:	b00b      	add	sp, #44	@ 0x2c
 801cab8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cabc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801cac0:	f7f9 fd3e 	bl	8016540 <uxr_flash_output_streams>
 801cac4:	4638      	mov	r0, r7
 801cac6:	b00b      	add	sp, #44	@ 0x2c
 801cac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cacc:	200c      	movs	r0, #12
 801cace:	b00b      	add	sp, #44	@ 0x2c
 801cad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cad4:	08022734 	.word	0x08022734

0801cad8 <rmw_take_request>:
 801cad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cadc:	4605      	mov	r5, r0
 801cade:	6800      	ldr	r0, [r0, #0]
 801cae0:	b089      	sub	sp, #36	@ 0x24
 801cae2:	460c      	mov	r4, r1
 801cae4:	4690      	mov	r8, r2
 801cae6:	461e      	mov	r6, r3
 801cae8:	b128      	cbz	r0, 801caf6 <rmw_take_request+0x1e>
 801caea:	4b28      	ldr	r3, [pc, #160]	@ (801cb8c <rmw_take_request+0xb4>)
 801caec:	6819      	ldr	r1, [r3, #0]
 801caee:	f7e3 fb6f 	bl	80001d0 <strcmp>
 801caf2:	2800      	cmp	r0, #0
 801caf4:	d146      	bne.n	801cb84 <rmw_take_request+0xac>
 801caf6:	b10e      	cbz	r6, 801cafc <rmw_take_request+0x24>
 801caf8:	2300      	movs	r3, #0
 801cafa:	7033      	strb	r3, [r6, #0]
 801cafc:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801cb00:	f7f8 f99e 	bl	8014e40 <rmw_uxrce_clean_expired_static_input_buffer>
 801cb04:	4648      	mov	r0, r9
 801cb06:	f7f8 f973 	bl	8014df0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801cb0a:	4607      	mov	r7, r0
 801cb0c:	b3b0      	cbz	r0, 801cb7c <rmw_take_request+0xa4>
 801cb0e:	6885      	ldr	r5, [r0, #8]
 801cb10:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 801cb14:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 801cb18:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801cb1c:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801cb20:	7423      	strb	r3, [r4, #16]
 801cb22:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 801cb26:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 801cb2a:	74e2      	strb	r2, [r4, #19]
 801cb2c:	f8a4 3011 	strh.w	r3, [r4, #17]
 801cb30:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 801cb34:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 801cb38:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 801cb3c:	61e1      	str	r1, [r4, #28]
 801cb3e:	6162      	str	r2, [r4, #20]
 801cb40:	61a3      	str	r3, [r4, #24]
 801cb42:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801cb46:	689b      	ldr	r3, [r3, #8]
 801cb48:	4798      	blx	r3
 801cb4a:	6844      	ldr	r4, [r0, #4]
 801cb4c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 801cb50:	f105 0110 	add.w	r1, r5, #16
 801cb54:	4668      	mov	r0, sp
 801cb56:	f7f6 fc15 	bl	8013384 <ucdr_init_buffer>
 801cb5a:	68e3      	ldr	r3, [r4, #12]
 801cb5c:	4641      	mov	r1, r8
 801cb5e:	4668      	mov	r0, sp
 801cb60:	4798      	blx	r3
 801cb62:	4639      	mov	r1, r7
 801cb64:	4604      	mov	r4, r0
 801cb66:	480a      	ldr	r0, [pc, #40]	@ (801cb90 <rmw_take_request+0xb8>)
 801cb68:	f7ff fb12 	bl	801c190 <put_memory>
 801cb6c:	b106      	cbz	r6, 801cb70 <rmw_take_request+0x98>
 801cb6e:	7034      	strb	r4, [r6, #0]
 801cb70:	f084 0001 	eor.w	r0, r4, #1
 801cb74:	b2c0      	uxtb	r0, r0
 801cb76:	b009      	add	sp, #36	@ 0x24
 801cb78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cb7c:	2001      	movs	r0, #1
 801cb7e:	b009      	add	sp, #36	@ 0x24
 801cb80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cb84:	200c      	movs	r0, #12
 801cb86:	b009      	add	sp, #36	@ 0x24
 801cb88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cb8c:	08022734 	.word	0x08022734
 801cb90:	20016404 	.word	0x20016404

0801cb94 <rmw_send_response>:
 801cb94:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb96:	4605      	mov	r5, r0
 801cb98:	6800      	ldr	r0, [r0, #0]
 801cb9a:	b091      	sub	sp, #68	@ 0x44
 801cb9c:	460c      	mov	r4, r1
 801cb9e:	4616      	mov	r6, r2
 801cba0:	b128      	cbz	r0, 801cbae <rmw_send_response+0x1a>
 801cba2:	4b29      	ldr	r3, [pc, #164]	@ (801cc48 <rmw_send_response+0xb4>)
 801cba4:	6819      	ldr	r1, [r3, #0]
 801cba6:	f7e3 fb13 	bl	80001d0 <strcmp>
 801cbaa:	2800      	cmp	r0, #0
 801cbac:	d141      	bne.n	801cc32 <rmw_send_response+0x9e>
 801cbae:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801cbb2:	9306      	str	r3, [sp, #24]
 801cbb4:	4623      	mov	r3, r4
 801cbb6:	9207      	str	r2, [sp, #28]
 801cbb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cbbc:	686d      	ldr	r5, [r5, #4]
 801cbbe:	789b      	ldrb	r3, [r3, #2]
 801cbc0:	68a1      	ldr	r1, [r4, #8]
 801cbc2:	f88d 2017 	strb.w	r2, [sp, #23]
 801cbc6:	f88d 3016 	strb.w	r3, [sp, #22]
 801cbca:	68e2      	ldr	r2, [r4, #12]
 801cbcc:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801cbd0:	6860      	ldr	r0, [r4, #4]
 801cbd2:	f8ad 3014 	strh.w	r3, [sp, #20]
 801cbd6:	ab02      	add	r3, sp, #8
 801cbd8:	c307      	stmia	r3!, {r0, r1, r2}
 801cbda:	696b      	ldr	r3, [r5, #20]
 801cbdc:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801cbde:	68db      	ldr	r3, [r3, #12]
 801cbe0:	4798      	blx	r3
 801cbe2:	6844      	ldr	r4, [r0, #4]
 801cbe4:	4630      	mov	r0, r6
 801cbe6:	6923      	ldr	r3, [r4, #16]
 801cbe8:	4798      	blx	r3
 801cbea:	f100 0318 	add.w	r3, r0, #24
 801cbee:	6938      	ldr	r0, [r7, #16]
 801cbf0:	9300      	str	r3, [sp, #0]
 801cbf2:	692a      	ldr	r2, [r5, #16]
 801cbf4:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 801cbf6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801cbfa:	ab08      	add	r3, sp, #32
 801cbfc:	f7fa fe4c 	bl	8017898 <uxr_prepare_output_stream>
 801cc00:	b910      	cbnz	r0, 801cc08 <rmw_send_response+0x74>
 801cc02:	2001      	movs	r0, #1
 801cc04:	b011      	add	sp, #68	@ 0x44
 801cc06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc08:	a902      	add	r1, sp, #8
 801cc0a:	a808      	add	r0, sp, #32
 801cc0c:	f7fb ff7c 	bl	8018b08 <uxr_serialize_SampleIdentity>
 801cc10:	68a3      	ldr	r3, [r4, #8]
 801cc12:	a908      	add	r1, sp, #32
 801cc14:	4630      	mov	r0, r6
 801cc16:	4798      	blx	r3
 801cc18:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 801cc1c:	6938      	ldr	r0, [r7, #16]
 801cc1e:	2b01      	cmp	r3, #1
 801cc20:	d00a      	beq.n	801cc38 <rmw_send_response+0xa4>
 801cc22:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801cc24:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801cc28:	f7fa f84a 	bl	8016cc0 <uxr_run_session_until_confirm_delivery>
 801cc2c:	2000      	movs	r0, #0
 801cc2e:	b011      	add	sp, #68	@ 0x44
 801cc30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc32:	200c      	movs	r0, #12
 801cc34:	b011      	add	sp, #68	@ 0x44
 801cc36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc38:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801cc3c:	f7f9 fc80 	bl	8016540 <uxr_flash_output_streams>
 801cc40:	2000      	movs	r0, #0
 801cc42:	b011      	add	sp, #68	@ 0x44
 801cc44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc46:	bf00      	nop
 801cc48:	08022734 	.word	0x08022734

0801cc4c <rmw_take_response>:
 801cc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc50:	4604      	mov	r4, r0
 801cc52:	6800      	ldr	r0, [r0, #0]
 801cc54:	b088      	sub	sp, #32
 801cc56:	4688      	mov	r8, r1
 801cc58:	4617      	mov	r7, r2
 801cc5a:	461d      	mov	r5, r3
 801cc5c:	b120      	cbz	r0, 801cc68 <rmw_take_response+0x1c>
 801cc5e:	4b1e      	ldr	r3, [pc, #120]	@ (801ccd8 <rmw_take_response+0x8c>)
 801cc60:	6819      	ldr	r1, [r3, #0]
 801cc62:	f7e3 fab5 	bl	80001d0 <strcmp>
 801cc66:	bb78      	cbnz	r0, 801ccc8 <rmw_take_response+0x7c>
 801cc68:	b10d      	cbz	r5, 801cc6e <rmw_take_response+0x22>
 801cc6a:	2300      	movs	r3, #0
 801cc6c:	702b      	strb	r3, [r5, #0]
 801cc6e:	6864      	ldr	r4, [r4, #4]
 801cc70:	f7f8 f8e6 	bl	8014e40 <rmw_uxrce_clean_expired_static_input_buffer>
 801cc74:	4620      	mov	r0, r4
 801cc76:	f7f8 f8bb 	bl	8014df0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801cc7a:	4606      	mov	r6, r0
 801cc7c:	b340      	cbz	r0, 801ccd0 <rmw_take_response+0x84>
 801cc7e:	6963      	ldr	r3, [r4, #20]
 801cc80:	6884      	ldr	r4, [r0, #8]
 801cc82:	68db      	ldr	r3, [r3, #12]
 801cc84:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 801cc88:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801cc8c:	e9c8 0108 	strd	r0, r1, [r8, #32]
 801cc90:	4798      	blx	r3
 801cc92:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801cc96:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 801cc9a:	f104 0110 	add.w	r1, r4, #16
 801cc9e:	4668      	mov	r0, sp
 801cca0:	f7f6 fb70 	bl	8013384 <ucdr_init_buffer>
 801cca4:	4639      	mov	r1, r7
 801cca6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ccaa:	4668      	mov	r0, sp
 801ccac:	4798      	blx	r3
 801ccae:	4631      	mov	r1, r6
 801ccb0:	4604      	mov	r4, r0
 801ccb2:	480a      	ldr	r0, [pc, #40]	@ (801ccdc <rmw_take_response+0x90>)
 801ccb4:	f7ff fa6c 	bl	801c190 <put_memory>
 801ccb8:	b105      	cbz	r5, 801ccbc <rmw_take_response+0x70>
 801ccba:	702c      	strb	r4, [r5, #0]
 801ccbc:	f084 0001 	eor.w	r0, r4, #1
 801ccc0:	b2c0      	uxtb	r0, r0
 801ccc2:	b008      	add	sp, #32
 801ccc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ccc8:	200c      	movs	r0, #12
 801ccca:	b008      	add	sp, #32
 801cccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ccd0:	2001      	movs	r0, #1
 801ccd2:	b008      	add	sp, #32
 801ccd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ccd8:	08022734 	.word	0x08022734
 801ccdc:	20016404 	.word	0x20016404

0801cce0 <rmw_destroy_service>:
 801cce0:	b570      	push	{r4, r5, r6, lr}
 801cce2:	b128      	cbz	r0, 801ccf0 <rmw_destroy_service+0x10>
 801cce4:	4604      	mov	r4, r0
 801cce6:	6800      	ldr	r0, [r0, #0]
 801cce8:	460d      	mov	r5, r1
 801ccea:	f7f8 f9a7 	bl	801503c <is_uxrce_rmw_identifier_valid>
 801ccee:	b910      	cbnz	r0, 801ccf6 <rmw_destroy_service+0x16>
 801ccf0:	2401      	movs	r4, #1
 801ccf2:	4620      	mov	r0, r4
 801ccf4:	bd70      	pop	{r4, r5, r6, pc}
 801ccf6:	6863      	ldr	r3, [r4, #4]
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d0f9      	beq.n	801ccf0 <rmw_destroy_service+0x10>
 801ccfc:	2d00      	cmp	r5, #0
 801ccfe:	d0f7      	beq.n	801ccf0 <rmw_destroy_service+0x10>
 801cd00:	6828      	ldr	r0, [r5, #0]
 801cd02:	f7f8 f99b 	bl	801503c <is_uxrce_rmw_identifier_valid>
 801cd06:	2800      	cmp	r0, #0
 801cd08:	d0f2      	beq.n	801ccf0 <rmw_destroy_service+0x10>
 801cd0a:	686e      	ldr	r6, [r5, #4]
 801cd0c:	2e00      	cmp	r6, #0
 801cd0e:	d0ef      	beq.n	801ccf0 <rmw_destroy_service+0x10>
 801cd10:	6864      	ldr	r4, [r4, #4]
 801cd12:	6932      	ldr	r2, [r6, #16]
 801cd14:	6920      	ldr	r0, [r4, #16]
 801cd16:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801cd1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801cd1e:	6819      	ldr	r1, [r3, #0]
 801cd20:	f001 fcb2 	bl	801e688 <uxr_buffer_cancel_data>
 801cd24:	4602      	mov	r2, r0
 801cd26:	6920      	ldr	r0, [r4, #16]
 801cd28:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801cd2c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801cd30:	f7f8 f904 	bl	8014f3c <run_xrce_session>
 801cd34:	6920      	ldr	r0, [r4, #16]
 801cd36:	6932      	ldr	r2, [r6, #16]
 801cd38:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801cd3c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801cd40:	6819      	ldr	r1, [r3, #0]
 801cd42:	f7f9 f8ad 	bl	8015ea0 <uxr_buffer_delete_entity>
 801cd46:	4602      	mov	r2, r0
 801cd48:	6920      	ldr	r0, [r4, #16]
 801cd4a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801cd4e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801cd52:	f7f8 f8f3 	bl	8014f3c <run_xrce_session>
 801cd56:	2800      	cmp	r0, #0
 801cd58:	4628      	mov	r0, r5
 801cd5a:	bf14      	ite	ne
 801cd5c:	2400      	movne	r4, #0
 801cd5e:	2402      	moveq	r4, #2
 801cd60:	f7f7 ffbe 	bl	8014ce0 <rmw_uxrce_fini_service_memory>
 801cd64:	e7c5      	b.n	801ccf2 <rmw_destroy_service+0x12>
 801cd66:	bf00      	nop

0801cd68 <rmw_create_subscription>:
 801cd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd6c:	b08d      	sub	sp, #52	@ 0x34
 801cd6e:	2800      	cmp	r0, #0
 801cd70:	f000 80d5 	beq.w	801cf1e <rmw_create_subscription+0x1b6>
 801cd74:	460e      	mov	r6, r1
 801cd76:	2900      	cmp	r1, #0
 801cd78:	f000 80d1 	beq.w	801cf1e <rmw_create_subscription+0x1b6>
 801cd7c:	4604      	mov	r4, r0
 801cd7e:	6800      	ldr	r0, [r0, #0]
 801cd80:	4615      	mov	r5, r2
 801cd82:	4698      	mov	r8, r3
 801cd84:	f7f8 f95a 	bl	801503c <is_uxrce_rmw_identifier_valid>
 801cd88:	2800      	cmp	r0, #0
 801cd8a:	f000 80c8 	beq.w	801cf1e <rmw_create_subscription+0x1b6>
 801cd8e:	2d00      	cmp	r5, #0
 801cd90:	f000 80c5 	beq.w	801cf1e <rmw_create_subscription+0x1b6>
 801cd94:	782b      	ldrb	r3, [r5, #0]
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	f000 80c1 	beq.w	801cf1e <rmw_create_subscription+0x1b6>
 801cd9c:	f1b8 0f00 	cmp.w	r8, #0
 801cda0:	f000 80bd 	beq.w	801cf1e <rmw_create_subscription+0x1b6>
 801cda4:	4860      	ldr	r0, [pc, #384]	@ (801cf28 <rmw_create_subscription+0x1c0>)
 801cda6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801cdaa:	f7ff f9e1 	bl	801c170 <get_memory>
 801cdae:	4604      	mov	r4, r0
 801cdb0:	2800      	cmp	r0, #0
 801cdb2:	f000 80b5 	beq.w	801cf20 <rmw_create_subscription+0x1b8>
 801cdb6:	6887      	ldr	r7, [r0, #8]
 801cdb8:	2300      	movs	r3, #0
 801cdba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801cdbe:	f7ff fa3f 	bl	801c240 <rmw_get_implementation_identifier>
 801cdc2:	f107 0a98 	add.w	sl, r7, #152	@ 0x98
 801cdc6:	67f8      	str	r0, [r7, #124]	@ 0x7c
 801cdc8:	f8c7 a084 	str.w	sl, [r7, #132]	@ 0x84
 801cdcc:	4628      	mov	r0, r5
 801cdce:	f7e3 fa09 	bl	80001e4 <strlen>
 801cdd2:	3001      	adds	r0, #1
 801cdd4:	283c      	cmp	r0, #60	@ 0x3c
 801cdd6:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 801cdda:	f200 809d 	bhi.w	801cf18 <rmw_create_subscription+0x1b0>
 801cdde:	4a53      	ldr	r2, [pc, #332]	@ (801cf2c <rmw_create_subscription+0x1c4>)
 801cde0:	462b      	mov	r3, r5
 801cde2:	213c      	movs	r1, #60	@ 0x3c
 801cde4:	4650      	mov	r0, sl
 801cde6:	f003 fa25 	bl	8020234 <sniprintf>
 801cdea:	4641      	mov	r1, r8
 801cdec:	f8c7 9020 	str.w	r9, [r7, #32]
 801cdf0:	2250      	movs	r2, #80	@ 0x50
 801cdf2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 801cdf6:	f003 fcaa 	bl	802074e <memcpy>
 801cdfa:	494d      	ldr	r1, [pc, #308]	@ (801cf30 <rmw_create_subscription+0x1c8>)
 801cdfc:	4630      	mov	r0, r6
 801cdfe:	f7f8 f92b 	bl	8015058 <get_message_typesupport_handle>
 801ce02:	2800      	cmp	r0, #0
 801ce04:	f000 8088 	beq.w	801cf18 <rmw_create_subscription+0x1b0>
 801ce08:	6842      	ldr	r2, [r0, #4]
 801ce0a:	61ba      	str	r2, [r7, #24]
 801ce0c:	2a00      	cmp	r2, #0
 801ce0e:	f000 8083 	beq.w	801cf18 <rmw_create_subscription+0x1b0>
 801ce12:	4629      	mov	r1, r5
 801ce14:	4643      	mov	r3, r8
 801ce16:	4648      	mov	r0, r9
 801ce18:	f7ff fc78 	bl	801c70c <create_topic>
 801ce1c:	61f8      	str	r0, [r7, #28]
 801ce1e:	2800      	cmp	r0, #0
 801ce20:	d07a      	beq.n	801cf18 <rmw_create_subscription+0x1b0>
 801ce22:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ce26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ce2a:	2104      	movs	r1, #4
 801ce2c:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	@ 0x59c
 801ce30:	1c42      	adds	r2, r0, #1
 801ce32:	f8a3 259c 	strh.w	r2, [r3, #1436]	@ 0x59c
 801ce36:	f7f9 fa35 	bl	80162a4 <uxr_object_id>
 801ce3a:	6138      	str	r0, [r7, #16]
 801ce3c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801ce40:	2506      	movs	r5, #6
 801ce42:	f8d0 3384 	ldr.w	r3, [r0, #900]	@ 0x384
 801ce46:	9500      	str	r5, [sp, #0]
 801ce48:	6819      	ldr	r1, [r3, #0]
 801ce4a:	693a      	ldr	r2, [r7, #16]
 801ce4c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801ce50:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801ce54:	f7f9 f908 	bl	8016068 <uxr_buffer_create_subscriber_bin>
 801ce58:	4602      	mov	r2, r0
 801ce5a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801ce5e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801ce62:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801ce66:	f7f8 f869 	bl	8014f3c <run_xrce_session>
 801ce6a:	2800      	cmp	r0, #0
 801ce6c:	d050      	beq.n	801cf10 <rmw_create_subscription+0x1a8>
 801ce6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ce72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801ce76:	4629      	mov	r1, r5
 801ce78:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	@ 0x59e
 801ce7c:	1c42      	adds	r2, r0, #1
 801ce7e:	f8a3 259e 	strh.w	r2, [r3, #1438]	@ 0x59e
 801ce82:	f7f9 fa0f 	bl	80162a4 <uxr_object_id>
 801ce86:	ae08      	add	r6, sp, #32
 801ce88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801ce8c:	69fb      	ldr	r3, [r7, #28]
 801ce8e:	6178      	str	r0, [r7, #20]
 801ce90:	4641      	mov	r1, r8
 801ce92:	4630      	mov	r0, r6
 801ce94:	f8da b384 	ldr.w	fp, [sl, #900]	@ 0x384
 801ce98:	9305      	str	r3, [sp, #20]
 801ce9a:	f7f8 f86b 	bl	8014f74 <convert_qos_profile>
 801ce9e:	9503      	str	r5, [sp, #12]
 801cea0:	e896 0003 	ldmia.w	r6, {r0, r1}
 801cea4:	9b05      	ldr	r3, [sp, #20]
 801cea6:	9001      	str	r0, [sp, #4]
 801cea8:	f8ad 1008 	strh.w	r1, [sp, #8]
 801ceac:	691b      	ldr	r3, [r3, #16]
 801ceae:	9300      	str	r3, [sp, #0]
 801ceb0:	e9d7 3204 	ldrd	r3, r2, [r7, #16]
 801ceb4:	f8db 1000 	ldr.w	r1, [fp]
 801ceb8:	f50a 7028 	add.w	r0, sl, #672	@ 0x2a0
 801cebc:	f7f9 f97a 	bl	80161b4 <uxr_buffer_create_datareader_bin>
 801cec0:	4602      	mov	r2, r0
 801cec2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801cec6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801ceca:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801cece:	f7f8 f835 	bl	8014f3c <run_xrce_session>
 801ced2:	b1e8      	cbz	r0, 801cf10 <rmw_create_subscription+0x1a8>
 801ced4:	f8c7 7080 	str.w	r7, [r7, #128]	@ 0x80
 801ced8:	f898 3008 	ldrb.w	r3, [r8, #8]
 801cedc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801cee0:	2b02      	cmp	r3, #2
 801cee2:	bf0c      	ite	eq
 801cee4:	f8d0 3380 	ldreq.w	r3, [r0, #896]	@ 0x380
 801cee8:	f8d0 3374 	ldrne.w	r3, [r0, #884]	@ 0x374
 801ceec:	9307      	str	r3, [sp, #28]
 801ceee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801cef2:	2200      	movs	r2, #0
 801cef4:	e9cd 120a 	strd	r1, r2, [sp, #40]	@ 0x28
 801cef8:	ab0a      	add	r3, sp, #40	@ 0x28
 801cefa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 801cefe:	9300      	str	r3, [sp, #0]
 801cf00:	697a      	ldr	r2, [r7, #20]
 801cf02:	9b07      	ldr	r3, [sp, #28]
 801cf04:	6809      	ldr	r1, [r1, #0]
 801cf06:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801cf0a:	f001 fb83 	bl	801e614 <uxr_buffer_request_data>
 801cf0e:	e007      	b.n	801cf20 <rmw_create_subscription+0x1b8>
 801cf10:	4805      	ldr	r0, [pc, #20]	@ (801cf28 <rmw_create_subscription+0x1c0>)
 801cf12:	4639      	mov	r1, r7
 801cf14:	f7ff f93c 	bl	801c190 <put_memory>
 801cf18:	4620      	mov	r0, r4
 801cf1a:	f7f7 fecb 	bl	8014cb4 <rmw_uxrce_fini_subscription_memory>
 801cf1e:	2400      	movs	r4, #0
 801cf20:	4620      	mov	r0, r4
 801cf22:	b00d      	add	sp, #52	@ 0x34
 801cf24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf28:	20016414 	.word	0x20016414
 801cf2c:	0802194c 	.word	0x0802194c
 801cf30:	080216e0 	.word	0x080216e0

0801cf34 <rmw_subscription_get_actual_qos>:
 801cf34:	2000      	movs	r0, #0
 801cf36:	4770      	bx	lr

0801cf38 <rmw_destroy_subscription>:
 801cf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf3a:	b128      	cbz	r0, 801cf48 <rmw_destroy_subscription+0x10>
 801cf3c:	4604      	mov	r4, r0
 801cf3e:	6800      	ldr	r0, [r0, #0]
 801cf40:	460d      	mov	r5, r1
 801cf42:	f7f8 f87b 	bl	801503c <is_uxrce_rmw_identifier_valid>
 801cf46:	b910      	cbnz	r0, 801cf4e <rmw_destroy_subscription+0x16>
 801cf48:	2401      	movs	r4, #1
 801cf4a:	4620      	mov	r0, r4
 801cf4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cf4e:	6863      	ldr	r3, [r4, #4]
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d0f9      	beq.n	801cf48 <rmw_destroy_subscription+0x10>
 801cf54:	2d00      	cmp	r5, #0
 801cf56:	d0f7      	beq.n	801cf48 <rmw_destroy_subscription+0x10>
 801cf58:	6828      	ldr	r0, [r5, #0]
 801cf5a:	f7f8 f86f 	bl	801503c <is_uxrce_rmw_identifier_valid>
 801cf5e:	2800      	cmp	r0, #0
 801cf60:	d0f2      	beq.n	801cf48 <rmw_destroy_subscription+0x10>
 801cf62:	686c      	ldr	r4, [r5, #4]
 801cf64:	2c00      	cmp	r4, #0
 801cf66:	d0ef      	beq.n	801cf48 <rmw_destroy_subscription+0x10>
 801cf68:	6a26      	ldr	r6, [r4, #32]
 801cf6a:	6962      	ldr	r2, [r4, #20]
 801cf6c:	6930      	ldr	r0, [r6, #16]
 801cf6e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801cf72:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801cf76:	6819      	ldr	r1, [r3, #0]
 801cf78:	f001 fb86 	bl	801e688 <uxr_buffer_cancel_data>
 801cf7c:	4602      	mov	r2, r0
 801cf7e:	6930      	ldr	r0, [r6, #16]
 801cf80:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801cf84:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801cf88:	f7f7 ffd8 	bl	8014f3c <run_xrce_session>
 801cf8c:	69e0      	ldr	r0, [r4, #28]
 801cf8e:	f7ff fc21 	bl	801c7d4 <destroy_topic>
 801cf92:	6a23      	ldr	r3, [r4, #32]
 801cf94:	6962      	ldr	r2, [r4, #20]
 801cf96:	6918      	ldr	r0, [r3, #16]
 801cf98:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801cf9c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801cfa0:	6819      	ldr	r1, [r3, #0]
 801cfa2:	f7f8 ff7d 	bl	8015ea0 <uxr_buffer_delete_entity>
 801cfa6:	6a23      	ldr	r3, [r4, #32]
 801cfa8:	6922      	ldr	r2, [r4, #16]
 801cfaa:	691b      	ldr	r3, [r3, #16]
 801cfac:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 801cfb0:	4604      	mov	r4, r0
 801cfb2:	6809      	ldr	r1, [r1, #0]
 801cfb4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 801cfb8:	f7f8 ff72 	bl	8015ea0 <uxr_buffer_delete_entity>
 801cfbc:	6937      	ldr	r7, [r6, #16]
 801cfbe:	4622      	mov	r2, r4
 801cfc0:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801cfc4:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 801cfc8:	4604      	mov	r4, r0
 801cfca:	4638      	mov	r0, r7
 801cfcc:	f7f7 ffb6 	bl	8014f3c <run_xrce_session>
 801cfd0:	6936      	ldr	r6, [r6, #16]
 801cfd2:	4622      	mov	r2, r4
 801cfd4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 801cfd8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 801cfdc:	4604      	mov	r4, r0
 801cfde:	4630      	mov	r0, r6
 801cfe0:	f7f7 ffac 	bl	8014f3c <run_xrce_session>
 801cfe4:	b12c      	cbz	r4, 801cff2 <rmw_destroy_subscription+0xba>
 801cfe6:	b120      	cbz	r0, 801cff2 <rmw_destroy_subscription+0xba>
 801cfe8:	2400      	movs	r4, #0
 801cfea:	4628      	mov	r0, r5
 801cfec:	f7f7 fe62 	bl	8014cb4 <rmw_uxrce_fini_subscription_memory>
 801cff0:	e7ab      	b.n	801cf4a <rmw_destroy_subscription+0x12>
 801cff2:	2402      	movs	r4, #2
 801cff4:	e7f9      	b.n	801cfea <rmw_destroy_subscription+0xb2>
 801cff6:	bf00      	nop

0801cff8 <rmw_take_with_info>:
 801cff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cffa:	4604      	mov	r4, r0
 801cffc:	6800      	ldr	r0, [r0, #0]
 801cffe:	b089      	sub	sp, #36	@ 0x24
 801d000:	460f      	mov	r7, r1
 801d002:	4615      	mov	r5, r2
 801d004:	b128      	cbz	r0, 801d012 <rmw_take_with_info+0x1a>
 801d006:	4b24      	ldr	r3, [pc, #144]	@ (801d098 <rmw_take_with_info+0xa0>)
 801d008:	6819      	ldr	r1, [r3, #0]
 801d00a:	f7e3 f8e1 	bl	80001d0 <strcmp>
 801d00e:	2800      	cmp	r0, #0
 801d010:	d13e      	bne.n	801d090 <rmw_take_with_info+0x98>
 801d012:	b305      	cbz	r5, 801d056 <rmw_take_with_info+0x5e>
 801d014:	6864      	ldr	r4, [r4, #4]
 801d016:	2300      	movs	r3, #0
 801d018:	702b      	strb	r3, [r5, #0]
 801d01a:	f7f7 ff11 	bl	8014e40 <rmw_uxrce_clean_expired_static_input_buffer>
 801d01e:	4620      	mov	r0, r4
 801d020:	f7f7 fee6 	bl	8014df0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801d024:	4606      	mov	r6, r0
 801d026:	b1f0      	cbz	r0, 801d066 <rmw_take_with_info+0x6e>
 801d028:	6881      	ldr	r1, [r0, #8]
 801d02a:	4668      	mov	r0, sp
 801d02c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801d030:	3110      	adds	r1, #16
 801d032:	f7f6 f9a7 	bl	8013384 <ucdr_init_buffer>
 801d036:	69a3      	ldr	r3, [r4, #24]
 801d038:	4639      	mov	r1, r7
 801d03a:	68db      	ldr	r3, [r3, #12]
 801d03c:	4668      	mov	r0, sp
 801d03e:	4798      	blx	r3
 801d040:	4631      	mov	r1, r6
 801d042:	4604      	mov	r4, r0
 801d044:	4815      	ldr	r0, [pc, #84]	@ (801d09c <rmw_take_with_info+0xa4>)
 801d046:	f7ff f8a3 	bl	801c190 <put_memory>
 801d04a:	702c      	strb	r4, [r5, #0]
 801d04c:	f084 0001 	eor.w	r0, r4, #1
 801d050:	b2c0      	uxtb	r0, r0
 801d052:	b009      	add	sp, #36	@ 0x24
 801d054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d056:	6864      	ldr	r4, [r4, #4]
 801d058:	f7f7 fef2 	bl	8014e40 <rmw_uxrce_clean_expired_static_input_buffer>
 801d05c:	4620      	mov	r0, r4
 801d05e:	f7f7 fec7 	bl	8014df0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801d062:	4605      	mov	r5, r0
 801d064:	b910      	cbnz	r0, 801d06c <rmw_take_with_info+0x74>
 801d066:	2001      	movs	r0, #1
 801d068:	b009      	add	sp, #36	@ 0x24
 801d06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d06c:	68a9      	ldr	r1, [r5, #8]
 801d06e:	4668      	mov	r0, sp
 801d070:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 801d074:	3110      	adds	r1, #16
 801d076:	f7f6 f985 	bl	8013384 <ucdr_init_buffer>
 801d07a:	69a3      	ldr	r3, [r4, #24]
 801d07c:	4639      	mov	r1, r7
 801d07e:	68db      	ldr	r3, [r3, #12]
 801d080:	4668      	mov	r0, sp
 801d082:	4798      	blx	r3
 801d084:	4629      	mov	r1, r5
 801d086:	4604      	mov	r4, r0
 801d088:	4804      	ldr	r0, [pc, #16]	@ (801d09c <rmw_take_with_info+0xa4>)
 801d08a:	f7ff f881 	bl	801c190 <put_memory>
 801d08e:	e7dd      	b.n	801d04c <rmw_take_with_info+0x54>
 801d090:	200c      	movs	r0, #12
 801d092:	b009      	add	sp, #36	@ 0x24
 801d094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d096:	bf00      	nop
 801d098:	08022734 	.word	0x08022734
 801d09c:	20016404 	.word	0x20016404

0801d0a0 <rmw_uxrce_transport_init>:
 801d0a0:	b508      	push	{r3, lr}
 801d0a2:	b108      	cbz	r0, 801d0a8 <rmw_uxrce_transport_init+0x8>
 801d0a4:	f100 0210 	add.w	r2, r0, #16
 801d0a8:	b139      	cbz	r1, 801d0ba <rmw_uxrce_transport_init+0x1a>
 801d0aa:	6949      	ldr	r1, [r1, #20]
 801d0ac:	4610      	mov	r0, r2
 801d0ae:	f000 fd43 	bl	801db38 <uxr_init_custom_transport>
 801d0b2:	f080 0001 	eor.w	r0, r0, #1
 801d0b6:	b2c0      	uxtb	r0, r0
 801d0b8:	bd08      	pop	{r3, pc}
 801d0ba:	4b04      	ldr	r3, [pc, #16]	@ (801d0cc <rmw_uxrce_transport_init+0x2c>)
 801d0bc:	4610      	mov	r0, r2
 801d0be:	6859      	ldr	r1, [r3, #4]
 801d0c0:	f000 fd3a 	bl	801db38 <uxr_init_custom_transport>
 801d0c4:	f080 0001 	eor.w	r0, r0, #1
 801d0c8:	b2c0      	uxtb	r0, r0
 801d0ca:	bd08      	pop	{r3, pc}
 801d0cc:	20011adc 	.word	0x20011adc

0801d0d0 <rmw_wait>:
 801d0d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d0d4:	b089      	sub	sp, #36	@ 0x24
 801d0d6:	4605      	mov	r5, r0
 801d0d8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d0da:	460e      	mov	r6, r1
 801d0dc:	4698      	mov	r8, r3
 801d0de:	4691      	mov	r9, r2
 801d0e0:	2a00      	cmp	r2, #0
 801d0e2:	f000 810a 	beq.w	801d2fa <rmw_wait+0x22a>
 801d0e6:	b16c      	cbz	r4, 801d104 <rmw_wait+0x34>
 801d0e8:	4bae      	ldr	r3, [pc, #696]	@ (801d3a4 <rmw_wait+0x2d4>)
 801d0ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801d0ec:	af04      	add	r7, sp, #16
 801d0ee:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801d0f2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801d0f6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801d0fa:	f7fe fe6d 	bl	801bdd8 <rmw_time_equal>
 801d0fe:	2800      	cmp	r0, #0
 801d100:	f000 8127 	beq.w	801d352 <rmw_wait+0x282>
 801d104:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801d108:	f7f7 fe9a 	bl	8014e40 <rmw_uxrce_clean_expired_static_input_buffer>
 801d10c:	4ba6      	ldr	r3, [pc, #664]	@ (801d3a8 <rmw_wait+0x2d8>)
 801d10e:	681c      	ldr	r4, [r3, #0]
 801d110:	b14c      	cbz	r4, 801d126 <rmw_wait+0x56>
 801d112:	4623      	mov	r3, r4
 801d114:	2100      	movs	r1, #0
 801d116:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801d11a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801d11e:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 801d122:	2b00      	cmp	r3, #0
 801d124:	d1f7      	bne.n	801d116 <rmw_wait+0x46>
 801d126:	f1b9 0f00 	cmp.w	r9, #0
 801d12a:	d011      	beq.n	801d150 <rmw_wait+0x80>
 801d12c:	f8d9 1000 	ldr.w	r1, [r9]
 801d130:	b171      	cbz	r1, 801d150 <rmw_wait+0x80>
 801d132:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801d136:	2300      	movs	r3, #0
 801d138:	2001      	movs	r0, #1
 801d13a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801d13e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801d140:	6912      	ldr	r2, [r2, #16]
 801d142:	3301      	adds	r3, #1
 801d144:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801d148:	4299      	cmp	r1, r3
 801d14a:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801d14e:	d1f4      	bne.n	801d13a <rmw_wait+0x6a>
 801d150:	f1b8 0f00 	cmp.w	r8, #0
 801d154:	d011      	beq.n	801d17a <rmw_wait+0xaa>
 801d156:	f8d8 1000 	ldr.w	r1, [r8]
 801d15a:	b171      	cbz	r1, 801d17a <rmw_wait+0xaa>
 801d15c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801d160:	2300      	movs	r3, #0
 801d162:	2001      	movs	r0, #1
 801d164:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801d168:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 801d16a:	6912      	ldr	r2, [r2, #16]
 801d16c:	3301      	adds	r3, #1
 801d16e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801d172:	4299      	cmp	r1, r3
 801d174:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801d178:	d1f4      	bne.n	801d164 <rmw_wait+0x94>
 801d17a:	b185      	cbz	r5, 801d19e <rmw_wait+0xce>
 801d17c:	6829      	ldr	r1, [r5, #0]
 801d17e:	b171      	cbz	r1, 801d19e <rmw_wait+0xce>
 801d180:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801d184:	2300      	movs	r3, #0
 801d186:	2001      	movs	r0, #1
 801d188:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801d18c:	6a12      	ldr	r2, [r2, #32]
 801d18e:	6912      	ldr	r2, [r2, #16]
 801d190:	3301      	adds	r3, #1
 801d192:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801d196:	4299      	cmp	r1, r3
 801d198:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801d19c:	d1f4      	bne.n	801d188 <rmw_wait+0xb8>
 801d19e:	b34c      	cbz	r4, 801d1f4 <rmw_wait+0x124>
 801d1a0:	4622      	mov	r2, r4
 801d1a2:	2300      	movs	r3, #0
 801d1a4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801d1a8:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 801d1ac:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 801d1b0:	440b      	add	r3, r1
 801d1b2:	b2db      	uxtb	r3, r3
 801d1b4:	2a00      	cmp	r2, #0
 801d1b6:	d1f5      	bne.n	801d1a4 <rmw_wait+0xd4>
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	f000 8084 	beq.w	801d2c6 <rmw_wait+0x1f6>
 801d1be:	1c7a      	adds	r2, r7, #1
 801d1c0:	d00d      	beq.n	801d1de <rmw_wait+0x10e>
 801d1c2:	ee07 7a90 	vmov	s15, r7
 801d1c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801d1ca:	ee07 3a90 	vmov	s15, r3
 801d1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d1d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d1d6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801d1da:	ee17 7a90 	vmov	r7, s15
 801d1de:	68a0      	ldr	r0, [r4, #8]
 801d1e0:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 801d1e4:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801d1e8:	2b00      	cmp	r3, #0
 801d1ea:	f040 8090 	bne.w	801d30e <rmw_wait+0x23e>
 801d1ee:	6864      	ldr	r4, [r4, #4]
 801d1f0:	2c00      	cmp	r4, #0
 801d1f2:	d1f4      	bne.n	801d1de <rmw_wait+0x10e>
 801d1f4:	f1b9 0f00 	cmp.w	r9, #0
 801d1f8:	f000 80bc 	beq.w	801d374 <rmw_wait+0x2a4>
 801d1fc:	f8d9 7000 	ldr.w	r7, [r9]
 801d200:	2f00      	cmp	r7, #0
 801d202:	f000 808e 	beq.w	801d322 <rmw_wait+0x252>
 801d206:	2400      	movs	r4, #0
 801d208:	4627      	mov	r7, r4
 801d20a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d20e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d212:	f7f7 fded 	bl	8014df0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801d216:	2800      	cmp	r0, #0
 801d218:	d05f      	beq.n	801d2da <rmw_wait+0x20a>
 801d21a:	f8d9 3000 	ldr.w	r3, [r9]
 801d21e:	3401      	adds	r4, #1
 801d220:	42a3      	cmp	r3, r4
 801d222:	f04f 0701 	mov.w	r7, #1
 801d226:	d8f0      	bhi.n	801d20a <rmw_wait+0x13a>
 801d228:	f1b8 0f00 	cmp.w	r8, #0
 801d22c:	d012      	beq.n	801d254 <rmw_wait+0x184>
 801d22e:	f8d8 3000 	ldr.w	r3, [r8]
 801d232:	b17b      	cbz	r3, 801d254 <rmw_wait+0x184>
 801d234:	2400      	movs	r4, #0
 801d236:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d23a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d23e:	f7f7 fdd7 	bl	8014df0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801d242:	2800      	cmp	r0, #0
 801d244:	d051      	beq.n	801d2ea <rmw_wait+0x21a>
 801d246:	f8d8 3000 	ldr.w	r3, [r8]
 801d24a:	3401      	adds	r4, #1
 801d24c:	42a3      	cmp	r3, r4
 801d24e:	f04f 0701 	mov.w	r7, #1
 801d252:	d8f0      	bhi.n	801d236 <rmw_wait+0x166>
 801d254:	b1dd      	cbz	r5, 801d28e <rmw_wait+0x1be>
 801d256:	682b      	ldr	r3, [r5, #0]
 801d258:	b1cb      	cbz	r3, 801d28e <rmw_wait+0x1be>
 801d25a:	2400      	movs	r4, #0
 801d25c:	686b      	ldr	r3, [r5, #4]
 801d25e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d262:	f7f7 fdc5 	bl	8014df0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801d266:	b158      	cbz	r0, 801d280 <rmw_wait+0x1b0>
 801d268:	682b      	ldr	r3, [r5, #0]
 801d26a:	3401      	adds	r4, #1
 801d26c:	42a3      	cmp	r3, r4
 801d26e:	d969      	bls.n	801d344 <rmw_wait+0x274>
 801d270:	686b      	ldr	r3, [r5, #4]
 801d272:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801d276:	2701      	movs	r7, #1
 801d278:	f7f7 fdba 	bl	8014df0 <rmw_uxrce_find_static_input_buffer_by_owner>
 801d27c:	2800      	cmp	r0, #0
 801d27e:	d1f3      	bne.n	801d268 <rmw_wait+0x198>
 801d280:	e9d5 3200 	ldrd	r3, r2, [r5]
 801d284:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801d288:	3401      	adds	r4, #1
 801d28a:	42a3      	cmp	r3, r4
 801d28c:	d8e6      	bhi.n	801d25c <rmw_wait+0x18c>
 801d28e:	b1a6      	cbz	r6, 801d2ba <rmw_wait+0x1ea>
 801d290:	6834      	ldr	r4, [r6, #0]
 801d292:	b194      	cbz	r4, 801d2ba <rmw_wait+0x1ea>
 801d294:	2300      	movs	r3, #0
 801d296:	461d      	mov	r5, r3
 801d298:	e004      	b.n	801d2a4 <rmw_wait+0x1d4>
 801d29a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801d29e:	3301      	adds	r3, #1
 801d2a0:	42a3      	cmp	r3, r4
 801d2a2:	d00a      	beq.n	801d2ba <rmw_wait+0x1ea>
 801d2a4:	6870      	ldr	r0, [r6, #4]
 801d2a6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801d2aa:	7c0a      	ldrb	r2, [r1, #16]
 801d2ac:	2a00      	cmp	r2, #0
 801d2ae:	d0f4      	beq.n	801d29a <rmw_wait+0x1ca>
 801d2b0:	3301      	adds	r3, #1
 801d2b2:	42a3      	cmp	r3, r4
 801d2b4:	740d      	strb	r5, [r1, #16]
 801d2b6:	4617      	mov	r7, r2
 801d2b8:	d1f4      	bne.n	801d2a4 <rmw_wait+0x1d4>
 801d2ba:	2f00      	cmp	r7, #0
 801d2bc:	d03e      	beq.n	801d33c <rmw_wait+0x26c>
 801d2be:	2000      	movs	r0, #0
 801d2c0:	b009      	add	sp, #36	@ 0x24
 801d2c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d2c6:	68a0      	ldr	r0, [r4, #8]
 801d2c8:	2100      	movs	r1, #0
 801d2ca:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801d2ce:	f7f9 fcbd 	bl	8016c4c <uxr_run_session_timeout>
 801d2d2:	6864      	ldr	r4, [r4, #4]
 801d2d4:	2c00      	cmp	r4, #0
 801d2d6:	d1f6      	bne.n	801d2c6 <rmw_wait+0x1f6>
 801d2d8:	e78c      	b.n	801d1f4 <rmw_wait+0x124>
 801d2da:	e9d9 3200 	ldrd	r3, r2, [r9]
 801d2de:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801d2e2:	3401      	adds	r4, #1
 801d2e4:	42a3      	cmp	r3, r4
 801d2e6:	d890      	bhi.n	801d20a <rmw_wait+0x13a>
 801d2e8:	e79e      	b.n	801d228 <rmw_wait+0x158>
 801d2ea:	e9d8 3200 	ldrd	r3, r2, [r8]
 801d2ee:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801d2f2:	3401      	adds	r4, #1
 801d2f4:	429c      	cmp	r4, r3
 801d2f6:	d39e      	bcc.n	801d236 <rmw_wait+0x166>
 801d2f8:	e7ac      	b.n	801d254 <rmw_wait+0x184>
 801d2fa:	2b00      	cmp	r3, #0
 801d2fc:	f47f aef3 	bne.w	801d0e6 <rmw_wait+0x16>
 801d300:	2800      	cmp	r0, #0
 801d302:	f47f aef0 	bne.w	801d0e6 <rmw_wait+0x16>
 801d306:	2900      	cmp	r1, #0
 801d308:	f47f aeed 	bne.w	801d0e6 <rmw_wait+0x16>
 801d30c:	e7d7      	b.n	801d2be <rmw_wait+0x1ee>
 801d30e:	4639      	mov	r1, r7
 801d310:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801d314:	f7f9 fcb4 	bl	8016c80 <uxr_run_session_until_data>
 801d318:	6864      	ldr	r4, [r4, #4]
 801d31a:	2c00      	cmp	r4, #0
 801d31c:	f47f af5f 	bne.w	801d1de <rmw_wait+0x10e>
 801d320:	e768      	b.n	801d1f4 <rmw_wait+0x124>
 801d322:	f1b8 0f00 	cmp.w	r8, #0
 801d326:	d032      	beq.n	801d38e <rmw_wait+0x2be>
 801d328:	f8d8 3000 	ldr.w	r3, [r8]
 801d32c:	2b00      	cmp	r3, #0
 801d32e:	d181      	bne.n	801d234 <rmw_wait+0x164>
 801d330:	461f      	mov	r7, r3
 801d332:	2d00      	cmp	r5, #0
 801d334:	d18f      	bne.n	801d256 <rmw_wait+0x186>
 801d336:	462f      	mov	r7, r5
 801d338:	2e00      	cmp	r6, #0
 801d33a:	d1a9      	bne.n	801d290 <rmw_wait+0x1c0>
 801d33c:	2002      	movs	r0, #2
 801d33e:	b009      	add	sp, #36	@ 0x24
 801d340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d344:	2e00      	cmp	r6, #0
 801d346:	d0ba      	beq.n	801d2be <rmw_wait+0x1ee>
 801d348:	6834      	ldr	r4, [r6, #0]
 801d34a:	2701      	movs	r7, #1
 801d34c:	2c00      	cmp	r4, #0
 801d34e:	d1a1      	bne.n	801d294 <rmw_wait+0x1c4>
 801d350:	e7b5      	b.n	801d2be <rmw_wait+0x1ee>
 801d352:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801d356:	f7fe fd93 	bl	801be80 <rmw_time_total_nsec>
 801d35a:	2300      	movs	r3, #0
 801d35c:	4a13      	ldr	r2, [pc, #76]	@ (801d3ac <rmw_wait+0x2dc>)
 801d35e:	f7e3 f9fb 	bl	8000758 <__aeabi_uldivmod>
 801d362:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 801d366:	f171 0300 	sbcs.w	r3, r1, #0
 801d36a:	4607      	mov	r7, r0
 801d36c:	bfa8      	it	ge
 801d36e:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 801d372:	e6c9      	b.n	801d108 <rmw_wait+0x38>
 801d374:	f1b8 0f00 	cmp.w	r8, #0
 801d378:	d009      	beq.n	801d38e <rmw_wait+0x2be>
 801d37a:	f8d8 3000 	ldr.w	r3, [r8]
 801d37e:	464f      	mov	r7, r9
 801d380:	2b00      	cmp	r3, #0
 801d382:	f47f af57 	bne.w	801d234 <rmw_wait+0x164>
 801d386:	2d00      	cmp	r5, #0
 801d388:	f47f af65 	bne.w	801d256 <rmw_wait+0x186>
 801d38c:	e7d3      	b.n	801d336 <rmw_wait+0x266>
 801d38e:	b17d      	cbz	r5, 801d3b0 <rmw_wait+0x2e0>
 801d390:	682b      	ldr	r3, [r5, #0]
 801d392:	4647      	mov	r7, r8
 801d394:	2b00      	cmp	r3, #0
 801d396:	f47f af60 	bne.w	801d25a <rmw_wait+0x18a>
 801d39a:	2e00      	cmp	r6, #0
 801d39c:	f47f af78 	bne.w	801d290 <rmw_wait+0x1c0>
 801d3a0:	e7cc      	b.n	801d33c <rmw_wait+0x26c>
 801d3a2:	bf00      	nop
 801d3a4:	08021540 	.word	0x08021540
 801d3a8:	200163f4 	.word	0x200163f4
 801d3ac:	000f4240 	.word	0x000f4240
 801d3b0:	2e00      	cmp	r6, #0
 801d3b2:	d0c3      	beq.n	801d33c <rmw_wait+0x26c>
 801d3b4:	6834      	ldr	r4, [r6, #0]
 801d3b6:	462f      	mov	r7, r5
 801d3b8:	2c00      	cmp	r4, #0
 801d3ba:	f47f af6b 	bne.w	801d294 <rmw_wait+0x1c4>
 801d3be:	e7bd      	b.n	801d33c <rmw_wait+0x26c>

0801d3c0 <rmw_create_wait_set>:
 801d3c0:	b508      	push	{r3, lr}
 801d3c2:	4803      	ldr	r0, [pc, #12]	@ (801d3d0 <rmw_create_wait_set+0x10>)
 801d3c4:	f7fe fed4 	bl	801c170 <get_memory>
 801d3c8:	b108      	cbz	r0, 801d3ce <rmw_create_wait_set+0xe>
 801d3ca:	6880      	ldr	r0, [r0, #8]
 801d3cc:	3010      	adds	r0, #16
 801d3ce:	bd08      	pop	{r3, pc}
 801d3d0:	20016434 	.word	0x20016434

0801d3d4 <rmw_destroy_wait_set>:
 801d3d4:	b508      	push	{r3, lr}
 801d3d6:	4b08      	ldr	r3, [pc, #32]	@ (801d3f8 <rmw_destroy_wait_set+0x24>)
 801d3d8:	6819      	ldr	r1, [r3, #0]
 801d3da:	b911      	cbnz	r1, 801d3e2 <rmw_destroy_wait_set+0xe>
 801d3dc:	e00a      	b.n	801d3f4 <rmw_destroy_wait_set+0x20>
 801d3de:	6849      	ldr	r1, [r1, #4]
 801d3e0:	b141      	cbz	r1, 801d3f4 <rmw_destroy_wait_set+0x20>
 801d3e2:	688b      	ldr	r3, [r1, #8]
 801d3e4:	3310      	adds	r3, #16
 801d3e6:	4298      	cmp	r0, r3
 801d3e8:	d1f9      	bne.n	801d3de <rmw_destroy_wait_set+0xa>
 801d3ea:	4803      	ldr	r0, [pc, #12]	@ (801d3f8 <rmw_destroy_wait_set+0x24>)
 801d3ec:	f7fe fed0 	bl	801c190 <put_memory>
 801d3f0:	2000      	movs	r0, #0
 801d3f2:	bd08      	pop	{r3, pc}
 801d3f4:	2001      	movs	r0, #1
 801d3f6:	bd08      	pop	{r3, pc}
 801d3f8:	20016434 	.word	0x20016434

0801d3fc <rmw_uros_epoch_nanos>:
 801d3fc:	4b05      	ldr	r3, [pc, #20]	@ (801d414 <rmw_uros_epoch_nanos+0x18>)
 801d3fe:	681b      	ldr	r3, [r3, #0]
 801d400:	b123      	cbz	r3, 801d40c <rmw_uros_epoch_nanos+0x10>
 801d402:	6898      	ldr	r0, [r3, #8]
 801d404:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801d408:	f7f9 b890 	b.w	801652c <uxr_epoch_nanos>
 801d40c:	2000      	movs	r0, #0
 801d40e:	2100      	movs	r1, #0
 801d410:	4770      	bx	lr
 801d412:	bf00      	nop
 801d414:	200163f4 	.word	0x200163f4

0801d418 <rosidl_runtime_c__float__Sequence__init>:
 801d418:	b530      	push	{r4, r5, lr}
 801d41a:	4604      	mov	r4, r0
 801d41c:	b087      	sub	sp, #28
 801d41e:	b130      	cbz	r0, 801d42e <rosidl_runtime_c__float__Sequence__init+0x16>
 801d420:	460d      	mov	r5, r1
 801d422:	b931      	cbnz	r1, 801d432 <rosidl_runtime_c__float__Sequence__init+0x1a>
 801d424:	4608      	mov	r0, r1
 801d426:	e9c4 0500 	strd	r0, r5, [r4]
 801d42a:	60a5      	str	r5, [r4, #8]
 801d42c:	2001      	movs	r0, #1
 801d42e:	b007      	add	sp, #28
 801d430:	bd30      	pop	{r4, r5, pc}
 801d432:	a801      	add	r0, sp, #4
 801d434:	f7f7 f85a 	bl	80144ec <rcutils_get_default_allocator>
 801d438:	9b01      	ldr	r3, [sp, #4]
 801d43a:	9905      	ldr	r1, [sp, #20]
 801d43c:	00a8      	lsls	r0, r5, #2
 801d43e:	4798      	blx	r3
 801d440:	2800      	cmp	r0, #0
 801d442:	d1f0      	bne.n	801d426 <rosidl_runtime_c__float__Sequence__init+0xe>
 801d444:	e7f3      	b.n	801d42e <rosidl_runtime_c__float__Sequence__init+0x16>
 801d446:	bf00      	nop

0801d448 <rosidl_runtime_c__float__Sequence__fini>:
 801d448:	b188      	cbz	r0, 801d46e <rosidl_runtime_c__float__Sequence__fini+0x26>
 801d44a:	b510      	push	{r4, lr}
 801d44c:	6803      	ldr	r3, [r0, #0]
 801d44e:	b086      	sub	sp, #24
 801d450:	4604      	mov	r4, r0
 801d452:	b153      	cbz	r3, 801d46a <rosidl_runtime_c__float__Sequence__fini+0x22>
 801d454:	a801      	add	r0, sp, #4
 801d456:	f7f7 f849 	bl	80144ec <rcutils_get_default_allocator>
 801d45a:	9b02      	ldr	r3, [sp, #8]
 801d45c:	9905      	ldr	r1, [sp, #20]
 801d45e:	6820      	ldr	r0, [r4, #0]
 801d460:	4798      	blx	r3
 801d462:	2300      	movs	r3, #0
 801d464:	e9c4 3300 	strd	r3, r3, [r4]
 801d468:	60a3      	str	r3, [r4, #8]
 801d46a:	b006      	add	sp, #24
 801d46c:	bd10      	pop	{r4, pc}
 801d46e:	4770      	bx	lr

0801d470 <sensor_msgs__msg__BatteryState__init>:
 801d470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d474:	4605      	mov	r5, r0
 801d476:	2800      	cmp	r0, #0
 801d478:	d048      	beq.n	801d50c <sensor_msgs__msg__BatteryState__init+0x9c>
 801d47a:	f000 f8a3 	bl	801d5c4 <std_msgs__msg__Header__init>
 801d47e:	4604      	mov	r4, r0
 801d480:	b370      	cbz	r0, 801d4e0 <sensor_msgs__msg__BatteryState__init+0x70>
 801d482:	f105 0634 	add.w	r6, r5, #52	@ 0x34
 801d486:	2100      	movs	r1, #0
 801d488:	4630      	mov	r0, r6
 801d48a:	f7ff ffc5 	bl	801d418 <rosidl_runtime_c__float__Sequence__init>
 801d48e:	4604      	mov	r4, r0
 801d490:	2800      	cmp	r0, #0
 801d492:	d047      	beq.n	801d524 <sensor_msgs__msg__BatteryState__init+0xb4>
 801d494:	f105 0740 	add.w	r7, r5, #64	@ 0x40
 801d498:	2100      	movs	r1, #0
 801d49a:	4638      	mov	r0, r7
 801d49c:	f7ff ffbc 	bl	801d418 <rosidl_runtime_c__float__Sequence__init>
 801d4a0:	4604      	mov	r4, r0
 801d4a2:	b3b8      	cbz	r0, 801d514 <sensor_msgs__msg__BatteryState__init+0xa4>
 801d4a4:	f105 084c 	add.w	r8, r5, #76	@ 0x4c
 801d4a8:	4640      	mov	r0, r8
 801d4aa:	f002 fae9 	bl	801fa80 <rosidl_runtime_c__String__init>
 801d4ae:	4604      	mov	r4, r0
 801d4b0:	b3e8      	cbz	r0, 801d52e <sensor_msgs__msg__BatteryState__init+0xbe>
 801d4b2:	f105 0958 	add.w	r9, r5, #88	@ 0x58
 801d4b6:	4648      	mov	r0, r9
 801d4b8:	f002 fae2 	bl	801fa80 <rosidl_runtime_c__String__init>
 801d4bc:	4604      	mov	r4, r0
 801d4be:	bb10      	cbnz	r0, 801d506 <sensor_msgs__msg__BatteryState__init+0x96>
 801d4c0:	4628      	mov	r0, r5
 801d4c2:	f000 f8a3 	bl	801d60c <std_msgs__msg__Header__fini>
 801d4c6:	4630      	mov	r0, r6
 801d4c8:	f7ff ffbe 	bl	801d448 <rosidl_runtime_c__float__Sequence__fini>
 801d4cc:	4638      	mov	r0, r7
 801d4ce:	f7ff ffbb 	bl	801d448 <rosidl_runtime_c__float__Sequence__fini>
 801d4d2:	4640      	mov	r0, r8
 801d4d4:	f002 faea 	bl	801faac <rosidl_runtime_c__String__fini>
 801d4d8:	4648      	mov	r0, r9
 801d4da:	f002 fae7 	bl	801faac <rosidl_runtime_c__String__fini>
 801d4de:	e012      	b.n	801d506 <sensor_msgs__msg__BatteryState__init+0x96>
 801d4e0:	4628      	mov	r0, r5
 801d4e2:	f000 f893 	bl	801d60c <std_msgs__msg__Header__fini>
 801d4e6:	f105 0034 	add.w	r0, r5, #52	@ 0x34
 801d4ea:	f7ff ffad 	bl	801d448 <rosidl_runtime_c__float__Sequence__fini>
 801d4ee:	f105 0040 	add.w	r0, r5, #64	@ 0x40
 801d4f2:	f7ff ffa9 	bl	801d448 <rosidl_runtime_c__float__Sequence__fini>
 801d4f6:	f105 004c 	add.w	r0, r5, #76	@ 0x4c
 801d4fa:	f002 fad7 	bl	801faac <rosidl_runtime_c__String__fini>
 801d4fe:	f105 0058 	add.w	r0, r5, #88	@ 0x58
 801d502:	f002 fad3 	bl	801faac <rosidl_runtime_c__String__fini>
 801d506:	4620      	mov	r0, r4
 801d508:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d50c:	4604      	mov	r4, r0
 801d50e:	4620      	mov	r0, r4
 801d510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d514:	4628      	mov	r0, r5
 801d516:	f000 f879 	bl	801d60c <std_msgs__msg__Header__fini>
 801d51a:	4630      	mov	r0, r6
 801d51c:	f7ff ff94 	bl	801d448 <rosidl_runtime_c__float__Sequence__fini>
 801d520:	4638      	mov	r0, r7
 801d522:	e7e6      	b.n	801d4f2 <sensor_msgs__msg__BatteryState__init+0x82>
 801d524:	4628      	mov	r0, r5
 801d526:	f000 f871 	bl	801d60c <std_msgs__msg__Header__fini>
 801d52a:	4630      	mov	r0, r6
 801d52c:	e7dd      	b.n	801d4ea <sensor_msgs__msg__BatteryState__init+0x7a>
 801d52e:	4628      	mov	r0, r5
 801d530:	f000 f86c 	bl	801d60c <std_msgs__msg__Header__fini>
 801d534:	4630      	mov	r0, r6
 801d536:	f7ff ff87 	bl	801d448 <rosidl_runtime_c__float__Sequence__fini>
 801d53a:	4638      	mov	r0, r7
 801d53c:	f7ff ff84 	bl	801d448 <rosidl_runtime_c__float__Sequence__fini>
 801d540:	4640      	mov	r0, r8
 801d542:	f002 fab3 	bl	801faac <rosidl_runtime_c__String__fini>
 801d546:	f105 0058 	add.w	r0, r5, #88	@ 0x58
 801d54a:	f002 faaf 	bl	801faac <rosidl_runtime_c__String__fini>
 801d54e:	e7da      	b.n	801d506 <sensor_msgs__msg__BatteryState__init+0x96>

0801d550 <sensor_msgs__msg__BatteryState__fini>:
 801d550:	b1a8      	cbz	r0, 801d57e <sensor_msgs__msg__BatteryState__fini+0x2e>
 801d552:	b510      	push	{r4, lr}
 801d554:	4604      	mov	r4, r0
 801d556:	f000 f859 	bl	801d60c <std_msgs__msg__Header__fini>
 801d55a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 801d55e:	f7ff ff73 	bl	801d448 <rosidl_runtime_c__float__Sequence__fini>
 801d562:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 801d566:	f7ff ff6f 	bl	801d448 <rosidl_runtime_c__float__Sequence__fini>
 801d56a:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 801d56e:	f002 fa9d 	bl	801faac <rosidl_runtime_c__String__fini>
 801d572:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801d576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d57a:	f002 ba97 	b.w	801faac <rosidl_runtime_c__String__fini>
 801d57e:	4770      	bx	lr

0801d580 <sensor_msgs__msg__Temperature__init>:
 801d580:	b538      	push	{r3, r4, r5, lr}
 801d582:	4604      	mov	r4, r0
 801d584:	b128      	cbz	r0, 801d592 <sensor_msgs__msg__Temperature__init+0x12>
 801d586:	f000 f81d 	bl	801d5c4 <std_msgs__msg__Header__init>
 801d58a:	4605      	mov	r5, r0
 801d58c:	b120      	cbz	r0, 801d598 <sensor_msgs__msg__Temperature__init+0x18>
 801d58e:	4628      	mov	r0, r5
 801d590:	bd38      	pop	{r3, r4, r5, pc}
 801d592:	4605      	mov	r5, r0
 801d594:	4628      	mov	r0, r5
 801d596:	bd38      	pop	{r3, r4, r5, pc}
 801d598:	4620      	mov	r0, r4
 801d59a:	f000 f837 	bl	801d60c <std_msgs__msg__Header__fini>
 801d59e:	4628      	mov	r0, r5
 801d5a0:	bd38      	pop	{r3, r4, r5, pc}
 801d5a2:	bf00      	nop

0801d5a4 <sensor_msgs__msg__Temperature__fini>:
 801d5a4:	b108      	cbz	r0, 801d5aa <sensor_msgs__msg__Temperature__fini+0x6>
 801d5a6:	f000 b831 	b.w	801d60c <std_msgs__msg__Header__fini>
 801d5aa:	4770      	bx	lr

0801d5ac <std_msgs__msg__ColorRGBA__init>:
 801d5ac:	3800      	subs	r0, #0
 801d5ae:	bf18      	it	ne
 801d5b0:	2001      	movne	r0, #1
 801d5b2:	4770      	bx	lr

0801d5b4 <std_msgs__msg__ColorRGBA__fini>:
 801d5b4:	4770      	bx	lr
 801d5b6:	bf00      	nop

0801d5b8 <std_msgs__msg__Float64__init>:
 801d5b8:	3800      	subs	r0, #0
 801d5ba:	bf18      	it	ne
 801d5bc:	2001      	movne	r0, #1
 801d5be:	4770      	bx	lr

0801d5c0 <std_msgs__msg__Float64__fini>:
 801d5c0:	4770      	bx	lr
 801d5c2:	bf00      	nop

0801d5c4 <std_msgs__msg__Header__init>:
 801d5c4:	b570      	push	{r4, r5, r6, lr}
 801d5c6:	4605      	mov	r5, r0
 801d5c8:	b1a8      	cbz	r0, 801d5f6 <std_msgs__msg__Header__init+0x32>
 801d5ca:	f000 f837 	bl	801d63c <builtin_interfaces__msg__Time__init>
 801d5ce:	4604      	mov	r4, r0
 801d5d0:	b140      	cbz	r0, 801d5e4 <std_msgs__msg__Header__init+0x20>
 801d5d2:	f105 0608 	add.w	r6, r5, #8
 801d5d6:	4630      	mov	r0, r6
 801d5d8:	f002 fa52 	bl	801fa80 <rosidl_runtime_c__String__init>
 801d5dc:	4604      	mov	r4, r0
 801d5de:	b168      	cbz	r0, 801d5fc <std_msgs__msg__Header__init+0x38>
 801d5e0:	4620      	mov	r0, r4
 801d5e2:	bd70      	pop	{r4, r5, r6, pc}
 801d5e4:	4628      	mov	r0, r5
 801d5e6:	f000 f82d 	bl	801d644 <builtin_interfaces__msg__Time__fini>
 801d5ea:	f105 0008 	add.w	r0, r5, #8
 801d5ee:	f002 fa5d 	bl	801faac <rosidl_runtime_c__String__fini>
 801d5f2:	4620      	mov	r0, r4
 801d5f4:	bd70      	pop	{r4, r5, r6, pc}
 801d5f6:	4604      	mov	r4, r0
 801d5f8:	4620      	mov	r0, r4
 801d5fa:	bd70      	pop	{r4, r5, r6, pc}
 801d5fc:	4628      	mov	r0, r5
 801d5fe:	f000 f821 	bl	801d644 <builtin_interfaces__msg__Time__fini>
 801d602:	4630      	mov	r0, r6
 801d604:	f002 fa52 	bl	801faac <rosidl_runtime_c__String__fini>
 801d608:	e7ea      	b.n	801d5e0 <std_msgs__msg__Header__init+0x1c>
 801d60a:	bf00      	nop

0801d60c <std_msgs__msg__Header__fini>:
 801d60c:	b148      	cbz	r0, 801d622 <std_msgs__msg__Header__fini+0x16>
 801d60e:	b510      	push	{r4, lr}
 801d610:	4604      	mov	r4, r0
 801d612:	f000 f817 	bl	801d644 <builtin_interfaces__msg__Time__fini>
 801d616:	f104 0008 	add.w	r0, r4, #8
 801d61a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d61e:	f002 ba45 	b.w	801faac <rosidl_runtime_c__String__fini>
 801d622:	4770      	bx	lr

0801d624 <std_msgs__msg__Int32__init>:
 801d624:	3800      	subs	r0, #0
 801d626:	bf18      	it	ne
 801d628:	2001      	movne	r0, #1
 801d62a:	4770      	bx	lr

0801d62c <std_msgs__msg__Int32__fini>:
 801d62c:	4770      	bx	lr
 801d62e:	bf00      	nop

0801d630 <std_msgs__msg__Int64__init>:
 801d630:	3800      	subs	r0, #0
 801d632:	bf18      	it	ne
 801d634:	2001      	movne	r0, #1
 801d636:	4770      	bx	lr

0801d638 <std_msgs__msg__Int64__fini>:
 801d638:	4770      	bx	lr
 801d63a:	bf00      	nop

0801d63c <builtin_interfaces__msg__Time__init>:
 801d63c:	3800      	subs	r0, #0
 801d63e:	bf18      	it	ne
 801d640:	2001      	movne	r0, #1
 801d642:	4770      	bx	lr

0801d644 <builtin_interfaces__msg__Time__fini>:
 801d644:	4770      	bx	lr
 801d646:	bf00      	nop

0801d648 <ucdr_serialize_endian_array_char>:
 801d648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d64c:	4619      	mov	r1, r3
 801d64e:	461f      	mov	r7, r3
 801d650:	4605      	mov	r5, r0
 801d652:	4690      	mov	r8, r2
 801d654:	f7f5 fe42 	bl	80132dc <ucdr_check_buffer_available_for>
 801d658:	b9e0      	cbnz	r0, 801d694 <ucdr_serialize_endian_array_char+0x4c>
 801d65a:	463e      	mov	r6, r7
 801d65c:	e009      	b.n	801d672 <ucdr_serialize_endian_array_char+0x2a>
 801d65e:	68a8      	ldr	r0, [r5, #8]
 801d660:	f003 f875 	bl	802074e <memcpy>
 801d664:	68ab      	ldr	r3, [r5, #8]
 801d666:	6928      	ldr	r0, [r5, #16]
 801d668:	4423      	add	r3, r4
 801d66a:	4420      	add	r0, r4
 801d66c:	1b36      	subs	r6, r6, r4
 801d66e:	60ab      	str	r3, [r5, #8]
 801d670:	6128      	str	r0, [r5, #16]
 801d672:	4631      	mov	r1, r6
 801d674:	2201      	movs	r2, #1
 801d676:	4628      	mov	r0, r5
 801d678:	f7f5 feb8 	bl	80133ec <ucdr_check_final_buffer_behavior_array>
 801d67c:	1bb9      	subs	r1, r7, r6
 801d67e:	4441      	add	r1, r8
 801d680:	4604      	mov	r4, r0
 801d682:	4602      	mov	r2, r0
 801d684:	2800      	cmp	r0, #0
 801d686:	d1ea      	bne.n	801d65e <ucdr_serialize_endian_array_char+0x16>
 801d688:	2301      	movs	r3, #1
 801d68a:	7da8      	ldrb	r0, [r5, #22]
 801d68c:	756b      	strb	r3, [r5, #21]
 801d68e:	4058      	eors	r0, r3
 801d690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d694:	463a      	mov	r2, r7
 801d696:	68a8      	ldr	r0, [r5, #8]
 801d698:	4641      	mov	r1, r8
 801d69a:	f003 f858 	bl	802074e <memcpy>
 801d69e:	68aa      	ldr	r2, [r5, #8]
 801d6a0:	692b      	ldr	r3, [r5, #16]
 801d6a2:	443a      	add	r2, r7
 801d6a4:	443b      	add	r3, r7
 801d6a6:	60aa      	str	r2, [r5, #8]
 801d6a8:	612b      	str	r3, [r5, #16]
 801d6aa:	e7ed      	b.n	801d688 <ucdr_serialize_endian_array_char+0x40>

0801d6ac <ucdr_deserialize_endian_array_char>:
 801d6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d6b0:	4619      	mov	r1, r3
 801d6b2:	461f      	mov	r7, r3
 801d6b4:	4605      	mov	r5, r0
 801d6b6:	4690      	mov	r8, r2
 801d6b8:	f7f5 fe10 	bl	80132dc <ucdr_check_buffer_available_for>
 801d6bc:	b9e0      	cbnz	r0, 801d6f8 <ucdr_deserialize_endian_array_char+0x4c>
 801d6be:	463e      	mov	r6, r7
 801d6c0:	e009      	b.n	801d6d6 <ucdr_deserialize_endian_array_char+0x2a>
 801d6c2:	68a9      	ldr	r1, [r5, #8]
 801d6c4:	f003 f843 	bl	802074e <memcpy>
 801d6c8:	68ab      	ldr	r3, [r5, #8]
 801d6ca:	6928      	ldr	r0, [r5, #16]
 801d6cc:	4423      	add	r3, r4
 801d6ce:	4420      	add	r0, r4
 801d6d0:	1b36      	subs	r6, r6, r4
 801d6d2:	60ab      	str	r3, [r5, #8]
 801d6d4:	6128      	str	r0, [r5, #16]
 801d6d6:	2201      	movs	r2, #1
 801d6d8:	4631      	mov	r1, r6
 801d6da:	4628      	mov	r0, r5
 801d6dc:	f7f5 fe86 	bl	80133ec <ucdr_check_final_buffer_behavior_array>
 801d6e0:	4604      	mov	r4, r0
 801d6e2:	1bb8      	subs	r0, r7, r6
 801d6e4:	4440      	add	r0, r8
 801d6e6:	4622      	mov	r2, r4
 801d6e8:	2c00      	cmp	r4, #0
 801d6ea:	d1ea      	bne.n	801d6c2 <ucdr_deserialize_endian_array_char+0x16>
 801d6ec:	2301      	movs	r3, #1
 801d6ee:	7da8      	ldrb	r0, [r5, #22]
 801d6f0:	756b      	strb	r3, [r5, #21]
 801d6f2:	4058      	eors	r0, r3
 801d6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6f8:	463a      	mov	r2, r7
 801d6fa:	68a9      	ldr	r1, [r5, #8]
 801d6fc:	4640      	mov	r0, r8
 801d6fe:	f003 f826 	bl	802074e <memcpy>
 801d702:	68aa      	ldr	r2, [r5, #8]
 801d704:	692b      	ldr	r3, [r5, #16]
 801d706:	443a      	add	r2, r7
 801d708:	443b      	add	r3, r7
 801d70a:	60aa      	str	r2, [r5, #8]
 801d70c:	612b      	str	r3, [r5, #16]
 801d70e:	e7ed      	b.n	801d6ec <ucdr_deserialize_endian_array_char+0x40>

0801d710 <ucdr_serialize_array_uint8_t>:
 801d710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d714:	4688      	mov	r8, r1
 801d716:	4611      	mov	r1, r2
 801d718:	4617      	mov	r7, r2
 801d71a:	4605      	mov	r5, r0
 801d71c:	f7f5 fdde 	bl	80132dc <ucdr_check_buffer_available_for>
 801d720:	b9e0      	cbnz	r0, 801d75c <ucdr_serialize_array_uint8_t+0x4c>
 801d722:	463e      	mov	r6, r7
 801d724:	e009      	b.n	801d73a <ucdr_serialize_array_uint8_t+0x2a>
 801d726:	68a8      	ldr	r0, [r5, #8]
 801d728:	f003 f811 	bl	802074e <memcpy>
 801d72c:	68aa      	ldr	r2, [r5, #8]
 801d72e:	692b      	ldr	r3, [r5, #16]
 801d730:	4422      	add	r2, r4
 801d732:	4423      	add	r3, r4
 801d734:	1b36      	subs	r6, r6, r4
 801d736:	60aa      	str	r2, [r5, #8]
 801d738:	612b      	str	r3, [r5, #16]
 801d73a:	4631      	mov	r1, r6
 801d73c:	2201      	movs	r2, #1
 801d73e:	4628      	mov	r0, r5
 801d740:	f7f5 fe54 	bl	80133ec <ucdr_check_final_buffer_behavior_array>
 801d744:	1bb9      	subs	r1, r7, r6
 801d746:	4441      	add	r1, r8
 801d748:	4604      	mov	r4, r0
 801d74a:	4602      	mov	r2, r0
 801d74c:	2800      	cmp	r0, #0
 801d74e:	d1ea      	bne.n	801d726 <ucdr_serialize_array_uint8_t+0x16>
 801d750:	2301      	movs	r3, #1
 801d752:	7da8      	ldrb	r0, [r5, #22]
 801d754:	756b      	strb	r3, [r5, #21]
 801d756:	4058      	eors	r0, r3
 801d758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d75c:	463a      	mov	r2, r7
 801d75e:	68a8      	ldr	r0, [r5, #8]
 801d760:	4641      	mov	r1, r8
 801d762:	f002 fff4 	bl	802074e <memcpy>
 801d766:	68aa      	ldr	r2, [r5, #8]
 801d768:	692b      	ldr	r3, [r5, #16]
 801d76a:	443a      	add	r2, r7
 801d76c:	443b      	add	r3, r7
 801d76e:	60aa      	str	r2, [r5, #8]
 801d770:	612b      	str	r3, [r5, #16]
 801d772:	e7ed      	b.n	801d750 <ucdr_serialize_array_uint8_t+0x40>

0801d774 <ucdr_serialize_endian_array_uint8_t>:
 801d774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d778:	4619      	mov	r1, r3
 801d77a:	461f      	mov	r7, r3
 801d77c:	4605      	mov	r5, r0
 801d77e:	4690      	mov	r8, r2
 801d780:	f7f5 fdac 	bl	80132dc <ucdr_check_buffer_available_for>
 801d784:	b9e0      	cbnz	r0, 801d7c0 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801d786:	463e      	mov	r6, r7
 801d788:	e009      	b.n	801d79e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801d78a:	68a8      	ldr	r0, [r5, #8]
 801d78c:	f002 ffdf 	bl	802074e <memcpy>
 801d790:	68ab      	ldr	r3, [r5, #8]
 801d792:	6928      	ldr	r0, [r5, #16]
 801d794:	4423      	add	r3, r4
 801d796:	4420      	add	r0, r4
 801d798:	1b36      	subs	r6, r6, r4
 801d79a:	60ab      	str	r3, [r5, #8]
 801d79c:	6128      	str	r0, [r5, #16]
 801d79e:	4631      	mov	r1, r6
 801d7a0:	2201      	movs	r2, #1
 801d7a2:	4628      	mov	r0, r5
 801d7a4:	f7f5 fe22 	bl	80133ec <ucdr_check_final_buffer_behavior_array>
 801d7a8:	1bb9      	subs	r1, r7, r6
 801d7aa:	4441      	add	r1, r8
 801d7ac:	4604      	mov	r4, r0
 801d7ae:	4602      	mov	r2, r0
 801d7b0:	2800      	cmp	r0, #0
 801d7b2:	d1ea      	bne.n	801d78a <ucdr_serialize_endian_array_uint8_t+0x16>
 801d7b4:	2301      	movs	r3, #1
 801d7b6:	7da8      	ldrb	r0, [r5, #22]
 801d7b8:	756b      	strb	r3, [r5, #21]
 801d7ba:	4058      	eors	r0, r3
 801d7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7c0:	463a      	mov	r2, r7
 801d7c2:	68a8      	ldr	r0, [r5, #8]
 801d7c4:	4641      	mov	r1, r8
 801d7c6:	f002 ffc2 	bl	802074e <memcpy>
 801d7ca:	68aa      	ldr	r2, [r5, #8]
 801d7cc:	692b      	ldr	r3, [r5, #16]
 801d7ce:	443a      	add	r2, r7
 801d7d0:	443b      	add	r3, r7
 801d7d2:	60aa      	str	r2, [r5, #8]
 801d7d4:	612b      	str	r3, [r5, #16]
 801d7d6:	e7ed      	b.n	801d7b4 <ucdr_serialize_endian_array_uint8_t+0x40>

0801d7d8 <ucdr_deserialize_array_uint8_t>:
 801d7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7dc:	4688      	mov	r8, r1
 801d7de:	4611      	mov	r1, r2
 801d7e0:	4617      	mov	r7, r2
 801d7e2:	4605      	mov	r5, r0
 801d7e4:	f7f5 fd7a 	bl	80132dc <ucdr_check_buffer_available_for>
 801d7e8:	b9e0      	cbnz	r0, 801d824 <ucdr_deserialize_array_uint8_t+0x4c>
 801d7ea:	463e      	mov	r6, r7
 801d7ec:	e009      	b.n	801d802 <ucdr_deserialize_array_uint8_t+0x2a>
 801d7ee:	68a9      	ldr	r1, [r5, #8]
 801d7f0:	f002 ffad 	bl	802074e <memcpy>
 801d7f4:	68aa      	ldr	r2, [r5, #8]
 801d7f6:	692b      	ldr	r3, [r5, #16]
 801d7f8:	4422      	add	r2, r4
 801d7fa:	4423      	add	r3, r4
 801d7fc:	1b36      	subs	r6, r6, r4
 801d7fe:	60aa      	str	r2, [r5, #8]
 801d800:	612b      	str	r3, [r5, #16]
 801d802:	2201      	movs	r2, #1
 801d804:	4631      	mov	r1, r6
 801d806:	4628      	mov	r0, r5
 801d808:	f7f5 fdf0 	bl	80133ec <ucdr_check_final_buffer_behavior_array>
 801d80c:	4604      	mov	r4, r0
 801d80e:	1bb8      	subs	r0, r7, r6
 801d810:	4440      	add	r0, r8
 801d812:	4622      	mov	r2, r4
 801d814:	2c00      	cmp	r4, #0
 801d816:	d1ea      	bne.n	801d7ee <ucdr_deserialize_array_uint8_t+0x16>
 801d818:	2301      	movs	r3, #1
 801d81a:	7da8      	ldrb	r0, [r5, #22]
 801d81c:	756b      	strb	r3, [r5, #21]
 801d81e:	4058      	eors	r0, r3
 801d820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d824:	463a      	mov	r2, r7
 801d826:	68a9      	ldr	r1, [r5, #8]
 801d828:	4640      	mov	r0, r8
 801d82a:	f002 ff90 	bl	802074e <memcpy>
 801d82e:	68aa      	ldr	r2, [r5, #8]
 801d830:	692b      	ldr	r3, [r5, #16]
 801d832:	443a      	add	r2, r7
 801d834:	443b      	add	r3, r7
 801d836:	60aa      	str	r2, [r5, #8]
 801d838:	612b      	str	r3, [r5, #16]
 801d83a:	e7ed      	b.n	801d818 <ucdr_deserialize_array_uint8_t+0x40>

0801d83c <ucdr_deserialize_endian_array_uint8_t>:
 801d83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d840:	4619      	mov	r1, r3
 801d842:	461f      	mov	r7, r3
 801d844:	4605      	mov	r5, r0
 801d846:	4690      	mov	r8, r2
 801d848:	f7f5 fd48 	bl	80132dc <ucdr_check_buffer_available_for>
 801d84c:	b9e0      	cbnz	r0, 801d888 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 801d84e:	463e      	mov	r6, r7
 801d850:	e009      	b.n	801d866 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 801d852:	68a9      	ldr	r1, [r5, #8]
 801d854:	f002 ff7b 	bl	802074e <memcpy>
 801d858:	68ab      	ldr	r3, [r5, #8]
 801d85a:	6928      	ldr	r0, [r5, #16]
 801d85c:	4423      	add	r3, r4
 801d85e:	4420      	add	r0, r4
 801d860:	1b36      	subs	r6, r6, r4
 801d862:	60ab      	str	r3, [r5, #8]
 801d864:	6128      	str	r0, [r5, #16]
 801d866:	2201      	movs	r2, #1
 801d868:	4631      	mov	r1, r6
 801d86a:	4628      	mov	r0, r5
 801d86c:	f7f5 fdbe 	bl	80133ec <ucdr_check_final_buffer_behavior_array>
 801d870:	4604      	mov	r4, r0
 801d872:	1bb8      	subs	r0, r7, r6
 801d874:	4440      	add	r0, r8
 801d876:	4622      	mov	r2, r4
 801d878:	2c00      	cmp	r4, #0
 801d87a:	d1ea      	bne.n	801d852 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801d87c:	2301      	movs	r3, #1
 801d87e:	7da8      	ldrb	r0, [r5, #22]
 801d880:	756b      	strb	r3, [r5, #21]
 801d882:	4058      	eors	r0, r3
 801d884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d888:	463a      	mov	r2, r7
 801d88a:	68a9      	ldr	r1, [r5, #8]
 801d88c:	4640      	mov	r0, r8
 801d88e:	f002 ff5e 	bl	802074e <memcpy>
 801d892:	68aa      	ldr	r2, [r5, #8]
 801d894:	692b      	ldr	r3, [r5, #16]
 801d896:	443a      	add	r2, r7
 801d898:	443b      	add	r3, r7
 801d89a:	60aa      	str	r2, [r5, #8]
 801d89c:	612b      	str	r3, [r5, #16]
 801d89e:	e7ed      	b.n	801d87c <ucdr_deserialize_endian_array_uint8_t+0x40>

0801d8a0 <ucdr_serialize_endian_array_float>:
 801d8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8a4:	4688      	mov	r8, r1
 801d8a6:	2104      	movs	r1, #4
 801d8a8:	4604      	mov	r4, r0
 801d8aa:	4616      	mov	r6, r2
 801d8ac:	461f      	mov	r7, r3
 801d8ae:	f7f5 fd75 	bl	801339c <ucdr_buffer_alignment>
 801d8b2:	4601      	mov	r1, r0
 801d8b4:	4620      	mov	r0, r4
 801d8b6:	7d65      	ldrb	r5, [r4, #21]
 801d8b8:	f7f5 fdb4 	bl	8013424 <ucdr_advance_buffer>
 801d8bc:	f1b8 0f01 	cmp.w	r8, #1
 801d8c0:	7565      	strb	r5, [r4, #21]
 801d8c2:	d00f      	beq.n	801d8e4 <ucdr_serialize_endian_array_float+0x44>
 801d8c4:	2500      	movs	r5, #0
 801d8c6:	b147      	cbz	r7, 801d8da <ucdr_serialize_endian_array_float+0x3a>
 801d8c8:	ecb6 0a01 	vldmia	r6!, {s0}
 801d8cc:	4641      	mov	r1, r8
 801d8ce:	4620      	mov	r0, r4
 801d8d0:	3501      	adds	r5, #1
 801d8d2:	f7f5 f9ad 	bl	8012c30 <ucdr_serialize_endian_float>
 801d8d6:	42af      	cmp	r7, r5
 801d8d8:	d1f6      	bne.n	801d8c8 <ucdr_serialize_endian_array_float+0x28>
 801d8da:	7da0      	ldrb	r0, [r4, #22]
 801d8dc:	f080 0001 	eor.w	r0, r0, #1
 801d8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8e4:	00bf      	lsls	r7, r7, #2
 801d8e6:	4639      	mov	r1, r7
 801d8e8:	4620      	mov	r0, r4
 801d8ea:	f7f5 fcf7 	bl	80132dc <ucdr_check_buffer_available_for>
 801d8ee:	b9f8      	cbnz	r0, 801d930 <ucdr_serialize_endian_array_float+0x90>
 801d8f0:	46b8      	mov	r8, r7
 801d8f2:	e00a      	b.n	801d90a <ucdr_serialize_endian_array_float+0x6a>
 801d8f4:	68a0      	ldr	r0, [r4, #8]
 801d8f6:	f002 ff2a 	bl	802074e <memcpy>
 801d8fa:	68a2      	ldr	r2, [r4, #8]
 801d8fc:	6923      	ldr	r3, [r4, #16]
 801d8fe:	442a      	add	r2, r5
 801d900:	442b      	add	r3, r5
 801d902:	eba8 0805 	sub.w	r8, r8, r5
 801d906:	60a2      	str	r2, [r4, #8]
 801d908:	6123      	str	r3, [r4, #16]
 801d90a:	4641      	mov	r1, r8
 801d90c:	2204      	movs	r2, #4
 801d90e:	4620      	mov	r0, r4
 801d910:	f7f5 fd6c 	bl	80133ec <ucdr_check_final_buffer_behavior_array>
 801d914:	eba7 0108 	sub.w	r1, r7, r8
 801d918:	4431      	add	r1, r6
 801d91a:	4605      	mov	r5, r0
 801d91c:	4602      	mov	r2, r0
 801d91e:	2800      	cmp	r0, #0
 801d920:	d1e8      	bne.n	801d8f4 <ucdr_serialize_endian_array_float+0x54>
 801d922:	7da0      	ldrb	r0, [r4, #22]
 801d924:	2304      	movs	r3, #4
 801d926:	7563      	strb	r3, [r4, #21]
 801d928:	f080 0001 	eor.w	r0, r0, #1
 801d92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d930:	463a      	mov	r2, r7
 801d932:	68a0      	ldr	r0, [r4, #8]
 801d934:	4631      	mov	r1, r6
 801d936:	f002 ff0a 	bl	802074e <memcpy>
 801d93a:	68a2      	ldr	r2, [r4, #8]
 801d93c:	6923      	ldr	r3, [r4, #16]
 801d93e:	443a      	add	r2, r7
 801d940:	441f      	add	r7, r3
 801d942:	60a2      	str	r2, [r4, #8]
 801d944:	6127      	str	r7, [r4, #16]
 801d946:	e7ec      	b.n	801d922 <ucdr_serialize_endian_array_float+0x82>

0801d948 <ucdr_deserialize_endian_array_float>:
 801d948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d94c:	4688      	mov	r8, r1
 801d94e:	2104      	movs	r1, #4
 801d950:	4605      	mov	r5, r0
 801d952:	4614      	mov	r4, r2
 801d954:	461f      	mov	r7, r3
 801d956:	f7f5 fd21 	bl	801339c <ucdr_buffer_alignment>
 801d95a:	4601      	mov	r1, r0
 801d95c:	4628      	mov	r0, r5
 801d95e:	7d6e      	ldrb	r6, [r5, #21]
 801d960:	f7f5 fd60 	bl	8013424 <ucdr_advance_buffer>
 801d964:	f1b8 0f01 	cmp.w	r8, #1
 801d968:	756e      	strb	r6, [r5, #21]
 801d96a:	d010      	beq.n	801d98e <ucdr_deserialize_endian_array_float+0x46>
 801d96c:	2600      	movs	r6, #0
 801d96e:	b14f      	cbz	r7, 801d984 <ucdr_deserialize_endian_array_float+0x3c>
 801d970:	4622      	mov	r2, r4
 801d972:	4641      	mov	r1, r8
 801d974:	4628      	mov	r0, r5
 801d976:	3601      	adds	r6, #1
 801d978:	f7f5 fa84 	bl	8012e84 <ucdr_deserialize_endian_float>
 801d97c:	42b7      	cmp	r7, r6
 801d97e:	f104 0404 	add.w	r4, r4, #4
 801d982:	d1f5      	bne.n	801d970 <ucdr_deserialize_endian_array_float+0x28>
 801d984:	7da8      	ldrb	r0, [r5, #22]
 801d986:	f080 0001 	eor.w	r0, r0, #1
 801d98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d98e:	00bf      	lsls	r7, r7, #2
 801d990:	4639      	mov	r1, r7
 801d992:	4628      	mov	r0, r5
 801d994:	f7f5 fca2 	bl	80132dc <ucdr_check_buffer_available_for>
 801d998:	b9f8      	cbnz	r0, 801d9da <ucdr_deserialize_endian_array_float+0x92>
 801d99a:	46b8      	mov	r8, r7
 801d99c:	e00a      	b.n	801d9b4 <ucdr_deserialize_endian_array_float+0x6c>
 801d99e:	68a9      	ldr	r1, [r5, #8]
 801d9a0:	f002 fed5 	bl	802074e <memcpy>
 801d9a4:	68aa      	ldr	r2, [r5, #8]
 801d9a6:	692b      	ldr	r3, [r5, #16]
 801d9a8:	4432      	add	r2, r6
 801d9aa:	4433      	add	r3, r6
 801d9ac:	eba8 0806 	sub.w	r8, r8, r6
 801d9b0:	60aa      	str	r2, [r5, #8]
 801d9b2:	612b      	str	r3, [r5, #16]
 801d9b4:	2204      	movs	r2, #4
 801d9b6:	4641      	mov	r1, r8
 801d9b8:	4628      	mov	r0, r5
 801d9ba:	f7f5 fd17 	bl	80133ec <ucdr_check_final_buffer_behavior_array>
 801d9be:	4606      	mov	r6, r0
 801d9c0:	eba7 0008 	sub.w	r0, r7, r8
 801d9c4:	4420      	add	r0, r4
 801d9c6:	4632      	mov	r2, r6
 801d9c8:	2e00      	cmp	r6, #0
 801d9ca:	d1e8      	bne.n	801d99e <ucdr_deserialize_endian_array_float+0x56>
 801d9cc:	7da8      	ldrb	r0, [r5, #22]
 801d9ce:	2304      	movs	r3, #4
 801d9d0:	756b      	strb	r3, [r5, #21]
 801d9d2:	f080 0001 	eor.w	r0, r0, #1
 801d9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9da:	463a      	mov	r2, r7
 801d9dc:	68a9      	ldr	r1, [r5, #8]
 801d9de:	4620      	mov	r0, r4
 801d9e0:	f002 feb5 	bl	802074e <memcpy>
 801d9e4:	68aa      	ldr	r2, [r5, #8]
 801d9e6:	692b      	ldr	r3, [r5, #16]
 801d9e8:	443a      	add	r2, r7
 801d9ea:	441f      	add	r7, r3
 801d9ec:	60aa      	str	r2, [r5, #8]
 801d9ee:	612f      	str	r7, [r5, #16]
 801d9f0:	e7ec      	b.n	801d9cc <ucdr_deserialize_endian_array_float+0x84>
 801d9f2:	bf00      	nop

0801d9f4 <ucdr_serialize_string>:
 801d9f4:	b510      	push	{r4, lr}
 801d9f6:	b082      	sub	sp, #8
 801d9f8:	4604      	mov	r4, r0
 801d9fa:	4608      	mov	r0, r1
 801d9fc:	9101      	str	r1, [sp, #4]
 801d9fe:	f7e2 fbf1 	bl	80001e4 <strlen>
 801da02:	9901      	ldr	r1, [sp, #4]
 801da04:	1c42      	adds	r2, r0, #1
 801da06:	4620      	mov	r0, r4
 801da08:	b002      	add	sp, #8
 801da0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801da0e:	f7f8 b9c3 	b.w	8015d98 <ucdr_serialize_sequence_char>
 801da12:	bf00      	nop

0801da14 <ucdr_deserialize_string>:
 801da14:	b500      	push	{lr}
 801da16:	b083      	sub	sp, #12
 801da18:	ab01      	add	r3, sp, #4
 801da1a:	f7f8 f9cf 	bl	8015dbc <ucdr_deserialize_sequence_char>
 801da1e:	b003      	add	sp, #12
 801da20:	f85d fb04 	ldr.w	pc, [sp], #4

0801da24 <get_custom_error>:
 801da24:	4b01      	ldr	r3, [pc, #4]	@ (801da2c <get_custom_error+0x8>)
 801da26:	7818      	ldrb	r0, [r3, #0]
 801da28:	4770      	bx	lr
 801da2a:	bf00      	nop
 801da2c:	200165b0 	.word	0x200165b0

0801da30 <recv_custom_msg>:
 801da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da34:	4693      	mov	fp, r2
 801da36:	b089      	sub	sp, #36	@ 0x24
 801da38:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 801da3c:	9305      	str	r3, [sp, #20]
 801da3e:	468a      	mov	sl, r1
 801da40:	2100      	movs	r1, #0
 801da42:	4604      	mov	r4, r0
 801da44:	f88d 101e 	strb.w	r1, [sp, #30]
 801da48:	b322      	cbz	r2, 801da94 <recv_custom_msg+0x64>
 801da4a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801da4e:	f10d 081f 	add.w	r8, sp, #31
 801da52:	af05      	add	r7, sp, #20
 801da54:	f10d 061e 	add.w	r6, sp, #30
 801da58:	f44f 7500 	mov.w	r5, #512	@ 0x200
 801da5c:	e002      	b.n	801da64 <recv_custom_msg+0x34>
 801da5e:	9b05      	ldr	r3, [sp, #20]
 801da60:	2b00      	cmp	r3, #0
 801da62:	dd0f      	ble.n	801da84 <recv_custom_msg+0x54>
 801da64:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 801da68:	4623      	mov	r3, r4
 801da6a:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801da6e:	e9cd 5600 	strd	r5, r6, [sp]
 801da72:	4622      	mov	r2, r4
 801da74:	4648      	mov	r0, r9
 801da76:	f001 f91b 	bl	801ecb0 <uxr_read_framed_msg>
 801da7a:	2800      	cmp	r0, #0
 801da7c:	d0ef      	beq.n	801da5e <recv_custom_msg+0x2e>
 801da7e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801da82:	b1b3      	cbz	r3, 801dab2 <recv_custom_msg+0x82>
 801da84:	4b0f      	ldr	r3, [pc, #60]	@ (801dac4 <recv_custom_msg+0x94>)
 801da86:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801da8a:	701a      	strb	r2, [r3, #0]
 801da8c:	2000      	movs	r0, #0
 801da8e:	b009      	add	sp, #36	@ 0x24
 801da90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da94:	f10d 021f 	add.w	r2, sp, #31
 801da98:	9200      	str	r2, [sp, #0]
 801da9a:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801da9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801daa2:	4601      	mov	r1, r0
 801daa4:	47a8      	blx	r5
 801daa6:	2800      	cmp	r0, #0
 801daa8:	d0ec      	beq.n	801da84 <recv_custom_msg+0x54>
 801daaa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d1e8      	bne.n	801da84 <recv_custom_msg+0x54>
 801dab2:	f8cb 0000 	str.w	r0, [fp]
 801dab6:	2001      	movs	r0, #1
 801dab8:	f8ca 4000 	str.w	r4, [sl]
 801dabc:	b009      	add	sp, #36	@ 0x24
 801dabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dac2:	bf00      	nop
 801dac4:	200165b0 	.word	0x200165b0

0801dac8 <send_custom_msg>:
 801dac8:	b530      	push	{r4, r5, lr}
 801daca:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801dace:	b087      	sub	sp, #28
 801dad0:	4615      	mov	r5, r2
 801dad2:	b974      	cbnz	r4, 801daf2 <send_custom_msg+0x2a>
 801dad4:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 801dad8:	f10d 0317 	add.w	r3, sp, #23
 801dadc:	47a0      	blx	r4
 801dade:	b108      	cbz	r0, 801dae4 <send_custom_msg+0x1c>
 801dae0:	42a8      	cmp	r0, r5
 801dae2:	d015      	beq.n	801db10 <send_custom_msg+0x48>
 801dae4:	4b0c      	ldr	r3, [pc, #48]	@ (801db18 <send_custom_msg+0x50>)
 801dae6:	f89d 2017 	ldrb.w	r2, [sp, #23]
 801daea:	701a      	strb	r2, [r3, #0]
 801daec:	2000      	movs	r0, #0
 801daee:	b007      	add	sp, #28
 801daf0:	bd30      	pop	{r4, r5, pc}
 801daf2:	460b      	mov	r3, r1
 801daf4:	2200      	movs	r2, #0
 801daf6:	f10d 0117 	add.w	r1, sp, #23
 801dafa:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801dafe:	4602      	mov	r2, r0
 801db00:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 801db04:	9500      	str	r5, [sp, #0]
 801db06:	f200 2002 	addw	r0, r0, #514	@ 0x202
 801db0a:	f000 fed9 	bl	801e8c0 <uxr_write_framed_msg>
 801db0e:	e7e6      	b.n	801dade <send_custom_msg+0x16>
 801db10:	2001      	movs	r0, #1
 801db12:	b007      	add	sp, #28
 801db14:	bd30      	pop	{r4, r5, pc}
 801db16:	bf00      	nop
 801db18:	200165b0 	.word	0x200165b0

0801db1c <uxr_set_custom_transport_callbacks>:
 801db1c:	b410      	push	{r4}
 801db1e:	9c01      	ldr	r4, [sp, #4]
 801db20:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 801db24:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 801db28:	9b02      	ldr	r3, [sp, #8]
 801db2a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 801db2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db32:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 801db36:	4770      	bx	lr

0801db38 <uxr_init_custom_transport>:
 801db38:	b538      	push	{r3, r4, r5, lr}
 801db3a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801db3e:	b303      	cbz	r3, 801db82 <uxr_init_custom_transport+0x4a>
 801db40:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 801db44:	4604      	mov	r4, r0
 801db46:	b1e2      	cbz	r2, 801db82 <uxr_init_custom_transport+0x4a>
 801db48:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 801db4c:	b1ca      	cbz	r2, 801db82 <uxr_init_custom_transport+0x4a>
 801db4e:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801db52:	b1b2      	cbz	r2, 801db82 <uxr_init_custom_transport+0x4a>
 801db54:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 801db58:	4798      	blx	r3
 801db5a:	4605      	mov	r5, r0
 801db5c:	b188      	cbz	r0, 801db82 <uxr_init_custom_transport+0x4a>
 801db5e:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801db62:	b98b      	cbnz	r3, 801db88 <uxr_init_custom_transport+0x50>
 801db64:	490b      	ldr	r1, [pc, #44]	@ (801db94 <uxr_init_custom_transport+0x5c>)
 801db66:	4b0c      	ldr	r3, [pc, #48]	@ (801db98 <uxr_init_custom_transport+0x60>)
 801db68:	4a0c      	ldr	r2, [pc, #48]	@ (801db9c <uxr_init_custom_transport+0x64>)
 801db6a:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801db6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801db72:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 801db76:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 801db7a:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801db7e:	4628      	mov	r0, r5
 801db80:	bd38      	pop	{r3, r4, r5, pc}
 801db82:	2500      	movs	r5, #0
 801db84:	4628      	mov	r0, r5
 801db86:	bd38      	pop	{r3, r4, r5, pc}
 801db88:	2100      	movs	r1, #0
 801db8a:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801db8e:	f000 fe91 	bl	801e8b4 <uxr_init_framing_io>
 801db92:	e7e7      	b.n	801db64 <uxr_init_custom_transport+0x2c>
 801db94:	0801dac9 	.word	0x0801dac9
 801db98:	0801da31 	.word	0x0801da31
 801db9c:	0801da25 	.word	0x0801da25

0801dba0 <uxr_close_custom_transport>:
 801dba0:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801dba4:	4718      	bx	r3
 801dba6:	bf00      	nop

0801dba8 <uxr_init_input_best_effort_stream>:
 801dba8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801dbac:	8003      	strh	r3, [r0, #0]
 801dbae:	4770      	bx	lr

0801dbb0 <uxr_reset_input_best_effort_stream>:
 801dbb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801dbb4:	8003      	strh	r3, [r0, #0]
 801dbb6:	4770      	bx	lr

0801dbb8 <uxr_receive_best_effort_message>:
 801dbb8:	b538      	push	{r3, r4, r5, lr}
 801dbba:	4604      	mov	r4, r0
 801dbbc:	8800      	ldrh	r0, [r0, #0]
 801dbbe:	460d      	mov	r5, r1
 801dbc0:	f000 fe60 	bl	801e884 <uxr_seq_num_cmp>
 801dbc4:	4603      	mov	r3, r0
 801dbc6:	2b00      	cmp	r3, #0
 801dbc8:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 801dbcc:	bfb8      	it	lt
 801dbce:	8025      	strhlt	r5, [r4, #0]
 801dbd0:	bd38      	pop	{r3, r4, r5, pc}
 801dbd2:	bf00      	nop

0801dbd4 <on_full_input_buffer>:
 801dbd4:	b570      	push	{r4, r5, r6, lr}
 801dbd6:	4605      	mov	r5, r0
 801dbd8:	460c      	mov	r4, r1
 801dbda:	682b      	ldr	r3, [r5, #0]
 801dbdc:	6809      	ldr	r1, [r1, #0]
 801dbde:	8920      	ldrh	r0, [r4, #8]
 801dbe0:	6862      	ldr	r2, [r4, #4]
 801dbe2:	fbb2 f2f0 	udiv	r2, r2, r0
 801dbe6:	eba3 0c01 	sub.w	ip, r3, r1
 801dbea:	fbbc fcf2 	udiv	ip, ip, r2
 801dbee:	f10c 0c01 	add.w	ip, ip, #1
 801dbf2:	fa1f f38c 	uxth.w	r3, ip
 801dbf6:	fbb3 f6f0 	udiv	r6, r3, r0
 801dbfa:	fb00 3316 	mls	r3, r0, r6, r3
 801dbfe:	b29b      	uxth	r3, r3
 801dc00:	fb02 f303 	mul.w	r3, r2, r3
 801dc04:	1d18      	adds	r0, r3, #4
 801dc06:	4408      	add	r0, r1
 801dc08:	7d26      	ldrb	r6, [r4, #20]
 801dc0a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801dc0e:	b116      	cbz	r6, 801dc16 <on_full_input_buffer+0x42>
 801dc10:	2600      	movs	r6, #0
 801dc12:	f840 6c04 	str.w	r6, [r0, #-4]
 801dc16:	2a03      	cmp	r2, #3
 801dc18:	d801      	bhi.n	801dc1e <on_full_input_buffer+0x4a>
 801dc1a:	2001      	movs	r0, #1
 801dc1c:	bd70      	pop	{r4, r5, r6, pc}
 801dc1e:	3308      	adds	r3, #8
 801dc20:	4419      	add	r1, r3
 801dc22:	4628      	mov	r0, r5
 801dc24:	692b      	ldr	r3, [r5, #16]
 801dc26:	3a04      	subs	r2, #4
 801dc28:	f7f5 fba4 	bl	8013374 <ucdr_init_buffer_origin>
 801dc2c:	4628      	mov	r0, r5
 801dc2e:	4903      	ldr	r1, [pc, #12]	@ (801dc3c <on_full_input_buffer+0x68>)
 801dc30:	4622      	mov	r2, r4
 801dc32:	f7f5 fb7b 	bl	801332c <ucdr_set_on_full_buffer_callback>
 801dc36:	2000      	movs	r0, #0
 801dc38:	bd70      	pop	{r4, r5, r6, pc}
 801dc3a:	bf00      	nop
 801dc3c:	0801dbd5 	.word	0x0801dbd5

0801dc40 <uxr_init_input_reliable_stream>:
 801dc40:	b500      	push	{lr}
 801dc42:	e9c0 1200 	strd	r1, r2, [r0]
 801dc46:	f04f 0e00 	mov.w	lr, #0
 801dc4a:	9a01      	ldr	r2, [sp, #4]
 801dc4c:	8103      	strh	r3, [r0, #8]
 801dc4e:	6102      	str	r2, [r0, #16]
 801dc50:	f880 e014 	strb.w	lr, [r0, #20]
 801dc54:	b1d3      	cbz	r3, 801dc8c <uxr_init_input_reliable_stream+0x4c>
 801dc56:	f8c1 e000 	str.w	lr, [r1]
 801dc5a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801dc5e:	f1bc 0f01 	cmp.w	ip, #1
 801dc62:	d913      	bls.n	801dc8c <uxr_init_input_reliable_stream+0x4c>
 801dc64:	2301      	movs	r3, #1
 801dc66:	fbb3 f1fc 	udiv	r1, r3, ip
 801dc6a:	fb0c 3111 	mls	r1, ip, r1, r3
 801dc6e:	b289      	uxth	r1, r1
 801dc70:	6842      	ldr	r2, [r0, #4]
 801dc72:	fbb2 f2fc 	udiv	r2, r2, ip
 801dc76:	fb01 f202 	mul.w	r2, r1, r2
 801dc7a:	6801      	ldr	r1, [r0, #0]
 801dc7c:	f841 e002 	str.w	lr, [r1, r2]
 801dc80:	3301      	adds	r3, #1
 801dc82:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801dc86:	b29b      	uxth	r3, r3
 801dc88:	459c      	cmp	ip, r3
 801dc8a:	d8ec      	bhi.n	801dc66 <uxr_init_input_reliable_stream+0x26>
 801dc8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dc90:	60c3      	str	r3, [r0, #12]
 801dc92:	f85d fb04 	ldr.w	pc, [sp], #4
 801dc96:	bf00      	nop

0801dc98 <uxr_reset_input_reliable_stream>:
 801dc98:	8901      	ldrh	r1, [r0, #8]
 801dc9a:	b1e9      	cbz	r1, 801dcd8 <uxr_reset_input_reliable_stream+0x40>
 801dc9c:	f04f 0c00 	mov.w	ip, #0
 801dca0:	b500      	push	{lr}
 801dca2:	4663      	mov	r3, ip
 801dca4:	46e6      	mov	lr, ip
 801dca6:	fbb3 f2f1 	udiv	r2, r3, r1
 801dcaa:	fb01 3312 	mls	r3, r1, r2, r3
 801dcae:	b29b      	uxth	r3, r3
 801dcb0:	6842      	ldr	r2, [r0, #4]
 801dcb2:	fbb2 f2f1 	udiv	r2, r2, r1
 801dcb6:	fb02 f303 	mul.w	r3, r2, r3
 801dcba:	6802      	ldr	r2, [r0, #0]
 801dcbc:	f842 e003 	str.w	lr, [r2, r3]
 801dcc0:	f10c 0c01 	add.w	ip, ip, #1
 801dcc4:	8901      	ldrh	r1, [r0, #8]
 801dcc6:	fa1f f38c 	uxth.w	r3, ip
 801dcca:	4299      	cmp	r1, r3
 801dccc:	d8eb      	bhi.n	801dca6 <uxr_reset_input_reliable_stream+0xe>
 801dcce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dcd2:	60c3      	str	r3, [r0, #12]
 801dcd4:	f85d fb04 	ldr.w	pc, [sp], #4
 801dcd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dcdc:	60c3      	str	r3, [r0, #12]
 801dcde:	4770      	bx	lr

0801dce0 <uxr_receive_reliable_message>:
 801dce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dce4:	4604      	mov	r4, r0
 801dce6:	460d      	mov	r5, r1
 801dce8:	8901      	ldrh	r1, [r0, #8]
 801dcea:	8980      	ldrh	r0, [r0, #12]
 801dcec:	4690      	mov	r8, r2
 801dcee:	461f      	mov	r7, r3
 801dcf0:	f000 fdc0 	bl	801e874 <uxr_seq_num_add>
 801dcf4:	4629      	mov	r1, r5
 801dcf6:	4606      	mov	r6, r0
 801dcf8:	89a0      	ldrh	r0, [r4, #12]
 801dcfa:	f000 fdc3 	bl	801e884 <uxr_seq_num_cmp>
 801dcfe:	2800      	cmp	r0, #0
 801dd00:	db0a      	blt.n	801dd18 <uxr_receive_reliable_message+0x38>
 801dd02:	2600      	movs	r6, #0
 801dd04:	89e0      	ldrh	r0, [r4, #14]
 801dd06:	4629      	mov	r1, r5
 801dd08:	f000 fdbc 	bl	801e884 <uxr_seq_num_cmp>
 801dd0c:	2800      	cmp	r0, #0
 801dd0e:	da00      	bge.n	801dd12 <uxr_receive_reliable_message+0x32>
 801dd10:	81e5      	strh	r5, [r4, #14]
 801dd12:	4630      	mov	r0, r6
 801dd14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd18:	4630      	mov	r0, r6
 801dd1a:	4629      	mov	r1, r5
 801dd1c:	f000 fdb2 	bl	801e884 <uxr_seq_num_cmp>
 801dd20:	2800      	cmp	r0, #0
 801dd22:	dbee      	blt.n	801dd02 <uxr_receive_reliable_message+0x22>
 801dd24:	6923      	ldr	r3, [r4, #16]
 801dd26:	4640      	mov	r0, r8
 801dd28:	4798      	blx	r3
 801dd2a:	2101      	movs	r1, #1
 801dd2c:	4681      	mov	r9, r0
 801dd2e:	89a0      	ldrh	r0, [r4, #12]
 801dd30:	f000 fda0 	bl	801e874 <uxr_seq_num_add>
 801dd34:	f1b9 0f00 	cmp.w	r9, #0
 801dd38:	d101      	bne.n	801dd3e <uxr_receive_reliable_message+0x5e>
 801dd3a:	4285      	cmp	r5, r0
 801dd3c:	d047      	beq.n	801ddce <uxr_receive_reliable_message+0xee>
 801dd3e:	8922      	ldrh	r2, [r4, #8]
 801dd40:	fbb5 f0f2 	udiv	r0, r5, r2
 801dd44:	fb02 5010 	mls	r0, r2, r0, r5
 801dd48:	b280      	uxth	r0, r0
 801dd4a:	6863      	ldr	r3, [r4, #4]
 801dd4c:	fbb3 f3f2 	udiv	r3, r3, r2
 801dd50:	fb00 f303 	mul.w	r3, r0, r3
 801dd54:	6820      	ldr	r0, [r4, #0]
 801dd56:	3304      	adds	r3, #4
 801dd58:	4418      	add	r0, r3
 801dd5a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801dd5e:	2b00      	cmp	r3, #0
 801dd60:	d1cf      	bne.n	801dd02 <uxr_receive_reliable_message+0x22>
 801dd62:	4641      	mov	r1, r8
 801dd64:	463a      	mov	r2, r7
 801dd66:	f002 fcf2 	bl	802074e <memcpy>
 801dd6a:	8921      	ldrh	r1, [r4, #8]
 801dd6c:	fbb5 f2f1 	udiv	r2, r5, r1
 801dd70:	fb01 5212 	mls	r2, r1, r2, r5
 801dd74:	b292      	uxth	r2, r2
 801dd76:	6863      	ldr	r3, [r4, #4]
 801dd78:	fbb3 f3f1 	udiv	r3, r3, r1
 801dd7c:	fb02 f303 	mul.w	r3, r2, r3
 801dd80:	6822      	ldr	r2, [r4, #0]
 801dd82:	50d7      	str	r7, [r2, r3]
 801dd84:	9a08      	ldr	r2, [sp, #32]
 801dd86:	2301      	movs	r3, #1
 801dd88:	7013      	strb	r3, [r2, #0]
 801dd8a:	f1b9 0f00 	cmp.w	r9, #0
 801dd8e:	d0b8      	beq.n	801dd02 <uxr_receive_reliable_message+0x22>
 801dd90:	89a6      	ldrh	r6, [r4, #12]
 801dd92:	4630      	mov	r0, r6
 801dd94:	2101      	movs	r1, #1
 801dd96:	f000 fd6d 	bl	801e874 <uxr_seq_num_add>
 801dd9a:	8922      	ldrh	r2, [r4, #8]
 801dd9c:	6863      	ldr	r3, [r4, #4]
 801dd9e:	fbb3 f3f2 	udiv	r3, r3, r2
 801dda2:	4606      	mov	r6, r0
 801dda4:	fbb0 f0f2 	udiv	r0, r0, r2
 801dda8:	fb02 6010 	mls	r0, r2, r0, r6
 801ddac:	b280      	uxth	r0, r0
 801ddae:	fb00 f303 	mul.w	r3, r0, r3
 801ddb2:	6820      	ldr	r0, [r4, #0]
 801ddb4:	3304      	adds	r3, #4
 801ddb6:	4418      	add	r0, r3
 801ddb8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801ddbc:	2b00      	cmp	r3, #0
 801ddbe:	d0a0      	beq.n	801dd02 <uxr_receive_reliable_message+0x22>
 801ddc0:	6923      	ldr	r3, [r4, #16]
 801ddc2:	4798      	blx	r3
 801ddc4:	2802      	cmp	r0, #2
 801ddc6:	d008      	beq.n	801ddda <uxr_receive_reliable_message+0xfa>
 801ddc8:	2801      	cmp	r0, #1
 801ddca:	d0e2      	beq.n	801dd92 <uxr_receive_reliable_message+0xb2>
 801ddcc:	e799      	b.n	801dd02 <uxr_receive_reliable_message+0x22>
 801ddce:	9b08      	ldr	r3, [sp, #32]
 801ddd0:	81a5      	strh	r5, [r4, #12]
 801ddd2:	2601      	movs	r6, #1
 801ddd4:	f883 9000 	strb.w	r9, [r3]
 801ddd8:	e794      	b.n	801dd04 <uxr_receive_reliable_message+0x24>
 801ddda:	2601      	movs	r6, #1
 801dddc:	e792      	b.n	801dd04 <uxr_receive_reliable_message+0x24>
 801ddde:	bf00      	nop

0801dde0 <uxr_next_input_reliable_buffer_available>:
 801dde0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dde4:	4604      	mov	r4, r0
 801dde6:	460f      	mov	r7, r1
 801dde8:	8980      	ldrh	r0, [r0, #12]
 801ddea:	2101      	movs	r1, #1
 801ddec:	4690      	mov	r8, r2
 801ddee:	f000 fd41 	bl	801e874 <uxr_seq_num_add>
 801ddf2:	8922      	ldrh	r2, [r4, #8]
 801ddf4:	fbb0 f6f2 	udiv	r6, r0, r2
 801ddf8:	fb02 0616 	mls	r6, r2, r6, r0
 801ddfc:	b2b6      	uxth	r6, r6
 801ddfe:	6863      	ldr	r3, [r4, #4]
 801de00:	fbb3 f3f2 	udiv	r3, r3, r2
 801de04:	fb06 f303 	mul.w	r3, r6, r3
 801de08:	6826      	ldr	r6, [r4, #0]
 801de0a:	3304      	adds	r3, #4
 801de0c:	441e      	add	r6, r3
 801de0e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801de12:	f1b9 0f00 	cmp.w	r9, #0
 801de16:	d023      	beq.n	801de60 <uxr_next_input_reliable_buffer_available+0x80>
 801de18:	6923      	ldr	r3, [r4, #16]
 801de1a:	4605      	mov	r5, r0
 801de1c:	4630      	mov	r0, r6
 801de1e:	4798      	blx	r3
 801de20:	4682      	mov	sl, r0
 801de22:	b300      	cbz	r0, 801de66 <uxr_next_input_reliable_buffer_available+0x86>
 801de24:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801de28:	2101      	movs	r1, #1
 801de2a:	4650      	mov	r0, sl
 801de2c:	f000 fd22 	bl	801e874 <uxr_seq_num_add>
 801de30:	8921      	ldrh	r1, [r4, #8]
 801de32:	fbb0 f2f1 	udiv	r2, r0, r1
 801de36:	4682      	mov	sl, r0
 801de38:	fb01 0212 	mls	r2, r1, r2, r0
 801de3c:	e9d4 0300 	ldrd	r0, r3, [r4]
 801de40:	b292      	uxth	r2, r2
 801de42:	fbb3 f3f1 	udiv	r3, r3, r1
 801de46:	fb02 f303 	mul.w	r3, r2, r3
 801de4a:	3304      	adds	r3, #4
 801de4c:	4418      	add	r0, r3
 801de4e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801de52:	b12b      	cbz	r3, 801de60 <uxr_next_input_reliable_buffer_available+0x80>
 801de54:	6923      	ldr	r3, [r4, #16]
 801de56:	4798      	blx	r3
 801de58:	2802      	cmp	r0, #2
 801de5a:	d01b      	beq.n	801de94 <uxr_next_input_reliable_buffer_available+0xb4>
 801de5c:	2801      	cmp	r0, #1
 801de5e:	d0e3      	beq.n	801de28 <uxr_next_input_reliable_buffer_available+0x48>
 801de60:	2000      	movs	r0, #0
 801de62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de66:	464a      	mov	r2, r9
 801de68:	4631      	mov	r1, r6
 801de6a:	4638      	mov	r0, r7
 801de6c:	f7f5 fa8a 	bl	8013384 <ucdr_init_buffer>
 801de70:	8921      	ldrh	r1, [r4, #8]
 801de72:	fbb5 f2f1 	udiv	r2, r5, r1
 801de76:	fb01 5212 	mls	r2, r1, r2, r5
 801de7a:	b292      	uxth	r2, r2
 801de7c:	6863      	ldr	r3, [r4, #4]
 801de7e:	fbb3 f3f1 	udiv	r3, r3, r1
 801de82:	fb02 f303 	mul.w	r3, r2, r3
 801de86:	6822      	ldr	r2, [r4, #0]
 801de88:	f842 a003 	str.w	sl, [r2, r3]
 801de8c:	2001      	movs	r0, #1
 801de8e:	81a5      	strh	r5, [r4, #12]
 801de90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de94:	8920      	ldrh	r0, [r4, #8]
 801de96:	fbb5 f3f0 	udiv	r3, r5, r0
 801de9a:	fb00 5513 	mls	r5, r0, r3, r5
 801de9e:	b2ad      	uxth	r5, r5
 801dea0:	6863      	ldr	r3, [r4, #4]
 801dea2:	fbb3 f3f0 	udiv	r3, r3, r0
 801dea6:	fb03 f505 	mul.w	r5, r3, r5
 801deaa:	6823      	ldr	r3, [r4, #0]
 801deac:	2000      	movs	r0, #0
 801deae:	5158      	str	r0, [r3, r5]
 801deb0:	eb06 0108 	add.w	r1, r6, r8
 801deb4:	eba9 0208 	sub.w	r2, r9, r8
 801deb8:	4638      	mov	r0, r7
 801deba:	f7f5 fa63 	bl	8013384 <ucdr_init_buffer>
 801debe:	4638      	mov	r0, r7
 801dec0:	4903      	ldr	r1, [pc, #12]	@ (801ded0 <uxr_next_input_reliable_buffer_available+0xf0>)
 801dec2:	4622      	mov	r2, r4
 801dec4:	f7f5 fa32 	bl	801332c <ucdr_set_on_full_buffer_callback>
 801dec8:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801decc:	2001      	movs	r0, #1
 801dece:	e7c8      	b.n	801de62 <uxr_next_input_reliable_buffer_available+0x82>
 801ded0:	0801dbd5 	.word	0x0801dbd5

0801ded4 <uxr_process_heartbeat>:
 801ded4:	b538      	push	{r3, r4, r5, lr}
 801ded6:	4611      	mov	r1, r2
 801ded8:	4604      	mov	r4, r0
 801deda:	89c0      	ldrh	r0, [r0, #14]
 801dedc:	4615      	mov	r5, r2
 801dede:	f000 fcd1 	bl	801e884 <uxr_seq_num_cmp>
 801dee2:	2800      	cmp	r0, #0
 801dee4:	bfb8      	it	lt
 801dee6:	81e5      	strhlt	r5, [r4, #14]
 801dee8:	bd38      	pop	{r3, r4, r5, pc}
 801deea:	bf00      	nop

0801deec <uxr_compute_acknack>:
 801deec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801def0:	8903      	ldrh	r3, [r0, #8]
 801def2:	8985      	ldrh	r5, [r0, #12]
 801def4:	4604      	mov	r4, r0
 801def6:	460e      	mov	r6, r1
 801def8:	b1d3      	cbz	r3, 801df30 <uxr_compute_acknack+0x44>
 801defa:	4628      	mov	r0, r5
 801defc:	2701      	movs	r7, #1
 801defe:	e003      	b.n	801df08 <uxr_compute_acknack+0x1c>
 801df00:	4567      	cmp	r7, ip
 801df02:	d215      	bcs.n	801df30 <uxr_compute_acknack+0x44>
 801df04:	89a0      	ldrh	r0, [r4, #12]
 801df06:	3701      	adds	r7, #1
 801df08:	b2b9      	uxth	r1, r7
 801df0a:	f000 fcb3 	bl	801e874 <uxr_seq_num_add>
 801df0e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801df12:	fbb0 f3fc 	udiv	r3, r0, ip
 801df16:	fb0c 0313 	mls	r3, ip, r3, r0
 801df1a:	b29a      	uxth	r2, r3
 801df1c:	e9d4 1300 	ldrd	r1, r3, [r4]
 801df20:	fbb3 f3fc 	udiv	r3, r3, ip
 801df24:	fb02 f303 	mul.w	r3, r2, r3
 801df28:	58cb      	ldr	r3, [r1, r3]
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	d1e8      	bne.n	801df00 <uxr_compute_acknack+0x14>
 801df2e:	4605      	mov	r5, r0
 801df30:	8035      	strh	r5, [r6, #0]
 801df32:	2101      	movs	r1, #1
 801df34:	4628      	mov	r0, r5
 801df36:	89e7      	ldrh	r7, [r4, #14]
 801df38:	f000 fca0 	bl	801e87c <uxr_seq_num_sub>
 801df3c:	4601      	mov	r1, r0
 801df3e:	4638      	mov	r0, r7
 801df40:	f000 fc9c 	bl	801e87c <uxr_seq_num_sub>
 801df44:	4605      	mov	r5, r0
 801df46:	b318      	cbz	r0, 801df90 <uxr_compute_acknack+0xa4>
 801df48:	f04f 0900 	mov.w	r9, #0
 801df4c:	464f      	mov	r7, r9
 801df4e:	f04f 0801 	mov.w	r8, #1
 801df52:	fa1f f189 	uxth.w	r1, r9
 801df56:	8830      	ldrh	r0, [r6, #0]
 801df58:	f000 fc8c 	bl	801e874 <uxr_seq_num_add>
 801df5c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801df60:	fbb0 f3fc 	udiv	r3, r0, ip
 801df64:	e9d4 1200 	ldrd	r1, r2, [r4]
 801df68:	fb03 001c 	mls	r0, r3, ip, r0
 801df6c:	b283      	uxth	r3, r0
 801df6e:	fbb2 f2fc 	udiv	r2, r2, ip
 801df72:	fb02 f303 	mul.w	r3, r2, r3
 801df76:	fa08 f209 	lsl.w	r2, r8, r9
 801df7a:	58cb      	ldr	r3, [r1, r3]
 801df7c:	f109 0901 	add.w	r9, r9, #1
 801df80:	b90b      	cbnz	r3, 801df86 <uxr_compute_acknack+0x9a>
 801df82:	4317      	orrs	r7, r2
 801df84:	b2bf      	uxth	r7, r7
 801df86:	454d      	cmp	r5, r9
 801df88:	d1e3      	bne.n	801df52 <uxr_compute_acknack+0x66>
 801df8a:	4638      	mov	r0, r7
 801df8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df90:	4607      	mov	r7, r0
 801df92:	4638      	mov	r0, r7
 801df94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801df98 <uxr_init_output_best_effort_stream>:
 801df98:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801df9c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801dfa0:	6001      	str	r1, [r0, #0]
 801dfa2:	7303      	strb	r3, [r0, #12]
 801dfa4:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801dfa8:	4770      	bx	lr
 801dfaa:	bf00      	nop

0801dfac <uxr_reset_output_best_effort_stream>:
 801dfac:	7b02      	ldrb	r2, [r0, #12]
 801dfae:	6042      	str	r2, [r0, #4]
 801dfb0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801dfb4:	81c3      	strh	r3, [r0, #14]
 801dfb6:	4770      	bx	lr

0801dfb8 <uxr_prepare_best_effort_buffer_to_write>:
 801dfb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dfba:	4604      	mov	r4, r0
 801dfbc:	b083      	sub	sp, #12
 801dfbe:	6840      	ldr	r0, [r0, #4]
 801dfc0:	460d      	mov	r5, r1
 801dfc2:	4616      	mov	r6, r2
 801dfc4:	f7f9 fba8 	bl	8017718 <uxr_submessage_padding>
 801dfc8:	6863      	ldr	r3, [r4, #4]
 801dfca:	4418      	add	r0, r3
 801dfcc:	68a3      	ldr	r3, [r4, #8]
 801dfce:	1942      	adds	r2, r0, r5
 801dfd0:	4293      	cmp	r3, r2
 801dfd2:	bf2c      	ite	cs
 801dfd4:	2701      	movcs	r7, #1
 801dfd6:	2700      	movcc	r7, #0
 801dfd8:	d202      	bcs.n	801dfe0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801dfda:	4638      	mov	r0, r7
 801dfdc:	b003      	add	sp, #12
 801dfde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dfe0:	9000      	str	r0, [sp, #0]
 801dfe2:	6821      	ldr	r1, [r4, #0]
 801dfe4:	4630      	mov	r0, r6
 801dfe6:	2300      	movs	r3, #0
 801dfe8:	f7f5 f9ba 	bl	8013360 <ucdr_init_buffer_origin_offset>
 801dfec:	6861      	ldr	r1, [r4, #4]
 801dfee:	4638      	mov	r0, r7
 801dff0:	4429      	add	r1, r5
 801dff2:	6061      	str	r1, [r4, #4]
 801dff4:	b003      	add	sp, #12
 801dff6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801dff8 <uxr_prepare_best_effort_buffer_to_send>:
 801dff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dffc:	4604      	mov	r4, r0
 801dffe:	461d      	mov	r5, r3
 801e000:	6840      	ldr	r0, [r0, #4]
 801e002:	7b23      	ldrb	r3, [r4, #12]
 801e004:	4298      	cmp	r0, r3
 801e006:	bf8c      	ite	hi
 801e008:	2601      	movhi	r6, #1
 801e00a:	2600      	movls	r6, #0
 801e00c:	d802      	bhi.n	801e014 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801e00e:	4630      	mov	r0, r6
 801e010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e014:	4688      	mov	r8, r1
 801e016:	89e0      	ldrh	r0, [r4, #14]
 801e018:	2101      	movs	r1, #1
 801e01a:	4617      	mov	r7, r2
 801e01c:	f000 fc2a 	bl	801e874 <uxr_seq_num_add>
 801e020:	6823      	ldr	r3, [r4, #0]
 801e022:	81e0      	strh	r0, [r4, #14]
 801e024:	8028      	strh	r0, [r5, #0]
 801e026:	f8c8 3000 	str.w	r3, [r8]
 801e02a:	6863      	ldr	r3, [r4, #4]
 801e02c:	603b      	str	r3, [r7, #0]
 801e02e:	7b23      	ldrb	r3, [r4, #12]
 801e030:	6063      	str	r3, [r4, #4]
 801e032:	4630      	mov	r0, r6
 801e034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e038 <on_full_output_buffer>:
 801e038:	b538      	push	{r3, r4, r5, lr}
 801e03a:	6802      	ldr	r2, [r0, #0]
 801e03c:	460c      	mov	r4, r1
 801e03e:	6809      	ldr	r1, [r1, #0]
 801e040:	8923      	ldrh	r3, [r4, #8]
 801e042:	eba2 0c01 	sub.w	ip, r2, r1
 801e046:	6862      	ldr	r2, [r4, #4]
 801e048:	fbb2 f2f3 	udiv	r2, r2, r3
 801e04c:	fbbc fcf2 	udiv	ip, ip, r2
 801e050:	f10c 0c01 	add.w	ip, ip, #1
 801e054:	fa1f fc8c 	uxth.w	ip, ip
 801e058:	fbbc fef3 	udiv	lr, ip, r3
 801e05c:	fb03 c31e 	mls	r3, r3, lr, ip
 801e060:	b29b      	uxth	r3, r3
 801e062:	fb02 f303 	mul.w	r3, r2, r3
 801e066:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801e06a:	58ca      	ldr	r2, [r1, r3]
 801e06c:	4463      	add	r3, ip
 801e06e:	eba2 020c 	sub.w	r2, r2, ip
 801e072:	3308      	adds	r3, #8
 801e074:	4605      	mov	r5, r0
 801e076:	4419      	add	r1, r3
 801e078:	3a04      	subs	r2, #4
 801e07a:	6903      	ldr	r3, [r0, #16]
 801e07c:	f7f5 f97a 	bl	8013374 <ucdr_init_buffer_origin>
 801e080:	4628      	mov	r0, r5
 801e082:	4903      	ldr	r1, [pc, #12]	@ (801e090 <on_full_output_buffer+0x58>)
 801e084:	4622      	mov	r2, r4
 801e086:	f7f5 f951 	bl	801332c <ucdr_set_on_full_buffer_callback>
 801e08a:	2000      	movs	r0, #0
 801e08c:	bd38      	pop	{r3, r4, r5, pc}
 801e08e:	bf00      	nop
 801e090:	0801e039 	.word	0x0801e039

0801e094 <uxr_init_output_reliable_stream>:
 801e094:	b410      	push	{r4}
 801e096:	f89d c004 	ldrb.w	ip, [sp, #4]
 801e09a:	8103      	strh	r3, [r0, #8]
 801e09c:	e9c0 1200 	strd	r1, r2, [r0]
 801e0a0:	f880 c00c 	strb.w	ip, [r0, #12]
 801e0a4:	b1d3      	cbz	r3, 801e0dc <uxr_init_output_reliable_stream+0x48>
 801e0a6:	f8c1 c000 	str.w	ip, [r1]
 801e0aa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801e0ae:	f1bc 0f01 	cmp.w	ip, #1
 801e0b2:	d913      	bls.n	801e0dc <uxr_init_output_reliable_stream+0x48>
 801e0b4:	2301      	movs	r3, #1
 801e0b6:	fbb3 f1fc 	udiv	r1, r3, ip
 801e0ba:	fb0c 3111 	mls	r1, ip, r1, r3
 801e0be:	b289      	uxth	r1, r1
 801e0c0:	6842      	ldr	r2, [r0, #4]
 801e0c2:	6804      	ldr	r4, [r0, #0]
 801e0c4:	fbb2 f2fc 	udiv	r2, r2, ip
 801e0c8:	fb01 f202 	mul.w	r2, r1, r2
 801e0cc:	7b01      	ldrb	r1, [r0, #12]
 801e0ce:	50a1      	str	r1, [r4, r2]
 801e0d0:	3301      	adds	r3, #1
 801e0d2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801e0d6:	b29b      	uxth	r3, r3
 801e0d8:	459c      	cmp	ip, r3
 801e0da:	d8ec      	bhi.n	801e0b6 <uxr_init_output_reliable_stream+0x22>
 801e0dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e0e0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801e0e4:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801e0e8:	4905      	ldr	r1, [pc, #20]	@ (801e100 <uxr_init_output_reliable_stream+0x6c>)
 801e0ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e0ee:	f8c0 100e 	str.w	r1, [r0, #14]
 801e0f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e0f6:	2300      	movs	r3, #0
 801e0f8:	8242      	strh	r2, [r0, #18]
 801e0fa:	8403      	strh	r3, [r0, #32]
 801e0fc:	4770      	bx	lr
 801e0fe:	bf00      	nop
 801e100:	ffff0000 	.word	0xffff0000

0801e104 <uxr_reset_output_reliable_stream>:
 801e104:	8901      	ldrh	r1, [r0, #8]
 801e106:	b1b1      	cbz	r1, 801e136 <uxr_reset_output_reliable_stream+0x32>
 801e108:	f04f 0c00 	mov.w	ip, #0
 801e10c:	4663      	mov	r3, ip
 801e10e:	fbb3 f2f1 	udiv	r2, r3, r1
 801e112:	fb01 3312 	mls	r3, r1, r2, r3
 801e116:	b29b      	uxth	r3, r3
 801e118:	6842      	ldr	r2, [r0, #4]
 801e11a:	fbb2 f2f1 	udiv	r2, r2, r1
 801e11e:	6801      	ldr	r1, [r0, #0]
 801e120:	fb02 f303 	mul.w	r3, r2, r3
 801e124:	7b02      	ldrb	r2, [r0, #12]
 801e126:	50ca      	str	r2, [r1, r3]
 801e128:	f10c 0c01 	add.w	ip, ip, #1
 801e12c:	8901      	ldrh	r1, [r0, #8]
 801e12e:	fa1f f38c 	uxth.w	r3, ip
 801e132:	4299      	cmp	r1, r3
 801e134:	d8eb      	bhi.n	801e10e <uxr_reset_output_reliable_stream+0xa>
 801e136:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e13a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801e13e:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801e142:	4904      	ldr	r1, [pc, #16]	@ (801e154 <uxr_reset_output_reliable_stream+0x50>)
 801e144:	f8c0 100e 	str.w	r1, [r0, #14]
 801e148:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801e14c:	2300      	movs	r3, #0
 801e14e:	8242      	strh	r2, [r0, #18]
 801e150:	8403      	strh	r3, [r0, #32]
 801e152:	4770      	bx	lr
 801e154:	ffff0000 	.word	0xffff0000

0801e158 <uxr_prepare_reliable_buffer_to_write>:
 801e158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e15c:	4604      	mov	r4, r0
 801e15e:	8900      	ldrh	r0, [r0, #8]
 801e160:	89e5      	ldrh	r5, [r4, #14]
 801e162:	fbb5 f3f0 	udiv	r3, r5, r0
 801e166:	b091      	sub	sp, #68	@ 0x44
 801e168:	fb00 5313 	mls	r3, r0, r3, r5
 801e16c:	b29b      	uxth	r3, r3
 801e16e:	9205      	str	r2, [sp, #20]
 801e170:	6862      	ldr	r2, [r4, #4]
 801e172:	fbb2 f0f0 	udiv	r0, r2, r0
 801e176:	6822      	ldr	r2, [r4, #0]
 801e178:	9006      	str	r0, [sp, #24]
 801e17a:	fb00 f303 	mul.w	r3, r0, r3
 801e17e:	3304      	adds	r3, #4
 801e180:	18d3      	adds	r3, r2, r3
 801e182:	4689      	mov	r9, r1
 801e184:	f853 6c04 	ldr.w	r6, [r3, #-4]
 801e188:	9304      	str	r3, [sp, #16]
 801e18a:	f1a0 0804 	sub.w	r8, r0, #4
 801e18e:	2104      	movs	r1, #4
 801e190:	4630      	mov	r0, r6
 801e192:	f7f5 f8fb 	bl	801338c <ucdr_alignment>
 801e196:	1833      	adds	r3, r6, r0
 801e198:	eb03 0609 	add.w	r6, r3, r9
 801e19c:	4546      	cmp	r6, r8
 801e19e:	9303      	str	r3, [sp, #12]
 801e1a0:	f240 80d6 	bls.w	801e350 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801e1a4:	7b26      	ldrb	r6, [r4, #12]
 801e1a6:	eb06 0309 	add.w	r3, r6, r9
 801e1aa:	4543      	cmp	r3, r8
 801e1ac:	f240 80bd 	bls.w	801e32a <uxr_prepare_reliable_buffer_to_write+0x1d2>
 801e1b0:	9b03      	ldr	r3, [sp, #12]
 801e1b2:	3304      	adds	r3, #4
 801e1b4:	4543      	cmp	r3, r8
 801e1b6:	f080 810d 	bcs.w	801e3d4 <uxr_prepare_reliable_buffer_to_write+0x27c>
 801e1ba:	8920      	ldrh	r0, [r4, #8]
 801e1bc:	2800      	cmp	r0, #0
 801e1be:	f000 8122 	beq.w	801e406 <uxr_prepare_reliable_buffer_to_write+0x2ae>
 801e1c2:	2100      	movs	r1, #0
 801e1c4:	6827      	ldr	r7, [r4, #0]
 801e1c6:	6862      	ldr	r2, [r4, #4]
 801e1c8:	fbb2 fef0 	udiv	lr, r2, r0
 801e1cc:	468c      	mov	ip, r1
 801e1ce:	460b      	mov	r3, r1
 801e1d0:	fbb3 f2f0 	udiv	r2, r3, r0
 801e1d4:	fb00 3312 	mls	r3, r0, r2, r3
 801e1d8:	b29b      	uxth	r3, r3
 801e1da:	fb0e f303 	mul.w	r3, lr, r3
 801e1de:	3101      	adds	r1, #1
 801e1e0:	58fa      	ldr	r2, [r7, r3]
 801e1e2:	4296      	cmp	r6, r2
 801e1e4:	bf08      	it	eq
 801e1e6:	f10c 0c01 	addeq.w	ip, ip, #1
 801e1ea:	b28b      	uxth	r3, r1
 801e1ec:	bf08      	it	eq
 801e1ee:	fa1f fc8c 	uxtheq.w	ip, ip
 801e1f2:	4283      	cmp	r3, r0
 801e1f4:	d3ec      	bcc.n	801e1d0 <uxr_prepare_reliable_buffer_to_write+0x78>
 801e1f6:	9b03      	ldr	r3, [sp, #12]
 801e1f8:	f1a8 0704 	sub.w	r7, r8, #4
 801e1fc:	b2bf      	uxth	r7, r7
 801e1fe:	1bbe      	subs	r6, r7, r6
 801e200:	1aff      	subs	r7, r7, r3
 801e202:	b2bf      	uxth	r7, r7
 801e204:	b2b6      	uxth	r6, r6
 801e206:	eba9 0907 	sub.w	r9, r9, r7
 801e20a:	fbb9 faf6 	udiv	sl, r9, r6
 801e20e:	fb06 911a 	mls	r1, r6, sl, r9
 801e212:	9607      	str	r6, [sp, #28]
 801e214:	2900      	cmp	r1, #0
 801e216:	f040 80bc 	bne.w	801e392 <uxr_prepare_reliable_buffer_to_write+0x23a>
 801e21a:	fa1f fa8a 	uxth.w	sl, sl
 801e21e:	45e2      	cmp	sl, ip
 801e220:	f200 8092 	bhi.w	801e348 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801e224:	f10d 0b20 	add.w	fp, sp, #32
 801e228:	f1ba 0f00 	cmp.w	sl, #0
 801e22c:	d03a      	beq.n	801e2a4 <uxr_prepare_reliable_buffer_to_write+0x14c>
 801e22e:	f04f 0900 	mov.w	r9, #0
 801e232:	f10d 0b20 	add.w	fp, sp, #32
 801e236:	e9d4 2300 	ldrd	r2, r3, [r4]
 801e23a:	fbb5 fcf0 	udiv	ip, r5, r0
 801e23e:	fb00 511c 	mls	r1, r0, ip, r5
 801e242:	fa1f fc81 	uxth.w	ip, r1
 801e246:	fbb3 f1f0 	udiv	r1, r3, r0
 801e24a:	fb0c f101 	mul.w	r1, ip, r1
 801e24e:	3104      	adds	r1, #4
 801e250:	4411      	add	r1, r2
 801e252:	4658      	mov	r0, fp
 801e254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e258:	9300      	str	r3, [sp, #0]
 801e25a:	4642      	mov	r2, r8
 801e25c:	2300      	movs	r3, #0
 801e25e:	f7f5 f87f 	bl	8013360 <ucdr_init_buffer_origin_offset>
 801e262:	463a      	mov	r2, r7
 801e264:	2300      	movs	r3, #0
 801e266:	210d      	movs	r1, #13
 801e268:	4658      	mov	r0, fp
 801e26a:	f7f9 fa15 	bl	8017698 <uxr_buffer_submessage_header>
 801e26e:	8921      	ldrh	r1, [r4, #8]
 801e270:	fbb5 f2f1 	udiv	r2, r5, r1
 801e274:	fb01 5212 	mls	r2, r1, r2, r5
 801e278:	b292      	uxth	r2, r2
 801e27a:	6863      	ldr	r3, [r4, #4]
 801e27c:	fbb3 f3f1 	udiv	r3, r3, r1
 801e280:	fb02 f303 	mul.w	r3, r2, r3
 801e284:	6822      	ldr	r2, [r4, #0]
 801e286:	4628      	mov	r0, r5
 801e288:	f842 8003 	str.w	r8, [r2, r3]
 801e28c:	2101      	movs	r1, #1
 801e28e:	f000 faf1 	bl	801e874 <uxr_seq_num_add>
 801e292:	f109 0901 	add.w	r9, r9, #1
 801e296:	fa1f f389 	uxth.w	r3, r9
 801e29a:	459a      	cmp	sl, r3
 801e29c:	4605      	mov	r5, r0
 801e29e:	4637      	mov	r7, r6
 801e2a0:	8920      	ldrh	r0, [r4, #8]
 801e2a2:	d8c8      	bhi.n	801e236 <uxr_prepare_reliable_buffer_to_write+0xde>
 801e2a4:	fbb5 f1f0 	udiv	r1, r5, r0
 801e2a8:	fb00 5111 	mls	r1, r0, r1, r5
 801e2ac:	b28e      	uxth	r6, r1
 801e2ae:	6863      	ldr	r3, [r4, #4]
 801e2b0:	fbb3 f1f0 	udiv	r1, r3, r0
 801e2b4:	6823      	ldr	r3, [r4, #0]
 801e2b6:	fb06 f101 	mul.w	r1, r6, r1
 801e2ba:	3104      	adds	r1, #4
 801e2bc:	4419      	add	r1, r3
 801e2be:	4642      	mov	r2, r8
 801e2c0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801e2c4:	9000      	str	r0, [sp, #0]
 801e2c6:	2300      	movs	r3, #0
 801e2c8:	4658      	mov	r0, fp
 801e2ca:	f7f5 f849 	bl	8013360 <ucdr_init_buffer_origin_offset>
 801e2ce:	9e07      	ldr	r6, [sp, #28]
 801e2d0:	4658      	mov	r0, fp
 801e2d2:	b2b2      	uxth	r2, r6
 801e2d4:	2302      	movs	r3, #2
 801e2d6:	210d      	movs	r1, #13
 801e2d8:	f7f9 f9de 	bl	8017698 <uxr_buffer_submessage_header>
 801e2dc:	9b06      	ldr	r3, [sp, #24]
 801e2de:	7b20      	ldrb	r0, [r4, #12]
 801e2e0:	8927      	ldrh	r7, [r4, #8]
 801e2e2:	f1a3 0208 	sub.w	r2, r3, #8
 801e2e6:	9b03      	ldr	r3, [sp, #12]
 801e2e8:	3004      	adds	r0, #4
 801e2ea:	1ad2      	subs	r2, r2, r3
 801e2ec:	1d19      	adds	r1, r3, #4
 801e2ee:	9b04      	ldr	r3, [sp, #16]
 801e2f0:	4430      	add	r0, r6
 801e2f2:	fbb5 f6f7 	udiv	r6, r5, r7
 801e2f6:	fb07 5616 	mls	r6, r7, r6, r5
 801e2fa:	440b      	add	r3, r1
 801e2fc:	b2b6      	uxth	r6, r6
 801e2fe:	4619      	mov	r1, r3
 801e300:	6863      	ldr	r3, [r4, #4]
 801e302:	fbb3 f3f7 	udiv	r3, r3, r7
 801e306:	fb06 f303 	mul.w	r3, r6, r3
 801e30a:	6826      	ldr	r6, [r4, #0]
 801e30c:	50f0      	str	r0, [r6, r3]
 801e30e:	9e05      	ldr	r6, [sp, #20]
 801e310:	4630      	mov	r0, r6
 801e312:	f7f5 f837 	bl	8013384 <ucdr_init_buffer>
 801e316:	4630      	mov	r0, r6
 801e318:	493c      	ldr	r1, [pc, #240]	@ (801e40c <uxr_prepare_reliable_buffer_to_write+0x2b4>)
 801e31a:	4622      	mov	r2, r4
 801e31c:	f7f5 f806 	bl	801332c <ucdr_set_on_full_buffer_callback>
 801e320:	2001      	movs	r0, #1
 801e322:	81e5      	strh	r5, [r4, #14]
 801e324:	b011      	add	sp, #68	@ 0x44
 801e326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e32a:	2101      	movs	r1, #1
 801e32c:	89e0      	ldrh	r0, [r4, #14]
 801e32e:	f000 faa1 	bl	801e874 <uxr_seq_num_add>
 801e332:	8921      	ldrh	r1, [r4, #8]
 801e334:	4605      	mov	r5, r0
 801e336:	8a60      	ldrh	r0, [r4, #18]
 801e338:	f000 fa9c 	bl	801e874 <uxr_seq_num_add>
 801e33c:	4601      	mov	r1, r0
 801e33e:	4628      	mov	r0, r5
 801e340:	f000 faa0 	bl	801e884 <uxr_seq_num_cmp>
 801e344:	2800      	cmp	r0, #0
 801e346:	dd2a      	ble.n	801e39e <uxr_prepare_reliable_buffer_to_write+0x246>
 801e348:	2000      	movs	r0, #0
 801e34a:	b011      	add	sp, #68	@ 0x44
 801e34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e350:	8921      	ldrh	r1, [r4, #8]
 801e352:	8a60      	ldrh	r0, [r4, #18]
 801e354:	f000 fa8e 	bl	801e874 <uxr_seq_num_add>
 801e358:	4601      	mov	r1, r0
 801e35a:	4628      	mov	r0, r5
 801e35c:	f000 fa92 	bl	801e884 <uxr_seq_num_cmp>
 801e360:	2800      	cmp	r0, #0
 801e362:	dcf1      	bgt.n	801e348 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801e364:	8927      	ldrh	r7, [r4, #8]
 801e366:	fbb5 f2f7 	udiv	r2, r5, r7
 801e36a:	fb07 5512 	mls	r5, r7, r2, r5
 801e36e:	b2ad      	uxth	r5, r5
 801e370:	6863      	ldr	r3, [r4, #4]
 801e372:	6822      	ldr	r2, [r4, #0]
 801e374:	fbb3 f3f7 	udiv	r3, r3, r7
 801e378:	fb05 f303 	mul.w	r3, r5, r3
 801e37c:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 801e380:	50d6      	str	r6, [r2, r3]
 801e382:	9a03      	ldr	r2, [sp, #12]
 801e384:	9200      	str	r2, [sp, #0]
 801e386:	2300      	movs	r3, #0
 801e388:	4632      	mov	r2, r6
 801e38a:	f7f4 ffe9 	bl	8013360 <ucdr_init_buffer_origin_offset>
 801e38e:	2001      	movs	r0, #1
 801e390:	e7db      	b.n	801e34a <uxr_prepare_reliable_buffer_to_write+0x1f2>
 801e392:	f10a 0a01 	add.w	sl, sl, #1
 801e396:	fa1f fa8a 	uxth.w	sl, sl
 801e39a:	9107      	str	r1, [sp, #28]
 801e39c:	e73f      	b.n	801e21e <uxr_prepare_reliable_buffer_to_write+0xc6>
 801e39e:	8921      	ldrh	r1, [r4, #8]
 801e3a0:	fbb5 f3f1 	udiv	r3, r5, r1
 801e3a4:	fb01 5313 	mls	r3, r1, r3, r5
 801e3a8:	b29a      	uxth	r2, r3
 801e3aa:	6863      	ldr	r3, [r4, #4]
 801e3ac:	fbb3 f3f1 	udiv	r3, r3, r1
 801e3b0:	6821      	ldr	r1, [r4, #0]
 801e3b2:	9805      	ldr	r0, [sp, #20]
 801e3b4:	fb02 f303 	mul.w	r3, r2, r3
 801e3b8:	3304      	adds	r3, #4
 801e3ba:	7b22      	ldrb	r2, [r4, #12]
 801e3bc:	4419      	add	r1, r3
 801e3be:	444a      	add	r2, r9
 801e3c0:	f841 2c04 	str.w	r2, [r1, #-4]
 801e3c4:	7b23      	ldrb	r3, [r4, #12]
 801e3c6:	9300      	str	r3, [sp, #0]
 801e3c8:	2300      	movs	r3, #0
 801e3ca:	f7f4 ffc9 	bl	8013360 <ucdr_init_buffer_origin_offset>
 801e3ce:	81e5      	strh	r5, [r4, #14]
 801e3d0:	2001      	movs	r0, #1
 801e3d2:	e7ba      	b.n	801e34a <uxr_prepare_reliable_buffer_to_write+0x1f2>
 801e3d4:	4628      	mov	r0, r5
 801e3d6:	2101      	movs	r1, #1
 801e3d8:	f000 fa4c 	bl	801e874 <uxr_seq_num_add>
 801e3dc:	4605      	mov	r5, r0
 801e3de:	8920      	ldrh	r0, [r4, #8]
 801e3e0:	fbb5 f3f0 	udiv	r3, r5, r0
 801e3e4:	fb00 5313 	mls	r3, r0, r3, r5
 801e3e8:	b29a      	uxth	r2, r3
 801e3ea:	6863      	ldr	r3, [r4, #4]
 801e3ec:	fbb3 f3f0 	udiv	r3, r3, r0
 801e3f0:	fb02 f303 	mul.w	r3, r2, r3
 801e3f4:	6822      	ldr	r2, [r4, #0]
 801e3f6:	7b26      	ldrb	r6, [r4, #12]
 801e3f8:	3304      	adds	r3, #4
 801e3fa:	18d3      	adds	r3, r2, r3
 801e3fc:	9304      	str	r3, [sp, #16]
 801e3fe:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801e402:	9303      	str	r3, [sp, #12]
 801e404:	e6da      	b.n	801e1bc <uxr_prepare_reliable_buffer_to_write+0x64>
 801e406:	4684      	mov	ip, r0
 801e408:	e6f5      	b.n	801e1f6 <uxr_prepare_reliable_buffer_to_write+0x9e>
 801e40a:	bf00      	nop
 801e40c:	0801e039 	.word	0x0801e039

0801e410 <uxr_prepare_next_reliable_buffer_to_send>:
 801e410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e412:	4604      	mov	r4, r0
 801e414:	460f      	mov	r7, r1
 801e416:	8a00      	ldrh	r0, [r0, #16]
 801e418:	2101      	movs	r1, #1
 801e41a:	4616      	mov	r6, r2
 801e41c:	461d      	mov	r5, r3
 801e41e:	f000 fa29 	bl	801e874 <uxr_seq_num_add>
 801e422:	8028      	strh	r0, [r5, #0]
 801e424:	8922      	ldrh	r2, [r4, #8]
 801e426:	fbb0 f3f2 	udiv	r3, r0, r2
 801e42a:	fb02 0c13 	mls	ip, r2, r3, r0
 801e42e:	fa1f fc8c 	uxth.w	ip, ip
 801e432:	6863      	ldr	r3, [r4, #4]
 801e434:	fbb3 f3f2 	udiv	r3, r3, r2
 801e438:	fb0c fc03 	mul.w	ip, ip, r3
 801e43c:	6823      	ldr	r3, [r4, #0]
 801e43e:	89e1      	ldrh	r1, [r4, #14]
 801e440:	f10c 0c04 	add.w	ip, ip, #4
 801e444:	4463      	add	r3, ip
 801e446:	603b      	str	r3, [r7, #0]
 801e448:	6823      	ldr	r3, [r4, #0]
 801e44a:	449c      	add	ip, r3
 801e44c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801e450:	6033      	str	r3, [r6, #0]
 801e452:	f000 fa17 	bl	801e884 <uxr_seq_num_cmp>
 801e456:	2800      	cmp	r0, #0
 801e458:	dd01      	ble.n	801e45e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801e45a:	2000      	movs	r0, #0
 801e45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e45e:	7b23      	ldrb	r3, [r4, #12]
 801e460:	6832      	ldr	r2, [r6, #0]
 801e462:	429a      	cmp	r2, r3
 801e464:	d9f9      	bls.n	801e45a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801e466:	8a61      	ldrh	r1, [r4, #18]
 801e468:	8a20      	ldrh	r0, [r4, #16]
 801e46a:	f000 fa07 	bl	801e87c <uxr_seq_num_sub>
 801e46e:	8923      	ldrh	r3, [r4, #8]
 801e470:	4283      	cmp	r3, r0
 801e472:	d0f2      	beq.n	801e45a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801e474:	8828      	ldrh	r0, [r5, #0]
 801e476:	89e3      	ldrh	r3, [r4, #14]
 801e478:	8220      	strh	r0, [r4, #16]
 801e47a:	4298      	cmp	r0, r3
 801e47c:	d001      	beq.n	801e482 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801e47e:	2001      	movs	r0, #1
 801e480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e482:	2101      	movs	r1, #1
 801e484:	f000 f9f6 	bl	801e874 <uxr_seq_num_add>
 801e488:	81e0      	strh	r0, [r4, #14]
 801e48a:	2001      	movs	r0, #1
 801e48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e48e:	bf00      	nop

0801e490 <uxr_update_output_stream_heartbeat_timestamp>:
 801e490:	b570      	push	{r4, r5, r6, lr}
 801e492:	8a01      	ldrh	r1, [r0, #16]
 801e494:	4604      	mov	r4, r0
 801e496:	8a40      	ldrh	r0, [r0, #18]
 801e498:	4615      	mov	r5, r2
 801e49a:	461e      	mov	r6, r3
 801e49c:	f000 f9f2 	bl	801e884 <uxr_seq_num_cmp>
 801e4a0:	2800      	cmp	r0, #0
 801e4a2:	db07      	blt.n	801e4b4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801e4a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e4a8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801e4ac:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801e4b0:	2000      	movs	r0, #0
 801e4b2:	bd70      	pop	{r4, r5, r6, pc}
 801e4b4:	f894 0020 	ldrb.w	r0, [r4, #32]
 801e4b8:	b940      	cbnz	r0, 801e4cc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801e4ba:	2301      	movs	r3, #1
 801e4bc:	f884 3020 	strb.w	r3, [r4, #32]
 801e4c0:	3564      	adds	r5, #100	@ 0x64
 801e4c2:	f146 0600 	adc.w	r6, r6, #0
 801e4c6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801e4ca:	bd70      	pop	{r4, r5, r6, pc}
 801e4cc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801e4d0:	4295      	cmp	r5, r2
 801e4d2:	eb76 0303 	sbcs.w	r3, r6, r3
 801e4d6:	bfa5      	ittet	ge
 801e4d8:	3001      	addge	r0, #1
 801e4da:	f884 0020 	strbge.w	r0, [r4, #32]
 801e4de:	2000      	movlt	r0, #0
 801e4e0:	2001      	movge	r0, #1
 801e4e2:	e7ed      	b.n	801e4c0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

0801e4e4 <uxr_begin_output_nack_buffer_it>:
 801e4e4:	8a40      	ldrh	r0, [r0, #18]
 801e4e6:	4770      	bx	lr

0801e4e8 <uxr_next_reliable_nack_buffer_to_send>:
 801e4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e4ec:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 801e4f0:	b082      	sub	sp, #8
 801e4f2:	f1b8 0f00 	cmp.w	r8, #0
 801e4f6:	d011      	beq.n	801e51c <uxr_next_reliable_nack_buffer_to_send+0x34>
 801e4f8:	4604      	mov	r4, r0
 801e4fa:	8818      	ldrh	r0, [r3, #0]
 801e4fc:	460e      	mov	r6, r1
 801e4fe:	4617      	mov	r7, r2
 801e500:	461d      	mov	r5, r3
 801e502:	2101      	movs	r1, #1
 801e504:	f000 f9b6 	bl	801e874 <uxr_seq_num_add>
 801e508:	8028      	strh	r0, [r5, #0]
 801e50a:	8a21      	ldrh	r1, [r4, #16]
 801e50c:	f000 f9ba 	bl	801e884 <uxr_seq_num_cmp>
 801e510:	2800      	cmp	r0, #0
 801e512:	dd07      	ble.n	801e524 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 801e514:	f04f 0800 	mov.w	r8, #0
 801e518:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801e51c:	4640      	mov	r0, r8
 801e51e:	b002      	add	sp, #8
 801e520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e524:	8921      	ldrh	r1, [r4, #8]
 801e526:	8828      	ldrh	r0, [r5, #0]
 801e528:	6823      	ldr	r3, [r4, #0]
 801e52a:	fbb0 f2f1 	udiv	r2, r0, r1
 801e52e:	fb01 0c12 	mls	ip, r1, r2, r0
 801e532:	fa1f f28c 	uxth.w	r2, ip
 801e536:	9301      	str	r3, [sp, #4]
 801e538:	6863      	ldr	r3, [r4, #4]
 801e53a:	fbb3 fcf1 	udiv	ip, r3, r1
 801e53e:	9b01      	ldr	r3, [sp, #4]
 801e540:	fb02 fc0c 	mul.w	ip, r2, ip
 801e544:	f10c 0c04 	add.w	ip, ip, #4
 801e548:	4463      	add	r3, ip
 801e54a:	6033      	str	r3, [r6, #0]
 801e54c:	6823      	ldr	r3, [r4, #0]
 801e54e:	4463      	add	r3, ip
 801e550:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801e554:	603b      	str	r3, [r7, #0]
 801e556:	7b22      	ldrb	r2, [r4, #12]
 801e558:	429a      	cmp	r2, r3
 801e55a:	d0d2      	beq.n	801e502 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801e55c:	4640      	mov	r0, r8
 801e55e:	b002      	add	sp, #8
 801e560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e564 <uxr_process_acknack>:
 801e564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e566:	4604      	mov	r4, r0
 801e568:	460e      	mov	r6, r1
 801e56a:	4610      	mov	r0, r2
 801e56c:	2101      	movs	r1, #1
 801e56e:	f000 f985 	bl	801e87c <uxr_seq_num_sub>
 801e572:	8a61      	ldrh	r1, [r4, #18]
 801e574:	f000 f982 	bl	801e87c <uxr_seq_num_sub>
 801e578:	b1c0      	cbz	r0, 801e5ac <uxr_process_acknack+0x48>
 801e57a:	4605      	mov	r5, r0
 801e57c:	2700      	movs	r7, #0
 801e57e:	2101      	movs	r1, #1
 801e580:	8a60      	ldrh	r0, [r4, #18]
 801e582:	f000 f977 	bl	801e874 <uxr_seq_num_add>
 801e586:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801e58a:	fbb0 f1fc 	udiv	r1, r0, ip
 801e58e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801e592:	fb0c 0111 	mls	r1, ip, r1, r0
 801e596:	b289      	uxth	r1, r1
 801e598:	3701      	adds	r7, #1
 801e59a:	fbb3 f3fc 	udiv	r3, r3, ip
 801e59e:	fb01 f303 	mul.w	r3, r1, r3
 801e5a2:	42bd      	cmp	r5, r7
 801e5a4:	7b21      	ldrb	r1, [r4, #12]
 801e5a6:	8260      	strh	r0, [r4, #18]
 801e5a8:	50d1      	str	r1, [r2, r3]
 801e5aa:	d1e8      	bne.n	801e57e <uxr_process_acknack+0x1a>
 801e5ac:	3e00      	subs	r6, #0
 801e5ae:	f04f 0300 	mov.w	r3, #0
 801e5b2:	bf18      	it	ne
 801e5b4:	2601      	movne	r6, #1
 801e5b6:	f884 3020 	strb.w	r3, [r4, #32]
 801e5ba:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801e5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e5c0 <uxr_is_output_up_to_date>:
 801e5c0:	8a01      	ldrh	r1, [r0, #16]
 801e5c2:	8a40      	ldrh	r0, [r0, #18]
 801e5c4:	b508      	push	{r3, lr}
 801e5c6:	f000 f95d 	bl	801e884 <uxr_seq_num_cmp>
 801e5ca:	fab0 f080 	clz	r0, r0
 801e5ce:	0940      	lsrs	r0, r0, #5
 801e5d0:	bd08      	pop	{r3, pc}
 801e5d2:	bf00      	nop

0801e5d4 <get_available_free_slots>:
 801e5d4:	8902      	ldrh	r2, [r0, #8]
 801e5d6:	b1da      	cbz	r2, 801e610 <get_available_free_slots+0x3c>
 801e5d8:	b530      	push	{r4, r5, lr}
 801e5da:	2100      	movs	r1, #0
 801e5dc:	6843      	ldr	r3, [r0, #4]
 801e5de:	6805      	ldr	r5, [r0, #0]
 801e5e0:	7b04      	ldrb	r4, [r0, #12]
 801e5e2:	fbb3 fef2 	udiv	lr, r3, r2
 801e5e6:	4608      	mov	r0, r1
 801e5e8:	460b      	mov	r3, r1
 801e5ea:	fbb3 fcf2 	udiv	ip, r3, r2
 801e5ee:	fb02 331c 	mls	r3, r2, ip, r3
 801e5f2:	b29b      	uxth	r3, r3
 801e5f4:	fb0e f303 	mul.w	r3, lr, r3
 801e5f8:	3101      	adds	r1, #1
 801e5fa:	f855 c003 	ldr.w	ip, [r5, r3]
 801e5fe:	4564      	cmp	r4, ip
 801e600:	bf08      	it	eq
 801e602:	3001      	addeq	r0, #1
 801e604:	b28b      	uxth	r3, r1
 801e606:	bf08      	it	eq
 801e608:	b280      	uxtheq	r0, r0
 801e60a:	4293      	cmp	r3, r2
 801e60c:	d3ed      	bcc.n	801e5ea <get_available_free_slots+0x16>
 801e60e:	bd30      	pop	{r4, r5, pc}
 801e610:	4610      	mov	r0, r2
 801e612:	4770      	bx	lr

0801e614 <uxr_buffer_request_data>:
 801e614:	b530      	push	{r4, r5, lr}
 801e616:	b095      	sub	sp, #84	@ 0x54
 801e618:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801e61c:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 801e61e:	9303      	str	r3, [sp, #12]
 801e620:	2200      	movs	r2, #0
 801e622:	2d00      	cmp	r5, #0
 801e624:	bf14      	ite	ne
 801e626:	2101      	movne	r1, #1
 801e628:	4611      	moveq	r1, r2
 801e62a:	4604      	mov	r4, r0
 801e62c:	f88d 301c 	strb.w	r3, [sp, #28]
 801e630:	f88d 201d 	strb.w	r2, [sp, #29]
 801e634:	f88d 201e 	strb.w	r2, [sp, #30]
 801e638:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 801e63c:	d021      	beq.n	801e682 <uxr_buffer_request_data+0x6e>
 801e63e:	682a      	ldr	r2, [r5, #0]
 801e640:	686b      	ldr	r3, [r5, #4]
 801e642:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
 801e646:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801e64a:	2210      	movs	r2, #16
 801e64c:	2308      	movs	r3, #8
 801e64e:	2100      	movs	r1, #0
 801e650:	e9cd 3100 	strd	r3, r1, [sp]
 801e654:	4620      	mov	r0, r4
 801e656:	9905      	ldr	r1, [sp, #20]
 801e658:	ab0c      	add	r3, sp, #48	@ 0x30
 801e65a:	f7f8 fd7f 	bl	801715c <uxr_prepare_stream_to_write_submessage>
 801e65e:	b918      	cbnz	r0, 801e668 <uxr_buffer_request_data+0x54>
 801e660:	4604      	mov	r4, r0
 801e662:	4620      	mov	r0, r4
 801e664:	b015      	add	sp, #84	@ 0x54
 801e666:	bd30      	pop	{r4, r5, pc}
 801e668:	9904      	ldr	r1, [sp, #16]
 801e66a:	aa06      	add	r2, sp, #24
 801e66c:	4620      	mov	r0, r4
 801e66e:	f7f8 feab 	bl	80173c8 <uxr_init_base_object_request>
 801e672:	a906      	add	r1, sp, #24
 801e674:	4604      	mov	r4, r0
 801e676:	a80c      	add	r0, sp, #48	@ 0x30
 801e678:	f7fa f9a6 	bl	80189c8 <uxr_serialize_READ_DATA_Payload>
 801e67c:	4620      	mov	r0, r4
 801e67e:	b015      	add	sp, #84	@ 0x54
 801e680:	bd30      	pop	{r4, r5, pc}
 801e682:	2208      	movs	r2, #8
 801e684:	e7e2      	b.n	801e64c <uxr_buffer_request_data+0x38>
 801e686:	bf00      	nop

0801e688 <uxr_buffer_cancel_data>:
 801e688:	b510      	push	{r4, lr}
 801e68a:	b094      	sub	sp, #80	@ 0x50
 801e68c:	2300      	movs	r3, #0
 801e68e:	9202      	str	r2, [sp, #8]
 801e690:	9205      	str	r2, [sp, #20]
 801e692:	9301      	str	r3, [sp, #4]
 801e694:	2201      	movs	r2, #1
 801e696:	f8ad 301c 	strh.w	r3, [sp, #28]
 801e69a:	f88d 301e 	strb.w	r3, [sp, #30]
 801e69e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 801e6a2:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 801e6a6:	2308      	movs	r3, #8
 801e6a8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 801e6ac:	9300      	str	r3, [sp, #0]
 801e6ae:	2210      	movs	r2, #16
 801e6b0:	ab0c      	add	r3, sp, #48	@ 0x30
 801e6b2:	4604      	mov	r4, r0
 801e6b4:	9103      	str	r1, [sp, #12]
 801e6b6:	f7f8 fd51 	bl	801715c <uxr_prepare_stream_to_write_submessage>
 801e6ba:	b918      	cbnz	r0, 801e6c4 <uxr_buffer_cancel_data+0x3c>
 801e6bc:	4604      	mov	r4, r0
 801e6be:	4620      	mov	r0, r4
 801e6c0:	b014      	add	sp, #80	@ 0x50
 801e6c2:	bd10      	pop	{r4, pc}
 801e6c4:	9905      	ldr	r1, [sp, #20]
 801e6c6:	aa06      	add	r2, sp, #24
 801e6c8:	4620      	mov	r0, r4
 801e6ca:	f7f8 fe7d 	bl	80173c8 <uxr_init_base_object_request>
 801e6ce:	a906      	add	r1, sp, #24
 801e6d0:	4604      	mov	r4, r0
 801e6d2:	a80c      	add	r0, sp, #48	@ 0x30
 801e6d4:	f7fa f978 	bl	80189c8 <uxr_serialize_READ_DATA_Payload>
 801e6d8:	4620      	mov	r0, r4
 801e6da:	b014      	add	sp, #80	@ 0x50
 801e6dc:	bd10      	pop	{r4, pc}
 801e6de:	bf00      	nop

0801e6e0 <read_submessage_format>:
 801e6e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e6e4:	b095      	sub	sp, #84	@ 0x54
 801e6e6:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 801e6ea:	b113      	cbz	r3, 801e6f2 <read_submessage_format+0x12>
 801e6ec:	b015      	add	sp, #84	@ 0x54
 801e6ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e6f2:	460c      	mov	r4, r1
 801e6f4:	4615      	mov	r5, r2
 801e6f6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801e6fa:	4607      	mov	r7, r0
 801e6fc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801e6fe:	9004      	str	r0, [sp, #16]
 801e700:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801e702:	9005      	str	r0, [sp, #20]
 801e704:	1a52      	subs	r2, r2, r1
 801e706:	a80c      	add	r0, sp, #48	@ 0x30
 801e708:	4699      	mov	r9, r3
 801e70a:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801e70e:	f7f4 fe39 	bl	8013384 <ucdr_init_buffer>
 801e712:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801e716:	a80c      	add	r0, sp, #48	@ 0x30
 801e718:	f7f4 fe08 	bl	801332c <ucdr_set_on_full_buffer_callback>
 801e71c:	69e2      	ldr	r2, [r4, #28]
 801e71e:	b19a      	cbz	r2, 801e748 <read_submessage_format+0x68>
 801e720:	f1b8 0f07 	cmp.w	r8, #7
 801e724:	f882 9014 	strb.w	r9, [r2, #20]
 801e728:	d040      	beq.n	801e7ac <read_submessage_format+0xcc>
 801e72a:	f1b8 0f08 	cmp.w	r8, #8
 801e72e:	d02e      	beq.n	801e78e <read_submessage_format+0xae>
 801e730:	f1b8 0f06 	cmp.w	r8, #6
 801e734:	d011      	beq.n	801e75a <read_submessage_format+0x7a>
 801e736:	2301      	movs	r3, #1
 801e738:	7513      	strb	r3, [r2, #20]
 801e73a:	4629      	mov	r1, r5
 801e73c:	4620      	mov	r0, r4
 801e73e:	f7f4 fe71 	bl	8013424 <ucdr_advance_buffer>
 801e742:	b015      	add	sp, #84	@ 0x54
 801e744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e748:	f1b8 0f07 	cmp.w	r8, #7
 801e74c:	d02e      	beq.n	801e7ac <read_submessage_format+0xcc>
 801e74e:	f1b8 0f08 	cmp.w	r8, #8
 801e752:	d01c      	beq.n	801e78e <read_submessage_format+0xae>
 801e754:	f1b8 0f06 	cmp.w	r8, #6
 801e758:	d1ef      	bne.n	801e73a <read_submessage_format+0x5a>
 801e75a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 801e75e:	f1b8 0f00 	cmp.w	r8, #0
 801e762:	d011      	beq.n	801e788 <read_submessage_format+0xa8>
 801e764:	ab0c      	add	r3, sp, #48	@ 0x30
 801e766:	e9cd 3500 	strd	r3, r5, [sp]
 801e76a:	2306      	movs	r3, #6
 801e76c:	f88d 3016 	strb.w	r3, [sp, #22]
 801e770:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801e774:	9302      	str	r3, [sp, #8]
 801e776:	4632      	mov	r2, r6
 801e778:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801e77c:	4638      	mov	r0, r7
 801e77e:	47c0      	blx	r8
 801e780:	2301      	movs	r3, #1
 801e782:	69e2      	ldr	r2, [r4, #28]
 801e784:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801e788:	2a00      	cmp	r2, #0
 801e78a:	d1d4      	bne.n	801e736 <read_submessage_format+0x56>
 801e78c:	e7d5      	b.n	801e73a <read_submessage_format+0x5a>
 801e78e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801e792:	2b00      	cmp	r3, #0
 801e794:	d0f8      	beq.n	801e788 <read_submessage_format+0xa8>
 801e796:	a906      	add	r1, sp, #24
 801e798:	a80c      	add	r0, sp, #48	@ 0x30
 801e79a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801e79e:	f7fa f9d9 	bl	8018b54 <uxr_deserialize_SampleIdentity>
 801e7a2:	b9a0      	cbnz	r0, 801e7ce <read_submessage_format+0xee>
 801e7a4:	69e2      	ldr	r2, [r4, #28]
 801e7a6:	2a00      	cmp	r2, #0
 801e7a8:	d1c5      	bne.n	801e736 <read_submessage_format+0x56>
 801e7aa:	e7c6      	b.n	801e73a <read_submessage_format+0x5a>
 801e7ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e7b0:	b13b      	cbz	r3, 801e7c2 <read_submessage_format+0xe2>
 801e7b2:	a906      	add	r1, sp, #24
 801e7b4:	a80c      	add	r0, sp, #48	@ 0x30
 801e7b6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 801e7ba:	f7f9 fe9f 	bl	80184fc <uxr_deserialize_BaseObjectRequest>
 801e7be:	bb60      	cbnz	r0, 801e81a <read_submessage_format+0x13a>
 801e7c0:	69e2      	ldr	r2, [r4, #28]
 801e7c2:	68a3      	ldr	r3, [r4, #8]
 801e7c4:	442b      	add	r3, r5
 801e7c6:	60a3      	str	r3, [r4, #8]
 801e7c8:	2a00      	cmp	r2, #0
 801e7ca:	d1b4      	bne.n	801e736 <read_submessage_format+0x56>
 801e7cc:	e7b5      	b.n	801e73a <read_submessage_format+0x5a>
 801e7ce:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801e7d2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e7d4:	1a52      	subs	r2, r2, r1
 801e7d6:	eba8 0803 	sub.w	r8, r8, r3
 801e7da:	a80c      	add	r0, sp, #48	@ 0x30
 801e7dc:	f7f4 fdd2 	bl	8013384 <ucdr_init_buffer>
 801e7e0:	44a8      	add	r8, r5
 801e7e2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801e7e6:	a80c      	add	r0, sp, #48	@ 0x30
 801e7e8:	f7f4 fda0 	bl	801332c <ucdr_set_on_full_buffer_callback>
 801e7ec:	fa1f f888 	uxth.w	r8, r8
 801e7f0:	ab0c      	add	r3, sp, #48	@ 0x30
 801e7f2:	9300      	str	r3, [sp, #0]
 801e7f4:	f8cd 8004 	str.w	r8, [sp, #4]
 801e7f8:	2108      	movs	r1, #8
 801e7fa:	f88d 1016 	strb.w	r1, [sp, #22]
 801e7fe:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801e802:	9102      	str	r1, [sp, #8]
 801e804:	ab06      	add	r3, sp, #24
 801e806:	4632      	mov	r2, r6
 801e808:	9905      	ldr	r1, [sp, #20]
 801e80a:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 801e80e:	4638      	mov	r0, r7
 801e810:	47b0      	blx	r6
 801e812:	2301      	movs	r3, #1
 801e814:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801e818:	e7c4      	b.n	801e7a4 <read_submessage_format+0xc4>
 801e81a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801e81e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801e820:	1a52      	subs	r2, r2, r1
 801e822:	a80c      	add	r0, sp, #48	@ 0x30
 801e824:	eba8 0803 	sub.w	r8, r8, r3
 801e828:	f7f4 fdac 	bl	8013384 <ucdr_init_buffer>
 801e82c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801e830:	a80c      	add	r0, sp, #48	@ 0x30
 801e832:	f7f4 fd7b 	bl	801332c <ucdr_set_on_full_buffer_callback>
 801e836:	ab0c      	add	r3, sp, #48	@ 0x30
 801e838:	9300      	str	r3, [sp, #0]
 801e83a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801e83e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801e842:	44a8      	add	r8, r5
 801e844:	fa1f f888 	uxth.w	r8, r8
 801e848:	f8cd 8004 	str.w	r8, [sp, #4]
 801e84c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801e850:	2107      	movs	r1, #7
 801e852:	f88d 1016 	strb.w	r1, [sp, #22]
 801e856:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 801e85a:	9102      	str	r1, [sp, #8]
 801e85c:	4632      	mov	r2, r6
 801e85e:	b29b      	uxth	r3, r3
 801e860:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 801e864:	9905      	ldr	r1, [sp, #20]
 801e866:	4638      	mov	r0, r7
 801e868:	47b0      	blx	r6
 801e86a:	2301      	movs	r3, #1
 801e86c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 801e870:	e7a6      	b.n	801e7c0 <read_submessage_format+0xe0>
 801e872:	bf00      	nop

0801e874 <uxr_seq_num_add>:
 801e874:	4408      	add	r0, r1
 801e876:	b280      	uxth	r0, r0
 801e878:	4770      	bx	lr
 801e87a:	bf00      	nop

0801e87c <uxr_seq_num_sub>:
 801e87c:	1a40      	subs	r0, r0, r1
 801e87e:	b280      	uxth	r0, r0
 801e880:	4770      	bx	lr
 801e882:	bf00      	nop

0801e884 <uxr_seq_num_cmp>:
 801e884:	4288      	cmp	r0, r1
 801e886:	d011      	beq.n	801e8ac <uxr_seq_num_cmp+0x28>
 801e888:	d309      	bcc.n	801e89e <uxr_seq_num_cmp+0x1a>
 801e88a:	4288      	cmp	r0, r1
 801e88c:	d910      	bls.n	801e8b0 <uxr_seq_num_cmp+0x2c>
 801e88e:	1a40      	subs	r0, r0, r1
 801e890:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801e894:	bfd4      	ite	le
 801e896:	2001      	movle	r0, #1
 801e898:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801e89c:	4770      	bx	lr
 801e89e:	1a0b      	subs	r3, r1, r0
 801e8a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e8a4:	daf1      	bge.n	801e88a <uxr_seq_num_cmp+0x6>
 801e8a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801e8aa:	4770      	bx	lr
 801e8ac:	2000      	movs	r0, #0
 801e8ae:	4770      	bx	lr
 801e8b0:	2001      	movs	r0, #1
 801e8b2:	4770      	bx	lr

0801e8b4 <uxr_init_framing_io>:
 801e8b4:	2300      	movs	r3, #0
 801e8b6:	7041      	strb	r1, [r0, #1]
 801e8b8:	7003      	strb	r3, [r0, #0]
 801e8ba:	8583      	strh	r3, [r0, #44]	@ 0x2c
 801e8bc:	4770      	bx	lr
 801e8be:	bf00      	nop

0801e8c0 <uxr_write_framed_msg>:
 801e8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8c4:	4617      	mov	r7, r2
 801e8c6:	7842      	ldrb	r2, [r0, #1]
 801e8c8:	b083      	sub	sp, #12
 801e8ca:	460e      	mov	r6, r1
 801e8cc:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 801e8d0:	469a      	mov	sl, r3
 801e8d2:	2901      	cmp	r1, #1
 801e8d4:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 801e8d8:	4604      	mov	r4, r0
 801e8da:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 801e8de:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 801e8e2:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801e8e6:	f240 8137 	bls.w	801eb58 <uxr_write_framed_msg+0x298>
 801e8ea:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801e8ee:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 801e8f2:	2901      	cmp	r1, #1
 801e8f4:	f04f 0202 	mov.w	r2, #2
 801e8f8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801e8fc:	f240 808f 	bls.w	801ea1e <uxr_write_framed_msg+0x15e>
 801e900:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e902:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 801e906:	b2dd      	uxtb	r5, r3
 801e908:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801e90c:	2203      	movs	r2, #3
 801e90e:	2901      	cmp	r1, #1
 801e910:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801e914:	f240 809a 	bls.w	801ea4c <uxr_write_framed_msg+0x18c>
 801e918:	18a1      	adds	r1, r4, r2
 801e91a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e91c:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 801e920:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801e924:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801e928:	3201      	adds	r2, #1
 801e92a:	2801      	cmp	r0, #1
 801e92c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801e930:	f240 80a0 	bls.w	801ea74 <uxr_write_framed_msg+0x1b4>
 801e934:	18a0      	adds	r0, r4, r2
 801e936:	3201      	adds	r2, #1
 801e938:	b2d2      	uxtb	r2, r2
 801e93a:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801e93e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801e942:	2b00      	cmp	r3, #0
 801e944:	f000 80a9 	beq.w	801ea9a <uxr_write_framed_msg+0x1da>
 801e948:	f04f 0900 	mov.w	r9, #0
 801e94c:	46c8      	mov	r8, r9
 801e94e:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801e952:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801e956:	2901      	cmp	r1, #1
 801e958:	f240 80c3 	bls.w	801eae2 <uxr_write_framed_msg+0x222>
 801e95c:	2a29      	cmp	r2, #41	@ 0x29
 801e95e:	f200 809f 	bhi.w	801eaa0 <uxr_write_framed_msg+0x1e0>
 801e962:	18a1      	adds	r1, r4, r2
 801e964:	3201      	adds	r2, #1
 801e966:	b2d2      	uxtb	r2, r2
 801e968:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 801e96c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801e970:	ea89 0303 	eor.w	r3, r9, r3
 801e974:	498c      	ldr	r1, [pc, #560]	@ (801eba8 <uxr_write_framed_msg+0x2e8>)
 801e976:	b2db      	uxtb	r3, r3
 801e978:	f108 0801 	add.w	r8, r8, #1
 801e97c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801e980:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 801e984:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e986:	4543      	cmp	r3, r8
 801e988:	d8e1      	bhi.n	801e94e <uxr_write_framed_msg+0x8e>
 801e98a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801e98e:	fa5f f889 	uxtb.w	r8, r9
 801e992:	9301      	str	r3, [sp, #4]
 801e994:	f04f 0900 	mov.w	r9, #0
 801e998:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 801e99c:	fa5f f18a 	uxtb.w	r1, sl
 801e9a0:	2901      	cmp	r1, #1
 801e9a2:	d921      	bls.n	801e9e8 <uxr_write_framed_msg+0x128>
 801e9a4:	2a29      	cmp	r2, #41	@ 0x29
 801e9a6:	f240 80af 	bls.w	801eb08 <uxr_write_framed_msg+0x248>
 801e9aa:	2500      	movs	r5, #0
 801e9ac:	e000      	b.n	801e9b0 <uxr_write_framed_msg+0xf0>
 801e9ae:	b160      	cbz	r0, 801e9ca <uxr_write_framed_msg+0x10a>
 801e9b0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801e9b4:	1b52      	subs	r2, r2, r5
 801e9b6:	465b      	mov	r3, fp
 801e9b8:	4421      	add	r1, r4
 801e9ba:	4638      	mov	r0, r7
 801e9bc:	47b0      	blx	r6
 801e9be:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801e9c2:	4405      	add	r5, r0
 801e9c4:	4295      	cmp	r5, r2
 801e9c6:	d3f2      	bcc.n	801e9ae <uxr_write_framed_msg+0xee>
 801e9c8:	d003      	beq.n	801e9d2 <uxr_write_framed_msg+0x112>
 801e9ca:	2000      	movs	r0, #0
 801e9cc:	b003      	add	sp, #12
 801e9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e9d2:	fa5f f18a 	uxtb.w	r1, sl
 801e9d6:	f04f 0300 	mov.w	r3, #0
 801e9da:	2901      	cmp	r1, #1
 801e9dc:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801e9e0:	f04f 0200 	mov.w	r2, #0
 801e9e4:	f200 8090 	bhi.w	801eb08 <uxr_write_framed_msg+0x248>
 801e9e8:	1c51      	adds	r1, r2, #1
 801e9ea:	b2c9      	uxtb	r1, r1
 801e9ec:	2929      	cmp	r1, #41	@ 0x29
 801e9ee:	d8dc      	bhi.n	801e9aa <uxr_write_framed_msg+0xea>
 801e9f0:	18a5      	adds	r5, r4, r2
 801e9f2:	4421      	add	r1, r4
 801e9f4:	3202      	adds	r2, #2
 801e9f6:	f088 0820 	eor.w	r8, r8, #32
 801e9fa:	4648      	mov	r0, r9
 801e9fc:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 801ea00:	b2d2      	uxtb	r2, r2
 801ea02:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 801ea06:	f04f 0901 	mov.w	r9, #1
 801ea0a:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801ea0e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ea12:	2800      	cmp	r0, #0
 801ea14:	f040 8085 	bne.w	801eb22 <uxr_write_framed_msg+0x262>
 801ea18:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ea1c:	e7bc      	b.n	801e998 <uxr_write_framed_msg+0xd8>
 801ea1e:	4611      	mov	r1, r2
 801ea20:	f04f 0c03 	mov.w	ip, #3
 801ea24:	2204      	movs	r2, #4
 801ea26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ea28:	4421      	add	r1, r4
 801ea2a:	b2dd      	uxtb	r5, r3
 801ea2c:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801ea30:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 801ea34:	44a4      	add	ip, r4
 801ea36:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801ea3a:	f080 0020 	eor.w	r0, r0, #32
 801ea3e:	2901      	cmp	r1, #1
 801ea40:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 801ea44:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ea48:	f63f af66 	bhi.w	801e918 <uxr_write_framed_msg+0x58>
 801ea4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ea4e:	18a0      	adds	r0, r4, r2
 801ea50:	f085 0520 	eor.w	r5, r5, #32
 801ea54:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801ea58:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801ea5c:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 801ea60:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 801ea64:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801ea68:	3202      	adds	r2, #2
 801ea6a:	2801      	cmp	r0, #1
 801ea6c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ea70:	f63f af60 	bhi.w	801e934 <uxr_write_framed_msg+0x74>
 801ea74:	1c50      	adds	r0, r2, #1
 801ea76:	18a5      	adds	r5, r4, r2
 801ea78:	fa54 f080 	uxtab	r0, r4, r0
 801ea7c:	3202      	adds	r2, #2
 801ea7e:	f081 0120 	eor.w	r1, r1, #32
 801ea82:	b2d2      	uxtb	r2, r2
 801ea84:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801ea88:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 801ea8c:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801ea90:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801ea94:	2b00      	cmp	r3, #0
 801ea96:	f47f af57 	bne.w	801e948 <uxr_write_framed_msg+0x88>
 801ea9a:	9301      	str	r3, [sp, #4]
 801ea9c:	4698      	mov	r8, r3
 801ea9e:	e779      	b.n	801e994 <uxr_write_framed_msg+0xd4>
 801eaa0:	2500      	movs	r5, #0
 801eaa2:	e001      	b.n	801eaa8 <uxr_write_framed_msg+0x1e8>
 801eaa4:	2800      	cmp	r0, #0
 801eaa6:	d090      	beq.n	801e9ca <uxr_write_framed_msg+0x10a>
 801eaa8:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801eaac:	1b52      	subs	r2, r2, r5
 801eaae:	465b      	mov	r3, fp
 801eab0:	4421      	add	r1, r4
 801eab2:	4638      	mov	r0, r7
 801eab4:	47b0      	blx	r6
 801eab6:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801eaba:	4405      	add	r5, r0
 801eabc:	4295      	cmp	r5, r2
 801eabe:	d3f1      	bcc.n	801eaa4 <uxr_write_framed_msg+0x1e4>
 801eac0:	d183      	bne.n	801e9ca <uxr_write_framed_msg+0x10a>
 801eac2:	f04f 0300 	mov.w	r3, #0
 801eac6:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801eaca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eacc:	4543      	cmp	r3, r8
 801eace:	d964      	bls.n	801eb9a <uxr_write_framed_msg+0x2da>
 801ead0:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801ead4:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801ead8:	2901      	cmp	r1, #1
 801eada:	f04f 0200 	mov.w	r2, #0
 801eade:	f63f af3d 	bhi.w	801e95c <uxr_write_framed_msg+0x9c>
 801eae2:	1c51      	adds	r1, r2, #1
 801eae4:	b2c9      	uxtb	r1, r1
 801eae6:	2929      	cmp	r1, #41	@ 0x29
 801eae8:	d8da      	bhi.n	801eaa0 <uxr_write_framed_msg+0x1e0>
 801eaea:	18a0      	adds	r0, r4, r2
 801eaec:	4421      	add	r1, r4
 801eaee:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 801eaf2:	3202      	adds	r2, #2
 801eaf4:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 801eaf8:	b2d2      	uxtb	r2, r2
 801eafa:	f083 0020 	eor.w	r0, r3, #32
 801eafe:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 801eb02:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801eb06:	e733      	b.n	801e970 <uxr_write_framed_msg+0xb0>
 801eb08:	18a1      	adds	r1, r4, r2
 801eb0a:	3201      	adds	r2, #1
 801eb0c:	4648      	mov	r0, r9
 801eb0e:	b2d2      	uxtb	r2, r2
 801eb10:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 801eb14:	f04f 0901 	mov.w	r9, #1
 801eb18:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801eb1c:	2800      	cmp	r0, #0
 801eb1e:	f43f af7b 	beq.w	801ea18 <uxr_write_framed_msg+0x158>
 801eb22:	2500      	movs	r5, #0
 801eb24:	e002      	b.n	801eb2c <uxr_write_framed_msg+0x26c>
 801eb26:	2800      	cmp	r0, #0
 801eb28:	f43f af4f 	beq.w	801e9ca <uxr_write_framed_msg+0x10a>
 801eb2c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801eb30:	1b52      	subs	r2, r2, r5
 801eb32:	465b      	mov	r3, fp
 801eb34:	4421      	add	r1, r4
 801eb36:	4638      	mov	r0, r7
 801eb38:	47b0      	blx	r6
 801eb3a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801eb3e:	4405      	add	r5, r0
 801eb40:	4295      	cmp	r5, r2
 801eb42:	d3f0      	bcc.n	801eb26 <uxr_write_framed_msg+0x266>
 801eb44:	f47f af41 	bne.w	801e9ca <uxr_write_framed_msg+0x10a>
 801eb48:	2300      	movs	r3, #0
 801eb4a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801eb4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb50:	b298      	uxth	r0, r3
 801eb52:	b003      	add	sp, #12
 801eb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb58:	217d      	movs	r1, #125	@ 0x7d
 801eb5a:	f082 0220 	eor.w	r2, r2, #32
 801eb5e:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801eb62:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801eb66:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801eb6a:	2901      	cmp	r1, #1
 801eb6c:	f04f 0203 	mov.w	r2, #3
 801eb70:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801eb74:	d804      	bhi.n	801eb80 <uxr_write_framed_msg+0x2c0>
 801eb76:	4611      	mov	r1, r2
 801eb78:	f04f 0c04 	mov.w	ip, #4
 801eb7c:	2205      	movs	r2, #5
 801eb7e:	e752      	b.n	801ea26 <uxr_write_framed_msg+0x166>
 801eb80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb82:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801eb86:	b2dd      	uxtb	r5, r3
 801eb88:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 801eb8c:	2204      	movs	r2, #4
 801eb8e:	2901      	cmp	r1, #1
 801eb90:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801eb94:	f63f aec0 	bhi.w	801e918 <uxr_write_framed_msg+0x58>
 801eb98:	e758      	b.n	801ea4c <uxr_write_framed_msg+0x18c>
 801eb9a:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801eb9e:	fa5f f889 	uxtb.w	r8, r9
 801eba2:	9301      	str	r3, [sp, #4]
 801eba4:	2200      	movs	r2, #0
 801eba6:	e6f5      	b.n	801e994 <uxr_write_framed_msg+0xd4>
 801eba8:	08022738 	.word	0x08022738

0801ebac <uxr_framing_read_transport>:
 801ebac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebb0:	4604      	mov	r4, r0
 801ebb2:	b083      	sub	sp, #12
 801ebb4:	461f      	mov	r7, r3
 801ebb6:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801ebba:	4689      	mov	r9, r1
 801ebbc:	4692      	mov	sl, r2
 801ebbe:	f7f8 fdb1 	bl	8017724 <uxr_millis>
 801ebc2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801ebc6:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801ebca:	42b3      	cmp	r3, r6
 801ebcc:	4680      	mov	r8, r0
 801ebce:	d061      	beq.n	801ec94 <uxr_framing_read_transport+0xe8>
 801ebd0:	d81c      	bhi.n	801ec0c <uxr_framing_read_transport+0x60>
 801ebd2:	1e75      	subs	r5, r6, #1
 801ebd4:	1aed      	subs	r5, r5, r3
 801ebd6:	b2ed      	uxtb	r5, r5
 801ebd8:	2600      	movs	r6, #0
 801ebda:	455d      	cmp	r5, fp
 801ebdc:	d81f      	bhi.n	801ec1e <uxr_framing_read_transport+0x72>
 801ebde:	19ab      	adds	r3, r5, r6
 801ebe0:	455b      	cmp	r3, fp
 801ebe2:	bf84      	itt	hi
 801ebe4:	ebab 0605 	subhi.w	r6, fp, r5
 801ebe8:	b2f6      	uxtbhi	r6, r6
 801ebea:	b9ed      	cbnz	r5, 801ec28 <uxr_framing_read_transport+0x7c>
 801ebec:	f04f 0b00 	mov.w	fp, #0
 801ebf0:	f7f8 fd98 	bl	8017724 <uxr_millis>
 801ebf4:	683b      	ldr	r3, [r7, #0]
 801ebf6:	eba0 0808 	sub.w	r8, r0, r8
 801ebfa:	eba3 0308 	sub.w	r3, r3, r8
 801ebfe:	4658      	mov	r0, fp
 801ec00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ec04:	603b      	str	r3, [r7, #0]
 801ec06:	b003      	add	sp, #12
 801ec08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec0c:	2e00      	cmp	r6, #0
 801ec0e:	d049      	beq.n	801eca4 <uxr_framing_read_transport+0xf8>
 801ec10:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 801ec14:	b2ed      	uxtb	r5, r5
 801ec16:	3e01      	subs	r6, #1
 801ec18:	455d      	cmp	r5, fp
 801ec1a:	b2f6      	uxtb	r6, r6
 801ec1c:	d9df      	bls.n	801ebde <uxr_framing_read_transport+0x32>
 801ec1e:	fa5f f58b 	uxtb.w	r5, fp
 801ec22:	2600      	movs	r6, #0
 801ec24:	2d00      	cmp	r5, #0
 801ec26:	d0e1      	beq.n	801ebec <uxr_framing_read_transport+0x40>
 801ec28:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801ec2c:	3102      	adds	r1, #2
 801ec2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec30:	9300      	str	r3, [sp, #0]
 801ec32:	683b      	ldr	r3, [r7, #0]
 801ec34:	4421      	add	r1, r4
 801ec36:	462a      	mov	r2, r5
 801ec38:	4650      	mov	r0, sl
 801ec3a:	47c8      	blx	r9
 801ec3c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801ec40:	4a1a      	ldr	r2, [pc, #104]	@ (801ecac <uxr_framing_read_transport+0x100>)
 801ec42:	4403      	add	r3, r0
 801ec44:	0859      	lsrs	r1, r3, #1
 801ec46:	fba2 2101 	umull	r2, r1, r2, r1
 801ec4a:	0889      	lsrs	r1, r1, #2
 801ec4c:	222a      	movs	r2, #42	@ 0x2a
 801ec4e:	fb02 3111 	mls	r1, r2, r1, r3
 801ec52:	4683      	mov	fp, r0
 801ec54:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801ec58:	2800      	cmp	r0, #0
 801ec5a:	d0c7      	beq.n	801ebec <uxr_framing_read_transport+0x40>
 801ec5c:	42a8      	cmp	r0, r5
 801ec5e:	d1c7      	bne.n	801ebf0 <uxr_framing_read_transport+0x44>
 801ec60:	2e00      	cmp	r6, #0
 801ec62:	d0c5      	beq.n	801ebf0 <uxr_framing_read_transport+0x44>
 801ec64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec66:	9300      	str	r3, [sp, #0]
 801ec68:	3102      	adds	r1, #2
 801ec6a:	4632      	mov	r2, r6
 801ec6c:	4421      	add	r1, r4
 801ec6e:	2300      	movs	r3, #0
 801ec70:	4650      	mov	r0, sl
 801ec72:	47c8      	blx	r9
 801ec74:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801ec78:	4a0c      	ldr	r2, [pc, #48]	@ (801ecac <uxr_framing_read_transport+0x100>)
 801ec7a:	180b      	adds	r3, r1, r0
 801ec7c:	0859      	lsrs	r1, r3, #1
 801ec7e:	fba2 1201 	umull	r1, r2, r2, r1
 801ec82:	0892      	lsrs	r2, r2, #2
 801ec84:	212a      	movs	r1, #42	@ 0x2a
 801ec86:	fb01 3312 	mls	r3, r1, r2, r3
 801ec8a:	eb00 0b05 	add.w	fp, r0, r5
 801ec8e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801ec92:	e7ad      	b.n	801ebf0 <uxr_framing_read_transport+0x44>
 801ec94:	2600      	movs	r6, #0
 801ec96:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801ec9a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 801ec9c:	d9bf      	bls.n	801ec1e <uxr_framing_read_transport+0x72>
 801ec9e:	2102      	movs	r1, #2
 801eca0:	2529      	movs	r5, #41	@ 0x29
 801eca2:	e7c4      	b.n	801ec2e <uxr_framing_read_transport+0x82>
 801eca4:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 801eca8:	b2ed      	uxtb	r5, r5
 801ecaa:	e796      	b.n	801ebda <uxr_framing_read_transport+0x2e>
 801ecac:	30c30c31 	.word	0x30c30c31

0801ecb0 <uxr_read_framed_msg>:
 801ecb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecb4:	461e      	mov	r6, r3
 801ecb6:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801ecba:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801ecbe:	429d      	cmp	r5, r3
 801ecc0:	b083      	sub	sp, #12
 801ecc2:	4604      	mov	r4, r0
 801ecc4:	4688      	mov	r8, r1
 801ecc6:	4691      	mov	r9, r2
 801ecc8:	f000 8188 	beq.w	801efdc <uxr_read_framed_msg+0x32c>
 801eccc:	7823      	ldrb	r3, [r4, #0]
 801ecce:	4dc1      	ldr	r5, [pc, #772]	@ (801efd4 <uxr_read_framed_msg+0x324>)
 801ecd0:	4fc1      	ldr	r7, [pc, #772]	@ (801efd8 <uxr_read_framed_msg+0x328>)
 801ecd2:	2b07      	cmp	r3, #7
 801ecd4:	d8fd      	bhi.n	801ecd2 <uxr_read_framed_msg+0x22>
 801ecd6:	e8df f013 	tbh	[pc, r3, lsl #1]
 801ecda:	0115      	.short	0x0115
 801ecdc:	00d600f6 	.word	0x00d600f6
 801ece0:	009000b9 	.word	0x009000b9
 801ece4:	0030004d 	.word	0x0030004d
 801ece8:	0008      	.short	0x0008
 801ecea:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801ecee:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801ecf2:	4299      	cmp	r1, r3
 801ecf4:	f000 814a 	beq.w	801ef8c <uxr_read_framed_msg+0x2dc>
 801ecf8:	18e2      	adds	r2, r4, r3
 801ecfa:	7892      	ldrb	r2, [r2, #2]
 801ecfc:	2a7d      	cmp	r2, #125	@ 0x7d
 801ecfe:	f000 8199 	beq.w	801f034 <uxr_read_framed_msg+0x384>
 801ed02:	3301      	adds	r3, #1
 801ed04:	0858      	lsrs	r0, r3, #1
 801ed06:	fba5 1000 	umull	r1, r0, r5, r0
 801ed0a:	0880      	lsrs	r0, r0, #2
 801ed0c:	212a      	movs	r1, #42	@ 0x2a
 801ed0e:	fb01 3310 	mls	r3, r1, r0, r3
 801ed12:	2a7e      	cmp	r2, #126	@ 0x7e
 801ed14:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801ed18:	f000 8252 	beq.w	801f1c0 <uxr_read_framed_msg+0x510>
 801ed1c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801ed1e:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 801ed20:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801ed24:	b29b      	uxth	r3, r3
 801ed26:	2200      	movs	r2, #0
 801ed28:	4299      	cmp	r1, r3
 801ed2a:	86a3      	strh	r3, [r4, #52]	@ 0x34
 801ed2c:	7022      	strb	r2, [r4, #0]
 801ed2e:	f000 8179 	beq.w	801f024 <uxr_read_framed_msg+0x374>
 801ed32:	2000      	movs	r0, #0
 801ed34:	b003      	add	sp, #12
 801ed36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed3a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801ed3e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801ed42:	4299      	cmp	r1, r3
 801ed44:	f000 8131 	beq.w	801efaa <uxr_read_framed_msg+0x2fa>
 801ed48:	18e2      	adds	r2, r4, r3
 801ed4a:	7890      	ldrb	r0, [r2, #2]
 801ed4c:	287d      	cmp	r0, #125	@ 0x7d
 801ed4e:	f000 8190 	beq.w	801f072 <uxr_read_framed_msg+0x3c2>
 801ed52:	3301      	adds	r3, #1
 801ed54:	085a      	lsrs	r2, r3, #1
 801ed56:	fba5 1202 	umull	r1, r2, r5, r2
 801ed5a:	0892      	lsrs	r2, r2, #2
 801ed5c:	212a      	movs	r1, #42	@ 0x2a
 801ed5e:	fb01 3312 	mls	r3, r1, r2, r3
 801ed62:	287e      	cmp	r0, #126	@ 0x7e
 801ed64:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801ed68:	f000 821a 	beq.w	801f1a0 <uxr_read_framed_msg+0x4f0>
 801ed6c:	2307      	movs	r3, #7
 801ed6e:	86a0      	strh	r0, [r4, #52]	@ 0x34
 801ed70:	7023      	strb	r3, [r4, #0]
 801ed72:	e7ae      	b.n	801ecd2 <uxr_read_framed_msg+0x22>
 801ed74:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801ed76:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801ed7a:	459e      	cmp	lr, r3
 801ed7c:	d938      	bls.n	801edf0 <uxr_read_framed_msg+0x140>
 801ed7e:	ee07 8a90 	vmov	s15, r8
 801ed82:	212a      	movs	r1, #42	@ 0x2a
 801ed84:	e020      	b.n	801edc8 <uxr_read_framed_msg+0x118>
 801ed86:	f89b c002 	ldrb.w	ip, [fp, #2]
 801ed8a:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 801ed8e:	f000 80d4 	beq.w	801ef3a <uxr_read_framed_msg+0x28a>
 801ed92:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801ed96:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801ed9a:	f000 8219 	beq.w	801f1d0 <uxr_read_framed_msg+0x520>
 801ed9e:	f806 c003 	strb.w	ip, [r6, r3]
 801eda2:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 801eda6:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801eda8:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801edac:	ea8a 000c 	eor.w	r0, sl, ip
 801edb0:	b2c0      	uxtb	r0, r0
 801edb2:	3301      	adds	r3, #1
 801edb4:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 801edb8:	b29b      	uxth	r3, r3
 801edba:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 801edbe:	4573      	cmp	r3, lr
 801edc0:	8663      	strh	r3, [r4, #50]	@ 0x32
 801edc2:	86e2      	strh	r2, [r4, #54]	@ 0x36
 801edc4:	f080 8120 	bcs.w	801f008 <uxr_read_framed_msg+0x358>
 801edc8:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 801edcc:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801edd0:	f100 0c01 	add.w	ip, r0, #1
 801edd4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801edd8:	fba5 8202 	umull	r8, r2, r5, r2
 801eddc:	0892      	lsrs	r2, r2, #2
 801edde:	4582      	cmp	sl, r0
 801ede0:	eb04 0b00 	add.w	fp, r4, r0
 801ede4:	fb01 c212 	mls	r2, r1, r2, ip
 801ede8:	d1cd      	bne.n	801ed86 <uxr_read_framed_msg+0xd6>
 801edea:	ee17 8a90 	vmov	r8, s15
 801edee:	459e      	cmp	lr, r3
 801edf0:	f040 8111 	bne.w	801f016 <uxr_read_framed_msg+0x366>
 801edf4:	2306      	movs	r3, #6
 801edf6:	7023      	strb	r3, [r4, #0]
 801edf8:	e76b      	b.n	801ecd2 <uxr_read_framed_msg+0x22>
 801edfa:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801edfe:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801ee02:	4298      	cmp	r0, r3
 801ee04:	f000 80c2 	beq.w	801ef8c <uxr_read_framed_msg+0x2dc>
 801ee08:	18e2      	adds	r2, r4, r3
 801ee0a:	7891      	ldrb	r1, [r2, #2]
 801ee0c:	297d      	cmp	r1, #125	@ 0x7d
 801ee0e:	f000 814c 	beq.w	801f0aa <uxr_read_framed_msg+0x3fa>
 801ee12:	3301      	adds	r3, #1
 801ee14:	085a      	lsrs	r2, r3, #1
 801ee16:	fba5 0202 	umull	r0, r2, r5, r2
 801ee1a:	0892      	lsrs	r2, r2, #2
 801ee1c:	202a      	movs	r0, #42	@ 0x2a
 801ee1e:	fb00 3312 	mls	r3, r0, r2, r3
 801ee22:	297e      	cmp	r1, #126	@ 0x7e
 801ee24:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801ee28:	f000 81ca 	beq.w	801f1c0 <uxr_read_framed_msg+0x510>
 801ee2c:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801ee2e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801ee32:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801ee34:	b29b      	uxth	r3, r3
 801ee36:	2000      	movs	r0, #0
 801ee38:	428b      	cmp	r3, r1
 801ee3a:	8623      	strh	r3, [r4, #48]	@ 0x30
 801ee3c:	8660      	strh	r0, [r4, #50]	@ 0x32
 801ee3e:	86e0      	strh	r0, [r4, #54]	@ 0x36
 801ee40:	f240 80df 	bls.w	801f002 <uxr_read_framed_msg+0x352>
 801ee44:	7020      	strb	r0, [r4, #0]
 801ee46:	b003      	add	sp, #12
 801ee48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee4c:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801ee50:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801ee54:	4299      	cmp	r1, r3
 801ee56:	f000 80a8 	beq.w	801efaa <uxr_read_framed_msg+0x2fa>
 801ee5a:	18e2      	adds	r2, r4, r3
 801ee5c:	7890      	ldrb	r0, [r2, #2]
 801ee5e:	287d      	cmp	r0, #125	@ 0x7d
 801ee60:	f000 8164 	beq.w	801f12c <uxr_read_framed_msg+0x47c>
 801ee64:	3301      	adds	r3, #1
 801ee66:	085a      	lsrs	r2, r3, #1
 801ee68:	fba5 1202 	umull	r1, r2, r5, r2
 801ee6c:	0892      	lsrs	r2, r2, #2
 801ee6e:	212a      	movs	r1, #42	@ 0x2a
 801ee70:	fb01 3312 	mls	r3, r1, r2, r3
 801ee74:	287e      	cmp	r0, #126	@ 0x7e
 801ee76:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801ee7a:	f000 8191 	beq.w	801f1a0 <uxr_read_framed_msg+0x4f0>
 801ee7e:	2304      	movs	r3, #4
 801ee80:	8620      	strh	r0, [r4, #48]	@ 0x30
 801ee82:	7023      	strb	r3, [r4, #0]
 801ee84:	e725      	b.n	801ecd2 <uxr_read_framed_msg+0x22>
 801ee86:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801ee8a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801ee8e:	4290      	cmp	r0, r2
 801ee90:	f000 80b3 	beq.w	801effa <uxr_read_framed_msg+0x34a>
 801ee94:	18a3      	adds	r3, r4, r2
 801ee96:	7899      	ldrb	r1, [r3, #2]
 801ee98:	297d      	cmp	r1, #125	@ 0x7d
 801ee9a:	f000 8164 	beq.w	801f166 <uxr_read_framed_msg+0x4b6>
 801ee9e:	3201      	adds	r2, #1
 801eea0:	0850      	lsrs	r0, r2, #1
 801eea2:	fba5 3000 	umull	r3, r0, r5, r0
 801eea6:	0880      	lsrs	r0, r0, #2
 801eea8:	232a      	movs	r3, #42	@ 0x2a
 801eeaa:	fb03 2210 	mls	r2, r3, r0, r2
 801eeae:	297e      	cmp	r1, #126	@ 0x7e
 801eeb0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801eeb4:	f000 8188 	beq.w	801f1c8 <uxr_read_framed_msg+0x518>
 801eeb8:	7863      	ldrb	r3, [r4, #1]
 801eeba:	428b      	cmp	r3, r1
 801eebc:	bf0c      	ite	eq
 801eebe:	2303      	moveq	r3, #3
 801eec0:	2300      	movne	r3, #0
 801eec2:	7023      	strb	r3, [r4, #0]
 801eec4:	e705      	b.n	801ecd2 <uxr_read_framed_msg+0x22>
 801eec6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801eeca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 801eece:	2200      	movs	r2, #0
 801eed0:	4299      	cmp	r1, r3
 801eed2:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 801eed6:	d06c      	beq.n	801efb2 <uxr_read_framed_msg+0x302>
 801eed8:	18e2      	adds	r2, r4, r3
 801eeda:	7890      	ldrb	r0, [r2, #2]
 801eedc:	287d      	cmp	r0, #125	@ 0x7d
 801eede:	f000 8101 	beq.w	801f0e4 <uxr_read_framed_msg+0x434>
 801eee2:	3301      	adds	r3, #1
 801eee4:	085a      	lsrs	r2, r3, #1
 801eee6:	fba5 1202 	umull	r1, r2, r5, r2
 801eeea:	0892      	lsrs	r2, r2, #2
 801eeec:	212a      	movs	r1, #42	@ 0x2a
 801eeee:	fb01 3312 	mls	r3, r1, r2, r3
 801eef2:	287e      	cmp	r0, #126	@ 0x7e
 801eef4:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 801eef8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801eefc:	d059      	beq.n	801efb2 <uxr_read_framed_msg+0x302>
 801eefe:	2302      	movs	r3, #2
 801ef00:	7023      	strb	r3, [r4, #0]
 801ef02:	e6e6      	b.n	801ecd2 <uxr_read_framed_msg+0x22>
 801ef04:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 801ef08:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801ef0c:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 801ef10:	1c51      	adds	r1, r2, #1
 801ef12:	084b      	lsrs	r3, r1, #1
 801ef14:	fba5 c303 	umull	ip, r3, r5, r3
 801ef18:	089b      	lsrs	r3, r3, #2
 801ef1a:	fb0e 1313 	mls	r3, lr, r3, r1
 801ef1e:	4592      	cmp	sl, r2
 801ef20:	eb04 0002 	add.w	r0, r4, r2
 801ef24:	b2da      	uxtb	r2, r3
 801ef26:	f43f af04 	beq.w	801ed32 <uxr_read_framed_msg+0x82>
 801ef2a:	7883      	ldrb	r3, [r0, #2]
 801ef2c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801ef30:	2b7e      	cmp	r3, #126	@ 0x7e
 801ef32:	d1ed      	bne.n	801ef10 <uxr_read_framed_msg+0x260>
 801ef34:	2301      	movs	r3, #1
 801ef36:	7023      	strb	r3, [r4, #0]
 801ef38:	e6cb      	b.n	801ecd2 <uxr_read_framed_msg+0x22>
 801ef3a:	f100 0c01 	add.w	ip, r0, #1
 801ef3e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801ef42:	fba5 8202 	umull	r8, r2, r5, r2
 801ef46:	0892      	lsrs	r2, r2, #2
 801ef48:	fb01 c212 	mls	r2, r1, r2, ip
 801ef4c:	eb04 0c02 	add.w	ip, r4, r2
 801ef50:	b2d2      	uxtb	r2, r2
 801ef52:	4592      	cmp	sl, r2
 801ef54:	f100 0002 	add.w	r0, r0, #2
 801ef58:	f43f af47 	beq.w	801edea <uxr_read_framed_msg+0x13a>
 801ef5c:	0842      	lsrs	r2, r0, #1
 801ef5e:	f89c a002 	ldrb.w	sl, [ip, #2]
 801ef62:	fba5 8202 	umull	r8, r2, r5, r2
 801ef66:	0892      	lsrs	r2, r2, #2
 801ef68:	fb01 0012 	mls	r0, r1, r2, r0
 801ef6c:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 801ef70:	f08a 0c20 	eor.w	ip, sl, #32
 801ef74:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801ef78:	f47f af11 	bne.w	801ed9e <uxr_read_framed_msg+0xee>
 801ef7c:	459e      	cmp	lr, r3
 801ef7e:	ee17 8a90 	vmov	r8, s15
 801ef82:	f43f af37 	beq.w	801edf4 <uxr_read_framed_msg+0x144>
 801ef86:	2301      	movs	r3, #1
 801ef88:	7023      	strb	r3, [r4, #0]
 801ef8a:	e6a2      	b.n	801ecd2 <uxr_read_framed_msg+0x22>
 801ef8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ef8e:	9300      	str	r3, [sp, #0]
 801ef90:	2301      	movs	r3, #1
 801ef92:	9301      	str	r3, [sp, #4]
 801ef94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ef96:	464a      	mov	r2, r9
 801ef98:	4641      	mov	r1, r8
 801ef9a:	4620      	mov	r0, r4
 801ef9c:	f7ff fe06 	bl	801ebac <uxr_framing_read_transport>
 801efa0:	2800      	cmp	r0, #0
 801efa2:	f43f aec6 	beq.w	801ed32 <uxr_read_framed_msg+0x82>
 801efa6:	7823      	ldrb	r3, [r4, #0]
 801efa8:	e693      	b.n	801ecd2 <uxr_read_framed_msg+0x22>
 801efaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801efac:	9300      	str	r3, [sp, #0]
 801efae:	2302      	movs	r3, #2
 801efb0:	e7ef      	b.n	801ef92 <uxr_read_framed_msg+0x2e2>
 801efb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801efb4:	9300      	str	r3, [sp, #0]
 801efb6:	2304      	movs	r3, #4
 801efb8:	9301      	str	r3, [sp, #4]
 801efba:	464a      	mov	r2, r9
 801efbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801efbe:	4641      	mov	r1, r8
 801efc0:	4620      	mov	r0, r4
 801efc2:	f7ff fdf3 	bl	801ebac <uxr_framing_read_transport>
 801efc6:	2800      	cmp	r0, #0
 801efc8:	d1ed      	bne.n	801efa6 <uxr_read_framed_msg+0x2f6>
 801efca:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801efce:	2b7e      	cmp	r3, #126	@ 0x7e
 801efd0:	d0e9      	beq.n	801efa6 <uxr_read_framed_msg+0x2f6>
 801efd2:	e6ae      	b.n	801ed32 <uxr_read_framed_msg+0x82>
 801efd4:	30c30c31 	.word	0x30c30c31
 801efd8:	08022738 	.word	0x08022738
 801efdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801efde:	9300      	str	r3, [sp, #0]
 801efe0:	2305      	movs	r3, #5
 801efe2:	9301      	str	r3, [sp, #4]
 801efe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801efe6:	f7ff fde1 	bl	801ebac <uxr_framing_read_transport>
 801efea:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 801efee:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801eff2:	429a      	cmp	r2, r3
 801eff4:	f43f ae9d 	beq.w	801ed32 <uxr_read_framed_msg+0x82>
 801eff8:	e668      	b.n	801eccc <uxr_read_framed_msg+0x1c>
 801effa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801effc:	9300      	str	r3, [sp, #0]
 801effe:	2303      	movs	r3, #3
 801f000:	e7c7      	b.n	801ef92 <uxr_read_framed_msg+0x2e2>
 801f002:	2305      	movs	r3, #5
 801f004:	7023      	strb	r3, [r4, #0]
 801f006:	e664      	b.n	801ecd2 <uxr_read_framed_msg+0x22>
 801f008:	ee17 8a90 	vmov	r8, s15
 801f00c:	f43f aef2 	beq.w	801edf4 <uxr_read_framed_msg+0x144>
 801f010:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801f014:	d08e      	beq.n	801ef34 <uxr_read_framed_msg+0x284>
 801f016:	ebae 0303 	sub.w	r3, lr, r3
 801f01a:	3302      	adds	r3, #2
 801f01c:	9301      	str	r3, [sp, #4]
 801f01e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f020:	9300      	str	r3, [sp, #0]
 801f022:	e7b7      	b.n	801ef94 <uxr_read_framed_msg+0x2e4>
 801f024:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801f026:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 801f02a:	7013      	strb	r3, [r2, #0]
 801f02c:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 801f02e:	b003      	add	sp, #12
 801f030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f034:	f103 0c01 	add.w	ip, r3, #1
 801f038:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801f03c:	fba5 0202 	umull	r0, r2, r5, r2
 801f040:	0892      	lsrs	r2, r2, #2
 801f042:	202a      	movs	r0, #42	@ 0x2a
 801f044:	fb00 c212 	mls	r2, r0, r2, ip
 801f048:	fa5f fc82 	uxtb.w	ip, r2
 801f04c:	4561      	cmp	r1, ip
 801f04e:	d09d      	beq.n	801ef8c <uxr_read_framed_msg+0x2dc>
 801f050:	3302      	adds	r3, #2
 801f052:	4422      	add	r2, r4
 801f054:	0859      	lsrs	r1, r3, #1
 801f056:	7892      	ldrb	r2, [r2, #2]
 801f058:	fba5 c101 	umull	ip, r1, r5, r1
 801f05c:	0889      	lsrs	r1, r1, #2
 801f05e:	fb00 3311 	mls	r3, r0, r1, r3
 801f062:	2a7e      	cmp	r2, #126	@ 0x7e
 801f064:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801f068:	f000 80aa 	beq.w	801f1c0 <uxr_read_framed_msg+0x510>
 801f06c:	f082 0220 	eor.w	r2, r2, #32
 801f070:	e654      	b.n	801ed1c <uxr_read_framed_msg+0x6c>
 801f072:	1c58      	adds	r0, r3, #1
 801f074:	0842      	lsrs	r2, r0, #1
 801f076:	fba5 c202 	umull	ip, r2, r5, r2
 801f07a:	0892      	lsrs	r2, r2, #2
 801f07c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801f080:	fb0c 0212 	mls	r2, ip, r2, r0
 801f084:	b2d0      	uxtb	r0, r2
 801f086:	4281      	cmp	r1, r0
 801f088:	d08f      	beq.n	801efaa <uxr_read_framed_msg+0x2fa>
 801f08a:	4422      	add	r2, r4
 801f08c:	3302      	adds	r3, #2
 801f08e:	7890      	ldrb	r0, [r2, #2]
 801f090:	085a      	lsrs	r2, r3, #1
 801f092:	fba5 1202 	umull	r1, r2, r5, r2
 801f096:	0892      	lsrs	r2, r2, #2
 801f098:	fb0c 3312 	mls	r3, ip, r2, r3
 801f09c:	287e      	cmp	r0, #126	@ 0x7e
 801f09e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801f0a2:	d07d      	beq.n	801f1a0 <uxr_read_framed_msg+0x4f0>
 801f0a4:	f080 0020 	eor.w	r0, r0, #32
 801f0a8:	e660      	b.n	801ed6c <uxr_read_framed_msg+0xbc>
 801f0aa:	1c59      	adds	r1, r3, #1
 801f0ac:	084a      	lsrs	r2, r1, #1
 801f0ae:	fba5 c202 	umull	ip, r2, r5, r2
 801f0b2:	0892      	lsrs	r2, r2, #2
 801f0b4:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801f0b8:	fb0c 1212 	mls	r2, ip, r2, r1
 801f0bc:	b2d1      	uxtb	r1, r2
 801f0be:	4288      	cmp	r0, r1
 801f0c0:	f43f af64 	beq.w	801ef8c <uxr_read_framed_msg+0x2dc>
 801f0c4:	4422      	add	r2, r4
 801f0c6:	3302      	adds	r3, #2
 801f0c8:	7891      	ldrb	r1, [r2, #2]
 801f0ca:	085a      	lsrs	r2, r3, #1
 801f0cc:	fba5 0202 	umull	r0, r2, r5, r2
 801f0d0:	0892      	lsrs	r2, r2, #2
 801f0d2:	fb0c 3312 	mls	r3, ip, r2, r3
 801f0d6:	297e      	cmp	r1, #126	@ 0x7e
 801f0d8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801f0dc:	d070      	beq.n	801f1c0 <uxr_read_framed_msg+0x510>
 801f0de:	f081 0120 	eor.w	r1, r1, #32
 801f0e2:	e6a3      	b.n	801ee2c <uxr_read_framed_msg+0x17c>
 801f0e4:	f103 0c01 	add.w	ip, r3, #1
 801f0e8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801f0ec:	fba5 0202 	umull	r0, r2, r5, r2
 801f0f0:	0892      	lsrs	r2, r2, #2
 801f0f2:	202a      	movs	r0, #42	@ 0x2a
 801f0f4:	fb00 c212 	mls	r2, r0, r2, ip
 801f0f8:	fa5f fc82 	uxtb.w	ip, r2
 801f0fc:	4561      	cmp	r1, ip
 801f0fe:	f43f af58 	beq.w	801efb2 <uxr_read_framed_msg+0x302>
 801f102:	4422      	add	r2, r4
 801f104:	3302      	adds	r3, #2
 801f106:	7891      	ldrb	r1, [r2, #2]
 801f108:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801f10c:	085a      	lsrs	r2, r3, #1
 801f10e:	fba5 c202 	umull	ip, r2, r5, r2
 801f112:	0892      	lsrs	r2, r2, #2
 801f114:	fb00 3312 	mls	r3, r0, r2, r3
 801f118:	297e      	cmp	r1, #126	@ 0x7e
 801f11a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801f11e:	f43f af48 	beq.w	801efb2 <uxr_read_framed_msg+0x302>
 801f122:	f081 0120 	eor.w	r1, r1, #32
 801f126:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 801f12a:	e6e8      	b.n	801eefe <uxr_read_framed_msg+0x24e>
 801f12c:	1c58      	adds	r0, r3, #1
 801f12e:	0842      	lsrs	r2, r0, #1
 801f130:	fba5 c202 	umull	ip, r2, r5, r2
 801f134:	0892      	lsrs	r2, r2, #2
 801f136:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801f13a:	fb0c 0212 	mls	r2, ip, r2, r0
 801f13e:	b2d0      	uxtb	r0, r2
 801f140:	4281      	cmp	r1, r0
 801f142:	f43f af32 	beq.w	801efaa <uxr_read_framed_msg+0x2fa>
 801f146:	4422      	add	r2, r4
 801f148:	3302      	adds	r3, #2
 801f14a:	7890      	ldrb	r0, [r2, #2]
 801f14c:	085a      	lsrs	r2, r3, #1
 801f14e:	fba5 1202 	umull	r1, r2, r5, r2
 801f152:	0892      	lsrs	r2, r2, #2
 801f154:	fb0c 3312 	mls	r3, ip, r2, r3
 801f158:	287e      	cmp	r0, #126	@ 0x7e
 801f15a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801f15e:	d01f      	beq.n	801f1a0 <uxr_read_framed_msg+0x4f0>
 801f160:	f080 0020 	eor.w	r0, r0, #32
 801f164:	e68b      	b.n	801ee7e <uxr_read_framed_msg+0x1ce>
 801f166:	1c51      	adds	r1, r2, #1
 801f168:	084b      	lsrs	r3, r1, #1
 801f16a:	fba5 c303 	umull	ip, r3, r5, r3
 801f16e:	089b      	lsrs	r3, r3, #2
 801f170:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801f174:	fb0c 1313 	mls	r3, ip, r3, r1
 801f178:	b2d9      	uxtb	r1, r3
 801f17a:	4288      	cmp	r0, r1
 801f17c:	f43f af3d 	beq.w	801effa <uxr_read_framed_msg+0x34a>
 801f180:	3202      	adds	r2, #2
 801f182:	4423      	add	r3, r4
 801f184:	0850      	lsrs	r0, r2, #1
 801f186:	789b      	ldrb	r3, [r3, #2]
 801f188:	fba5 1000 	umull	r1, r0, r5, r0
 801f18c:	0880      	lsrs	r0, r0, #2
 801f18e:	fb0c 2210 	mls	r2, ip, r0, r2
 801f192:	2b7e      	cmp	r3, #126	@ 0x7e
 801f194:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801f198:	d016      	beq.n	801f1c8 <uxr_read_framed_msg+0x518>
 801f19a:	f083 0120 	eor.w	r1, r3, #32
 801f19e:	e68b      	b.n	801eeb8 <uxr_read_framed_msg+0x208>
 801f1a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f1a2:	9300      	str	r3, [sp, #0]
 801f1a4:	2302      	movs	r3, #2
 801f1a6:	9301      	str	r3, [sp, #4]
 801f1a8:	464a      	mov	r2, r9
 801f1aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f1ac:	4641      	mov	r1, r8
 801f1ae:	4620      	mov	r0, r4
 801f1b0:	f7ff fcfc 	bl	801ebac <uxr_framing_read_transport>
 801f1b4:	2800      	cmp	r0, #0
 801f1b6:	f47f aef6 	bne.w	801efa6 <uxr_read_framed_msg+0x2f6>
 801f1ba:	2301      	movs	r3, #1
 801f1bc:	7023      	strb	r3, [r4, #0]
 801f1be:	e588      	b.n	801ecd2 <uxr_read_framed_msg+0x22>
 801f1c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f1c2:	9300      	str	r3, [sp, #0]
 801f1c4:	2301      	movs	r3, #1
 801f1c6:	e7ee      	b.n	801f1a6 <uxr_read_framed_msg+0x4f6>
 801f1c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f1ca:	9300      	str	r3, [sp, #0]
 801f1cc:	2303      	movs	r3, #3
 801f1ce:	e7ea      	b.n	801f1a6 <uxr_read_framed_msg+0x4f6>
 801f1d0:	ee17 8a90 	vmov	r8, s15
 801f1d4:	e6ae      	b.n	801ef34 <uxr_read_framed_msg+0x284>
 801f1d6:	bf00      	nop

0801f1d8 <rcl_get_default_domain_id>:
 801f1d8:	b530      	push	{r4, r5, lr}
 801f1da:	b083      	sub	sp, #12
 801f1dc:	2300      	movs	r3, #0
 801f1de:	9300      	str	r3, [sp, #0]
 801f1e0:	b1d0      	cbz	r0, 801f218 <rcl_get_default_domain_id+0x40>
 801f1e2:	4604      	mov	r4, r0
 801f1e4:	4669      	mov	r1, sp
 801f1e6:	4815      	ldr	r0, [pc, #84]	@ (801f23c <rcl_get_default_domain_id+0x64>)
 801f1e8:	f7fc fb06 	bl	801b7f8 <rcutils_get_env>
 801f1ec:	4602      	mov	r2, r0
 801f1ee:	b110      	cbz	r0, 801f1f6 <rcl_get_default_domain_id+0x1e>
 801f1f0:	2001      	movs	r0, #1
 801f1f2:	b003      	add	sp, #12
 801f1f4:	bd30      	pop	{r4, r5, pc}
 801f1f6:	9b00      	ldr	r3, [sp, #0]
 801f1f8:	b18b      	cbz	r3, 801f21e <rcl_get_default_domain_id+0x46>
 801f1fa:	7818      	ldrb	r0, [r3, #0]
 801f1fc:	2800      	cmp	r0, #0
 801f1fe:	d0f8      	beq.n	801f1f2 <rcl_get_default_domain_id+0x1a>
 801f200:	a901      	add	r1, sp, #4
 801f202:	4618      	mov	r0, r3
 801f204:	9201      	str	r2, [sp, #4]
 801f206:	f000 fedd 	bl	801ffc4 <strtoul>
 801f20a:	4605      	mov	r5, r0
 801f20c:	b150      	cbz	r0, 801f224 <rcl_get_default_domain_id+0x4c>
 801f20e:	1c43      	adds	r3, r0, #1
 801f210:	d00d      	beq.n	801f22e <rcl_get_default_domain_id+0x56>
 801f212:	6025      	str	r5, [r4, #0]
 801f214:	2000      	movs	r0, #0
 801f216:	e7ec      	b.n	801f1f2 <rcl_get_default_domain_id+0x1a>
 801f218:	200b      	movs	r0, #11
 801f21a:	b003      	add	sp, #12
 801f21c:	bd30      	pop	{r4, r5, pc}
 801f21e:	4618      	mov	r0, r3
 801f220:	b003      	add	sp, #12
 801f222:	bd30      	pop	{r4, r5, pc}
 801f224:	9b01      	ldr	r3, [sp, #4]
 801f226:	781b      	ldrb	r3, [r3, #0]
 801f228:	2b00      	cmp	r3, #0
 801f22a:	d0f2      	beq.n	801f212 <rcl_get_default_domain_id+0x3a>
 801f22c:	e7e0      	b.n	801f1f0 <rcl_get_default_domain_id+0x18>
 801f22e:	f001 fa59 	bl	80206e4 <__errno>
 801f232:	6803      	ldr	r3, [r0, #0]
 801f234:	2b22      	cmp	r3, #34	@ 0x22
 801f236:	d1ec      	bne.n	801f212 <rcl_get_default_domain_id+0x3a>
 801f238:	e7da      	b.n	801f1f0 <rcl_get_default_domain_id+0x18>
 801f23a:	bf00      	nop
 801f23c:	08022938 	.word	0x08022938

0801f240 <rcl_expand_topic_name>:
 801f240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f244:	b08b      	sub	sp, #44	@ 0x2c
 801f246:	9306      	str	r3, [sp, #24]
 801f248:	2800      	cmp	r0, #0
 801f24a:	f000 80ad 	beq.w	801f3a8 <rcl_expand_topic_name+0x168>
 801f24e:	460e      	mov	r6, r1
 801f250:	2900      	cmp	r1, #0
 801f252:	f000 80a9 	beq.w	801f3a8 <rcl_expand_topic_name+0x168>
 801f256:	4617      	mov	r7, r2
 801f258:	2a00      	cmp	r2, #0
 801f25a:	f000 80a5 	beq.w	801f3a8 <rcl_expand_topic_name+0x168>
 801f25e:	2b00      	cmp	r3, #0
 801f260:	f000 80a2 	beq.w	801f3a8 <rcl_expand_topic_name+0x168>
 801f264:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f266:	2b00      	cmp	r3, #0
 801f268:	f000 809e 	beq.w	801f3a8 <rcl_expand_topic_name+0x168>
 801f26c:	2200      	movs	r2, #0
 801f26e:	a909      	add	r1, sp, #36	@ 0x24
 801f270:	4680      	mov	r8, r0
 801f272:	f000 f9fb 	bl	801f66c <rcl_validate_topic_name>
 801f276:	4604      	mov	r4, r0
 801f278:	2800      	cmp	r0, #0
 801f27a:	f040 8096 	bne.w	801f3aa <rcl_expand_topic_name+0x16a>
 801f27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f280:	2b00      	cmp	r3, #0
 801f282:	f040 809a 	bne.w	801f3ba <rcl_expand_topic_name+0x17a>
 801f286:	4602      	mov	r2, r0
 801f288:	a909      	add	r1, sp, #36	@ 0x24
 801f28a:	4630      	mov	r0, r6
 801f28c:	f7fc ff12 	bl	801c0b4 <rmw_validate_node_name>
 801f290:	2800      	cmp	r0, #0
 801f292:	f040 808e 	bne.w	801f3b2 <rcl_expand_topic_name+0x172>
 801f296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f298:	2a00      	cmp	r2, #0
 801f29a:	f040 8093 	bne.w	801f3c4 <rcl_expand_topic_name+0x184>
 801f29e:	a909      	add	r1, sp, #36	@ 0x24
 801f2a0:	4638      	mov	r0, r7
 801f2a2:	f7fc fee9 	bl	801c078 <rmw_validate_namespace>
 801f2a6:	2800      	cmp	r0, #0
 801f2a8:	f040 8083 	bne.w	801f3b2 <rcl_expand_topic_name+0x172>
 801f2ac:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801f2ae:	2c00      	cmp	r4, #0
 801f2b0:	f040 80ed 	bne.w	801f48e <rcl_expand_topic_name+0x24e>
 801f2b4:	217b      	movs	r1, #123	@ 0x7b
 801f2b6:	4640      	mov	r0, r8
 801f2b8:	f001 f932 	bl	8020520 <strchr>
 801f2bc:	f898 3000 	ldrb.w	r3, [r8]
 801f2c0:	2b2f      	cmp	r3, #47	@ 0x2f
 801f2c2:	4605      	mov	r5, r0
 801f2c4:	f000 809e 	beq.w	801f404 <rcl_expand_topic_name+0x1c4>
 801f2c8:	2b7e      	cmp	r3, #126	@ 0x7e
 801f2ca:	f040 80a2 	bne.w	801f412 <rcl_expand_topic_name+0x1d2>
 801f2ce:	4638      	mov	r0, r7
 801f2d0:	f7e0 ff88 	bl	80001e4 <strlen>
 801f2d4:	4a82      	ldr	r2, [pc, #520]	@ (801f4e0 <rcl_expand_topic_name+0x2a0>)
 801f2d6:	4b83      	ldr	r3, [pc, #524]	@ (801f4e4 <rcl_expand_topic_name+0x2a4>)
 801f2d8:	2801      	cmp	r0, #1
 801f2da:	bf18      	it	ne
 801f2dc:	4613      	movne	r3, r2
 801f2de:	9302      	str	r3, [sp, #8]
 801f2e0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f2e2:	9300      	str	r3, [sp, #0]
 801f2e4:	e9cd 7603 	strd	r7, r6, [sp, #12]
 801f2e8:	f108 0301 	add.w	r3, r8, #1
 801f2ec:	9305      	str	r3, [sp, #20]
 801f2ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801f2f2:	9301      	str	r3, [sp, #4]
 801f2f4:	ab14      	add	r3, sp, #80	@ 0x50
 801f2f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f2f8:	f7fc faa6 	bl	801b848 <rcutils_format_string_limit>
 801f2fc:	4682      	mov	sl, r0
 801f2fe:	2800      	cmp	r0, #0
 801f300:	f000 80c7 	beq.w	801f492 <rcl_expand_topic_name+0x252>
 801f304:	2d00      	cmp	r5, #0
 801f306:	f000 80a2 	beq.w	801f44e <rcl_expand_topic_name+0x20e>
 801f30a:	217b      	movs	r1, #123	@ 0x7b
 801f30c:	f001 f908 	bl	8020520 <strchr>
 801f310:	46d1      	mov	r9, sl
 801f312:	4605      	mov	r5, r0
 801f314:	9407      	str	r4, [sp, #28]
 801f316:	46d3      	mov	fp, sl
 801f318:	464c      	mov	r4, r9
 801f31a:	2d00      	cmp	r5, #0
 801f31c:	f000 80be 	beq.w	801f49c <rcl_expand_topic_name+0x25c>
 801f320:	217d      	movs	r1, #125	@ 0x7d
 801f322:	4620      	mov	r0, r4
 801f324:	f001 f8fc 	bl	8020520 <strchr>
 801f328:	eba0 0905 	sub.w	r9, r0, r5
 801f32c:	f109 0a01 	add.w	sl, r9, #1
 801f330:	486d      	ldr	r0, [pc, #436]	@ (801f4e8 <rcl_expand_topic_name+0x2a8>)
 801f332:	4652      	mov	r2, sl
 801f334:	4629      	mov	r1, r5
 801f336:	f001 f900 	bl	802053a <strncmp>
 801f33a:	2800      	cmp	r0, #0
 801f33c:	d067      	beq.n	801f40e <rcl_expand_topic_name+0x1ce>
 801f33e:	486b      	ldr	r0, [pc, #428]	@ (801f4ec <rcl_expand_topic_name+0x2ac>)
 801f340:	4652      	mov	r2, sl
 801f342:	4629      	mov	r1, r5
 801f344:	f001 f8f9 	bl	802053a <strncmp>
 801f348:	b130      	cbz	r0, 801f358 <rcl_expand_topic_name+0x118>
 801f34a:	4869      	ldr	r0, [pc, #420]	@ (801f4f0 <rcl_expand_topic_name+0x2b0>)
 801f34c:	4652      	mov	r2, sl
 801f34e:	4629      	mov	r1, r5
 801f350:	f001 f8f3 	bl	802053a <strncmp>
 801f354:	2800      	cmp	r0, #0
 801f356:	d137      	bne.n	801f3c8 <rcl_expand_topic_name+0x188>
 801f358:	46b9      	mov	r9, r7
 801f35a:	ab16      	add	r3, sp, #88	@ 0x58
 801f35c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f360:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801f364:	ab14      	add	r3, sp, #80	@ 0x50
 801f366:	4628      	mov	r0, r5
 801f368:	cb0c      	ldmia	r3, {r2, r3}
 801f36a:	4651      	mov	r1, sl
 801f36c:	f7fc fba8 	bl	801bac0 <rcutils_strndup>
 801f370:	4605      	mov	r5, r0
 801f372:	2800      	cmp	r0, #0
 801f374:	f000 809c 	beq.w	801f4b0 <rcl_expand_topic_name+0x270>
 801f378:	464a      	mov	r2, r9
 801f37a:	4620      	mov	r0, r4
 801f37c:	ab14      	add	r3, sp, #80	@ 0x50
 801f37e:	4629      	mov	r1, r5
 801f380:	f7fc fa9c 	bl	801b8bc <rcutils_repl_str>
 801f384:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801f386:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f388:	4604      	mov	r4, r0
 801f38a:	4628      	mov	r0, r5
 801f38c:	4798      	blx	r3
 801f38e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f390:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801f392:	4658      	mov	r0, fp
 801f394:	4798      	blx	r3
 801f396:	2c00      	cmp	r4, #0
 801f398:	d07b      	beq.n	801f492 <rcl_expand_topic_name+0x252>
 801f39a:	217b      	movs	r1, #123	@ 0x7b
 801f39c:	4620      	mov	r0, r4
 801f39e:	f001 f8bf 	bl	8020520 <strchr>
 801f3a2:	46a3      	mov	fp, r4
 801f3a4:	4605      	mov	r5, r0
 801f3a6:	e7b8      	b.n	801f31a <rcl_expand_topic_name+0xda>
 801f3a8:	240b      	movs	r4, #11
 801f3aa:	4620      	mov	r0, r4
 801f3ac:	b00b      	add	sp, #44	@ 0x2c
 801f3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3b2:	f7f9 fc87 	bl	8018cc4 <rcl_convert_rmw_ret_to_rcl_ret>
 801f3b6:	4604      	mov	r4, r0
 801f3b8:	e7f7      	b.n	801f3aa <rcl_expand_topic_name+0x16a>
 801f3ba:	2467      	movs	r4, #103	@ 0x67
 801f3bc:	4620      	mov	r0, r4
 801f3be:	b00b      	add	sp, #44	@ 0x2c
 801f3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3c4:	24c9      	movs	r4, #201	@ 0xc9
 801f3c6:	e7f0      	b.n	801f3aa <rcl_expand_topic_name+0x16a>
 801f3c8:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801f3cc:	9806      	ldr	r0, [sp, #24]
 801f3ce:	1c69      	adds	r1, r5, #1
 801f3d0:	f7fc fc90 	bl	801bcf4 <rcutils_string_map_getn>
 801f3d4:	4681      	mov	r9, r0
 801f3d6:	2800      	cmp	r0, #0
 801f3d8:	d1bf      	bne.n	801f35a <rcl_expand_topic_name+0x11a>
 801f3da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f3dc:	aa16      	add	r2, sp, #88	@ 0x58
 801f3de:	6018      	str	r0, [r3, #0]
 801f3e0:	ca07      	ldmia	r2, {r0, r1, r2}
 801f3e2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801f3e6:	ab14      	add	r3, sp, #80	@ 0x50
 801f3e8:	cb0c      	ldmia	r3, {r2, r3}
 801f3ea:	4651      	mov	r1, sl
 801f3ec:	4628      	mov	r0, r5
 801f3ee:	f7fc fb67 	bl	801bac0 <rcutils_strndup>
 801f3f2:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801f3f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f3f6:	4798      	blx	r3
 801f3f8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f3fa:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801f3fc:	4658      	mov	r0, fp
 801f3fe:	2469      	movs	r4, #105	@ 0x69
 801f400:	4798      	blx	r3
 801f402:	e7d2      	b.n	801f3aa <rcl_expand_topic_name+0x16a>
 801f404:	2800      	cmp	r0, #0
 801f406:	d05b      	beq.n	801f4c0 <rcl_expand_topic_name+0x280>
 801f408:	46c1      	mov	r9, r8
 801f40a:	46a2      	mov	sl, r4
 801f40c:	e782      	b.n	801f314 <rcl_expand_topic_name+0xd4>
 801f40e:	46b1      	mov	r9, r6
 801f410:	e7a3      	b.n	801f35a <rcl_expand_topic_name+0x11a>
 801f412:	2800      	cmp	r0, #0
 801f414:	d1f8      	bne.n	801f408 <rcl_expand_topic_name+0x1c8>
 801f416:	4638      	mov	r0, r7
 801f418:	f7e0 fee4 	bl	80001e4 <strlen>
 801f41c:	4a35      	ldr	r2, [pc, #212]	@ (801f4f4 <rcl_expand_topic_name+0x2b4>)
 801f41e:	4b36      	ldr	r3, [pc, #216]	@ (801f4f8 <rcl_expand_topic_name+0x2b8>)
 801f420:	f8cd 8010 	str.w	r8, [sp, #16]
 801f424:	2801      	cmp	r0, #1
 801f426:	bf18      	it	ne
 801f428:	4613      	movne	r3, r2
 801f42a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801f42e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801f432:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f434:	9703      	str	r7, [sp, #12]
 801f436:	9200      	str	r2, [sp, #0]
 801f438:	ab14      	add	r3, sp, #80	@ 0x50
 801f43a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f43c:	f7fc fa04 	bl	801b848 <rcutils_format_string_limit>
 801f440:	4682      	mov	sl, r0
 801f442:	4653      	mov	r3, sl
 801f444:	b32b      	cbz	r3, 801f492 <rcl_expand_topic_name+0x252>
 801f446:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f448:	f8c3 a000 	str.w	sl, [r3]
 801f44c:	e7ad      	b.n	801f3aa <rcl_expand_topic_name+0x16a>
 801f44e:	f89a 3000 	ldrb.w	r3, [sl]
 801f452:	2b2f      	cmp	r3, #47	@ 0x2f
 801f454:	d0f7      	beq.n	801f446 <rcl_expand_topic_name+0x206>
 801f456:	4638      	mov	r0, r7
 801f458:	f7e0 fec4 	bl	80001e4 <strlen>
 801f45c:	4a25      	ldr	r2, [pc, #148]	@ (801f4f4 <rcl_expand_topic_name+0x2b4>)
 801f45e:	4b26      	ldr	r3, [pc, #152]	@ (801f4f8 <rcl_expand_topic_name+0x2b8>)
 801f460:	f8cd a010 	str.w	sl, [sp, #16]
 801f464:	2801      	cmp	r0, #1
 801f466:	bf18      	it	ne
 801f468:	4613      	movne	r3, r2
 801f46a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801f46e:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801f472:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801f474:	9703      	str	r7, [sp, #12]
 801f476:	9200      	str	r2, [sp, #0]
 801f478:	ab14      	add	r3, sp, #80	@ 0x50
 801f47a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801f47c:	f7fc f9e4 	bl	801b848 <rcutils_format_string_limit>
 801f480:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f482:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801f484:	4605      	mov	r5, r0
 801f486:	4650      	mov	r0, sl
 801f488:	4798      	blx	r3
 801f48a:	46aa      	mov	sl, r5
 801f48c:	e7d9      	b.n	801f442 <rcl_expand_topic_name+0x202>
 801f48e:	24ca      	movs	r4, #202	@ 0xca
 801f490:	e78b      	b.n	801f3aa <rcl_expand_topic_name+0x16a>
 801f492:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801f494:	2300      	movs	r3, #0
 801f496:	6013      	str	r3, [r2, #0]
 801f498:	240a      	movs	r4, #10
 801f49a:	e786      	b.n	801f3aa <rcl_expand_topic_name+0x16a>
 801f49c:	465b      	mov	r3, fp
 801f49e:	9c07      	ldr	r4, [sp, #28]
 801f4a0:	46da      	mov	sl, fp
 801f4a2:	2b00      	cmp	r3, #0
 801f4a4:	d1d3      	bne.n	801f44e <rcl_expand_topic_name+0x20e>
 801f4a6:	f898 3000 	ldrb.w	r3, [r8]
 801f4aa:	2b2f      	cmp	r3, #47	@ 0x2f
 801f4ac:	d0cb      	beq.n	801f446 <rcl_expand_topic_name+0x206>
 801f4ae:	e7b2      	b.n	801f416 <rcl_expand_topic_name+0x1d6>
 801f4b0:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 801f4b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801f4b6:	6015      	str	r5, [r2, #0]
 801f4b8:	4658      	mov	r0, fp
 801f4ba:	4798      	blx	r3
 801f4bc:	240a      	movs	r4, #10
 801f4be:	e774      	b.n	801f3aa <rcl_expand_topic_name+0x16a>
 801f4c0:	ab17      	add	r3, sp, #92	@ 0x5c
 801f4c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f4c6:	e88d 0003 	stmia.w	sp, {r0, r1}
 801f4ca:	ab14      	add	r3, sp, #80	@ 0x50
 801f4cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 801f4ce:	4640      	mov	r0, r8
 801f4d0:	f7fc fad4 	bl	801ba7c <rcutils_strdup>
 801f4d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801f4d6:	2800      	cmp	r0, #0
 801f4d8:	6018      	str	r0, [r3, #0]
 801f4da:	bf08      	it	eq
 801f4dc:	240a      	moveq	r4, #10
 801f4de:	e764      	b.n	801f3aa <rcl_expand_topic_name+0x16a>
 801f4e0:	08022948 	.word	0x08022948
 801f4e4:	08021948 	.word	0x08021948
 801f4e8:	08022950 	.word	0x08022950
 801f4ec:	08022958 	.word	0x08022958
 801f4f0:	08022960 	.word	0x08022960
 801f4f4:	080221a4 	.word	0x080221a4
 801f4f8:	08021958 	.word	0x08021958

0801f4fc <rcl_get_default_topic_name_substitutions>:
 801f4fc:	2800      	cmp	r0, #0
 801f4fe:	bf0c      	ite	eq
 801f500:	200b      	moveq	r0, #11
 801f502:	2000      	movne	r0, #0
 801f504:	4770      	bx	lr
 801f506:	bf00      	nop

0801f508 <rcl_get_zero_initialized_guard_condition>:
 801f508:	4a03      	ldr	r2, [pc, #12]	@ (801f518 <rcl_get_zero_initialized_guard_condition+0x10>)
 801f50a:	4603      	mov	r3, r0
 801f50c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f510:	e883 0003 	stmia.w	r3, {r0, r1}
 801f514:	4618      	mov	r0, r3
 801f516:	4770      	bx	lr
 801f518:	0802296c 	.word	0x0802296c

0801f51c <rcl_guard_condition_init_from_rmw>:
 801f51c:	b082      	sub	sp, #8
 801f51e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f522:	b086      	sub	sp, #24
 801f524:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801f528:	4604      	mov	r4, r0
 801f52a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801f52e:	460e      	mov	r6, r1
 801f530:	4617      	mov	r7, r2
 801f532:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801f536:	f10d 0e04 	add.w	lr, sp, #4
 801f53a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801f53e:	f8dc 3000 	ldr.w	r3, [ip]
 801f542:	f8ce 3000 	str.w	r3, [lr]
 801f546:	a801      	add	r0, sp, #4
 801f548:	f7f4 ffde 	bl	8014508 <rcutils_allocator_is_valid>
 801f54c:	b350      	cbz	r0, 801f5a4 <rcl_guard_condition_init_from_rmw+0x88>
 801f54e:	b34c      	cbz	r4, 801f5a4 <rcl_guard_condition_init_from_rmw+0x88>
 801f550:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801f554:	f1b8 0f00 	cmp.w	r8, #0
 801f558:	d11e      	bne.n	801f598 <rcl_guard_condition_init_from_rmw+0x7c>
 801f55a:	b31f      	cbz	r7, 801f5a4 <rcl_guard_condition_init_from_rmw+0x88>
 801f55c:	4638      	mov	r0, r7
 801f55e:	f7f9 fbcf 	bl	8018d00 <rcl_context_is_valid>
 801f562:	b328      	cbz	r0, 801f5b0 <rcl_guard_condition_init_from_rmw+0x94>
 801f564:	9b01      	ldr	r3, [sp, #4]
 801f566:	9905      	ldr	r1, [sp, #20]
 801f568:	201c      	movs	r0, #28
 801f56a:	4798      	blx	r3
 801f56c:	4605      	mov	r5, r0
 801f56e:	6060      	str	r0, [r4, #4]
 801f570:	b358      	cbz	r0, 801f5ca <rcl_guard_condition_init_from_rmw+0xae>
 801f572:	b1fe      	cbz	r6, 801f5b4 <rcl_guard_condition_init_from_rmw+0x98>
 801f574:	6006      	str	r6, [r0, #0]
 801f576:	f880 8004 	strb.w	r8, [r0, #4]
 801f57a:	ac01      	add	r4, sp, #4
 801f57c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f57e:	f105 0c08 	add.w	ip, r5, #8
 801f582:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f586:	6823      	ldr	r3, [r4, #0]
 801f588:	f8cc 3000 	str.w	r3, [ip]
 801f58c:	2000      	movs	r0, #0
 801f58e:	b006      	add	sp, #24
 801f590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f594:	b002      	add	sp, #8
 801f596:	4770      	bx	lr
 801f598:	2064      	movs	r0, #100	@ 0x64
 801f59a:	b006      	add	sp, #24
 801f59c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f5a0:	b002      	add	sp, #8
 801f5a2:	4770      	bx	lr
 801f5a4:	200b      	movs	r0, #11
 801f5a6:	b006      	add	sp, #24
 801f5a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f5ac:	b002      	add	sp, #8
 801f5ae:	4770      	bx	lr
 801f5b0:	2065      	movs	r0, #101	@ 0x65
 801f5b2:	e7f2      	b.n	801f59a <rcl_guard_condition_init_from_rmw+0x7e>
 801f5b4:	6838      	ldr	r0, [r7, #0]
 801f5b6:	3028      	adds	r0, #40	@ 0x28
 801f5b8:	f000 fa3a 	bl	801fa30 <rmw_create_guard_condition>
 801f5bc:	6028      	str	r0, [r5, #0]
 801f5be:	6865      	ldr	r5, [r4, #4]
 801f5c0:	682e      	ldr	r6, [r5, #0]
 801f5c2:	b126      	cbz	r6, 801f5ce <rcl_guard_condition_init_from_rmw+0xb2>
 801f5c4:	2301      	movs	r3, #1
 801f5c6:	712b      	strb	r3, [r5, #4]
 801f5c8:	e7d7      	b.n	801f57a <rcl_guard_condition_init_from_rmw+0x5e>
 801f5ca:	200a      	movs	r0, #10
 801f5cc:	e7e5      	b.n	801f59a <rcl_guard_condition_init_from_rmw+0x7e>
 801f5ce:	4628      	mov	r0, r5
 801f5d0:	9b02      	ldr	r3, [sp, #8]
 801f5d2:	9905      	ldr	r1, [sp, #20]
 801f5d4:	4798      	blx	r3
 801f5d6:	6066      	str	r6, [r4, #4]
 801f5d8:	2001      	movs	r0, #1
 801f5da:	e7de      	b.n	801f59a <rcl_guard_condition_init_from_rmw+0x7e>

0801f5dc <rcl_guard_condition_fini>:
 801f5dc:	b570      	push	{r4, r5, r6, lr}
 801f5de:	b082      	sub	sp, #8
 801f5e0:	b1f0      	cbz	r0, 801f620 <rcl_guard_condition_fini+0x44>
 801f5e2:	6843      	ldr	r3, [r0, #4]
 801f5e4:	4604      	mov	r4, r0
 801f5e6:	b163      	cbz	r3, 801f602 <rcl_guard_condition_fini+0x26>
 801f5e8:	6818      	ldr	r0, [r3, #0]
 801f5ea:	68de      	ldr	r6, [r3, #12]
 801f5ec:	6999      	ldr	r1, [r3, #24]
 801f5ee:	b160      	cbz	r0, 801f60a <rcl_guard_condition_fini+0x2e>
 801f5f0:	791d      	ldrb	r5, [r3, #4]
 801f5f2:	b965      	cbnz	r5, 801f60e <rcl_guard_condition_fini+0x32>
 801f5f4:	4618      	mov	r0, r3
 801f5f6:	47b0      	blx	r6
 801f5f8:	2300      	movs	r3, #0
 801f5fa:	4628      	mov	r0, r5
 801f5fc:	6063      	str	r3, [r4, #4]
 801f5fe:	b002      	add	sp, #8
 801f600:	bd70      	pop	{r4, r5, r6, pc}
 801f602:	461d      	mov	r5, r3
 801f604:	4628      	mov	r0, r5
 801f606:	b002      	add	sp, #8
 801f608:	bd70      	pop	{r4, r5, r6, pc}
 801f60a:	4605      	mov	r5, r0
 801f60c:	e7f2      	b.n	801f5f4 <rcl_guard_condition_fini+0x18>
 801f60e:	9101      	str	r1, [sp, #4]
 801f610:	f000 fa22 	bl	801fa58 <rmw_destroy_guard_condition>
 801f614:	1e05      	subs	r5, r0, #0
 801f616:	6863      	ldr	r3, [r4, #4]
 801f618:	9901      	ldr	r1, [sp, #4]
 801f61a:	bf18      	it	ne
 801f61c:	2501      	movne	r5, #1
 801f61e:	e7e9      	b.n	801f5f4 <rcl_guard_condition_fini+0x18>
 801f620:	250b      	movs	r5, #11
 801f622:	4628      	mov	r0, r5
 801f624:	b002      	add	sp, #8
 801f626:	bd70      	pop	{r4, r5, r6, pc}

0801f628 <rcl_guard_condition_get_default_options>:
 801f628:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f62a:	b087      	sub	sp, #28
 801f62c:	4606      	mov	r6, r0
 801f62e:	4668      	mov	r0, sp
 801f630:	f7f4 ff5c 	bl	80144ec <rcutils_get_default_allocator>
 801f634:	4b09      	ldr	r3, [pc, #36]	@ (801f65c <rcl_guard_condition_get_default_options+0x34>)
 801f636:	46ee      	mov	lr, sp
 801f638:	469c      	mov	ip, r3
 801f63a:	461d      	mov	r5, r3
 801f63c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801f640:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801f646:	4634      	mov	r4, r6
 801f648:	f8de 7000 	ldr.w	r7, [lr]
 801f64c:	f8cc 7000 	str.w	r7, [ip]
 801f650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801f652:	4630      	mov	r0, r6
 801f654:	6027      	str	r7, [r4, #0]
 801f656:	b007      	add	sp, #28
 801f658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f65a:	bf00      	nop
 801f65c:	200165b4 	.word	0x200165b4

0801f660 <rcl_guard_condition_get_rmw_handle>:
 801f660:	b110      	cbz	r0, 801f668 <rcl_guard_condition_get_rmw_handle+0x8>
 801f662:	6840      	ldr	r0, [r0, #4]
 801f664:	b100      	cbz	r0, 801f668 <rcl_guard_condition_get_rmw_handle+0x8>
 801f666:	6800      	ldr	r0, [r0, #0]
 801f668:	4770      	bx	lr
 801f66a:	bf00      	nop

0801f66c <rcl_validate_topic_name>:
 801f66c:	2800      	cmp	r0, #0
 801f66e:	d07a      	beq.n	801f766 <rcl_validate_topic_name+0xfa>
 801f670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f674:	460e      	mov	r6, r1
 801f676:	2900      	cmp	r1, #0
 801f678:	d07c      	beq.n	801f774 <rcl_validate_topic_name+0x108>
 801f67a:	4617      	mov	r7, r2
 801f67c:	4605      	mov	r5, r0
 801f67e:	f7e0 fdb1 	bl	80001e4 <strlen>
 801f682:	b1b0      	cbz	r0, 801f6b2 <rcl_validate_topic_name+0x46>
 801f684:	f895 9000 	ldrb.w	r9, [r5]
 801f688:	f8df c180 	ldr.w	ip, [pc, #384]	@ 801f80c <rcl_validate_topic_name+0x1a0>
 801f68c:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801f690:	f013 0304 	ands.w	r3, r3, #4
 801f694:	d169      	bne.n	801f76a <rcl_validate_topic_name+0xfe>
 801f696:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801f69a:	f815 2008 	ldrb.w	r2, [r5, r8]
 801f69e:	2a2f      	cmp	r2, #47	@ 0x2f
 801f6a0:	d10e      	bne.n	801f6c0 <rcl_validate_topic_name+0x54>
 801f6a2:	2202      	movs	r2, #2
 801f6a4:	6032      	str	r2, [r6, #0]
 801f6a6:	b36f      	cbz	r7, 801f704 <rcl_validate_topic_name+0x98>
 801f6a8:	f8c7 8000 	str.w	r8, [r7]
 801f6ac:	4618      	mov	r0, r3
 801f6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f6b2:	2301      	movs	r3, #1
 801f6b4:	6033      	str	r3, [r6, #0]
 801f6b6:	b32f      	cbz	r7, 801f704 <rcl_validate_topic_name+0x98>
 801f6b8:	2000      	movs	r0, #0
 801f6ba:	6038      	str	r0, [r7, #0]
 801f6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f6c0:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 801f6c4:	461c      	mov	r4, r3
 801f6c6:	4619      	mov	r1, r3
 801f6c8:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801f6cc:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801f6d0:	f1be 0f09 	cmp.w	lr, #9
 801f6d4:	d919      	bls.n	801f70a <rcl_validate_topic_name+0x9e>
 801f6d6:	f022 0e20 	bic.w	lr, r2, #32
 801f6da:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 801f6de:	f1be 0f19 	cmp.w	lr, #25
 801f6e2:	d912      	bls.n	801f70a <rcl_validate_topic_name+0x9e>
 801f6e4:	2a5f      	cmp	r2, #95	@ 0x5f
 801f6e6:	d019      	beq.n	801f71c <rcl_validate_topic_name+0xb0>
 801f6e8:	2a2f      	cmp	r2, #47	@ 0x2f
 801f6ea:	d051      	beq.n	801f790 <rcl_validate_topic_name+0x124>
 801f6ec:	2a7e      	cmp	r2, #126	@ 0x7e
 801f6ee:	d048      	beq.n	801f782 <rcl_validate_topic_name+0x116>
 801f6f0:	2a7b      	cmp	r2, #123	@ 0x7b
 801f6f2:	d054      	beq.n	801f79e <rcl_validate_topic_name+0x132>
 801f6f4:	2a7d      	cmp	r2, #125	@ 0x7d
 801f6f6:	d161      	bne.n	801f7bc <rcl_validate_topic_name+0x150>
 801f6f8:	2c00      	cmp	r4, #0
 801f6fa:	d155      	bne.n	801f7a8 <rcl_validate_topic_name+0x13c>
 801f6fc:	2305      	movs	r3, #5
 801f6fe:	6033      	str	r3, [r6, #0]
 801f700:	b107      	cbz	r7, 801f704 <rcl_validate_topic_name+0x98>
 801f702:	6039      	str	r1, [r7, #0]
 801f704:	2000      	movs	r0, #0
 801f706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f70a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f70e:	0752      	lsls	r2, r2, #29
 801f710:	d504      	bpl.n	801f71c <rcl_validate_topic_name+0xb0>
 801f712:	b11c      	cbz	r4, 801f71c <rcl_validate_topic_name+0xb0>
 801f714:	b111      	cbz	r1, 801f71c <rcl_validate_topic_name+0xb0>
 801f716:	1e4a      	subs	r2, r1, #1
 801f718:	429a      	cmp	r2, r3
 801f71a:	d02d      	beq.n	801f778 <rcl_validate_topic_name+0x10c>
 801f71c:	3101      	adds	r1, #1
 801f71e:	4288      	cmp	r0, r1
 801f720:	d1d2      	bne.n	801f6c8 <rcl_validate_topic_name+0x5c>
 801f722:	2c00      	cmp	r4, #0
 801f724:	d145      	bne.n	801f7b2 <rcl_validate_topic_name+0x146>
 801f726:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801f72a:	d04f      	beq.n	801f7cc <rcl_validate_topic_name+0x160>
 801f72c:	4620      	mov	r0, r4
 801f72e:	2301      	movs	r3, #1
 801f730:	e006      	b.n	801f740 <rcl_validate_topic_name+0xd4>
 801f732:	428b      	cmp	r3, r1
 801f734:	f105 0501 	add.w	r5, r5, #1
 801f738:	f103 0201 	add.w	r2, r3, #1
 801f73c:	d236      	bcs.n	801f7ac <rcl_validate_topic_name+0x140>
 801f73e:	4613      	mov	r3, r2
 801f740:	4580      	cmp	r8, r0
 801f742:	f100 0001 	add.w	r0, r0, #1
 801f746:	d0f4      	beq.n	801f732 <rcl_validate_topic_name+0xc6>
 801f748:	782a      	ldrb	r2, [r5, #0]
 801f74a:	2a2f      	cmp	r2, #47	@ 0x2f
 801f74c:	d1f1      	bne.n	801f732 <rcl_validate_topic_name+0xc6>
 801f74e:	786a      	ldrb	r2, [r5, #1]
 801f750:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f754:	0754      	lsls	r4, r2, #29
 801f756:	d5ec      	bpl.n	801f732 <rcl_validate_topic_name+0xc6>
 801f758:	2204      	movs	r2, #4
 801f75a:	6032      	str	r2, [r6, #0]
 801f75c:	2f00      	cmp	r7, #0
 801f75e:	d0d1      	beq.n	801f704 <rcl_validate_topic_name+0x98>
 801f760:	603b      	str	r3, [r7, #0]
 801f762:	2000      	movs	r0, #0
 801f764:	e7aa      	b.n	801f6bc <rcl_validate_topic_name+0x50>
 801f766:	200b      	movs	r0, #11
 801f768:	4770      	bx	lr
 801f76a:	2304      	movs	r3, #4
 801f76c:	6033      	str	r3, [r6, #0]
 801f76e:	2f00      	cmp	r7, #0
 801f770:	d1a2      	bne.n	801f6b8 <rcl_validate_topic_name+0x4c>
 801f772:	e7c7      	b.n	801f704 <rcl_validate_topic_name+0x98>
 801f774:	200b      	movs	r0, #11
 801f776:	e7a1      	b.n	801f6bc <rcl_validate_topic_name+0x50>
 801f778:	2309      	movs	r3, #9
 801f77a:	6033      	str	r3, [r6, #0]
 801f77c:	2f00      	cmp	r7, #0
 801f77e:	d1c0      	bne.n	801f702 <rcl_validate_topic_name+0x96>
 801f780:	e7c0      	b.n	801f704 <rcl_validate_topic_name+0x98>
 801f782:	2900      	cmp	r1, #0
 801f784:	d0ca      	beq.n	801f71c <rcl_validate_topic_name+0xb0>
 801f786:	2306      	movs	r3, #6
 801f788:	6033      	str	r3, [r6, #0]
 801f78a:	2f00      	cmp	r7, #0
 801f78c:	d1b9      	bne.n	801f702 <rcl_validate_topic_name+0x96>
 801f78e:	e7b9      	b.n	801f704 <rcl_validate_topic_name+0x98>
 801f790:	2c00      	cmp	r4, #0
 801f792:	d0c3      	beq.n	801f71c <rcl_validate_topic_name+0xb0>
 801f794:	2308      	movs	r3, #8
 801f796:	6033      	str	r3, [r6, #0]
 801f798:	2f00      	cmp	r7, #0
 801f79a:	d1b2      	bne.n	801f702 <rcl_validate_topic_name+0x96>
 801f79c:	e7b2      	b.n	801f704 <rcl_validate_topic_name+0x98>
 801f79e:	2c00      	cmp	r4, #0
 801f7a0:	d1f8      	bne.n	801f794 <rcl_validate_topic_name+0x128>
 801f7a2:	460b      	mov	r3, r1
 801f7a4:	2401      	movs	r4, #1
 801f7a6:	e7b9      	b.n	801f71c <rcl_validate_topic_name+0xb0>
 801f7a8:	2400      	movs	r4, #0
 801f7aa:	e7b7      	b.n	801f71c <rcl_validate_topic_name+0xb0>
 801f7ac:	2000      	movs	r0, #0
 801f7ae:	6030      	str	r0, [r6, #0]
 801f7b0:	e784      	b.n	801f6bc <rcl_validate_topic_name+0x50>
 801f7b2:	2205      	movs	r2, #5
 801f7b4:	6032      	str	r2, [r6, #0]
 801f7b6:	2f00      	cmp	r7, #0
 801f7b8:	d1d2      	bne.n	801f760 <rcl_validate_topic_name+0xf4>
 801f7ba:	e7a3      	b.n	801f704 <rcl_validate_topic_name+0x98>
 801f7bc:	2c00      	cmp	r4, #0
 801f7be:	bf14      	ite	ne
 801f7c0:	2308      	movne	r3, #8
 801f7c2:	2303      	moveq	r3, #3
 801f7c4:	6033      	str	r3, [r6, #0]
 801f7c6:	2f00      	cmp	r7, #0
 801f7c8:	d19b      	bne.n	801f702 <rcl_validate_topic_name+0x96>
 801f7ca:	e79b      	b.n	801f704 <rcl_validate_topic_name+0x98>
 801f7cc:	2301      	movs	r3, #1
 801f7ce:	e00a      	b.n	801f7e6 <rcl_validate_topic_name+0x17a>
 801f7d0:	2c01      	cmp	r4, #1
 801f7d2:	d013      	beq.n	801f7fc <rcl_validate_topic_name+0x190>
 801f7d4:	4299      	cmp	r1, r3
 801f7d6:	f104 0401 	add.w	r4, r4, #1
 801f7da:	f105 0501 	add.w	r5, r5, #1
 801f7de:	f103 0201 	add.w	r2, r3, #1
 801f7e2:	d9e3      	bls.n	801f7ac <rcl_validate_topic_name+0x140>
 801f7e4:	4613      	mov	r3, r2
 801f7e6:	45a0      	cmp	r8, r4
 801f7e8:	d0f4      	beq.n	801f7d4 <rcl_validate_topic_name+0x168>
 801f7ea:	782a      	ldrb	r2, [r5, #0]
 801f7ec:	2a2f      	cmp	r2, #47	@ 0x2f
 801f7ee:	d1ef      	bne.n	801f7d0 <rcl_validate_topic_name+0x164>
 801f7f0:	786a      	ldrb	r2, [r5, #1]
 801f7f2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801f7f6:	0752      	lsls	r2, r2, #29
 801f7f8:	d5ec      	bpl.n	801f7d4 <rcl_validate_topic_name+0x168>
 801f7fa:	e7ad      	b.n	801f758 <rcl_validate_topic_name+0xec>
 801f7fc:	2307      	movs	r3, #7
 801f7fe:	6033      	str	r3, [r6, #0]
 801f800:	2f00      	cmp	r7, #0
 801f802:	f43f af7f 	beq.w	801f704 <rcl_validate_topic_name+0x98>
 801f806:	603c      	str	r4, [r7, #0]
 801f808:	2000      	movs	r0, #0
 801f80a:	e757      	b.n	801f6bc <rcl_validate_topic_name+0x50>
 801f80c:	08022ad6 	.word	0x08022ad6

0801f810 <rcutils_string_array_fini>:
 801f810:	b320      	cbz	r0, 801f85c <rcutils_string_array_fini+0x4c>
 801f812:	b570      	push	{r4, r5, r6, lr}
 801f814:	4604      	mov	r4, r0
 801f816:	6840      	ldr	r0, [r0, #4]
 801f818:	b1d8      	cbz	r0, 801f852 <rcutils_string_array_fini+0x42>
 801f81a:	f104 0008 	add.w	r0, r4, #8
 801f81e:	f7f4 fe73 	bl	8014508 <rcutils_allocator_is_valid>
 801f822:	b1b8      	cbz	r0, 801f854 <rcutils_string_array_fini+0x44>
 801f824:	6823      	ldr	r3, [r4, #0]
 801f826:	b1bb      	cbz	r3, 801f858 <rcutils_string_array_fini+0x48>
 801f828:	2500      	movs	r5, #0
 801f82a:	6860      	ldr	r0, [r4, #4]
 801f82c:	462e      	mov	r6, r5
 801f82e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801f832:	68e3      	ldr	r3, [r4, #12]
 801f834:	69a1      	ldr	r1, [r4, #24]
 801f836:	4798      	blx	r3
 801f838:	e9d4 3000 	ldrd	r3, r0, [r4]
 801f83c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801f840:	3501      	adds	r5, #1
 801f842:	429d      	cmp	r5, r3
 801f844:	d3f3      	bcc.n	801f82e <rcutils_string_array_fini+0x1e>
 801f846:	68e3      	ldr	r3, [r4, #12]
 801f848:	69a1      	ldr	r1, [r4, #24]
 801f84a:	4798      	blx	r3
 801f84c:	2000      	movs	r0, #0
 801f84e:	e9c4 0000 	strd	r0, r0, [r4]
 801f852:	bd70      	pop	{r4, r5, r6, pc}
 801f854:	200b      	movs	r0, #11
 801f856:	bd70      	pop	{r4, r5, r6, pc}
 801f858:	6860      	ldr	r0, [r4, #4]
 801f85a:	e7f4      	b.n	801f846 <rcutils_string_array_fini+0x36>
 801f85c:	200b      	movs	r0, #11
 801f85e:	4770      	bx	lr

0801f860 <on_status>:
 801f860:	b082      	sub	sp, #8
 801f862:	b002      	add	sp, #8
 801f864:	4770      	bx	lr
 801f866:	bf00      	nop

0801f868 <on_topic>:
 801f868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f86c:	4a22      	ldr	r2, [pc, #136]	@ (801f8f8 <on_topic+0x90>)
 801f86e:	b094      	sub	sp, #80	@ 0x50
 801f870:	6812      	ldr	r2, [r2, #0]
 801f872:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801f874:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801f878:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801f87c:	b3c2      	cbz	r2, 801f8f0 <on_topic+0x88>
 801f87e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801f882:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801f886:	e001      	b.n	801f88c <on_topic+0x24>
 801f888:	6852      	ldr	r2, [r2, #4]
 801f88a:	b38a      	cbz	r2, 801f8f0 <on_topic+0x88>
 801f88c:	6894      	ldr	r4, [r2, #8]
 801f88e:	8aa3      	ldrh	r3, [r4, #20]
 801f890:	428b      	cmp	r3, r1
 801f892:	d1f9      	bne.n	801f888 <on_topic+0x20>
 801f894:	7da3      	ldrb	r3, [r4, #22]
 801f896:	4283      	cmp	r3, r0
 801f898:	d1f6      	bne.n	801f888 <on_topic+0x20>
 801f89a:	2248      	movs	r2, #72	@ 0x48
 801f89c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 801f8a0:	4668      	mov	r0, sp
 801f8a2:	f000 ff54 	bl	802074e <memcpy>
 801f8a6:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801f8aa:	cb0c      	ldmia	r3, {r2, r3}
 801f8ac:	4620      	mov	r0, r4
 801f8ae:	f7f5 fa4f 	bl	8014d50 <rmw_uxrce_get_static_input_buffer_for_entity>
 801f8b2:	4607      	mov	r7, r0
 801f8b4:	b1e0      	cbz	r0, 801f8f0 <on_topic+0x88>
 801f8b6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801f8ba:	4632      	mov	r2, r6
 801f8bc:	4628      	mov	r0, r5
 801f8be:	f108 0110 	add.w	r1, r8, #16
 801f8c2:	f7fd ff89 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 801f8c6:	b930      	cbnz	r0, 801f8d6 <on_topic+0x6e>
 801f8c8:	480c      	ldr	r0, [pc, #48]	@ (801f8fc <on_topic+0x94>)
 801f8ca:	4639      	mov	r1, r7
 801f8cc:	b014      	add	sp, #80	@ 0x50
 801f8ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f8d2:	f7fc bc5d 	b.w	801c190 <put_memory>
 801f8d6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801f8da:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 801f8de:	f7fd fd8d 	bl	801d3fc <rmw_uros_epoch_nanos>
 801f8e2:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801f8e6:	2305      	movs	r3, #5
 801f8e8:	e942 0102 	strd	r0, r1, [r2, #-8]
 801f8ec:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 801f8f0:	b014      	add	sp, #80	@ 0x50
 801f8f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f8f6:	bf00      	nop
 801f8f8:	20016414 	.word	0x20016414
 801f8fc:	20016404 	.word	0x20016404

0801f900 <on_request>:
 801f900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f904:	4823      	ldr	r0, [pc, #140]	@ (801f994 <on_request+0x94>)
 801f906:	b094      	sub	sp, #80	@ 0x50
 801f908:	6800      	ldr	r0, [r0, #0]
 801f90a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801f90c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801f910:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f912:	2800      	cmp	r0, #0
 801f914:	d03b      	beq.n	801f98e <on_request+0x8e>
 801f916:	461d      	mov	r5, r3
 801f918:	e001      	b.n	801f91e <on_request+0x1e>
 801f91a:	6840      	ldr	r0, [r0, #4]
 801f91c:	b3b8      	cbz	r0, 801f98e <on_request+0x8e>
 801f91e:	6884      	ldr	r4, [r0, #8]
 801f920:	8b21      	ldrh	r1, [r4, #24]
 801f922:	4291      	cmp	r1, r2
 801f924:	d1f9      	bne.n	801f91a <on_request+0x1a>
 801f926:	2248      	movs	r2, #72	@ 0x48
 801f928:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801f92c:	4668      	mov	r0, sp
 801f92e:	f000 ff0e 	bl	802074e <memcpy>
 801f932:	f104 0320 	add.w	r3, r4, #32
 801f936:	cb0c      	ldmia	r3, {r2, r3}
 801f938:	4620      	mov	r0, r4
 801f93a:	f7f5 fa09 	bl	8014d50 <rmw_uxrce_get_static_input_buffer_for_entity>
 801f93e:	4680      	mov	r8, r0
 801f940:	b328      	cbz	r0, 801f98e <on_request+0x8e>
 801f942:	4638      	mov	r0, r7
 801f944:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801f948:	4632      	mov	r2, r6
 801f94a:	f107 0110 	add.w	r1, r7, #16
 801f94e:	f7fd ff43 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 801f952:	b930      	cbnz	r0, 801f962 <on_request+0x62>
 801f954:	4810      	ldr	r0, [pc, #64]	@ (801f998 <on_request+0x98>)
 801f956:	4641      	mov	r1, r8
 801f958:	b014      	add	sp, #80	@ 0x50
 801f95a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f95e:	f7fc bc17 	b.w	801c190 <put_memory>
 801f962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801f964:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 801f968:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801f96c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801f970:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801f974:	e895 0003 	ldmia.w	r5, {r0, r1}
 801f978:	e88c 0003 	stmia.w	ip, {r0, r1}
 801f97c:	f7fd fd3e 	bl	801d3fc <rmw_uros_epoch_nanos>
 801f980:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801f984:	2303      	movs	r3, #3
 801f986:	e942 0102 	strd	r0, r1, [r2, #-8]
 801f98a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801f98e:	b014      	add	sp, #80	@ 0x50
 801f990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f994:	200163e4 	.word	0x200163e4
 801f998:	20016404 	.word	0x20016404

0801f99c <on_reply>:
 801f99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f9a0:	4821      	ldr	r0, [pc, #132]	@ (801fa28 <on_reply+0x8c>)
 801f9a2:	b094      	sub	sp, #80	@ 0x50
 801f9a4:	6800      	ldr	r0, [r0, #0]
 801f9a6:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801f9a8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801f9ac:	9113      	str	r1, [sp, #76]	@ 0x4c
 801f9ae:	b3b8      	cbz	r0, 801fa20 <on_reply+0x84>
 801f9b0:	461d      	mov	r5, r3
 801f9b2:	e001      	b.n	801f9b8 <on_reply+0x1c>
 801f9b4:	6840      	ldr	r0, [r0, #4]
 801f9b6:	b398      	cbz	r0, 801fa20 <on_reply+0x84>
 801f9b8:	6884      	ldr	r4, [r0, #8]
 801f9ba:	8b21      	ldrh	r1, [r4, #24]
 801f9bc:	4291      	cmp	r1, r2
 801f9be:	d1f9      	bne.n	801f9b4 <on_reply+0x18>
 801f9c0:	2248      	movs	r2, #72	@ 0x48
 801f9c2:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801f9c6:	4668      	mov	r0, sp
 801f9c8:	f000 fec1 	bl	802074e <memcpy>
 801f9cc:	f104 0320 	add.w	r3, r4, #32
 801f9d0:	cb0c      	ldmia	r3, {r2, r3}
 801f9d2:	4620      	mov	r0, r4
 801f9d4:	f7f5 f9bc 	bl	8014d50 <rmw_uxrce_get_static_input_buffer_for_entity>
 801f9d8:	4680      	mov	r8, r0
 801f9da:	b308      	cbz	r0, 801fa20 <on_reply+0x84>
 801f9dc:	4638      	mov	r0, r7
 801f9de:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801f9e2:	4632      	mov	r2, r6
 801f9e4:	f107 0110 	add.w	r1, r7, #16
 801f9e8:	f7fd fef6 	bl	801d7d8 <ucdr_deserialize_array_uint8_t>
 801f9ec:	b930      	cbnz	r0, 801f9fc <on_reply+0x60>
 801f9ee:	480f      	ldr	r0, [pc, #60]	@ (801fa2c <on_reply+0x90>)
 801f9f0:	4641      	mov	r1, r8
 801f9f2:	b014      	add	sp, #80	@ 0x50
 801f9f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f9f8:	f7fc bbca 	b.w	801c190 <put_memory>
 801f9fc:	2200      	movs	r2, #0
 801f9fe:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 801fa02:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801fa06:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 801fa0a:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 801fa0e:	f7fd fcf5 	bl	801d3fc <rmw_uros_epoch_nanos>
 801fa12:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801fa16:	2304      	movs	r3, #4
 801fa18:	e942 0102 	strd	r0, r1, [r2, #-8]
 801fa1c:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801fa20:	b014      	add	sp, #80	@ 0x50
 801fa22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa26:	bf00      	nop
 801fa28:	20011af8 	.word	0x20011af8
 801fa2c:	20016404 	.word	0x20016404

0801fa30 <rmw_create_guard_condition>:
 801fa30:	b538      	push	{r3, r4, r5, lr}
 801fa32:	4605      	mov	r5, r0
 801fa34:	4807      	ldr	r0, [pc, #28]	@ (801fa54 <rmw_create_guard_condition+0x24>)
 801fa36:	f7fc fb9b 	bl	801c170 <get_memory>
 801fa3a:	b148      	cbz	r0, 801fa50 <rmw_create_guard_condition+0x20>
 801fa3c:	6884      	ldr	r4, [r0, #8]
 801fa3e:	2300      	movs	r3, #0
 801fa40:	7423      	strb	r3, [r4, #16]
 801fa42:	61e5      	str	r5, [r4, #28]
 801fa44:	f7fc fbfc 	bl	801c240 <rmw_get_implementation_identifier>
 801fa48:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801fa4c:	f104 0014 	add.w	r0, r4, #20
 801fa50:	bd38      	pop	{r3, r4, r5, pc}
 801fa52:	bf00      	nop
 801fa54:	200163a4 	.word	0x200163a4

0801fa58 <rmw_destroy_guard_condition>:
 801fa58:	b508      	push	{r3, lr}
 801fa5a:	4b08      	ldr	r3, [pc, #32]	@ (801fa7c <rmw_destroy_guard_condition+0x24>)
 801fa5c:	6819      	ldr	r1, [r3, #0]
 801fa5e:	b911      	cbnz	r1, 801fa66 <rmw_destroy_guard_condition+0xe>
 801fa60:	e00a      	b.n	801fa78 <rmw_destroy_guard_condition+0x20>
 801fa62:	6849      	ldr	r1, [r1, #4]
 801fa64:	b141      	cbz	r1, 801fa78 <rmw_destroy_guard_condition+0x20>
 801fa66:	688b      	ldr	r3, [r1, #8]
 801fa68:	3314      	adds	r3, #20
 801fa6a:	4298      	cmp	r0, r3
 801fa6c:	d1f9      	bne.n	801fa62 <rmw_destroy_guard_condition+0xa>
 801fa6e:	4803      	ldr	r0, [pc, #12]	@ (801fa7c <rmw_destroy_guard_condition+0x24>)
 801fa70:	f7fc fb8e 	bl	801c190 <put_memory>
 801fa74:	2000      	movs	r0, #0
 801fa76:	bd08      	pop	{r3, pc}
 801fa78:	2001      	movs	r0, #1
 801fa7a:	bd08      	pop	{r3, pc}
 801fa7c:	200163a4 	.word	0x200163a4

0801fa80 <rosidl_runtime_c__String__init>:
 801fa80:	b510      	push	{r4, lr}
 801fa82:	4604      	mov	r4, r0
 801fa84:	b086      	sub	sp, #24
 801fa86:	b170      	cbz	r0, 801faa6 <rosidl_runtime_c__String__init+0x26>
 801fa88:	a801      	add	r0, sp, #4
 801fa8a:	f7f4 fd2f 	bl	80144ec <rcutils_get_default_allocator>
 801fa8e:	9b01      	ldr	r3, [sp, #4]
 801fa90:	9905      	ldr	r1, [sp, #20]
 801fa92:	2001      	movs	r0, #1
 801fa94:	4798      	blx	r3
 801fa96:	6020      	str	r0, [r4, #0]
 801fa98:	b128      	cbz	r0, 801faa6 <rosidl_runtime_c__String__init+0x26>
 801fa9a:	2100      	movs	r1, #0
 801fa9c:	2201      	movs	r2, #1
 801fa9e:	7001      	strb	r1, [r0, #0]
 801faa0:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801faa4:	4610      	mov	r0, r2
 801faa6:	b006      	add	sp, #24
 801faa8:	bd10      	pop	{r4, pc}
 801faaa:	bf00      	nop

0801faac <rosidl_runtime_c__String__fini>:
 801faac:	b320      	cbz	r0, 801faf8 <rosidl_runtime_c__String__fini+0x4c>
 801faae:	b510      	push	{r4, lr}
 801fab0:	6803      	ldr	r3, [r0, #0]
 801fab2:	b086      	sub	sp, #24
 801fab4:	4604      	mov	r4, r0
 801fab6:	b173      	cbz	r3, 801fad6 <rosidl_runtime_c__String__fini+0x2a>
 801fab8:	6883      	ldr	r3, [r0, #8]
 801faba:	b1f3      	cbz	r3, 801fafa <rosidl_runtime_c__String__fini+0x4e>
 801fabc:	a801      	add	r0, sp, #4
 801fabe:	f7f4 fd15 	bl	80144ec <rcutils_get_default_allocator>
 801fac2:	9b02      	ldr	r3, [sp, #8]
 801fac4:	9905      	ldr	r1, [sp, #20]
 801fac6:	6820      	ldr	r0, [r4, #0]
 801fac8:	4798      	blx	r3
 801faca:	2300      	movs	r3, #0
 801facc:	e9c4 3300 	strd	r3, r3, [r4]
 801fad0:	60a3      	str	r3, [r4, #8]
 801fad2:	b006      	add	sp, #24
 801fad4:	bd10      	pop	{r4, pc}
 801fad6:	6843      	ldr	r3, [r0, #4]
 801fad8:	b9db      	cbnz	r3, 801fb12 <rosidl_runtime_c__String__fini+0x66>
 801fada:	6883      	ldr	r3, [r0, #8]
 801fadc:	2b00      	cmp	r3, #0
 801fade:	d0f8      	beq.n	801fad2 <rosidl_runtime_c__String__fini+0x26>
 801fae0:	4b12      	ldr	r3, [pc, #72]	@ (801fb2c <rosidl_runtime_c__String__fini+0x80>)
 801fae2:	4813      	ldr	r0, [pc, #76]	@ (801fb30 <rosidl_runtime_c__String__fini+0x84>)
 801fae4:	681b      	ldr	r3, [r3, #0]
 801fae6:	2251      	movs	r2, #81	@ 0x51
 801fae8:	68db      	ldr	r3, [r3, #12]
 801faea:	2101      	movs	r1, #1
 801faec:	f000 fb82 	bl	80201f4 <fwrite>
 801faf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801faf4:	f000 f83e 	bl	801fb74 <exit>
 801faf8:	4770      	bx	lr
 801fafa:	4b0c      	ldr	r3, [pc, #48]	@ (801fb2c <rosidl_runtime_c__String__fini+0x80>)
 801fafc:	480d      	ldr	r0, [pc, #52]	@ (801fb34 <rosidl_runtime_c__String__fini+0x88>)
 801fafe:	681b      	ldr	r3, [r3, #0]
 801fb00:	224c      	movs	r2, #76	@ 0x4c
 801fb02:	68db      	ldr	r3, [r3, #12]
 801fb04:	2101      	movs	r1, #1
 801fb06:	f000 fb75 	bl	80201f4 <fwrite>
 801fb0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fb0e:	f000 f831 	bl	801fb74 <exit>
 801fb12:	4b06      	ldr	r3, [pc, #24]	@ (801fb2c <rosidl_runtime_c__String__fini+0x80>)
 801fb14:	4808      	ldr	r0, [pc, #32]	@ (801fb38 <rosidl_runtime_c__String__fini+0x8c>)
 801fb16:	681b      	ldr	r3, [r3, #0]
 801fb18:	224e      	movs	r2, #78	@ 0x4e
 801fb1a:	68db      	ldr	r3, [r3, #12]
 801fb1c:	2101      	movs	r1, #1
 801fb1e:	f000 fb69 	bl	80201f4 <fwrite>
 801fb22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801fb26:	f000 f825 	bl	801fb74 <exit>
 801fb2a:	bf00      	nop
 801fb2c:	20000bfc 	.word	0x20000bfc
 801fb30:	08022a14 	.word	0x08022a14
 801fb34:	08022974 	.word	0x08022974
 801fb38:	080229c4 	.word	0x080229c4

0801fb3c <calloc>:
 801fb3c:	4b02      	ldr	r3, [pc, #8]	@ (801fb48 <calloc+0xc>)
 801fb3e:	460a      	mov	r2, r1
 801fb40:	4601      	mov	r1, r0
 801fb42:	6818      	ldr	r0, [r3, #0]
 801fb44:	f000 b802 	b.w	801fb4c <_calloc_r>
 801fb48:	20000bfc 	.word	0x20000bfc

0801fb4c <_calloc_r>:
 801fb4c:	b570      	push	{r4, r5, r6, lr}
 801fb4e:	fba1 5402 	umull	r5, r4, r1, r2
 801fb52:	b93c      	cbnz	r4, 801fb64 <_calloc_r+0x18>
 801fb54:	4629      	mov	r1, r5
 801fb56:	f000 f899 	bl	801fc8c <_malloc_r>
 801fb5a:	4606      	mov	r6, r0
 801fb5c:	b928      	cbnz	r0, 801fb6a <_calloc_r+0x1e>
 801fb5e:	2600      	movs	r6, #0
 801fb60:	4630      	mov	r0, r6
 801fb62:	bd70      	pop	{r4, r5, r6, pc}
 801fb64:	220c      	movs	r2, #12
 801fb66:	6002      	str	r2, [r0, #0]
 801fb68:	e7f9      	b.n	801fb5e <_calloc_r+0x12>
 801fb6a:	462a      	mov	r2, r5
 801fb6c:	4621      	mov	r1, r4
 801fb6e:	f000 fccf 	bl	8020510 <memset>
 801fb72:	e7f5      	b.n	801fb60 <_calloc_r+0x14>

0801fb74 <exit>:
 801fb74:	b508      	push	{r3, lr}
 801fb76:	4b06      	ldr	r3, [pc, #24]	@ (801fb90 <exit+0x1c>)
 801fb78:	4604      	mov	r4, r0
 801fb7a:	b113      	cbz	r3, 801fb82 <exit+0xe>
 801fb7c:	2100      	movs	r1, #0
 801fb7e:	f3af 8000 	nop.w
 801fb82:	4b04      	ldr	r3, [pc, #16]	@ (801fb94 <exit+0x20>)
 801fb84:	681b      	ldr	r3, [r3, #0]
 801fb86:	b103      	cbz	r3, 801fb8a <exit+0x16>
 801fb88:	4798      	blx	r3
 801fb8a:	4620      	mov	r0, r4
 801fb8c:	f7e3 f950 	bl	8002e30 <_exit>
 801fb90:	00000000 	.word	0x00000000
 801fb94:	20016708 	.word	0x20016708

0801fb98 <getenv>:
 801fb98:	b507      	push	{r0, r1, r2, lr}
 801fb9a:	4b04      	ldr	r3, [pc, #16]	@ (801fbac <getenv+0x14>)
 801fb9c:	4601      	mov	r1, r0
 801fb9e:	aa01      	add	r2, sp, #4
 801fba0:	6818      	ldr	r0, [r3, #0]
 801fba2:	f000 f805 	bl	801fbb0 <_findenv_r>
 801fba6:	b003      	add	sp, #12
 801fba8:	f85d fb04 	ldr.w	pc, [sp], #4
 801fbac:	20000bfc 	.word	0x20000bfc

0801fbb0 <_findenv_r>:
 801fbb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fbb4:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801fc24 <_findenv_r+0x74>
 801fbb8:	4606      	mov	r6, r0
 801fbba:	4689      	mov	r9, r1
 801fbbc:	4617      	mov	r7, r2
 801fbbe:	f000 fdf3 	bl	80207a8 <__env_lock>
 801fbc2:	f8da 4000 	ldr.w	r4, [sl]
 801fbc6:	b134      	cbz	r4, 801fbd6 <_findenv_r+0x26>
 801fbc8:	464b      	mov	r3, r9
 801fbca:	4698      	mov	r8, r3
 801fbcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fbd0:	b13a      	cbz	r2, 801fbe2 <_findenv_r+0x32>
 801fbd2:	2a3d      	cmp	r2, #61	@ 0x3d
 801fbd4:	d1f9      	bne.n	801fbca <_findenv_r+0x1a>
 801fbd6:	4630      	mov	r0, r6
 801fbd8:	f000 fdec 	bl	80207b4 <__env_unlock>
 801fbdc:	2000      	movs	r0, #0
 801fbde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbe2:	eba8 0809 	sub.w	r8, r8, r9
 801fbe6:	46a3      	mov	fp, r4
 801fbe8:	f854 0b04 	ldr.w	r0, [r4], #4
 801fbec:	2800      	cmp	r0, #0
 801fbee:	d0f2      	beq.n	801fbd6 <_findenv_r+0x26>
 801fbf0:	4642      	mov	r2, r8
 801fbf2:	4649      	mov	r1, r9
 801fbf4:	f000 fca1 	bl	802053a <strncmp>
 801fbf8:	2800      	cmp	r0, #0
 801fbfa:	d1f4      	bne.n	801fbe6 <_findenv_r+0x36>
 801fbfc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801fc00:	eb03 0508 	add.w	r5, r3, r8
 801fc04:	f813 3008 	ldrb.w	r3, [r3, r8]
 801fc08:	2b3d      	cmp	r3, #61	@ 0x3d
 801fc0a:	d1ec      	bne.n	801fbe6 <_findenv_r+0x36>
 801fc0c:	f8da 3000 	ldr.w	r3, [sl]
 801fc10:	ebab 0303 	sub.w	r3, fp, r3
 801fc14:	109b      	asrs	r3, r3, #2
 801fc16:	4630      	mov	r0, r6
 801fc18:	603b      	str	r3, [r7, #0]
 801fc1a:	f000 fdcb 	bl	80207b4 <__env_unlock>
 801fc1e:	1c68      	adds	r0, r5, #1
 801fc20:	e7dd      	b.n	801fbde <_findenv_r+0x2e>
 801fc22:	bf00      	nop
 801fc24:	20000008 	.word	0x20000008

0801fc28 <malloc>:
 801fc28:	4b02      	ldr	r3, [pc, #8]	@ (801fc34 <malloc+0xc>)
 801fc2a:	4601      	mov	r1, r0
 801fc2c:	6818      	ldr	r0, [r3, #0]
 801fc2e:	f000 b82d 	b.w	801fc8c <_malloc_r>
 801fc32:	bf00      	nop
 801fc34:	20000bfc 	.word	0x20000bfc

0801fc38 <free>:
 801fc38:	4b02      	ldr	r3, [pc, #8]	@ (801fc44 <free+0xc>)
 801fc3a:	4601      	mov	r1, r0
 801fc3c:	6818      	ldr	r0, [r3, #0]
 801fc3e:	f000 bdbf 	b.w	80207c0 <_free_r>
 801fc42:	bf00      	nop
 801fc44:	20000bfc 	.word	0x20000bfc

0801fc48 <sbrk_aligned>:
 801fc48:	b570      	push	{r4, r5, r6, lr}
 801fc4a:	4e0f      	ldr	r6, [pc, #60]	@ (801fc88 <sbrk_aligned+0x40>)
 801fc4c:	460c      	mov	r4, r1
 801fc4e:	6831      	ldr	r1, [r6, #0]
 801fc50:	4605      	mov	r5, r0
 801fc52:	b911      	cbnz	r1, 801fc5a <sbrk_aligned+0x12>
 801fc54:	f000 fd24 	bl	80206a0 <_sbrk_r>
 801fc58:	6030      	str	r0, [r6, #0]
 801fc5a:	4621      	mov	r1, r4
 801fc5c:	4628      	mov	r0, r5
 801fc5e:	f000 fd1f 	bl	80206a0 <_sbrk_r>
 801fc62:	1c43      	adds	r3, r0, #1
 801fc64:	d103      	bne.n	801fc6e <sbrk_aligned+0x26>
 801fc66:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801fc6a:	4620      	mov	r0, r4
 801fc6c:	bd70      	pop	{r4, r5, r6, pc}
 801fc6e:	1cc4      	adds	r4, r0, #3
 801fc70:	f024 0403 	bic.w	r4, r4, #3
 801fc74:	42a0      	cmp	r0, r4
 801fc76:	d0f8      	beq.n	801fc6a <sbrk_aligned+0x22>
 801fc78:	1a21      	subs	r1, r4, r0
 801fc7a:	4628      	mov	r0, r5
 801fc7c:	f000 fd10 	bl	80206a0 <_sbrk_r>
 801fc80:	3001      	adds	r0, #1
 801fc82:	d1f2      	bne.n	801fc6a <sbrk_aligned+0x22>
 801fc84:	e7ef      	b.n	801fc66 <sbrk_aligned+0x1e>
 801fc86:	bf00      	nop
 801fc88:	200165c8 	.word	0x200165c8

0801fc8c <_malloc_r>:
 801fc8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fc90:	1ccd      	adds	r5, r1, #3
 801fc92:	f025 0503 	bic.w	r5, r5, #3
 801fc96:	3508      	adds	r5, #8
 801fc98:	2d0c      	cmp	r5, #12
 801fc9a:	bf38      	it	cc
 801fc9c:	250c      	movcc	r5, #12
 801fc9e:	2d00      	cmp	r5, #0
 801fca0:	4606      	mov	r6, r0
 801fca2:	db01      	blt.n	801fca8 <_malloc_r+0x1c>
 801fca4:	42a9      	cmp	r1, r5
 801fca6:	d904      	bls.n	801fcb2 <_malloc_r+0x26>
 801fca8:	230c      	movs	r3, #12
 801fcaa:	6033      	str	r3, [r6, #0]
 801fcac:	2000      	movs	r0, #0
 801fcae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fcb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801fd88 <_malloc_r+0xfc>
 801fcb6:	f000 f869 	bl	801fd8c <__malloc_lock>
 801fcba:	f8d8 3000 	ldr.w	r3, [r8]
 801fcbe:	461c      	mov	r4, r3
 801fcc0:	bb44      	cbnz	r4, 801fd14 <_malloc_r+0x88>
 801fcc2:	4629      	mov	r1, r5
 801fcc4:	4630      	mov	r0, r6
 801fcc6:	f7ff ffbf 	bl	801fc48 <sbrk_aligned>
 801fcca:	1c43      	adds	r3, r0, #1
 801fccc:	4604      	mov	r4, r0
 801fcce:	d158      	bne.n	801fd82 <_malloc_r+0xf6>
 801fcd0:	f8d8 4000 	ldr.w	r4, [r8]
 801fcd4:	4627      	mov	r7, r4
 801fcd6:	2f00      	cmp	r7, #0
 801fcd8:	d143      	bne.n	801fd62 <_malloc_r+0xd6>
 801fcda:	2c00      	cmp	r4, #0
 801fcdc:	d04b      	beq.n	801fd76 <_malloc_r+0xea>
 801fcde:	6823      	ldr	r3, [r4, #0]
 801fce0:	4639      	mov	r1, r7
 801fce2:	4630      	mov	r0, r6
 801fce4:	eb04 0903 	add.w	r9, r4, r3
 801fce8:	f000 fcda 	bl	80206a0 <_sbrk_r>
 801fcec:	4581      	cmp	r9, r0
 801fcee:	d142      	bne.n	801fd76 <_malloc_r+0xea>
 801fcf0:	6821      	ldr	r1, [r4, #0]
 801fcf2:	1a6d      	subs	r5, r5, r1
 801fcf4:	4629      	mov	r1, r5
 801fcf6:	4630      	mov	r0, r6
 801fcf8:	f7ff ffa6 	bl	801fc48 <sbrk_aligned>
 801fcfc:	3001      	adds	r0, #1
 801fcfe:	d03a      	beq.n	801fd76 <_malloc_r+0xea>
 801fd00:	6823      	ldr	r3, [r4, #0]
 801fd02:	442b      	add	r3, r5
 801fd04:	6023      	str	r3, [r4, #0]
 801fd06:	f8d8 3000 	ldr.w	r3, [r8]
 801fd0a:	685a      	ldr	r2, [r3, #4]
 801fd0c:	bb62      	cbnz	r2, 801fd68 <_malloc_r+0xdc>
 801fd0e:	f8c8 7000 	str.w	r7, [r8]
 801fd12:	e00f      	b.n	801fd34 <_malloc_r+0xa8>
 801fd14:	6822      	ldr	r2, [r4, #0]
 801fd16:	1b52      	subs	r2, r2, r5
 801fd18:	d420      	bmi.n	801fd5c <_malloc_r+0xd0>
 801fd1a:	2a0b      	cmp	r2, #11
 801fd1c:	d917      	bls.n	801fd4e <_malloc_r+0xc2>
 801fd1e:	1961      	adds	r1, r4, r5
 801fd20:	42a3      	cmp	r3, r4
 801fd22:	6025      	str	r5, [r4, #0]
 801fd24:	bf18      	it	ne
 801fd26:	6059      	strne	r1, [r3, #4]
 801fd28:	6863      	ldr	r3, [r4, #4]
 801fd2a:	bf08      	it	eq
 801fd2c:	f8c8 1000 	streq.w	r1, [r8]
 801fd30:	5162      	str	r2, [r4, r5]
 801fd32:	604b      	str	r3, [r1, #4]
 801fd34:	4630      	mov	r0, r6
 801fd36:	f000 f82f 	bl	801fd98 <__malloc_unlock>
 801fd3a:	f104 000b 	add.w	r0, r4, #11
 801fd3e:	1d23      	adds	r3, r4, #4
 801fd40:	f020 0007 	bic.w	r0, r0, #7
 801fd44:	1ac2      	subs	r2, r0, r3
 801fd46:	bf1c      	itt	ne
 801fd48:	1a1b      	subne	r3, r3, r0
 801fd4a:	50a3      	strne	r3, [r4, r2]
 801fd4c:	e7af      	b.n	801fcae <_malloc_r+0x22>
 801fd4e:	6862      	ldr	r2, [r4, #4]
 801fd50:	42a3      	cmp	r3, r4
 801fd52:	bf0c      	ite	eq
 801fd54:	f8c8 2000 	streq.w	r2, [r8]
 801fd58:	605a      	strne	r2, [r3, #4]
 801fd5a:	e7eb      	b.n	801fd34 <_malloc_r+0xa8>
 801fd5c:	4623      	mov	r3, r4
 801fd5e:	6864      	ldr	r4, [r4, #4]
 801fd60:	e7ae      	b.n	801fcc0 <_malloc_r+0x34>
 801fd62:	463c      	mov	r4, r7
 801fd64:	687f      	ldr	r7, [r7, #4]
 801fd66:	e7b6      	b.n	801fcd6 <_malloc_r+0x4a>
 801fd68:	461a      	mov	r2, r3
 801fd6a:	685b      	ldr	r3, [r3, #4]
 801fd6c:	42a3      	cmp	r3, r4
 801fd6e:	d1fb      	bne.n	801fd68 <_malloc_r+0xdc>
 801fd70:	2300      	movs	r3, #0
 801fd72:	6053      	str	r3, [r2, #4]
 801fd74:	e7de      	b.n	801fd34 <_malloc_r+0xa8>
 801fd76:	230c      	movs	r3, #12
 801fd78:	6033      	str	r3, [r6, #0]
 801fd7a:	4630      	mov	r0, r6
 801fd7c:	f000 f80c 	bl	801fd98 <__malloc_unlock>
 801fd80:	e794      	b.n	801fcac <_malloc_r+0x20>
 801fd82:	6005      	str	r5, [r0, #0]
 801fd84:	e7d6      	b.n	801fd34 <_malloc_r+0xa8>
 801fd86:	bf00      	nop
 801fd88:	200165cc 	.word	0x200165cc

0801fd8c <__malloc_lock>:
 801fd8c:	4801      	ldr	r0, [pc, #4]	@ (801fd94 <__malloc_lock+0x8>)
 801fd8e:	f000 bcd4 	b.w	802073a <__retarget_lock_acquire_recursive>
 801fd92:	bf00      	nop
 801fd94:	20016711 	.word	0x20016711

0801fd98 <__malloc_unlock>:
 801fd98:	4801      	ldr	r0, [pc, #4]	@ (801fda0 <__malloc_unlock+0x8>)
 801fd9a:	f000 bccf 	b.w	802073c <__retarget_lock_release_recursive>
 801fd9e:	bf00      	nop
 801fda0:	20016711 	.word	0x20016711

0801fda4 <srand>:
 801fda4:	b538      	push	{r3, r4, r5, lr}
 801fda6:	4b10      	ldr	r3, [pc, #64]	@ (801fde8 <srand+0x44>)
 801fda8:	681d      	ldr	r5, [r3, #0]
 801fdaa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801fdac:	4604      	mov	r4, r0
 801fdae:	b9b3      	cbnz	r3, 801fdde <srand+0x3a>
 801fdb0:	2018      	movs	r0, #24
 801fdb2:	f7ff ff39 	bl	801fc28 <malloc>
 801fdb6:	4602      	mov	r2, r0
 801fdb8:	6328      	str	r0, [r5, #48]	@ 0x30
 801fdba:	b920      	cbnz	r0, 801fdc6 <srand+0x22>
 801fdbc:	4b0b      	ldr	r3, [pc, #44]	@ (801fdec <srand+0x48>)
 801fdbe:	480c      	ldr	r0, [pc, #48]	@ (801fdf0 <srand+0x4c>)
 801fdc0:	2146      	movs	r1, #70	@ 0x46
 801fdc2:	f000 fcd3 	bl	802076c <__assert_func>
 801fdc6:	490b      	ldr	r1, [pc, #44]	@ (801fdf4 <srand+0x50>)
 801fdc8:	4b0b      	ldr	r3, [pc, #44]	@ (801fdf8 <srand+0x54>)
 801fdca:	e9c0 1300 	strd	r1, r3, [r0]
 801fdce:	4b0b      	ldr	r3, [pc, #44]	@ (801fdfc <srand+0x58>)
 801fdd0:	6083      	str	r3, [r0, #8]
 801fdd2:	230b      	movs	r3, #11
 801fdd4:	8183      	strh	r3, [r0, #12]
 801fdd6:	2100      	movs	r1, #0
 801fdd8:	2001      	movs	r0, #1
 801fdda:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801fdde:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801fde0:	2200      	movs	r2, #0
 801fde2:	611c      	str	r4, [r3, #16]
 801fde4:	615a      	str	r2, [r3, #20]
 801fde6:	bd38      	pop	{r3, r4, r5, pc}
 801fde8:	20000bfc 	.word	0x20000bfc
 801fdec:	08022a66 	.word	0x08022a66
 801fdf0:	08022a7d 	.word	0x08022a7d
 801fdf4:	abcd330e 	.word	0xabcd330e
 801fdf8:	e66d1234 	.word	0xe66d1234
 801fdfc:	0005deec 	.word	0x0005deec

0801fe00 <rand>:
 801fe00:	4b16      	ldr	r3, [pc, #88]	@ (801fe5c <rand+0x5c>)
 801fe02:	b510      	push	{r4, lr}
 801fe04:	681c      	ldr	r4, [r3, #0]
 801fe06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801fe08:	b9b3      	cbnz	r3, 801fe38 <rand+0x38>
 801fe0a:	2018      	movs	r0, #24
 801fe0c:	f7ff ff0c 	bl	801fc28 <malloc>
 801fe10:	4602      	mov	r2, r0
 801fe12:	6320      	str	r0, [r4, #48]	@ 0x30
 801fe14:	b920      	cbnz	r0, 801fe20 <rand+0x20>
 801fe16:	4b12      	ldr	r3, [pc, #72]	@ (801fe60 <rand+0x60>)
 801fe18:	4812      	ldr	r0, [pc, #72]	@ (801fe64 <rand+0x64>)
 801fe1a:	2152      	movs	r1, #82	@ 0x52
 801fe1c:	f000 fca6 	bl	802076c <__assert_func>
 801fe20:	4911      	ldr	r1, [pc, #68]	@ (801fe68 <rand+0x68>)
 801fe22:	4b12      	ldr	r3, [pc, #72]	@ (801fe6c <rand+0x6c>)
 801fe24:	e9c0 1300 	strd	r1, r3, [r0]
 801fe28:	4b11      	ldr	r3, [pc, #68]	@ (801fe70 <rand+0x70>)
 801fe2a:	6083      	str	r3, [r0, #8]
 801fe2c:	230b      	movs	r3, #11
 801fe2e:	8183      	strh	r3, [r0, #12]
 801fe30:	2100      	movs	r1, #0
 801fe32:	2001      	movs	r0, #1
 801fe34:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801fe38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801fe3a:	480e      	ldr	r0, [pc, #56]	@ (801fe74 <rand+0x74>)
 801fe3c:	690b      	ldr	r3, [r1, #16]
 801fe3e:	694c      	ldr	r4, [r1, #20]
 801fe40:	4a0d      	ldr	r2, [pc, #52]	@ (801fe78 <rand+0x78>)
 801fe42:	4358      	muls	r0, r3
 801fe44:	fb02 0004 	mla	r0, r2, r4, r0
 801fe48:	fba3 3202 	umull	r3, r2, r3, r2
 801fe4c:	3301      	adds	r3, #1
 801fe4e:	eb40 0002 	adc.w	r0, r0, r2
 801fe52:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801fe56:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801fe5a:	bd10      	pop	{r4, pc}
 801fe5c:	20000bfc 	.word	0x20000bfc
 801fe60:	08022a66 	.word	0x08022a66
 801fe64:	08022a7d 	.word	0x08022a7d
 801fe68:	abcd330e 	.word	0xabcd330e
 801fe6c:	e66d1234 	.word	0xe66d1234
 801fe70:	0005deec 	.word	0x0005deec
 801fe74:	5851f42d 	.word	0x5851f42d
 801fe78:	4c957f2d 	.word	0x4c957f2d

0801fe7c <realloc>:
 801fe7c:	4b02      	ldr	r3, [pc, #8]	@ (801fe88 <realloc+0xc>)
 801fe7e:	460a      	mov	r2, r1
 801fe80:	4601      	mov	r1, r0
 801fe82:	6818      	ldr	r0, [r3, #0]
 801fe84:	f000 b802 	b.w	801fe8c <_realloc_r>
 801fe88:	20000bfc 	.word	0x20000bfc

0801fe8c <_realloc_r>:
 801fe8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe90:	4680      	mov	r8, r0
 801fe92:	4615      	mov	r5, r2
 801fe94:	460c      	mov	r4, r1
 801fe96:	b921      	cbnz	r1, 801fea2 <_realloc_r+0x16>
 801fe98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fe9c:	4611      	mov	r1, r2
 801fe9e:	f7ff bef5 	b.w	801fc8c <_malloc_r>
 801fea2:	b92a      	cbnz	r2, 801feb0 <_realloc_r+0x24>
 801fea4:	f000 fc8c 	bl	80207c0 <_free_r>
 801fea8:	2400      	movs	r4, #0
 801feaa:	4620      	mov	r0, r4
 801feac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801feb0:	f000 fcd0 	bl	8020854 <_malloc_usable_size_r>
 801feb4:	4285      	cmp	r5, r0
 801feb6:	4606      	mov	r6, r0
 801feb8:	d802      	bhi.n	801fec0 <_realloc_r+0x34>
 801feba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801febe:	d8f4      	bhi.n	801feaa <_realloc_r+0x1e>
 801fec0:	4629      	mov	r1, r5
 801fec2:	4640      	mov	r0, r8
 801fec4:	f7ff fee2 	bl	801fc8c <_malloc_r>
 801fec8:	4607      	mov	r7, r0
 801feca:	2800      	cmp	r0, #0
 801fecc:	d0ec      	beq.n	801fea8 <_realloc_r+0x1c>
 801fece:	42b5      	cmp	r5, r6
 801fed0:	462a      	mov	r2, r5
 801fed2:	4621      	mov	r1, r4
 801fed4:	bf28      	it	cs
 801fed6:	4632      	movcs	r2, r6
 801fed8:	f000 fc39 	bl	802074e <memcpy>
 801fedc:	4621      	mov	r1, r4
 801fede:	4640      	mov	r0, r8
 801fee0:	f000 fc6e 	bl	80207c0 <_free_r>
 801fee4:	463c      	mov	r4, r7
 801fee6:	e7e0      	b.n	801feaa <_realloc_r+0x1e>

0801fee8 <_strtoul_l.constprop.0>:
 801fee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801feec:	4e34      	ldr	r6, [pc, #208]	@ (801ffc0 <_strtoul_l.constprop.0+0xd8>)
 801feee:	4686      	mov	lr, r0
 801fef0:	460d      	mov	r5, r1
 801fef2:	4628      	mov	r0, r5
 801fef4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801fef8:	5d37      	ldrb	r7, [r6, r4]
 801fefa:	f017 0708 	ands.w	r7, r7, #8
 801fefe:	d1f8      	bne.n	801fef2 <_strtoul_l.constprop.0+0xa>
 801ff00:	2c2d      	cmp	r4, #45	@ 0x2d
 801ff02:	d12f      	bne.n	801ff64 <_strtoul_l.constprop.0+0x7c>
 801ff04:	782c      	ldrb	r4, [r5, #0]
 801ff06:	2701      	movs	r7, #1
 801ff08:	1c85      	adds	r5, r0, #2
 801ff0a:	f033 0010 	bics.w	r0, r3, #16
 801ff0e:	d109      	bne.n	801ff24 <_strtoul_l.constprop.0+0x3c>
 801ff10:	2c30      	cmp	r4, #48	@ 0x30
 801ff12:	d12c      	bne.n	801ff6e <_strtoul_l.constprop.0+0x86>
 801ff14:	7828      	ldrb	r0, [r5, #0]
 801ff16:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801ff1a:	2858      	cmp	r0, #88	@ 0x58
 801ff1c:	d127      	bne.n	801ff6e <_strtoul_l.constprop.0+0x86>
 801ff1e:	786c      	ldrb	r4, [r5, #1]
 801ff20:	2310      	movs	r3, #16
 801ff22:	3502      	adds	r5, #2
 801ff24:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801ff28:	2600      	movs	r6, #0
 801ff2a:	fbb8 f8f3 	udiv	r8, r8, r3
 801ff2e:	fb03 f908 	mul.w	r9, r3, r8
 801ff32:	ea6f 0909 	mvn.w	r9, r9
 801ff36:	4630      	mov	r0, r6
 801ff38:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801ff3c:	f1bc 0f09 	cmp.w	ip, #9
 801ff40:	d81c      	bhi.n	801ff7c <_strtoul_l.constprop.0+0x94>
 801ff42:	4664      	mov	r4, ip
 801ff44:	42a3      	cmp	r3, r4
 801ff46:	dd2a      	ble.n	801ff9e <_strtoul_l.constprop.0+0xb6>
 801ff48:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801ff4c:	d007      	beq.n	801ff5e <_strtoul_l.constprop.0+0x76>
 801ff4e:	4580      	cmp	r8, r0
 801ff50:	d322      	bcc.n	801ff98 <_strtoul_l.constprop.0+0xb0>
 801ff52:	d101      	bne.n	801ff58 <_strtoul_l.constprop.0+0x70>
 801ff54:	45a1      	cmp	r9, r4
 801ff56:	db1f      	blt.n	801ff98 <_strtoul_l.constprop.0+0xb0>
 801ff58:	fb00 4003 	mla	r0, r0, r3, r4
 801ff5c:	2601      	movs	r6, #1
 801ff5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ff62:	e7e9      	b.n	801ff38 <_strtoul_l.constprop.0+0x50>
 801ff64:	2c2b      	cmp	r4, #43	@ 0x2b
 801ff66:	bf04      	itt	eq
 801ff68:	782c      	ldrbeq	r4, [r5, #0]
 801ff6a:	1c85      	addeq	r5, r0, #2
 801ff6c:	e7cd      	b.n	801ff0a <_strtoul_l.constprop.0+0x22>
 801ff6e:	2b00      	cmp	r3, #0
 801ff70:	d1d8      	bne.n	801ff24 <_strtoul_l.constprop.0+0x3c>
 801ff72:	2c30      	cmp	r4, #48	@ 0x30
 801ff74:	bf0c      	ite	eq
 801ff76:	2308      	moveq	r3, #8
 801ff78:	230a      	movne	r3, #10
 801ff7a:	e7d3      	b.n	801ff24 <_strtoul_l.constprop.0+0x3c>
 801ff7c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801ff80:	f1bc 0f19 	cmp.w	ip, #25
 801ff84:	d801      	bhi.n	801ff8a <_strtoul_l.constprop.0+0xa2>
 801ff86:	3c37      	subs	r4, #55	@ 0x37
 801ff88:	e7dc      	b.n	801ff44 <_strtoul_l.constprop.0+0x5c>
 801ff8a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801ff8e:	f1bc 0f19 	cmp.w	ip, #25
 801ff92:	d804      	bhi.n	801ff9e <_strtoul_l.constprop.0+0xb6>
 801ff94:	3c57      	subs	r4, #87	@ 0x57
 801ff96:	e7d5      	b.n	801ff44 <_strtoul_l.constprop.0+0x5c>
 801ff98:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801ff9c:	e7df      	b.n	801ff5e <_strtoul_l.constprop.0+0x76>
 801ff9e:	1c73      	adds	r3, r6, #1
 801ffa0:	d106      	bne.n	801ffb0 <_strtoul_l.constprop.0+0xc8>
 801ffa2:	2322      	movs	r3, #34	@ 0x22
 801ffa4:	f8ce 3000 	str.w	r3, [lr]
 801ffa8:	4630      	mov	r0, r6
 801ffaa:	b932      	cbnz	r2, 801ffba <_strtoul_l.constprop.0+0xd2>
 801ffac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ffb0:	b107      	cbz	r7, 801ffb4 <_strtoul_l.constprop.0+0xcc>
 801ffb2:	4240      	negs	r0, r0
 801ffb4:	2a00      	cmp	r2, #0
 801ffb6:	d0f9      	beq.n	801ffac <_strtoul_l.constprop.0+0xc4>
 801ffb8:	b106      	cbz	r6, 801ffbc <_strtoul_l.constprop.0+0xd4>
 801ffba:	1e69      	subs	r1, r5, #1
 801ffbc:	6011      	str	r1, [r2, #0]
 801ffbe:	e7f5      	b.n	801ffac <_strtoul_l.constprop.0+0xc4>
 801ffc0:	08022ad6 	.word	0x08022ad6

0801ffc4 <strtoul>:
 801ffc4:	4613      	mov	r3, r2
 801ffc6:	460a      	mov	r2, r1
 801ffc8:	4601      	mov	r1, r0
 801ffca:	4802      	ldr	r0, [pc, #8]	@ (801ffd4 <strtoul+0x10>)
 801ffcc:	6800      	ldr	r0, [r0, #0]
 801ffce:	f7ff bf8b 	b.w	801fee8 <_strtoul_l.constprop.0>
 801ffd2:	bf00      	nop
 801ffd4:	20000bfc 	.word	0x20000bfc

0801ffd8 <std>:
 801ffd8:	2300      	movs	r3, #0
 801ffda:	b510      	push	{r4, lr}
 801ffdc:	4604      	mov	r4, r0
 801ffde:	e9c0 3300 	strd	r3, r3, [r0]
 801ffe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ffe6:	6083      	str	r3, [r0, #8]
 801ffe8:	8181      	strh	r1, [r0, #12]
 801ffea:	6643      	str	r3, [r0, #100]	@ 0x64
 801ffec:	81c2      	strh	r2, [r0, #14]
 801ffee:	6183      	str	r3, [r0, #24]
 801fff0:	4619      	mov	r1, r3
 801fff2:	2208      	movs	r2, #8
 801fff4:	305c      	adds	r0, #92	@ 0x5c
 801fff6:	f000 fa8b 	bl	8020510 <memset>
 801fffa:	4b0d      	ldr	r3, [pc, #52]	@ (8020030 <std+0x58>)
 801fffc:	6263      	str	r3, [r4, #36]	@ 0x24
 801fffe:	4b0d      	ldr	r3, [pc, #52]	@ (8020034 <std+0x5c>)
 8020000:	62a3      	str	r3, [r4, #40]	@ 0x28
 8020002:	4b0d      	ldr	r3, [pc, #52]	@ (8020038 <std+0x60>)
 8020004:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8020006:	4b0d      	ldr	r3, [pc, #52]	@ (802003c <std+0x64>)
 8020008:	6323      	str	r3, [r4, #48]	@ 0x30
 802000a:	4b0d      	ldr	r3, [pc, #52]	@ (8020040 <std+0x68>)
 802000c:	6224      	str	r4, [r4, #32]
 802000e:	429c      	cmp	r4, r3
 8020010:	d006      	beq.n	8020020 <std+0x48>
 8020012:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8020016:	4294      	cmp	r4, r2
 8020018:	d002      	beq.n	8020020 <std+0x48>
 802001a:	33d0      	adds	r3, #208	@ 0xd0
 802001c:	429c      	cmp	r4, r3
 802001e:	d105      	bne.n	802002c <std+0x54>
 8020020:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8020024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020028:	f000 bb86 	b.w	8020738 <__retarget_lock_init_recursive>
 802002c:	bd10      	pop	{r4, pc}
 802002e:	bf00      	nop
 8020030:	0802029d 	.word	0x0802029d
 8020034:	080202bf 	.word	0x080202bf
 8020038:	080202f7 	.word	0x080202f7
 802003c:	0802031b 	.word	0x0802031b
 8020040:	200165d0 	.word	0x200165d0

08020044 <stdio_exit_handler>:
 8020044:	4a02      	ldr	r2, [pc, #8]	@ (8020050 <stdio_exit_handler+0xc>)
 8020046:	4903      	ldr	r1, [pc, #12]	@ (8020054 <stdio_exit_handler+0x10>)
 8020048:	4803      	ldr	r0, [pc, #12]	@ (8020058 <stdio_exit_handler+0x14>)
 802004a:	f000 b869 	b.w	8020120 <_fwalk_sglue>
 802004e:	bf00      	nop
 8020050:	20000bf0 	.word	0x20000bf0
 8020054:	080211bd 	.word	0x080211bd
 8020058:	20000c00 	.word	0x20000c00

0802005c <cleanup_stdio>:
 802005c:	6841      	ldr	r1, [r0, #4]
 802005e:	4b0c      	ldr	r3, [pc, #48]	@ (8020090 <cleanup_stdio+0x34>)
 8020060:	4299      	cmp	r1, r3
 8020062:	b510      	push	{r4, lr}
 8020064:	4604      	mov	r4, r0
 8020066:	d001      	beq.n	802006c <cleanup_stdio+0x10>
 8020068:	f001 f8a8 	bl	80211bc <_fflush_r>
 802006c:	68a1      	ldr	r1, [r4, #8]
 802006e:	4b09      	ldr	r3, [pc, #36]	@ (8020094 <cleanup_stdio+0x38>)
 8020070:	4299      	cmp	r1, r3
 8020072:	d002      	beq.n	802007a <cleanup_stdio+0x1e>
 8020074:	4620      	mov	r0, r4
 8020076:	f001 f8a1 	bl	80211bc <_fflush_r>
 802007a:	68e1      	ldr	r1, [r4, #12]
 802007c:	4b06      	ldr	r3, [pc, #24]	@ (8020098 <cleanup_stdio+0x3c>)
 802007e:	4299      	cmp	r1, r3
 8020080:	d004      	beq.n	802008c <cleanup_stdio+0x30>
 8020082:	4620      	mov	r0, r4
 8020084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020088:	f001 b898 	b.w	80211bc <_fflush_r>
 802008c:	bd10      	pop	{r4, pc}
 802008e:	bf00      	nop
 8020090:	200165d0 	.word	0x200165d0
 8020094:	20016638 	.word	0x20016638
 8020098:	200166a0 	.word	0x200166a0

0802009c <global_stdio_init.part.0>:
 802009c:	b510      	push	{r4, lr}
 802009e:	4b0b      	ldr	r3, [pc, #44]	@ (80200cc <global_stdio_init.part.0+0x30>)
 80200a0:	4c0b      	ldr	r4, [pc, #44]	@ (80200d0 <global_stdio_init.part.0+0x34>)
 80200a2:	4a0c      	ldr	r2, [pc, #48]	@ (80200d4 <global_stdio_init.part.0+0x38>)
 80200a4:	601a      	str	r2, [r3, #0]
 80200a6:	4620      	mov	r0, r4
 80200a8:	2200      	movs	r2, #0
 80200aa:	2104      	movs	r1, #4
 80200ac:	f7ff ff94 	bl	801ffd8 <std>
 80200b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80200b4:	2201      	movs	r2, #1
 80200b6:	2109      	movs	r1, #9
 80200b8:	f7ff ff8e 	bl	801ffd8 <std>
 80200bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80200c0:	2202      	movs	r2, #2
 80200c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80200c6:	2112      	movs	r1, #18
 80200c8:	f7ff bf86 	b.w	801ffd8 <std>
 80200cc:	20016708 	.word	0x20016708
 80200d0:	200165d0 	.word	0x200165d0
 80200d4:	08020045 	.word	0x08020045

080200d8 <__sfp_lock_acquire>:
 80200d8:	4801      	ldr	r0, [pc, #4]	@ (80200e0 <__sfp_lock_acquire+0x8>)
 80200da:	f000 bb2e 	b.w	802073a <__retarget_lock_acquire_recursive>
 80200de:	bf00      	nop
 80200e0:	20016712 	.word	0x20016712

080200e4 <__sfp_lock_release>:
 80200e4:	4801      	ldr	r0, [pc, #4]	@ (80200ec <__sfp_lock_release+0x8>)
 80200e6:	f000 bb29 	b.w	802073c <__retarget_lock_release_recursive>
 80200ea:	bf00      	nop
 80200ec:	20016712 	.word	0x20016712

080200f0 <__sinit>:
 80200f0:	b510      	push	{r4, lr}
 80200f2:	4604      	mov	r4, r0
 80200f4:	f7ff fff0 	bl	80200d8 <__sfp_lock_acquire>
 80200f8:	6a23      	ldr	r3, [r4, #32]
 80200fa:	b11b      	cbz	r3, 8020104 <__sinit+0x14>
 80200fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020100:	f7ff bff0 	b.w	80200e4 <__sfp_lock_release>
 8020104:	4b04      	ldr	r3, [pc, #16]	@ (8020118 <__sinit+0x28>)
 8020106:	6223      	str	r3, [r4, #32]
 8020108:	4b04      	ldr	r3, [pc, #16]	@ (802011c <__sinit+0x2c>)
 802010a:	681b      	ldr	r3, [r3, #0]
 802010c:	2b00      	cmp	r3, #0
 802010e:	d1f5      	bne.n	80200fc <__sinit+0xc>
 8020110:	f7ff ffc4 	bl	802009c <global_stdio_init.part.0>
 8020114:	e7f2      	b.n	80200fc <__sinit+0xc>
 8020116:	bf00      	nop
 8020118:	0802005d 	.word	0x0802005d
 802011c:	20016708 	.word	0x20016708

08020120 <_fwalk_sglue>:
 8020120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020124:	4607      	mov	r7, r0
 8020126:	4688      	mov	r8, r1
 8020128:	4614      	mov	r4, r2
 802012a:	2600      	movs	r6, #0
 802012c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020130:	f1b9 0901 	subs.w	r9, r9, #1
 8020134:	d505      	bpl.n	8020142 <_fwalk_sglue+0x22>
 8020136:	6824      	ldr	r4, [r4, #0]
 8020138:	2c00      	cmp	r4, #0
 802013a:	d1f7      	bne.n	802012c <_fwalk_sglue+0xc>
 802013c:	4630      	mov	r0, r6
 802013e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020142:	89ab      	ldrh	r3, [r5, #12]
 8020144:	2b01      	cmp	r3, #1
 8020146:	d907      	bls.n	8020158 <_fwalk_sglue+0x38>
 8020148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802014c:	3301      	adds	r3, #1
 802014e:	d003      	beq.n	8020158 <_fwalk_sglue+0x38>
 8020150:	4629      	mov	r1, r5
 8020152:	4638      	mov	r0, r7
 8020154:	47c0      	blx	r8
 8020156:	4306      	orrs	r6, r0
 8020158:	3568      	adds	r5, #104	@ 0x68
 802015a:	e7e9      	b.n	8020130 <_fwalk_sglue+0x10>

0802015c <_fwrite_r>:
 802015c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020160:	9c08      	ldr	r4, [sp, #32]
 8020162:	468a      	mov	sl, r1
 8020164:	4690      	mov	r8, r2
 8020166:	fb02 f903 	mul.w	r9, r2, r3
 802016a:	4606      	mov	r6, r0
 802016c:	b118      	cbz	r0, 8020176 <_fwrite_r+0x1a>
 802016e:	6a03      	ldr	r3, [r0, #32]
 8020170:	b90b      	cbnz	r3, 8020176 <_fwrite_r+0x1a>
 8020172:	f7ff ffbd 	bl	80200f0 <__sinit>
 8020176:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020178:	07dd      	lsls	r5, r3, #31
 802017a:	d405      	bmi.n	8020188 <_fwrite_r+0x2c>
 802017c:	89a3      	ldrh	r3, [r4, #12]
 802017e:	0598      	lsls	r0, r3, #22
 8020180:	d402      	bmi.n	8020188 <_fwrite_r+0x2c>
 8020182:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020184:	f000 fad9 	bl	802073a <__retarget_lock_acquire_recursive>
 8020188:	89a3      	ldrh	r3, [r4, #12]
 802018a:	0719      	lsls	r1, r3, #28
 802018c:	d516      	bpl.n	80201bc <_fwrite_r+0x60>
 802018e:	6923      	ldr	r3, [r4, #16]
 8020190:	b1a3      	cbz	r3, 80201bc <_fwrite_r+0x60>
 8020192:	2500      	movs	r5, #0
 8020194:	454d      	cmp	r5, r9
 8020196:	d01f      	beq.n	80201d8 <_fwrite_r+0x7c>
 8020198:	68a7      	ldr	r7, [r4, #8]
 802019a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 802019e:	3f01      	subs	r7, #1
 80201a0:	2f00      	cmp	r7, #0
 80201a2:	60a7      	str	r7, [r4, #8]
 80201a4:	da04      	bge.n	80201b0 <_fwrite_r+0x54>
 80201a6:	69a3      	ldr	r3, [r4, #24]
 80201a8:	429f      	cmp	r7, r3
 80201aa:	db0f      	blt.n	80201cc <_fwrite_r+0x70>
 80201ac:	290a      	cmp	r1, #10
 80201ae:	d00d      	beq.n	80201cc <_fwrite_r+0x70>
 80201b0:	6823      	ldr	r3, [r4, #0]
 80201b2:	1c5a      	adds	r2, r3, #1
 80201b4:	6022      	str	r2, [r4, #0]
 80201b6:	7019      	strb	r1, [r3, #0]
 80201b8:	3501      	adds	r5, #1
 80201ba:	e7eb      	b.n	8020194 <_fwrite_r+0x38>
 80201bc:	4621      	mov	r1, r4
 80201be:	4630      	mov	r0, r6
 80201c0:	f000 f926 	bl	8020410 <__swsetup_r>
 80201c4:	2800      	cmp	r0, #0
 80201c6:	d0e4      	beq.n	8020192 <_fwrite_r+0x36>
 80201c8:	2500      	movs	r5, #0
 80201ca:	e005      	b.n	80201d8 <_fwrite_r+0x7c>
 80201cc:	4622      	mov	r2, r4
 80201ce:	4630      	mov	r0, r6
 80201d0:	f000 f8e0 	bl	8020394 <__swbuf_r>
 80201d4:	3001      	adds	r0, #1
 80201d6:	d1ef      	bne.n	80201b8 <_fwrite_r+0x5c>
 80201d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80201da:	07da      	lsls	r2, r3, #31
 80201dc:	d405      	bmi.n	80201ea <_fwrite_r+0x8e>
 80201de:	89a3      	ldrh	r3, [r4, #12]
 80201e0:	059b      	lsls	r3, r3, #22
 80201e2:	d402      	bmi.n	80201ea <_fwrite_r+0x8e>
 80201e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80201e6:	f000 faa9 	bl	802073c <__retarget_lock_release_recursive>
 80201ea:	fbb5 f0f8 	udiv	r0, r5, r8
 80201ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080201f4 <fwrite>:
 80201f4:	b507      	push	{r0, r1, r2, lr}
 80201f6:	9300      	str	r3, [sp, #0]
 80201f8:	4613      	mov	r3, r2
 80201fa:	460a      	mov	r2, r1
 80201fc:	4601      	mov	r1, r0
 80201fe:	4803      	ldr	r0, [pc, #12]	@ (802020c <fwrite+0x18>)
 8020200:	6800      	ldr	r0, [r0, #0]
 8020202:	f7ff ffab 	bl	802015c <_fwrite_r>
 8020206:	b003      	add	sp, #12
 8020208:	f85d fb04 	ldr.w	pc, [sp], #4
 802020c:	20000bfc 	.word	0x20000bfc

08020210 <iprintf>:
 8020210:	b40f      	push	{r0, r1, r2, r3}
 8020212:	b507      	push	{r0, r1, r2, lr}
 8020214:	4906      	ldr	r1, [pc, #24]	@ (8020230 <iprintf+0x20>)
 8020216:	ab04      	add	r3, sp, #16
 8020218:	6808      	ldr	r0, [r1, #0]
 802021a:	f853 2b04 	ldr.w	r2, [r3], #4
 802021e:	6881      	ldr	r1, [r0, #8]
 8020220:	9301      	str	r3, [sp, #4]
 8020222:	f000 fca1 	bl	8020b68 <_vfiprintf_r>
 8020226:	b003      	add	sp, #12
 8020228:	f85d eb04 	ldr.w	lr, [sp], #4
 802022c:	b004      	add	sp, #16
 802022e:	4770      	bx	lr
 8020230:	20000bfc 	.word	0x20000bfc

08020234 <sniprintf>:
 8020234:	b40c      	push	{r2, r3}
 8020236:	b530      	push	{r4, r5, lr}
 8020238:	4b17      	ldr	r3, [pc, #92]	@ (8020298 <sniprintf+0x64>)
 802023a:	1e0c      	subs	r4, r1, #0
 802023c:	681d      	ldr	r5, [r3, #0]
 802023e:	b09d      	sub	sp, #116	@ 0x74
 8020240:	da08      	bge.n	8020254 <sniprintf+0x20>
 8020242:	238b      	movs	r3, #139	@ 0x8b
 8020244:	602b      	str	r3, [r5, #0]
 8020246:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802024a:	b01d      	add	sp, #116	@ 0x74
 802024c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020250:	b002      	add	sp, #8
 8020252:	4770      	bx	lr
 8020254:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8020258:	f8ad 3014 	strh.w	r3, [sp, #20]
 802025c:	bf14      	ite	ne
 802025e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8020262:	4623      	moveq	r3, r4
 8020264:	9304      	str	r3, [sp, #16]
 8020266:	9307      	str	r3, [sp, #28]
 8020268:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802026c:	9002      	str	r0, [sp, #8]
 802026e:	9006      	str	r0, [sp, #24]
 8020270:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020274:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8020276:	ab21      	add	r3, sp, #132	@ 0x84
 8020278:	a902      	add	r1, sp, #8
 802027a:	4628      	mov	r0, r5
 802027c:	9301      	str	r3, [sp, #4]
 802027e:	f000 fb4d 	bl	802091c <_svfiprintf_r>
 8020282:	1c43      	adds	r3, r0, #1
 8020284:	bfbc      	itt	lt
 8020286:	238b      	movlt	r3, #139	@ 0x8b
 8020288:	602b      	strlt	r3, [r5, #0]
 802028a:	2c00      	cmp	r4, #0
 802028c:	d0dd      	beq.n	802024a <sniprintf+0x16>
 802028e:	9b02      	ldr	r3, [sp, #8]
 8020290:	2200      	movs	r2, #0
 8020292:	701a      	strb	r2, [r3, #0]
 8020294:	e7d9      	b.n	802024a <sniprintf+0x16>
 8020296:	bf00      	nop
 8020298:	20000bfc 	.word	0x20000bfc

0802029c <__sread>:
 802029c:	b510      	push	{r4, lr}
 802029e:	460c      	mov	r4, r1
 80202a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80202a4:	f000 f9ea 	bl	802067c <_read_r>
 80202a8:	2800      	cmp	r0, #0
 80202aa:	bfab      	itete	ge
 80202ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80202ae:	89a3      	ldrhlt	r3, [r4, #12]
 80202b0:	181b      	addge	r3, r3, r0
 80202b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80202b6:	bfac      	ite	ge
 80202b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80202ba:	81a3      	strhlt	r3, [r4, #12]
 80202bc:	bd10      	pop	{r4, pc}

080202be <__swrite>:
 80202be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80202c2:	461f      	mov	r7, r3
 80202c4:	898b      	ldrh	r3, [r1, #12]
 80202c6:	05db      	lsls	r3, r3, #23
 80202c8:	4605      	mov	r5, r0
 80202ca:	460c      	mov	r4, r1
 80202cc:	4616      	mov	r6, r2
 80202ce:	d505      	bpl.n	80202dc <__swrite+0x1e>
 80202d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80202d4:	2302      	movs	r3, #2
 80202d6:	2200      	movs	r2, #0
 80202d8:	f000 f9be 	bl	8020658 <_lseek_r>
 80202dc:	89a3      	ldrh	r3, [r4, #12]
 80202de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80202e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80202e6:	81a3      	strh	r3, [r4, #12]
 80202e8:	4632      	mov	r2, r6
 80202ea:	463b      	mov	r3, r7
 80202ec:	4628      	mov	r0, r5
 80202ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80202f2:	f000 b9e5 	b.w	80206c0 <_write_r>

080202f6 <__sseek>:
 80202f6:	b510      	push	{r4, lr}
 80202f8:	460c      	mov	r4, r1
 80202fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80202fe:	f000 f9ab 	bl	8020658 <_lseek_r>
 8020302:	1c43      	adds	r3, r0, #1
 8020304:	89a3      	ldrh	r3, [r4, #12]
 8020306:	bf15      	itete	ne
 8020308:	6560      	strne	r0, [r4, #84]	@ 0x54
 802030a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 802030e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8020312:	81a3      	strheq	r3, [r4, #12]
 8020314:	bf18      	it	ne
 8020316:	81a3      	strhne	r3, [r4, #12]
 8020318:	bd10      	pop	{r4, pc}

0802031a <__sclose>:
 802031a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802031e:	f000 b935 	b.w	802058c <_close_r>

08020322 <_vsniprintf_r>:
 8020322:	b530      	push	{r4, r5, lr}
 8020324:	4614      	mov	r4, r2
 8020326:	2c00      	cmp	r4, #0
 8020328:	b09b      	sub	sp, #108	@ 0x6c
 802032a:	4605      	mov	r5, r0
 802032c:	461a      	mov	r2, r3
 802032e:	da05      	bge.n	802033c <_vsniprintf_r+0x1a>
 8020330:	238b      	movs	r3, #139	@ 0x8b
 8020332:	6003      	str	r3, [r0, #0]
 8020334:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020338:	b01b      	add	sp, #108	@ 0x6c
 802033a:	bd30      	pop	{r4, r5, pc}
 802033c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8020340:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020344:	bf14      	ite	ne
 8020346:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 802034a:	4623      	moveq	r3, r4
 802034c:	9302      	str	r3, [sp, #8]
 802034e:	9305      	str	r3, [sp, #20]
 8020350:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8020354:	9100      	str	r1, [sp, #0]
 8020356:	9104      	str	r1, [sp, #16]
 8020358:	f8ad 300e 	strh.w	r3, [sp, #14]
 802035c:	4669      	mov	r1, sp
 802035e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8020360:	f000 fadc 	bl	802091c <_svfiprintf_r>
 8020364:	1c43      	adds	r3, r0, #1
 8020366:	bfbc      	itt	lt
 8020368:	238b      	movlt	r3, #139	@ 0x8b
 802036a:	602b      	strlt	r3, [r5, #0]
 802036c:	2c00      	cmp	r4, #0
 802036e:	d0e3      	beq.n	8020338 <_vsniprintf_r+0x16>
 8020370:	9b00      	ldr	r3, [sp, #0]
 8020372:	2200      	movs	r2, #0
 8020374:	701a      	strb	r2, [r3, #0]
 8020376:	e7df      	b.n	8020338 <_vsniprintf_r+0x16>

08020378 <vsniprintf>:
 8020378:	b507      	push	{r0, r1, r2, lr}
 802037a:	9300      	str	r3, [sp, #0]
 802037c:	4613      	mov	r3, r2
 802037e:	460a      	mov	r2, r1
 8020380:	4601      	mov	r1, r0
 8020382:	4803      	ldr	r0, [pc, #12]	@ (8020390 <vsniprintf+0x18>)
 8020384:	6800      	ldr	r0, [r0, #0]
 8020386:	f7ff ffcc 	bl	8020322 <_vsniprintf_r>
 802038a:	b003      	add	sp, #12
 802038c:	f85d fb04 	ldr.w	pc, [sp], #4
 8020390:	20000bfc 	.word	0x20000bfc

08020394 <__swbuf_r>:
 8020394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020396:	460e      	mov	r6, r1
 8020398:	4614      	mov	r4, r2
 802039a:	4605      	mov	r5, r0
 802039c:	b118      	cbz	r0, 80203a6 <__swbuf_r+0x12>
 802039e:	6a03      	ldr	r3, [r0, #32]
 80203a0:	b90b      	cbnz	r3, 80203a6 <__swbuf_r+0x12>
 80203a2:	f7ff fea5 	bl	80200f0 <__sinit>
 80203a6:	69a3      	ldr	r3, [r4, #24]
 80203a8:	60a3      	str	r3, [r4, #8]
 80203aa:	89a3      	ldrh	r3, [r4, #12]
 80203ac:	071a      	lsls	r2, r3, #28
 80203ae:	d501      	bpl.n	80203b4 <__swbuf_r+0x20>
 80203b0:	6923      	ldr	r3, [r4, #16]
 80203b2:	b943      	cbnz	r3, 80203c6 <__swbuf_r+0x32>
 80203b4:	4621      	mov	r1, r4
 80203b6:	4628      	mov	r0, r5
 80203b8:	f000 f82a 	bl	8020410 <__swsetup_r>
 80203bc:	b118      	cbz	r0, 80203c6 <__swbuf_r+0x32>
 80203be:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80203c2:	4638      	mov	r0, r7
 80203c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80203c6:	6823      	ldr	r3, [r4, #0]
 80203c8:	6922      	ldr	r2, [r4, #16]
 80203ca:	1a98      	subs	r0, r3, r2
 80203cc:	6963      	ldr	r3, [r4, #20]
 80203ce:	b2f6      	uxtb	r6, r6
 80203d0:	4283      	cmp	r3, r0
 80203d2:	4637      	mov	r7, r6
 80203d4:	dc05      	bgt.n	80203e2 <__swbuf_r+0x4e>
 80203d6:	4621      	mov	r1, r4
 80203d8:	4628      	mov	r0, r5
 80203da:	f000 feef 	bl	80211bc <_fflush_r>
 80203de:	2800      	cmp	r0, #0
 80203e0:	d1ed      	bne.n	80203be <__swbuf_r+0x2a>
 80203e2:	68a3      	ldr	r3, [r4, #8]
 80203e4:	3b01      	subs	r3, #1
 80203e6:	60a3      	str	r3, [r4, #8]
 80203e8:	6823      	ldr	r3, [r4, #0]
 80203ea:	1c5a      	adds	r2, r3, #1
 80203ec:	6022      	str	r2, [r4, #0]
 80203ee:	701e      	strb	r6, [r3, #0]
 80203f0:	6962      	ldr	r2, [r4, #20]
 80203f2:	1c43      	adds	r3, r0, #1
 80203f4:	429a      	cmp	r2, r3
 80203f6:	d004      	beq.n	8020402 <__swbuf_r+0x6e>
 80203f8:	89a3      	ldrh	r3, [r4, #12]
 80203fa:	07db      	lsls	r3, r3, #31
 80203fc:	d5e1      	bpl.n	80203c2 <__swbuf_r+0x2e>
 80203fe:	2e0a      	cmp	r6, #10
 8020400:	d1df      	bne.n	80203c2 <__swbuf_r+0x2e>
 8020402:	4621      	mov	r1, r4
 8020404:	4628      	mov	r0, r5
 8020406:	f000 fed9 	bl	80211bc <_fflush_r>
 802040a:	2800      	cmp	r0, #0
 802040c:	d0d9      	beq.n	80203c2 <__swbuf_r+0x2e>
 802040e:	e7d6      	b.n	80203be <__swbuf_r+0x2a>

08020410 <__swsetup_r>:
 8020410:	b538      	push	{r3, r4, r5, lr}
 8020412:	4b29      	ldr	r3, [pc, #164]	@ (80204b8 <__swsetup_r+0xa8>)
 8020414:	4605      	mov	r5, r0
 8020416:	6818      	ldr	r0, [r3, #0]
 8020418:	460c      	mov	r4, r1
 802041a:	b118      	cbz	r0, 8020424 <__swsetup_r+0x14>
 802041c:	6a03      	ldr	r3, [r0, #32]
 802041e:	b90b      	cbnz	r3, 8020424 <__swsetup_r+0x14>
 8020420:	f7ff fe66 	bl	80200f0 <__sinit>
 8020424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020428:	0719      	lsls	r1, r3, #28
 802042a:	d422      	bmi.n	8020472 <__swsetup_r+0x62>
 802042c:	06da      	lsls	r2, r3, #27
 802042e:	d407      	bmi.n	8020440 <__swsetup_r+0x30>
 8020430:	2209      	movs	r2, #9
 8020432:	602a      	str	r2, [r5, #0]
 8020434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020438:	81a3      	strh	r3, [r4, #12]
 802043a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802043e:	e033      	b.n	80204a8 <__swsetup_r+0x98>
 8020440:	0758      	lsls	r0, r3, #29
 8020442:	d512      	bpl.n	802046a <__swsetup_r+0x5a>
 8020444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020446:	b141      	cbz	r1, 802045a <__swsetup_r+0x4a>
 8020448:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802044c:	4299      	cmp	r1, r3
 802044e:	d002      	beq.n	8020456 <__swsetup_r+0x46>
 8020450:	4628      	mov	r0, r5
 8020452:	f000 f9b5 	bl	80207c0 <_free_r>
 8020456:	2300      	movs	r3, #0
 8020458:	6363      	str	r3, [r4, #52]	@ 0x34
 802045a:	89a3      	ldrh	r3, [r4, #12]
 802045c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8020460:	81a3      	strh	r3, [r4, #12]
 8020462:	2300      	movs	r3, #0
 8020464:	6063      	str	r3, [r4, #4]
 8020466:	6923      	ldr	r3, [r4, #16]
 8020468:	6023      	str	r3, [r4, #0]
 802046a:	89a3      	ldrh	r3, [r4, #12]
 802046c:	f043 0308 	orr.w	r3, r3, #8
 8020470:	81a3      	strh	r3, [r4, #12]
 8020472:	6923      	ldr	r3, [r4, #16]
 8020474:	b94b      	cbnz	r3, 802048a <__swsetup_r+0x7a>
 8020476:	89a3      	ldrh	r3, [r4, #12]
 8020478:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 802047c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020480:	d003      	beq.n	802048a <__swsetup_r+0x7a>
 8020482:	4621      	mov	r1, r4
 8020484:	4628      	mov	r0, r5
 8020486:	f000 fef9 	bl	802127c <__smakebuf_r>
 802048a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802048e:	f013 0201 	ands.w	r2, r3, #1
 8020492:	d00a      	beq.n	80204aa <__swsetup_r+0x9a>
 8020494:	2200      	movs	r2, #0
 8020496:	60a2      	str	r2, [r4, #8]
 8020498:	6962      	ldr	r2, [r4, #20]
 802049a:	4252      	negs	r2, r2
 802049c:	61a2      	str	r2, [r4, #24]
 802049e:	6922      	ldr	r2, [r4, #16]
 80204a0:	b942      	cbnz	r2, 80204b4 <__swsetup_r+0xa4>
 80204a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80204a6:	d1c5      	bne.n	8020434 <__swsetup_r+0x24>
 80204a8:	bd38      	pop	{r3, r4, r5, pc}
 80204aa:	0799      	lsls	r1, r3, #30
 80204ac:	bf58      	it	pl
 80204ae:	6962      	ldrpl	r2, [r4, #20]
 80204b0:	60a2      	str	r2, [r4, #8]
 80204b2:	e7f4      	b.n	802049e <__swsetup_r+0x8e>
 80204b4:	2000      	movs	r0, #0
 80204b6:	e7f7      	b.n	80204a8 <__swsetup_r+0x98>
 80204b8:	20000bfc 	.word	0x20000bfc

080204bc <memcmp>:
 80204bc:	b510      	push	{r4, lr}
 80204be:	3901      	subs	r1, #1
 80204c0:	4402      	add	r2, r0
 80204c2:	4290      	cmp	r0, r2
 80204c4:	d101      	bne.n	80204ca <memcmp+0xe>
 80204c6:	2000      	movs	r0, #0
 80204c8:	e005      	b.n	80204d6 <memcmp+0x1a>
 80204ca:	7803      	ldrb	r3, [r0, #0]
 80204cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80204d0:	42a3      	cmp	r3, r4
 80204d2:	d001      	beq.n	80204d8 <memcmp+0x1c>
 80204d4:	1b18      	subs	r0, r3, r4
 80204d6:	bd10      	pop	{r4, pc}
 80204d8:	3001      	adds	r0, #1
 80204da:	e7f2      	b.n	80204c2 <memcmp+0x6>

080204dc <memmove>:
 80204dc:	4288      	cmp	r0, r1
 80204de:	b510      	push	{r4, lr}
 80204e0:	eb01 0402 	add.w	r4, r1, r2
 80204e4:	d902      	bls.n	80204ec <memmove+0x10>
 80204e6:	4284      	cmp	r4, r0
 80204e8:	4623      	mov	r3, r4
 80204ea:	d807      	bhi.n	80204fc <memmove+0x20>
 80204ec:	1e43      	subs	r3, r0, #1
 80204ee:	42a1      	cmp	r1, r4
 80204f0:	d008      	beq.n	8020504 <memmove+0x28>
 80204f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80204f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80204fa:	e7f8      	b.n	80204ee <memmove+0x12>
 80204fc:	4402      	add	r2, r0
 80204fe:	4601      	mov	r1, r0
 8020500:	428a      	cmp	r2, r1
 8020502:	d100      	bne.n	8020506 <memmove+0x2a>
 8020504:	bd10      	pop	{r4, pc}
 8020506:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802050a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802050e:	e7f7      	b.n	8020500 <memmove+0x24>

08020510 <memset>:
 8020510:	4402      	add	r2, r0
 8020512:	4603      	mov	r3, r0
 8020514:	4293      	cmp	r3, r2
 8020516:	d100      	bne.n	802051a <memset+0xa>
 8020518:	4770      	bx	lr
 802051a:	f803 1b01 	strb.w	r1, [r3], #1
 802051e:	e7f9      	b.n	8020514 <memset+0x4>

08020520 <strchr>:
 8020520:	b2c9      	uxtb	r1, r1
 8020522:	4603      	mov	r3, r0
 8020524:	4618      	mov	r0, r3
 8020526:	f813 2b01 	ldrb.w	r2, [r3], #1
 802052a:	b112      	cbz	r2, 8020532 <strchr+0x12>
 802052c:	428a      	cmp	r2, r1
 802052e:	d1f9      	bne.n	8020524 <strchr+0x4>
 8020530:	4770      	bx	lr
 8020532:	2900      	cmp	r1, #0
 8020534:	bf18      	it	ne
 8020536:	2000      	movne	r0, #0
 8020538:	4770      	bx	lr

0802053a <strncmp>:
 802053a:	b510      	push	{r4, lr}
 802053c:	b16a      	cbz	r2, 802055a <strncmp+0x20>
 802053e:	3901      	subs	r1, #1
 8020540:	1884      	adds	r4, r0, r2
 8020542:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020546:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802054a:	429a      	cmp	r2, r3
 802054c:	d103      	bne.n	8020556 <strncmp+0x1c>
 802054e:	42a0      	cmp	r0, r4
 8020550:	d001      	beq.n	8020556 <strncmp+0x1c>
 8020552:	2a00      	cmp	r2, #0
 8020554:	d1f5      	bne.n	8020542 <strncmp+0x8>
 8020556:	1ad0      	subs	r0, r2, r3
 8020558:	bd10      	pop	{r4, pc}
 802055a:	4610      	mov	r0, r2
 802055c:	e7fc      	b.n	8020558 <strncmp+0x1e>

0802055e <strstr>:
 802055e:	780a      	ldrb	r2, [r1, #0]
 8020560:	b570      	push	{r4, r5, r6, lr}
 8020562:	b96a      	cbnz	r2, 8020580 <strstr+0x22>
 8020564:	bd70      	pop	{r4, r5, r6, pc}
 8020566:	429a      	cmp	r2, r3
 8020568:	d109      	bne.n	802057e <strstr+0x20>
 802056a:	460c      	mov	r4, r1
 802056c:	4605      	mov	r5, r0
 802056e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8020572:	2b00      	cmp	r3, #0
 8020574:	d0f6      	beq.n	8020564 <strstr+0x6>
 8020576:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802057a:	429e      	cmp	r6, r3
 802057c:	d0f7      	beq.n	802056e <strstr+0x10>
 802057e:	3001      	adds	r0, #1
 8020580:	7803      	ldrb	r3, [r0, #0]
 8020582:	2b00      	cmp	r3, #0
 8020584:	d1ef      	bne.n	8020566 <strstr+0x8>
 8020586:	4618      	mov	r0, r3
 8020588:	e7ec      	b.n	8020564 <strstr+0x6>
	...

0802058c <_close_r>:
 802058c:	b538      	push	{r3, r4, r5, lr}
 802058e:	4d06      	ldr	r5, [pc, #24]	@ (80205a8 <_close_r+0x1c>)
 8020590:	2300      	movs	r3, #0
 8020592:	4604      	mov	r4, r0
 8020594:	4608      	mov	r0, r1
 8020596:	602b      	str	r3, [r5, #0]
 8020598:	f7e2 fcc4 	bl	8002f24 <_close>
 802059c:	1c43      	adds	r3, r0, #1
 802059e:	d102      	bne.n	80205a6 <_close_r+0x1a>
 80205a0:	682b      	ldr	r3, [r5, #0]
 80205a2:	b103      	cbz	r3, 80205a6 <_close_r+0x1a>
 80205a4:	6023      	str	r3, [r4, #0]
 80205a6:	bd38      	pop	{r3, r4, r5, pc}
 80205a8:	2001670c 	.word	0x2001670c

080205ac <_reclaim_reent>:
 80205ac:	4b29      	ldr	r3, [pc, #164]	@ (8020654 <_reclaim_reent+0xa8>)
 80205ae:	681b      	ldr	r3, [r3, #0]
 80205b0:	4283      	cmp	r3, r0
 80205b2:	b570      	push	{r4, r5, r6, lr}
 80205b4:	4604      	mov	r4, r0
 80205b6:	d04b      	beq.n	8020650 <_reclaim_reent+0xa4>
 80205b8:	69c3      	ldr	r3, [r0, #28]
 80205ba:	b1ab      	cbz	r3, 80205e8 <_reclaim_reent+0x3c>
 80205bc:	68db      	ldr	r3, [r3, #12]
 80205be:	b16b      	cbz	r3, 80205dc <_reclaim_reent+0x30>
 80205c0:	2500      	movs	r5, #0
 80205c2:	69e3      	ldr	r3, [r4, #28]
 80205c4:	68db      	ldr	r3, [r3, #12]
 80205c6:	5959      	ldr	r1, [r3, r5]
 80205c8:	2900      	cmp	r1, #0
 80205ca:	d13b      	bne.n	8020644 <_reclaim_reent+0x98>
 80205cc:	3504      	adds	r5, #4
 80205ce:	2d80      	cmp	r5, #128	@ 0x80
 80205d0:	d1f7      	bne.n	80205c2 <_reclaim_reent+0x16>
 80205d2:	69e3      	ldr	r3, [r4, #28]
 80205d4:	4620      	mov	r0, r4
 80205d6:	68d9      	ldr	r1, [r3, #12]
 80205d8:	f000 f8f2 	bl	80207c0 <_free_r>
 80205dc:	69e3      	ldr	r3, [r4, #28]
 80205de:	6819      	ldr	r1, [r3, #0]
 80205e0:	b111      	cbz	r1, 80205e8 <_reclaim_reent+0x3c>
 80205e2:	4620      	mov	r0, r4
 80205e4:	f000 f8ec 	bl	80207c0 <_free_r>
 80205e8:	6961      	ldr	r1, [r4, #20]
 80205ea:	b111      	cbz	r1, 80205f2 <_reclaim_reent+0x46>
 80205ec:	4620      	mov	r0, r4
 80205ee:	f000 f8e7 	bl	80207c0 <_free_r>
 80205f2:	69e1      	ldr	r1, [r4, #28]
 80205f4:	b111      	cbz	r1, 80205fc <_reclaim_reent+0x50>
 80205f6:	4620      	mov	r0, r4
 80205f8:	f000 f8e2 	bl	80207c0 <_free_r>
 80205fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80205fe:	b111      	cbz	r1, 8020606 <_reclaim_reent+0x5a>
 8020600:	4620      	mov	r0, r4
 8020602:	f000 f8dd 	bl	80207c0 <_free_r>
 8020606:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020608:	b111      	cbz	r1, 8020610 <_reclaim_reent+0x64>
 802060a:	4620      	mov	r0, r4
 802060c:	f000 f8d8 	bl	80207c0 <_free_r>
 8020610:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8020612:	b111      	cbz	r1, 802061a <_reclaim_reent+0x6e>
 8020614:	4620      	mov	r0, r4
 8020616:	f000 f8d3 	bl	80207c0 <_free_r>
 802061a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 802061c:	b111      	cbz	r1, 8020624 <_reclaim_reent+0x78>
 802061e:	4620      	mov	r0, r4
 8020620:	f000 f8ce 	bl	80207c0 <_free_r>
 8020624:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8020626:	b111      	cbz	r1, 802062e <_reclaim_reent+0x82>
 8020628:	4620      	mov	r0, r4
 802062a:	f000 f8c9 	bl	80207c0 <_free_r>
 802062e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8020630:	b111      	cbz	r1, 8020638 <_reclaim_reent+0x8c>
 8020632:	4620      	mov	r0, r4
 8020634:	f000 f8c4 	bl	80207c0 <_free_r>
 8020638:	6a23      	ldr	r3, [r4, #32]
 802063a:	b14b      	cbz	r3, 8020650 <_reclaim_reent+0xa4>
 802063c:	4620      	mov	r0, r4
 802063e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020642:	4718      	bx	r3
 8020644:	680e      	ldr	r6, [r1, #0]
 8020646:	4620      	mov	r0, r4
 8020648:	f000 f8ba 	bl	80207c0 <_free_r>
 802064c:	4631      	mov	r1, r6
 802064e:	e7bb      	b.n	80205c8 <_reclaim_reent+0x1c>
 8020650:	bd70      	pop	{r4, r5, r6, pc}
 8020652:	bf00      	nop
 8020654:	20000bfc 	.word	0x20000bfc

08020658 <_lseek_r>:
 8020658:	b538      	push	{r3, r4, r5, lr}
 802065a:	4d07      	ldr	r5, [pc, #28]	@ (8020678 <_lseek_r+0x20>)
 802065c:	4604      	mov	r4, r0
 802065e:	4608      	mov	r0, r1
 8020660:	4611      	mov	r1, r2
 8020662:	2200      	movs	r2, #0
 8020664:	602a      	str	r2, [r5, #0]
 8020666:	461a      	mov	r2, r3
 8020668:	f7e2 fc83 	bl	8002f72 <_lseek>
 802066c:	1c43      	adds	r3, r0, #1
 802066e:	d102      	bne.n	8020676 <_lseek_r+0x1e>
 8020670:	682b      	ldr	r3, [r5, #0]
 8020672:	b103      	cbz	r3, 8020676 <_lseek_r+0x1e>
 8020674:	6023      	str	r3, [r4, #0]
 8020676:	bd38      	pop	{r3, r4, r5, pc}
 8020678:	2001670c 	.word	0x2001670c

0802067c <_read_r>:
 802067c:	b538      	push	{r3, r4, r5, lr}
 802067e:	4d07      	ldr	r5, [pc, #28]	@ (802069c <_read_r+0x20>)
 8020680:	4604      	mov	r4, r0
 8020682:	4608      	mov	r0, r1
 8020684:	4611      	mov	r1, r2
 8020686:	2200      	movs	r2, #0
 8020688:	602a      	str	r2, [r5, #0]
 802068a:	461a      	mov	r2, r3
 802068c:	f7e2 fbdb 	bl	8002e46 <_read>
 8020690:	1c43      	adds	r3, r0, #1
 8020692:	d102      	bne.n	802069a <_read_r+0x1e>
 8020694:	682b      	ldr	r3, [r5, #0]
 8020696:	b103      	cbz	r3, 802069a <_read_r+0x1e>
 8020698:	6023      	str	r3, [r4, #0]
 802069a:	bd38      	pop	{r3, r4, r5, pc}
 802069c:	2001670c 	.word	0x2001670c

080206a0 <_sbrk_r>:
 80206a0:	b538      	push	{r3, r4, r5, lr}
 80206a2:	4d06      	ldr	r5, [pc, #24]	@ (80206bc <_sbrk_r+0x1c>)
 80206a4:	2300      	movs	r3, #0
 80206a6:	4604      	mov	r4, r0
 80206a8:	4608      	mov	r0, r1
 80206aa:	602b      	str	r3, [r5, #0]
 80206ac:	f7e2 fc04 	bl	8002eb8 <_sbrk>
 80206b0:	1c43      	adds	r3, r0, #1
 80206b2:	d102      	bne.n	80206ba <_sbrk_r+0x1a>
 80206b4:	682b      	ldr	r3, [r5, #0]
 80206b6:	b103      	cbz	r3, 80206ba <_sbrk_r+0x1a>
 80206b8:	6023      	str	r3, [r4, #0]
 80206ba:	bd38      	pop	{r3, r4, r5, pc}
 80206bc:	2001670c 	.word	0x2001670c

080206c0 <_write_r>:
 80206c0:	b538      	push	{r3, r4, r5, lr}
 80206c2:	4d07      	ldr	r5, [pc, #28]	@ (80206e0 <_write_r+0x20>)
 80206c4:	4604      	mov	r4, r0
 80206c6:	4608      	mov	r0, r1
 80206c8:	4611      	mov	r1, r2
 80206ca:	2200      	movs	r2, #0
 80206cc:	602a      	str	r2, [r5, #0]
 80206ce:	461a      	mov	r2, r3
 80206d0:	f7e2 fbd6 	bl	8002e80 <_write>
 80206d4:	1c43      	adds	r3, r0, #1
 80206d6:	d102      	bne.n	80206de <_write_r+0x1e>
 80206d8:	682b      	ldr	r3, [r5, #0]
 80206da:	b103      	cbz	r3, 80206de <_write_r+0x1e>
 80206dc:	6023      	str	r3, [r4, #0]
 80206de:	bd38      	pop	{r3, r4, r5, pc}
 80206e0:	2001670c 	.word	0x2001670c

080206e4 <__errno>:
 80206e4:	4b01      	ldr	r3, [pc, #4]	@ (80206ec <__errno+0x8>)
 80206e6:	6818      	ldr	r0, [r3, #0]
 80206e8:	4770      	bx	lr
 80206ea:	bf00      	nop
 80206ec:	20000bfc 	.word	0x20000bfc

080206f0 <__libc_init_array>:
 80206f0:	b570      	push	{r4, r5, r6, lr}
 80206f2:	4d0d      	ldr	r5, [pc, #52]	@ (8020728 <__libc_init_array+0x38>)
 80206f4:	4c0d      	ldr	r4, [pc, #52]	@ (802072c <__libc_init_array+0x3c>)
 80206f6:	1b64      	subs	r4, r4, r5
 80206f8:	10a4      	asrs	r4, r4, #2
 80206fa:	2600      	movs	r6, #0
 80206fc:	42a6      	cmp	r6, r4
 80206fe:	d109      	bne.n	8020714 <__libc_init_array+0x24>
 8020700:	4d0b      	ldr	r5, [pc, #44]	@ (8020730 <__libc_init_array+0x40>)
 8020702:	4c0c      	ldr	r4, [pc, #48]	@ (8020734 <__libc_init_array+0x44>)
 8020704:	f000 fe64 	bl	80213d0 <_init>
 8020708:	1b64      	subs	r4, r4, r5
 802070a:	10a4      	asrs	r4, r4, #2
 802070c:	2600      	movs	r6, #0
 802070e:	42a6      	cmp	r6, r4
 8020710:	d105      	bne.n	802071e <__libc_init_array+0x2e>
 8020712:	bd70      	pop	{r4, r5, r6, pc}
 8020714:	f855 3b04 	ldr.w	r3, [r5], #4
 8020718:	4798      	blx	r3
 802071a:	3601      	adds	r6, #1
 802071c:	e7ee      	b.n	80206fc <__libc_init_array+0xc>
 802071e:	f855 3b04 	ldr.w	r3, [r5], #4
 8020722:	4798      	blx	r3
 8020724:	3601      	adds	r6, #1
 8020726:	e7f2      	b.n	802070e <__libc_init_array+0x1e>
 8020728:	08022c50 	.word	0x08022c50
 802072c:	08022c50 	.word	0x08022c50
 8020730:	08022c50 	.word	0x08022c50
 8020734:	08022c70 	.word	0x08022c70

08020738 <__retarget_lock_init_recursive>:
 8020738:	4770      	bx	lr

0802073a <__retarget_lock_acquire_recursive>:
 802073a:	4770      	bx	lr

0802073c <__retarget_lock_release_recursive>:
 802073c:	4770      	bx	lr

0802073e <strcpy>:
 802073e:	4603      	mov	r3, r0
 8020740:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020744:	f803 2b01 	strb.w	r2, [r3], #1
 8020748:	2a00      	cmp	r2, #0
 802074a:	d1f9      	bne.n	8020740 <strcpy+0x2>
 802074c:	4770      	bx	lr

0802074e <memcpy>:
 802074e:	440a      	add	r2, r1
 8020750:	4291      	cmp	r1, r2
 8020752:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8020756:	d100      	bne.n	802075a <memcpy+0xc>
 8020758:	4770      	bx	lr
 802075a:	b510      	push	{r4, lr}
 802075c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020760:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020764:	4291      	cmp	r1, r2
 8020766:	d1f9      	bne.n	802075c <memcpy+0xe>
 8020768:	bd10      	pop	{r4, pc}
	...

0802076c <__assert_func>:
 802076c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802076e:	4614      	mov	r4, r2
 8020770:	461a      	mov	r2, r3
 8020772:	4b09      	ldr	r3, [pc, #36]	@ (8020798 <__assert_func+0x2c>)
 8020774:	681b      	ldr	r3, [r3, #0]
 8020776:	4605      	mov	r5, r0
 8020778:	68d8      	ldr	r0, [r3, #12]
 802077a:	b954      	cbnz	r4, 8020792 <__assert_func+0x26>
 802077c:	4b07      	ldr	r3, [pc, #28]	@ (802079c <__assert_func+0x30>)
 802077e:	461c      	mov	r4, r3
 8020780:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020784:	9100      	str	r1, [sp, #0]
 8020786:	462b      	mov	r3, r5
 8020788:	4905      	ldr	r1, [pc, #20]	@ (80207a0 <__assert_func+0x34>)
 802078a:	f000 fd3f 	bl	802120c <fiprintf>
 802078e:	f000 fdd3 	bl	8021338 <abort>
 8020792:	4b04      	ldr	r3, [pc, #16]	@ (80207a4 <__assert_func+0x38>)
 8020794:	e7f4      	b.n	8020780 <__assert_func+0x14>
 8020796:	bf00      	nop
 8020798:	20000bfc 	.word	0x20000bfc
 802079c:	08022c11 	.word	0x08022c11
 80207a0:	08022be3 	.word	0x08022be3
 80207a4:	08022bd6 	.word	0x08022bd6

080207a8 <__env_lock>:
 80207a8:	4801      	ldr	r0, [pc, #4]	@ (80207b0 <__env_lock+0x8>)
 80207aa:	f7ff bfc6 	b.w	802073a <__retarget_lock_acquire_recursive>
 80207ae:	bf00      	nop
 80207b0:	20016710 	.word	0x20016710

080207b4 <__env_unlock>:
 80207b4:	4801      	ldr	r0, [pc, #4]	@ (80207bc <__env_unlock+0x8>)
 80207b6:	f7ff bfc1 	b.w	802073c <__retarget_lock_release_recursive>
 80207ba:	bf00      	nop
 80207bc:	20016710 	.word	0x20016710

080207c0 <_free_r>:
 80207c0:	b538      	push	{r3, r4, r5, lr}
 80207c2:	4605      	mov	r5, r0
 80207c4:	2900      	cmp	r1, #0
 80207c6:	d041      	beq.n	802084c <_free_r+0x8c>
 80207c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80207cc:	1f0c      	subs	r4, r1, #4
 80207ce:	2b00      	cmp	r3, #0
 80207d0:	bfb8      	it	lt
 80207d2:	18e4      	addlt	r4, r4, r3
 80207d4:	f7ff fada 	bl	801fd8c <__malloc_lock>
 80207d8:	4a1d      	ldr	r2, [pc, #116]	@ (8020850 <_free_r+0x90>)
 80207da:	6813      	ldr	r3, [r2, #0]
 80207dc:	b933      	cbnz	r3, 80207ec <_free_r+0x2c>
 80207de:	6063      	str	r3, [r4, #4]
 80207e0:	6014      	str	r4, [r2, #0]
 80207e2:	4628      	mov	r0, r5
 80207e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80207e8:	f7ff bad6 	b.w	801fd98 <__malloc_unlock>
 80207ec:	42a3      	cmp	r3, r4
 80207ee:	d908      	bls.n	8020802 <_free_r+0x42>
 80207f0:	6820      	ldr	r0, [r4, #0]
 80207f2:	1821      	adds	r1, r4, r0
 80207f4:	428b      	cmp	r3, r1
 80207f6:	bf01      	itttt	eq
 80207f8:	6819      	ldreq	r1, [r3, #0]
 80207fa:	685b      	ldreq	r3, [r3, #4]
 80207fc:	1809      	addeq	r1, r1, r0
 80207fe:	6021      	streq	r1, [r4, #0]
 8020800:	e7ed      	b.n	80207de <_free_r+0x1e>
 8020802:	461a      	mov	r2, r3
 8020804:	685b      	ldr	r3, [r3, #4]
 8020806:	b10b      	cbz	r3, 802080c <_free_r+0x4c>
 8020808:	42a3      	cmp	r3, r4
 802080a:	d9fa      	bls.n	8020802 <_free_r+0x42>
 802080c:	6811      	ldr	r1, [r2, #0]
 802080e:	1850      	adds	r0, r2, r1
 8020810:	42a0      	cmp	r0, r4
 8020812:	d10b      	bne.n	802082c <_free_r+0x6c>
 8020814:	6820      	ldr	r0, [r4, #0]
 8020816:	4401      	add	r1, r0
 8020818:	1850      	adds	r0, r2, r1
 802081a:	4283      	cmp	r3, r0
 802081c:	6011      	str	r1, [r2, #0]
 802081e:	d1e0      	bne.n	80207e2 <_free_r+0x22>
 8020820:	6818      	ldr	r0, [r3, #0]
 8020822:	685b      	ldr	r3, [r3, #4]
 8020824:	6053      	str	r3, [r2, #4]
 8020826:	4408      	add	r0, r1
 8020828:	6010      	str	r0, [r2, #0]
 802082a:	e7da      	b.n	80207e2 <_free_r+0x22>
 802082c:	d902      	bls.n	8020834 <_free_r+0x74>
 802082e:	230c      	movs	r3, #12
 8020830:	602b      	str	r3, [r5, #0]
 8020832:	e7d6      	b.n	80207e2 <_free_r+0x22>
 8020834:	6820      	ldr	r0, [r4, #0]
 8020836:	1821      	adds	r1, r4, r0
 8020838:	428b      	cmp	r3, r1
 802083a:	bf04      	itt	eq
 802083c:	6819      	ldreq	r1, [r3, #0]
 802083e:	685b      	ldreq	r3, [r3, #4]
 8020840:	6063      	str	r3, [r4, #4]
 8020842:	bf04      	itt	eq
 8020844:	1809      	addeq	r1, r1, r0
 8020846:	6021      	streq	r1, [r4, #0]
 8020848:	6054      	str	r4, [r2, #4]
 802084a:	e7ca      	b.n	80207e2 <_free_r+0x22>
 802084c:	bd38      	pop	{r3, r4, r5, pc}
 802084e:	bf00      	nop
 8020850:	200165cc 	.word	0x200165cc

08020854 <_malloc_usable_size_r>:
 8020854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020858:	1f18      	subs	r0, r3, #4
 802085a:	2b00      	cmp	r3, #0
 802085c:	bfbc      	itt	lt
 802085e:	580b      	ldrlt	r3, [r1, r0]
 8020860:	18c0      	addlt	r0, r0, r3
 8020862:	4770      	bx	lr

08020864 <__ssputs_r>:
 8020864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020868:	688e      	ldr	r6, [r1, #8]
 802086a:	461f      	mov	r7, r3
 802086c:	42be      	cmp	r6, r7
 802086e:	680b      	ldr	r3, [r1, #0]
 8020870:	4682      	mov	sl, r0
 8020872:	460c      	mov	r4, r1
 8020874:	4690      	mov	r8, r2
 8020876:	d82d      	bhi.n	80208d4 <__ssputs_r+0x70>
 8020878:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802087c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8020880:	d026      	beq.n	80208d0 <__ssputs_r+0x6c>
 8020882:	6965      	ldr	r5, [r4, #20]
 8020884:	6909      	ldr	r1, [r1, #16]
 8020886:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802088a:	eba3 0901 	sub.w	r9, r3, r1
 802088e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020892:	1c7b      	adds	r3, r7, #1
 8020894:	444b      	add	r3, r9
 8020896:	106d      	asrs	r5, r5, #1
 8020898:	429d      	cmp	r5, r3
 802089a:	bf38      	it	cc
 802089c:	461d      	movcc	r5, r3
 802089e:	0553      	lsls	r3, r2, #21
 80208a0:	d527      	bpl.n	80208f2 <__ssputs_r+0x8e>
 80208a2:	4629      	mov	r1, r5
 80208a4:	f7ff f9f2 	bl	801fc8c <_malloc_r>
 80208a8:	4606      	mov	r6, r0
 80208aa:	b360      	cbz	r0, 8020906 <__ssputs_r+0xa2>
 80208ac:	6921      	ldr	r1, [r4, #16]
 80208ae:	464a      	mov	r2, r9
 80208b0:	f7ff ff4d 	bl	802074e <memcpy>
 80208b4:	89a3      	ldrh	r3, [r4, #12]
 80208b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80208ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80208be:	81a3      	strh	r3, [r4, #12]
 80208c0:	6126      	str	r6, [r4, #16]
 80208c2:	6165      	str	r5, [r4, #20]
 80208c4:	444e      	add	r6, r9
 80208c6:	eba5 0509 	sub.w	r5, r5, r9
 80208ca:	6026      	str	r6, [r4, #0]
 80208cc:	60a5      	str	r5, [r4, #8]
 80208ce:	463e      	mov	r6, r7
 80208d0:	42be      	cmp	r6, r7
 80208d2:	d900      	bls.n	80208d6 <__ssputs_r+0x72>
 80208d4:	463e      	mov	r6, r7
 80208d6:	6820      	ldr	r0, [r4, #0]
 80208d8:	4632      	mov	r2, r6
 80208da:	4641      	mov	r1, r8
 80208dc:	f7ff fdfe 	bl	80204dc <memmove>
 80208e0:	68a3      	ldr	r3, [r4, #8]
 80208e2:	1b9b      	subs	r3, r3, r6
 80208e4:	60a3      	str	r3, [r4, #8]
 80208e6:	6823      	ldr	r3, [r4, #0]
 80208e8:	4433      	add	r3, r6
 80208ea:	6023      	str	r3, [r4, #0]
 80208ec:	2000      	movs	r0, #0
 80208ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80208f2:	462a      	mov	r2, r5
 80208f4:	f7ff faca 	bl	801fe8c <_realloc_r>
 80208f8:	4606      	mov	r6, r0
 80208fa:	2800      	cmp	r0, #0
 80208fc:	d1e0      	bne.n	80208c0 <__ssputs_r+0x5c>
 80208fe:	6921      	ldr	r1, [r4, #16]
 8020900:	4650      	mov	r0, sl
 8020902:	f7ff ff5d 	bl	80207c0 <_free_r>
 8020906:	230c      	movs	r3, #12
 8020908:	f8ca 3000 	str.w	r3, [sl]
 802090c:	89a3      	ldrh	r3, [r4, #12]
 802090e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020912:	81a3      	strh	r3, [r4, #12]
 8020914:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020918:	e7e9      	b.n	80208ee <__ssputs_r+0x8a>
	...

0802091c <_svfiprintf_r>:
 802091c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020920:	4698      	mov	r8, r3
 8020922:	898b      	ldrh	r3, [r1, #12]
 8020924:	061b      	lsls	r3, r3, #24
 8020926:	b09d      	sub	sp, #116	@ 0x74
 8020928:	4607      	mov	r7, r0
 802092a:	460d      	mov	r5, r1
 802092c:	4614      	mov	r4, r2
 802092e:	d510      	bpl.n	8020952 <_svfiprintf_r+0x36>
 8020930:	690b      	ldr	r3, [r1, #16]
 8020932:	b973      	cbnz	r3, 8020952 <_svfiprintf_r+0x36>
 8020934:	2140      	movs	r1, #64	@ 0x40
 8020936:	f7ff f9a9 	bl	801fc8c <_malloc_r>
 802093a:	6028      	str	r0, [r5, #0]
 802093c:	6128      	str	r0, [r5, #16]
 802093e:	b930      	cbnz	r0, 802094e <_svfiprintf_r+0x32>
 8020940:	230c      	movs	r3, #12
 8020942:	603b      	str	r3, [r7, #0]
 8020944:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020948:	b01d      	add	sp, #116	@ 0x74
 802094a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802094e:	2340      	movs	r3, #64	@ 0x40
 8020950:	616b      	str	r3, [r5, #20]
 8020952:	2300      	movs	r3, #0
 8020954:	9309      	str	r3, [sp, #36]	@ 0x24
 8020956:	2320      	movs	r3, #32
 8020958:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802095c:	f8cd 800c 	str.w	r8, [sp, #12]
 8020960:	2330      	movs	r3, #48	@ 0x30
 8020962:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8020b00 <_svfiprintf_r+0x1e4>
 8020966:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802096a:	f04f 0901 	mov.w	r9, #1
 802096e:	4623      	mov	r3, r4
 8020970:	469a      	mov	sl, r3
 8020972:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020976:	b10a      	cbz	r2, 802097c <_svfiprintf_r+0x60>
 8020978:	2a25      	cmp	r2, #37	@ 0x25
 802097a:	d1f9      	bne.n	8020970 <_svfiprintf_r+0x54>
 802097c:	ebba 0b04 	subs.w	fp, sl, r4
 8020980:	d00b      	beq.n	802099a <_svfiprintf_r+0x7e>
 8020982:	465b      	mov	r3, fp
 8020984:	4622      	mov	r2, r4
 8020986:	4629      	mov	r1, r5
 8020988:	4638      	mov	r0, r7
 802098a:	f7ff ff6b 	bl	8020864 <__ssputs_r>
 802098e:	3001      	adds	r0, #1
 8020990:	f000 80a7 	beq.w	8020ae2 <_svfiprintf_r+0x1c6>
 8020994:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020996:	445a      	add	r2, fp
 8020998:	9209      	str	r2, [sp, #36]	@ 0x24
 802099a:	f89a 3000 	ldrb.w	r3, [sl]
 802099e:	2b00      	cmp	r3, #0
 80209a0:	f000 809f 	beq.w	8020ae2 <_svfiprintf_r+0x1c6>
 80209a4:	2300      	movs	r3, #0
 80209a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80209aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80209ae:	f10a 0a01 	add.w	sl, sl, #1
 80209b2:	9304      	str	r3, [sp, #16]
 80209b4:	9307      	str	r3, [sp, #28]
 80209b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80209ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80209bc:	4654      	mov	r4, sl
 80209be:	2205      	movs	r2, #5
 80209c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80209c4:	484e      	ldr	r0, [pc, #312]	@ (8020b00 <_svfiprintf_r+0x1e4>)
 80209c6:	f7df fc1b 	bl	8000200 <memchr>
 80209ca:	9a04      	ldr	r2, [sp, #16]
 80209cc:	b9d8      	cbnz	r0, 8020a06 <_svfiprintf_r+0xea>
 80209ce:	06d0      	lsls	r0, r2, #27
 80209d0:	bf44      	itt	mi
 80209d2:	2320      	movmi	r3, #32
 80209d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80209d8:	0711      	lsls	r1, r2, #28
 80209da:	bf44      	itt	mi
 80209dc:	232b      	movmi	r3, #43	@ 0x2b
 80209de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80209e2:	f89a 3000 	ldrb.w	r3, [sl]
 80209e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80209e8:	d015      	beq.n	8020a16 <_svfiprintf_r+0xfa>
 80209ea:	9a07      	ldr	r2, [sp, #28]
 80209ec:	4654      	mov	r4, sl
 80209ee:	2000      	movs	r0, #0
 80209f0:	f04f 0c0a 	mov.w	ip, #10
 80209f4:	4621      	mov	r1, r4
 80209f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80209fa:	3b30      	subs	r3, #48	@ 0x30
 80209fc:	2b09      	cmp	r3, #9
 80209fe:	d94b      	bls.n	8020a98 <_svfiprintf_r+0x17c>
 8020a00:	b1b0      	cbz	r0, 8020a30 <_svfiprintf_r+0x114>
 8020a02:	9207      	str	r2, [sp, #28]
 8020a04:	e014      	b.n	8020a30 <_svfiprintf_r+0x114>
 8020a06:	eba0 0308 	sub.w	r3, r0, r8
 8020a0a:	fa09 f303 	lsl.w	r3, r9, r3
 8020a0e:	4313      	orrs	r3, r2
 8020a10:	9304      	str	r3, [sp, #16]
 8020a12:	46a2      	mov	sl, r4
 8020a14:	e7d2      	b.n	80209bc <_svfiprintf_r+0xa0>
 8020a16:	9b03      	ldr	r3, [sp, #12]
 8020a18:	1d19      	adds	r1, r3, #4
 8020a1a:	681b      	ldr	r3, [r3, #0]
 8020a1c:	9103      	str	r1, [sp, #12]
 8020a1e:	2b00      	cmp	r3, #0
 8020a20:	bfbb      	ittet	lt
 8020a22:	425b      	neglt	r3, r3
 8020a24:	f042 0202 	orrlt.w	r2, r2, #2
 8020a28:	9307      	strge	r3, [sp, #28]
 8020a2a:	9307      	strlt	r3, [sp, #28]
 8020a2c:	bfb8      	it	lt
 8020a2e:	9204      	strlt	r2, [sp, #16]
 8020a30:	7823      	ldrb	r3, [r4, #0]
 8020a32:	2b2e      	cmp	r3, #46	@ 0x2e
 8020a34:	d10a      	bne.n	8020a4c <_svfiprintf_r+0x130>
 8020a36:	7863      	ldrb	r3, [r4, #1]
 8020a38:	2b2a      	cmp	r3, #42	@ 0x2a
 8020a3a:	d132      	bne.n	8020aa2 <_svfiprintf_r+0x186>
 8020a3c:	9b03      	ldr	r3, [sp, #12]
 8020a3e:	1d1a      	adds	r2, r3, #4
 8020a40:	681b      	ldr	r3, [r3, #0]
 8020a42:	9203      	str	r2, [sp, #12]
 8020a44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020a48:	3402      	adds	r4, #2
 8020a4a:	9305      	str	r3, [sp, #20]
 8020a4c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8020b10 <_svfiprintf_r+0x1f4>
 8020a50:	7821      	ldrb	r1, [r4, #0]
 8020a52:	2203      	movs	r2, #3
 8020a54:	4650      	mov	r0, sl
 8020a56:	f7df fbd3 	bl	8000200 <memchr>
 8020a5a:	b138      	cbz	r0, 8020a6c <_svfiprintf_r+0x150>
 8020a5c:	9b04      	ldr	r3, [sp, #16]
 8020a5e:	eba0 000a 	sub.w	r0, r0, sl
 8020a62:	2240      	movs	r2, #64	@ 0x40
 8020a64:	4082      	lsls	r2, r0
 8020a66:	4313      	orrs	r3, r2
 8020a68:	3401      	adds	r4, #1
 8020a6a:	9304      	str	r3, [sp, #16]
 8020a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020a70:	4824      	ldr	r0, [pc, #144]	@ (8020b04 <_svfiprintf_r+0x1e8>)
 8020a72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020a76:	2206      	movs	r2, #6
 8020a78:	f7df fbc2 	bl	8000200 <memchr>
 8020a7c:	2800      	cmp	r0, #0
 8020a7e:	d036      	beq.n	8020aee <_svfiprintf_r+0x1d2>
 8020a80:	4b21      	ldr	r3, [pc, #132]	@ (8020b08 <_svfiprintf_r+0x1ec>)
 8020a82:	bb1b      	cbnz	r3, 8020acc <_svfiprintf_r+0x1b0>
 8020a84:	9b03      	ldr	r3, [sp, #12]
 8020a86:	3307      	adds	r3, #7
 8020a88:	f023 0307 	bic.w	r3, r3, #7
 8020a8c:	3308      	adds	r3, #8
 8020a8e:	9303      	str	r3, [sp, #12]
 8020a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020a92:	4433      	add	r3, r6
 8020a94:	9309      	str	r3, [sp, #36]	@ 0x24
 8020a96:	e76a      	b.n	802096e <_svfiprintf_r+0x52>
 8020a98:	fb0c 3202 	mla	r2, ip, r2, r3
 8020a9c:	460c      	mov	r4, r1
 8020a9e:	2001      	movs	r0, #1
 8020aa0:	e7a8      	b.n	80209f4 <_svfiprintf_r+0xd8>
 8020aa2:	2300      	movs	r3, #0
 8020aa4:	3401      	adds	r4, #1
 8020aa6:	9305      	str	r3, [sp, #20]
 8020aa8:	4619      	mov	r1, r3
 8020aaa:	f04f 0c0a 	mov.w	ip, #10
 8020aae:	4620      	mov	r0, r4
 8020ab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020ab4:	3a30      	subs	r2, #48	@ 0x30
 8020ab6:	2a09      	cmp	r2, #9
 8020ab8:	d903      	bls.n	8020ac2 <_svfiprintf_r+0x1a6>
 8020aba:	2b00      	cmp	r3, #0
 8020abc:	d0c6      	beq.n	8020a4c <_svfiprintf_r+0x130>
 8020abe:	9105      	str	r1, [sp, #20]
 8020ac0:	e7c4      	b.n	8020a4c <_svfiprintf_r+0x130>
 8020ac2:	fb0c 2101 	mla	r1, ip, r1, r2
 8020ac6:	4604      	mov	r4, r0
 8020ac8:	2301      	movs	r3, #1
 8020aca:	e7f0      	b.n	8020aae <_svfiprintf_r+0x192>
 8020acc:	ab03      	add	r3, sp, #12
 8020ace:	9300      	str	r3, [sp, #0]
 8020ad0:	462a      	mov	r2, r5
 8020ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8020b0c <_svfiprintf_r+0x1f0>)
 8020ad4:	a904      	add	r1, sp, #16
 8020ad6:	4638      	mov	r0, r7
 8020ad8:	f3af 8000 	nop.w
 8020adc:	1c42      	adds	r2, r0, #1
 8020ade:	4606      	mov	r6, r0
 8020ae0:	d1d6      	bne.n	8020a90 <_svfiprintf_r+0x174>
 8020ae2:	89ab      	ldrh	r3, [r5, #12]
 8020ae4:	065b      	lsls	r3, r3, #25
 8020ae6:	f53f af2d 	bmi.w	8020944 <_svfiprintf_r+0x28>
 8020aea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020aec:	e72c      	b.n	8020948 <_svfiprintf_r+0x2c>
 8020aee:	ab03      	add	r3, sp, #12
 8020af0:	9300      	str	r3, [sp, #0]
 8020af2:	462a      	mov	r2, r5
 8020af4:	4b05      	ldr	r3, [pc, #20]	@ (8020b0c <_svfiprintf_r+0x1f0>)
 8020af6:	a904      	add	r1, sp, #16
 8020af8:	4638      	mov	r0, r7
 8020afa:	f000 f9bb 	bl	8020e74 <_printf_i>
 8020afe:	e7ed      	b.n	8020adc <_svfiprintf_r+0x1c0>
 8020b00:	08022c12 	.word	0x08022c12
 8020b04:	08022c1c 	.word	0x08022c1c
 8020b08:	00000000 	.word	0x00000000
 8020b0c:	08020865 	.word	0x08020865
 8020b10:	08022c18 	.word	0x08022c18

08020b14 <__sfputc_r>:
 8020b14:	6893      	ldr	r3, [r2, #8]
 8020b16:	3b01      	subs	r3, #1
 8020b18:	2b00      	cmp	r3, #0
 8020b1a:	b410      	push	{r4}
 8020b1c:	6093      	str	r3, [r2, #8]
 8020b1e:	da08      	bge.n	8020b32 <__sfputc_r+0x1e>
 8020b20:	6994      	ldr	r4, [r2, #24]
 8020b22:	42a3      	cmp	r3, r4
 8020b24:	db01      	blt.n	8020b2a <__sfputc_r+0x16>
 8020b26:	290a      	cmp	r1, #10
 8020b28:	d103      	bne.n	8020b32 <__sfputc_r+0x1e>
 8020b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020b2e:	f7ff bc31 	b.w	8020394 <__swbuf_r>
 8020b32:	6813      	ldr	r3, [r2, #0]
 8020b34:	1c58      	adds	r0, r3, #1
 8020b36:	6010      	str	r0, [r2, #0]
 8020b38:	7019      	strb	r1, [r3, #0]
 8020b3a:	4608      	mov	r0, r1
 8020b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020b40:	4770      	bx	lr

08020b42 <__sfputs_r>:
 8020b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b44:	4606      	mov	r6, r0
 8020b46:	460f      	mov	r7, r1
 8020b48:	4614      	mov	r4, r2
 8020b4a:	18d5      	adds	r5, r2, r3
 8020b4c:	42ac      	cmp	r4, r5
 8020b4e:	d101      	bne.n	8020b54 <__sfputs_r+0x12>
 8020b50:	2000      	movs	r0, #0
 8020b52:	e007      	b.n	8020b64 <__sfputs_r+0x22>
 8020b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020b58:	463a      	mov	r2, r7
 8020b5a:	4630      	mov	r0, r6
 8020b5c:	f7ff ffda 	bl	8020b14 <__sfputc_r>
 8020b60:	1c43      	adds	r3, r0, #1
 8020b62:	d1f3      	bne.n	8020b4c <__sfputs_r+0xa>
 8020b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020b68 <_vfiprintf_r>:
 8020b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b6c:	460d      	mov	r5, r1
 8020b6e:	b09d      	sub	sp, #116	@ 0x74
 8020b70:	4614      	mov	r4, r2
 8020b72:	4698      	mov	r8, r3
 8020b74:	4606      	mov	r6, r0
 8020b76:	b118      	cbz	r0, 8020b80 <_vfiprintf_r+0x18>
 8020b78:	6a03      	ldr	r3, [r0, #32]
 8020b7a:	b90b      	cbnz	r3, 8020b80 <_vfiprintf_r+0x18>
 8020b7c:	f7ff fab8 	bl	80200f0 <__sinit>
 8020b80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020b82:	07d9      	lsls	r1, r3, #31
 8020b84:	d405      	bmi.n	8020b92 <_vfiprintf_r+0x2a>
 8020b86:	89ab      	ldrh	r3, [r5, #12]
 8020b88:	059a      	lsls	r2, r3, #22
 8020b8a:	d402      	bmi.n	8020b92 <_vfiprintf_r+0x2a>
 8020b8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020b8e:	f7ff fdd4 	bl	802073a <__retarget_lock_acquire_recursive>
 8020b92:	89ab      	ldrh	r3, [r5, #12]
 8020b94:	071b      	lsls	r3, r3, #28
 8020b96:	d501      	bpl.n	8020b9c <_vfiprintf_r+0x34>
 8020b98:	692b      	ldr	r3, [r5, #16]
 8020b9a:	b99b      	cbnz	r3, 8020bc4 <_vfiprintf_r+0x5c>
 8020b9c:	4629      	mov	r1, r5
 8020b9e:	4630      	mov	r0, r6
 8020ba0:	f7ff fc36 	bl	8020410 <__swsetup_r>
 8020ba4:	b170      	cbz	r0, 8020bc4 <_vfiprintf_r+0x5c>
 8020ba6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020ba8:	07dc      	lsls	r4, r3, #31
 8020baa:	d504      	bpl.n	8020bb6 <_vfiprintf_r+0x4e>
 8020bac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020bb0:	b01d      	add	sp, #116	@ 0x74
 8020bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bb6:	89ab      	ldrh	r3, [r5, #12]
 8020bb8:	0598      	lsls	r0, r3, #22
 8020bba:	d4f7      	bmi.n	8020bac <_vfiprintf_r+0x44>
 8020bbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020bbe:	f7ff fdbd 	bl	802073c <__retarget_lock_release_recursive>
 8020bc2:	e7f3      	b.n	8020bac <_vfiprintf_r+0x44>
 8020bc4:	2300      	movs	r3, #0
 8020bc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8020bc8:	2320      	movs	r3, #32
 8020bca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020bce:	f8cd 800c 	str.w	r8, [sp, #12]
 8020bd2:	2330      	movs	r3, #48	@ 0x30
 8020bd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8020d84 <_vfiprintf_r+0x21c>
 8020bd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020bdc:	f04f 0901 	mov.w	r9, #1
 8020be0:	4623      	mov	r3, r4
 8020be2:	469a      	mov	sl, r3
 8020be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020be8:	b10a      	cbz	r2, 8020bee <_vfiprintf_r+0x86>
 8020bea:	2a25      	cmp	r2, #37	@ 0x25
 8020bec:	d1f9      	bne.n	8020be2 <_vfiprintf_r+0x7a>
 8020bee:	ebba 0b04 	subs.w	fp, sl, r4
 8020bf2:	d00b      	beq.n	8020c0c <_vfiprintf_r+0xa4>
 8020bf4:	465b      	mov	r3, fp
 8020bf6:	4622      	mov	r2, r4
 8020bf8:	4629      	mov	r1, r5
 8020bfa:	4630      	mov	r0, r6
 8020bfc:	f7ff ffa1 	bl	8020b42 <__sfputs_r>
 8020c00:	3001      	adds	r0, #1
 8020c02:	f000 80a7 	beq.w	8020d54 <_vfiprintf_r+0x1ec>
 8020c06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020c08:	445a      	add	r2, fp
 8020c0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8020c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8020c10:	2b00      	cmp	r3, #0
 8020c12:	f000 809f 	beq.w	8020d54 <_vfiprintf_r+0x1ec>
 8020c16:	2300      	movs	r3, #0
 8020c18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020c20:	f10a 0a01 	add.w	sl, sl, #1
 8020c24:	9304      	str	r3, [sp, #16]
 8020c26:	9307      	str	r3, [sp, #28]
 8020c28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020c2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8020c2e:	4654      	mov	r4, sl
 8020c30:	2205      	movs	r2, #5
 8020c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020c36:	4853      	ldr	r0, [pc, #332]	@ (8020d84 <_vfiprintf_r+0x21c>)
 8020c38:	f7df fae2 	bl	8000200 <memchr>
 8020c3c:	9a04      	ldr	r2, [sp, #16]
 8020c3e:	b9d8      	cbnz	r0, 8020c78 <_vfiprintf_r+0x110>
 8020c40:	06d1      	lsls	r1, r2, #27
 8020c42:	bf44      	itt	mi
 8020c44:	2320      	movmi	r3, #32
 8020c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020c4a:	0713      	lsls	r3, r2, #28
 8020c4c:	bf44      	itt	mi
 8020c4e:	232b      	movmi	r3, #43	@ 0x2b
 8020c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020c54:	f89a 3000 	ldrb.w	r3, [sl]
 8020c58:	2b2a      	cmp	r3, #42	@ 0x2a
 8020c5a:	d015      	beq.n	8020c88 <_vfiprintf_r+0x120>
 8020c5c:	9a07      	ldr	r2, [sp, #28]
 8020c5e:	4654      	mov	r4, sl
 8020c60:	2000      	movs	r0, #0
 8020c62:	f04f 0c0a 	mov.w	ip, #10
 8020c66:	4621      	mov	r1, r4
 8020c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020c6c:	3b30      	subs	r3, #48	@ 0x30
 8020c6e:	2b09      	cmp	r3, #9
 8020c70:	d94b      	bls.n	8020d0a <_vfiprintf_r+0x1a2>
 8020c72:	b1b0      	cbz	r0, 8020ca2 <_vfiprintf_r+0x13a>
 8020c74:	9207      	str	r2, [sp, #28]
 8020c76:	e014      	b.n	8020ca2 <_vfiprintf_r+0x13a>
 8020c78:	eba0 0308 	sub.w	r3, r0, r8
 8020c7c:	fa09 f303 	lsl.w	r3, r9, r3
 8020c80:	4313      	orrs	r3, r2
 8020c82:	9304      	str	r3, [sp, #16]
 8020c84:	46a2      	mov	sl, r4
 8020c86:	e7d2      	b.n	8020c2e <_vfiprintf_r+0xc6>
 8020c88:	9b03      	ldr	r3, [sp, #12]
 8020c8a:	1d19      	adds	r1, r3, #4
 8020c8c:	681b      	ldr	r3, [r3, #0]
 8020c8e:	9103      	str	r1, [sp, #12]
 8020c90:	2b00      	cmp	r3, #0
 8020c92:	bfbb      	ittet	lt
 8020c94:	425b      	neglt	r3, r3
 8020c96:	f042 0202 	orrlt.w	r2, r2, #2
 8020c9a:	9307      	strge	r3, [sp, #28]
 8020c9c:	9307      	strlt	r3, [sp, #28]
 8020c9e:	bfb8      	it	lt
 8020ca0:	9204      	strlt	r2, [sp, #16]
 8020ca2:	7823      	ldrb	r3, [r4, #0]
 8020ca4:	2b2e      	cmp	r3, #46	@ 0x2e
 8020ca6:	d10a      	bne.n	8020cbe <_vfiprintf_r+0x156>
 8020ca8:	7863      	ldrb	r3, [r4, #1]
 8020caa:	2b2a      	cmp	r3, #42	@ 0x2a
 8020cac:	d132      	bne.n	8020d14 <_vfiprintf_r+0x1ac>
 8020cae:	9b03      	ldr	r3, [sp, #12]
 8020cb0:	1d1a      	adds	r2, r3, #4
 8020cb2:	681b      	ldr	r3, [r3, #0]
 8020cb4:	9203      	str	r2, [sp, #12]
 8020cb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020cba:	3402      	adds	r4, #2
 8020cbc:	9305      	str	r3, [sp, #20]
 8020cbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8020d94 <_vfiprintf_r+0x22c>
 8020cc2:	7821      	ldrb	r1, [r4, #0]
 8020cc4:	2203      	movs	r2, #3
 8020cc6:	4650      	mov	r0, sl
 8020cc8:	f7df fa9a 	bl	8000200 <memchr>
 8020ccc:	b138      	cbz	r0, 8020cde <_vfiprintf_r+0x176>
 8020cce:	9b04      	ldr	r3, [sp, #16]
 8020cd0:	eba0 000a 	sub.w	r0, r0, sl
 8020cd4:	2240      	movs	r2, #64	@ 0x40
 8020cd6:	4082      	lsls	r2, r0
 8020cd8:	4313      	orrs	r3, r2
 8020cda:	3401      	adds	r4, #1
 8020cdc:	9304      	str	r3, [sp, #16]
 8020cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020ce2:	4829      	ldr	r0, [pc, #164]	@ (8020d88 <_vfiprintf_r+0x220>)
 8020ce4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020ce8:	2206      	movs	r2, #6
 8020cea:	f7df fa89 	bl	8000200 <memchr>
 8020cee:	2800      	cmp	r0, #0
 8020cf0:	d03f      	beq.n	8020d72 <_vfiprintf_r+0x20a>
 8020cf2:	4b26      	ldr	r3, [pc, #152]	@ (8020d8c <_vfiprintf_r+0x224>)
 8020cf4:	bb1b      	cbnz	r3, 8020d3e <_vfiprintf_r+0x1d6>
 8020cf6:	9b03      	ldr	r3, [sp, #12]
 8020cf8:	3307      	adds	r3, #7
 8020cfa:	f023 0307 	bic.w	r3, r3, #7
 8020cfe:	3308      	adds	r3, #8
 8020d00:	9303      	str	r3, [sp, #12]
 8020d02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d04:	443b      	add	r3, r7
 8020d06:	9309      	str	r3, [sp, #36]	@ 0x24
 8020d08:	e76a      	b.n	8020be0 <_vfiprintf_r+0x78>
 8020d0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8020d0e:	460c      	mov	r4, r1
 8020d10:	2001      	movs	r0, #1
 8020d12:	e7a8      	b.n	8020c66 <_vfiprintf_r+0xfe>
 8020d14:	2300      	movs	r3, #0
 8020d16:	3401      	adds	r4, #1
 8020d18:	9305      	str	r3, [sp, #20]
 8020d1a:	4619      	mov	r1, r3
 8020d1c:	f04f 0c0a 	mov.w	ip, #10
 8020d20:	4620      	mov	r0, r4
 8020d22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020d26:	3a30      	subs	r2, #48	@ 0x30
 8020d28:	2a09      	cmp	r2, #9
 8020d2a:	d903      	bls.n	8020d34 <_vfiprintf_r+0x1cc>
 8020d2c:	2b00      	cmp	r3, #0
 8020d2e:	d0c6      	beq.n	8020cbe <_vfiprintf_r+0x156>
 8020d30:	9105      	str	r1, [sp, #20]
 8020d32:	e7c4      	b.n	8020cbe <_vfiprintf_r+0x156>
 8020d34:	fb0c 2101 	mla	r1, ip, r1, r2
 8020d38:	4604      	mov	r4, r0
 8020d3a:	2301      	movs	r3, #1
 8020d3c:	e7f0      	b.n	8020d20 <_vfiprintf_r+0x1b8>
 8020d3e:	ab03      	add	r3, sp, #12
 8020d40:	9300      	str	r3, [sp, #0]
 8020d42:	462a      	mov	r2, r5
 8020d44:	4b12      	ldr	r3, [pc, #72]	@ (8020d90 <_vfiprintf_r+0x228>)
 8020d46:	a904      	add	r1, sp, #16
 8020d48:	4630      	mov	r0, r6
 8020d4a:	f3af 8000 	nop.w
 8020d4e:	4607      	mov	r7, r0
 8020d50:	1c78      	adds	r0, r7, #1
 8020d52:	d1d6      	bne.n	8020d02 <_vfiprintf_r+0x19a>
 8020d54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020d56:	07d9      	lsls	r1, r3, #31
 8020d58:	d405      	bmi.n	8020d66 <_vfiprintf_r+0x1fe>
 8020d5a:	89ab      	ldrh	r3, [r5, #12]
 8020d5c:	059a      	lsls	r2, r3, #22
 8020d5e:	d402      	bmi.n	8020d66 <_vfiprintf_r+0x1fe>
 8020d60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020d62:	f7ff fceb 	bl	802073c <__retarget_lock_release_recursive>
 8020d66:	89ab      	ldrh	r3, [r5, #12]
 8020d68:	065b      	lsls	r3, r3, #25
 8020d6a:	f53f af1f 	bmi.w	8020bac <_vfiprintf_r+0x44>
 8020d6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020d70:	e71e      	b.n	8020bb0 <_vfiprintf_r+0x48>
 8020d72:	ab03      	add	r3, sp, #12
 8020d74:	9300      	str	r3, [sp, #0]
 8020d76:	462a      	mov	r2, r5
 8020d78:	4b05      	ldr	r3, [pc, #20]	@ (8020d90 <_vfiprintf_r+0x228>)
 8020d7a:	a904      	add	r1, sp, #16
 8020d7c:	4630      	mov	r0, r6
 8020d7e:	f000 f879 	bl	8020e74 <_printf_i>
 8020d82:	e7e4      	b.n	8020d4e <_vfiprintf_r+0x1e6>
 8020d84:	08022c12 	.word	0x08022c12
 8020d88:	08022c1c 	.word	0x08022c1c
 8020d8c:	00000000 	.word	0x00000000
 8020d90:	08020b43 	.word	0x08020b43
 8020d94:	08022c18 	.word	0x08022c18

08020d98 <_printf_common>:
 8020d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020d9c:	4616      	mov	r6, r2
 8020d9e:	4698      	mov	r8, r3
 8020da0:	688a      	ldr	r2, [r1, #8]
 8020da2:	690b      	ldr	r3, [r1, #16]
 8020da4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020da8:	4293      	cmp	r3, r2
 8020daa:	bfb8      	it	lt
 8020dac:	4613      	movlt	r3, r2
 8020dae:	6033      	str	r3, [r6, #0]
 8020db0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8020db4:	4607      	mov	r7, r0
 8020db6:	460c      	mov	r4, r1
 8020db8:	b10a      	cbz	r2, 8020dbe <_printf_common+0x26>
 8020dba:	3301      	adds	r3, #1
 8020dbc:	6033      	str	r3, [r6, #0]
 8020dbe:	6823      	ldr	r3, [r4, #0]
 8020dc0:	0699      	lsls	r1, r3, #26
 8020dc2:	bf42      	ittt	mi
 8020dc4:	6833      	ldrmi	r3, [r6, #0]
 8020dc6:	3302      	addmi	r3, #2
 8020dc8:	6033      	strmi	r3, [r6, #0]
 8020dca:	6825      	ldr	r5, [r4, #0]
 8020dcc:	f015 0506 	ands.w	r5, r5, #6
 8020dd0:	d106      	bne.n	8020de0 <_printf_common+0x48>
 8020dd2:	f104 0a19 	add.w	sl, r4, #25
 8020dd6:	68e3      	ldr	r3, [r4, #12]
 8020dd8:	6832      	ldr	r2, [r6, #0]
 8020dda:	1a9b      	subs	r3, r3, r2
 8020ddc:	42ab      	cmp	r3, r5
 8020dde:	dc26      	bgt.n	8020e2e <_printf_common+0x96>
 8020de0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8020de4:	6822      	ldr	r2, [r4, #0]
 8020de6:	3b00      	subs	r3, #0
 8020de8:	bf18      	it	ne
 8020dea:	2301      	movne	r3, #1
 8020dec:	0692      	lsls	r2, r2, #26
 8020dee:	d42b      	bmi.n	8020e48 <_printf_common+0xb0>
 8020df0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8020df4:	4641      	mov	r1, r8
 8020df6:	4638      	mov	r0, r7
 8020df8:	47c8      	blx	r9
 8020dfa:	3001      	adds	r0, #1
 8020dfc:	d01e      	beq.n	8020e3c <_printf_common+0xa4>
 8020dfe:	6823      	ldr	r3, [r4, #0]
 8020e00:	6922      	ldr	r2, [r4, #16]
 8020e02:	f003 0306 	and.w	r3, r3, #6
 8020e06:	2b04      	cmp	r3, #4
 8020e08:	bf02      	ittt	eq
 8020e0a:	68e5      	ldreq	r5, [r4, #12]
 8020e0c:	6833      	ldreq	r3, [r6, #0]
 8020e0e:	1aed      	subeq	r5, r5, r3
 8020e10:	68a3      	ldr	r3, [r4, #8]
 8020e12:	bf0c      	ite	eq
 8020e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020e18:	2500      	movne	r5, #0
 8020e1a:	4293      	cmp	r3, r2
 8020e1c:	bfc4      	itt	gt
 8020e1e:	1a9b      	subgt	r3, r3, r2
 8020e20:	18ed      	addgt	r5, r5, r3
 8020e22:	2600      	movs	r6, #0
 8020e24:	341a      	adds	r4, #26
 8020e26:	42b5      	cmp	r5, r6
 8020e28:	d11a      	bne.n	8020e60 <_printf_common+0xc8>
 8020e2a:	2000      	movs	r0, #0
 8020e2c:	e008      	b.n	8020e40 <_printf_common+0xa8>
 8020e2e:	2301      	movs	r3, #1
 8020e30:	4652      	mov	r2, sl
 8020e32:	4641      	mov	r1, r8
 8020e34:	4638      	mov	r0, r7
 8020e36:	47c8      	blx	r9
 8020e38:	3001      	adds	r0, #1
 8020e3a:	d103      	bne.n	8020e44 <_printf_common+0xac>
 8020e3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e44:	3501      	adds	r5, #1
 8020e46:	e7c6      	b.n	8020dd6 <_printf_common+0x3e>
 8020e48:	18e1      	adds	r1, r4, r3
 8020e4a:	1c5a      	adds	r2, r3, #1
 8020e4c:	2030      	movs	r0, #48	@ 0x30
 8020e4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8020e52:	4422      	add	r2, r4
 8020e54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8020e58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8020e5c:	3302      	adds	r3, #2
 8020e5e:	e7c7      	b.n	8020df0 <_printf_common+0x58>
 8020e60:	2301      	movs	r3, #1
 8020e62:	4622      	mov	r2, r4
 8020e64:	4641      	mov	r1, r8
 8020e66:	4638      	mov	r0, r7
 8020e68:	47c8      	blx	r9
 8020e6a:	3001      	adds	r0, #1
 8020e6c:	d0e6      	beq.n	8020e3c <_printf_common+0xa4>
 8020e6e:	3601      	adds	r6, #1
 8020e70:	e7d9      	b.n	8020e26 <_printf_common+0x8e>
	...

08020e74 <_printf_i>:
 8020e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020e78:	7e0f      	ldrb	r7, [r1, #24]
 8020e7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8020e7c:	2f78      	cmp	r7, #120	@ 0x78
 8020e7e:	4691      	mov	r9, r2
 8020e80:	4680      	mov	r8, r0
 8020e82:	460c      	mov	r4, r1
 8020e84:	469a      	mov	sl, r3
 8020e86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8020e8a:	d807      	bhi.n	8020e9c <_printf_i+0x28>
 8020e8c:	2f62      	cmp	r7, #98	@ 0x62
 8020e8e:	d80a      	bhi.n	8020ea6 <_printf_i+0x32>
 8020e90:	2f00      	cmp	r7, #0
 8020e92:	f000 80d2 	beq.w	802103a <_printf_i+0x1c6>
 8020e96:	2f58      	cmp	r7, #88	@ 0x58
 8020e98:	f000 80b9 	beq.w	802100e <_printf_i+0x19a>
 8020e9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020ea0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8020ea4:	e03a      	b.n	8020f1c <_printf_i+0xa8>
 8020ea6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8020eaa:	2b15      	cmp	r3, #21
 8020eac:	d8f6      	bhi.n	8020e9c <_printf_i+0x28>
 8020eae:	a101      	add	r1, pc, #4	@ (adr r1, 8020eb4 <_printf_i+0x40>)
 8020eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020eb4:	08020f0d 	.word	0x08020f0d
 8020eb8:	08020f21 	.word	0x08020f21
 8020ebc:	08020e9d 	.word	0x08020e9d
 8020ec0:	08020e9d 	.word	0x08020e9d
 8020ec4:	08020e9d 	.word	0x08020e9d
 8020ec8:	08020e9d 	.word	0x08020e9d
 8020ecc:	08020f21 	.word	0x08020f21
 8020ed0:	08020e9d 	.word	0x08020e9d
 8020ed4:	08020e9d 	.word	0x08020e9d
 8020ed8:	08020e9d 	.word	0x08020e9d
 8020edc:	08020e9d 	.word	0x08020e9d
 8020ee0:	08021021 	.word	0x08021021
 8020ee4:	08020f4b 	.word	0x08020f4b
 8020ee8:	08020fdb 	.word	0x08020fdb
 8020eec:	08020e9d 	.word	0x08020e9d
 8020ef0:	08020e9d 	.word	0x08020e9d
 8020ef4:	08021043 	.word	0x08021043
 8020ef8:	08020e9d 	.word	0x08020e9d
 8020efc:	08020f4b 	.word	0x08020f4b
 8020f00:	08020e9d 	.word	0x08020e9d
 8020f04:	08020e9d 	.word	0x08020e9d
 8020f08:	08020fe3 	.word	0x08020fe3
 8020f0c:	6833      	ldr	r3, [r6, #0]
 8020f0e:	1d1a      	adds	r2, r3, #4
 8020f10:	681b      	ldr	r3, [r3, #0]
 8020f12:	6032      	str	r2, [r6, #0]
 8020f14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020f18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8020f1c:	2301      	movs	r3, #1
 8020f1e:	e09d      	b.n	802105c <_printf_i+0x1e8>
 8020f20:	6833      	ldr	r3, [r6, #0]
 8020f22:	6820      	ldr	r0, [r4, #0]
 8020f24:	1d19      	adds	r1, r3, #4
 8020f26:	6031      	str	r1, [r6, #0]
 8020f28:	0606      	lsls	r6, r0, #24
 8020f2a:	d501      	bpl.n	8020f30 <_printf_i+0xbc>
 8020f2c:	681d      	ldr	r5, [r3, #0]
 8020f2e:	e003      	b.n	8020f38 <_printf_i+0xc4>
 8020f30:	0645      	lsls	r5, r0, #25
 8020f32:	d5fb      	bpl.n	8020f2c <_printf_i+0xb8>
 8020f34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8020f38:	2d00      	cmp	r5, #0
 8020f3a:	da03      	bge.n	8020f44 <_printf_i+0xd0>
 8020f3c:	232d      	movs	r3, #45	@ 0x2d
 8020f3e:	426d      	negs	r5, r5
 8020f40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020f44:	4859      	ldr	r0, [pc, #356]	@ (80210ac <_printf_i+0x238>)
 8020f46:	230a      	movs	r3, #10
 8020f48:	e011      	b.n	8020f6e <_printf_i+0xfa>
 8020f4a:	6821      	ldr	r1, [r4, #0]
 8020f4c:	6833      	ldr	r3, [r6, #0]
 8020f4e:	0608      	lsls	r0, r1, #24
 8020f50:	f853 5b04 	ldr.w	r5, [r3], #4
 8020f54:	d402      	bmi.n	8020f5c <_printf_i+0xe8>
 8020f56:	0649      	lsls	r1, r1, #25
 8020f58:	bf48      	it	mi
 8020f5a:	b2ad      	uxthmi	r5, r5
 8020f5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8020f5e:	4853      	ldr	r0, [pc, #332]	@ (80210ac <_printf_i+0x238>)
 8020f60:	6033      	str	r3, [r6, #0]
 8020f62:	bf14      	ite	ne
 8020f64:	230a      	movne	r3, #10
 8020f66:	2308      	moveq	r3, #8
 8020f68:	2100      	movs	r1, #0
 8020f6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8020f6e:	6866      	ldr	r6, [r4, #4]
 8020f70:	60a6      	str	r6, [r4, #8]
 8020f72:	2e00      	cmp	r6, #0
 8020f74:	bfa2      	ittt	ge
 8020f76:	6821      	ldrge	r1, [r4, #0]
 8020f78:	f021 0104 	bicge.w	r1, r1, #4
 8020f7c:	6021      	strge	r1, [r4, #0]
 8020f7e:	b90d      	cbnz	r5, 8020f84 <_printf_i+0x110>
 8020f80:	2e00      	cmp	r6, #0
 8020f82:	d04b      	beq.n	802101c <_printf_i+0x1a8>
 8020f84:	4616      	mov	r6, r2
 8020f86:	fbb5 f1f3 	udiv	r1, r5, r3
 8020f8a:	fb03 5711 	mls	r7, r3, r1, r5
 8020f8e:	5dc7      	ldrb	r7, [r0, r7]
 8020f90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020f94:	462f      	mov	r7, r5
 8020f96:	42bb      	cmp	r3, r7
 8020f98:	460d      	mov	r5, r1
 8020f9a:	d9f4      	bls.n	8020f86 <_printf_i+0x112>
 8020f9c:	2b08      	cmp	r3, #8
 8020f9e:	d10b      	bne.n	8020fb8 <_printf_i+0x144>
 8020fa0:	6823      	ldr	r3, [r4, #0]
 8020fa2:	07df      	lsls	r7, r3, #31
 8020fa4:	d508      	bpl.n	8020fb8 <_printf_i+0x144>
 8020fa6:	6923      	ldr	r3, [r4, #16]
 8020fa8:	6861      	ldr	r1, [r4, #4]
 8020faa:	4299      	cmp	r1, r3
 8020fac:	bfde      	ittt	le
 8020fae:	2330      	movle	r3, #48	@ 0x30
 8020fb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020fb4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8020fb8:	1b92      	subs	r2, r2, r6
 8020fba:	6122      	str	r2, [r4, #16]
 8020fbc:	f8cd a000 	str.w	sl, [sp]
 8020fc0:	464b      	mov	r3, r9
 8020fc2:	aa03      	add	r2, sp, #12
 8020fc4:	4621      	mov	r1, r4
 8020fc6:	4640      	mov	r0, r8
 8020fc8:	f7ff fee6 	bl	8020d98 <_printf_common>
 8020fcc:	3001      	adds	r0, #1
 8020fce:	d14a      	bne.n	8021066 <_printf_i+0x1f2>
 8020fd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020fd4:	b004      	add	sp, #16
 8020fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020fda:	6823      	ldr	r3, [r4, #0]
 8020fdc:	f043 0320 	orr.w	r3, r3, #32
 8020fe0:	6023      	str	r3, [r4, #0]
 8020fe2:	4833      	ldr	r0, [pc, #204]	@ (80210b0 <_printf_i+0x23c>)
 8020fe4:	2778      	movs	r7, #120	@ 0x78
 8020fe6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8020fea:	6823      	ldr	r3, [r4, #0]
 8020fec:	6831      	ldr	r1, [r6, #0]
 8020fee:	061f      	lsls	r7, r3, #24
 8020ff0:	f851 5b04 	ldr.w	r5, [r1], #4
 8020ff4:	d402      	bmi.n	8020ffc <_printf_i+0x188>
 8020ff6:	065f      	lsls	r7, r3, #25
 8020ff8:	bf48      	it	mi
 8020ffa:	b2ad      	uxthmi	r5, r5
 8020ffc:	6031      	str	r1, [r6, #0]
 8020ffe:	07d9      	lsls	r1, r3, #31
 8021000:	bf44      	itt	mi
 8021002:	f043 0320 	orrmi.w	r3, r3, #32
 8021006:	6023      	strmi	r3, [r4, #0]
 8021008:	b11d      	cbz	r5, 8021012 <_printf_i+0x19e>
 802100a:	2310      	movs	r3, #16
 802100c:	e7ac      	b.n	8020f68 <_printf_i+0xf4>
 802100e:	4827      	ldr	r0, [pc, #156]	@ (80210ac <_printf_i+0x238>)
 8021010:	e7e9      	b.n	8020fe6 <_printf_i+0x172>
 8021012:	6823      	ldr	r3, [r4, #0]
 8021014:	f023 0320 	bic.w	r3, r3, #32
 8021018:	6023      	str	r3, [r4, #0]
 802101a:	e7f6      	b.n	802100a <_printf_i+0x196>
 802101c:	4616      	mov	r6, r2
 802101e:	e7bd      	b.n	8020f9c <_printf_i+0x128>
 8021020:	6833      	ldr	r3, [r6, #0]
 8021022:	6825      	ldr	r5, [r4, #0]
 8021024:	6961      	ldr	r1, [r4, #20]
 8021026:	1d18      	adds	r0, r3, #4
 8021028:	6030      	str	r0, [r6, #0]
 802102a:	062e      	lsls	r6, r5, #24
 802102c:	681b      	ldr	r3, [r3, #0]
 802102e:	d501      	bpl.n	8021034 <_printf_i+0x1c0>
 8021030:	6019      	str	r1, [r3, #0]
 8021032:	e002      	b.n	802103a <_printf_i+0x1c6>
 8021034:	0668      	lsls	r0, r5, #25
 8021036:	d5fb      	bpl.n	8021030 <_printf_i+0x1bc>
 8021038:	8019      	strh	r1, [r3, #0]
 802103a:	2300      	movs	r3, #0
 802103c:	6123      	str	r3, [r4, #16]
 802103e:	4616      	mov	r6, r2
 8021040:	e7bc      	b.n	8020fbc <_printf_i+0x148>
 8021042:	6833      	ldr	r3, [r6, #0]
 8021044:	1d1a      	adds	r2, r3, #4
 8021046:	6032      	str	r2, [r6, #0]
 8021048:	681e      	ldr	r6, [r3, #0]
 802104a:	6862      	ldr	r2, [r4, #4]
 802104c:	2100      	movs	r1, #0
 802104e:	4630      	mov	r0, r6
 8021050:	f7df f8d6 	bl	8000200 <memchr>
 8021054:	b108      	cbz	r0, 802105a <_printf_i+0x1e6>
 8021056:	1b80      	subs	r0, r0, r6
 8021058:	6060      	str	r0, [r4, #4]
 802105a:	6863      	ldr	r3, [r4, #4]
 802105c:	6123      	str	r3, [r4, #16]
 802105e:	2300      	movs	r3, #0
 8021060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021064:	e7aa      	b.n	8020fbc <_printf_i+0x148>
 8021066:	6923      	ldr	r3, [r4, #16]
 8021068:	4632      	mov	r2, r6
 802106a:	4649      	mov	r1, r9
 802106c:	4640      	mov	r0, r8
 802106e:	47d0      	blx	sl
 8021070:	3001      	adds	r0, #1
 8021072:	d0ad      	beq.n	8020fd0 <_printf_i+0x15c>
 8021074:	6823      	ldr	r3, [r4, #0]
 8021076:	079b      	lsls	r3, r3, #30
 8021078:	d413      	bmi.n	80210a2 <_printf_i+0x22e>
 802107a:	68e0      	ldr	r0, [r4, #12]
 802107c:	9b03      	ldr	r3, [sp, #12]
 802107e:	4298      	cmp	r0, r3
 8021080:	bfb8      	it	lt
 8021082:	4618      	movlt	r0, r3
 8021084:	e7a6      	b.n	8020fd4 <_printf_i+0x160>
 8021086:	2301      	movs	r3, #1
 8021088:	4632      	mov	r2, r6
 802108a:	4649      	mov	r1, r9
 802108c:	4640      	mov	r0, r8
 802108e:	47d0      	blx	sl
 8021090:	3001      	adds	r0, #1
 8021092:	d09d      	beq.n	8020fd0 <_printf_i+0x15c>
 8021094:	3501      	adds	r5, #1
 8021096:	68e3      	ldr	r3, [r4, #12]
 8021098:	9903      	ldr	r1, [sp, #12]
 802109a:	1a5b      	subs	r3, r3, r1
 802109c:	42ab      	cmp	r3, r5
 802109e:	dcf2      	bgt.n	8021086 <_printf_i+0x212>
 80210a0:	e7eb      	b.n	802107a <_printf_i+0x206>
 80210a2:	2500      	movs	r5, #0
 80210a4:	f104 0619 	add.w	r6, r4, #25
 80210a8:	e7f5      	b.n	8021096 <_printf_i+0x222>
 80210aa:	bf00      	nop
 80210ac:	08022c23 	.word	0x08022c23
 80210b0:	08022c34 	.word	0x08022c34

080210b4 <__sflush_r>:
 80210b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80210b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80210bc:	0716      	lsls	r6, r2, #28
 80210be:	4605      	mov	r5, r0
 80210c0:	460c      	mov	r4, r1
 80210c2:	d454      	bmi.n	802116e <__sflush_r+0xba>
 80210c4:	684b      	ldr	r3, [r1, #4]
 80210c6:	2b00      	cmp	r3, #0
 80210c8:	dc02      	bgt.n	80210d0 <__sflush_r+0x1c>
 80210ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80210cc:	2b00      	cmp	r3, #0
 80210ce:	dd48      	ble.n	8021162 <__sflush_r+0xae>
 80210d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80210d2:	2e00      	cmp	r6, #0
 80210d4:	d045      	beq.n	8021162 <__sflush_r+0xae>
 80210d6:	2300      	movs	r3, #0
 80210d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80210dc:	682f      	ldr	r7, [r5, #0]
 80210de:	6a21      	ldr	r1, [r4, #32]
 80210e0:	602b      	str	r3, [r5, #0]
 80210e2:	d030      	beq.n	8021146 <__sflush_r+0x92>
 80210e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80210e6:	89a3      	ldrh	r3, [r4, #12]
 80210e8:	0759      	lsls	r1, r3, #29
 80210ea:	d505      	bpl.n	80210f8 <__sflush_r+0x44>
 80210ec:	6863      	ldr	r3, [r4, #4]
 80210ee:	1ad2      	subs	r2, r2, r3
 80210f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80210f2:	b10b      	cbz	r3, 80210f8 <__sflush_r+0x44>
 80210f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80210f6:	1ad2      	subs	r2, r2, r3
 80210f8:	2300      	movs	r3, #0
 80210fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80210fc:	6a21      	ldr	r1, [r4, #32]
 80210fe:	4628      	mov	r0, r5
 8021100:	47b0      	blx	r6
 8021102:	1c43      	adds	r3, r0, #1
 8021104:	89a3      	ldrh	r3, [r4, #12]
 8021106:	d106      	bne.n	8021116 <__sflush_r+0x62>
 8021108:	6829      	ldr	r1, [r5, #0]
 802110a:	291d      	cmp	r1, #29
 802110c:	d82b      	bhi.n	8021166 <__sflush_r+0xb2>
 802110e:	4a2a      	ldr	r2, [pc, #168]	@ (80211b8 <__sflush_r+0x104>)
 8021110:	410a      	asrs	r2, r1
 8021112:	07d6      	lsls	r6, r2, #31
 8021114:	d427      	bmi.n	8021166 <__sflush_r+0xb2>
 8021116:	2200      	movs	r2, #0
 8021118:	6062      	str	r2, [r4, #4]
 802111a:	04d9      	lsls	r1, r3, #19
 802111c:	6922      	ldr	r2, [r4, #16]
 802111e:	6022      	str	r2, [r4, #0]
 8021120:	d504      	bpl.n	802112c <__sflush_r+0x78>
 8021122:	1c42      	adds	r2, r0, #1
 8021124:	d101      	bne.n	802112a <__sflush_r+0x76>
 8021126:	682b      	ldr	r3, [r5, #0]
 8021128:	b903      	cbnz	r3, 802112c <__sflush_r+0x78>
 802112a:	6560      	str	r0, [r4, #84]	@ 0x54
 802112c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802112e:	602f      	str	r7, [r5, #0]
 8021130:	b1b9      	cbz	r1, 8021162 <__sflush_r+0xae>
 8021132:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021136:	4299      	cmp	r1, r3
 8021138:	d002      	beq.n	8021140 <__sflush_r+0x8c>
 802113a:	4628      	mov	r0, r5
 802113c:	f7ff fb40 	bl	80207c0 <_free_r>
 8021140:	2300      	movs	r3, #0
 8021142:	6363      	str	r3, [r4, #52]	@ 0x34
 8021144:	e00d      	b.n	8021162 <__sflush_r+0xae>
 8021146:	2301      	movs	r3, #1
 8021148:	4628      	mov	r0, r5
 802114a:	47b0      	blx	r6
 802114c:	4602      	mov	r2, r0
 802114e:	1c50      	adds	r0, r2, #1
 8021150:	d1c9      	bne.n	80210e6 <__sflush_r+0x32>
 8021152:	682b      	ldr	r3, [r5, #0]
 8021154:	2b00      	cmp	r3, #0
 8021156:	d0c6      	beq.n	80210e6 <__sflush_r+0x32>
 8021158:	2b1d      	cmp	r3, #29
 802115a:	d001      	beq.n	8021160 <__sflush_r+0xac>
 802115c:	2b16      	cmp	r3, #22
 802115e:	d11e      	bne.n	802119e <__sflush_r+0xea>
 8021160:	602f      	str	r7, [r5, #0]
 8021162:	2000      	movs	r0, #0
 8021164:	e022      	b.n	80211ac <__sflush_r+0xf8>
 8021166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802116a:	b21b      	sxth	r3, r3
 802116c:	e01b      	b.n	80211a6 <__sflush_r+0xf2>
 802116e:	690f      	ldr	r7, [r1, #16]
 8021170:	2f00      	cmp	r7, #0
 8021172:	d0f6      	beq.n	8021162 <__sflush_r+0xae>
 8021174:	0793      	lsls	r3, r2, #30
 8021176:	680e      	ldr	r6, [r1, #0]
 8021178:	bf08      	it	eq
 802117a:	694b      	ldreq	r3, [r1, #20]
 802117c:	600f      	str	r7, [r1, #0]
 802117e:	bf18      	it	ne
 8021180:	2300      	movne	r3, #0
 8021182:	eba6 0807 	sub.w	r8, r6, r7
 8021186:	608b      	str	r3, [r1, #8]
 8021188:	f1b8 0f00 	cmp.w	r8, #0
 802118c:	dde9      	ble.n	8021162 <__sflush_r+0xae>
 802118e:	6a21      	ldr	r1, [r4, #32]
 8021190:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8021192:	4643      	mov	r3, r8
 8021194:	463a      	mov	r2, r7
 8021196:	4628      	mov	r0, r5
 8021198:	47b0      	blx	r6
 802119a:	2800      	cmp	r0, #0
 802119c:	dc08      	bgt.n	80211b0 <__sflush_r+0xfc>
 802119e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80211a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80211a6:	81a3      	strh	r3, [r4, #12]
 80211a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80211ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80211b0:	4407      	add	r7, r0
 80211b2:	eba8 0800 	sub.w	r8, r8, r0
 80211b6:	e7e7      	b.n	8021188 <__sflush_r+0xd4>
 80211b8:	dfbffffe 	.word	0xdfbffffe

080211bc <_fflush_r>:
 80211bc:	b538      	push	{r3, r4, r5, lr}
 80211be:	690b      	ldr	r3, [r1, #16]
 80211c0:	4605      	mov	r5, r0
 80211c2:	460c      	mov	r4, r1
 80211c4:	b913      	cbnz	r3, 80211cc <_fflush_r+0x10>
 80211c6:	2500      	movs	r5, #0
 80211c8:	4628      	mov	r0, r5
 80211ca:	bd38      	pop	{r3, r4, r5, pc}
 80211cc:	b118      	cbz	r0, 80211d6 <_fflush_r+0x1a>
 80211ce:	6a03      	ldr	r3, [r0, #32]
 80211d0:	b90b      	cbnz	r3, 80211d6 <_fflush_r+0x1a>
 80211d2:	f7fe ff8d 	bl	80200f0 <__sinit>
 80211d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80211da:	2b00      	cmp	r3, #0
 80211dc:	d0f3      	beq.n	80211c6 <_fflush_r+0xa>
 80211de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80211e0:	07d0      	lsls	r0, r2, #31
 80211e2:	d404      	bmi.n	80211ee <_fflush_r+0x32>
 80211e4:	0599      	lsls	r1, r3, #22
 80211e6:	d402      	bmi.n	80211ee <_fflush_r+0x32>
 80211e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80211ea:	f7ff faa6 	bl	802073a <__retarget_lock_acquire_recursive>
 80211ee:	4628      	mov	r0, r5
 80211f0:	4621      	mov	r1, r4
 80211f2:	f7ff ff5f 	bl	80210b4 <__sflush_r>
 80211f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80211f8:	07da      	lsls	r2, r3, #31
 80211fa:	4605      	mov	r5, r0
 80211fc:	d4e4      	bmi.n	80211c8 <_fflush_r+0xc>
 80211fe:	89a3      	ldrh	r3, [r4, #12]
 8021200:	059b      	lsls	r3, r3, #22
 8021202:	d4e1      	bmi.n	80211c8 <_fflush_r+0xc>
 8021204:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021206:	f7ff fa99 	bl	802073c <__retarget_lock_release_recursive>
 802120a:	e7dd      	b.n	80211c8 <_fflush_r+0xc>

0802120c <fiprintf>:
 802120c:	b40e      	push	{r1, r2, r3}
 802120e:	b503      	push	{r0, r1, lr}
 8021210:	4601      	mov	r1, r0
 8021212:	ab03      	add	r3, sp, #12
 8021214:	4805      	ldr	r0, [pc, #20]	@ (802122c <fiprintf+0x20>)
 8021216:	f853 2b04 	ldr.w	r2, [r3], #4
 802121a:	6800      	ldr	r0, [r0, #0]
 802121c:	9301      	str	r3, [sp, #4]
 802121e:	f7ff fca3 	bl	8020b68 <_vfiprintf_r>
 8021222:	b002      	add	sp, #8
 8021224:	f85d eb04 	ldr.w	lr, [sp], #4
 8021228:	b003      	add	sp, #12
 802122a:	4770      	bx	lr
 802122c:	20000bfc 	.word	0x20000bfc

08021230 <__swhatbuf_r>:
 8021230:	b570      	push	{r4, r5, r6, lr}
 8021232:	460c      	mov	r4, r1
 8021234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021238:	2900      	cmp	r1, #0
 802123a:	b096      	sub	sp, #88	@ 0x58
 802123c:	4615      	mov	r5, r2
 802123e:	461e      	mov	r6, r3
 8021240:	da0d      	bge.n	802125e <__swhatbuf_r+0x2e>
 8021242:	89a3      	ldrh	r3, [r4, #12]
 8021244:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021248:	f04f 0100 	mov.w	r1, #0
 802124c:	bf14      	ite	ne
 802124e:	2340      	movne	r3, #64	@ 0x40
 8021250:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021254:	2000      	movs	r0, #0
 8021256:	6031      	str	r1, [r6, #0]
 8021258:	602b      	str	r3, [r5, #0]
 802125a:	b016      	add	sp, #88	@ 0x58
 802125c:	bd70      	pop	{r4, r5, r6, pc}
 802125e:	466a      	mov	r2, sp
 8021260:	f000 f848 	bl	80212f4 <_fstat_r>
 8021264:	2800      	cmp	r0, #0
 8021266:	dbec      	blt.n	8021242 <__swhatbuf_r+0x12>
 8021268:	9901      	ldr	r1, [sp, #4]
 802126a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802126e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8021272:	4259      	negs	r1, r3
 8021274:	4159      	adcs	r1, r3
 8021276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802127a:	e7eb      	b.n	8021254 <__swhatbuf_r+0x24>

0802127c <__smakebuf_r>:
 802127c:	898b      	ldrh	r3, [r1, #12]
 802127e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021280:	079d      	lsls	r5, r3, #30
 8021282:	4606      	mov	r6, r0
 8021284:	460c      	mov	r4, r1
 8021286:	d507      	bpl.n	8021298 <__smakebuf_r+0x1c>
 8021288:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802128c:	6023      	str	r3, [r4, #0]
 802128e:	6123      	str	r3, [r4, #16]
 8021290:	2301      	movs	r3, #1
 8021292:	6163      	str	r3, [r4, #20]
 8021294:	b003      	add	sp, #12
 8021296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021298:	ab01      	add	r3, sp, #4
 802129a:	466a      	mov	r2, sp
 802129c:	f7ff ffc8 	bl	8021230 <__swhatbuf_r>
 80212a0:	9f00      	ldr	r7, [sp, #0]
 80212a2:	4605      	mov	r5, r0
 80212a4:	4639      	mov	r1, r7
 80212a6:	4630      	mov	r0, r6
 80212a8:	f7fe fcf0 	bl	801fc8c <_malloc_r>
 80212ac:	b948      	cbnz	r0, 80212c2 <__smakebuf_r+0x46>
 80212ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80212b2:	059a      	lsls	r2, r3, #22
 80212b4:	d4ee      	bmi.n	8021294 <__smakebuf_r+0x18>
 80212b6:	f023 0303 	bic.w	r3, r3, #3
 80212ba:	f043 0302 	orr.w	r3, r3, #2
 80212be:	81a3      	strh	r3, [r4, #12]
 80212c0:	e7e2      	b.n	8021288 <__smakebuf_r+0xc>
 80212c2:	89a3      	ldrh	r3, [r4, #12]
 80212c4:	6020      	str	r0, [r4, #0]
 80212c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80212ca:	81a3      	strh	r3, [r4, #12]
 80212cc:	9b01      	ldr	r3, [sp, #4]
 80212ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80212d2:	b15b      	cbz	r3, 80212ec <__smakebuf_r+0x70>
 80212d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80212d8:	4630      	mov	r0, r6
 80212da:	f000 f81d 	bl	8021318 <_isatty_r>
 80212de:	b128      	cbz	r0, 80212ec <__smakebuf_r+0x70>
 80212e0:	89a3      	ldrh	r3, [r4, #12]
 80212e2:	f023 0303 	bic.w	r3, r3, #3
 80212e6:	f043 0301 	orr.w	r3, r3, #1
 80212ea:	81a3      	strh	r3, [r4, #12]
 80212ec:	89a3      	ldrh	r3, [r4, #12]
 80212ee:	431d      	orrs	r5, r3
 80212f0:	81a5      	strh	r5, [r4, #12]
 80212f2:	e7cf      	b.n	8021294 <__smakebuf_r+0x18>

080212f4 <_fstat_r>:
 80212f4:	b538      	push	{r3, r4, r5, lr}
 80212f6:	4d07      	ldr	r5, [pc, #28]	@ (8021314 <_fstat_r+0x20>)
 80212f8:	2300      	movs	r3, #0
 80212fa:	4604      	mov	r4, r0
 80212fc:	4608      	mov	r0, r1
 80212fe:	4611      	mov	r1, r2
 8021300:	602b      	str	r3, [r5, #0]
 8021302:	f7e1 fe1b 	bl	8002f3c <_fstat>
 8021306:	1c43      	adds	r3, r0, #1
 8021308:	d102      	bne.n	8021310 <_fstat_r+0x1c>
 802130a:	682b      	ldr	r3, [r5, #0]
 802130c:	b103      	cbz	r3, 8021310 <_fstat_r+0x1c>
 802130e:	6023      	str	r3, [r4, #0]
 8021310:	bd38      	pop	{r3, r4, r5, pc}
 8021312:	bf00      	nop
 8021314:	2001670c 	.word	0x2001670c

08021318 <_isatty_r>:
 8021318:	b538      	push	{r3, r4, r5, lr}
 802131a:	4d06      	ldr	r5, [pc, #24]	@ (8021334 <_isatty_r+0x1c>)
 802131c:	2300      	movs	r3, #0
 802131e:	4604      	mov	r4, r0
 8021320:	4608      	mov	r0, r1
 8021322:	602b      	str	r3, [r5, #0]
 8021324:	f7e1 fe1a 	bl	8002f5c <_isatty>
 8021328:	1c43      	adds	r3, r0, #1
 802132a:	d102      	bne.n	8021332 <_isatty_r+0x1a>
 802132c:	682b      	ldr	r3, [r5, #0]
 802132e:	b103      	cbz	r3, 8021332 <_isatty_r+0x1a>
 8021330:	6023      	str	r3, [r4, #0]
 8021332:	bd38      	pop	{r3, r4, r5, pc}
 8021334:	2001670c 	.word	0x2001670c

08021338 <abort>:
 8021338:	b508      	push	{r3, lr}
 802133a:	2006      	movs	r0, #6
 802133c:	f000 f82c 	bl	8021398 <raise>
 8021340:	2001      	movs	r0, #1
 8021342:	f7e1 fd75 	bl	8002e30 <_exit>

08021346 <_raise_r>:
 8021346:	291f      	cmp	r1, #31
 8021348:	b538      	push	{r3, r4, r5, lr}
 802134a:	4605      	mov	r5, r0
 802134c:	460c      	mov	r4, r1
 802134e:	d904      	bls.n	802135a <_raise_r+0x14>
 8021350:	2316      	movs	r3, #22
 8021352:	6003      	str	r3, [r0, #0]
 8021354:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021358:	bd38      	pop	{r3, r4, r5, pc}
 802135a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802135c:	b112      	cbz	r2, 8021364 <_raise_r+0x1e>
 802135e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021362:	b94b      	cbnz	r3, 8021378 <_raise_r+0x32>
 8021364:	4628      	mov	r0, r5
 8021366:	f000 f831 	bl	80213cc <_getpid_r>
 802136a:	4622      	mov	r2, r4
 802136c:	4601      	mov	r1, r0
 802136e:	4628      	mov	r0, r5
 8021370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021374:	f000 b818 	b.w	80213a8 <_kill_r>
 8021378:	2b01      	cmp	r3, #1
 802137a:	d00a      	beq.n	8021392 <_raise_r+0x4c>
 802137c:	1c59      	adds	r1, r3, #1
 802137e:	d103      	bne.n	8021388 <_raise_r+0x42>
 8021380:	2316      	movs	r3, #22
 8021382:	6003      	str	r3, [r0, #0]
 8021384:	2001      	movs	r0, #1
 8021386:	e7e7      	b.n	8021358 <_raise_r+0x12>
 8021388:	2100      	movs	r1, #0
 802138a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802138e:	4620      	mov	r0, r4
 8021390:	4798      	blx	r3
 8021392:	2000      	movs	r0, #0
 8021394:	e7e0      	b.n	8021358 <_raise_r+0x12>
	...

08021398 <raise>:
 8021398:	4b02      	ldr	r3, [pc, #8]	@ (80213a4 <raise+0xc>)
 802139a:	4601      	mov	r1, r0
 802139c:	6818      	ldr	r0, [r3, #0]
 802139e:	f7ff bfd2 	b.w	8021346 <_raise_r>
 80213a2:	bf00      	nop
 80213a4:	20000bfc 	.word	0x20000bfc

080213a8 <_kill_r>:
 80213a8:	b538      	push	{r3, r4, r5, lr}
 80213aa:	4d07      	ldr	r5, [pc, #28]	@ (80213c8 <_kill_r+0x20>)
 80213ac:	2300      	movs	r3, #0
 80213ae:	4604      	mov	r4, r0
 80213b0:	4608      	mov	r0, r1
 80213b2:	4611      	mov	r1, r2
 80213b4:	602b      	str	r3, [r5, #0]
 80213b6:	f7e1 fd2b 	bl	8002e10 <_kill>
 80213ba:	1c43      	adds	r3, r0, #1
 80213bc:	d102      	bne.n	80213c4 <_kill_r+0x1c>
 80213be:	682b      	ldr	r3, [r5, #0]
 80213c0:	b103      	cbz	r3, 80213c4 <_kill_r+0x1c>
 80213c2:	6023      	str	r3, [r4, #0]
 80213c4:	bd38      	pop	{r3, r4, r5, pc}
 80213c6:	bf00      	nop
 80213c8:	2001670c 	.word	0x2001670c

080213cc <_getpid_r>:
 80213cc:	f7e1 bd18 	b.w	8002e00 <_getpid>

080213d0 <_init>:
 80213d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80213d2:	bf00      	nop
 80213d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80213d6:	bc08      	pop	{r3}
 80213d8:	469e      	mov	lr, r3
 80213da:	4770      	bx	lr

080213dc <_fini>:
 80213dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80213de:	bf00      	nop
 80213e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80213e2:	bc08      	pop	{r3}
 80213e4:	469e      	mov	lr, r3
 80213e6:	4770      	bx	lr
