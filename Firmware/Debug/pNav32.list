
pNav32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b630  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800b7c0  0800b7c0  0001b7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b880  0800b880  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800b880  0800b880  0001b880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b888  0800b888  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b888  0800b888  0001b888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b88c  0800b88c  0001b88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800b890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          000066d0  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200067d0  200067d0  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022eea  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fc4  00000000  00000000  0004301a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bf0  00000000  00000000  00047fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019e8  00000000  00000000  00049bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026cfb  00000000  00000000  0004b5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021a39  00000000  00000000  000722b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d97f7  00000000  00000000  00093cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016d4e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007438  00000000  00000000  0016d534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b7a8 	.word	0x0800b7a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800b7a8 	.word	0x0800b7a8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80004da:	2300      	movs	r3, #0
 80004dc:	607b      	str	r3, [r7, #4]
 80004de:	4b10      	ldr	r3, [pc, #64]	; (8000520 <MX_DMA_Init+0x4c>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	4a0f      	ldr	r2, [pc, #60]	; (8000520 <MX_DMA_Init+0x4c>)
 80004e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004e8:	6313      	str	r3, [r2, #48]	; 0x30
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <MX_DMA_Init+0x4c>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2105      	movs	r1, #5
 80004fa:	203a      	movs	r0, #58	; 0x3a
 80004fc:	f000 fc44 	bl	8000d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000500:	203a      	movs	r0, #58	; 0x3a
 8000502:	f000 fc5d 	bl	8000dc0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2105      	movs	r1, #5
 800050a:	2046      	movs	r0, #70	; 0x46
 800050c:	f000 fc3c 	bl	8000d88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000510:	2046      	movs	r0, #70	; 0x46
 8000512:	f000 fc55 	bl	8000dc0 <HAL_NVIC_EnableIRQ>

}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40023800 	.word	0x40023800

08000524 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000528:	4a08      	ldr	r2, [pc, #32]	; (800054c <MX_FREERTOS_Init+0x28>)
 800052a:	2100      	movs	r1, #0
 800052c:	4808      	ldr	r0, [pc, #32]	; (8000550 <MX_FREERTOS_Init+0x2c>)
 800052e:	f007 ff07 	bl	8008340 <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <MX_FREERTOS_Init+0x30>)
 8000536:	6013      	str	r3, [r2, #0]

  /* creation of blink02 */
  blink02Handle = osThreadNew(StartBlink02, NULL, &blink02_attributes);
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <MX_FREERTOS_Init+0x34>)
 800053a:	2100      	movs	r1, #0
 800053c:	4807      	ldr	r0, [pc, #28]	; (800055c <MX_FREERTOS_Init+0x38>)
 800053e:	f007 feff 	bl	8008340 <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a06      	ldr	r2, [pc, #24]	; (8000560 <MX_FREERTOS_Init+0x3c>)
 8000546:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000548:	bf00      	nop
 800054a:	bd80      	pop	{r7, pc}
 800054c:	0800b818 	.word	0x0800b818
 8000550:	08000565 	.word	0x08000565
 8000554:	2000011c 	.word	0x2000011c
 8000558:	0800b83c 	.word	0x0800b83c
 800055c:	08000589 	.word	0x08000589
 8000560:	20000120 	.word	0x20000120

08000564 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800056c:	f00a fbee 	bl	800ad4c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartBlink01 */
  /* Infinite loop */
  for(;;)
  {   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000570:	2140      	movs	r1, #64	; 0x40
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <StartBlink01+0x20>)
 8000574:	f001 f963 	bl	800183e <HAL_GPIO_TogglePin>
  	  osDelay(500);
 8000578:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800057c:	f007 ff72 	bl	8008464 <osDelay>
  {   HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000580:	e7f6      	b.n	8000570 <StartBlink01+0xc>
 8000582:	bf00      	nop
 8000584:	40020000 	.word	0x40020000

08000588 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	4804      	ldr	r0, [pc, #16]	; (80005a4 <StartBlink02+0x1c>)
 8000594:	f001 f953 	bl	800183e <HAL_GPIO_TogglePin>
	    osDelay(600);
 8000598:	f44f 7016 	mov.w	r0, #600	; 0x258
 800059c:	f007 ff62 	bl	8008464 <osDelay>
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80005a0:	e7f6      	b.n	8000590 <StartBlink02+0x8>
 80005a2:	bf00      	nop
 80005a4:	40020000 	.word	0x40020000

080005a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <MX_GPIO_Init+0x98>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a1e      	ldr	r2, [pc, #120]	; (8000640 <MX_GPIO_Init+0x98>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <MX_GPIO_Init+0x98>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_GPIO_Init+0x98>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a17      	ldr	r2, [pc, #92]	; (8000640 <MX_GPIO_Init+0x98>)
 80005e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_GPIO_Init+0x98>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_GPIO_Init+0x98>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <MX_GPIO_Init+0x98>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_GPIO_Init+0x98>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	21c0      	movs	r1, #192	; 0xc0
 8000616:	480b      	ldr	r0, [pc, #44]	; (8000644 <MX_GPIO_Init+0x9c>)
 8000618:	f001 f8f8 	bl	800180c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800061c:	23c0      	movs	r3, #192	; 0xc0
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4619      	mov	r1, r3
 8000632:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_GPIO_Init+0x9c>)
 8000634:	f000 ff4e 	bl	80014d4 <HAL_GPIO_Init>

}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40023800 	.word	0x40023800
 8000644:	40020000 	.word	0x40020000

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f000 fa7e 	bl	8000b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f80e 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f7ff ffa8 	bl	80005a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000658:	f7ff ff3c 	bl	80004d4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800065c:	f000 f96a 	bl	8000934 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000660:	f007 fe24 	bl	80082ac <osKernelInitialize>
  MX_FREERTOS_Init();
 8000664:	f7ff ff5e 	bl	8000524 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000668:	f007 fe44 	bl	80082f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066c:	e7fe      	b.n	800066c <main+0x24>
	...

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	; 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	2230      	movs	r2, #48	; 0x30
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f00b f88a 	bl	800b798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	4b28      	ldr	r3, [pc, #160]	; (800073c <SystemClock_Config+0xcc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	4a27      	ldr	r2, [pc, #156]	; (800073c <SystemClock_Config+0xcc>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	; 0x40
 80006a4:	4b25      	ldr	r3, [pc, #148]	; (800073c <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	4b22      	ldr	r3, [pc, #136]	; (8000740 <SystemClock_Config+0xd0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <SystemClock_Config+0xd0>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006cc:	2301      	movs	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006e4:	23a8      	movs	r3, #168	; 0xa8
 80006e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ec:	2307      	movs	r3, #7
 80006ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0320 	add.w	r3, r7, #32
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fb39 	bl	8002d6c <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000700:	f000 f832 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2302      	movs	r3, #2
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000710:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800071a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800071c:	f107 030c 	add.w	r3, r7, #12
 8000720:	2105      	movs	r1, #5
 8000722:	4618      	mov	r0, r3
 8000724:	f002 fd9a 	bl	800325c <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800072e:	f000 f81b 	bl	8000768 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3750      	adds	r7, #80	; 0x50
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d101      	bne.n	800075a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000756:	f000 fa1b 	bl	8000b90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40001000 	.word	0x40001000

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	e7fe      	b.n	8000770 <Error_Handler+0x8>
	...

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_MspInit+0x54>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	4a11      	ldr	r2, [pc, #68]	; (80007c8 <HAL_MspInit+0x54>)
 8000784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000788:	6453      	str	r3, [r2, #68]	; 0x44
 800078a:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <HAL_MspInit+0x54>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <HAL_MspInit+0x54>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <HAL_MspInit+0x54>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a4:	6413      	str	r3, [r2, #64]	; 0x40
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <HAL_MspInit+0x54>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	210f      	movs	r1, #15
 80007b6:	f06f 0001 	mvn.w	r0, #1
 80007ba:	f000 fae5 	bl	8000d88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800

080007cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80007dc:	2200      	movs	r2, #0
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	2036      	movs	r0, #54	; 0x36
 80007e2:	f000 fad1 	bl	8000d88 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007e6:	2036      	movs	r0, #54	; 0x36
 80007e8:	f000 faea 	bl	8000dc0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <HAL_InitTick+0xa4>)
 80007f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f4:	4a1e      	ldr	r2, [pc, #120]	; (8000870 <HAL_InitTick+0xa4>)
 80007f6:	f043 0310 	orr.w	r3, r3, #16
 80007fa:	6413      	str	r3, [r2, #64]	; 0x40
 80007fc:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <HAL_InitTick+0xa4>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	f003 0310 	and.w	r3, r3, #16
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000808:	f107 0210 	add.w	r2, r7, #16
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f002 ff42 	bl	800369c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000818:	f002 ff18 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 800081c:	4603      	mov	r3, r0
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000824:	4a13      	ldr	r2, [pc, #76]	; (8000874 <HAL_InitTick+0xa8>)
 8000826:	fba2 2303 	umull	r2, r3, r2, r3
 800082a:	0c9b      	lsrs	r3, r3, #18
 800082c:	3b01      	subs	r3, #1
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000830:	4b11      	ldr	r3, [pc, #68]	; (8000878 <HAL_InitTick+0xac>)
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <HAL_InitTick+0xb0>)
 8000834:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <HAL_InitTick+0xac>)
 8000838:	f240 32e7 	movw	r2, #999	; 0x3e7
 800083c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800083e:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <HAL_InitTick+0xac>)
 8000840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000842:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <HAL_InitTick+0xac>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <HAL_InitTick+0xac>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000850:	4809      	ldr	r0, [pc, #36]	; (8000878 <HAL_InitTick+0xac>)
 8000852:	f002 ff55 	bl	8003700 <HAL_TIM_Base_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d104      	bne.n	8000866 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800085c:	4806      	ldr	r0, [pc, #24]	; (8000878 <HAL_InitTick+0xac>)
 800085e:	f002 ffa9 	bl	80037b4 <HAL_TIM_Base_Start_IT>
 8000862:	4603      	mov	r3, r0
 8000864:	e000      	b.n	8000868 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
}
 8000868:	4618      	mov	r0, r3
 800086a:	3730      	adds	r7, #48	; 0x30
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	431bde83 	.word	0x431bde83
 8000878:	20000124 	.word	0x20000124
 800087c:	40001000 	.word	0x40001000

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <NMI_Handler+0x4>

08000886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <MemManage_Handler+0x4>

08000892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <UsageFault_Handler+0x4>

0800089e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <USART1_IRQHandler+0x10>)
 80008b2:	f003 fa21 	bl	8003cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000016c 	.word	0x2000016c

080008c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <TIM6_DAC_IRQHandler+0x10>)
 80008c6:	f002 ffe5 	bl	8003894 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000124 	.word	0x20000124

080008d4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <DMA2_Stream2_IRQHandler+0x10>)
 80008da:	f000 fbbf 	bl	800105c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200001b0 	.word	0x200001b0

080008e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <OTG_FS_IRQHandler+0x10>)
 80008ee:	f001 f910 	bl	8001b12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200060a4 	.word	0x200060a4

080008fc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <DMA2_Stream7_IRQHandler+0x10>)
 8000902:	f000 fbab 	bl	800105c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000210 	.word	0x20000210

08000910 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <SystemInit+0x20>)
 8000916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <SystemInit+0x20>)
 800091c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 800093a:	4a12      	ldr	r2, [pc, #72]	; (8000984 <MX_USART1_UART_Init+0x50>)
 800093c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USART1_UART_Init+0x4c>)
 800096c:	f003 f976 	bl	8003c5c <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000976:	f7ff fef7 	bl	8000768 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000016c 	.word	0x2000016c
 8000984:	40011000 	.word	0x40011000

08000988 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a4d      	ldr	r2, [pc, #308]	; (8000adc <HAL_UART_MspInit+0x154>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	f040 8094 	bne.w	8000ad4 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	4b4b      	ldr	r3, [pc, #300]	; (8000ae0 <HAL_UART_MspInit+0x158>)
 80009b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b4:	4a4a      	ldr	r2, [pc, #296]	; (8000ae0 <HAL_UART_MspInit+0x158>)
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	6453      	str	r3, [r2, #68]	; 0x44
 80009bc:	4b48      	ldr	r3, [pc, #288]	; (8000ae0 <HAL_UART_MspInit+0x158>)
 80009be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c0:	f003 0310 	and.w	r3, r3, #16
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	4b44      	ldr	r3, [pc, #272]	; (8000ae0 <HAL_UART_MspInit+0x158>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	4a43      	ldr	r2, [pc, #268]	; (8000ae0 <HAL_UART_MspInit+0x158>)
 80009d2:	f043 0301 	orr.w	r3, r3, #1
 80009d6:	6313      	str	r3, [r2, #48]	; 0x30
 80009d8:	4b41      	ldr	r3, [pc, #260]	; (8000ae0 <HAL_UART_MspInit+0x158>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009f6:	2307      	movs	r3, #7
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	4838      	ldr	r0, [pc, #224]	; (8000ae4 <HAL_UART_MspInit+0x15c>)
 8000a02:	f000 fd67 	bl	80014d4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000a06:	4b38      	ldr	r3, [pc, #224]	; (8000ae8 <HAL_UART_MspInit+0x160>)
 8000a08:	4a38      	ldr	r2, [pc, #224]	; (8000aec <HAL_UART_MspInit+0x164>)
 8000a0a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000a0c:	4b36      	ldr	r3, [pc, #216]	; (8000ae8 <HAL_UART_MspInit+0x160>)
 8000a0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a12:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a14:	4b34      	ldr	r3, [pc, #208]	; (8000ae8 <HAL_UART_MspInit+0x160>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a1a:	4b33      	ldr	r3, [pc, #204]	; (8000ae8 <HAL_UART_MspInit+0x160>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a20:	4b31      	ldr	r3, [pc, #196]	; (8000ae8 <HAL_UART_MspInit+0x160>)
 8000a22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a26:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a28:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <HAL_UART_MspInit+0x160>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ae8 <HAL_UART_MspInit+0x160>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000a34:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <HAL_UART_MspInit+0x160>)
 8000a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a3a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ae8 <HAL_UART_MspInit+0x160>)
 8000a3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a42:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a44:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <HAL_UART_MspInit+0x160>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a4a:	4827      	ldr	r0, [pc, #156]	; (8000ae8 <HAL_UART_MspInit+0x160>)
 8000a4c:	f000 f9c6 	bl	8000ddc <HAL_DMA_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8000a56:	f7ff fe87 	bl	8000768 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a22      	ldr	r2, [pc, #136]	; (8000ae8 <HAL_UART_MspInit+0x160>)
 8000a5e:	639a      	str	r2, [r3, #56]	; 0x38
 8000a60:	4a21      	ldr	r2, [pc, #132]	; (8000ae8 <HAL_UART_MspInit+0x160>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000a66:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <HAL_UART_MspInit+0x168>)
 8000a68:	4a22      	ldr	r2, [pc, #136]	; (8000af4 <HAL_UART_MspInit+0x16c>)
 8000a6a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000a6c:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <HAL_UART_MspInit+0x168>)
 8000a6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a72:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a74:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <HAL_UART_MspInit+0x168>)
 8000a76:	2240      	movs	r2, #64	; 0x40
 8000a78:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a7a:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <HAL_UART_MspInit+0x168>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a80:	4b1b      	ldr	r3, [pc, #108]	; (8000af0 <HAL_UART_MspInit+0x168>)
 8000a82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a86:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a88:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <HAL_UART_MspInit+0x168>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_UART_MspInit+0x168>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <HAL_UART_MspInit+0x168>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_UART_MspInit+0x168>)
 8000a9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aa0:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aa2:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <HAL_UART_MspInit+0x168>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000aa8:	4811      	ldr	r0, [pc, #68]	; (8000af0 <HAL_UART_MspInit+0x168>)
 8000aaa:	f000 f997 	bl	8000ddc <HAL_DMA_Init>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8000ab4:	f7ff fe58 	bl	8000768 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <HAL_UART_MspInit+0x168>)
 8000abc:	635a      	str	r2, [r3, #52]	; 0x34
 8000abe:	4a0c      	ldr	r2, [pc, #48]	; (8000af0 <HAL_UART_MspInit+0x168>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2105      	movs	r1, #5
 8000ac8:	2025      	movs	r0, #37	; 0x25
 8000aca:	f000 f95d 	bl	8000d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ace:	2025      	movs	r0, #37	; 0x25
 8000ad0:	f000 f976 	bl	8000dc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	3728      	adds	r7, #40	; 0x28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40011000 	.word	0x40011000
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	200001b0 	.word	0x200001b0
 8000aec:	40026440 	.word	0x40026440
 8000af0:	20000210 	.word	0x20000210
 8000af4:	400264b8 	.word	0x400264b8

08000af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000afe:	490e      	ldr	r1, [pc, #56]	; (8000b38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b00:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b14:	4c0b      	ldr	r4, [pc, #44]	; (8000b44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b22:	f7ff fef5 	bl	8000910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b26:	f00a fe05 	bl	800b734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2a:	f7ff fd8d 	bl	8000648 <main>
  bx  lr    
 8000b2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8000b3c:	0800b890 	.word	0x0800b890
  ldr r2, =_sbss
 8000b40:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8000b44:	200067d0 	.word	0x200067d0

08000b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC_IRQHandler>
	...

08000b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <HAL_Init+0x40>)
 8000b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <HAL_Init+0x40>)
 8000b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_Init+0x40>)
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f8fc 	bl	8000d72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f7ff fe26 	bl	80007cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fdf8 	bl	8000774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023c00 	.word	0x40023c00

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000270 	.word	0x20000270

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000270 	.word	0x20000270

08000bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff ffee 	bl	8000bb8 <HAL_GetTick>
 8000bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000be8:	d005      	beq.n	8000bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_Delay+0x44>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bf6:	bf00      	nop
 8000bf8:	f7ff ffde 	bl	8000bb8 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d8f7      	bhi.n	8000bf8 <HAL_Delay+0x28>
  {
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4907      	ldr	r1, [pc, #28]	; (8000cb4 <__NVIC_EnableIRQ+0x38>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db0a      	blt.n	8000ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	490c      	ldr	r1, [pc, #48]	; (8000d04 <__NVIC_SetPriority+0x4c>)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	0112      	lsls	r2, r2, #4
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ce0:	e00a      	b.n	8000cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4908      	ldr	r1, [pc, #32]	; (8000d08 <__NVIC_SetPriority+0x50>)
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	3b04      	subs	r3, #4
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	440b      	add	r3, r1
 8000cf6:	761a      	strb	r2, [r3, #24]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f1c3 0307 	rsb	r3, r3, #7
 8000d26:	2b04      	cmp	r3, #4
 8000d28:	bf28      	it	cs
 8000d2a:	2304      	movcs	r3, #4
 8000d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3304      	adds	r3, #4
 8000d32:	2b06      	cmp	r3, #6
 8000d34:	d902      	bls.n	8000d3c <NVIC_EncodePriority+0x30>
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3b03      	subs	r3, #3
 8000d3a:	e000      	b.n	8000d3e <NVIC_EncodePriority+0x32>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	401a      	ands	r2, r3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5e:	43d9      	mvns	r1, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	4313      	orrs	r3, r2
         );
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3724      	adds	r7, #36	; 0x24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ff4c 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d9a:	f7ff ff61 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000d9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	68b9      	ldr	r1, [r7, #8]
 8000da4:	6978      	ldr	r0, [r7, #20]
 8000da6:	f7ff ffb1 	bl	8000d0c <NVIC_EncodePriority>
 8000daa:	4602      	mov	r2, r0
 8000dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db0:	4611      	mov	r1, r2
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff ff80 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000db8:	bf00      	nop
 8000dba:	3718      	adds	r7, #24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff54 	bl	8000c7c <__NVIC_EnableIRQ>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000de8:	f7ff fee6 	bl	8000bb8 <HAL_GetTick>
 8000dec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e099      	b.n	8000f2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f022 0201 	bic.w	r2, r2, #1
 8000e16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e18:	e00f      	b.n	8000e3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e1a:	f7ff fecd 	bl	8000bb8 <HAL_GetTick>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	2b05      	cmp	r3, #5
 8000e26:	d908      	bls.n	8000e3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2220      	movs	r2, #32
 8000e2c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2203      	movs	r2, #3
 8000e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e078      	b.n	8000f2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1e8      	bne.n	8000e1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	4b38      	ldr	r3, [pc, #224]	; (8000f34 <HAL_DMA_Init+0x158>)
 8000e54:	4013      	ands	r3, r2
 8000e56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6a1b      	ldr	r3, [r3, #32]
 8000e84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e90:	2b04      	cmp	r3, #4
 8000e92:	d107      	bne.n	8000ea4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	f023 0307 	bic.w	r3, r3, #7
 8000eba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d117      	bne.n	8000efe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d00e      	beq.n	8000efe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f000 fa7b 	bl	80013dc <DMA_CheckFifoParam>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d008      	beq.n	8000efe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2240      	movs	r2, #64	; 0x40
 8000ef0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000efa:	2301      	movs	r3, #1
 8000efc:	e016      	b.n	8000f2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 fa32 	bl	8001370 <DMA_CalcBaseAndBitshift>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f14:	223f      	movs	r2, #63	; 0x3f
 8000f16:	409a      	lsls	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2201      	movs	r2, #1
 8000f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	f010803f 	.word	0xf010803f

08000f38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f46:	f7ff fe37 	bl	8000bb8 <HAL_GetTick>
 8000f4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d008      	beq.n	8000f6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e052      	b.n	8001010 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0216 	bic.w	r2, r2, #22
 8000f78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	695a      	ldr	r2, [r3, #20]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d103      	bne.n	8000f9a <HAL_DMA_Abort+0x62>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d007      	beq.n	8000faa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 0208 	bic.w	r2, r2, #8
 8000fa8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f022 0201 	bic.w	r2, r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fba:	e013      	b.n	8000fe4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fbc:	f7ff fdfc 	bl	8000bb8 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b05      	cmp	r3, #5
 8000fc8:	d90c      	bls.n	8000fe4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2220      	movs	r2, #32
 8000fce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e015      	b.n	8001010 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1e4      	bne.n	8000fbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff6:	223f      	movs	r2, #63	; 0x3f
 8000ff8:	409a      	lsls	r2, r3
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b02      	cmp	r3, #2
 800102a:	d004      	beq.n	8001036 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2280      	movs	r2, #128	; 0x80
 8001030:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00c      	b.n	8001050 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2205      	movs	r2, #5
 800103a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f022 0201 	bic.w	r2, r2, #1
 800104c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001068:	4b8e      	ldr	r3, [pc, #568]	; (80012a4 <HAL_DMA_IRQHandler+0x248>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a8e      	ldr	r2, [pc, #568]	; (80012a8 <HAL_DMA_IRQHandler+0x24c>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	0a9b      	lsrs	r3, r3, #10
 8001074:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001086:	2208      	movs	r2, #8
 8001088:	409a      	lsls	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4013      	ands	r3, r2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d01a      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	d013      	beq.n	80010c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0204 	bic.w	r2, r2, #4
 80010ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b4:	2208      	movs	r2, #8
 80010b6:	409a      	lsls	r2, r3
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010c0:	f043 0201 	orr.w	r2, r3, #1
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010cc:	2201      	movs	r2, #1
 80010ce:	409a      	lsls	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4013      	ands	r3, r2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d012      	beq.n	80010fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00b      	beq.n	80010fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ea:	2201      	movs	r2, #1
 80010ec:	409a      	lsls	r2, r3
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f6:	f043 0202 	orr.w	r2, r3, #2
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001102:	2204      	movs	r2, #4
 8001104:	409a      	lsls	r2, r3
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4013      	ands	r3, r2
 800110a:	2b00      	cmp	r3, #0
 800110c:	d012      	beq.n	8001134 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d00b      	beq.n	8001134 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001120:	2204      	movs	r2, #4
 8001122:	409a      	lsls	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800112c:	f043 0204 	orr.w	r2, r3, #4
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001138:	2210      	movs	r2, #16
 800113a:	409a      	lsls	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4013      	ands	r3, r2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d043      	beq.n	80011cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d03c      	beq.n	80011cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001156:	2210      	movs	r2, #16
 8001158:	409a      	lsls	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d018      	beq.n	800119e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d108      	bne.n	800118c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	2b00      	cmp	r3, #0
 8001180:	d024      	beq.n	80011cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	4798      	blx	r3
 800118a:	e01f      	b.n	80011cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001190:	2b00      	cmp	r3, #0
 8001192:	d01b      	beq.n	80011cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	4798      	blx	r3
 800119c:	e016      	b.n	80011cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d107      	bne.n	80011bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0208 	bic.w	r2, r2, #8
 80011ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d0:	2220      	movs	r2, #32
 80011d2:	409a      	lsls	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f000 808f 	beq.w	80012fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 8087 	beq.w	80012fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011f2:	2220      	movs	r2, #32
 80011f4:	409a      	lsls	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b05      	cmp	r3, #5
 8001204:	d136      	bne.n	8001274 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0216 	bic.w	r2, r2, #22
 8001214:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	695a      	ldr	r2, [r3, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001224:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	2b00      	cmp	r3, #0
 800122c:	d103      	bne.n	8001236 <HAL_DMA_IRQHandler+0x1da>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001232:	2b00      	cmp	r3, #0
 8001234:	d007      	beq.n	8001246 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f022 0208 	bic.w	r2, r2, #8
 8001244:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124a:	223f      	movs	r2, #63	; 0x3f
 800124c:	409a      	lsls	r2, r3
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001266:	2b00      	cmp	r3, #0
 8001268:	d07e      	beq.n	8001368 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	4798      	blx	r3
        }
        return;
 8001272:	e079      	b.n	8001368 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d01d      	beq.n	80012be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10d      	bne.n	80012ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001294:	2b00      	cmp	r3, #0
 8001296:	d031      	beq.n	80012fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	4798      	blx	r3
 80012a0:	e02c      	b.n	80012fc <HAL_DMA_IRQHandler+0x2a0>
 80012a2:	bf00      	nop
 80012a4:	20000000 	.word	0x20000000
 80012a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d023      	beq.n	80012fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	4798      	blx	r3
 80012bc:	e01e      	b.n	80012fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10f      	bne.n	80012ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0210 	bic.w	r2, r2, #16
 80012da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2201      	movs	r2, #1
 80012e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001300:	2b00      	cmp	r3, #0
 8001302:	d032      	beq.n	800136a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d022      	beq.n	8001356 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2205      	movs	r2, #5
 8001314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	3301      	adds	r3, #1
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	429a      	cmp	r2, r3
 8001332:	d307      	bcc.n	8001344 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f2      	bne.n	8001328 <HAL_DMA_IRQHandler+0x2cc>
 8001342:	e000      	b.n	8001346 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001344:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	4798      	blx	r3
 8001366:	e000      	b.n	800136a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001368:	bf00      	nop
    }
  }
}
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	b2db      	uxtb	r3, r3
 800137e:	3b10      	subs	r3, #16
 8001380:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <DMA_CalcBaseAndBitshift+0x64>)
 8001382:	fba2 2303 	umull	r2, r3, r2, r3
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800138a:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <DMA_CalcBaseAndBitshift+0x68>)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b03      	cmp	r3, #3
 800139c:	d909      	bls.n	80013b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013a6:	f023 0303 	bic.w	r3, r3, #3
 80013aa:	1d1a      	adds	r2, r3, #4
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	659a      	str	r2, [r3, #88]	; 0x58
 80013b0:	e007      	b.n	80013c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013ba:	f023 0303 	bic.w	r3, r3, #3
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	aaaaaaab 	.word	0xaaaaaaab
 80013d8:	0800b878 	.word	0x0800b878

080013dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013e4:	2300      	movs	r3, #0
 80013e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d11f      	bne.n	8001436 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d856      	bhi.n	80014aa <DMA_CheckFifoParam+0xce>
 80013fc:	a201      	add	r2, pc, #4	; (adr r2, 8001404 <DMA_CheckFifoParam+0x28>)
 80013fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001402:	bf00      	nop
 8001404:	08001415 	.word	0x08001415
 8001408:	08001427 	.word	0x08001427
 800140c:	08001415 	.word	0x08001415
 8001410:	080014ab 	.word	0x080014ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d046      	beq.n	80014ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001424:	e043      	b.n	80014ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800142e:	d140      	bne.n	80014b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001434:	e03d      	b.n	80014b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800143e:	d121      	bne.n	8001484 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b03      	cmp	r3, #3
 8001444:	d837      	bhi.n	80014b6 <DMA_CheckFifoParam+0xda>
 8001446:	a201      	add	r2, pc, #4	; (adr r2, 800144c <DMA_CheckFifoParam+0x70>)
 8001448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144c:	0800145d 	.word	0x0800145d
 8001450:	08001463 	.word	0x08001463
 8001454:	0800145d 	.word	0x0800145d
 8001458:	08001475 	.word	0x08001475
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
      break;
 8001460:	e030      	b.n	80014c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001466:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d025      	beq.n	80014ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001472:	e022      	b.n	80014ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800147c:	d11f      	bne.n	80014be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001482:	e01c      	b.n	80014be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	2b02      	cmp	r3, #2
 8001488:	d903      	bls.n	8001492 <DMA_CheckFifoParam+0xb6>
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	2b03      	cmp	r3, #3
 800148e:	d003      	beq.n	8001498 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001490:	e018      	b.n	80014c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
      break;
 8001496:	e015      	b.n	80014c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00e      	beq.n	80014c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	73fb      	strb	r3, [r7, #15]
      break;
 80014a8:	e00b      	b.n	80014c2 <DMA_CheckFifoParam+0xe6>
      break;
 80014aa:	bf00      	nop
 80014ac:	e00a      	b.n	80014c4 <DMA_CheckFifoParam+0xe8>
      break;
 80014ae:	bf00      	nop
 80014b0:	e008      	b.n	80014c4 <DMA_CheckFifoParam+0xe8>
      break;
 80014b2:	bf00      	nop
 80014b4:	e006      	b.n	80014c4 <DMA_CheckFifoParam+0xe8>
      break;
 80014b6:	bf00      	nop
 80014b8:	e004      	b.n	80014c4 <DMA_CheckFifoParam+0xe8>
      break;
 80014ba:	bf00      	nop
 80014bc:	e002      	b.n	80014c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80014be:	bf00      	nop
 80014c0:	e000      	b.n	80014c4 <DMA_CheckFifoParam+0xe8>
      break;
 80014c2:	bf00      	nop
    }
  } 
  
  return status; 
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3714      	adds	r7, #20
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop

080014d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	e16b      	b.n	80017c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014f0:	2201      	movs	r2, #1
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	429a      	cmp	r2, r3
 800150a:	f040 815a 	bne.w	80017c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	2b01      	cmp	r3, #1
 8001518:	d005      	beq.n	8001526 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001522:	2b02      	cmp	r3, #2
 8001524:	d130      	bne.n	8001588 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800155c:	2201      	movs	r2, #1
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	f003 0201 	and.w	r2, r3, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b03      	cmp	r3, #3
 8001592:	d017      	beq.n	80015c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4013      	ands	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d123      	bne.n	8001618 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	08da      	lsrs	r2, r3, #3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3208      	adds	r2, #8
 80015d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	220f      	movs	r2, #15
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	08da      	lsrs	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3208      	adds	r2, #8
 8001612:	69b9      	ldr	r1, [r7, #24]
 8001614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0203 	and.w	r2, r3, #3
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80b4 	beq.w	80017c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	60fb      	str	r3, [r7, #12]
 800165e:	4b60      	ldr	r3, [pc, #384]	; (80017e0 <HAL_GPIO_Init+0x30c>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	4a5f      	ldr	r2, [pc, #380]	; (80017e0 <HAL_GPIO_Init+0x30c>)
 8001664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
 800166a:	4b5d      	ldr	r3, [pc, #372]	; (80017e0 <HAL_GPIO_Init+0x30c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001676:	4a5b      	ldr	r2, [pc, #364]	; (80017e4 <HAL_GPIO_Init+0x310>)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	3302      	adds	r3, #2
 800167e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	220f      	movs	r2, #15
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43db      	mvns	r3, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4013      	ands	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a52      	ldr	r2, [pc, #328]	; (80017e8 <HAL_GPIO_Init+0x314>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d02b      	beq.n	80016fa <HAL_GPIO_Init+0x226>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a51      	ldr	r2, [pc, #324]	; (80017ec <HAL_GPIO_Init+0x318>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d025      	beq.n	80016f6 <HAL_GPIO_Init+0x222>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a50      	ldr	r2, [pc, #320]	; (80017f0 <HAL_GPIO_Init+0x31c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d01f      	beq.n	80016f2 <HAL_GPIO_Init+0x21e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4f      	ldr	r2, [pc, #316]	; (80017f4 <HAL_GPIO_Init+0x320>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d019      	beq.n	80016ee <HAL_GPIO_Init+0x21a>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4e      	ldr	r2, [pc, #312]	; (80017f8 <HAL_GPIO_Init+0x324>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d013      	beq.n	80016ea <HAL_GPIO_Init+0x216>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4d      	ldr	r2, [pc, #308]	; (80017fc <HAL_GPIO_Init+0x328>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d00d      	beq.n	80016e6 <HAL_GPIO_Init+0x212>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4c      	ldr	r2, [pc, #304]	; (8001800 <HAL_GPIO_Init+0x32c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d007      	beq.n	80016e2 <HAL_GPIO_Init+0x20e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4b      	ldr	r2, [pc, #300]	; (8001804 <HAL_GPIO_Init+0x330>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d101      	bne.n	80016de <HAL_GPIO_Init+0x20a>
 80016da:	2307      	movs	r3, #7
 80016dc:	e00e      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016de:	2308      	movs	r3, #8
 80016e0:	e00c      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016e2:	2306      	movs	r3, #6
 80016e4:	e00a      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016e6:	2305      	movs	r3, #5
 80016e8:	e008      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016ea:	2304      	movs	r3, #4
 80016ec:	e006      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016ee:	2303      	movs	r3, #3
 80016f0:	e004      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e002      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <HAL_GPIO_Init+0x228>
 80016fa:	2300      	movs	r3, #0
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	f002 0203 	and.w	r2, r2, #3
 8001702:	0092      	lsls	r2, r2, #2
 8001704:	4093      	lsls	r3, r2
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800170c:	4935      	ldr	r1, [pc, #212]	; (80017e4 <HAL_GPIO_Init+0x310>)
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3302      	adds	r3, #2
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800171a:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <HAL_GPIO_Init+0x334>)
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800173e:	4a32      	ldr	r2, [pc, #200]	; (8001808 <HAL_GPIO_Init+0x334>)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001744:	4b30      	ldr	r3, [pc, #192]	; (8001808 <HAL_GPIO_Init+0x334>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001768:	4a27      	ldr	r2, [pc, #156]	; (8001808 <HAL_GPIO_Init+0x334>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_GPIO_Init+0x334>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	43db      	mvns	r3, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4013      	ands	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001792:	4a1d      	ldr	r2, [pc, #116]	; (8001808 <HAL_GPIO_Init+0x334>)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <HAL_GPIO_Init+0x334>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017bc:	4a12      	ldr	r2, [pc, #72]	; (8001808 <HAL_GPIO_Init+0x334>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3301      	adds	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b0f      	cmp	r3, #15
 80017cc:	f67f ae90 	bls.w	80014f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	3724      	adds	r7, #36	; 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40013800 	.word	0x40013800
 80017e8:	40020000 	.word	0x40020000
 80017ec:	40020400 	.word	0x40020400
 80017f0:	40020800 	.word	0x40020800
 80017f4:	40020c00 	.word	0x40020c00
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40021400 	.word	0x40021400
 8001800:	40021800 	.word	0x40021800
 8001804:	40021c00 	.word	0x40021c00
 8001808:	40013c00 	.word	0x40013c00

0800180c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
 8001818:	4613      	mov	r3, r2
 800181a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800181c:	787b      	ldrb	r3, [r7, #1]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001822:	887a      	ldrh	r2, [r7, #2]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001828:	e003      	b.n	8001832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800182a:	887b      	ldrh	r3, [r7, #2]
 800182c:	041a      	lsls	r2, r3, #16
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	619a      	str	r2, [r3, #24]
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800183e:	b480      	push	{r7}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	460b      	mov	r3, r1
 8001848:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001850:	887a      	ldrh	r2, [r7, #2]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4013      	ands	r3, r2
 8001856:	041a      	lsls	r2, r3, #16
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	43d9      	mvns	r1, r3
 800185c:	887b      	ldrh	r3, [r7, #2]
 800185e:	400b      	ands	r3, r1
 8001860:	431a      	orrs	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	619a      	str	r2, [r3, #24]
}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001872:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001874:	b08f      	sub	sp, #60	; 0x3c
 8001876:	af0a      	add	r7, sp, #40	; 0x28
 8001878:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d101      	bne.n	8001884 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e10f      	b.n	8001aa4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d106      	bne.n	80018a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f009 fc34 	bl	800b10c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2203      	movs	r2, #3
 80018a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 f9f3 	bl	8004cae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	603b      	str	r3, [r7, #0]
 80018ce:	687e      	ldr	r6, [r7, #4]
 80018d0:	466d      	mov	r5, sp
 80018d2:	f106 0410 	add.w	r4, r6, #16
 80018d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80018e6:	1d33      	adds	r3, r6, #4
 80018e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018ea:	6838      	ldr	r0, [r7, #0]
 80018ec:	f003 f8ca 	bl	8004a84 <USB_CoreInit>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d005      	beq.n	8001902 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2202      	movs	r2, #2
 80018fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e0d0      	b.n	8001aa4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f003 f9e1 	bl	8004cd0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
 8001912:	e04a      	b.n	80019aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001914:	7bfa      	ldrb	r2, [r7, #15]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	333d      	adds	r3, #61	; 0x3d
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001928:	7bfa      	ldrb	r2, [r7, #15]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	333c      	adds	r3, #60	; 0x3c
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	b298      	uxth	r0, r3
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	3344      	adds	r3, #68	; 0x44
 8001950:	4602      	mov	r2, r0
 8001952:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	4413      	add	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	3340      	adds	r3, #64	; 0x40
 8001964:	2200      	movs	r2, #0
 8001966:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001968:	7bfa      	ldrb	r2, [r7, #15]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	3348      	adds	r3, #72	; 0x48
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	334c      	adds	r3, #76	; 0x4c
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001990:	7bfa      	ldrb	r2, [r7, #15]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	4613      	mov	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	3354      	adds	r3, #84	; 0x54
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	3301      	adds	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
 80019aa:	7bfa      	ldrb	r2, [r7, #15]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d3af      	bcc.n	8001914 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b4:	2300      	movs	r3, #0
 80019b6:	73fb      	strb	r3, [r7, #15]
 80019b8:	e044      	b.n	8001a44 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019ba:	7bfa      	ldrb	r2, [r7, #15]
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	4613      	mov	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4413      	add	r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	440b      	add	r3, r1
 80019c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019d0:	7bfa      	ldrb	r2, [r7, #15]
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4413      	add	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80019e2:	7bfa      	ldrb	r2, [r7, #15]
 80019e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019fc:	7bfa      	ldrb	r2, [r7, #15]
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	4613      	mov	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	4413      	add	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a12:	7bfa      	ldrb	r2, [r7, #15]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	3301      	adds	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d3b5      	bcc.n	80019ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	687e      	ldr	r6, [r7, #4]
 8001a56:	466d      	mov	r5, sp
 8001a58:	f106 0410 	add.w	r4, r6, #16
 8001a5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a68:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a6c:	1d33      	adds	r3, r6, #4
 8001a6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a70:	6838      	ldr	r0, [r7, #0]
 8001a72:	f003 f979 	bl	8004d68 <USB_DevInit>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e00d      	b.n	8001aa4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f004 fac8 	bl	8006032 <USB_DevDisconnect>

  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_PCD_Start+0x1c>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e020      	b.n	8001b0a <HAL_PCD_Start+0x5e>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d109      	bne.n	8001aec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d005      	beq.n	8001aec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f003 f8cb 	bl	8004c8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f004 fa78 	bl	8005ff0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b12:	b590      	push	{r4, r7, lr}
 8001b14:	b08d      	sub	sp, #52	; 0x34
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f004 fb36 	bl	800619a <USB_GetMode>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f040 848a 	bne.w	800244a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f004 fa9a 	bl	8006074 <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8480 	beq.w	8002448 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f004 fa87 	bl	8006074 <USB_ReadInterrupts>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d107      	bne.n	8001b80 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f002 0202 	and.w	r2, r2, #2
 8001b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f004 fa75 	bl	8006074 <USB_ReadInterrupts>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	2b10      	cmp	r3, #16
 8001b92:	d161      	bne.n	8001c58 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699a      	ldr	r2, [r3, #24]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0210 	bic.w	r2, r2, #16
 8001ba2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	f003 020f 	and.w	r2, r3, #15
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	0c5b      	lsrs	r3, r3, #17
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d124      	bne.n	8001c1a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d035      	beq.n	8001c48 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	091b      	lsrs	r3, r3, #4
 8001be4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001be6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	6a38      	ldr	r0, [r7, #32]
 8001bf0:	f004 f8ac 	bl	8005d4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c00:	441a      	add	r2, r3
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	6a1a      	ldr	r2, [r3, #32]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c12:	441a      	add	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	621a      	str	r2, [r3, #32]
 8001c18:	e016      	b.n	8001c48 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	0c5b      	lsrs	r3, r3, #17
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	2b06      	cmp	r3, #6
 8001c24:	d110      	bne.n	8001c48 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6a38      	ldr	r0, [r7, #32]
 8001c32:	f004 f88b 	bl	8005d4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	6a1a      	ldr	r2, [r3, #32]
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c42:	441a      	add	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0210 	orr.w	r2, r2, #16
 8001c56:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f004 fa09 	bl	8006074 <USB_ReadInterrupts>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001c6c:	f040 80a7 	bne.w	8001dbe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f004 fa0e 	bl	800609a <USB_ReadDevAllOutEpInterrupt>
 8001c7e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001c80:	e099      	b.n	8001db6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 808e 	beq.w	8001daa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f004 fa32 	bl	8006102 <USB_ReadDevOutEPInterrupt>
 8001c9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00c      	beq.n	8001cc4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	015a      	lsls	r2, r3, #5
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	2301      	movs	r3, #1
 8001cba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001cbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fec2 	bl	8002a48 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00c      	beq.n	8001ce8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	015a      	lsls	r2, r3, #5
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2308      	movs	r3, #8
 8001cde:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ce0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 ff98 	bl	8002c18 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	f003 0310 	and.w	r3, r3, #16
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d008      	beq.n	8001d04 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	015a      	lsls	r2, r3, #5
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cfe:	461a      	mov	r2, r3
 8001d00:	2310      	movs	r3, #16
 8001d02:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d030      	beq.n	8001d70 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b80      	cmp	r3, #128	; 0x80
 8001d18:	d109      	bne.n	8001d2e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d2c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d30:	4613      	mov	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	4413      	add	r3, r2
 8001d40:	3304      	adds	r3, #4
 8001d42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	78db      	ldrb	r3, [r3, #3]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d108      	bne.n	8001d5e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	4619      	mov	r1, r3
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f009 fadd 	bl	800b318 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	015a      	lsls	r2, r3, #5
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d008      	beq.n	8001d8c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	015a      	lsls	r2, r3, #5
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	4413      	add	r3, r2
 8001d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d86:	461a      	mov	r2, r3
 8001d88:	2320      	movs	r3, #32
 8001d8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d009      	beq.n	8001daa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	015a      	lsls	r2, r3, #5
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001da2:	461a      	mov	r2, r3
 8001da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	3301      	adds	r3, #1
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db2:	085b      	lsrs	r3, r3, #1
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f47f af62 	bne.w	8001c82 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f004 f956 	bl	8006074 <USB_ReadInterrupts>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001dd2:	f040 80db 	bne.w	8001f8c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f004 f977 	bl	80060ce <USB_ReadDevAllInEpInterrupt>
 8001de0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001de6:	e0cd      	b.n	8001f84 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 80c2 	beq.w	8001f78 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 f99d 	bl	800613e <USB_ReadDevInEPInterrupt>
 8001e04:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d057      	beq.n	8001ec0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	2201      	movs	r2, #1
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69f9      	ldr	r1, [r7, #28]
 8001e2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e30:	4013      	ands	r3, r2
 8001e32:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	015a      	lsls	r2, r3, #5
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e40:	461a      	mov	r2, r3
 8001e42:	2301      	movs	r3, #1
 8001e44:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d132      	bne.n	8001eb4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e52:	4613      	mov	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	334c      	adds	r3, #76	; 0x4c
 8001e5e:	6819      	ldr	r1, [r3, #0]
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4403      	add	r3, r0
 8001e6e:	3348      	adds	r3, #72	; 0x48
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4419      	add	r1, r3
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	4403      	add	r3, r0
 8001e82:	334c      	adds	r3, #76	; 0x4c
 8001e84:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d113      	bne.n	8001eb4 <HAL_PCD_IRQHandler+0x3a2>
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e90:	4613      	mov	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	4413      	add	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	3354      	adds	r3, #84	; 0x54
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d108      	bne.n	8001eb4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6818      	ldr	r0, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001eac:	461a      	mov	r2, r3
 8001eae:	2101      	movs	r1, #1
 8001eb0:	f004 f9a4 	bl	80061fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	4619      	mov	r1, r3
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f009 f9a7 	bl	800b20e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	2308      	movs	r3, #8
 8001eda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2310      	movs	r3, #16
 8001ef6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d008      	beq.n	8001f14 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	015a      	lsls	r2, r3, #5
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	4413      	add	r3, r2
 8001f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f0e:	461a      	mov	r2, r3
 8001f10:	2340      	movs	r3, #64	; 0x40
 8001f12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d023      	beq.n	8001f66 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001f1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f20:	6a38      	ldr	r0, [r7, #32]
 8001f22:	f003 f885 	bl	8005030 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	3338      	adds	r3, #56	; 0x38
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	3304      	adds	r3, #4
 8001f38:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	78db      	ldrb	r3, [r3, #3]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d108      	bne.n	8001f54 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2200      	movs	r2, #0
 8001f46:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f009 f9f4 	bl	800b33c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f60:	461a      	mov	r2, r3
 8001f62:	2302      	movs	r3, #2
 8001f64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 fcdb 	bl	800292e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	085b      	lsrs	r3, r3, #1
 8001f82:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f47f af2e 	bne.w	8001de8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f004 f86f 	bl	8006074 <USB_ReadInterrupts>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fa0:	d122      	bne.n	8001fe8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	69fa      	ldr	r2, [r7, #28]
 8001fac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d108      	bne.n	8001fd2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001fc8:	2100      	movs	r1, #0
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 fec2 	bl	8002d54 <HAL_PCDEx_LPM_Callback>
 8001fd0:	e002      	b.n	8001fd8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f009 f992 	bl	800b2fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	695a      	ldr	r2, [r3, #20]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001fe6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f004 f841 	bl	8006074 <USB_ReadInterrupts>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ffc:	d112      	bne.n	8002024 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b01      	cmp	r3, #1
 800200c:	d102      	bne.n	8002014 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f009 f94e 	bl	800b2b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002022:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f004 f823 	bl	8006074 <USB_ReadInterrupts>
 800202e:	4603      	mov	r3, r0
 8002030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002038:	f040 80b7 	bne.w	80021aa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	69fa      	ldr	r2, [r7, #28]
 8002046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2110      	movs	r1, #16
 8002056:	4618      	mov	r0, r3
 8002058:	f002 ffea 	bl	8005030 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800205c:	2300      	movs	r3, #0
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002060:	e046      	b.n	80020f0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	4413      	add	r3, r2
 800206a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800206e:	461a      	mov	r2, r3
 8002070:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002074:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	4413      	add	r3, r2
 800207e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002086:	0151      	lsls	r1, r2, #5
 8002088:	69fa      	ldr	r2, [r7, #28]
 800208a:	440a      	add	r2, r1
 800208c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002090:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002094:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	4413      	add	r3, r2
 800209e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a2:	461a      	mov	r2, r3
 80020a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80020aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ac:	015a      	lsls	r2, r3, #5
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	4413      	add	r3, r2
 80020b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020ba:	0151      	lsls	r1, r2, #5
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	440a      	add	r2, r1
 80020c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80020c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80020ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020da:	0151      	lsls	r1, r2, #5
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	440a      	add	r2, r1
 80020e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80020e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ec:	3301      	adds	r3, #1
 80020ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d3b3      	bcc.n	8002062 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	69fa      	ldr	r2, [r7, #28]
 8002104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002108:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800210c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	2b00      	cmp	r3, #0
 8002114:	d016      	beq.n	8002144 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800211c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002126:	f043 030b 	orr.w	r3, r3, #11
 800212a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800213c:	f043 030b 	orr.w	r3, r3, #11
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	e015      	b.n	8002170 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002152:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002156:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800215a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800216a:	f043 030b 	orr.w	r3, r3, #11
 800216e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	69fa      	ldr	r2, [r7, #28]
 800217a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800217e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002182:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6818      	ldr	r0, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002194:	461a      	mov	r2, r3
 8002196:	f004 f831 	bl	80061fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80021a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f003 ff60 	bl	8006074 <USB_ReadInterrupts>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021be:	d124      	bne.n	800220a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f003 fff6 	bl	80061b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f002 ffab 	bl	800512a <USB_GetDevSpeed>
 80021d4:	4603      	mov	r3, r0
 80021d6:	461a      	mov	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681c      	ldr	r4, [r3, #0]
 80021e0:	f001 fa28 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 80021e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	4620      	mov	r0, r4
 80021f0:	f002 fcaa 	bl	8004b48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f009 f832 	bl	800b25e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002208:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f003 ff30 	bl	8006074 <USB_ReadInterrupts>
 8002214:	4603      	mov	r3, r0
 8002216:	f003 0308 	and.w	r3, r3, #8
 800221a:	2b08      	cmp	r3, #8
 800221c:	d10a      	bne.n	8002234 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f009 f80f 	bl	800b242 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695a      	ldr	r2, [r3, #20]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f002 0208 	and.w	r2, r2, #8
 8002232:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f003 ff1b 	bl	8006074 <USB_ReadInterrupts>
 800223e:	4603      	mov	r3, r0
 8002240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002244:	2b80      	cmp	r3, #128	; 0x80
 8002246:	d122      	bne.n	800228e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002254:	2301      	movs	r3, #1
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
 8002258:	e014      	b.n	8002284 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d105      	bne.n	800227e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	b2db      	uxtb	r3, r3
 8002276:	4619      	mov	r1, r3
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 fb27 	bl	80028cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	3301      	adds	r3, #1
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228a:	429a      	cmp	r2, r3
 800228c:	d3e5      	bcc.n	800225a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f003 feee 	bl	8006074 <USB_ReadInterrupts>
 8002298:	4603      	mov	r3, r0
 800229a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022a2:	d13b      	bne.n	800231c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022a4:	2301      	movs	r3, #1
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
 80022a8:	e02b      	b.n	8002302 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	3340      	adds	r3, #64	; 0x40
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d115      	bne.n	80022fc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80022d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	da12      	bge.n	80022fc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022da:	4613      	mov	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	333f      	adds	r3, #63	; 0x3f
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	4619      	mov	r1, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fae8 	bl	80028cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	3301      	adds	r3, #1
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002308:	429a      	cmp	r2, r3
 800230a:	d3ce      	bcc.n	80022aa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695a      	ldr	r2, [r3, #20]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800231a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f003 fea7 	bl	8006074 <USB_ReadInterrupts>
 8002326:	4603      	mov	r3, r0
 8002328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800232c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002330:	d155      	bne.n	80023de <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002332:	2301      	movs	r3, #1
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
 8002336:	e045      	b.n	80023c4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	4413      	add	r3, r2
 8002340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d12e      	bne.n	80023be <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002360:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002362:	2b00      	cmp	r3, #0
 8002364:	da2b      	bge.n	80023be <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002372:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002376:	429a      	cmp	r2, r3
 8002378:	d121      	bne.n	80023be <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800237e:	4613      	mov	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10a      	bne.n	80023be <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ba:	6053      	str	r3, [r2, #4]
            break;
 80023bc:	e007      	b.n	80023ce <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	3301      	adds	r3, #1
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d3b4      	bcc.n	8002338 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80023dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f003 fe46 	bl	8006074 <USB_ReadInterrupts>
 80023e8:	4603      	mov	r3, r0
 80023ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f2:	d10a      	bne.n	800240a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f008 ffb3 	bl	800b360 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	695a      	ldr	r2, [r3, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002408:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f003 fe30 	bl	8006074 <USB_ReadInterrupts>
 8002414:	4603      	mov	r3, r0
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b04      	cmp	r3, #4
 800241c:	d115      	bne.n	800244a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f008 ffa3 	bl	800b37c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	430a      	orrs	r2, r1
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	e000      	b.n	800244a <HAL_PCD_IRQHandler+0x938>
      return;
 8002448:	bf00      	nop
    }
  }
}
 800244a:	3734      	adds	r7, #52	; 0x34
 800244c:	46bd      	mov	sp, r7
 800244e:	bd90      	pop	{r4, r7, pc}

08002450 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_PCD_SetAddress+0x1a>
 8002466:	2302      	movs	r3, #2
 8002468:	e013      	b.n	8002492 <HAL_PCD_SetAddress+0x42>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	78fa      	ldrb	r2, [r7, #3]
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f003 fd8e 	bl	8005fa4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	4608      	mov	r0, r1
 80024a4:	4611      	mov	r1, r2
 80024a6:	461a      	mov	r2, r3
 80024a8:	4603      	mov	r3, r0
 80024aa:	70fb      	strb	r3, [r7, #3]
 80024ac:	460b      	mov	r3, r1
 80024ae:	803b      	strh	r3, [r7, #0]
 80024b0:	4613      	mov	r3, r2
 80024b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	da0f      	bge.n	80024e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	f003 020f 	and.w	r2, r3, #15
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	3338      	adds	r3, #56	; 0x38
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	4413      	add	r3, r2
 80024d4:	3304      	adds	r3, #4
 80024d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	705a      	strb	r2, [r3, #1]
 80024de:	e00f      	b.n	8002500 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024e0:	78fb      	ldrb	r3, [r7, #3]
 80024e2:	f003 020f 	and.w	r2, r3, #15
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	3304      	adds	r3, #4
 80024f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002500:	78fb      	ldrb	r3, [r7, #3]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	b2da      	uxtb	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800250c:	883a      	ldrh	r2, [r7, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	78ba      	ldrb	r2, [r7, #2]
 8002516:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	785b      	ldrb	r3, [r3, #1]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d004      	beq.n	800252a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	b29a      	uxth	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800252a:	78bb      	ldrb	r3, [r7, #2]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d102      	bne.n	8002536 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_PCD_EP_Open+0xaa>
 8002540:	2302      	movs	r3, #2
 8002542:	e00e      	b.n	8002562 <HAL_PCD_EP_Open+0xc8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68f9      	ldr	r1, [r7, #12]
 8002552:	4618      	mov	r0, r3
 8002554:	f002 fe0e 	bl	8005174 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002560:	7afb      	ldrb	r3, [r7, #11]
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	460b      	mov	r3, r1
 8002574:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002576:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800257a:	2b00      	cmp	r3, #0
 800257c:	da0f      	bge.n	800259e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	f003 020f 	and.w	r2, r3, #15
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	3338      	adds	r3, #56	; 0x38
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	3304      	adds	r3, #4
 8002594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2201      	movs	r2, #1
 800259a:	705a      	strb	r2, [r3, #1]
 800259c:	e00f      	b.n	80025be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800259e:	78fb      	ldrb	r3, [r7, #3]
 80025a0:	f003 020f 	and.w	r2, r3, #15
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4413      	add	r3, r2
 80025b4:	3304      	adds	r3, #4
 80025b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80025be:	78fb      	ldrb	r3, [r7, #3]
 80025c0:	f003 030f 	and.w	r3, r3, #15
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_PCD_EP_Close+0x6e>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e00e      	b.n	80025f6 <HAL_PCD_EP_Close+0x8c>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68f9      	ldr	r1, [r7, #12]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 fe4c 	bl	8005284 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	603b      	str	r3, [r7, #0]
 800260a:	460b      	mov	r3, r1
 800260c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800260e:	7afb      	ldrb	r3, [r7, #11]
 8002610:	f003 020f 	and.w	r2, r3, #15
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	4413      	add	r3, r2
 8002624:	3304      	adds	r3, #4
 8002626:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2200      	movs	r2, #0
 8002638:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2200      	movs	r2, #0
 800263e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002640:	7afb      	ldrb	r3, [r7, #11]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	b2da      	uxtb	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d102      	bne.n	800265a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800265a:	7afb      	ldrb	r3, [r7, #11]
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	2b00      	cmp	r3, #0
 8002662:	d109      	bne.n	8002678 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	6979      	ldr	r1, [r7, #20]
 8002672:	f003 f92b 	bl	80058cc <USB_EP0StartXfer>
 8002676:	e008      	b.n	800268a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	461a      	mov	r2, r3
 8002684:	6979      	ldr	r1, [r7, #20]
 8002686:	f002 fed9 	bl	800543c <USB_EPStartXfer>
  }

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	f003 020f 	and.w	r2, r3, #15
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	4413      	add	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80026b6:	681b      	ldr	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	603b      	str	r3, [r7, #0]
 80026d0:	460b      	mov	r3, r1
 80026d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d4:	7afb      	ldrb	r3, [r7, #11]
 80026d6:	f003 020f 	and.w	r2, r3, #15
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	3338      	adds	r3, #56	; 0x38
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4413      	add	r3, r2
 80026e8:	3304      	adds	r3, #4
 80026ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2200      	movs	r2, #0
 80026fc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2201      	movs	r2, #1
 8002702:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002704:	7afb      	ldrb	r3, [r7, #11]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	b2da      	uxtb	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d102      	bne.n	800271e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800271e:	7afb      	ldrb	r3, [r7, #11]
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	2b00      	cmp	r3, #0
 8002726:	d109      	bne.n	800273c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	6979      	ldr	r1, [r7, #20]
 8002736:	f003 f8c9 	bl	80058cc <USB_EP0StartXfer>
 800273a:	e008      	b.n	800274e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	6979      	ldr	r1, [r7, #20]
 800274a:	f002 fe77 	bl	800543c <USB_EPStartXfer>
  }

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	460b      	mov	r3, r1
 8002762:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002764:	78fb      	ldrb	r3, [r7, #3]
 8002766:	f003 020f 	and.w	r2, r3, #15
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	429a      	cmp	r2, r3
 8002770:	d901      	bls.n	8002776 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e050      	b.n	8002818 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002776:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800277a:	2b00      	cmp	r3, #0
 800277c:	da0f      	bge.n	800279e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800277e:	78fb      	ldrb	r3, [r7, #3]
 8002780:	f003 020f 	and.w	r2, r3, #15
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	3338      	adds	r3, #56	; 0x38
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	3304      	adds	r3, #4
 8002794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	705a      	strb	r2, [r3, #1]
 800279c:	e00d      	b.n	80027ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	4413      	add	r3, r2
 80027b0:	3304      	adds	r3, #4
 80027b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2201      	movs	r2, #1
 80027be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_PCD_EP_SetStall+0x82>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e01e      	b.n	8002818 <HAL_PCD_EP_SetStall+0xc0>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68f9      	ldr	r1, [r7, #12]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f003 fb07 	bl	8005dfc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	f003 030f 	and.w	r3, r3, #15
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10a      	bne.n	800280e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	b2d9      	uxtb	r1, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002808:	461a      	mov	r2, r3
 800280a:	f003 fcf7 	bl	80061fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	f003 020f 	and.w	r2, r3, #15
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	429a      	cmp	r2, r3
 8002838:	d901      	bls.n	800283e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e042      	b.n	80028c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800283e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002842:	2b00      	cmp	r3, #0
 8002844:	da0f      	bge.n	8002866 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002846:	78fb      	ldrb	r3, [r7, #3]
 8002848:	f003 020f 	and.w	r2, r3, #15
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	3338      	adds	r3, #56	; 0x38
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	3304      	adds	r3, #4
 800285c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	705a      	strb	r2, [r3, #1]
 8002864:	e00f      	b.n	8002886 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	f003 020f 	and.w	r2, r3, #15
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	4413      	add	r3, r2
 800287c:	3304      	adds	r3, #4
 800287e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	b2da      	uxtb	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d101      	bne.n	80028a6 <HAL_PCD_EP_ClrStall+0x86>
 80028a2:	2302      	movs	r3, #2
 80028a4:	e00e      	b.n	80028c4 <HAL_PCD_EP_ClrStall+0xa4>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68f9      	ldr	r1, [r7, #12]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f003 fb0f 	bl	8005ed8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80028d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	da0c      	bge.n	80028fa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	f003 020f 	and.w	r2, r3, #15
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	3338      	adds	r3, #56	; 0x38
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	4413      	add	r3, r2
 80028f4:	3304      	adds	r3, #4
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	e00c      	b.n	8002914 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028fa:	78fb      	ldrb	r3, [r7, #3]
 80028fc:	f003 020f 	and.w	r2, r3, #15
 8002900:	4613      	mov	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	4413      	add	r3, r2
 8002910:	3304      	adds	r3, #4
 8002912:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68f9      	ldr	r1, [r7, #12]
 800291a:	4618      	mov	r0, r3
 800291c:	f003 f92e 	bl	8005b7c <USB_EPStopXfer>
 8002920:	4603      	mov	r3, r0
 8002922:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002924:	7afb      	ldrb	r3, [r7, #11]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b08a      	sub	sp, #40	; 0x28
 8002932:	af02      	add	r7, sp, #8
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	3338      	adds	r3, #56	; 0x38
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	3304      	adds	r3, #4
 8002954:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a1a      	ldr	r2, [r3, #32]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	429a      	cmp	r2, r3
 8002960:	d901      	bls.n	8002966 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e06c      	b.n	8002a40 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	699a      	ldr	r2, [r3, #24]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	69fa      	ldr	r2, [r7, #28]
 8002978:	429a      	cmp	r2, r3
 800297a:	d902      	bls.n	8002982 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3303      	adds	r3, #3
 8002986:	089b      	lsrs	r3, r3, #2
 8002988:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800298a:	e02b      	b.n	80029e4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	699a      	ldr	r2, [r3, #24]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	69fa      	ldr	r2, [r7, #28]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d902      	bls.n	80029a8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	3303      	adds	r3, #3
 80029ac:	089b      	lsrs	r3, r3, #2
 80029ae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6919      	ldr	r1, [r3, #16]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	4603      	mov	r3, r0
 80029c6:	6978      	ldr	r0, [r7, #20]
 80029c8:	f003 f982 	bl	8005cd0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	441a      	add	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a1a      	ldr	r2, [r3, #32]
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	441a      	add	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d809      	bhi.n	8002a0e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a1a      	ldr	r2, [r3, #32]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d203      	bcs.n	8002a0e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1be      	bne.n	800298c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d811      	bhi.n	8002a3e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	f003 030f 	and.w	r3, r3, #15
 8002a20:	2201      	movs	r2, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	6939      	ldr	r1, [r7, #16]
 8002a36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3720      	adds	r7, #32
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	333c      	adds	r3, #60	; 0x3c
 8002a60:	3304      	adds	r3, #4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d17b      	bne.n	8002b76 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f003 0308 	and.w	r3, r3, #8
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d015      	beq.n	8002ab4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	4a61      	ldr	r2, [pc, #388]	; (8002c10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	f240 80b9 	bls.w	8002c04 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80b3 	beq.w	8002c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ab0:	6093      	str	r3, [r2, #8]
 8002ab2:	e0a7      	b.n	8002c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aca:	461a      	mov	r2, r3
 8002acc:	2320      	movs	r3, #32
 8002ace:	6093      	str	r3, [r2, #8]
 8002ad0:	e098      	b.n	8002c04 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f040 8093 	bne.w	8002c04 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	4a4b      	ldr	r2, [pc, #300]	; (8002c10 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d90f      	bls.n	8002b06 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	015a      	lsls	r2, r3, #5
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	4413      	add	r3, r2
 8002af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002afc:	461a      	mov	r2, r3
 8002afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b02:	6093      	str	r3, [r2, #8]
 8002b04:	e07e      	b.n	8002c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	4413      	add	r3, r2
 8002b18:	3304      	adds	r3, #4
 8002b1a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	69da      	ldr	r2, [r3, #28]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	0159      	lsls	r1, r3, #5
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	440b      	add	r3, r1
 8002b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b32:	1ad2      	subs	r2, r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d114      	bne.n	8002b68 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d109      	bne.n	8002b5a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b50:	461a      	mov	r2, r3
 8002b52:	2101      	movs	r1, #1
 8002b54:	f003 fb52 	bl	80061fc <USB_EP0_OutStart>
 8002b58:	e006      	b.n	8002b68 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	441a      	add	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f008 fb32 	bl	800b1d8 <HAL_PCD_DataOutStageCallback>
 8002b74:	e046      	b.n	8002c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	4a26      	ldr	r2, [pc, #152]	; (8002c14 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d124      	bne.n	8002bc8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b94:	461a      	mov	r2, r3
 8002b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b9a:	6093      	str	r3, [r2, #8]
 8002b9c:	e032      	b.n	8002c04 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2320      	movs	r3, #32
 8002bb8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f008 fb09 	bl	800b1d8 <HAL_PCD_DataOutStageCallback>
 8002bc6:	e01d      	b.n	8002c04 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d114      	bne.n	8002bf8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d108      	bne.n	8002bf8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	f003 fb02 	bl	80061fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f008 faea 	bl	800b1d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3720      	adds	r7, #32
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	4f54300a 	.word	0x4f54300a
 8002c14:	4f54310a 	.word	0x4f54310a

08002c18 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	333c      	adds	r3, #60	; 0x3c
 8002c30:	3304      	adds	r3, #4
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4a15      	ldr	r2, [pc, #84]	; (8002ca0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d90e      	bls.n	8002c6c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d009      	beq.n	8002c6c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	015a      	lsls	r2, r3, #5
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4413      	add	r3, r2
 8002c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c64:	461a      	mov	r2, r3
 8002c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c6a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f008 faa1 	bl	800b1b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d90c      	bls.n	8002c94 <PCD_EP_OutSetupPacket_int+0x7c>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d108      	bne.n	8002c94 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	2101      	movs	r1, #1
 8002c90:	f003 fab4 	bl	80061fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	4f54300a 	.word	0x4f54300a

08002ca4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	70fb      	strb	r3, [r7, #3]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d107      	bne.n	8002cd2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002cc2:	883b      	ldrh	r3, [r7, #0]
 8002cc4:	0419      	lsls	r1, r3, #16
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28
 8002cd0:	e028      	b.n	8002d24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	0c1b      	lsrs	r3, r3, #16
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	4413      	add	r3, r2
 8002cde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	73fb      	strb	r3, [r7, #15]
 8002ce4:	e00d      	b.n	8002d02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	3340      	adds	r3, #64	; 0x40
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	0c1b      	lsrs	r3, r3, #16
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d3ec      	bcc.n	8002ce6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d0c:	883b      	ldrh	r3, [r7, #0]
 8002d0e:	0418      	lsls	r0, r3, #16
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	78fb      	ldrb	r3, [r7, #3]
 8002d16:	3b01      	subs	r3, #1
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	4302      	orrs	r2, r0
 8002d1c:	3340      	adds	r3, #64	; 0x40
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	887a      	ldrh	r2, [r7, #2]
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e267      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d075      	beq.n	8002e76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8a:	4b88      	ldr	r3, [pc, #544]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d00c      	beq.n	8002db0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d96:	4b85      	ldr	r3, [pc, #532]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d112      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da2:	4b82      	ldr	r3, [pc, #520]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dae:	d10b      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db0:	4b7e      	ldr	r3, [pc, #504]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d05b      	beq.n	8002e74 <HAL_RCC_OscConfig+0x108>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d157      	bne.n	8002e74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e242      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCC_OscConfig+0x74>
 8002dd2:	4b76      	ldr	r3, [pc, #472]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a75      	ldr	r2, [pc, #468]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e01d      	b.n	8002e1c <HAL_RCC_OscConfig+0xb0>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x98>
 8002dea:	4b70      	ldr	r3, [pc, #448]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a6f      	ldr	r2, [pc, #444]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	4b6d      	ldr	r3, [pc, #436]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a6c      	ldr	r2, [pc, #432]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	e00b      	b.n	8002e1c <HAL_RCC_OscConfig+0xb0>
 8002e04:	4b69      	ldr	r3, [pc, #420]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a68      	ldr	r2, [pc, #416]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	4b66      	ldr	r3, [pc, #408]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a65      	ldr	r2, [pc, #404]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d013      	beq.n	8002e4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fd fec8 	bl	8000bb8 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7fd fec4 	bl	8000bb8 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e207      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	4b5b      	ldr	r3, [pc, #364]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0xc0>
 8002e4a:	e014      	b.n	8002e76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fd feb4 	bl	8000bb8 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e54:	f7fd feb0 	bl	8000bb8 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b64      	cmp	r3, #100	; 0x64
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e1f3      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e66:	4b51      	ldr	r3, [pc, #324]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0xe8>
 8002e72:	e000      	b.n	8002e76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d063      	beq.n	8002f4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e82:	4b4a      	ldr	r3, [pc, #296]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8e:	4b47      	ldr	r3, [pc, #284]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d11c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9a:	4b44      	ldr	r3, [pc, #272]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d116      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea6:	4b41      	ldr	r3, [pc, #260]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_RCC_OscConfig+0x152>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e1c7      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ebe:	4b3b      	ldr	r3, [pc, #236]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	4937      	ldr	r1, [pc, #220]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed2:	e03a      	b.n	8002f4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d020      	beq.n	8002f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002edc:	4b34      	ldr	r3, [pc, #208]	; (8002fb0 <HAL_RCC_OscConfig+0x244>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7fd fe69 	bl	8000bb8 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eea:	f7fd fe65 	bl	8000bb8 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e1a8      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efc:	4b2b      	ldr	r3, [pc, #172]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f08:	4b28      	ldr	r3, [pc, #160]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4925      	ldr	r1, [pc, #148]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	600b      	str	r3, [r1, #0]
 8002f1c:	e015      	b.n	8002f4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1e:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <HAL_RCC_OscConfig+0x244>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fd fe48 	bl	8000bb8 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f2c:	f7fd fe44 	bl	8000bb8 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e187      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d036      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d016      	beq.n	8002f8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5e:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <HAL_RCC_OscConfig+0x248>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7fd fe28 	bl	8000bb8 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f6c:	f7fd fe24 	bl	8000bb8 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e167      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCC_OscConfig+0x240>)
 8002f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x200>
 8002f8a:	e01b      	b.n	8002fc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <HAL_RCC_OscConfig+0x248>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f92:	f7fd fe11 	bl	8000bb8 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f98:	e00e      	b.n	8002fb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9a:	f7fd fe0d 	bl	8000bb8 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d907      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e150      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	42470000 	.word	0x42470000
 8002fb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb8:	4b88      	ldr	r3, [pc, #544]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002fba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ea      	bne.n	8002f9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 8097 	beq.w	8003100 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fd6:	4b81      	ldr	r3, [pc, #516]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	4b7d      	ldr	r3, [pc, #500]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a7c      	ldr	r2, [pc, #496]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b7a      	ldr	r3, [pc, #488]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	4b77      	ldr	r3, [pc, #476]	; (80031e0 <HAL_RCC_OscConfig+0x474>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d118      	bne.n	8003040 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300e:	4b74      	ldr	r3, [pc, #464]	; (80031e0 <HAL_RCC_OscConfig+0x474>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a73      	ldr	r2, [pc, #460]	; (80031e0 <HAL_RCC_OscConfig+0x474>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fd fdcd 	bl	8000bb8 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fd fdc9 	bl	8000bb8 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e10c      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	4b6a      	ldr	r3, [pc, #424]	; (80031e0 <HAL_RCC_OscConfig+0x474>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d106      	bne.n	8003056 <HAL_RCC_OscConfig+0x2ea>
 8003048:	4b64      	ldr	r3, [pc, #400]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	4a63      	ldr	r2, [pc, #396]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6713      	str	r3, [r2, #112]	; 0x70
 8003054:	e01c      	b.n	8003090 <HAL_RCC_OscConfig+0x324>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	2b05      	cmp	r3, #5
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x30c>
 800305e:	4b5f      	ldr	r3, [pc, #380]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	4a5e      	ldr	r2, [pc, #376]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003064:	f043 0304 	orr.w	r3, r3, #4
 8003068:	6713      	str	r3, [r2, #112]	; 0x70
 800306a:	4b5c      	ldr	r3, [pc, #368]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a5b      	ldr	r2, [pc, #364]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6713      	str	r3, [r2, #112]	; 0x70
 8003076:	e00b      	b.n	8003090 <HAL_RCC_OscConfig+0x324>
 8003078:	4b58      	ldr	r3, [pc, #352]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	4a57      	ldr	r2, [pc, #348]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	6713      	str	r3, [r2, #112]	; 0x70
 8003084:	4b55      	ldr	r3, [pc, #340]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	4a54      	ldr	r2, [pc, #336]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800308a:	f023 0304 	bic.w	r3, r3, #4
 800308e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d015      	beq.n	80030c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003098:	f7fd fd8e 	bl	8000bb8 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309e:	e00a      	b.n	80030b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a0:	f7fd fd8a 	bl	8000bb8 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e0cb      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b6:	4b49      	ldr	r3, [pc, #292]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0ee      	beq.n	80030a0 <HAL_RCC_OscConfig+0x334>
 80030c2:	e014      	b.n	80030ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c4:	f7fd fd78 	bl	8000bb8 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030cc:	f7fd fd74 	bl	8000bb8 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e0b5      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e2:	4b3e      	ldr	r3, [pc, #248]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80030e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1ee      	bne.n	80030cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ee:	7dfb      	ldrb	r3, [r7, #23]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d105      	bne.n	8003100 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f4:	4b39      	ldr	r3, [pc, #228]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	4a38      	ldr	r2, [pc, #224]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80030fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80a1 	beq.w	800324c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800310a:	4b34      	ldr	r3, [pc, #208]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b08      	cmp	r3, #8
 8003114:	d05c      	beq.n	80031d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d141      	bne.n	80031a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311e:	4b31      	ldr	r3, [pc, #196]	; (80031e4 <HAL_RCC_OscConfig+0x478>)
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7fd fd48 	bl	8000bb8 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800312c:	f7fd fd44 	bl	8000bb8 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e087      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313e:	4b27      	ldr	r3, [pc, #156]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69da      	ldr	r2, [r3, #28]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	019b      	lsls	r3, r3, #6
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	085b      	lsrs	r3, r3, #1
 8003162:	3b01      	subs	r3, #1
 8003164:	041b      	lsls	r3, r3, #16
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	061b      	lsls	r3, r3, #24
 800316e:	491b      	ldr	r1, [pc, #108]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003174:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <HAL_RCC_OscConfig+0x478>)
 8003176:	2201      	movs	r2, #1
 8003178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317a:	f7fd fd1d 	bl	8000bb8 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003182:	f7fd fd19 	bl	8000bb8 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e05c      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x416>
 80031a0:	e054      	b.n	800324c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <HAL_RCC_OscConfig+0x478>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a8:	f7fd fd06 	bl	8000bb8 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b0:	f7fd fd02 	bl	8000bb8 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e045      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_RCC_OscConfig+0x470>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x444>
 80031ce:	e03d      	b.n	800324c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d107      	bne.n	80031e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e038      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40007000 	.word	0x40007000
 80031e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031e8:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <HAL_RCC_OscConfig+0x4ec>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d028      	beq.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d121      	bne.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d11a      	bne.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003218:	4013      	ands	r3, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800321e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003220:	4293      	cmp	r3, r2
 8003222:	d111      	bne.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	3b01      	subs	r3, #1
 8003232:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d107      	bne.n	8003248 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40023800 	.word	0x40023800

0800325c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0cc      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003270:	4b68      	ldr	r3, [pc, #416]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d90c      	bls.n	8003298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b65      	ldr	r3, [pc, #404]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b63      	ldr	r3, [pc, #396]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0b8      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b0:	4b59      	ldr	r3, [pc, #356]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4a58      	ldr	r2, [pc, #352]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c8:	4b53      	ldr	r3, [pc, #332]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4a52      	ldr	r2, [pc, #328]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d4:	4b50      	ldr	r3, [pc, #320]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	494d      	ldr	r1, [pc, #308]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d044      	beq.n	800337c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fa:	4b47      	ldr	r3, [pc, #284]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d119      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e07f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d003      	beq.n	800331a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003316:	2b03      	cmp	r3, #3
 8003318:	d107      	bne.n	800332a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331a:	4b3f      	ldr	r3, [pc, #252]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e06f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332a:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e067      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333a:	4b37      	ldr	r3, [pc, #220]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f023 0203 	bic.w	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4934      	ldr	r1, [pc, #208]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	4313      	orrs	r3, r2
 800334a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800334c:	f7fd fc34 	bl	8000bb8 <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	e00a      	b.n	800336a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003354:	f7fd fc30 	bl	8000bb8 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e04f      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 020c 	and.w	r2, r3, #12
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	429a      	cmp	r2, r3
 800337a:	d1eb      	bne.n	8003354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800337c:	4b25      	ldr	r3, [pc, #148]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d20c      	bcs.n	80033a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338a:	4b22      	ldr	r3, [pc, #136]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	4b20      	ldr	r3, [pc, #128]	; (8003414 <HAL_RCC_ClockConfig+0x1b8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0307 	and.w	r3, r3, #7
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e032      	b.n	800340a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b0:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4916      	ldr	r1, [pc, #88]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ce:	4b12      	ldr	r3, [pc, #72]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	490e      	ldr	r1, [pc, #56]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033e2:	f000 f821 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80033e6:	4602      	mov	r2, r0
 80033e8:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	091b      	lsrs	r3, r3, #4
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	490a      	ldr	r1, [pc, #40]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 80033f4:	5ccb      	ldrb	r3, [r1, r3]
 80033f6:	fa22 f303 	lsr.w	r3, r2, r3
 80033fa:	4a09      	ldr	r2, [pc, #36]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80033fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033fe:	4b09      	ldr	r3, [pc, #36]	; (8003424 <HAL_RCC_ClockConfig+0x1c8>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4618      	mov	r0, r3
 8003404:	f7fd f9e2 	bl	80007cc <HAL_InitTick>

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023c00 	.word	0x40023c00
 8003418:	40023800 	.word	0x40023800
 800341c:	0800b860 	.word	0x0800b860
 8003420:	20000000 	.word	0x20000000
 8003424:	20000004 	.word	0x20000004

08003428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800342c:	b094      	sub	sp, #80	; 0x50
 800342e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	647b      	str	r3, [r7, #68]	; 0x44
 8003434:	2300      	movs	r3, #0
 8003436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003438:	2300      	movs	r3, #0
 800343a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003440:	4b79      	ldr	r3, [pc, #484]	; (8003628 <HAL_RCC_GetSysClockFreq+0x200>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b08      	cmp	r3, #8
 800344a:	d00d      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x40>
 800344c:	2b08      	cmp	r3, #8
 800344e:	f200 80e1 	bhi.w	8003614 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x34>
 8003456:	2b04      	cmp	r3, #4
 8003458:	d003      	beq.n	8003462 <HAL_RCC_GetSysClockFreq+0x3a>
 800345a:	e0db      	b.n	8003614 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800345c:	4b73      	ldr	r3, [pc, #460]	; (800362c <HAL_RCC_GetSysClockFreq+0x204>)
 800345e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003460:	e0db      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003462:	4b73      	ldr	r3, [pc, #460]	; (8003630 <HAL_RCC_GetSysClockFreq+0x208>)
 8003464:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003466:	e0d8      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003468:	4b6f      	ldr	r3, [pc, #444]	; (8003628 <HAL_RCC_GetSysClockFreq+0x200>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003470:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003472:	4b6d      	ldr	r3, [pc, #436]	; (8003628 <HAL_RCC_GetSysClockFreq+0x200>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d063      	beq.n	8003546 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347e:	4b6a      	ldr	r3, [pc, #424]	; (8003628 <HAL_RCC_GetSysClockFreq+0x200>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	099b      	lsrs	r3, r3, #6
 8003484:	2200      	movs	r2, #0
 8003486:	63bb      	str	r3, [r7, #56]	; 0x38
 8003488:	63fa      	str	r2, [r7, #60]	; 0x3c
 800348a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003490:	633b      	str	r3, [r7, #48]	; 0x30
 8003492:	2300      	movs	r3, #0
 8003494:	637b      	str	r3, [r7, #52]	; 0x34
 8003496:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800349a:	4622      	mov	r2, r4
 800349c:	462b      	mov	r3, r5
 800349e:	f04f 0000 	mov.w	r0, #0
 80034a2:	f04f 0100 	mov.w	r1, #0
 80034a6:	0159      	lsls	r1, r3, #5
 80034a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ac:	0150      	lsls	r0, r2, #5
 80034ae:	4602      	mov	r2, r0
 80034b0:	460b      	mov	r3, r1
 80034b2:	4621      	mov	r1, r4
 80034b4:	1a51      	subs	r1, r2, r1
 80034b6:	6139      	str	r1, [r7, #16]
 80034b8:	4629      	mov	r1, r5
 80034ba:	eb63 0301 	sbc.w	r3, r3, r1
 80034be:	617b      	str	r3, [r7, #20]
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034cc:	4659      	mov	r1, fp
 80034ce:	018b      	lsls	r3, r1, #6
 80034d0:	4651      	mov	r1, sl
 80034d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034d6:	4651      	mov	r1, sl
 80034d8:	018a      	lsls	r2, r1, #6
 80034da:	4651      	mov	r1, sl
 80034dc:	ebb2 0801 	subs.w	r8, r2, r1
 80034e0:	4659      	mov	r1, fp
 80034e2:	eb63 0901 	sbc.w	r9, r3, r1
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034fa:	4690      	mov	r8, r2
 80034fc:	4699      	mov	r9, r3
 80034fe:	4623      	mov	r3, r4
 8003500:	eb18 0303 	adds.w	r3, r8, r3
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	462b      	mov	r3, r5
 8003508:	eb49 0303 	adc.w	r3, r9, r3
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f04f 0300 	mov.w	r3, #0
 8003516:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800351a:	4629      	mov	r1, r5
 800351c:	024b      	lsls	r3, r1, #9
 800351e:	4621      	mov	r1, r4
 8003520:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003524:	4621      	mov	r1, r4
 8003526:	024a      	lsls	r2, r1, #9
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800352e:	2200      	movs	r2, #0
 8003530:	62bb      	str	r3, [r7, #40]	; 0x28
 8003532:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003534:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003538:	f7fc fe4a 	bl	80001d0 <__aeabi_uldivmod>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4613      	mov	r3, r2
 8003542:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003544:	e058      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003546:	4b38      	ldr	r3, [pc, #224]	; (8003628 <HAL_RCC_GetSysClockFreq+0x200>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	099b      	lsrs	r3, r3, #6
 800354c:	2200      	movs	r2, #0
 800354e:	4618      	mov	r0, r3
 8003550:	4611      	mov	r1, r2
 8003552:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003556:	623b      	str	r3, [r7, #32]
 8003558:	2300      	movs	r3, #0
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
 800355c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003560:	4642      	mov	r2, r8
 8003562:	464b      	mov	r3, r9
 8003564:	f04f 0000 	mov.w	r0, #0
 8003568:	f04f 0100 	mov.w	r1, #0
 800356c:	0159      	lsls	r1, r3, #5
 800356e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003572:	0150      	lsls	r0, r2, #5
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4641      	mov	r1, r8
 800357a:	ebb2 0a01 	subs.w	sl, r2, r1
 800357e:	4649      	mov	r1, r9
 8003580:	eb63 0b01 	sbc.w	fp, r3, r1
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	f04f 0300 	mov.w	r3, #0
 800358c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003590:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003594:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003598:	ebb2 040a 	subs.w	r4, r2, sl
 800359c:	eb63 050b 	sbc.w	r5, r3, fp
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	00eb      	lsls	r3, r5, #3
 80035aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ae:	00e2      	lsls	r2, r4, #3
 80035b0:	4614      	mov	r4, r2
 80035b2:	461d      	mov	r5, r3
 80035b4:	4643      	mov	r3, r8
 80035b6:	18e3      	adds	r3, r4, r3
 80035b8:	603b      	str	r3, [r7, #0]
 80035ba:	464b      	mov	r3, r9
 80035bc:	eb45 0303 	adc.w	r3, r5, r3
 80035c0:	607b      	str	r3, [r7, #4]
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ce:	4629      	mov	r1, r5
 80035d0:	028b      	lsls	r3, r1, #10
 80035d2:	4621      	mov	r1, r4
 80035d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035d8:	4621      	mov	r1, r4
 80035da:	028a      	lsls	r2, r1, #10
 80035dc:	4610      	mov	r0, r2
 80035de:	4619      	mov	r1, r3
 80035e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035e2:	2200      	movs	r2, #0
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	61fa      	str	r2, [r7, #28]
 80035e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ec:	f7fc fdf0 	bl	80001d0 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4613      	mov	r3, r2
 80035f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035f8:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCC_GetSysClockFreq+0x200>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	0c1b      	lsrs	r3, r3, #16
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	3301      	adds	r3, #1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003608:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800360a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003612:	e002      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <HAL_RCC_GetSysClockFreq+0x204>)
 8003616:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800361a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800361c:	4618      	mov	r0, r3
 800361e:	3750      	adds	r7, #80	; 0x50
 8003620:	46bd      	mov	sp, r7
 8003622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003626:	bf00      	nop
 8003628:	40023800 	.word	0x40023800
 800362c:	00f42400 	.word	0x00f42400
 8003630:	007a1200 	.word	0x007a1200

08003634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003638:	4b03      	ldr	r3, [pc, #12]	; (8003648 <HAL_RCC_GetHCLKFreq+0x14>)
 800363a:	681b      	ldr	r3, [r3, #0]
}
 800363c:	4618      	mov	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	20000000 	.word	0x20000000

0800364c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003650:	f7ff fff0 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 8003654:	4602      	mov	r2, r0
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	0a9b      	lsrs	r3, r3, #10
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	4903      	ldr	r1, [pc, #12]	; (8003670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003662:	5ccb      	ldrb	r3, [r1, r3]
 8003664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003668:	4618      	mov	r0, r3
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40023800 	.word	0x40023800
 8003670:	0800b870 	.word	0x0800b870

08003674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003678:	f7ff ffdc 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 800367c:	4602      	mov	r2, r0
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	0b5b      	lsrs	r3, r3, #13
 8003684:	f003 0307 	and.w	r3, r3, #7
 8003688:	4903      	ldr	r1, [pc, #12]	; (8003698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800368a:	5ccb      	ldrb	r3, [r1, r3]
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003690:	4618      	mov	r0, r3
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40023800 	.word	0x40023800
 8003698:	0800b870 	.word	0x0800b870

0800369c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	220f      	movs	r2, #15
 80036aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036ac:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <HAL_RCC_GetClockConfig+0x5c>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0203 	and.w	r2, r3, #3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <HAL_RCC_GetClockConfig+0x5c>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <HAL_RCC_GetClockConfig+0x5c>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036d0:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <HAL_RCC_GetClockConfig+0x5c>)
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	08db      	lsrs	r3, r3, #3
 80036d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036de:	4b07      	ldr	r3, [pc, #28]	; (80036fc <HAL_RCC_GetClockConfig+0x60>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0207 	and.w	r2, r3, #7
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	601a      	str	r2, [r3, #0]
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40023c00 	.word	0x40023c00

08003700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e041      	b.n	8003796 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f839 	bl	800379e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3304      	adds	r3, #4
 800373c:	4619      	mov	r1, r3
 800373e:	4610      	mov	r0, r2
 8003740:	f000 f9d8 	bl	8003af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d001      	beq.n	80037cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e04e      	b.n	800386a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a23      	ldr	r2, [pc, #140]	; (8003878 <HAL_TIM_Base_Start_IT+0xc4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d022      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f6:	d01d      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1f      	ldr	r2, [pc, #124]	; (800387c <HAL_TIM_Base_Start_IT+0xc8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d018      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a1e      	ldr	r2, [pc, #120]	; (8003880 <HAL_TIM_Base_Start_IT+0xcc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d013      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a1c      	ldr	r2, [pc, #112]	; (8003884 <HAL_TIM_Base_Start_IT+0xd0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d00e      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a1b      	ldr	r2, [pc, #108]	; (8003888 <HAL_TIM_Base_Start_IT+0xd4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d009      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a19      	ldr	r2, [pc, #100]	; (800388c <HAL_TIM_Base_Start_IT+0xd8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d004      	beq.n	8003834 <HAL_TIM_Base_Start_IT+0x80>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a18      	ldr	r2, [pc, #96]	; (8003890 <HAL_TIM_Base_Start_IT+0xdc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d111      	bne.n	8003858 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b06      	cmp	r3, #6
 8003844:	d010      	beq.n	8003868 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f042 0201 	orr.w	r2, r2, #1
 8003854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003856:	e007      	b.n	8003868 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40010000 	.word	0x40010000
 800387c:	40000400 	.word	0x40000400
 8003880:	40000800 	.word	0x40000800
 8003884:	40000c00 	.word	0x40000c00
 8003888:	40010400 	.word	0x40010400
 800388c:	40014000 	.word	0x40014000
 8003890:	40001800 	.word	0x40001800

08003894 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d122      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d11b      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0202 	mvn.w	r2, #2
 80038c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f8ee 	bl	8003ab8 <HAL_TIM_IC_CaptureCallback>
 80038dc:	e005      	b.n	80038ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f8e0 	bl	8003aa4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f8f1 	bl	8003acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0304 	and.w	r3, r3, #4
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	d122      	bne.n	8003944 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b04      	cmp	r3, #4
 800390a:	d11b      	bne.n	8003944 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0204 	mvn.w	r2, #4
 8003914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2202      	movs	r2, #2
 800391a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f8c4 	bl	8003ab8 <HAL_TIM_IC_CaptureCallback>
 8003930:	e005      	b.n	800393e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f8b6 	bl	8003aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f8c7 	bl	8003acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b08      	cmp	r3, #8
 8003950:	d122      	bne.n	8003998 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b08      	cmp	r3, #8
 800395e:	d11b      	bne.n	8003998 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0208 	mvn.w	r2, #8
 8003968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2204      	movs	r2, #4
 800396e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f89a 	bl	8003ab8 <HAL_TIM_IC_CaptureCallback>
 8003984:	e005      	b.n	8003992 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f88c 	bl	8003aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 f89d 	bl	8003acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b10      	cmp	r3, #16
 80039a4:	d122      	bne.n	80039ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0310 	and.w	r3, r3, #16
 80039b0:	2b10      	cmp	r3, #16
 80039b2:	d11b      	bne.n	80039ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f06f 0210 	mvn.w	r2, #16
 80039bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2208      	movs	r2, #8
 80039c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f870 	bl	8003ab8 <HAL_TIM_IC_CaptureCallback>
 80039d8:	e005      	b.n	80039e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f862 	bl	8003aa4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f873 	bl	8003acc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d10e      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d107      	bne.n	8003a18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f06f 0201 	mvn.w	r2, #1
 8003a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fc fe96 	bl	8000744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a22:	2b80      	cmp	r3, #128	; 0x80
 8003a24:	d10e      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a30:	2b80      	cmp	r3, #128	; 0x80
 8003a32:	d107      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 f902 	bl	8003c48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b40      	cmp	r3, #64	; 0x40
 8003a50:	d10e      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a5c:	2b40      	cmp	r3, #64	; 0x40
 8003a5e:	d107      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f838 	bl	8003ae0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	d10e      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b20      	cmp	r3, #32
 8003a8a:	d107      	bne.n	8003a9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f06f 0220 	mvn.w	r2, #32
 8003a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f8cc 	bl	8003c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a40      	ldr	r2, [pc, #256]	; (8003c08 <TIM_Base_SetConfig+0x114>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d013      	beq.n	8003b34 <TIM_Base_SetConfig+0x40>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b12:	d00f      	beq.n	8003b34 <TIM_Base_SetConfig+0x40>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a3d      	ldr	r2, [pc, #244]	; (8003c0c <TIM_Base_SetConfig+0x118>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00b      	beq.n	8003b34 <TIM_Base_SetConfig+0x40>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a3c      	ldr	r2, [pc, #240]	; (8003c10 <TIM_Base_SetConfig+0x11c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d007      	beq.n	8003b34 <TIM_Base_SetConfig+0x40>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a3b      	ldr	r2, [pc, #236]	; (8003c14 <TIM_Base_SetConfig+0x120>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d003      	beq.n	8003b34 <TIM_Base_SetConfig+0x40>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a3a      	ldr	r2, [pc, #232]	; (8003c18 <TIM_Base_SetConfig+0x124>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d108      	bne.n	8003b46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a2f      	ldr	r2, [pc, #188]	; (8003c08 <TIM_Base_SetConfig+0x114>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d02b      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b54:	d027      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a2c      	ldr	r2, [pc, #176]	; (8003c0c <TIM_Base_SetConfig+0x118>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d023      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a2b      	ldr	r2, [pc, #172]	; (8003c10 <TIM_Base_SetConfig+0x11c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01f      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a2a      	ldr	r2, [pc, #168]	; (8003c14 <TIM_Base_SetConfig+0x120>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01b      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a29      	ldr	r2, [pc, #164]	; (8003c18 <TIM_Base_SetConfig+0x124>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d017      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a28      	ldr	r2, [pc, #160]	; (8003c1c <TIM_Base_SetConfig+0x128>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a27      	ldr	r2, [pc, #156]	; (8003c20 <TIM_Base_SetConfig+0x12c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00f      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a26      	ldr	r2, [pc, #152]	; (8003c24 <TIM_Base_SetConfig+0x130>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00b      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a25      	ldr	r2, [pc, #148]	; (8003c28 <TIM_Base_SetConfig+0x134>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d007      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a24      	ldr	r2, [pc, #144]	; (8003c2c <TIM_Base_SetConfig+0x138>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d003      	beq.n	8003ba6 <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a23      	ldr	r2, [pc, #140]	; (8003c30 <TIM_Base_SetConfig+0x13c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d108      	bne.n	8003bb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <TIM_Base_SetConfig+0x114>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <TIM_Base_SetConfig+0xf8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a0c      	ldr	r2, [pc, #48]	; (8003c18 <TIM_Base_SetConfig+0x124>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d103      	bne.n	8003bf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	615a      	str	r2, [r3, #20]
}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40010000 	.word	0x40010000
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	40000800 	.word	0x40000800
 8003c14:	40000c00 	.word	0x40000c00
 8003c18:	40010400 	.word	0x40010400
 8003c1c:	40014000 	.word	0x40014000
 8003c20:	40014400 	.word	0x40014400
 8003c24:	40014800 	.word	0x40014800
 8003c28:	40001800 	.word	0x40001800
 8003c2c:	40001c00 	.word	0x40001c00
 8003c30:	40002000 	.word	0x40002000

08003c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e03f      	b.n	8003cee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fc fe80 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2224      	movs	r2, #36	; 0x24
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68da      	ldr	r2, [r3, #12]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fc7b 	bl	800459c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695a      	ldr	r2, [r3, #20]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
	...

08003cf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b0ba      	sub	sp, #232	; 0xe8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10f      	bne.n	8003d5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <HAL_UART_IRQHandler+0x66>
 8003d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fb65 	bl	8004426 <UART_Receive_IT>
      return;
 8003d5c:	e256      	b.n	800420c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 80de 	beq.w	8003f24 <HAL_UART_IRQHandler+0x22c>
 8003d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d106      	bne.n	8003d82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80d1 	beq.w	8003f24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00b      	beq.n	8003da6 <HAL_UART_IRQHandler+0xae>
 8003d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f043 0201 	orr.w	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <HAL_UART_IRQHandler+0xd2>
 8003db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d005      	beq.n	8003dca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f043 0202 	orr.w	r2, r3, #2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <HAL_UART_IRQHandler+0xf6>
 8003dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f043 0204 	orr.w	r2, r3, #4
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d011      	beq.n	8003e1e <HAL_UART_IRQHandler+0x126>
 8003dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d105      	bne.n	8003e12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d005      	beq.n	8003e1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f043 0208 	orr.w	r2, r3, #8
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 81ed 	beq.w	8004202 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <HAL_UART_IRQHandler+0x14e>
 8003e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 faf0 	bl	8004426 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e50:	2b40      	cmp	r3, #64	; 0x40
 8003e52:	bf0c      	ite	eq
 8003e54:	2301      	moveq	r3, #1
 8003e56:	2300      	movne	r3, #0
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f003 0308 	and.w	r3, r3, #8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d103      	bne.n	8003e72 <HAL_UART_IRQHandler+0x17a>
 8003e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d04f      	beq.n	8003f12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f9f8 	bl	8004268 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	d141      	bne.n	8003f0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3314      	adds	r3, #20
 8003e8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3314      	adds	r3, #20
 8003eae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003eb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003eb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003ebe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ec2:	e841 2300 	strex	r3, r2, [r1]
 8003ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003eca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1d9      	bne.n	8003e86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d013      	beq.n	8003f02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	4a7d      	ldr	r2, [pc, #500]	; (80040d4 <HAL_UART_IRQHandler+0x3dc>)
 8003ee0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fd f896 	bl	8001018 <HAL_DMA_Abort_IT>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d016      	beq.n	8003f20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003efc:	4610      	mov	r0, r2
 8003efe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f00:	e00e      	b.n	8003f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f99a 	bl	800423c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f08:	e00a      	b.n	8003f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f996 	bl	800423c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f10:	e006      	b.n	8003f20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f992 	bl	800423c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f1e:	e170      	b.n	8004202 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f20:	bf00      	nop
    return;
 8003f22:	e16e      	b.n	8004202 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	f040 814a 	bne.w	80041c2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f32:	f003 0310 	and.w	r3, r3, #16
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 8143 	beq.w	80041c2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f40:	f003 0310 	and.w	r3, r3, #16
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 813c 	beq.w	80041c2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6a:	2b40      	cmp	r3, #64	; 0x40
 8003f6c:	f040 80b4 	bne.w	80040d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8140 	beq.w	8004206 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	f080 8139 	bcs.w	8004206 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa6:	f000 8088 	beq.w	80040ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	330c      	adds	r3, #12
 8003fb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fb8:	e853 3f00 	ldrex	r3, [r3]
 8003fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	330c      	adds	r3, #12
 8003fd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003fd6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1d9      	bne.n	8003faa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3314      	adds	r3, #20
 8003ffc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004000:	e853 3f00 	ldrex	r3, [r3]
 8004004:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3314      	adds	r3, #20
 8004016:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800401a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800401e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004020:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004022:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800402c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e1      	bne.n	8003ff6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3314      	adds	r3, #20
 8004038:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004048:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3314      	adds	r3, #20
 8004052:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004056:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004058:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800405c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e3      	bne.n	8004032 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800408a:	f023 0310 	bic.w	r3, r3, #16
 800408e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	330c      	adds	r3, #12
 8004098:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800409c:	65ba      	str	r2, [r7, #88]	; 0x58
 800409e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040a4:	e841 2300 	strex	r3, r2, [r1]
 80040a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e3      	bne.n	8004078 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fc ff3f 	bl	8000f38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	4619      	mov	r1, r3
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f8c0 	bl	8004250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040d0:	e099      	b.n	8004206 <HAL_UART_IRQHandler+0x50e>
 80040d2:	bf00      	nop
 80040d4:	0800432f 	.word	0x0800432f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 808b 	beq.w	800420a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80040f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 8086 	beq.w	800420a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	330c      	adds	r3, #12
 8004104:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004108:	e853 3f00 	ldrex	r3, [r3]
 800410c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800410e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004110:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004114:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	330c      	adds	r3, #12
 800411e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004122:	647a      	str	r2, [r7, #68]	; 0x44
 8004124:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004126:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004128:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e3      	bne.n	80040fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3314      	adds	r3, #20
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	623b      	str	r3, [r7, #32]
   return(result);
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	f023 0301 	bic.w	r3, r3, #1
 800414c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3314      	adds	r3, #20
 8004156:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800415a:	633a      	str	r2, [r7, #48]	; 0x30
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e3      	bne.n	8004136 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	330c      	adds	r3, #12
 8004182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	60fb      	str	r3, [r7, #12]
   return(result);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0310 	bic.w	r3, r3, #16
 8004192:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	330c      	adds	r3, #12
 800419c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80041a0:	61fa      	str	r2, [r7, #28]
 80041a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	69b9      	ldr	r1, [r7, #24]
 80041a6:	69fa      	ldr	r2, [r7, #28]
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	617b      	str	r3, [r7, #20]
   return(result);
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e3      	bne.n	800417c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041b8:	4619      	mov	r1, r3
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f848 	bl	8004250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041c0:	e023      	b.n	800420a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <HAL_UART_IRQHandler+0x4ea>
 80041ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f8bb 	bl	8004356 <UART_Transmit_IT>
    return;
 80041e0:	e014      	b.n	800420c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00e      	beq.n	800420c <HAL_UART_IRQHandler+0x514>
 80041ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d008      	beq.n	800420c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f8fb 	bl	80043f6 <UART_EndTransmit_IT>
    return;
 8004200:	e004      	b.n	800420c <HAL_UART_IRQHandler+0x514>
    return;
 8004202:	bf00      	nop
 8004204:	e002      	b.n	800420c <HAL_UART_IRQHandler+0x514>
      return;
 8004206:	bf00      	nop
 8004208:	e000      	b.n	800420c <HAL_UART_IRQHandler+0x514>
      return;
 800420a:	bf00      	nop
  }
}
 800420c:	37e8      	adds	r7, #232	; 0xe8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop

08004214 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004268:	b480      	push	{r7}
 800426a:	b095      	sub	sp, #84	; 0x54
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	330c      	adds	r3, #12
 8004276:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	330c      	adds	r3, #12
 800428e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004290:	643a      	str	r2, [r7, #64]	; 0x40
 8004292:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004296:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800429e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e5      	bne.n	8004270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3314      	adds	r3, #20
 80042aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3314      	adds	r3, #20
 80042c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e5      	bne.n	80042a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d119      	bne.n	8004314 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	330c      	adds	r3, #12
 80042e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f023 0310 	bic.w	r3, r3, #16
 80042f6:	647b      	str	r3, [r7, #68]	; 0x44
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004300:	61ba      	str	r2, [r7, #24]
 8004302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6979      	ldr	r1, [r7, #20]
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	613b      	str	r3, [r7, #16]
   return(result);
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e5      	bne.n	80042e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004322:	bf00      	nop
 8004324:	3754      	adds	r7, #84	; 0x54
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f7ff ff77 	bl	800423c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800434e:	bf00      	nop
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004356:	b480      	push	{r7}
 8004358:	b085      	sub	sp, #20
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b21      	cmp	r3, #33	; 0x21
 8004368:	d13e      	bne.n	80043e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004372:	d114      	bne.n	800439e <UART_Transmit_IT+0x48>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d110      	bne.n	800439e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004390:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	1c9a      	adds	r2, r3, #2
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	621a      	str	r2, [r3, #32]
 800439c:	e008      	b.n	80043b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	1c59      	adds	r1, r3, #1
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6211      	str	r1, [r2, #32]
 80043a8:	781a      	ldrb	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	3b01      	subs	r3, #1
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	4619      	mov	r1, r3
 80043be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10f      	bne.n	80043e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	e000      	b.n	80043ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043e8:	2302      	movs	r3, #2
  }
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800440c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff fefc 	bl	8004214 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b08c      	sub	sp, #48	; 0x30
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b22      	cmp	r3, #34	; 0x22
 8004438:	f040 80ab 	bne.w	8004592 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004444:	d117      	bne.n	8004476 <UART_Receive_IT+0x50>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d113      	bne.n	8004476 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004456:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	b29b      	uxth	r3, r3
 8004460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004464:	b29a      	uxth	r2, r3
 8004466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004468:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	1c9a      	adds	r2, r3, #2
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28
 8004474:	e026      	b.n	80044c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800447c:	2300      	movs	r3, #0
 800447e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004488:	d007      	beq.n	800449a <UART_Receive_IT+0x74>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10a      	bne.n	80044a8 <UART_Receive_IT+0x82>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	e008      	b.n	80044ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	4619      	mov	r1, r3
 80044d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d15a      	bne.n	800458e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0220 	bic.w	r2, r2, #32
 80044e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0201 	bic.w	r2, r2, #1
 8004506:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	2b01      	cmp	r3, #1
 8004516:	d135      	bne.n	8004584 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	330c      	adds	r3, #12
 8004524:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	613b      	str	r3, [r7, #16]
   return(result);
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f023 0310 	bic.w	r3, r3, #16
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	330c      	adds	r3, #12
 800453c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800453e:	623a      	str	r2, [r7, #32]
 8004540:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	69f9      	ldr	r1, [r7, #28]
 8004544:	6a3a      	ldr	r2, [r7, #32]
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	61bb      	str	r3, [r7, #24]
   return(result);
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e5      	bne.n	800451e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0310 	and.w	r3, r3, #16
 800455c:	2b10      	cmp	r3, #16
 800455e:	d10a      	bne.n	8004576 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800457a:	4619      	mov	r1, r3
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7ff fe67 	bl	8004250 <HAL_UARTEx_RxEventCallback>
 8004582:	e002      	b.n	800458a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f7ff fe4f 	bl	8004228 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800458a:	2300      	movs	r3, #0
 800458c:	e002      	b.n	8004594 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	e000      	b.n	8004594 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004592:	2302      	movs	r3, #2
  }
}
 8004594:	4618      	mov	r0, r3
 8004596:	3730      	adds	r7, #48	; 0x30
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800459c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a0:	b0c0      	sub	sp, #256	; 0x100
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b8:	68d9      	ldr	r1, [r3, #12]
 80045ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	ea40 0301 	orr.w	r3, r0, r1
 80045c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	431a      	orrs	r2, r3
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045f4:	f021 010c 	bic.w	r1, r1, #12
 80045f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004602:	430b      	orrs	r3, r1
 8004604:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004616:	6999      	ldr	r1, [r3, #24]
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	ea40 0301 	orr.w	r3, r0, r1
 8004622:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	4b8f      	ldr	r3, [pc, #572]	; (8004868 <UART_SetConfig+0x2cc>)
 800462c:	429a      	cmp	r2, r3
 800462e:	d005      	beq.n	800463c <UART_SetConfig+0xa0>
 8004630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4b8d      	ldr	r3, [pc, #564]	; (800486c <UART_SetConfig+0x2d0>)
 8004638:	429a      	cmp	r2, r3
 800463a:	d104      	bne.n	8004646 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800463c:	f7ff f81a 	bl	8003674 <HAL_RCC_GetPCLK2Freq>
 8004640:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004644:	e003      	b.n	800464e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004646:	f7ff f801 	bl	800364c <HAL_RCC_GetPCLK1Freq>
 800464a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800464e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004658:	f040 810c 	bne.w	8004874 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800465c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004660:	2200      	movs	r2, #0
 8004662:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004666:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800466a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800466e:	4622      	mov	r2, r4
 8004670:	462b      	mov	r3, r5
 8004672:	1891      	adds	r1, r2, r2
 8004674:	65b9      	str	r1, [r7, #88]	; 0x58
 8004676:	415b      	adcs	r3, r3
 8004678:	65fb      	str	r3, [r7, #92]	; 0x5c
 800467a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800467e:	4621      	mov	r1, r4
 8004680:	eb12 0801 	adds.w	r8, r2, r1
 8004684:	4629      	mov	r1, r5
 8004686:	eb43 0901 	adc.w	r9, r3, r1
 800468a:	f04f 0200 	mov.w	r2, #0
 800468e:	f04f 0300 	mov.w	r3, #0
 8004692:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004696:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800469a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800469e:	4690      	mov	r8, r2
 80046a0:	4699      	mov	r9, r3
 80046a2:	4623      	mov	r3, r4
 80046a4:	eb18 0303 	adds.w	r3, r8, r3
 80046a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046ac:	462b      	mov	r3, r5
 80046ae:	eb49 0303 	adc.w	r3, r9, r3
 80046b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80046b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80046c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80046c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80046ca:	460b      	mov	r3, r1
 80046cc:	18db      	adds	r3, r3, r3
 80046ce:	653b      	str	r3, [r7, #80]	; 0x50
 80046d0:	4613      	mov	r3, r2
 80046d2:	eb42 0303 	adc.w	r3, r2, r3
 80046d6:	657b      	str	r3, [r7, #84]	; 0x54
 80046d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046e0:	f7fb fd76 	bl	80001d0 <__aeabi_uldivmod>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4b61      	ldr	r3, [pc, #388]	; (8004870 <UART_SetConfig+0x2d4>)
 80046ea:	fba3 2302 	umull	r2, r3, r3, r2
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	011c      	lsls	r4, r3, #4
 80046f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004700:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004704:	4642      	mov	r2, r8
 8004706:	464b      	mov	r3, r9
 8004708:	1891      	adds	r1, r2, r2
 800470a:	64b9      	str	r1, [r7, #72]	; 0x48
 800470c:	415b      	adcs	r3, r3
 800470e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004710:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004714:	4641      	mov	r1, r8
 8004716:	eb12 0a01 	adds.w	sl, r2, r1
 800471a:	4649      	mov	r1, r9
 800471c:	eb43 0b01 	adc.w	fp, r3, r1
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800472c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004730:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004734:	4692      	mov	sl, r2
 8004736:	469b      	mov	fp, r3
 8004738:	4643      	mov	r3, r8
 800473a:	eb1a 0303 	adds.w	r3, sl, r3
 800473e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004742:	464b      	mov	r3, r9
 8004744:	eb4b 0303 	adc.w	r3, fp, r3
 8004748:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800474c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004758:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800475c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004760:	460b      	mov	r3, r1
 8004762:	18db      	adds	r3, r3, r3
 8004764:	643b      	str	r3, [r7, #64]	; 0x40
 8004766:	4613      	mov	r3, r2
 8004768:	eb42 0303 	adc.w	r3, r2, r3
 800476c:	647b      	str	r3, [r7, #68]	; 0x44
 800476e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004772:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004776:	f7fb fd2b 	bl	80001d0 <__aeabi_uldivmod>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4611      	mov	r1, r2
 8004780:	4b3b      	ldr	r3, [pc, #236]	; (8004870 <UART_SetConfig+0x2d4>)
 8004782:	fba3 2301 	umull	r2, r3, r3, r1
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	2264      	movs	r2, #100	; 0x64
 800478a:	fb02 f303 	mul.w	r3, r2, r3
 800478e:	1acb      	subs	r3, r1, r3
 8004790:	00db      	lsls	r3, r3, #3
 8004792:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004796:	4b36      	ldr	r3, [pc, #216]	; (8004870 <UART_SetConfig+0x2d4>)
 8004798:	fba3 2302 	umull	r2, r3, r3, r2
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047a4:	441c      	add	r4, r3
 80047a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047aa:	2200      	movs	r2, #0
 80047ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80047b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80047b8:	4642      	mov	r2, r8
 80047ba:	464b      	mov	r3, r9
 80047bc:	1891      	adds	r1, r2, r2
 80047be:	63b9      	str	r1, [r7, #56]	; 0x38
 80047c0:	415b      	adcs	r3, r3
 80047c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80047c8:	4641      	mov	r1, r8
 80047ca:	1851      	adds	r1, r2, r1
 80047cc:	6339      	str	r1, [r7, #48]	; 0x30
 80047ce:	4649      	mov	r1, r9
 80047d0:	414b      	adcs	r3, r1
 80047d2:	637b      	str	r3, [r7, #52]	; 0x34
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047e0:	4659      	mov	r1, fp
 80047e2:	00cb      	lsls	r3, r1, #3
 80047e4:	4651      	mov	r1, sl
 80047e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ea:	4651      	mov	r1, sl
 80047ec:	00ca      	lsls	r2, r1, #3
 80047ee:	4610      	mov	r0, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	4603      	mov	r3, r0
 80047f4:	4642      	mov	r2, r8
 80047f6:	189b      	adds	r3, r3, r2
 80047f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047fc:	464b      	mov	r3, r9
 80047fe:	460a      	mov	r2, r1
 8004800:	eb42 0303 	adc.w	r3, r2, r3
 8004804:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004814:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004818:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800481c:	460b      	mov	r3, r1
 800481e:	18db      	adds	r3, r3, r3
 8004820:	62bb      	str	r3, [r7, #40]	; 0x28
 8004822:	4613      	mov	r3, r2
 8004824:	eb42 0303 	adc.w	r3, r2, r3
 8004828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800482a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800482e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004832:	f7fb fccd 	bl	80001d0 <__aeabi_uldivmod>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4b0d      	ldr	r3, [pc, #52]	; (8004870 <UART_SetConfig+0x2d4>)
 800483c:	fba3 1302 	umull	r1, r3, r3, r2
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	2164      	movs	r1, #100	; 0x64
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	3332      	adds	r3, #50	; 0x32
 800484e:	4a08      	ldr	r2, [pc, #32]	; (8004870 <UART_SetConfig+0x2d4>)
 8004850:	fba2 2303 	umull	r2, r3, r2, r3
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	f003 0207 	and.w	r2, r3, #7
 800485a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4422      	add	r2, r4
 8004862:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004864:	e105      	b.n	8004a72 <UART_SetConfig+0x4d6>
 8004866:	bf00      	nop
 8004868:	40011000 	.word	0x40011000
 800486c:	40011400 	.word	0x40011400
 8004870:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004878:	2200      	movs	r2, #0
 800487a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800487e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004882:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004886:	4642      	mov	r2, r8
 8004888:	464b      	mov	r3, r9
 800488a:	1891      	adds	r1, r2, r2
 800488c:	6239      	str	r1, [r7, #32]
 800488e:	415b      	adcs	r3, r3
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
 8004892:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004896:	4641      	mov	r1, r8
 8004898:	1854      	adds	r4, r2, r1
 800489a:	4649      	mov	r1, r9
 800489c:	eb43 0501 	adc.w	r5, r3, r1
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	00eb      	lsls	r3, r5, #3
 80048aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048ae:	00e2      	lsls	r2, r4, #3
 80048b0:	4614      	mov	r4, r2
 80048b2:	461d      	mov	r5, r3
 80048b4:	4643      	mov	r3, r8
 80048b6:	18e3      	adds	r3, r4, r3
 80048b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048bc:	464b      	mov	r3, r9
 80048be:	eb45 0303 	adc.w	r3, r5, r3
 80048c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048e2:	4629      	mov	r1, r5
 80048e4:	008b      	lsls	r3, r1, #2
 80048e6:	4621      	mov	r1, r4
 80048e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048ec:	4621      	mov	r1, r4
 80048ee:	008a      	lsls	r2, r1, #2
 80048f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048f4:	f7fb fc6c 	bl	80001d0 <__aeabi_uldivmod>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4b60      	ldr	r3, [pc, #384]	; (8004a80 <UART_SetConfig+0x4e4>)
 80048fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	011c      	lsls	r4, r3, #4
 8004906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800490a:	2200      	movs	r2, #0
 800490c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004910:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004914:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004918:	4642      	mov	r2, r8
 800491a:	464b      	mov	r3, r9
 800491c:	1891      	adds	r1, r2, r2
 800491e:	61b9      	str	r1, [r7, #24]
 8004920:	415b      	adcs	r3, r3
 8004922:	61fb      	str	r3, [r7, #28]
 8004924:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004928:	4641      	mov	r1, r8
 800492a:	1851      	adds	r1, r2, r1
 800492c:	6139      	str	r1, [r7, #16]
 800492e:	4649      	mov	r1, r9
 8004930:	414b      	adcs	r3, r1
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004940:	4659      	mov	r1, fp
 8004942:	00cb      	lsls	r3, r1, #3
 8004944:	4651      	mov	r1, sl
 8004946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800494a:	4651      	mov	r1, sl
 800494c:	00ca      	lsls	r2, r1, #3
 800494e:	4610      	mov	r0, r2
 8004950:	4619      	mov	r1, r3
 8004952:	4603      	mov	r3, r0
 8004954:	4642      	mov	r2, r8
 8004956:	189b      	adds	r3, r3, r2
 8004958:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800495c:	464b      	mov	r3, r9
 800495e:	460a      	mov	r2, r1
 8004960:	eb42 0303 	adc.w	r3, r2, r3
 8004964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	67bb      	str	r3, [r7, #120]	; 0x78
 8004972:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004980:	4649      	mov	r1, r9
 8004982:	008b      	lsls	r3, r1, #2
 8004984:	4641      	mov	r1, r8
 8004986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800498a:	4641      	mov	r1, r8
 800498c:	008a      	lsls	r2, r1, #2
 800498e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004992:	f7fb fc1d 	bl	80001d0 <__aeabi_uldivmod>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4b39      	ldr	r3, [pc, #228]	; (8004a80 <UART_SetConfig+0x4e4>)
 800499c:	fba3 1302 	umull	r1, r3, r3, r2
 80049a0:	095b      	lsrs	r3, r3, #5
 80049a2:	2164      	movs	r1, #100	; 0x64
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	3332      	adds	r3, #50	; 0x32
 80049ae:	4a34      	ldr	r2, [pc, #208]	; (8004a80 <UART_SetConfig+0x4e4>)
 80049b0:	fba2 2303 	umull	r2, r3, r2, r3
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ba:	441c      	add	r4, r3
 80049bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049c0:	2200      	movs	r2, #0
 80049c2:	673b      	str	r3, [r7, #112]	; 0x70
 80049c4:	677a      	str	r2, [r7, #116]	; 0x74
 80049c6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80049ca:	4642      	mov	r2, r8
 80049cc:	464b      	mov	r3, r9
 80049ce:	1891      	adds	r1, r2, r2
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	415b      	adcs	r3, r3
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049da:	4641      	mov	r1, r8
 80049dc:	1851      	adds	r1, r2, r1
 80049de:	6039      	str	r1, [r7, #0]
 80049e0:	4649      	mov	r1, r9
 80049e2:	414b      	adcs	r3, r1
 80049e4:	607b      	str	r3, [r7, #4]
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049f2:	4659      	mov	r1, fp
 80049f4:	00cb      	lsls	r3, r1, #3
 80049f6:	4651      	mov	r1, sl
 80049f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049fc:	4651      	mov	r1, sl
 80049fe:	00ca      	lsls	r2, r1, #3
 8004a00:	4610      	mov	r0, r2
 8004a02:	4619      	mov	r1, r3
 8004a04:	4603      	mov	r3, r0
 8004a06:	4642      	mov	r2, r8
 8004a08:	189b      	adds	r3, r3, r2
 8004a0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a0c:	464b      	mov	r3, r9
 8004a0e:	460a      	mov	r2, r1
 8004a10:	eb42 0303 	adc.w	r3, r2, r3
 8004a14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a20:	667a      	str	r2, [r7, #100]	; 0x64
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a2e:	4649      	mov	r1, r9
 8004a30:	008b      	lsls	r3, r1, #2
 8004a32:	4641      	mov	r1, r8
 8004a34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a38:	4641      	mov	r1, r8
 8004a3a:	008a      	lsls	r2, r1, #2
 8004a3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a40:	f7fb fbc6 	bl	80001d0 <__aeabi_uldivmod>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <UART_SetConfig+0x4e4>)
 8004a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a4e:	095b      	lsrs	r3, r3, #5
 8004a50:	2164      	movs	r1, #100	; 0x64
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	011b      	lsls	r3, r3, #4
 8004a5a:	3332      	adds	r3, #50	; 0x32
 8004a5c:	4a08      	ldr	r2, [pc, #32]	; (8004a80 <UART_SetConfig+0x4e4>)
 8004a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	f003 020f 	and.w	r2, r3, #15
 8004a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4422      	add	r2, r4
 8004a70:	609a      	str	r2, [r3, #8]
}
 8004a72:	bf00      	nop
 8004a74:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a7e:	bf00      	nop
 8004a80:	51eb851f 	.word	0x51eb851f

08004a84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a84:	b084      	sub	sp, #16
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b084      	sub	sp, #16
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	f107 001c 	add.w	r0, r7, #28
 8004a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d122      	bne.n	8004ae2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d105      	bne.n	8004ad6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f001 fbee 	bl	80062b8 <USB_CoreReset>
 8004adc:	4603      	mov	r3, r0
 8004ade:	73fb      	strb	r3, [r7, #15]
 8004ae0:	e01a      	b.n	8004b18 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f001 fbe2 	bl	80062b8 <USB_CoreReset>
 8004af4:	4603      	mov	r3, r0
 8004af6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	639a      	str	r2, [r3, #56]	; 0x38
 8004b0a:	e005      	b.n	8004b18 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d10b      	bne.n	8004b36 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f043 0206 	orr.w	r2, r3, #6
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f043 0220 	orr.w	r2, r3, #32
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b42:	b004      	add	sp, #16
 8004b44:	4770      	bx	lr
	...

08004b48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	4613      	mov	r3, r2
 8004b54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d165      	bne.n	8004c28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4a41      	ldr	r2, [pc, #260]	; (8004c64 <USB_SetTurnaroundTime+0x11c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d906      	bls.n	8004b72 <USB_SetTurnaroundTime+0x2a>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4a40      	ldr	r2, [pc, #256]	; (8004c68 <USB_SetTurnaroundTime+0x120>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d202      	bcs.n	8004b72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b6c:	230f      	movs	r3, #15
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	e062      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	4a3c      	ldr	r2, [pc, #240]	; (8004c68 <USB_SetTurnaroundTime+0x120>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d306      	bcc.n	8004b88 <USB_SetTurnaroundTime+0x40>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	4a3b      	ldr	r2, [pc, #236]	; (8004c6c <USB_SetTurnaroundTime+0x124>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d202      	bcs.n	8004b88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b82:	230e      	movs	r3, #14
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	e057      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4a38      	ldr	r2, [pc, #224]	; (8004c6c <USB_SetTurnaroundTime+0x124>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d306      	bcc.n	8004b9e <USB_SetTurnaroundTime+0x56>
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4a37      	ldr	r2, [pc, #220]	; (8004c70 <USB_SetTurnaroundTime+0x128>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d202      	bcs.n	8004b9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b98:	230d      	movs	r3, #13
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	e04c      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4a33      	ldr	r2, [pc, #204]	; (8004c70 <USB_SetTurnaroundTime+0x128>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d306      	bcc.n	8004bb4 <USB_SetTurnaroundTime+0x6c>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4a32      	ldr	r2, [pc, #200]	; (8004c74 <USB_SetTurnaroundTime+0x12c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d802      	bhi.n	8004bb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004bae:	230c      	movs	r3, #12
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	e041      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4a2f      	ldr	r2, [pc, #188]	; (8004c74 <USB_SetTurnaroundTime+0x12c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d906      	bls.n	8004bca <USB_SetTurnaroundTime+0x82>
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4a2e      	ldr	r2, [pc, #184]	; (8004c78 <USB_SetTurnaroundTime+0x130>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d802      	bhi.n	8004bca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004bc4:	230b      	movs	r3, #11
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	e036      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	4a2a      	ldr	r2, [pc, #168]	; (8004c78 <USB_SetTurnaroundTime+0x130>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d906      	bls.n	8004be0 <USB_SetTurnaroundTime+0x98>
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	4a29      	ldr	r2, [pc, #164]	; (8004c7c <USB_SetTurnaroundTime+0x134>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d802      	bhi.n	8004be0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004bda:	230a      	movs	r3, #10
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	e02b      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4a26      	ldr	r2, [pc, #152]	; (8004c7c <USB_SetTurnaroundTime+0x134>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d906      	bls.n	8004bf6 <USB_SetTurnaroundTime+0xae>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4a25      	ldr	r2, [pc, #148]	; (8004c80 <USB_SetTurnaroundTime+0x138>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d202      	bcs.n	8004bf6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004bf0:	2309      	movs	r3, #9
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	e020      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	4a21      	ldr	r2, [pc, #132]	; (8004c80 <USB_SetTurnaroundTime+0x138>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d306      	bcc.n	8004c0c <USB_SetTurnaroundTime+0xc4>
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4a20      	ldr	r2, [pc, #128]	; (8004c84 <USB_SetTurnaroundTime+0x13c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d802      	bhi.n	8004c0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004c06:	2308      	movs	r3, #8
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	e015      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4a1d      	ldr	r2, [pc, #116]	; (8004c84 <USB_SetTurnaroundTime+0x13c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d906      	bls.n	8004c22 <USB_SetTurnaroundTime+0xda>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4a1c      	ldr	r2, [pc, #112]	; (8004c88 <USB_SetTurnaroundTime+0x140>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d202      	bcs.n	8004c22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004c1c:	2307      	movs	r3, #7
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	e00a      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004c22:	2306      	movs	r3, #6
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	e007      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d102      	bne.n	8004c34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004c2e:	2309      	movs	r3, #9
 8004c30:	617b      	str	r3, [r7, #20]
 8004c32:	e001      	b.n	8004c38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004c34:	2309      	movs	r3, #9
 8004c36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	029b      	lsls	r3, r3, #10
 8004c4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004c50:	431a      	orrs	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	371c      	adds	r7, #28
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	00d8acbf 	.word	0x00d8acbf
 8004c68:	00e4e1c0 	.word	0x00e4e1c0
 8004c6c:	00f42400 	.word	0x00f42400
 8004c70:	01067380 	.word	0x01067380
 8004c74:	011a499f 	.word	0x011a499f
 8004c78:	01312cff 	.word	0x01312cff
 8004c7c:	014ca43f 	.word	0x014ca43f
 8004c80:	016e3600 	.word	0x016e3600
 8004c84:	01a6ab1f 	.word	0x01a6ab1f
 8004c88:	01e84800 	.word	0x01e84800

08004c8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f043 0201 	orr.w	r2, r3, #1
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cae:	b480      	push	{r7}
 8004cb0:	b083      	sub	sp, #12
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f023 0201 	bic.w	r2, r3, #1
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cec:	78fb      	ldrb	r3, [r7, #3]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d115      	bne.n	8004d1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004cfe:	2001      	movs	r0, #1
 8004d00:	f7fb ff66 	bl	8000bd0 <HAL_Delay>
      ms++;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	3301      	adds	r3, #1
 8004d08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f001 fa45 	bl	800619a <USB_GetMode>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d01e      	beq.n	8004d54 <USB_SetCurrentMode+0x84>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2b31      	cmp	r3, #49	; 0x31
 8004d1a:	d9f0      	bls.n	8004cfe <USB_SetCurrentMode+0x2e>
 8004d1c:	e01a      	b.n	8004d54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d1e:	78fb      	ldrb	r3, [r7, #3]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d115      	bne.n	8004d50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004d30:	2001      	movs	r0, #1
 8004d32:	f7fb ff4d 	bl	8000bd0 <HAL_Delay>
      ms++;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f001 fa2c 	bl	800619a <USB_GetMode>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d005      	beq.n	8004d54 <USB_SetCurrentMode+0x84>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b31      	cmp	r3, #49	; 0x31
 8004d4c:	d9f0      	bls.n	8004d30 <USB_SetCurrentMode+0x60>
 8004d4e:	e001      	b.n	8004d54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e005      	b.n	8004d60 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b32      	cmp	r3, #50	; 0x32
 8004d58:	d101      	bne.n	8004d5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e000      	b.n	8004d60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d68:	b084      	sub	sp, #16
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b086      	sub	sp, #24
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d82:	2300      	movs	r3, #0
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	e009      	b.n	8004d9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	3340      	adds	r3, #64	; 0x40
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	2200      	movs	r2, #0
 8004d94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b0e      	cmp	r3, #14
 8004da0:	d9f2      	bls.n	8004d88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004da2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d11c      	bne.n	8004de2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004db6:	f043 0302 	orr.w	r3, r3, #2
 8004dba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dcc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	639a      	str	r2, [r3, #56]	; 0x38
 8004de0:	e00b      	b.n	8004dfa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e00:	461a      	mov	r2, r3
 8004e02:	2300      	movs	r3, #0
 8004e04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e14:	461a      	mov	r2, r3
 8004e16:	680b      	ldr	r3, [r1, #0]
 8004e18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d10c      	bne.n	8004e3a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d104      	bne.n	8004e30 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e26:	2100      	movs	r1, #0
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f965 	bl	80050f8 <USB_SetDevSpeed>
 8004e2e:	e008      	b.n	8004e42 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e30:	2101      	movs	r1, #1
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f960 	bl	80050f8 <USB_SetDevSpeed>
 8004e38:	e003      	b.n	8004e42 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e3a:	2103      	movs	r1, #3
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f95b 	bl	80050f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e42:	2110      	movs	r1, #16
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f8f3 	bl	8005030 <USB_FlushTxFifo>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f91f 	bl	8005098 <USB_FlushRxFifo>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e76:	461a      	mov	r2, r3
 8004e78:	2300      	movs	r3, #0
 8004e7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e82:	461a      	mov	r2, r3
 8004e84:	2300      	movs	r3, #0
 8004e86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	e043      	b.n	8004f16 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ea4:	d118      	bne.n	8004ed8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10a      	bne.n	8004ec2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb8:	461a      	mov	r2, r3
 8004eba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ebe:	6013      	str	r3, [r2, #0]
 8004ec0:	e013      	b.n	8004eea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ece:	461a      	mov	r2, r3
 8004ed0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e008      	b.n	8004eea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	2300      	movs	r3, #0
 8004efa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f08:	461a      	mov	r2, r3
 8004f0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	3301      	adds	r3, #1
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d3b7      	bcc.n	8004e8e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	e043      	b.n	8004fac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f3a:	d118      	bne.n	8004f6e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	e013      	b.n	8004f80 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f64:	461a      	mov	r2, r3
 8004f66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	e008      	b.n	8004f80 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	2300      	movs	r3, #0
 8004f90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fa4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d3b7      	bcc.n	8004f24 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fc6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004fd4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d105      	bne.n	8004fe8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	f043 0210 	orr.w	r2, r3, #16
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699a      	ldr	r2, [r3, #24]
 8004fec:	4b0f      	ldr	r3, [pc, #60]	; (800502c <USB_DevInit+0x2c4>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d005      	beq.n	8005006 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	f043 0208 	orr.w	r2, r3, #8
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005008:	2b01      	cmp	r3, #1
 800500a:	d107      	bne.n	800501c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005014:	f043 0304 	orr.w	r3, r3, #4
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800501c:	7dfb      	ldrb	r3, [r7, #23]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005028:	b004      	add	sp, #16
 800502a:	4770      	bx	lr
 800502c:	803c3800 	.word	0x803c3800

08005030 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3301      	adds	r3, #1
 8005042:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4a13      	ldr	r2, [pc, #76]	; (8005094 <USB_FlushTxFifo+0x64>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d901      	bls.n	8005050 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e01b      	b.n	8005088 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	2b00      	cmp	r3, #0
 8005056:	daf2      	bge.n	800503e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	019b      	lsls	r3, r3, #6
 8005060:	f043 0220 	orr.w	r2, r3, #32
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	3301      	adds	r3, #1
 800506c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4a08      	ldr	r2, [pc, #32]	; (8005094 <USB_FlushTxFifo+0x64>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d901      	bls.n	800507a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e006      	b.n	8005088 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b20      	cmp	r3, #32
 8005084:	d0f0      	beq.n	8005068 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	00030d40 	.word	0x00030d40

08005098 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3301      	adds	r3, #1
 80050a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4a11      	ldr	r2, [pc, #68]	; (80050f4 <USB_FlushRxFifo+0x5c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d901      	bls.n	80050b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e018      	b.n	80050e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	daf2      	bge.n	80050a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2210      	movs	r2, #16
 80050c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3301      	adds	r3, #1
 80050cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	4a08      	ldr	r2, [pc, #32]	; (80050f4 <USB_FlushRxFifo+0x5c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d901      	bls.n	80050da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e006      	b.n	80050e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0310 	and.w	r3, r3, #16
 80050e2:	2b10      	cmp	r3, #16
 80050e4:	d0f0      	beq.n	80050c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	00030d40 	.word	0x00030d40

080050f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	78fb      	ldrb	r3, [r7, #3]
 8005112:	68f9      	ldr	r1, [r7, #12]
 8005114:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005118:	4313      	orrs	r3, r2
 800511a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800512a:	b480      	push	{r7}
 800512c:	b087      	sub	sp, #28
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0306 	and.w	r3, r3, #6
 8005142:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d102      	bne.n	8005150 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800514a:	2300      	movs	r3, #0
 800514c:	75fb      	strb	r3, [r7, #23]
 800514e:	e00a      	b.n	8005166 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d002      	beq.n	800515c <USB_GetDevSpeed+0x32>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b06      	cmp	r3, #6
 800515a:	d102      	bne.n	8005162 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800515c:	2302      	movs	r3, #2
 800515e:	75fb      	strb	r3, [r7, #23]
 8005160:	e001      	b.n	8005166 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005162:	230f      	movs	r3, #15
 8005164:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005166:	7dfb      	ldrb	r3, [r7, #23]
}
 8005168:	4618      	mov	r0, r3
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	785b      	ldrb	r3, [r3, #1]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d13a      	bne.n	8005206 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005196:	69da      	ldr	r2, [r3, #28]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	f003 030f 	and.w	r3, r3, #15
 80051a0:	2101      	movs	r1, #1
 80051a2:	fa01 f303 	lsl.w	r3, r1, r3
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	68f9      	ldr	r1, [r7, #12]
 80051aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051ae:	4313      	orrs	r3, r2
 80051b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d155      	bne.n	8005274 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	791b      	ldrb	r3, [r3, #4]
 80051e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	059b      	lsls	r3, r3, #22
 80051ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80051ec:	4313      	orrs	r3, r2
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	e036      	b.n	8005274 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520c:	69da      	ldr	r2, [r3, #28]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	2101      	movs	r1, #1
 8005218:	fa01 f303 	lsl.w	r3, r1, r3
 800521c:	041b      	lsls	r3, r3, #16
 800521e:	68f9      	ldr	r1, [r7, #12]
 8005220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005224:	4313      	orrs	r3, r2
 8005226:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d11a      	bne.n	8005274 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	791b      	ldrb	r3, [r3, #4]
 8005258:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800525a:	430b      	orrs	r3, r1
 800525c:	4313      	orrs	r3, r2
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	0151      	lsls	r1, r2, #5
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	440a      	add	r2, r1
 8005266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800526a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800526e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005272:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
	...

08005284 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	785b      	ldrb	r3, [r3, #1]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d161      	bne.n	8005364 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052b6:	d11f      	bne.n	80052f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	0151      	lsls	r1, r2, #5
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	440a      	add	r2, r1
 80052ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	0151      	lsls	r1, r2, #5
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	440a      	add	r2, r1
 80052ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	f003 030f 	and.w	r3, r3, #15
 8005308:	2101      	movs	r1, #1
 800530a:	fa01 f303 	lsl.w	r3, r1, r3
 800530e:	b29b      	uxth	r3, r3
 8005310:	43db      	mvns	r3, r3
 8005312:	68f9      	ldr	r1, [r7, #12]
 8005314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005318:	4013      	ands	r3, r2
 800531a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005322:	69da      	ldr	r2, [r3, #28]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	f003 030f 	and.w	r3, r3, #15
 800532c:	2101      	movs	r1, #1
 800532e:	fa01 f303 	lsl.w	r3, r1, r3
 8005332:	b29b      	uxth	r3, r3
 8005334:	43db      	mvns	r3, r3
 8005336:	68f9      	ldr	r1, [r7, #12]
 8005338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800533c:	4013      	ands	r3, r2
 800533e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	0159      	lsls	r1, r3, #5
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	440b      	add	r3, r1
 8005356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535a:	4619      	mov	r1, r3
 800535c:	4b35      	ldr	r3, [pc, #212]	; (8005434 <USB_DeactivateEndpoint+0x1b0>)
 800535e:	4013      	ands	r3, r2
 8005360:	600b      	str	r3, [r1, #0]
 8005362:	e060      	b.n	8005426 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005376:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800537a:	d11f      	bne.n	80053bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005396:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800539a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68ba      	ldr	r2, [r7, #8]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	2101      	movs	r1, #1
 80053ce:	fa01 f303 	lsl.w	r3, r1, r3
 80053d2:	041b      	lsls	r3, r3, #16
 80053d4:	43db      	mvns	r3, r3
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053dc:	4013      	ands	r3, r2
 80053de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e6:	69da      	ldr	r2, [r3, #28]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	f003 030f 	and.w	r3, r3, #15
 80053f0:	2101      	movs	r1, #1
 80053f2:	fa01 f303 	lsl.w	r3, r1, r3
 80053f6:	041b      	lsls	r3, r3, #16
 80053f8:	43db      	mvns	r3, r3
 80053fa:	68f9      	ldr	r1, [r7, #12]
 80053fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005400:	4013      	ands	r3, r2
 8005402:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4413      	add	r3, r2
 800540c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	0159      	lsls	r1, r3, #5
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	440b      	add	r3, r1
 800541a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541e:	4619      	mov	r1, r3
 8005420:	4b05      	ldr	r3, [pc, #20]	; (8005438 <USB_DeactivateEndpoint+0x1b4>)
 8005422:	4013      	ands	r3, r2
 8005424:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	ec337800 	.word	0xec337800
 8005438:	eff37800 	.word	0xeff37800

0800543c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08a      	sub	sp, #40	; 0x28
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	4613      	mov	r3, r2
 8005448:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	2b01      	cmp	r3, #1
 800545a:	f040 815c 	bne.w	8005716 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d132      	bne.n	80054cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	0151      	lsls	r1, r2, #5
 8005478:	69fa      	ldr	r2, [r7, #28]
 800547a:	440a      	add	r2, r1
 800547c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005480:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005484:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005488:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	0151      	lsls	r1, r2, #5
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	440a      	add	r2, r1
 80054a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	0151      	lsls	r1, r2, #5
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	440a      	add	r2, r1
 80054c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c4:	0cdb      	lsrs	r3, r3, #19
 80054c6:	04db      	lsls	r3, r3, #19
 80054c8:	6113      	str	r3, [r2, #16]
 80054ca:	e074      	b.n	80055b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	0151      	lsls	r1, r2, #5
 80054de:	69fa      	ldr	r2, [r7, #28]
 80054e0:	440a      	add	r2, r1
 80054e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054e6:	0cdb      	lsrs	r3, r3, #19
 80054e8:	04db      	lsls	r3, r3, #19
 80054ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	0151      	lsls	r1, r2, #5
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	440a      	add	r2, r1
 8005502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005506:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800550a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800550e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	6999      	ldr	r1, [r3, #24]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	440b      	add	r3, r1
 8005528:	1e59      	subs	r1, r3, #1
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005532:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005534:	4b9d      	ldr	r3, [pc, #628]	; (80057ac <USB_EPStartXfer+0x370>)
 8005536:	400b      	ands	r3, r1
 8005538:	69b9      	ldr	r1, [r7, #24]
 800553a:	0148      	lsls	r0, r1, #5
 800553c:	69f9      	ldr	r1, [r7, #28]
 800553e:	4401      	add	r1, r0
 8005540:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005544:	4313      	orrs	r3, r2
 8005546:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005554:	691a      	ldr	r2, [r3, #16]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800555e:	69b9      	ldr	r1, [r7, #24]
 8005560:	0148      	lsls	r0, r1, #5
 8005562:	69f9      	ldr	r1, [r7, #28]
 8005564:	4401      	add	r1, r0
 8005566:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800556a:	4313      	orrs	r3, r2
 800556c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	791b      	ldrb	r3, [r3, #4]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d11f      	bne.n	80055b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	0151      	lsls	r1, r2, #5
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	440a      	add	r2, r1
 800558c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005590:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005594:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	4413      	add	r3, r2
 800559e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	0151      	lsls	r1, r2, #5
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	440a      	add	r2, r1
 80055ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80055b6:	79fb      	ldrb	r3, [r7, #7]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d14b      	bne.n	8005654 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	695b      	ldr	r3, [r3, #20]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d009      	beq.n	80055d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d0:	461a      	mov	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	791b      	ldrb	r3, [r3, #4]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d128      	bne.n	8005632 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d110      	bne.n	8005612 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	0151      	lsls	r1, r2, #5
 8005602:	69fa      	ldr	r2, [r7, #28]
 8005604:	440a      	add	r2, r1
 8005606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800560a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800560e:	6013      	str	r3, [r2, #0]
 8005610:	e00f      	b.n	8005632 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	0151      	lsls	r1, r2, #5
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	440a      	add	r2, r1
 8005628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800562c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005630:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005632:	69bb      	ldr	r3, [r7, #24]
 8005634:	015a      	lsls	r2, r3, #5
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	4413      	add	r3, r2
 800563a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	0151      	lsls	r1, r2, #5
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	440a      	add	r2, r1
 8005648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800564c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	e133      	b.n	80058bc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	4413      	add	r3, r2
 800565c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	0151      	lsls	r1, r2, #5
 8005666:	69fa      	ldr	r2, [r7, #28]
 8005668:	440a      	add	r2, r1
 800566a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800566e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005672:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	791b      	ldrb	r3, [r3, #4]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d015      	beq.n	80056a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 811b 	beq.w	80058bc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800568c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	2101      	movs	r1, #1
 8005698:	fa01 f303 	lsl.w	r3, r1, r3
 800569c:	69f9      	ldr	r1, [r7, #28]
 800569e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056a2:	4313      	orrs	r3, r2
 80056a4:	634b      	str	r3, [r1, #52]	; 0x34
 80056a6:	e109      	b.n	80058bc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d110      	bne.n	80056da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	0151      	lsls	r1, r2, #5
 80056ca:	69fa      	ldr	r2, [r7, #28]
 80056cc:	440a      	add	r2, r1
 80056ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	e00f      	b.n	80056fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	0151      	lsls	r1, r2, #5
 80056ec:	69fa      	ldr	r2, [r7, #28]
 80056ee:	440a      	add	r2, r1
 80056f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	6919      	ldr	r1, [r3, #16]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	781a      	ldrb	r2, [r3, #0]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	b298      	uxth	r0, r3
 8005708:	79fb      	ldrb	r3, [r7, #7]
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	4603      	mov	r3, r0
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 fade 	bl	8005cd0 <USB_WritePacket>
 8005714:	e0d2      	b.n	80058bc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	4413      	add	r3, r2
 800571e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	69ba      	ldr	r2, [r7, #24]
 8005726:	0151      	lsls	r1, r2, #5
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	440a      	add	r2, r1
 800572c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005730:	0cdb      	lsrs	r3, r3, #19
 8005732:	04db      	lsls	r3, r3, #19
 8005734:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	015a      	lsls	r2, r3, #5
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	4413      	add	r3, r2
 800573e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	0151      	lsls	r1, r2, #5
 8005748:	69fa      	ldr	r2, [r7, #28]
 800574a:	440a      	add	r2, r1
 800574c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005750:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005754:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005758:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d126      	bne.n	80057b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	4413      	add	r3, r2
 800576a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005778:	69b9      	ldr	r1, [r7, #24]
 800577a:	0148      	lsls	r0, r1, #5
 800577c:	69f9      	ldr	r1, [r7, #28]
 800577e:	4401      	add	r1, r0
 8005780:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005784:	4313      	orrs	r3, r2
 8005786:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	0151      	lsls	r1, r2, #5
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	440a      	add	r2, r1
 800579e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057a6:	6113      	str	r3, [r2, #16]
 80057a8:	e03a      	b.n	8005820 <USB_EPStartXfer+0x3e4>
 80057aa:	bf00      	nop
 80057ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	699a      	ldr	r2, [r3, #24]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	4413      	add	r3, r2
 80057ba:	1e5a      	subs	r2, r3, #1
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	8afa      	ldrh	r2, [r7, #22]
 80057cc:	fb03 f202 	mul.w	r2, r3, r2
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e0:	691a      	ldr	r2, [r3, #16]
 80057e2:	8afb      	ldrh	r3, [r7, #22]
 80057e4:	04d9      	lsls	r1, r3, #19
 80057e6:	4b38      	ldr	r3, [pc, #224]	; (80058c8 <USB_EPStartXfer+0x48c>)
 80057e8:	400b      	ands	r3, r1
 80057ea:	69b9      	ldr	r1, [r7, #24]
 80057ec:	0148      	lsls	r0, r1, #5
 80057ee:	69f9      	ldr	r1, [r7, #28]
 80057f0:	4401      	add	r1, r0
 80057f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80057f6:	4313      	orrs	r3, r2
 80057f8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005806:	691a      	ldr	r2, [r3, #16]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	69db      	ldr	r3, [r3, #28]
 800580c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005810:	69b9      	ldr	r1, [r7, #24]
 8005812:	0148      	lsls	r0, r1, #5
 8005814:	69f9      	ldr	r1, [r7, #28]
 8005816:	4401      	add	r1, r0
 8005818:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800581c:	4313      	orrs	r3, r2
 800581e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d10d      	bne.n	8005842 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d009      	beq.n	8005842 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	6919      	ldr	r1, [r3, #16]
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583e:	460a      	mov	r2, r1
 8005840:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	791b      	ldrb	r3, [r3, #4]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d128      	bne.n	800589c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005856:	2b00      	cmp	r3, #0
 8005858:	d110      	bne.n	800587c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	440a      	add	r2, r1
 8005870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005874:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	e00f      	b.n	800589c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	0151      	lsls	r1, r2, #5
 800588e:	69fa      	ldr	r2, [r7, #28]
 8005890:	440a      	add	r2, r1
 8005892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800589a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	0151      	lsls	r1, r2, #5
 80058ae:	69fa      	ldr	r2, [r7, #28]
 80058b0:	440a      	add	r2, r1
 80058b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3720      	adds	r7, #32
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	1ff80000 	.word	0x1ff80000

080058cc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	4613      	mov	r3, r2
 80058d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	785b      	ldrb	r3, [r3, #1]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	f040 80ce 	bne.w	8005a8a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d132      	bne.n	800595c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	0151      	lsls	r1, r2, #5
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	440a      	add	r2, r1
 800590c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005910:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005914:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005918:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	0151      	lsls	r1, r2, #5
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	440a      	add	r2, r1
 8005930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005934:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005938:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005954:	0cdb      	lsrs	r3, r3, #19
 8005956:	04db      	lsls	r3, r3, #19
 8005958:	6113      	str	r3, [r2, #16]
 800595a:	e04e      	b.n	80059fa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	0151      	lsls	r1, r2, #5
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	440a      	add	r2, r1
 8005972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005976:	0cdb      	lsrs	r3, r3, #19
 8005978:	04db      	lsls	r3, r3, #19
 800597a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	440a      	add	r2, r1
 8005992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005996:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800599a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800599e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	699a      	ldr	r2, [r3, #24]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d903      	bls.n	80059b4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	0151      	lsls	r1, r2, #5
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	440a      	add	r2, r1
 80059ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e0:	691a      	ldr	r2, [r3, #16]
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ea:	6939      	ldr	r1, [r7, #16]
 80059ec:	0148      	lsls	r0, r1, #5
 80059ee:	6979      	ldr	r1, [r7, #20]
 80059f0:	4401      	add	r1, r0
 80059f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80059f6:	4313      	orrs	r3, r2
 80059f8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d11e      	bne.n	8005a3e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d009      	beq.n	8005a1c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a14:	461a      	mov	r2, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	0151      	lsls	r1, r2, #5
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	440a      	add	r2, r1
 8005a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	e097      	b.n	8005b6e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	0151      	lsls	r1, r2, #5
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	440a      	add	r2, r1
 8005a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a5c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 8083 	beq.w	8005b6e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	f003 030f 	and.w	r3, r3, #15
 8005a78:	2101      	movs	r1, #1
 8005a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a7e:	6979      	ldr	r1, [r7, #20]
 8005a80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a84:	4313      	orrs	r3, r2
 8005a86:	634b      	str	r3, [r1, #52]	; 0x34
 8005a88:	e071      	b.n	8005b6e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	0151      	lsls	r1, r2, #5
 8005a9c:	697a      	ldr	r2, [r7, #20]
 8005a9e:	440a      	add	r2, r1
 8005aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa4:	0cdb      	lsrs	r3, r3, #19
 8005aa6:	04db      	lsls	r3, r3, #19
 8005aa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	0151      	lsls	r1, r2, #5
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	440a      	add	r2, r1
 8005ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ac8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005acc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	68da      	ldr	r2, [r3, #12]
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	0151      	lsls	r1, r2, #5
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	440a      	add	r2, r1
 8005afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b1c:	6939      	ldr	r1, [r7, #16]
 8005b1e:	0148      	lsls	r0, r1, #5
 8005b20:	6979      	ldr	r1, [r7, #20]
 8005b22:	4401      	add	r1, r0
 8005b24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d10d      	bne.n	8005b4e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d009      	beq.n	8005b4e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	6919      	ldr	r1, [r3, #16]
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b4a:	460a      	mov	r2, r1
 8005b4c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	0151      	lsls	r1, r2, #5
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	440a      	add	r2, r1
 8005b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	371c      	adds	r7, #28
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	785b      	ldrb	r3, [r3, #1]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d14a      	bne.n	8005c30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bb2:	f040 8086 	bne.w	8005cc2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	7812      	ldrb	r2, [r2, #0]
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bd8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	7812      	ldrb	r2, [r2, #0]
 8005bee:	0151      	lsls	r1, r2, #5
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	440a      	add	r2, r1
 8005bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bfc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3301      	adds	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d902      	bls.n	8005c14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	75fb      	strb	r3, [r7, #23]
          break;
 8005c12:	e056      	b.n	8005cc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c2c:	d0e7      	beq.n	8005bfe <USB_EPStopXfer+0x82>
 8005c2e:	e048      	b.n	8005cc2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c48:	d13b      	bne.n	8005cc2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	7812      	ldrb	r2, [r2, #0]
 8005c5e:	0151      	lsls	r1, r2, #5
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	440a      	add	r2, r1
 8005c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	7812      	ldrb	r2, [r2, #0]
 8005c82:	0151      	lsls	r1, r2, #5
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	440a      	add	r2, r1
 8005c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3301      	adds	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d902      	bls.n	8005ca8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ca6:	e00c      	b.n	8005cc2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	015a      	lsls	r2, r3, #5
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cc0:	d0e7      	beq.n	8005c92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b089      	sub	sp, #36	; 0x24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	4611      	mov	r1, r2
 8005cdc:	461a      	mov	r2, r3
 8005cde:	460b      	mov	r3, r1
 8005ce0:	71fb      	strb	r3, [r7, #7]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005cee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d123      	bne.n	8005d3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005cf6:	88bb      	ldrh	r3, [r7, #4]
 8005cf8:	3303      	adds	r3, #3
 8005cfa:	089b      	lsrs	r3, r3, #2
 8005cfc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005cfe:	2300      	movs	r3, #0
 8005d00:	61bb      	str	r3, [r7, #24]
 8005d02:	e018      	b.n	8005d36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d04:	79fb      	ldrb	r3, [r7, #7]
 8005d06:	031a      	lsls	r2, r3, #12
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d10:	461a      	mov	r2, r3
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	3301      	adds	r3, #1
 8005d22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	3301      	adds	r3, #1
 8005d28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	3301      	adds	r3, #1
 8005d34:	61bb      	str	r3, [r7, #24]
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d3e2      	bcc.n	8005d04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3724      	adds	r7, #36	; 0x24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b08b      	sub	sp, #44	; 0x2c
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	4613      	mov	r3, r2
 8005d58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d62:	88fb      	ldrh	r3, [r7, #6]
 8005d64:	089b      	lsrs	r3, r3, #2
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d6a:	88fb      	ldrh	r3, [r7, #6]
 8005d6c:	f003 0303 	and.w	r3, r3, #3
 8005d70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d72:	2300      	movs	r3, #0
 8005d74:	623b      	str	r3, [r7, #32]
 8005d76:	e014      	b.n	8005da2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d82:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	3301      	adds	r3, #1
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	3301      	adds	r3, #1
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	3301      	adds	r3, #1
 8005d9a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	623b      	str	r3, [r7, #32]
 8005da2:	6a3a      	ldr	r2, [r7, #32]
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d3e6      	bcc.n	8005d78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005daa:	8bfb      	ldrh	r3, [r7, #30]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d01e      	beq.n	8005dee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f107 0310 	add.w	r3, r7, #16
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	701a      	strb	r2, [r3, #0]
      i++;
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dde:	3301      	adds	r3, #1
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005de2:	8bfb      	ldrh	r3, [r7, #30]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005de8:	8bfb      	ldrh	r3, [r7, #30]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1ea      	bne.n	8005dc4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	372c      	adds	r7, #44	; 0x2c
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	785b      	ldrb	r3, [r3, #1]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d12c      	bne.n	8005e72 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	db12      	blt.n	8005e50 <USB_EPSetStall+0x54>
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00f      	beq.n	8005e50 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	0151      	lsls	r1, r2, #5
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	440a      	add	r2, r1
 8005e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e4e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	0151      	lsls	r1, r2, #5
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	440a      	add	r2, r1
 8005e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	e02b      	b.n	8005eca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	015a      	lsls	r2, r3, #5
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	db12      	blt.n	8005eaa <USB_EPSetStall+0xae>
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00f      	beq.n	8005eaa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	0151      	lsls	r1, r2, #5
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	440a      	add	r2, r1
 8005ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ea8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ec8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	785b      	ldrb	r3, [r3, #1]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d128      	bne.n	8005f46 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	0151      	lsls	r1, r2, #5
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	440a      	add	r2, r1
 8005f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f12:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	791b      	ldrb	r3, [r3, #4]
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d003      	beq.n	8005f24 <USB_EPClearStall+0x4c>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	791b      	ldrb	r3, [r3, #4]
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d138      	bne.n	8005f96 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	e027      	b.n	8005f96 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	0151      	lsls	r1, r2, #5
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	440a      	add	r2, r1
 8005f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f60:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	791b      	ldrb	r3, [r3, #4]
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	d003      	beq.n	8005f76 <USB_EPClearStall+0x9e>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	791b      	ldrb	r3, [r3, #4]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d10f      	bne.n	8005f96 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f94:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fc2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005fc6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	011b      	lsls	r3, r3, #4
 8005fd4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005fd8:	68f9      	ldr	r1, [r7, #12]
 8005fda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800600a:	f023 0303 	bic.w	r3, r3, #3
 800600e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800601e:	f023 0302 	bic.w	r3, r3, #2
 8006022:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006032:	b480      	push	{r7}
 8006034:	b085      	sub	sp, #20
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800604c:	f023 0303 	bic.w	r3, r3, #3
 8006050:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006060:	f043 0302 	orr.w	r3, r3, #2
 8006064:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4013      	ands	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800608c:	68fb      	ldr	r3, [r7, #12]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800609a:	b480      	push	{r7}
 800609c:	b085      	sub	sp, #20
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	4013      	ands	r3, r2
 80060bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	0c1b      	lsrs	r3, r3, #16
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b085      	sub	sp, #20
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	4013      	ands	r3, r2
 80060f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	b29b      	uxth	r3, r3
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006102:	b480      	push	{r7}
 8006104:	b085      	sub	sp, #20
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	460b      	mov	r3, r1
 800610c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006112:	78fb      	ldrb	r3, [r7, #3]
 8006114:	015a      	lsls	r2, r3, #5
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	4413      	add	r3, r2
 800611a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006128:	695b      	ldr	r3, [r3, #20]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	4013      	ands	r3, r2
 800612e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006130:	68bb      	ldr	r3, [r7, #8]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800613e:	b480      	push	{r7}
 8006140:	b087      	sub	sp, #28
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006160:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006162:	78fb      	ldrb	r3, [r7, #3]
 8006164:	f003 030f 	and.w	r3, r3, #15
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	fa22 f303 	lsr.w	r3, r2, r3
 800616e:	01db      	lsls	r3, r3, #7
 8006170:	b2db      	uxtb	r3, r3
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006178:	78fb      	ldrb	r3, [r7, #3]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4013      	ands	r3, r2
 800618a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800618c:	68bb      	ldr	r3, [r7, #8]
}
 800618e:	4618      	mov	r0, r3
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800619a:	b480      	push	{r7}
 800619c:	b083      	sub	sp, #12
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	f003 0301 	and.w	r3, r3, #1
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80061d4:	f023 0307 	bic.w	r3, r3, #7
 80061d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	460b      	mov	r3, r1
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	333c      	adds	r3, #60	; 0x3c
 8006212:	3304      	adds	r3, #4
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4a26      	ldr	r2, [pc, #152]	; (80062b4 <USB_EP0_OutStart+0xb8>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d90a      	bls.n	8006236 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800622c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006230:	d101      	bne.n	8006236 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	e037      	b.n	80062a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623c:	461a      	mov	r2, r3
 800623e:	2300      	movs	r3, #0
 8006240:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006250:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006254:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006264:	f043 0318 	orr.w	r3, r3, #24
 8006268:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006278:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800627c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800627e:	7afb      	ldrb	r3, [r7, #11]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d10f      	bne.n	80062a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628a:	461a      	mov	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800629e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80062a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	371c      	adds	r7, #28
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	4f54300a 	.word	0x4f54300a

080062b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3301      	adds	r3, #1
 80062c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	4a13      	ldr	r2, [pc, #76]	; (800631c <USB_CoreReset+0x64>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d901      	bls.n	80062d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e01b      	b.n	800630e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	daf2      	bge.n	80062c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f043 0201 	orr.w	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	3301      	adds	r3, #1
 80062f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	4a09      	ldr	r2, [pc, #36]	; (800631c <USB_CoreReset+0x64>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d901      	bls.n	8006300 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e006      	b.n	800630e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b01      	cmp	r3, #1
 800630a:	d0f0      	beq.n	80062ee <USB_CoreReset+0x36>

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	00030d40 	.word	0x00030d40

08006320 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800632c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006330:	f005 f9bc 	bl	800b6ac <USBD_static_malloc>
 8006334:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d109      	bne.n	8006350 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	32b0      	adds	r2, #176	; 0xb0
 8006346:	2100      	movs	r1, #0
 8006348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800634c:	2302      	movs	r3, #2
 800634e:	e0d4      	b.n	80064fa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006350:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006354:	2100      	movs	r1, #0
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f005 fa1e 	bl	800b798 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	32b0      	adds	r2, #176	; 0xb0
 8006366:	68f9      	ldr	r1, [r7, #12]
 8006368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	32b0      	adds	r2, #176	; 0xb0
 8006376:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	7c1b      	ldrb	r3, [r3, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d138      	bne.n	80063fa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006388:	4b5e      	ldr	r3, [pc, #376]	; (8006504 <USBD_CDC_Init+0x1e4>)
 800638a:	7819      	ldrb	r1, [r3, #0]
 800638c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006390:	2202      	movs	r2, #2
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f005 f867 	bl	800b466 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006398:	4b5a      	ldr	r3, [pc, #360]	; (8006504 <USBD_CDC_Init+0x1e4>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	f003 020f 	and.w	r2, r3, #15
 80063a0:	6879      	ldr	r1, [r7, #4]
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	3324      	adds	r3, #36	; 0x24
 80063ae:	2201      	movs	r2, #1
 80063b0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80063b2:	4b55      	ldr	r3, [pc, #340]	; (8006508 <USBD_CDC_Init+0x1e8>)
 80063b4:	7819      	ldrb	r1, [r3, #0]
 80063b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063ba:	2202      	movs	r2, #2
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f005 f852 	bl	800b466 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80063c2:	4b51      	ldr	r3, [pc, #324]	; (8006508 <USBD_CDC_Init+0x1e8>)
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	f003 020f 	and.w	r2, r3, #15
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	440b      	add	r3, r1
 80063d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063da:	2201      	movs	r2, #1
 80063dc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80063de:	4b4b      	ldr	r3, [pc, #300]	; (800650c <USBD_CDC_Init+0x1ec>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	f003 020f 	and.w	r2, r3, #15
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	3326      	adds	r3, #38	; 0x26
 80063f4:	2210      	movs	r2, #16
 80063f6:	801a      	strh	r2, [r3, #0]
 80063f8:	e035      	b.n	8006466 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80063fa:	4b42      	ldr	r3, [pc, #264]	; (8006504 <USBD_CDC_Init+0x1e4>)
 80063fc:	7819      	ldrb	r1, [r3, #0]
 80063fe:	2340      	movs	r3, #64	; 0x40
 8006400:	2202      	movs	r2, #2
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f005 f82f 	bl	800b466 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006408:	4b3e      	ldr	r3, [pc, #248]	; (8006504 <USBD_CDC_Init+0x1e4>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	f003 020f 	and.w	r2, r3, #15
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	4613      	mov	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	440b      	add	r3, r1
 800641c:	3324      	adds	r3, #36	; 0x24
 800641e:	2201      	movs	r2, #1
 8006420:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006422:	4b39      	ldr	r3, [pc, #228]	; (8006508 <USBD_CDC_Init+0x1e8>)
 8006424:	7819      	ldrb	r1, [r3, #0]
 8006426:	2340      	movs	r3, #64	; 0x40
 8006428:	2202      	movs	r2, #2
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f005 f81b 	bl	800b466 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006430:	4b35      	ldr	r3, [pc, #212]	; (8006508 <USBD_CDC_Init+0x1e8>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	f003 020f 	and.w	r2, r3, #15
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	440b      	add	r3, r1
 8006444:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006448:	2201      	movs	r2, #1
 800644a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800644c:	4b2f      	ldr	r3, [pc, #188]	; (800650c <USBD_CDC_Init+0x1ec>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	f003 020f 	and.w	r2, r3, #15
 8006454:	6879      	ldr	r1, [r7, #4]
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	440b      	add	r3, r1
 8006460:	3326      	adds	r3, #38	; 0x26
 8006462:	2210      	movs	r2, #16
 8006464:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006466:	4b29      	ldr	r3, [pc, #164]	; (800650c <USBD_CDC_Init+0x1ec>)
 8006468:	7819      	ldrb	r1, [r3, #0]
 800646a:	2308      	movs	r3, #8
 800646c:	2203      	movs	r2, #3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f004 fff9 	bl	800b466 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006474:	4b25      	ldr	r3, [pc, #148]	; (800650c <USBD_CDC_Init+0x1ec>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	f003 020f 	and.w	r2, r3, #15
 800647c:	6879      	ldr	r1, [r7, #4]
 800647e:	4613      	mov	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	440b      	add	r3, r1
 8006488:	3324      	adds	r3, #36	; 0x24
 800648a:	2201      	movs	r2, #1
 800648c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	33b0      	adds	r3, #176	; 0xb0
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80064c4:	2302      	movs	r3, #2
 80064c6:	e018      	b.n	80064fa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	7c1b      	ldrb	r3, [r3, #16]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10a      	bne.n	80064e6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064d0:	4b0d      	ldr	r3, [pc, #52]	; (8006508 <USBD_CDC_Init+0x1e8>)
 80064d2:	7819      	ldrb	r1, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f005 f8b0 	bl	800b644 <USBD_LL_PrepareReceive>
 80064e4:	e008      	b.n	80064f8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064e6:	4b08      	ldr	r3, [pc, #32]	; (8006508 <USBD_CDC_Init+0x1e8>)
 80064e8:	7819      	ldrb	r1, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064f0:	2340      	movs	r3, #64	; 0x40
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f005 f8a6 	bl	800b644 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000093 	.word	0x20000093
 8006508:	20000094 	.word	0x20000094
 800650c:	20000095 	.word	0x20000095

08006510 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	460b      	mov	r3, r1
 800651a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800651c:	4b3a      	ldr	r3, [pc, #232]	; (8006608 <USBD_CDC_DeInit+0xf8>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	4619      	mov	r1, r3
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f004 ffc5 	bl	800b4b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006528:	4b37      	ldr	r3, [pc, #220]	; (8006608 <USBD_CDC_DeInit+0xf8>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	f003 020f 	and.w	r2, r3, #15
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	440b      	add	r3, r1
 800653c:	3324      	adds	r3, #36	; 0x24
 800653e:	2200      	movs	r2, #0
 8006540:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006542:	4b32      	ldr	r3, [pc, #200]	; (800660c <USBD_CDC_DeInit+0xfc>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f004 ffb2 	bl	800b4b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800654e:	4b2f      	ldr	r3, [pc, #188]	; (800660c <USBD_CDC_DeInit+0xfc>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	f003 020f 	and.w	r2, r3, #15
 8006556:	6879      	ldr	r1, [r7, #4]
 8006558:	4613      	mov	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	440b      	add	r3, r1
 8006562:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006566:	2200      	movs	r2, #0
 8006568:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800656a:	4b29      	ldr	r3, [pc, #164]	; (8006610 <USBD_CDC_DeInit+0x100>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f004 ff9e 	bl	800b4b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006576:	4b26      	ldr	r3, [pc, #152]	; (8006610 <USBD_CDC_DeInit+0x100>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	f003 020f 	and.w	r2, r3, #15
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	4613      	mov	r3, r2
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	440b      	add	r3, r1
 800658a:	3324      	adds	r3, #36	; 0x24
 800658c:	2200      	movs	r2, #0
 800658e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006590:	4b1f      	ldr	r3, [pc, #124]	; (8006610 <USBD_CDC_DeInit+0x100>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	f003 020f 	and.w	r2, r3, #15
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	4613      	mov	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	440b      	add	r3, r1
 80065a4:	3326      	adds	r3, #38	; 0x26
 80065a6:	2200      	movs	r2, #0
 80065a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	32b0      	adds	r2, #176	; 0xb0
 80065b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01f      	beq.n	80065fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	33b0      	adds	r3, #176	; 0xb0
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	32b0      	adds	r2, #176	; 0xb0
 80065da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065de:	4618      	mov	r0, r3
 80065e0:	f005 f872 	bl	800b6c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	32b0      	adds	r2, #176	; 0xb0
 80065ee:	2100      	movs	r1, #0
 80065f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	20000093 	.word	0x20000093
 800660c:	20000094 	.word	0x20000094
 8006610:	20000095 	.word	0x20000095

08006614 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	32b0      	adds	r2, #176	; 0xb0
 8006628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800662c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006640:	2303      	movs	r3, #3
 8006642:	e0bf      	b.n	80067c4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800664c:	2b00      	cmp	r3, #0
 800664e:	d050      	beq.n	80066f2 <USBD_CDC_Setup+0xde>
 8006650:	2b20      	cmp	r3, #32
 8006652:	f040 80af 	bne.w	80067b4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	88db      	ldrh	r3, [r3, #6]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d03a      	beq.n	80066d4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	b25b      	sxtb	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	da1b      	bge.n	80066a0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	33b0      	adds	r3, #176	; 0xb0
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4413      	add	r3, r2
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800667e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006680:	683a      	ldr	r2, [r7, #0]
 8006682:	88d2      	ldrh	r2, [r2, #6]
 8006684:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	88db      	ldrh	r3, [r3, #6]
 800668a:	2b07      	cmp	r3, #7
 800668c:	bf28      	it	cs
 800668e:	2307      	movcs	r3, #7
 8006690:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	89fa      	ldrh	r2, [r7, #14]
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f001 fd43 	bl	8008124 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800669e:	e090      	b.n	80067c2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	785a      	ldrb	r2, [r3, #1]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	88db      	ldrh	r3, [r3, #6]
 80066ae:	2b3f      	cmp	r3, #63	; 0x3f
 80066b0:	d803      	bhi.n	80066ba <USBD_CDC_Setup+0xa6>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	88db      	ldrh	r3, [r3, #6]
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	e000      	b.n	80066bc <USBD_CDC_Setup+0xa8>
 80066ba:	2240      	movs	r2, #64	; 0x40
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80066c2:	6939      	ldr	r1, [r7, #16]
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80066ca:	461a      	mov	r2, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 fd55 	bl	800817c <USBD_CtlPrepareRx>
      break;
 80066d2:	e076      	b.n	80067c2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	33b0      	adds	r3, #176	; 0xb0
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	7850      	ldrb	r0, [r2, #1]
 80066ea:	2200      	movs	r2, #0
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	4798      	blx	r3
      break;
 80066f0:	e067      	b.n	80067c2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	785b      	ldrb	r3, [r3, #1]
 80066f6:	2b0b      	cmp	r3, #11
 80066f8:	d851      	bhi.n	800679e <USBD_CDC_Setup+0x18a>
 80066fa:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <USBD_CDC_Setup+0xec>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	08006731 	.word	0x08006731
 8006704:	080067ad 	.word	0x080067ad
 8006708:	0800679f 	.word	0x0800679f
 800670c:	0800679f 	.word	0x0800679f
 8006710:	0800679f 	.word	0x0800679f
 8006714:	0800679f 	.word	0x0800679f
 8006718:	0800679f 	.word	0x0800679f
 800671c:	0800679f 	.word	0x0800679f
 8006720:	0800679f 	.word	0x0800679f
 8006724:	0800679f 	.word	0x0800679f
 8006728:	0800675b 	.word	0x0800675b
 800672c:	08006785 	.word	0x08006785
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b03      	cmp	r3, #3
 800673a:	d107      	bne.n	800674c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800673c:	f107 030a 	add.w	r3, r7, #10
 8006740:	2202      	movs	r2, #2
 8006742:	4619      	mov	r1, r3
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 fced 	bl	8008124 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800674a:	e032      	b.n	80067b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f001 fc77 	bl	8008042 <USBD_CtlError>
            ret = USBD_FAIL;
 8006754:	2303      	movs	r3, #3
 8006756:	75fb      	strb	r3, [r7, #23]
          break;
 8006758:	e02b      	b.n	80067b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b03      	cmp	r3, #3
 8006764:	d107      	bne.n	8006776 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006766:	f107 030d 	add.w	r3, r7, #13
 800676a:	2201      	movs	r2, #1
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f001 fcd8 	bl	8008124 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006774:	e01d      	b.n	80067b2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006776:	6839      	ldr	r1, [r7, #0]
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 fc62 	bl	8008042 <USBD_CtlError>
            ret = USBD_FAIL;
 800677e:	2303      	movs	r3, #3
 8006780:	75fb      	strb	r3, [r7, #23]
          break;
 8006782:	e016      	b.n	80067b2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b03      	cmp	r3, #3
 800678e:	d00f      	beq.n	80067b0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006790:	6839      	ldr	r1, [r7, #0]
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f001 fc55 	bl	8008042 <USBD_CtlError>
            ret = USBD_FAIL;
 8006798:	2303      	movs	r3, #3
 800679a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800679c:	e008      	b.n	80067b0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f001 fc4e 	bl	8008042 <USBD_CtlError>
          ret = USBD_FAIL;
 80067a6:	2303      	movs	r3, #3
 80067a8:	75fb      	strb	r3, [r7, #23]
          break;
 80067aa:	e002      	b.n	80067b2 <USBD_CDC_Setup+0x19e>
          break;
 80067ac:	bf00      	nop
 80067ae:	e008      	b.n	80067c2 <USBD_CDC_Setup+0x1ae>
          break;
 80067b0:	bf00      	nop
      }
      break;
 80067b2:	e006      	b.n	80067c2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 fc43 	bl	8008042 <USBD_CtlError>
      ret = USBD_FAIL;
 80067bc:	2303      	movs	r3, #3
 80067be:	75fb      	strb	r3, [r7, #23]
      break;
 80067c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3718      	adds	r7, #24
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80067de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	32b0      	adds	r2, #176	; 0xb0
 80067ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e065      	b.n	80068c2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	32b0      	adds	r2, #176	; 0xb0
 8006800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006804:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006806:	78fb      	ldrb	r3, [r7, #3]
 8006808:	f003 020f 	and.w	r2, r3, #15
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	4613      	mov	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	440b      	add	r3, r1
 8006818:	3318      	adds	r3, #24
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d02f      	beq.n	8006880 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	f003 020f 	and.w	r2, r3, #15
 8006826:	6879      	ldr	r1, [r7, #4]
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	440b      	add	r3, r1
 8006832:	3318      	adds	r3, #24
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	78fb      	ldrb	r3, [r7, #3]
 8006838:	f003 010f 	and.w	r1, r3, #15
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	460b      	mov	r3, r1
 8006840:	00db      	lsls	r3, r3, #3
 8006842:	440b      	add	r3, r1
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4403      	add	r3, r0
 8006848:	3348      	adds	r3, #72	; 0x48
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006850:	fb01 f303 	mul.w	r3, r1, r3
 8006854:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006856:	2b00      	cmp	r3, #0
 8006858:	d112      	bne.n	8006880 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800685a:	78fb      	ldrb	r3, [r7, #3]
 800685c:	f003 020f 	and.w	r2, r3, #15
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	4613      	mov	r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	009b      	lsls	r3, r3, #2
 800686a:	440b      	add	r3, r1
 800686c:	3318      	adds	r3, #24
 800686e:	2200      	movs	r2, #0
 8006870:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006872:	78f9      	ldrb	r1, [r7, #3]
 8006874:	2300      	movs	r3, #0
 8006876:	2200      	movs	r2, #0
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f004 fec2 	bl	800b602 <USBD_LL_Transmit>
 800687e:	e01f      	b.n	80068c0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	33b0      	adds	r3, #176	; 0xb0
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d010      	beq.n	80068c0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	33b0      	adds	r3, #176	; 0xb0
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80068bc:	78fa      	ldrb	r2, [r7, #3]
 80068be:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	460b      	mov	r3, r1
 80068d4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	32b0      	adds	r2, #176	; 0xb0
 80068e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	32b0      	adds	r2, #176	; 0xb0
 80068f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e01a      	b.n	8006932 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80068fc:	78fb      	ldrb	r3, [r7, #3]
 80068fe:	4619      	mov	r1, r3
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f004 fec0 	bl	800b686 <USBD_LL_GetRxDataSize>
 8006906:	4602      	mov	r2, r0
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	33b0      	adds	r3, #176	; 0xb0
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800692c:	4611      	mov	r1, r2
 800692e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	32b0      	adds	r2, #176	; 0xb0
 800694c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006950:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006958:	2303      	movs	r3, #3
 800695a:	e025      	b.n	80069a8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	33b0      	adds	r3, #176	; 0xb0
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01a      	beq.n	80069a6 <USBD_CDC_EP0_RxReady+0x6c>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006976:	2bff      	cmp	r3, #255	; 0xff
 8006978:	d015      	beq.n	80069a6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	33b0      	adds	r3, #176	; 0xb0
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006992:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800699a:	b292      	uxth	r2, r2
 800699c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	22ff      	movs	r2, #255	; 0xff
 80069a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80069b8:	2182      	movs	r1, #130	; 0x82
 80069ba:	4818      	ldr	r0, [pc, #96]	; (8006a1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069bc:	f000 fd09 	bl	80073d2 <USBD_GetEpDesc>
 80069c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80069c2:	2101      	movs	r1, #1
 80069c4:	4815      	ldr	r0, [pc, #84]	; (8006a1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069c6:	f000 fd04 	bl	80073d2 <USBD_GetEpDesc>
 80069ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069cc:	2181      	movs	r1, #129	; 0x81
 80069ce:	4813      	ldr	r0, [pc, #76]	; (8006a1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069d0:	f000 fcff 	bl	80073d2 <USBD_GetEpDesc>
 80069d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	2210      	movs	r2, #16
 80069e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d006      	beq.n	80069f6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069f0:	711a      	strb	r2, [r3, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d006      	beq.n	8006a0a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a04:	711a      	strb	r2, [r3, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2243      	movs	r2, #67	; 0x43
 8006a0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a10:	4b02      	ldr	r3, [pc, #8]	; (8006a1c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	20000050 	.word	0x20000050

08006a20 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a28:	2182      	movs	r1, #130	; 0x82
 8006a2a:	4818      	ldr	r0, [pc, #96]	; (8006a8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a2c:	f000 fcd1 	bl	80073d2 <USBD_GetEpDesc>
 8006a30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a32:	2101      	movs	r1, #1
 8006a34:	4815      	ldr	r0, [pc, #84]	; (8006a8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a36:	f000 fccc 	bl	80073d2 <USBD_GetEpDesc>
 8006a3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a3c:	2181      	movs	r1, #129	; 0x81
 8006a3e:	4813      	ldr	r0, [pc, #76]	; (8006a8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a40:	f000 fcc7 	bl	80073d2 <USBD_GetEpDesc>
 8006a44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2210      	movs	r2, #16
 8006a50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d006      	beq.n	8006a66 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	711a      	strb	r2, [r3, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f042 0202 	orr.w	r2, r2, #2
 8006a64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d006      	beq.n	8006a7a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	711a      	strb	r2, [r3, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f042 0202 	orr.w	r2, r2, #2
 8006a78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2243      	movs	r2, #67	; 0x43
 8006a7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a80:	4b02      	ldr	r3, [pc, #8]	; (8006a8c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000050 	.word	0x20000050

08006a90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a98:	2182      	movs	r1, #130	; 0x82
 8006a9a:	4818      	ldr	r0, [pc, #96]	; (8006afc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a9c:	f000 fc99 	bl	80073d2 <USBD_GetEpDesc>
 8006aa0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	4815      	ldr	r0, [pc, #84]	; (8006afc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006aa6:	f000 fc94 	bl	80073d2 <USBD_GetEpDesc>
 8006aaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006aac:	2181      	movs	r1, #129	; 0x81
 8006aae:	4813      	ldr	r0, [pc, #76]	; (8006afc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ab0:	f000 fc8f 	bl	80073d2 <USBD_GetEpDesc>
 8006ab4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2210      	movs	r2, #16
 8006ac0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d006      	beq.n	8006ad6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ad0:	711a      	strb	r2, [r3, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d006      	beq.n	8006aea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ae4:	711a      	strb	r2, [r3, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2243      	movs	r2, #67	; 0x43
 8006aee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006af0:	4b02      	ldr	r3, [pc, #8]	; (8006afc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000050 	.word	0x20000050

08006b00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	220a      	movs	r2, #10
 8006b0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006b0e:	4b03      	ldr	r3, [pc, #12]	; (8006b1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	2000000c 	.word	0x2000000c

08006b20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e009      	b.n	8006b48 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	33b0      	adds	r3, #176	; 0xb0
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	32b0      	adds	r2, #176	; 0xb0
 8006b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e008      	b.n	8006b8c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	371c      	adds	r7, #28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	32b0      	adds	r2, #176	; 0xb0
 8006bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e004      	b.n	8006bc6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
	...

08006bd4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	32b0      	adds	r2, #176	; 0xb0
 8006be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	32b0      	adds	r2, #176	; 0xb0
 8006bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e018      	b.n	8006c34 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	7c1b      	ldrb	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10a      	bne.n	8006c20 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c0a:	4b0c      	ldr	r3, [pc, #48]	; (8006c3c <USBD_CDC_ReceivePacket+0x68>)
 8006c0c:	7819      	ldrb	r1, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f004 fd13 	bl	800b644 <USBD_LL_PrepareReceive>
 8006c1e:	e008      	b.n	8006c32 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c20:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <USBD_CDC_ReceivePacket+0x68>)
 8006c22:	7819      	ldrb	r1, [r3, #0]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c2a:	2340      	movs	r3, #64	; 0x40
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f004 fd09 	bl	800b644 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	20000094 	.word	0x20000094

08006c40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e01f      	b.n	8006c98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d003      	beq.n	8006c7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	79fa      	ldrb	r2, [r7, #7]
 8006c8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f004 fb83 	bl	800b398 <USBD_LL_Init>
 8006c92:	4603      	mov	r3, r0
 8006c94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e025      	b.n	8006d04 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	32ae      	adds	r2, #174	; 0xae
 8006cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00f      	beq.n	8006cf4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	32ae      	adds	r2, #174	; 0xae
 8006cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	f107 020e 	add.w	r2, r7, #14
 8006ce8:	4610      	mov	r0, r2
 8006cea:	4798      	blx	r3
 8006cec:	4602      	mov	r2, r0
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f004 fb8b 	bl	800b430 <USBD_LL_Start>
 8006d1a:	4603      	mov	r3, r0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d2c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	460b      	mov	r3, r1
 8006d44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d009      	beq.n	8006d68 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	78fa      	ldrb	r2, [r7, #3]
 8006d5e:	4611      	mov	r1, r2
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	4798      	blx	r3
 8006d64:	4603      	mov	r3, r0
 8006d66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b084      	sub	sp, #16
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	78fa      	ldrb	r2, [r7, #3]
 8006d8c:	4611      	mov	r1, r2
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	4798      	blx	r3
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006db6:	6839      	ldr	r1, [r7, #0]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f001 f908 	bl	8007fce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006dcc:	461a      	mov	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006dda:	f003 031f 	and.w	r3, r3, #31
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d01a      	beq.n	8006e18 <USBD_LL_SetupStage+0x72>
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d822      	bhi.n	8006e2c <USBD_LL_SetupStage+0x86>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <USBD_LL_SetupStage+0x4a>
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d00a      	beq.n	8006e04 <USBD_LL_SetupStage+0x5e>
 8006dee:	e01d      	b.n	8006e2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fb5f 	bl	80074bc <USBD_StdDevReq>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	73fb      	strb	r3, [r7, #15]
      break;
 8006e02:	e020      	b.n	8006e46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fbc7 	bl	80075a0 <USBD_StdItfReq>
 8006e12:	4603      	mov	r3, r0
 8006e14:	73fb      	strb	r3, [r7, #15]
      break;
 8006e16:	e016      	b.n	8006e46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fc29 	bl	8007678 <USBD_StdEPReq>
 8006e26:	4603      	mov	r3, r0
 8006e28:	73fb      	strb	r3, [r7, #15]
      break;
 8006e2a:	e00c      	b.n	8006e46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f004 fb58 	bl	800b4f0 <USBD_LL_StallEP>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]
      break;
 8006e44:	bf00      	nop
  }

  return ret;
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	607a      	str	r2, [r7, #4]
 8006e5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006e62:	7afb      	ldrb	r3, [r7, #11]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d16e      	bne.n	8006f46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	f040 8098 	bne.w	8006fac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d913      	bls.n	8006eb0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	1ad2      	subs	r2, r2, r3
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	68da      	ldr	r2, [r3, #12]
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	bf28      	it	cs
 8006ea2:	4613      	movcs	r3, r2
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f001 f984 	bl	80081b6 <USBD_CtlContinueRx>
 8006eae:	e07d      	b.n	8006fac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006eb6:	f003 031f 	and.w	r3, r3, #31
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d014      	beq.n	8006ee8 <USBD_LL_DataOutStage+0x98>
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d81d      	bhi.n	8006efe <USBD_LL_DataOutStage+0xae>
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d002      	beq.n	8006ecc <USBD_LL_DataOutStage+0x7c>
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d003      	beq.n	8006ed2 <USBD_LL_DataOutStage+0x82>
 8006eca:	e018      	b.n	8006efe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	75bb      	strb	r3, [r7, #22]
            break;
 8006ed0:	e018      	b.n	8006f04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	4619      	mov	r1, r3
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 fa5e 	bl	800739e <USBD_CoreFindIF>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	75bb      	strb	r3, [r7, #22]
            break;
 8006ee6:	e00d      	b.n	8006f04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f000 fa60 	bl	80073b8 <USBD_CoreFindEP>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	75bb      	strb	r3, [r7, #22]
            break;
 8006efc:	e002      	b.n	8006f04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	75bb      	strb	r3, [r7, #22]
            break;
 8006f02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006f04:	7dbb      	ldrb	r3, [r7, #22]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d119      	bne.n	8006f3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b03      	cmp	r3, #3
 8006f14:	d113      	bne.n	8006f3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006f16:	7dba      	ldrb	r2, [r7, #22]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	32ae      	adds	r2, #174	; 0xae
 8006f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00b      	beq.n	8006f3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006f26:	7dba      	ldrb	r2, [r7, #22]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006f2e:	7dba      	ldrb	r2, [r7, #22]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	32ae      	adds	r2, #174	; 0xae
 8006f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f001 f94a 	bl	80081d8 <USBD_CtlSendStatus>
 8006f44:	e032      	b.n	8006fac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006f46:	7afb      	ldrb	r3, [r7, #11]
 8006f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	4619      	mov	r1, r3
 8006f50:	68f8      	ldr	r0, [r7, #12]
 8006f52:	f000 fa31 	bl	80073b8 <USBD_CoreFindEP>
 8006f56:	4603      	mov	r3, r0
 8006f58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f5a:	7dbb      	ldrb	r3, [r7, #22]
 8006f5c:	2bff      	cmp	r3, #255	; 0xff
 8006f5e:	d025      	beq.n	8006fac <USBD_LL_DataOutStage+0x15c>
 8006f60:	7dbb      	ldrb	r3, [r7, #22]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d122      	bne.n	8006fac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d117      	bne.n	8006fa2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006f72:	7dba      	ldrb	r2, [r7, #22]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	32ae      	adds	r2, #174	; 0xae
 8006f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7c:	699b      	ldr	r3, [r3, #24]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00f      	beq.n	8006fa2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006f82:	7dba      	ldrb	r2, [r7, #22]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006f8a:	7dba      	ldrb	r2, [r7, #22]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	32ae      	adds	r2, #174	; 0xae
 8006f90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	7afa      	ldrb	r2, [r7, #11]
 8006f98:	4611      	mov	r1, r2
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	4798      	blx	r3
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006fa8:	7dfb      	ldrb	r3, [r7, #23]
 8006faa:	e000      	b.n	8006fae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b086      	sub	sp, #24
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	607a      	str	r2, [r7, #4]
 8006fc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006fc4:	7afb      	ldrb	r3, [r7, #11]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d16f      	bne.n	80070aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3314      	adds	r3, #20
 8006fce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d15a      	bne.n	8007090 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	689a      	ldr	r2, [r3, #8]
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d914      	bls.n	8007010 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	689a      	ldr	r2, [r3, #8]
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	1ad2      	subs	r2, r2, r3
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	6879      	ldr	r1, [r7, #4]
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f001 f8ac 	bl	800815a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007002:	2300      	movs	r3, #0
 8007004:	2200      	movs	r2, #0
 8007006:	2100      	movs	r1, #0
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f004 fb1b 	bl	800b644 <USBD_LL_PrepareReceive>
 800700e:	e03f      	b.n	8007090 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	429a      	cmp	r2, r3
 800701a:	d11c      	bne.n	8007056 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007024:	429a      	cmp	r2, r3
 8007026:	d316      	bcc.n	8007056 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007032:	429a      	cmp	r2, r3
 8007034:	d20f      	bcs.n	8007056 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007036:	2200      	movs	r2, #0
 8007038:	2100      	movs	r1, #0
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f001 f88d 	bl	800815a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007048:	2300      	movs	r3, #0
 800704a:	2200      	movs	r2, #0
 800704c:	2100      	movs	r1, #0
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f004 faf8 	bl	800b644 <USBD_LL_PrepareReceive>
 8007054:	e01c      	b.n	8007090 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b03      	cmp	r3, #3
 8007060:	d10f      	bne.n	8007082 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d009      	beq.n	8007082 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007082:	2180      	movs	r1, #128	; 0x80
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f004 fa33 	bl	800b4f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f001 f8b7 	bl	80081fe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d03a      	beq.n	8007110 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f7ff fe42 	bl	8006d24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80070a8:	e032      	b.n	8007110 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80070aa:	7afb      	ldrb	r3, [r7, #11]
 80070ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	4619      	mov	r1, r3
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 f97f 	bl	80073b8 <USBD_CoreFindEP>
 80070ba:	4603      	mov	r3, r0
 80070bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070be:	7dfb      	ldrb	r3, [r7, #23]
 80070c0:	2bff      	cmp	r3, #255	; 0xff
 80070c2:	d025      	beq.n	8007110 <USBD_LL_DataInStage+0x15a>
 80070c4:	7dfb      	ldrb	r3, [r7, #23]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d122      	bne.n	8007110 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b03      	cmp	r3, #3
 80070d4:	d11c      	bne.n	8007110 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80070d6:	7dfa      	ldrb	r2, [r7, #23]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	32ae      	adds	r2, #174	; 0xae
 80070dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070e0:	695b      	ldr	r3, [r3, #20]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d014      	beq.n	8007110 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80070e6:	7dfa      	ldrb	r2, [r7, #23]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80070ee:	7dfa      	ldrb	r2, [r7, #23]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	32ae      	adds	r2, #174	; 0xae
 80070f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	7afa      	ldrb	r2, [r7, #11]
 80070fc:	4611      	mov	r1, r2
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	4798      	blx	r3
 8007102:	4603      	mov	r3, r0
 8007104:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007106:	7dbb      	ldrb	r3, [r7, #22]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800710c:	7dbb      	ldrb	r3, [r7, #22]
 800710e:	e000      	b.n	8007112 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3718      	adds	r7, #24
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007152:	2b00      	cmp	r3, #0
 8007154:	d014      	beq.n	8007180 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00e      	beq.n	8007180 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6852      	ldr	r2, [r2, #4]
 800716e:	b2d2      	uxtb	r2, r2
 8007170:	4611      	mov	r1, r2
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	4798      	blx	r3
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800717c:	2303      	movs	r3, #3
 800717e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007180:	2340      	movs	r3, #64	; 0x40
 8007182:	2200      	movs	r2, #0
 8007184:	2100      	movs	r1, #0
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f004 f96d 	bl	800b466 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2240      	movs	r2, #64	; 0x40
 8007198:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800719c:	2340      	movs	r3, #64	; 0x40
 800719e:	2200      	movs	r2, #0
 80071a0:	2180      	movs	r1, #128	; 0x80
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f004 f95f 	bl	800b466 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2240      	movs	r2, #64	; 0x40
 80071b2:	621a      	str	r2, [r3, #32]

  return ret;
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	460b      	mov	r3, r1
 80071c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	78fa      	ldrb	r2, [r7, #3]
 80071ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80071de:	b480      	push	{r7}
 80071e0:	b083      	sub	sp, #12
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ec:	b2da      	uxtb	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2204      	movs	r2, #4
 80071f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	370c      	adds	r7, #12
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800720a:	b480      	push	{r7}
 800720c:	b083      	sub	sp, #12
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b04      	cmp	r3, #4
 800721c:	d106      	bne.n	800722c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007224:	b2da      	uxtb	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b082      	sub	sp, #8
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b03      	cmp	r3, #3
 800724c:	d110      	bne.n	8007270 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00b      	beq.n	8007270 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d005      	beq.n	8007270 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b082      	sub	sp, #8
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	460b      	mov	r3, r1
 8007284:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	32ae      	adds	r2, #174	; 0xae
 8007290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007298:	2303      	movs	r3, #3
 800729a:	e01c      	b.n	80072d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d115      	bne.n	80072d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	32ae      	adds	r2, #174	; 0xae
 80072b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00b      	beq.n	80072d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	32ae      	adds	r2, #174	; 0xae
 80072c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	78fa      	ldrb	r2, [r7, #3]
 80072ce:	4611      	mov	r1, r2
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b082      	sub	sp, #8
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	460b      	mov	r3, r1
 80072e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	32ae      	adds	r2, #174	; 0xae
 80072f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80072fc:	2303      	movs	r3, #3
 80072fe:	e01c      	b.n	800733a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b03      	cmp	r3, #3
 800730a:	d115      	bne.n	8007338 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	32ae      	adds	r2, #174	; 0xae
 8007316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00b      	beq.n	8007338 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	32ae      	adds	r2, #174	; 0xae
 800732a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	78fa      	ldrb	r2, [r7, #3]
 8007332:	4611      	mov	r1, r2
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007338:	2300      	movs	r3, #0
}
 800733a:	4618      	mov	r0, r3
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007342:	b480      	push	{r7}
 8007344:	b083      	sub	sp, #12
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00e      	beq.n	8007394 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	6852      	ldr	r2, [r2, #4]
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	4611      	mov	r1, r2
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	4798      	blx	r3
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007390:	2303      	movs	r3, #3
 8007392:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007394:	7bfb      	ldrb	r3, [r7, #15]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
 80073a6:	460b      	mov	r3, r1
 80073a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80073aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80073c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b086      	sub	sp, #24
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	460b      	mov	r3, r1
 80073dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	885b      	ldrh	r3, [r3, #2]
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d920      	bls.n	800743c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	b29b      	uxth	r3, r3
 8007400:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007402:	e013      	b.n	800742c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007404:	f107 030a 	add.w	r3, r7, #10
 8007408:	4619      	mov	r1, r3
 800740a:	6978      	ldr	r0, [r7, #20]
 800740c:	f000 f81b 	bl	8007446 <USBD_GetNextDesc>
 8007410:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	785b      	ldrb	r3, [r3, #1]
 8007416:	2b05      	cmp	r3, #5
 8007418:	d108      	bne.n	800742c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	789b      	ldrb	r3, [r3, #2]
 8007422:	78fa      	ldrb	r2, [r7, #3]
 8007424:	429a      	cmp	r2, r3
 8007426:	d008      	beq.n	800743a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007428:	2300      	movs	r3, #0
 800742a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	885b      	ldrh	r3, [r3, #2]
 8007430:	b29a      	uxth	r2, r3
 8007432:	897b      	ldrh	r3, [r7, #10]
 8007434:	429a      	cmp	r2, r3
 8007436:	d8e5      	bhi.n	8007404 <USBD_GetEpDesc+0x32>
 8007438:	e000      	b.n	800743c <USBD_GetEpDesc+0x6a>
          break;
 800743a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800743c:	693b      	ldr	r3, [r7, #16]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007446:	b480      	push	{r7}
 8007448:	b085      	sub	sp, #20
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	881a      	ldrh	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	b29b      	uxth	r3, r3
 800745e:	4413      	add	r3, r2
 8007460:	b29a      	uxth	r2, r3
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4413      	add	r3, r2
 8007470:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007472:	68fb      	ldr	r3, [r7, #12]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	3301      	adds	r3, #1
 8007496:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800749e:	8a3b      	ldrh	r3, [r7, #16]
 80074a0:	021b      	lsls	r3, r3, #8
 80074a2:	b21a      	sxth	r2, r3
 80074a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	b21b      	sxth	r3, r3
 80074ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80074ae:	89fb      	ldrh	r3, [r7, #14]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	371c      	adds	r7, #28
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074d2:	2b40      	cmp	r3, #64	; 0x40
 80074d4:	d005      	beq.n	80074e2 <USBD_StdDevReq+0x26>
 80074d6:	2b40      	cmp	r3, #64	; 0x40
 80074d8:	d857      	bhi.n	800758a <USBD_StdDevReq+0xce>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00f      	beq.n	80074fe <USBD_StdDevReq+0x42>
 80074de:	2b20      	cmp	r3, #32
 80074e0:	d153      	bne.n	800758a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	32ae      	adds	r2, #174	; 0xae
 80074ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	4798      	blx	r3
 80074f8:	4603      	mov	r3, r0
 80074fa:	73fb      	strb	r3, [r7, #15]
      break;
 80074fc:	e04a      	b.n	8007594 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	785b      	ldrb	r3, [r3, #1]
 8007502:	2b09      	cmp	r3, #9
 8007504:	d83b      	bhi.n	800757e <USBD_StdDevReq+0xc2>
 8007506:	a201      	add	r2, pc, #4	; (adr r2, 800750c <USBD_StdDevReq+0x50>)
 8007508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750c:	08007561 	.word	0x08007561
 8007510:	08007575 	.word	0x08007575
 8007514:	0800757f 	.word	0x0800757f
 8007518:	0800756b 	.word	0x0800756b
 800751c:	0800757f 	.word	0x0800757f
 8007520:	0800753f 	.word	0x0800753f
 8007524:	08007535 	.word	0x08007535
 8007528:	0800757f 	.word	0x0800757f
 800752c:	08007557 	.word	0x08007557
 8007530:	08007549 	.word	0x08007549
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 fa3c 	bl	80079b4 <USBD_GetDescriptor>
          break;
 800753c:	e024      	b.n	8007588 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fba1 	bl	8007c88 <USBD_SetAddress>
          break;
 8007546:	e01f      	b.n	8007588 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fbe0 	bl	8007d10 <USBD_SetConfig>
 8007550:	4603      	mov	r3, r0
 8007552:	73fb      	strb	r3, [r7, #15]
          break;
 8007554:	e018      	b.n	8007588 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fc83 	bl	8007e64 <USBD_GetConfig>
          break;
 800755e:	e013      	b.n	8007588 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fcb4 	bl	8007ed0 <USBD_GetStatus>
          break;
 8007568:	e00e      	b.n	8007588 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800756a:	6839      	ldr	r1, [r7, #0]
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fce3 	bl	8007f38 <USBD_SetFeature>
          break;
 8007572:	e009      	b.n	8007588 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fd07 	bl	8007f8a <USBD_ClrFeature>
          break;
 800757c:	e004      	b.n	8007588 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 fd5e 	bl	8008042 <USBD_CtlError>
          break;
 8007586:	bf00      	nop
      }
      break;
 8007588:	e004      	b.n	8007594 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fd58 	bl	8008042 <USBD_CtlError>
      break;
 8007592:	bf00      	nop
  }

  return ret;
 8007594:	7bfb      	ldrb	r3, [r7, #15]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop

080075a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075b6:	2b40      	cmp	r3, #64	; 0x40
 80075b8:	d005      	beq.n	80075c6 <USBD_StdItfReq+0x26>
 80075ba:	2b40      	cmp	r3, #64	; 0x40
 80075bc:	d852      	bhi.n	8007664 <USBD_StdItfReq+0xc4>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d001      	beq.n	80075c6 <USBD_StdItfReq+0x26>
 80075c2:	2b20      	cmp	r3, #32
 80075c4:	d14e      	bne.n	8007664 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d840      	bhi.n	8007656 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	889b      	ldrh	r3, [r3, #4]
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d836      	bhi.n	800764c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	889b      	ldrh	r3, [r3, #4]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	4619      	mov	r1, r3
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f7ff fed9 	bl	800739e <USBD_CoreFindIF>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	2bff      	cmp	r3, #255	; 0xff
 80075f4:	d01d      	beq.n	8007632 <USBD_StdItfReq+0x92>
 80075f6:	7bbb      	ldrb	r3, [r7, #14]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d11a      	bne.n	8007632 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80075fc:	7bba      	ldrb	r2, [r7, #14]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	32ae      	adds	r2, #174	; 0xae
 8007602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00f      	beq.n	800762c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800760c:	7bba      	ldrb	r2, [r7, #14]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007614:	7bba      	ldrb	r2, [r7, #14]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	32ae      	adds	r2, #174	; 0xae
 800761a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	6839      	ldr	r1, [r7, #0]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	4798      	blx	r3
 8007626:	4603      	mov	r3, r0
 8007628:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800762a:	e004      	b.n	8007636 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800762c:	2303      	movs	r3, #3
 800762e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007630:	e001      	b.n	8007636 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007632:	2303      	movs	r3, #3
 8007634:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	88db      	ldrh	r3, [r3, #6]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d110      	bne.n	8007660 <USBD_StdItfReq+0xc0>
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10d      	bne.n	8007660 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fdc7 	bl	80081d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800764a:	e009      	b.n	8007660 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fcf7 	bl	8008042 <USBD_CtlError>
          break;
 8007654:	e004      	b.n	8007660 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fcf2 	bl	8008042 <USBD_CtlError>
          break;
 800765e:	e000      	b.n	8007662 <USBD_StdItfReq+0xc2>
          break;
 8007660:	bf00      	nop
      }
      break;
 8007662:	e004      	b.n	800766e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fceb 	bl	8008042 <USBD_CtlError>
      break;
 800766c:	bf00      	nop
  }

  return ret;
 800766e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	889b      	ldrh	r3, [r3, #4]
 800768a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007694:	2b40      	cmp	r3, #64	; 0x40
 8007696:	d007      	beq.n	80076a8 <USBD_StdEPReq+0x30>
 8007698:	2b40      	cmp	r3, #64	; 0x40
 800769a:	f200 817f 	bhi.w	800799c <USBD_StdEPReq+0x324>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d02a      	beq.n	80076f8 <USBD_StdEPReq+0x80>
 80076a2:	2b20      	cmp	r3, #32
 80076a4:	f040 817a 	bne.w	800799c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80076a8:	7bbb      	ldrb	r3, [r7, #14]
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7ff fe83 	bl	80073b8 <USBD_CoreFindEP>
 80076b2:	4603      	mov	r3, r0
 80076b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076b6:	7b7b      	ldrb	r3, [r7, #13]
 80076b8:	2bff      	cmp	r3, #255	; 0xff
 80076ba:	f000 8174 	beq.w	80079a6 <USBD_StdEPReq+0x32e>
 80076be:	7b7b      	ldrb	r3, [r7, #13]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f040 8170 	bne.w	80079a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80076c6:	7b7a      	ldrb	r2, [r7, #13]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80076ce:	7b7a      	ldrb	r2, [r7, #13]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	32ae      	adds	r2, #174	; 0xae
 80076d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 8163 	beq.w	80079a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80076e0:	7b7a      	ldrb	r2, [r7, #13]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	32ae      	adds	r2, #174	; 0xae
 80076e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	4798      	blx	r3
 80076f2:	4603      	mov	r3, r0
 80076f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076f6:	e156      	b.n	80079a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	785b      	ldrb	r3, [r3, #1]
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d008      	beq.n	8007712 <USBD_StdEPReq+0x9a>
 8007700:	2b03      	cmp	r3, #3
 8007702:	f300 8145 	bgt.w	8007990 <USBD_StdEPReq+0x318>
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 809b 	beq.w	8007842 <USBD_StdEPReq+0x1ca>
 800770c:	2b01      	cmp	r3, #1
 800770e:	d03c      	beq.n	800778a <USBD_StdEPReq+0x112>
 8007710:	e13e      	b.n	8007990 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b02      	cmp	r3, #2
 800771c:	d002      	beq.n	8007724 <USBD_StdEPReq+0xac>
 800771e:	2b03      	cmp	r3, #3
 8007720:	d016      	beq.n	8007750 <USBD_StdEPReq+0xd8>
 8007722:	e02c      	b.n	800777e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00d      	beq.n	8007746 <USBD_StdEPReq+0xce>
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	2b80      	cmp	r3, #128	; 0x80
 800772e:	d00a      	beq.n	8007746 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007730:	7bbb      	ldrb	r3, [r7, #14]
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f003 fedb 	bl	800b4f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800773a:	2180      	movs	r1, #128	; 0x80
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f003 fed7 	bl	800b4f0 <USBD_LL_StallEP>
 8007742:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007744:	e020      	b.n	8007788 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fc7a 	bl	8008042 <USBD_CtlError>
              break;
 800774e:	e01b      	b.n	8007788 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	885b      	ldrh	r3, [r3, #2]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10e      	bne.n	8007776 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00b      	beq.n	8007776 <USBD_StdEPReq+0xfe>
 800775e:	7bbb      	ldrb	r3, [r7, #14]
 8007760:	2b80      	cmp	r3, #128	; 0x80
 8007762:	d008      	beq.n	8007776 <USBD_StdEPReq+0xfe>
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	88db      	ldrh	r3, [r3, #6]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d104      	bne.n	8007776 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800776c:	7bbb      	ldrb	r3, [r7, #14]
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f003 febd 	bl	800b4f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 fd2e 	bl	80081d8 <USBD_CtlSendStatus>

              break;
 800777c:	e004      	b.n	8007788 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fc5e 	bl	8008042 <USBD_CtlError>
              break;
 8007786:	bf00      	nop
          }
          break;
 8007788:	e107      	b.n	800799a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b02      	cmp	r3, #2
 8007794:	d002      	beq.n	800779c <USBD_StdEPReq+0x124>
 8007796:	2b03      	cmp	r3, #3
 8007798:	d016      	beq.n	80077c8 <USBD_StdEPReq+0x150>
 800779a:	e04b      	b.n	8007834 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800779c:	7bbb      	ldrb	r3, [r7, #14]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00d      	beq.n	80077be <USBD_StdEPReq+0x146>
 80077a2:	7bbb      	ldrb	r3, [r7, #14]
 80077a4:	2b80      	cmp	r3, #128	; 0x80
 80077a6:	d00a      	beq.n	80077be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077a8:	7bbb      	ldrb	r3, [r7, #14]
 80077aa:	4619      	mov	r1, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f003 fe9f 	bl	800b4f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077b2:	2180      	movs	r1, #128	; 0x80
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f003 fe9b 	bl	800b4f0 <USBD_LL_StallEP>
 80077ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077bc:	e040      	b.n	8007840 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80077be:	6839      	ldr	r1, [r7, #0]
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fc3e 	bl	8008042 <USBD_CtlError>
              break;
 80077c6:	e03b      	b.n	8007840 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	885b      	ldrh	r3, [r3, #2]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d136      	bne.n	800783e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d004      	beq.n	80077e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80077da:	7bbb      	ldrb	r3, [r7, #14]
 80077dc:	4619      	mov	r1, r3
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f003 fea5 	bl	800b52e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fcf7 	bl	80081d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7ff fde2 	bl	80073b8 <USBD_CoreFindEP>
 80077f4:	4603      	mov	r3, r0
 80077f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077f8:	7b7b      	ldrb	r3, [r7, #13]
 80077fa:	2bff      	cmp	r3, #255	; 0xff
 80077fc:	d01f      	beq.n	800783e <USBD_StdEPReq+0x1c6>
 80077fe:	7b7b      	ldrb	r3, [r7, #13]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d11c      	bne.n	800783e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007804:	7b7a      	ldrb	r2, [r7, #13]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800780c:	7b7a      	ldrb	r2, [r7, #13]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	32ae      	adds	r2, #174	; 0xae
 8007812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d010      	beq.n	800783e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800781c:	7b7a      	ldrb	r2, [r7, #13]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	32ae      	adds	r2, #174	; 0xae
 8007822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
 800782e:	4603      	mov	r3, r0
 8007830:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007832:	e004      	b.n	800783e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fc03 	bl	8008042 <USBD_CtlError>
              break;
 800783c:	e000      	b.n	8007840 <USBD_StdEPReq+0x1c8>
              break;
 800783e:	bf00      	nop
          }
          break;
 8007840:	e0ab      	b.n	800799a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b02      	cmp	r3, #2
 800784c:	d002      	beq.n	8007854 <USBD_StdEPReq+0x1dc>
 800784e:	2b03      	cmp	r3, #3
 8007850:	d032      	beq.n	80078b8 <USBD_StdEPReq+0x240>
 8007852:	e097      	b.n	8007984 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d007      	beq.n	800786a <USBD_StdEPReq+0x1f2>
 800785a:	7bbb      	ldrb	r3, [r7, #14]
 800785c:	2b80      	cmp	r3, #128	; 0x80
 800785e:	d004      	beq.n	800786a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fbed 	bl	8008042 <USBD_CtlError>
                break;
 8007868:	e091      	b.n	800798e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800786a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800786e:	2b00      	cmp	r3, #0
 8007870:	da0b      	bge.n	800788a <USBD_StdEPReq+0x212>
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007878:	4613      	mov	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4413      	add	r3, r2
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	3310      	adds	r3, #16
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	4413      	add	r3, r2
 8007886:	3304      	adds	r3, #4
 8007888:	e00b      	b.n	80078a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800788a:	7bbb      	ldrb	r3, [r7, #14]
 800788c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007890:	4613      	mov	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	4413      	add	r3, r2
 80078a0:	3304      	adds	r3, #4
 80078a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2202      	movs	r2, #2
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fc37 	bl	8008124 <USBD_CtlSendData>
              break;
 80078b6:	e06a      	b.n	800798e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80078b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	da11      	bge.n	80078e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	f003 020f 	and.w	r2, r3, #15
 80078c6:	6879      	ldr	r1, [r7, #4]
 80078c8:	4613      	mov	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	440b      	add	r3, r1
 80078d2:	3324      	adds	r3, #36	; 0x24
 80078d4:	881b      	ldrh	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d117      	bne.n	800790a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fbb0 	bl	8008042 <USBD_CtlError>
                  break;
 80078e2:	e054      	b.n	800798e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	f003 020f 	and.w	r2, r3, #15
 80078ea:	6879      	ldr	r1, [r7, #4]
 80078ec:	4613      	mov	r3, r2
 80078ee:	009b      	lsls	r3, r3, #2
 80078f0:	4413      	add	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	440b      	add	r3, r1
 80078f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d104      	bne.n	800790a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fb9d 	bl	8008042 <USBD_CtlError>
                  break;
 8007908:	e041      	b.n	800798e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800790a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800790e:	2b00      	cmp	r3, #0
 8007910:	da0b      	bge.n	800792a <USBD_StdEPReq+0x2b2>
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	3310      	adds	r3, #16
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	4413      	add	r3, r2
 8007926:	3304      	adds	r3, #4
 8007928:	e00b      	b.n	8007942 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800792a:	7bbb      	ldrb	r3, [r7, #14]
 800792c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007930:	4613      	mov	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	4413      	add	r3, r2
 8007940:	3304      	adds	r3, #4
 8007942:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <USBD_StdEPReq+0x2d8>
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	2b80      	cmp	r3, #128	; 0x80
 800794e:	d103      	bne.n	8007958 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	e00e      	b.n	8007976 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f003 fe05 	bl	800b56c <USBD_LL_IsStallEP>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d003      	beq.n	8007970 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2201      	movs	r2, #1
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	e002      	b.n	8007976 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2202      	movs	r2, #2
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fbd1 	bl	8008124 <USBD_CtlSendData>
              break;
 8007982:	e004      	b.n	800798e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007984:	6839      	ldr	r1, [r7, #0]
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fb5b 	bl	8008042 <USBD_CtlError>
              break;
 800798c:	bf00      	nop
          }
          break;
 800798e:	e004      	b.n	800799a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fb55 	bl	8008042 <USBD_CtlError>
          break;
 8007998:	bf00      	nop
      }
      break;
 800799a:	e005      	b.n	80079a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800799c:	6839      	ldr	r1, [r7, #0]
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fb4f 	bl	8008042 <USBD_CtlError>
      break;
 80079a4:	e000      	b.n	80079a8 <USBD_StdEPReq+0x330>
      break;
 80079a6:	bf00      	nop
  }

  return ret;
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
	...

080079b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	885b      	ldrh	r3, [r3, #2]
 80079ce:	0a1b      	lsrs	r3, r3, #8
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	3b01      	subs	r3, #1
 80079d4:	2b06      	cmp	r3, #6
 80079d6:	f200 8128 	bhi.w	8007c2a <USBD_GetDescriptor+0x276>
 80079da:	a201      	add	r2, pc, #4	; (adr r2, 80079e0 <USBD_GetDescriptor+0x2c>)
 80079dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e0:	080079fd 	.word	0x080079fd
 80079e4:	08007a15 	.word	0x08007a15
 80079e8:	08007a55 	.word	0x08007a55
 80079ec:	08007c2b 	.word	0x08007c2b
 80079f0:	08007c2b 	.word	0x08007c2b
 80079f4:	08007bcb 	.word	0x08007bcb
 80079f8:	08007bf7 	.word	0x08007bf7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	7c12      	ldrb	r2, [r2, #16]
 8007a08:	f107 0108 	add.w	r1, r7, #8
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	4798      	blx	r3
 8007a10:	60f8      	str	r0, [r7, #12]
      break;
 8007a12:	e112      	b.n	8007c3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	7c1b      	ldrb	r3, [r3, #16]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10d      	bne.n	8007a38 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	f107 0208 	add.w	r2, r7, #8
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4798      	blx	r3
 8007a2c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	3301      	adds	r3, #1
 8007a32:	2202      	movs	r2, #2
 8007a34:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a36:	e100      	b.n	8007c3a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a40:	f107 0208 	add.w	r2, r7, #8
 8007a44:	4610      	mov	r0, r2
 8007a46:	4798      	blx	r3
 8007a48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	2202      	movs	r2, #2
 8007a50:	701a      	strb	r2, [r3, #0]
      break;
 8007a52:	e0f2      	b.n	8007c3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	885b      	ldrh	r3, [r3, #2]
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b05      	cmp	r3, #5
 8007a5c:	f200 80ac 	bhi.w	8007bb8 <USBD_GetDescriptor+0x204>
 8007a60:	a201      	add	r2, pc, #4	; (adr r2, 8007a68 <USBD_GetDescriptor+0xb4>)
 8007a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a66:	bf00      	nop
 8007a68:	08007a81 	.word	0x08007a81
 8007a6c:	08007ab5 	.word	0x08007ab5
 8007a70:	08007ae9 	.word	0x08007ae9
 8007a74:	08007b1d 	.word	0x08007b1d
 8007a78:	08007b51 	.word	0x08007b51
 8007a7c:	08007b85 	.word	0x08007b85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d00b      	beq.n	8007aa4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	7c12      	ldrb	r2, [r2, #16]
 8007a98:	f107 0108 	add.w	r1, r7, #8
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4798      	blx	r3
 8007aa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aa2:	e091      	b.n	8007bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 facb 	bl	8008042 <USBD_CtlError>
            err++;
 8007aac:	7afb      	ldrb	r3, [r7, #11]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ab2:	e089      	b.n	8007bc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d00b      	beq.n	8007ad8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	7c12      	ldrb	r2, [r2, #16]
 8007acc:	f107 0108 	add.w	r1, r7, #8
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4798      	blx	r3
 8007ad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ad6:	e077      	b.n	8007bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fab1 	bl	8008042 <USBD_CtlError>
            err++;
 8007ae0:	7afb      	ldrb	r3, [r7, #11]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ae6:	e06f      	b.n	8007bc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00b      	beq.n	8007b0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	7c12      	ldrb	r2, [r2, #16]
 8007b00:	f107 0108 	add.w	r1, r7, #8
 8007b04:	4610      	mov	r0, r2
 8007b06:	4798      	blx	r3
 8007b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b0a:	e05d      	b.n	8007bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fa97 	bl	8008042 <USBD_CtlError>
            err++;
 8007b14:	7afb      	ldrb	r3, [r7, #11]
 8007b16:	3301      	adds	r3, #1
 8007b18:	72fb      	strb	r3, [r7, #11]
          break;
 8007b1a:	e055      	b.n	8007bc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00b      	beq.n	8007b40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	7c12      	ldrb	r2, [r2, #16]
 8007b34:	f107 0108 	add.w	r1, r7, #8
 8007b38:	4610      	mov	r0, r2
 8007b3a:	4798      	blx	r3
 8007b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b3e:	e043      	b.n	8007bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b40:	6839      	ldr	r1, [r7, #0]
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fa7d 	bl	8008042 <USBD_CtlError>
            err++;
 8007b48:	7afb      	ldrb	r3, [r7, #11]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b4e:	e03b      	b.n	8007bc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00b      	beq.n	8007b74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	7c12      	ldrb	r2, [r2, #16]
 8007b68:	f107 0108 	add.w	r1, r7, #8
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	4798      	blx	r3
 8007b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b72:	e029      	b.n	8007bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fa63 	bl	8008042 <USBD_CtlError>
            err++;
 8007b7c:	7afb      	ldrb	r3, [r7, #11]
 8007b7e:	3301      	adds	r3, #1
 8007b80:	72fb      	strb	r3, [r7, #11]
          break;
 8007b82:	e021      	b.n	8007bc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00b      	beq.n	8007ba8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b96:	699b      	ldr	r3, [r3, #24]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	7c12      	ldrb	r2, [r2, #16]
 8007b9c:	f107 0108 	add.w	r1, r7, #8
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	4798      	blx	r3
 8007ba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ba6:	e00f      	b.n	8007bc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fa49 	bl	8008042 <USBD_CtlError>
            err++;
 8007bb0:	7afb      	ldrb	r3, [r7, #11]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	72fb      	strb	r3, [r7, #11]
          break;
 8007bb6:	e007      	b.n	8007bc8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 fa41 	bl	8008042 <USBD_CtlError>
          err++;
 8007bc0:	7afb      	ldrb	r3, [r7, #11]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007bc6:	bf00      	nop
      }
      break;
 8007bc8:	e037      	b.n	8007c3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	7c1b      	ldrb	r3, [r3, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d109      	bne.n	8007be6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bda:	f107 0208 	add.w	r2, r7, #8
 8007bde:	4610      	mov	r0, r2
 8007be0:	4798      	blx	r3
 8007be2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007be4:	e029      	b.n	8007c3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007be6:	6839      	ldr	r1, [r7, #0]
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fa2a 	bl	8008042 <USBD_CtlError>
        err++;
 8007bee:	7afb      	ldrb	r3, [r7, #11]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	72fb      	strb	r3, [r7, #11]
      break;
 8007bf4:	e021      	b.n	8007c3a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	7c1b      	ldrb	r3, [r3, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d10d      	bne.n	8007c1a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c06:	f107 0208 	add.w	r2, r7, #8
 8007c0a:	4610      	mov	r0, r2
 8007c0c:	4798      	blx	r3
 8007c0e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	3301      	adds	r3, #1
 8007c14:	2207      	movs	r2, #7
 8007c16:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c18:	e00f      	b.n	8007c3a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c1a:	6839      	ldr	r1, [r7, #0]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fa10 	bl	8008042 <USBD_CtlError>
        err++;
 8007c22:	7afb      	ldrb	r3, [r7, #11]
 8007c24:	3301      	adds	r3, #1
 8007c26:	72fb      	strb	r3, [r7, #11]
      break;
 8007c28:	e007      	b.n	8007c3a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c2a:	6839      	ldr	r1, [r7, #0]
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fa08 	bl	8008042 <USBD_CtlError>
      err++;
 8007c32:	7afb      	ldrb	r3, [r7, #11]
 8007c34:	3301      	adds	r3, #1
 8007c36:	72fb      	strb	r3, [r7, #11]
      break;
 8007c38:	bf00      	nop
  }

  if (err != 0U)
 8007c3a:	7afb      	ldrb	r3, [r7, #11]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d11e      	bne.n	8007c7e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	88db      	ldrh	r3, [r3, #6]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d016      	beq.n	8007c76 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007c48:	893b      	ldrh	r3, [r7, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00e      	beq.n	8007c6c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	88da      	ldrh	r2, [r3, #6]
 8007c52:	893b      	ldrh	r3, [r7, #8]
 8007c54:	4293      	cmp	r3, r2
 8007c56:	bf28      	it	cs
 8007c58:	4613      	movcs	r3, r2
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c5e:	893b      	ldrh	r3, [r7, #8]
 8007c60:	461a      	mov	r2, r3
 8007c62:	68f9      	ldr	r1, [r7, #12]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fa5d 	bl	8008124 <USBD_CtlSendData>
 8007c6a:	e009      	b.n	8007c80 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f9e7 	bl	8008042 <USBD_CtlError>
 8007c74:	e004      	b.n	8007c80 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 faae 	bl	80081d8 <USBD_CtlSendStatus>
 8007c7c:	e000      	b.n	8007c80 <USBD_GetDescriptor+0x2cc>
    return;
 8007c7e:	bf00      	nop
  }
}
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop

08007c88 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	889b      	ldrh	r3, [r3, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d131      	bne.n	8007cfe <USBD_SetAddress+0x76>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	88db      	ldrh	r3, [r3, #6]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d12d      	bne.n	8007cfe <USBD_SetAddress+0x76>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	885b      	ldrh	r3, [r3, #2]
 8007ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8007ca8:	d829      	bhi.n	8007cfe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	885b      	ldrh	r3, [r3, #2]
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cb4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b03      	cmp	r3, #3
 8007cc0:	d104      	bne.n	8007ccc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 f9bc 	bl	8008042 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cca:	e01d      	b.n	8007d08 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	7bfa      	ldrb	r2, [r7, #15]
 8007cd0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f003 fc73 	bl	800b5c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fa7a 	bl	80081d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d004      	beq.n	8007cf4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2202      	movs	r2, #2
 8007cee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf2:	e009      	b.n	8007d08 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cfc:	e004      	b.n	8007d08 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f99e 	bl	8008042 <USBD_CtlError>
  }
}
 8007d06:	bf00      	nop
 8007d08:	bf00      	nop
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	885b      	ldrh	r3, [r3, #2]
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	4b4e      	ldr	r3, [pc, #312]	; (8007e60 <USBD_SetConfig+0x150>)
 8007d26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d28:	4b4d      	ldr	r3, [pc, #308]	; (8007e60 <USBD_SetConfig+0x150>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d905      	bls.n	8007d3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f985 	bl	8008042 <USBD_CtlError>
    return USBD_FAIL;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e08c      	b.n	8007e56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d002      	beq.n	8007d4e <USBD_SetConfig+0x3e>
 8007d48:	2b03      	cmp	r3, #3
 8007d4a:	d029      	beq.n	8007da0 <USBD_SetConfig+0x90>
 8007d4c:	e075      	b.n	8007e3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007d4e:	4b44      	ldr	r3, [pc, #272]	; (8007e60 <USBD_SetConfig+0x150>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d020      	beq.n	8007d98 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007d56:	4b42      	ldr	r3, [pc, #264]	; (8007e60 <USBD_SetConfig+0x150>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d60:	4b3f      	ldr	r3, [pc, #252]	; (8007e60 <USBD_SetConfig+0x150>)
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	4619      	mov	r1, r3
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7fe ffe7 	bl	8006d3a <USBD_SetClassConfig>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d008      	beq.n	8007d88 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f962 	bl	8008042 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2202      	movs	r2, #2
 8007d82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d86:	e065      	b.n	8007e54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fa25 	bl	80081d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2203      	movs	r2, #3
 8007d92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d96:	e05d      	b.n	8007e54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fa1d 	bl	80081d8 <USBD_CtlSendStatus>
      break;
 8007d9e:	e059      	b.n	8007e54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007da0:	4b2f      	ldr	r3, [pc, #188]	; (8007e60 <USBD_SetConfig+0x150>)
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d112      	bne.n	8007dce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2202      	movs	r2, #2
 8007dac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007db0:	4b2b      	ldr	r3, [pc, #172]	; (8007e60 <USBD_SetConfig+0x150>)
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	461a      	mov	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007dba:	4b29      	ldr	r3, [pc, #164]	; (8007e60 <USBD_SetConfig+0x150>)
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f7fe ffd6 	bl	8006d72 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fa06 	bl	80081d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007dcc:	e042      	b.n	8007e54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007dce:	4b24      	ldr	r3, [pc, #144]	; (8007e60 <USBD_SetConfig+0x150>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d02a      	beq.n	8007e32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	4619      	mov	r1, r3
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7fe ffc4 	bl	8006d72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007dea:	4b1d      	ldr	r3, [pc, #116]	; (8007e60 <USBD_SetConfig+0x150>)
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	461a      	mov	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007df4:	4b1a      	ldr	r3, [pc, #104]	; (8007e60 <USBD_SetConfig+0x150>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7fe ff9d 	bl	8006d3a <USBD_SetClassConfig>
 8007e00:	4603      	mov	r3, r0
 8007e02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d00f      	beq.n	8007e2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f918 	bl	8008042 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7fe ffa9 	bl	8006d72 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007e28:	e014      	b.n	8007e54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f9d4 	bl	80081d8 <USBD_CtlSendStatus>
      break;
 8007e30:	e010      	b.n	8007e54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f9d0 	bl	80081d8 <USBD_CtlSendStatus>
      break;
 8007e38:	e00c      	b.n	8007e54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007e3a:	6839      	ldr	r1, [r7, #0]
 8007e3c:	6878      	ldr	r0, [r7, #4]
 8007e3e:	f000 f900 	bl	8008042 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e42:	4b07      	ldr	r3, [pc, #28]	; (8007e60 <USBD_SetConfig+0x150>)
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7fe ff92 	bl	8006d72 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	73fb      	strb	r3, [r7, #15]
      break;
 8007e52:	bf00      	nop
  }

  return ret;
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000274 	.word	0x20000274

08007e64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	88db      	ldrh	r3, [r3, #6]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d004      	beq.n	8007e80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f8e2 	bl	8008042 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e7e:	e023      	b.n	8007ec8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	dc02      	bgt.n	8007e92 <USBD_GetConfig+0x2e>
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	dc03      	bgt.n	8007e98 <USBD_GetConfig+0x34>
 8007e90:	e015      	b.n	8007ebe <USBD_GetConfig+0x5a>
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d00b      	beq.n	8007eae <USBD_GetConfig+0x4a>
 8007e96:	e012      	b.n	8007ebe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f93c 	bl	8008124 <USBD_CtlSendData>
        break;
 8007eac:	e00c      	b.n	8007ec8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	3304      	adds	r3, #4
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f934 	bl	8008124 <USBD_CtlSendData>
        break;
 8007ebc:	e004      	b.n	8007ec8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007ebe:	6839      	ldr	r1, [r7, #0]
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f8be 	bl	8008042 <USBD_CtlError>
        break;
 8007ec6:	bf00      	nop
}
 8007ec8:	bf00      	nop
 8007eca:	3708      	adds	r7, #8
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d81e      	bhi.n	8007f26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	88db      	ldrh	r3, [r3, #6]
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d004      	beq.n	8007efa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f8a5 	bl	8008042 <USBD_CtlError>
        break;
 8007ef8:	e01a      	b.n	8007f30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2201      	movs	r2, #1
 8007efe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d005      	beq.n	8007f16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f043 0202 	orr.w	r2, r3, #2
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	330c      	adds	r3, #12
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 f900 	bl	8008124 <USBD_CtlSendData>
      break;
 8007f24:	e004      	b.n	8007f30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f88a 	bl	8008042 <USBD_CtlError>
      break;
 8007f2e:	bf00      	nop
  }
}
 8007f30:	bf00      	nop
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	885b      	ldrh	r3, [r3, #2]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d107      	bne.n	8007f5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f940 	bl	80081d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007f58:	e013      	b.n	8007f82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	885b      	ldrh	r3, [r3, #2]
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d10b      	bne.n	8007f7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	889b      	ldrh	r3, [r3, #4]
 8007f66:	0a1b      	lsrs	r3, r3, #8
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f930 	bl	80081d8 <USBD_CtlSendStatus>
}
 8007f78:	e003      	b.n	8007f82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f860 	bl	8008042 <USBD_CtlError>
}
 8007f82:	bf00      	nop
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d80b      	bhi.n	8007fba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	885b      	ldrh	r3, [r3, #2]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d10c      	bne.n	8007fc4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f910 	bl	80081d8 <USBD_CtlSendStatus>
      }
      break;
 8007fb8:	e004      	b.n	8007fc4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 f840 	bl	8008042 <USBD_CtlError>
      break;
 8007fc2:	e000      	b.n	8007fc6 <USBD_ClrFeature+0x3c>
      break;
 8007fc4:	bf00      	nop
  }
}
 8007fc6:	bf00      	nop
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b084      	sub	sp, #16
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	781a      	ldrb	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	781a      	ldrb	r2, [r3, #0]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f7ff fa41 	bl	8007480 <SWAPBYTE>
 8007ffe:	4603      	mov	r3, r0
 8008000:	461a      	mov	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	3301      	adds	r3, #1
 800800a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	3301      	adds	r3, #1
 8008010:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f7ff fa34 	bl	8007480 <SWAPBYTE>
 8008018:	4603      	mov	r3, r0
 800801a:	461a      	mov	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3301      	adds	r3, #1
 8008024:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3301      	adds	r3, #1
 800802a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f7ff fa27 	bl	8007480 <SWAPBYTE>
 8008032:	4603      	mov	r3, r0
 8008034:	461a      	mov	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	80da      	strh	r2, [r3, #6]
}
 800803a:	bf00      	nop
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b082      	sub	sp, #8
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800804c:	2180      	movs	r1, #128	; 0x80
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f003 fa4e 	bl	800b4f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008054:	2100      	movs	r1, #0
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f003 fa4a 	bl	800b4f0 <USBD_LL_StallEP>
}
 800805c:	bf00      	nop
 800805e:	3708      	adds	r7, #8
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008070:	2300      	movs	r3, #0
 8008072:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d036      	beq.n	80080e8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800807e:	6938      	ldr	r0, [r7, #16]
 8008080:	f000 f836 	bl	80080f0 <USBD_GetLen>
 8008084:	4603      	mov	r3, r0
 8008086:	3301      	adds	r3, #1
 8008088:	b29b      	uxth	r3, r3
 800808a:	005b      	lsls	r3, r3, #1
 800808c:	b29a      	uxth	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008092:	7dfb      	ldrb	r3, [r7, #23]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	4413      	add	r3, r2
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	7812      	ldrb	r2, [r2, #0]
 800809c:	701a      	strb	r2, [r3, #0]
  idx++;
 800809e:	7dfb      	ldrb	r3, [r7, #23]
 80080a0:	3301      	adds	r3, #1
 80080a2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80080a4:	7dfb      	ldrb	r3, [r7, #23]
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	4413      	add	r3, r2
 80080aa:	2203      	movs	r2, #3
 80080ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80080ae:	7dfb      	ldrb	r3, [r7, #23]
 80080b0:	3301      	adds	r3, #1
 80080b2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80080b4:	e013      	b.n	80080de <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	4413      	add	r3, r2
 80080bc:	693a      	ldr	r2, [r7, #16]
 80080be:	7812      	ldrb	r2, [r2, #0]
 80080c0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	3301      	adds	r3, #1
 80080c6:	613b      	str	r3, [r7, #16]
    idx++;
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
 80080ca:	3301      	adds	r3, #1
 80080cc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	4413      	add	r3, r2
 80080d4:	2200      	movs	r2, #0
 80080d6:	701a      	strb	r2, [r3, #0]
    idx++;
 80080d8:	7dfb      	ldrb	r3, [r7, #23]
 80080da:	3301      	adds	r3, #1
 80080dc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e7      	bne.n	80080b6 <USBD_GetString+0x52>
 80080e6:	e000      	b.n	80080ea <USBD_GetString+0x86>
    return;
 80080e8:	bf00      	nop
  }
}
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008100:	e005      	b.n	800810e <USBD_GetLen+0x1e>
  {
    len++;
 8008102:	7bfb      	ldrb	r3, [r7, #15]
 8008104:	3301      	adds	r3, #1
 8008106:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	3301      	adds	r3, #1
 800810c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1f5      	bne.n	8008102 <USBD_GetLen+0x12>
  }

  return len;
 8008116:	7bfb      	ldrb	r3, [r7, #15]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2202      	movs	r2, #2
 8008134:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	2100      	movs	r1, #0
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f003 fa59 	bl	800b602 <USBD_LL_Transmit>

  return USBD_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b084      	sub	sp, #16
 800815e:	af00      	add	r7, sp, #0
 8008160:	60f8      	str	r0, [r7, #12]
 8008162:	60b9      	str	r1, [r7, #8]
 8008164:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	2100      	movs	r1, #0
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f003 fa48 	bl	800b602 <USBD_LL_Transmit>

  return USBD_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2203      	movs	r2, #3
 800818c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	2100      	movs	r1, #0
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f003 fa4c 	bl	800b644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	60f8      	str	r0, [r7, #12]
 80081be:	60b9      	str	r1, [r7, #8]
 80081c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	2100      	movs	r1, #0
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f003 fa3b 	bl	800b644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2204      	movs	r2, #4
 80081e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081e8:	2300      	movs	r3, #0
 80081ea:	2200      	movs	r2, #0
 80081ec:	2100      	movs	r1, #0
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f003 fa07 	bl	800b602 <USBD_LL_Transmit>

  return USBD_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3708      	adds	r7, #8
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}

080081fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b082      	sub	sp, #8
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2205      	movs	r2, #5
 800820a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800820e:	2300      	movs	r3, #0
 8008210:	2200      	movs	r2, #0
 8008212:	2100      	movs	r1, #0
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f003 fa15 	bl	800b644 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <__NVIC_SetPriority>:
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	4603      	mov	r3, r0
 800822c:	6039      	str	r1, [r7, #0]
 800822e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008234:	2b00      	cmp	r3, #0
 8008236:	db0a      	blt.n	800824e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	b2da      	uxtb	r2, r3
 800823c:	490c      	ldr	r1, [pc, #48]	; (8008270 <__NVIC_SetPriority+0x4c>)
 800823e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008242:	0112      	lsls	r2, r2, #4
 8008244:	b2d2      	uxtb	r2, r2
 8008246:	440b      	add	r3, r1
 8008248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800824c:	e00a      	b.n	8008264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	b2da      	uxtb	r2, r3
 8008252:	4908      	ldr	r1, [pc, #32]	; (8008274 <__NVIC_SetPriority+0x50>)
 8008254:	79fb      	ldrb	r3, [r7, #7]
 8008256:	f003 030f 	and.w	r3, r3, #15
 800825a:	3b04      	subs	r3, #4
 800825c:	0112      	lsls	r2, r2, #4
 800825e:	b2d2      	uxtb	r2, r2
 8008260:	440b      	add	r3, r1
 8008262:	761a      	strb	r2, [r3, #24]
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	e000e100 	.word	0xe000e100
 8008274:	e000ed00 	.word	0xe000ed00

08008278 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800827c:	4b05      	ldr	r3, [pc, #20]	; (8008294 <SysTick_Handler+0x1c>)
 800827e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008280:	f001 fcfe 	bl	8009c80 <xTaskGetSchedulerState>
 8008284:	4603      	mov	r3, r0
 8008286:	2b01      	cmp	r3, #1
 8008288:	d001      	beq.n	800828e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800828a:	f002 fae5 	bl	800a858 <xPortSysTickHandler>
  }
}
 800828e:	bf00      	nop
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	e000e010 	.word	0xe000e010

08008298 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008298:	b580      	push	{r7, lr}
 800829a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800829c:	2100      	movs	r1, #0
 800829e:	f06f 0004 	mvn.w	r0, #4
 80082a2:	f7ff ffbf 	bl	8008224 <__NVIC_SetPriority>
#endif
}
 80082a6:	bf00      	nop
 80082a8:	bd80      	pop	{r7, pc}
	...

080082ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082b2:	f3ef 8305 	mrs	r3, IPSR
 80082b6:	603b      	str	r3, [r7, #0]
  return(result);
 80082b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d003      	beq.n	80082c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80082be:	f06f 0305 	mvn.w	r3, #5
 80082c2:	607b      	str	r3, [r7, #4]
 80082c4:	e00c      	b.n	80082e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80082c6:	4b0a      	ldr	r3, [pc, #40]	; (80082f0 <osKernelInitialize+0x44>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d105      	bne.n	80082da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80082ce:	4b08      	ldr	r3, [pc, #32]	; (80082f0 <osKernelInitialize+0x44>)
 80082d0:	2201      	movs	r2, #1
 80082d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80082d4:	2300      	movs	r3, #0
 80082d6:	607b      	str	r3, [r7, #4]
 80082d8:	e002      	b.n	80082e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80082da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082e0:	687b      	ldr	r3, [r7, #4]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	20000278 	.word	0x20000278

080082f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082fa:	f3ef 8305 	mrs	r3, IPSR
 80082fe:	603b      	str	r3, [r7, #0]
  return(result);
 8008300:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008306:	f06f 0305 	mvn.w	r3, #5
 800830a:	607b      	str	r3, [r7, #4]
 800830c:	e010      	b.n	8008330 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800830e:	4b0b      	ldr	r3, [pc, #44]	; (800833c <osKernelStart+0x48>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b01      	cmp	r3, #1
 8008314:	d109      	bne.n	800832a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008316:	f7ff ffbf 	bl	8008298 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800831a:	4b08      	ldr	r3, [pc, #32]	; (800833c <osKernelStart+0x48>)
 800831c:	2202      	movs	r2, #2
 800831e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008320:	f001 f866 	bl	80093f0 <vTaskStartScheduler>
      stat = osOK;
 8008324:	2300      	movs	r3, #0
 8008326:	607b      	str	r3, [r7, #4]
 8008328:	e002      	b.n	8008330 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800832a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800832e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008330:	687b      	ldr	r3, [r7, #4]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3708      	adds	r7, #8
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	20000278 	.word	0x20000278

08008340 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008340:	b580      	push	{r7, lr}
 8008342:	b08e      	sub	sp, #56	; 0x38
 8008344:	af04      	add	r7, sp, #16
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800834c:	2300      	movs	r3, #0
 800834e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008350:	f3ef 8305 	mrs	r3, IPSR
 8008354:	617b      	str	r3, [r7, #20]
  return(result);
 8008356:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008358:	2b00      	cmp	r3, #0
 800835a:	d17e      	bne.n	800845a <osThreadNew+0x11a>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d07b      	beq.n	800845a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008362:	2380      	movs	r3, #128	; 0x80
 8008364:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008366:	2318      	movs	r3, #24
 8008368:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800836e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008372:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d045      	beq.n	8008406 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d002      	beq.n	8008388 <osThreadNew+0x48>
        name = attr->name;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d002      	beq.n	8008396 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d008      	beq.n	80083ae <osThreadNew+0x6e>
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	2b38      	cmp	r3, #56	; 0x38
 80083a0:	d805      	bhi.n	80083ae <osThreadNew+0x6e>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f003 0301 	and.w	r3, r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <osThreadNew+0x72>
        return (NULL);
 80083ae:	2300      	movs	r3, #0
 80083b0:	e054      	b.n	800845c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d003      	beq.n	80083c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	089b      	lsrs	r3, r3, #2
 80083c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00e      	beq.n	80083e8 <osThreadNew+0xa8>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68db      	ldr	r3, [r3, #12]
 80083ce:	2b5b      	cmp	r3, #91	; 0x5b
 80083d0:	d90a      	bls.n	80083e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d006      	beq.n	80083e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <osThreadNew+0xa8>
        mem = 1;
 80083e2:	2301      	movs	r3, #1
 80083e4:	61bb      	str	r3, [r7, #24]
 80083e6:	e010      	b.n	800840a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10c      	bne.n	800840a <osThreadNew+0xca>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d108      	bne.n	800840a <osThreadNew+0xca>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d104      	bne.n	800840a <osThreadNew+0xca>
          mem = 0;
 8008400:	2300      	movs	r3, #0
 8008402:	61bb      	str	r3, [r7, #24]
 8008404:	e001      	b.n	800840a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008406:	2300      	movs	r3, #0
 8008408:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	2b01      	cmp	r3, #1
 800840e:	d110      	bne.n	8008432 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008418:	9202      	str	r2, [sp, #8]
 800841a:	9301      	str	r3, [sp, #4]
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	6a3a      	ldr	r2, [r7, #32]
 8008424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 fe0c 	bl	8009044 <xTaskCreateStatic>
 800842c:	4603      	mov	r3, r0
 800842e:	613b      	str	r3, [r7, #16]
 8008430:	e013      	b.n	800845a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d110      	bne.n	800845a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	b29a      	uxth	r2, r3
 800843c:	f107 0310 	add.w	r3, r7, #16
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f000 fe57 	bl	80090fe <xTaskCreate>
 8008450:	4603      	mov	r3, r0
 8008452:	2b01      	cmp	r3, #1
 8008454:	d001      	beq.n	800845a <osThreadNew+0x11a>
            hTask = NULL;
 8008456:	2300      	movs	r3, #0
 8008458:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800845a:	693b      	ldr	r3, [r7, #16]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3728      	adds	r7, #40	; 0x28
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800846c:	f3ef 8305 	mrs	r3, IPSR
 8008470:	60bb      	str	r3, [r7, #8]
  return(result);
 8008472:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008474:	2b00      	cmp	r3, #0
 8008476:	d003      	beq.n	8008480 <osDelay+0x1c>
    stat = osErrorISR;
 8008478:	f06f 0305 	mvn.w	r3, #5
 800847c:	60fb      	str	r3, [r7, #12]
 800847e:	e007      	b.n	8008490 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008480:	2300      	movs	r3, #0
 8008482:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <osDelay+0x2c>
      vTaskDelay(ticks);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 ff7c 	bl	8009388 <vTaskDelay>
    }
  }

  return (stat);
 8008490:	68fb      	ldr	r3, [r7, #12]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
	...

0800849c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4a07      	ldr	r2, [pc, #28]	; (80084c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80084ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	4a06      	ldr	r2, [pc, #24]	; (80084cc <vApplicationGetIdleTaskMemory+0x30>)
 80084b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2280      	movs	r2, #128	; 0x80
 80084b8:	601a      	str	r2, [r3, #0]
}
 80084ba:	bf00      	nop
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	2000027c 	.word	0x2000027c
 80084cc:	200002d8 	.word	0x200002d8

080084d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4a07      	ldr	r2, [pc, #28]	; (80084fc <vApplicationGetTimerTaskMemory+0x2c>)
 80084e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	4a06      	ldr	r2, [pc, #24]	; (8008500 <vApplicationGetTimerTaskMemory+0x30>)
 80084e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084ee:	601a      	str	r2, [r3, #0]
}
 80084f0:	bf00      	nop
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	200004d8 	.word	0x200004d8
 8008500:	20000534 	.word	0x20000534

08008504 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f103 0208 	add.w	r2, r3, #8
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800851c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f103 0208 	add.w	r2, r3, #8
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f103 0208 	add.w	r2, r3, #8
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008552:	bf00      	nop
 8008554:	370c      	adds	r7, #12
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr

0800855e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800855e:	b480      	push	{r7}
 8008560:	b085      	sub	sp, #20
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	689a      	ldr	r2, [r3, #8]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	1c5a      	adds	r2, r3, #1
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	601a      	str	r2, [r3, #0]
}
 800859a:	bf00      	nop
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085a6:	b480      	push	{r7}
 80085a8:	b085      	sub	sp, #20
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085bc:	d103      	bne.n	80085c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	e00c      	b.n	80085e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	3308      	adds	r3, #8
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	e002      	b.n	80085d4 <vListInsert+0x2e>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d2f6      	bcs.n	80085ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	685a      	ldr	r2, [r3, #4]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	601a      	str	r2, [r3, #0]
}
 800860c:	bf00      	nop
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	6892      	ldr	r2, [r2, #8]
 800862e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	689b      	ldr	r3, [r3, #8]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	6852      	ldr	r2, [r2, #4]
 8008638:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	429a      	cmp	r2, r3
 8008642:	d103      	bne.n	800864c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	689a      	ldr	r2, [r3, #8]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	1e5a      	subs	r2, r3, #1
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3714      	adds	r7, #20
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10a      	bne.n	8008696 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008692:	bf00      	nop
 8008694:	e7fe      	b.n	8008694 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008696:	f002 f84d 	bl	800a734 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a2:	68f9      	ldr	r1, [r7, #12]
 80086a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086a6:	fb01 f303 	mul.w	r3, r1, r3
 80086aa:	441a      	add	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c6:	3b01      	subs	r3, #1
 80086c8:	68f9      	ldr	r1, [r7, #12]
 80086ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80086cc:	fb01 f303 	mul.w	r3, r1, r3
 80086d0:	441a      	add	r2, r3
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	22ff      	movs	r2, #255	; 0xff
 80086da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	22ff      	movs	r2, #255	; 0xff
 80086e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d114      	bne.n	8008716 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d01a      	beq.n	800872a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	3310      	adds	r3, #16
 80086f8:	4618      	mov	r0, r3
 80086fa:	f001 f903 	bl	8009904 <xTaskRemoveFromEventList>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d012      	beq.n	800872a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008704:	4b0c      	ldr	r3, [pc, #48]	; (8008738 <xQueueGenericReset+0xcc>)
 8008706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	f3bf 8f6f 	isb	sy
 8008714:	e009      	b.n	800872a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3310      	adds	r3, #16
 800871a:	4618      	mov	r0, r3
 800871c:	f7ff fef2 	bl	8008504 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	3324      	adds	r3, #36	; 0x24
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff feed 	bl	8008504 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800872a:	f002 f833 	bl	800a794 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800872e:	2301      	movs	r3, #1
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	e000ed04 	.word	0xe000ed04

0800873c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800873c:	b580      	push	{r7, lr}
 800873e:	b08e      	sub	sp, #56	; 0x38
 8008740:	af02      	add	r7, sp, #8
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
 8008748:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10a      	bne.n	8008766 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008762:	bf00      	nop
 8008764:	e7fe      	b.n	8008764 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10a      	bne.n	8008782 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800877e:	bf00      	nop
 8008780:	e7fe      	b.n	8008780 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <xQueueGenericCreateStatic+0x52>
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d001      	beq.n	8008792 <xQueueGenericCreateStatic+0x56>
 800878e:	2301      	movs	r3, #1
 8008790:	e000      	b.n	8008794 <xQueueGenericCreateStatic+0x58>
 8008792:	2300      	movs	r3, #0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10a      	bne.n	80087ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879c:	f383 8811 	msr	BASEPRI, r3
 80087a0:	f3bf 8f6f 	isb	sy
 80087a4:	f3bf 8f4f 	dsb	sy
 80087a8:	623b      	str	r3, [r7, #32]
}
 80087aa:	bf00      	nop
 80087ac:	e7fe      	b.n	80087ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d102      	bne.n	80087ba <xQueueGenericCreateStatic+0x7e>
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <xQueueGenericCreateStatic+0x82>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e000      	b.n	80087c0 <xQueueGenericCreateStatic+0x84>
 80087be:	2300      	movs	r3, #0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	61fb      	str	r3, [r7, #28]
}
 80087d6:	bf00      	nop
 80087d8:	e7fe      	b.n	80087d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80087da:	2350      	movs	r3, #80	; 0x50
 80087dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	2b50      	cmp	r3, #80	; 0x50
 80087e2:	d00a      	beq.n	80087fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	61bb      	str	r3, [r7, #24]
}
 80087f6:	bf00      	nop
 80087f8:	e7fe      	b.n	80087f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80087fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00d      	beq.n	8008822 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008808:	2201      	movs	r2, #1
 800880a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800880e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	4613      	mov	r3, r2
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	68b9      	ldr	r1, [r7, #8]
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f000 f805 	bl	800882c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008824:	4618      	mov	r0, r3
 8008826:	3730      	adds	r7, #48	; 0x30
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
 8008838:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d103      	bne.n	8008848 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	69ba      	ldr	r2, [r7, #24]
 8008844:	601a      	str	r2, [r3, #0]
 8008846:	e002      	b.n	800884e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	68fa      	ldr	r2, [r7, #12]
 8008852:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	68ba      	ldr	r2, [r7, #8]
 8008858:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800885a:	2101      	movs	r1, #1
 800885c:	69b8      	ldr	r0, [r7, #24]
 800885e:	f7ff ff05 	bl	800866c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	78fa      	ldrb	r2, [r7, #3]
 8008866:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800886a:	bf00      	nop
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
	...

08008874 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b08e      	sub	sp, #56	; 0x38
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	607a      	str	r2, [r7, #4]
 8008880:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008882:	2300      	movs	r3, #0
 8008884:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10a      	bne.n	80088a6 <xQueueGenericSend+0x32>
	__asm volatile
 8008890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80088a2:	bf00      	nop
 80088a4:	e7fe      	b.n	80088a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d103      	bne.n	80088b4 <xQueueGenericSend+0x40>
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d101      	bne.n	80088b8 <xQueueGenericSend+0x44>
 80088b4:	2301      	movs	r3, #1
 80088b6:	e000      	b.n	80088ba <xQueueGenericSend+0x46>
 80088b8:	2300      	movs	r3, #0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10a      	bne.n	80088d4 <xQueueGenericSend+0x60>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80088d0:	bf00      	nop
 80088d2:	e7fe      	b.n	80088d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	2b02      	cmp	r3, #2
 80088d8:	d103      	bne.n	80088e2 <xQueueGenericSend+0x6e>
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d101      	bne.n	80088e6 <xQueueGenericSend+0x72>
 80088e2:	2301      	movs	r3, #1
 80088e4:	e000      	b.n	80088e8 <xQueueGenericSend+0x74>
 80088e6:	2300      	movs	r3, #0
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10a      	bne.n	8008902 <xQueueGenericSend+0x8e>
	__asm volatile
 80088ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	623b      	str	r3, [r7, #32]
}
 80088fe:	bf00      	nop
 8008900:	e7fe      	b.n	8008900 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008902:	f001 f9bd 	bl	8009c80 <xTaskGetSchedulerState>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d102      	bne.n	8008912 <xQueueGenericSend+0x9e>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <xQueueGenericSend+0xa2>
 8008912:	2301      	movs	r3, #1
 8008914:	e000      	b.n	8008918 <xQueueGenericSend+0xa4>
 8008916:	2300      	movs	r3, #0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10a      	bne.n	8008932 <xQueueGenericSend+0xbe>
	__asm volatile
 800891c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008920:	f383 8811 	msr	BASEPRI, r3
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	61fb      	str	r3, [r7, #28]
}
 800892e:	bf00      	nop
 8008930:	e7fe      	b.n	8008930 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008932:	f001 feff 	bl	800a734 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800893a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800893e:	429a      	cmp	r2, r3
 8008940:	d302      	bcc.n	8008948 <xQueueGenericSend+0xd4>
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	2b02      	cmp	r3, #2
 8008946:	d129      	bne.n	800899c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	68b9      	ldr	r1, [r7, #8]
 800894c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800894e:	f000 fa0b 	bl	8008d68 <prvCopyDataToQueue>
 8008952:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008958:	2b00      	cmp	r3, #0
 800895a:	d010      	beq.n	800897e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800895c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895e:	3324      	adds	r3, #36	; 0x24
 8008960:	4618      	mov	r0, r3
 8008962:	f000 ffcf 	bl	8009904 <xTaskRemoveFromEventList>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d013      	beq.n	8008994 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800896c:	4b3f      	ldr	r3, [pc, #252]	; (8008a6c <xQueueGenericSend+0x1f8>)
 800896e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008972:	601a      	str	r2, [r3, #0]
 8008974:	f3bf 8f4f 	dsb	sy
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	e00a      	b.n	8008994 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800897e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008980:	2b00      	cmp	r3, #0
 8008982:	d007      	beq.n	8008994 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008984:	4b39      	ldr	r3, [pc, #228]	; (8008a6c <xQueueGenericSend+0x1f8>)
 8008986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800898a:	601a      	str	r2, [r3, #0]
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008994:	f001 fefe 	bl	800a794 <vPortExitCritical>
				return pdPASS;
 8008998:	2301      	movs	r3, #1
 800899a:	e063      	b.n	8008a64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d103      	bne.n	80089aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089a2:	f001 fef7 	bl	800a794 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	e05c      	b.n	8008a64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d106      	bne.n	80089be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089b0:	f107 0314 	add.w	r3, r7, #20
 80089b4:	4618      	mov	r0, r3
 80089b6:	f001 f809 	bl	80099cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089ba:	2301      	movs	r3, #1
 80089bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089be:	f001 fee9 	bl	800a794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089c2:	f000 fd7b 	bl	80094bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089c6:	f001 feb5 	bl	800a734 <vPortEnterCritical>
 80089ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089d0:	b25b      	sxtb	r3, r3
 80089d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089d6:	d103      	bne.n	80089e0 <xQueueGenericSend+0x16c>
 80089d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089e6:	b25b      	sxtb	r3, r3
 80089e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089ec:	d103      	bne.n	80089f6 <xQueueGenericSend+0x182>
 80089ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089f6:	f001 fecd 	bl	800a794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089fa:	1d3a      	adds	r2, r7, #4
 80089fc:	f107 0314 	add.w	r3, r7, #20
 8008a00:	4611      	mov	r1, r2
 8008a02:	4618      	mov	r0, r3
 8008a04:	f000 fff8 	bl	80099f8 <xTaskCheckForTimeOut>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d124      	bne.n	8008a58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a10:	f000 faa2 	bl	8008f58 <prvIsQueueFull>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d018      	beq.n	8008a4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1c:	3310      	adds	r3, #16
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	4611      	mov	r1, r2
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 ff1e 	bl	8009864 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a2a:	f000 fa2d 	bl	8008e88 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a2e:	f000 fd53 	bl	80094d8 <xTaskResumeAll>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f47f af7c 	bne.w	8008932 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008a3a:	4b0c      	ldr	r3, [pc, #48]	; (8008a6c <xQueueGenericSend+0x1f8>)
 8008a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a40:	601a      	str	r2, [r3, #0]
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	e772      	b.n	8008932 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a4e:	f000 fa1b 	bl	8008e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a52:	f000 fd41 	bl	80094d8 <xTaskResumeAll>
 8008a56:	e76c      	b.n	8008932 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a5a:	f000 fa15 	bl	8008e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a5e:	f000 fd3b 	bl	80094d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3738      	adds	r7, #56	; 0x38
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	e000ed04 	.word	0xe000ed04

08008a70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b090      	sub	sp, #64	; 0x40
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10a      	bne.n	8008a9e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a9a:	bf00      	nop
 8008a9c:	e7fe      	b.n	8008a9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d103      	bne.n	8008aac <xQueueGenericSendFromISR+0x3c>
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d101      	bne.n	8008ab0 <xQueueGenericSendFromISR+0x40>
 8008aac:	2301      	movs	r3, #1
 8008aae:	e000      	b.n	8008ab2 <xQueueGenericSendFromISR+0x42>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10a      	bne.n	8008acc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ac8:	bf00      	nop
 8008aca:	e7fe      	b.n	8008aca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d103      	bne.n	8008ada <xQueueGenericSendFromISR+0x6a>
 8008ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d101      	bne.n	8008ade <xQueueGenericSendFromISR+0x6e>
 8008ada:	2301      	movs	r3, #1
 8008adc:	e000      	b.n	8008ae0 <xQueueGenericSendFromISR+0x70>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10a      	bne.n	8008afa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	623b      	str	r3, [r7, #32]
}
 8008af6:	bf00      	nop
 8008af8:	e7fe      	b.n	8008af8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008afa:	f001 fefd 	bl	800a8f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008afe:	f3ef 8211 	mrs	r2, BASEPRI
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	61fa      	str	r2, [r7, #28]
 8008b14:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b16:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b18:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d302      	bcc.n	8008b2c <xQueueGenericSendFromISR+0xbc>
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d12f      	bne.n	8008b8c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	68b9      	ldr	r1, [r7, #8]
 8008b40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b42:	f000 f911 	bl	8008d68 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b4e:	d112      	bne.n	8008b76 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d016      	beq.n	8008b86 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5a:	3324      	adds	r3, #36	; 0x24
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 fed1 	bl	8009904 <xTaskRemoveFromEventList>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00e      	beq.n	8008b86 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00b      	beq.n	8008b86 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	601a      	str	r2, [r3, #0]
 8008b74:	e007      	b.n	8008b86 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	b25a      	sxtb	r2, r3
 8008b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b86:	2301      	movs	r3, #1
 8008b88:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008b8a:	e001      	b.n	8008b90 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b92:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3740      	adds	r7, #64	; 0x40
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
	...

08008ba8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b08c      	sub	sp, #48	; 0x30
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10a      	bne.n	8008bd8 <xQueueReceive+0x30>
	__asm volatile
 8008bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc6:	f383 8811 	msr	BASEPRI, r3
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	623b      	str	r3, [r7, #32]
}
 8008bd4:	bf00      	nop
 8008bd6:	e7fe      	b.n	8008bd6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d103      	bne.n	8008be6 <xQueueReceive+0x3e>
 8008bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <xQueueReceive+0x42>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e000      	b.n	8008bec <xQueueReceive+0x44>
 8008bea:	2300      	movs	r3, #0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d10a      	bne.n	8008c06 <xQueueReceive+0x5e>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	61fb      	str	r3, [r7, #28]
}
 8008c02:	bf00      	nop
 8008c04:	e7fe      	b.n	8008c04 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c06:	f001 f83b 	bl	8009c80 <xTaskGetSchedulerState>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d102      	bne.n	8008c16 <xQueueReceive+0x6e>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d101      	bne.n	8008c1a <xQueueReceive+0x72>
 8008c16:	2301      	movs	r3, #1
 8008c18:	e000      	b.n	8008c1c <xQueueReceive+0x74>
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d10a      	bne.n	8008c36 <xQueueReceive+0x8e>
	__asm volatile
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	61bb      	str	r3, [r7, #24]
}
 8008c32:	bf00      	nop
 8008c34:	e7fe      	b.n	8008c34 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c36:	f001 fd7d 	bl	800a734 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d01f      	beq.n	8008c86 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c46:	68b9      	ldr	r1, [r7, #8]
 8008c48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c4a:	f000 f8f7 	bl	8008e3c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c50:	1e5a      	subs	r2, r3, #1
 8008c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c54:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00f      	beq.n	8008c7e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c60:	3310      	adds	r3, #16
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 fe4e 	bl	8009904 <xTaskRemoveFromEventList>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d007      	beq.n	8008c7e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c6e:	4b3d      	ldr	r3, [pc, #244]	; (8008d64 <xQueueReceive+0x1bc>)
 8008c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c74:	601a      	str	r2, [r3, #0]
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c7e:	f001 fd89 	bl	800a794 <vPortExitCritical>
				return pdPASS;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e069      	b.n	8008d5a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d103      	bne.n	8008c94 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c8c:	f001 fd82 	bl	800a794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c90:	2300      	movs	r3, #0
 8008c92:	e062      	b.n	8008d5a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d106      	bne.n	8008ca8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c9a:	f107 0310 	add.w	r3, r7, #16
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 fe94 	bl	80099cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ca8:	f001 fd74 	bl	800a794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cac:	f000 fc06 	bl	80094bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cb0:	f001 fd40 	bl	800a734 <vPortEnterCritical>
 8008cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cba:	b25b      	sxtb	r3, r3
 8008cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cc0:	d103      	bne.n	8008cca <xQueueReceive+0x122>
 8008cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cd0:	b25b      	sxtb	r3, r3
 8008cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cd6:	d103      	bne.n	8008ce0 <xQueueReceive+0x138>
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ce0:	f001 fd58 	bl	800a794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ce4:	1d3a      	adds	r2, r7, #4
 8008ce6:	f107 0310 	add.w	r3, r7, #16
 8008cea:	4611      	mov	r1, r2
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 fe83 	bl	80099f8 <xTaskCheckForTimeOut>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d123      	bne.n	8008d40 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cfa:	f000 f917 	bl	8008f2c <prvIsQueueEmpty>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d017      	beq.n	8008d34 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d06:	3324      	adds	r3, #36	; 0x24
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	4611      	mov	r1, r2
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f000 fda9 	bl	8009864 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d14:	f000 f8b8 	bl	8008e88 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d18:	f000 fbde 	bl	80094d8 <xTaskResumeAll>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d189      	bne.n	8008c36 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008d22:	4b10      	ldr	r3, [pc, #64]	; (8008d64 <xQueueReceive+0x1bc>)
 8008d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d28:	601a      	str	r2, [r3, #0]
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	e780      	b.n	8008c36 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d36:	f000 f8a7 	bl	8008e88 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d3a:	f000 fbcd 	bl	80094d8 <xTaskResumeAll>
 8008d3e:	e77a      	b.n	8008c36 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d42:	f000 f8a1 	bl	8008e88 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d46:	f000 fbc7 	bl	80094d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d4c:	f000 f8ee 	bl	8008f2c <prvIsQueueEmpty>
 8008d50:	4603      	mov	r3, r0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f43f af6f 	beq.w	8008c36 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3730      	adds	r7, #48	; 0x30
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	e000ed04 	.word	0xe000ed04

08008d68 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d74:	2300      	movs	r3, #0
 8008d76:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10d      	bne.n	8008da2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d14d      	bne.n	8008e2a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 ff92 	bl	8009cbc <xTaskPriorityDisinherit>
 8008d98:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	609a      	str	r2, [r3, #8]
 8008da0:	e043      	b.n	8008e2a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d119      	bne.n	8008ddc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6858      	ldr	r0, [r3, #4]
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db0:	461a      	mov	r2, r3
 8008db2:	68b9      	ldr	r1, [r7, #8]
 8008db4:	f002 fce2 	bl	800b77c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc0:	441a      	add	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	685a      	ldr	r2, [r3, #4]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d32b      	bcc.n	8008e2a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	605a      	str	r2, [r3, #4]
 8008dda:	e026      	b.n	8008e2a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	68d8      	ldr	r0, [r3, #12]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de4:	461a      	mov	r2, r3
 8008de6:	68b9      	ldr	r1, [r7, #8]
 8008de8:	f002 fcc8 	bl	800b77c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	68da      	ldr	r2, [r3, #12]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df4:	425b      	negs	r3, r3
 8008df6:	441a      	add	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	68da      	ldr	r2, [r3, #12]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d207      	bcs.n	8008e18 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	689a      	ldr	r2, [r3, #8]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e10:	425b      	negs	r3, r3
 8008e12:	441a      	add	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d105      	bne.n	8008e2a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	3b01      	subs	r3, #1
 8008e28:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	1c5a      	adds	r2, r3, #1
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008e32:	697b      	ldr	r3, [r7, #20]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3718      	adds	r7, #24
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d018      	beq.n	8008e80 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	68da      	ldr	r2, [r3, #12]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e56:	441a      	add	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68da      	ldr	r2, [r3, #12]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d303      	bcc.n	8008e70 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68d9      	ldr	r1, [r3, #12]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e78:	461a      	mov	r2, r3
 8008e7a:	6838      	ldr	r0, [r7, #0]
 8008e7c:	f002 fc7e 	bl	800b77c <memcpy>
	}
}
 8008e80:	bf00      	nop
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e90:	f001 fc50 	bl	800a734 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e9a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e9c:	e011      	b.n	8008ec2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d012      	beq.n	8008ecc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	3324      	adds	r3, #36	; 0x24
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 fd2a 	bl	8009904 <xTaskRemoveFromEventList>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008eb6:	f000 fe01 	bl	8009abc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	dce9      	bgt.n	8008e9e <prvUnlockQueue+0x16>
 8008eca:	e000      	b.n	8008ece <prvUnlockQueue+0x46>
					break;
 8008ecc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	22ff      	movs	r2, #255	; 0xff
 8008ed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008ed6:	f001 fc5d 	bl	800a794 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008eda:	f001 fc2b 	bl	800a734 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ee4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ee6:	e011      	b.n	8008f0c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d012      	beq.n	8008f16 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	3310      	adds	r3, #16
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 fd05 	bl	8009904 <xTaskRemoveFromEventList>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d001      	beq.n	8008f04 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008f00:	f000 fddc 	bl	8009abc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008f04:	7bbb      	ldrb	r3, [r7, #14]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	dce9      	bgt.n	8008ee8 <prvUnlockQueue+0x60>
 8008f14:	e000      	b.n	8008f18 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f16:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	22ff      	movs	r2, #255	; 0xff
 8008f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008f20:	f001 fc38 	bl	800a794 <vPortExitCritical>
}
 8008f24:	bf00      	nop
 8008f26:	3710      	adds	r7, #16
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f34:	f001 fbfe 	bl	800a734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d102      	bne.n	8008f46 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008f40:	2301      	movs	r3, #1
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	e001      	b.n	8008f4a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008f46:	2300      	movs	r3, #0
 8008f48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f4a:	f001 fc23 	bl	800a794 <vPortExitCritical>

	return xReturn;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f60:	f001 fbe8 	bl	800a734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d102      	bne.n	8008f76 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f70:	2301      	movs	r3, #1
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	e001      	b.n	8008f7a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f76:	2300      	movs	r3, #0
 8008f78:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f7a:	f001 fc0b 	bl	800a794 <vPortExitCritical>

	return xReturn;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f92:	2300      	movs	r3, #0
 8008f94:	60fb      	str	r3, [r7, #12]
 8008f96:	e014      	b.n	8008fc2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008f98:	4a0f      	ldr	r2, [pc, #60]	; (8008fd8 <vQueueAddToRegistry+0x50>)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10b      	bne.n	8008fbc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008fa4:	490c      	ldr	r1, [pc, #48]	; (8008fd8 <vQueueAddToRegistry+0x50>)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008fae:	4a0a      	ldr	r2, [pc, #40]	; (8008fd8 <vQueueAddToRegistry+0x50>)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	00db      	lsls	r3, r3, #3
 8008fb4:	4413      	add	r3, r2
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008fba:	e006      	b.n	8008fca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	60fb      	str	r3, [r7, #12]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2b07      	cmp	r3, #7
 8008fc6:	d9e7      	bls.n	8008f98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008fc8:	bf00      	nop
 8008fca:	bf00      	nop
 8008fcc:	3714      	adds	r7, #20
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	20000934 	.word	0x20000934

08008fdc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008fec:	f001 fba2 	bl	800a734 <vPortEnterCritical>
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ff6:	b25b      	sxtb	r3, r3
 8008ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ffc:	d103      	bne.n	8009006 <vQueueWaitForMessageRestricted+0x2a>
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800900c:	b25b      	sxtb	r3, r3
 800900e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009012:	d103      	bne.n	800901c <vQueueWaitForMessageRestricted+0x40>
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800901c:	f001 fbba 	bl	800a794 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009024:	2b00      	cmp	r3, #0
 8009026:	d106      	bne.n	8009036 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	3324      	adds	r3, #36	; 0x24
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	68b9      	ldr	r1, [r7, #8]
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fc3b 	bl	80098ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009036:	6978      	ldr	r0, [r7, #20]
 8009038:	f7ff ff26 	bl	8008e88 <prvUnlockQueue>
	}
 800903c:	bf00      	nop
 800903e:	3718      	adds	r7, #24
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009044:	b580      	push	{r7, lr}
 8009046:	b08e      	sub	sp, #56	; 0x38
 8009048:	af04      	add	r7, sp, #16
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
 8009050:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009054:	2b00      	cmp	r3, #0
 8009056:	d10a      	bne.n	800906e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905c:	f383 8811 	msr	BASEPRI, r3
 8009060:	f3bf 8f6f 	isb	sy
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	623b      	str	r3, [r7, #32]
}
 800906a:	bf00      	nop
 800906c:	e7fe      	b.n	800906c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800906e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009070:	2b00      	cmp	r3, #0
 8009072:	d10a      	bne.n	800908a <xTaskCreateStatic+0x46>
	__asm volatile
 8009074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009078:	f383 8811 	msr	BASEPRI, r3
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	61fb      	str	r3, [r7, #28]
}
 8009086:	bf00      	nop
 8009088:	e7fe      	b.n	8009088 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800908a:	235c      	movs	r3, #92	; 0x5c
 800908c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	2b5c      	cmp	r3, #92	; 0x5c
 8009092:	d00a      	beq.n	80090aa <xTaskCreateStatic+0x66>
	__asm volatile
 8009094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009098:	f383 8811 	msr	BASEPRI, r3
 800909c:	f3bf 8f6f 	isb	sy
 80090a0:	f3bf 8f4f 	dsb	sy
 80090a4:	61bb      	str	r3, [r7, #24]
}
 80090a6:	bf00      	nop
 80090a8:	e7fe      	b.n	80090a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80090aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d01e      	beq.n	80090f0 <xTaskCreateStatic+0xac>
 80090b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d01b      	beq.n	80090f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80090b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80090c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c4:	2202      	movs	r2, #2
 80090c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80090ca:	2300      	movs	r3, #0
 80090cc:	9303      	str	r3, [sp, #12]
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	9302      	str	r3, [sp, #8]
 80090d2:	f107 0314 	add.w	r3, r7, #20
 80090d6:	9301      	str	r3, [sp, #4]
 80090d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	68b9      	ldr	r1, [r7, #8]
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 f850 	bl	8009188 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80090ea:	f000 f8dd 	bl	80092a8 <prvAddNewTaskToReadyList>
 80090ee:	e001      	b.n	80090f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80090f0:	2300      	movs	r3, #0
 80090f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80090f4:	697b      	ldr	r3, [r7, #20]
	}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3728      	adds	r7, #40	; 0x28
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b08c      	sub	sp, #48	; 0x30
 8009102:	af04      	add	r7, sp, #16
 8009104:	60f8      	str	r0, [r7, #12]
 8009106:	60b9      	str	r1, [r7, #8]
 8009108:	603b      	str	r3, [r7, #0]
 800910a:	4613      	mov	r3, r2
 800910c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800910e:	88fb      	ldrh	r3, [r7, #6]
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4618      	mov	r0, r3
 8009114:	f001 fc30 	bl	800a978 <pvPortMalloc>
 8009118:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00e      	beq.n	800913e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009120:	205c      	movs	r0, #92	; 0x5c
 8009122:	f001 fc29 	bl	800a978 <pvPortMalloc>
 8009126:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d003      	beq.n	8009136 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	631a      	str	r2, [r3, #48]	; 0x30
 8009134:	e005      	b.n	8009142 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009136:	6978      	ldr	r0, [r7, #20]
 8009138:	f001 fcea 	bl	800ab10 <vPortFree>
 800913c:	e001      	b.n	8009142 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800913e:	2300      	movs	r3, #0
 8009140:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d017      	beq.n	8009178 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	2200      	movs	r2, #0
 800914c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009150:	88fa      	ldrh	r2, [r7, #6]
 8009152:	2300      	movs	r3, #0
 8009154:	9303      	str	r3, [sp, #12]
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	9302      	str	r3, [sp, #8]
 800915a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800915c:	9301      	str	r3, [sp, #4]
 800915e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	68b9      	ldr	r1, [r7, #8]
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f000 f80e 	bl	8009188 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800916c:	69f8      	ldr	r0, [r7, #28]
 800916e:	f000 f89b 	bl	80092a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009172:	2301      	movs	r3, #1
 8009174:	61bb      	str	r3, [r7, #24]
 8009176:	e002      	b.n	800917e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800917c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800917e:	69bb      	ldr	r3, [r7, #24]
	}
 8009180:	4618      	mov	r0, r3
 8009182:	3720      	adds	r7, #32
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
 8009194:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009198:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	461a      	mov	r2, r3
 80091a0:	21a5      	movs	r1, #165	; 0xa5
 80091a2:	f002 faf9 	bl	800b798 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80091a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80091b0:	3b01      	subs	r3, #1
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	f023 0307 	bic.w	r3, r3, #7
 80091be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	f003 0307 	and.w	r3, r3, #7
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00a      	beq.n	80091e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80091ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ce:	f383 8811 	msr	BASEPRI, r3
 80091d2:	f3bf 8f6f 	isb	sy
 80091d6:	f3bf 8f4f 	dsb	sy
 80091da:	617b      	str	r3, [r7, #20]
}
 80091dc:	bf00      	nop
 80091de:	e7fe      	b.n	80091de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d01f      	beq.n	8009226 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80091e6:	2300      	movs	r3, #0
 80091e8:	61fb      	str	r3, [r7, #28]
 80091ea:	e012      	b.n	8009212 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	4413      	add	r3, r2
 80091f2:	7819      	ldrb	r1, [r3, #0]
 80091f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	4413      	add	r3, r2
 80091fa:	3334      	adds	r3, #52	; 0x34
 80091fc:	460a      	mov	r2, r1
 80091fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	4413      	add	r3, r2
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d006      	beq.n	800921a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	3301      	adds	r3, #1
 8009210:	61fb      	str	r3, [r7, #28]
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	2b0f      	cmp	r3, #15
 8009216:	d9e9      	bls.n	80091ec <prvInitialiseNewTask+0x64>
 8009218:	e000      	b.n	800921c <prvInitialiseNewTask+0x94>
			{
				break;
 800921a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800921c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009224:	e003      	b.n	800922e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800922e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009230:	2b37      	cmp	r3, #55	; 0x37
 8009232:	d901      	bls.n	8009238 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009234:	2337      	movs	r3, #55	; 0x37
 8009236:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800923c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800923e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009240:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009242:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009246:	2200      	movs	r2, #0
 8009248:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800924a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924c:	3304      	adds	r3, #4
 800924e:	4618      	mov	r0, r3
 8009250:	f7ff f978 	bl	8008544 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009256:	3318      	adds	r3, #24
 8009258:	4618      	mov	r0, r3
 800925a:	f7ff f973 	bl	8008544 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800925e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009262:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009266:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800926a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800926e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009272:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009276:	2200      	movs	r2, #0
 8009278:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	2200      	movs	r2, #0
 800927e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	68f9      	ldr	r1, [r7, #12]
 8009286:	69b8      	ldr	r0, [r7, #24]
 8009288:	f001 f928 	bl	800a4dc <pxPortInitialiseStack>
 800928c:	4602      	mov	r2, r0
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	2b00      	cmp	r3, #0
 8009296:	d002      	beq.n	800929e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800929c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800929e:	bf00      	nop
 80092a0:	3720      	adds	r7, #32
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
	...

080092a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80092b0:	f001 fa40 	bl	800a734 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80092b4:	4b2d      	ldr	r3, [pc, #180]	; (800936c <prvAddNewTaskToReadyList+0xc4>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	3301      	adds	r3, #1
 80092ba:	4a2c      	ldr	r2, [pc, #176]	; (800936c <prvAddNewTaskToReadyList+0xc4>)
 80092bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80092be:	4b2c      	ldr	r3, [pc, #176]	; (8009370 <prvAddNewTaskToReadyList+0xc8>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d109      	bne.n	80092da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80092c6:	4a2a      	ldr	r2, [pc, #168]	; (8009370 <prvAddNewTaskToReadyList+0xc8>)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80092cc:	4b27      	ldr	r3, [pc, #156]	; (800936c <prvAddNewTaskToReadyList+0xc4>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d110      	bne.n	80092f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80092d4:	f000 fc16 	bl	8009b04 <prvInitialiseTaskLists>
 80092d8:	e00d      	b.n	80092f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80092da:	4b26      	ldr	r3, [pc, #152]	; (8009374 <prvAddNewTaskToReadyList+0xcc>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d109      	bne.n	80092f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80092e2:	4b23      	ldr	r3, [pc, #140]	; (8009370 <prvAddNewTaskToReadyList+0xc8>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d802      	bhi.n	80092f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80092f0:	4a1f      	ldr	r2, [pc, #124]	; (8009370 <prvAddNewTaskToReadyList+0xc8>)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80092f6:	4b20      	ldr	r3, [pc, #128]	; (8009378 <prvAddNewTaskToReadyList+0xd0>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	3301      	adds	r3, #1
 80092fc:	4a1e      	ldr	r2, [pc, #120]	; (8009378 <prvAddNewTaskToReadyList+0xd0>)
 80092fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009300:	4b1d      	ldr	r3, [pc, #116]	; (8009378 <prvAddNewTaskToReadyList+0xd0>)
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930c:	4b1b      	ldr	r3, [pc, #108]	; (800937c <prvAddNewTaskToReadyList+0xd4>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	429a      	cmp	r2, r3
 8009312:	d903      	bls.n	800931c <prvAddNewTaskToReadyList+0x74>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009318:	4a18      	ldr	r2, [pc, #96]	; (800937c <prvAddNewTaskToReadyList+0xd4>)
 800931a:	6013      	str	r3, [r2, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009320:	4613      	mov	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	4413      	add	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4a15      	ldr	r2, [pc, #84]	; (8009380 <prvAddNewTaskToReadyList+0xd8>)
 800932a:	441a      	add	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3304      	adds	r3, #4
 8009330:	4619      	mov	r1, r3
 8009332:	4610      	mov	r0, r2
 8009334:	f7ff f913 	bl	800855e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009338:	f001 fa2c 	bl	800a794 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800933c:	4b0d      	ldr	r3, [pc, #52]	; (8009374 <prvAddNewTaskToReadyList+0xcc>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00e      	beq.n	8009362 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009344:	4b0a      	ldr	r3, [pc, #40]	; (8009370 <prvAddNewTaskToReadyList+0xc8>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	429a      	cmp	r2, r3
 8009350:	d207      	bcs.n	8009362 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009352:	4b0c      	ldr	r3, [pc, #48]	; (8009384 <prvAddNewTaskToReadyList+0xdc>)
 8009354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009362:	bf00      	nop
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	20000e48 	.word	0x20000e48
 8009370:	20000974 	.word	0x20000974
 8009374:	20000e54 	.word	0x20000e54
 8009378:	20000e64 	.word	0x20000e64
 800937c:	20000e50 	.word	0x20000e50
 8009380:	20000978 	.word	0x20000978
 8009384:	e000ed04 	.word	0xe000ed04

08009388 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009390:	2300      	movs	r3, #0
 8009392:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d017      	beq.n	80093ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800939a:	4b13      	ldr	r3, [pc, #76]	; (80093e8 <vTaskDelay+0x60>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00a      	beq.n	80093b8 <vTaskDelay+0x30>
	__asm volatile
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	60bb      	str	r3, [r7, #8]
}
 80093b4:	bf00      	nop
 80093b6:	e7fe      	b.n	80093b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80093b8:	f000 f880 	bl	80094bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80093bc:	2100      	movs	r1, #0
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fcea 	bl	8009d98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80093c4:	f000 f888 	bl	80094d8 <xTaskResumeAll>
 80093c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d107      	bne.n	80093e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80093d0:	4b06      	ldr	r3, [pc, #24]	; (80093ec <vTaskDelay+0x64>)
 80093d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093d6:	601a      	str	r2, [r3, #0]
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093e0:	bf00      	nop
 80093e2:	3710      	adds	r7, #16
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	20000e70 	.word	0x20000e70
 80093ec:	e000ed04 	.word	0xe000ed04

080093f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b08a      	sub	sp, #40	; 0x28
 80093f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80093f6:	2300      	movs	r3, #0
 80093f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80093fa:	2300      	movs	r3, #0
 80093fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80093fe:	463a      	mov	r2, r7
 8009400:	1d39      	adds	r1, r7, #4
 8009402:	f107 0308 	add.w	r3, r7, #8
 8009406:	4618      	mov	r0, r3
 8009408:	f7ff f848 	bl	800849c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800940c:	6839      	ldr	r1, [r7, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	9202      	str	r2, [sp, #8]
 8009414:	9301      	str	r3, [sp, #4]
 8009416:	2300      	movs	r3, #0
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	2300      	movs	r3, #0
 800941c:	460a      	mov	r2, r1
 800941e:	4921      	ldr	r1, [pc, #132]	; (80094a4 <vTaskStartScheduler+0xb4>)
 8009420:	4821      	ldr	r0, [pc, #132]	; (80094a8 <vTaskStartScheduler+0xb8>)
 8009422:	f7ff fe0f 	bl	8009044 <xTaskCreateStatic>
 8009426:	4603      	mov	r3, r0
 8009428:	4a20      	ldr	r2, [pc, #128]	; (80094ac <vTaskStartScheduler+0xbc>)
 800942a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800942c:	4b1f      	ldr	r3, [pc, #124]	; (80094ac <vTaskStartScheduler+0xbc>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d002      	beq.n	800943a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009434:	2301      	movs	r3, #1
 8009436:	617b      	str	r3, [r7, #20]
 8009438:	e001      	b.n	800943e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800943a:	2300      	movs	r3, #0
 800943c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d102      	bne.n	800944a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009444:	f000 fcfc 	bl	8009e40 <xTimerCreateTimerTask>
 8009448:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d116      	bne.n	800947e <vTaskStartScheduler+0x8e>
	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	613b      	str	r3, [r7, #16]
}
 8009462:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009464:	4b12      	ldr	r3, [pc, #72]	; (80094b0 <vTaskStartScheduler+0xc0>)
 8009466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800946a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800946c:	4b11      	ldr	r3, [pc, #68]	; (80094b4 <vTaskStartScheduler+0xc4>)
 800946e:	2201      	movs	r2, #1
 8009470:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009472:	4b11      	ldr	r3, [pc, #68]	; (80094b8 <vTaskStartScheduler+0xc8>)
 8009474:	2200      	movs	r2, #0
 8009476:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009478:	f001 f8ba 	bl	800a5f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800947c:	e00e      	b.n	800949c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009484:	d10a      	bne.n	800949c <vTaskStartScheduler+0xac>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	60fb      	str	r3, [r7, #12]
}
 8009498:	bf00      	nop
 800949a:	e7fe      	b.n	800949a <vTaskStartScheduler+0xaa>
}
 800949c:	bf00      	nop
 800949e:	3718      	adds	r7, #24
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	0800b7d0 	.word	0x0800b7d0
 80094a8:	08009ad5 	.word	0x08009ad5
 80094ac:	20000e6c 	.word	0x20000e6c
 80094b0:	20000e68 	.word	0x20000e68
 80094b4:	20000e54 	.word	0x20000e54
 80094b8:	20000e4c 	.word	0x20000e4c

080094bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80094bc:	b480      	push	{r7}
 80094be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80094c0:	4b04      	ldr	r3, [pc, #16]	; (80094d4 <vTaskSuspendAll+0x18>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3301      	adds	r3, #1
 80094c6:	4a03      	ldr	r2, [pc, #12]	; (80094d4 <vTaskSuspendAll+0x18>)
 80094c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80094ca:	bf00      	nop
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr
 80094d4:	20000e70 	.word	0x20000e70

080094d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80094de:	2300      	movs	r3, #0
 80094e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80094e2:	2300      	movs	r3, #0
 80094e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80094e6:	4b42      	ldr	r3, [pc, #264]	; (80095f0 <xTaskResumeAll+0x118>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10a      	bne.n	8009504 <xTaskResumeAll+0x2c>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	603b      	str	r3, [r7, #0]
}
 8009500:	bf00      	nop
 8009502:	e7fe      	b.n	8009502 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009504:	f001 f916 	bl	800a734 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009508:	4b39      	ldr	r3, [pc, #228]	; (80095f0 <xTaskResumeAll+0x118>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3b01      	subs	r3, #1
 800950e:	4a38      	ldr	r2, [pc, #224]	; (80095f0 <xTaskResumeAll+0x118>)
 8009510:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009512:	4b37      	ldr	r3, [pc, #220]	; (80095f0 <xTaskResumeAll+0x118>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d162      	bne.n	80095e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800951a:	4b36      	ldr	r3, [pc, #216]	; (80095f4 <xTaskResumeAll+0x11c>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d05e      	beq.n	80095e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009522:	e02f      	b.n	8009584 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009524:	4b34      	ldr	r3, [pc, #208]	; (80095f8 <xTaskResumeAll+0x120>)
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	3318      	adds	r3, #24
 8009530:	4618      	mov	r0, r3
 8009532:	f7ff f871 	bl	8008618 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	3304      	adds	r3, #4
 800953a:	4618      	mov	r0, r3
 800953c:	f7ff f86c 	bl	8008618 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009544:	4b2d      	ldr	r3, [pc, #180]	; (80095fc <xTaskResumeAll+0x124>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	429a      	cmp	r2, r3
 800954a:	d903      	bls.n	8009554 <xTaskResumeAll+0x7c>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	4a2a      	ldr	r2, [pc, #168]	; (80095fc <xTaskResumeAll+0x124>)
 8009552:	6013      	str	r3, [r2, #0]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009558:	4613      	mov	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4413      	add	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4a27      	ldr	r2, [pc, #156]	; (8009600 <xTaskResumeAll+0x128>)
 8009562:	441a      	add	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	3304      	adds	r3, #4
 8009568:	4619      	mov	r1, r3
 800956a:	4610      	mov	r0, r2
 800956c:	f7fe fff7 	bl	800855e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009574:	4b23      	ldr	r3, [pc, #140]	; (8009604 <xTaskResumeAll+0x12c>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957a:	429a      	cmp	r2, r3
 800957c:	d302      	bcc.n	8009584 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800957e:	4b22      	ldr	r3, [pc, #136]	; (8009608 <xTaskResumeAll+0x130>)
 8009580:	2201      	movs	r2, #1
 8009582:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009584:	4b1c      	ldr	r3, [pc, #112]	; (80095f8 <xTaskResumeAll+0x120>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1cb      	bne.n	8009524 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009592:	f000 fb55 	bl	8009c40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009596:	4b1d      	ldr	r3, [pc, #116]	; (800960c <xTaskResumeAll+0x134>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d010      	beq.n	80095c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80095a2:	f000 f847 	bl	8009634 <xTaskIncrementTick>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80095ac:	4b16      	ldr	r3, [pc, #88]	; (8009608 <xTaskResumeAll+0x130>)
 80095ae:	2201      	movs	r2, #1
 80095b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	3b01      	subs	r3, #1
 80095b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d1f1      	bne.n	80095a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80095be:	4b13      	ldr	r3, [pc, #76]	; (800960c <xTaskResumeAll+0x134>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80095c4:	4b10      	ldr	r3, [pc, #64]	; (8009608 <xTaskResumeAll+0x130>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d009      	beq.n	80095e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80095cc:	2301      	movs	r3, #1
 80095ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80095d0:	4b0f      	ldr	r3, [pc, #60]	; (8009610 <xTaskResumeAll+0x138>)
 80095d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d6:	601a      	str	r2, [r3, #0]
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80095e0:	f001 f8d8 	bl	800a794 <vPortExitCritical>

	return xAlreadyYielded;
 80095e4:	68bb      	ldr	r3, [r7, #8]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20000e70 	.word	0x20000e70
 80095f4:	20000e48 	.word	0x20000e48
 80095f8:	20000e08 	.word	0x20000e08
 80095fc:	20000e50 	.word	0x20000e50
 8009600:	20000978 	.word	0x20000978
 8009604:	20000974 	.word	0x20000974
 8009608:	20000e5c 	.word	0x20000e5c
 800960c:	20000e58 	.word	0x20000e58
 8009610:	e000ed04 	.word	0xe000ed04

08009614 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800961a:	4b05      	ldr	r3, [pc, #20]	; (8009630 <xTaskGetTickCount+0x1c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009620:	687b      	ldr	r3, [r7, #4]
}
 8009622:	4618      	mov	r0, r3
 8009624:	370c      	adds	r7, #12
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	20000e4c 	.word	0x20000e4c

08009634 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800963a:	2300      	movs	r3, #0
 800963c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800963e:	4b4f      	ldr	r3, [pc, #316]	; (800977c <xTaskIncrementTick+0x148>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	f040 808f 	bne.w	8009766 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009648:	4b4d      	ldr	r3, [pc, #308]	; (8009780 <xTaskIncrementTick+0x14c>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3301      	adds	r3, #1
 800964e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009650:	4a4b      	ldr	r2, [pc, #300]	; (8009780 <xTaskIncrementTick+0x14c>)
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d120      	bne.n	800969e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800965c:	4b49      	ldr	r3, [pc, #292]	; (8009784 <xTaskIncrementTick+0x150>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00a      	beq.n	800967c <xTaskIncrementTick+0x48>
	__asm volatile
 8009666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966a:	f383 8811 	msr	BASEPRI, r3
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	f3bf 8f4f 	dsb	sy
 8009676:	603b      	str	r3, [r7, #0]
}
 8009678:	bf00      	nop
 800967a:	e7fe      	b.n	800967a <xTaskIncrementTick+0x46>
 800967c:	4b41      	ldr	r3, [pc, #260]	; (8009784 <xTaskIncrementTick+0x150>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	60fb      	str	r3, [r7, #12]
 8009682:	4b41      	ldr	r3, [pc, #260]	; (8009788 <xTaskIncrementTick+0x154>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a3f      	ldr	r2, [pc, #252]	; (8009784 <xTaskIncrementTick+0x150>)
 8009688:	6013      	str	r3, [r2, #0]
 800968a:	4a3f      	ldr	r2, [pc, #252]	; (8009788 <xTaskIncrementTick+0x154>)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6013      	str	r3, [r2, #0]
 8009690:	4b3e      	ldr	r3, [pc, #248]	; (800978c <xTaskIncrementTick+0x158>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3301      	adds	r3, #1
 8009696:	4a3d      	ldr	r2, [pc, #244]	; (800978c <xTaskIncrementTick+0x158>)
 8009698:	6013      	str	r3, [r2, #0]
 800969a:	f000 fad1 	bl	8009c40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800969e:	4b3c      	ldr	r3, [pc, #240]	; (8009790 <xTaskIncrementTick+0x15c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	693a      	ldr	r2, [r7, #16]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d349      	bcc.n	800973c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096a8:	4b36      	ldr	r3, [pc, #216]	; (8009784 <xTaskIncrementTick+0x150>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d104      	bne.n	80096bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096b2:	4b37      	ldr	r3, [pc, #220]	; (8009790 <xTaskIncrementTick+0x15c>)
 80096b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096b8:	601a      	str	r2, [r3, #0]
					break;
 80096ba:	e03f      	b.n	800973c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096bc:	4b31      	ldr	r3, [pc, #196]	; (8009784 <xTaskIncrementTick+0x150>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d203      	bcs.n	80096dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096d4:	4a2e      	ldr	r2, [pc, #184]	; (8009790 <xTaskIncrementTick+0x15c>)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80096da:	e02f      	b.n	800973c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	3304      	adds	r3, #4
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fe ff99 	bl	8008618 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d004      	beq.n	80096f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	3318      	adds	r3, #24
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fe ff90 	bl	8008618 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096fc:	4b25      	ldr	r3, [pc, #148]	; (8009794 <xTaskIncrementTick+0x160>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	429a      	cmp	r2, r3
 8009702:	d903      	bls.n	800970c <xTaskIncrementTick+0xd8>
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009708:	4a22      	ldr	r2, [pc, #136]	; (8009794 <xTaskIncrementTick+0x160>)
 800970a:	6013      	str	r3, [r2, #0]
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009710:	4613      	mov	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	4a1f      	ldr	r2, [pc, #124]	; (8009798 <xTaskIncrementTick+0x164>)
 800971a:	441a      	add	r2, r3
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	3304      	adds	r3, #4
 8009720:	4619      	mov	r1, r3
 8009722:	4610      	mov	r0, r2
 8009724:	f7fe ff1b 	bl	800855e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972c:	4b1b      	ldr	r3, [pc, #108]	; (800979c <xTaskIncrementTick+0x168>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009732:	429a      	cmp	r2, r3
 8009734:	d3b8      	bcc.n	80096a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009736:	2301      	movs	r3, #1
 8009738:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800973a:	e7b5      	b.n	80096a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800973c:	4b17      	ldr	r3, [pc, #92]	; (800979c <xTaskIncrementTick+0x168>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009742:	4915      	ldr	r1, [pc, #84]	; (8009798 <xTaskIncrementTick+0x164>)
 8009744:	4613      	mov	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	440b      	add	r3, r1
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d901      	bls.n	8009758 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009754:	2301      	movs	r3, #1
 8009756:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009758:	4b11      	ldr	r3, [pc, #68]	; (80097a0 <xTaskIncrementTick+0x16c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d007      	beq.n	8009770 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009760:	2301      	movs	r3, #1
 8009762:	617b      	str	r3, [r7, #20]
 8009764:	e004      	b.n	8009770 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009766:	4b0f      	ldr	r3, [pc, #60]	; (80097a4 <xTaskIncrementTick+0x170>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	3301      	adds	r3, #1
 800976c:	4a0d      	ldr	r2, [pc, #52]	; (80097a4 <xTaskIncrementTick+0x170>)
 800976e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009770:	697b      	ldr	r3, [r7, #20]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	20000e70 	.word	0x20000e70
 8009780:	20000e4c 	.word	0x20000e4c
 8009784:	20000e00 	.word	0x20000e00
 8009788:	20000e04 	.word	0x20000e04
 800978c:	20000e60 	.word	0x20000e60
 8009790:	20000e68 	.word	0x20000e68
 8009794:	20000e50 	.word	0x20000e50
 8009798:	20000978 	.word	0x20000978
 800979c:	20000974 	.word	0x20000974
 80097a0:	20000e5c 	.word	0x20000e5c
 80097a4:	20000e58 	.word	0x20000e58

080097a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80097ae:	4b28      	ldr	r3, [pc, #160]	; (8009850 <vTaskSwitchContext+0xa8>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d003      	beq.n	80097be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097b6:	4b27      	ldr	r3, [pc, #156]	; (8009854 <vTaskSwitchContext+0xac>)
 80097b8:	2201      	movs	r2, #1
 80097ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097bc:	e041      	b.n	8009842 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80097be:	4b25      	ldr	r3, [pc, #148]	; (8009854 <vTaskSwitchContext+0xac>)
 80097c0:	2200      	movs	r2, #0
 80097c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097c4:	4b24      	ldr	r3, [pc, #144]	; (8009858 <vTaskSwitchContext+0xb0>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	e010      	b.n	80097ee <vTaskSwitchContext+0x46>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10a      	bne.n	80097e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80097d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d6:	f383 8811 	msr	BASEPRI, r3
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	607b      	str	r3, [r7, #4]
}
 80097e4:	bf00      	nop
 80097e6:	e7fe      	b.n	80097e6 <vTaskSwitchContext+0x3e>
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	60fb      	str	r3, [r7, #12]
 80097ee:	491b      	ldr	r1, [pc, #108]	; (800985c <vTaskSwitchContext+0xb4>)
 80097f0:	68fa      	ldr	r2, [r7, #12]
 80097f2:	4613      	mov	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	440b      	add	r3, r1
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d0e4      	beq.n	80097cc <vTaskSwitchContext+0x24>
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	4613      	mov	r3, r2
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	4413      	add	r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4a13      	ldr	r2, [pc, #76]	; (800985c <vTaskSwitchContext+0xb4>)
 800980e:	4413      	add	r3, r2
 8009810:	60bb      	str	r3, [r7, #8]
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	605a      	str	r2, [r3, #4]
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	685a      	ldr	r2, [r3, #4]
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	3308      	adds	r3, #8
 8009824:	429a      	cmp	r2, r3
 8009826:	d104      	bne.n	8009832 <vTaskSwitchContext+0x8a>
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	685a      	ldr	r2, [r3, #4]
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	605a      	str	r2, [r3, #4]
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	4a09      	ldr	r2, [pc, #36]	; (8009860 <vTaskSwitchContext+0xb8>)
 800983a:	6013      	str	r3, [r2, #0]
 800983c:	4a06      	ldr	r2, [pc, #24]	; (8009858 <vTaskSwitchContext+0xb0>)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6013      	str	r3, [r2, #0]
}
 8009842:	bf00      	nop
 8009844:	3714      	adds	r7, #20
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop
 8009850:	20000e70 	.word	0x20000e70
 8009854:	20000e5c 	.word	0x20000e5c
 8009858:	20000e50 	.word	0x20000e50
 800985c:	20000978 	.word	0x20000978
 8009860:	20000974 	.word	0x20000974

08009864 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10a      	bne.n	800988a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009878:	f383 8811 	msr	BASEPRI, r3
 800987c:	f3bf 8f6f 	isb	sy
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	60fb      	str	r3, [r7, #12]
}
 8009886:	bf00      	nop
 8009888:	e7fe      	b.n	8009888 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800988a:	4b07      	ldr	r3, [pc, #28]	; (80098a8 <vTaskPlaceOnEventList+0x44>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3318      	adds	r3, #24
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7fe fe87 	bl	80085a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009898:	2101      	movs	r1, #1
 800989a:	6838      	ldr	r0, [r7, #0]
 800989c:	f000 fa7c 	bl	8009d98 <prvAddCurrentTaskToDelayedList>
}
 80098a0:	bf00      	nop
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	20000974 	.word	0x20000974

080098ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10a      	bne.n	80098d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	617b      	str	r3, [r7, #20]
}
 80098d0:	bf00      	nop
 80098d2:	e7fe      	b.n	80098d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098d4:	4b0a      	ldr	r3, [pc, #40]	; (8009900 <vTaskPlaceOnEventListRestricted+0x54>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3318      	adds	r3, #24
 80098da:	4619      	mov	r1, r3
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f7fe fe3e 	bl	800855e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d002      	beq.n	80098ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80098e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80098ee:	6879      	ldr	r1, [r7, #4]
 80098f0:	68b8      	ldr	r0, [r7, #8]
 80098f2:	f000 fa51 	bl	8009d98 <prvAddCurrentTaskToDelayedList>
	}
 80098f6:	bf00      	nop
 80098f8:	3718      	adds	r7, #24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20000974 	.word	0x20000974

08009904 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b086      	sub	sp, #24
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10a      	bne.n	8009930 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800991a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	60fb      	str	r3, [r7, #12]
}
 800992c:	bf00      	nop
 800992e:	e7fe      	b.n	800992e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	3318      	adds	r3, #24
 8009934:	4618      	mov	r0, r3
 8009936:	f7fe fe6f 	bl	8008618 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800993a:	4b1e      	ldr	r3, [pc, #120]	; (80099b4 <xTaskRemoveFromEventList+0xb0>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d11d      	bne.n	800997e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	3304      	adds	r3, #4
 8009946:	4618      	mov	r0, r3
 8009948:	f7fe fe66 	bl	8008618 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009950:	4b19      	ldr	r3, [pc, #100]	; (80099b8 <xTaskRemoveFromEventList+0xb4>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	429a      	cmp	r2, r3
 8009956:	d903      	bls.n	8009960 <xTaskRemoveFromEventList+0x5c>
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800995c:	4a16      	ldr	r2, [pc, #88]	; (80099b8 <xTaskRemoveFromEventList+0xb4>)
 800995e:	6013      	str	r3, [r2, #0]
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009964:	4613      	mov	r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	4413      	add	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4a13      	ldr	r2, [pc, #76]	; (80099bc <xTaskRemoveFromEventList+0xb8>)
 800996e:	441a      	add	r2, r3
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	3304      	adds	r3, #4
 8009974:	4619      	mov	r1, r3
 8009976:	4610      	mov	r0, r2
 8009978:	f7fe fdf1 	bl	800855e <vListInsertEnd>
 800997c:	e005      	b.n	800998a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	3318      	adds	r3, #24
 8009982:	4619      	mov	r1, r3
 8009984:	480e      	ldr	r0, [pc, #56]	; (80099c0 <xTaskRemoveFromEventList+0xbc>)
 8009986:	f7fe fdea 	bl	800855e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800998e:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <xTaskRemoveFromEventList+0xc0>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009994:	429a      	cmp	r2, r3
 8009996:	d905      	bls.n	80099a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009998:	2301      	movs	r3, #1
 800999a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800999c:	4b0a      	ldr	r3, [pc, #40]	; (80099c8 <xTaskRemoveFromEventList+0xc4>)
 800999e:	2201      	movs	r2, #1
 80099a0:	601a      	str	r2, [r3, #0]
 80099a2:	e001      	b.n	80099a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80099a4:	2300      	movs	r3, #0
 80099a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80099a8:	697b      	ldr	r3, [r7, #20]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3718      	adds	r7, #24
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	20000e70 	.word	0x20000e70
 80099b8:	20000e50 	.word	0x20000e50
 80099bc:	20000978 	.word	0x20000978
 80099c0:	20000e08 	.word	0x20000e08
 80099c4:	20000974 	.word	0x20000974
 80099c8:	20000e5c 	.word	0x20000e5c

080099cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099d4:	4b06      	ldr	r3, [pc, #24]	; (80099f0 <vTaskInternalSetTimeOutState+0x24>)
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80099dc:	4b05      	ldr	r3, [pc, #20]	; (80099f4 <vTaskInternalSetTimeOutState+0x28>)
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	605a      	str	r2, [r3, #4]
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr
 80099f0:	20000e60 	.word	0x20000e60
 80099f4:	20000e4c 	.word	0x20000e4c

080099f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b088      	sub	sp, #32
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d10a      	bne.n	8009a1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0c:	f383 8811 	msr	BASEPRI, r3
 8009a10:	f3bf 8f6f 	isb	sy
 8009a14:	f3bf 8f4f 	dsb	sy
 8009a18:	613b      	str	r3, [r7, #16]
}
 8009a1a:	bf00      	nop
 8009a1c:	e7fe      	b.n	8009a1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10a      	bne.n	8009a3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	60fb      	str	r3, [r7, #12]
}
 8009a36:	bf00      	nop
 8009a38:	e7fe      	b.n	8009a38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009a3a:	f000 fe7b 	bl	800a734 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a3e:	4b1d      	ldr	r3, [pc, #116]	; (8009ab4 <xTaskCheckForTimeOut+0xbc>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	69ba      	ldr	r2, [r7, #24]
 8009a4a:	1ad3      	subs	r3, r2, r3
 8009a4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a56:	d102      	bne.n	8009a5e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	61fb      	str	r3, [r7, #28]
 8009a5c:	e023      	b.n	8009aa6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	4b15      	ldr	r3, [pc, #84]	; (8009ab8 <xTaskCheckForTimeOut+0xc0>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d007      	beq.n	8009a7a <xTaskCheckForTimeOut+0x82>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	69ba      	ldr	r2, [r7, #24]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d302      	bcc.n	8009a7a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a74:	2301      	movs	r3, #1
 8009a76:	61fb      	str	r3, [r7, #28]
 8009a78:	e015      	b.n	8009aa6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d20b      	bcs.n	8009a9c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	1ad2      	subs	r2, r2, r3
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f7ff ff9b 	bl	80099cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a96:	2300      	movs	r3, #0
 8009a98:	61fb      	str	r3, [r7, #28]
 8009a9a:	e004      	b.n	8009aa6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009aa6:	f000 fe75 	bl	800a794 <vPortExitCritical>

	return xReturn;
 8009aaa:	69fb      	ldr	r3, [r7, #28]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3720      	adds	r7, #32
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	20000e4c 	.word	0x20000e4c
 8009ab8:	20000e60 	.word	0x20000e60

08009abc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009abc:	b480      	push	{r7}
 8009abe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ac0:	4b03      	ldr	r3, [pc, #12]	; (8009ad0 <vTaskMissedYield+0x14>)
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	601a      	str	r2, [r3, #0]
}
 8009ac6:	bf00      	nop
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	20000e5c 	.word	0x20000e5c

08009ad4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009adc:	f000 f852 	bl	8009b84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ae0:	4b06      	ldr	r3, [pc, #24]	; (8009afc <prvIdleTask+0x28>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d9f9      	bls.n	8009adc <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ae8:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <prvIdleTask+0x2c>)
 8009aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aee:	601a      	str	r2, [r3, #0]
 8009af0:	f3bf 8f4f 	dsb	sy
 8009af4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009af8:	e7f0      	b.n	8009adc <prvIdleTask+0x8>
 8009afa:	bf00      	nop
 8009afc:	20000978 	.word	0x20000978
 8009b00:	e000ed04 	.word	0xe000ed04

08009b04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	607b      	str	r3, [r7, #4]
 8009b0e:	e00c      	b.n	8009b2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	4613      	mov	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4413      	add	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	4a12      	ldr	r2, [pc, #72]	; (8009b64 <prvInitialiseTaskLists+0x60>)
 8009b1c:	4413      	add	r3, r2
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fe fcf0 	bl	8008504 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3301      	adds	r3, #1
 8009b28:	607b      	str	r3, [r7, #4]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b37      	cmp	r3, #55	; 0x37
 8009b2e:	d9ef      	bls.n	8009b10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b30:	480d      	ldr	r0, [pc, #52]	; (8009b68 <prvInitialiseTaskLists+0x64>)
 8009b32:	f7fe fce7 	bl	8008504 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b36:	480d      	ldr	r0, [pc, #52]	; (8009b6c <prvInitialiseTaskLists+0x68>)
 8009b38:	f7fe fce4 	bl	8008504 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b3c:	480c      	ldr	r0, [pc, #48]	; (8009b70 <prvInitialiseTaskLists+0x6c>)
 8009b3e:	f7fe fce1 	bl	8008504 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b42:	480c      	ldr	r0, [pc, #48]	; (8009b74 <prvInitialiseTaskLists+0x70>)
 8009b44:	f7fe fcde 	bl	8008504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b48:	480b      	ldr	r0, [pc, #44]	; (8009b78 <prvInitialiseTaskLists+0x74>)
 8009b4a:	f7fe fcdb 	bl	8008504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b4e:	4b0b      	ldr	r3, [pc, #44]	; (8009b7c <prvInitialiseTaskLists+0x78>)
 8009b50:	4a05      	ldr	r2, [pc, #20]	; (8009b68 <prvInitialiseTaskLists+0x64>)
 8009b52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b54:	4b0a      	ldr	r3, [pc, #40]	; (8009b80 <prvInitialiseTaskLists+0x7c>)
 8009b56:	4a05      	ldr	r2, [pc, #20]	; (8009b6c <prvInitialiseTaskLists+0x68>)
 8009b58:	601a      	str	r2, [r3, #0]
}
 8009b5a:	bf00      	nop
 8009b5c:	3708      	adds	r7, #8
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	20000978 	.word	0x20000978
 8009b68:	20000dd8 	.word	0x20000dd8
 8009b6c:	20000dec 	.word	0x20000dec
 8009b70:	20000e08 	.word	0x20000e08
 8009b74:	20000e1c 	.word	0x20000e1c
 8009b78:	20000e34 	.word	0x20000e34
 8009b7c:	20000e00 	.word	0x20000e00
 8009b80:	20000e04 	.word	0x20000e04

08009b84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b8a:	e019      	b.n	8009bc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b8c:	f000 fdd2 	bl	800a734 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b90:	4b10      	ldr	r3, [pc, #64]	; (8009bd4 <prvCheckTasksWaitingTermination+0x50>)
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fe fd3b 	bl	8008618 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009ba2:	4b0d      	ldr	r3, [pc, #52]	; (8009bd8 <prvCheckTasksWaitingTermination+0x54>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	4a0b      	ldr	r2, [pc, #44]	; (8009bd8 <prvCheckTasksWaitingTermination+0x54>)
 8009baa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009bac:	4b0b      	ldr	r3, [pc, #44]	; (8009bdc <prvCheckTasksWaitingTermination+0x58>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	4a0a      	ldr	r2, [pc, #40]	; (8009bdc <prvCheckTasksWaitingTermination+0x58>)
 8009bb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009bb6:	f000 fded 	bl	800a794 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f810 	bl	8009be0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009bc0:	4b06      	ldr	r3, [pc, #24]	; (8009bdc <prvCheckTasksWaitingTermination+0x58>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1e1      	bne.n	8009b8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009bc8:	bf00      	nop
 8009bca:	bf00      	nop
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20000e1c 	.word	0x20000e1c
 8009bd8:	20000e48 	.word	0x20000e48
 8009bdc:	20000e30 	.word	0x20000e30

08009be0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d108      	bne.n	8009c04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 ff8a 	bl	800ab10 <vPortFree>
				vPortFree( pxTCB );
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 ff87 	bl	800ab10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009c02:	e018      	b.n	8009c36 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d103      	bne.n	8009c16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 ff7e 	bl	800ab10 <vPortFree>
	}
 8009c14:	e00f      	b.n	8009c36 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d00a      	beq.n	8009c36 <prvDeleteTCB+0x56>
	__asm volatile
 8009c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	60fb      	str	r3, [r7, #12]
}
 8009c32:	bf00      	nop
 8009c34:	e7fe      	b.n	8009c34 <prvDeleteTCB+0x54>
	}
 8009c36:	bf00      	nop
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
	...

08009c40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c46:	4b0c      	ldr	r3, [pc, #48]	; (8009c78 <prvResetNextTaskUnblockTime+0x38>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d104      	bne.n	8009c5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c50:	4b0a      	ldr	r3, [pc, #40]	; (8009c7c <prvResetNextTaskUnblockTime+0x3c>)
 8009c52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c58:	e008      	b.n	8009c6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c5a:	4b07      	ldr	r3, [pc, #28]	; (8009c78 <prvResetNextTaskUnblockTime+0x38>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	4a04      	ldr	r2, [pc, #16]	; (8009c7c <prvResetNextTaskUnblockTime+0x3c>)
 8009c6a:	6013      	str	r3, [r2, #0]
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr
 8009c78:	20000e00 	.word	0x20000e00
 8009c7c:	20000e68 	.word	0x20000e68

08009c80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c86:	4b0b      	ldr	r3, [pc, #44]	; (8009cb4 <xTaskGetSchedulerState+0x34>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d102      	bne.n	8009c94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	607b      	str	r3, [r7, #4]
 8009c92:	e008      	b.n	8009ca6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c94:	4b08      	ldr	r3, [pc, #32]	; (8009cb8 <xTaskGetSchedulerState+0x38>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d102      	bne.n	8009ca2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c9c:	2302      	movs	r3, #2
 8009c9e:	607b      	str	r3, [r7, #4]
 8009ca0:	e001      	b.n	8009ca6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ca6:	687b      	ldr	r3, [r7, #4]
	}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	20000e54 	.word	0x20000e54
 8009cb8:	20000e70 	.word	0x20000e70

08009cbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b086      	sub	sp, #24
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d056      	beq.n	8009d80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009cd2:	4b2e      	ldr	r3, [pc, #184]	; (8009d8c <xTaskPriorityDisinherit+0xd0>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d00a      	beq.n	8009cf2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce0:	f383 8811 	msr	BASEPRI, r3
 8009ce4:	f3bf 8f6f 	isb	sy
 8009ce8:	f3bf 8f4f 	dsb	sy
 8009cec:	60fb      	str	r3, [r7, #12]
}
 8009cee:	bf00      	nop
 8009cf0:	e7fe      	b.n	8009cf0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d10a      	bne.n	8009d10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfe:	f383 8811 	msr	BASEPRI, r3
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	60bb      	str	r3, [r7, #8]
}
 8009d0c:	bf00      	nop
 8009d0e:	e7fe      	b.n	8009d0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d14:	1e5a      	subs	r2, r3, #1
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d02c      	beq.n	8009d80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d128      	bne.n	8009d80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	3304      	adds	r3, #4
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7fe fc70 	bl	8008618 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d50:	4b0f      	ldr	r3, [pc, #60]	; (8009d90 <xTaskPriorityDisinherit+0xd4>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d903      	bls.n	8009d60 <xTaskPriorityDisinherit+0xa4>
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5c:	4a0c      	ldr	r2, [pc, #48]	; (8009d90 <xTaskPriorityDisinherit+0xd4>)
 8009d5e:	6013      	str	r3, [r2, #0]
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d64:	4613      	mov	r3, r2
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4413      	add	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4a09      	ldr	r2, [pc, #36]	; (8009d94 <xTaskPriorityDisinherit+0xd8>)
 8009d6e:	441a      	add	r2, r3
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	3304      	adds	r3, #4
 8009d74:	4619      	mov	r1, r3
 8009d76:	4610      	mov	r0, r2
 8009d78:	f7fe fbf1 	bl	800855e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d80:	697b      	ldr	r3, [r7, #20]
	}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3718      	adds	r7, #24
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	20000974 	.word	0x20000974
 8009d90:	20000e50 	.word	0x20000e50
 8009d94:	20000978 	.word	0x20000978

08009d98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009da2:	4b21      	ldr	r3, [pc, #132]	; (8009e28 <prvAddCurrentTaskToDelayedList+0x90>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009da8:	4b20      	ldr	r3, [pc, #128]	; (8009e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	3304      	adds	r3, #4
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fe fc32 	bl	8008618 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dba:	d10a      	bne.n	8009dd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8009dbc:	683b      	ldr	r3, [r7, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d007      	beq.n	8009dd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dc2:	4b1a      	ldr	r3, [pc, #104]	; (8009e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	3304      	adds	r3, #4
 8009dc8:	4619      	mov	r1, r3
 8009dca:	4819      	ldr	r0, [pc, #100]	; (8009e30 <prvAddCurrentTaskToDelayedList+0x98>)
 8009dcc:	f7fe fbc7 	bl	800855e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009dd0:	e026      	b.n	8009e20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009dda:	4b14      	ldr	r3, [pc, #80]	; (8009e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d209      	bcs.n	8009dfe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dea:	4b12      	ldr	r3, [pc, #72]	; (8009e34 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	4b0f      	ldr	r3, [pc, #60]	; (8009e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3304      	adds	r3, #4
 8009df4:	4619      	mov	r1, r3
 8009df6:	4610      	mov	r0, r2
 8009df8:	f7fe fbd5 	bl	80085a6 <vListInsert>
}
 8009dfc:	e010      	b.n	8009e20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dfe:	4b0e      	ldr	r3, [pc, #56]	; (8009e38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	4b0a      	ldr	r3, [pc, #40]	; (8009e2c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	3304      	adds	r3, #4
 8009e08:	4619      	mov	r1, r3
 8009e0a:	4610      	mov	r0, r2
 8009e0c:	f7fe fbcb 	bl	80085a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e10:	4b0a      	ldr	r3, [pc, #40]	; (8009e3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68ba      	ldr	r2, [r7, #8]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d202      	bcs.n	8009e20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009e1a:	4a08      	ldr	r2, [pc, #32]	; (8009e3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	6013      	str	r3, [r2, #0]
}
 8009e20:	bf00      	nop
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	20000e4c 	.word	0x20000e4c
 8009e2c:	20000974 	.word	0x20000974
 8009e30:	20000e34 	.word	0x20000e34
 8009e34:	20000e04 	.word	0x20000e04
 8009e38:	20000e00 	.word	0x20000e00
 8009e3c:	20000e68 	.word	0x20000e68

08009e40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b08a      	sub	sp, #40	; 0x28
 8009e44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009e46:	2300      	movs	r3, #0
 8009e48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009e4a:	f000 fb07 	bl	800a45c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009e4e:	4b1c      	ldr	r3, [pc, #112]	; (8009ec0 <xTimerCreateTimerTask+0x80>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d021      	beq.n	8009e9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009e56:	2300      	movs	r3, #0
 8009e58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009e5e:	1d3a      	adds	r2, r7, #4
 8009e60:	f107 0108 	add.w	r1, r7, #8
 8009e64:	f107 030c 	add.w	r3, r7, #12
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fe fb31 	bl	80084d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009e6e:	6879      	ldr	r1, [r7, #4]
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	9202      	str	r2, [sp, #8]
 8009e76:	9301      	str	r3, [sp, #4]
 8009e78:	2302      	movs	r3, #2
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	460a      	mov	r2, r1
 8009e80:	4910      	ldr	r1, [pc, #64]	; (8009ec4 <xTimerCreateTimerTask+0x84>)
 8009e82:	4811      	ldr	r0, [pc, #68]	; (8009ec8 <xTimerCreateTimerTask+0x88>)
 8009e84:	f7ff f8de 	bl	8009044 <xTaskCreateStatic>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	4a10      	ldr	r2, [pc, #64]	; (8009ecc <xTimerCreateTimerTask+0x8c>)
 8009e8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009e8e:	4b0f      	ldr	r3, [pc, #60]	; (8009ecc <xTimerCreateTimerTask+0x8c>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009e96:	2301      	movs	r3, #1
 8009e98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d10a      	bne.n	8009eb6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	613b      	str	r3, [r7, #16]
}
 8009eb2:	bf00      	nop
 8009eb4:	e7fe      	b.n	8009eb4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009eb6:	697b      	ldr	r3, [r7, #20]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3718      	adds	r7, #24
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	20000ea4 	.word	0x20000ea4
 8009ec4:	0800b7d8 	.word	0x0800b7d8
 8009ec8:	0800a005 	.word	0x0800a005
 8009ecc:	20000ea8 	.word	0x20000ea8

08009ed0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b08a      	sub	sp, #40	; 0x28
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
 8009edc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10a      	bne.n	8009efe <xTimerGenericCommand+0x2e>
	__asm volatile
 8009ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	623b      	str	r3, [r7, #32]
}
 8009efa:	bf00      	nop
 8009efc:	e7fe      	b.n	8009efc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009efe:	4b1a      	ldr	r3, [pc, #104]	; (8009f68 <xTimerGenericCommand+0x98>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d02a      	beq.n	8009f5c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	2b05      	cmp	r3, #5
 8009f16:	dc18      	bgt.n	8009f4a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009f18:	f7ff feb2 	bl	8009c80 <xTaskGetSchedulerState>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	d109      	bne.n	8009f36 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009f22:	4b11      	ldr	r3, [pc, #68]	; (8009f68 <xTimerGenericCommand+0x98>)
 8009f24:	6818      	ldr	r0, [r3, #0]
 8009f26:	f107 0110 	add.w	r1, r7, #16
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f2e:	f7fe fca1 	bl	8008874 <xQueueGenericSend>
 8009f32:	6278      	str	r0, [r7, #36]	; 0x24
 8009f34:	e012      	b.n	8009f5c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009f36:	4b0c      	ldr	r3, [pc, #48]	; (8009f68 <xTimerGenericCommand+0x98>)
 8009f38:	6818      	ldr	r0, [r3, #0]
 8009f3a:	f107 0110 	add.w	r1, r7, #16
 8009f3e:	2300      	movs	r3, #0
 8009f40:	2200      	movs	r2, #0
 8009f42:	f7fe fc97 	bl	8008874 <xQueueGenericSend>
 8009f46:	6278      	str	r0, [r7, #36]	; 0x24
 8009f48:	e008      	b.n	8009f5c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009f4a:	4b07      	ldr	r3, [pc, #28]	; (8009f68 <xTimerGenericCommand+0x98>)
 8009f4c:	6818      	ldr	r0, [r3, #0]
 8009f4e:	f107 0110 	add.w	r1, r7, #16
 8009f52:	2300      	movs	r3, #0
 8009f54:	683a      	ldr	r2, [r7, #0]
 8009f56:	f7fe fd8b 	bl	8008a70 <xQueueGenericSendFromISR>
 8009f5a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3728      	adds	r7, #40	; 0x28
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20000ea4 	.word	0x20000ea4

08009f6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b088      	sub	sp, #32
 8009f70:	af02      	add	r7, sp, #8
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f76:	4b22      	ldr	r3, [pc, #136]	; (800a000 <prvProcessExpiredTimer+0x94>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	3304      	adds	r3, #4
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7fe fb47 	bl	8008618 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f90:	f003 0304 	and.w	r3, r3, #4
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d022      	beq.n	8009fde <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	699a      	ldr	r2, [r3, #24]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	18d1      	adds	r1, r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	6978      	ldr	r0, [r7, #20]
 8009fa6:	f000 f8d1 	bl	800a14c <prvInsertTimerInActiveList>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d01f      	beq.n	8009ff0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	2100      	movs	r1, #0
 8009fba:	6978      	ldr	r0, [r7, #20]
 8009fbc:	f7ff ff88 	bl	8009ed0 <xTimerGenericCommand>
 8009fc0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d113      	bne.n	8009ff0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	60fb      	str	r3, [r7, #12]
}
 8009fda:	bf00      	nop
 8009fdc:	e7fe      	b.n	8009fdc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fe4:	f023 0301 	bic.w	r3, r3, #1
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	6a1b      	ldr	r3, [r3, #32]
 8009ff4:	6978      	ldr	r0, [r7, #20]
 8009ff6:	4798      	blx	r3
}
 8009ff8:	bf00      	nop
 8009ffa:	3718      	adds	r7, #24
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	20000e9c 	.word	0x20000e9c

0800a004 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a00c:	f107 0308 	add.w	r3, r7, #8
 800a010:	4618      	mov	r0, r3
 800a012:	f000 f857 	bl	800a0c4 <prvGetNextExpireTime>
 800a016:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	4619      	mov	r1, r3
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f000 f803 	bl	800a028 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a022:	f000 f8d5 	bl	800a1d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a026:	e7f1      	b.n	800a00c <prvTimerTask+0x8>

0800a028 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
 800a030:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a032:	f7ff fa43 	bl	80094bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a036:	f107 0308 	add.w	r3, r7, #8
 800a03a:	4618      	mov	r0, r3
 800a03c:	f000 f866 	bl	800a10c <prvSampleTimeNow>
 800a040:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d130      	bne.n	800a0aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d10a      	bne.n	800a064 <prvProcessTimerOrBlockTask+0x3c>
 800a04e:	687a      	ldr	r2, [r7, #4]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	429a      	cmp	r2, r3
 800a054:	d806      	bhi.n	800a064 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a056:	f7ff fa3f 	bl	80094d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a05a:	68f9      	ldr	r1, [r7, #12]
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7ff ff85 	bl	8009f6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a062:	e024      	b.n	800a0ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d008      	beq.n	800a07c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a06a:	4b13      	ldr	r3, [pc, #76]	; (800a0b8 <prvProcessTimerOrBlockTask+0x90>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d101      	bne.n	800a078 <prvProcessTimerOrBlockTask+0x50>
 800a074:	2301      	movs	r3, #1
 800a076:	e000      	b.n	800a07a <prvProcessTimerOrBlockTask+0x52>
 800a078:	2300      	movs	r3, #0
 800a07a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a07c:	4b0f      	ldr	r3, [pc, #60]	; (800a0bc <prvProcessTimerOrBlockTask+0x94>)
 800a07e:	6818      	ldr	r0, [r3, #0]
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	1ad3      	subs	r3, r2, r3
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	4619      	mov	r1, r3
 800a08a:	f7fe ffa7 	bl	8008fdc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a08e:	f7ff fa23 	bl	80094d8 <xTaskResumeAll>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10a      	bne.n	800a0ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a098:	4b09      	ldr	r3, [pc, #36]	; (800a0c0 <prvProcessTimerOrBlockTask+0x98>)
 800a09a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a09e:	601a      	str	r2, [r3, #0]
 800a0a0:	f3bf 8f4f 	dsb	sy
 800a0a4:	f3bf 8f6f 	isb	sy
}
 800a0a8:	e001      	b.n	800a0ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a0aa:	f7ff fa15 	bl	80094d8 <xTaskResumeAll>
}
 800a0ae:	bf00      	nop
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	20000ea0 	.word	0x20000ea0
 800a0bc:	20000ea4 	.word	0x20000ea4
 800a0c0:	e000ed04 	.word	0xe000ed04

0800a0c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a0cc:	4b0e      	ldr	r3, [pc, #56]	; (800a108 <prvGetNextExpireTime+0x44>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d101      	bne.n	800a0da <prvGetNextExpireTime+0x16>
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	e000      	b.n	800a0dc <prvGetNextExpireTime+0x18>
 800a0da:	2200      	movs	r2, #0
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d105      	bne.n	800a0f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0e8:	4b07      	ldr	r3, [pc, #28]	; (800a108 <prvGetNextExpireTime+0x44>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	60fb      	str	r3, [r7, #12]
 800a0f2:	e001      	b.n	800a0f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	20000e9c 	.word	0x20000e9c

0800a10c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b084      	sub	sp, #16
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a114:	f7ff fa7e 	bl	8009614 <xTaskGetTickCount>
 800a118:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a11a:	4b0b      	ldr	r3, [pc, #44]	; (800a148 <prvSampleTimeNow+0x3c>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	429a      	cmp	r2, r3
 800a122:	d205      	bcs.n	800a130 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a124:	f000 f936 	bl	800a394 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2201      	movs	r2, #1
 800a12c:	601a      	str	r2, [r3, #0]
 800a12e:	e002      	b.n	800a136 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2200      	movs	r2, #0
 800a134:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a136:	4a04      	ldr	r2, [pc, #16]	; (800a148 <prvSampleTimeNow+0x3c>)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a13c:	68fb      	ldr	r3, [r7, #12]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	20000eac 	.word	0x20000eac

0800a14c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b086      	sub	sp, #24
 800a150:	af00      	add	r7, sp, #0
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	607a      	str	r2, [r7, #4]
 800a158:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a15a:	2300      	movs	r3, #0
 800a15c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	68fa      	ldr	r2, [r7, #12]
 800a168:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d812      	bhi.n	800a198 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	1ad2      	subs	r2, r2, r3
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	699b      	ldr	r3, [r3, #24]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d302      	bcc.n	800a186 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a180:	2301      	movs	r3, #1
 800a182:	617b      	str	r3, [r7, #20]
 800a184:	e01b      	b.n	800a1be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a186:	4b10      	ldr	r3, [pc, #64]	; (800a1c8 <prvInsertTimerInActiveList+0x7c>)
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	3304      	adds	r3, #4
 800a18e:	4619      	mov	r1, r3
 800a190:	4610      	mov	r0, r2
 800a192:	f7fe fa08 	bl	80085a6 <vListInsert>
 800a196:	e012      	b.n	800a1be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d206      	bcs.n	800a1ae <prvInsertTimerInActiveList+0x62>
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d302      	bcc.n	800a1ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	617b      	str	r3, [r7, #20]
 800a1ac:	e007      	b.n	800a1be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1ae:	4b07      	ldr	r3, [pc, #28]	; (800a1cc <prvInsertTimerInActiveList+0x80>)
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	3304      	adds	r3, #4
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	4610      	mov	r0, r2
 800a1ba:	f7fe f9f4 	bl	80085a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a1be:	697b      	ldr	r3, [r7, #20]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3718      	adds	r7, #24
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	20000ea0 	.word	0x20000ea0
 800a1cc:	20000e9c 	.word	0x20000e9c

0800a1d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b08e      	sub	sp, #56	; 0x38
 800a1d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a1d6:	e0ca      	b.n	800a36e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	da18      	bge.n	800a210 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a1de:	1d3b      	adds	r3, r7, #4
 800a1e0:	3304      	adds	r3, #4
 800a1e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d10a      	bne.n	800a200 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ee:	f383 8811 	msr	BASEPRI, r3
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	61fb      	str	r3, [r7, #28]
}
 800a1fc:	bf00      	nop
 800a1fe:	e7fe      	b.n	800a1fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a206:	6850      	ldr	r0, [r2, #4]
 800a208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a20a:	6892      	ldr	r2, [r2, #8]
 800a20c:	4611      	mov	r1, r2
 800a20e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	f2c0 80aa 	blt.w	800a36c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21e:	695b      	ldr	r3, [r3, #20]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d004      	beq.n	800a22e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a226:	3304      	adds	r3, #4
 800a228:	4618      	mov	r0, r3
 800a22a:	f7fe f9f5 	bl	8008618 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a22e:	463b      	mov	r3, r7
 800a230:	4618      	mov	r0, r3
 800a232:	f7ff ff6b 	bl	800a10c <prvSampleTimeNow>
 800a236:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b09      	cmp	r3, #9
 800a23c:	f200 8097 	bhi.w	800a36e <prvProcessReceivedCommands+0x19e>
 800a240:	a201      	add	r2, pc, #4	; (adr r2, 800a248 <prvProcessReceivedCommands+0x78>)
 800a242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a246:	bf00      	nop
 800a248:	0800a271 	.word	0x0800a271
 800a24c:	0800a271 	.word	0x0800a271
 800a250:	0800a271 	.word	0x0800a271
 800a254:	0800a2e5 	.word	0x0800a2e5
 800a258:	0800a2f9 	.word	0x0800a2f9
 800a25c:	0800a343 	.word	0x0800a343
 800a260:	0800a271 	.word	0x0800a271
 800a264:	0800a271 	.word	0x0800a271
 800a268:	0800a2e5 	.word	0x0800a2e5
 800a26c:	0800a2f9 	.word	0x0800a2f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a276:	f043 0301 	orr.w	r3, r3, #1
 800a27a:	b2da      	uxtb	r2, r3
 800a27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a282:	68ba      	ldr	r2, [r7, #8]
 800a284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a286:	699b      	ldr	r3, [r3, #24]
 800a288:	18d1      	adds	r1, r2, r3
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a28e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a290:	f7ff ff5c 	bl	800a14c <prvInsertTimerInActiveList>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d069      	beq.n	800a36e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29c:	6a1b      	ldr	r3, [r3, #32]
 800a29e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2a8:	f003 0304 	and.w	r3, r3, #4
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d05e      	beq.n	800a36e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a2b0:	68ba      	ldr	r2, [r7, #8]
 800a2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	441a      	add	r2, r3
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	2300      	movs	r3, #0
 800a2be:	2100      	movs	r1, #0
 800a2c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2c2:	f7ff fe05 	bl	8009ed0 <xTimerGenericCommand>
 800a2c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a2c8:	6a3b      	ldr	r3, [r7, #32]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d14f      	bne.n	800a36e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	61bb      	str	r3, [r7, #24]
}
 800a2e0:	bf00      	nop
 800a2e2:	e7fe      	b.n	800a2e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2ea:	f023 0301 	bic.w	r3, r3, #1
 800a2ee:	b2da      	uxtb	r2, r3
 800a2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a2f6:	e03a      	b.n	800a36e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2fe:	f043 0301 	orr.w	r3, r3, #1
 800a302:	b2da      	uxtb	r2, r3
 800a304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a306:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d10a      	bne.n	800a32e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	617b      	str	r3, [r7, #20]
}
 800a32a:	bf00      	nop
 800a32c:	e7fe      	b.n	800a32c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a330:	699a      	ldr	r2, [r3, #24]
 800a332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a334:	18d1      	adds	r1, r2, r3
 800a336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a33a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a33c:	f7ff ff06 	bl	800a14c <prvInsertTimerInActiveList>
					break;
 800a340:	e015      	b.n	800a36e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a348:	f003 0302 	and.w	r3, r3, #2
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d103      	bne.n	800a358 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a352:	f000 fbdd 	bl	800ab10 <vPortFree>
 800a356:	e00a      	b.n	800a36e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a35e:	f023 0301 	bic.w	r3, r3, #1
 800a362:	b2da      	uxtb	r2, r3
 800a364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a366:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a36a:	e000      	b.n	800a36e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a36c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a36e:	4b08      	ldr	r3, [pc, #32]	; (800a390 <prvProcessReceivedCommands+0x1c0>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	1d39      	adds	r1, r7, #4
 800a374:	2200      	movs	r2, #0
 800a376:	4618      	mov	r0, r3
 800a378:	f7fe fc16 	bl	8008ba8 <xQueueReceive>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f47f af2a 	bne.w	800a1d8 <prvProcessReceivedCommands+0x8>
	}
}
 800a384:	bf00      	nop
 800a386:	bf00      	nop
 800a388:	3730      	adds	r7, #48	; 0x30
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	20000ea4 	.word	0x20000ea4

0800a394 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b088      	sub	sp, #32
 800a398:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a39a:	e048      	b.n	800a42e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a39c:	4b2d      	ldr	r3, [pc, #180]	; (800a454 <prvSwitchTimerLists+0xc0>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3a6:	4b2b      	ldr	r3, [pc, #172]	; (800a454 <prvSwitchTimerLists+0xc0>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	68db      	ldr	r3, [r3, #12]
 800a3ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7fe f92f 	bl	8008618 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6a1b      	ldr	r3, [r3, #32]
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3c8:	f003 0304 	and.w	r3, r3, #4
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d02e      	beq.n	800a42e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	699b      	ldr	r3, [r3, #24]
 800a3d4:	693a      	ldr	r2, [r7, #16]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d90e      	bls.n	800a400 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	68ba      	ldr	r2, [r7, #8]
 800a3e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a3ee:	4b19      	ldr	r3, [pc, #100]	; (800a454 <prvSwitchTimerLists+0xc0>)
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	3304      	adds	r3, #4
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	4610      	mov	r0, r2
 800a3fa:	f7fe f8d4 	bl	80085a6 <vListInsert>
 800a3fe:	e016      	b.n	800a42e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a400:	2300      	movs	r3, #0
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	2300      	movs	r3, #0
 800a406:	693a      	ldr	r2, [r7, #16]
 800a408:	2100      	movs	r1, #0
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f7ff fd60 	bl	8009ed0 <xTimerGenericCommand>
 800a410:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d10a      	bne.n	800a42e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41c:	f383 8811 	msr	BASEPRI, r3
 800a420:	f3bf 8f6f 	isb	sy
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	603b      	str	r3, [r7, #0]
}
 800a42a:	bf00      	nop
 800a42c:	e7fe      	b.n	800a42c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a42e:	4b09      	ldr	r3, [pc, #36]	; (800a454 <prvSwitchTimerLists+0xc0>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1b1      	bne.n	800a39c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a438:	4b06      	ldr	r3, [pc, #24]	; (800a454 <prvSwitchTimerLists+0xc0>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a43e:	4b06      	ldr	r3, [pc, #24]	; (800a458 <prvSwitchTimerLists+0xc4>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a04      	ldr	r2, [pc, #16]	; (800a454 <prvSwitchTimerLists+0xc0>)
 800a444:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a446:	4a04      	ldr	r2, [pc, #16]	; (800a458 <prvSwitchTimerLists+0xc4>)
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	6013      	str	r3, [r2, #0]
}
 800a44c:	bf00      	nop
 800a44e:	3718      	adds	r7, #24
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	20000e9c 	.word	0x20000e9c
 800a458:	20000ea0 	.word	0x20000ea0

0800a45c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a462:	f000 f967 	bl	800a734 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a466:	4b15      	ldr	r3, [pc, #84]	; (800a4bc <prvCheckForValidListAndQueue+0x60>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d120      	bne.n	800a4b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a46e:	4814      	ldr	r0, [pc, #80]	; (800a4c0 <prvCheckForValidListAndQueue+0x64>)
 800a470:	f7fe f848 	bl	8008504 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a474:	4813      	ldr	r0, [pc, #76]	; (800a4c4 <prvCheckForValidListAndQueue+0x68>)
 800a476:	f7fe f845 	bl	8008504 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a47a:	4b13      	ldr	r3, [pc, #76]	; (800a4c8 <prvCheckForValidListAndQueue+0x6c>)
 800a47c:	4a10      	ldr	r2, [pc, #64]	; (800a4c0 <prvCheckForValidListAndQueue+0x64>)
 800a47e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a480:	4b12      	ldr	r3, [pc, #72]	; (800a4cc <prvCheckForValidListAndQueue+0x70>)
 800a482:	4a10      	ldr	r2, [pc, #64]	; (800a4c4 <prvCheckForValidListAndQueue+0x68>)
 800a484:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a486:	2300      	movs	r3, #0
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	4b11      	ldr	r3, [pc, #68]	; (800a4d0 <prvCheckForValidListAndQueue+0x74>)
 800a48c:	4a11      	ldr	r2, [pc, #68]	; (800a4d4 <prvCheckForValidListAndQueue+0x78>)
 800a48e:	2110      	movs	r1, #16
 800a490:	200a      	movs	r0, #10
 800a492:	f7fe f953 	bl	800873c <xQueueGenericCreateStatic>
 800a496:	4603      	mov	r3, r0
 800a498:	4a08      	ldr	r2, [pc, #32]	; (800a4bc <prvCheckForValidListAndQueue+0x60>)
 800a49a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a49c:	4b07      	ldr	r3, [pc, #28]	; (800a4bc <prvCheckForValidListAndQueue+0x60>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d005      	beq.n	800a4b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a4a4:	4b05      	ldr	r3, [pc, #20]	; (800a4bc <prvCheckForValidListAndQueue+0x60>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	490b      	ldr	r1, [pc, #44]	; (800a4d8 <prvCheckForValidListAndQueue+0x7c>)
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f7fe fd6c 	bl	8008f88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a4b0:	f000 f970 	bl	800a794 <vPortExitCritical>
}
 800a4b4:	bf00      	nop
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	20000ea4 	.word	0x20000ea4
 800a4c0:	20000e74 	.word	0x20000e74
 800a4c4:	20000e88 	.word	0x20000e88
 800a4c8:	20000e9c 	.word	0x20000e9c
 800a4cc:	20000ea0 	.word	0x20000ea0
 800a4d0:	20000f50 	.word	0x20000f50
 800a4d4:	20000eb0 	.word	0x20000eb0
 800a4d8:	0800b7e0 	.word	0x0800b7e0

0800a4dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	3b04      	subs	r3, #4
 800a4ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a4f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	3b04      	subs	r3, #4
 800a4fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	f023 0201 	bic.w	r2, r3, #1
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3b04      	subs	r3, #4
 800a50a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a50c:	4a0c      	ldr	r2, [pc, #48]	; (800a540 <pxPortInitialiseStack+0x64>)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	3b14      	subs	r3, #20
 800a516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	3b04      	subs	r3, #4
 800a522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f06f 0202 	mvn.w	r2, #2
 800a52a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	3b20      	subs	r3, #32
 800a530:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a532:	68fb      	ldr	r3, [r7, #12]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3714      	adds	r7, #20
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr
 800a540:	0800a545 	.word	0x0800a545

0800a544 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a54a:	2300      	movs	r3, #0
 800a54c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a54e:	4b12      	ldr	r3, [pc, #72]	; (800a598 <prvTaskExitError+0x54>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a556:	d00a      	beq.n	800a56e <prvTaskExitError+0x2a>
	__asm volatile
 800a558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55c:	f383 8811 	msr	BASEPRI, r3
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	f3bf 8f4f 	dsb	sy
 800a568:	60fb      	str	r3, [r7, #12]
}
 800a56a:	bf00      	nop
 800a56c:	e7fe      	b.n	800a56c <prvTaskExitError+0x28>
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	60bb      	str	r3, [r7, #8]
}
 800a580:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a582:	bf00      	nop
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d0fc      	beq.n	800a584 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a58a:	bf00      	nop
 800a58c:	bf00      	nop
 800a58e:	3714      	adds	r7, #20
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr
 800a598:	20000098 	.word	0x20000098
 800a59c:	00000000 	.word	0x00000000

0800a5a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a5a0:	4b07      	ldr	r3, [pc, #28]	; (800a5c0 <pxCurrentTCBConst2>)
 800a5a2:	6819      	ldr	r1, [r3, #0]
 800a5a4:	6808      	ldr	r0, [r1, #0]
 800a5a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5aa:	f380 8809 	msr	PSP, r0
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f04f 0000 	mov.w	r0, #0
 800a5b6:	f380 8811 	msr	BASEPRI, r0
 800a5ba:	4770      	bx	lr
 800a5bc:	f3af 8000 	nop.w

0800a5c0 <pxCurrentTCBConst2>:
 800a5c0:	20000974 	.word	0x20000974
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a5c4:	bf00      	nop
 800a5c6:	bf00      	nop

0800a5c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a5c8:	4808      	ldr	r0, [pc, #32]	; (800a5ec <prvPortStartFirstTask+0x24>)
 800a5ca:	6800      	ldr	r0, [r0, #0]
 800a5cc:	6800      	ldr	r0, [r0, #0]
 800a5ce:	f380 8808 	msr	MSP, r0
 800a5d2:	f04f 0000 	mov.w	r0, #0
 800a5d6:	f380 8814 	msr	CONTROL, r0
 800a5da:	b662      	cpsie	i
 800a5dc:	b661      	cpsie	f
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	f3bf 8f6f 	isb	sy
 800a5e6:	df00      	svc	0
 800a5e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a5ea:	bf00      	nop
 800a5ec:	e000ed08 	.word	0xe000ed08

0800a5f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b086      	sub	sp, #24
 800a5f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a5f6:	4b46      	ldr	r3, [pc, #280]	; (800a710 <xPortStartScheduler+0x120>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a46      	ldr	r2, [pc, #280]	; (800a714 <xPortStartScheduler+0x124>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d10a      	bne.n	800a616 <xPortStartScheduler+0x26>
	__asm volatile
 800a600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a604:	f383 8811 	msr	BASEPRI, r3
 800a608:	f3bf 8f6f 	isb	sy
 800a60c:	f3bf 8f4f 	dsb	sy
 800a610:	613b      	str	r3, [r7, #16]
}
 800a612:	bf00      	nop
 800a614:	e7fe      	b.n	800a614 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a616:	4b3e      	ldr	r3, [pc, #248]	; (800a710 <xPortStartScheduler+0x120>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a3f      	ldr	r2, [pc, #252]	; (800a718 <xPortStartScheduler+0x128>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d10a      	bne.n	800a636 <xPortStartScheduler+0x46>
	__asm volatile
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	60fb      	str	r3, [r7, #12]
}
 800a632:	bf00      	nop
 800a634:	e7fe      	b.n	800a634 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a636:	4b39      	ldr	r3, [pc, #228]	; (800a71c <xPortStartScheduler+0x12c>)
 800a638:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	22ff      	movs	r2, #255	; 0xff
 800a646:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a650:	78fb      	ldrb	r3, [r7, #3]
 800a652:	b2db      	uxtb	r3, r3
 800a654:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	4b31      	ldr	r3, [pc, #196]	; (800a720 <xPortStartScheduler+0x130>)
 800a65c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a65e:	4b31      	ldr	r3, [pc, #196]	; (800a724 <xPortStartScheduler+0x134>)
 800a660:	2207      	movs	r2, #7
 800a662:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a664:	e009      	b.n	800a67a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a666:	4b2f      	ldr	r3, [pc, #188]	; (800a724 <xPortStartScheduler+0x134>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	3b01      	subs	r3, #1
 800a66c:	4a2d      	ldr	r2, [pc, #180]	; (800a724 <xPortStartScheduler+0x134>)
 800a66e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a670:	78fb      	ldrb	r3, [r7, #3]
 800a672:	b2db      	uxtb	r3, r3
 800a674:	005b      	lsls	r3, r3, #1
 800a676:	b2db      	uxtb	r3, r3
 800a678:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a67a:	78fb      	ldrb	r3, [r7, #3]
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a682:	2b80      	cmp	r3, #128	; 0x80
 800a684:	d0ef      	beq.n	800a666 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a686:	4b27      	ldr	r3, [pc, #156]	; (800a724 <xPortStartScheduler+0x134>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f1c3 0307 	rsb	r3, r3, #7
 800a68e:	2b04      	cmp	r3, #4
 800a690:	d00a      	beq.n	800a6a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a696:	f383 8811 	msr	BASEPRI, r3
 800a69a:	f3bf 8f6f 	isb	sy
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	60bb      	str	r3, [r7, #8]
}
 800a6a4:	bf00      	nop
 800a6a6:	e7fe      	b.n	800a6a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a6a8:	4b1e      	ldr	r3, [pc, #120]	; (800a724 <xPortStartScheduler+0x134>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	021b      	lsls	r3, r3, #8
 800a6ae:	4a1d      	ldr	r2, [pc, #116]	; (800a724 <xPortStartScheduler+0x134>)
 800a6b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a6b2:	4b1c      	ldr	r3, [pc, #112]	; (800a724 <xPortStartScheduler+0x134>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a6ba:	4a1a      	ldr	r2, [pc, #104]	; (800a724 <xPortStartScheduler+0x134>)
 800a6bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a6c6:	4b18      	ldr	r3, [pc, #96]	; (800a728 <xPortStartScheduler+0x138>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a17      	ldr	r2, [pc, #92]	; (800a728 <xPortStartScheduler+0x138>)
 800a6cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a6d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a6d2:	4b15      	ldr	r3, [pc, #84]	; (800a728 <xPortStartScheduler+0x138>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a14      	ldr	r2, [pc, #80]	; (800a728 <xPortStartScheduler+0x138>)
 800a6d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a6dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a6de:	f000 f8dd 	bl	800a89c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a6e2:	4b12      	ldr	r3, [pc, #72]	; (800a72c <xPortStartScheduler+0x13c>)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a6e8:	f000 f8fc 	bl	800a8e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a6ec:	4b10      	ldr	r3, [pc, #64]	; (800a730 <xPortStartScheduler+0x140>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a0f      	ldr	r2, [pc, #60]	; (800a730 <xPortStartScheduler+0x140>)
 800a6f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a6f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a6f8:	f7ff ff66 	bl	800a5c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a6fc:	f7ff f854 	bl	80097a8 <vTaskSwitchContext>
	prvTaskExitError();
 800a700:	f7ff ff20 	bl	800a544 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3718      	adds	r7, #24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	e000ed00 	.word	0xe000ed00
 800a714:	410fc271 	.word	0x410fc271
 800a718:	410fc270 	.word	0x410fc270
 800a71c:	e000e400 	.word	0xe000e400
 800a720:	20000fa0 	.word	0x20000fa0
 800a724:	20000fa4 	.word	0x20000fa4
 800a728:	e000ed20 	.word	0xe000ed20
 800a72c:	20000098 	.word	0x20000098
 800a730:	e000ef34 	.word	0xe000ef34

0800a734 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
	__asm volatile
 800a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	607b      	str	r3, [r7, #4]
}
 800a74c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a74e:	4b0f      	ldr	r3, [pc, #60]	; (800a78c <vPortEnterCritical+0x58>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	3301      	adds	r3, #1
 800a754:	4a0d      	ldr	r2, [pc, #52]	; (800a78c <vPortEnterCritical+0x58>)
 800a756:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a758:	4b0c      	ldr	r3, [pc, #48]	; (800a78c <vPortEnterCritical+0x58>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d10f      	bne.n	800a780 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a760:	4b0b      	ldr	r3, [pc, #44]	; (800a790 <vPortEnterCritical+0x5c>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00a      	beq.n	800a780 <vPortEnterCritical+0x4c>
	__asm volatile
 800a76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76e:	f383 8811 	msr	BASEPRI, r3
 800a772:	f3bf 8f6f 	isb	sy
 800a776:	f3bf 8f4f 	dsb	sy
 800a77a:	603b      	str	r3, [r7, #0]
}
 800a77c:	bf00      	nop
 800a77e:	e7fe      	b.n	800a77e <vPortEnterCritical+0x4a>
	}
}
 800a780:	bf00      	nop
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr
 800a78c:	20000098 	.word	0x20000098
 800a790:	e000ed04 	.word	0xe000ed04

0800a794 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a79a:	4b12      	ldr	r3, [pc, #72]	; (800a7e4 <vPortExitCritical+0x50>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10a      	bne.n	800a7b8 <vPortExitCritical+0x24>
	__asm volatile
 800a7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a6:	f383 8811 	msr	BASEPRI, r3
 800a7aa:	f3bf 8f6f 	isb	sy
 800a7ae:	f3bf 8f4f 	dsb	sy
 800a7b2:	607b      	str	r3, [r7, #4]
}
 800a7b4:	bf00      	nop
 800a7b6:	e7fe      	b.n	800a7b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a7b8:	4b0a      	ldr	r3, [pc, #40]	; (800a7e4 <vPortExitCritical+0x50>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	3b01      	subs	r3, #1
 800a7be:	4a09      	ldr	r2, [pc, #36]	; (800a7e4 <vPortExitCritical+0x50>)
 800a7c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a7c2:	4b08      	ldr	r3, [pc, #32]	; (800a7e4 <vPortExitCritical+0x50>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d105      	bne.n	800a7d6 <vPortExitCritical+0x42>
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	f383 8811 	msr	BASEPRI, r3
}
 800a7d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a7d6:	bf00      	nop
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop
 800a7e4:	20000098 	.word	0x20000098
	...

0800a7f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a7f0:	f3ef 8009 	mrs	r0, PSP
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	4b15      	ldr	r3, [pc, #84]	; (800a850 <pxCurrentTCBConst>)
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	f01e 0f10 	tst.w	lr, #16
 800a800:	bf08      	it	eq
 800a802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80a:	6010      	str	r0, [r2, #0]
 800a80c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a810:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a814:	f380 8811 	msr	BASEPRI, r0
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f7fe ffc2 	bl	80097a8 <vTaskSwitchContext>
 800a824:	f04f 0000 	mov.w	r0, #0
 800a828:	f380 8811 	msr	BASEPRI, r0
 800a82c:	bc09      	pop	{r0, r3}
 800a82e:	6819      	ldr	r1, [r3, #0]
 800a830:	6808      	ldr	r0, [r1, #0]
 800a832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a836:	f01e 0f10 	tst.w	lr, #16
 800a83a:	bf08      	it	eq
 800a83c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a840:	f380 8809 	msr	PSP, r0
 800a844:	f3bf 8f6f 	isb	sy
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	f3af 8000 	nop.w

0800a850 <pxCurrentTCBConst>:
 800a850:	20000974 	.word	0x20000974
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a854:	bf00      	nop
 800a856:	bf00      	nop

0800a858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
	__asm volatile
 800a85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a862:	f383 8811 	msr	BASEPRI, r3
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	f3bf 8f4f 	dsb	sy
 800a86e:	607b      	str	r3, [r7, #4]
}
 800a870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a872:	f7fe fedf 	bl	8009634 <xTaskIncrementTick>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d003      	beq.n	800a884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a87c:	4b06      	ldr	r3, [pc, #24]	; (800a898 <xPortSysTickHandler+0x40>)
 800a87e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a882:	601a      	str	r2, [r3, #0]
 800a884:	2300      	movs	r3, #0
 800a886:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	f383 8811 	msr	BASEPRI, r3
}
 800a88e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a890:	bf00      	nop
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	e000ed04 	.word	0xe000ed04

0800a89c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a89c:	b480      	push	{r7}
 800a89e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a8a0:	4b0b      	ldr	r3, [pc, #44]	; (800a8d0 <vPortSetupTimerInterrupt+0x34>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a8a6:	4b0b      	ldr	r3, [pc, #44]	; (800a8d4 <vPortSetupTimerInterrupt+0x38>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8ac:	4b0a      	ldr	r3, [pc, #40]	; (800a8d8 <vPortSetupTimerInterrupt+0x3c>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a0a      	ldr	r2, [pc, #40]	; (800a8dc <vPortSetupTimerInterrupt+0x40>)
 800a8b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8b6:	099b      	lsrs	r3, r3, #6
 800a8b8:	4a09      	ldr	r2, [pc, #36]	; (800a8e0 <vPortSetupTimerInterrupt+0x44>)
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a8be:	4b04      	ldr	r3, [pc, #16]	; (800a8d0 <vPortSetupTimerInterrupt+0x34>)
 800a8c0:	2207      	movs	r2, #7
 800a8c2:	601a      	str	r2, [r3, #0]
}
 800a8c4:	bf00      	nop
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	e000e010 	.word	0xe000e010
 800a8d4:	e000e018 	.word	0xe000e018
 800a8d8:	20000000 	.word	0x20000000
 800a8dc:	10624dd3 	.word	0x10624dd3
 800a8e0:	e000e014 	.word	0xe000e014

0800a8e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a8e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a8f4 <vPortEnableVFP+0x10>
 800a8e8:	6801      	ldr	r1, [r0, #0]
 800a8ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a8ee:	6001      	str	r1, [r0, #0]
 800a8f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a8f2:	bf00      	nop
 800a8f4:	e000ed88 	.word	0xe000ed88

0800a8f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a8fe:	f3ef 8305 	mrs	r3, IPSR
 800a902:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2b0f      	cmp	r3, #15
 800a908:	d914      	bls.n	800a934 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a90a:	4a17      	ldr	r2, [pc, #92]	; (800a968 <vPortValidateInterruptPriority+0x70>)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	4413      	add	r3, r2
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a914:	4b15      	ldr	r3, [pc, #84]	; (800a96c <vPortValidateInterruptPriority+0x74>)
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	7afa      	ldrb	r2, [r7, #11]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d20a      	bcs.n	800a934 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	607b      	str	r3, [r7, #4]
}
 800a930:	bf00      	nop
 800a932:	e7fe      	b.n	800a932 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a934:	4b0e      	ldr	r3, [pc, #56]	; (800a970 <vPortValidateInterruptPriority+0x78>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a93c:	4b0d      	ldr	r3, [pc, #52]	; (800a974 <vPortValidateInterruptPriority+0x7c>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	429a      	cmp	r2, r3
 800a942:	d90a      	bls.n	800a95a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	603b      	str	r3, [r7, #0]
}
 800a956:	bf00      	nop
 800a958:	e7fe      	b.n	800a958 <vPortValidateInterruptPriority+0x60>
	}
 800a95a:	bf00      	nop
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	e000e3f0 	.word	0xe000e3f0
 800a96c:	20000fa0 	.word	0x20000fa0
 800a970:	e000ed0c 	.word	0xe000ed0c
 800a974:	20000fa4 	.word	0x20000fa4

0800a978 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08a      	sub	sp, #40	; 0x28
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a980:	2300      	movs	r3, #0
 800a982:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a984:	f7fe fd9a 	bl	80094bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a988:	4b5b      	ldr	r3, [pc, #364]	; (800aaf8 <pvPortMalloc+0x180>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d101      	bne.n	800a994 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a990:	f000 f920 	bl	800abd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a994:	4b59      	ldr	r3, [pc, #356]	; (800aafc <pvPortMalloc+0x184>)
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4013      	ands	r3, r2
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f040 8093 	bne.w	800aac8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d01d      	beq.n	800a9e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a9a8:	2208      	movs	r2, #8
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f003 0307 	and.w	r3, r3, #7
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d014      	beq.n	800a9e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f023 0307 	bic.w	r3, r3, #7
 800a9c0:	3308      	adds	r3, #8
 800a9c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f003 0307 	and.w	r3, r3, #7
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00a      	beq.n	800a9e4 <pvPortMalloc+0x6c>
	__asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	617b      	str	r3, [r7, #20]
}
 800a9e0:	bf00      	nop
 800a9e2:	e7fe      	b.n	800a9e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d06e      	beq.n	800aac8 <pvPortMalloc+0x150>
 800a9ea:	4b45      	ldr	r3, [pc, #276]	; (800ab00 <pvPortMalloc+0x188>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d869      	bhi.n	800aac8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a9f4:	4b43      	ldr	r3, [pc, #268]	; (800ab04 <pvPortMalloc+0x18c>)
 800a9f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a9f8:	4b42      	ldr	r3, [pc, #264]	; (800ab04 <pvPortMalloc+0x18c>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9fe:	e004      	b.n	800aa0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d903      	bls.n	800aa1c <pvPortMalloc+0xa4>
 800aa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1f1      	bne.n	800aa00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa1c:	4b36      	ldr	r3, [pc, #216]	; (800aaf8 <pvPortMalloc+0x180>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d050      	beq.n	800aac8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa26:	6a3b      	ldr	r3, [r7, #32]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2208      	movs	r2, #8
 800aa2c:	4413      	add	r3, r2
 800aa2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	6a3b      	ldr	r3, [r7, #32]
 800aa36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3a:	685a      	ldr	r2, [r3, #4]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	1ad2      	subs	r2, r2, r3
 800aa40:	2308      	movs	r3, #8
 800aa42:	005b      	lsls	r3, r3, #1
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d91f      	bls.n	800aa88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aa48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa50:	69bb      	ldr	r3, [r7, #24]
 800aa52:	f003 0307 	and.w	r3, r3, #7
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00a      	beq.n	800aa70 <pvPortMalloc+0xf8>
	__asm volatile
 800aa5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5e:	f383 8811 	msr	BASEPRI, r3
 800aa62:	f3bf 8f6f 	isb	sy
 800aa66:	f3bf 8f4f 	dsb	sy
 800aa6a:	613b      	str	r3, [r7, #16]
}
 800aa6c:	bf00      	nop
 800aa6e:	e7fe      	b.n	800aa6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa72:	685a      	ldr	r2, [r3, #4]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	1ad2      	subs	r2, r2, r3
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa82:	69b8      	ldr	r0, [r7, #24]
 800aa84:	f000 f908 	bl	800ac98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa88:	4b1d      	ldr	r3, [pc, #116]	; (800ab00 <pvPortMalloc+0x188>)
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	1ad3      	subs	r3, r2, r3
 800aa92:	4a1b      	ldr	r2, [pc, #108]	; (800ab00 <pvPortMalloc+0x188>)
 800aa94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa96:	4b1a      	ldr	r3, [pc, #104]	; (800ab00 <pvPortMalloc+0x188>)
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	4b1b      	ldr	r3, [pc, #108]	; (800ab08 <pvPortMalloc+0x190>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d203      	bcs.n	800aaaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aaa2:	4b17      	ldr	r3, [pc, #92]	; (800ab00 <pvPortMalloc+0x188>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a18      	ldr	r2, [pc, #96]	; (800ab08 <pvPortMalloc+0x190>)
 800aaa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	685a      	ldr	r2, [r3, #4]
 800aaae:	4b13      	ldr	r3, [pc, #76]	; (800aafc <pvPortMalloc+0x184>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	431a      	orrs	r2, r3
 800aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaba:	2200      	movs	r2, #0
 800aabc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aabe:	4b13      	ldr	r3, [pc, #76]	; (800ab0c <pvPortMalloc+0x194>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	3301      	adds	r3, #1
 800aac4:	4a11      	ldr	r2, [pc, #68]	; (800ab0c <pvPortMalloc+0x194>)
 800aac6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aac8:	f7fe fd06 	bl	80094d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	f003 0307 	and.w	r3, r3, #7
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00a      	beq.n	800aaec <pvPortMalloc+0x174>
	__asm volatile
 800aad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aada:	f383 8811 	msr	BASEPRI, r3
 800aade:	f3bf 8f6f 	isb	sy
 800aae2:	f3bf 8f4f 	dsb	sy
 800aae6:	60fb      	str	r3, [r7, #12]
}
 800aae8:	bf00      	nop
 800aaea:	e7fe      	b.n	800aaea <pvPortMalloc+0x172>
	return pvReturn;
 800aaec:	69fb      	ldr	r3, [r7, #28]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3728      	adds	r7, #40	; 0x28
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	20004bb0 	.word	0x20004bb0
 800aafc:	20004bc4 	.word	0x20004bc4
 800ab00:	20004bb4 	.word	0x20004bb4
 800ab04:	20004ba8 	.word	0x20004ba8
 800ab08:	20004bb8 	.word	0x20004bb8
 800ab0c:	20004bbc 	.word	0x20004bbc

0800ab10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d04d      	beq.n	800abbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab22:	2308      	movs	r3, #8
 800ab24:	425b      	negs	r3, r3
 800ab26:	697a      	ldr	r2, [r7, #20]
 800ab28:	4413      	add	r3, r2
 800ab2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	685a      	ldr	r2, [r3, #4]
 800ab34:	4b24      	ldr	r3, [pc, #144]	; (800abc8 <vPortFree+0xb8>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4013      	ands	r3, r2
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d10a      	bne.n	800ab54 <vPortFree+0x44>
	__asm volatile
 800ab3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab42:	f383 8811 	msr	BASEPRI, r3
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	60fb      	str	r3, [r7, #12]
}
 800ab50:	bf00      	nop
 800ab52:	e7fe      	b.n	800ab52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00a      	beq.n	800ab72 <vPortFree+0x62>
	__asm volatile
 800ab5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab60:	f383 8811 	msr	BASEPRI, r3
 800ab64:	f3bf 8f6f 	isb	sy
 800ab68:	f3bf 8f4f 	dsb	sy
 800ab6c:	60bb      	str	r3, [r7, #8]
}
 800ab6e:	bf00      	nop
 800ab70:	e7fe      	b.n	800ab70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	685a      	ldr	r2, [r3, #4]
 800ab76:	4b14      	ldr	r3, [pc, #80]	; (800abc8 <vPortFree+0xb8>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4013      	ands	r3, r2
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d01e      	beq.n	800abbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d11a      	bne.n	800abbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	4b0e      	ldr	r3, [pc, #56]	; (800abc8 <vPortFree+0xb8>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	43db      	mvns	r3, r3
 800ab92:	401a      	ands	r2, r3
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab98:	f7fe fc90 	bl	80094bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	685a      	ldr	r2, [r3, #4]
 800aba0:	4b0a      	ldr	r3, [pc, #40]	; (800abcc <vPortFree+0xbc>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4413      	add	r3, r2
 800aba6:	4a09      	ldr	r2, [pc, #36]	; (800abcc <vPortFree+0xbc>)
 800aba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800abaa:	6938      	ldr	r0, [r7, #16]
 800abac:	f000 f874 	bl	800ac98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800abb0:	4b07      	ldr	r3, [pc, #28]	; (800abd0 <vPortFree+0xc0>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	3301      	adds	r3, #1
 800abb6:	4a06      	ldr	r2, [pc, #24]	; (800abd0 <vPortFree+0xc0>)
 800abb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800abba:	f7fe fc8d 	bl	80094d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800abbe:	bf00      	nop
 800abc0:	3718      	adds	r7, #24
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	20004bc4 	.word	0x20004bc4
 800abcc:	20004bb4 	.word	0x20004bb4
 800abd0:	20004bc0 	.word	0x20004bc0

0800abd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800abda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800abde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800abe0:	4b27      	ldr	r3, [pc, #156]	; (800ac80 <prvHeapInit+0xac>)
 800abe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f003 0307 	and.w	r3, r3, #7
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00c      	beq.n	800ac08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	3307      	adds	r3, #7
 800abf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f023 0307 	bic.w	r3, r3, #7
 800abfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	1ad3      	subs	r3, r2, r3
 800ac02:	4a1f      	ldr	r2, [pc, #124]	; (800ac80 <prvHeapInit+0xac>)
 800ac04:	4413      	add	r3, r2
 800ac06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac0c:	4a1d      	ldr	r2, [pc, #116]	; (800ac84 <prvHeapInit+0xb0>)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac12:	4b1c      	ldr	r3, [pc, #112]	; (800ac84 <prvHeapInit+0xb0>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac20:	2208      	movs	r2, #8
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	1a9b      	subs	r3, r3, r2
 800ac26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f023 0307 	bic.w	r3, r3, #7
 800ac2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	4a15      	ldr	r2, [pc, #84]	; (800ac88 <prvHeapInit+0xb4>)
 800ac34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac36:	4b14      	ldr	r3, [pc, #80]	; (800ac88 <prvHeapInit+0xb4>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac3e:	4b12      	ldr	r3, [pc, #72]	; (800ac88 <prvHeapInit+0xb4>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2200      	movs	r2, #0
 800ac44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	1ad2      	subs	r2, r2, r3
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ac54:	4b0c      	ldr	r3, [pc, #48]	; (800ac88 <prvHeapInit+0xb4>)
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	4a0a      	ldr	r2, [pc, #40]	; (800ac8c <prvHeapInit+0xb8>)
 800ac62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	4a09      	ldr	r2, [pc, #36]	; (800ac90 <prvHeapInit+0xbc>)
 800ac6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ac6c:	4b09      	ldr	r3, [pc, #36]	; (800ac94 <prvHeapInit+0xc0>)
 800ac6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ac72:	601a      	str	r2, [r3, #0]
}
 800ac74:	bf00      	nop
 800ac76:	3714      	adds	r7, #20
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	20000fa8 	.word	0x20000fa8
 800ac84:	20004ba8 	.word	0x20004ba8
 800ac88:	20004bb0 	.word	0x20004bb0
 800ac8c:	20004bb8 	.word	0x20004bb8
 800ac90:	20004bb4 	.word	0x20004bb4
 800ac94:	20004bc4 	.word	0x20004bc4

0800ac98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800aca0:	4b28      	ldr	r3, [pc, #160]	; (800ad44 <prvInsertBlockIntoFreeList+0xac>)
 800aca2:	60fb      	str	r3, [r7, #12]
 800aca4:	e002      	b.n	800acac <prvInsertBlockIntoFreeList+0x14>
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	60fb      	str	r3, [r7, #12]
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d8f7      	bhi.n	800aca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	68ba      	ldr	r2, [r7, #8]
 800acc0:	4413      	add	r3, r2
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d108      	bne.n	800acda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	685a      	ldr	r2, [r3, #4]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	441a      	add	r2, r3
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	68ba      	ldr	r2, [r7, #8]
 800ace4:	441a      	add	r2, r3
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	429a      	cmp	r2, r3
 800acec:	d118      	bne.n	800ad20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	4b15      	ldr	r3, [pc, #84]	; (800ad48 <prvInsertBlockIntoFreeList+0xb0>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d00d      	beq.n	800ad16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	685a      	ldr	r2, [r3, #4]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	441a      	add	r2, r3
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	681a      	ldr	r2, [r3, #0]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	e008      	b.n	800ad28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad16:	4b0c      	ldr	r3, [pc, #48]	; (800ad48 <prvInsertBlockIntoFreeList+0xb0>)
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	601a      	str	r2, [r3, #0]
 800ad1e:	e003      	b.n	800ad28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad28:	68fa      	ldr	r2, [r7, #12]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d002      	beq.n	800ad36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad36:	bf00      	nop
 800ad38:	3714      	adds	r7, #20
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	20004ba8 	.word	0x20004ba8
 800ad48:	20004bb0 	.word	0x20004bb0

0800ad4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ad50:	2200      	movs	r2, #0
 800ad52:	4912      	ldr	r1, [pc, #72]	; (800ad9c <MX_USB_DEVICE_Init+0x50>)
 800ad54:	4812      	ldr	r0, [pc, #72]	; (800ada0 <MX_USB_DEVICE_Init+0x54>)
 800ad56:	f7fb ff73 	bl	8006c40 <USBD_Init>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d001      	beq.n	800ad64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ad60:	f7f5 fd02 	bl	8000768 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ad64:	490f      	ldr	r1, [pc, #60]	; (800ada4 <MX_USB_DEVICE_Init+0x58>)
 800ad66:	480e      	ldr	r0, [pc, #56]	; (800ada0 <MX_USB_DEVICE_Init+0x54>)
 800ad68:	f7fb ff9a 	bl	8006ca0 <USBD_RegisterClass>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d001      	beq.n	800ad76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ad72:	f7f5 fcf9 	bl	8000768 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ad76:	490c      	ldr	r1, [pc, #48]	; (800ada8 <MX_USB_DEVICE_Init+0x5c>)
 800ad78:	4809      	ldr	r0, [pc, #36]	; (800ada0 <MX_USB_DEVICE_Init+0x54>)
 800ad7a:	f7fb fed1 	bl	8006b20 <USBD_CDC_RegisterInterface>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d001      	beq.n	800ad88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ad84:	f7f5 fcf0 	bl	8000768 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ad88:	4805      	ldr	r0, [pc, #20]	; (800ada0 <MX_USB_DEVICE_Init+0x54>)
 800ad8a:	f7fb ffbf 	bl	8006d0c <USBD_Start>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ad94:	f7f5 fce8 	bl	8000768 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ad98:	bf00      	nop
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	200000b0 	.word	0x200000b0
 800ada0:	20004bc8 	.word	0x20004bc8
 800ada4:	20000018 	.word	0x20000018
 800ada8:	2000009c 	.word	0x2000009c

0800adac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800adb0:	2200      	movs	r2, #0
 800adb2:	4905      	ldr	r1, [pc, #20]	; (800adc8 <CDC_Init_FS+0x1c>)
 800adb4:	4805      	ldr	r0, [pc, #20]	; (800adcc <CDC_Init_FS+0x20>)
 800adb6:	f7fb fecd 	bl	8006b54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800adba:	4905      	ldr	r1, [pc, #20]	; (800add0 <CDC_Init_FS+0x24>)
 800adbc:	4803      	ldr	r0, [pc, #12]	; (800adcc <CDC_Init_FS+0x20>)
 800adbe:	f7fb feeb 	bl	8006b98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800adc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	200056a4 	.word	0x200056a4
 800adcc:	20004bc8 	.word	0x20004bc8
 800add0:	20004ea4 	.word	0x20004ea4

0800add4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800add4:	b480      	push	{r7}
 800add6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800add8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800adda:	4618      	mov	r0, r3
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	4603      	mov	r3, r0
 800adec:	6039      	str	r1, [r7, #0]
 800adee:	71fb      	strb	r3, [r7, #7]
 800adf0:	4613      	mov	r3, r2
 800adf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800adf4:	79fb      	ldrb	r3, [r7, #7]
 800adf6:	2b23      	cmp	r3, #35	; 0x23
 800adf8:	d84a      	bhi.n	800ae90 <CDC_Control_FS+0xac>
 800adfa:	a201      	add	r2, pc, #4	; (adr r2, 800ae00 <CDC_Control_FS+0x1c>)
 800adfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae00:	0800ae91 	.word	0x0800ae91
 800ae04:	0800ae91 	.word	0x0800ae91
 800ae08:	0800ae91 	.word	0x0800ae91
 800ae0c:	0800ae91 	.word	0x0800ae91
 800ae10:	0800ae91 	.word	0x0800ae91
 800ae14:	0800ae91 	.word	0x0800ae91
 800ae18:	0800ae91 	.word	0x0800ae91
 800ae1c:	0800ae91 	.word	0x0800ae91
 800ae20:	0800ae91 	.word	0x0800ae91
 800ae24:	0800ae91 	.word	0x0800ae91
 800ae28:	0800ae91 	.word	0x0800ae91
 800ae2c:	0800ae91 	.word	0x0800ae91
 800ae30:	0800ae91 	.word	0x0800ae91
 800ae34:	0800ae91 	.word	0x0800ae91
 800ae38:	0800ae91 	.word	0x0800ae91
 800ae3c:	0800ae91 	.word	0x0800ae91
 800ae40:	0800ae91 	.word	0x0800ae91
 800ae44:	0800ae91 	.word	0x0800ae91
 800ae48:	0800ae91 	.word	0x0800ae91
 800ae4c:	0800ae91 	.word	0x0800ae91
 800ae50:	0800ae91 	.word	0x0800ae91
 800ae54:	0800ae91 	.word	0x0800ae91
 800ae58:	0800ae91 	.word	0x0800ae91
 800ae5c:	0800ae91 	.word	0x0800ae91
 800ae60:	0800ae91 	.word	0x0800ae91
 800ae64:	0800ae91 	.word	0x0800ae91
 800ae68:	0800ae91 	.word	0x0800ae91
 800ae6c:	0800ae91 	.word	0x0800ae91
 800ae70:	0800ae91 	.word	0x0800ae91
 800ae74:	0800ae91 	.word	0x0800ae91
 800ae78:	0800ae91 	.word	0x0800ae91
 800ae7c:	0800ae91 	.word	0x0800ae91
 800ae80:	0800ae91 	.word	0x0800ae91
 800ae84:	0800ae91 	.word	0x0800ae91
 800ae88:	0800ae91 	.word	0x0800ae91
 800ae8c:	0800ae91 	.word	0x0800ae91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ae90:	bf00      	nop
  }

  return (USBD_OK);
 800ae92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aeaa:	6879      	ldr	r1, [r7, #4]
 800aeac:	4805      	ldr	r0, [pc, #20]	; (800aec4 <CDC_Receive_FS+0x24>)
 800aeae:	f7fb fe73 	bl	8006b98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aeb2:	4804      	ldr	r0, [pc, #16]	; (800aec4 <CDC_Receive_FS+0x24>)
 800aeb4:	f7fb fe8e 	bl	8006bd4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aeb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	20004bc8 	.word	0x20004bc8

0800aec8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b087      	sub	sp, #28
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	4613      	mov	r3, r2
 800aed4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aeda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	371c      	adds	r7, #28
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
	...

0800aeec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	4603      	mov	r3, r0
 800aef4:	6039      	str	r1, [r7, #0]
 800aef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	2212      	movs	r2, #18
 800aefc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aefe:	4b03      	ldr	r3, [pc, #12]	; (800af0c <USBD_FS_DeviceDescriptor+0x20>)
}
 800af00:	4618      	mov	r0, r3
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr
 800af0c:	200000cc 	.word	0x200000cc

0800af10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af10:	b480      	push	{r7}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
 800af16:	4603      	mov	r3, r0
 800af18:	6039      	str	r1, [r7, #0]
 800af1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	2204      	movs	r2, #4
 800af20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800af22:	4b03      	ldr	r3, [pc, #12]	; (800af30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800af24:	4618      	mov	r0, r3
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr
 800af30:	200000e0 	.word	0x200000e0

0800af34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	4603      	mov	r3, r0
 800af3c:	6039      	str	r1, [r7, #0]
 800af3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af40:	79fb      	ldrb	r3, [r7, #7]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d105      	bne.n	800af52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	4907      	ldr	r1, [pc, #28]	; (800af68 <USBD_FS_ProductStrDescriptor+0x34>)
 800af4a:	4808      	ldr	r0, [pc, #32]	; (800af6c <USBD_FS_ProductStrDescriptor+0x38>)
 800af4c:	f7fd f88a 	bl	8008064 <USBD_GetString>
 800af50:	e004      	b.n	800af5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	4904      	ldr	r1, [pc, #16]	; (800af68 <USBD_FS_ProductStrDescriptor+0x34>)
 800af56:	4805      	ldr	r0, [pc, #20]	; (800af6c <USBD_FS_ProductStrDescriptor+0x38>)
 800af58:	f7fd f884 	bl	8008064 <USBD_GetString>
  }
  return USBD_StrDesc;
 800af5c:	4b02      	ldr	r3, [pc, #8]	; (800af68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	20005ea4 	.word	0x20005ea4
 800af6c:	0800b7e8 	.word	0x0800b7e8

0800af70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	4603      	mov	r3, r0
 800af78:	6039      	str	r1, [r7, #0]
 800af7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800af7c:	683a      	ldr	r2, [r7, #0]
 800af7e:	4904      	ldr	r1, [pc, #16]	; (800af90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800af80:	4804      	ldr	r0, [pc, #16]	; (800af94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800af82:	f7fd f86f 	bl	8008064 <USBD_GetString>
  return USBD_StrDesc;
 800af86:	4b02      	ldr	r3, [pc, #8]	; (800af90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	20005ea4 	.word	0x20005ea4
 800af94:	0800b7f4 	.word	0x0800b7f4

0800af98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	4603      	mov	r3, r0
 800afa0:	6039      	str	r1, [r7, #0]
 800afa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	221a      	movs	r2, #26
 800afa8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800afaa:	f000 f843 	bl	800b034 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800afae:	4b02      	ldr	r3, [pc, #8]	; (800afb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	200000e4 	.word	0x200000e4

0800afbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	4603      	mov	r3, r0
 800afc4:	6039      	str	r1, [r7, #0]
 800afc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800afc8:	79fb      	ldrb	r3, [r7, #7]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d105      	bne.n	800afda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afce:	683a      	ldr	r2, [r7, #0]
 800afd0:	4907      	ldr	r1, [pc, #28]	; (800aff0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800afd2:	4808      	ldr	r0, [pc, #32]	; (800aff4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800afd4:	f7fd f846 	bl	8008064 <USBD_GetString>
 800afd8:	e004      	b.n	800afe4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	4904      	ldr	r1, [pc, #16]	; (800aff0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800afde:	4805      	ldr	r0, [pc, #20]	; (800aff4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800afe0:	f7fd f840 	bl	8008064 <USBD_GetString>
  }
  return USBD_StrDesc;
 800afe4:	4b02      	ldr	r3, [pc, #8]	; (800aff0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	20005ea4 	.word	0x20005ea4
 800aff4:	0800b7fc 	.word	0x0800b7fc

0800aff8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	4603      	mov	r3, r0
 800b000:	6039      	str	r1, [r7, #0]
 800b002:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b004:	79fb      	ldrb	r3, [r7, #7]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d105      	bne.n	800b016 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b00a:	683a      	ldr	r2, [r7, #0]
 800b00c:	4907      	ldr	r1, [pc, #28]	; (800b02c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b00e:	4808      	ldr	r0, [pc, #32]	; (800b030 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b010:	f7fd f828 	bl	8008064 <USBD_GetString>
 800b014:	e004      	b.n	800b020 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	4904      	ldr	r1, [pc, #16]	; (800b02c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b01a:	4805      	ldr	r0, [pc, #20]	; (800b030 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b01c:	f7fd f822 	bl	8008064 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b020:	4b02      	ldr	r3, [pc, #8]	; (800b02c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b022:	4618      	mov	r0, r3
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	20005ea4 	.word	0x20005ea4
 800b030:	0800b808 	.word	0x0800b808

0800b034 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b03a:	4b0f      	ldr	r3, [pc, #60]	; (800b078 <Get_SerialNum+0x44>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b040:	4b0e      	ldr	r3, [pc, #56]	; (800b07c <Get_SerialNum+0x48>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b046:	4b0e      	ldr	r3, [pc, #56]	; (800b080 <Get_SerialNum+0x4c>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4413      	add	r3, r2
 800b052:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d009      	beq.n	800b06e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b05a:	2208      	movs	r2, #8
 800b05c:	4909      	ldr	r1, [pc, #36]	; (800b084 <Get_SerialNum+0x50>)
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	f000 f814 	bl	800b08c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b064:	2204      	movs	r2, #4
 800b066:	4908      	ldr	r1, [pc, #32]	; (800b088 <Get_SerialNum+0x54>)
 800b068:	68b8      	ldr	r0, [r7, #8]
 800b06a:	f000 f80f 	bl	800b08c <IntToUnicode>
  }
}
 800b06e:	bf00      	nop
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	1fff7a10 	.word	0x1fff7a10
 800b07c:	1fff7a14 	.word	0x1fff7a14
 800b080:	1fff7a18 	.word	0x1fff7a18
 800b084:	200000e6 	.word	0x200000e6
 800b088:	200000f6 	.word	0x200000f6

0800b08c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b087      	sub	sp, #28
 800b090:	af00      	add	r7, sp, #0
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	4613      	mov	r3, r2
 800b098:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b09a:	2300      	movs	r3, #0
 800b09c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b09e:	2300      	movs	r3, #0
 800b0a0:	75fb      	strb	r3, [r7, #23]
 800b0a2:	e027      	b.n	800b0f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	0f1b      	lsrs	r3, r3, #28
 800b0a8:	2b09      	cmp	r3, #9
 800b0aa:	d80b      	bhi.n	800b0c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	0f1b      	lsrs	r3, r3, #28
 800b0b0:	b2da      	uxtb	r2, r3
 800b0b2:	7dfb      	ldrb	r3, [r7, #23]
 800b0b4:	005b      	lsls	r3, r3, #1
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	440b      	add	r3, r1
 800b0bc:	3230      	adds	r2, #48	; 0x30
 800b0be:	b2d2      	uxtb	r2, r2
 800b0c0:	701a      	strb	r2, [r3, #0]
 800b0c2:	e00a      	b.n	800b0da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	0f1b      	lsrs	r3, r3, #28
 800b0c8:	b2da      	uxtb	r2, r3
 800b0ca:	7dfb      	ldrb	r3, [r7, #23]
 800b0cc:	005b      	lsls	r3, r3, #1
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	440b      	add	r3, r1
 800b0d4:	3237      	adds	r2, #55	; 0x37
 800b0d6:	b2d2      	uxtb	r2, r2
 800b0d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	011b      	lsls	r3, r3, #4
 800b0de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b0e0:	7dfb      	ldrb	r3, [r7, #23]
 800b0e2:	005b      	lsls	r3, r3, #1
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	68ba      	ldr	r2, [r7, #8]
 800b0e8:	4413      	add	r3, r2
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b0ee:	7dfb      	ldrb	r3, [r7, #23]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	75fb      	strb	r3, [r7, #23]
 800b0f4:	7dfa      	ldrb	r2, [r7, #23]
 800b0f6:	79fb      	ldrb	r3, [r7, #7]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d3d3      	bcc.n	800b0a4 <IntToUnicode+0x18>
  }
}
 800b0fc:	bf00      	nop
 800b0fe:	bf00      	nop
 800b100:	371c      	adds	r7, #28
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
	...

0800b10c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b08a      	sub	sp, #40	; 0x28
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b114:	f107 0314 	add.w	r3, r7, #20
 800b118:	2200      	movs	r2, #0
 800b11a:	601a      	str	r2, [r3, #0]
 800b11c:	605a      	str	r2, [r3, #4]
 800b11e:	609a      	str	r2, [r3, #8]
 800b120:	60da      	str	r2, [r3, #12]
 800b122:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b12c:	d13a      	bne.n	800b1a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b12e:	2300      	movs	r3, #0
 800b130:	613b      	str	r3, [r7, #16]
 800b132:	4b1e      	ldr	r3, [pc, #120]	; (800b1ac <HAL_PCD_MspInit+0xa0>)
 800b134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b136:	4a1d      	ldr	r2, [pc, #116]	; (800b1ac <HAL_PCD_MspInit+0xa0>)
 800b138:	f043 0301 	orr.w	r3, r3, #1
 800b13c:	6313      	str	r3, [r2, #48]	; 0x30
 800b13e:	4b1b      	ldr	r3, [pc, #108]	; (800b1ac <HAL_PCD_MspInit+0xa0>)
 800b140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b142:	f003 0301 	and.w	r3, r3, #1
 800b146:	613b      	str	r3, [r7, #16]
 800b148:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b14a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b14e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b150:	2302      	movs	r3, #2
 800b152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b154:	2300      	movs	r3, #0
 800b156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b158:	2303      	movs	r3, #3
 800b15a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b15c:	230a      	movs	r3, #10
 800b15e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b160:	f107 0314 	add.w	r3, r7, #20
 800b164:	4619      	mov	r1, r3
 800b166:	4812      	ldr	r0, [pc, #72]	; (800b1b0 <HAL_PCD_MspInit+0xa4>)
 800b168:	f7f6 f9b4 	bl	80014d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b16c:	4b0f      	ldr	r3, [pc, #60]	; (800b1ac <HAL_PCD_MspInit+0xa0>)
 800b16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b170:	4a0e      	ldr	r2, [pc, #56]	; (800b1ac <HAL_PCD_MspInit+0xa0>)
 800b172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b176:	6353      	str	r3, [r2, #52]	; 0x34
 800b178:	2300      	movs	r3, #0
 800b17a:	60fb      	str	r3, [r7, #12]
 800b17c:	4b0b      	ldr	r3, [pc, #44]	; (800b1ac <HAL_PCD_MspInit+0xa0>)
 800b17e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b180:	4a0a      	ldr	r2, [pc, #40]	; (800b1ac <HAL_PCD_MspInit+0xa0>)
 800b182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b186:	6453      	str	r3, [r2, #68]	; 0x44
 800b188:	4b08      	ldr	r3, [pc, #32]	; (800b1ac <HAL_PCD_MspInit+0xa0>)
 800b18a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b18c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b194:	2200      	movs	r2, #0
 800b196:	2105      	movs	r1, #5
 800b198:	2043      	movs	r0, #67	; 0x43
 800b19a:	f7f5 fdf5 	bl	8000d88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b19e:	2043      	movs	r0, #67	; 0x43
 800b1a0:	f7f5 fe0e 	bl	8000dc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b1a4:	bf00      	nop
 800b1a6:	3728      	adds	r7, #40	; 0x28
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}
 800b1ac:	40023800 	.word	0x40023800
 800b1b0:	40020000 	.word	0x40020000

0800b1b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	4610      	mov	r0, r2
 800b1cc:	f7fb fdeb 	bl	8006da6 <USBD_LL_SetupStage>
}
 800b1d0:	bf00      	nop
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b1ea:	78fa      	ldrb	r2, [r7, #3]
 800b1ec:	6879      	ldr	r1, [r7, #4]
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	00db      	lsls	r3, r3, #3
 800b1f2:	4413      	add	r3, r2
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	440b      	add	r3, r1
 800b1f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	78fb      	ldrb	r3, [r7, #3]
 800b200:	4619      	mov	r1, r3
 800b202:	f7fb fe25 	bl	8006e50 <USBD_LL_DataOutStage>
}
 800b206:	bf00      	nop
 800b208:	3708      	adds	r7, #8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}

0800b20e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b082      	sub	sp, #8
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
 800b216:	460b      	mov	r3, r1
 800b218:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b220:	78fa      	ldrb	r2, [r7, #3]
 800b222:	6879      	ldr	r1, [r7, #4]
 800b224:	4613      	mov	r3, r2
 800b226:	00db      	lsls	r3, r3, #3
 800b228:	4413      	add	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	440b      	add	r3, r1
 800b22e:	334c      	adds	r3, #76	; 0x4c
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	78fb      	ldrb	r3, [r7, #3]
 800b234:	4619      	mov	r1, r3
 800b236:	f7fb febe 	bl	8006fb6 <USBD_LL_DataInStage>
}
 800b23a:	bf00      	nop
 800b23c:	3708      	adds	r7, #8
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b082      	sub	sp, #8
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b250:	4618      	mov	r0, r3
 800b252:	f7fb fff2 	bl	800723a <USBD_LL_SOF>
}
 800b256:	bf00      	nop
 800b258:	3708      	adds	r7, #8
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b084      	sub	sp, #16
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b266:	2301      	movs	r3, #1
 800b268:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d102      	bne.n	800b278 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b272:	2300      	movs	r3, #0
 800b274:	73fb      	strb	r3, [r7, #15]
 800b276:	e008      	b.n	800b28a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	68db      	ldr	r3, [r3, #12]
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d102      	bne.n	800b286 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b280:	2301      	movs	r3, #1
 800b282:	73fb      	strb	r3, [r7, #15]
 800b284:	e001      	b.n	800b28a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b286:	f7f5 fa6f 	bl	8000768 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b290:	7bfa      	ldrb	r2, [r7, #15]
 800b292:	4611      	mov	r1, r2
 800b294:	4618      	mov	r0, r3
 800b296:	f7fb ff92 	bl	80071be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7fb ff3a 	bl	800711a <USBD_LL_Reset>
}
 800b2a6:	bf00      	nop
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}
	...

0800b2b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7fb ff8d 	bl	80071de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	687a      	ldr	r2, [r7, #4]
 800b2d0:	6812      	ldr	r2, [r2, #0]
 800b2d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b2d6:	f043 0301 	orr.w	r3, r3, #1
 800b2da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6a1b      	ldr	r3, [r3, #32]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d005      	beq.n	800b2f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b2e4:	4b04      	ldr	r3, [pc, #16]	; (800b2f8 <HAL_PCD_SuspendCallback+0x48>)
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	4a03      	ldr	r2, [pc, #12]	; (800b2f8 <HAL_PCD_SuspendCallback+0x48>)
 800b2ea:	f043 0306 	orr.w	r3, r3, #6
 800b2ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b2f0:	bf00      	nop
 800b2f2:	3708      	adds	r7, #8
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	e000ed00 	.word	0xe000ed00

0800b2fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fb ff7d 	bl	800720a <USBD_LL_Resume>
}
 800b310:	bf00      	nop
 800b312:	3708      	adds	r7, #8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	460b      	mov	r3, r1
 800b322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b32a:	78fa      	ldrb	r2, [r7, #3]
 800b32c:	4611      	mov	r1, r2
 800b32e:	4618      	mov	r0, r3
 800b330:	f7fb ffd5 	bl	80072de <USBD_LL_IsoOUTIncomplete>
}
 800b334:	bf00      	nop
 800b336:	3708      	adds	r7, #8
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	460b      	mov	r3, r1
 800b346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b34e:	78fa      	ldrb	r2, [r7, #3]
 800b350:	4611      	mov	r1, r2
 800b352:	4618      	mov	r0, r3
 800b354:	f7fb ff91 	bl	800727a <USBD_LL_IsoINIncomplete>
}
 800b358:	bf00      	nop
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b36e:	4618      	mov	r0, r3
 800b370:	f7fb ffe7 	bl	8007342 <USBD_LL_DevConnected>
}
 800b374:	bf00      	nop
 800b376:	3708      	adds	r7, #8
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7fb ffe4 	bl	8007358 <USBD_LL_DevDisconnected>
}
 800b390:	bf00      	nop
 800b392:	3708      	adds	r7, #8
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}

0800b398 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d13c      	bne.n	800b422 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b3a8:	4a20      	ldr	r2, [pc, #128]	; (800b42c <USBD_LL_Init+0x94>)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a1e      	ldr	r2, [pc, #120]	; (800b42c <USBD_LL_Init+0x94>)
 800b3b4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b3b8:	4b1c      	ldr	r3, [pc, #112]	; (800b42c <USBD_LL_Init+0x94>)
 800b3ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b3be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b3c0:	4b1a      	ldr	r3, [pc, #104]	; (800b42c <USBD_LL_Init+0x94>)
 800b3c2:	2204      	movs	r2, #4
 800b3c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b3c6:	4b19      	ldr	r3, [pc, #100]	; (800b42c <USBD_LL_Init+0x94>)
 800b3c8:	2202      	movs	r2, #2
 800b3ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b3cc:	4b17      	ldr	r3, [pc, #92]	; (800b42c <USBD_LL_Init+0x94>)
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b3d2:	4b16      	ldr	r3, [pc, #88]	; (800b42c <USBD_LL_Init+0x94>)
 800b3d4:	2202      	movs	r2, #2
 800b3d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b3d8:	4b14      	ldr	r3, [pc, #80]	; (800b42c <USBD_LL_Init+0x94>)
 800b3da:	2200      	movs	r2, #0
 800b3dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b3de:	4b13      	ldr	r3, [pc, #76]	; (800b42c <USBD_LL_Init+0x94>)
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b3e4:	4b11      	ldr	r3, [pc, #68]	; (800b42c <USBD_LL_Init+0x94>)
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b3ea:	4b10      	ldr	r3, [pc, #64]	; (800b42c <USBD_LL_Init+0x94>)
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b3f0:	4b0e      	ldr	r3, [pc, #56]	; (800b42c <USBD_LL_Init+0x94>)
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b3f6:	480d      	ldr	r0, [pc, #52]	; (800b42c <USBD_LL_Init+0x94>)
 800b3f8:	f7f6 fa3b 	bl	8001872 <HAL_PCD_Init>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d001      	beq.n	800b406 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b402:	f7f5 f9b1 	bl	8000768 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b406:	2180      	movs	r1, #128	; 0x80
 800b408:	4808      	ldr	r0, [pc, #32]	; (800b42c <USBD_LL_Init+0x94>)
 800b40a:	f7f7 fc92 	bl	8002d32 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b40e:	2240      	movs	r2, #64	; 0x40
 800b410:	2100      	movs	r1, #0
 800b412:	4806      	ldr	r0, [pc, #24]	; (800b42c <USBD_LL_Init+0x94>)
 800b414:	f7f7 fc46 	bl	8002ca4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b418:	2280      	movs	r2, #128	; 0x80
 800b41a:	2101      	movs	r1, #1
 800b41c:	4803      	ldr	r0, [pc, #12]	; (800b42c <USBD_LL_Init+0x94>)
 800b41e:	f7f7 fc41 	bl	8002ca4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b422:	2300      	movs	r3, #0
}
 800b424:	4618      	mov	r0, r3
 800b426:	3708      	adds	r7, #8
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	200060a4 	.word	0x200060a4

0800b430 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b438:	2300      	movs	r3, #0
 800b43a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b43c:	2300      	movs	r3, #0
 800b43e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b446:	4618      	mov	r0, r3
 800b448:	f7f6 fb30 	bl	8001aac <HAL_PCD_Start>
 800b44c:	4603      	mov	r3, r0
 800b44e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b450:	7bfb      	ldrb	r3, [r7, #15]
 800b452:	4618      	mov	r0, r3
 800b454:	f000 f942 	bl	800b6dc <USBD_Get_USB_Status>
 800b458:	4603      	mov	r3, r0
 800b45a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b45c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}

0800b466 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b466:	b580      	push	{r7, lr}
 800b468:	b084      	sub	sp, #16
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
 800b46e:	4608      	mov	r0, r1
 800b470:	4611      	mov	r1, r2
 800b472:	461a      	mov	r2, r3
 800b474:	4603      	mov	r3, r0
 800b476:	70fb      	strb	r3, [r7, #3]
 800b478:	460b      	mov	r3, r1
 800b47a:	70bb      	strb	r3, [r7, #2]
 800b47c:	4613      	mov	r3, r2
 800b47e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b480:	2300      	movs	r3, #0
 800b482:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b484:	2300      	movs	r3, #0
 800b486:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b48e:	78bb      	ldrb	r3, [r7, #2]
 800b490:	883a      	ldrh	r2, [r7, #0]
 800b492:	78f9      	ldrb	r1, [r7, #3]
 800b494:	f7f7 f801 	bl	800249a <HAL_PCD_EP_Open>
 800b498:	4603      	mov	r3, r0
 800b49a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f000 f91c 	bl	800b6dc <USBD_Get_USB_Status>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b084      	sub	sp, #16
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b4cc:	78fa      	ldrb	r2, [r7, #3]
 800b4ce:	4611      	mov	r1, r2
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7f7 f84a 	bl	800256a <HAL_PCD_EP_Close>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f000 f8fd 	bl	800b6dc <USBD_Get_USB_Status>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b500:	2300      	movs	r3, #0
 800b502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b50a:	78fa      	ldrb	r2, [r7, #3]
 800b50c:	4611      	mov	r1, r2
 800b50e:	4618      	mov	r0, r3
 800b510:	f7f7 f922 	bl	8002758 <HAL_PCD_EP_SetStall>
 800b514:	4603      	mov	r3, r0
 800b516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b518:	7bfb      	ldrb	r3, [r7, #15]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f000 f8de 	bl	800b6dc <USBD_Get_USB_Status>
 800b520:	4603      	mov	r3, r0
 800b522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b524:	7bbb      	ldrb	r3, [r7, #14]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b084      	sub	sp, #16
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	460b      	mov	r3, r1
 800b538:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b53a:	2300      	movs	r3, #0
 800b53c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b53e:	2300      	movs	r3, #0
 800b540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b548:	78fa      	ldrb	r2, [r7, #3]
 800b54a:	4611      	mov	r1, r2
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7f7 f967 	bl	8002820 <HAL_PCD_EP_ClrStall>
 800b552:	4603      	mov	r3, r0
 800b554:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b556:	7bfb      	ldrb	r3, [r7, #15]
 800b558:	4618      	mov	r0, r3
 800b55a:	f000 f8bf 	bl	800b6dc <USBD_Get_USB_Status>
 800b55e:	4603      	mov	r3, r0
 800b560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b562:	7bbb      	ldrb	r3, [r7, #14]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b085      	sub	sp, #20
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	460b      	mov	r3, r1
 800b576:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b57e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b584:	2b00      	cmp	r3, #0
 800b586:	da0b      	bge.n	800b5a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b588:	78fb      	ldrb	r3, [r7, #3]
 800b58a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b58e:	68f9      	ldr	r1, [r7, #12]
 800b590:	4613      	mov	r3, r2
 800b592:	00db      	lsls	r3, r3, #3
 800b594:	4413      	add	r3, r2
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	440b      	add	r3, r1
 800b59a:	333e      	adds	r3, #62	; 0x3e
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	e00b      	b.n	800b5b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b5a0:	78fb      	ldrb	r3, [r7, #3]
 800b5a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5a6:	68f9      	ldr	r1, [r7, #12]
 800b5a8:	4613      	mov	r3, r2
 800b5aa:	00db      	lsls	r3, r3, #3
 800b5ac:	4413      	add	r3, r2
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	440b      	add	r3, r1
 800b5b2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b5b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3714      	adds	r7, #20
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b5de:	78fa      	ldrb	r2, [r7, #3]
 800b5e0:	4611      	mov	r1, r2
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7f6 ff34 	bl	8002450 <HAL_PCD_SetAddress>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 f874 	bl	800b6dc <USBD_Get_USB_Status>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	3710      	adds	r7, #16
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}

0800b602 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b086      	sub	sp, #24
 800b606:	af00      	add	r7, sp, #0
 800b608:	60f8      	str	r0, [r7, #12]
 800b60a:	607a      	str	r2, [r7, #4]
 800b60c:	603b      	str	r3, [r7, #0]
 800b60e:	460b      	mov	r3, r1
 800b610:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b612:	2300      	movs	r3, #0
 800b614:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b616:	2300      	movs	r3, #0
 800b618:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b620:	7af9      	ldrb	r1, [r7, #11]
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	f7f7 f84d 	bl	80026c4 <HAL_PCD_EP_Transmit>
 800b62a:	4603      	mov	r3, r0
 800b62c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b62e:	7dfb      	ldrb	r3, [r7, #23]
 800b630:	4618      	mov	r0, r3
 800b632:	f000 f853 	bl	800b6dc <USBD_Get_USB_Status>
 800b636:	4603      	mov	r3, r0
 800b638:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b63a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3718      	adds	r7, #24
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b086      	sub	sp, #24
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	607a      	str	r2, [r7, #4]
 800b64e:	603b      	str	r3, [r7, #0]
 800b650:	460b      	mov	r3, r1
 800b652:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b654:	2300      	movs	r3, #0
 800b656:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b658:	2300      	movs	r3, #0
 800b65a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b662:	7af9      	ldrb	r1, [r7, #11]
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	f7f6 ffc9 	bl	80025fe <HAL_PCD_EP_Receive>
 800b66c:	4603      	mov	r3, r0
 800b66e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b670:	7dfb      	ldrb	r3, [r7, #23]
 800b672:	4618      	mov	r0, r3
 800b674:	f000 f832 	bl	800b6dc <USBD_Get_USB_Status>
 800b678:	4603      	mov	r3, r0
 800b67a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b67c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b67e:	4618      	mov	r0, r3
 800b680:	3718      	adds	r7, #24
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b082      	sub	sp, #8
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
 800b68e:	460b      	mov	r3, r1
 800b690:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b698:	78fa      	ldrb	r2, [r7, #3]
 800b69a:	4611      	mov	r1, r2
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7f6 fff9 	bl	8002694 <HAL_PCD_EP_GetRxCount>
 800b6a2:	4603      	mov	r3, r0
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3708      	adds	r7, #8
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b6b4:	4b03      	ldr	r3, [pc, #12]	; (800b6c4 <USBD_static_malloc+0x18>)
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	200065b0 	.word	0x200065b0

0800b6c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]

}
 800b6d0:	bf00      	nop
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b085      	sub	sp, #20
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b6ea:	79fb      	ldrb	r3, [r7, #7]
 800b6ec:	2b03      	cmp	r3, #3
 800b6ee:	d817      	bhi.n	800b720 <USBD_Get_USB_Status+0x44>
 800b6f0:	a201      	add	r2, pc, #4	; (adr r2, 800b6f8 <USBD_Get_USB_Status+0x1c>)
 800b6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f6:	bf00      	nop
 800b6f8:	0800b709 	.word	0x0800b709
 800b6fc:	0800b70f 	.word	0x0800b70f
 800b700:	0800b715 	.word	0x0800b715
 800b704:	0800b71b 	.word	0x0800b71b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b708:	2300      	movs	r3, #0
 800b70a:	73fb      	strb	r3, [r7, #15]
    break;
 800b70c:	e00b      	b.n	800b726 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b70e:	2303      	movs	r3, #3
 800b710:	73fb      	strb	r3, [r7, #15]
    break;
 800b712:	e008      	b.n	800b726 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b714:	2301      	movs	r3, #1
 800b716:	73fb      	strb	r3, [r7, #15]
    break;
 800b718:	e005      	b.n	800b726 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b71a:	2303      	movs	r3, #3
 800b71c:	73fb      	strb	r3, [r7, #15]
    break;
 800b71e:	e002      	b.n	800b726 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b720:	2303      	movs	r3, #3
 800b722:	73fb      	strb	r3, [r7, #15]
    break;
 800b724:	bf00      	nop
  }
  return usb_status;
 800b726:	7bfb      	ldrb	r3, [r7, #15]
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3714      	adds	r7, #20
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <__libc_init_array>:
 800b734:	b570      	push	{r4, r5, r6, lr}
 800b736:	4d0d      	ldr	r5, [pc, #52]	; (800b76c <__libc_init_array+0x38>)
 800b738:	4c0d      	ldr	r4, [pc, #52]	; (800b770 <__libc_init_array+0x3c>)
 800b73a:	1b64      	subs	r4, r4, r5
 800b73c:	10a4      	asrs	r4, r4, #2
 800b73e:	2600      	movs	r6, #0
 800b740:	42a6      	cmp	r6, r4
 800b742:	d109      	bne.n	800b758 <__libc_init_array+0x24>
 800b744:	4d0b      	ldr	r5, [pc, #44]	; (800b774 <__libc_init_array+0x40>)
 800b746:	4c0c      	ldr	r4, [pc, #48]	; (800b778 <__libc_init_array+0x44>)
 800b748:	f000 f82e 	bl	800b7a8 <_init>
 800b74c:	1b64      	subs	r4, r4, r5
 800b74e:	10a4      	asrs	r4, r4, #2
 800b750:	2600      	movs	r6, #0
 800b752:	42a6      	cmp	r6, r4
 800b754:	d105      	bne.n	800b762 <__libc_init_array+0x2e>
 800b756:	bd70      	pop	{r4, r5, r6, pc}
 800b758:	f855 3b04 	ldr.w	r3, [r5], #4
 800b75c:	4798      	blx	r3
 800b75e:	3601      	adds	r6, #1
 800b760:	e7ee      	b.n	800b740 <__libc_init_array+0xc>
 800b762:	f855 3b04 	ldr.w	r3, [r5], #4
 800b766:	4798      	blx	r3
 800b768:	3601      	adds	r6, #1
 800b76a:	e7f2      	b.n	800b752 <__libc_init_array+0x1e>
 800b76c:	0800b888 	.word	0x0800b888
 800b770:	0800b888 	.word	0x0800b888
 800b774:	0800b888 	.word	0x0800b888
 800b778:	0800b88c 	.word	0x0800b88c

0800b77c <memcpy>:
 800b77c:	440a      	add	r2, r1
 800b77e:	4291      	cmp	r1, r2
 800b780:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b784:	d100      	bne.n	800b788 <memcpy+0xc>
 800b786:	4770      	bx	lr
 800b788:	b510      	push	{r4, lr}
 800b78a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b78e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b792:	4291      	cmp	r1, r2
 800b794:	d1f9      	bne.n	800b78a <memcpy+0xe>
 800b796:	bd10      	pop	{r4, pc}

0800b798 <memset>:
 800b798:	4402      	add	r2, r0
 800b79a:	4603      	mov	r3, r0
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d100      	bne.n	800b7a2 <memset+0xa>
 800b7a0:	4770      	bx	lr
 800b7a2:	f803 1b01 	strb.w	r1, [r3], #1
 800b7a6:	e7f9      	b.n	800b79c <memset+0x4>

0800b7a8 <_init>:
 800b7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7aa:	bf00      	nop
 800b7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ae:	bc08      	pop	{r3}
 800b7b0:	469e      	mov	lr, r3
 800b7b2:	4770      	bx	lr

0800b7b4 <_fini>:
 800b7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b6:	bf00      	nop
 800b7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ba:	bc08      	pop	{r3}
 800b7bc:	469e      	mov	lr, r3
 800b7be:	4770      	bx	lr
