
pNav32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b0cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b0  0801b260  0801b260  0002b260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c410  0801c410  00030618  2**0
                  CONTENTS
  4 .ARM          00000008  0801c410  0801c410  0002c410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c418  0801c418  00030618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000014  0801c418  0801c418  0002c418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c42c  0801c42c  0002c42c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000618  20000000  0801c430  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030618  2**0
                  CONTENTS
 10 .bss          00015218  20000618  20000618  00030618  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20015830  20015830  00030618  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030618  2**0
                  CONTENTS, READONLY
 13 .debug_info   000312ba  00000000  00000000  00030648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000704b  00000000  00000000  00061902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002568  00000000  00000000  00068950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002278  00000000  00000000  0006aeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e2c8  00000000  00000000  0006d130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032d6f  00000000  00000000  0009b3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f63bf  00000000  00000000  000ce167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000083  00000000  00000000  001c4526  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000aab0  00000000  00000000  001c45ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000618 	.word	0x20000618
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b244 	.word	0x0801b244

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000061c 	.word	0x2000061c
 80001cc:	0801b244 	.word	0x0801b244

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2f>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000620:	bf24      	itt	cs
 8000622:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000626:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800062a:	d90d      	bls.n	8000648 <__aeabi_d2f+0x30>
 800062c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000630:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000634:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000638:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800063c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000640:	bf08      	it	eq
 8000642:	f020 0001 	biceq.w	r0, r0, #1
 8000646:	4770      	bx	lr
 8000648:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800064c:	d121      	bne.n	8000692 <__aeabi_d2f+0x7a>
 800064e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000652:	bfbc      	itt	lt
 8000654:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000658:	4770      	bxlt	lr
 800065a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000662:	f1c2 0218 	rsb	r2, r2, #24
 8000666:	f1c2 0c20 	rsb	ip, r2, #32
 800066a:	fa10 f30c 	lsls.w	r3, r0, ip
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	bf18      	it	ne
 8000674:	f040 0001 	orrne.w	r0, r0, #1
 8000678:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800067c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000680:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000684:	ea40 000c 	orr.w	r0, r0, ip
 8000688:	fa23 f302 	lsr.w	r3, r3, r2
 800068c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000690:	e7cc      	b.n	800062c <__aeabi_d2f+0x14>
 8000692:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000696:	d107      	bne.n	80006a8 <__aeabi_d2f+0x90>
 8000698:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800069c:	bf1e      	ittt	ne
 800069e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006a6:	4770      	bxne	lr
 80006a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__aeabi_ldivmod>:
 80006b8:	b97b      	cbnz	r3, 80006da <__aeabi_ldivmod+0x22>
 80006ba:	b972      	cbnz	r2, 80006da <__aeabi_ldivmod+0x22>
 80006bc:	2900      	cmp	r1, #0
 80006be:	bfbe      	ittt	lt
 80006c0:	2000      	movlt	r0, #0
 80006c2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80006c6:	e006      	blt.n	80006d6 <__aeabi_ldivmod+0x1e>
 80006c8:	bf08      	it	eq
 80006ca:	2800      	cmpeq	r0, #0
 80006cc:	bf1c      	itt	ne
 80006ce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80006d2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006d6:	f000 b9bf 	b.w	8000a58 <__aeabi_idiv0>
 80006da:	f1ad 0c08 	sub.w	ip, sp, #8
 80006de:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e2:	2900      	cmp	r1, #0
 80006e4:	db09      	blt.n	80006fa <__aeabi_ldivmod+0x42>
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	db1a      	blt.n	8000720 <__aeabi_ldivmod+0x68>
 80006ea:	f000 f84d 	bl	8000788 <__udivmoddi4>
 80006ee:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f6:	b004      	add	sp, #16
 80006f8:	4770      	bx	lr
 80006fa:	4240      	negs	r0, r0
 80006fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000700:	2b00      	cmp	r3, #0
 8000702:	db1b      	blt.n	800073c <__aeabi_ldivmod+0x84>
 8000704:	f000 f840 	bl	8000788 <__udivmoddi4>
 8000708:	f8dd e004 	ldr.w	lr, [sp, #4]
 800070c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000710:	b004      	add	sp, #16
 8000712:	4240      	negs	r0, r0
 8000714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000718:	4252      	negs	r2, r2
 800071a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800071e:	4770      	bx	lr
 8000720:	4252      	negs	r2, r2
 8000722:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000726:	f000 f82f 	bl	8000788 <__udivmoddi4>
 800072a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800072e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000732:	b004      	add	sp, #16
 8000734:	4240      	negs	r0, r0
 8000736:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800073a:	4770      	bx	lr
 800073c:	4252      	negs	r2, r2
 800073e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000742:	f000 f821 	bl	8000788 <__udivmoddi4>
 8000746:	f8dd e004 	ldr.w	lr, [sp, #4]
 800074a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800074e:	b004      	add	sp, #16
 8000750:	4252      	negs	r2, r2
 8000752:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000756:	4770      	bx	lr

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000768:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800076c:	f000 b974 	b.w	8000a58 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f806 	bl	8000788 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__udivmoddi4>:
 8000788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800078c:	9d08      	ldr	r5, [sp, #32]
 800078e:	4604      	mov	r4, r0
 8000790:	468e      	mov	lr, r1
 8000792:	2b00      	cmp	r3, #0
 8000794:	d14d      	bne.n	8000832 <__udivmoddi4+0xaa>
 8000796:	428a      	cmp	r2, r1
 8000798:	4694      	mov	ip, r2
 800079a:	d969      	bls.n	8000870 <__udivmoddi4+0xe8>
 800079c:	fab2 f282 	clz	r2, r2
 80007a0:	b152      	cbz	r2, 80007b8 <__udivmoddi4+0x30>
 80007a2:	fa01 f302 	lsl.w	r3, r1, r2
 80007a6:	f1c2 0120 	rsb	r1, r2, #32
 80007aa:	fa20 f101 	lsr.w	r1, r0, r1
 80007ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80007b2:	ea41 0e03 	orr.w	lr, r1, r3
 80007b6:	4094      	lsls	r4, r2
 80007b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007bc:	0c21      	lsrs	r1, r4, #16
 80007be:	fbbe f6f8 	udiv	r6, lr, r8
 80007c2:	fa1f f78c 	uxth.w	r7, ip
 80007c6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ce:	fb06 f107 	mul.w	r1, r6, r7
 80007d2:	4299      	cmp	r1, r3
 80007d4:	d90a      	bls.n	80007ec <__udivmoddi4+0x64>
 80007d6:	eb1c 0303 	adds.w	r3, ip, r3
 80007da:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007de:	f080 811f 	bcs.w	8000a20 <__udivmoddi4+0x298>
 80007e2:	4299      	cmp	r1, r3
 80007e4:	f240 811c 	bls.w	8000a20 <__udivmoddi4+0x298>
 80007e8:	3e02      	subs	r6, #2
 80007ea:	4463      	add	r3, ip
 80007ec:	1a5b      	subs	r3, r3, r1
 80007ee:	b2a4      	uxth	r4, r4
 80007f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007f4:	fb08 3310 	mls	r3, r8, r0, r3
 80007f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007fc:	fb00 f707 	mul.w	r7, r0, r7
 8000800:	42a7      	cmp	r7, r4
 8000802:	d90a      	bls.n	800081a <__udivmoddi4+0x92>
 8000804:	eb1c 0404 	adds.w	r4, ip, r4
 8000808:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800080c:	f080 810a 	bcs.w	8000a24 <__udivmoddi4+0x29c>
 8000810:	42a7      	cmp	r7, r4
 8000812:	f240 8107 	bls.w	8000a24 <__udivmoddi4+0x29c>
 8000816:	4464      	add	r4, ip
 8000818:	3802      	subs	r0, #2
 800081a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800081e:	1be4      	subs	r4, r4, r7
 8000820:	2600      	movs	r6, #0
 8000822:	b11d      	cbz	r5, 800082c <__udivmoddi4+0xa4>
 8000824:	40d4      	lsrs	r4, r2
 8000826:	2300      	movs	r3, #0
 8000828:	e9c5 4300 	strd	r4, r3, [r5]
 800082c:	4631      	mov	r1, r6
 800082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000832:	428b      	cmp	r3, r1
 8000834:	d909      	bls.n	800084a <__udivmoddi4+0xc2>
 8000836:	2d00      	cmp	r5, #0
 8000838:	f000 80ef 	beq.w	8000a1a <__udivmoddi4+0x292>
 800083c:	2600      	movs	r6, #0
 800083e:	e9c5 0100 	strd	r0, r1, [r5]
 8000842:	4630      	mov	r0, r6
 8000844:	4631      	mov	r1, r6
 8000846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084a:	fab3 f683 	clz	r6, r3
 800084e:	2e00      	cmp	r6, #0
 8000850:	d14a      	bne.n	80008e8 <__udivmoddi4+0x160>
 8000852:	428b      	cmp	r3, r1
 8000854:	d302      	bcc.n	800085c <__udivmoddi4+0xd4>
 8000856:	4282      	cmp	r2, r0
 8000858:	f200 80f9 	bhi.w	8000a4e <__udivmoddi4+0x2c6>
 800085c:	1a84      	subs	r4, r0, r2
 800085e:	eb61 0303 	sbc.w	r3, r1, r3
 8000862:	2001      	movs	r0, #1
 8000864:	469e      	mov	lr, r3
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e0      	beq.n	800082c <__udivmoddi4+0xa4>
 800086a:	e9c5 4e00 	strd	r4, lr, [r5]
 800086e:	e7dd      	b.n	800082c <__udivmoddi4+0xa4>
 8000870:	b902      	cbnz	r2, 8000874 <__udivmoddi4+0xec>
 8000872:	deff      	udf	#255	; 0xff
 8000874:	fab2 f282 	clz	r2, r2
 8000878:	2a00      	cmp	r2, #0
 800087a:	f040 8092 	bne.w	80009a2 <__udivmoddi4+0x21a>
 800087e:	eba1 010c 	sub.w	r1, r1, ip
 8000882:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000886:	fa1f fe8c 	uxth.w	lr, ip
 800088a:	2601      	movs	r6, #1
 800088c:	0c20      	lsrs	r0, r4, #16
 800088e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000892:	fb07 1113 	mls	r1, r7, r3, r1
 8000896:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089a:	fb0e f003 	mul.w	r0, lr, r3
 800089e:	4288      	cmp	r0, r1
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0x12c>
 80008a2:	eb1c 0101 	adds.w	r1, ip, r1
 80008a6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x12a>
 80008ac:	4288      	cmp	r0, r1
 80008ae:	f200 80cb 	bhi.w	8000a48 <__udivmoddi4+0x2c0>
 80008b2:	4643      	mov	r3, r8
 80008b4:	1a09      	subs	r1, r1, r0
 80008b6:	b2a4      	uxth	r4, r4
 80008b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008bc:	fb07 1110 	mls	r1, r7, r0, r1
 80008c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008c4:	fb0e fe00 	mul.w	lr, lr, r0
 80008c8:	45a6      	cmp	lr, r4
 80008ca:	d908      	bls.n	80008de <__udivmoddi4+0x156>
 80008cc:	eb1c 0404 	adds.w	r4, ip, r4
 80008d0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80008d4:	d202      	bcs.n	80008dc <__udivmoddi4+0x154>
 80008d6:	45a6      	cmp	lr, r4
 80008d8:	f200 80bb 	bhi.w	8000a52 <__udivmoddi4+0x2ca>
 80008dc:	4608      	mov	r0, r1
 80008de:	eba4 040e 	sub.w	r4, r4, lr
 80008e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008e6:	e79c      	b.n	8000822 <__udivmoddi4+0x9a>
 80008e8:	f1c6 0720 	rsb	r7, r6, #32
 80008ec:	40b3      	lsls	r3, r6
 80008ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80008f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008f6:	fa20 f407 	lsr.w	r4, r0, r7
 80008fa:	fa01 f306 	lsl.w	r3, r1, r6
 80008fe:	431c      	orrs	r4, r3
 8000900:	40f9      	lsrs	r1, r7
 8000902:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000906:	fa00 f306 	lsl.w	r3, r0, r6
 800090a:	fbb1 f8f9 	udiv	r8, r1, r9
 800090e:	0c20      	lsrs	r0, r4, #16
 8000910:	fa1f fe8c 	uxth.w	lr, ip
 8000914:	fb09 1118 	mls	r1, r9, r8, r1
 8000918:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800091c:	fb08 f00e 	mul.w	r0, r8, lr
 8000920:	4288      	cmp	r0, r1
 8000922:	fa02 f206 	lsl.w	r2, r2, r6
 8000926:	d90b      	bls.n	8000940 <__udivmoddi4+0x1b8>
 8000928:	eb1c 0101 	adds.w	r1, ip, r1
 800092c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000930:	f080 8088 	bcs.w	8000a44 <__udivmoddi4+0x2bc>
 8000934:	4288      	cmp	r0, r1
 8000936:	f240 8085 	bls.w	8000a44 <__udivmoddi4+0x2bc>
 800093a:	f1a8 0802 	sub.w	r8, r8, #2
 800093e:	4461      	add	r1, ip
 8000940:	1a09      	subs	r1, r1, r0
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb1 f0f9 	udiv	r0, r1, r9
 8000948:	fb09 1110 	mls	r1, r9, r0, r1
 800094c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000950:	fb00 fe0e 	mul.w	lr, r0, lr
 8000954:	458e      	cmp	lr, r1
 8000956:	d908      	bls.n	800096a <__udivmoddi4+0x1e2>
 8000958:	eb1c 0101 	adds.w	r1, ip, r1
 800095c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000960:	d26c      	bcs.n	8000a3c <__udivmoddi4+0x2b4>
 8000962:	458e      	cmp	lr, r1
 8000964:	d96a      	bls.n	8000a3c <__udivmoddi4+0x2b4>
 8000966:	3802      	subs	r0, #2
 8000968:	4461      	add	r1, ip
 800096a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800096e:	fba0 9402 	umull	r9, r4, r0, r2
 8000972:	eba1 010e 	sub.w	r1, r1, lr
 8000976:	42a1      	cmp	r1, r4
 8000978:	46c8      	mov	r8, r9
 800097a:	46a6      	mov	lr, r4
 800097c:	d356      	bcc.n	8000a2c <__udivmoddi4+0x2a4>
 800097e:	d053      	beq.n	8000a28 <__udivmoddi4+0x2a0>
 8000980:	b15d      	cbz	r5, 800099a <__udivmoddi4+0x212>
 8000982:	ebb3 0208 	subs.w	r2, r3, r8
 8000986:	eb61 010e 	sbc.w	r1, r1, lr
 800098a:	fa01 f707 	lsl.w	r7, r1, r7
 800098e:	fa22 f306 	lsr.w	r3, r2, r6
 8000992:	40f1      	lsrs	r1, r6
 8000994:	431f      	orrs	r7, r3
 8000996:	e9c5 7100 	strd	r7, r1, [r5]
 800099a:	2600      	movs	r6, #0
 800099c:	4631      	mov	r1, r6
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	f1c2 0320 	rsb	r3, r2, #32
 80009a6:	40d8      	lsrs	r0, r3
 80009a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ac:	fa21 f303 	lsr.w	r3, r1, r3
 80009b0:	4091      	lsls	r1, r2
 80009b2:	4301      	orrs	r1, r0
 80009b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b8:	fa1f fe8c 	uxth.w	lr, ip
 80009bc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009c0:	fb07 3610 	mls	r6, r7, r0, r3
 80009c4:	0c0b      	lsrs	r3, r1, #16
 80009c6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ca:	fb00 f60e 	mul.w	r6, r0, lr
 80009ce:	429e      	cmp	r6, r3
 80009d0:	fa04 f402 	lsl.w	r4, r4, r2
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x260>
 80009d6:	eb1c 0303 	adds.w	r3, ip, r3
 80009da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80009de:	d22f      	bcs.n	8000a40 <__udivmoddi4+0x2b8>
 80009e0:	429e      	cmp	r6, r3
 80009e2:	d92d      	bls.n	8000a40 <__udivmoddi4+0x2b8>
 80009e4:	3802      	subs	r0, #2
 80009e6:	4463      	add	r3, ip
 80009e8:	1b9b      	subs	r3, r3, r6
 80009ea:	b289      	uxth	r1, r1
 80009ec:	fbb3 f6f7 	udiv	r6, r3, r7
 80009f0:	fb07 3316 	mls	r3, r7, r6, r3
 80009f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009f8:	fb06 f30e 	mul.w	r3, r6, lr
 80009fc:	428b      	cmp	r3, r1
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x28a>
 8000a00:	eb1c 0101 	adds.w	r1, ip, r1
 8000a04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000a08:	d216      	bcs.n	8000a38 <__udivmoddi4+0x2b0>
 8000a0a:	428b      	cmp	r3, r1
 8000a0c:	d914      	bls.n	8000a38 <__udivmoddi4+0x2b0>
 8000a0e:	3e02      	subs	r6, #2
 8000a10:	4461      	add	r1, ip
 8000a12:	1ac9      	subs	r1, r1, r3
 8000a14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a18:	e738      	b.n	800088c <__udivmoddi4+0x104>
 8000a1a:	462e      	mov	r6, r5
 8000a1c:	4628      	mov	r0, r5
 8000a1e:	e705      	b.n	800082c <__udivmoddi4+0xa4>
 8000a20:	4606      	mov	r6, r0
 8000a22:	e6e3      	b.n	80007ec <__udivmoddi4+0x64>
 8000a24:	4618      	mov	r0, r3
 8000a26:	e6f8      	b.n	800081a <__udivmoddi4+0x92>
 8000a28:	454b      	cmp	r3, r9
 8000a2a:	d2a9      	bcs.n	8000980 <__udivmoddi4+0x1f8>
 8000a2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a34:	3801      	subs	r0, #1
 8000a36:	e7a3      	b.n	8000980 <__udivmoddi4+0x1f8>
 8000a38:	4646      	mov	r6, r8
 8000a3a:	e7ea      	b.n	8000a12 <__udivmoddi4+0x28a>
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	e794      	b.n	800096a <__udivmoddi4+0x1e2>
 8000a40:	4640      	mov	r0, r8
 8000a42:	e7d1      	b.n	80009e8 <__udivmoddi4+0x260>
 8000a44:	46d0      	mov	r8, sl
 8000a46:	e77b      	b.n	8000940 <__udivmoddi4+0x1b8>
 8000a48:	3b02      	subs	r3, #2
 8000a4a:	4461      	add	r1, ip
 8000a4c:	e732      	b.n	80008b4 <__udivmoddi4+0x12c>
 8000a4e:	4630      	mov	r0, r6
 8000a50:	e709      	b.n	8000866 <__udivmoddi4+0xde>
 8000a52:	4464      	add	r4, ip
 8000a54:	3802      	subs	r0, #2
 8000a56:	e742      	b.n	80008de <__udivmoddi4+0x156>

08000a58 <__aeabi_idiv0>:
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a70:	4a21      	ldr	r2, [pc, #132]	; (8000af8 <MX_ADC1_Init+0x9c>)
 8000a72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a88:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <MX_ADC1_Init+0xa0>)
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000abe:	f002 fa3b 	bl	8002f38 <HAL_ADC_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ac8:	f001 f874 	bl	8001bb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad8:	463b      	mov	r3, r7
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000ade:	f002 fa6f 	bl	8002fc0 <HAL_ADC_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ae8:	f001 f864 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000634 	.word	0x20000634
 8000af8:	40012000 	.word	0x40012000
 8000afc:	0f000001 	.word	0x0f000001

08000b00 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b06:	463b      	mov	r3, r7
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000b12:	4b64      	ldr	r3, [pc, #400]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b14:	4a64      	ldr	r2, [pc, #400]	; (8000ca8 <MX_ADC3_Init+0x1a8>)
 8000b16:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b18:	4b62      	ldr	r3, [pc, #392]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b1e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b20:	4b60      	ldr	r3, [pc, #384]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8000b26:	4b5f      	ldr	r3, [pc, #380]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b2c:	4b5d      	ldr	r3, [pc, #372]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b32:	4b5c      	ldr	r3, [pc, #368]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b3a:	4b5a      	ldr	r3, [pc, #360]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8000b42:	4b58      	ldr	r3, [pc, #352]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b44:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b4a:	4b56      	ldr	r3, [pc, #344]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 12;
 8000b50:	4b54      	ldr	r3, [pc, #336]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b56:	4b53      	ldr	r3, [pc, #332]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b5e:	4b51      	ldr	r3, [pc, #324]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b64:	484f      	ldr	r0, [pc, #316]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b66:	f002 f9e7 	bl	8002f38 <HAL_ADC_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8000b70:	f001 f820 	bl	8001bb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b74:	230a      	movs	r3, #10
 8000b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b80:	463b      	mov	r3, r7
 8000b82:	4619      	mov	r1, r3
 8000b84:	4847      	ldr	r0, [pc, #284]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b86:	f002 fa1b 	bl	8002fc0 <HAL_ADC_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000b90:	f001 f810 	bl	8001bb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4841      	ldr	r0, [pc, #260]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b9e:	f002 fa0f 	bl	8002fc0 <HAL_ADC_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000ba8:	f001 f804 	bl	8001bb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8000bac:	2303      	movs	r3, #3
 8000bae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	483b      	ldr	r0, [pc, #236]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000bb6:	f002 fa03 	bl	8002fc0 <HAL_ADC_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC3_Init+0xc4>
  {
    Error_Handler();
 8000bc0:	f000 fff8 	bl	8001bb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4835      	ldr	r0, [pc, #212]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000bce:	f002 f9f7 	bl	8002fc0 <HAL_ADC_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000bd8:	f000 ffec 	bl	8001bb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 8000bdc:	2305      	movs	r3, #5
 8000bde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	482f      	ldr	r0, [pc, #188]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000be6:	f002 f9eb 	bl	8002fc0 <HAL_ADC_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 8000bf0:	f000 ffe0 	bl	8001bb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 8000bf4:	2306      	movs	r3, #6
 8000bf6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4829      	ldr	r0, [pc, #164]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000bfe:	f002 f9df 	bl	8002fc0 <HAL_ADC_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_ADC3_Init+0x10c>
  {
    Error_Handler();
 8000c08:	f000 ffd4 	bl	8001bb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 7;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c10:	463b      	mov	r3, r7
 8000c12:	4619      	mov	r1, r3
 8000c14:	4823      	ldr	r0, [pc, #140]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c16:	f002 f9d3 	bl	8002fc0 <HAL_ADC_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC3_Init+0x124>
  {
    Error_Handler();
 8000c20:	f000 ffc8 	bl	8001bb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 8;
 8000c24:	2308      	movs	r3, #8
 8000c26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c28:	463b      	mov	r3, r7
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481d      	ldr	r0, [pc, #116]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c2e:	f002 f9c7 	bl	8002fc0 <HAL_ADC_ConfigChannel>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC3_Init+0x13c>
  {
    Error_Handler();
 8000c38:	f000 ffbc 	bl	8001bb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 9;
 8000c3c:	2309      	movs	r3, #9
 8000c3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c40:	463b      	mov	r3, r7
 8000c42:	4619      	mov	r1, r3
 8000c44:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c46:	f002 f9bb 	bl	8002fc0 <HAL_ADC_ConfigChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC3_Init+0x154>
  {
    Error_Handler();
 8000c50:	f000 ffb0 	bl	8001bb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 10;
 8000c54:	230a      	movs	r3, #10
 8000c56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c5e:	f002 f9af 	bl	8002fc0 <HAL_ADC_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_ADC3_Init+0x16c>
  {
    Error_Handler();
 8000c68:	f000 ffa4 	bl	8001bb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 11;
 8000c6c:	230b      	movs	r3, #11
 8000c6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	4619      	mov	r1, r3
 8000c74:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c76:	f002 f9a3 	bl	8002fc0 <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC3_Init+0x184>
  {
    Error_Handler();
 8000c80:	f000 ff98 	bl	8001bb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 12;
 8000c84:	230c      	movs	r3, #12
 8000c86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c8e:	f002 f997 	bl	8002fc0 <HAL_ADC_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ADC3_Init+0x19c>
  {
    Error_Handler();
 8000c98:	f000 ff8c 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000067c 	.word	0x2000067c
 8000ca8:	40012200 	.word	0x40012200

08000cac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08c      	sub	sp, #48	; 0x30
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a53      	ldr	r2, [pc, #332]	; (8000e18 <HAL_ADC_MspInit+0x16c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d142      	bne.n	8000d54 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	4b52      	ldr	r3, [pc, #328]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a51      	ldr	r2, [pc, #324]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b4f      	ldr	r3, [pc, #316]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	4b4b      	ldr	r3, [pc, #300]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a4a      	ldr	r2, [pc, #296]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b48      	ldr	r3, [pc, #288]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b44      	ldr	r3, [pc, #272]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a43      	ldr	r2, [pc, #268]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b41      	ldr	r3, [pc, #260]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC_VREF_Pin;
 8000d22:	2304      	movs	r3, #4
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d26:	2303      	movs	r3, #3
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_VREF_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	483a      	ldr	r0, [pc, #232]	; (8000e20 <HAL_ADC_MspInit+0x174>)
 8000d36:	f003 f861 	bl	8003dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_TEMP_Pin;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_TEMP_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4835      	ldr	r0, [pc, #212]	; (8000e24 <HAL_ADC_MspInit+0x178>)
 8000d4e:	f003 f855 	bl	8003dfc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000d52:	e05d      	b.n	8000e10 <HAL_ADC_MspInit+0x164>
  else if(adcHandle->Instance==ADC3)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a33      	ldr	r2, [pc, #204]	; (8000e28 <HAL_ADC_MspInit+0x17c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d158      	bne.n	8000e10 <HAL_ADC_MspInit+0x164>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a2d      	ldr	r2, [pc, #180]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a26      	ldr	r2, [pc, #152]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_MOT1_CUR_Pin|ADC_MOT2_CUR_Pin|ADC_VREF_Pin;
 8000d96:	2307      	movs	r3, #7
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	481d      	ldr	r0, [pc, #116]	; (8000e20 <HAL_ADC_MspInit+0x174>)
 8000daa:	f003 f827 	bl	8003dfc <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000db0:	4a1f      	ldr	r2, [pc, #124]	; (8000e30 <HAL_ADC_MspInit+0x184>)
 8000db2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000db6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000dba:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dce:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dd6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dde:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000de8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dec:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000df6:	f002 fbff 	bl	80035f8 <HAL_DMA_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_ADC_MspInit+0x158>
      Error_Handler();
 8000e00:	f000 fed8 	bl	8001bb4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e10:	bf00      	nop
 8000e12:	3730      	adds	r7, #48	; 0x30
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40012000 	.word	0x40012000
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020800 	.word	0x40020800
 8000e24:	40020000 	.word	0x40020000
 8000e28:	40012200 	.word	0x40012200
 8000e2c:	200006c4 	.word	0x200006c4
 8000e30:	40026410 	.word	0x40026410

08000e34 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_CRC_Init+0x20>)
 8000e3a:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <MX_CRC_Init+0x24>)
 8000e3c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_CRC_Init+0x20>)
 8000e40:	f002 fbbe 	bl	80035c0 <HAL_CRC_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e4a:	f000 feb3 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000724 	.word	0x20000724
 8000e58:	40023000 	.word	0x40023000

08000e5c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <HAL_CRC_MspInit+0x3c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d10d      	bne.n	8000e8a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_CRC_MspInit+0x40>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <HAL_CRC_MspInit+0x40>)
 8000e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <HAL_CRC_MspInit+0x40>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40023000 	.word	0x40023000
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000eac:	f00c fd4c 	bl	800d948 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000eb0:	4b58      	ldr	r3, [pc, #352]	; (8001014 <pvPortMallocMicroROS+0x174>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000eb8:	f000 f980 	bl	80011bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000ebc:	4b56      	ldr	r3, [pc, #344]	; (8001018 <pvPortMallocMicroROS+0x178>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f040 808e 	bne.w	8000fe6 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d01d      	beq.n	8000f0c <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d014      	beq.n	8000f0c <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f023 0307 	bic.w	r3, r3, #7
 8000ee8:	3308      	adds	r3, #8
 8000eea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00a      	beq.n	8000f0c <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000efa:	f383 8811 	msr	BASEPRI, r3
 8000efe:	f3bf 8f6f 	isb	sy
 8000f02:	f3bf 8f4f 	dsb	sy
 8000f06:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000f08:	bf00      	nop
 8000f0a:	e7fe      	b.n	8000f0a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d069      	beq.n	8000fe6 <pvPortMallocMicroROS+0x146>
 8000f12:	4b42      	ldr	r3, [pc, #264]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d864      	bhi.n	8000fe6 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000f1c:	4b40      	ldr	r3, [pc, #256]	; (8001020 <pvPortMallocMicroROS+0x180>)
 8000f1e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000f20:	4b3f      	ldr	r3, [pc, #252]	; (8001020 <pvPortMallocMicroROS+0x180>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f26:	e004      	b.n	8000f32 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d903      	bls.n	8000f44 <pvPortMallocMicroROS+0xa4>
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1f1      	bne.n	8000f28 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000f44:	4b33      	ldr	r3, [pc, #204]	; (8001014 <pvPortMallocMicroROS+0x174>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d04b      	beq.n	8000fe6 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000f4e:	6a3b      	ldr	r3, [r7, #32]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2208      	movs	r2, #8
 8000f54:	4413      	add	r3, r2
 8000f56:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
 8000f5e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	1ad2      	subs	r2, r2, r3
 8000f68:	2308      	movs	r3, #8
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d91f      	bls.n	8000fb0 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00a      	beq.n	8000f98 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8000f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f86:	f383 8811 	msr	BASEPRI, r3
 8000f8a:	f3bf 8f6f 	isb	sy
 8000f8e:	f3bf 8f4f 	dsb	sy
 8000f92:	613b      	str	r3, [r7, #16]
}
 8000f94:	bf00      	nop
 8000f96:	e7fe      	b.n	8000f96 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	1ad2      	subs	r2, r2, r3
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000faa:	69b8      	ldr	r0, [r7, #24]
 8000fac:	f000 f968 	bl	8001280 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	4a18      	ldr	r2, [pc, #96]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000fbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <pvPortMallocMicroROS+0x184>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d203      	bcs.n	8000fd2 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a15      	ldr	r2, [pc, #84]	; (8001024 <pvPortMallocMicroROS+0x184>)
 8000fd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <pvPortMallocMicroROS+0x178>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000fe6:	f00c fcbd 	bl	800d964 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00a      	beq.n	800100a <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8000ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ff8:	f383 8811 	msr	BASEPRI, r3
 8000ffc:	f3bf 8f6f 	isb	sy
 8001000:	f3bf 8f4f 	dsb	sy
 8001004:	60fb      	str	r3, [r7, #12]
}
 8001006:	bf00      	nop
 8001008:	e7fe      	b.n	8001008 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 800100a:	69fb      	ldr	r3, [r7, #28]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3728      	adds	r7, #40	; 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20004334 	.word	0x20004334
 8001018:	20004340 	.word	0x20004340
 800101c:	20004338 	.word	0x20004338
 8001020:	2000432c 	.word	0x2000432c
 8001024:	2000433c 	.word	0x2000433c

08001028 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d048      	beq.n	80010cc <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800103a:	2308      	movs	r3, #8
 800103c:	425b      	negs	r3, r3
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4413      	add	r3, r2
 8001042:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <vPortFreeMicroROS+0xac>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4013      	ands	r3, r2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10a      	bne.n	800106c <vPortFreeMicroROS+0x44>
	__asm volatile
 8001056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105a:	f383 8811 	msr	BASEPRI, r3
 800105e:	f3bf 8f6f 	isb	sy
 8001062:	f3bf 8f4f 	dsb	sy
 8001066:	60fb      	str	r3, [r7, #12]
}
 8001068:	bf00      	nop
 800106a:	e7fe      	b.n	800106a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00a      	beq.n	800108a <vPortFreeMicroROS+0x62>
	__asm volatile
 8001074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001078:	f383 8811 	msr	BASEPRI, r3
 800107c:	f3bf 8f6f 	isb	sy
 8001080:	f3bf 8f4f 	dsb	sy
 8001084:	60bb      	str	r3, [r7, #8]
}
 8001086:	bf00      	nop
 8001088:	e7fe      	b.n	8001088 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <vPortFreeMicroROS+0xac>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4013      	ands	r3, r2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d019      	beq.n	80010cc <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d115      	bne.n	80010cc <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <vPortFreeMicroROS+0xac>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	401a      	ands	r2, r3
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80010b0:	f00c fc4a 	bl	800d948 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <vPortFreeMicroROS+0xb0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4413      	add	r3, r2
 80010be:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <vPortFreeMicroROS+0xb0>)
 80010c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80010c2:	6938      	ldr	r0, [r7, #16]
 80010c4:	f000 f8dc 	bl	8001280 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80010c8:	f00c fc4c 	bl	800d964 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20004340 	.word	0x20004340
 80010d8:	20004338 	.word	0x20004338

080010dc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80010dc:	b480      	push	{r7}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80010e8:	2308      	movs	r3, #8
 80010ea:	425b      	negs	r3, r3
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	4413      	add	r3, r2
 80010f0:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <getBlockSize+0x38>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	43db      	mvns	r3, r3
 8001100:	4013      	ands	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]

	return count;
 8001104:	68fb      	ldr	r3, [r7, #12]
}
 8001106:	4618      	mov	r0, r3
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20004340 	.word	0x20004340

08001118 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001122:	f00c fc11 	bl	800d948 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001126:	6838      	ldr	r0, [r7, #0]
 8001128:	f7ff feba 	bl	8000ea0 <pvPortMallocMicroROS>
 800112c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d017      	beq.n	8001164 <pvPortReallocMicroROS+0x4c>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d014      	beq.n	8001164 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffce 	bl	80010dc <getBlockSize>
 8001140:	4603      	mov	r3, r0
 8001142:	2208      	movs	r2, #8
 8001144:	1a9b      	subs	r3, r3, r2
 8001146:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d201      	bcs.n	8001154 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f018 fd77 	bl	8019c4c <memcpy>

		vPortFreeMicroROS(pv);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ff62 	bl	8001028 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001164:	f00c fbfe 	bl	800d964 <xTaskResumeAll>

	return newmem;
 8001168:	68bb      	ldr	r3, [r7, #8]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800117c:	f00c fbe4 	bl	800d948 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff fe88 	bl	8000ea0 <pvPortMallocMicroROS>
 8001190:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001196:	e004      	b.n	80011a2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	613a      	str	r2, [r7, #16]
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	1e5a      	subs	r2, r3, #1
 80011a6:	617a      	str	r2, [r7, #20]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f5      	bne.n	8001198 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80011ac:	f00c fbda 	bl	800d964 <xTaskResumeAll>
  	return mem;
 80011b0:	68fb      	ldr	r3, [r7, #12]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80011c2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80011c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <prvHeapInit+0xac>)
 80011ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00c      	beq.n	80011f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3307      	adds	r3, #7
 80011da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f023 0307 	bic.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <prvHeapInit+0xac>)
 80011ec:	4413      	add	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80011f4:	4a1d      	ldr	r2, [pc, #116]	; (800126c <prvHeapInit+0xb0>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <prvHeapInit+0xb0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	4413      	add	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001208:	2208      	movs	r2, #8
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f023 0307 	bic.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4a15      	ldr	r2, [pc, #84]	; (8001270 <prvHeapInit+0xb4>)
 800121c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <prvHeapInit+0xb4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <prvHeapInit+0xb4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	1ad2      	subs	r2, r2, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <prvHeapInit+0xb4>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <prvHeapInit+0xb8>)
 800124a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4a09      	ldr	r2, [pc, #36]	; (8001278 <prvHeapInit+0xbc>)
 8001252:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <prvHeapInit+0xc0>)
 8001256:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800125a:	601a      	str	r2, [r3, #0]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	2000072c 	.word	0x2000072c
 800126c:	2000432c 	.word	0x2000432c
 8001270:	20004334 	.word	0x20004334
 8001274:	2000433c 	.word	0x2000433c
 8001278:	20004338 	.word	0x20004338
 800127c:	20004340 	.word	0x20004340

08001280 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001288:	4b28      	ldr	r3, [pc, #160]	; (800132c <prvInsertBlockIntoFreeList+0xac>)
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	e002      	b.n	8001294 <prvInsertBlockIntoFreeList+0x14>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	429a      	cmp	r2, r3
 800129c:	d8f7      	bhi.n	800128e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	4413      	add	r3, r2
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d108      	bne.n	80012c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	441a      	add	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	441a      	add	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d118      	bne.n	8001308 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <prvInsertBlockIntoFreeList+0xb0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d00d      	beq.n	80012fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	441a      	add	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	e008      	b.n	8001310 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <prvInsertBlockIntoFreeList+0xb0>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e003      	b.n	8001310 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	d002      	beq.n	800131e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	2000432c 	.word	0x2000432c
 8001330:	20004334 	.word	0x20004334

08001334 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_DMA_Init+0x5c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a13      	ldr	r2, [pc, #76]	; (8001390 <MX_DMA_Init+0x5c>)
 8001344:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_DMA_Init+0x5c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2105      	movs	r1, #5
 800135a:	2038      	movs	r0, #56	; 0x38
 800135c:	f002 f906 	bl	800356c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001360:	2038      	movs	r0, #56	; 0x38
 8001362:	f002 f91f 	bl	80035a4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2105      	movs	r1, #5
 800136a:	203a      	movs	r0, #58	; 0x3a
 800136c:	f002 f8fe 	bl	800356c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001370:	203a      	movs	r0, #58	; 0x3a
 8001372:	f002 f917 	bl	80035a4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2105      	movs	r1, #5
 800137a:	2046      	movs	r0, #70	; 0x46
 800137c:	f002 f8f6 	bl	800356c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001380:	2046      	movs	r0, #70	; 0x46
 8001382:	f002 f90f 	bl	80035a4 <HAL_NVIC_EnableIRQ>

}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800

08001394 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80013a2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80013a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013a8:	4904      	ldr	r1, [pc, #16]	; (80013bc <cubemx_transport_open+0x28>)
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f006 fbec 	bl	8007b88 <HAL_UART_Receive_DMA>
    return true;
 80013b0:	2301      	movs	r3, #1
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20004344 	.word	0x20004344

080013c0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80013ce:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f006 fc09 	bl	8007be8 <HAL_UART_DMAStop>
    return true;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80013f4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b20      	cmp	r3, #32
 8001400:	d11c      	bne.n	800143c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	b29b      	uxth	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f006 fb3e 	bl	8007a8c <HAL_UART_Transmit_DMA>
 8001410:	4603      	mov	r3, r0
 8001412:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001414:	e002      	b.n	800141c <cubemx_transport_write+0x3c>
            osDelay(1);
 8001416:	2001      	movs	r0, #1
 8001418:	f00b fa4a 	bl	800c8b0 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800141c:	7cfb      	ldrb	r3, [r7, #19]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d105      	bne.n	800142e <cubemx_transport_write+0x4e>
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b20      	cmp	r3, #32
 800142c:	d1f3      	bne.n	8001416 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800142e:	7cfb      	ldrb	r3, [r7, #19]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <cubemx_transport_write+0x58>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	e002      	b.n	800143e <cubemx_transport_write+0x5e>
 8001438:	2300      	movs	r3, #0
 800143a:	e000      	b.n	800143e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 800143c:	2300      	movs	r3, #0
    }
}
 800143e:	4618      	mov	r0, r3
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800145c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001462:	b672      	cpsid	i
}
 8001464:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001472:	4a1c      	ldr	r2, [pc, #112]	; (80014e4 <cubemx_transport_read+0x9c>)
 8001474:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001476:	b662      	cpsie	i
}
 8001478:	bf00      	nop
        __enable_irq();
        ms_used++;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3301      	adds	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001480:	2001      	movs	r0, #1
 8001482:	f00b fa15 	bl	800c8b0 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <cubemx_transport_read+0xa0>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <cubemx_transport_read+0x9c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d103      	bne.n	800149a <cubemx_transport_read+0x52>
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	dbe3      	blt.n	8001462 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800149e:	e011      	b.n	80014c4 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <cubemx_transport_read+0xa0>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	440b      	add	r3, r1
 80014aa:	4910      	ldr	r1, [pc, #64]	; (80014ec <cubemx_transport_read+0xa4>)
 80014ac:	5c8a      	ldrb	r2, [r1, r2]
 80014ae:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <cubemx_transport_read+0xa0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <cubemx_transport_read+0xa0>)
 80014bc:	6013      	str	r3, [r2, #0]
        wrote++;
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	3301      	adds	r3, #1
 80014c2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <cubemx_transport_read+0xa0>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <cubemx_transport_read+0x9c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d003      	beq.n	80014d8 <cubemx_transport_read+0x90>
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d3e3      	bcc.n	80014a0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80014d8:	69bb      	ldr	r3, [r7, #24]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3720      	adds	r7, #32
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20004b48 	.word	0x20004b48
 80014e8:	20004b44 	.word	0x20004b44
 80014ec:	20004344 	.word	0x20004344

080014f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of rosTaskLed */
  rosTaskLedHandle = osThreadNew(StartTaskLed, NULL, &rosTaskLed_attributes);
 80014f4:	4a08      	ldr	r2, [pc, #32]	; (8001518 <MX_FREERTOS_Init+0x28>)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4808      	ldr	r0, [pc, #32]	; (800151c <MX_FREERTOS_Init+0x2c>)
 80014fa:	f00b f947 	bl	800c78c <osThreadNew>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <MX_FREERTOS_Init+0x30>)
 8001502:	6013      	str	r3, [r2, #0]

  /* creation of rosTaskCom */
  rosTaskComHandle = osThreadNew(StartTaskCom, NULL, &rosTaskCom_attributes);
 8001504:	4a07      	ldr	r2, [pc, #28]	; (8001524 <MX_FREERTOS_Init+0x34>)
 8001506:	2100      	movs	r1, #0
 8001508:	4807      	ldr	r0, [pc, #28]	; (8001528 <MX_FREERTOS_Init+0x38>)
 800150a:	f00b f93f 	bl	800c78c <osThreadNew>
 800150e:	4603      	mov	r3, r0
 8001510:	4a06      	ldr	r2, [pc, #24]	; (800152c <MX_FREERTOS_Init+0x3c>)
 8001512:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	0801b340 	.word	0x0801b340
 800151c:	08001531 	.word	0x08001531
 8001520:	20004b4c 	.word	0x20004b4c
 8001524:	0801b364 	.word	0x0801b364
 8001528:	08001569 	.word	0x08001569
 800152c:	2000540c 	.word	0x2000540c

08001530 <StartTaskLed>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskLed */
void StartTaskLed(void *argument)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001538:	f00d fe80 	bl	800f23c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartTaskLed */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_WritePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin, 1);
 800153c:	2201      	movs	r2, #1
 800153e:	2140      	movs	r1, #64	; 0x40
 8001540:	4807      	ldr	r0, [pc, #28]	; (8001560 <StartTaskLed+0x30>)
 8001542:	f002 fdf7 	bl	8004134 <HAL_GPIO_WritePin>
		osDelay(100);
 8001546:	2064      	movs	r0, #100	; 0x64
 8001548:	f00b f9b2 	bl	800c8b0 <osDelay>
		HAL_GPIO_WritePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2140      	movs	r1, #64	; 0x40
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <StartTaskLed+0x30>)
 8001552:	f002 fdef 	bl	8004134 <HAL_GPIO_WritePin>
		osDelay(200);
 8001556:	20c8      	movs	r0, #200	; 0xc8
 8001558:	f00b f9aa 	bl	800c8b0 <osDelay>
		HAL_GPIO_WritePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin, 1);
 800155c:	e7ee      	b.n	800153c <StartTaskLed+0xc>
 800155e:	bf00      	nop
 8001560:	40020000 	.word	0x40020000
 8001564:	00000000 	.word	0x00000000

08001568 <StartTaskCom>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCom */
void StartTaskCom(void *argument)
{
 8001568:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800156c:	b0de      	sub	sp, #376	; 0x178
 800156e:	af02      	add	r7, sp, #8
 8001570:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001574:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001578:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTaskCom */
	rmw_uros_set_custom_transport(
 800157a:	4b83      	ldr	r3, [pc, #524]	; (8001788 <StartTaskCom+0x220>)
 800157c:	9301      	str	r3, [sp, #4]
 800157e:	4b83      	ldr	r3, [pc, #524]	; (800178c <StartTaskCom+0x224>)
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	4b83      	ldr	r3, [pc, #524]	; (8001790 <StartTaskCom+0x228>)
 8001584:	4a83      	ldr	r2, [pc, #524]	; (8001794 <StartTaskCom+0x22c>)
 8001586:	4984      	ldr	r1, [pc, #528]	; (8001798 <StartTaskCom+0x230>)
 8001588:	2001      	movs	r0, #1
 800158a:	f00e fd79 	bl	8010080 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800158e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001592:	4618      	mov	r0, r3
 8001594:	f00e fcf6 	bl	800ff84 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8001598:	4b80      	ldr	r3, [pc, #512]	; (800179c <StartTaskCom+0x234>)
 800159a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
	freeRTOS_allocator.deallocate = microros_deallocate;
 800159e:	4b80      	ldr	r3, [pc, #512]	; (80017a0 <StartTaskCom+0x238>)
 80015a0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
	freeRTOS_allocator.reallocate = microros_reallocate;
 80015a4:	4b7f      	ldr	r3, [pc, #508]	; (80017a4 <StartTaskCom+0x23c>)
 80015a6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80015aa:	4b7f      	ldr	r3, [pc, #508]	; (80017a8 <StartTaskCom+0x240>)
 80015ac:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

	if (!rcutils_set_default_allocator(&freeRTOS_allocator))
 80015b0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80015b4:	4618      	mov	r0, r3
 80015b6:	f00e fcf3 	bl	800ffa0 <rcutils_set_default_allocator>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f083 0301 	eor.w	r3, r3, #1
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <StartTaskCom+0x66>
	{	printf("Error on default allocators (line %d)\n", __LINE__);
 80015c6:	21cb      	movs	r1, #203	; 0xcb
 80015c8:	4878      	ldr	r0, [pc, #480]	; (80017ac <StartTaskCom+0x244>)
 80015ca:	f018 fc4b 	bl	8019e64 <iprintf>

	rclc_support_t support;
	rcl_allocator_t allocator;
	rcl_node_t node;

	allocator = rcl_get_default_allocator();
 80015ce:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80015d2:	f5a3 74a2 	sub.w	r4, r3, #324	; 0x144
 80015d6:	463b      	mov	r3, r7
 80015d8:	4618      	mov	r0, r3
 80015da:	f00e fcff 	bl	800ffdc <rcutils_get_default_allocator>
 80015de:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80015e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80015e6:	461d      	mov	r5, r3
 80015e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ec:	682b      	ldr	r3, [r5, #0]
 80015ee:	6023      	str	r3, [r4, #0]

	//create init_options
	rclc_support_init(&support, 0, NULL, &allocator);
 80015f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015f4:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80015f8:	2200      	movs	r2, #0
 80015fa:	2100      	movs	r1, #0
 80015fc:	f00e fc00 	bl	800fe00 <rclc_support_init>

	// create node
	rclc_node_init_default(&node, "pnav32", "", &support);
 8001600:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001604:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001608:	4a69      	ldr	r2, [pc, #420]	; (80017b0 <StartTaskCom+0x248>)
 800160a:	496a      	ldr	r1, [pc, #424]	; (80017b4 <StartTaskCom+0x24c>)
 800160c:	f00e fc42 	bl	800fe94 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_default( &publisher_int32, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32), "pInt32");
 8001610:	f00f fa74 	bl	8010afc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8001614:	4602      	mov	r2, r0
 8001616:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800161a:	f507 70aa 	add.w	r0, r7, #340	; 0x154
 800161e:	4b66      	ldr	r3, [pc, #408]	; (80017b8 <StartTaskCom+0x250>)
 8001620:	f00e fc74 	bl	800ff0c <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher_int64, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int64), "pInt64");
 8001624:	f00f fa82 	bl	8010b2c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64>
 8001628:	4602      	mov	r2, r0
 800162a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800162e:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8001632:	4b62      	ldr	r3, [pc, #392]	; (80017bc <StartTaskCom+0x254>)
 8001634:	f00e fc6a 	bl	800ff0c <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher_color, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, ColorRGBA), "pColorRGBA");
 8001638:	f00f fa48 	bl	8010acc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>
 800163c:	4602      	mov	r2, r0
 800163e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001642:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001646:	4b5e      	ldr	r3, [pc, #376]	; (80017c0 <StartTaskCom+0x258>)
 8001648:	f00e fc60 	bl	800ff0c <rclc_publisher_init_default>
//	rclc_publisher_init_default( &publisher_batt, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, BatterySta), "pBatt");
	rclc_publisher_init_default( &publisher_temp, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Temperature), "pTemp");
 800164c:	f00f f992 	bl	8010974 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>
 8001650:	4602      	mov	r2, r0
 8001652:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001656:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 800165a:	4b5a      	ldr	r3, [pc, #360]	; (80017c4 <StartTaskCom+0x25c>)
 800165c:	f00e fc56 	bl	800ff0c <rclc_publisher_init_default>
//	rclc_publisher_init_default( &publisher_float64m, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray), "pFloat64M");

	// preinit with random test value
	msgInt32.data = 1;
 8001660:	2301      	movs	r3, #1
 8001662:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	msgInt64.data = 10;
 8001666:	f04f 020a 	mov.w	r2, #10
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	e9c7 2350 	strd	r2, r3, [r7, #320]	; 0x140
//	msgBattery.cell_temperature = seqTemperature;
//	msgBattery.location = strLocation;
//	msgBattery.serial_number = strSerialNumber;


	msgTemperature.variance = 0;
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	msgTemperature.temperature = (double)(45);
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	4b51      	ldr	r3, [pc, #324]	; (80017c8 <StartTaskCom+0x260>)
 8001684:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0


	msgColorRGBA.r= 127;
 8001688:	4b50      	ldr	r3, [pc, #320]	; (80017cc <StartTaskCom+0x264>)
 800168a:	677b      	str	r3, [r7, #116]	; 0x74
	msgColorRGBA.g= 127;
 800168c:	4b4f      	ldr	r3, [pc, #316]	; (80017cc <StartTaskCom+0x264>)
 800168e:	67bb      	str	r3, [r7, #120]	; 0x78
	msgColorRGBA.b= 100;
 8001690:	4b4f      	ldr	r3, [pc, #316]	; (80017d0 <StartTaskCom+0x268>)
 8001692:	67fb      	str	r3, [r7, #124]	; 0x7c
	msgColorRGBA.a= 200;
 8001694:	4b4f      	ldr	r3, [pc, #316]	; (80017d4 <StartTaskCom+0x26c>)
 8001696:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  for(;;)
  {

	// Random data update before publish
	msgInt32.data++;
 800169a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800169e:	3301      	adds	r3, #1
 80016a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	msgInt64.data++;
 80016a4:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 80016a8:	f112 0801 	adds.w	r8, r2, #1
 80016ac:	f143 0900 	adc.w	r9, r3, #0
 80016b0:	e9c7 8950 	strd	r8, r9, [r7, #320]	; 0x140
	msgBattery.voltage += 0.001;
 80016b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff55 	bl	8000568 <__aeabi_f2d>
 80016be:	a330      	add	r3, pc, #192	; (adr r3, 8001780 <StartTaskCom+0x218>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe fdf2 	bl	80002ac <__adddf3>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7fe ffa2 	bl	8000618 <__aeabi_d2f>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	//msg3.temperature += 0.001;
	msgColorRGBA.g++;
 80016da:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80016de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016e6:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78


	// Led ON
	HAL_GPIO_WritePin(O_LED_D3_GPIO_Port, O_LED_D3_Pin, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	483a      	ldr	r0, [pc, #232]	; (80017d8 <StartTaskCom+0x270>)
 80016f0:	f002 fd20 	bl	8004134 <HAL_GPIO_WritePin>

	rcl_ret_t ret;
	ret = rcl_publish(&publisher_int32, &msgInt32, NULL);		// OK
 80016f4:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 80016f8:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80016fc:	2200      	movs	r2, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f00e fb5a 	bl	800fdb8 <rcl_publish>
 8001704:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
	ret += rcl_publish(&publisher_int64, &msgInt64, NULL);		// OK
 8001708:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800170c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8001710:	2200      	movs	r2, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f00e fb50 	bl	800fdb8 <rcl_publish>
 8001718:	4602      	mov	r2, r0
 800171a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800171e:	4413      	add	r3, r2
 8001720:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
	ret += rcl_publish(&publisher_color, &msgColorRGBA, NULL);	// OK
 8001724:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001728:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800172c:	2200      	movs	r2, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f00e fb42 	bl	800fdb8 <rcl_publish>
 8001734:	4602      	mov	r2, r0
 8001736:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800173a:	4413      	add	r3, r2
 800173c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
//	ret += rcl_publish(&publisher_batt, &msgBattery, NULL);
	ret += rcl_publish(&publisher_temp, &msgTemperature, NULL);
 8001740:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001744:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001748:	2200      	movs	r2, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f00e fb34 	bl	800fdb8 <rcl_publish>
 8001750:	4602      	mov	r2, r0
 8001752:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001756:	4413      	add	r3, r2
 8001758:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
//	ret += rcl_publish(&publisher_float64m, &msgFloat64m, NULL);

	if (ret != RCL_RET_OK)
 800175c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001760:	2b00      	cmp	r3, #0
 8001762:	d004      	beq.n	800176e <StartTaskCom+0x206>
	{
	  printf("Error publishing (line %d)\n", __LINE__);
 8001764:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001768:	481c      	ldr	r0, [pc, #112]	; (80017dc <StartTaskCom+0x274>)
 800176a:	f018 fb7b 	bl	8019e64 <iprintf>
	}

	// Led turn Off
	HAL_GPIO_WritePin(O_LED_D3_GPIO_Port, O_LED_D3_Pin, 1);
 800176e:	2201      	movs	r2, #1
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	4819      	ldr	r0, [pc, #100]	; (80017d8 <StartTaskCom+0x270>)
 8001774:	f002 fcde 	bl	8004134 <HAL_GPIO_WritePin>
	osDelay(100);
 8001778:	2064      	movs	r0, #100	; 0x64
 800177a:	f00b f899 	bl	800c8b0 <osDelay>
  {
 800177e:	e78c      	b.n	800169a <StartTaskCom+0x132>
 8001780:	d2f1a9fc 	.word	0xd2f1a9fc
 8001784:	3f50624d 	.word	0x3f50624d
 8001788:	08001449 	.word	0x08001449
 800178c:	080013e1 	.word	0x080013e1
 8001790:	080013c1 	.word	0x080013c1
 8001794:	08001395 	.word	0x08001395
 8001798:	2000a5f4 	.word	0x2000a5f4
 800179c:	08001bc1 	.word	0x08001bc1
 80017a0:	08001c05 	.word	0x08001c05
 80017a4:	08001c3d 	.word	0x08001c3d
 80017a8:	08001ca9 	.word	0x08001ca9
 80017ac:	0801b278 	.word	0x0801b278
 80017b0:	0801b2a0 	.word	0x0801b2a0
 80017b4:	0801b2a4 	.word	0x0801b2a4
 80017b8:	0801b2ac 	.word	0x0801b2ac
 80017bc:	0801b2b4 	.word	0x0801b2b4
 80017c0:	0801b2bc 	.word	0x0801b2bc
 80017c4:	0801b2c8 	.word	0x0801b2c8
 80017c8:	40468000 	.word	0x40468000
 80017cc:	42fe0000 	.word	0x42fe0000
 80017d0:	42c80000 	.word	0x42c80000
 80017d4:	43480000 	.word	0x43480000
 80017d8:	40020000 	.word	0x40020000
 80017dc:	0801b2d0 	.word	0x0801b2d0

080017e0 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB9   ------> S_TIM11_CH1
*/
void MX_GPIO_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08c      	sub	sp, #48	; 0x30
 80017e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
 80017fa:	4b59      	ldr	r3, [pc, #356]	; (8001960 <MX_GPIO_Init+0x180>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	4a58      	ldr	r2, [pc, #352]	; (8001960 <MX_GPIO_Init+0x180>)
 8001800:	f043 0310 	orr.w	r3, r3, #16
 8001804:	6313      	str	r3, [r2, #48]	; 0x30
 8001806:	4b56      	ldr	r3, [pc, #344]	; (8001960 <MX_GPIO_Init+0x180>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	4b52      	ldr	r3, [pc, #328]	; (8001960 <MX_GPIO_Init+0x180>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a51      	ldr	r2, [pc, #324]	; (8001960 <MX_GPIO_Init+0x180>)
 800181c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b4f      	ldr	r3, [pc, #316]	; (8001960 <MX_GPIO_Init+0x180>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	4b4b      	ldr	r3, [pc, #300]	; (8001960 <MX_GPIO_Init+0x180>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a4a      	ldr	r2, [pc, #296]	; (8001960 <MX_GPIO_Init+0x180>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b48      	ldr	r3, [pc, #288]	; (8001960 <MX_GPIO_Init+0x180>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b44      	ldr	r3, [pc, #272]	; (8001960 <MX_GPIO_Init+0x180>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a43      	ldr	r2, [pc, #268]	; (8001960 <MX_GPIO_Init+0x180>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b41      	ldr	r3, [pc, #260]	; (8001960 <MX_GPIO_Init+0x180>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	4b3d      	ldr	r3, [pc, #244]	; (8001960 <MX_GPIO_Init+0x180>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a3c      	ldr	r2, [pc, #240]	; (8001960 <MX_GPIO_Init+0x180>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b3a      	ldr	r3, [pc, #232]	; (8001960 <MX_GPIO_Init+0x180>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	607b      	str	r3, [r7, #4]
 8001886:	4b36      	ldr	r3, [pc, #216]	; (8001960 <MX_GPIO_Init+0x180>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a35      	ldr	r2, [pc, #212]	; (8001960 <MX_GPIO_Init+0x180>)
 800188c:	f043 0308 	orr.w	r3, r3, #8
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b33      	ldr	r3, [pc, #204]	; (8001960 <MX_GPIO_Init+0x180>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0308 	and.w	r3, r3, #8
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, O_LED_D2_Pin|O_LED_D3_Pin|O_PWR_MOT_EN_Pin, GPIO_PIN_RESET);
 800189e:	2200      	movs	r2, #0
 80018a0:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 80018a4:	482f      	ldr	r0, [pc, #188]	; (8001964 <MX_GPIO_Init+0x184>)
 80018a6:	f002 fc45 	bl	8004134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, O_MOT_ENABLE_Pin|O_PWR_SBC_EN_Pin|O_SPI_CS2_Pin|O_SPI_CS1_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 6164 	mov.w	r1, #3648	; 0xe40
 80018b0:	482d      	ldr	r0, [pc, #180]	; (8001968 <MX_GPIO_Init+0x188>)
 80018b2:	f002 fc3f 	bl	8004134 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O_PWR_REG_EN_GPIO_Port, O_PWR_REG_EN_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018bc:	482b      	ldr	r0, [pc, #172]	; (800196c <MX_GPIO_Init+0x18c>)
 80018be:	f002 fc39 	bl	8004134 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = I_KEY1_Pin|I_KEY0_Pin;
 80018c2:	2318      	movs	r3, #24
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	4826      	ldr	r0, [pc, #152]	; (8001970 <MX_GPIO_Init+0x190>)
 80018d6:	f002 fa91 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = O_LED_D2_Pin|O_LED_D3_Pin|O_PWR_MOT_EN_Pin;
 80018da:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80018de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e0:	2301      	movs	r3, #1
 80018e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	4619      	mov	r1, r3
 80018f2:	481c      	ldr	r0, [pc, #112]	; (8001964 <MX_GPIO_Init+0x184>)
 80018f4:	f002 fa82 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = O_MOT_ENABLE_Pin|O_PWR_SBC_EN_Pin|O_SPI_CS2_Pin|O_SPI_CS1_Pin;
 80018f8:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fe:	2301      	movs	r3, #1
 8001900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190a:	f107 031c 	add.w	r3, r7, #28
 800190e:	4619      	mov	r1, r3
 8001910:	4815      	ldr	r0, [pc, #84]	; (8001968 <MX_GPIO_Init+0x188>)
 8001912:	f002 fa73 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_PWR_REG_EN_Pin;
 8001916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800191a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191c:	2301      	movs	r3, #1
 800191e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(O_PWR_REG_EN_GPIO_Port, &GPIO_InitStruct);
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	4619      	mov	r1, r3
 800192e:	480f      	ldr	r0, [pc, #60]	; (800196c <MX_GPIO_Init+0x18c>)
 8001930:	f002 fa64 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TIM_AUX2_PWM_Pin;
 8001934:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001946:	2303      	movs	r3, #3
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TIM_AUX2_PWM_GPIO_Port, &GPIO_InitStruct);
 800194a:	f107 031c 	add.w	r3, r7, #28
 800194e:	4619      	mov	r1, r3
 8001950:	4806      	ldr	r0, [pc, #24]	; (800196c <MX_GPIO_Init+0x18c>)
 8001952:	f002 fa53 	bl	8003dfc <HAL_GPIO_Init>

}
 8001956:	bf00      	nop
 8001958:	3730      	adds	r7, #48	; 0x30
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	40020000 	.word	0x40020000
 8001968:	40020800 	.word	0x40020800
 800196c:	40020400 	.word	0x40020400
 8001970:	40021000 	.word	0x40021000

08001974 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <MX_I2C2_Init+0x50>)
 800197a:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <MX_I2C2_Init+0x54>)
 800197c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_I2C2_Init+0x50>)
 8001980:	4a12      	ldr	r2, [pc, #72]	; (80019cc <MX_I2C2_Init+0x58>)
 8001982:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001984:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <MX_I2C2_Init+0x50>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <MX_I2C2_Init+0x50>)
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001990:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_I2C2_Init+0x50>)
 8001992:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001996:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <MX_I2C2_Init+0x50>)
 800199a:	2200      	movs	r2, #0
 800199c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_I2C2_Init+0x50>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <MX_I2C2_Init+0x50>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_I2C2_Init+0x50>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019b0:	4804      	ldr	r0, [pc, #16]	; (80019c4 <MX_I2C2_Init+0x50>)
 80019b2:	f002 fbd9 	bl	8004168 <HAL_I2C_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019bc:	f000 f8fa 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	2000a2ec 	.word	0x2000a2ec
 80019c8:	40005800 	.word	0x40005800
 80019cc:	000186a0 	.word	0x000186a0

080019d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	; 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a19      	ldr	r2, [pc, #100]	; (8001a54 <HAL_I2C_MspInit+0x84>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d12c      	bne.n	8001a4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <HAL_I2C_MspInit+0x88>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <HAL_I2C_MspInit+0x88>)
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_I2C_MspInit+0x88>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8001a0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a14:	2312      	movs	r3, #18
 8001a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a20:	2304      	movs	r3, #4
 8001a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480c      	ldr	r0, [pc, #48]	; (8001a5c <HAL_I2C_MspInit+0x8c>)
 8001a2c:	f002 f9e6 	bl	8003dfc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <HAL_I2C_MspInit+0x88>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <HAL_I2C_MspInit+0x88>)
 8001a3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_I2C_MspInit+0x88>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	3728      	adds	r7, #40	; 0x28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40005800 	.word	0x40005800
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020400 	.word	0x40020400

08001a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a64:	f001 fa02 	bl	8002e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a68:	f000 f828 	bl	8001abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a6c:	f7ff feb8 	bl	80017e0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001a70:	f000 fc72 	bl	8002358 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001a74:	f000 fcc8 	bl	8002408 <MX_TIM2_Init>
  MX_TIM8_Init();
 8001a78:	f000 fdf4 	bl	8002664 <MX_TIM8_Init>
  MX_I2C2_Init();
 8001a7c:	f7ff ff7a 	bl	8001974 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001a80:	f000 fa38 	bl	8001ef4 <MX_SPI1_Init>
  MX_DMA_Init();
 8001a84:	f7ff fc56 	bl	8001334 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001a88:	f001 f88e 	bl	8002ba8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001a8c:	f7fe ffe6 	bl	8000a5c <MX_ADC1_Init>
  MX_ADC3_Init();
 8001a90:	f7ff f836 	bl	8000b00 <MX_ADC3_Init>
  MX_TIM3_Init();
 8001a94:	f000 fd0c 	bl	80024b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001a98:	f000 fd86 	bl	80025a8 <MX_TIM4_Init>
  MX_UART5_Init();
 8001a9c:	f001 f85a 	bl	8002b54 <MX_UART5_Init>
  MX_CRC_Init();
 8001aa0:	f7ff f9c8 	bl	8000e34 <MX_CRC_Init>
  MX_RNG_Init();
 8001aa4:	f000 f9f0 	bl	8001e88 <MX_RNG_Init>
  MX_TIM14_Init();
 8001aa8:	f000 fe8a 	bl	80027c0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001aac:	f00a fe24 	bl	800c6f8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001ab0:	f7ff fd1e 	bl	80014f0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001ab4:	f00a fe44 	bl	800c740 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <main+0x58>
	...

08001abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b094      	sub	sp, #80	; 0x50
 8001ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac2:	f107 0320 	add.w	r3, r7, #32
 8001ac6:	2230      	movs	r2, #48	; 0x30
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f018 f8cc 	bl	8019c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <SystemClock_Config+0xcc>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	4a27      	ldr	r2, [pc, #156]	; (8001b88 <SystemClock_Config+0xcc>)
 8001aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aee:	6413      	str	r3, [r2, #64]	; 0x40
 8001af0:	4b25      	ldr	r3, [pc, #148]	; (8001b88 <SystemClock_Config+0xcc>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001afc:	2300      	movs	r3, #0
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <SystemClock_Config+0xd0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a21      	ldr	r2, [pc, #132]	; (8001b8c <SystemClock_Config+0xd0>)
 8001b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <SystemClock_Config+0xd0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b22:	2302      	movs	r3, #2
 8001b24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b30:	23a8      	movs	r3, #168	; 0xa8
 8001b32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b34:	2302      	movs	r3, #2
 8001b36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b38:	2307      	movs	r3, #7
 8001b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b3c:	f107 0320 	add.w	r3, r7, #32
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 fed3 	bl	80058ec <HAL_RCC_OscConfig>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b4c:	f000 f832 	bl	8001bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b50:	230f      	movs	r3, #15
 8001b52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b54:	2302      	movs	r3, #2
 8001b56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	2105      	movs	r1, #5
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f004 f934 	bl	8005ddc <HAL_RCC_ClockConfig>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b7a:	f000 f81b 	bl	8001bb4 <Error_Handler>
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3750      	adds	r7, #80	; 0x50
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40007000 	.word	0x40007000

08001b90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ba2:	f001 f985 	bl	8002eb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40014400 	.word	0x40014400

08001bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb8:	b672      	cpsid	i
}
 8001bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <Error_Handler+0x8>
	...

08001bc0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <microros_allocate+0x3c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <microros_allocate+0x3c>)
 8001bd8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <microros_allocate+0x40>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4413      	add	r3, r2
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <microros_allocate+0x40>)
 8001be8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff f958 	bl	8000ea0 <pvPortMallocMicroROS>
 8001bf0:	4603      	mov	r3, r0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	2000a340 	.word	0x2000a340
 8001c00:	2000a344 	.word	0x2000a344

08001c04 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00c      	beq.n	8001c2e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff fa61 	bl	80010dc <getBlockSize>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4a06      	ldr	r2, [pc, #24]	; (8001c38 <microros_deallocate+0x34>)
 8001c1e:	6812      	ldr	r2, [r2, #0]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <microros_deallocate+0x34>)
 8001c26:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff f9fd 	bl	8001028 <vPortFreeMicroROS>
  }
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000a344 	.word	0x2000a344

08001c3c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <microros_reallocate+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	4413      	add	r3, r2
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <microros_reallocate+0x64>)
 8001c56:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <microros_reallocate+0x68>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	4413      	add	r3, r2
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <microros_reallocate+0x68>)
 8001c66:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d104      	bne.n	8001c78 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001c6e:	68b8      	ldr	r0, [r7, #8]
 8001c70:	f7ff f916 	bl	8000ea0 <pvPortMallocMicroROS>
 8001c74:	4603      	mov	r3, r0
 8001c76:	e00e      	b.n	8001c96 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f7ff fa2f 	bl	80010dc <getBlockSize>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <microros_reallocate+0x68>)
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <microros_reallocate+0x68>)
 8001c8a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001c8c:	68b9      	ldr	r1, [r7, #8]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f7ff fa42 	bl	8001118 <pvPortReallocMicroROS>
 8001c94:	4603      	mov	r3, r0
  }
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2000a340 	.word	0x2000a340
 8001ca4:	2000a344 	.word	0x2000a344

08001ca8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	4a0c      	ldr	r2, [pc, #48]	; (8001cf0 <microros_zero_allocate+0x48>)
 8001cbe:	6812      	ldr	r2, [r2, #0]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <microros_zero_allocate+0x48>)
 8001cc6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	fb02 f303 	mul.w	r3, r2, r3
 8001cd0:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <microros_zero_allocate+0x4c>)
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <microros_zero_allocate+0x4c>)
 8001cda:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f7ff fa47 	bl	8001172 <pvPortCallocMicroROS>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	2000a340 	.word	0x2000a340
 8001cf4:	2000a344 	.word	0x2000a344

08001cf8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001cf8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001d0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d0e:	a320      	add	r3, pc, #128	; (adr r3, 8001d90 <UTILS_NanosecondsToTimespec+0x98>)
 8001d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d14:	f7fe fcd0 	bl	80006b8 <__aeabi_ldivmod>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001d22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d26:	a31a      	add	r3, pc, #104	; (adr r3, 8001d90 <UTILS_NanosecondsToTimespec+0x98>)
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	f7fe fcc4 	bl	80006b8 <__aeabi_ldivmod>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	da20      	bge.n	8001d7e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	4a11      	ldr	r2, [pc, #68]	; (8001d88 <UTILS_NanosecondsToTimespec+0x90>)
 8001d42:	fb82 1203 	smull	r1, r2, r2, r3
 8001d46:	1712      	asrs	r2, r2, #28
 8001d48:	17db      	asrs	r3, r3, #31
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	6979      	ldr	r1, [r7, #20]
 8001d58:	17c8      	asrs	r0, r1, #31
 8001d5a:	460c      	mov	r4, r1
 8001d5c:	4605      	mov	r5, r0
 8001d5e:	ebb2 0804 	subs.w	r8, r2, r4
 8001d62:	eb63 0905 	sbc.w	r9, r3, r5
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	4906      	ldr	r1, [pc, #24]	; (8001d8c <UTILS_NanosecondsToTimespec+0x94>)
 8001d74:	fb01 f303 	mul.w	r3, r1, r3
 8001d78:	441a      	add	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
    }
}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d88:	44b82fa1 	.word	0x44b82fa1
 8001d8c:	3b9aca00 	.word	0x3b9aca00
 8001d90:	3b9aca00 	.word	0x3b9aca00
 8001d94:	00000000 	.word	0x00000000

08001d98 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d9c:	b08e      	sub	sp, #56	; 0x38
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6278      	str	r0, [r7, #36]	; 0x24
 8001da2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001da4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001da8:	2300      	movs	r3, #0
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	f04f 0300 	mov.w	r3, #0
 8001db6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f00c f850 	bl	800de64 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc6:	17da      	asrs	r2, r3, #31
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	61fa      	str	r2, [r7, #28]
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	69b9      	ldr	r1, [r7, #24]
 8001dd6:	000b      	movs	r3, r1
 8001dd8:	2200      	movs	r2, #0
 8001dda:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	2200      	movs	r2, #0
 8001de2:	461c      	mov	r4, r3
 8001de4:	4615      	mov	r5, r2
 8001de6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001dea:	1911      	adds	r1, r2, r4
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	416b      	adcs	r3, r5
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001df6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001dfa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	f04f 0400 	mov.w	r4, #0
 8001e06:	f04f 0500 	mov.w	r5, #0
 8001e0a:	015d      	lsls	r5, r3, #5
 8001e0c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001e10:	0154      	lsls	r4, r2, #5
 8001e12:	4622      	mov	r2, r4
 8001e14:	462b      	mov	r3, r5
 8001e16:	ebb2 0800 	subs.w	r8, r2, r0
 8001e1a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001e2a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001e2e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001e32:	4690      	mov	r8, r2
 8001e34:	4699      	mov	r9, r3
 8001e36:	eb18 0a00 	adds.w	sl, r8, r0
 8001e3a:	eb49 0b01 	adc.w	fp, r9, r1
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e4a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e4e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e52:	ebb2 040a 	subs.w	r4, r2, sl
 8001e56:	603c      	str	r4, [r7, #0]
 8001e58:	eb63 030b 	sbc.w	r3, r3, fp
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e62:	4623      	mov	r3, r4
 8001e64:	181b      	adds	r3, r3, r0
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	462b      	mov	r3, r5
 8001e6a:	eb41 0303 	adc.w	r3, r1, r3
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	6a3a      	ldr	r2, [r7, #32]
 8001e72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e76:	f7ff ff3f 	bl	8001cf8 <UTILS_NanosecondsToTimespec>

    return 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3738      	adds	r7, #56	; 0x38
 8001e80:	46bd      	mov	sp, r7
 8001e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001e88 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <MX_RNG_Init+0x20>)
 8001e8e:	4a07      	ldr	r2, [pc, #28]	; (8001eac <MX_RNG_Init+0x24>)
 8001e90:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_RNG_Init+0x20>)
 8001e94:	f004 f9f4 	bl	8006280 <HAL_RNG_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001e9e:	f7ff fe89 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	2000a348 	.word	0x2000a348
 8001eac:	50060800 	.word	0x50060800

08001eb0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0b      	ldr	r2, [pc, #44]	; (8001eec <HAL_RNG_MspInit+0x3c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d10d      	bne.n	8001ede <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <HAL_RNG_MspInit+0x40>)
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <HAL_RNG_MspInit+0x40>)
 8001ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ed0:	6353      	str	r3, [r2, #52]	; 0x34
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <HAL_RNG_MspInit+0x40>)
 8001ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	50060800 	.word	0x50060800
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ef8:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001efa:	4a18      	ldr	r2, [pc, #96]	; (8001f5c <MX_SPI1_Init+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001efe:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f06:	4b14      	ldr	r3, [pc, #80]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f12:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f40:	220a      	movs	r2, #10
 8001f42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f44:	4804      	ldr	r0, [pc, #16]	; (8001f58 <MX_SPI1_Init+0x64>)
 8001f46:	f004 f9c5 	bl	80062d4 <HAL_SPI_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f50:	f7ff fe30 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	2000a358 	.word	0x2000a358
 8001f5c:	40013000 	.word	0x40013000

08001f60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a19      	ldr	r2, [pc, #100]	; (8001fe4 <HAL_SPI_MspInit+0x84>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d12b      	bne.n	8001fda <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001f8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_SPI_MspInit+0x88>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001fba:	2338      	movs	r3, #56	; 0x38
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fca:	2305      	movs	r3, #5
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4805      	ldr	r0, [pc, #20]	; (8001fec <HAL_SPI_MspInit+0x8c>)
 8001fd6:	f001 ff11 	bl	8003dfc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001fda:	bf00      	nop
 8001fdc:	3728      	adds	r7, #40	; 0x28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40013000 	.word	0x40013000
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40020400 	.word	0x40020400

08001ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_MspInit+0x54>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4a11      	ldr	r2, [pc, #68]	; (8002044 <HAL_MspInit+0x54>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <HAL_MspInit+0x54>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_MspInit+0x54>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <HAL_MspInit+0x54>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_MspInit+0x54>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	210f      	movs	r1, #15
 8002032:	f06f 0001 	mvn.w	r0, #1
 8002036:	f001 fa99 	bl	800356c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800

08002048 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b08c      	sub	sp, #48	; 0x30
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002058:	2200      	movs	r2, #0
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	2019      	movs	r0, #25
 800205e:	f001 fa85 	bl	800356c <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002062:	2019      	movs	r0, #25
 8002064:	f001 fa9e 	bl	80035a4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <HAL_InitTick+0xa4>)
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	4a1e      	ldr	r2, [pc, #120]	; (80020ec <HAL_InitTick+0xa4>)
 8002072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002076:	6453      	str	r3, [r2, #68]	; 0x44
 8002078:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_InitTick+0xa4>)
 800207a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002084:	f107 0210 	add.w	r2, r7, #16
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f004 f8c4 	bl	800621c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002094:	f004 f8ae 	bl	80061f4 <HAL_RCC_GetPCLK2Freq>
 8002098:	4603      	mov	r3, r0
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a0:	4a13      	ldr	r2, [pc, #76]	; (80020f0 <HAL_InitTick+0xa8>)
 80020a2:	fba2 2303 	umull	r2, r3, r2, r3
 80020a6:	0c9b      	lsrs	r3, r3, #18
 80020a8:	3b01      	subs	r3, #1
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <HAL_InitTick+0xac>)
 80020ae:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <HAL_InitTick+0xb0>)
 80020b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_InitTick+0xac>)
 80020b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020b8:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80020ba:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <HAL_InitTick+0xac>)
 80020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020be:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <HAL_InitTick+0xac>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_InitTick+0xac>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80020cc:	4809      	ldr	r0, [pc, #36]	; (80020f4 <HAL_InitTick+0xac>)
 80020ce:	f004 f98a 	bl	80063e6 <HAL_TIM_Base_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d104      	bne.n	80020e2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80020d8:	4806      	ldr	r0, [pc, #24]	; (80020f4 <HAL_InitTick+0xac>)
 80020da:	f004 f9d3 	bl	8006484 <HAL_TIM_Base_Start_IT>
 80020de:	4603      	mov	r3, r0
 80020e0:	e000      	b.n	80020e4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3730      	adds	r7, #48	; 0x30
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40023800 	.word	0x40023800
 80020f0:	431bde83 	.word	0x431bde83
 80020f4:	2000a3b0 	.word	0x2000a3b0
 80020f8:	40014400 	.word	0x40014400

080020fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <NMI_Handler+0x4>

08002102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002106:	e7fe      	b.n	8002106 <HardFault_Handler+0x4>

08002108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800210c:	e7fe      	b.n	800210c <MemManage_Handler+0x4>

0800210e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002112:	e7fe      	b.n	8002112 <BusFault_Handler+0x4>

08002114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002118:	e7fe      	b.n	8002118 <UsageFault_Handler+0x4>

0800211a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800212c:	4803      	ldr	r0, [pc, #12]	; (800213c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800212e:	f004 fbb6 	bl	800689e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002132:	4803      	ldr	r0, [pc, #12]	; (8002140 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002134:	f004 fbb3 	bl	800689e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}
 800213c:	2000a400 	.word	0x2000a400
 8002140:	2000a3b0 	.word	0x2000a3b0

08002144 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <USART1_IRQHandler+0x10>)
 800214a:	f005 fdcd 	bl	8007ce8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2000a5f4 	.word	0x2000a5f4

08002158 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <DMA2_Stream0_IRQHandler+0x10>)
 800215e:	f001 fbe3 	bl	8003928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200006c4 	.word	0x200006c4

0800216c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <DMA2_Stream2_IRQHandler+0x10>)
 8002172:	f001 fbd9 	bl	8003928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	2000a638 	.word	0x2000a638

08002180 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <OTG_FS_IRQHandler+0x10>)
 8002186:	f002 fa83 	bl	8004690 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200105ec 	.word	0x200105ec

08002194 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <DMA2_Stream7_IRQHandler+0x10>)
 800219a:	f001 fbc5 	bl	8003928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000a698 	.word	0x2000a698

080021a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
	return 1;
 80021ac:	2301      	movs	r3, #1
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <_kill>:

int _kill(int pid, int sig)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021c2:	f017 fb45 	bl	8019850 <__errno>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2216      	movs	r2, #22
 80021ca:	601a      	str	r2, [r3, #0]
	return -1;
 80021cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <_exit>:

void _exit (int status)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ffe7 	bl	80021b8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021ea:	e7fe      	b.n	80021ea <_exit+0x12>

080021ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	e00a      	b.n	8002214 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021fe:	f3af 8000 	nop.w
 8002202:	4601      	mov	r1, r0
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	60ba      	str	r2, [r7, #8]
 800220a:	b2ca      	uxtb	r2, r1
 800220c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3301      	adds	r3, #1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	dbf0      	blt.n	80021fe <_read+0x12>
	}

return len;
 800221c:	687b      	ldr	r3, [r7, #4]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	e009      	b.n	800224c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	60ba      	str	r2, [r7, #8]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3301      	adds	r3, #1
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	dbf1      	blt.n	8002238 <_write+0x12>
	}
	return len;
 8002254:	687b      	ldr	r3, [r7, #4]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <_sbrk>:

caddr_t _sbrk(int incr) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
    extern char __heap_start__ asm("end");  // Defined by the linker.
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == NULL) heap_end = &__heap_start__;
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <_sbrk+0x5c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <_sbrk+0x16>
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <_sbrk+0x5c>)
 8002272:	4a13      	ldr	r2, [pc, #76]	; (80022c0 <_sbrk+0x60>)
 8002274:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 8002276:	4b11      	ldr	r3, [pc, #68]	; (80022bc <_sbrk+0x5c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]

    if (heap_end + incr > &_estack - _Min_Stack_Size) {
 800227c:	4b0f      	ldr	r3, [pc, #60]	; (80022bc <_sbrk+0x5c>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	441a      	add	r2, r3
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <_sbrk+0x64>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	425b      	negs	r3, r3
 800228a:	490f      	ldr	r1, [pc, #60]	; (80022c8 <_sbrk+0x68>)
 800228c:	440b      	add	r3, r1
 800228e:	429a      	cmp	r2, r3
 8002290:	d908      	bls.n	80022a4 <_sbrk+0x44>
    		__asm("BKPT #0\n");
 8002292:	be00      	bkpt	0x0000
        errno = ENOMEM;
 8002294:	f017 fadc 	bl	8019850 <__errno>
 8002298:	4603      	mov	r3, r0
 800229a:	220c      	movs	r2, #12
 800229c:	601a      	str	r2, [r3, #0]
        return (caddr_t)-1;
 800229e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022a2:	e006      	b.n	80022b2 <_sbrk+0x52>

    }

    heap_end += incr;
 80022a4:	4b05      	ldr	r3, [pc, #20]	; (80022bc <_sbrk+0x5c>)
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	4a03      	ldr	r2, [pc, #12]	; (80022bc <_sbrk+0x5c>)
 80022ae:	6013      	str	r3, [r2, #0]
    return (caddr_t)prev_heap_end;
 80022b0:	68fb      	ldr	r3, [r7, #12]

}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000a3fc 	.word	0x2000a3fc
 80022c0:	20015830 	.word	0x20015830
 80022c4:	00000400 	.word	0x00000400
 80022c8:	20020000 	.word	0x20020000

080022cc <_close>:

int _close(int file)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	return -1;
 80022d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022f4:	605a      	str	r2, [r3, #4]
	return 0;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <_isatty>:

int _isatty(int file)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	return 1;
 800230c:	2301      	movs	r3, #1
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800231a:	b480      	push	{r7}
 800231c:	b085      	sub	sp, #20
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
	return 0;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <SystemInit+0x20>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	4a05      	ldr	r2, [pc, #20]	; (8002354 <SystemInit+0x20>)
 8002340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002344:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b08c      	sub	sp, #48	; 0x30
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800235e:	f107 030c 	add.w	r3, r7, #12
 8002362:	2224      	movs	r2, #36	; 0x24
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f017 fc7e 	bl	8019c68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002374:	4b22      	ldr	r3, [pc, #136]	; (8002400 <MX_TIM1_Init+0xa8>)
 8002376:	4a23      	ldr	r2, [pc, #140]	; (8002404 <MX_TIM1_Init+0xac>)
 8002378:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800237a:	4b21      	ldr	r3, [pc, #132]	; (8002400 <MX_TIM1_Init+0xa8>)
 800237c:	2200      	movs	r2, #0
 800237e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002380:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <MX_TIM1_Init+0xa8>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002386:	4b1e      	ldr	r3, [pc, #120]	; (8002400 <MX_TIM1_Init+0xa8>)
 8002388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800238c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238e:	4b1c      	ldr	r3, [pc, #112]	; (8002400 <MX_TIM1_Init+0xa8>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002394:	4b1a      	ldr	r3, [pc, #104]	; (8002400 <MX_TIM1_Init+0xa8>)
 8002396:	2200      	movs	r2, #0
 8002398:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800239a:	4b19      	ldr	r3, [pc, #100]	; (8002400 <MX_TIM1_Init+0xa8>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023a0:	2303      	movs	r3, #3
 80023a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023a8:	2301      	movs	r3, #1
 80023aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023b4:	2300      	movs	r3, #0
 80023b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023b8:	2301      	movs	r3, #1
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023bc:	2300      	movs	r3, #0
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80023c4:	f107 030c 	add.w	r3, r7, #12
 80023c8:	4619      	mov	r1, r3
 80023ca:	480d      	ldr	r0, [pc, #52]	; (8002400 <MX_TIM1_Init+0xa8>)
 80023cc:	f004 f9c1 	bl	8006752 <HAL_TIM_Encoder_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80023d6:	f7ff fbed 	bl	8001bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023da:	2300      	movs	r3, #0
 80023dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	4619      	mov	r1, r3
 80023e6:	4806      	ldr	r0, [pc, #24]	; (8002400 <MX_TIM1_Init+0xa8>)
 80023e8:	f005 fa20 	bl	800782c <HAL_TIMEx_MasterConfigSynchronization>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80023f2:	f7ff fbdf 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	3730      	adds	r7, #48	; 0x30
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	2000a400 	.word	0x2000a400
 8002404:	40010000 	.word	0x40010000

08002408 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08c      	sub	sp, #48	; 0x30
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	2224      	movs	r2, #36	; 0x24
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f017 fc26 	bl	8019c68 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002424:	4b21      	ldr	r3, [pc, #132]	; (80024ac <MX_TIM2_Init+0xa4>)
 8002426:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800242a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800242c:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <MX_TIM2_Init+0xa4>)
 800242e:	2200      	movs	r2, #0
 8002430:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002432:	4b1e      	ldr	r3, [pc, #120]	; (80024ac <MX_TIM2_Init+0xa4>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002438:	4b1c      	ldr	r3, [pc, #112]	; (80024ac <MX_TIM2_Init+0xa4>)
 800243a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800243e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002440:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <MX_TIM2_Init+0xa4>)
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002446:	4b19      	ldr	r3, [pc, #100]	; (80024ac <MX_TIM2_Init+0xa4>)
 8002448:	2200      	movs	r2, #0
 800244a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800244c:	2303      	movs	r3, #3
 800244e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002450:	2300      	movs	r3, #0
 8002452:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002454:	2301      	movs	r3, #1
 8002456:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002460:	2300      	movs	r3, #0
 8002462:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002464:	2301      	movs	r3, #1
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002468:	2300      	movs	r3, #0
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002470:	f107 030c 	add.w	r3, r7, #12
 8002474:	4619      	mov	r1, r3
 8002476:	480d      	ldr	r0, [pc, #52]	; (80024ac <MX_TIM2_Init+0xa4>)
 8002478:	f004 f96b 	bl	8006752 <HAL_TIM_Encoder_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002482:	f7ff fb97 	bl	8001bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248a:	2300      	movs	r3, #0
 800248c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800248e:	1d3b      	adds	r3, r7, #4
 8002490:	4619      	mov	r1, r3
 8002492:	4806      	ldr	r0, [pc, #24]	; (80024ac <MX_TIM2_Init+0xa4>)
 8002494:	f005 f9ca 	bl	800782c <HAL_TIMEx_MasterConfigSynchronization>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800249e:	f7ff fb89 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	3730      	adds	r7, #48	; 0x30
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	2000a448 	.word	0x2000a448

080024b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08e      	sub	sp, #56	; 0x38
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
 80024d0:	615a      	str	r2, [r3, #20]
 80024d2:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	609a      	str	r2, [r3, #8]
 80024de:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024e0:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <MX_TIM3_Init+0xf0>)
 80024e2:	4a30      	ldr	r2, [pc, #192]	; (80025a4 <MX_TIM3_Init+0xf4>)
 80024e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024e6:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <MX_TIM3_Init+0xf0>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ec:	4b2c      	ldr	r3, [pc, #176]	; (80025a0 <MX_TIM3_Init+0xf0>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024f2:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <MX_TIM3_Init+0xf0>)
 80024f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024fa:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <MX_TIM3_Init+0xf0>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002500:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <MX_TIM3_Init+0xf0>)
 8002502:	2200      	movs	r2, #0
 8002504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002506:	4826      	ldr	r0, [pc, #152]	; (80025a0 <MX_TIM3_Init+0xf0>)
 8002508:	f004 f87b 	bl	8006602 <HAL_TIM_PWM_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002512:	f7ff fb4f 	bl	8001bb4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002516:	4822      	ldr	r0, [pc, #136]	; (80025a0 <MX_TIM3_Init+0xf0>)
 8002518:	f004 f8c2 	bl	80066a0 <HAL_TIM_IC_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002522:	f7ff fb47 	bl	8001bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800252e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002532:	4619      	mov	r1, r3
 8002534:	481a      	ldr	r0, [pc, #104]	; (80025a0 <MX_TIM3_Init+0xf0>)
 8002536:	f005 f979 	bl	800782c <HAL_TIMEx_MasterConfigSynchronization>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002540:	f7ff fb38 	bl	8001bb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002544:	2360      	movs	r3, #96	; 0x60
 8002546:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800254c:	2300      	movs	r3, #0
 800254e:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	2208      	movs	r2, #8
 800255a:	4619      	mov	r1, r3
 800255c:	4810      	ldr	r0, [pc, #64]	; (80025a0 <MX_TIM3_Init+0xf0>)
 800255e:	f004 fb9f 	bl	8006ca0 <HAL_TIM_PWM_ConfigChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 8002568:	f7ff fb24 	bl	8001bb4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800256c:	2300      	movs	r3, #0
 800256e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002570:	2301      	movs	r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800257c:	1d3b      	adds	r3, r7, #4
 800257e:	220c      	movs	r2, #12
 8002580:	4619      	mov	r1, r3
 8002582:	4807      	ldr	r0, [pc, #28]	; (80025a0 <MX_TIM3_Init+0xf0>)
 8002584:	f004 faf0 	bl	8006b68 <HAL_TIM_IC_ConfigChannel>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 800258e:	f7ff fb11 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002592:	4803      	ldr	r0, [pc, #12]	; (80025a0 <MX_TIM3_Init+0xf0>)
 8002594:	f000 fa5c 	bl	8002a50 <HAL_TIM_MspPostInit>

}
 8002598:	bf00      	nop
 800259a:	3738      	adds	r7, #56	; 0x38
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	2000a490 	.word	0x2000a490
 80025a4:	40000400 	.word	0x40000400

080025a8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08a      	sub	sp, #40	; 0x28
 80025ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ae:	f107 0320 	add.w	r3, r7, #32
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	60da      	str	r2, [r3, #12]
 80025c4:	611a      	str	r2, [r3, #16]
 80025c6:	615a      	str	r2, [r3, #20]
 80025c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025ca:	4b24      	ldr	r3, [pc, #144]	; (800265c <MX_TIM4_Init+0xb4>)
 80025cc:	4a24      	ldr	r2, [pc, #144]	; (8002660 <MX_TIM4_Init+0xb8>)
 80025ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80025d0:	4b22      	ldr	r3, [pc, #136]	; (800265c <MX_TIM4_Init+0xb4>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d6:	4b21      	ldr	r3, [pc, #132]	; (800265c <MX_TIM4_Init+0xb4>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80025dc:	4b1f      	ldr	r3, [pc, #124]	; (800265c <MX_TIM4_Init+0xb4>)
 80025de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <MX_TIM4_Init+0xb4>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025ea:	4b1c      	ldr	r3, [pc, #112]	; (800265c <MX_TIM4_Init+0xb4>)
 80025ec:	2280      	movs	r2, #128	; 0x80
 80025ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80025f0:	481a      	ldr	r0, [pc, #104]	; (800265c <MX_TIM4_Init+0xb4>)
 80025f2:	f003 ffb7 	bl	8006564 <HAL_TIM_OC_Init>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80025fc:	f7ff fada 	bl	8001bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002600:	2300      	movs	r3, #0
 8002602:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002604:	2300      	movs	r3, #0
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002608:	f107 0320 	add.w	r3, r7, #32
 800260c:	4619      	mov	r1, r3
 800260e:	4813      	ldr	r0, [pc, #76]	; (800265c <MX_TIM4_Init+0xb4>)
 8002610:	f005 f90c 	bl	800782c <HAL_TIMEx_MasterConfigSynchronization>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800261a:	f7ff facb 	bl	8001bb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800262a:	2300      	movs	r3, #0
 800262c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	220c      	movs	r2, #12
 8002632:	4619      	mov	r1, r3
 8002634:	4809      	ldr	r0, [pc, #36]	; (800265c <MX_TIM4_Init+0xb4>)
 8002636:	f004 fa3b 	bl	8006ab0 <HAL_TIM_OC_ConfigChannel>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002640:	f7ff fab8 	bl	8001bb4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_4);
 8002644:	4b05      	ldr	r3, [pc, #20]	; (800265c <MX_TIM4_Init+0xb4>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	69da      	ldr	r2, [r3, #28]
 800264a:	4b04      	ldr	r3, [pc, #16]	; (800265c <MX_TIM4_Init+0xb4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002652:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002654:	bf00      	nop
 8002656:	3728      	adds	r7, #40	; 0x28
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	2000a4d8 	.word	0x2000a4d8
 8002660:	40000800 	.word	0x40000800

08002664 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b096      	sub	sp, #88	; 0x58
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800266a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002678:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	609a      	str	r2, [r3, #8]
 800268e:	60da      	str	r2, [r3, #12]
 8002690:	611a      	str	r2, [r3, #16]
 8002692:	615a      	str	r2, [r3, #20]
 8002694:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002696:	1d3b      	adds	r3, r7, #4
 8002698:	2220      	movs	r2, #32
 800269a:	2100      	movs	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f017 fae3 	bl	8019c68 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80026a2:	4b45      	ldr	r3, [pc, #276]	; (80027b8 <MX_TIM8_Init+0x154>)
 80026a4:	4a45      	ldr	r2, [pc, #276]	; (80027bc <MX_TIM8_Init+0x158>)
 80026a6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80026a8:	4b43      	ldr	r3, [pc, #268]	; (80027b8 <MX_TIM8_Init+0x154>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ae:	4b42      	ldr	r3, [pc, #264]	; (80027b8 <MX_TIM8_Init+0x154>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80026b4:	4b40      	ldr	r3, [pc, #256]	; (80027b8 <MX_TIM8_Init+0x154>)
 80026b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026bc:	4b3e      	ldr	r3, [pc, #248]	; (80027b8 <MX_TIM8_Init+0x154>)
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026c2:	4b3d      	ldr	r3, [pc, #244]	; (80027b8 <MX_TIM8_Init+0x154>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c8:	4b3b      	ldr	r3, [pc, #236]	; (80027b8 <MX_TIM8_Init+0x154>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80026ce:	483a      	ldr	r0, [pc, #232]	; (80027b8 <MX_TIM8_Init+0x154>)
 80026d0:	f003 fe89 	bl	80063e6 <HAL_TIM_Base_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80026da:	f7ff fa6b 	bl	8001bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80026e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026e8:	4619      	mov	r1, r3
 80026ea:	4833      	ldr	r0, [pc, #204]	; (80027b8 <MX_TIM8_Init+0x154>)
 80026ec:	f004 fb9a 	bl	8006e24 <HAL_TIM_ConfigClockSource>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80026f6:	f7ff fa5d 	bl	8001bb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80026fa:	482f      	ldr	r0, [pc, #188]	; (80027b8 <MX_TIM8_Init+0x154>)
 80026fc:	f003 ff81 	bl	8006602 <HAL_TIM_PWM_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002706:	f7ff fa55 	bl	8001bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800270e:	2300      	movs	r3, #0
 8002710:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002712:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002716:	4619      	mov	r1, r3
 8002718:	4827      	ldr	r0, [pc, #156]	; (80027b8 <MX_TIM8_Init+0x154>)
 800271a:	f005 f887 	bl	800782c <HAL_TIMEx_MasterConfigSynchronization>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002724:	f7ff fa46 	bl	8001bb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002728:	2360      	movs	r3, #96	; 0x60
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 512;
 800272c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002732:	2300      	movs	r3, #0
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002736:	2300      	movs	r3, #0
 8002738:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800273a:	2300      	movs	r3, #0
 800273c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002742:	2300      	movs	r3, #0
 8002744:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800274a:	2204      	movs	r2, #4
 800274c:	4619      	mov	r1, r3
 800274e:	481a      	ldr	r0, [pc, #104]	; (80027b8 <MX_TIM8_Init+0x154>)
 8002750:	f004 faa6 	bl	8006ca0 <HAL_TIM_PWM_ConfigChannel>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800275a:	f7ff fa2b 	bl	8001bb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800275e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002762:	2208      	movs	r2, #8
 8002764:	4619      	mov	r1, r3
 8002766:	4814      	ldr	r0, [pc, #80]	; (80027b8 <MX_TIM8_Init+0x154>)
 8002768:	f004 fa9a 	bl	8006ca0 <HAL_TIM_PWM_ConfigChannel>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8002772:	f7ff fa1f 	bl	8001bb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800277e:	2300      	movs	r3, #0
 8002780:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 2;
 8002782:	2302      	movs	r3, #2
 8002784:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800278a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800278e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002790:	2300      	movs	r3, #0
 8002792:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	4619      	mov	r1, r3
 8002798:	4807      	ldr	r0, [pc, #28]	; (80027b8 <MX_TIM8_Init+0x154>)
 800279a:	f005 f8c3 	bl	8007924 <HAL_TIMEx_ConfigBreakDeadTime>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 80027a4:	f7ff fa06 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80027a8:	4803      	ldr	r0, [pc, #12]	; (80027b8 <MX_TIM8_Init+0x154>)
 80027aa:	f000 f951 	bl	8002a50 <HAL_TIM_MspPostInit>

}
 80027ae:	bf00      	nop
 80027b0:	3758      	adds	r7, #88	; 0x58
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	2000a520 	.word	0x2000a520
 80027bc:	40010400 	.word	0x40010400

080027c0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80027c4:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <MX_TIM14_Init+0x40>)
 80027c6:	4a0f      	ldr	r2, [pc, #60]	; (8002804 <MX_TIM14_Init+0x44>)
 80027c8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <MX_TIM14_Init+0x40>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <MX_TIM14_Init+0x40>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <MX_TIM14_Init+0x40>)
 80027d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027dc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <MX_TIM14_Init+0x40>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e4:	4b06      	ldr	r3, [pc, #24]	; (8002800 <MX_TIM14_Init+0x40>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80027ea:	4805      	ldr	r0, [pc, #20]	; (8002800 <MX_TIM14_Init+0x40>)
 80027ec:	f003 fdfb 	bl	80063e6 <HAL_TIM_Base_Init>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80027f6:	f7ff f9dd 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	2000a568 	.word	0x2000a568
 8002804:	40002000 	.word	0x40002000

08002808 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08c      	sub	sp, #48	; 0x30
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 031c 	add.w	r3, r7, #28
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a36      	ldr	r2, [pc, #216]	; (8002900 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d135      	bne.n	8002896 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	4b35      	ldr	r3, [pc, #212]	; (8002904 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	4a34      	ldr	r2, [pc, #208]	; (8002904 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6453      	str	r3, [r2, #68]	; 0x44
 800283a:	4b32      	ldr	r3, [pc, #200]	; (8002904 <HAL_TIM_Encoder_MspInit+0xfc>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	61bb      	str	r3, [r7, #24]
 8002844:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <HAL_TIM_Encoder_MspInit+0xfc>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a2d      	ldr	r2, [pc, #180]	; (8002904 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM_ENC1_A_Pin|TIM_ENC1_B_Pin;
 8002862:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2300      	movs	r3, #0
 8002872:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002874:	2301      	movs	r3, #1
 8002876:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	4619      	mov	r1, r3
 800287e:	4822      	ldr	r0, [pc, #136]	; (8002908 <HAL_TIM_Encoder_MspInit+0x100>)
 8002880:	f001 fabc 	bl	8003dfc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002884:	2200      	movs	r2, #0
 8002886:	2105      	movs	r1, #5
 8002888:	2019      	movs	r0, #25
 800288a:	f000 fe6f 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800288e:	2019      	movs	r0, #25
 8002890:	f000 fe88 	bl	80035a4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002894:	e030      	b.n	80028f8 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM2)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289e:	d12b      	bne.n	80028f8 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028a0:	2300      	movs	r3, #0
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	4b17      	ldr	r3, [pc, #92]	; (8002904 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	4a16      	ldr	r2, [pc, #88]	; (8002904 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6413      	str	r3, [r2, #64]	; 0x40
 80028b0:	4b14      	ldr	r3, [pc, #80]	; (8002904 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	4b10      	ldr	r3, [pc, #64]	; (8002904 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	4a0f      	ldr	r2, [pc, #60]	; (8002904 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028c6:	f043 0301 	orr.w	r3, r3, #1
 80028ca:	6313      	str	r3, [r2, #48]	; 0x30
 80028cc:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_ENC2_B_Pin|TIM_ENC2_A_Pin;
 80028d8:	2322      	movs	r3, #34	; 0x22
 80028da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028dc:	2302      	movs	r3, #2
 80028de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e4:	2300      	movs	r3, #0
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028e8:	2301      	movs	r3, #1
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	4619      	mov	r1, r3
 80028f2:	4805      	ldr	r0, [pc, #20]	; (8002908 <HAL_TIM_Encoder_MspInit+0x100>)
 80028f4:	f001 fa82 	bl	8003dfc <HAL_GPIO_Init>
}
 80028f8:	bf00      	nop
 80028fa:	3730      	adds	r7, #48	; 0x30
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40010000 	.word	0x40010000
 8002904:	40023800 	.word	0x40023800
 8002908:	40020000 	.word	0x40020000

0800290c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002914:	f107 0314 	add.w	r3, r7, #20
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM3)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a19      	ldr	r2, [pc, #100]	; (8002990 <HAL_TIM_PWM_MspInit+0x84>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d12b      	bne.n	8002986 <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_TIM_PWM_MspInit+0x88>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	4a17      	ldr	r2, [pc, #92]	; (8002994 <HAL_TIM_PWM_MspInit+0x88>)
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	6413      	str	r3, [r2, #64]	; 0x40
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <HAL_TIM_PWM_MspInit+0x88>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	4b11      	ldr	r3, [pc, #68]	; (8002994 <HAL_TIM_PWM_MspInit+0x88>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a10      	ldr	r2, [pc, #64]	; (8002994 <HAL_TIM_PWM_MspInit+0x88>)
 8002954:	f043 0302 	orr.w	r3, r3, #2
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_TIM_PWM_MspInit+0x88>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM_FAN_INDEX_Pin;
 8002966:	2302      	movs	r3, #2
 8002968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800296e:	2301      	movs	r3, #1
 8002970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002972:	2300      	movs	r3, #0
 8002974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002976:	2302      	movs	r3, #2
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM_FAN_INDEX_GPIO_Port, &GPIO_InitStruct);
 800297a:	f107 0314 	add.w	r3, r7, #20
 800297e:	4619      	mov	r1, r3
 8002980:	4805      	ldr	r0, [pc, #20]	; (8002998 <HAL_TIM_PWM_MspInit+0x8c>)
 8002982:	f001 fa3b 	bl	8003dfc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002986:	bf00      	nop
 8002988:	3728      	adds	r7, #40	; 0x28
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40000400 	.word	0x40000400
 8002994:	40023800 	.word	0x40023800
 8002998:	40020400 	.word	0x40020400

0800299c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a0b      	ldr	r2, [pc, #44]	; (80029d8 <HAL_TIM_OC_MspInit+0x3c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d10d      	bne.n	80029ca <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <HAL_TIM_OC_MspInit+0x40>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HAL_TIM_OC_MspInit+0x40>)
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	6413      	str	r3, [r2, #64]	; 0x40
 80029be:	4b07      	ldr	r3, [pc, #28]	; (80029dc <HAL_TIM_OC_MspInit+0x40>)
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	40000800 	.word	0x40000800
 80029dc:	40023800 	.word	0x40023800

080029e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b085      	sub	sp, #20
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a15      	ldr	r2, [pc, #84]	; (8002a44 <HAL_TIM_Base_MspInit+0x64>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d10e      	bne.n	8002a10 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	60fb      	str	r3, [r7, #12]
 80029f6:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <HAL_TIM_Base_MspInit+0x68>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4a13      	ldr	r2, [pc, #76]	; (8002a48 <HAL_TIM_Base_MspInit+0x68>)
 80029fc:	f043 0302 	orr.w	r3, r3, #2
 8002a00:	6453      	str	r3, [r2, #68]	; 0x44
 8002a02:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <HAL_TIM_Base_MspInit+0x68>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002a0e:	e012      	b.n	8002a36 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM14)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a0d      	ldr	r2, [pc, #52]	; (8002a4c <HAL_TIM_Base_MspInit+0x6c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d10d      	bne.n	8002a36 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_TIM_Base_MspInit+0x68>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	4a09      	ldr	r2, [pc, #36]	; (8002a48 <HAL_TIM_Base_MspInit+0x68>)
 8002a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a28:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <HAL_TIM_Base_MspInit+0x68>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40010400 	.word	0x40010400
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40002000 	.word	0x40002000

08002a50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	; 0x28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	f107 0314 	add.w	r3, r7, #20
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a34      	ldr	r2, [pc, #208]	; (8002b40 <HAL_TIM_MspPostInit+0xf0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d11e      	bne.n	8002ab0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	4b33      	ldr	r3, [pc, #204]	; (8002b44 <HAL_TIM_MspPostInit+0xf4>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	4a32      	ldr	r2, [pc, #200]	; (8002b44 <HAL_TIM_MspPostInit+0xf4>)
 8002a7c:	f043 0302 	orr.w	r3, r3, #2
 8002a80:	6313      	str	r3, [r2, #48]	; 0x30
 8002a82:	4b30      	ldr	r3, [pc, #192]	; (8002b44 <HAL_TIM_MspPostInit+0xf4>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	613b      	str	r3, [r7, #16]
 8002a8c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = TIM_FAN_PWM_Pin;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	2302      	movs	r3, #2
 8002a94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM_FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4827      	ldr	r0, [pc, #156]	; (8002b48 <HAL_TIM_MspPostInit+0xf8>)
 8002aaa:	f001 f9a7 	bl	8003dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002aae:	e042      	b.n	8002b36 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM8)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a25      	ldr	r2, [pc, #148]	; (8002b4c <HAL_TIM_MspPostInit+0xfc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d13d      	bne.n	8002b36 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	4b21      	ldr	r3, [pc, #132]	; (8002b44 <HAL_TIM_MspPostInit+0xf4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	4a20      	ldr	r2, [pc, #128]	; (8002b44 <HAL_TIM_MspPostInit+0xf4>)
 8002ac4:	f043 0302 	orr.w	r3, r3, #2
 8002ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aca:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <HAL_TIM_MspPostInit+0xf4>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	60bb      	str	r3, [r7, #8]
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <HAL_TIM_MspPostInit+0xf4>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	4a19      	ldr	r2, [pc, #100]	; (8002b44 <HAL_TIM_MspPostInit+0xf4>)
 8002ae0:	f043 0304 	orr.w	r3, r3, #4
 8002ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae6:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <HAL_TIM_MspPostInit+0xf4>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM_MOT1_B_Pin|TIM_MOT2_B_Pin;
 8002af2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af8:	2302      	movs	r3, #2
 8002afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b00:	2300      	movs	r3, #0
 8002b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b04:	2303      	movs	r3, #3
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	480e      	ldr	r0, [pc, #56]	; (8002b48 <HAL_TIM_MspPostInit+0xf8>)
 8002b10:	f001 f974 	bl	8003dfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM_MOT1_A_Pin|TIM_MOT2_A_Pin;
 8002b14:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b26:	2303      	movs	r3, #3
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4807      	ldr	r0, [pc, #28]	; (8002b50 <HAL_TIM_MspPostInit+0x100>)
 8002b32:	f001 f963 	bl	8003dfc <HAL_GPIO_Init>
}
 8002b36:	bf00      	nop
 8002b38:	3728      	adds	r7, #40	; 0x28
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40000400 	.word	0x40000400
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40020400 	.word	0x40020400
 8002b4c:	40010400 	.word	0x40010400
 8002b50:	40020800 	.word	0x40020800

08002b54 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002b58:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <MX_UART5_Init+0x4c>)
 8002b5a:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <MX_UART5_Init+0x50>)
 8002b5c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002b5e:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <MX_UART5_Init+0x4c>)
 8002b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b64:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <MX_UART5_Init+0x4c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <MX_UART5_Init+0x4c>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <MX_UART5_Init+0x4c>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002b78:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <MX_UART5_Init+0x4c>)
 8002b7a:	220c      	movs	r2, #12
 8002b7c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b7e:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <MX_UART5_Init+0x4c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b84:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <MX_UART5_Init+0x4c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002b8a:	4805      	ldr	r0, [pc, #20]	; (8002ba0 <MX_UART5_Init+0x4c>)
 8002b8c:	f004 ff30 	bl	80079f0 <HAL_UART_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002b96:	f7ff f80d 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	2000a5b0 	.word	0x2000a5b0
 8002ba4:	40005000 	.word	0x40005000

08002ba8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002bac:	4b11      	ldr	r3, [pc, #68]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bae:	4a12      	ldr	r2, [pc, #72]	; (8002bf8 <MX_USART1_UART_Init+0x50>)
 8002bb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bb2:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bba:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bc0:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bc6:	4b0b      	ldr	r3, [pc, #44]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bcc:	4b09      	ldr	r3, [pc, #36]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bce:	220c      	movs	r2, #12
 8002bd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bd2:	4b08      	ldr	r3, [pc, #32]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bde:	4805      	ldr	r0, [pc, #20]	; (8002bf4 <MX_USART1_UART_Init+0x4c>)
 8002be0:	f004 ff06 	bl	80079f0 <HAL_UART_Init>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002bea:	f7fe ffe3 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	2000a5f4 	.word	0x2000a5f4
 8002bf8:	40011000 	.word	0x40011000

08002bfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08c      	sub	sp, #48	; 0x30
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 031c 	add.w	r3, r7, #28
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a75      	ldr	r2, [pc, #468]	; (8002df0 <HAL_UART_MspInit+0x1f4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d14b      	bne.n	8002cb6 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
 8002c22:	4b74      	ldr	r3, [pc, #464]	; (8002df4 <HAL_UART_MspInit+0x1f8>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	4a73      	ldr	r2, [pc, #460]	; (8002df4 <HAL_UART_MspInit+0x1f8>)
 8002c28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2e:	4b71      	ldr	r3, [pc, #452]	; (8002df4 <HAL_UART_MspInit+0x1f8>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	4b6d      	ldr	r3, [pc, #436]	; (8002df4 <HAL_UART_MspInit+0x1f8>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a6c      	ldr	r2, [pc, #432]	; (8002df4 <HAL_UART_MspInit+0x1f8>)
 8002c44:	f043 0304 	orr.w	r3, r3, #4
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4a:	4b6a      	ldr	r3, [pc, #424]	; (8002df4 <HAL_UART_MspInit+0x1f8>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	4b66      	ldr	r3, [pc, #408]	; (8002df4 <HAL_UART_MspInit+0x1f8>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	4a65      	ldr	r2, [pc, #404]	; (8002df4 <HAL_UART_MspInit+0x1f8>)
 8002c60:	f043 0308 	orr.w	r3, r3, #8
 8002c64:	6313      	str	r3, [r2, #48]	; 0x30
 8002c66:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <HAL_UART_MspInit+0x1f8>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = SER2_TX_Pin;
 8002c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002c84:	2308      	movs	r3, #8
 8002c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SER2_TX_GPIO_Port, &GPIO_InitStruct);
 8002c88:	f107 031c 	add.w	r3, r7, #28
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	485a      	ldr	r0, [pc, #360]	; (8002df8 <HAL_UART_MspInit+0x1fc>)
 8002c90:	f001 f8b4 	bl	8003dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SER2_RX_Pin;
 8002c94:	2304      	movs	r3, #4
 8002c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SER2_RX_GPIO_Port, &GPIO_InitStruct);
 8002ca8:	f107 031c 	add.w	r3, r7, #28
 8002cac:	4619      	mov	r1, r3
 8002cae:	4853      	ldr	r0, [pc, #332]	; (8002dfc <HAL_UART_MspInit+0x200>)
 8002cb0:	f001 f8a4 	bl	8003dfc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002cb4:	e098      	b.n	8002de8 <HAL_UART_MspInit+0x1ec>
  else if(uartHandle->Instance==USART1)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a51      	ldr	r2, [pc, #324]	; (8002e00 <HAL_UART_MspInit+0x204>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	f040 8093 	bne.w	8002de8 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	4b4b      	ldr	r3, [pc, #300]	; (8002df4 <HAL_UART_MspInit+0x1f8>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	4a4a      	ldr	r2, [pc, #296]	; (8002df4 <HAL_UART_MspInit+0x1f8>)
 8002ccc:	f043 0310 	orr.w	r3, r3, #16
 8002cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cd2:	4b48      	ldr	r3, [pc, #288]	; (8002df4 <HAL_UART_MspInit+0x1f8>)
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	f003 0310 	and.w	r3, r3, #16
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	4b44      	ldr	r3, [pc, #272]	; (8002df4 <HAL_UART_MspInit+0x1f8>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4a43      	ldr	r2, [pc, #268]	; (8002df4 <HAL_UART_MspInit+0x1f8>)
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	6313      	str	r3, [r2, #48]	; 0x30
 8002cee:	4b41      	ldr	r3, [pc, #260]	; (8002df4 <HAL_UART_MspInit+0x1f8>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cfa:	23c0      	movs	r3, #192	; 0xc0
 8002cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d02:	2300      	movs	r3, #0
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d06:	2303      	movs	r3, #3
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d0a:	2307      	movs	r3, #7
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0e:	f107 031c 	add.w	r3, r7, #28
 8002d12:	4619      	mov	r1, r3
 8002d14:	483b      	ldr	r0, [pc, #236]	; (8002e04 <HAL_UART_MspInit+0x208>)
 8002d16:	f001 f871 	bl	8003dfc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002d1a:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <HAL_UART_MspInit+0x20c>)
 8002d1c:	4a3b      	ldr	r2, [pc, #236]	; (8002e0c <HAL_UART_MspInit+0x210>)
 8002d1e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002d20:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <HAL_UART_MspInit+0x20c>)
 8002d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d26:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d28:	4b37      	ldr	r3, [pc, #220]	; (8002e08 <HAL_UART_MspInit+0x20c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d2e:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <HAL_UART_MspInit+0x20c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d34:	4b34      	ldr	r3, [pc, #208]	; (8002e08 <HAL_UART_MspInit+0x20c>)
 8002d36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d3a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d3c:	4b32      	ldr	r3, [pc, #200]	; (8002e08 <HAL_UART_MspInit+0x20c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d42:	4b31      	ldr	r3, [pc, #196]	; (8002e08 <HAL_UART_MspInit+0x20c>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002d48:	4b2f      	ldr	r3, [pc, #188]	; (8002e08 <HAL_UART_MspInit+0x20c>)
 8002d4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d4e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d50:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_UART_MspInit+0x20c>)
 8002d52:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d56:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_UART_MspInit+0x20c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d5e:	482a      	ldr	r0, [pc, #168]	; (8002e08 <HAL_UART_MspInit+0x20c>)
 8002d60:	f000 fc4a 	bl	80035f8 <HAL_DMA_Init>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_UART_MspInit+0x172>
      Error_Handler();
 8002d6a:	f7fe ff23 	bl	8001bb4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a25      	ldr	r2, [pc, #148]	; (8002e08 <HAL_UART_MspInit+0x20c>)
 8002d72:	639a      	str	r2, [r3, #56]	; 0x38
 8002d74:	4a24      	ldr	r2, [pc, #144]	; (8002e08 <HAL_UART_MspInit+0x20c>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002d7a:	4b25      	ldr	r3, [pc, #148]	; (8002e10 <HAL_UART_MspInit+0x214>)
 8002d7c:	4a25      	ldr	r2, [pc, #148]	; (8002e14 <HAL_UART_MspInit+0x218>)
 8002d7e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002d80:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <HAL_UART_MspInit+0x214>)
 8002d82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d86:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d88:	4b21      	ldr	r3, [pc, #132]	; (8002e10 <HAL_UART_MspInit+0x214>)
 8002d8a:	2240      	movs	r2, #64	; 0x40
 8002d8c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d8e:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <HAL_UART_MspInit+0x214>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d94:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <HAL_UART_MspInit+0x214>)
 8002d96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d9a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d9c:	4b1c      	ldr	r3, [pc, #112]	; (8002e10 <HAL_UART_MspInit+0x214>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002da2:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_UART_MspInit+0x214>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002da8:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <HAL_UART_MspInit+0x214>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002dae:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <HAL_UART_MspInit+0x214>)
 8002db0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002db4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002db6:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <HAL_UART_MspInit+0x214>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002dbc:	4814      	ldr	r0, [pc, #80]	; (8002e10 <HAL_UART_MspInit+0x214>)
 8002dbe:	f000 fc1b 	bl	80035f8 <HAL_DMA_Init>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 8002dc8:	f7fe fef4 	bl	8001bb4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a10      	ldr	r2, [pc, #64]	; (8002e10 <HAL_UART_MspInit+0x214>)
 8002dd0:	635a      	str	r2, [r3, #52]	; 0x34
 8002dd2:	4a0f      	ldr	r2, [pc, #60]	; (8002e10 <HAL_UART_MspInit+0x214>)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2105      	movs	r1, #5
 8002ddc:	2025      	movs	r0, #37	; 0x25
 8002dde:	f000 fbc5 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002de2:	2025      	movs	r0, #37	; 0x25
 8002de4:	f000 fbde 	bl	80035a4 <HAL_NVIC_EnableIRQ>
}
 8002de8:	bf00      	nop
 8002dea:	3730      	adds	r7, #48	; 0x30
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40005000 	.word	0x40005000
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40020800 	.word	0x40020800
 8002dfc:	40020c00 	.word	0x40020c00
 8002e00:	40011000 	.word	0x40011000
 8002e04:	40020400 	.word	0x40020400
 8002e08:	2000a638 	.word	0x2000a638
 8002e0c:	40026440 	.word	0x40026440
 8002e10:	2000a698 	.word	0x2000a698
 8002e14:	400264b8 	.word	0x400264b8

08002e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e1c:	480d      	ldr	r0, [pc, #52]	; (8002e54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e1e:	490e      	ldr	r1, [pc, #56]	; (8002e58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e20:	4a0e      	ldr	r2, [pc, #56]	; (8002e5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e24:	e002      	b.n	8002e2c <LoopCopyDataInit>

08002e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e2a:	3304      	adds	r3, #4

08002e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e30:	d3f9      	bcc.n	8002e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e32:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e34:	4c0b      	ldr	r4, [pc, #44]	; (8002e64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e38:	e001      	b.n	8002e3e <LoopFillZerobss>

08002e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e3c:	3204      	adds	r2, #4

08002e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e40:	d3fb      	bcc.n	8002e3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e42:	f7ff fa77 	bl	8002334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e46:	f016 fec9 	bl	8019bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e4a:	f7fe fe09 	bl	8001a60 <main>
  bx  lr    
 8002e4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e58:	20000618 	.word	0x20000618
  ldr r2, =_sidata
 8002e5c:	0801c430 	.word	0x0801c430
  ldr r2, =_sbss
 8002e60:	20000618 	.word	0x20000618
  ldr r4, =_ebss
 8002e64:	20015830 	.word	0x20015830

08002e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e68:	e7fe      	b.n	8002e68 <ADC_IRQHandler>
	...

08002e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <HAL_Init+0x40>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <HAL_Init+0x40>)
 8002e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_Init+0x40>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <HAL_Init+0x40>)
 8002e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <HAL_Init+0x40>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a07      	ldr	r2, [pc, #28]	; (8002eac <HAL_Init+0x40>)
 8002e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e94:	2003      	movs	r0, #3
 8002e96:	f000 fb5e 	bl	8003556 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e9a:	2005      	movs	r0, #5
 8002e9c:	f7ff f8d4 	bl	8002048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ea0:	f7ff f8a6 	bl	8001ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40023c00 	.word	0x40023c00

08002eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_IncTick+0x20>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_IncTick+0x24>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <HAL_IncTick+0x24>)
 8002ec2:	6013      	str	r3, [r2, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	2000000c 	.word	0x2000000c
 8002ed4:	2000a6f8 	.word	0x2000a6f8

08002ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return uwTick;
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <HAL_GetTick+0x14>)
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	2000a6f8 	.word	0x2000a6f8

08002ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef8:	f7ff ffee 	bl	8002ed8 <HAL_GetTick>
 8002efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f08:	d005      	beq.n	8002f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <HAL_Delay+0x44>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4413      	add	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f16:	bf00      	nop
 8002f18:	f7ff ffde 	bl	8002ed8 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d8f7      	bhi.n	8002f18 <HAL_Delay+0x28>
  {
  }
}
 8002f28:	bf00      	nop
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	2000000c 	.word	0x2000000c

08002f38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e033      	b.n	8002fb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fd fea8 	bl	8000cac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d118      	bne.n	8002fa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f7e:	f023 0302 	bic.w	r3, r3, #2
 8002f82:	f043 0202 	orr.w	r2, r3, #2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f93a 	bl	8003204 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f023 0303 	bic.w	r3, r3, #3
 8002f9e:	f043 0201 	orr.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40
 8002fa6:	e001      	b.n	8002fac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x1c>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e105      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x228>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b09      	cmp	r3, #9
 8002fea:	d925      	bls.n	8003038 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68d9      	ldr	r1, [r3, #12]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	3b1e      	subs	r3, #30
 8003002:	2207      	movs	r2, #7
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43da      	mvns	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	400a      	ands	r2, r1
 8003010:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68d9      	ldr	r1, [r3, #12]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	4618      	mov	r0, r3
 8003024:	4603      	mov	r3, r0
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	4403      	add	r3, r0
 800302a:	3b1e      	subs	r3, #30
 800302c:	409a      	lsls	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	e022      	b.n	800307e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6919      	ldr	r1, [r3, #16]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	b29b      	uxth	r3, r3
 8003044:	461a      	mov	r2, r3
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	2207      	movs	r2, #7
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43da      	mvns	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	400a      	ands	r2, r1
 800305a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6919      	ldr	r1, [r3, #16]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	4618      	mov	r0, r3
 800306e:	4603      	mov	r3, r0
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	4403      	add	r3, r0
 8003074:	409a      	lsls	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	2b06      	cmp	r3, #6
 8003084:	d824      	bhi.n	80030d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4413      	add	r3, r2
 8003096:	3b05      	subs	r3, #5
 8003098:	221f      	movs	r2, #31
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43da      	mvns	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	400a      	ands	r2, r1
 80030a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	4618      	mov	r0, r3
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	3b05      	subs	r3, #5
 80030c2:	fa00 f203 	lsl.w	r2, r0, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	635a      	str	r2, [r3, #52]	; 0x34
 80030ce:	e04c      	b.n	800316a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b0c      	cmp	r3, #12
 80030d6:	d824      	bhi.n	8003122 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	3b23      	subs	r3, #35	; 0x23
 80030ea:	221f      	movs	r2, #31
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43da      	mvns	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	400a      	ands	r2, r1
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	b29b      	uxth	r3, r3
 8003106:	4618      	mov	r0, r3
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	3b23      	subs	r3, #35	; 0x23
 8003114:	fa00 f203 	lsl.w	r2, r0, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
 8003120:	e023      	b.n	800316a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	3b41      	subs	r3, #65	; 0x41
 8003134:	221f      	movs	r2, #31
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43da      	mvns	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	400a      	ands	r2, r1
 8003142:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	4618      	mov	r0, r3
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	3b41      	subs	r3, #65	; 0x41
 800315e:	fa00 f203 	lsl.w	r2, r0, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800316a:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <HAL_ADC_ConfigChannel+0x234>)
 800316c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a21      	ldr	r2, [pc, #132]	; (80031f8 <HAL_ADC_ConfigChannel+0x238>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d109      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1cc>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b12      	cmp	r3, #18
 800317e:	d105      	bne.n	800318c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a19      	ldr	r2, [pc, #100]	; (80031f8 <HAL_ADC_ConfigChannel+0x238>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d123      	bne.n	80031de <HAL_ADC_ConfigChannel+0x21e>
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b10      	cmp	r3, #16
 800319c:	d003      	beq.n	80031a6 <HAL_ADC_ConfigChannel+0x1e6>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b11      	cmp	r3, #17
 80031a4:	d11b      	bne.n	80031de <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b10      	cmp	r3, #16
 80031b8:	d111      	bne.n	80031de <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031ba:	4b10      	ldr	r3, [pc, #64]	; (80031fc <HAL_ADC_ConfigChannel+0x23c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a10      	ldr	r2, [pc, #64]	; (8003200 <HAL_ADC_ConfigChannel+0x240>)
 80031c0:	fba2 2303 	umull	r2, r3, r2, r3
 80031c4:	0c9a      	lsrs	r2, r3, #18
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031d0:	e002      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1f9      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	40012300 	.word	0x40012300
 80031f8:	40012000 	.word	0x40012000
 80031fc:	20000004 	.word	0x20000004
 8003200:	431bde83 	.word	0x431bde83

08003204 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800320c:	4b79      	ldr	r3, [pc, #484]	; (80033f4 <ADC_Init+0x1f0>)
 800320e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	431a      	orrs	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003238:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	021a      	lsls	r2, r3, #8
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800325c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6859      	ldr	r1, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689a      	ldr	r2, [r3, #8]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800327e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6899      	ldr	r1, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003296:	4a58      	ldr	r2, [pc, #352]	; (80033f8 <ADC_Init+0x1f4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d022      	beq.n	80032e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6899      	ldr	r1, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6899      	ldr	r1, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	e00f      	b.n	8003302 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003300:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0202 	bic.w	r2, r2, #2
 8003310:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6899      	ldr	r1, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	7e1b      	ldrb	r3, [r3, #24]
 800331c:	005a      	lsls	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	430a      	orrs	r2, r1
 8003324:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 3020 	ldrb.w	r3, [r3, #32]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01b      	beq.n	8003368 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800333e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800334e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6859      	ldr	r1, [r3, #4]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335a:	3b01      	subs	r3, #1
 800335c:	035a      	lsls	r2, r3, #13
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	e007      	b.n	8003378 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003376:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003386:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	3b01      	subs	r3, #1
 8003394:	051a      	lsls	r2, r3, #20
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80033ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6899      	ldr	r1, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80033ba:	025a      	lsls	r2, r3, #9
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6899      	ldr	r1, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	029a      	lsls	r2, r3, #10
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	609a      	str	r2, [r3, #8]
}
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	40012300 	.word	0x40012300
 80033f8:	0f000001 	.word	0x0f000001

080033fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800340c:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <__NVIC_SetPriorityGrouping+0x44>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003418:	4013      	ands	r3, r2
 800341a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800342c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800342e:	4a04      	ldr	r2, [pc, #16]	; (8003440 <__NVIC_SetPriorityGrouping+0x44>)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	60d3      	str	r3, [r2, #12]
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003448:	4b04      	ldr	r3, [pc, #16]	; (800345c <__NVIC_GetPriorityGrouping+0x18>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	0a1b      	lsrs	r3, r3, #8
 800344e:	f003 0307 	and.w	r3, r3, #7
}
 8003452:	4618      	mov	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	2b00      	cmp	r3, #0
 8003470:	db0b      	blt.n	800348a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	f003 021f 	and.w	r2, r3, #31
 8003478:	4907      	ldr	r1, [pc, #28]	; (8003498 <__NVIC_EnableIRQ+0x38>)
 800347a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	2001      	movs	r0, #1
 8003482:	fa00 f202 	lsl.w	r2, r0, r2
 8003486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	e000e100 	.word	0xe000e100

0800349c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	6039      	str	r1, [r7, #0]
 80034a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	db0a      	blt.n	80034c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	490c      	ldr	r1, [pc, #48]	; (80034e8 <__NVIC_SetPriority+0x4c>)
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	0112      	lsls	r2, r2, #4
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	440b      	add	r3, r1
 80034c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034c4:	e00a      	b.n	80034dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	4908      	ldr	r1, [pc, #32]	; (80034ec <__NVIC_SetPriority+0x50>)
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	3b04      	subs	r3, #4
 80034d4:	0112      	lsls	r2, r2, #4
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	440b      	add	r3, r1
 80034da:	761a      	strb	r2, [r3, #24]
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000e100 	.word	0xe000e100
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b089      	sub	sp, #36	; 0x24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f1c3 0307 	rsb	r3, r3, #7
 800350a:	2b04      	cmp	r3, #4
 800350c:	bf28      	it	cs
 800350e:	2304      	movcs	r3, #4
 8003510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3304      	adds	r3, #4
 8003516:	2b06      	cmp	r3, #6
 8003518:	d902      	bls.n	8003520 <NVIC_EncodePriority+0x30>
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3b03      	subs	r3, #3
 800351e:	e000      	b.n	8003522 <NVIC_EncodePriority+0x32>
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003524:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43da      	mvns	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	401a      	ands	r2, r3
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003538:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	fa01 f303 	lsl.w	r3, r1, r3
 8003542:	43d9      	mvns	r1, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	4313      	orrs	r3, r2
         );
}
 800354a:	4618      	mov	r0, r3
 800354c:	3724      	adds	r7, #36	; 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff ff4c 	bl	80033fc <__NVIC_SetPriorityGrouping>
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800357e:	f7ff ff61 	bl	8003444 <__NVIC_GetPriorityGrouping>
 8003582:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	6978      	ldr	r0, [r7, #20]
 800358a:	f7ff ffb1 	bl	80034f0 <NVIC_EncodePriority>
 800358e:	4602      	mov	r2, r0
 8003590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff ff80 	bl	800349c <__NVIC_SetPriority>
}
 800359c:	bf00      	nop
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7ff ff54 	bl	8003460 <__NVIC_EnableIRQ>
}
 80035b8:	bf00      	nop
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e00e      	b.n	80035f0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	795b      	ldrb	r3, [r3, #5]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d105      	bne.n	80035e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f7fd fc3a 	bl	8000e5c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003604:	f7ff fc68 	bl	8002ed8 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e099      	b.n	8003748 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003634:	e00f      	b.n	8003656 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003636:	f7ff fc4f 	bl	8002ed8 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b05      	cmp	r3, #5
 8003642:	d908      	bls.n	8003656 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2203      	movs	r2, #3
 800364e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e078      	b.n	8003748 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e8      	bne.n	8003636 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4b38      	ldr	r3, [pc, #224]	; (8003750 <HAL_DMA_Init+0x158>)
 8003670:	4013      	ands	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003682:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800368e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d107      	bne.n	80036c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	4313      	orrs	r3, r2
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f023 0307 	bic.w	r3, r3, #7
 80036d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4313      	orrs	r3, r2
 80036e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	d117      	bne.n	800371a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00e      	beq.n	800371a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 fb01 	bl	8003d04 <DMA_CheckFifoParam>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2240      	movs	r2, #64	; 0x40
 800370c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003716:	2301      	movs	r3, #1
 8003718:	e016      	b.n	8003748 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fab8 	bl	8003c98 <DMA_CalcBaseAndBitshift>
 8003728:	4603      	mov	r3, r0
 800372a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003730:	223f      	movs	r2, #63	; 0x3f
 8003732:	409a      	lsls	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	f010803f 	.word	0xf010803f

08003754 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_DMA_Start_IT+0x26>
 8003776:	2302      	movs	r3, #2
 8003778:	e040      	b.n	80037fc <HAL_DMA_Start_IT+0xa8>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b01      	cmp	r3, #1
 800378c:	d12f      	bne.n	80037ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2202      	movs	r2, #2
 8003792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68b9      	ldr	r1, [r7, #8]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fa4a 	bl	8003c3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	223f      	movs	r2, #63	; 0x3f
 80037ae:	409a      	lsls	r2, r3
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0216 	orr.w	r2, r2, #22
 80037c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d007      	beq.n	80037dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0208 	orr.w	r2, r2, #8
 80037da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	e005      	b.n	80037fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037f6:	2302      	movs	r3, #2
 80037f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003812:	f7ff fb61 	bl	8002ed8 <HAL_GetTick>
 8003816:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d008      	beq.n	8003836 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2280      	movs	r2, #128	; 0x80
 8003828:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e052      	b.n	80038dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0216 	bic.w	r2, r2, #22
 8003844:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003854:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d103      	bne.n	8003866 <HAL_DMA_Abort+0x62>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003862:	2b00      	cmp	r3, #0
 8003864:	d007      	beq.n	8003876 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0208 	bic.w	r2, r2, #8
 8003874:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 0201 	bic.w	r2, r2, #1
 8003884:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003886:	e013      	b.n	80038b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003888:	f7ff fb26 	bl	8002ed8 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b05      	cmp	r3, #5
 8003894:	d90c      	bls.n	80038b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2203      	movs	r2, #3
 80038a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e015      	b.n	80038dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e4      	bne.n	8003888 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c2:	223f      	movs	r2, #63	; 0x3f
 80038c4:	409a      	lsls	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d004      	beq.n	8003902 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2280      	movs	r2, #128	; 0x80
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e00c      	b.n	800391c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2205      	movs	r2, #5
 8003906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003934:	4b8e      	ldr	r3, [pc, #568]	; (8003b70 <HAL_DMA_IRQHandler+0x248>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a8e      	ldr	r2, [pc, #568]	; (8003b74 <HAL_DMA_IRQHandler+0x24c>)
 800393a:	fba2 2303 	umull	r2, r3, r2, r3
 800393e:	0a9b      	lsrs	r3, r3, #10
 8003940:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003952:	2208      	movs	r2, #8
 8003954:	409a      	lsls	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4013      	ands	r3, r2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01a      	beq.n	8003994 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0204 	bic.w	r2, r2, #4
 800397a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	2208      	movs	r2, #8
 8003982:	409a      	lsls	r2, r3
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398c:	f043 0201 	orr.w	r2, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	2201      	movs	r2, #1
 800399a:	409a      	lsls	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d012      	beq.n	80039ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b6:	2201      	movs	r2, #1
 80039b8:	409a      	lsls	r2, r3
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c2:	f043 0202 	orr.w	r2, r3, #2
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	2204      	movs	r2, #4
 80039d0:	409a      	lsls	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d012      	beq.n	8003a00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00b      	beq.n	8003a00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ec:	2204      	movs	r2, #4
 80039ee:	409a      	lsls	r2, r3
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f8:	f043 0204 	orr.w	r2, r3, #4
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a04:	2210      	movs	r2, #16
 8003a06:	409a      	lsls	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d043      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d03c      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a22:	2210      	movs	r2, #16
 8003a24:	409a      	lsls	r2, r3
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d018      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d108      	bne.n	8003a58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d024      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
 8003a56:	e01f      	b.n	8003a98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01b      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4798      	blx	r3
 8003a68:	e016      	b.n	8003a98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d107      	bne.n	8003a88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0208 	bic.w	r2, r2, #8
 8003a86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 808f 	beq.w	8003bc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 8087 	beq.w	8003bc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abe:	2220      	movs	r2, #32
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b05      	cmp	r3, #5
 8003ad0:	d136      	bne.n	8003b40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0216 	bic.w	r2, r2, #22
 8003ae0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003af0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d103      	bne.n	8003b02 <HAL_DMA_IRQHandler+0x1da>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0208 	bic.w	r2, r2, #8
 8003b10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b16:	223f      	movs	r2, #63	; 0x3f
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d07e      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	4798      	blx	r3
        }
        return;
 8003b3e:	e079      	b.n	8003c34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01d      	beq.n	8003b8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10d      	bne.n	8003b78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d031      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	4798      	blx	r3
 8003b6c:	e02c      	b.n	8003bc8 <HAL_DMA_IRQHandler+0x2a0>
 8003b6e:	bf00      	nop
 8003b70:	20000004 	.word	0x20000004
 8003b74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d023      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	4798      	blx	r3
 8003b88:	e01e      	b.n	8003bc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10f      	bne.n	8003bb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0210 	bic.w	r2, r2, #16
 8003ba6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d032      	beq.n	8003c36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d022      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2205      	movs	r2, #5
 8003be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d307      	bcc.n	8003c10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f2      	bne.n	8003bf4 <HAL_DMA_IRQHandler+0x2cc>
 8003c0e:	e000      	b.n	8003c12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d005      	beq.n	8003c36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	4798      	blx	r3
 8003c32:	e000      	b.n	8003c36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c34:	bf00      	nop
    }
  }
}
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d108      	bne.n	8003c7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c7a:	e007      	b.n	8003c8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	60da      	str	r2, [r3, #12]
}
 8003c8c:	bf00      	nop
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	3b10      	subs	r3, #16
 8003ca8:	4a14      	ldr	r2, [pc, #80]	; (8003cfc <DMA_CalcBaseAndBitshift+0x64>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	091b      	lsrs	r3, r3, #4
 8003cb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cb2:	4a13      	ldr	r2, [pc, #76]	; (8003d00 <DMA_CalcBaseAndBitshift+0x68>)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d909      	bls.n	8003cda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cce:	f023 0303 	bic.w	r3, r3, #3
 8003cd2:	1d1a      	adds	r2, r3, #4
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	659a      	str	r2, [r3, #88]	; 0x58
 8003cd8:	e007      	b.n	8003cea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ce2:	f023 0303 	bic.w	r3, r3, #3
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	aaaaaaab 	.word	0xaaaaaaab
 8003d00:	0801b3a0 	.word	0x0801b3a0

08003d04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d11f      	bne.n	8003d5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d856      	bhi.n	8003dd2 <DMA_CheckFifoParam+0xce>
 8003d24:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <DMA_CheckFifoParam+0x28>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d3d 	.word	0x08003d3d
 8003d30:	08003d4f 	.word	0x08003d4f
 8003d34:	08003d3d 	.word	0x08003d3d
 8003d38:	08003dd3 	.word	0x08003dd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d046      	beq.n	8003dd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d4c:	e043      	b.n	8003dd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d56:	d140      	bne.n	8003dda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d5c:	e03d      	b.n	8003dda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d66:	d121      	bne.n	8003dac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d837      	bhi.n	8003dde <DMA_CheckFifoParam+0xda>
 8003d6e:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <DMA_CheckFifoParam+0x70>)
 8003d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d74:	08003d85 	.word	0x08003d85
 8003d78:	08003d8b 	.word	0x08003d8b
 8003d7c:	08003d85 	.word	0x08003d85
 8003d80:	08003d9d 	.word	0x08003d9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	73fb      	strb	r3, [r7, #15]
      break;
 8003d88:	e030      	b.n	8003dec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d025      	beq.n	8003de2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d9a:	e022      	b.n	8003de2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003da4:	d11f      	bne.n	8003de6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003daa:	e01c      	b.n	8003de6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d903      	bls.n	8003dba <DMA_CheckFifoParam+0xb6>
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d003      	beq.n	8003dc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003db8:	e018      	b.n	8003dec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8003dbe:	e015      	b.n	8003dec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00e      	beq.n	8003dea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd0:	e00b      	b.n	8003dea <DMA_CheckFifoParam+0xe6>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e00a      	b.n	8003dec <DMA_CheckFifoParam+0xe8>
      break;
 8003dd6:	bf00      	nop
 8003dd8:	e008      	b.n	8003dec <DMA_CheckFifoParam+0xe8>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e006      	b.n	8003dec <DMA_CheckFifoParam+0xe8>
      break;
 8003dde:	bf00      	nop
 8003de0:	e004      	b.n	8003dec <DMA_CheckFifoParam+0xe8>
      break;
 8003de2:	bf00      	nop
 8003de4:	e002      	b.n	8003dec <DMA_CheckFifoParam+0xe8>
      break;   
 8003de6:	bf00      	nop
 8003de8:	e000      	b.n	8003dec <DMA_CheckFifoParam+0xe8>
      break;
 8003dea:	bf00      	nop
    }
  } 
  
  return status; 
 8003dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop

08003dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b089      	sub	sp, #36	; 0x24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	e16b      	b.n	80040f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e18:	2201      	movs	r2, #1
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	f040 815a 	bne.w	80040ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d005      	beq.n	8003e4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d130      	bne.n	8003eb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	2203      	movs	r2, #3
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4013      	ands	r3, r2
 8003e64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	69fb      	ldr	r3, [r7, #28]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e84:	2201      	movs	r2, #1
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4013      	ands	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	091b      	lsrs	r3, r3, #4
 8003e9a:	f003 0201 	and.w	r2, r3, #1
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d017      	beq.n	8003eec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	2203      	movs	r2, #3
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 0303 	and.w	r3, r3, #3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d123      	bne.n	8003f40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	08da      	lsrs	r2, r3, #3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3208      	adds	r2, #8
 8003f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	220f      	movs	r2, #15
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	08da      	lsrs	r2, r3, #3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3208      	adds	r2, #8
 8003f3a:	69b9      	ldr	r1, [r7, #24]
 8003f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0203 	and.w	r2, r3, #3
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80b4 	beq.w	80040ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	4b60      	ldr	r3, [pc, #384]	; (8004108 <HAL_GPIO_Init+0x30c>)
 8003f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8a:	4a5f      	ldr	r2, [pc, #380]	; (8004108 <HAL_GPIO_Init+0x30c>)
 8003f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f90:	6453      	str	r3, [r2, #68]	; 0x44
 8003f92:	4b5d      	ldr	r3, [pc, #372]	; (8004108 <HAL_GPIO_Init+0x30c>)
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f9a:	60fb      	str	r3, [r7, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f9e:	4a5b      	ldr	r2, [pc, #364]	; (800410c <HAL_GPIO_Init+0x310>)
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	089b      	lsrs	r3, r3, #2
 8003fa4:	3302      	adds	r3, #2
 8003fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	220f      	movs	r2, #15
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a52      	ldr	r2, [pc, #328]	; (8004110 <HAL_GPIO_Init+0x314>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d02b      	beq.n	8004022 <HAL_GPIO_Init+0x226>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a51      	ldr	r2, [pc, #324]	; (8004114 <HAL_GPIO_Init+0x318>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d025      	beq.n	800401e <HAL_GPIO_Init+0x222>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a50      	ldr	r2, [pc, #320]	; (8004118 <HAL_GPIO_Init+0x31c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d01f      	beq.n	800401a <HAL_GPIO_Init+0x21e>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a4f      	ldr	r2, [pc, #316]	; (800411c <HAL_GPIO_Init+0x320>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d019      	beq.n	8004016 <HAL_GPIO_Init+0x21a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a4e      	ldr	r2, [pc, #312]	; (8004120 <HAL_GPIO_Init+0x324>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d013      	beq.n	8004012 <HAL_GPIO_Init+0x216>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a4d      	ldr	r2, [pc, #308]	; (8004124 <HAL_GPIO_Init+0x328>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00d      	beq.n	800400e <HAL_GPIO_Init+0x212>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a4c      	ldr	r2, [pc, #304]	; (8004128 <HAL_GPIO_Init+0x32c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d007      	beq.n	800400a <HAL_GPIO_Init+0x20e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a4b      	ldr	r2, [pc, #300]	; (800412c <HAL_GPIO_Init+0x330>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d101      	bne.n	8004006 <HAL_GPIO_Init+0x20a>
 8004002:	2307      	movs	r3, #7
 8004004:	e00e      	b.n	8004024 <HAL_GPIO_Init+0x228>
 8004006:	2308      	movs	r3, #8
 8004008:	e00c      	b.n	8004024 <HAL_GPIO_Init+0x228>
 800400a:	2306      	movs	r3, #6
 800400c:	e00a      	b.n	8004024 <HAL_GPIO_Init+0x228>
 800400e:	2305      	movs	r3, #5
 8004010:	e008      	b.n	8004024 <HAL_GPIO_Init+0x228>
 8004012:	2304      	movs	r3, #4
 8004014:	e006      	b.n	8004024 <HAL_GPIO_Init+0x228>
 8004016:	2303      	movs	r3, #3
 8004018:	e004      	b.n	8004024 <HAL_GPIO_Init+0x228>
 800401a:	2302      	movs	r3, #2
 800401c:	e002      	b.n	8004024 <HAL_GPIO_Init+0x228>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <HAL_GPIO_Init+0x228>
 8004022:	2300      	movs	r3, #0
 8004024:	69fa      	ldr	r2, [r7, #28]
 8004026:	f002 0203 	and.w	r2, r2, #3
 800402a:	0092      	lsls	r2, r2, #2
 800402c:	4093      	lsls	r3, r2
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4313      	orrs	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004034:	4935      	ldr	r1, [pc, #212]	; (800410c <HAL_GPIO_Init+0x310>)
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	089b      	lsrs	r3, r3, #2
 800403a:	3302      	adds	r3, #2
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004042:	4b3b      	ldr	r3, [pc, #236]	; (8004130 <HAL_GPIO_Init+0x334>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	43db      	mvns	r3, r3
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	4013      	ands	r3, r2
 8004050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004066:	4a32      	ldr	r2, [pc, #200]	; (8004130 <HAL_GPIO_Init+0x334>)
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800406c:	4b30      	ldr	r3, [pc, #192]	; (8004130 <HAL_GPIO_Init+0x334>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	43db      	mvns	r3, r3
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4013      	ands	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d003      	beq.n	8004090 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4313      	orrs	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004090:	4a27      	ldr	r2, [pc, #156]	; (8004130 <HAL_GPIO_Init+0x334>)
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004096:	4b26      	ldr	r3, [pc, #152]	; (8004130 <HAL_GPIO_Init+0x334>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	43db      	mvns	r3, r3
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4013      	ands	r3, r2
 80040a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040ba:	4a1d      	ldr	r2, [pc, #116]	; (8004130 <HAL_GPIO_Init+0x334>)
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040c0:	4b1b      	ldr	r3, [pc, #108]	; (8004130 <HAL_GPIO_Init+0x334>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	43db      	mvns	r3, r3
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4013      	ands	r3, r2
 80040ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040e4:	4a12      	ldr	r2, [pc, #72]	; (8004130 <HAL_GPIO_Init+0x334>)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3301      	adds	r3, #1
 80040ee:	61fb      	str	r3, [r7, #28]
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	2b0f      	cmp	r3, #15
 80040f4:	f67f ae90 	bls.w	8003e18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040f8:	bf00      	nop
 80040fa:	bf00      	nop
 80040fc:	3724      	adds	r7, #36	; 0x24
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800
 800410c:	40013800 	.word	0x40013800
 8004110:	40020000 	.word	0x40020000
 8004114:	40020400 	.word	0x40020400
 8004118:	40020800 	.word	0x40020800
 800411c:	40020c00 	.word	0x40020c00
 8004120:	40021000 	.word	0x40021000
 8004124:	40021400 	.word	0x40021400
 8004128:	40021800 	.word	0x40021800
 800412c:	40021c00 	.word	0x40021c00
 8004130:	40013c00 	.word	0x40013c00

08004134 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	807b      	strh	r3, [r7, #2]
 8004140:	4613      	mov	r3, r2
 8004142:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004144:	787b      	ldrb	r3, [r7, #1]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800414a:	887a      	ldrh	r2, [r7, #2]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004150:	e003      	b.n	800415a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004152:	887b      	ldrh	r3, [r7, #2]
 8004154:	041a      	lsls	r2, r3, #16
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	619a      	str	r2, [r3, #24]
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
	...

08004168 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e12b      	b.n	80043d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fd fc1e 	bl	80019d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2224      	movs	r2, #36	; 0x24
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041cc:	f001 fffe 	bl	80061cc <HAL_RCC_GetPCLK1Freq>
 80041d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	4a81      	ldr	r2, [pc, #516]	; (80043dc <HAL_I2C_Init+0x274>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d807      	bhi.n	80041ec <HAL_I2C_Init+0x84>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4a80      	ldr	r2, [pc, #512]	; (80043e0 <HAL_I2C_Init+0x278>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	bf94      	ite	ls
 80041e4:	2301      	movls	r3, #1
 80041e6:	2300      	movhi	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	e006      	b.n	80041fa <HAL_I2C_Init+0x92>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4a7d      	ldr	r2, [pc, #500]	; (80043e4 <HAL_I2C_Init+0x27c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	bf94      	ite	ls
 80041f4:	2301      	movls	r3, #1
 80041f6:	2300      	movhi	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e0e7      	b.n	80043d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4a78      	ldr	r2, [pc, #480]	; (80043e8 <HAL_I2C_Init+0x280>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	0c9b      	lsrs	r3, r3, #18
 800420c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	4a6a      	ldr	r2, [pc, #424]	; (80043dc <HAL_I2C_Init+0x274>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d802      	bhi.n	800423c <HAL_I2C_Init+0xd4>
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	3301      	adds	r3, #1
 800423a:	e009      	b.n	8004250 <HAL_I2C_Init+0xe8>
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004242:	fb02 f303 	mul.w	r3, r2, r3
 8004246:	4a69      	ldr	r2, [pc, #420]	; (80043ec <HAL_I2C_Init+0x284>)
 8004248:	fba2 2303 	umull	r2, r3, r2, r3
 800424c:	099b      	lsrs	r3, r3, #6
 800424e:	3301      	adds	r3, #1
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	430b      	orrs	r3, r1
 8004256:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004262:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	495c      	ldr	r1, [pc, #368]	; (80043dc <HAL_I2C_Init+0x274>)
 800426c:	428b      	cmp	r3, r1
 800426e:	d819      	bhi.n	80042a4 <HAL_I2C_Init+0x13c>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	1e59      	subs	r1, r3, #1
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	fbb1 f3f3 	udiv	r3, r1, r3
 800427e:	1c59      	adds	r1, r3, #1
 8004280:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004284:	400b      	ands	r3, r1
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <HAL_I2C_Init+0x138>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1e59      	subs	r1, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	fbb1 f3f3 	udiv	r3, r1, r3
 8004298:	3301      	adds	r3, #1
 800429a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800429e:	e051      	b.n	8004344 <HAL_I2C_Init+0x1dc>
 80042a0:	2304      	movs	r3, #4
 80042a2:	e04f      	b.n	8004344 <HAL_I2C_Init+0x1dc>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d111      	bne.n	80042d0 <HAL_I2C_Init+0x168>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	1e58      	subs	r0, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6859      	ldr	r1, [r3, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	440b      	add	r3, r1
 80042ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80042be:	3301      	adds	r3, #1
 80042c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	bf0c      	ite	eq
 80042c8:	2301      	moveq	r3, #1
 80042ca:	2300      	movne	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	e012      	b.n	80042f6 <HAL_I2C_Init+0x18e>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	1e58      	subs	r0, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6859      	ldr	r1, [r3, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	0099      	lsls	r1, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042e6:	3301      	adds	r3, #1
 80042e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	bf0c      	ite	eq
 80042f0:	2301      	moveq	r3, #1
 80042f2:	2300      	movne	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_I2C_Init+0x196>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e022      	b.n	8004344 <HAL_I2C_Init+0x1dc>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10e      	bne.n	8004324 <HAL_I2C_Init+0x1bc>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	1e58      	subs	r0, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6859      	ldr	r1, [r3, #4]
 800430e:	460b      	mov	r3, r1
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	440b      	add	r3, r1
 8004314:	fbb0 f3f3 	udiv	r3, r0, r3
 8004318:	3301      	adds	r3, #1
 800431a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800431e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004322:	e00f      	b.n	8004344 <HAL_I2C_Init+0x1dc>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	1e58      	subs	r0, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6859      	ldr	r1, [r3, #4]
 800432c:	460b      	mov	r3, r1
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	0099      	lsls	r1, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	fbb0 f3f3 	udiv	r3, r0, r3
 800433a:	3301      	adds	r3, #1
 800433c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004340:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	6809      	ldr	r1, [r1, #0]
 8004348:	4313      	orrs	r3, r2
 800434a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69da      	ldr	r2, [r3, #28]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004372:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6911      	ldr	r1, [r2, #16]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	68d2      	ldr	r2, [r2, #12]
 800437e:	4311      	orrs	r1, r2
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	430b      	orrs	r3, r1
 8004386:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695a      	ldr	r2, [r3, #20]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	000186a0 	.word	0x000186a0
 80043e0:	001e847f 	.word	0x001e847f
 80043e4:	003d08ff 	.word	0x003d08ff
 80043e8:	431bde83 	.word	0x431bde83
 80043ec:	10624dd3 	.word	0x10624dd3

080043f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f2:	b08f      	sub	sp, #60	; 0x3c
 80043f4:	af0a      	add	r7, sp, #40	; 0x28
 80043f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e10f      	b.n	8004622 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b00      	cmp	r3, #0
 8004412:	d106      	bne.n	8004422 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f00b f8ed 	bl	800f5fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2203      	movs	r2, #3
 8004426:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004432:	2b00      	cmp	r3, #0
 8004434:	d102      	bne.n	800443c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4618      	mov	r0, r3
 8004442:	f004 fe5a 	bl	80090fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	687e      	ldr	r6, [r7, #4]
 800444e:	466d      	mov	r5, sp
 8004450:	f106 0410 	add.w	r4, r6, #16
 8004454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800445a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800445c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004460:	e885 0003 	stmia.w	r5, {r0, r1}
 8004464:	1d33      	adds	r3, r6, #4
 8004466:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004468:	6838      	ldr	r0, [r7, #0]
 800446a:	f004 fd31 	bl	8008ed0 <USB_CoreInit>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0d0      	b.n	8004622 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2100      	movs	r1, #0
 8004486:	4618      	mov	r0, r3
 8004488:	f004 fe48 	bl	800911c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800448c:	2300      	movs	r3, #0
 800448e:	73fb      	strb	r3, [r7, #15]
 8004490:	e04a      	b.n	8004528 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004492:	7bfa      	ldrb	r2, [r7, #15]
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	4413      	add	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	333d      	adds	r3, #61	; 0x3d
 80044a2:	2201      	movs	r2, #1
 80044a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80044a6:	7bfa      	ldrb	r2, [r7, #15]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	4413      	add	r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	333c      	adds	r3, #60	; 0x3c
 80044b6:	7bfa      	ldrb	r2, [r7, #15]
 80044b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80044ba:	7bfa      	ldrb	r2, [r7, #15]
 80044bc:	7bfb      	ldrb	r3, [r7, #15]
 80044be:	b298      	uxth	r0, r3
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	4413      	add	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	3344      	adds	r3, #68	; 0x44
 80044ce:	4602      	mov	r2, r0
 80044d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80044d2:	7bfa      	ldrb	r2, [r7, #15]
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	3340      	adds	r3, #64	; 0x40
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80044e6:	7bfa      	ldrb	r2, [r7, #15]
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	4413      	add	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	3348      	adds	r3, #72	; 0x48
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80044fa:	7bfa      	ldrb	r2, [r7, #15]
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	440b      	add	r3, r1
 8004508:	334c      	adds	r3, #76	; 0x4c
 800450a:	2200      	movs	r2, #0
 800450c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800450e:	7bfa      	ldrb	r2, [r7, #15]
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	00db      	lsls	r3, r3, #3
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	440b      	add	r3, r1
 800451c:	3354      	adds	r3, #84	; 0x54
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	3301      	adds	r3, #1
 8004526:	73fb      	strb	r3, [r7, #15]
 8004528:	7bfa      	ldrb	r2, [r7, #15]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	429a      	cmp	r2, r3
 8004530:	d3af      	bcc.n	8004492 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004532:	2300      	movs	r3, #0
 8004534:	73fb      	strb	r3, [r7, #15]
 8004536:	e044      	b.n	80045c2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004538:	7bfa      	ldrb	r2, [r7, #15]
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	4613      	mov	r3, r2
 800453e:	00db      	lsls	r3, r3, #3
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800454a:	2200      	movs	r2, #0
 800454c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800454e:	7bfa      	ldrb	r2, [r7, #15]
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004560:	7bfa      	ldrb	r2, [r7, #15]
 8004562:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004564:	7bfa      	ldrb	r2, [r7, #15]
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	4613      	mov	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	4413      	add	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004576:	2200      	movs	r2, #0
 8004578:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800457a:	7bfa      	ldrb	r2, [r7, #15]
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	4613      	mov	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	440b      	add	r3, r1
 8004588:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004590:	7bfa      	ldrb	r2, [r7, #15]
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	4613      	mov	r3, r2
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	440b      	add	r3, r1
 800459e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80045a6:	7bfa      	ldrb	r2, [r7, #15]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	3301      	adds	r3, #1
 80045c0:	73fb      	strb	r3, [r7, #15]
 80045c2:	7bfa      	ldrb	r2, [r7, #15]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d3b5      	bcc.n	8004538 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	603b      	str	r3, [r7, #0]
 80045d2:	687e      	ldr	r6, [r7, #4]
 80045d4:	466d      	mov	r5, sp
 80045d6:	f106 0410 	add.w	r4, r6, #16
 80045da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80045ea:	1d33      	adds	r3, r6, #4
 80045ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045ee:	6838      	ldr	r0, [r7, #0]
 80045f0:	f004 fde0 	bl	80091b4 <USB_DevInit>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2202      	movs	r2, #2
 80045fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e00d      	b.n	8004622 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f005 ff2f 	bl	800a47e <USB_DevDisconnect>

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800462a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b084      	sub	sp, #16
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_PCD_Start+0x1c>
 8004642:	2302      	movs	r3, #2
 8004644:	e020      	b.n	8004688 <HAL_PCD_Start+0x5e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	2b01      	cmp	r3, #1
 8004654:	d109      	bne.n	800466a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800465a:	2b01      	cmp	r3, #1
 800465c:	d005      	beq.n	800466a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4618      	mov	r0, r3
 8004670:	f004 fd32 	bl	80090d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f005 fedf 	bl	800a43c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004690:	b590      	push	{r4, r7, lr}
 8004692:	b08d      	sub	sp, #52	; 0x34
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800469e:	6a3b      	ldr	r3, [r7, #32]
 80046a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f005 ff9d 	bl	800a5e6 <USB_GetMode>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f040 848a 	bne.w	8004fc8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f005 ff01 	bl	800a4c0 <USB_ReadInterrupts>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 8480 	beq.w	8004fc6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	0a1b      	lsrs	r3, r3, #8
 80046d0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f005 feee 	bl	800a4c0 <USB_ReadInterrupts>
 80046e4:	4603      	mov	r3, r0
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d107      	bne.n	80046fe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695a      	ldr	r2, [r3, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f002 0202 	and.w	r2, r2, #2
 80046fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f005 fedc 	bl	800a4c0 <USB_ReadInterrupts>
 8004708:	4603      	mov	r3, r0
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b10      	cmp	r3, #16
 8004710:	d161      	bne.n	80047d6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	699a      	ldr	r2, [r3, #24]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0210 	bic.w	r2, r2, #16
 8004720:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	f003 020f 	and.w	r2, r3, #15
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	4413      	add	r3, r2
 800473e:	3304      	adds	r3, #4
 8004740:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	0c5b      	lsrs	r3, r3, #17
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	2b02      	cmp	r3, #2
 800474c:	d124      	bne.n	8004798 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800474e:	69ba      	ldr	r2, [r7, #24]
 8004750:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004754:	4013      	ands	r3, r2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d035      	beq.n	80047c6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004764:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004768:	b29b      	uxth	r3, r3
 800476a:	461a      	mov	r2, r3
 800476c:	6a38      	ldr	r0, [r7, #32]
 800476e:	f005 fd13 	bl	800a198 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800477e:	441a      	add	r2, r3
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	6a1a      	ldr	r2, [r3, #32]
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004790:	441a      	add	r2, r3
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	621a      	str	r2, [r3, #32]
 8004796:	e016      	b.n	80047c6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	0c5b      	lsrs	r3, r3, #17
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	2b06      	cmp	r3, #6
 80047a2:	d110      	bne.n	80047c6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047aa:	2208      	movs	r2, #8
 80047ac:	4619      	mov	r1, r3
 80047ae:	6a38      	ldr	r0, [r7, #32]
 80047b0:	f005 fcf2 	bl	800a198 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	6a1a      	ldr	r2, [r3, #32]
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	091b      	lsrs	r3, r3, #4
 80047bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047c0:	441a      	add	r2, r3
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699a      	ldr	r2, [r3, #24]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0210 	orr.w	r2, r2, #16
 80047d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f005 fe70 	bl	800a4c0 <USB_ReadInterrupts>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047ea:	f040 80a7 	bne.w	800493c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f005 fe75 	bl	800a4e6 <USB_ReadDevAllOutEpInterrupt>
 80047fc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80047fe:	e099      	b.n	8004934 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 808e 	beq.w	8004928 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	4611      	mov	r1, r2
 8004816:	4618      	mov	r0, r3
 8004818:	f005 fe99 	bl	800a54e <USB_ReadDevOutEPInterrupt>
 800481c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00c      	beq.n	8004842 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004834:	461a      	mov	r2, r3
 8004836:	2301      	movs	r3, #1
 8004838:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800483a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fec3 	bl	80055c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00c      	beq.n	8004866 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004858:	461a      	mov	r2, r3
 800485a:	2308      	movs	r3, #8
 800485c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800485e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 ff99 	bl	8005798 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	2b00      	cmp	r3, #0
 800486e:	d008      	beq.n	8004882 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487c:	461a      	mov	r2, r3
 800487e:	2310      	movs	r3, #16
 8004880:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b00      	cmp	r3, #0
 800488a:	d030      	beq.n	80048ee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004894:	2b80      	cmp	r3, #128	; 0x80
 8004896:	d109      	bne.n	80048ac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048aa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80048ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ae:	4613      	mov	r3, r2
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	4413      	add	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	4413      	add	r3, r2
 80048be:	3304      	adds	r3, #4
 80048c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	78db      	ldrb	r3, [r3, #3]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d108      	bne.n	80048dc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2200      	movs	r2, #0
 80048ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	4619      	mov	r1, r3
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f00a ff96 	bl	800f808 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e8:	461a      	mov	r2, r3
 80048ea:	2302      	movs	r3, #2
 80048ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004904:	461a      	mov	r2, r3
 8004906:	2320      	movs	r3, #32
 8004908:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d009      	beq.n	8004928 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004920:	461a      	mov	r2, r3
 8004922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004926:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	3301      	adds	r3, #1
 800492c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004930:	085b      	lsrs	r3, r3, #1
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004936:	2b00      	cmp	r3, #0
 8004938:	f47f af62 	bne.w	8004800 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f005 fdbd 	bl	800a4c0 <USB_ReadInterrupts>
 8004946:	4603      	mov	r3, r0
 8004948:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800494c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004950:	f040 80db 	bne.w	8004b0a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4618      	mov	r0, r3
 800495a:	f005 fdde 	bl	800a51a <USB_ReadDevAllInEpInterrupt>
 800495e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004964:	e0cd      	b.n	8004b02 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 80c2 	beq.w	8004af6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	4611      	mov	r1, r2
 800497c:	4618      	mov	r0, r3
 800497e:	f005 fe04 	bl	800a58a <USB_ReadDevInEPInterrupt>
 8004982:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d057      	beq.n	8004a3e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	2201      	movs	r2, #1
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	43db      	mvns	r3, r3
 80049a8:	69f9      	ldr	r1, [r7, #28]
 80049aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049ae:	4013      	ands	r3, r2
 80049b0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049be:	461a      	mov	r2, r3
 80049c0:	2301      	movs	r3, #1
 80049c2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d132      	bne.n	8004a32 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	334c      	adds	r3, #76	; 0x4c
 80049dc:	6819      	ldr	r1, [r3, #0]
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e2:	4613      	mov	r3, r2
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4403      	add	r3, r0
 80049ec:	3348      	adds	r3, #72	; 0x48
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4419      	add	r1, r3
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f6:	4613      	mov	r3, r2
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	4403      	add	r3, r0
 8004a00:	334c      	adds	r3, #76	; 0x4c
 8004a02:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d113      	bne.n	8004a32 <HAL_PCD_IRQHandler+0x3a2>
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0e:	4613      	mov	r3, r2
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	4413      	add	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	3354      	adds	r3, #84	; 0x54
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d108      	bne.n	8004a32 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	f005 fe0b 	bl	800a648 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	4619      	mov	r1, r3
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f00a fe60 	bl	800f6fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a54:	461a      	mov	r2, r3
 8004a56:	2308      	movs	r3, #8
 8004a58:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	f003 0310 	and.w	r3, r3, #16
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d008      	beq.n	8004a76 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a70:	461a      	mov	r2, r3
 8004a72:	2310      	movs	r3, #16
 8004a74:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2340      	movs	r3, #64	; 0x40
 8004a90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d023      	beq.n	8004ae4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004a9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a9e:	6a38      	ldr	r0, [r7, #32]
 8004aa0:	f004 fcec 	bl	800947c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	3338      	adds	r3, #56	; 0x38
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	78db      	ldrb	r3, [r3, #3]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d108      	bne.n	8004ad2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	4619      	mov	r1, r3
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f00a fead 	bl	800f82c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ade:	461a      	mov	r2, r3
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004aee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fcdb 	bl	80054ac <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	3301      	adds	r3, #1
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	085b      	lsrs	r3, r3, #1
 8004b00:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f47f af2e 	bne.w	8004966 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f005 fcd6 	bl	800a4c0 <USB_ReadInterrupts>
 8004b14:	4603      	mov	r3, r0
 8004b16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b1e:	d122      	bne.n	8004b66 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b2e:	f023 0301 	bic.w	r3, r3, #1
 8004b32:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d108      	bne.n	8004b50 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b46:	2100      	movs	r1, #0
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fec3 	bl	80058d4 <HAL_PCDEx_LPM_Callback>
 8004b4e:	e002      	b.n	8004b56 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f00a fe4b 	bl	800f7ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695a      	ldr	r2, [r3, #20]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004b64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f005 fca8 	bl	800a4c0 <USB_ReadInterrupts>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b7a:	d112      	bne.n	8004ba2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d102      	bne.n	8004b92 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f00a fe07 	bl	800f7a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695a      	ldr	r2, [r3, #20]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004ba0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f005 fc8a 	bl	800a4c0 <USB_ReadInterrupts>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb6:	f040 80b7 	bne.w	8004d28 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2110      	movs	r1, #16
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f004 fc51 	bl	800947c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bda:	2300      	movs	r3, #0
 8004bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bde:	e046      	b.n	8004c6e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bec:	461a      	mov	r2, r3
 8004bee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bf2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c04:	0151      	lsls	r1, r2, #5
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	440a      	add	r2, r1
 8004c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c12:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c20:	461a      	mov	r2, r3
 8004c22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c26:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c38:	0151      	lsls	r1, r2, #5
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	440a      	add	r2, r1
 8004c3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c46:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c58:	0151      	lsls	r1, r2, #5
 8004c5a:	69fa      	ldr	r2, [r7, #28]
 8004c5c:	440a      	add	r2, r1
 8004c5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c66:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d3b3      	bcc.n	8004be0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c86:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004c8a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d016      	beq.n	8004cc2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ca4:	f043 030b 	orr.w	r3, r3, #11
 8004ca8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cba:	f043 030b 	orr.w	r3, r3, #11
 8004cbe:	6453      	str	r3, [r2, #68]	; 0x44
 8004cc0:	e015      	b.n	8004cee <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004cd4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004cd8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	69fa      	ldr	r2, [r7, #28]
 8004ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ce8:	f043 030b 	orr.w	r3, r3, #11
 8004cec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69fa      	ldr	r2, [r7, #28]
 8004cf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cfc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d00:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004d12:	461a      	mov	r2, r3
 8004d14:	f005 fc98 	bl	800a648 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	695a      	ldr	r2, [r3, #20]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004d26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f005 fbc7 	bl	800a4c0 <USB_ReadInterrupts>
 8004d32:	4603      	mov	r3, r0
 8004d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d3c:	d124      	bne.n	8004d88 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4618      	mov	r0, r3
 8004d44:	f005 fc5d 	bl	800a602 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f004 fc12 	bl	8009576 <USB_GetDevSpeed>
 8004d52:	4603      	mov	r3, r0
 8004d54:	461a      	mov	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681c      	ldr	r4, [r3, #0]
 8004d5e:	f001 fa29 	bl	80061b4 <HAL_RCC_GetHCLKFreq>
 8004d62:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f004 f911 	bl	8008f94 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f00a fceb 	bl	800f74e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695a      	ldr	r2, [r3, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004d86:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f005 fb97 	bl	800a4c0 <USB_ReadInterrupts>
 8004d92:	4603      	mov	r3, r0
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d10a      	bne.n	8004db2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f00a fcc8 	bl	800f732 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	695a      	ldr	r2, [r3, #20]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f002 0208 	and.w	r2, r2, #8
 8004db0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f005 fb82 	bl	800a4c0 <USB_ReadInterrupts>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc2:	2b80      	cmp	r3, #128	; 0x80
 8004dc4:	d122      	bne.n	8004e0c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dce:	6a3b      	ldr	r3, [r7, #32]
 8004dd0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd6:	e014      	b.n	8004e02 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004dd8:	6879      	ldr	r1, [r7, #4]
 8004dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ddc:	4613      	mov	r3, r2
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	4413      	add	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	440b      	add	r3, r1
 8004de6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d105      	bne.n	8004dfc <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	4619      	mov	r1, r3
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fb27 	bl	800544a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	3301      	adds	r3, #1
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d3e5      	bcc.n	8004dd8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f005 fb55 	bl	800a4c0 <USB_ReadInterrupts>
 8004e16:	4603      	mov	r3, r0
 8004e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e20:	d13b      	bne.n	8004e9a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e22:	2301      	movs	r3, #1
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
 8004e26:	e02b      	b.n	8004e80 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e38:	6879      	ldr	r1, [r7, #4]
 8004e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	4413      	add	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	3340      	adds	r3, #64	; 0x40
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d115      	bne.n	8004e7a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004e4e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	da12      	bge.n	8004e7a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e58:	4613      	mov	r3, r2
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	4413      	add	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	333f      	adds	r3, #63	; 0x3f
 8004e64:	2201      	movs	r2, #1
 8004e66:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	4619      	mov	r1, r3
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fae8 	bl	800544a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d3ce      	bcc.n	8004e28 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	695a      	ldr	r2, [r3, #20]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f005 fb0e 	bl	800a4c0 <USB_ReadInterrupts>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eae:	d155      	bne.n	8004f5c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb4:	e045      	b.n	8004f42 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ec6:	6879      	ldr	r1, [r7, #4]
 8004ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eca:	4613      	mov	r3, r2
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d12e      	bne.n	8004f3c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004ede:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	da2b      	bge.n	8004f3c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004ef0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d121      	bne.n	8004f3c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efc:	4613      	mov	r3, r2
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	4413      	add	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004f1a:	6a3b      	ldr	r3, [r7, #32]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10a      	bne.n	8004f3c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f38:	6053      	str	r3, [r2, #4]
            break;
 8004f3a:	e007      	b.n	8004f4c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3e:	3301      	adds	r3, #1
 8004f40:	627b      	str	r3, [r7, #36]	; 0x24
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d3b4      	bcc.n	8004eb6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695a      	ldr	r2, [r3, #20]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004f5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f005 faad 	bl	800a4c0 <USB_ReadInterrupts>
 8004f66:	4603      	mov	r3, r0
 8004f68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f70:	d10a      	bne.n	8004f88 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f00a fc6c 	bl	800f850 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	695a      	ldr	r2, [r3, #20]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004f86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f005 fa97 	bl	800a4c0 <USB_ReadInterrupts>
 8004f92:	4603      	mov	r3, r0
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d115      	bne.n	8004fc8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	f003 0304 	and.w	r3, r3, #4
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f00a fc5c 	bl	800f86c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6859      	ldr	r1, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	605a      	str	r2, [r3, #4]
 8004fc4:	e000      	b.n	8004fc8 <HAL_PCD_IRQHandler+0x938>
      return;
 8004fc6:	bf00      	nop
    }
  }
}
 8004fc8:	3734      	adds	r7, #52	; 0x34
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd90      	pop	{r4, r7, pc}

08004fce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b082      	sub	sp, #8
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d101      	bne.n	8004fe8 <HAL_PCD_SetAddress+0x1a>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e013      	b.n	8005010 <HAL_PCD_SetAddress+0x42>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	78fa      	ldrb	r2, [r7, #3]
 8004ff4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	78fa      	ldrb	r2, [r7, #3]
 8004ffe:	4611      	mov	r1, r2
 8005000:	4618      	mov	r0, r3
 8005002:	f005 f9f5 	bl	800a3f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	4608      	mov	r0, r1
 8005022:	4611      	mov	r1, r2
 8005024:	461a      	mov	r2, r3
 8005026:	4603      	mov	r3, r0
 8005028:	70fb      	strb	r3, [r7, #3]
 800502a:	460b      	mov	r3, r1
 800502c:	803b      	strh	r3, [r7, #0]
 800502e:	4613      	mov	r3, r2
 8005030:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005036:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800503a:	2b00      	cmp	r3, #0
 800503c:	da0f      	bge.n	800505e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800503e:	78fb      	ldrb	r3, [r7, #3]
 8005040:	f003 020f 	and.w	r2, r3, #15
 8005044:	4613      	mov	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	3338      	adds	r3, #56	; 0x38
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	4413      	add	r3, r2
 8005052:	3304      	adds	r3, #4
 8005054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2201      	movs	r2, #1
 800505a:	705a      	strb	r2, [r3, #1]
 800505c:	e00f      	b.n	800507e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800505e:	78fb      	ldrb	r3, [r7, #3]
 8005060:	f003 020f 	and.w	r2, r3, #15
 8005064:	4613      	mov	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	4413      	add	r3, r2
 8005074:	3304      	adds	r3, #4
 8005076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800507e:	78fb      	ldrb	r3, [r7, #3]
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	b2da      	uxtb	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800508a:	883a      	ldrh	r2, [r7, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	78ba      	ldrb	r2, [r7, #2]
 8005094:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	785b      	ldrb	r3, [r3, #1]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d004      	beq.n	80050a8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80050a8:	78bb      	ldrb	r3, [r7, #2]
 80050aa:	2b02      	cmp	r3, #2
 80050ac:	d102      	bne.n	80050b4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <HAL_PCD_EP_Open+0xaa>
 80050be:	2302      	movs	r3, #2
 80050c0:	e00e      	b.n	80050e0 <HAL_PCD_EP_Open+0xc8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68f9      	ldr	r1, [r7, #12]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f004 fa75 	bl	80095c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80050de:	7afb      	ldrb	r3, [r7, #11]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	da0f      	bge.n	800511c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	f003 020f 	and.w	r2, r3, #15
 8005102:	4613      	mov	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	3338      	adds	r3, #56	; 0x38
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	4413      	add	r3, r2
 8005110:	3304      	adds	r3, #4
 8005112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2201      	movs	r2, #1
 8005118:	705a      	strb	r2, [r3, #1]
 800511a:	e00f      	b.n	800513c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	f003 020f 	and.w	r2, r3, #15
 8005122:	4613      	mov	r3, r2
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	4413      	add	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	4413      	add	r3, r2
 8005132:	3304      	adds	r3, #4
 8005134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	b2da      	uxtb	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_PCD_EP_Close+0x6e>
 8005152:	2302      	movs	r3, #2
 8005154:	e00e      	b.n	8005174 <HAL_PCD_EP_Close+0x8c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68f9      	ldr	r1, [r7, #12]
 8005164:	4618      	mov	r0, r3
 8005166:	f004 fab3 	bl	80096d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	607a      	str	r2, [r7, #4]
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	460b      	mov	r3, r1
 800518a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800518c:	7afb      	ldrb	r3, [r7, #11]
 800518e:	f003 020f 	and.w	r2, r3, #15
 8005192:	4613      	mov	r3, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	3304      	adds	r3, #4
 80051a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2200      	movs	r2, #0
 80051b6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2200      	movs	r2, #0
 80051bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051be:	7afb      	ldrb	r3, [r7, #11]
 80051c0:	f003 030f 	and.w	r3, r3, #15
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d102      	bne.n	80051d8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80051d8:	7afb      	ldrb	r3, [r7, #11]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	461a      	mov	r2, r3
 80051ee:	6979      	ldr	r1, [r7, #20]
 80051f0:	f004 fd92 	bl	8009d18 <USB_EP0StartXfer>
 80051f4:	e008      	b.n	8005208 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6818      	ldr	r0, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	461a      	mov	r2, r3
 8005202:	6979      	ldr	r1, [r7, #20]
 8005204:	f004 fb40 	bl	8009888 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	460b      	mov	r3, r1
 800521c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800521e:	78fb      	ldrb	r3, [r7, #3]
 8005220:	f003 020f 	and.w	r2, r3, #15
 8005224:	6879      	ldr	r1, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005234:	681b      	ldr	r3, [r3, #0]
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b086      	sub	sp, #24
 8005246:	af00      	add	r7, sp, #0
 8005248:	60f8      	str	r0, [r7, #12]
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
 800524e:	460b      	mov	r3, r1
 8005250:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005252:	7afb      	ldrb	r3, [r7, #11]
 8005254:	f003 020f 	and.w	r2, r3, #15
 8005258:	4613      	mov	r3, r2
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	4413      	add	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	3338      	adds	r3, #56	; 0x38
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	3304      	adds	r3, #4
 8005268:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2200      	movs	r2, #0
 800527a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	2201      	movs	r2, #1
 8005280:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005282:	7afb      	ldrb	r3, [r7, #11]
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	b2da      	uxtb	r2, r3
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d102      	bne.n	800529c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800529c:	7afb      	ldrb	r3, [r7, #11]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d109      	bne.n	80052ba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	6979      	ldr	r1, [r7, #20]
 80052b4:	f004 fd30 	bl	8009d18 <USB_EP0StartXfer>
 80052b8:	e008      	b.n	80052cc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6818      	ldr	r0, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	6979      	ldr	r1, [r7, #20]
 80052c8:	f004 fade 	bl	8009888 <USB_EPStartXfer>
  }

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b084      	sub	sp, #16
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	460b      	mov	r3, r1
 80052e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	f003 020f 	and.w	r2, r3, #15
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d901      	bls.n	80052f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e050      	b.n	8005396 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	da0f      	bge.n	800531c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052fc:	78fb      	ldrb	r3, [r7, #3]
 80052fe:	f003 020f 	and.w	r2, r3, #15
 8005302:	4613      	mov	r3, r2
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	4413      	add	r3, r2
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	3338      	adds	r3, #56	; 0x38
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	4413      	add	r3, r2
 8005310:	3304      	adds	r3, #4
 8005312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	705a      	strb	r2, [r3, #1]
 800531a:	e00d      	b.n	8005338 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800531c:	78fa      	ldrb	r2, [r7, #3]
 800531e:	4613      	mov	r3, r2
 8005320:	00db      	lsls	r3, r3, #3
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	4413      	add	r3, r2
 800532e:	3304      	adds	r3, #4
 8005330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2201      	movs	r2, #1
 800533c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800533e:	78fb      	ldrb	r3, [r7, #3]
 8005340:	f003 030f 	and.w	r3, r3, #15
 8005344:	b2da      	uxtb	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005350:	2b01      	cmp	r3, #1
 8005352:	d101      	bne.n	8005358 <HAL_PCD_EP_SetStall+0x82>
 8005354:	2302      	movs	r3, #2
 8005356:	e01e      	b.n	8005396 <HAL_PCD_EP_SetStall+0xc0>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68f9      	ldr	r1, [r7, #12]
 8005366:	4618      	mov	r0, r3
 8005368:	f004 ff6e 	bl	800a248 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800536c:	78fb      	ldrb	r3, [r7, #3]
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10a      	bne.n	800538c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	b2d9      	uxtb	r1, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005386:	461a      	mov	r2, r3
 8005388:	f005 f95e 	bl	800a648 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	460b      	mov	r3, r1
 80053a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	f003 020f 	and.w	r2, r3, #15
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d901      	bls.n	80053bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e042      	b.n	8005442 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	da0f      	bge.n	80053e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053c4:	78fb      	ldrb	r3, [r7, #3]
 80053c6:	f003 020f 	and.w	r2, r3, #15
 80053ca:	4613      	mov	r3, r2
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	3338      	adds	r3, #56	; 0x38
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	4413      	add	r3, r2
 80053d8:	3304      	adds	r3, #4
 80053da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2201      	movs	r2, #1
 80053e0:	705a      	strb	r2, [r3, #1]
 80053e2:	e00f      	b.n	8005404 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	f003 020f 	and.w	r2, r3, #15
 80053ea:	4613      	mov	r3, r2
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	4413      	add	r3, r2
 80053fa:	3304      	adds	r3, #4
 80053fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800540a:	78fb      	ldrb	r3, [r7, #3]
 800540c:	f003 030f 	and.w	r3, r3, #15
 8005410:	b2da      	uxtb	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_PCD_EP_ClrStall+0x86>
 8005420:	2302      	movs	r3, #2
 8005422:	e00e      	b.n	8005442 <HAL_PCD_EP_ClrStall+0xa4>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68f9      	ldr	r1, [r7, #12]
 8005432:	4618      	mov	r0, r3
 8005434:	f004 ff76 	bl	800a324 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	460b      	mov	r3, r1
 8005454:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005456:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800545a:	2b00      	cmp	r3, #0
 800545c:	da0c      	bge.n	8005478 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800545e:	78fb      	ldrb	r3, [r7, #3]
 8005460:	f003 020f 	and.w	r2, r3, #15
 8005464:	4613      	mov	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	3338      	adds	r3, #56	; 0x38
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	4413      	add	r3, r2
 8005472:	3304      	adds	r3, #4
 8005474:	60fb      	str	r3, [r7, #12]
 8005476:	e00c      	b.n	8005492 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	f003 020f 	and.w	r2, r3, #15
 800547e:	4613      	mov	r3, r2
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	4413      	add	r3, r2
 800548e:	3304      	adds	r3, #4
 8005490:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68f9      	ldr	r1, [r7, #12]
 8005498:	4618      	mov	r0, r3
 800549a:	f004 fd95 	bl	8009fc8 <USB_EPStopXfer>
 800549e:	4603      	mov	r3, r0
 80054a0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80054a2:	7afb      	ldrb	r3, [r7, #11]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08a      	sub	sp, #40	; 0x28
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	4613      	mov	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	3338      	adds	r3, #56	; 0x38
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	4413      	add	r3, r2
 80054d0:	3304      	adds	r3, #4
 80054d2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a1a      	ldr	r2, [r3, #32]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d901      	bls.n	80054e4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e06c      	b.n	80055be <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	699a      	ldr	r2, [r3, #24]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d902      	bls.n	8005500 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	3303      	adds	r3, #3
 8005504:	089b      	lsrs	r3, r3, #2
 8005506:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005508:	e02b      	b.n	8005562 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	429a      	cmp	r2, r3
 800551e:	d902      	bls.n	8005526 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	3303      	adds	r3, #3
 800552a:	089b      	lsrs	r3, r3, #2
 800552c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6919      	ldr	r1, [r3, #16]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	b2da      	uxtb	r2, r3
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800553e:	b2db      	uxtb	r3, r3
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	4603      	mov	r3, r0
 8005544:	6978      	ldr	r0, [r7, #20]
 8005546:	f004 fde9 	bl	800a11c <USB_WritePacket>

    ep->xfer_buff  += len;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	441a      	add	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1a      	ldr	r2, [r3, #32]
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	441a      	add	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556e:	699b      	ldr	r3, [r3, #24]
 8005570:	b29b      	uxth	r3, r3
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	429a      	cmp	r2, r3
 8005576:	d809      	bhi.n	800558c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6a1a      	ldr	r2, [r3, #32]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005580:	429a      	cmp	r2, r3
 8005582:	d203      	bcs.n	800558c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1be      	bne.n	800550a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	699a      	ldr	r2, [r3, #24]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	429a      	cmp	r2, r3
 8005596:	d811      	bhi.n	80055bc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	f003 030f 	and.w	r3, r3, #15
 800559e:	2201      	movs	r2, #1
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	43db      	mvns	r3, r3
 80055b2:	6939      	ldr	r1, [r7, #16]
 80055b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055b8:	4013      	ands	r3, r2
 80055ba:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3720      	adds	r7, #32
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
	...

080055c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b088      	sub	sp, #32
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	333c      	adds	r3, #60	; 0x3c
 80055e0:	3304      	adds	r3, #4
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d17b      	bne.n	80056f6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f003 0308 	and.w	r3, r3, #8
 8005604:	2b00      	cmp	r3, #0
 8005606:	d015      	beq.n	8005634 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	4a61      	ldr	r2, [pc, #388]	; (8005790 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800560c:	4293      	cmp	r3, r2
 800560e:	f240 80b9 	bls.w	8005784 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 80b3 	beq.w	8005784 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	015a      	lsls	r2, r3, #5
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	4413      	add	r3, r2
 8005626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562a:	461a      	mov	r2, r3
 800562c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005630:	6093      	str	r3, [r2, #8]
 8005632:	e0a7      	b.n	8005784 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	d009      	beq.n	8005652 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564a:	461a      	mov	r2, r3
 800564c:	2320      	movs	r3, #32
 800564e:	6093      	str	r3, [r2, #8]
 8005650:	e098      	b.n	8005784 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005658:	2b00      	cmp	r3, #0
 800565a:	f040 8093 	bne.w	8005784 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	4a4b      	ldr	r2, [pc, #300]	; (8005790 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d90f      	bls.n	8005686 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567c:	461a      	mov	r2, r3
 800567e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005682:	6093      	str	r3, [r2, #8]
 8005684:	e07e      	b.n	8005784 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	4613      	mov	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	4413      	add	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	4413      	add	r3, r2
 8005698:	3304      	adds	r3, #4
 800569a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	0159      	lsls	r1, r3, #5
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	440b      	add	r3, r1
 80056a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056b2:	1ad2      	subs	r2, r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d114      	bne.n	80056e8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	699b      	ldr	r3, [r3, #24]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d109      	bne.n	80056da <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6818      	ldr	r0, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80056d0:	461a      	mov	r2, r3
 80056d2:	2101      	movs	r1, #1
 80056d4:	f004 ffb8 	bl	800a648 <USB_EP0_OutStart>
 80056d8:	e006      	b.n	80056e8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	691a      	ldr	r2, [r3, #16]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	441a      	add	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f009 ffea 	bl	800f6c8 <HAL_PCD_DataOutStageCallback>
 80056f4:	e046      	b.n	8005784 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	4a26      	ldr	r2, [pc, #152]	; (8005794 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d124      	bne.n	8005748 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005714:	461a      	mov	r2, r3
 8005716:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800571a:	6093      	str	r3, [r2, #8]
 800571c:	e032      	b.n	8005784 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f003 0320 	and.w	r3, r3, #32
 8005724:	2b00      	cmp	r3, #0
 8005726:	d008      	beq.n	800573a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005734:	461a      	mov	r2, r3
 8005736:	2320      	movs	r3, #32
 8005738:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	b2db      	uxtb	r3, r3
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f009 ffc1 	bl	800f6c8 <HAL_PCD_DataOutStageCallback>
 8005746:	e01d      	b.n	8005784 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d114      	bne.n	8005778 <PCD_EP_OutXfrComplete_int+0x1b0>
 800574e:	6879      	ldr	r1, [r7, #4]
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	4613      	mov	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d108      	bne.n	8005778 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6818      	ldr	r0, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005770:	461a      	mov	r2, r3
 8005772:	2100      	movs	r1, #0
 8005774:	f004 ff68 	bl	800a648 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	b2db      	uxtb	r3, r3
 800577c:	4619      	mov	r1, r3
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f009 ffa2 	bl	800f6c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	4f54300a 	.word	0x4f54300a
 8005794:	4f54310a 	.word	0x4f54310a

08005798 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	333c      	adds	r3, #60	; 0x3c
 80057b0:	3304      	adds	r3, #4
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4a15      	ldr	r2, [pc, #84]	; (8005820 <PCD_EP_OutSetupPacket_int+0x88>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d90e      	bls.n	80057ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d009      	beq.n	80057ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e4:	461a      	mov	r2, r3
 80057e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f009 ff59 	bl	800f6a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4a0a      	ldr	r2, [pc, #40]	; (8005820 <PCD_EP_OutSetupPacket_int+0x88>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d90c      	bls.n	8005814 <PCD_EP_OutSetupPacket_int+0x7c>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d108      	bne.n	8005814 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6818      	ldr	r0, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800580c:	461a      	mov	r2, r3
 800580e:	2101      	movs	r1, #1
 8005810:	f004 ff1a 	bl	800a648 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	4f54300a 	.word	0x4f54300a

08005824 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	460b      	mov	r3, r1
 800582e:	70fb      	strb	r3, [r7, #3]
 8005830:	4613      	mov	r3, r2
 8005832:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d107      	bne.n	8005852 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005842:	883b      	ldrh	r3, [r7, #0]
 8005844:	0419      	lsls	r1, r3, #16
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	430a      	orrs	r2, r1
 800584e:	629a      	str	r2, [r3, #40]	; 0x28
 8005850:	e028      	b.n	80058a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005858:	0c1b      	lsrs	r3, r3, #16
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	4413      	add	r3, r2
 800585e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005860:	2300      	movs	r3, #0
 8005862:	73fb      	strb	r3, [r7, #15]
 8005864:	e00d      	b.n	8005882 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	3340      	adds	r3, #64	; 0x40
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4413      	add	r3, r2
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	0c1b      	lsrs	r3, r3, #16
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	4413      	add	r3, r2
 800587a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	3301      	adds	r3, #1
 8005880:	73fb      	strb	r3, [r7, #15]
 8005882:	7bfa      	ldrb	r2, [r7, #15]
 8005884:	78fb      	ldrb	r3, [r7, #3]
 8005886:	3b01      	subs	r3, #1
 8005888:	429a      	cmp	r2, r3
 800588a:	d3ec      	bcc.n	8005866 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800588c:	883b      	ldrh	r3, [r7, #0]
 800588e:	0418      	lsls	r0, r3, #16
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6819      	ldr	r1, [r3, #0]
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	3b01      	subs	r3, #1
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	4302      	orrs	r2, r0
 800589c:	3340      	adds	r3, #64	; 0x40
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	440b      	add	r3, r1
 80058a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	460b      	mov	r3, r1
 80058bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	887a      	ldrh	r2, [r7, #2]
 80058c4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e267      	b.n	8005dce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	d075      	beq.n	80059f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800590a:	4b88      	ldr	r3, [pc, #544]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 030c 	and.w	r3, r3, #12
 8005912:	2b04      	cmp	r3, #4
 8005914:	d00c      	beq.n	8005930 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005916:	4b85      	ldr	r3, [pc, #532]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800591e:	2b08      	cmp	r3, #8
 8005920:	d112      	bne.n	8005948 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005922:	4b82      	ldr	r3, [pc, #520]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800592a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800592e:	d10b      	bne.n	8005948 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005930:	4b7e      	ldr	r3, [pc, #504]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d05b      	beq.n	80059f4 <HAL_RCC_OscConfig+0x108>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d157      	bne.n	80059f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e242      	b.n	8005dce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005950:	d106      	bne.n	8005960 <HAL_RCC_OscConfig+0x74>
 8005952:	4b76      	ldr	r3, [pc, #472]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a75      	ldr	r2, [pc, #468]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	e01d      	b.n	800599c <HAL_RCC_OscConfig+0xb0>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005968:	d10c      	bne.n	8005984 <HAL_RCC_OscConfig+0x98>
 800596a:	4b70      	ldr	r3, [pc, #448]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a6f      	ldr	r2, [pc, #444]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005974:	6013      	str	r3, [r2, #0]
 8005976:	4b6d      	ldr	r3, [pc, #436]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a6c      	ldr	r2, [pc, #432]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 800597c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005980:	6013      	str	r3, [r2, #0]
 8005982:	e00b      	b.n	800599c <HAL_RCC_OscConfig+0xb0>
 8005984:	4b69      	ldr	r3, [pc, #420]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a68      	ldr	r2, [pc, #416]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 800598a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	4b66      	ldr	r3, [pc, #408]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a65      	ldr	r2, [pc, #404]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800599a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d013      	beq.n	80059cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a4:	f7fd fa98 	bl	8002ed8 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059ac:	f7fd fa94 	bl	8002ed8 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b64      	cmp	r3, #100	; 0x64
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e207      	b.n	8005dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059be:	4b5b      	ldr	r3, [pc, #364]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0f0      	beq.n	80059ac <HAL_RCC_OscConfig+0xc0>
 80059ca:	e014      	b.n	80059f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059cc:	f7fd fa84 	bl	8002ed8 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059d4:	f7fd fa80 	bl	8002ed8 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b64      	cmp	r3, #100	; 0x64
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e1f3      	b.n	8005dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059e6:	4b51      	ldr	r3, [pc, #324]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1f0      	bne.n	80059d4 <HAL_RCC_OscConfig+0xe8>
 80059f2:	e000      	b.n	80059f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d063      	beq.n	8005aca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a02:	4b4a      	ldr	r3, [pc, #296]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 030c 	and.w	r3, r3, #12
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00b      	beq.n	8005a26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a0e:	4b47      	ldr	r3, [pc, #284]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	d11c      	bne.n	8005a54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a1a:	4b44      	ldr	r3, [pc, #272]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d116      	bne.n	8005a54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a26:	4b41      	ldr	r3, [pc, #260]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <HAL_RCC_OscConfig+0x152>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d001      	beq.n	8005a3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e1c7      	b.n	8005dce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a3e:	4b3b      	ldr	r3, [pc, #236]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	4937      	ldr	r1, [pc, #220]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a52:	e03a      	b.n	8005aca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d020      	beq.n	8005a9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a5c:	4b34      	ldr	r3, [pc, #208]	; (8005b30 <HAL_RCC_OscConfig+0x244>)
 8005a5e:	2201      	movs	r2, #1
 8005a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a62:	f7fd fa39 	bl	8002ed8 <HAL_GetTick>
 8005a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a6a:	f7fd fa35 	bl	8002ed8 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e1a8      	b.n	8005dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a7c:	4b2b      	ldr	r3, [pc, #172]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d0f0      	beq.n	8005a6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a88:	4b28      	ldr	r3, [pc, #160]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	4925      	ldr	r1, [pc, #148]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	600b      	str	r3, [r1, #0]
 8005a9c:	e015      	b.n	8005aca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a9e:	4b24      	ldr	r3, [pc, #144]	; (8005b30 <HAL_RCC_OscConfig+0x244>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa4:	f7fd fa18 	bl	8002ed8 <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005aac:	f7fd fa14 	bl	8002ed8 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e187      	b.n	8005dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005abe:	4b1b      	ldr	r3, [pc, #108]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f0      	bne.n	8005aac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d036      	beq.n	8005b44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d016      	beq.n	8005b0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ade:	4b15      	ldr	r3, [pc, #84]	; (8005b34 <HAL_RCC_OscConfig+0x248>)
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae4:	f7fd f9f8 	bl	8002ed8 <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005aec:	f7fd f9f4 	bl	8002ed8 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e167      	b.n	8005dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005afe:	4b0b      	ldr	r3, [pc, #44]	; (8005b2c <HAL_RCC_OscConfig+0x240>)
 8005b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0f0      	beq.n	8005aec <HAL_RCC_OscConfig+0x200>
 8005b0a:	e01b      	b.n	8005b44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b0c:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <HAL_RCC_OscConfig+0x248>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b12:	f7fd f9e1 	bl	8002ed8 <HAL_GetTick>
 8005b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b18:	e00e      	b.n	8005b38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b1a:	f7fd f9dd 	bl	8002ed8 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d907      	bls.n	8005b38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e150      	b.n	8005dce <HAL_RCC_OscConfig+0x4e2>
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	42470000 	.word	0x42470000
 8005b34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b38:	4b88      	ldr	r3, [pc, #544]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b3c:	f003 0302 	and.w	r3, r3, #2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1ea      	bne.n	8005b1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 8097 	beq.w	8005c80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b52:	2300      	movs	r3, #0
 8005b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b56:	4b81      	ldr	r3, [pc, #516]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10f      	bne.n	8005b82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b62:	2300      	movs	r3, #0
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	4b7d      	ldr	r3, [pc, #500]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	4a7c      	ldr	r2, [pc, #496]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b70:	6413      	str	r3, [r2, #64]	; 0x40
 8005b72:	4b7a      	ldr	r3, [pc, #488]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b7a:	60bb      	str	r3, [r7, #8]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b82:	4b77      	ldr	r3, [pc, #476]	; (8005d60 <HAL_RCC_OscConfig+0x474>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d118      	bne.n	8005bc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b8e:	4b74      	ldr	r3, [pc, #464]	; (8005d60 <HAL_RCC_OscConfig+0x474>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a73      	ldr	r2, [pc, #460]	; (8005d60 <HAL_RCC_OscConfig+0x474>)
 8005b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b9a:	f7fd f99d 	bl	8002ed8 <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ba2:	f7fd f999 	bl	8002ed8 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e10c      	b.n	8005dce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb4:	4b6a      	ldr	r3, [pc, #424]	; (8005d60 <HAL_RCC_OscConfig+0x474>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d0f0      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d106      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x2ea>
 8005bc8:	4b64      	ldr	r3, [pc, #400]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bcc:	4a63      	ldr	r2, [pc, #396]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005bce:	f043 0301 	orr.w	r3, r3, #1
 8005bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd4:	e01c      	b.n	8005c10 <HAL_RCC_OscConfig+0x324>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	2b05      	cmp	r3, #5
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x30c>
 8005bde:	4b5f      	ldr	r3, [pc, #380]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be2:	4a5e      	ldr	r2, [pc, #376]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005be4:	f043 0304 	orr.w	r3, r3, #4
 8005be8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bea:	4b5c      	ldr	r3, [pc, #368]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bee:	4a5b      	ldr	r2, [pc, #364]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005bf0:	f043 0301 	orr.w	r3, r3, #1
 8005bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8005bf6:	e00b      	b.n	8005c10 <HAL_RCC_OscConfig+0x324>
 8005bf8:	4b58      	ldr	r3, [pc, #352]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfc:	4a57      	ldr	r2, [pc, #348]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005bfe:	f023 0301 	bic.w	r3, r3, #1
 8005c02:	6713      	str	r3, [r2, #112]	; 0x70
 8005c04:	4b55      	ldr	r3, [pc, #340]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c08:	4a54      	ldr	r2, [pc, #336]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005c0a:	f023 0304 	bic.w	r3, r3, #4
 8005c0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d015      	beq.n	8005c44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c18:	f7fd f95e 	bl	8002ed8 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c1e:	e00a      	b.n	8005c36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c20:	f7fd f95a 	bl	8002ed8 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e0cb      	b.n	8005dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c36:	4b49      	ldr	r3, [pc, #292]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d0ee      	beq.n	8005c20 <HAL_RCC_OscConfig+0x334>
 8005c42:	e014      	b.n	8005c6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c44:	f7fd f948 	bl	8002ed8 <HAL_GetTick>
 8005c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c4a:	e00a      	b.n	8005c62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c4c:	f7fd f944 	bl	8002ed8 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e0b5      	b.n	8005dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c62:	4b3e      	ldr	r3, [pc, #248]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1ee      	bne.n	8005c4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c6e:	7dfb      	ldrb	r3, [r7, #23]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d105      	bne.n	8005c80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c74:	4b39      	ldr	r3, [pc, #228]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	4a38      	ldr	r2, [pc, #224]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 80a1 	beq.w	8005dcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c8a:	4b34      	ldr	r3, [pc, #208]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f003 030c 	and.w	r3, r3, #12
 8005c92:	2b08      	cmp	r3, #8
 8005c94:	d05c      	beq.n	8005d50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d141      	bne.n	8005d22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c9e:	4b31      	ldr	r3, [pc, #196]	; (8005d64 <HAL_RCC_OscConfig+0x478>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca4:	f7fd f918 	bl	8002ed8 <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cac:	f7fd f914 	bl	8002ed8 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e087      	b.n	8005dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cbe:	4b27      	ldr	r3, [pc, #156]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1f0      	bne.n	8005cac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69da      	ldr	r2, [r3, #28]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd8:	019b      	lsls	r3, r3, #6
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	085b      	lsrs	r3, r3, #1
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	041b      	lsls	r3, r3, #16
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	061b      	lsls	r3, r3, #24
 8005cee:	491b      	ldr	r1, [pc, #108]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cf4:	4b1b      	ldr	r3, [pc, #108]	; (8005d64 <HAL_RCC_OscConfig+0x478>)
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cfa:	f7fd f8ed 	bl	8002ed8 <HAL_GetTick>
 8005cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d00:	e008      	b.n	8005d14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d02:	f7fd f8e9 	bl	8002ed8 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d901      	bls.n	8005d14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e05c      	b.n	8005dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d14:	4b11      	ldr	r3, [pc, #68]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d0f0      	beq.n	8005d02 <HAL_RCC_OscConfig+0x416>
 8005d20:	e054      	b.n	8005dcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d22:	4b10      	ldr	r3, [pc, #64]	; (8005d64 <HAL_RCC_OscConfig+0x478>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d28:	f7fd f8d6 	bl	8002ed8 <HAL_GetTick>
 8005d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d2e:	e008      	b.n	8005d42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d30:	f7fd f8d2 	bl	8002ed8 <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e045      	b.n	8005dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d42:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <HAL_RCC_OscConfig+0x470>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f0      	bne.n	8005d30 <HAL_RCC_OscConfig+0x444>
 8005d4e:	e03d      	b.n	8005dcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d107      	bne.n	8005d68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e038      	b.n	8005dce <HAL_RCC_OscConfig+0x4e2>
 8005d5c:	40023800 	.word	0x40023800
 8005d60:	40007000 	.word	0x40007000
 8005d64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d68:	4b1b      	ldr	r3, [pc, #108]	; (8005dd8 <HAL_RCC_OscConfig+0x4ec>)
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d028      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d121      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d11a      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d98:	4013      	ands	r3, r2
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d111      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	085b      	lsrs	r3, r3, #1
 8005db0:	3b01      	subs	r3, #1
 8005db2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d107      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d001      	beq.n	8005dcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e000      	b.n	8005dce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	40023800 	.word	0x40023800

08005ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e0cc      	b.n	8005f8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005df0:	4b68      	ldr	r3, [pc, #416]	; (8005f94 <HAL_RCC_ClockConfig+0x1b8>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0307 	and.w	r3, r3, #7
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d90c      	bls.n	8005e18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dfe:	4b65      	ldr	r3, [pc, #404]	; (8005f94 <HAL_RCC_ClockConfig+0x1b8>)
 8005e00:	683a      	ldr	r2, [r7, #0]
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e06:	4b63      	ldr	r3, [pc, #396]	; (8005f94 <HAL_RCC_ClockConfig+0x1b8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d001      	beq.n	8005e18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e0b8      	b.n	8005f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d020      	beq.n	8005e66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d005      	beq.n	8005e3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e30:	4b59      	ldr	r3, [pc, #356]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	4a58      	ldr	r2, [pc, #352]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0308 	and.w	r3, r3, #8
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d005      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e48:	4b53      	ldr	r3, [pc, #332]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	4a52      	ldr	r2, [pc, #328]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e54:	4b50      	ldr	r3, [pc, #320]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	494d      	ldr	r1, [pc, #308]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0301 	and.w	r3, r3, #1
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d044      	beq.n	8005efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d107      	bne.n	8005e8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e7a:	4b47      	ldr	r3, [pc, #284]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d119      	bne.n	8005eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e07f      	b.n	8005f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d003      	beq.n	8005e9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d107      	bne.n	8005eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e9a:	4b3f      	ldr	r3, [pc, #252]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d109      	bne.n	8005eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e06f      	b.n	8005f8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eaa:	4b3b      	ldr	r3, [pc, #236]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e067      	b.n	8005f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eba:	4b37      	ldr	r3, [pc, #220]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f023 0203 	bic.w	r2, r3, #3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	4934      	ldr	r1, [pc, #208]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ecc:	f7fd f804 	bl	8002ed8 <HAL_GetTick>
 8005ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ed2:	e00a      	b.n	8005eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ed4:	f7fd f800 	bl	8002ed8 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e04f      	b.n	8005f8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eea:	4b2b      	ldr	r3, [pc, #172]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 020c 	and.w	r2, r3, #12
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d1eb      	bne.n	8005ed4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005efc:	4b25      	ldr	r3, [pc, #148]	; (8005f94 <HAL_RCC_ClockConfig+0x1b8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d20c      	bcs.n	8005f24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f0a:	4b22      	ldr	r3, [pc, #136]	; (8005f94 <HAL_RCC_ClockConfig+0x1b8>)
 8005f0c:	683a      	ldr	r2, [r7, #0]
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f12:	4b20      	ldr	r3, [pc, #128]	; (8005f94 <HAL_RCC_ClockConfig+0x1b8>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d001      	beq.n	8005f24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e032      	b.n	8005f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d008      	beq.n	8005f42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f30:	4b19      	ldr	r3, [pc, #100]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	4916      	ldr	r1, [pc, #88]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d009      	beq.n	8005f62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f4e:	4b12      	ldr	r3, [pc, #72]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	490e      	ldr	r1, [pc, #56]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f62:	f000 f821 	bl	8005fa8 <HAL_RCC_GetSysClockFreq>
 8005f66:	4602      	mov	r2, r0
 8005f68:	4b0b      	ldr	r3, [pc, #44]	; (8005f98 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	091b      	lsrs	r3, r3, #4
 8005f6e:	f003 030f 	and.w	r3, r3, #15
 8005f72:	490a      	ldr	r1, [pc, #40]	; (8005f9c <HAL_RCC_ClockConfig+0x1c0>)
 8005f74:	5ccb      	ldrb	r3, [r1, r3]
 8005f76:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7a:	4a09      	ldr	r2, [pc, #36]	; (8005fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8005f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f7e:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7fc f860 	bl	8002048 <HAL_InitTick>

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	40023c00 	.word	0x40023c00
 8005f98:	40023800 	.word	0x40023800
 8005f9c:	0801b388 	.word	0x0801b388
 8005fa0:	20000004 	.word	0x20000004
 8005fa4:	20000008 	.word	0x20000008

08005fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fac:	b094      	sub	sp, #80	; 0x50
 8005fae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fb8:	2300      	movs	r3, #0
 8005fba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fc0:	4b79      	ldr	r3, [pc, #484]	; (80061a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f003 030c 	and.w	r3, r3, #12
 8005fc8:	2b08      	cmp	r3, #8
 8005fca:	d00d      	beq.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	f200 80e1 	bhi.w	8006194 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <HAL_RCC_GetSysClockFreq+0x34>
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	d003      	beq.n	8005fe2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005fda:	e0db      	b.n	8006194 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005fdc:	4b73      	ldr	r3, [pc, #460]	; (80061ac <HAL_RCC_GetSysClockFreq+0x204>)
 8005fde:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005fe0:	e0db      	b.n	800619a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005fe2:	4b73      	ldr	r3, [pc, #460]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005fe4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005fe6:	e0d8      	b.n	800619a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005fe8:	4b6f      	ldr	r3, [pc, #444]	; (80061a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ff0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ff2:	4b6d      	ldr	r3, [pc, #436]	; (80061a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d063      	beq.n	80060c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ffe:	4b6a      	ldr	r3, [pc, #424]	; (80061a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	099b      	lsrs	r3, r3, #6
 8006004:	2200      	movs	r2, #0
 8006006:	63bb      	str	r3, [r7, #56]	; 0x38
 8006008:	63fa      	str	r2, [r7, #60]	; 0x3c
 800600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006010:	633b      	str	r3, [r7, #48]	; 0x30
 8006012:	2300      	movs	r3, #0
 8006014:	637b      	str	r3, [r7, #52]	; 0x34
 8006016:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800601a:	4622      	mov	r2, r4
 800601c:	462b      	mov	r3, r5
 800601e:	f04f 0000 	mov.w	r0, #0
 8006022:	f04f 0100 	mov.w	r1, #0
 8006026:	0159      	lsls	r1, r3, #5
 8006028:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800602c:	0150      	lsls	r0, r2, #5
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	4621      	mov	r1, r4
 8006034:	1a51      	subs	r1, r2, r1
 8006036:	6139      	str	r1, [r7, #16]
 8006038:	4629      	mov	r1, r5
 800603a:	eb63 0301 	sbc.w	r3, r3, r1
 800603e:	617b      	str	r3, [r7, #20]
 8006040:	f04f 0200 	mov.w	r2, #0
 8006044:	f04f 0300 	mov.w	r3, #0
 8006048:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800604c:	4659      	mov	r1, fp
 800604e:	018b      	lsls	r3, r1, #6
 8006050:	4651      	mov	r1, sl
 8006052:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006056:	4651      	mov	r1, sl
 8006058:	018a      	lsls	r2, r1, #6
 800605a:	4651      	mov	r1, sl
 800605c:	ebb2 0801 	subs.w	r8, r2, r1
 8006060:	4659      	mov	r1, fp
 8006062:	eb63 0901 	sbc.w	r9, r3, r1
 8006066:	f04f 0200 	mov.w	r2, #0
 800606a:	f04f 0300 	mov.w	r3, #0
 800606e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800607a:	4690      	mov	r8, r2
 800607c:	4699      	mov	r9, r3
 800607e:	4623      	mov	r3, r4
 8006080:	eb18 0303 	adds.w	r3, r8, r3
 8006084:	60bb      	str	r3, [r7, #8]
 8006086:	462b      	mov	r3, r5
 8006088:	eb49 0303 	adc.w	r3, r9, r3
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	f04f 0200 	mov.w	r2, #0
 8006092:	f04f 0300 	mov.w	r3, #0
 8006096:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800609a:	4629      	mov	r1, r5
 800609c:	024b      	lsls	r3, r1, #9
 800609e:	4621      	mov	r1, r4
 80060a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060a4:	4621      	mov	r1, r4
 80060a6:	024a      	lsls	r2, r1, #9
 80060a8:	4610      	mov	r0, r2
 80060aa:	4619      	mov	r1, r3
 80060ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ae:	2200      	movs	r2, #0
 80060b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80060b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060b8:	f7fa fb4e 	bl	8000758 <__aeabi_uldivmod>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	4613      	mov	r3, r2
 80060c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c4:	e058      	b.n	8006178 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060c6:	4b38      	ldr	r3, [pc, #224]	; (80061a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	099b      	lsrs	r3, r3, #6
 80060cc:	2200      	movs	r2, #0
 80060ce:	4618      	mov	r0, r3
 80060d0:	4611      	mov	r1, r2
 80060d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80060d6:	623b      	str	r3, [r7, #32]
 80060d8:	2300      	movs	r3, #0
 80060da:	627b      	str	r3, [r7, #36]	; 0x24
 80060dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80060e0:	4642      	mov	r2, r8
 80060e2:	464b      	mov	r3, r9
 80060e4:	f04f 0000 	mov.w	r0, #0
 80060e8:	f04f 0100 	mov.w	r1, #0
 80060ec:	0159      	lsls	r1, r3, #5
 80060ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060f2:	0150      	lsls	r0, r2, #5
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	4641      	mov	r1, r8
 80060fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80060fe:	4649      	mov	r1, r9
 8006100:	eb63 0b01 	sbc.w	fp, r3, r1
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006110:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006114:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006118:	ebb2 040a 	subs.w	r4, r2, sl
 800611c:	eb63 050b 	sbc.w	r5, r3, fp
 8006120:	f04f 0200 	mov.w	r2, #0
 8006124:	f04f 0300 	mov.w	r3, #0
 8006128:	00eb      	lsls	r3, r5, #3
 800612a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800612e:	00e2      	lsls	r2, r4, #3
 8006130:	4614      	mov	r4, r2
 8006132:	461d      	mov	r5, r3
 8006134:	4643      	mov	r3, r8
 8006136:	18e3      	adds	r3, r4, r3
 8006138:	603b      	str	r3, [r7, #0]
 800613a:	464b      	mov	r3, r9
 800613c:	eb45 0303 	adc.w	r3, r5, r3
 8006140:	607b      	str	r3, [r7, #4]
 8006142:	f04f 0200 	mov.w	r2, #0
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800614e:	4629      	mov	r1, r5
 8006150:	028b      	lsls	r3, r1, #10
 8006152:	4621      	mov	r1, r4
 8006154:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006158:	4621      	mov	r1, r4
 800615a:	028a      	lsls	r2, r1, #10
 800615c:	4610      	mov	r0, r2
 800615e:	4619      	mov	r1, r3
 8006160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006162:	2200      	movs	r2, #0
 8006164:	61bb      	str	r3, [r7, #24]
 8006166:	61fa      	str	r2, [r7, #28]
 8006168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800616c:	f7fa faf4 	bl	8000758 <__aeabi_uldivmod>
 8006170:	4602      	mov	r2, r0
 8006172:	460b      	mov	r3, r1
 8006174:	4613      	mov	r3, r2
 8006176:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006178:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	0c1b      	lsrs	r3, r3, #16
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	3301      	adds	r3, #1
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006188:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800618a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800618c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006190:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006192:	e002      	b.n	800619a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006194:	4b05      	ldr	r3, [pc, #20]	; (80061ac <HAL_RCC_GetSysClockFreq+0x204>)
 8006196:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800619a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800619c:	4618      	mov	r0, r3
 800619e:	3750      	adds	r7, #80	; 0x50
 80061a0:	46bd      	mov	sp, r7
 80061a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061a6:	bf00      	nop
 80061a8:	40023800 	.word	0x40023800
 80061ac:	00f42400 	.word	0x00f42400
 80061b0:	007a1200 	.word	0x007a1200

080061b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061b4:	b480      	push	{r7}
 80061b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061b8:	4b03      	ldr	r3, [pc, #12]	; (80061c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80061ba:	681b      	ldr	r3, [r3, #0]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	20000004 	.word	0x20000004

080061cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061d0:	f7ff fff0 	bl	80061b4 <HAL_RCC_GetHCLKFreq>
 80061d4:	4602      	mov	r2, r0
 80061d6:	4b05      	ldr	r3, [pc, #20]	; (80061ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	0a9b      	lsrs	r3, r3, #10
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	4903      	ldr	r1, [pc, #12]	; (80061f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061e2:	5ccb      	ldrb	r3, [r1, r3]
 80061e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	40023800 	.word	0x40023800
 80061f0:	0801b398 	.word	0x0801b398

080061f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80061f8:	f7ff ffdc 	bl	80061b4 <HAL_RCC_GetHCLKFreq>
 80061fc:	4602      	mov	r2, r0
 80061fe:	4b05      	ldr	r3, [pc, #20]	; (8006214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	0b5b      	lsrs	r3, r3, #13
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	4903      	ldr	r1, [pc, #12]	; (8006218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800620a:	5ccb      	ldrb	r3, [r1, r3]
 800620c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006210:	4618      	mov	r0, r3
 8006212:	bd80      	pop	{r7, pc}
 8006214:	40023800 	.word	0x40023800
 8006218:	0801b398 	.word	0x0801b398

0800621c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	220f      	movs	r2, #15
 800622a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800622c:	4b12      	ldr	r3, [pc, #72]	; (8006278 <HAL_RCC_GetClockConfig+0x5c>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f003 0203 	and.w	r2, r3, #3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006238:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <HAL_RCC_GetClockConfig+0x5c>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006244:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <HAL_RCC_GetClockConfig+0x5c>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006250:	4b09      	ldr	r3, [pc, #36]	; (8006278 <HAL_RCC_GetClockConfig+0x5c>)
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	08db      	lsrs	r3, r3, #3
 8006256:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800625e:	4b07      	ldr	r3, [pc, #28]	; (800627c <HAL_RCC_GetClockConfig+0x60>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0207 	and.w	r2, r3, #7
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	601a      	str	r2, [r3, #0]
}
 800626a:	bf00      	nop
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40023800 	.word	0x40023800
 800627c:	40023c00 	.word	0x40023c00

08006280 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e01c      	b.n	80062cc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	795b      	ldrb	r3, [r3, #5]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b00      	cmp	r3, #0
 800629a:	d105      	bne.n	80062a8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7fb fe04 	bl	8001eb0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f042 0204 	orr.w	r2, r2, #4
 80062bc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e07b      	b.n	80063de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d108      	bne.n	8006300 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062f6:	d009      	beq.n	800630c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	61da      	str	r2, [r3, #28]
 80062fe:	e005      	b.n	800630c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d106      	bne.n	800632c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7fb fe1a 	bl	8001f60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006342:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	431a      	orrs	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	431a      	orrs	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006390:	ea42 0103 	orr.w	r1, r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006398:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	0c1b      	lsrs	r3, r3, #16
 80063aa:	f003 0104 	and.w	r1, r3, #4
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	f003 0210 	and.w	r2, r3, #16
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	69da      	ldr	r2, [r3, #28]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b082      	sub	sp, #8
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e041      	b.n	800647c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d106      	bne.n	8006412 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7fc fae7 	bl	80029e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2202      	movs	r2, #2
 8006416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3304      	adds	r3, #4
 8006422:	4619      	mov	r1, r3
 8006424:	4610      	mov	r0, r2
 8006426:	f000 fded 	bl	8007004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3708      	adds	r7, #8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b01      	cmp	r3, #1
 8006496:	d001      	beq.n	800649c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e04e      	b.n	800653a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0201 	orr.w	r2, r2, #1
 80064b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a23      	ldr	r2, [pc, #140]	; (8006548 <HAL_TIM_Base_Start_IT+0xc4>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d022      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x80>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c6:	d01d      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x80>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1f      	ldr	r2, [pc, #124]	; (800654c <HAL_TIM_Base_Start_IT+0xc8>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d018      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x80>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1e      	ldr	r2, [pc, #120]	; (8006550 <HAL_TIM_Base_Start_IT+0xcc>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d013      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x80>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1c      	ldr	r2, [pc, #112]	; (8006554 <HAL_TIM_Base_Start_IT+0xd0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00e      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x80>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1b      	ldr	r2, [pc, #108]	; (8006558 <HAL_TIM_Base_Start_IT+0xd4>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d009      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x80>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a19      	ldr	r2, [pc, #100]	; (800655c <HAL_TIM_Base_Start_IT+0xd8>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d004      	beq.n	8006504 <HAL_TIM_Base_Start_IT+0x80>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a18      	ldr	r2, [pc, #96]	; (8006560 <HAL_TIM_Base_Start_IT+0xdc>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d111      	bne.n	8006528 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f003 0307 	and.w	r3, r3, #7
 800650e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2b06      	cmp	r3, #6
 8006514:	d010      	beq.n	8006538 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f042 0201 	orr.w	r2, r2, #1
 8006524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006526:	e007      	b.n	8006538 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f042 0201 	orr.w	r2, r2, #1
 8006536:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40010000 	.word	0x40010000
 800654c:	40000400 	.word	0x40000400
 8006550:	40000800 	.word	0x40000800
 8006554:	40000c00 	.word	0x40000c00
 8006558:	40010400 	.word	0x40010400
 800655c:	40014000 	.word	0x40014000
 8006560:	40001800 	.word	0x40001800

08006564 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e041      	b.n	80065fa <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d106      	bne.n	8006590 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7fc fa06 	bl	800299c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	3304      	adds	r3, #4
 80065a0:	4619      	mov	r1, r3
 80065a2:	4610      	mov	r0, r2
 80065a4:	f000 fd2e 	bl	8007004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b082      	sub	sp, #8
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e041      	b.n	8006698 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b00      	cmp	r3, #0
 800661e:	d106      	bne.n	800662e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7fc f96f 	bl	800290c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2202      	movs	r2, #2
 8006632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3304      	adds	r3, #4
 800663e:	4619      	mov	r1, r3
 8006640:	4610      	mov	r0, r2
 8006642:	f000 fcdf 	bl	8007004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e041      	b.n	8006736 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d106      	bne.n	80066cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f839 	bl	800673e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2202      	movs	r2, #2
 80066d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3304      	adds	r3, #4
 80066dc:	4619      	mov	r1, r3
 80066de:	4610      	mov	r0, r2
 80066e0:	f000 fc90 	bl	8007004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b086      	sub	sp, #24
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e097      	b.n	8006896 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7fc f844 	bl	8002808 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	6812      	ldr	r2, [r2, #0]
 8006792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006796:	f023 0307 	bic.w	r3, r3, #7
 800679a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	3304      	adds	r3, #4
 80067a4:	4619      	mov	r1, r3
 80067a6:	4610      	mov	r0, r2
 80067a8:	f000 fc2c 	bl	8007004 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067d4:	f023 0303 	bic.w	r3, r3, #3
 80067d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	689a      	ldr	r2, [r3, #8]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	021b      	lsls	r3, r3, #8
 80067e4:	4313      	orrs	r3, r2
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80067f2:	f023 030c 	bic.w	r3, r3, #12
 80067f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	021b      	lsls	r3, r3, #8
 800680e:	4313      	orrs	r3, r2
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	4313      	orrs	r3, r2
 8006814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	011a      	lsls	r2, r3, #4
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	031b      	lsls	r3, r3, #12
 8006822:	4313      	orrs	r3, r2
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006830:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006838:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	4313      	orrs	r3, r2
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d122      	bne.n	80068fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d11b      	bne.n	80068fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f06f 0202 	mvn.w	r2, #2
 80068ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	f003 0303 	and.w	r3, r3, #3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fb70 	bl	8006fc6 <HAL_TIM_IC_CaptureCallback>
 80068e6:	e005      	b.n	80068f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fb62 	bl	8006fb2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fb73 	bl	8006fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b04      	cmp	r3, #4
 8006906:	d122      	bne.n	800694e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f003 0304 	and.w	r3, r3, #4
 8006912:	2b04      	cmp	r3, #4
 8006914:	d11b      	bne.n	800694e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f06f 0204 	mvn.w	r2, #4
 800691e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2202      	movs	r2, #2
 8006924:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fb46 	bl	8006fc6 <HAL_TIM_IC_CaptureCallback>
 800693a:	e005      	b.n	8006948 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fb38 	bl	8006fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fb49 	bl	8006fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	f003 0308 	and.w	r3, r3, #8
 8006958:	2b08      	cmp	r3, #8
 800695a:	d122      	bne.n	80069a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f003 0308 	and.w	r3, r3, #8
 8006966:	2b08      	cmp	r3, #8
 8006968:	d11b      	bne.n	80069a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f06f 0208 	mvn.w	r2, #8
 8006972:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2204      	movs	r2, #4
 8006978:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	69db      	ldr	r3, [r3, #28]
 8006980:	f003 0303 	and.w	r3, r3, #3
 8006984:	2b00      	cmp	r3, #0
 8006986:	d003      	beq.n	8006990 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fb1c 	bl	8006fc6 <HAL_TIM_IC_CaptureCallback>
 800698e:	e005      	b.n	800699c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fb0e 	bl	8006fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fb1f 	bl	8006fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	691b      	ldr	r3, [r3, #16]
 80069a8:	f003 0310 	and.w	r3, r3, #16
 80069ac:	2b10      	cmp	r3, #16
 80069ae:	d122      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f003 0310 	and.w	r3, r3, #16
 80069ba:	2b10      	cmp	r3, #16
 80069bc:	d11b      	bne.n	80069f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f06f 0210 	mvn.w	r2, #16
 80069c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2208      	movs	r2, #8
 80069cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 faf2 	bl	8006fc6 <HAL_TIM_IC_CaptureCallback>
 80069e2:	e005      	b.n	80069f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fae4 	bl	8006fb2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 faf5 	bl	8006fda <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d10e      	bne.n	8006a22 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f003 0301 	and.w	r3, r3, #1
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d107      	bne.n	8006a22 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f06f 0201 	mvn.w	r2, #1
 8006a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7fb f8b7 	bl	8001b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2c:	2b80      	cmp	r3, #128	; 0x80
 8006a2e:	d10e      	bne.n	8006a4e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3a:	2b80      	cmp	r3, #128	; 0x80
 8006a3c:	d107      	bne.n	8006a4e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 ffc7 	bl	80079dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a58:	2b40      	cmp	r3, #64	; 0x40
 8006a5a:	d10e      	bne.n	8006a7a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a66:	2b40      	cmp	r3, #64	; 0x40
 8006a68:	d107      	bne.n	8006a7a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 faba 	bl	8006fee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	f003 0320 	and.w	r3, r3, #32
 8006a84:	2b20      	cmp	r3, #32
 8006a86:	d10e      	bne.n	8006aa6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f003 0320 	and.w	r3, r3, #32
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	d107      	bne.n	8006aa6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f06f 0220 	mvn.w	r2, #32
 8006a9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 ff91 	bl	80079c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006aa6:	bf00      	nop
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006abc:	2300      	movs	r3, #0
 8006abe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d101      	bne.n	8006ace <HAL_TIM_OC_ConfigChannel+0x1e>
 8006aca:	2302      	movs	r3, #2
 8006acc:	e048      	b.n	8006b60 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b0c      	cmp	r3, #12
 8006ada:	d839      	bhi.n	8006b50 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006adc:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae2:	bf00      	nop
 8006ae4:	08006b19 	.word	0x08006b19
 8006ae8:	08006b51 	.word	0x08006b51
 8006aec:	08006b51 	.word	0x08006b51
 8006af0:	08006b51 	.word	0x08006b51
 8006af4:	08006b27 	.word	0x08006b27
 8006af8:	08006b51 	.word	0x08006b51
 8006afc:	08006b51 	.word	0x08006b51
 8006b00:	08006b51 	.word	0x08006b51
 8006b04:	08006b35 	.word	0x08006b35
 8006b08:	08006b51 	.word	0x08006b51
 8006b0c:	08006b51 	.word	0x08006b51
 8006b10:	08006b51 	.word	0x08006b51
 8006b14:	08006b43 	.word	0x08006b43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68b9      	ldr	r1, [r7, #8]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 fb10 	bl	8007144 <TIM_OC1_SetConfig>
      break;
 8006b24:	e017      	b.n	8006b56 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68b9      	ldr	r1, [r7, #8]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 fb79 	bl	8007224 <TIM_OC2_SetConfig>
      break;
 8006b32:	e010      	b.n	8006b56 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68b9      	ldr	r1, [r7, #8]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 fbe8 	bl	8007310 <TIM_OC3_SetConfig>
      break;
 8006b40:	e009      	b.n	8006b56 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68b9      	ldr	r1, [r7, #8]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 fc55 	bl	80073f8 <TIM_OC4_SetConfig>
      break;
 8006b4e:	e002      	b.n	8006b56 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	75fb      	strb	r3, [r7, #23]
      break;
 8006b54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d101      	bne.n	8006b86 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006b82:	2302      	movs	r3, #2
 8006b84:	e088      	b.n	8006c98 <HAL_TIM_IC_ConfigChannel+0x130>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d11b      	bne.n	8006bcc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6818      	ldr	r0, [r3, #0]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	6819      	ldr	r1, [r3, #0]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	685a      	ldr	r2, [r3, #4]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f000 fc7e 	bl	80074a4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 020c 	bic.w	r2, r2, #12
 8006bb6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6999      	ldr	r1, [r3, #24]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	689a      	ldr	r2, [r3, #8]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	619a      	str	r2, [r3, #24]
 8006bca:	e060      	b.n	8006c8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d11c      	bne.n	8006c0c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6818      	ldr	r0, [r3, #0]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	6819      	ldr	r1, [r3, #0]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f000 fd02 	bl	80075ea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	699a      	ldr	r2, [r3, #24]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006bf4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6999      	ldr	r1, [r3, #24]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	021a      	lsls	r2, r3, #8
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	619a      	str	r2, [r3, #24]
 8006c0a:	e040      	b.n	8006c8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b08      	cmp	r3, #8
 8006c10:	d11b      	bne.n	8006c4a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6818      	ldr	r0, [r3, #0]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	6819      	ldr	r1, [r3, #0]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f000 fd4f 	bl	80076c4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69da      	ldr	r2, [r3, #28]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 020c 	bic.w	r2, r2, #12
 8006c34:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69d9      	ldr	r1, [r3, #28]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	689a      	ldr	r2, [r3, #8]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	61da      	str	r2, [r3, #28]
 8006c48:	e021      	b.n	8006c8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b0c      	cmp	r3, #12
 8006c4e:	d11c      	bne.n	8006c8a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6818      	ldr	r0, [r3, #0]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	6819      	ldr	r1, [r3, #0]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f000 fd6c 	bl	800773c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	69da      	ldr	r2, [r3, #28]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c72:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69d9      	ldr	r1, [r3, #28]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	021a      	lsls	r2, r3, #8
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	61da      	str	r2, [r3, #28]
 8006c88:	e001      	b.n	8006c8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d101      	bne.n	8006cbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	e0ae      	b.n	8006e1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2b0c      	cmp	r3, #12
 8006cca:	f200 809f 	bhi.w	8006e0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006cce:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd4:	08006d09 	.word	0x08006d09
 8006cd8:	08006e0d 	.word	0x08006e0d
 8006cdc:	08006e0d 	.word	0x08006e0d
 8006ce0:	08006e0d 	.word	0x08006e0d
 8006ce4:	08006d49 	.word	0x08006d49
 8006ce8:	08006e0d 	.word	0x08006e0d
 8006cec:	08006e0d 	.word	0x08006e0d
 8006cf0:	08006e0d 	.word	0x08006e0d
 8006cf4:	08006d8b 	.word	0x08006d8b
 8006cf8:	08006e0d 	.word	0x08006e0d
 8006cfc:	08006e0d 	.word	0x08006e0d
 8006d00:	08006e0d 	.word	0x08006e0d
 8006d04:	08006dcb 	.word	0x08006dcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68b9      	ldr	r1, [r7, #8]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fa18 	bl	8007144 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0208 	orr.w	r2, r2, #8
 8006d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699a      	ldr	r2, [r3, #24]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0204 	bic.w	r2, r2, #4
 8006d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6999      	ldr	r1, [r3, #24]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	691a      	ldr	r2, [r3, #16]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	619a      	str	r2, [r3, #24]
      break;
 8006d46:	e064      	b.n	8006e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fa68 	bl	8007224 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699a      	ldr	r2, [r3, #24]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	699a      	ldr	r2, [r3, #24]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6999      	ldr	r1, [r3, #24]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	021a      	lsls	r2, r3, #8
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	619a      	str	r2, [r3, #24]
      break;
 8006d88:	e043      	b.n	8006e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68b9      	ldr	r1, [r7, #8]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 fabd 	bl	8007310 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69da      	ldr	r2, [r3, #28]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f042 0208 	orr.w	r2, r2, #8
 8006da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69da      	ldr	r2, [r3, #28]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0204 	bic.w	r2, r2, #4
 8006db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69d9      	ldr	r1, [r3, #28]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	61da      	str	r2, [r3, #28]
      break;
 8006dc8:	e023      	b.n	8006e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68b9      	ldr	r1, [r7, #8]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 fb11 	bl	80073f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69da      	ldr	r2, [r3, #28]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	69da      	ldr	r2, [r3, #28]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69d9      	ldr	r1, [r3, #28]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	021a      	lsls	r2, r3, #8
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	61da      	str	r2, [r3, #28]
      break;
 8006e0a:	e002      	b.n	8006e12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d101      	bne.n	8006e40 <HAL_TIM_ConfigClockSource+0x1c>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e0b4      	b.n	8006faa <HAL_TIM_ConfigClockSource+0x186>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e78:	d03e      	beq.n	8006ef8 <HAL_TIM_ConfigClockSource+0xd4>
 8006e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e7e:	f200 8087 	bhi.w	8006f90 <HAL_TIM_ConfigClockSource+0x16c>
 8006e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e86:	f000 8086 	beq.w	8006f96 <HAL_TIM_ConfigClockSource+0x172>
 8006e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e8e:	d87f      	bhi.n	8006f90 <HAL_TIM_ConfigClockSource+0x16c>
 8006e90:	2b70      	cmp	r3, #112	; 0x70
 8006e92:	d01a      	beq.n	8006eca <HAL_TIM_ConfigClockSource+0xa6>
 8006e94:	2b70      	cmp	r3, #112	; 0x70
 8006e96:	d87b      	bhi.n	8006f90 <HAL_TIM_ConfigClockSource+0x16c>
 8006e98:	2b60      	cmp	r3, #96	; 0x60
 8006e9a:	d050      	beq.n	8006f3e <HAL_TIM_ConfigClockSource+0x11a>
 8006e9c:	2b60      	cmp	r3, #96	; 0x60
 8006e9e:	d877      	bhi.n	8006f90 <HAL_TIM_ConfigClockSource+0x16c>
 8006ea0:	2b50      	cmp	r3, #80	; 0x50
 8006ea2:	d03c      	beq.n	8006f1e <HAL_TIM_ConfigClockSource+0xfa>
 8006ea4:	2b50      	cmp	r3, #80	; 0x50
 8006ea6:	d873      	bhi.n	8006f90 <HAL_TIM_ConfigClockSource+0x16c>
 8006ea8:	2b40      	cmp	r3, #64	; 0x40
 8006eaa:	d058      	beq.n	8006f5e <HAL_TIM_ConfigClockSource+0x13a>
 8006eac:	2b40      	cmp	r3, #64	; 0x40
 8006eae:	d86f      	bhi.n	8006f90 <HAL_TIM_ConfigClockSource+0x16c>
 8006eb0:	2b30      	cmp	r3, #48	; 0x30
 8006eb2:	d064      	beq.n	8006f7e <HAL_TIM_ConfigClockSource+0x15a>
 8006eb4:	2b30      	cmp	r3, #48	; 0x30
 8006eb6:	d86b      	bhi.n	8006f90 <HAL_TIM_ConfigClockSource+0x16c>
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	d060      	beq.n	8006f7e <HAL_TIM_ConfigClockSource+0x15a>
 8006ebc:	2b20      	cmp	r3, #32
 8006ebe:	d867      	bhi.n	8006f90 <HAL_TIM_ConfigClockSource+0x16c>
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d05c      	beq.n	8006f7e <HAL_TIM_ConfigClockSource+0x15a>
 8006ec4:	2b10      	cmp	r3, #16
 8006ec6:	d05a      	beq.n	8006f7e <HAL_TIM_ConfigClockSource+0x15a>
 8006ec8:	e062      	b.n	8006f90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6818      	ldr	r0, [r3, #0]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	6899      	ldr	r1, [r3, #8]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f000 fc87 	bl	80077ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006eec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	609a      	str	r2, [r3, #8]
      break;
 8006ef6:	e04f      	b.n	8006f98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6818      	ldr	r0, [r3, #0]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	6899      	ldr	r1, [r3, #8]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f000 fc70 	bl	80077ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689a      	ldr	r2, [r3, #8]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f1a:	609a      	str	r2, [r3, #8]
      break;
 8006f1c:	e03c      	b.n	8006f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	6859      	ldr	r1, [r3, #4]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f000 fb2e 	bl	800758c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2150      	movs	r1, #80	; 0x50
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 fc3d 	bl	80077b6 <TIM_ITRx_SetConfig>
      break;
 8006f3c:	e02c      	b.n	8006f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	6859      	ldr	r1, [r3, #4]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	461a      	mov	r2, r3
 8006f4c:	f000 fb8a 	bl	8007664 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2160      	movs	r1, #96	; 0x60
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 fc2d 	bl	80077b6 <TIM_ITRx_SetConfig>
      break;
 8006f5c:	e01c      	b.n	8006f98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6818      	ldr	r0, [r3, #0]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	6859      	ldr	r1, [r3, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f000 fb0e 	bl	800758c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2140      	movs	r1, #64	; 0x40
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fc1d 	bl	80077b6 <TIM_ITRx_SetConfig>
      break;
 8006f7c:	e00c      	b.n	8006f98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4619      	mov	r1, r3
 8006f88:	4610      	mov	r0, r2
 8006f8a:	f000 fc14 	bl	80077b6 <TIM_ITRx_SetConfig>
      break;
 8006f8e:	e003      	b.n	8006f98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	73fb      	strb	r3, [r7, #15]
      break;
 8006f94:	e000      	b.n	8006f98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b083      	sub	sp, #12
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fce:	bf00      	nop
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fe2:	bf00      	nop
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b083      	sub	sp, #12
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
	...

08007004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a40      	ldr	r2, [pc, #256]	; (8007118 <TIM_Base_SetConfig+0x114>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d013      	beq.n	8007044 <TIM_Base_SetConfig+0x40>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007022:	d00f      	beq.n	8007044 <TIM_Base_SetConfig+0x40>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a3d      	ldr	r2, [pc, #244]	; (800711c <TIM_Base_SetConfig+0x118>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d00b      	beq.n	8007044 <TIM_Base_SetConfig+0x40>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a3c      	ldr	r2, [pc, #240]	; (8007120 <TIM_Base_SetConfig+0x11c>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d007      	beq.n	8007044 <TIM_Base_SetConfig+0x40>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a3b      	ldr	r2, [pc, #236]	; (8007124 <TIM_Base_SetConfig+0x120>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d003      	beq.n	8007044 <TIM_Base_SetConfig+0x40>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a3a      	ldr	r2, [pc, #232]	; (8007128 <TIM_Base_SetConfig+0x124>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d108      	bne.n	8007056 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	4313      	orrs	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a2f      	ldr	r2, [pc, #188]	; (8007118 <TIM_Base_SetConfig+0x114>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d02b      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007064:	d027      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a2c      	ldr	r2, [pc, #176]	; (800711c <TIM_Base_SetConfig+0x118>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d023      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a2b      	ldr	r2, [pc, #172]	; (8007120 <TIM_Base_SetConfig+0x11c>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d01f      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a2a      	ldr	r2, [pc, #168]	; (8007124 <TIM_Base_SetConfig+0x120>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d01b      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a29      	ldr	r2, [pc, #164]	; (8007128 <TIM_Base_SetConfig+0x124>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d017      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a28      	ldr	r2, [pc, #160]	; (800712c <TIM_Base_SetConfig+0x128>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d013      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a27      	ldr	r2, [pc, #156]	; (8007130 <TIM_Base_SetConfig+0x12c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d00f      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a26      	ldr	r2, [pc, #152]	; (8007134 <TIM_Base_SetConfig+0x130>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00b      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a25      	ldr	r2, [pc, #148]	; (8007138 <TIM_Base_SetConfig+0x134>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d007      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a24      	ldr	r2, [pc, #144]	; (800713c <TIM_Base_SetConfig+0x138>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d003      	beq.n	80070b6 <TIM_Base_SetConfig+0xb2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a23      	ldr	r2, [pc, #140]	; (8007140 <TIM_Base_SetConfig+0x13c>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d108      	bne.n	80070c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a0a      	ldr	r2, [pc, #40]	; (8007118 <TIM_Base_SetConfig+0x114>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d003      	beq.n	80070fc <TIM_Base_SetConfig+0xf8>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a0c      	ldr	r2, [pc, #48]	; (8007128 <TIM_Base_SetConfig+0x124>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d103      	bne.n	8007104 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	691a      	ldr	r2, [r3, #16]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	615a      	str	r2, [r3, #20]
}
 800710a:	bf00      	nop
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	40010000 	.word	0x40010000
 800711c:	40000400 	.word	0x40000400
 8007120:	40000800 	.word	0x40000800
 8007124:	40000c00 	.word	0x40000c00
 8007128:	40010400 	.word	0x40010400
 800712c:	40014000 	.word	0x40014000
 8007130:	40014400 	.word	0x40014400
 8007134:	40014800 	.word	0x40014800
 8007138:	40001800 	.word	0x40001800
 800713c:	40001c00 	.word	0x40001c00
 8007140:	40002000 	.word	0x40002000

08007144 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
 8007152:	f023 0201 	bic.w	r2, r3, #1
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0303 	bic.w	r3, r3, #3
 800717a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f023 0302 	bic.w	r3, r3, #2
 800718c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	4313      	orrs	r3, r2
 8007196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a20      	ldr	r2, [pc, #128]	; (800721c <TIM_OC1_SetConfig+0xd8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d003      	beq.n	80071a8 <TIM_OC1_SetConfig+0x64>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a1f      	ldr	r2, [pc, #124]	; (8007220 <TIM_OC1_SetConfig+0xdc>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d10c      	bne.n	80071c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f023 0308 	bic.w	r3, r3, #8
 80071ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f023 0304 	bic.w	r3, r3, #4
 80071c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a15      	ldr	r2, [pc, #84]	; (800721c <TIM_OC1_SetConfig+0xd8>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d003      	beq.n	80071d2 <TIM_OC1_SetConfig+0x8e>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a14      	ldr	r2, [pc, #80]	; (8007220 <TIM_OC1_SetConfig+0xdc>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d111      	bne.n	80071f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	685a      	ldr	r2, [r3, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	621a      	str	r2, [r3, #32]
}
 8007210:	bf00      	nop
 8007212:	371c      	adds	r7, #28
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	40010000 	.word	0x40010000
 8007220:	40010400 	.word	0x40010400

08007224 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	f023 0210 	bic.w	r2, r3, #16
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800725a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	021b      	lsls	r3, r3, #8
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	4313      	orrs	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	f023 0320 	bic.w	r3, r3, #32
 800726e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	011b      	lsls	r3, r3, #4
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	4313      	orrs	r3, r2
 800727a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a22      	ldr	r2, [pc, #136]	; (8007308 <TIM_OC2_SetConfig+0xe4>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d003      	beq.n	800728c <TIM_OC2_SetConfig+0x68>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a21      	ldr	r2, [pc, #132]	; (800730c <TIM_OC2_SetConfig+0xe8>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d10d      	bne.n	80072a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007292:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	011b      	lsls	r3, r3, #4
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a17      	ldr	r2, [pc, #92]	; (8007308 <TIM_OC2_SetConfig+0xe4>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d003      	beq.n	80072b8 <TIM_OC2_SetConfig+0x94>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a16      	ldr	r2, [pc, #88]	; (800730c <TIM_OC2_SetConfig+0xe8>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d113      	bne.n	80072e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	693a      	ldr	r2, [r7, #16]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	693a      	ldr	r2, [r7, #16]
 80072dc:	4313      	orrs	r3, r2
 80072de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685a      	ldr	r2, [r3, #4]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	621a      	str	r2, [r3, #32]
}
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	40010000 	.word	0x40010000
 800730c:	40010400 	.word	0x40010400

08007310 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007310:	b480      	push	{r7}
 8007312:	b087      	sub	sp, #28
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a1b      	ldr	r3, [r3, #32]
 800732a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	69db      	ldr	r3, [r3, #28]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800733e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f023 0303 	bic.w	r3, r3, #3
 8007346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	021b      	lsls	r3, r3, #8
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a21      	ldr	r2, [pc, #132]	; (80073f0 <TIM_OC3_SetConfig+0xe0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d003      	beq.n	8007376 <TIM_OC3_SetConfig+0x66>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a20      	ldr	r2, [pc, #128]	; (80073f4 <TIM_OC3_SetConfig+0xe4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d10d      	bne.n	8007392 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800737c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	021b      	lsls	r3, r3, #8
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	4313      	orrs	r3, r2
 8007388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a16      	ldr	r2, [pc, #88]	; (80073f0 <TIM_OC3_SetConfig+0xe0>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d003      	beq.n	80073a2 <TIM_OC3_SetConfig+0x92>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a15      	ldr	r2, [pc, #84]	; (80073f4 <TIM_OC3_SetConfig+0xe4>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d113      	bne.n	80073ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	695b      	ldr	r3, [r3, #20]
 80073b6:	011b      	lsls	r3, r3, #4
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	011b      	lsls	r3, r3, #4
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	693a      	ldr	r2, [r7, #16]
 80073ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	621a      	str	r2, [r3, #32]
}
 80073e4:	bf00      	nop
 80073e6:	371c      	adds	r7, #28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	40010000 	.word	0x40010000
 80073f4:	40010400 	.word	0x40010400

080073f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a1b      	ldr	r3, [r3, #32]
 8007412:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800742e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	021b      	lsls	r3, r3, #8
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	4313      	orrs	r3, r2
 800743a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007442:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	031b      	lsls	r3, r3, #12
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	4313      	orrs	r3, r2
 800744e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a12      	ldr	r2, [pc, #72]	; (800749c <TIM_OC4_SetConfig+0xa4>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d003      	beq.n	8007460 <TIM_OC4_SetConfig+0x68>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a11      	ldr	r2, [pc, #68]	; (80074a0 <TIM_OC4_SetConfig+0xa8>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d109      	bne.n	8007474 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007466:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	019b      	lsls	r3, r3, #6
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	4313      	orrs	r3, r2
 8007472:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	621a      	str	r2, [r3, #32]
}
 800748e:	bf00      	nop
 8007490:	371c      	adds	r7, #28
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	40010000 	.word	0x40010000
 80074a0:	40010400 	.word	0x40010400

080074a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	f023 0201 	bic.w	r2, r3, #1
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	699b      	ldr	r3, [r3, #24]
 80074c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	4a28      	ldr	r2, [pc, #160]	; (8007570 <TIM_TI1_SetConfig+0xcc>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d01b      	beq.n	800750a <TIM_TI1_SetConfig+0x66>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074d8:	d017      	beq.n	800750a <TIM_TI1_SetConfig+0x66>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4a25      	ldr	r2, [pc, #148]	; (8007574 <TIM_TI1_SetConfig+0xd0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d013      	beq.n	800750a <TIM_TI1_SetConfig+0x66>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	4a24      	ldr	r2, [pc, #144]	; (8007578 <TIM_TI1_SetConfig+0xd4>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00f      	beq.n	800750a <TIM_TI1_SetConfig+0x66>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	4a23      	ldr	r2, [pc, #140]	; (800757c <TIM_TI1_SetConfig+0xd8>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d00b      	beq.n	800750a <TIM_TI1_SetConfig+0x66>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	4a22      	ldr	r2, [pc, #136]	; (8007580 <TIM_TI1_SetConfig+0xdc>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d007      	beq.n	800750a <TIM_TI1_SetConfig+0x66>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4a21      	ldr	r2, [pc, #132]	; (8007584 <TIM_TI1_SetConfig+0xe0>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d003      	beq.n	800750a <TIM_TI1_SetConfig+0x66>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	4a20      	ldr	r2, [pc, #128]	; (8007588 <TIM_TI1_SetConfig+0xe4>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d101      	bne.n	800750e <TIM_TI1_SetConfig+0x6a>
 800750a:	2301      	movs	r3, #1
 800750c:	e000      	b.n	8007510 <TIM_TI1_SetConfig+0x6c>
 800750e:	2300      	movs	r3, #0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d008      	beq.n	8007526 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f023 0303 	bic.w	r3, r3, #3
 800751a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4313      	orrs	r3, r2
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	e003      	b.n	800752e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f043 0301 	orr.w	r3, r3, #1
 800752c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007534:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	011b      	lsls	r3, r3, #4
 800753a:	b2db      	uxtb	r3, r3
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	4313      	orrs	r3, r2
 8007540:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f023 030a 	bic.w	r3, r3, #10
 8007548:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	f003 030a 	and.w	r3, r3, #10
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	4313      	orrs	r3, r2
 8007554:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	697a      	ldr	r2, [r7, #20]
 800755a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	621a      	str	r2, [r3, #32]
}
 8007562:	bf00      	nop
 8007564:	371c      	adds	r7, #28
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	40010000 	.word	0x40010000
 8007574:	40000400 	.word	0x40000400
 8007578:	40000800 	.word	0x40000800
 800757c:	40000c00 	.word	0x40000c00
 8007580:	40010400 	.word	0x40010400
 8007584:	40014000 	.word	0x40014000
 8007588:	40001800 	.word	0x40001800

0800758c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800758c:	b480      	push	{r7}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6a1b      	ldr	r3, [r3, #32]
 800759c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	f023 0201 	bic.w	r2, r3, #1
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	011b      	lsls	r3, r3, #4
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	4313      	orrs	r3, r2
 80075c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f023 030a 	bic.w	r3, r3, #10
 80075c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	621a      	str	r2, [r3, #32]
}
 80075de:	bf00      	nop
 80075e0:	371c      	adds	r7, #28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b087      	sub	sp, #28
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	60f8      	str	r0, [r7, #12]
 80075f2:	60b9      	str	r1, [r7, #8]
 80075f4:	607a      	str	r2, [r7, #4]
 80075f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	f023 0210 	bic.w	r2, r3, #16
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6a1b      	ldr	r3, [r3, #32]
 800760e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007616:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	021b      	lsls	r3, r3, #8
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	4313      	orrs	r3, r2
 8007620:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007628:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	031b      	lsls	r3, r3, #12
 800762e:	b29b      	uxth	r3, r3
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	4313      	orrs	r3, r2
 8007634:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800763c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	4313      	orrs	r3, r2
 800764a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	621a      	str	r2, [r3, #32]
}
 8007658:	bf00      	nop
 800765a:	371c      	adds	r7, #28
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007664:	b480      	push	{r7}
 8007666:	b087      	sub	sp, #28
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6a1b      	ldr	r3, [r3, #32]
 8007674:	f023 0210 	bic.w	r2, r3, #16
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800768e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	031b      	lsls	r3, r3, #12
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	4313      	orrs	r3, r2
 8007698:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	621a      	str	r2, [r3, #32]
}
 80076b8:	bf00      	nop
 80076ba:	371c      	adds	r7, #28
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
 80076d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f023 0303 	bic.w	r3, r3, #3
 80076f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007700:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	b2db      	uxtb	r3, r3
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	4313      	orrs	r3, r2
 800770c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007714:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	021b      	lsls	r3, r3, #8
 800771a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	4313      	orrs	r3, r2
 8007722:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	621a      	str	r2, [r3, #32]
}
 8007730:	bf00      	nop
 8007732:	371c      	adds	r7, #28
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800773c:	b480      	push	{r7}
 800773e:	b087      	sub	sp, #28
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
 8007748:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007768:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	021b      	lsls	r3, r3, #8
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	4313      	orrs	r3, r2
 8007772:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800777a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	031b      	lsls	r3, r3, #12
 8007780:	b29b      	uxth	r3, r3
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	4313      	orrs	r3, r2
 8007786:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800778e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	031b      	lsls	r3, r3, #12
 8007794:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	4313      	orrs	r3, r2
 800779c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	621a      	str	r2, [r3, #32]
}
 80077aa:	bf00      	nop
 80077ac:	371c      	adds	r7, #28
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b085      	sub	sp, #20
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
 80077be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	f043 0307 	orr.w	r3, r3, #7
 80077d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	609a      	str	r2, [r3, #8]
}
 80077e0:	bf00      	nop
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007806:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	021a      	lsls	r2, r3, #8
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	431a      	orrs	r2, r3
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	4313      	orrs	r3, r2
 8007814:	697a      	ldr	r2, [r7, #20]
 8007816:	4313      	orrs	r3, r2
 8007818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	697a      	ldr	r2, [r7, #20]
 800781e:	609a      	str	r2, [r3, #8]
}
 8007820:	bf00      	nop
 8007822:	371c      	adds	r7, #28
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007840:	2302      	movs	r3, #2
 8007842:	e05a      	b.n	80078fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2202      	movs	r2, #2
 8007850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	4313      	orrs	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a21      	ldr	r2, [pc, #132]	; (8007908 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d022      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007890:	d01d      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a1d      	ldr	r2, [pc, #116]	; (800790c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d018      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a1b      	ldr	r2, [pc, #108]	; (8007910 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d013      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a1a      	ldr	r2, [pc, #104]	; (8007914 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00e      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a18      	ldr	r2, [pc, #96]	; (8007918 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d009      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a17      	ldr	r2, [pc, #92]	; (800791c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d004      	beq.n	80078ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a15      	ldr	r2, [pc, #84]	; (8007920 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d10c      	bne.n	80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	4313      	orrs	r3, r2
 80078de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2201      	movs	r2, #1
 80078ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	40010000 	.word	0x40010000
 800790c:	40000400 	.word	0x40000400
 8007910:	40000800 	.word	0x40000800
 8007914:	40000c00 	.word	0x40000c00
 8007918:	40010400 	.word	0x40010400
 800791c:	40014000 	.word	0x40014000
 8007920:	40001800 	.word	0x40001800

08007924 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007938:	2b01      	cmp	r3, #1
 800793a:	d101      	bne.n	8007940 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800793c:	2302      	movs	r3, #2
 800793e:	e03d      	b.n	80079bc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	4313      	orrs	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4313      	orrs	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e03f      	b.n	8007a82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d106      	bne.n	8007a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7fb f8f0 	bl	8002bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2224      	movs	r2, #36	; 0x24
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68da      	ldr	r2, [r3, #12]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 ffd7 	bl	80089e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	691a      	ldr	r2, [r3, #16]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	695a      	ldr	r2, [r3, #20]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b08c      	sub	sp, #48	; 0x30
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	4613      	mov	r3, r2
 8007a98:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa0:	b2db      	uxtb	r3, r3
 8007aa2:	2b20      	cmp	r3, #32
 8007aa4:	d165      	bne.n	8007b72 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <HAL_UART_Transmit_DMA+0x26>
 8007aac:	88fb      	ldrh	r3, [r7, #6]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d101      	bne.n	8007ab6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e05e      	b.n	8007b74 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d101      	bne.n	8007ac4 <HAL_UART_Transmit_DMA+0x38>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e057      	b.n	8007b74 <HAL_UART_Transmit_DMA+0xe8>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	88fa      	ldrh	r2, [r7, #6]
 8007ad6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	88fa      	ldrh	r2, [r7, #6]
 8007adc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2221      	movs	r2, #33	; 0x21
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af0:	4a22      	ldr	r2, [pc, #136]	; (8007b7c <HAL_UART_Transmit_DMA+0xf0>)
 8007af2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af8:	4a21      	ldr	r2, [pc, #132]	; (8007b80 <HAL_UART_Transmit_DMA+0xf4>)
 8007afa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b00:	4a20      	ldr	r2, [pc, #128]	; (8007b84 <HAL_UART_Transmit_DMA+0xf8>)
 8007b02:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b08:	2200      	movs	r2, #0
 8007b0a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007b0c:	f107 0308 	add.w	r3, r7, #8
 8007b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b18:	6819      	ldr	r1, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	461a      	mov	r2, r3
 8007b22:	88fb      	ldrh	r3, [r7, #6]
 8007b24:	f7fb fe16 	bl	8003754 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b30:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3314      	adds	r3, #20
 8007b40:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	617b      	str	r3, [r7, #20]
   return(result);
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	3314      	adds	r3, #20
 8007b58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b5a:	627a      	str	r2, [r7, #36]	; 0x24
 8007b5c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	6a39      	ldr	r1, [r7, #32]
 8007b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e5      	bne.n	8007b3a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	e000      	b.n	8007b74 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007b72:	2302      	movs	r3, #2
  }
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3730      	adds	r7, #48	; 0x30
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	08008281 	.word	0x08008281
 8007b80:	0800831b 	.word	0x0800831b
 8007b84:	08008493 	.word	0x08008493

08007b88 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	4613      	mov	r3, r2
 8007b94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b20      	cmp	r3, #32
 8007ba0:	d11d      	bne.n	8007bde <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d002      	beq.n	8007bae <HAL_UART_Receive_DMA+0x26>
 8007ba8:	88fb      	ldrh	r3, [r7, #6]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e016      	b.n	8007be0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d101      	bne.n	8007bc0 <HAL_UART_Receive_DMA+0x38>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	e00f      	b.n	8007be0 <HAL_UART_Receive_DMA+0x58>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007bce:	88fb      	ldrh	r3, [r7, #6]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	68b9      	ldr	r1, [r7, #8]
 8007bd4:	68f8      	ldr	r0, [r7, #12]
 8007bd6:	f000 fca7 	bl	8008528 <UART_Start_Receive_DMA>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	e000      	b.n	8007be0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007bde:	2302      	movs	r3, #2
  }
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b090      	sub	sp, #64	; 0x40
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bfe:	2b80      	cmp	r3, #128	; 0x80
 8007c00:	bf0c      	ite	eq
 8007c02:	2301      	moveq	r3, #1
 8007c04:	2300      	movne	r3, #0
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b21      	cmp	r3, #33	; 0x21
 8007c14:	d128      	bne.n	8007c68 <HAL_UART_DMAStop+0x80>
 8007c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d025      	beq.n	8007c68 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	3314      	adds	r3, #20
 8007c22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	e853 3f00 	ldrex	r3, [r3]
 8007c2a:	623b      	str	r3, [r7, #32]
   return(result);
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c32:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	3314      	adds	r3, #20
 8007c3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c3c:	633a      	str	r2, [r7, #48]	; 0x30
 8007c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c44:	e841 2300 	strex	r3, r2, [r1]
 8007c48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1e5      	bne.n	8007c1c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d004      	beq.n	8007c62 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fb fdd1 	bl	8003804 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fcfe 	bl	8008664 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c72:	2b40      	cmp	r3, #64	; 0x40
 8007c74:	bf0c      	ite	eq
 8007c76:	2301      	moveq	r3, #1
 8007c78:	2300      	movne	r3, #0
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b22      	cmp	r3, #34	; 0x22
 8007c88:	d128      	bne.n	8007cdc <HAL_UART_DMAStop+0xf4>
 8007c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d025      	beq.n	8007cdc <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3314      	adds	r3, #20
 8007c96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3314      	adds	r3, #20
 8007cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cb0:	61fa      	str	r2, [r7, #28]
 8007cb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	69b9      	ldr	r1, [r7, #24]
 8007cb6:	69fa      	ldr	r2, [r7, #28]
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e5      	bne.n	8007c90 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d004      	beq.n	8007cd6 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fb fd97 	bl	8003804 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fcec 	bl	80086b4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3740      	adds	r7, #64	; 0x40
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b0ba      	sub	sp, #232	; 0xe8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d1e:	f003 030f 	and.w	r3, r3, #15
 8007d22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007d26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10f      	bne.n	8007d4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d32:	f003 0320 	and.w	r3, r3, #32
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d009      	beq.n	8007d4e <HAL_UART_IRQHandler+0x66>
 8007d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d3e:	f003 0320 	and.w	r3, r3, #32
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d003      	beq.n	8007d4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fd93 	bl	8008872 <UART_Receive_IT>
      return;
 8007d4c:	e256      	b.n	80081fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 80de 	beq.w	8007f14 <HAL_UART_IRQHandler+0x22c>
 8007d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d106      	bne.n	8007d72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 80d1 	beq.w	8007f14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00b      	beq.n	8007d96 <HAL_UART_IRQHandler+0xae>
 8007d7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d005      	beq.n	8007d96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8e:	f043 0201 	orr.w	r2, r3, #1
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d9a:	f003 0304 	and.w	r3, r3, #4
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00b      	beq.n	8007dba <HAL_UART_IRQHandler+0xd2>
 8007da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d005      	beq.n	8007dba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	f043 0202 	orr.w	r2, r3, #2
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00b      	beq.n	8007dde <HAL_UART_IRQHandler+0xf6>
 8007dc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d005      	beq.n	8007dde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd6:	f043 0204 	orr.w	r2, r3, #4
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de2:	f003 0308 	and.w	r3, r3, #8
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d011      	beq.n	8007e0e <HAL_UART_IRQHandler+0x126>
 8007dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dee:	f003 0320 	and.w	r3, r3, #32
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d105      	bne.n	8007e02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d005      	beq.n	8007e0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e06:	f043 0208 	orr.w	r2, r3, #8
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 81ed 	beq.w	80081f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e1c:	f003 0320 	and.w	r3, r3, #32
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d008      	beq.n	8007e36 <HAL_UART_IRQHandler+0x14e>
 8007e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e28:	f003 0320 	and.w	r3, r3, #32
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d002      	beq.n	8007e36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fd1e 	bl	8008872 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e40:	2b40      	cmp	r3, #64	; 0x40
 8007e42:	bf0c      	ite	eq
 8007e44:	2301      	moveq	r3, #1
 8007e46:	2300      	movne	r3, #0
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e52:	f003 0308 	and.w	r3, r3, #8
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d103      	bne.n	8007e62 <HAL_UART_IRQHandler+0x17a>
 8007e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d04f      	beq.n	8007f02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fc26 	bl	80086b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	695b      	ldr	r3, [r3, #20]
 8007e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e72:	2b40      	cmp	r3, #64	; 0x40
 8007e74:	d141      	bne.n	8007efa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3314      	adds	r3, #20
 8007e7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e84:	e853 3f00 	ldrex	r3, [r3]
 8007e88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3314      	adds	r3, #20
 8007e9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ea2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007eae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007eb2:	e841 2300 	strex	r3, r2, [r1]
 8007eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007eba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1d9      	bne.n	8007e76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d013      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ece:	4a7d      	ldr	r2, [pc, #500]	; (80080c4 <HAL_UART_IRQHandler+0x3dc>)
 8007ed0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fb fd04 	bl	80038e4 <HAL_DMA_Abort_IT>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d016      	beq.n	8007f10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007eec:	4610      	mov	r0, r2
 8007eee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef0:	e00e      	b.n	8007f10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f9ae 	bl	8008254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef8:	e00a      	b.n	8007f10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f9aa 	bl	8008254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f00:	e006      	b.n	8007f10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f9a6 	bl	8008254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007f0e:	e170      	b.n	80081f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f10:	bf00      	nop
    return;
 8007f12:	e16e      	b.n	80081f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	f040 814a 	bne.w	80081b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f22:	f003 0310 	and.w	r3, r3, #16
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 8143 	beq.w	80081b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 813c 	beq.w	80081b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	60bb      	str	r3, [r7, #8]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	60bb      	str	r3, [r7, #8]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	60bb      	str	r3, [r7, #8]
 8007f4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5a:	2b40      	cmp	r3, #64	; 0x40
 8007f5c:	f040 80b4 	bne.w	80080c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007f6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 8140 	beq.w	80081f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	f080 8139 	bcs.w	80081f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007f8a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f90:	69db      	ldr	r3, [r3, #28]
 8007f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f96:	f000 8088 	beq.w	80080aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	330c      	adds	r3, #12
 8007fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007fa8:	e853 3f00 	ldrex	r3, [r3]
 8007fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	330c      	adds	r3, #12
 8007fc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007fc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007fd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007fd6:	e841 2300 	strex	r3, r2, [r1]
 8007fda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d1d9      	bne.n	8007f9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3314      	adds	r3, #20
 8007fec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ff0:	e853 3f00 	ldrex	r3, [r3]
 8007ff4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ff8:	f023 0301 	bic.w	r3, r3, #1
 8007ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3314      	adds	r3, #20
 8008006:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800800a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800800e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008010:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008012:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008016:	e841 2300 	strex	r3, r2, [r1]
 800801a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800801c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1e1      	bne.n	8007fe6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3314      	adds	r3, #20
 8008028:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800802c:	e853 3f00 	ldrex	r3, [r3]
 8008030:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3314      	adds	r3, #20
 8008042:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008046:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008048:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800804c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800804e:	e841 2300 	strex	r3, r2, [r1]
 8008052:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e3      	bne.n	8008022 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2220      	movs	r2, #32
 800805e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	330c      	adds	r3, #12
 800806e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008072:	e853 3f00 	ldrex	r3, [r3]
 8008076:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800807a:	f023 0310 	bic.w	r3, r3, #16
 800807e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	330c      	adds	r3, #12
 8008088:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800808c:	65ba      	str	r2, [r7, #88]	; 0x58
 800808e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008090:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008092:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008094:	e841 2300 	strex	r3, r2, [r1]
 8008098:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800809a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1e3      	bne.n	8008068 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fb fbad 	bl	8003804 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f8d4 	bl	8008268 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80080c0:	e099      	b.n	80081f6 <HAL_UART_IRQHandler+0x50e>
 80080c2:	bf00      	nop
 80080c4:	0800877b 	.word	0x0800877b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80080dc:	b29b      	uxth	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	f000 808b 	beq.w	80081fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80080e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	f000 8086 	beq.w	80081fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	330c      	adds	r3, #12
 80080f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f8:	e853 3f00 	ldrex	r3, [r3]
 80080fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008100:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008104:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	330c      	adds	r3, #12
 800810e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008112:	647a      	str	r2, [r7, #68]	; 0x44
 8008114:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008118:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e3      	bne.n	80080ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3314      	adds	r3, #20
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	e853 3f00 	ldrex	r3, [r3]
 8008134:	623b      	str	r3, [r7, #32]
   return(result);
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	f023 0301 	bic.w	r3, r3, #1
 800813c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	3314      	adds	r3, #20
 8008146:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800814a:	633a      	str	r2, [r7, #48]	; 0x30
 800814c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008152:	e841 2300 	strex	r3, r2, [r1]
 8008156:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1e3      	bne.n	8008126 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2220      	movs	r2, #32
 8008162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	330c      	adds	r3, #12
 8008172:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	e853 3f00 	ldrex	r3, [r3]
 800817a:	60fb      	str	r3, [r7, #12]
   return(result);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f023 0310 	bic.w	r3, r3, #16
 8008182:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	330c      	adds	r3, #12
 800818c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008190:	61fa      	str	r2, [r7, #28]
 8008192:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008194:	69b9      	ldr	r1, [r7, #24]
 8008196:	69fa      	ldr	r2, [r7, #28]
 8008198:	e841 2300 	strex	r3, r2, [r1]
 800819c:	617b      	str	r3, [r7, #20]
   return(result);
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1e3      	bne.n	800816c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f85c 	bl	8008268 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081b0:	e023      	b.n	80081fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80081b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d009      	beq.n	80081d2 <HAL_UART_IRQHandler+0x4ea>
 80081be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d003      	beq.n	80081d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fae9 	bl	80087a2 <UART_Transmit_IT>
    return;
 80081d0:	e014      	b.n	80081fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80081d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d00e      	beq.n	80081fc <HAL_UART_IRQHandler+0x514>
 80081de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d008      	beq.n	80081fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fb29 	bl	8008842 <UART_EndTransmit_IT>
    return;
 80081f0:	e004      	b.n	80081fc <HAL_UART_IRQHandler+0x514>
    return;
 80081f2:	bf00      	nop
 80081f4:	e002      	b.n	80081fc <HAL_UART_IRQHandler+0x514>
      return;
 80081f6:	bf00      	nop
 80081f8:	e000      	b.n	80081fc <HAL_UART_IRQHandler+0x514>
      return;
 80081fa:	bf00      	nop
  }
}
 80081fc:	37e8      	adds	r7, #232	; 0xe8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop

08008204 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008248:	bf00      	nop
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	460b      	mov	r3, r1
 8008272:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008274:	bf00      	nop
 8008276:	370c      	adds	r7, #12
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b090      	sub	sp, #64	; 0x40
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008298:	2b00      	cmp	r3, #0
 800829a:	d137      	bne.n	800830c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800829c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800829e:	2200      	movs	r2, #0
 80082a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80082a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3314      	adds	r3, #20
 80082a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	e853 3f00 	ldrex	r3, [r3]
 80082b0:	623b      	str	r3, [r7, #32]
   return(result);
 80082b2:	6a3b      	ldr	r3, [r7, #32]
 80082b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80082ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	3314      	adds	r3, #20
 80082c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082c2:	633a      	str	r2, [r7, #48]	; 0x30
 80082c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ca:	e841 2300 	strex	r3, r2, [r1]
 80082ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1e5      	bne.n	80082a2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	330c      	adds	r3, #12
 80082dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	e853 3f00 	ldrex	r3, [r3]
 80082e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ec:	637b      	str	r3, [r7, #52]	; 0x34
 80082ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	330c      	adds	r3, #12
 80082f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082f6:	61fa      	str	r2, [r7, #28]
 80082f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fa:	69b9      	ldr	r1, [r7, #24]
 80082fc:	69fa      	ldr	r2, [r7, #28]
 80082fe:	e841 2300 	strex	r3, r2, [r1]
 8008302:	617b      	str	r3, [r7, #20]
   return(result);
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1e5      	bne.n	80082d6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800830a:	e002      	b.n	8008312 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800830c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800830e:	f7ff ff79 	bl	8008204 <HAL_UART_TxCpltCallback>
}
 8008312:	bf00      	nop
 8008314:	3740      	adds	r7, #64	; 0x40
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008326:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f7ff ff75 	bl	8008218 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800832e:	bf00      	nop
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b09c      	sub	sp, #112	; 0x70
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008342:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800834e:	2b00      	cmp	r3, #0
 8008350:	d172      	bne.n	8008438 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008354:	2200      	movs	r2, #0
 8008356:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	330c      	adds	r3, #12
 800835e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008362:	e853 3f00 	ldrex	r3, [r3]
 8008366:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800836a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800836e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008370:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	330c      	adds	r3, #12
 8008376:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008378:	65ba      	str	r2, [r7, #88]	; 0x58
 800837a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800837e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008380:	e841 2300 	strex	r3, r2, [r1]
 8008384:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1e5      	bne.n	8008358 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800838c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	3314      	adds	r3, #20
 8008392:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008396:	e853 3f00 	ldrex	r3, [r3]
 800839a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800839c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839e:	f023 0301 	bic.w	r3, r3, #1
 80083a2:	667b      	str	r3, [r7, #100]	; 0x64
 80083a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	3314      	adds	r3, #20
 80083aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80083ac:	647a      	str	r2, [r7, #68]	; 0x44
 80083ae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083b4:	e841 2300 	strex	r3, r2, [r1]
 80083b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1e5      	bne.n	800838c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3314      	adds	r3, #20
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	e853 3f00 	ldrex	r3, [r3]
 80083ce:	623b      	str	r3, [r7, #32]
   return(result);
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083d6:	663b      	str	r3, [r7, #96]	; 0x60
 80083d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3314      	adds	r3, #20
 80083de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083e0:	633a      	str	r2, [r7, #48]	; 0x30
 80083e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083e8:	e841 2300 	strex	r3, r2, [r1]
 80083ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1e5      	bne.n	80083c0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80083f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083f6:	2220      	movs	r2, #32
 80083f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008400:	2b01      	cmp	r3, #1
 8008402:	d119      	bne.n	8008438 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	330c      	adds	r3, #12
 800840a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	e853 3f00 	ldrex	r3, [r3]
 8008412:	60fb      	str	r3, [r7, #12]
   return(result);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f023 0310 	bic.w	r3, r3, #16
 800841a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800841c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	330c      	adds	r3, #12
 8008422:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008424:	61fa      	str	r2, [r7, #28]
 8008426:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008428:	69b9      	ldr	r1, [r7, #24]
 800842a:	69fa      	ldr	r2, [r7, #28]
 800842c:	e841 2300 	strex	r3, r2, [r1]
 8008430:	617b      	str	r3, [r7, #20]
   return(result);
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1e5      	bne.n	8008404 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800843a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843c:	2b01      	cmp	r3, #1
 800843e:	d106      	bne.n	800844e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008442:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008444:	4619      	mov	r1, r3
 8008446:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008448:	f7ff ff0e 	bl	8008268 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800844c:	e002      	b.n	8008454 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800844e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008450:	f7ff feec 	bl	800822c <HAL_UART_RxCpltCallback>
}
 8008454:	bf00      	nop
 8008456:	3770      	adds	r7, #112	; 0x70
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008468:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846e:	2b01      	cmp	r3, #1
 8008470:	d108      	bne.n	8008484 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008476:	085b      	lsrs	r3, r3, #1
 8008478:	b29b      	uxth	r3, r3
 800847a:	4619      	mov	r1, r3
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f7ff fef3 	bl	8008268 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008482:	e002      	b.n	800848a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f7ff fedb 	bl	8008240 <HAL_UART_RxHalfCpltCallback>
}
 800848a:	bf00      	nop
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800849a:	2300      	movs	r3, #0
 800849c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ae:	2b80      	cmp	r3, #128	; 0x80
 80084b0:	bf0c      	ite	eq
 80084b2:	2301      	moveq	r3, #1
 80084b4:	2300      	movne	r3, #0
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b21      	cmp	r3, #33	; 0x21
 80084c4:	d108      	bne.n	80084d8 <UART_DMAError+0x46>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d005      	beq.n	80084d8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2200      	movs	r2, #0
 80084d0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80084d2:	68b8      	ldr	r0, [r7, #8]
 80084d4:	f000 f8c6 	bl	8008664 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	695b      	ldr	r3, [r3, #20]
 80084de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e2:	2b40      	cmp	r3, #64	; 0x40
 80084e4:	bf0c      	ite	eq
 80084e6:	2301      	moveq	r3, #1
 80084e8:	2300      	movne	r3, #0
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	2b22      	cmp	r3, #34	; 0x22
 80084f8:	d108      	bne.n	800850c <UART_DMAError+0x7a>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d005      	beq.n	800850c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2200      	movs	r2, #0
 8008504:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008506:	68b8      	ldr	r0, [r7, #8]
 8008508:	f000 f8d4 	bl	80086b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008510:	f043 0210 	orr.w	r2, r3, #16
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008518:	68b8      	ldr	r0, [r7, #8]
 800851a:	f7ff fe9b 	bl	8008254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800851e:	bf00      	nop
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
	...

08008528 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b098      	sub	sp, #96	; 0x60
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	4613      	mov	r3, r2
 8008534:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	88fa      	ldrh	r2, [r7, #6]
 8008540:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2222      	movs	r2, #34	; 0x22
 800854c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008554:	4a40      	ldr	r2, [pc, #256]	; (8008658 <UART_Start_Receive_DMA+0x130>)
 8008556:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855c:	4a3f      	ldr	r2, [pc, #252]	; (800865c <UART_Start_Receive_DMA+0x134>)
 800855e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008564:	4a3e      	ldr	r2, [pc, #248]	; (8008660 <UART_Start_Receive_DMA+0x138>)
 8008566:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856c:	2200      	movs	r2, #0
 800856e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008570:	f107 0308 	add.w	r3, r7, #8
 8008574:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	3304      	adds	r3, #4
 8008580:	4619      	mov	r1, r3
 8008582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	88fb      	ldrh	r3, [r7, #6]
 8008588:	f7fb f8e4 	bl	8003754 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800858c:	2300      	movs	r3, #0
 800858e:	613b      	str	r3, [r7, #16]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	613b      	str	r3, [r7, #16]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	613b      	str	r3, [r7, #16]
 80085a0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d019      	beq.n	80085e6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	330c      	adds	r3, #12
 80085b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085bc:	e853 3f00 	ldrex	r3, [r3]
 80085c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	330c      	adds	r3, #12
 80085d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80085d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80085d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80085d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085da:	e841 2300 	strex	r3, r2, [r1]
 80085de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80085e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1e5      	bne.n	80085b2 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	3314      	adds	r3, #20
 80085ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f0:	e853 3f00 	ldrex	r3, [r3]
 80085f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f8:	f043 0301 	orr.w	r3, r3, #1
 80085fc:	657b      	str	r3, [r7, #84]	; 0x54
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3314      	adds	r3, #20
 8008604:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008606:	63ba      	str	r2, [r7, #56]	; 0x38
 8008608:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800860c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e5      	bne.n	80085e6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3314      	adds	r3, #20
 8008620:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	e853 3f00 	ldrex	r3, [r3]
 8008628:	617b      	str	r3, [r7, #20]
   return(result);
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008630:	653b      	str	r3, [r7, #80]	; 0x50
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	3314      	adds	r3, #20
 8008638:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800863a:	627a      	str	r2, [r7, #36]	; 0x24
 800863c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863e:	6a39      	ldr	r1, [r7, #32]
 8008640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008642:	e841 2300 	strex	r3, r2, [r1]
 8008646:	61fb      	str	r3, [r7, #28]
   return(result);
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1e5      	bne.n	800861a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800864e:	2300      	movs	r3, #0
}
 8008650:	4618      	mov	r0, r3
 8008652:	3760      	adds	r7, #96	; 0x60
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	08008337 	.word	0x08008337
 800865c:	0800845d 	.word	0x0800845d
 8008660:	08008493 	.word	0x08008493

08008664 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008664:	b480      	push	{r7}
 8008666:	b089      	sub	sp, #36	; 0x24
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	330c      	adds	r3, #12
 8008672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	e853 3f00 	ldrex	r3, [r3]
 800867a:	60bb      	str	r3, [r7, #8]
   return(result);
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008682:	61fb      	str	r3, [r7, #28]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	330c      	adds	r3, #12
 800868a:	69fa      	ldr	r2, [r7, #28]
 800868c:	61ba      	str	r2, [r7, #24]
 800868e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008690:	6979      	ldr	r1, [r7, #20]
 8008692:	69ba      	ldr	r2, [r7, #24]
 8008694:	e841 2300 	strex	r3, r2, [r1]
 8008698:	613b      	str	r3, [r7, #16]
   return(result);
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1e5      	bne.n	800866c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2220      	movs	r2, #32
 80086a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80086a8:	bf00      	nop
 80086aa:	3724      	adds	r7, #36	; 0x24
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b095      	sub	sp, #84	; 0x54
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	330c      	adds	r3, #12
 80086c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c6:	e853 3f00 	ldrex	r3, [r3]
 80086ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	330c      	adds	r3, #12
 80086da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086dc:	643a      	str	r2, [r7, #64]	; 0x40
 80086de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086e4:	e841 2300 	strex	r3, r2, [r1]
 80086e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1e5      	bne.n	80086bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3314      	adds	r3, #20
 80086f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	e853 3f00 	ldrex	r3, [r3]
 80086fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	f023 0301 	bic.w	r3, r3, #1
 8008706:	64bb      	str	r3, [r7, #72]	; 0x48
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3314      	adds	r3, #20
 800870e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008710:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008712:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008714:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008718:	e841 2300 	strex	r3, r2, [r1]
 800871c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1e5      	bne.n	80086f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008728:	2b01      	cmp	r3, #1
 800872a:	d119      	bne.n	8008760 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	330c      	adds	r3, #12
 8008732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	e853 3f00 	ldrex	r3, [r3]
 800873a:	60bb      	str	r3, [r7, #8]
   return(result);
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	f023 0310 	bic.w	r3, r3, #16
 8008742:	647b      	str	r3, [r7, #68]	; 0x44
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	330c      	adds	r3, #12
 800874a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800874c:	61ba      	str	r2, [r7, #24]
 800874e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008750:	6979      	ldr	r1, [r7, #20]
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	e841 2300 	strex	r3, r2, [r1]
 8008758:	613b      	str	r3, [r7, #16]
   return(result);
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e5      	bne.n	800872c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2220      	movs	r2, #32
 8008764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800876e:	bf00      	nop
 8008770:	3754      	adds	r7, #84	; 0x54
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008786:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f7ff fd5d 	bl	8008254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800879a:	bf00      	nop
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80087a2:	b480      	push	{r7}
 80087a4:	b085      	sub	sp, #20
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b21      	cmp	r3, #33	; 0x21
 80087b4:	d13e      	bne.n	8008834 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087be:	d114      	bne.n	80087ea <UART_Transmit_IT+0x48>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d110      	bne.n	80087ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a1b      	ldr	r3, [r3, #32]
 80087cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	881b      	ldrh	r3, [r3, #0]
 80087d2:	461a      	mov	r2, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6a1b      	ldr	r3, [r3, #32]
 80087e2:	1c9a      	adds	r2, r3, #2
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	621a      	str	r2, [r3, #32]
 80087e8:	e008      	b.n	80087fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	1c59      	adds	r1, r3, #1
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	6211      	str	r1, [r2, #32]
 80087f4:	781a      	ldrb	r2, [r3, #0]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008800:	b29b      	uxth	r3, r3
 8008802:	3b01      	subs	r3, #1
 8008804:	b29b      	uxth	r3, r3
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	4619      	mov	r1, r3
 800880a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10f      	bne.n	8008830 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68da      	ldr	r2, [r3, #12]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800881e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800882e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008830:	2300      	movs	r3, #0
 8008832:	e000      	b.n	8008836 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008834:	2302      	movs	r3, #2
  }
}
 8008836:	4618      	mov	r0, r3
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b082      	sub	sp, #8
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68da      	ldr	r2, [r3, #12]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008858:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2220      	movs	r2, #32
 800885e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7ff fcce 	bl	8008204 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b08c      	sub	sp, #48	; 0x30
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b22      	cmp	r3, #34	; 0x22
 8008884:	f040 80ab 	bne.w	80089de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008890:	d117      	bne.n	80088c2 <UART_Receive_IT+0x50>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d113      	bne.n	80088c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800889a:	2300      	movs	r3, #0
 800889c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ba:	1c9a      	adds	r2, r3, #2
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	629a      	str	r2, [r3, #40]	; 0x28
 80088c0:	e026      	b.n	8008910 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80088c8:	2300      	movs	r3, #0
 80088ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d4:	d007      	beq.n	80088e6 <UART_Receive_IT+0x74>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10a      	bne.n	80088f4 <UART_Receive_IT+0x82>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d106      	bne.n	80088f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f0:	701a      	strb	r2, [r3, #0]
 80088f2:	e008      	b.n	8008906 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008900:	b2da      	uxtb	r2, r3
 8008902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008904:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890a:	1c5a      	adds	r2, r3, #1
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008914:	b29b      	uxth	r3, r3
 8008916:	3b01      	subs	r3, #1
 8008918:	b29b      	uxth	r3, r3
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	4619      	mov	r1, r3
 800891e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008920:	2b00      	cmp	r3, #0
 8008922:	d15a      	bne.n	80089da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68da      	ldr	r2, [r3, #12]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 0220 	bic.w	r2, r2, #32
 8008932:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68da      	ldr	r2, [r3, #12]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008942:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	695a      	ldr	r2, [r3, #20]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 0201 	bic.w	r2, r2, #1
 8008952:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2220      	movs	r2, #32
 8008958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008960:	2b01      	cmp	r3, #1
 8008962:	d135      	bne.n	80089d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	330c      	adds	r3, #12
 8008970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	e853 3f00 	ldrex	r3, [r3]
 8008978:	613b      	str	r3, [r7, #16]
   return(result);
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	f023 0310 	bic.w	r3, r3, #16
 8008980:	627b      	str	r3, [r7, #36]	; 0x24
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	330c      	adds	r3, #12
 8008988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800898a:	623a      	str	r2, [r7, #32]
 800898c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898e:	69f9      	ldr	r1, [r7, #28]
 8008990:	6a3a      	ldr	r2, [r7, #32]
 8008992:	e841 2300 	strex	r3, r2, [r1]
 8008996:	61bb      	str	r3, [r7, #24]
   return(result);
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1e5      	bne.n	800896a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0310 	and.w	r3, r3, #16
 80089a8:	2b10      	cmp	r3, #16
 80089aa:	d10a      	bne.n	80089c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7ff fc4d 	bl	8008268 <HAL_UARTEx_RxEventCallback>
 80089ce:	e002      	b.n	80089d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7ff fc2b 	bl	800822c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	e002      	b.n	80089e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	e000      	b.n	80089e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80089de:	2302      	movs	r3, #2
  }
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3730      	adds	r7, #48	; 0x30
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089ec:	b0c0      	sub	sp, #256	; 0x100
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a04:	68d9      	ldr	r1, [r3, #12]
 8008a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	ea40 0301 	orr.w	r3, r0, r1
 8008a10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a16:	689a      	ldr	r2, [r3, #8]
 8008a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	431a      	orrs	r2, r3
 8008a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	431a      	orrs	r2, r3
 8008a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008a40:	f021 010c 	bic.w	r1, r1, #12
 8008a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a4e:	430b      	orrs	r3, r1
 8008a50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a62:	6999      	ldr	r1, [r3, #24]
 8008a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	ea40 0301 	orr.w	r3, r0, r1
 8008a6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	4b8f      	ldr	r3, [pc, #572]	; (8008cb4 <UART_SetConfig+0x2cc>)
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d005      	beq.n	8008a88 <UART_SetConfig+0xa0>
 8008a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	4b8d      	ldr	r3, [pc, #564]	; (8008cb8 <UART_SetConfig+0x2d0>)
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d104      	bne.n	8008a92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a88:	f7fd fbb4 	bl	80061f4 <HAL_RCC_GetPCLK2Freq>
 8008a8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008a90:	e003      	b.n	8008a9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a92:	f7fd fb9b 	bl	80061cc <HAL_RCC_GetPCLK1Freq>
 8008a96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aa4:	f040 810c 	bne.w	8008cc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008aac:	2200      	movs	r2, #0
 8008aae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ab2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008ab6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008aba:	4622      	mov	r2, r4
 8008abc:	462b      	mov	r3, r5
 8008abe:	1891      	adds	r1, r2, r2
 8008ac0:	65b9      	str	r1, [r7, #88]	; 0x58
 8008ac2:	415b      	adcs	r3, r3
 8008ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ac6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008aca:	4621      	mov	r1, r4
 8008acc:	eb12 0801 	adds.w	r8, r2, r1
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	eb43 0901 	adc.w	r9, r3, r1
 8008ad6:	f04f 0200 	mov.w	r2, #0
 8008ada:	f04f 0300 	mov.w	r3, #0
 8008ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008aea:	4690      	mov	r8, r2
 8008aec:	4699      	mov	r9, r3
 8008aee:	4623      	mov	r3, r4
 8008af0:	eb18 0303 	adds.w	r3, r8, r3
 8008af4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008af8:	462b      	mov	r3, r5
 8008afa:	eb49 0303 	adc.w	r3, r9, r3
 8008afe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008b0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008b12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008b16:	460b      	mov	r3, r1
 8008b18:	18db      	adds	r3, r3, r3
 8008b1a:	653b      	str	r3, [r7, #80]	; 0x50
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	eb42 0303 	adc.w	r3, r2, r3
 8008b22:	657b      	str	r3, [r7, #84]	; 0x54
 8008b24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008b28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008b2c:	f7f7 fe14 	bl	8000758 <__aeabi_uldivmod>
 8008b30:	4602      	mov	r2, r0
 8008b32:	460b      	mov	r3, r1
 8008b34:	4b61      	ldr	r3, [pc, #388]	; (8008cbc <UART_SetConfig+0x2d4>)
 8008b36:	fba3 2302 	umull	r2, r3, r3, r2
 8008b3a:	095b      	lsrs	r3, r3, #5
 8008b3c:	011c      	lsls	r4, r3, #4
 8008b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008b48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008b4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008b50:	4642      	mov	r2, r8
 8008b52:	464b      	mov	r3, r9
 8008b54:	1891      	adds	r1, r2, r2
 8008b56:	64b9      	str	r1, [r7, #72]	; 0x48
 8008b58:	415b      	adcs	r3, r3
 8008b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008b60:	4641      	mov	r1, r8
 8008b62:	eb12 0a01 	adds.w	sl, r2, r1
 8008b66:	4649      	mov	r1, r9
 8008b68:	eb43 0b01 	adc.w	fp, r3, r1
 8008b6c:	f04f 0200 	mov.w	r2, #0
 8008b70:	f04f 0300 	mov.w	r3, #0
 8008b74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008b7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b80:	4692      	mov	sl, r2
 8008b82:	469b      	mov	fp, r3
 8008b84:	4643      	mov	r3, r8
 8008b86:	eb1a 0303 	adds.w	r3, sl, r3
 8008b8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b8e:	464b      	mov	r3, r9
 8008b90:	eb4b 0303 	adc.w	r3, fp, r3
 8008b94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ba4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008ba8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008bac:	460b      	mov	r3, r1
 8008bae:	18db      	adds	r3, r3, r3
 8008bb0:	643b      	str	r3, [r7, #64]	; 0x40
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	eb42 0303 	adc.w	r3, r2, r3
 8008bb8:	647b      	str	r3, [r7, #68]	; 0x44
 8008bba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008bbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008bc2:	f7f7 fdc9 	bl	8000758 <__aeabi_uldivmod>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4611      	mov	r1, r2
 8008bcc:	4b3b      	ldr	r3, [pc, #236]	; (8008cbc <UART_SetConfig+0x2d4>)
 8008bce:	fba3 2301 	umull	r2, r3, r3, r1
 8008bd2:	095b      	lsrs	r3, r3, #5
 8008bd4:	2264      	movs	r2, #100	; 0x64
 8008bd6:	fb02 f303 	mul.w	r3, r2, r3
 8008bda:	1acb      	subs	r3, r1, r3
 8008bdc:	00db      	lsls	r3, r3, #3
 8008bde:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008be2:	4b36      	ldr	r3, [pc, #216]	; (8008cbc <UART_SetConfig+0x2d4>)
 8008be4:	fba3 2302 	umull	r2, r3, r3, r2
 8008be8:	095b      	lsrs	r3, r3, #5
 8008bea:	005b      	lsls	r3, r3, #1
 8008bec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008bf0:	441c      	add	r4, r3
 8008bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008bfc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008c00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008c04:	4642      	mov	r2, r8
 8008c06:	464b      	mov	r3, r9
 8008c08:	1891      	adds	r1, r2, r2
 8008c0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8008c0c:	415b      	adcs	r3, r3
 8008c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008c14:	4641      	mov	r1, r8
 8008c16:	1851      	adds	r1, r2, r1
 8008c18:	6339      	str	r1, [r7, #48]	; 0x30
 8008c1a:	4649      	mov	r1, r9
 8008c1c:	414b      	adcs	r3, r1
 8008c1e:	637b      	str	r3, [r7, #52]	; 0x34
 8008c20:	f04f 0200 	mov.w	r2, #0
 8008c24:	f04f 0300 	mov.w	r3, #0
 8008c28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008c2c:	4659      	mov	r1, fp
 8008c2e:	00cb      	lsls	r3, r1, #3
 8008c30:	4651      	mov	r1, sl
 8008c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c36:	4651      	mov	r1, sl
 8008c38:	00ca      	lsls	r2, r1, #3
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4603      	mov	r3, r0
 8008c40:	4642      	mov	r2, r8
 8008c42:	189b      	adds	r3, r3, r2
 8008c44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c48:	464b      	mov	r3, r9
 8008c4a:	460a      	mov	r2, r1
 8008c4c:	eb42 0303 	adc.w	r3, r2, r3
 8008c50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008c60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008c64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008c68:	460b      	mov	r3, r1
 8008c6a:	18db      	adds	r3, r3, r3
 8008c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c6e:	4613      	mov	r3, r2
 8008c70:	eb42 0303 	adc.w	r3, r2, r3
 8008c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008c7e:	f7f7 fd6b 	bl	8000758 <__aeabi_uldivmod>
 8008c82:	4602      	mov	r2, r0
 8008c84:	460b      	mov	r3, r1
 8008c86:	4b0d      	ldr	r3, [pc, #52]	; (8008cbc <UART_SetConfig+0x2d4>)
 8008c88:	fba3 1302 	umull	r1, r3, r3, r2
 8008c8c:	095b      	lsrs	r3, r3, #5
 8008c8e:	2164      	movs	r1, #100	; 0x64
 8008c90:	fb01 f303 	mul.w	r3, r1, r3
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	3332      	adds	r3, #50	; 0x32
 8008c9a:	4a08      	ldr	r2, [pc, #32]	; (8008cbc <UART_SetConfig+0x2d4>)
 8008c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca0:	095b      	lsrs	r3, r3, #5
 8008ca2:	f003 0207 	and.w	r2, r3, #7
 8008ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4422      	add	r2, r4
 8008cae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008cb0:	e105      	b.n	8008ebe <UART_SetConfig+0x4d6>
 8008cb2:	bf00      	nop
 8008cb4:	40011000 	.word	0x40011000
 8008cb8:	40011400 	.word	0x40011400
 8008cbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008cca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008cce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008cd2:	4642      	mov	r2, r8
 8008cd4:	464b      	mov	r3, r9
 8008cd6:	1891      	adds	r1, r2, r2
 8008cd8:	6239      	str	r1, [r7, #32]
 8008cda:	415b      	adcs	r3, r3
 8008cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8008cde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ce2:	4641      	mov	r1, r8
 8008ce4:	1854      	adds	r4, r2, r1
 8008ce6:	4649      	mov	r1, r9
 8008ce8:	eb43 0501 	adc.w	r5, r3, r1
 8008cec:	f04f 0200 	mov.w	r2, #0
 8008cf0:	f04f 0300 	mov.w	r3, #0
 8008cf4:	00eb      	lsls	r3, r5, #3
 8008cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008cfa:	00e2      	lsls	r2, r4, #3
 8008cfc:	4614      	mov	r4, r2
 8008cfe:	461d      	mov	r5, r3
 8008d00:	4643      	mov	r3, r8
 8008d02:	18e3      	adds	r3, r4, r3
 8008d04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d08:	464b      	mov	r3, r9
 8008d0a:	eb45 0303 	adc.w	r3, r5, r3
 8008d0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008d22:	f04f 0200 	mov.w	r2, #0
 8008d26:	f04f 0300 	mov.w	r3, #0
 8008d2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008d2e:	4629      	mov	r1, r5
 8008d30:	008b      	lsls	r3, r1, #2
 8008d32:	4621      	mov	r1, r4
 8008d34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d38:	4621      	mov	r1, r4
 8008d3a:	008a      	lsls	r2, r1, #2
 8008d3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008d40:	f7f7 fd0a 	bl	8000758 <__aeabi_uldivmod>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4b60      	ldr	r3, [pc, #384]	; (8008ecc <UART_SetConfig+0x4e4>)
 8008d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d4e:	095b      	lsrs	r3, r3, #5
 8008d50:	011c      	lsls	r4, r3, #4
 8008d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d56:	2200      	movs	r2, #0
 8008d58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008d5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008d60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008d64:	4642      	mov	r2, r8
 8008d66:	464b      	mov	r3, r9
 8008d68:	1891      	adds	r1, r2, r2
 8008d6a:	61b9      	str	r1, [r7, #24]
 8008d6c:	415b      	adcs	r3, r3
 8008d6e:	61fb      	str	r3, [r7, #28]
 8008d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d74:	4641      	mov	r1, r8
 8008d76:	1851      	adds	r1, r2, r1
 8008d78:	6139      	str	r1, [r7, #16]
 8008d7a:	4649      	mov	r1, r9
 8008d7c:	414b      	adcs	r3, r1
 8008d7e:	617b      	str	r3, [r7, #20]
 8008d80:	f04f 0200 	mov.w	r2, #0
 8008d84:	f04f 0300 	mov.w	r3, #0
 8008d88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d8c:	4659      	mov	r1, fp
 8008d8e:	00cb      	lsls	r3, r1, #3
 8008d90:	4651      	mov	r1, sl
 8008d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d96:	4651      	mov	r1, sl
 8008d98:	00ca      	lsls	r2, r1, #3
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	4603      	mov	r3, r0
 8008da0:	4642      	mov	r2, r8
 8008da2:	189b      	adds	r3, r3, r2
 8008da4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008da8:	464b      	mov	r3, r9
 8008daa:	460a      	mov	r2, r1
 8008dac:	eb42 0303 	adc.w	r3, r2, r3
 8008db0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8008dbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008dc0:	f04f 0200 	mov.w	r2, #0
 8008dc4:	f04f 0300 	mov.w	r3, #0
 8008dc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008dcc:	4649      	mov	r1, r9
 8008dce:	008b      	lsls	r3, r1, #2
 8008dd0:	4641      	mov	r1, r8
 8008dd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008dd6:	4641      	mov	r1, r8
 8008dd8:	008a      	lsls	r2, r1, #2
 8008dda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008dde:	f7f7 fcbb 	bl	8000758 <__aeabi_uldivmod>
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	4b39      	ldr	r3, [pc, #228]	; (8008ecc <UART_SetConfig+0x4e4>)
 8008de8:	fba3 1302 	umull	r1, r3, r3, r2
 8008dec:	095b      	lsrs	r3, r3, #5
 8008dee:	2164      	movs	r1, #100	; 0x64
 8008df0:	fb01 f303 	mul.w	r3, r1, r3
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	011b      	lsls	r3, r3, #4
 8008df8:	3332      	adds	r3, #50	; 0x32
 8008dfa:	4a34      	ldr	r2, [pc, #208]	; (8008ecc <UART_SetConfig+0x4e4>)
 8008dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8008e00:	095b      	lsrs	r3, r3, #5
 8008e02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e06:	441c      	add	r4, r3
 8008e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	673b      	str	r3, [r7, #112]	; 0x70
 8008e10:	677a      	str	r2, [r7, #116]	; 0x74
 8008e12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008e16:	4642      	mov	r2, r8
 8008e18:	464b      	mov	r3, r9
 8008e1a:	1891      	adds	r1, r2, r2
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	415b      	adcs	r3, r3
 8008e20:	60fb      	str	r3, [r7, #12]
 8008e22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e26:	4641      	mov	r1, r8
 8008e28:	1851      	adds	r1, r2, r1
 8008e2a:	6039      	str	r1, [r7, #0]
 8008e2c:	4649      	mov	r1, r9
 8008e2e:	414b      	adcs	r3, r1
 8008e30:	607b      	str	r3, [r7, #4]
 8008e32:	f04f 0200 	mov.w	r2, #0
 8008e36:	f04f 0300 	mov.w	r3, #0
 8008e3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e3e:	4659      	mov	r1, fp
 8008e40:	00cb      	lsls	r3, r1, #3
 8008e42:	4651      	mov	r1, sl
 8008e44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e48:	4651      	mov	r1, sl
 8008e4a:	00ca      	lsls	r2, r1, #3
 8008e4c:	4610      	mov	r0, r2
 8008e4e:	4619      	mov	r1, r3
 8008e50:	4603      	mov	r3, r0
 8008e52:	4642      	mov	r2, r8
 8008e54:	189b      	adds	r3, r3, r2
 8008e56:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e58:	464b      	mov	r3, r9
 8008e5a:	460a      	mov	r2, r1
 8008e5c:	eb42 0303 	adc.w	r3, r2, r3
 8008e60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	663b      	str	r3, [r7, #96]	; 0x60
 8008e6c:	667a      	str	r2, [r7, #100]	; 0x64
 8008e6e:	f04f 0200 	mov.w	r2, #0
 8008e72:	f04f 0300 	mov.w	r3, #0
 8008e76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008e7a:	4649      	mov	r1, r9
 8008e7c:	008b      	lsls	r3, r1, #2
 8008e7e:	4641      	mov	r1, r8
 8008e80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e84:	4641      	mov	r1, r8
 8008e86:	008a      	lsls	r2, r1, #2
 8008e88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008e8c:	f7f7 fc64 	bl	8000758 <__aeabi_uldivmod>
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4b0d      	ldr	r3, [pc, #52]	; (8008ecc <UART_SetConfig+0x4e4>)
 8008e96:	fba3 1302 	umull	r1, r3, r3, r2
 8008e9a:	095b      	lsrs	r3, r3, #5
 8008e9c:	2164      	movs	r1, #100	; 0x64
 8008e9e:	fb01 f303 	mul.w	r3, r1, r3
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	011b      	lsls	r3, r3, #4
 8008ea6:	3332      	adds	r3, #50	; 0x32
 8008ea8:	4a08      	ldr	r2, [pc, #32]	; (8008ecc <UART_SetConfig+0x4e4>)
 8008eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8008eae:	095b      	lsrs	r3, r3, #5
 8008eb0:	f003 020f 	and.w	r2, r3, #15
 8008eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4422      	add	r2, r4
 8008ebc:	609a      	str	r2, [r3, #8]
}
 8008ebe:	bf00      	nop
 8008ec0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008eca:	bf00      	nop
 8008ecc:	51eb851f 	.word	0x51eb851f

08008ed0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	f107 001c 	add.w	r0, r7, #28
 8008ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d122      	bne.n	8008f2e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d105      	bne.n	8008f22 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f001 fbee 	bl	800a704 <USB_CoreReset>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73fb      	strb	r3, [r7, #15]
 8008f2c:	e01a      	b.n	8008f64 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f001 fbe2 	bl	800a704 <USB_CoreReset>
 8008f40:	4603      	mov	r3, r0
 8008f42:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d106      	bne.n	8008f58 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	639a      	str	r2, [r3, #56]	; 0x38
 8008f56:	e005      	b.n	8008f64 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f5c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d10b      	bne.n	8008f82 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f043 0206 	orr.w	r2, r3, #6
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f043 0220 	orr.w	r2, r3, #32
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f8e:	b004      	add	sp, #16
 8008f90:	4770      	bx	lr
	...

08008f94 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b087      	sub	sp, #28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008fa2:	79fb      	ldrb	r3, [r7, #7]
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d165      	bne.n	8009074 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	4a41      	ldr	r2, [pc, #260]	; (80090b0 <USB_SetTurnaroundTime+0x11c>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d906      	bls.n	8008fbe <USB_SetTurnaroundTime+0x2a>
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	4a40      	ldr	r2, [pc, #256]	; (80090b4 <USB_SetTurnaroundTime+0x120>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d202      	bcs.n	8008fbe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008fb8:	230f      	movs	r3, #15
 8008fba:	617b      	str	r3, [r7, #20]
 8008fbc:	e062      	b.n	8009084 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	4a3c      	ldr	r2, [pc, #240]	; (80090b4 <USB_SetTurnaroundTime+0x120>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d306      	bcc.n	8008fd4 <USB_SetTurnaroundTime+0x40>
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	4a3b      	ldr	r2, [pc, #236]	; (80090b8 <USB_SetTurnaroundTime+0x124>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d202      	bcs.n	8008fd4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008fce:	230e      	movs	r3, #14
 8008fd0:	617b      	str	r3, [r7, #20]
 8008fd2:	e057      	b.n	8009084 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	4a38      	ldr	r2, [pc, #224]	; (80090b8 <USB_SetTurnaroundTime+0x124>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d306      	bcc.n	8008fea <USB_SetTurnaroundTime+0x56>
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	4a37      	ldr	r2, [pc, #220]	; (80090bc <USB_SetTurnaroundTime+0x128>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d202      	bcs.n	8008fea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008fe4:	230d      	movs	r3, #13
 8008fe6:	617b      	str	r3, [r7, #20]
 8008fe8:	e04c      	b.n	8009084 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	4a33      	ldr	r2, [pc, #204]	; (80090bc <USB_SetTurnaroundTime+0x128>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d306      	bcc.n	8009000 <USB_SetTurnaroundTime+0x6c>
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	4a32      	ldr	r2, [pc, #200]	; (80090c0 <USB_SetTurnaroundTime+0x12c>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d802      	bhi.n	8009000 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008ffa:	230c      	movs	r3, #12
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	e041      	b.n	8009084 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	4a2f      	ldr	r2, [pc, #188]	; (80090c0 <USB_SetTurnaroundTime+0x12c>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d906      	bls.n	8009016 <USB_SetTurnaroundTime+0x82>
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	4a2e      	ldr	r2, [pc, #184]	; (80090c4 <USB_SetTurnaroundTime+0x130>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d802      	bhi.n	8009016 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009010:	230b      	movs	r3, #11
 8009012:	617b      	str	r3, [r7, #20]
 8009014:	e036      	b.n	8009084 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	4a2a      	ldr	r2, [pc, #168]	; (80090c4 <USB_SetTurnaroundTime+0x130>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d906      	bls.n	800902c <USB_SetTurnaroundTime+0x98>
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	4a29      	ldr	r2, [pc, #164]	; (80090c8 <USB_SetTurnaroundTime+0x134>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d802      	bhi.n	800902c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009026:	230a      	movs	r3, #10
 8009028:	617b      	str	r3, [r7, #20]
 800902a:	e02b      	b.n	8009084 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	4a26      	ldr	r2, [pc, #152]	; (80090c8 <USB_SetTurnaroundTime+0x134>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d906      	bls.n	8009042 <USB_SetTurnaroundTime+0xae>
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	4a25      	ldr	r2, [pc, #148]	; (80090cc <USB_SetTurnaroundTime+0x138>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d202      	bcs.n	8009042 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800903c:	2309      	movs	r3, #9
 800903e:	617b      	str	r3, [r7, #20]
 8009040:	e020      	b.n	8009084 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	4a21      	ldr	r2, [pc, #132]	; (80090cc <USB_SetTurnaroundTime+0x138>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d306      	bcc.n	8009058 <USB_SetTurnaroundTime+0xc4>
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	4a20      	ldr	r2, [pc, #128]	; (80090d0 <USB_SetTurnaroundTime+0x13c>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d802      	bhi.n	8009058 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009052:	2308      	movs	r3, #8
 8009054:	617b      	str	r3, [r7, #20]
 8009056:	e015      	b.n	8009084 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	4a1d      	ldr	r2, [pc, #116]	; (80090d0 <USB_SetTurnaroundTime+0x13c>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d906      	bls.n	800906e <USB_SetTurnaroundTime+0xda>
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	4a1c      	ldr	r2, [pc, #112]	; (80090d4 <USB_SetTurnaroundTime+0x140>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d202      	bcs.n	800906e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009068:	2307      	movs	r3, #7
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	e00a      	b.n	8009084 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800906e:	2306      	movs	r3, #6
 8009070:	617b      	str	r3, [r7, #20]
 8009072:	e007      	b.n	8009084 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d102      	bne.n	8009080 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800907a:	2309      	movs	r3, #9
 800907c:	617b      	str	r3, [r7, #20]
 800907e:	e001      	b.n	8009084 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009080:	2309      	movs	r3, #9
 8009082:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	68da      	ldr	r2, [r3, #12]
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	029b      	lsls	r3, r3, #10
 8009098:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800909c:	431a      	orrs	r2, r3
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	371c      	adds	r7, #28
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	00d8acbf 	.word	0x00d8acbf
 80090b4:	00e4e1c0 	.word	0x00e4e1c0
 80090b8:	00f42400 	.word	0x00f42400
 80090bc:	01067380 	.word	0x01067380
 80090c0:	011a499f 	.word	0x011a499f
 80090c4:	01312cff 	.word	0x01312cff
 80090c8:	014ca43f 	.word	0x014ca43f
 80090cc:	016e3600 	.word	0x016e3600
 80090d0:	01a6ab1f 	.word	0x01a6ab1f
 80090d4:	01e84800 	.word	0x01e84800

080090d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	f043 0201 	orr.w	r2, r3, #1
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b083      	sub	sp, #12
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	f023 0201 	bic.w	r2, r3, #1
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	460b      	mov	r3, r1
 8009126:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009128:	2300      	movs	r3, #0
 800912a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009138:	78fb      	ldrb	r3, [r7, #3]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d115      	bne.n	800916a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800914a:	2001      	movs	r0, #1
 800914c:	f7f9 fed0 	bl	8002ef0 <HAL_Delay>
      ms++;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	3301      	adds	r3, #1
 8009154:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f001 fa45 	bl	800a5e6 <USB_GetMode>
 800915c:	4603      	mov	r3, r0
 800915e:	2b01      	cmp	r3, #1
 8009160:	d01e      	beq.n	80091a0 <USB_SetCurrentMode+0x84>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2b31      	cmp	r3, #49	; 0x31
 8009166:	d9f0      	bls.n	800914a <USB_SetCurrentMode+0x2e>
 8009168:	e01a      	b.n	80091a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800916a:	78fb      	ldrb	r3, [r7, #3]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d115      	bne.n	800919c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800917c:	2001      	movs	r0, #1
 800917e:	f7f9 feb7 	bl	8002ef0 <HAL_Delay>
      ms++;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	3301      	adds	r3, #1
 8009186:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f001 fa2c 	bl	800a5e6 <USB_GetMode>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d005      	beq.n	80091a0 <USB_SetCurrentMode+0x84>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2b31      	cmp	r3, #49	; 0x31
 8009198:	d9f0      	bls.n	800917c <USB_SetCurrentMode+0x60>
 800919a:	e001      	b.n	80091a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e005      	b.n	80091ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2b32      	cmp	r3, #50	; 0x32
 80091a4:	d101      	bne.n	80091aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e000      	b.n	80091ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3710      	adds	r7, #16
 80091b0:	46bd      	mov	sp, r7
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80091b4:	b084      	sub	sp, #16
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b086      	sub	sp, #24
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
 80091be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80091c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80091c6:	2300      	movs	r3, #0
 80091c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80091ce:	2300      	movs	r3, #0
 80091d0:	613b      	str	r3, [r7, #16]
 80091d2:	e009      	b.n	80091e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	3340      	adds	r3, #64	; 0x40
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	4413      	add	r3, r2
 80091de:	2200      	movs	r2, #0
 80091e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	3301      	adds	r3, #1
 80091e6:	613b      	str	r3, [r7, #16]
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	2b0e      	cmp	r3, #14
 80091ec:	d9f2      	bls.n	80091d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80091ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d11c      	bne.n	800922e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009202:	f043 0302 	orr.w	r3, r3, #2
 8009206:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009218:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009224:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	639a      	str	r2, [r3, #56]	; 0x38
 800922c:	e00b      	b.n	8009246 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009232:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800924c:	461a      	mov	r2, r3
 800924e:	2300      	movs	r3, #0
 8009250:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009258:	4619      	mov	r1, r3
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009260:	461a      	mov	r2, r3
 8009262:	680b      	ldr	r3, [r1, #0]
 8009264:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009268:	2b01      	cmp	r3, #1
 800926a:	d10c      	bne.n	8009286 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800926c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800926e:	2b00      	cmp	r3, #0
 8009270:	d104      	bne.n	800927c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009272:	2100      	movs	r1, #0
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 f965 	bl	8009544 <USB_SetDevSpeed>
 800927a:	e008      	b.n	800928e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800927c:	2101      	movs	r1, #1
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 f960 	bl	8009544 <USB_SetDevSpeed>
 8009284:	e003      	b.n	800928e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009286:	2103      	movs	r1, #3
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f95b 	bl	8009544 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800928e:	2110      	movs	r1, #16
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f8f3 	bl	800947c <USB_FlushTxFifo>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d001      	beq.n	80092a0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f91f 	bl	80094e4 <USB_FlushRxFifo>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d001      	beq.n	80092b0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80092ac:	2301      	movs	r3, #1
 80092ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092b6:	461a      	mov	r2, r3
 80092b8:	2300      	movs	r3, #0
 80092ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c2:	461a      	mov	r2, r3
 80092c4:	2300      	movs	r3, #0
 80092c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ce:	461a      	mov	r2, r3
 80092d0:	2300      	movs	r3, #0
 80092d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092d4:	2300      	movs	r3, #0
 80092d6:	613b      	str	r3, [r7, #16]
 80092d8:	e043      	b.n	8009362 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	015a      	lsls	r2, r3, #5
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	4413      	add	r3, r2
 80092e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092f0:	d118      	bne.n	8009324 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10a      	bne.n	800930e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	015a      	lsls	r2, r3, #5
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	4413      	add	r3, r2
 8009300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009304:	461a      	mov	r2, r3
 8009306:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800930a:	6013      	str	r3, [r2, #0]
 800930c:	e013      	b.n	8009336 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	015a      	lsls	r2, r3, #5
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	4413      	add	r3, r2
 8009316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800931a:	461a      	mov	r2, r3
 800931c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009320:	6013      	str	r3, [r2, #0]
 8009322:	e008      	b.n	8009336 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009330:	461a      	mov	r2, r3
 8009332:	2300      	movs	r3, #0
 8009334:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	015a      	lsls	r2, r3, #5
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	4413      	add	r3, r2
 800933e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009342:	461a      	mov	r2, r3
 8009344:	2300      	movs	r3, #0
 8009346:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	015a      	lsls	r2, r3, #5
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	4413      	add	r3, r2
 8009350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009354:	461a      	mov	r2, r3
 8009356:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800935a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	3301      	adds	r3, #1
 8009360:	613b      	str	r3, [r7, #16]
 8009362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	429a      	cmp	r2, r3
 8009368:	d3b7      	bcc.n	80092da <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800936a:	2300      	movs	r3, #0
 800936c:	613b      	str	r3, [r7, #16]
 800936e:	e043      	b.n	80093f8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	4413      	add	r3, r2
 8009378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009382:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009386:	d118      	bne.n	80093ba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10a      	bne.n	80093a4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	015a      	lsls	r2, r3, #5
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	4413      	add	r3, r2
 8009396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800939a:	461a      	mov	r2, r3
 800939c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80093a0:	6013      	str	r3, [r2, #0]
 80093a2:	e013      	b.n	80093cc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	015a      	lsls	r2, r3, #5
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	4413      	add	r3, r2
 80093ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b0:	461a      	mov	r2, r3
 80093b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80093b6:	6013      	str	r3, [r2, #0]
 80093b8:	e008      	b.n	80093cc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	015a      	lsls	r2, r3, #5
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	4413      	add	r3, r2
 80093c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c6:	461a      	mov	r2, r3
 80093c8:	2300      	movs	r3, #0
 80093ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	015a      	lsls	r2, r3, #5
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	4413      	add	r3, r2
 80093d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d8:	461a      	mov	r2, r3
 80093da:	2300      	movs	r3, #0
 80093dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	015a      	lsls	r2, r3, #5
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	4413      	add	r3, r2
 80093e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ea:	461a      	mov	r2, r3
 80093ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	3301      	adds	r3, #1
 80093f6:	613b      	str	r3, [r7, #16]
 80093f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fa:	693a      	ldr	r2, [r7, #16]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d3b7      	bcc.n	8009370 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800940e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009412:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009420:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009424:	2b00      	cmp	r3, #0
 8009426:	d105      	bne.n	8009434 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	f043 0210 	orr.w	r2, r3, #16
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	699a      	ldr	r2, [r3, #24]
 8009438:	4b0f      	ldr	r3, [pc, #60]	; (8009478 <USB_DevInit+0x2c4>)
 800943a:	4313      	orrs	r3, r2
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009442:	2b00      	cmp	r3, #0
 8009444:	d005      	beq.n	8009452 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	f043 0208 	orr.w	r2, r3, #8
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009454:	2b01      	cmp	r3, #1
 8009456:	d107      	bne.n	8009468 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009460:	f043 0304 	orr.w	r3, r3, #4
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009468:	7dfb      	ldrb	r3, [r7, #23]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3718      	adds	r7, #24
 800946e:	46bd      	mov	sp, r7
 8009470:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009474:	b004      	add	sp, #16
 8009476:	4770      	bx	lr
 8009478:	803c3800 	.word	0x803c3800

0800947c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009486:	2300      	movs	r3, #0
 8009488:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3301      	adds	r3, #1
 800948e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	4a13      	ldr	r2, [pc, #76]	; (80094e0 <USB_FlushTxFifo+0x64>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d901      	bls.n	800949c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009498:	2303      	movs	r3, #3
 800949a:	e01b      	b.n	80094d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	daf2      	bge.n	800948a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80094a4:	2300      	movs	r3, #0
 80094a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	019b      	lsls	r3, r3, #6
 80094ac:	f043 0220 	orr.w	r2, r3, #32
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	3301      	adds	r3, #1
 80094b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	4a08      	ldr	r2, [pc, #32]	; (80094e0 <USB_FlushTxFifo+0x64>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d901      	bls.n	80094c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e006      	b.n	80094d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	f003 0320 	and.w	r3, r3, #32
 80094ce:	2b20      	cmp	r3, #32
 80094d0:	d0f0      	beq.n	80094b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	00030d40 	.word	0x00030d40

080094e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094ec:	2300      	movs	r3, #0
 80094ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	3301      	adds	r3, #1
 80094f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	4a11      	ldr	r2, [pc, #68]	; (8009540 <USB_FlushRxFifo+0x5c>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d901      	bls.n	8009502 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80094fe:	2303      	movs	r3, #3
 8009500:	e018      	b.n	8009534 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	2b00      	cmp	r3, #0
 8009508:	daf2      	bge.n	80094f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800950a:	2300      	movs	r3, #0
 800950c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2210      	movs	r2, #16
 8009512:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	3301      	adds	r3, #1
 8009518:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	4a08      	ldr	r2, [pc, #32]	; (8009540 <USB_FlushRxFifo+0x5c>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d901      	bls.n	8009526 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e006      	b.n	8009534 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	f003 0310 	and.w	r3, r3, #16
 800952e:	2b10      	cmp	r3, #16
 8009530:	d0f0      	beq.n	8009514 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	00030d40 	.word	0x00030d40

08009544 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	78fb      	ldrb	r3, [r7, #3]
 800955e:	68f9      	ldr	r1, [r7, #12]
 8009560:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009564:	4313      	orrs	r3, r2
 8009566:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009568:	2300      	movs	r3, #0
}
 800956a:	4618      	mov	r0, r3
 800956c:	3714      	adds	r7, #20
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr

08009576 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009576:	b480      	push	{r7}
 8009578:	b087      	sub	sp, #28
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	f003 0306 	and.w	r3, r3, #6
 800958e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d102      	bne.n	800959c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009596:	2300      	movs	r3, #0
 8009598:	75fb      	strb	r3, [r7, #23]
 800959a:	e00a      	b.n	80095b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d002      	beq.n	80095a8 <USB_GetDevSpeed+0x32>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2b06      	cmp	r3, #6
 80095a6:	d102      	bne.n	80095ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80095a8:	2302      	movs	r3, #2
 80095aa:	75fb      	strb	r3, [r7, #23]
 80095ac:	e001      	b.n	80095b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80095ae:	230f      	movs	r3, #15
 80095b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80095b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	371c      	adds	r7, #28
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	785b      	ldrb	r3, [r3, #1]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d13a      	bne.n	8009652 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095e2:	69da      	ldr	r2, [r3, #28]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	f003 030f 	and.w	r3, r3, #15
 80095ec:	2101      	movs	r1, #1
 80095ee:	fa01 f303 	lsl.w	r3, r1, r3
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	68f9      	ldr	r1, [r7, #12]
 80095f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095fa:	4313      	orrs	r3, r2
 80095fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	015a      	lsls	r2, r3, #5
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	4413      	add	r3, r2
 8009606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d155      	bne.n	80096c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	015a      	lsls	r2, r3, #5
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	4413      	add	r3, r2
 800961c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	791b      	ldrb	r3, [r3, #4]
 800962e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009630:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	059b      	lsls	r3, r3, #22
 8009636:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009638:	4313      	orrs	r3, r2
 800963a:	68ba      	ldr	r2, [r7, #8]
 800963c:	0151      	lsls	r1, r2, #5
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	440a      	add	r2, r1
 8009642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800964a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800964e:	6013      	str	r3, [r2, #0]
 8009650:	e036      	b.n	80096c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009658:	69da      	ldr	r2, [r3, #28]
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	f003 030f 	and.w	r3, r3, #15
 8009662:	2101      	movs	r1, #1
 8009664:	fa01 f303 	lsl.w	r3, r1, r3
 8009668:	041b      	lsls	r3, r3, #16
 800966a:	68f9      	ldr	r1, [r7, #12]
 800966c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009670:	4313      	orrs	r3, r2
 8009672:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	015a      	lsls	r2, r3, #5
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	4413      	add	r3, r2
 800967c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d11a      	bne.n	80096c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	015a      	lsls	r2, r3, #5
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	4413      	add	r3, r2
 8009692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	791b      	ldrb	r3, [r3, #4]
 80096a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80096a6:	430b      	orrs	r3, r1
 80096a8:	4313      	orrs	r3, r2
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	0151      	lsls	r1, r2, #5
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	440a      	add	r2, r1
 80096b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3714      	adds	r7, #20
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
	...

080096d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	785b      	ldrb	r3, [r3, #1]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d161      	bne.n	80097b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009702:	d11f      	bne.n	8009744 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	015a      	lsls	r2, r3, #5
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	4413      	add	r3, r2
 800970c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	0151      	lsls	r1, r2, #5
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	440a      	add	r2, r1
 800971a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800971e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009722:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	4413      	add	r3, r2
 800972c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	0151      	lsls	r1, r2, #5
 8009736:	68fa      	ldr	r2, [r7, #12]
 8009738:	440a      	add	r2, r1
 800973a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800973e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009742:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800974a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	f003 030f 	and.w	r3, r3, #15
 8009754:	2101      	movs	r1, #1
 8009756:	fa01 f303 	lsl.w	r3, r1, r3
 800975a:	b29b      	uxth	r3, r3
 800975c:	43db      	mvns	r3, r3
 800975e:	68f9      	ldr	r1, [r7, #12]
 8009760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009764:	4013      	ands	r3, r2
 8009766:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800976e:	69da      	ldr	r2, [r3, #28]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	f003 030f 	and.w	r3, r3, #15
 8009778:	2101      	movs	r1, #1
 800977a:	fa01 f303 	lsl.w	r3, r1, r3
 800977e:	b29b      	uxth	r3, r3
 8009780:	43db      	mvns	r3, r3
 8009782:	68f9      	ldr	r1, [r7, #12]
 8009784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009788:	4013      	ands	r3, r2
 800978a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	015a      	lsls	r2, r3, #5
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	4413      	add	r3, r2
 8009794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	0159      	lsls	r1, r3, #5
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	440b      	add	r3, r1
 80097a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a6:	4619      	mov	r1, r3
 80097a8:	4b35      	ldr	r3, [pc, #212]	; (8009880 <USB_DeactivateEndpoint+0x1b0>)
 80097aa:	4013      	ands	r3, r2
 80097ac:	600b      	str	r3, [r1, #0]
 80097ae:	e060      	b.n	8009872 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097c6:	d11f      	bne.n	8009808 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	0151      	lsls	r1, r2, #5
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	440a      	add	r2, r1
 80097de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	015a      	lsls	r2, r3, #5
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4413      	add	r3, r2
 80097f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	0151      	lsls	r1, r2, #5
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	440a      	add	r2, r1
 80097fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009802:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009806:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800980e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	f003 030f 	and.w	r3, r3, #15
 8009818:	2101      	movs	r1, #1
 800981a:	fa01 f303 	lsl.w	r3, r1, r3
 800981e:	041b      	lsls	r3, r3, #16
 8009820:	43db      	mvns	r3, r3
 8009822:	68f9      	ldr	r1, [r7, #12]
 8009824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009828:	4013      	ands	r3, r2
 800982a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009832:	69da      	ldr	r2, [r3, #28]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	f003 030f 	and.w	r3, r3, #15
 800983c:	2101      	movs	r1, #1
 800983e:	fa01 f303 	lsl.w	r3, r1, r3
 8009842:	041b      	lsls	r3, r3, #16
 8009844:	43db      	mvns	r3, r3
 8009846:	68f9      	ldr	r1, [r7, #12]
 8009848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800984c:	4013      	ands	r3, r2
 800984e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	015a      	lsls	r2, r3, #5
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	4413      	add	r3, r2
 8009858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	0159      	lsls	r1, r3, #5
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	440b      	add	r3, r1
 8009866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800986a:	4619      	mov	r1, r3
 800986c:	4b05      	ldr	r3, [pc, #20]	; (8009884 <USB_DeactivateEndpoint+0x1b4>)
 800986e:	4013      	ands	r3, r2
 8009870:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr
 8009880:	ec337800 	.word	0xec337800
 8009884:	eff37800 	.word	0xeff37800

08009888 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b08a      	sub	sp, #40	; 0x28
 800988c:	af02      	add	r7, sp, #8
 800988e:	60f8      	str	r0, [r7, #12]
 8009890:	60b9      	str	r1, [r7, #8]
 8009892:	4613      	mov	r3, r2
 8009894:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	785b      	ldrb	r3, [r3, #1]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	f040 815c 	bne.w	8009b62 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80098aa:	68bb      	ldr	r3, [r7, #8]
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d132      	bne.n	8009918 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	015a      	lsls	r2, r3, #5
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	4413      	add	r3, r2
 80098ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	69ba      	ldr	r2, [r7, #24]
 80098c2:	0151      	lsls	r1, r2, #5
 80098c4:	69fa      	ldr	r2, [r7, #28]
 80098c6:	440a      	add	r2, r1
 80098c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80098d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80098d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	015a      	lsls	r2, r3, #5
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	4413      	add	r3, r2
 80098de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	0151      	lsls	r1, r2, #5
 80098e8:	69fa      	ldr	r2, [r7, #28]
 80098ea:	440a      	add	r2, r1
 80098ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	015a      	lsls	r2, r3, #5
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	4413      	add	r3, r2
 80098fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	69ba      	ldr	r2, [r7, #24]
 8009906:	0151      	lsls	r1, r2, #5
 8009908:	69fa      	ldr	r2, [r7, #28]
 800990a:	440a      	add	r2, r1
 800990c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009910:	0cdb      	lsrs	r3, r3, #19
 8009912:	04db      	lsls	r3, r3, #19
 8009914:	6113      	str	r3, [r2, #16]
 8009916:	e074      	b.n	8009a02 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	015a      	lsls	r2, r3, #5
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	4413      	add	r3, r2
 8009920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009924:	691b      	ldr	r3, [r3, #16]
 8009926:	69ba      	ldr	r2, [r7, #24]
 8009928:	0151      	lsls	r1, r2, #5
 800992a:	69fa      	ldr	r2, [r7, #28]
 800992c:	440a      	add	r2, r1
 800992e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009932:	0cdb      	lsrs	r3, r3, #19
 8009934:	04db      	lsls	r3, r3, #19
 8009936:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	015a      	lsls	r2, r3, #5
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	4413      	add	r3, r2
 8009940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	69ba      	ldr	r2, [r7, #24]
 8009948:	0151      	lsls	r1, r2, #5
 800994a:	69fa      	ldr	r2, [r7, #28]
 800994c:	440a      	add	r2, r1
 800994e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009952:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009956:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800995a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	015a      	lsls	r2, r3, #5
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	4413      	add	r3, r2
 8009964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009968:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	6999      	ldr	r1, [r3, #24]
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	440b      	add	r3, r1
 8009974:	1e59      	subs	r1, r3, #1
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	fbb1 f3f3 	udiv	r3, r1, r3
 800997e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009980:	4b9d      	ldr	r3, [pc, #628]	; (8009bf8 <USB_EPStartXfer+0x370>)
 8009982:	400b      	ands	r3, r1
 8009984:	69b9      	ldr	r1, [r7, #24]
 8009986:	0148      	lsls	r0, r1, #5
 8009988:	69f9      	ldr	r1, [r7, #28]
 800998a:	4401      	add	r1, r0
 800998c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009990:	4313      	orrs	r3, r2
 8009992:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a0:	691a      	ldr	r2, [r3, #16]
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	699b      	ldr	r3, [r3, #24]
 80099a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099aa:	69b9      	ldr	r1, [r7, #24]
 80099ac:	0148      	lsls	r0, r1, #5
 80099ae:	69f9      	ldr	r1, [r7, #28]
 80099b0:	4401      	add	r1, r0
 80099b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80099b6:	4313      	orrs	r3, r2
 80099b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	791b      	ldrb	r3, [r3, #4]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d11f      	bne.n	8009a02 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	015a      	lsls	r2, r3, #5
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	4413      	add	r3, r2
 80099ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ce:	691b      	ldr	r3, [r3, #16]
 80099d0:	69ba      	ldr	r2, [r7, #24]
 80099d2:	0151      	lsls	r1, r2, #5
 80099d4:	69fa      	ldr	r2, [r7, #28]
 80099d6:	440a      	add	r2, r1
 80099d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80099e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	015a      	lsls	r2, r3, #5
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	69ba      	ldr	r2, [r7, #24]
 80099f2:	0151      	lsls	r1, r2, #5
 80099f4:	69fa      	ldr	r2, [r7, #28]
 80099f6:	440a      	add	r2, r1
 80099f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a00:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009a02:	79fb      	ldrb	r3, [r7, #7]
 8009a04:	2b01      	cmp	r3, #1
 8009a06:	d14b      	bne.n	8009aa0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	695b      	ldr	r3, [r3, #20]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d009      	beq.n	8009a24 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	015a      	lsls	r2, r3, #5
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	4413      	add	r3, r2
 8009a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	695b      	ldr	r3, [r3, #20]
 8009a22:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	791b      	ldrb	r3, [r3, #4]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d128      	bne.n	8009a7e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d110      	bne.n	8009a5e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	015a      	lsls	r2, r3, #5
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	4413      	add	r3, r2
 8009a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	69ba      	ldr	r2, [r7, #24]
 8009a4c:	0151      	lsls	r1, r2, #5
 8009a4e:	69fa      	ldr	r2, [r7, #28]
 8009a50:	440a      	add	r2, r1
 8009a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	e00f      	b.n	8009a7e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	015a      	lsls	r2, r3, #5
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	4413      	add	r3, r2
 8009a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	69ba      	ldr	r2, [r7, #24]
 8009a6e:	0151      	lsls	r1, r2, #5
 8009a70:	69fa      	ldr	r2, [r7, #28]
 8009a72:	440a      	add	r2, r1
 8009a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a7c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	015a      	lsls	r2, r3, #5
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	4413      	add	r3, r2
 8009a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	69ba      	ldr	r2, [r7, #24]
 8009a8e:	0151      	lsls	r1, r2, #5
 8009a90:	69fa      	ldr	r2, [r7, #28]
 8009a92:	440a      	add	r2, r1
 8009a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a9c:	6013      	str	r3, [r2, #0]
 8009a9e:	e133      	b.n	8009d08 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	69ba      	ldr	r2, [r7, #24]
 8009ab0:	0151      	lsls	r1, r2, #5
 8009ab2:	69fa      	ldr	r2, [r7, #28]
 8009ab4:	440a      	add	r2, r1
 8009ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009abe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	791b      	ldrb	r3, [r3, #4]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d015      	beq.n	8009af4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f000 811b 	beq.w	8009d08 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	f003 030f 	and.w	r3, r3, #15
 8009ae2:	2101      	movs	r1, #1
 8009ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae8:	69f9      	ldr	r1, [r7, #28]
 8009aea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009aee:	4313      	orrs	r3, r2
 8009af0:	634b      	str	r3, [r1, #52]	; 0x34
 8009af2:	e109      	b.n	8009d08 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009afa:	689b      	ldr	r3, [r3, #8]
 8009afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d110      	bne.n	8009b26 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b04:	69bb      	ldr	r3, [r7, #24]
 8009b06:	015a      	lsls	r2, r3, #5
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	69ba      	ldr	r2, [r7, #24]
 8009b14:	0151      	lsls	r1, r2, #5
 8009b16:	69fa      	ldr	r2, [r7, #28]
 8009b18:	440a      	add	r2, r1
 8009b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b22:	6013      	str	r3, [r2, #0]
 8009b24:	e00f      	b.n	8009b46 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	015a      	lsls	r2, r3, #5
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	69ba      	ldr	r2, [r7, #24]
 8009b36:	0151      	lsls	r1, r2, #5
 8009b38:	69fa      	ldr	r2, [r7, #28]
 8009b3a:	440a      	add	r2, r1
 8009b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b44:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	6919      	ldr	r1, [r3, #16]
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	781a      	ldrb	r2, [r3, #0]
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	b298      	uxth	r0, r3
 8009b54:	79fb      	ldrb	r3, [r7, #7]
 8009b56:	9300      	str	r3, [sp, #0]
 8009b58:	4603      	mov	r3, r0
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f000 fade 	bl	800a11c <USB_WritePacket>
 8009b60:	e0d2      	b.n	8009d08 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	015a      	lsls	r2, r3, #5
 8009b66:	69fb      	ldr	r3, [r7, #28]
 8009b68:	4413      	add	r3, r2
 8009b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	69ba      	ldr	r2, [r7, #24]
 8009b72:	0151      	lsls	r1, r2, #5
 8009b74:	69fa      	ldr	r2, [r7, #28]
 8009b76:	440a      	add	r2, r1
 8009b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b7c:	0cdb      	lsrs	r3, r3, #19
 8009b7e:	04db      	lsls	r3, r3, #19
 8009b80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	015a      	lsls	r2, r3, #5
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	4413      	add	r3, r2
 8009b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b8e:	691b      	ldr	r3, [r3, #16]
 8009b90:	69ba      	ldr	r2, [r7, #24]
 8009b92:	0151      	lsls	r1, r2, #5
 8009b94:	69fa      	ldr	r2, [r7, #28]
 8009b96:	440a      	add	r2, r1
 8009b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b9c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ba0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ba4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	699b      	ldr	r3, [r3, #24]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d126      	bne.n	8009bfc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	015a      	lsls	r2, r3, #5
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bba:	691a      	ldr	r2, [r3, #16]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bc4:	69b9      	ldr	r1, [r7, #24]
 8009bc6:	0148      	lsls	r0, r1, #5
 8009bc8:	69f9      	ldr	r1, [r7, #28]
 8009bca:	4401      	add	r1, r0
 8009bcc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	015a      	lsls	r2, r3, #5
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	4413      	add	r3, r2
 8009bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	69ba      	ldr	r2, [r7, #24]
 8009be4:	0151      	lsls	r1, r2, #5
 8009be6:	69fa      	ldr	r2, [r7, #28]
 8009be8:	440a      	add	r2, r1
 8009bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009bf2:	6113      	str	r3, [r2, #16]
 8009bf4:	e03a      	b.n	8009c6c <USB_EPStartXfer+0x3e4>
 8009bf6:	bf00      	nop
 8009bf8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	699a      	ldr	r2, [r3, #24]
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	4413      	add	r3, r2
 8009c06:	1e5a      	subs	r2, r3, #1
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c10:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	68db      	ldr	r3, [r3, #12]
 8009c16:	8afa      	ldrh	r2, [r7, #22]
 8009c18:	fb03 f202 	mul.w	r2, r3, r2
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	015a      	lsls	r2, r3, #5
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c2c:	691a      	ldr	r2, [r3, #16]
 8009c2e:	8afb      	ldrh	r3, [r7, #22]
 8009c30:	04d9      	lsls	r1, r3, #19
 8009c32:	4b38      	ldr	r3, [pc, #224]	; (8009d14 <USB_EPStartXfer+0x48c>)
 8009c34:	400b      	ands	r3, r1
 8009c36:	69b9      	ldr	r1, [r7, #24]
 8009c38:	0148      	lsls	r0, r1, #5
 8009c3a:	69f9      	ldr	r1, [r7, #28]
 8009c3c:	4401      	add	r1, r0
 8009c3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c42:	4313      	orrs	r3, r2
 8009c44:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	015a      	lsls	r2, r3, #5
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c52:	691a      	ldr	r2, [r3, #16]
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	69db      	ldr	r3, [r3, #28]
 8009c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c5c:	69b9      	ldr	r1, [r7, #24]
 8009c5e:	0148      	lsls	r0, r1, #5
 8009c60:	69f9      	ldr	r1, [r7, #28]
 8009c62:	4401      	add	r1, r0
 8009c64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009c6c:	79fb      	ldrb	r3, [r7, #7]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d10d      	bne.n	8009c8e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d009      	beq.n	8009c8e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	6919      	ldr	r1, [r3, #16]
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	015a      	lsls	r2, r3, #5
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	4413      	add	r3, r2
 8009c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c8a:	460a      	mov	r2, r1
 8009c8c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	791b      	ldrb	r3, [r3, #4]
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d128      	bne.n	8009ce8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d110      	bne.n	8009cc8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	015a      	lsls	r2, r3, #5
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	4413      	add	r3, r2
 8009cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	69ba      	ldr	r2, [r7, #24]
 8009cb6:	0151      	lsls	r1, r2, #5
 8009cb8:	69fa      	ldr	r2, [r7, #28]
 8009cba:	440a      	add	r2, r1
 8009cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009cc4:	6013      	str	r3, [r2, #0]
 8009cc6:	e00f      	b.n	8009ce8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	015a      	lsls	r2, r3, #5
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	4413      	add	r3, r2
 8009cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	69ba      	ldr	r2, [r7, #24]
 8009cd8:	0151      	lsls	r1, r2, #5
 8009cda:	69fa      	ldr	r2, [r7, #28]
 8009cdc:	440a      	add	r2, r1
 8009cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ce6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009ce8:	69bb      	ldr	r3, [r7, #24]
 8009cea:	015a      	lsls	r2, r3, #5
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	69ba      	ldr	r2, [r7, #24]
 8009cf8:	0151      	lsls	r1, r2, #5
 8009cfa:	69fa      	ldr	r2, [r7, #28]
 8009cfc:	440a      	add	r2, r1
 8009cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d08:	2300      	movs	r3, #0
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	3720      	adds	r7, #32
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	1ff80000 	.word	0x1ff80000

08009d18 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	4613      	mov	r3, r2
 8009d24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	785b      	ldrb	r3, [r3, #1]
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	f040 80ce 	bne.w	8009ed6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	699b      	ldr	r3, [r3, #24]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d132      	bne.n	8009da8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	015a      	lsls	r2, r3, #5
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	4413      	add	r3, r2
 8009d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d4e:	691b      	ldr	r3, [r3, #16]
 8009d50:	693a      	ldr	r2, [r7, #16]
 8009d52:	0151      	lsls	r1, r2, #5
 8009d54:	697a      	ldr	r2, [r7, #20]
 8009d56:	440a      	add	r2, r1
 8009d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d5c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009d60:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009d64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	015a      	lsls	r2, r3, #5
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d72:	691b      	ldr	r3, [r3, #16]
 8009d74:	693a      	ldr	r2, [r7, #16]
 8009d76:	0151      	lsls	r1, r2, #5
 8009d78:	697a      	ldr	r2, [r7, #20]
 8009d7a:	440a      	add	r2, r1
 8009d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d80:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	015a      	lsls	r2, r3, #5
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d92:	691b      	ldr	r3, [r3, #16]
 8009d94:	693a      	ldr	r2, [r7, #16]
 8009d96:	0151      	lsls	r1, r2, #5
 8009d98:	697a      	ldr	r2, [r7, #20]
 8009d9a:	440a      	add	r2, r1
 8009d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009da0:	0cdb      	lsrs	r3, r3, #19
 8009da2:	04db      	lsls	r3, r3, #19
 8009da4:	6113      	str	r3, [r2, #16]
 8009da6:	e04e      	b.n	8009e46 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	0151      	lsls	r1, r2, #5
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	440a      	add	r2, r1
 8009dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dc2:	0cdb      	lsrs	r3, r3, #19
 8009dc4:	04db      	lsls	r3, r3, #19
 8009dc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	015a      	lsls	r2, r3, #5
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	4413      	add	r3, r2
 8009dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	693a      	ldr	r2, [r7, #16]
 8009dd8:	0151      	lsls	r1, r2, #5
 8009dda:	697a      	ldr	r2, [r7, #20]
 8009ddc:	440a      	add	r2, r1
 8009dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009de2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009de6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009dea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	699a      	ldr	r2, [r3, #24]
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d903      	bls.n	8009e00 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	68da      	ldr	r2, [r3, #12]
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	015a      	lsls	r2, r3, #5
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	4413      	add	r3, r2
 8009e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e0c:	691b      	ldr	r3, [r3, #16]
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	0151      	lsls	r1, r2, #5
 8009e12:	697a      	ldr	r2, [r7, #20]
 8009e14:	440a      	add	r2, r1
 8009e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e1e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e2c:	691a      	ldr	r2, [r3, #16]
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e36:	6939      	ldr	r1, [r7, #16]
 8009e38:	0148      	lsls	r0, r1, #5
 8009e3a:	6979      	ldr	r1, [r7, #20]
 8009e3c:	4401      	add	r1, r0
 8009e3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009e42:	4313      	orrs	r3, r2
 8009e44:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009e46:	79fb      	ldrb	r3, [r7, #7]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d11e      	bne.n	8009e8a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	695b      	ldr	r3, [r3, #20]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d009      	beq.n	8009e68 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e60:	461a      	mov	r2, r3
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	015a      	lsls	r2, r3, #5
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	693a      	ldr	r2, [r7, #16]
 8009e78:	0151      	lsls	r1, r2, #5
 8009e7a:	697a      	ldr	r2, [r7, #20]
 8009e7c:	440a      	add	r2, r1
 8009e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009e86:	6013      	str	r3, [r2, #0]
 8009e88:	e097      	b.n	8009fba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	015a      	lsls	r2, r3, #5
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	4413      	add	r3, r2
 8009e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	0151      	lsls	r1, r2, #5
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	440a      	add	r2, r1
 8009ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ea4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ea8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f000 8083 	beq.w	8009fba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	f003 030f 	and.w	r3, r3, #15
 8009ec4:	2101      	movs	r1, #1
 8009ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8009eca:	6979      	ldr	r1, [r7, #20]
 8009ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	634b      	str	r3, [r1, #52]	; 0x34
 8009ed4:	e071      	b.n	8009fba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	015a      	lsls	r2, r3, #5
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	4413      	add	r3, r2
 8009ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	0151      	lsls	r1, r2, #5
 8009ee8:	697a      	ldr	r2, [r7, #20]
 8009eea:	440a      	add	r2, r1
 8009eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ef0:	0cdb      	lsrs	r3, r3, #19
 8009ef2:	04db      	lsls	r3, r3, #19
 8009ef4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009ef6:	693b      	ldr	r3, [r7, #16]
 8009ef8:	015a      	lsls	r2, r3, #5
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	4413      	add	r3, r2
 8009efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	693a      	ldr	r2, [r7, #16]
 8009f06:	0151      	lsls	r1, r2, #5
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	440a      	add	r2, r1
 8009f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f18:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d003      	beq.n	8009f2a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	68da      	ldr	r2, [r3, #12]
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	68da      	ldr	r2, [r3, #12]
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	015a      	lsls	r2, r3, #5
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	4413      	add	r3, r2
 8009f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	0151      	lsls	r1, r2, #5
 8009f44:	697a      	ldr	r2, [r7, #20]
 8009f46:	440a      	add	r2, r1
 8009f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	015a      	lsls	r2, r3, #5
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	4413      	add	r3, r2
 8009f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f5e:	691a      	ldr	r2, [r3, #16]
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	69db      	ldr	r3, [r3, #28]
 8009f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f68:	6939      	ldr	r1, [r7, #16]
 8009f6a:	0148      	lsls	r0, r1, #5
 8009f6c:	6979      	ldr	r1, [r7, #20]
 8009f6e:	4401      	add	r1, r0
 8009f70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009f74:	4313      	orrs	r3, r2
 8009f76:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009f78:	79fb      	ldrb	r3, [r7, #7]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d10d      	bne.n	8009f9a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d009      	beq.n	8009f9a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	6919      	ldr	r1, [r3, #16]
 8009f8a:	693b      	ldr	r3, [r7, #16]
 8009f8c:	015a      	lsls	r2, r3, #5
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	4413      	add	r3, r2
 8009f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f96:	460a      	mov	r2, r1
 8009f98:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	015a      	lsls	r2, r3, #5
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	693a      	ldr	r2, [r7, #16]
 8009faa:	0151      	lsls	r1, r2, #5
 8009fac:	697a      	ldr	r2, [r7, #20]
 8009fae:	440a      	add	r2, r1
 8009fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009fb8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	371c      	adds	r7, #28
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b087      	sub	sp, #28
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	785b      	ldrb	r3, [r3, #1]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d14a      	bne.n	800a07c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	015a      	lsls	r2, r3, #5
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ffe:	f040 8086 	bne.w	800a10e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	015a      	lsls	r2, r3, #5
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	4413      	add	r3, r2
 800a00c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	7812      	ldrb	r2, [r2, #0]
 800a016:	0151      	lsls	r1, r2, #5
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	440a      	add	r2, r1
 800a01c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a020:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a024:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	015a      	lsls	r2, r3, #5
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	4413      	add	r3, r2
 800a030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	7812      	ldrb	r2, [r2, #0]
 800a03a:	0151      	lsls	r1, r2, #5
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	440a      	add	r2, r1
 800a040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a044:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a048:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	3301      	adds	r3, #1
 800a04e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f242 7210 	movw	r2, #10000	; 0x2710
 800a056:	4293      	cmp	r3, r2
 800a058:	d902      	bls.n	800a060 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	75fb      	strb	r3, [r7, #23]
          break;
 800a05e:	e056      	b.n	800a10e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	015a      	lsls	r2, r3, #5
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	4413      	add	r3, r2
 800a06a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a078:	d0e7      	beq.n	800a04a <USB_EPStopXfer+0x82>
 800a07a:	e048      	b.n	800a10e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	015a      	lsls	r2, r3, #5
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	4413      	add	r3, r2
 800a086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a094:	d13b      	bne.n	800a10e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	015a      	lsls	r2, r3, #5
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	683a      	ldr	r2, [r7, #0]
 800a0a8:	7812      	ldrb	r2, [r2, #0]
 800a0aa:	0151      	lsls	r1, r2, #5
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	440a      	add	r2, r1
 800a0b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	015a      	lsls	r2, r3, #5
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	683a      	ldr	r2, [r7, #0]
 800a0cc:	7812      	ldrb	r2, [r2, #0]
 800a0ce:	0151      	lsls	r1, r2, #5
 800a0d0:	693a      	ldr	r2, [r7, #16]
 800a0d2:	440a      	add	r2, r1
 800a0d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f242 7210 	movw	r2, #10000	; 0x2710
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d902      	bls.n	800a0f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	75fb      	strb	r3, [r7, #23]
          break;
 800a0f2:	e00c      	b.n	800a10e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	015a      	lsls	r2, r3, #5
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a108:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a10c:	d0e7      	beq.n	800a0de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a10e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a110:	4618      	mov	r0, r3
 800a112:	371c      	adds	r7, #28
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b089      	sub	sp, #36	; 0x24
 800a120:	af00      	add	r7, sp, #0
 800a122:	60f8      	str	r0, [r7, #12]
 800a124:	60b9      	str	r1, [r7, #8]
 800a126:	4611      	mov	r1, r2
 800a128:	461a      	mov	r2, r3
 800a12a:	460b      	mov	r3, r1
 800a12c:	71fb      	strb	r3, [r7, #7]
 800a12e:	4613      	mov	r3, r2
 800a130:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a13a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d123      	bne.n	800a18a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a142:	88bb      	ldrh	r3, [r7, #4]
 800a144:	3303      	adds	r3, #3
 800a146:	089b      	lsrs	r3, r3, #2
 800a148:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a14a:	2300      	movs	r3, #0
 800a14c:	61bb      	str	r3, [r7, #24]
 800a14e:	e018      	b.n	800a182 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a150:	79fb      	ldrb	r3, [r7, #7]
 800a152:	031a      	lsls	r2, r3, #12
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	4413      	add	r3, r2
 800a158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a15c:	461a      	mov	r2, r3
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	3301      	adds	r3, #1
 800a168:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	3301      	adds	r3, #1
 800a16e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	3301      	adds	r3, #1
 800a174:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	3301      	adds	r3, #1
 800a17a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	3301      	adds	r3, #1
 800a180:	61bb      	str	r3, [r7, #24]
 800a182:	69ba      	ldr	r2, [r7, #24]
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	429a      	cmp	r2, r3
 800a188:	d3e2      	bcc.n	800a150 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3724      	adds	r7, #36	; 0x24
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a198:	b480      	push	{r7}
 800a19a:	b08b      	sub	sp, #44	; 0x2c
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a1ae:	88fb      	ldrh	r3, [r7, #6]
 800a1b0:	089b      	lsrs	r3, r3, #2
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a1b6:	88fb      	ldrh	r3, [r7, #6]
 800a1b8:	f003 0303 	and.w	r3, r3, #3
 800a1bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a1be:	2300      	movs	r3, #0
 800a1c0:	623b      	str	r3, [r7, #32]
 800a1c2:	e014      	b.n	800a1ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ce:	601a      	str	r2, [r3, #0]
    pDest++;
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d8:	3301      	adds	r3, #1
 800a1da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	3301      	adds	r3, #1
 800a1e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	623b      	str	r3, [r7, #32]
 800a1ee:	6a3a      	ldr	r2, [r7, #32]
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d3e6      	bcc.n	800a1c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a1f6:	8bfb      	ldrh	r3, [r7, #30]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d01e      	beq.n	800a23a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a206:	461a      	mov	r2, r3
 800a208:	f107 0310 	add.w	r3, r7, #16
 800a20c:	6812      	ldr	r2, [r2, #0]
 800a20e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a210:	693a      	ldr	r2, [r7, #16]
 800a212:	6a3b      	ldr	r3, [r7, #32]
 800a214:	b2db      	uxtb	r3, r3
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	fa22 f303 	lsr.w	r3, r2, r3
 800a21c:	b2da      	uxtb	r2, r3
 800a21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a220:	701a      	strb	r2, [r3, #0]
      i++;
 800a222:	6a3b      	ldr	r3, [r7, #32]
 800a224:	3301      	adds	r3, #1
 800a226:	623b      	str	r3, [r7, #32]
      pDest++;
 800a228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22a:	3301      	adds	r3, #1
 800a22c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a22e:	8bfb      	ldrh	r3, [r7, #30]
 800a230:	3b01      	subs	r3, #1
 800a232:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a234:	8bfb      	ldrh	r3, [r7, #30]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d1ea      	bne.n	800a210 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	372c      	adds	r7, #44	; 0x2c
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	785b      	ldrb	r3, [r3, #1]
 800a260:	2b01      	cmp	r3, #1
 800a262:	d12c      	bne.n	800a2be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	015a      	lsls	r2, r3, #5
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	4413      	add	r3, r2
 800a26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	db12      	blt.n	800a29c <USB_EPSetStall+0x54>
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00f      	beq.n	800a29c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	015a      	lsls	r2, r3, #5
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	4413      	add	r3, r2
 800a284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	0151      	lsls	r1, r2, #5
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	440a      	add	r2, r1
 800a292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a296:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a29a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	015a      	lsls	r2, r3, #5
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	0151      	lsls	r1, r2, #5
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	440a      	add	r2, r1
 800a2b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a2ba:	6013      	str	r3, [r2, #0]
 800a2bc:	e02b      	b.n	800a316 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	015a      	lsls	r2, r3, #5
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	db12      	blt.n	800a2f6 <USB_EPSetStall+0xae>
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00f      	beq.n	800a2f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	0151      	lsls	r1, r2, #5
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	440a      	add	r2, r1
 800a2ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a2f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	015a      	lsls	r2, r3, #5
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	0151      	lsls	r1, r2, #5
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	440a      	add	r2, r1
 800a30c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a310:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a314:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3714      	adds	r7, #20
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	785b      	ldrb	r3, [r3, #1]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d128      	bne.n	800a392 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	015a      	lsls	r2, r3, #5
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	4413      	add	r3, r2
 800a348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68ba      	ldr	r2, [r7, #8]
 800a350:	0151      	lsls	r1, r2, #5
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	440a      	add	r2, r1
 800a356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a35a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a35e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	791b      	ldrb	r3, [r3, #4]
 800a364:	2b03      	cmp	r3, #3
 800a366:	d003      	beq.n	800a370 <USB_EPClearStall+0x4c>
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	791b      	ldrb	r3, [r3, #4]
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d138      	bne.n	800a3e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	015a      	lsls	r2, r3, #5
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	4413      	add	r3, r2
 800a378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	0151      	lsls	r1, r2, #5
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	440a      	add	r2, r1
 800a386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a38a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a38e:	6013      	str	r3, [r2, #0]
 800a390:	e027      	b.n	800a3e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	015a      	lsls	r2, r3, #5
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	4413      	add	r3, r2
 800a39a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68ba      	ldr	r2, [r7, #8]
 800a3a2:	0151      	lsls	r1, r2, #5
 800a3a4:	68fa      	ldr	r2, [r7, #12]
 800a3a6:	440a      	add	r2, r1
 800a3a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a3b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	791b      	ldrb	r3, [r3, #4]
 800a3b6:	2b03      	cmp	r3, #3
 800a3b8:	d003      	beq.n	800a3c2 <USB_EPClearStall+0x9e>
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	791b      	ldrb	r3, [r3, #4]
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d10f      	bne.n	800a3e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	015a      	lsls	r2, r3, #5
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	0151      	lsls	r1, r2, #5
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	440a      	add	r2, r1
 800a3d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3714      	adds	r7, #20
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a40e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a412:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	78fb      	ldrb	r3, [r7, #3]
 800a41e:	011b      	lsls	r3, r3, #4
 800a420:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a424:	68f9      	ldr	r1, [r7, #12]
 800a426:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a42a:	4313      	orrs	r3, r2
 800a42c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a456:	f023 0303 	bic.w	r3, r3, #3
 800a45a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a46a:	f023 0302 	bic.w	r3, r3, #2
 800a46e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3714      	adds	r7, #20
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a47e:	b480      	push	{r7}
 800a480:	b085      	sub	sp, #20
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a498:	f023 0303 	bic.w	r3, r3, #3
 800a49c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4ac:	f043 0302 	orr.w	r3, r3, #2
 800a4b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	695b      	ldr	r3, [r3, #20]
 800a4cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	699b      	ldr	r3, [r3, #24]
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3714      	adds	r7, #20
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b085      	sub	sp, #20
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4f8:	699b      	ldr	r3, [r3, #24]
 800a4fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a502:	69db      	ldr	r3, [r3, #28]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	4013      	ands	r3, r2
 800a508:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	0c1b      	lsrs	r3, r3, #16
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a51a:	b480      	push	{r7}
 800a51c:	b085      	sub	sp, #20
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a52c:	699b      	ldr	r3, [r3, #24]
 800a52e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a536:	69db      	ldr	r3, [r3, #28]
 800a538:	68ba      	ldr	r2, [r7, #8]
 800a53a:	4013      	ands	r3, r2
 800a53c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	b29b      	uxth	r3, r3
}
 800a542:	4618      	mov	r0, r3
 800a544:	3714      	adds	r7, #20
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a54e:	b480      	push	{r7}
 800a550:	b085      	sub	sp, #20
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	460b      	mov	r3, r1
 800a558:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a55e:	78fb      	ldrb	r3, [r7, #3]
 800a560:	015a      	lsls	r2, r3, #5
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	4413      	add	r3, r2
 800a566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a574:	695b      	ldr	r3, [r3, #20]
 800a576:	68ba      	ldr	r2, [r7, #8]
 800a578:	4013      	ands	r3, r2
 800a57a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a57c:	68bb      	ldr	r3, [r7, #8]
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3714      	adds	r7, #20
 800a582:	46bd      	mov	sp, r7
 800a584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a58a:	b480      	push	{r7}
 800a58c:	b087      	sub	sp, #28
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
 800a592:	460b      	mov	r3, r1
 800a594:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a5ae:	78fb      	ldrb	r3, [r7, #3]
 800a5b0:	f003 030f 	and.w	r3, r3, #15
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ba:	01db      	lsls	r3, r3, #7
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	693a      	ldr	r2, [r7, #16]
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a5c4:	78fb      	ldrb	r3, [r7, #3]
 800a5c6:	015a      	lsls	r2, r3, #5
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	693a      	ldr	r2, [r7, #16]
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a5d8:	68bb      	ldr	r3, [r7, #8]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	371c      	adds	r7, #28
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e4:	4770      	bx	lr

0800a5e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a5e6:	b480      	push	{r7}
 800a5e8:	b083      	sub	sp, #12
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	695b      	ldr	r3, [r3, #20]
 800a5f2:	f003 0301 	and.w	r3, r3, #1
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	370c      	adds	r7, #12
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr

0800a602 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a602:	b480      	push	{r7}
 800a604:	b085      	sub	sp, #20
 800a606:	af00      	add	r7, sp, #0
 800a608:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a61c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a620:	f023 0307 	bic.w	r3, r3, #7
 800a624:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a638:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3714      	adds	r7, #20
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a648:	b480      	push	{r7}
 800a64a:	b087      	sub	sp, #28
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	460b      	mov	r3, r1
 800a652:	607a      	str	r2, [r7, #4]
 800a654:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	333c      	adds	r3, #60	; 0x3c
 800a65e:	3304      	adds	r3, #4
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	4a26      	ldr	r2, [pc, #152]	; (800a700 <USB_EP0_OutStart+0xb8>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d90a      	bls.n	800a682 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a678:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a67c:	d101      	bne.n	800a682 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	e037      	b.n	800a6f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a688:	461a      	mov	r2, r3
 800a68a:	2300      	movs	r3, #0
 800a68c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	697a      	ldr	r2, [r7, #20]
 800a698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a69c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6b0:	f043 0318 	orr.w	r3, r3, #24
 800a6b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a6c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a6ca:	7afb      	ldrb	r3, [r7, #11]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d10f      	bne.n	800a6f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	697a      	ldr	r2, [r7, #20]
 800a6e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a6ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	371c      	adds	r7, #28
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	4f54300a 	.word	0x4f54300a

0800a704 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a70c:	2300      	movs	r3, #0
 800a70e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	3301      	adds	r3, #1
 800a714:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	4a13      	ldr	r2, [pc, #76]	; (800a768 <USB_CoreReset+0x64>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d901      	bls.n	800a722 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a71e:	2303      	movs	r3, #3
 800a720:	e01b      	b.n	800a75a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	691b      	ldr	r3, [r3, #16]
 800a726:	2b00      	cmp	r3, #0
 800a728:	daf2      	bge.n	800a710 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a72a:	2300      	movs	r3, #0
 800a72c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	f043 0201 	orr.w	r2, r3, #1
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	3301      	adds	r3, #1
 800a73e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	4a09      	ldr	r2, [pc, #36]	; (800a768 <USB_CoreReset+0x64>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d901      	bls.n	800a74c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a748:	2303      	movs	r3, #3
 800a74a:	e006      	b.n	800a75a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	2b01      	cmp	r3, #1
 800a756:	d0f0      	beq.n	800a73a <USB_CoreReset+0x36>

  return HAL_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3714      	adds	r7, #20
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	00030d40 	.word	0x00030d40

0800a76c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b084      	sub	sp, #16
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	460b      	mov	r3, r1
 800a776:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a778:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a77c:	f005 fa0e 	bl	800fb9c <USBD_static_malloc>
 800a780:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d109      	bne.n	800a79c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	32b0      	adds	r2, #176	; 0xb0
 800a792:	2100      	movs	r1, #0
 800a794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a798:	2302      	movs	r3, #2
 800a79a:	e0d4      	b.n	800a946 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a79c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f00f fa60 	bl	8019c68 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	32b0      	adds	r2, #176	; 0xb0
 800a7b2:	68f9      	ldr	r1, [r7, #12]
 800a7b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	32b0      	adds	r2, #176	; 0xb0
 800a7c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	7c1b      	ldrb	r3, [r3, #16]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d138      	bne.n	800a846 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a7d4:	4b5e      	ldr	r3, [pc, #376]	; (800a950 <USBD_CDC_Init+0x1e4>)
 800a7d6:	7819      	ldrb	r1, [r3, #0]
 800a7d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7dc:	2202      	movs	r2, #2
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f005 f8b9 	bl	800f956 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a7e4:	4b5a      	ldr	r3, [pc, #360]	; (800a950 <USBD_CDC_Init+0x1e4>)
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	f003 020f 	and.w	r2, r3, #15
 800a7ec:	6879      	ldr	r1, [r7, #4]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	440b      	add	r3, r1
 800a7f8:	3324      	adds	r3, #36	; 0x24
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a7fe:	4b55      	ldr	r3, [pc, #340]	; (800a954 <USBD_CDC_Init+0x1e8>)
 800a800:	7819      	ldrb	r1, [r3, #0]
 800a802:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a806:	2202      	movs	r2, #2
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f005 f8a4 	bl	800f956 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a80e:	4b51      	ldr	r3, [pc, #324]	; (800a954 <USBD_CDC_Init+0x1e8>)
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	f003 020f 	and.w	r2, r3, #15
 800a816:	6879      	ldr	r1, [r7, #4]
 800a818:	4613      	mov	r3, r2
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	4413      	add	r3, r2
 800a81e:	009b      	lsls	r3, r3, #2
 800a820:	440b      	add	r3, r1
 800a822:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a826:	2201      	movs	r2, #1
 800a828:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a82a:	4b4b      	ldr	r3, [pc, #300]	; (800a958 <USBD_CDC_Init+0x1ec>)
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	f003 020f 	and.w	r2, r3, #15
 800a832:	6879      	ldr	r1, [r7, #4]
 800a834:	4613      	mov	r3, r2
 800a836:	009b      	lsls	r3, r3, #2
 800a838:	4413      	add	r3, r2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	440b      	add	r3, r1
 800a83e:	3326      	adds	r3, #38	; 0x26
 800a840:	2210      	movs	r2, #16
 800a842:	801a      	strh	r2, [r3, #0]
 800a844:	e035      	b.n	800a8b2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a846:	4b42      	ldr	r3, [pc, #264]	; (800a950 <USBD_CDC_Init+0x1e4>)
 800a848:	7819      	ldrb	r1, [r3, #0]
 800a84a:	2340      	movs	r3, #64	; 0x40
 800a84c:	2202      	movs	r2, #2
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f005 f881 	bl	800f956 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a854:	4b3e      	ldr	r3, [pc, #248]	; (800a950 <USBD_CDC_Init+0x1e4>)
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	f003 020f 	and.w	r2, r3, #15
 800a85c:	6879      	ldr	r1, [r7, #4]
 800a85e:	4613      	mov	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	4413      	add	r3, r2
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	440b      	add	r3, r1
 800a868:	3324      	adds	r3, #36	; 0x24
 800a86a:	2201      	movs	r2, #1
 800a86c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a86e:	4b39      	ldr	r3, [pc, #228]	; (800a954 <USBD_CDC_Init+0x1e8>)
 800a870:	7819      	ldrb	r1, [r3, #0]
 800a872:	2340      	movs	r3, #64	; 0x40
 800a874:	2202      	movs	r2, #2
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f005 f86d 	bl	800f956 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a87c:	4b35      	ldr	r3, [pc, #212]	; (800a954 <USBD_CDC_Init+0x1e8>)
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	f003 020f 	and.w	r2, r3, #15
 800a884:	6879      	ldr	r1, [r7, #4]
 800a886:	4613      	mov	r3, r2
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	4413      	add	r3, r2
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	440b      	add	r3, r1
 800a890:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a894:	2201      	movs	r2, #1
 800a896:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a898:	4b2f      	ldr	r3, [pc, #188]	; (800a958 <USBD_CDC_Init+0x1ec>)
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	f003 020f 	and.w	r2, r3, #15
 800a8a0:	6879      	ldr	r1, [r7, #4]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	4413      	add	r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	440b      	add	r3, r1
 800a8ac:	3326      	adds	r3, #38	; 0x26
 800a8ae:	2210      	movs	r2, #16
 800a8b0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a8b2:	4b29      	ldr	r3, [pc, #164]	; (800a958 <USBD_CDC_Init+0x1ec>)
 800a8b4:	7819      	ldrb	r1, [r3, #0]
 800a8b6:	2308      	movs	r3, #8
 800a8b8:	2203      	movs	r2, #3
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f005 f84b 	bl	800f956 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a8c0:	4b25      	ldr	r3, [pc, #148]	; (800a958 <USBD_CDC_Init+0x1ec>)
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	f003 020f 	and.w	r2, r3, #15
 800a8c8:	6879      	ldr	r1, [r7, #4]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	4413      	add	r3, r2
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	440b      	add	r3, r1
 800a8d4:	3324      	adds	r3, #36	; 0x24
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	33b0      	adds	r3, #176	; 0xb0
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	4413      	add	r3, r2
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d101      	bne.n	800a914 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a910:	2302      	movs	r3, #2
 800a912:	e018      	b.n	800a946 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	7c1b      	ldrb	r3, [r3, #16]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10a      	bne.n	800a932 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a91c:	4b0d      	ldr	r3, [pc, #52]	; (800a954 <USBD_CDC_Init+0x1e8>)
 800a91e:	7819      	ldrb	r1, [r3, #0]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a926:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f005 f902 	bl	800fb34 <USBD_LL_PrepareReceive>
 800a930:	e008      	b.n	800a944 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a932:	4b08      	ldr	r3, [pc, #32]	; (800a954 <USBD_CDC_Init+0x1e8>)
 800a934:	7819      	ldrb	r1, [r3, #0]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a93c:	2340      	movs	r3, #64	; 0x40
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f005 f8f8 	bl	800fb34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	20000097 	.word	0x20000097
 800a954:	20000098 	.word	0x20000098
 800a958:	20000099 	.word	0x20000099

0800a95c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	460b      	mov	r3, r1
 800a966:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a968:	4b3a      	ldr	r3, [pc, #232]	; (800aa54 <USBD_CDC_DeInit+0xf8>)
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	4619      	mov	r1, r3
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f005 f817 	bl	800f9a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a974:	4b37      	ldr	r3, [pc, #220]	; (800aa54 <USBD_CDC_DeInit+0xf8>)
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	f003 020f 	and.w	r2, r3, #15
 800a97c:	6879      	ldr	r1, [r7, #4]
 800a97e:	4613      	mov	r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	4413      	add	r3, r2
 800a984:	009b      	lsls	r3, r3, #2
 800a986:	440b      	add	r3, r1
 800a988:	3324      	adds	r3, #36	; 0x24
 800a98a:	2200      	movs	r2, #0
 800a98c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a98e:	4b32      	ldr	r3, [pc, #200]	; (800aa58 <USBD_CDC_DeInit+0xfc>)
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	4619      	mov	r1, r3
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f005 f804 	bl	800f9a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a99a:	4b2f      	ldr	r3, [pc, #188]	; (800aa58 <USBD_CDC_DeInit+0xfc>)
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	f003 020f 	and.w	r2, r3, #15
 800a9a2:	6879      	ldr	r1, [r7, #4]
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	4413      	add	r3, r2
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	440b      	add	r3, r1
 800a9ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a9b6:	4b29      	ldr	r3, [pc, #164]	; (800aa5c <USBD_CDC_DeInit+0x100>)
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f004 fff0 	bl	800f9a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a9c2:	4b26      	ldr	r3, [pc, #152]	; (800aa5c <USBD_CDC_DeInit+0x100>)
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	f003 020f 	and.w	r2, r3, #15
 800a9ca:	6879      	ldr	r1, [r7, #4]
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4413      	add	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	440b      	add	r3, r1
 800a9d6:	3324      	adds	r3, #36	; 0x24
 800a9d8:	2200      	movs	r2, #0
 800a9da:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a9dc:	4b1f      	ldr	r3, [pc, #124]	; (800aa5c <USBD_CDC_DeInit+0x100>)
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	f003 020f 	and.w	r2, r3, #15
 800a9e4:	6879      	ldr	r1, [r7, #4]
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	440b      	add	r3, r1
 800a9f0:	3326      	adds	r3, #38	; 0x26
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	32b0      	adds	r2, #176	; 0xb0
 800aa00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d01f      	beq.n	800aa48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	33b0      	adds	r3, #176	; 0xb0
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	4413      	add	r3, r2
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	32b0      	adds	r2, #176	; 0xb0
 800aa26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f005 f8c4 	bl	800fbb8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	32b0      	adds	r2, #176	; 0xb0
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	20000097 	.word	0x20000097
 800aa58:	20000098 	.word	0x20000098
 800aa5c:	20000099 	.word	0x20000099

0800aa60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b086      	sub	sp, #24
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	32b0      	adds	r2, #176	; 0xb0
 800aa74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa82:	2300      	movs	r3, #0
 800aa84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d101      	bne.n	800aa90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aa8c:	2303      	movs	r3, #3
 800aa8e:	e0bf      	b.n	800ac10 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d050      	beq.n	800ab3e <USBD_CDC_Setup+0xde>
 800aa9c:	2b20      	cmp	r3, #32
 800aa9e:	f040 80af 	bne.w	800ac00 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	88db      	ldrh	r3, [r3, #6]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d03a      	beq.n	800ab20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	b25b      	sxtb	r3, r3
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	da1b      	bge.n	800aaec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	33b0      	adds	r3, #176	; 0xb0
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	4413      	add	r3, r2
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	689b      	ldr	r3, [r3, #8]
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aaca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	88d2      	ldrh	r2, [r2, #6]
 800aad0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	88db      	ldrh	r3, [r3, #6]
 800aad6:	2b07      	cmp	r3, #7
 800aad8:	bf28      	it	cs
 800aada:	2307      	movcs	r3, #7
 800aadc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	89fa      	ldrh	r2, [r7, #14]
 800aae2:	4619      	mov	r1, r3
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f001 fd43 	bl	800c570 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aaea:	e090      	b.n	800ac0e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	785a      	ldrb	r2, [r3, #1]
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	88db      	ldrh	r3, [r3, #6]
 800aafa:	2b3f      	cmp	r3, #63	; 0x3f
 800aafc:	d803      	bhi.n	800ab06 <USBD_CDC_Setup+0xa6>
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	88db      	ldrh	r3, [r3, #6]
 800ab02:	b2da      	uxtb	r2, r3
 800ab04:	e000      	b.n	800ab08 <USBD_CDC_Setup+0xa8>
 800ab06:	2240      	movs	r2, #64	; 0x40
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ab0e:	6939      	ldr	r1, [r7, #16]
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ab16:	461a      	mov	r2, r3
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f001 fd55 	bl	800c5c8 <USBD_CtlPrepareRx>
      break;
 800ab1e:	e076      	b.n	800ac0e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	33b0      	adds	r3, #176	; 0xb0
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	4413      	add	r3, r2
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	683a      	ldr	r2, [r7, #0]
 800ab34:	7850      	ldrb	r0, [r2, #1]
 800ab36:	2200      	movs	r2, #0
 800ab38:	6839      	ldr	r1, [r7, #0]
 800ab3a:	4798      	blx	r3
      break;
 800ab3c:	e067      	b.n	800ac0e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	785b      	ldrb	r3, [r3, #1]
 800ab42:	2b0b      	cmp	r3, #11
 800ab44:	d851      	bhi.n	800abea <USBD_CDC_Setup+0x18a>
 800ab46:	a201      	add	r2, pc, #4	; (adr r2, 800ab4c <USBD_CDC_Setup+0xec>)
 800ab48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab4c:	0800ab7d 	.word	0x0800ab7d
 800ab50:	0800abf9 	.word	0x0800abf9
 800ab54:	0800abeb 	.word	0x0800abeb
 800ab58:	0800abeb 	.word	0x0800abeb
 800ab5c:	0800abeb 	.word	0x0800abeb
 800ab60:	0800abeb 	.word	0x0800abeb
 800ab64:	0800abeb 	.word	0x0800abeb
 800ab68:	0800abeb 	.word	0x0800abeb
 800ab6c:	0800abeb 	.word	0x0800abeb
 800ab70:	0800abeb 	.word	0x0800abeb
 800ab74:	0800aba7 	.word	0x0800aba7
 800ab78:	0800abd1 	.word	0x0800abd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	2b03      	cmp	r3, #3
 800ab86:	d107      	bne.n	800ab98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ab88:	f107 030a 	add.w	r3, r7, #10
 800ab8c:	2202      	movs	r2, #2
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f001 fced 	bl	800c570 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ab96:	e032      	b.n	800abfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ab98:	6839      	ldr	r1, [r7, #0]
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f001 fc77 	bl	800c48e <USBD_CtlError>
            ret = USBD_FAIL;
 800aba0:	2303      	movs	r3, #3
 800aba2:	75fb      	strb	r3, [r7, #23]
          break;
 800aba4:	e02b      	b.n	800abfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b03      	cmp	r3, #3
 800abb0:	d107      	bne.n	800abc2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800abb2:	f107 030d 	add.w	r3, r7, #13
 800abb6:	2201      	movs	r2, #1
 800abb8:	4619      	mov	r1, r3
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f001 fcd8 	bl	800c570 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800abc0:	e01d      	b.n	800abfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f001 fc62 	bl	800c48e <USBD_CtlError>
            ret = USBD_FAIL;
 800abca:	2303      	movs	r3, #3
 800abcc:	75fb      	strb	r3, [r7, #23]
          break;
 800abce:	e016      	b.n	800abfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	2b03      	cmp	r3, #3
 800abda:	d00f      	beq.n	800abfc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800abdc:	6839      	ldr	r1, [r7, #0]
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f001 fc55 	bl	800c48e <USBD_CtlError>
            ret = USBD_FAIL;
 800abe4:	2303      	movs	r3, #3
 800abe6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800abe8:	e008      	b.n	800abfc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f001 fc4e 	bl	800c48e <USBD_CtlError>
          ret = USBD_FAIL;
 800abf2:	2303      	movs	r3, #3
 800abf4:	75fb      	strb	r3, [r7, #23]
          break;
 800abf6:	e002      	b.n	800abfe <USBD_CDC_Setup+0x19e>
          break;
 800abf8:	bf00      	nop
 800abfa:	e008      	b.n	800ac0e <USBD_CDC_Setup+0x1ae>
          break;
 800abfc:	bf00      	nop
      }
      break;
 800abfe:	e006      	b.n	800ac0e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ac00:	6839      	ldr	r1, [r7, #0]
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f001 fc43 	bl	800c48e <USBD_CtlError>
      ret = USBD_FAIL;
 800ac08:	2303      	movs	r3, #3
 800ac0a:	75fb      	strb	r3, [r7, #23]
      break;
 800ac0c:	bf00      	nop
  }

  return (uint8_t)ret;
 800ac0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3718      	adds	r7, #24
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	460b      	mov	r3, r1
 800ac22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	32b0      	adds	r2, #176	; 0xb0
 800ac36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d101      	bne.n	800ac42 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ac3e:	2303      	movs	r3, #3
 800ac40:	e065      	b.n	800ad0e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	32b0      	adds	r2, #176	; 0xb0
 800ac4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ac52:	78fb      	ldrb	r3, [r7, #3]
 800ac54:	f003 020f 	and.w	r2, r3, #15
 800ac58:	6879      	ldr	r1, [r7, #4]
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4413      	add	r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	440b      	add	r3, r1
 800ac64:	3318      	adds	r3, #24
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d02f      	beq.n	800accc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ac6c:	78fb      	ldrb	r3, [r7, #3]
 800ac6e:	f003 020f 	and.w	r2, r3, #15
 800ac72:	6879      	ldr	r1, [r7, #4]
 800ac74:	4613      	mov	r3, r2
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	440b      	add	r3, r1
 800ac7e:	3318      	adds	r3, #24
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	78fb      	ldrb	r3, [r7, #3]
 800ac84:	f003 010f 	and.w	r1, r3, #15
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	00db      	lsls	r3, r3, #3
 800ac8e:	440b      	add	r3, r1
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4403      	add	r3, r0
 800ac94:	3348      	adds	r3, #72	; 0x48
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	fbb2 f1f3 	udiv	r1, r2, r3
 800ac9c:	fb01 f303 	mul.w	r3, r1, r3
 800aca0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d112      	bne.n	800accc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800aca6:	78fb      	ldrb	r3, [r7, #3]
 800aca8:	f003 020f 	and.w	r2, r3, #15
 800acac:	6879      	ldr	r1, [r7, #4]
 800acae:	4613      	mov	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	4413      	add	r3, r2
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	440b      	add	r3, r1
 800acb8:	3318      	adds	r3, #24
 800acba:	2200      	movs	r2, #0
 800acbc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800acbe:	78f9      	ldrb	r1, [r7, #3]
 800acc0:	2300      	movs	r3, #0
 800acc2:	2200      	movs	r2, #0
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f004 ff14 	bl	800faf2 <USBD_LL_Transmit>
 800acca:	e01f      	b.n	800ad0c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	2200      	movs	r2, #0
 800acd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	33b0      	adds	r3, #176	; 0xb0
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	4413      	add	r3, r2
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d010      	beq.n	800ad0c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	33b0      	adds	r3, #176	; 0xb0
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	4413      	add	r3, r2
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ad08:	78fa      	ldrb	r2, [r7, #3]
 800ad0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ad0c:	2300      	movs	r3, #0
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b084      	sub	sp, #16
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
 800ad1e:	460b      	mov	r3, r1
 800ad20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	32b0      	adds	r2, #176	; 0xb0
 800ad2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	32b0      	adds	r2, #176	; 0xb0
 800ad3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d101      	bne.n	800ad48 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ad44:	2303      	movs	r3, #3
 800ad46:	e01a      	b.n	800ad7e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ad48:	78fb      	ldrb	r3, [r7, #3]
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f004 ff12 	bl	800fb76 <USBD_LL_GetRxDataSize>
 800ad52:	4602      	mov	r2, r0
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	33b0      	adds	r3, #176	; 0xb0
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	4413      	add	r3, r2
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ad78:	4611      	mov	r1, r2
 800ad7a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b084      	sub	sp, #16
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	32b0      	adds	r2, #176	; 0xb0
 800ad98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ada4:	2303      	movs	r3, #3
 800ada6:	e025      	b.n	800adf4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800adae:	687a      	ldr	r2, [r7, #4]
 800adb0:	33b0      	adds	r3, #176	; 0xb0
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	4413      	add	r3, r2
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d01a      	beq.n	800adf2 <USBD_CDC_EP0_RxReady+0x6c>
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800adc2:	2bff      	cmp	r3, #255	; 0xff
 800adc4:	d015      	beq.n	800adf2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	33b0      	adds	r3, #176	; 0xb0
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4413      	add	r3, r2
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	689b      	ldr	r3, [r3, #8]
 800add8:	68fa      	ldr	r2, [r7, #12]
 800adda:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800adde:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ade6:	b292      	uxth	r2, r2
 800ade8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	22ff      	movs	r2, #255	; 0xff
 800adee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3710      	adds	r7, #16
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b086      	sub	sp, #24
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ae04:	2182      	movs	r1, #130	; 0x82
 800ae06:	4818      	ldr	r0, [pc, #96]	; (800ae68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ae08:	f000 fd09 	bl	800b81e <USBD_GetEpDesc>
 800ae0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae0e:	2101      	movs	r1, #1
 800ae10:	4815      	ldr	r0, [pc, #84]	; (800ae68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ae12:	f000 fd04 	bl	800b81e <USBD_GetEpDesc>
 800ae16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae18:	2181      	movs	r1, #129	; 0x81
 800ae1a:	4813      	ldr	r0, [pc, #76]	; (800ae68 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ae1c:	f000 fcff 	bl	800b81e <USBD_GetEpDesc>
 800ae20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d002      	beq.n	800ae2e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	2210      	movs	r2, #16
 800ae2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d006      	beq.n	800ae42 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae3c:	711a      	strb	r2, [r3, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d006      	beq.n	800ae56 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ae50:	711a      	strb	r2, [r3, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2243      	movs	r2, #67	; 0x43
 800ae5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae5c:	4b02      	ldr	r3, [pc, #8]	; (800ae68 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3718      	adds	r7, #24
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}
 800ae66:	bf00      	nop
 800ae68:	20000054 	.word	0x20000054

0800ae6c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b086      	sub	sp, #24
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ae74:	2182      	movs	r1, #130	; 0x82
 800ae76:	4818      	ldr	r0, [pc, #96]	; (800aed8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae78:	f000 fcd1 	bl	800b81e <USBD_GetEpDesc>
 800ae7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ae7e:	2101      	movs	r1, #1
 800ae80:	4815      	ldr	r0, [pc, #84]	; (800aed8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae82:	f000 fccc 	bl	800b81e <USBD_GetEpDesc>
 800ae86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ae88:	2181      	movs	r1, #129	; 0x81
 800ae8a:	4813      	ldr	r0, [pc, #76]	; (800aed8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ae8c:	f000 fcc7 	bl	800b81e <USBD_GetEpDesc>
 800ae90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d002      	beq.n	800ae9e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	2210      	movs	r2, #16
 800ae9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d006      	beq.n	800aeb2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	2200      	movs	r2, #0
 800aea8:	711a      	strb	r2, [r3, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f042 0202 	orr.w	r2, r2, #2
 800aeb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d006      	beq.n	800aec6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	711a      	strb	r2, [r3, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f042 0202 	orr.w	r2, r2, #2
 800aec4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2243      	movs	r2, #67	; 0x43
 800aeca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aecc:	4b02      	ldr	r3, [pc, #8]	; (800aed8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3718      	adds	r7, #24
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	20000054 	.word	0x20000054

0800aedc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aee4:	2182      	movs	r1, #130	; 0x82
 800aee6:	4818      	ldr	r0, [pc, #96]	; (800af48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aee8:	f000 fc99 	bl	800b81e <USBD_GetEpDesc>
 800aeec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aeee:	2101      	movs	r1, #1
 800aef0:	4815      	ldr	r0, [pc, #84]	; (800af48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aef2:	f000 fc94 	bl	800b81e <USBD_GetEpDesc>
 800aef6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aef8:	2181      	movs	r1, #129	; 0x81
 800aefa:	4813      	ldr	r0, [pc, #76]	; (800af48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aefc:	f000 fc8f 	bl	800b81e <USBD_GetEpDesc>
 800af00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d002      	beq.n	800af0e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	2210      	movs	r2, #16
 800af0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d006      	beq.n	800af22 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	2200      	movs	r2, #0
 800af18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af1c:	711a      	strb	r2, [r3, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d006      	beq.n	800af36 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af30:	711a      	strb	r2, [r3, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2243      	movs	r2, #67	; 0x43
 800af3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af3c:	4b02      	ldr	r3, [pc, #8]	; (800af48 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3718      	adds	r7, #24
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}
 800af46:	bf00      	nop
 800af48:	20000054 	.word	0x20000054

0800af4c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	220a      	movs	r2, #10
 800af58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800af5a:	4b03      	ldr	r3, [pc, #12]	; (800af68 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr
 800af68:	20000010 	.word	0x20000010

0800af6c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d101      	bne.n	800af80 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800af7c:	2303      	movs	r3, #3
 800af7e:	e009      	b.n	800af94 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	33b0      	adds	r3, #176	; 0xb0
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	4413      	add	r3, r2
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b087      	sub	sp, #28
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	32b0      	adds	r2, #176	; 0xb0
 800afb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afba:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d101      	bne.n	800afc6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e008      	b.n	800afd8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	68ba      	ldr	r2, [r7, #8]
 800afca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	371c      	adds	r7, #28
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	32b0      	adds	r2, #176	; 0xb0
 800aff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800affc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b004:	2303      	movs	r3, #3
 800b006:	e004      	b.n	800b012 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	683a      	ldr	r2, [r7, #0]
 800b00c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b010:	2300      	movs	r3, #0
}
 800b012:	4618      	mov	r0, r3
 800b014:	3714      	adds	r7, #20
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr
	...

0800b020 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	32b0      	adds	r2, #176	; 0xb0
 800b032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b036:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	32b0      	adds	r2, #176	; 0xb0
 800b042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d101      	bne.n	800b04e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b04a:	2303      	movs	r3, #3
 800b04c:	e018      	b.n	800b080 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	7c1b      	ldrb	r3, [r3, #16]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10a      	bne.n	800b06c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b056:	4b0c      	ldr	r3, [pc, #48]	; (800b088 <USBD_CDC_ReceivePacket+0x68>)
 800b058:	7819      	ldrb	r1, [r3, #0]
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b060:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f004 fd65 	bl	800fb34 <USBD_LL_PrepareReceive>
 800b06a:	e008      	b.n	800b07e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b06c:	4b06      	ldr	r3, [pc, #24]	; (800b088 <USBD_CDC_ReceivePacket+0x68>)
 800b06e:	7819      	ldrb	r1, [r3, #0]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b076:	2340      	movs	r3, #64	; 0x40
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f004 fd5b 	bl	800fb34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	20000098 	.word	0x20000098

0800b08c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b086      	sub	sp, #24
 800b090:	af00      	add	r7, sp, #0
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	4613      	mov	r3, r2
 800b098:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b0a0:	2303      	movs	r3, #3
 800b0a2:	e01f      	b.n	800b0e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d003      	beq.n	800b0ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	79fa      	ldrb	r2, [r7, #7]
 800b0d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f004 fbd5 	bl	800f888 <USBD_LL_Init>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b0e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3718      	adds	r7, #24
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d101      	bne.n	800b104 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b100:	2303      	movs	r3, #3
 800b102:	e025      	b.n	800b150 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	683a      	ldr	r2, [r7, #0]
 800b108:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	32ae      	adds	r2, #174	; 0xae
 800b116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00f      	beq.n	800b140 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	32ae      	adds	r2, #174	; 0xae
 800b12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b12e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b130:	f107 020e 	add.w	r2, r7, #14
 800b134:	4610      	mov	r0, r2
 800b136:	4798      	blx	r3
 800b138:	4602      	mov	r2, r0
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b146:	1c5a      	adds	r2, r3, #1
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f004 fbdd 	bl	800f920 <USBD_LL_Start>
 800b166:	4603      	mov	r3, r0
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b178:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	370c      	adds	r7, #12
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr

0800b186 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b084      	sub	sp, #16
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
 800b18e:	460b      	mov	r3, r1
 800b190:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b192:	2300      	movs	r3, #0
 800b194:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d009      	beq.n	800b1b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	78fa      	ldrb	r2, [r7, #3]
 800b1aa:	4611      	mov	r1, r2
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	4798      	blx	r3
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b084      	sub	sp, #16
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	78fa      	ldrb	r2, [r7, #3]
 800b1d8:	4611      	mov	r1, r2
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	4798      	blx	r3
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d001      	beq.n	800b1e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3710      	adds	r7, #16
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b084      	sub	sp, #16
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b202:	6839      	ldr	r1, [r7, #0]
 800b204:	4618      	mov	r0, r3
 800b206:	f001 f908 	bl	800c41a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2201      	movs	r2, #1
 800b20e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b218:	461a      	mov	r2, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b226:	f003 031f 	and.w	r3, r3, #31
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d01a      	beq.n	800b264 <USBD_LL_SetupStage+0x72>
 800b22e:	2b02      	cmp	r3, #2
 800b230:	d822      	bhi.n	800b278 <USBD_LL_SetupStage+0x86>
 800b232:	2b00      	cmp	r3, #0
 800b234:	d002      	beq.n	800b23c <USBD_LL_SetupStage+0x4a>
 800b236:	2b01      	cmp	r3, #1
 800b238:	d00a      	beq.n	800b250 <USBD_LL_SetupStage+0x5e>
 800b23a:	e01d      	b.n	800b278 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b242:	4619      	mov	r1, r3
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f000 fb5f 	bl	800b908 <USBD_StdDevReq>
 800b24a:	4603      	mov	r3, r0
 800b24c:	73fb      	strb	r3, [r7, #15]
      break;
 800b24e:	e020      	b.n	800b292 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b256:	4619      	mov	r1, r3
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 fbc7 	bl	800b9ec <USBD_StdItfReq>
 800b25e:	4603      	mov	r3, r0
 800b260:	73fb      	strb	r3, [r7, #15]
      break;
 800b262:	e016      	b.n	800b292 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b26a:	4619      	mov	r1, r3
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 fc29 	bl	800bac4 <USBD_StdEPReq>
 800b272:	4603      	mov	r3, r0
 800b274:	73fb      	strb	r3, [r7, #15]
      break;
 800b276:	e00c      	b.n	800b292 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b27e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b282:	b2db      	uxtb	r3, r3
 800b284:	4619      	mov	r1, r3
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f004 fbaa 	bl	800f9e0 <USBD_LL_StallEP>
 800b28c:	4603      	mov	r3, r0
 800b28e:	73fb      	strb	r3, [r7, #15]
      break;
 800b290:	bf00      	nop
  }

  return ret;
 800b292:	7bfb      	ldrb	r3, [r7, #15]
}
 800b294:	4618      	mov	r0, r3
 800b296:	3710      	adds	r7, #16
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	607a      	str	r2, [r7, #4]
 800b2a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b2ae:	7afb      	ldrb	r3, [r7, #11]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d16e      	bne.n	800b392 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b2ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b2c2:	2b03      	cmp	r3, #3
 800b2c4:	f040 8098 	bne.w	800b3f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	689a      	ldr	r2, [r3, #8]
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d913      	bls.n	800b2fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	689a      	ldr	r2, [r3, #8]
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	1ad2      	subs	r2, r2, r3
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	68da      	ldr	r2, [r3, #12]
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	bf28      	it	cs
 800b2ee:	4613      	movcs	r3, r2
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	6879      	ldr	r1, [r7, #4]
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f001 f984 	bl	800c602 <USBD_CtlContinueRx>
 800b2fa:	e07d      	b.n	800b3f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b302:	f003 031f 	and.w	r3, r3, #31
 800b306:	2b02      	cmp	r3, #2
 800b308:	d014      	beq.n	800b334 <USBD_LL_DataOutStage+0x98>
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	d81d      	bhi.n	800b34a <USBD_LL_DataOutStage+0xae>
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d002      	beq.n	800b318 <USBD_LL_DataOutStage+0x7c>
 800b312:	2b01      	cmp	r3, #1
 800b314:	d003      	beq.n	800b31e <USBD_LL_DataOutStage+0x82>
 800b316:	e018      	b.n	800b34a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b318:	2300      	movs	r3, #0
 800b31a:	75bb      	strb	r3, [r7, #22]
            break;
 800b31c:	e018      	b.n	800b350 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b324:	b2db      	uxtb	r3, r3
 800b326:	4619      	mov	r1, r3
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f000 fa5e 	bl	800b7ea <USBD_CoreFindIF>
 800b32e:	4603      	mov	r3, r0
 800b330:	75bb      	strb	r3, [r7, #22]
            break;
 800b332:	e00d      	b.n	800b350 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	4619      	mov	r1, r3
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f000 fa60 	bl	800b804 <USBD_CoreFindEP>
 800b344:	4603      	mov	r3, r0
 800b346:	75bb      	strb	r3, [r7, #22]
            break;
 800b348:	e002      	b.n	800b350 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b34a:	2300      	movs	r3, #0
 800b34c:	75bb      	strb	r3, [r7, #22]
            break;
 800b34e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b350:	7dbb      	ldrb	r3, [r7, #22]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d119      	bne.n	800b38a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	2b03      	cmp	r3, #3
 800b360:	d113      	bne.n	800b38a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b362:	7dba      	ldrb	r2, [r7, #22]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	32ae      	adds	r2, #174	; 0xae
 800b368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00b      	beq.n	800b38a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b372:	7dba      	ldrb	r2, [r7, #22]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b37a:	7dba      	ldrb	r2, [r7, #22]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	32ae      	adds	r2, #174	; 0xae
 800b380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b384:	691b      	ldr	r3, [r3, #16]
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b38a:	68f8      	ldr	r0, [r7, #12]
 800b38c:	f001 f94a 	bl	800c624 <USBD_CtlSendStatus>
 800b390:	e032      	b.n	800b3f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b392:	7afb      	ldrb	r3, [r7, #11]
 800b394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	4619      	mov	r1, r3
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f000 fa31 	bl	800b804 <USBD_CoreFindEP>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b3a6:	7dbb      	ldrb	r3, [r7, #22]
 800b3a8:	2bff      	cmp	r3, #255	; 0xff
 800b3aa:	d025      	beq.n	800b3f8 <USBD_LL_DataOutStage+0x15c>
 800b3ac:	7dbb      	ldrb	r3, [r7, #22]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d122      	bne.n	800b3f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	2b03      	cmp	r3, #3
 800b3bc:	d117      	bne.n	800b3ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b3be:	7dba      	ldrb	r2, [r7, #22]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	32ae      	adds	r2, #174	; 0xae
 800b3c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c8:	699b      	ldr	r3, [r3, #24]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00f      	beq.n	800b3ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b3ce:	7dba      	ldrb	r2, [r7, #22]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b3d6:	7dba      	ldrb	r2, [r7, #22]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	32ae      	adds	r2, #174	; 0xae
 800b3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3e0:	699b      	ldr	r3, [r3, #24]
 800b3e2:	7afa      	ldrb	r2, [r7, #11]
 800b3e4:	4611      	mov	r1, r2
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	4798      	blx	r3
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b3ee:	7dfb      	ldrb	r3, [r7, #23]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d001      	beq.n	800b3f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b3f4:	7dfb      	ldrb	r3, [r7, #23]
 800b3f6:	e000      	b.n	800b3fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3718      	adds	r7, #24
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}

0800b402 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b402:	b580      	push	{r7, lr}
 800b404:	b086      	sub	sp, #24
 800b406:	af00      	add	r7, sp, #0
 800b408:	60f8      	str	r0, [r7, #12]
 800b40a:	460b      	mov	r3, r1
 800b40c:	607a      	str	r2, [r7, #4]
 800b40e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b410:	7afb      	ldrb	r3, [r7, #11]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d16f      	bne.n	800b4f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3314      	adds	r3, #20
 800b41a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b422:	2b02      	cmp	r3, #2
 800b424:	d15a      	bne.n	800b4dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b426:	693b      	ldr	r3, [r7, #16]
 800b428:	689a      	ldr	r2, [r3, #8]
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d914      	bls.n	800b45c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	689a      	ldr	r2, [r3, #8]
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	1ad2      	subs	r2, r2, r3
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	461a      	mov	r2, r3
 800b446:	6879      	ldr	r1, [r7, #4]
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	f001 f8ac 	bl	800c5a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b44e:	2300      	movs	r3, #0
 800b450:	2200      	movs	r2, #0
 800b452:	2100      	movs	r1, #0
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f004 fb6d 	bl	800fb34 <USBD_LL_PrepareReceive>
 800b45a:	e03f      	b.n	800b4dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	68da      	ldr	r2, [r3, #12]
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	429a      	cmp	r2, r3
 800b466:	d11c      	bne.n	800b4a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	685a      	ldr	r2, [r3, #4]
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b470:	429a      	cmp	r2, r3
 800b472:	d316      	bcc.n	800b4a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	685a      	ldr	r2, [r3, #4]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b47e:	429a      	cmp	r2, r3
 800b480:	d20f      	bcs.n	800b4a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b482:	2200      	movs	r2, #0
 800b484:	2100      	movs	r1, #0
 800b486:	68f8      	ldr	r0, [r7, #12]
 800b488:	f001 f88d 	bl	800c5a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2200      	movs	r2, #0
 800b490:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b494:	2300      	movs	r3, #0
 800b496:	2200      	movs	r2, #0
 800b498:	2100      	movs	r1, #0
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f004 fb4a 	bl	800fb34 <USBD_LL_PrepareReceive>
 800b4a0:	e01c      	b.n	800b4dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4a8:	b2db      	uxtb	r3, r3
 800b4aa:	2b03      	cmp	r3, #3
 800b4ac:	d10f      	bne.n	800b4ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d009      	beq.n	800b4ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b4ce:	2180      	movs	r1, #128	; 0x80
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f004 fa85 	bl	800f9e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f001 f8b7 	bl	800c64a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d03a      	beq.n	800b55c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f7ff fe42 	bl	800b170 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b4f4:	e032      	b.n	800b55c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b4f6:	7afb      	ldrb	r3, [r7, #11]
 800b4f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b4fc:	b2db      	uxtb	r3, r3
 800b4fe:	4619      	mov	r1, r3
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f000 f97f 	bl	800b804 <USBD_CoreFindEP>
 800b506:	4603      	mov	r3, r0
 800b508:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b50a:	7dfb      	ldrb	r3, [r7, #23]
 800b50c:	2bff      	cmp	r3, #255	; 0xff
 800b50e:	d025      	beq.n	800b55c <USBD_LL_DataInStage+0x15a>
 800b510:	7dfb      	ldrb	r3, [r7, #23]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d122      	bne.n	800b55c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	2b03      	cmp	r3, #3
 800b520:	d11c      	bne.n	800b55c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b522:	7dfa      	ldrb	r2, [r7, #23]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	32ae      	adds	r2, #174	; 0xae
 800b528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b52c:	695b      	ldr	r3, [r3, #20]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d014      	beq.n	800b55c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b532:	7dfa      	ldrb	r2, [r7, #23]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b53a:	7dfa      	ldrb	r2, [r7, #23]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	32ae      	adds	r2, #174	; 0xae
 800b540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b544:	695b      	ldr	r3, [r3, #20]
 800b546:	7afa      	ldrb	r2, [r7, #11]
 800b548:	4611      	mov	r1, r2
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	4798      	blx	r3
 800b54e:	4603      	mov	r3, r0
 800b550:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b552:	7dbb      	ldrb	r3, [r7, #22]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d001      	beq.n	800b55c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b558:	7dbb      	ldrb	r3, [r7, #22]
 800b55a:	e000      	b.n	800b55e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3718      	adds	r7, #24
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b084      	sub	sp, #16
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b56e:	2300      	movs	r3, #0
 800b570:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2201      	movs	r2, #1
 800b576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d014      	beq.n	800b5cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00e      	beq.n	800b5cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	6852      	ldr	r2, [r2, #4]
 800b5ba:	b2d2      	uxtb	r2, r2
 800b5bc:	4611      	mov	r1, r2
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	4798      	blx	r3
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d001      	beq.n	800b5cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b5c8:	2303      	movs	r3, #3
 800b5ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5cc:	2340      	movs	r3, #64	; 0x40
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	2100      	movs	r1, #0
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f004 f9bf 	bl	800f956 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2240      	movs	r2, #64	; 0x40
 800b5e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b5e8:	2340      	movs	r3, #64	; 0x40
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	2180      	movs	r1, #128	; 0x80
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f004 f9b1 	bl	800f956 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2240      	movs	r2, #64	; 0x40
 800b5fe:	621a      	str	r2, [r3, #32]

  return ret;
 800b600:	7bfb      	ldrb	r3, [r7, #15]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b60a:	b480      	push	{r7}
 800b60c:	b083      	sub	sp, #12
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	460b      	mov	r3, r1
 800b614:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	78fa      	ldrb	r2, [r7, #3]
 800b61a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	4618      	mov	r0, r3
 800b620:	370c      	adds	r7, #12
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr

0800b62a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b62a:	b480      	push	{r7}
 800b62c:	b083      	sub	sp, #12
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b638:	b2da      	uxtb	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2204      	movs	r2, #4
 800b644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	370c      	adds	r7, #12
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr

0800b656 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b656:	b480      	push	{r7}
 800b658:	b083      	sub	sp, #12
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b664:	b2db      	uxtb	r3, r3
 800b666:	2b04      	cmp	r3, #4
 800b668:	d106      	bne.n	800b678 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b670:	b2da      	uxtb	r2, r3
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	370c      	adds	r7, #12
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b082      	sub	sp, #8
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b694:	b2db      	uxtb	r3, r3
 800b696:	2b03      	cmp	r3, #3
 800b698:	d110      	bne.n	800b6bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d00b      	beq.n	800b6bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6aa:	69db      	ldr	r3, [r3, #28]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d005      	beq.n	800b6bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6b6:	69db      	ldr	r3, [r3, #28]
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b082      	sub	sp, #8
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	32ae      	adds	r2, #174	; 0xae
 800b6dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d101      	bne.n	800b6e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	e01c      	b.n	800b722 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	2b03      	cmp	r3, #3
 800b6f2:	d115      	bne.n	800b720 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	32ae      	adds	r2, #174	; 0xae
 800b6fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b702:	6a1b      	ldr	r3, [r3, #32]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00b      	beq.n	800b720 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	32ae      	adds	r2, #174	; 0xae
 800b712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b716:	6a1b      	ldr	r3, [r3, #32]
 800b718:	78fa      	ldrb	r2, [r7, #3]
 800b71a:	4611      	mov	r1, r2
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b720:	2300      	movs	r3, #0
}
 800b722:	4618      	mov	r0, r3
 800b724:	3708      	adds	r7, #8
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b082      	sub	sp, #8
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
 800b732:	460b      	mov	r3, r1
 800b734:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	32ae      	adds	r2, #174	; 0xae
 800b740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d101      	bne.n	800b74c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b748:	2303      	movs	r3, #3
 800b74a:	e01c      	b.n	800b786 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b752:	b2db      	uxtb	r3, r3
 800b754:	2b03      	cmp	r3, #3
 800b756:	d115      	bne.n	800b784 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	32ae      	adds	r2, #174	; 0xae
 800b762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d00b      	beq.n	800b784 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	32ae      	adds	r2, #174	; 0xae
 800b776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b77c:	78fa      	ldrb	r2, [r7, #3]
 800b77e:	4611      	mov	r1, r2
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3708      	adds	r7, #8
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}

0800b78e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b78e:	b480      	push	{r7}
 800b790:	b083      	sub	sp, #12
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d00e      	beq.n	800b7e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	687a      	ldr	r2, [r7, #4]
 800b7cc:	6852      	ldr	r2, [r2, #4]
 800b7ce:	b2d2      	uxtb	r2, r2
 800b7d0:	4611      	mov	r1, r2
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	4798      	blx	r3
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d001      	beq.n	800b7e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b7ea:	b480      	push	{r7}
 800b7ec:	b083      	sub	sp, #12
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b7f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	460b      	mov	r3, r1
 800b80e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b810:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b812:	4618      	mov	r0, r3
 800b814:	370c      	adds	r7, #12
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr

0800b81e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b086      	sub	sp, #24
 800b822:	af00      	add	r7, sp, #0
 800b824:	6078      	str	r0, [r7, #4]
 800b826:	460b      	mov	r3, r1
 800b828:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b832:	2300      	movs	r3, #0
 800b834:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	885b      	ldrh	r3, [r3, #2]
 800b83a:	b29a      	uxth	r2, r3
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	b29b      	uxth	r3, r3
 800b842:	429a      	cmp	r2, r3
 800b844:	d920      	bls.n	800b888 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b84e:	e013      	b.n	800b878 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b850:	f107 030a 	add.w	r3, r7, #10
 800b854:	4619      	mov	r1, r3
 800b856:	6978      	ldr	r0, [r7, #20]
 800b858:	f000 f81b 	bl	800b892 <USBD_GetNextDesc>
 800b85c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	785b      	ldrb	r3, [r3, #1]
 800b862:	2b05      	cmp	r3, #5
 800b864:	d108      	bne.n	800b878 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	789b      	ldrb	r3, [r3, #2]
 800b86e:	78fa      	ldrb	r2, [r7, #3]
 800b870:	429a      	cmp	r2, r3
 800b872:	d008      	beq.n	800b886 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b874:	2300      	movs	r3, #0
 800b876:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	885b      	ldrh	r3, [r3, #2]
 800b87c:	b29a      	uxth	r2, r3
 800b87e:	897b      	ldrh	r3, [r7, #10]
 800b880:	429a      	cmp	r2, r3
 800b882:	d8e5      	bhi.n	800b850 <USBD_GetEpDesc+0x32>
 800b884:	e000      	b.n	800b888 <USBD_GetEpDesc+0x6a>
          break;
 800b886:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b888:	693b      	ldr	r3, [r7, #16]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3718      	adds	r7, #24
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b892:	b480      	push	{r7}
 800b894:	b085      	sub	sp, #20
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
 800b89a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	881a      	ldrh	r2, [r3, #0]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	4413      	add	r3, r2
 800b8ac:	b29a      	uxth	r2, r3
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b8be:	68fb      	ldr	r3, [r7, #12]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3714      	adds	r7, #20
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b087      	sub	sp, #28
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b8ea:	8a3b      	ldrh	r3, [r7, #16]
 800b8ec:	021b      	lsls	r3, r3, #8
 800b8ee:	b21a      	sxth	r2, r3
 800b8f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	b21b      	sxth	r3, r3
 800b8f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b8fa:	89fb      	ldrh	r3, [r7, #14]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	371c      	adds	r7, #28
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b912:	2300      	movs	r3, #0
 800b914:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b91e:	2b40      	cmp	r3, #64	; 0x40
 800b920:	d005      	beq.n	800b92e <USBD_StdDevReq+0x26>
 800b922:	2b40      	cmp	r3, #64	; 0x40
 800b924:	d857      	bhi.n	800b9d6 <USBD_StdDevReq+0xce>
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00f      	beq.n	800b94a <USBD_StdDevReq+0x42>
 800b92a:	2b20      	cmp	r3, #32
 800b92c:	d153      	bne.n	800b9d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	32ae      	adds	r2, #174	; 0xae
 800b938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	6839      	ldr	r1, [r7, #0]
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	4798      	blx	r3
 800b944:	4603      	mov	r3, r0
 800b946:	73fb      	strb	r3, [r7, #15]
      break;
 800b948:	e04a      	b.n	800b9e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	785b      	ldrb	r3, [r3, #1]
 800b94e:	2b09      	cmp	r3, #9
 800b950:	d83b      	bhi.n	800b9ca <USBD_StdDevReq+0xc2>
 800b952:	a201      	add	r2, pc, #4	; (adr r2, 800b958 <USBD_StdDevReq+0x50>)
 800b954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b958:	0800b9ad 	.word	0x0800b9ad
 800b95c:	0800b9c1 	.word	0x0800b9c1
 800b960:	0800b9cb 	.word	0x0800b9cb
 800b964:	0800b9b7 	.word	0x0800b9b7
 800b968:	0800b9cb 	.word	0x0800b9cb
 800b96c:	0800b98b 	.word	0x0800b98b
 800b970:	0800b981 	.word	0x0800b981
 800b974:	0800b9cb 	.word	0x0800b9cb
 800b978:	0800b9a3 	.word	0x0800b9a3
 800b97c:	0800b995 	.word	0x0800b995
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fa3c 	bl	800be00 <USBD_GetDescriptor>
          break;
 800b988:	e024      	b.n	800b9d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b98a:	6839      	ldr	r1, [r7, #0]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 fba1 	bl	800c0d4 <USBD_SetAddress>
          break;
 800b992:	e01f      	b.n	800b9d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b994:	6839      	ldr	r1, [r7, #0]
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fbe0 	bl	800c15c <USBD_SetConfig>
 800b99c:	4603      	mov	r3, r0
 800b99e:	73fb      	strb	r3, [r7, #15]
          break;
 800b9a0:	e018      	b.n	800b9d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b9a2:	6839      	ldr	r1, [r7, #0]
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 fc83 	bl	800c2b0 <USBD_GetConfig>
          break;
 800b9aa:	e013      	b.n	800b9d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b9ac:	6839      	ldr	r1, [r7, #0]
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 fcb4 	bl	800c31c <USBD_GetStatus>
          break;
 800b9b4:	e00e      	b.n	800b9d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b9b6:	6839      	ldr	r1, [r7, #0]
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 fce3 	bl	800c384 <USBD_SetFeature>
          break;
 800b9be:	e009      	b.n	800b9d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b9c0:	6839      	ldr	r1, [r7, #0]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 fd07 	bl	800c3d6 <USBD_ClrFeature>
          break;
 800b9c8:	e004      	b.n	800b9d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b9ca:	6839      	ldr	r1, [r7, #0]
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 fd5e 	bl	800c48e <USBD_CtlError>
          break;
 800b9d2:	bf00      	nop
      }
      break;
 800b9d4:	e004      	b.n	800b9e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b9d6:	6839      	ldr	r1, [r7, #0]
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 fd58 	bl	800c48e <USBD_CtlError>
      break;
 800b9de:	bf00      	nop
  }

  return ret;
 800b9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop

0800b9ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba02:	2b40      	cmp	r3, #64	; 0x40
 800ba04:	d005      	beq.n	800ba12 <USBD_StdItfReq+0x26>
 800ba06:	2b40      	cmp	r3, #64	; 0x40
 800ba08:	d852      	bhi.n	800bab0 <USBD_StdItfReq+0xc4>
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d001      	beq.n	800ba12 <USBD_StdItfReq+0x26>
 800ba0e:	2b20      	cmp	r3, #32
 800ba10:	d14e      	bne.n	800bab0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	3b01      	subs	r3, #1
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	d840      	bhi.n	800baa2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	889b      	ldrh	r3, [r3, #4]
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d836      	bhi.n	800ba98 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	889b      	ldrh	r3, [r3, #4]
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	4619      	mov	r1, r3
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f7ff fed9 	bl	800b7ea <USBD_CoreFindIF>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba3c:	7bbb      	ldrb	r3, [r7, #14]
 800ba3e:	2bff      	cmp	r3, #255	; 0xff
 800ba40:	d01d      	beq.n	800ba7e <USBD_StdItfReq+0x92>
 800ba42:	7bbb      	ldrb	r3, [r7, #14]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d11a      	bne.n	800ba7e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ba48:	7bba      	ldrb	r2, [r7, #14]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	32ae      	adds	r2, #174	; 0xae
 800ba4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00f      	beq.n	800ba78 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ba58:	7bba      	ldrb	r2, [r7, #14]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ba60:	7bba      	ldrb	r2, [r7, #14]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	32ae      	adds	r2, #174	; 0xae
 800ba66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	6839      	ldr	r1, [r7, #0]
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	4798      	blx	r3
 800ba72:	4603      	mov	r3, r0
 800ba74:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ba76:	e004      	b.n	800ba82 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ba78:	2303      	movs	r3, #3
 800ba7a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ba7c:	e001      	b.n	800ba82 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ba7e:	2303      	movs	r3, #3
 800ba80:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	88db      	ldrh	r3, [r3, #6]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d110      	bne.n	800baac <USBD_StdItfReq+0xc0>
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d10d      	bne.n	800baac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f000 fdc7 	bl	800c624 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ba96:	e009      	b.n	800baac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ba98:	6839      	ldr	r1, [r7, #0]
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f000 fcf7 	bl	800c48e <USBD_CtlError>
          break;
 800baa0:	e004      	b.n	800baac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800baa2:	6839      	ldr	r1, [r7, #0]
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fcf2 	bl	800c48e <USBD_CtlError>
          break;
 800baaa:	e000      	b.n	800baae <USBD_StdItfReq+0xc2>
          break;
 800baac:	bf00      	nop
      }
      break;
 800baae:	e004      	b.n	800baba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bab0:	6839      	ldr	r1, [r7, #0]
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 fceb 	bl	800c48e <USBD_CtlError>
      break;
 800bab8:	bf00      	nop
  }

  return ret;
 800baba:	7bfb      	ldrb	r3, [r7, #15]
}
 800babc:	4618      	mov	r0, r3
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bace:	2300      	movs	r3, #0
 800bad0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	889b      	ldrh	r3, [r3, #4]
 800bad6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bae0:	2b40      	cmp	r3, #64	; 0x40
 800bae2:	d007      	beq.n	800baf4 <USBD_StdEPReq+0x30>
 800bae4:	2b40      	cmp	r3, #64	; 0x40
 800bae6:	f200 817f 	bhi.w	800bde8 <USBD_StdEPReq+0x324>
 800baea:	2b00      	cmp	r3, #0
 800baec:	d02a      	beq.n	800bb44 <USBD_StdEPReq+0x80>
 800baee:	2b20      	cmp	r3, #32
 800baf0:	f040 817a 	bne.w	800bde8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800baf4:	7bbb      	ldrb	r3, [r7, #14]
 800baf6:	4619      	mov	r1, r3
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f7ff fe83 	bl	800b804 <USBD_CoreFindEP>
 800bafe:	4603      	mov	r3, r0
 800bb00:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb02:	7b7b      	ldrb	r3, [r7, #13]
 800bb04:	2bff      	cmp	r3, #255	; 0xff
 800bb06:	f000 8174 	beq.w	800bdf2 <USBD_StdEPReq+0x32e>
 800bb0a:	7b7b      	ldrb	r3, [r7, #13]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f040 8170 	bne.w	800bdf2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bb12:	7b7a      	ldrb	r2, [r7, #13]
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bb1a:	7b7a      	ldrb	r2, [r7, #13]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	32ae      	adds	r2, #174	; 0xae
 800bb20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f000 8163 	beq.w	800bdf2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bb2c:	7b7a      	ldrb	r2, [r7, #13]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	32ae      	adds	r2, #174	; 0xae
 800bb32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	6839      	ldr	r1, [r7, #0]
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	4798      	blx	r3
 800bb3e:	4603      	mov	r3, r0
 800bb40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bb42:	e156      	b.n	800bdf2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	785b      	ldrb	r3, [r3, #1]
 800bb48:	2b03      	cmp	r3, #3
 800bb4a:	d008      	beq.n	800bb5e <USBD_StdEPReq+0x9a>
 800bb4c:	2b03      	cmp	r3, #3
 800bb4e:	f300 8145 	bgt.w	800bddc <USBD_StdEPReq+0x318>
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f000 809b 	beq.w	800bc8e <USBD_StdEPReq+0x1ca>
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d03c      	beq.n	800bbd6 <USBD_StdEPReq+0x112>
 800bb5c:	e13e      	b.n	800bddc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb64:	b2db      	uxtb	r3, r3
 800bb66:	2b02      	cmp	r3, #2
 800bb68:	d002      	beq.n	800bb70 <USBD_StdEPReq+0xac>
 800bb6a:	2b03      	cmp	r3, #3
 800bb6c:	d016      	beq.n	800bb9c <USBD_StdEPReq+0xd8>
 800bb6e:	e02c      	b.n	800bbca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb70:	7bbb      	ldrb	r3, [r7, #14]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d00d      	beq.n	800bb92 <USBD_StdEPReq+0xce>
 800bb76:	7bbb      	ldrb	r3, [r7, #14]
 800bb78:	2b80      	cmp	r3, #128	; 0x80
 800bb7a:	d00a      	beq.n	800bb92 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb7c:	7bbb      	ldrb	r3, [r7, #14]
 800bb7e:	4619      	mov	r1, r3
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f003 ff2d 	bl	800f9e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb86:	2180      	movs	r1, #128	; 0x80
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f003 ff29 	bl	800f9e0 <USBD_LL_StallEP>
 800bb8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb90:	e020      	b.n	800bbd4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bb92:	6839      	ldr	r1, [r7, #0]
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 fc7a 	bl	800c48e <USBD_CtlError>
              break;
 800bb9a:	e01b      	b.n	800bbd4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	885b      	ldrh	r3, [r3, #2]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10e      	bne.n	800bbc2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bba4:	7bbb      	ldrb	r3, [r7, #14]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00b      	beq.n	800bbc2 <USBD_StdEPReq+0xfe>
 800bbaa:	7bbb      	ldrb	r3, [r7, #14]
 800bbac:	2b80      	cmp	r3, #128	; 0x80
 800bbae:	d008      	beq.n	800bbc2 <USBD_StdEPReq+0xfe>
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	88db      	ldrh	r3, [r3, #6]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d104      	bne.n	800bbc2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bbb8:	7bbb      	ldrb	r3, [r7, #14]
 800bbba:	4619      	mov	r1, r3
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f003 ff0f 	bl	800f9e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 fd2e 	bl	800c624 <USBD_CtlSendStatus>

              break;
 800bbc8:	e004      	b.n	800bbd4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bbca:	6839      	ldr	r1, [r7, #0]
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 fc5e 	bl	800c48e <USBD_CtlError>
              break;
 800bbd2:	bf00      	nop
          }
          break;
 800bbd4:	e107      	b.n	800bde6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbdc:	b2db      	uxtb	r3, r3
 800bbde:	2b02      	cmp	r3, #2
 800bbe0:	d002      	beq.n	800bbe8 <USBD_StdEPReq+0x124>
 800bbe2:	2b03      	cmp	r3, #3
 800bbe4:	d016      	beq.n	800bc14 <USBD_StdEPReq+0x150>
 800bbe6:	e04b      	b.n	800bc80 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbe8:	7bbb      	ldrb	r3, [r7, #14]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00d      	beq.n	800bc0a <USBD_StdEPReq+0x146>
 800bbee:	7bbb      	ldrb	r3, [r7, #14]
 800bbf0:	2b80      	cmp	r3, #128	; 0x80
 800bbf2:	d00a      	beq.n	800bc0a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bbf4:	7bbb      	ldrb	r3, [r7, #14]
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f003 fef1 	bl	800f9e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbfe:	2180      	movs	r1, #128	; 0x80
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f003 feed 	bl	800f9e0 <USBD_LL_StallEP>
 800bc06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc08:	e040      	b.n	800bc8c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bc0a:	6839      	ldr	r1, [r7, #0]
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 fc3e 	bl	800c48e <USBD_CtlError>
              break;
 800bc12:	e03b      	b.n	800bc8c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	885b      	ldrh	r3, [r3, #2]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d136      	bne.n	800bc8a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bc1c:	7bbb      	ldrb	r3, [r7, #14]
 800bc1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d004      	beq.n	800bc30 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bc26:	7bbb      	ldrb	r3, [r7, #14]
 800bc28:	4619      	mov	r1, r3
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f003 fef7 	bl	800fa1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 fcf7 	bl	800c624 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bc36:	7bbb      	ldrb	r3, [r7, #14]
 800bc38:	4619      	mov	r1, r3
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f7ff fde2 	bl	800b804 <USBD_CoreFindEP>
 800bc40:	4603      	mov	r3, r0
 800bc42:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc44:	7b7b      	ldrb	r3, [r7, #13]
 800bc46:	2bff      	cmp	r3, #255	; 0xff
 800bc48:	d01f      	beq.n	800bc8a <USBD_StdEPReq+0x1c6>
 800bc4a:	7b7b      	ldrb	r3, [r7, #13]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d11c      	bne.n	800bc8a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bc50:	7b7a      	ldrb	r2, [r7, #13]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bc58:	7b7a      	ldrb	r2, [r7, #13]
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	32ae      	adds	r2, #174	; 0xae
 800bc5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d010      	beq.n	800bc8a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bc68:	7b7a      	ldrb	r2, [r7, #13]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	32ae      	adds	r2, #174	; 0xae
 800bc6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	6839      	ldr	r1, [r7, #0]
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	4798      	blx	r3
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bc7e:	e004      	b.n	800bc8a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bc80:	6839      	ldr	r1, [r7, #0]
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f000 fc03 	bl	800c48e <USBD_CtlError>
              break;
 800bc88:	e000      	b.n	800bc8c <USBD_StdEPReq+0x1c8>
              break;
 800bc8a:	bf00      	nop
          }
          break;
 800bc8c:	e0ab      	b.n	800bde6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	2b02      	cmp	r3, #2
 800bc98:	d002      	beq.n	800bca0 <USBD_StdEPReq+0x1dc>
 800bc9a:	2b03      	cmp	r3, #3
 800bc9c:	d032      	beq.n	800bd04 <USBD_StdEPReq+0x240>
 800bc9e:	e097      	b.n	800bdd0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bca0:	7bbb      	ldrb	r3, [r7, #14]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d007      	beq.n	800bcb6 <USBD_StdEPReq+0x1f2>
 800bca6:	7bbb      	ldrb	r3, [r7, #14]
 800bca8:	2b80      	cmp	r3, #128	; 0x80
 800bcaa:	d004      	beq.n	800bcb6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bcac:	6839      	ldr	r1, [r7, #0]
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f000 fbed 	bl	800c48e <USBD_CtlError>
                break;
 800bcb4:	e091      	b.n	800bdda <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	da0b      	bge.n	800bcd6 <USBD_StdEPReq+0x212>
 800bcbe:	7bbb      	ldrb	r3, [r7, #14]
 800bcc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	4413      	add	r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	3310      	adds	r3, #16
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	3304      	adds	r3, #4
 800bcd4:	e00b      	b.n	800bcee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bcd6:	7bbb      	ldrb	r3, [r7, #14]
 800bcd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcdc:	4613      	mov	r3, r2
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	4413      	add	r3, r2
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	4413      	add	r3, r2
 800bcec:	3304      	adds	r3, #4
 800bcee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	2202      	movs	r2, #2
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 fc37 	bl	800c570 <USBD_CtlSendData>
              break;
 800bd02:	e06a      	b.n	800bdda <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bd04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	da11      	bge.n	800bd30 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bd0c:	7bbb      	ldrb	r3, [r7, #14]
 800bd0e:	f003 020f 	and.w	r2, r3, #15
 800bd12:	6879      	ldr	r1, [r7, #4]
 800bd14:	4613      	mov	r3, r2
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	4413      	add	r3, r2
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	440b      	add	r3, r1
 800bd1e:	3324      	adds	r3, #36	; 0x24
 800bd20:	881b      	ldrh	r3, [r3, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d117      	bne.n	800bd56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bd26:	6839      	ldr	r1, [r7, #0]
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f000 fbb0 	bl	800c48e <USBD_CtlError>
                  break;
 800bd2e:	e054      	b.n	800bdda <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bd30:	7bbb      	ldrb	r3, [r7, #14]
 800bd32:	f003 020f 	and.w	r2, r3, #15
 800bd36:	6879      	ldr	r1, [r7, #4]
 800bd38:	4613      	mov	r3, r2
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	4413      	add	r3, r2
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	440b      	add	r3, r1
 800bd42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bd46:	881b      	ldrh	r3, [r3, #0]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d104      	bne.n	800bd56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bd4c:	6839      	ldr	r1, [r7, #0]
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f000 fb9d 	bl	800c48e <USBD_CtlError>
                  break;
 800bd54:	e041      	b.n	800bdda <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	da0b      	bge.n	800bd76 <USBD_StdEPReq+0x2b2>
 800bd5e:	7bbb      	ldrb	r3, [r7, #14]
 800bd60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd64:	4613      	mov	r3, r2
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4413      	add	r3, r2
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	3310      	adds	r3, #16
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	4413      	add	r3, r2
 800bd72:	3304      	adds	r3, #4
 800bd74:	e00b      	b.n	800bd8e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd76:	7bbb      	ldrb	r3, [r7, #14]
 800bd78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd7c:	4613      	mov	r3, r2
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	4413      	add	r3, r2
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	4413      	add	r3, r2
 800bd8c:	3304      	adds	r3, #4
 800bd8e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bd90:	7bbb      	ldrb	r3, [r7, #14]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d002      	beq.n	800bd9c <USBD_StdEPReq+0x2d8>
 800bd96:	7bbb      	ldrb	r3, [r7, #14]
 800bd98:	2b80      	cmp	r3, #128	; 0x80
 800bd9a:	d103      	bne.n	800bda4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	601a      	str	r2, [r3, #0]
 800bda2:	e00e      	b.n	800bdc2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bda4:	7bbb      	ldrb	r3, [r7, #14]
 800bda6:	4619      	mov	r1, r3
 800bda8:	6878      	ldr	r0, [r7, #4]
 800bdaa:	f003 fe57 	bl	800fa5c <USBD_LL_IsStallEP>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d003      	beq.n	800bdbc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	601a      	str	r2, [r3, #0]
 800bdba:	e002      	b.n	800bdc2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	2202      	movs	r2, #2
 800bdc6:	4619      	mov	r1, r3
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	f000 fbd1 	bl	800c570 <USBD_CtlSendData>
              break;
 800bdce:	e004      	b.n	800bdda <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bdd0:	6839      	ldr	r1, [r7, #0]
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f000 fb5b 	bl	800c48e <USBD_CtlError>
              break;
 800bdd8:	bf00      	nop
          }
          break;
 800bdda:	e004      	b.n	800bde6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fb55 	bl	800c48e <USBD_CtlError>
          break;
 800bde4:	bf00      	nop
      }
      break;
 800bde6:	e005      	b.n	800bdf4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bde8:	6839      	ldr	r1, [r7, #0]
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f000 fb4f 	bl	800c48e <USBD_CtlError>
      break;
 800bdf0:	e000      	b.n	800bdf4 <USBD_StdEPReq+0x330>
      break;
 800bdf2:	bf00      	nop
  }

  return ret;
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
	...

0800be00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be0a:	2300      	movs	r3, #0
 800be0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800be0e:	2300      	movs	r3, #0
 800be10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800be12:	2300      	movs	r3, #0
 800be14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	885b      	ldrh	r3, [r3, #2]
 800be1a:	0a1b      	lsrs	r3, r3, #8
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	3b01      	subs	r3, #1
 800be20:	2b06      	cmp	r3, #6
 800be22:	f200 8128 	bhi.w	800c076 <USBD_GetDescriptor+0x276>
 800be26:	a201      	add	r2, pc, #4	; (adr r2, 800be2c <USBD_GetDescriptor+0x2c>)
 800be28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be2c:	0800be49 	.word	0x0800be49
 800be30:	0800be61 	.word	0x0800be61
 800be34:	0800bea1 	.word	0x0800bea1
 800be38:	0800c077 	.word	0x0800c077
 800be3c:	0800c077 	.word	0x0800c077
 800be40:	0800c017 	.word	0x0800c017
 800be44:	0800c043 	.word	0x0800c043
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	7c12      	ldrb	r2, [r2, #16]
 800be54:	f107 0108 	add.w	r1, r7, #8
 800be58:	4610      	mov	r0, r2
 800be5a:	4798      	blx	r3
 800be5c:	60f8      	str	r0, [r7, #12]
      break;
 800be5e:	e112      	b.n	800c086 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	7c1b      	ldrb	r3, [r3, #16]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d10d      	bne.n	800be84 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be70:	f107 0208 	add.w	r2, r7, #8
 800be74:	4610      	mov	r0, r2
 800be76:	4798      	blx	r3
 800be78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	3301      	adds	r3, #1
 800be7e:	2202      	movs	r2, #2
 800be80:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800be82:	e100      	b.n	800c086 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be8c:	f107 0208 	add.w	r2, r7, #8
 800be90:	4610      	mov	r0, r2
 800be92:	4798      	blx	r3
 800be94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	3301      	adds	r3, #1
 800be9a:	2202      	movs	r2, #2
 800be9c:	701a      	strb	r2, [r3, #0]
      break;
 800be9e:	e0f2      	b.n	800c086 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	885b      	ldrh	r3, [r3, #2]
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	2b05      	cmp	r3, #5
 800bea8:	f200 80ac 	bhi.w	800c004 <USBD_GetDescriptor+0x204>
 800beac:	a201      	add	r2, pc, #4	; (adr r2, 800beb4 <USBD_GetDescriptor+0xb4>)
 800beae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb2:	bf00      	nop
 800beb4:	0800becd 	.word	0x0800becd
 800beb8:	0800bf01 	.word	0x0800bf01
 800bebc:	0800bf35 	.word	0x0800bf35
 800bec0:	0800bf69 	.word	0x0800bf69
 800bec4:	0800bf9d 	.word	0x0800bf9d
 800bec8:	0800bfd1 	.word	0x0800bfd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00b      	beq.n	800bef0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	7c12      	ldrb	r2, [r2, #16]
 800bee4:	f107 0108 	add.w	r1, r7, #8
 800bee8:	4610      	mov	r0, r2
 800beea:	4798      	blx	r3
 800beec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800beee:	e091      	b.n	800c014 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bef0:	6839      	ldr	r1, [r7, #0]
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 facb 	bl	800c48e <USBD_CtlError>
            err++;
 800bef8:	7afb      	ldrb	r3, [r7, #11]
 800befa:	3301      	adds	r3, #1
 800befc:	72fb      	strb	r3, [r7, #11]
          break;
 800befe:	e089      	b.n	800c014 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00b      	beq.n	800bf24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf12:	689b      	ldr	r3, [r3, #8]
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	7c12      	ldrb	r2, [r2, #16]
 800bf18:	f107 0108 	add.w	r1, r7, #8
 800bf1c:	4610      	mov	r0, r2
 800bf1e:	4798      	blx	r3
 800bf20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf22:	e077      	b.n	800c014 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 fab1 	bl	800c48e <USBD_CtlError>
            err++;
 800bf2c:	7afb      	ldrb	r3, [r7, #11]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	72fb      	strb	r3, [r7, #11]
          break;
 800bf32:	e06f      	b.n	800c014 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf3a:	68db      	ldr	r3, [r3, #12]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d00b      	beq.n	800bf58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	7c12      	ldrb	r2, [r2, #16]
 800bf4c:	f107 0108 	add.w	r1, r7, #8
 800bf50:	4610      	mov	r0, r2
 800bf52:	4798      	blx	r3
 800bf54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf56:	e05d      	b.n	800c014 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf58:	6839      	ldr	r1, [r7, #0]
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 fa97 	bl	800c48e <USBD_CtlError>
            err++;
 800bf60:	7afb      	ldrb	r3, [r7, #11]
 800bf62:	3301      	adds	r3, #1
 800bf64:	72fb      	strb	r3, [r7, #11]
          break;
 800bf66:	e055      	b.n	800c014 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf6e:	691b      	ldr	r3, [r3, #16]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d00b      	beq.n	800bf8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf7a:	691b      	ldr	r3, [r3, #16]
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	7c12      	ldrb	r2, [r2, #16]
 800bf80:	f107 0108 	add.w	r1, r7, #8
 800bf84:	4610      	mov	r0, r2
 800bf86:	4798      	blx	r3
 800bf88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf8a:	e043      	b.n	800c014 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf8c:	6839      	ldr	r1, [r7, #0]
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 fa7d 	bl	800c48e <USBD_CtlError>
            err++;
 800bf94:	7afb      	ldrb	r3, [r7, #11]
 800bf96:	3301      	adds	r3, #1
 800bf98:	72fb      	strb	r3, [r7, #11]
          break;
 800bf9a:	e03b      	b.n	800c014 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfa2:	695b      	ldr	r3, [r3, #20]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d00b      	beq.n	800bfc0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfae:	695b      	ldr	r3, [r3, #20]
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	7c12      	ldrb	r2, [r2, #16]
 800bfb4:	f107 0108 	add.w	r1, r7, #8
 800bfb8:	4610      	mov	r0, r2
 800bfba:	4798      	blx	r3
 800bfbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfbe:	e029      	b.n	800c014 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfc0:	6839      	ldr	r1, [r7, #0]
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 fa63 	bl	800c48e <USBD_CtlError>
            err++;
 800bfc8:	7afb      	ldrb	r3, [r7, #11]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	72fb      	strb	r3, [r7, #11]
          break;
 800bfce:	e021      	b.n	800c014 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfd6:	699b      	ldr	r3, [r3, #24]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00b      	beq.n	800bff4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfe2:	699b      	ldr	r3, [r3, #24]
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	7c12      	ldrb	r2, [r2, #16]
 800bfe8:	f107 0108 	add.w	r1, r7, #8
 800bfec:	4610      	mov	r0, r2
 800bfee:	4798      	blx	r3
 800bff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bff2:	e00f      	b.n	800c014 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bff4:	6839      	ldr	r1, [r7, #0]
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 fa49 	bl	800c48e <USBD_CtlError>
            err++;
 800bffc:	7afb      	ldrb	r3, [r7, #11]
 800bffe:	3301      	adds	r3, #1
 800c000:	72fb      	strb	r3, [r7, #11]
          break;
 800c002:	e007      	b.n	800c014 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c004:	6839      	ldr	r1, [r7, #0]
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 fa41 	bl	800c48e <USBD_CtlError>
          err++;
 800c00c:	7afb      	ldrb	r3, [r7, #11]
 800c00e:	3301      	adds	r3, #1
 800c010:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c012:	bf00      	nop
      }
      break;
 800c014:	e037      	b.n	800c086 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	7c1b      	ldrb	r3, [r3, #16]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d109      	bne.n	800c032 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c026:	f107 0208 	add.w	r2, r7, #8
 800c02a:	4610      	mov	r0, r2
 800c02c:	4798      	blx	r3
 800c02e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c030:	e029      	b.n	800c086 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c032:	6839      	ldr	r1, [r7, #0]
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 fa2a 	bl	800c48e <USBD_CtlError>
        err++;
 800c03a:	7afb      	ldrb	r3, [r7, #11]
 800c03c:	3301      	adds	r3, #1
 800c03e:	72fb      	strb	r3, [r7, #11]
      break;
 800c040:	e021      	b.n	800c086 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	7c1b      	ldrb	r3, [r3, #16]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d10d      	bne.n	800c066 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c052:	f107 0208 	add.w	r2, r7, #8
 800c056:	4610      	mov	r0, r2
 800c058:	4798      	blx	r3
 800c05a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	3301      	adds	r3, #1
 800c060:	2207      	movs	r2, #7
 800c062:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c064:	e00f      	b.n	800c086 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 fa10 	bl	800c48e <USBD_CtlError>
        err++;
 800c06e:	7afb      	ldrb	r3, [r7, #11]
 800c070:	3301      	adds	r3, #1
 800c072:	72fb      	strb	r3, [r7, #11]
      break;
 800c074:	e007      	b.n	800c086 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c076:	6839      	ldr	r1, [r7, #0]
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 fa08 	bl	800c48e <USBD_CtlError>
      err++;
 800c07e:	7afb      	ldrb	r3, [r7, #11]
 800c080:	3301      	adds	r3, #1
 800c082:	72fb      	strb	r3, [r7, #11]
      break;
 800c084:	bf00      	nop
  }

  if (err != 0U)
 800c086:	7afb      	ldrb	r3, [r7, #11]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d11e      	bne.n	800c0ca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	88db      	ldrh	r3, [r3, #6]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d016      	beq.n	800c0c2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c094:	893b      	ldrh	r3, [r7, #8]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00e      	beq.n	800c0b8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	88da      	ldrh	r2, [r3, #6]
 800c09e:	893b      	ldrh	r3, [r7, #8]
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	bf28      	it	cs
 800c0a4:	4613      	movcs	r3, r2
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c0aa:	893b      	ldrh	r3, [r7, #8]
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	68f9      	ldr	r1, [r7, #12]
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 fa5d 	bl	800c570 <USBD_CtlSendData>
 800c0b6:	e009      	b.n	800c0cc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c0b8:	6839      	ldr	r1, [r7, #0]
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 f9e7 	bl	800c48e <USBD_CtlError>
 800c0c0:	e004      	b.n	800c0cc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f000 faae 	bl	800c624 <USBD_CtlSendStatus>
 800c0c8:	e000      	b.n	800c0cc <USBD_GetDescriptor+0x2cc>
    return;
 800c0ca:	bf00      	nop
  }
}
 800c0cc:	3710      	adds	r7, #16
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop

0800c0d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	889b      	ldrh	r3, [r3, #4]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d131      	bne.n	800c14a <USBD_SetAddress+0x76>
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	88db      	ldrh	r3, [r3, #6]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d12d      	bne.n	800c14a <USBD_SetAddress+0x76>
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	885b      	ldrh	r3, [r3, #2]
 800c0f2:	2b7f      	cmp	r3, #127	; 0x7f
 800c0f4:	d829      	bhi.n	800c14a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	885b      	ldrh	r3, [r3, #2]
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c100:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	2b03      	cmp	r3, #3
 800c10c:	d104      	bne.n	800c118 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c10e:	6839      	ldr	r1, [r7, #0]
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 f9bc 	bl	800c48e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c116:	e01d      	b.n	800c154 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	7bfa      	ldrb	r2, [r7, #15]
 800c11c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c120:	7bfb      	ldrb	r3, [r7, #15]
 800c122:	4619      	mov	r1, r3
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f003 fcc5 	bl	800fab4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 fa7a 	bl	800c624 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c130:	7bfb      	ldrb	r3, [r7, #15]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d004      	beq.n	800c140 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2202      	movs	r2, #2
 800c13a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c13e:	e009      	b.n	800c154 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c148:	e004      	b.n	800c154 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c14a:	6839      	ldr	r1, [r7, #0]
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 f99e 	bl	800c48e <USBD_CtlError>
  }
}
 800c152:	bf00      	nop
 800c154:	bf00      	nop
 800c156:	3710      	adds	r7, #16
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}

0800c15c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b084      	sub	sp, #16
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
 800c164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c166:	2300      	movs	r3, #0
 800c168:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	885b      	ldrh	r3, [r3, #2]
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	4b4e      	ldr	r3, [pc, #312]	; (800c2ac <USBD_SetConfig+0x150>)
 800c172:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c174:	4b4d      	ldr	r3, [pc, #308]	; (800c2ac <USBD_SetConfig+0x150>)
 800c176:	781b      	ldrb	r3, [r3, #0]
 800c178:	2b01      	cmp	r3, #1
 800c17a:	d905      	bls.n	800c188 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c17c:	6839      	ldr	r1, [r7, #0]
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f985 	bl	800c48e <USBD_CtlError>
    return USBD_FAIL;
 800c184:	2303      	movs	r3, #3
 800c186:	e08c      	b.n	800c2a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c18e:	b2db      	uxtb	r3, r3
 800c190:	2b02      	cmp	r3, #2
 800c192:	d002      	beq.n	800c19a <USBD_SetConfig+0x3e>
 800c194:	2b03      	cmp	r3, #3
 800c196:	d029      	beq.n	800c1ec <USBD_SetConfig+0x90>
 800c198:	e075      	b.n	800c286 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c19a:	4b44      	ldr	r3, [pc, #272]	; (800c2ac <USBD_SetConfig+0x150>)
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d020      	beq.n	800c1e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c1a2:	4b42      	ldr	r3, [pc, #264]	; (800c2ac <USBD_SetConfig+0x150>)
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1ac:	4b3f      	ldr	r3, [pc, #252]	; (800c2ac <USBD_SetConfig+0x150>)
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f7fe ffe7 	bl	800b186 <USBD_SetClassConfig>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c1bc:	7bfb      	ldrb	r3, [r7, #15]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d008      	beq.n	800c1d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c1c2:	6839      	ldr	r1, [r7, #0]
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 f962 	bl	800c48e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2202      	movs	r2, #2
 800c1ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c1d2:	e065      	b.n	800c2a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 fa25 	bl	800c624 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2203      	movs	r2, #3
 800c1de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c1e2:	e05d      	b.n	800c2a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 fa1d 	bl	800c624 <USBD_CtlSendStatus>
      break;
 800c1ea:	e059      	b.n	800c2a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c1ec:	4b2f      	ldr	r3, [pc, #188]	; (800c2ac <USBD_SetConfig+0x150>)
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d112      	bne.n	800c21a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2202      	movs	r2, #2
 800c1f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c1fc:	4b2b      	ldr	r3, [pc, #172]	; (800c2ac <USBD_SetConfig+0x150>)
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	461a      	mov	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c206:	4b29      	ldr	r3, [pc, #164]	; (800c2ac <USBD_SetConfig+0x150>)
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	4619      	mov	r1, r3
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f7fe ffd6 	bl	800b1be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 fa06 	bl	800c624 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c218:	e042      	b.n	800c2a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c21a:	4b24      	ldr	r3, [pc, #144]	; (800c2ac <USBD_SetConfig+0x150>)
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	461a      	mov	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	429a      	cmp	r2, r3
 800c226:	d02a      	beq.n	800c27e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	4619      	mov	r1, r3
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f7fe ffc4 	bl	800b1be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c236:	4b1d      	ldr	r3, [pc, #116]	; (800c2ac <USBD_SetConfig+0x150>)
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	461a      	mov	r2, r3
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c240:	4b1a      	ldr	r3, [pc, #104]	; (800c2ac <USBD_SetConfig+0x150>)
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	4619      	mov	r1, r3
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f7fe ff9d 	bl	800b186 <USBD_SetClassConfig>
 800c24c:	4603      	mov	r3, r0
 800c24e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c250:	7bfb      	ldrb	r3, [r7, #15]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d00f      	beq.n	800c276 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c256:	6839      	ldr	r1, [r7, #0]
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 f918 	bl	800c48e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	b2db      	uxtb	r3, r3
 800c264:	4619      	mov	r1, r3
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f7fe ffa9 	bl	800b1be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2202      	movs	r2, #2
 800c270:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c274:	e014      	b.n	800c2a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f9d4 	bl	800c624 <USBD_CtlSendStatus>
      break;
 800c27c:	e010      	b.n	800c2a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f9d0 	bl	800c624 <USBD_CtlSendStatus>
      break;
 800c284:	e00c      	b.n	800c2a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c286:	6839      	ldr	r1, [r7, #0]
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f000 f900 	bl	800c48e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c28e:	4b07      	ldr	r3, [pc, #28]	; (800c2ac <USBD_SetConfig+0x150>)
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	4619      	mov	r1, r3
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7fe ff92 	bl	800b1be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c29a:	2303      	movs	r3, #3
 800c29c:	73fb      	strb	r3, [r7, #15]
      break;
 800c29e:	bf00      	nop
  }

  return ret;
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3710      	adds	r7, #16
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	2000a6fc 	.word	0x2000a6fc

0800c2b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	88db      	ldrh	r3, [r3, #6]
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d004      	beq.n	800c2cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c2c2:	6839      	ldr	r1, [r7, #0]
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 f8e2 	bl	800c48e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c2ca:	e023      	b.n	800c314 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	dc02      	bgt.n	800c2de <USBD_GetConfig+0x2e>
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	dc03      	bgt.n	800c2e4 <USBD_GetConfig+0x34>
 800c2dc:	e015      	b.n	800c30a <USBD_GetConfig+0x5a>
 800c2de:	2b03      	cmp	r3, #3
 800c2e0:	d00b      	beq.n	800c2fa <USBD_GetConfig+0x4a>
 800c2e2:	e012      	b.n	800c30a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	3308      	adds	r3, #8
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 f93c 	bl	800c570 <USBD_CtlSendData>
        break;
 800c2f8:	e00c      	b.n	800c314 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	3304      	adds	r3, #4
 800c2fe:	2201      	movs	r2, #1
 800c300:	4619      	mov	r1, r3
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 f934 	bl	800c570 <USBD_CtlSendData>
        break;
 800c308:	e004      	b.n	800c314 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c30a:	6839      	ldr	r1, [r7, #0]
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 f8be 	bl	800c48e <USBD_CtlError>
        break;
 800c312:	bf00      	nop
}
 800c314:	bf00      	nop
 800c316:	3708      	adds	r7, #8
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	3b01      	subs	r3, #1
 800c330:	2b02      	cmp	r3, #2
 800c332:	d81e      	bhi.n	800c372 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	88db      	ldrh	r3, [r3, #6]
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d004      	beq.n	800c346 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c33c:	6839      	ldr	r1, [r7, #0]
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 f8a5 	bl	800c48e <USBD_CtlError>
        break;
 800c344:	e01a      	b.n	800c37c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2201      	movs	r2, #1
 800c34a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c352:	2b00      	cmp	r3, #0
 800c354:	d005      	beq.n	800c362 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	f043 0202 	orr.w	r2, r3, #2
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	330c      	adds	r3, #12
 800c366:	2202      	movs	r2, #2
 800c368:	4619      	mov	r1, r3
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 f900 	bl	800c570 <USBD_CtlSendData>
      break;
 800c370:	e004      	b.n	800c37c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c372:	6839      	ldr	r1, [r7, #0]
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 f88a 	bl	800c48e <USBD_CtlError>
      break;
 800c37a:	bf00      	nop
  }
}
 800c37c:	bf00      	nop
 800c37e:	3708      	adds	r7, #8
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	885b      	ldrh	r3, [r3, #2]
 800c392:	2b01      	cmp	r3, #1
 800c394:	d107      	bne.n	800c3a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2201      	movs	r2, #1
 800c39a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 f940 	bl	800c624 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c3a4:	e013      	b.n	800c3ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	885b      	ldrh	r3, [r3, #2]
 800c3aa:	2b02      	cmp	r3, #2
 800c3ac:	d10b      	bne.n	800c3c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	889b      	ldrh	r3, [r3, #4]
 800c3b2:	0a1b      	lsrs	r3, r3, #8
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	b2da      	uxtb	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 f930 	bl	800c624 <USBD_CtlSendStatus>
}
 800c3c4:	e003      	b.n	800c3ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c3c6:	6839      	ldr	r1, [r7, #0]
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 f860 	bl	800c48e <USBD_CtlError>
}
 800c3ce:	bf00      	nop
 800c3d0:	3708      	adds	r7, #8
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}

0800c3d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b082      	sub	sp, #8
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	6078      	str	r0, [r7, #4]
 800c3de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	2b02      	cmp	r3, #2
 800c3ec:	d80b      	bhi.n	800c406 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	885b      	ldrh	r3, [r3, #2]
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d10c      	bne.n	800c410 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 f910 	bl	800c624 <USBD_CtlSendStatus>
      }
      break;
 800c404:	e004      	b.n	800c410 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c406:	6839      	ldr	r1, [r7, #0]
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 f840 	bl	800c48e <USBD_CtlError>
      break;
 800c40e:	e000      	b.n	800c412 <USBD_ClrFeature+0x3c>
      break;
 800c410:	bf00      	nop
  }
}
 800c412:	bf00      	nop
 800c414:	3708      	adds	r7, #8
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b084      	sub	sp, #16
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
 800c422:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	781a      	ldrb	r2, [r3, #0]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	3301      	adds	r3, #1
 800c434:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	781a      	ldrb	r2, [r3, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	3301      	adds	r3, #1
 800c442:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c444:	68f8      	ldr	r0, [r7, #12]
 800c446:	f7ff fa41 	bl	800b8cc <SWAPBYTE>
 800c44a:	4603      	mov	r3, r0
 800c44c:	461a      	mov	r2, r3
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	3301      	adds	r3, #1
 800c456:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	3301      	adds	r3, #1
 800c45c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c45e:	68f8      	ldr	r0, [r7, #12]
 800c460:	f7ff fa34 	bl	800b8cc <SWAPBYTE>
 800c464:	4603      	mov	r3, r0
 800c466:	461a      	mov	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	3301      	adds	r3, #1
 800c470:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	3301      	adds	r3, #1
 800c476:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c478:	68f8      	ldr	r0, [r7, #12]
 800c47a:	f7ff fa27 	bl	800b8cc <SWAPBYTE>
 800c47e:	4603      	mov	r3, r0
 800c480:	461a      	mov	r2, r3
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	80da      	strh	r2, [r3, #6]
}
 800c486:	bf00      	nop
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b082      	sub	sp, #8
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
 800c496:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c498:	2180      	movs	r1, #128	; 0x80
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f003 faa0 	bl	800f9e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c4a0:	2100      	movs	r1, #0
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f003 fa9c 	bl	800f9e0 <USBD_LL_StallEP>
}
 800c4a8:	bf00      	nop
 800c4aa:	3708      	adds	r7, #8
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b086      	sub	sp, #24
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d036      	beq.n	800c534 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c4ca:	6938      	ldr	r0, [r7, #16]
 800c4cc:	f000 f836 	bl	800c53c <USBD_GetLen>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	005b      	lsls	r3, r3, #1
 800c4d8:	b29a      	uxth	r2, r3
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c4de:	7dfb      	ldrb	r3, [r7, #23]
 800c4e0:	68ba      	ldr	r2, [r7, #8]
 800c4e2:	4413      	add	r3, r2
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	7812      	ldrb	r2, [r2, #0]
 800c4e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c4ea:	7dfb      	ldrb	r3, [r7, #23]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c4f0:	7dfb      	ldrb	r3, [r7, #23]
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	4413      	add	r3, r2
 800c4f6:	2203      	movs	r2, #3
 800c4f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c4fa:	7dfb      	ldrb	r3, [r7, #23]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c500:	e013      	b.n	800c52a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c502:	7dfb      	ldrb	r3, [r7, #23]
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	4413      	add	r3, r2
 800c508:	693a      	ldr	r2, [r7, #16]
 800c50a:	7812      	ldrb	r2, [r2, #0]
 800c50c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	3301      	adds	r3, #1
 800c512:	613b      	str	r3, [r7, #16]
    idx++;
 800c514:	7dfb      	ldrb	r3, [r7, #23]
 800c516:	3301      	adds	r3, #1
 800c518:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c51a:	7dfb      	ldrb	r3, [r7, #23]
 800c51c:	68ba      	ldr	r2, [r7, #8]
 800c51e:	4413      	add	r3, r2
 800c520:	2200      	movs	r2, #0
 800c522:	701a      	strb	r2, [r3, #0]
    idx++;
 800c524:	7dfb      	ldrb	r3, [r7, #23]
 800c526:	3301      	adds	r3, #1
 800c528:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1e7      	bne.n	800c502 <USBD_GetString+0x52>
 800c532:	e000      	b.n	800c536 <USBD_GetString+0x86>
    return;
 800c534:	bf00      	nop
  }
}
 800c536:	3718      	adds	r7, #24
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b085      	sub	sp, #20
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c544:	2300      	movs	r3, #0
 800c546:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c54c:	e005      	b.n	800c55a <USBD_GetLen+0x1e>
  {
    len++;
 800c54e:	7bfb      	ldrb	r3, [r7, #15]
 800c550:	3301      	adds	r3, #1
 800c552:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	3301      	adds	r3, #1
 800c558:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	781b      	ldrb	r3, [r3, #0]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d1f5      	bne.n	800c54e <USBD_GetLen+0x12>
  }

  return len;
 800c562:	7bfb      	ldrb	r3, [r7, #15]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3714      	adds	r7, #20
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2202      	movs	r2, #2
 800c580:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	68ba      	ldr	r2, [r7, #8]
 800c594:	2100      	movs	r1, #0
 800c596:	68f8      	ldr	r0, [r7, #12]
 800c598:	f003 faab 	bl	800faf2 <USBD_LL_Transmit>

  return USBD_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b084      	sub	sp, #16
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	60f8      	str	r0, [r7, #12]
 800c5ae:	60b9      	str	r1, [r7, #8]
 800c5b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	2100      	movs	r1, #0
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	f003 fa9a 	bl	800faf2 <USBD_LL_Transmit>

  return USBD_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3710      	adds	r7, #16
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}

0800c5c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2203      	movs	r2, #3
 800c5d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	68ba      	ldr	r2, [r7, #8]
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	68f8      	ldr	r0, [r7, #12]
 800c5f4:	f003 fa9e 	bl	800fb34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b084      	sub	sp, #16
 800c606:	af00      	add	r7, sp, #0
 800c608:	60f8      	str	r0, [r7, #12]
 800c60a:	60b9      	str	r1, [r7, #8]
 800c60c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	68ba      	ldr	r2, [r7, #8]
 800c612:	2100      	movs	r1, #0
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f003 fa8d 	bl	800fb34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2204      	movs	r2, #4
 800c630:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c634:	2300      	movs	r3, #0
 800c636:	2200      	movs	r2, #0
 800c638:	2100      	movs	r1, #0
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f003 fa59 	bl	800faf2 <USBD_LL_Transmit>

  return USBD_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3708      	adds	r7, #8
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b082      	sub	sp, #8
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2205      	movs	r2, #5
 800c656:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c65a:	2300      	movs	r3, #0
 800c65c:	2200      	movs	r2, #0
 800c65e:	2100      	movs	r1, #0
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f003 fa67 	bl	800fb34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c666:	2300      	movs	r3, #0
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3708      	adds	r7, #8
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <__NVIC_SetPriority>:
{
 800c670:	b480      	push	{r7}
 800c672:	b083      	sub	sp, #12
 800c674:	af00      	add	r7, sp, #0
 800c676:	4603      	mov	r3, r0
 800c678:	6039      	str	r1, [r7, #0]
 800c67a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c67c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c680:	2b00      	cmp	r3, #0
 800c682:	db0a      	blt.n	800c69a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	b2da      	uxtb	r2, r3
 800c688:	490c      	ldr	r1, [pc, #48]	; (800c6bc <__NVIC_SetPriority+0x4c>)
 800c68a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c68e:	0112      	lsls	r2, r2, #4
 800c690:	b2d2      	uxtb	r2, r2
 800c692:	440b      	add	r3, r1
 800c694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c698:	e00a      	b.n	800c6b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	b2da      	uxtb	r2, r3
 800c69e:	4908      	ldr	r1, [pc, #32]	; (800c6c0 <__NVIC_SetPriority+0x50>)
 800c6a0:	79fb      	ldrb	r3, [r7, #7]
 800c6a2:	f003 030f 	and.w	r3, r3, #15
 800c6a6:	3b04      	subs	r3, #4
 800c6a8:	0112      	lsls	r2, r2, #4
 800c6aa:	b2d2      	uxtb	r2, r2
 800c6ac:	440b      	add	r3, r1
 800c6ae:	761a      	strb	r2, [r3, #24]
}
 800c6b0:	bf00      	nop
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr
 800c6bc:	e000e100 	.word	0xe000e100
 800c6c0:	e000ed00 	.word	0xe000ed00

0800c6c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c6c8:	4b05      	ldr	r3, [pc, #20]	; (800c6e0 <SysTick_Handler+0x1c>)
 800c6ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c6cc:	f001 fd4e 	bl	800e16c <xTaskGetSchedulerState>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d001      	beq.n	800c6da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c6d6:	f002 fb37 	bl	800ed48 <xPortSysTickHandler>
  }
}
 800c6da:	bf00      	nop
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	e000e010 	.word	0xe000e010

0800c6e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	f06f 0004 	mvn.w	r0, #4
 800c6ee:	f7ff ffbf 	bl	800c670 <__NVIC_SetPriority>
#endif
}
 800c6f2:	bf00      	nop
 800c6f4:	bd80      	pop	{r7, pc}
	...

0800c6f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c6f8:	b480      	push	{r7}
 800c6fa:	b083      	sub	sp, #12
 800c6fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6fe:	f3ef 8305 	mrs	r3, IPSR
 800c702:	603b      	str	r3, [r7, #0]
  return(result);
 800c704:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c706:	2b00      	cmp	r3, #0
 800c708:	d003      	beq.n	800c712 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c70a:	f06f 0305 	mvn.w	r3, #5
 800c70e:	607b      	str	r3, [r7, #4]
 800c710:	e00c      	b.n	800c72c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c712:	4b0a      	ldr	r3, [pc, #40]	; (800c73c <osKernelInitialize+0x44>)
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d105      	bne.n	800c726 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c71a:	4b08      	ldr	r3, [pc, #32]	; (800c73c <osKernelInitialize+0x44>)
 800c71c:	2201      	movs	r2, #1
 800c71e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c720:	2300      	movs	r3, #0
 800c722:	607b      	str	r3, [r7, #4]
 800c724:	e002      	b.n	800c72c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c72a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c72c:	687b      	ldr	r3, [r7, #4]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	370c      	adds	r7, #12
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr
 800c73a:	bf00      	nop
 800c73c:	2000a700 	.word	0x2000a700

0800c740 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c746:	f3ef 8305 	mrs	r3, IPSR
 800c74a:	603b      	str	r3, [r7, #0]
  return(result);
 800c74c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d003      	beq.n	800c75a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c752:	f06f 0305 	mvn.w	r3, #5
 800c756:	607b      	str	r3, [r7, #4]
 800c758:	e010      	b.n	800c77c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c75a:	4b0b      	ldr	r3, [pc, #44]	; (800c788 <osKernelStart+0x48>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d109      	bne.n	800c776 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c762:	f7ff ffbf 	bl	800c6e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c766:	4b08      	ldr	r3, [pc, #32]	; (800c788 <osKernelStart+0x48>)
 800c768:	2202      	movs	r2, #2
 800c76a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c76c:	f001 f87c 	bl	800d868 <vTaskStartScheduler>
      stat = osOK;
 800c770:	2300      	movs	r3, #0
 800c772:	607b      	str	r3, [r7, #4]
 800c774:	e002      	b.n	800c77c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c77a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c77c:	687b      	ldr	r3, [r7, #4]
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	2000a700 	.word	0x2000a700

0800c78c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b08e      	sub	sp, #56	; 0x38
 800c790:	af04      	add	r7, sp, #16
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c798:	2300      	movs	r3, #0
 800c79a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c79c:	f3ef 8305 	mrs	r3, IPSR
 800c7a0:	617b      	str	r3, [r7, #20]
  return(result);
 800c7a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d17e      	bne.n	800c8a6 <osThreadNew+0x11a>
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d07b      	beq.n	800c8a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c7ae:	2380      	movs	r3, #128	; 0x80
 800c7b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c7b2:	2318      	movs	r3, #24
 800c7b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c7ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d045      	beq.n	800c852 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d002      	beq.n	800c7d4 <osThreadNew+0x48>
        name = attr->name;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	699b      	ldr	r3, [r3, #24]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d002      	beq.n	800c7e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	699b      	ldr	r3, [r3, #24]
 800c7e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d008      	beq.n	800c7fa <osThreadNew+0x6e>
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	2b38      	cmp	r3, #56	; 0x38
 800c7ec:	d805      	bhi.n	800c7fa <osThreadNew+0x6e>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	f003 0301 	and.w	r3, r3, #1
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d001      	beq.n	800c7fe <osThreadNew+0x72>
        return (NULL);
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	e054      	b.n	800c8a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	695b      	ldr	r3, [r3, #20]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d003      	beq.n	800c80e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	695b      	ldr	r3, [r3, #20]
 800c80a:	089b      	lsrs	r3, r3, #2
 800c80c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d00e      	beq.n	800c834 <osThreadNew+0xa8>
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	68db      	ldr	r3, [r3, #12]
 800c81a:	2bbb      	cmp	r3, #187	; 0xbb
 800c81c:	d90a      	bls.n	800c834 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c822:	2b00      	cmp	r3, #0
 800c824:	d006      	beq.n	800c834 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	695b      	ldr	r3, [r3, #20]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d002      	beq.n	800c834 <osThreadNew+0xa8>
        mem = 1;
 800c82e:	2301      	movs	r3, #1
 800c830:	61bb      	str	r3, [r7, #24]
 800c832:	e010      	b.n	800c856 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d10c      	bne.n	800c856 <osThreadNew+0xca>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d108      	bne.n	800c856 <osThreadNew+0xca>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	691b      	ldr	r3, [r3, #16]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d104      	bne.n	800c856 <osThreadNew+0xca>
          mem = 0;
 800c84c:	2300      	movs	r3, #0
 800c84e:	61bb      	str	r3, [r7, #24]
 800c850:	e001      	b.n	800c856 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c852:	2300      	movs	r3, #0
 800c854:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c856:	69bb      	ldr	r3, [r7, #24]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d110      	bne.n	800c87e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c864:	9202      	str	r2, [sp, #8]
 800c866:	9301      	str	r3, [sp, #4]
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	9300      	str	r3, [sp, #0]
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	6a3a      	ldr	r2, [r7, #32]
 800c870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c872:	68f8      	ldr	r0, [r7, #12]
 800c874:	f000 fe0c 	bl	800d490 <xTaskCreateStatic>
 800c878:	4603      	mov	r3, r0
 800c87a:	613b      	str	r3, [r7, #16]
 800c87c:	e013      	b.n	800c8a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c87e:	69bb      	ldr	r3, [r7, #24]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d110      	bne.n	800c8a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c884:	6a3b      	ldr	r3, [r7, #32]
 800c886:	b29a      	uxth	r2, r3
 800c888:	f107 0310 	add.w	r3, r7, #16
 800c88c:	9301      	str	r3, [sp, #4]
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	9300      	str	r3, [sp, #0]
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c896:	68f8      	ldr	r0, [r7, #12]
 800c898:	f000 fe57 	bl	800d54a <xTaskCreate>
 800c89c:	4603      	mov	r3, r0
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d001      	beq.n	800c8a6 <osThreadNew+0x11a>
            hTask = NULL;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c8a6:	693b      	ldr	r3, [r7, #16]
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3728      	adds	r7, #40	; 0x28
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}

0800c8b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c8b8:	f3ef 8305 	mrs	r3, IPSR
 800c8bc:	60bb      	str	r3, [r7, #8]
  return(result);
 800c8be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d003      	beq.n	800c8cc <osDelay+0x1c>
    stat = osErrorISR;
 800c8c4:	f06f 0305 	mvn.w	r3, #5
 800c8c8:	60fb      	str	r3, [r7, #12]
 800c8ca:	e007      	b.n	800c8dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d002      	beq.n	800c8dc <osDelay+0x2c>
      vTaskDelay(ticks);
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f000 ff92 	bl	800d800 <vTaskDelay>
    }
  }

  return (stat);
 800c8dc:	68fb      	ldr	r3, [r7, #12]
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3710      	adds	r7, #16
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
	...

0800c8e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	4a07      	ldr	r2, [pc, #28]	; (800c914 <vApplicationGetIdleTaskMemory+0x2c>)
 800c8f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	4a06      	ldr	r2, [pc, #24]	; (800c918 <vApplicationGetIdleTaskMemory+0x30>)
 800c8fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2280      	movs	r2, #128	; 0x80
 800c904:	601a      	str	r2, [r3, #0]
}
 800c906:	bf00      	nop
 800c908:	3714      	adds	r7, #20
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	2000a704 	.word	0x2000a704
 800c918:	2000a7c0 	.word	0x2000a7c0

0800c91c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c91c:	b480      	push	{r7}
 800c91e:	b085      	sub	sp, #20
 800c920:	af00      	add	r7, sp, #0
 800c922:	60f8      	str	r0, [r7, #12]
 800c924:	60b9      	str	r1, [r7, #8]
 800c926:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	4a07      	ldr	r2, [pc, #28]	; (800c948 <vApplicationGetTimerTaskMemory+0x2c>)
 800c92c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	4a06      	ldr	r2, [pc, #24]	; (800c94c <vApplicationGetTimerTaskMemory+0x30>)
 800c932:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c93a:	601a      	str	r2, [r3, #0]
}
 800c93c:	bf00      	nop
 800c93e:	3714      	adds	r7, #20
 800c940:	46bd      	mov	sp, r7
 800c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c946:	4770      	bx	lr
 800c948:	2000a9c0 	.word	0x2000a9c0
 800c94c:	2000aa7c 	.word	0x2000aa7c

0800c950 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f103 0208 	add.w	r2, r3, #8
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c968:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f103 0208 	add.w	r2, r3, #8
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f103 0208 	add.w	r2, r3, #8
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c984:	bf00      	nop
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c99e:	bf00      	nop
 800c9a0:	370c      	adds	r7, #12
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr

0800c9aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c9aa:	b480      	push	{r7}
 800c9ac:	b085      	sub	sp, #20
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
 800c9b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	689a      	ldr	r2, [r3, #8]
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	683a      	ldr	r2, [r7, #0]
 800c9ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	683a      	ldr	r2, [r7, #0]
 800c9d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	1c5a      	adds	r2, r3, #1
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	601a      	str	r2, [r3, #0]
}
 800c9e6:	bf00      	nop
 800c9e8:	3714      	adds	r7, #20
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr

0800c9f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c9f2:	b480      	push	{r7}
 800c9f4:	b085      	sub	sp, #20
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
 800c9fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca08:	d103      	bne.n	800ca12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	691b      	ldr	r3, [r3, #16]
 800ca0e:	60fb      	str	r3, [r7, #12]
 800ca10:	e00c      	b.n	800ca2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	3308      	adds	r3, #8
 800ca16:	60fb      	str	r3, [r7, #12]
 800ca18:	e002      	b.n	800ca20 <vListInsert+0x2e>
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	60fb      	str	r3, [r7, #12]
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d2f6      	bcs.n	800ca1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	685a      	ldr	r2, [r3, #4]
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	683a      	ldr	r2, [r7, #0]
 800ca3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	68fa      	ldr	r2, [r7, #12]
 800ca40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	683a      	ldr	r2, [r7, #0]
 800ca46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	1c5a      	adds	r2, r3, #1
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	601a      	str	r2, [r3, #0]
}
 800ca58:	bf00      	nop
 800ca5a:	3714      	adds	r7, #20
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca62:	4770      	bx	lr

0800ca64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ca64:	b480      	push	{r7}
 800ca66:	b085      	sub	sp, #20
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	691b      	ldr	r3, [r3, #16]
 800ca70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	6892      	ldr	r2, [r2, #8]
 800ca7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	689b      	ldr	r3, [r3, #8]
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	6852      	ldr	r2, [r2, #4]
 800ca84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d103      	bne.n	800ca98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	689a      	ldr	r2, [r3, #8]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	1e5a      	subs	r2, r3, #1
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
}
 800caac:	4618      	mov	r0, r3
 800caae:	3714      	adds	r7, #20
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d10a      	bne.n	800cae2 <xQueueGenericReset+0x2a>
	__asm volatile
 800cacc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad0:	f383 8811 	msr	BASEPRI, r3
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	60bb      	str	r3, [r7, #8]
}
 800cade:	bf00      	nop
 800cae0:	e7fe      	b.n	800cae0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cae2:	f002 f89f 	bl	800ec24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681a      	ldr	r2, [r3, #0]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caee:	68f9      	ldr	r1, [r7, #12]
 800caf0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800caf2:	fb01 f303 	mul.w	r3, r1, r3
 800caf6:	441a      	add	r2, r3
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2200      	movs	r2, #0
 800cb00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb12:	3b01      	subs	r3, #1
 800cb14:	68f9      	ldr	r1, [r7, #12]
 800cb16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cb18:	fb01 f303 	mul.w	r3, r1, r3
 800cb1c:	441a      	add	r2, r3
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	22ff      	movs	r2, #255	; 0xff
 800cb26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	22ff      	movs	r2, #255	; 0xff
 800cb2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d114      	bne.n	800cb62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	691b      	ldr	r3, [r3, #16]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d01a      	beq.n	800cb76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	3310      	adds	r3, #16
 800cb44:	4618      	mov	r0, r3
 800cb46:	f001 f929 	bl	800dd9c <xTaskRemoveFromEventList>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d012      	beq.n	800cb76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cb50:	4b0c      	ldr	r3, [pc, #48]	; (800cb84 <xQueueGenericReset+0xcc>)
 800cb52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb56:	601a      	str	r2, [r3, #0]
 800cb58:	f3bf 8f4f 	dsb	sy
 800cb5c:	f3bf 8f6f 	isb	sy
 800cb60:	e009      	b.n	800cb76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	3310      	adds	r3, #16
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7ff fef2 	bl	800c950 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	3324      	adds	r3, #36	; 0x24
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7ff feed 	bl	800c950 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cb76:	f002 f885 	bl	800ec84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cb7a:	2301      	movs	r3, #1
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3710      	adds	r7, #16
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	e000ed04 	.word	0xe000ed04

0800cb88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b08e      	sub	sp, #56	; 0x38
 800cb8c:	af02      	add	r7, sp, #8
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	607a      	str	r2, [r7, #4]
 800cb94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d10a      	bne.n	800cbb2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cba0:	f383 8811 	msr	BASEPRI, r3
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	f3bf 8f4f 	dsb	sy
 800cbac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cbae:	bf00      	nop
 800cbb0:	e7fe      	b.n	800cbb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d10a      	bne.n	800cbce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbbc:	f383 8811 	msr	BASEPRI, r3
 800cbc0:	f3bf 8f6f 	isb	sy
 800cbc4:	f3bf 8f4f 	dsb	sy
 800cbc8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cbca:	bf00      	nop
 800cbcc:	e7fe      	b.n	800cbcc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d002      	beq.n	800cbda <xQueueGenericCreateStatic+0x52>
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d001      	beq.n	800cbde <xQueueGenericCreateStatic+0x56>
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e000      	b.n	800cbe0 <xQueueGenericCreateStatic+0x58>
 800cbde:	2300      	movs	r3, #0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d10a      	bne.n	800cbfa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe8:	f383 8811 	msr	BASEPRI, r3
 800cbec:	f3bf 8f6f 	isb	sy
 800cbf0:	f3bf 8f4f 	dsb	sy
 800cbf4:	623b      	str	r3, [r7, #32]
}
 800cbf6:	bf00      	nop
 800cbf8:	e7fe      	b.n	800cbf8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d102      	bne.n	800cc06 <xQueueGenericCreateStatic+0x7e>
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d101      	bne.n	800cc0a <xQueueGenericCreateStatic+0x82>
 800cc06:	2301      	movs	r3, #1
 800cc08:	e000      	b.n	800cc0c <xQueueGenericCreateStatic+0x84>
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d10a      	bne.n	800cc26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	61fb      	str	r3, [r7, #28]
}
 800cc22:	bf00      	nop
 800cc24:	e7fe      	b.n	800cc24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cc26:	2350      	movs	r3, #80	; 0x50
 800cc28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	2b50      	cmp	r3, #80	; 0x50
 800cc2e:	d00a      	beq.n	800cc46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc34:	f383 8811 	msr	BASEPRI, r3
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	61bb      	str	r3, [r7, #24]
}
 800cc42:	bf00      	nop
 800cc44:	e7fe      	b.n	800cc44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cc46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d00d      	beq.n	800cc6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc54:	2201      	movs	r2, #1
 800cc56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cc5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc60:	9300      	str	r3, [sp, #0]
 800cc62:	4613      	mov	r3, r2
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	68b9      	ldr	r1, [r7, #8]
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f000 f805 	bl	800cc78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3730      	adds	r7, #48	; 0x30
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	607a      	str	r2, [r7, #4]
 800cc84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d103      	bne.n	800cc94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cc8c:	69bb      	ldr	r3, [r7, #24]
 800cc8e:	69ba      	ldr	r2, [r7, #24]
 800cc90:	601a      	str	r2, [r3, #0]
 800cc92:	e002      	b.n	800cc9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cc94:	69bb      	ldr	r3, [r7, #24]
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	68fa      	ldr	r2, [r7, #12]
 800cc9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cca0:	69bb      	ldr	r3, [r7, #24]
 800cca2:	68ba      	ldr	r2, [r7, #8]
 800cca4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cca6:	2101      	movs	r1, #1
 800cca8:	69b8      	ldr	r0, [r7, #24]
 800ccaa:	f7ff ff05 	bl	800cab8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	78fa      	ldrb	r2, [r7, #3]
 800ccb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ccb6:	bf00      	nop
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
	...

0800ccc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b08e      	sub	sp, #56	; 0x38
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	607a      	str	r2, [r7, #4]
 800cccc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ccd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d10a      	bne.n	800ccf2 <xQueueGenericSend+0x32>
	__asm volatile
 800ccdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce0:	f383 8811 	msr	BASEPRI, r3
 800cce4:	f3bf 8f6f 	isb	sy
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ccee:	bf00      	nop
 800ccf0:	e7fe      	b.n	800ccf0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d103      	bne.n	800cd00 <xQueueGenericSend+0x40>
 800ccf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d101      	bne.n	800cd04 <xQueueGenericSend+0x44>
 800cd00:	2301      	movs	r3, #1
 800cd02:	e000      	b.n	800cd06 <xQueueGenericSend+0x46>
 800cd04:	2300      	movs	r3, #0
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d10a      	bne.n	800cd20 <xQueueGenericSend+0x60>
	__asm volatile
 800cd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0e:	f383 8811 	msr	BASEPRI, r3
 800cd12:	f3bf 8f6f 	isb	sy
 800cd16:	f3bf 8f4f 	dsb	sy
 800cd1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd1c:	bf00      	nop
 800cd1e:	e7fe      	b.n	800cd1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	2b02      	cmp	r3, #2
 800cd24:	d103      	bne.n	800cd2e <xQueueGenericSend+0x6e>
 800cd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d101      	bne.n	800cd32 <xQueueGenericSend+0x72>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e000      	b.n	800cd34 <xQueueGenericSend+0x74>
 800cd32:	2300      	movs	r3, #0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d10a      	bne.n	800cd4e <xQueueGenericSend+0x8e>
	__asm volatile
 800cd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd3c:	f383 8811 	msr	BASEPRI, r3
 800cd40:	f3bf 8f6f 	isb	sy
 800cd44:	f3bf 8f4f 	dsb	sy
 800cd48:	623b      	str	r3, [r7, #32]
}
 800cd4a:	bf00      	nop
 800cd4c:	e7fe      	b.n	800cd4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd4e:	f001 fa0d 	bl	800e16c <xTaskGetSchedulerState>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d102      	bne.n	800cd5e <xQueueGenericSend+0x9e>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d101      	bne.n	800cd62 <xQueueGenericSend+0xa2>
 800cd5e:	2301      	movs	r3, #1
 800cd60:	e000      	b.n	800cd64 <xQueueGenericSend+0xa4>
 800cd62:	2300      	movs	r3, #0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d10a      	bne.n	800cd7e <xQueueGenericSend+0xbe>
	__asm volatile
 800cd68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6c:	f383 8811 	msr	BASEPRI, r3
 800cd70:	f3bf 8f6f 	isb	sy
 800cd74:	f3bf 8f4f 	dsb	sy
 800cd78:	61fb      	str	r3, [r7, #28]
}
 800cd7a:	bf00      	nop
 800cd7c:	e7fe      	b.n	800cd7c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd7e:	f001 ff51 	bl	800ec24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d302      	bcc.n	800cd94 <xQueueGenericSend+0xd4>
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	2b02      	cmp	r3, #2
 800cd92:	d129      	bne.n	800cde8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cd94:	683a      	ldr	r2, [r7, #0]
 800cd96:	68b9      	ldr	r1, [r7, #8]
 800cd98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd9a:	f000 fa0b 	bl	800d1b4 <prvCopyDataToQueue>
 800cd9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d010      	beq.n	800cdca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdaa:	3324      	adds	r3, #36	; 0x24
 800cdac:	4618      	mov	r0, r3
 800cdae:	f000 fff5 	bl	800dd9c <xTaskRemoveFromEventList>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d013      	beq.n	800cde0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cdb8:	4b3f      	ldr	r3, [pc, #252]	; (800ceb8 <xQueueGenericSend+0x1f8>)
 800cdba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdbe:	601a      	str	r2, [r3, #0]
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	f3bf 8f6f 	isb	sy
 800cdc8:	e00a      	b.n	800cde0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d007      	beq.n	800cde0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cdd0:	4b39      	ldr	r3, [pc, #228]	; (800ceb8 <xQueueGenericSend+0x1f8>)
 800cdd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdd6:	601a      	str	r2, [r3, #0]
 800cdd8:	f3bf 8f4f 	dsb	sy
 800cddc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cde0:	f001 ff50 	bl	800ec84 <vPortExitCritical>
				return pdPASS;
 800cde4:	2301      	movs	r3, #1
 800cde6:	e063      	b.n	800ceb0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d103      	bne.n	800cdf6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cdee:	f001 ff49 	bl	800ec84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	e05c      	b.n	800ceb0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cdf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d106      	bne.n	800ce0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdfc:	f107 0314 	add.w	r3, r7, #20
 800ce00:	4618      	mov	r0, r3
 800ce02:	f001 f855 	bl	800deb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ce06:	2301      	movs	r3, #1
 800ce08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ce0a:	f001 ff3b 	bl	800ec84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ce0e:	f000 fd9b 	bl	800d948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ce12:	f001 ff07 	bl	800ec24 <vPortEnterCritical>
 800ce16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce1c:	b25b      	sxtb	r3, r3
 800ce1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce22:	d103      	bne.n	800ce2c <xQueueGenericSend+0x16c>
 800ce24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce26:	2200      	movs	r2, #0
 800ce28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ce32:	b25b      	sxtb	r3, r3
 800ce34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce38:	d103      	bne.n	800ce42 <xQueueGenericSend+0x182>
 800ce3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce42:	f001 ff1f 	bl	800ec84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce46:	1d3a      	adds	r2, r7, #4
 800ce48:	f107 0314 	add.w	r3, r7, #20
 800ce4c:	4611      	mov	r1, r2
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f001 f844 	bl	800dedc <xTaskCheckForTimeOut>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d124      	bne.n	800cea4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ce5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce5c:	f000 faa2 	bl	800d3a4 <prvIsQueueFull>
 800ce60:	4603      	mov	r3, r0
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d018      	beq.n	800ce98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ce66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce68:	3310      	adds	r3, #16
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	4611      	mov	r1, r2
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f000 ff44 	bl	800dcfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ce74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce76:	f000 fa2d 	bl	800d2d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ce7a:	f000 fd73 	bl	800d964 <xTaskResumeAll>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f47f af7c 	bne.w	800cd7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ce86:	4b0c      	ldr	r3, [pc, #48]	; (800ceb8 <xQueueGenericSend+0x1f8>)
 800ce88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce8c:	601a      	str	r2, [r3, #0]
 800ce8e:	f3bf 8f4f 	dsb	sy
 800ce92:	f3bf 8f6f 	isb	sy
 800ce96:	e772      	b.n	800cd7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ce98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce9a:	f000 fa1b 	bl	800d2d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce9e:	f000 fd61 	bl	800d964 <xTaskResumeAll>
 800cea2:	e76c      	b.n	800cd7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cea6:	f000 fa15 	bl	800d2d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ceaa:	f000 fd5b 	bl	800d964 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ceae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3738      	adds	r7, #56	; 0x38
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	e000ed04 	.word	0xe000ed04

0800cebc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b090      	sub	sp, #64	; 0x40
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
 800cec8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d10a      	bne.n	800ceea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ced4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced8:	f383 8811 	msr	BASEPRI, r3
 800cedc:	f3bf 8f6f 	isb	sy
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cee6:	bf00      	nop
 800cee8:	e7fe      	b.n	800cee8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d103      	bne.n	800cef8 <xQueueGenericSendFromISR+0x3c>
 800cef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d101      	bne.n	800cefc <xQueueGenericSendFromISR+0x40>
 800cef8:	2301      	movs	r3, #1
 800cefa:	e000      	b.n	800cefe <xQueueGenericSendFromISR+0x42>
 800cefc:	2300      	movs	r3, #0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d10a      	bne.n	800cf18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cf02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf06:	f383 8811 	msr	BASEPRI, r3
 800cf0a:	f3bf 8f6f 	isb	sy
 800cf0e:	f3bf 8f4f 	dsb	sy
 800cf12:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cf14:	bf00      	nop
 800cf16:	e7fe      	b.n	800cf16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	2b02      	cmp	r3, #2
 800cf1c:	d103      	bne.n	800cf26 <xQueueGenericSendFromISR+0x6a>
 800cf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf22:	2b01      	cmp	r3, #1
 800cf24:	d101      	bne.n	800cf2a <xQueueGenericSendFromISR+0x6e>
 800cf26:	2301      	movs	r3, #1
 800cf28:	e000      	b.n	800cf2c <xQueueGenericSendFromISR+0x70>
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d10a      	bne.n	800cf46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cf30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf34:	f383 8811 	msr	BASEPRI, r3
 800cf38:	f3bf 8f6f 	isb	sy
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	623b      	str	r3, [r7, #32]
}
 800cf42:	bf00      	nop
 800cf44:	e7fe      	b.n	800cf44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf46:	f001 ff4f 	bl	800ede8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cf4a:	f3ef 8211 	mrs	r2, BASEPRI
 800cf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf52:	f383 8811 	msr	BASEPRI, r3
 800cf56:	f3bf 8f6f 	isb	sy
 800cf5a:	f3bf 8f4f 	dsb	sy
 800cf5e:	61fa      	str	r2, [r7, #28]
 800cf60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cf62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cf66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d302      	bcc.n	800cf78 <xQueueGenericSendFromISR+0xbc>
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	2b02      	cmp	r3, #2
 800cf76:	d12f      	bne.n	800cfd8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cf88:	683a      	ldr	r2, [r7, #0]
 800cf8a:	68b9      	ldr	r1, [r7, #8]
 800cf8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf8e:	f000 f911 	bl	800d1b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cf96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf9a:	d112      	bne.n	800cfc2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d016      	beq.n	800cfd2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa6:	3324      	adds	r3, #36	; 0x24
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f000 fef7 	bl	800dd9c <xTaskRemoveFromEventList>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00e      	beq.n	800cfd2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d00b      	beq.n	800cfd2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	601a      	str	r2, [r3, #0]
 800cfc0:	e007      	b.n	800cfd2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cfc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	b2db      	uxtb	r3, r3
 800cfca:	b25a      	sxtb	r2, r3
 800cfcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800cfd6:	e001      	b.n	800cfdc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfde:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cfe6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cfe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3740      	adds	r7, #64	; 0x40
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
	...

0800cff4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b08c      	sub	sp, #48	; 0x30
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	60f8      	str	r0, [r7, #12]
 800cffc:	60b9      	str	r1, [r7, #8]
 800cffe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d000:	2300      	movs	r3, #0
 800d002:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d10a      	bne.n	800d024 <xQueueReceive+0x30>
	__asm volatile
 800d00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d012:	f383 8811 	msr	BASEPRI, r3
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	f3bf 8f4f 	dsb	sy
 800d01e:	623b      	str	r3, [r7, #32]
}
 800d020:	bf00      	nop
 800d022:	e7fe      	b.n	800d022 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d103      	bne.n	800d032 <xQueueReceive+0x3e>
 800d02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d101      	bne.n	800d036 <xQueueReceive+0x42>
 800d032:	2301      	movs	r3, #1
 800d034:	e000      	b.n	800d038 <xQueueReceive+0x44>
 800d036:	2300      	movs	r3, #0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d10a      	bne.n	800d052 <xQueueReceive+0x5e>
	__asm volatile
 800d03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d040:	f383 8811 	msr	BASEPRI, r3
 800d044:	f3bf 8f6f 	isb	sy
 800d048:	f3bf 8f4f 	dsb	sy
 800d04c:	61fb      	str	r3, [r7, #28]
}
 800d04e:	bf00      	nop
 800d050:	e7fe      	b.n	800d050 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d052:	f001 f88b 	bl	800e16c <xTaskGetSchedulerState>
 800d056:	4603      	mov	r3, r0
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d102      	bne.n	800d062 <xQueueReceive+0x6e>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d101      	bne.n	800d066 <xQueueReceive+0x72>
 800d062:	2301      	movs	r3, #1
 800d064:	e000      	b.n	800d068 <xQueueReceive+0x74>
 800d066:	2300      	movs	r3, #0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d10a      	bne.n	800d082 <xQueueReceive+0x8e>
	__asm volatile
 800d06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d070:	f383 8811 	msr	BASEPRI, r3
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	61bb      	str	r3, [r7, #24]
}
 800d07e:	bf00      	nop
 800d080:	e7fe      	b.n	800d080 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d082:	f001 fdcf 	bl	800ec24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d08a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d01f      	beq.n	800d0d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d092:	68b9      	ldr	r1, [r7, #8]
 800d094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d096:	f000 f8f7 	bl	800d288 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d09c:	1e5a      	subs	r2, r3, #1
 800d09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a4:	691b      	ldr	r3, [r3, #16]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d00f      	beq.n	800d0ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ac:	3310      	adds	r3, #16
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f000 fe74 	bl	800dd9c <xTaskRemoveFromEventList>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d007      	beq.n	800d0ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d0ba:	4b3d      	ldr	r3, [pc, #244]	; (800d1b0 <xQueueReceive+0x1bc>)
 800d0bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0c0:	601a      	str	r2, [r3, #0]
 800d0c2:	f3bf 8f4f 	dsb	sy
 800d0c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d0ca:	f001 fddb 	bl	800ec84 <vPortExitCritical>
				return pdPASS;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e069      	b.n	800d1a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d103      	bne.n	800d0e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d0d8:	f001 fdd4 	bl	800ec84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	e062      	b.n	800d1a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d106      	bne.n	800d0f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d0e6:	f107 0310 	add.w	r3, r7, #16
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f000 fee0 	bl	800deb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d0f4:	f001 fdc6 	bl	800ec84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d0f8:	f000 fc26 	bl	800d948 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d0fc:	f001 fd92 	bl	800ec24 <vPortEnterCritical>
 800d100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d102:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d106:	b25b      	sxtb	r3, r3
 800d108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d10c:	d103      	bne.n	800d116 <xQueueReceive+0x122>
 800d10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d110:	2200      	movs	r2, #0
 800d112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d118:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d11c:	b25b      	sxtb	r3, r3
 800d11e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d122:	d103      	bne.n	800d12c <xQueueReceive+0x138>
 800d124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d126:	2200      	movs	r2, #0
 800d128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d12c:	f001 fdaa 	bl	800ec84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d130:	1d3a      	adds	r2, r7, #4
 800d132:	f107 0310 	add.w	r3, r7, #16
 800d136:	4611      	mov	r1, r2
 800d138:	4618      	mov	r0, r3
 800d13a:	f000 fecf 	bl	800dedc <xTaskCheckForTimeOut>
 800d13e:	4603      	mov	r3, r0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d123      	bne.n	800d18c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d146:	f000 f917 	bl	800d378 <prvIsQueueEmpty>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d017      	beq.n	800d180 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d152:	3324      	adds	r3, #36	; 0x24
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	4611      	mov	r1, r2
 800d158:	4618      	mov	r0, r3
 800d15a:	f000 fdcf 	bl	800dcfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d15e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d160:	f000 f8b8 	bl	800d2d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d164:	f000 fbfe 	bl	800d964 <xTaskResumeAll>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d189      	bne.n	800d082 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d16e:	4b10      	ldr	r3, [pc, #64]	; (800d1b0 <xQueueReceive+0x1bc>)
 800d170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d174:	601a      	str	r2, [r3, #0]
 800d176:	f3bf 8f4f 	dsb	sy
 800d17a:	f3bf 8f6f 	isb	sy
 800d17e:	e780      	b.n	800d082 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d182:	f000 f8a7 	bl	800d2d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d186:	f000 fbed 	bl	800d964 <xTaskResumeAll>
 800d18a:	e77a      	b.n	800d082 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d18c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d18e:	f000 f8a1 	bl	800d2d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d192:	f000 fbe7 	bl	800d964 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d198:	f000 f8ee 	bl	800d378 <prvIsQueueEmpty>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	f43f af6f 	beq.w	800d082 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d1a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3730      	adds	r7, #48	; 0x30
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	e000ed04 	.word	0xe000ed04

0800d1b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b086      	sub	sp, #24
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d10d      	bne.n	800d1ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d14d      	bne.n	800d276 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f000 ffe2 	bl	800e1a8 <xTaskPriorityDisinherit>
 800d1e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	609a      	str	r2, [r3, #8]
 800d1ec:	e043      	b.n	800d276 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d119      	bne.n	800d228 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	6858      	ldr	r0, [r3, #4]
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	68b9      	ldr	r1, [r7, #8]
 800d200:	f00c fd24 	bl	8019c4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	685a      	ldr	r2, [r3, #4]
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d20c:	441a      	add	r2, r3
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	685a      	ldr	r2, [r3, #4]
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d32b      	bcc.n	800d276 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681a      	ldr	r2, [r3, #0]
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	605a      	str	r2, [r3, #4]
 800d226:	e026      	b.n	800d276 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	68d8      	ldr	r0, [r3, #12]
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d230:	461a      	mov	r2, r3
 800d232:	68b9      	ldr	r1, [r7, #8]
 800d234:	f00c fd0a 	bl	8019c4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	68da      	ldr	r2, [r3, #12]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d240:	425b      	negs	r3, r3
 800d242:	441a      	add	r2, r3
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	68da      	ldr	r2, [r3, #12]
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	429a      	cmp	r2, r3
 800d252:	d207      	bcs.n	800d264 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	689a      	ldr	r2, [r3, #8]
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d25c:	425b      	negs	r3, r3
 800d25e:	441a      	add	r2, r3
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2b02      	cmp	r3, #2
 800d268:	d105      	bne.n	800d276 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d002      	beq.n	800d276 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	3b01      	subs	r3, #1
 800d274:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	1c5a      	adds	r2, r3, #1
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d27e:	697b      	ldr	r3, [r7, #20]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3718      	adds	r7, #24
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b082      	sub	sp, #8
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d296:	2b00      	cmp	r3, #0
 800d298:	d018      	beq.n	800d2cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	68da      	ldr	r2, [r3, #12]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2a2:	441a      	add	r2, r3
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	68da      	ldr	r2, [r3, #12]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	689b      	ldr	r3, [r3, #8]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d303      	bcc.n	800d2bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681a      	ldr	r2, [r3, #0]
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	68d9      	ldr	r1, [r3, #12]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	6838      	ldr	r0, [r7, #0]
 800d2c8:	f00c fcc0 	bl	8019c4c <memcpy>
	}
}
 800d2cc:	bf00      	nop
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d2dc:	f001 fca2 	bl	800ec24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d2e8:	e011      	b.n	800d30e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d012      	beq.n	800d318 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	3324      	adds	r3, #36	; 0x24
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f000 fd50 	bl	800dd9c <xTaskRemoveFromEventList>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d001      	beq.n	800d306 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d302:	f000 fe4d 	bl	800dfa0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d306:	7bfb      	ldrb	r3, [r7, #15]
 800d308:	3b01      	subs	r3, #1
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d30e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d312:	2b00      	cmp	r3, #0
 800d314:	dce9      	bgt.n	800d2ea <prvUnlockQueue+0x16>
 800d316:	e000      	b.n	800d31a <prvUnlockQueue+0x46>
					break;
 800d318:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	22ff      	movs	r2, #255	; 0xff
 800d31e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d322:	f001 fcaf 	bl	800ec84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d326:	f001 fc7d 	bl	800ec24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d330:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d332:	e011      	b.n	800d358 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	691b      	ldr	r3, [r3, #16]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d012      	beq.n	800d362 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	3310      	adds	r3, #16
 800d340:	4618      	mov	r0, r3
 800d342:	f000 fd2b 	bl	800dd9c <xTaskRemoveFromEventList>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d34c:	f000 fe28 	bl	800dfa0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d350:	7bbb      	ldrb	r3, [r7, #14]
 800d352:	3b01      	subs	r3, #1
 800d354:	b2db      	uxtb	r3, r3
 800d356:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	dce9      	bgt.n	800d334 <prvUnlockQueue+0x60>
 800d360:	e000      	b.n	800d364 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d362:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	22ff      	movs	r2, #255	; 0xff
 800d368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d36c:	f001 fc8a 	bl	800ec84 <vPortExitCritical>
}
 800d370:	bf00      	nop
 800d372:	3710      	adds	r7, #16
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}

0800d378 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b084      	sub	sp, #16
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d380:	f001 fc50 	bl	800ec24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d102      	bne.n	800d392 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d38c:	2301      	movs	r3, #1
 800d38e:	60fb      	str	r3, [r7, #12]
 800d390:	e001      	b.n	800d396 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d392:	2300      	movs	r3, #0
 800d394:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d396:	f001 fc75 	bl	800ec84 <vPortExitCritical>

	return xReturn;
 800d39a:	68fb      	ldr	r3, [r7, #12]
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3710      	adds	r7, #16
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b084      	sub	sp, #16
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d3ac:	f001 fc3a 	bl	800ec24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d102      	bne.n	800d3c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	60fb      	str	r3, [r7, #12]
 800d3c0:	e001      	b.n	800d3c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d3c6:	f001 fc5d 	bl	800ec84 <vPortExitCritical>

	return xReturn;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3710      	adds	r7, #16
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d3de:	2300      	movs	r3, #0
 800d3e0:	60fb      	str	r3, [r7, #12]
 800d3e2:	e014      	b.n	800d40e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d3e4:	4a0f      	ldr	r2, [pc, #60]	; (800d424 <vQueueAddToRegistry+0x50>)
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d10b      	bne.n	800d408 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d3f0:	490c      	ldr	r1, [pc, #48]	; (800d424 <vQueueAddToRegistry+0x50>)
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	683a      	ldr	r2, [r7, #0]
 800d3f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d3fa:	4a0a      	ldr	r2, [pc, #40]	; (800d424 <vQueueAddToRegistry+0x50>)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	00db      	lsls	r3, r3, #3
 800d400:	4413      	add	r3, r2
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d406:	e006      	b.n	800d416 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	3301      	adds	r3, #1
 800d40c:	60fb      	str	r3, [r7, #12]
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2b07      	cmp	r3, #7
 800d412:	d9e7      	bls.n	800d3e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d414:	bf00      	nop
 800d416:	bf00      	nop
 800d418:	3714      	adds	r7, #20
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop
 800d424:	2000ae7c 	.word	0x2000ae7c

0800d428 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b086      	sub	sp, #24
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	60f8      	str	r0, [r7, #12]
 800d430:	60b9      	str	r1, [r7, #8]
 800d432:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d438:	f001 fbf4 	bl	800ec24 <vPortEnterCritical>
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d442:	b25b      	sxtb	r3, r3
 800d444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d448:	d103      	bne.n	800d452 <vQueueWaitForMessageRestricted+0x2a>
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	2200      	movs	r2, #0
 800d44e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d458:	b25b      	sxtb	r3, r3
 800d45a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d45e:	d103      	bne.n	800d468 <vQueueWaitForMessageRestricted+0x40>
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	2200      	movs	r2, #0
 800d464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d468:	f001 fc0c 	bl	800ec84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d470:	2b00      	cmp	r3, #0
 800d472:	d106      	bne.n	800d482 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	3324      	adds	r3, #36	; 0x24
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	68b9      	ldr	r1, [r7, #8]
 800d47c:	4618      	mov	r0, r3
 800d47e:	f000 fc61 	bl	800dd44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d482:	6978      	ldr	r0, [r7, #20]
 800d484:	f7ff ff26 	bl	800d2d4 <prvUnlockQueue>
	}
 800d488:	bf00      	nop
 800d48a:	3718      	adds	r7, #24
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}

0800d490 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d490:	b580      	push	{r7, lr}
 800d492:	b08e      	sub	sp, #56	; 0x38
 800d494:	af04      	add	r7, sp, #16
 800d496:	60f8      	str	r0, [r7, #12]
 800d498:	60b9      	str	r1, [r7, #8]
 800d49a:	607a      	str	r2, [r7, #4]
 800d49c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d10a      	bne.n	800d4ba <xTaskCreateStatic+0x2a>
	__asm volatile
 800d4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a8:	f383 8811 	msr	BASEPRI, r3
 800d4ac:	f3bf 8f6f 	isb	sy
 800d4b0:	f3bf 8f4f 	dsb	sy
 800d4b4:	623b      	str	r3, [r7, #32]
}
 800d4b6:	bf00      	nop
 800d4b8:	e7fe      	b.n	800d4b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d10a      	bne.n	800d4d6 <xTaskCreateStatic+0x46>
	__asm volatile
 800d4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c4:	f383 8811 	msr	BASEPRI, r3
 800d4c8:	f3bf 8f6f 	isb	sy
 800d4cc:	f3bf 8f4f 	dsb	sy
 800d4d0:	61fb      	str	r3, [r7, #28]
}
 800d4d2:	bf00      	nop
 800d4d4:	e7fe      	b.n	800d4d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d4d6:	23bc      	movs	r3, #188	; 0xbc
 800d4d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	2bbc      	cmp	r3, #188	; 0xbc
 800d4de:	d00a      	beq.n	800d4f6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e4:	f383 8811 	msr	BASEPRI, r3
 800d4e8:	f3bf 8f6f 	isb	sy
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	61bb      	str	r3, [r7, #24]
}
 800d4f2:	bf00      	nop
 800d4f4:	e7fe      	b.n	800d4f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d4f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d01e      	beq.n	800d53c <xTaskCreateStatic+0xac>
 800d4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d500:	2b00      	cmp	r3, #0
 800d502:	d01b      	beq.n	800d53c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d506:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d50c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d510:	2202      	movs	r2, #2
 800d512:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d516:	2300      	movs	r3, #0
 800d518:	9303      	str	r3, [sp, #12]
 800d51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51c:	9302      	str	r3, [sp, #8]
 800d51e:	f107 0314 	add.w	r3, r7, #20
 800d522:	9301      	str	r3, [sp, #4]
 800d524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d526:	9300      	str	r3, [sp, #0]
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	68b9      	ldr	r1, [r7, #8]
 800d52e:	68f8      	ldr	r0, [r7, #12]
 800d530:	f000 f850 	bl	800d5d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d536:	f000 f8f3 	bl	800d720 <prvAddNewTaskToReadyList>
 800d53a:	e001      	b.n	800d540 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d53c:	2300      	movs	r3, #0
 800d53e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d540:	697b      	ldr	r3, [r7, #20]
	}
 800d542:	4618      	mov	r0, r3
 800d544:	3728      	adds	r7, #40	; 0x28
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}

0800d54a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b08c      	sub	sp, #48	; 0x30
 800d54e:	af04      	add	r7, sp, #16
 800d550:	60f8      	str	r0, [r7, #12]
 800d552:	60b9      	str	r1, [r7, #8]
 800d554:	603b      	str	r3, [r7, #0]
 800d556:	4613      	mov	r3, r2
 800d558:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d55a:	88fb      	ldrh	r3, [r7, #6]
 800d55c:	009b      	lsls	r3, r3, #2
 800d55e:	4618      	mov	r0, r3
 800d560:	f001 fc82 	bl	800ee68 <pvPortMalloc>
 800d564:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d00e      	beq.n	800d58a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d56c:	20bc      	movs	r0, #188	; 0xbc
 800d56e:	f001 fc7b 	bl	800ee68 <pvPortMalloc>
 800d572:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d574:	69fb      	ldr	r3, [r7, #28]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d003      	beq.n	800d582 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d57a:	69fb      	ldr	r3, [r7, #28]
 800d57c:	697a      	ldr	r2, [r7, #20]
 800d57e:	631a      	str	r2, [r3, #48]	; 0x30
 800d580:	e005      	b.n	800d58e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d582:	6978      	ldr	r0, [r7, #20]
 800d584:	f001 fd3c 	bl	800f000 <vPortFree>
 800d588:	e001      	b.n	800d58e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d58a:	2300      	movs	r3, #0
 800d58c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d58e:	69fb      	ldr	r3, [r7, #28]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d017      	beq.n	800d5c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d594:	69fb      	ldr	r3, [r7, #28]
 800d596:	2200      	movs	r2, #0
 800d598:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d59c:	88fa      	ldrh	r2, [r7, #6]
 800d59e:	2300      	movs	r3, #0
 800d5a0:	9303      	str	r3, [sp, #12]
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	9302      	str	r3, [sp, #8]
 800d5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a8:	9301      	str	r3, [sp, #4]
 800d5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	68b9      	ldr	r1, [r7, #8]
 800d5b2:	68f8      	ldr	r0, [r7, #12]
 800d5b4:	f000 f80e 	bl	800d5d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d5b8:	69f8      	ldr	r0, [r7, #28]
 800d5ba:	f000 f8b1 	bl	800d720 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d5be:	2301      	movs	r3, #1
 800d5c0:	61bb      	str	r3, [r7, #24]
 800d5c2:	e002      	b.n	800d5ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d5c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d5c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d5ca:	69bb      	ldr	r3, [r7, #24]
	}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3720      	adds	r7, #32
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b088      	sub	sp, #32
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	607a      	str	r2, [r7, #4]
 800d5e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	009b      	lsls	r3, r3, #2
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	21a5      	movs	r1, #165	; 0xa5
 800d5ee:	f00c fb3b 	bl	8019c68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d5fc:	3b01      	subs	r3, #1
 800d5fe:	009b      	lsls	r3, r3, #2
 800d600:	4413      	add	r3, r2
 800d602:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d604:	69bb      	ldr	r3, [r7, #24]
 800d606:	f023 0307 	bic.w	r3, r3, #7
 800d60a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d60c:	69bb      	ldr	r3, [r7, #24]
 800d60e:	f003 0307 	and.w	r3, r3, #7
 800d612:	2b00      	cmp	r3, #0
 800d614:	d00a      	beq.n	800d62c <prvInitialiseNewTask+0x58>
	__asm volatile
 800d616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d61a:	f383 8811 	msr	BASEPRI, r3
 800d61e:	f3bf 8f6f 	isb	sy
 800d622:	f3bf 8f4f 	dsb	sy
 800d626:	617b      	str	r3, [r7, #20]
}
 800d628:	bf00      	nop
 800d62a:	e7fe      	b.n	800d62a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d01f      	beq.n	800d672 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d632:	2300      	movs	r3, #0
 800d634:	61fb      	str	r3, [r7, #28]
 800d636:	e012      	b.n	800d65e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d638:	68ba      	ldr	r2, [r7, #8]
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	4413      	add	r3, r2
 800d63e:	7819      	ldrb	r1, [r3, #0]
 800d640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	4413      	add	r3, r2
 800d646:	3334      	adds	r3, #52	; 0x34
 800d648:	460a      	mov	r2, r1
 800d64a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d64c:	68ba      	ldr	r2, [r7, #8]
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	4413      	add	r3, r2
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d006      	beq.n	800d666 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	3301      	adds	r3, #1
 800d65c:	61fb      	str	r3, [r7, #28]
 800d65e:	69fb      	ldr	r3, [r7, #28]
 800d660:	2b0f      	cmp	r3, #15
 800d662:	d9e9      	bls.n	800d638 <prvInitialiseNewTask+0x64>
 800d664:	e000      	b.n	800d668 <prvInitialiseNewTask+0x94>
			{
				break;
 800d666:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66a:	2200      	movs	r2, #0
 800d66c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d670:	e003      	b.n	800d67a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d674:	2200      	movs	r2, #0
 800d676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d67c:	2b37      	cmp	r3, #55	; 0x37
 800d67e:	d901      	bls.n	800d684 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d680:	2337      	movs	r3, #55	; 0x37
 800d682:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d688:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d68e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d692:	2200      	movs	r2, #0
 800d694:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d698:	3304      	adds	r3, #4
 800d69a:	4618      	mov	r0, r3
 800d69c:	f7ff f978 	bl	800c990 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a2:	3318      	adds	r3, #24
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7ff f973 	bl	800c990 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d2:	3354      	adds	r3, #84	; 0x54
 800d6d4:	2260      	movs	r2, #96	; 0x60
 800d6d6:	2100      	movs	r1, #0
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f00c fac5 	bl	8019c68 <memset>
 800d6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e0:	4a0c      	ldr	r2, [pc, #48]	; (800d714 <prvInitialiseNewTask+0x140>)
 800d6e2:	659a      	str	r2, [r3, #88]	; 0x58
 800d6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6e6:	4a0c      	ldr	r2, [pc, #48]	; (800d718 <prvInitialiseNewTask+0x144>)
 800d6e8:	65da      	str	r2, [r3, #92]	; 0x5c
 800d6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ec:	4a0b      	ldr	r2, [pc, #44]	; (800d71c <prvInitialiseNewTask+0x148>)
 800d6ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d6f0:	683a      	ldr	r2, [r7, #0]
 800d6f2:	68f9      	ldr	r1, [r7, #12]
 800d6f4:	69b8      	ldr	r0, [r7, #24]
 800d6f6:	f001 f967 	bl	800e9c8 <pxPortInitialiseStack>
 800d6fa:	4602      	mov	r2, r0
 800d6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d702:	2b00      	cmp	r3, #0
 800d704:	d002      	beq.n	800d70c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d70a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d70c:	bf00      	nop
 800d70e:	3720      	adds	r7, #32
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	0801c2e8 	.word	0x0801c2e8
 800d718:	0801c308 	.word	0x0801c308
 800d71c:	0801c2c8 	.word	0x0801c2c8

0800d720 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d728:	f001 fa7c 	bl	800ec24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d72c:	4b2d      	ldr	r3, [pc, #180]	; (800d7e4 <prvAddNewTaskToReadyList+0xc4>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	3301      	adds	r3, #1
 800d732:	4a2c      	ldr	r2, [pc, #176]	; (800d7e4 <prvAddNewTaskToReadyList+0xc4>)
 800d734:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d736:	4b2c      	ldr	r3, [pc, #176]	; (800d7e8 <prvAddNewTaskToReadyList+0xc8>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d109      	bne.n	800d752 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d73e:	4a2a      	ldr	r2, [pc, #168]	; (800d7e8 <prvAddNewTaskToReadyList+0xc8>)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d744:	4b27      	ldr	r3, [pc, #156]	; (800d7e4 <prvAddNewTaskToReadyList+0xc4>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d110      	bne.n	800d76e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d74c:	f000 fc4c 	bl	800dfe8 <prvInitialiseTaskLists>
 800d750:	e00d      	b.n	800d76e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d752:	4b26      	ldr	r3, [pc, #152]	; (800d7ec <prvAddNewTaskToReadyList+0xcc>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d109      	bne.n	800d76e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d75a:	4b23      	ldr	r3, [pc, #140]	; (800d7e8 <prvAddNewTaskToReadyList+0xc8>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d764:	429a      	cmp	r2, r3
 800d766:	d802      	bhi.n	800d76e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d768:	4a1f      	ldr	r2, [pc, #124]	; (800d7e8 <prvAddNewTaskToReadyList+0xc8>)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d76e:	4b20      	ldr	r3, [pc, #128]	; (800d7f0 <prvAddNewTaskToReadyList+0xd0>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	3301      	adds	r3, #1
 800d774:	4a1e      	ldr	r2, [pc, #120]	; (800d7f0 <prvAddNewTaskToReadyList+0xd0>)
 800d776:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d778:	4b1d      	ldr	r3, [pc, #116]	; (800d7f0 <prvAddNewTaskToReadyList+0xd0>)
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d784:	4b1b      	ldr	r3, [pc, #108]	; (800d7f4 <prvAddNewTaskToReadyList+0xd4>)
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	429a      	cmp	r2, r3
 800d78a:	d903      	bls.n	800d794 <prvAddNewTaskToReadyList+0x74>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d790:	4a18      	ldr	r2, [pc, #96]	; (800d7f4 <prvAddNewTaskToReadyList+0xd4>)
 800d792:	6013      	str	r3, [r2, #0]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d798:	4613      	mov	r3, r2
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	4413      	add	r3, r2
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	4a15      	ldr	r2, [pc, #84]	; (800d7f8 <prvAddNewTaskToReadyList+0xd8>)
 800d7a2:	441a      	add	r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	3304      	adds	r3, #4
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	4610      	mov	r0, r2
 800d7ac:	f7ff f8fd 	bl	800c9aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d7b0:	f001 fa68 	bl	800ec84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d7b4:	4b0d      	ldr	r3, [pc, #52]	; (800d7ec <prvAddNewTaskToReadyList+0xcc>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00e      	beq.n	800d7da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d7bc:	4b0a      	ldr	r3, [pc, #40]	; (800d7e8 <prvAddNewTaskToReadyList+0xc8>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d207      	bcs.n	800d7da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d7ca:	4b0c      	ldr	r3, [pc, #48]	; (800d7fc <prvAddNewTaskToReadyList+0xdc>)
 800d7cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7d0:	601a      	str	r2, [r3, #0]
 800d7d2:	f3bf 8f4f 	dsb	sy
 800d7d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7da:	bf00      	nop
 800d7dc:	3708      	adds	r7, #8
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	2000b390 	.word	0x2000b390
 800d7e8:	2000aebc 	.word	0x2000aebc
 800d7ec:	2000b39c 	.word	0x2000b39c
 800d7f0:	2000b3ac 	.word	0x2000b3ac
 800d7f4:	2000b398 	.word	0x2000b398
 800d7f8:	2000aec0 	.word	0x2000aec0
 800d7fc:	e000ed04 	.word	0xe000ed04

0800d800 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d808:	2300      	movs	r3, #0
 800d80a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d017      	beq.n	800d842 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d812:	4b13      	ldr	r3, [pc, #76]	; (800d860 <vTaskDelay+0x60>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d00a      	beq.n	800d830 <vTaskDelay+0x30>
	__asm volatile
 800d81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81e:	f383 8811 	msr	BASEPRI, r3
 800d822:	f3bf 8f6f 	isb	sy
 800d826:	f3bf 8f4f 	dsb	sy
 800d82a:	60bb      	str	r3, [r7, #8]
}
 800d82c:	bf00      	nop
 800d82e:	e7fe      	b.n	800d82e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d830:	f000 f88a 	bl	800d948 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d834:	2100      	movs	r1, #0
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f000 fd24 	bl	800e284 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d83c:	f000 f892 	bl	800d964 <xTaskResumeAll>
 800d840:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d107      	bne.n	800d858 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d848:	4b06      	ldr	r3, [pc, #24]	; (800d864 <vTaskDelay+0x64>)
 800d84a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d84e:	601a      	str	r2, [r3, #0]
 800d850:	f3bf 8f4f 	dsb	sy
 800d854:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d858:	bf00      	nop
 800d85a:	3710      	adds	r7, #16
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	2000b3b8 	.word	0x2000b3b8
 800d864:	e000ed04 	.word	0xe000ed04

0800d868 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b08a      	sub	sp, #40	; 0x28
 800d86c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d86e:	2300      	movs	r3, #0
 800d870:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d872:	2300      	movs	r3, #0
 800d874:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d876:	463a      	mov	r2, r7
 800d878:	1d39      	adds	r1, r7, #4
 800d87a:	f107 0308 	add.w	r3, r7, #8
 800d87e:	4618      	mov	r0, r3
 800d880:	f7ff f832 	bl	800c8e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d884:	6839      	ldr	r1, [r7, #0]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	68ba      	ldr	r2, [r7, #8]
 800d88a:	9202      	str	r2, [sp, #8]
 800d88c:	9301      	str	r3, [sp, #4]
 800d88e:	2300      	movs	r3, #0
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	2300      	movs	r3, #0
 800d894:	460a      	mov	r2, r1
 800d896:	4924      	ldr	r1, [pc, #144]	; (800d928 <vTaskStartScheduler+0xc0>)
 800d898:	4824      	ldr	r0, [pc, #144]	; (800d92c <vTaskStartScheduler+0xc4>)
 800d89a:	f7ff fdf9 	bl	800d490 <xTaskCreateStatic>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	4a23      	ldr	r2, [pc, #140]	; (800d930 <vTaskStartScheduler+0xc8>)
 800d8a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d8a4:	4b22      	ldr	r3, [pc, #136]	; (800d930 <vTaskStartScheduler+0xc8>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d002      	beq.n	800d8b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	617b      	str	r3, [r7, #20]
 800d8b0:	e001      	b.n	800d8b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d102      	bne.n	800d8c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d8bc:	f000 fd36 	bl	800e32c <xTimerCreateTimerTask>
 800d8c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	2b01      	cmp	r3, #1
 800d8c6:	d11b      	bne.n	800d900 <vTaskStartScheduler+0x98>
	__asm volatile
 800d8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8cc:	f383 8811 	msr	BASEPRI, r3
 800d8d0:	f3bf 8f6f 	isb	sy
 800d8d4:	f3bf 8f4f 	dsb	sy
 800d8d8:	613b      	str	r3, [r7, #16]
}
 800d8da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d8dc:	4b15      	ldr	r3, [pc, #84]	; (800d934 <vTaskStartScheduler+0xcc>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	3354      	adds	r3, #84	; 0x54
 800d8e2:	4a15      	ldr	r2, [pc, #84]	; (800d938 <vTaskStartScheduler+0xd0>)
 800d8e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d8e6:	4b15      	ldr	r3, [pc, #84]	; (800d93c <vTaskStartScheduler+0xd4>)
 800d8e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d8ee:	4b14      	ldr	r3, [pc, #80]	; (800d940 <vTaskStartScheduler+0xd8>)
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d8f4:	4b13      	ldr	r3, [pc, #76]	; (800d944 <vTaskStartScheduler+0xdc>)
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d8fa:	f001 f8f1 	bl	800eae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d8fe:	e00e      	b.n	800d91e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d906:	d10a      	bne.n	800d91e <vTaskStartScheduler+0xb6>
	__asm volatile
 800d908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90c:	f383 8811 	msr	BASEPRI, r3
 800d910:	f3bf 8f6f 	isb	sy
 800d914:	f3bf 8f4f 	dsb	sy
 800d918:	60fb      	str	r3, [r7, #12]
}
 800d91a:	bf00      	nop
 800d91c:	e7fe      	b.n	800d91c <vTaskStartScheduler+0xb4>
}
 800d91e:	bf00      	nop
 800d920:	3718      	adds	r7, #24
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	0801b2ec 	.word	0x0801b2ec
 800d92c:	0800dfb9 	.word	0x0800dfb9
 800d930:	2000b3b4 	.word	0x2000b3b4
 800d934:	2000aebc 	.word	0x2000aebc
 800d938:	200005b4 	.word	0x200005b4
 800d93c:	2000b3b0 	.word	0x2000b3b0
 800d940:	2000b39c 	.word	0x2000b39c
 800d944:	2000b394 	.word	0x2000b394

0800d948 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d948:	b480      	push	{r7}
 800d94a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d94c:	4b04      	ldr	r3, [pc, #16]	; (800d960 <vTaskSuspendAll+0x18>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	3301      	adds	r3, #1
 800d952:	4a03      	ldr	r2, [pc, #12]	; (800d960 <vTaskSuspendAll+0x18>)
 800d954:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d956:	bf00      	nop
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr
 800d960:	2000b3b8 	.word	0x2000b3b8

0800d964 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b084      	sub	sp, #16
 800d968:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d96a:	2300      	movs	r3, #0
 800d96c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d96e:	2300      	movs	r3, #0
 800d970:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d972:	4b42      	ldr	r3, [pc, #264]	; (800da7c <xTaskResumeAll+0x118>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d10a      	bne.n	800d990 <xTaskResumeAll+0x2c>
	__asm volatile
 800d97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97e:	f383 8811 	msr	BASEPRI, r3
 800d982:	f3bf 8f6f 	isb	sy
 800d986:	f3bf 8f4f 	dsb	sy
 800d98a:	603b      	str	r3, [r7, #0]
}
 800d98c:	bf00      	nop
 800d98e:	e7fe      	b.n	800d98e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d990:	f001 f948 	bl	800ec24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d994:	4b39      	ldr	r3, [pc, #228]	; (800da7c <xTaskResumeAll+0x118>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	3b01      	subs	r3, #1
 800d99a:	4a38      	ldr	r2, [pc, #224]	; (800da7c <xTaskResumeAll+0x118>)
 800d99c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d99e:	4b37      	ldr	r3, [pc, #220]	; (800da7c <xTaskResumeAll+0x118>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d162      	bne.n	800da6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d9a6:	4b36      	ldr	r3, [pc, #216]	; (800da80 <xTaskResumeAll+0x11c>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d05e      	beq.n	800da6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d9ae:	e02f      	b.n	800da10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9b0:	4b34      	ldr	r3, [pc, #208]	; (800da84 <xTaskResumeAll+0x120>)
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	68db      	ldr	r3, [r3, #12]
 800d9b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	3318      	adds	r3, #24
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7ff f851 	bl	800ca64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	3304      	adds	r3, #4
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7ff f84c 	bl	800ca64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9d0:	4b2d      	ldr	r3, [pc, #180]	; (800da88 <xTaskResumeAll+0x124>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d903      	bls.n	800d9e0 <xTaskResumeAll+0x7c>
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9dc:	4a2a      	ldr	r2, [pc, #168]	; (800da88 <xTaskResumeAll+0x124>)
 800d9de:	6013      	str	r3, [r2, #0]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	4413      	add	r3, r2
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	4a27      	ldr	r2, [pc, #156]	; (800da8c <xTaskResumeAll+0x128>)
 800d9ee:	441a      	add	r2, r3
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	3304      	adds	r3, #4
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	4610      	mov	r0, r2
 800d9f8:	f7fe ffd7 	bl	800c9aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da00:	4b23      	ldr	r3, [pc, #140]	; (800da90 <xTaskResumeAll+0x12c>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da06:	429a      	cmp	r2, r3
 800da08:	d302      	bcc.n	800da10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800da0a:	4b22      	ldr	r3, [pc, #136]	; (800da94 <xTaskResumeAll+0x130>)
 800da0c:	2201      	movs	r2, #1
 800da0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da10:	4b1c      	ldr	r3, [pc, #112]	; (800da84 <xTaskResumeAll+0x120>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d1cb      	bne.n	800d9b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d001      	beq.n	800da22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800da1e:	f000 fb85 	bl	800e12c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800da22:	4b1d      	ldr	r3, [pc, #116]	; (800da98 <xTaskResumeAll+0x134>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d010      	beq.n	800da50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800da2e:	f000 f847 	bl	800dac0 <xTaskIncrementTick>
 800da32:	4603      	mov	r3, r0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d002      	beq.n	800da3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800da38:	4b16      	ldr	r3, [pc, #88]	; (800da94 <xTaskResumeAll+0x130>)
 800da3a:	2201      	movs	r2, #1
 800da3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	3b01      	subs	r3, #1
 800da42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1f1      	bne.n	800da2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800da4a:	4b13      	ldr	r3, [pc, #76]	; (800da98 <xTaskResumeAll+0x134>)
 800da4c:	2200      	movs	r2, #0
 800da4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800da50:	4b10      	ldr	r3, [pc, #64]	; (800da94 <xTaskResumeAll+0x130>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d009      	beq.n	800da6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800da58:	2301      	movs	r3, #1
 800da5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800da5c:	4b0f      	ldr	r3, [pc, #60]	; (800da9c <xTaskResumeAll+0x138>)
 800da5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da62:	601a      	str	r2, [r3, #0]
 800da64:	f3bf 8f4f 	dsb	sy
 800da68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800da6c:	f001 f90a 	bl	800ec84 <vPortExitCritical>

	return xAlreadyYielded;
 800da70:	68bb      	ldr	r3, [r7, #8]
}
 800da72:	4618      	mov	r0, r3
 800da74:	3710      	adds	r7, #16
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
 800da7a:	bf00      	nop
 800da7c:	2000b3b8 	.word	0x2000b3b8
 800da80:	2000b390 	.word	0x2000b390
 800da84:	2000b350 	.word	0x2000b350
 800da88:	2000b398 	.word	0x2000b398
 800da8c:	2000aec0 	.word	0x2000aec0
 800da90:	2000aebc 	.word	0x2000aebc
 800da94:	2000b3a4 	.word	0x2000b3a4
 800da98:	2000b3a0 	.word	0x2000b3a0
 800da9c:	e000ed04 	.word	0xe000ed04

0800daa0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800daa6:	4b05      	ldr	r3, [pc, #20]	; (800dabc <xTaskGetTickCount+0x1c>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800daac:	687b      	ldr	r3, [r7, #4]
}
 800daae:	4618      	mov	r0, r3
 800dab0:	370c      	adds	r7, #12
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	2000b394 	.word	0x2000b394

0800dac0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b086      	sub	sp, #24
 800dac4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dac6:	2300      	movs	r3, #0
 800dac8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800daca:	4b4f      	ldr	r3, [pc, #316]	; (800dc08 <xTaskIncrementTick+0x148>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	f040 808f 	bne.w	800dbf2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dad4:	4b4d      	ldr	r3, [pc, #308]	; (800dc0c <xTaskIncrementTick+0x14c>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	3301      	adds	r3, #1
 800dada:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dadc:	4a4b      	ldr	r2, [pc, #300]	; (800dc0c <xTaskIncrementTick+0x14c>)
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d120      	bne.n	800db2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dae8:	4b49      	ldr	r3, [pc, #292]	; (800dc10 <xTaskIncrementTick+0x150>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00a      	beq.n	800db08 <xTaskIncrementTick+0x48>
	__asm volatile
 800daf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daf6:	f383 8811 	msr	BASEPRI, r3
 800dafa:	f3bf 8f6f 	isb	sy
 800dafe:	f3bf 8f4f 	dsb	sy
 800db02:	603b      	str	r3, [r7, #0]
}
 800db04:	bf00      	nop
 800db06:	e7fe      	b.n	800db06 <xTaskIncrementTick+0x46>
 800db08:	4b41      	ldr	r3, [pc, #260]	; (800dc10 <xTaskIncrementTick+0x150>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	60fb      	str	r3, [r7, #12]
 800db0e:	4b41      	ldr	r3, [pc, #260]	; (800dc14 <xTaskIncrementTick+0x154>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4a3f      	ldr	r2, [pc, #252]	; (800dc10 <xTaskIncrementTick+0x150>)
 800db14:	6013      	str	r3, [r2, #0]
 800db16:	4a3f      	ldr	r2, [pc, #252]	; (800dc14 <xTaskIncrementTick+0x154>)
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	6013      	str	r3, [r2, #0]
 800db1c:	4b3e      	ldr	r3, [pc, #248]	; (800dc18 <xTaskIncrementTick+0x158>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	3301      	adds	r3, #1
 800db22:	4a3d      	ldr	r2, [pc, #244]	; (800dc18 <xTaskIncrementTick+0x158>)
 800db24:	6013      	str	r3, [r2, #0]
 800db26:	f000 fb01 	bl	800e12c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800db2a:	4b3c      	ldr	r3, [pc, #240]	; (800dc1c <xTaskIncrementTick+0x15c>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	693a      	ldr	r2, [r7, #16]
 800db30:	429a      	cmp	r2, r3
 800db32:	d349      	bcc.n	800dbc8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db34:	4b36      	ldr	r3, [pc, #216]	; (800dc10 <xTaskIncrementTick+0x150>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d104      	bne.n	800db48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db3e:	4b37      	ldr	r3, [pc, #220]	; (800dc1c <xTaskIncrementTick+0x15c>)
 800db40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db44:	601a      	str	r2, [r3, #0]
					break;
 800db46:	e03f      	b.n	800dbc8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db48:	4b31      	ldr	r3, [pc, #196]	; (800dc10 <xTaskIncrementTick+0x150>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	68db      	ldr	r3, [r3, #12]
 800db50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800db58:	693a      	ldr	r2, [r7, #16]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d203      	bcs.n	800db68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800db60:	4a2e      	ldr	r2, [pc, #184]	; (800dc1c <xTaskIncrementTick+0x15c>)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800db66:	e02f      	b.n	800dbc8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	3304      	adds	r3, #4
 800db6c:	4618      	mov	r0, r3
 800db6e:	f7fe ff79 	bl	800ca64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db76:	2b00      	cmp	r3, #0
 800db78:	d004      	beq.n	800db84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	3318      	adds	r3, #24
 800db7e:	4618      	mov	r0, r3
 800db80:	f7fe ff70 	bl	800ca64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db88:	4b25      	ldr	r3, [pc, #148]	; (800dc20 <xTaskIncrementTick+0x160>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	429a      	cmp	r2, r3
 800db8e:	d903      	bls.n	800db98 <xTaskIncrementTick+0xd8>
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db94:	4a22      	ldr	r2, [pc, #136]	; (800dc20 <xTaskIncrementTick+0x160>)
 800db96:	6013      	str	r3, [r2, #0]
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db9c:	4613      	mov	r3, r2
 800db9e:	009b      	lsls	r3, r3, #2
 800dba0:	4413      	add	r3, r2
 800dba2:	009b      	lsls	r3, r3, #2
 800dba4:	4a1f      	ldr	r2, [pc, #124]	; (800dc24 <xTaskIncrementTick+0x164>)
 800dba6:	441a      	add	r2, r3
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	3304      	adds	r3, #4
 800dbac:	4619      	mov	r1, r3
 800dbae:	4610      	mov	r0, r2
 800dbb0:	f7fe fefb 	bl	800c9aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbb8:	4b1b      	ldr	r3, [pc, #108]	; (800dc28 <xTaskIncrementTick+0x168>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d3b8      	bcc.n	800db34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbc6:	e7b5      	b.n	800db34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dbc8:	4b17      	ldr	r3, [pc, #92]	; (800dc28 <xTaskIncrementTick+0x168>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbce:	4915      	ldr	r1, [pc, #84]	; (800dc24 <xTaskIncrementTick+0x164>)
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	4413      	add	r3, r2
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	440b      	add	r3, r1
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d901      	bls.n	800dbe4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dbe4:	4b11      	ldr	r3, [pc, #68]	; (800dc2c <xTaskIncrementTick+0x16c>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d007      	beq.n	800dbfc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dbec:	2301      	movs	r3, #1
 800dbee:	617b      	str	r3, [r7, #20]
 800dbf0:	e004      	b.n	800dbfc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dbf2:	4b0f      	ldr	r3, [pc, #60]	; (800dc30 <xTaskIncrementTick+0x170>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	4a0d      	ldr	r2, [pc, #52]	; (800dc30 <xTaskIncrementTick+0x170>)
 800dbfa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dbfc:	697b      	ldr	r3, [r7, #20]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3718      	adds	r7, #24
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	2000b3b8 	.word	0x2000b3b8
 800dc0c:	2000b394 	.word	0x2000b394
 800dc10:	2000b348 	.word	0x2000b348
 800dc14:	2000b34c 	.word	0x2000b34c
 800dc18:	2000b3a8 	.word	0x2000b3a8
 800dc1c:	2000b3b0 	.word	0x2000b3b0
 800dc20:	2000b398 	.word	0x2000b398
 800dc24:	2000aec0 	.word	0x2000aec0
 800dc28:	2000aebc 	.word	0x2000aebc
 800dc2c:	2000b3a4 	.word	0x2000b3a4
 800dc30:	2000b3a0 	.word	0x2000b3a0

0800dc34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dc34:	b480      	push	{r7}
 800dc36:	b085      	sub	sp, #20
 800dc38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dc3a:	4b2a      	ldr	r3, [pc, #168]	; (800dce4 <vTaskSwitchContext+0xb0>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d003      	beq.n	800dc4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dc42:	4b29      	ldr	r3, [pc, #164]	; (800dce8 <vTaskSwitchContext+0xb4>)
 800dc44:	2201      	movs	r2, #1
 800dc46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dc48:	e046      	b.n	800dcd8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800dc4a:	4b27      	ldr	r3, [pc, #156]	; (800dce8 <vTaskSwitchContext+0xb4>)
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc50:	4b26      	ldr	r3, [pc, #152]	; (800dcec <vTaskSwitchContext+0xb8>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	60fb      	str	r3, [r7, #12]
 800dc56:	e010      	b.n	800dc7a <vTaskSwitchContext+0x46>
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d10a      	bne.n	800dc74 <vTaskSwitchContext+0x40>
	__asm volatile
 800dc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc62:	f383 8811 	msr	BASEPRI, r3
 800dc66:	f3bf 8f6f 	isb	sy
 800dc6a:	f3bf 8f4f 	dsb	sy
 800dc6e:	607b      	str	r3, [r7, #4]
}
 800dc70:	bf00      	nop
 800dc72:	e7fe      	b.n	800dc72 <vTaskSwitchContext+0x3e>
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	3b01      	subs	r3, #1
 800dc78:	60fb      	str	r3, [r7, #12]
 800dc7a:	491d      	ldr	r1, [pc, #116]	; (800dcf0 <vTaskSwitchContext+0xbc>)
 800dc7c:	68fa      	ldr	r2, [r7, #12]
 800dc7e:	4613      	mov	r3, r2
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	4413      	add	r3, r2
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	440b      	add	r3, r1
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d0e4      	beq.n	800dc58 <vTaskSwitchContext+0x24>
 800dc8e:	68fa      	ldr	r2, [r7, #12]
 800dc90:	4613      	mov	r3, r2
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	4413      	add	r3, r2
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	4a15      	ldr	r2, [pc, #84]	; (800dcf0 <vTaskSwitchContext+0xbc>)
 800dc9a:	4413      	add	r3, r2
 800dc9c:	60bb      	str	r3, [r7, #8]
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	685a      	ldr	r2, [r3, #4]
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	605a      	str	r2, [r3, #4]
 800dca8:	68bb      	ldr	r3, [r7, #8]
 800dcaa:	685a      	ldr	r2, [r3, #4]
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	3308      	adds	r3, #8
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d104      	bne.n	800dcbe <vTaskSwitchContext+0x8a>
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	685a      	ldr	r2, [r3, #4]
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	605a      	str	r2, [r3, #4]
 800dcbe:	68bb      	ldr	r3, [r7, #8]
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	68db      	ldr	r3, [r3, #12]
 800dcc4:	4a0b      	ldr	r2, [pc, #44]	; (800dcf4 <vTaskSwitchContext+0xc0>)
 800dcc6:	6013      	str	r3, [r2, #0]
 800dcc8:	4a08      	ldr	r2, [pc, #32]	; (800dcec <vTaskSwitchContext+0xb8>)
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dcce:	4b09      	ldr	r3, [pc, #36]	; (800dcf4 <vTaskSwitchContext+0xc0>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	3354      	adds	r3, #84	; 0x54
 800dcd4:	4a08      	ldr	r2, [pc, #32]	; (800dcf8 <vTaskSwitchContext+0xc4>)
 800dcd6:	6013      	str	r3, [r2, #0]
}
 800dcd8:	bf00      	nop
 800dcda:	3714      	adds	r7, #20
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr
 800dce4:	2000b3b8 	.word	0x2000b3b8
 800dce8:	2000b3a4 	.word	0x2000b3a4
 800dcec:	2000b398 	.word	0x2000b398
 800dcf0:	2000aec0 	.word	0x2000aec0
 800dcf4:	2000aebc 	.word	0x2000aebc
 800dcf8:	200005b4 	.word	0x200005b4

0800dcfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b084      	sub	sp, #16
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d10a      	bne.n	800dd22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800dd0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd10:	f383 8811 	msr	BASEPRI, r3
 800dd14:	f3bf 8f6f 	isb	sy
 800dd18:	f3bf 8f4f 	dsb	sy
 800dd1c:	60fb      	str	r3, [r7, #12]
}
 800dd1e:	bf00      	nop
 800dd20:	e7fe      	b.n	800dd20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd22:	4b07      	ldr	r3, [pc, #28]	; (800dd40 <vTaskPlaceOnEventList+0x44>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	3318      	adds	r3, #24
 800dd28:	4619      	mov	r1, r3
 800dd2a:	6878      	ldr	r0, [r7, #4]
 800dd2c:	f7fe fe61 	bl	800c9f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dd30:	2101      	movs	r1, #1
 800dd32:	6838      	ldr	r0, [r7, #0]
 800dd34:	f000 faa6 	bl	800e284 <prvAddCurrentTaskToDelayedList>
}
 800dd38:	bf00      	nop
 800dd3a:	3710      	adds	r7, #16
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	2000aebc 	.word	0x2000aebc

0800dd44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d10a      	bne.n	800dd6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd5a:	f383 8811 	msr	BASEPRI, r3
 800dd5e:	f3bf 8f6f 	isb	sy
 800dd62:	f3bf 8f4f 	dsb	sy
 800dd66:	617b      	str	r3, [r7, #20]
}
 800dd68:	bf00      	nop
 800dd6a:	e7fe      	b.n	800dd6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dd6c:	4b0a      	ldr	r3, [pc, #40]	; (800dd98 <vTaskPlaceOnEventListRestricted+0x54>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	3318      	adds	r3, #24
 800dd72:	4619      	mov	r1, r3
 800dd74:	68f8      	ldr	r0, [r7, #12]
 800dd76:	f7fe fe18 	bl	800c9aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d002      	beq.n	800dd86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dd80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dd86:	6879      	ldr	r1, [r7, #4]
 800dd88:	68b8      	ldr	r0, [r7, #8]
 800dd8a:	f000 fa7b 	bl	800e284 <prvAddCurrentTaskToDelayedList>
	}
 800dd8e:	bf00      	nop
 800dd90:	3718      	adds	r7, #24
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	2000aebc 	.word	0x2000aebc

0800dd9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b086      	sub	sp, #24
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	68db      	ldr	r3, [r3, #12]
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d10a      	bne.n	800ddc8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ddb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb6:	f383 8811 	msr	BASEPRI, r3
 800ddba:	f3bf 8f6f 	isb	sy
 800ddbe:	f3bf 8f4f 	dsb	sy
 800ddc2:	60fb      	str	r3, [r7, #12]
}
 800ddc4:	bf00      	nop
 800ddc6:	e7fe      	b.n	800ddc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	3318      	adds	r3, #24
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7fe fe49 	bl	800ca64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ddd2:	4b1e      	ldr	r3, [pc, #120]	; (800de4c <xTaskRemoveFromEventList+0xb0>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d11d      	bne.n	800de16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	3304      	adds	r3, #4
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7fe fe40 	bl	800ca64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dde4:	693b      	ldr	r3, [r7, #16]
 800dde6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dde8:	4b19      	ldr	r3, [pc, #100]	; (800de50 <xTaskRemoveFromEventList+0xb4>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d903      	bls.n	800ddf8 <xTaskRemoveFromEventList+0x5c>
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf4:	4a16      	ldr	r2, [pc, #88]	; (800de50 <xTaskRemoveFromEventList+0xb4>)
 800ddf6:	6013      	str	r3, [r2, #0]
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddfc:	4613      	mov	r3, r2
 800ddfe:	009b      	lsls	r3, r3, #2
 800de00:	4413      	add	r3, r2
 800de02:	009b      	lsls	r3, r3, #2
 800de04:	4a13      	ldr	r2, [pc, #76]	; (800de54 <xTaskRemoveFromEventList+0xb8>)
 800de06:	441a      	add	r2, r3
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	3304      	adds	r3, #4
 800de0c:	4619      	mov	r1, r3
 800de0e:	4610      	mov	r0, r2
 800de10:	f7fe fdcb 	bl	800c9aa <vListInsertEnd>
 800de14:	e005      	b.n	800de22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	3318      	adds	r3, #24
 800de1a:	4619      	mov	r1, r3
 800de1c:	480e      	ldr	r0, [pc, #56]	; (800de58 <xTaskRemoveFromEventList+0xbc>)
 800de1e:	f7fe fdc4 	bl	800c9aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de26:	4b0d      	ldr	r3, [pc, #52]	; (800de5c <xTaskRemoveFromEventList+0xc0>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d905      	bls.n	800de3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800de30:	2301      	movs	r3, #1
 800de32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800de34:	4b0a      	ldr	r3, [pc, #40]	; (800de60 <xTaskRemoveFromEventList+0xc4>)
 800de36:	2201      	movs	r2, #1
 800de38:	601a      	str	r2, [r3, #0]
 800de3a:	e001      	b.n	800de40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800de3c:	2300      	movs	r3, #0
 800de3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800de40:	697b      	ldr	r3, [r7, #20]
}
 800de42:	4618      	mov	r0, r3
 800de44:	3718      	adds	r7, #24
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}
 800de4a:	bf00      	nop
 800de4c:	2000b3b8 	.word	0x2000b3b8
 800de50:	2000b398 	.word	0x2000b398
 800de54:	2000aec0 	.word	0x2000aec0
 800de58:	2000b350 	.word	0x2000b350
 800de5c:	2000aebc 	.word	0x2000aebc
 800de60:	2000b3a4 	.word	0x2000b3a4

0800de64 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d10a      	bne.n	800de88 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800de72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de76:	f383 8811 	msr	BASEPRI, r3
 800de7a:	f3bf 8f6f 	isb	sy
 800de7e:	f3bf 8f4f 	dsb	sy
 800de82:	60fb      	str	r3, [r7, #12]
}
 800de84:	bf00      	nop
 800de86:	e7fe      	b.n	800de86 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800de88:	f000 fecc 	bl	800ec24 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800de8c:	4b06      	ldr	r3, [pc, #24]	; (800dea8 <vTaskSetTimeOutState+0x44>)
 800de8e:	681a      	ldr	r2, [r3, #0]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800de94:	4b05      	ldr	r3, [pc, #20]	; (800deac <vTaskSetTimeOutState+0x48>)
 800de96:	681a      	ldr	r2, [r3, #0]
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800de9c:	f000 fef2 	bl	800ec84 <vPortExitCritical>
}
 800dea0:	bf00      	nop
 800dea2:	3710      	adds	r7, #16
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	2000b3a8 	.word	0x2000b3a8
 800deac:	2000b394 	.word	0x2000b394

0800deb0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800deb0:	b480      	push	{r7}
 800deb2:	b083      	sub	sp, #12
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800deb8:	4b06      	ldr	r3, [pc, #24]	; (800ded4 <vTaskInternalSetTimeOutState+0x24>)
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dec0:	4b05      	ldr	r3, [pc, #20]	; (800ded8 <vTaskInternalSetTimeOutState+0x28>)
 800dec2:	681a      	ldr	r2, [r3, #0]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	605a      	str	r2, [r3, #4]
}
 800dec8:	bf00      	nop
 800deca:	370c      	adds	r7, #12
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr
 800ded4:	2000b3a8 	.word	0x2000b3a8
 800ded8:	2000b394 	.word	0x2000b394

0800dedc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b088      	sub	sp, #32
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d10a      	bne.n	800df02 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800deec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def0:	f383 8811 	msr	BASEPRI, r3
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	613b      	str	r3, [r7, #16]
}
 800defe:	bf00      	nop
 800df00:	e7fe      	b.n	800df00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d10a      	bne.n	800df1e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800df08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0c:	f383 8811 	msr	BASEPRI, r3
 800df10:	f3bf 8f6f 	isb	sy
 800df14:	f3bf 8f4f 	dsb	sy
 800df18:	60fb      	str	r3, [r7, #12]
}
 800df1a:	bf00      	nop
 800df1c:	e7fe      	b.n	800df1c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800df1e:	f000 fe81 	bl	800ec24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800df22:	4b1d      	ldr	r3, [pc, #116]	; (800df98 <xTaskCheckForTimeOut+0xbc>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	69ba      	ldr	r2, [r7, #24]
 800df2e:	1ad3      	subs	r3, r2, r3
 800df30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df3a:	d102      	bne.n	800df42 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800df3c:	2300      	movs	r3, #0
 800df3e:	61fb      	str	r3, [r7, #28]
 800df40:	e023      	b.n	800df8a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681a      	ldr	r2, [r3, #0]
 800df46:	4b15      	ldr	r3, [pc, #84]	; (800df9c <xTaskCheckForTimeOut+0xc0>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d007      	beq.n	800df5e <xTaskCheckForTimeOut+0x82>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	69ba      	ldr	r2, [r7, #24]
 800df54:	429a      	cmp	r2, r3
 800df56:	d302      	bcc.n	800df5e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800df58:	2301      	movs	r3, #1
 800df5a:	61fb      	str	r3, [r7, #28]
 800df5c:	e015      	b.n	800df8a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	697a      	ldr	r2, [r7, #20]
 800df64:	429a      	cmp	r2, r3
 800df66:	d20b      	bcs.n	800df80 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	1ad2      	subs	r2, r2, r3
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f7ff ff9b 	bl	800deb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800df7a:	2300      	movs	r3, #0
 800df7c:	61fb      	str	r3, [r7, #28]
 800df7e:	e004      	b.n	800df8a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	2200      	movs	r2, #0
 800df84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800df86:	2301      	movs	r3, #1
 800df88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800df8a:	f000 fe7b 	bl	800ec84 <vPortExitCritical>

	return xReturn;
 800df8e:	69fb      	ldr	r3, [r7, #28]
}
 800df90:	4618      	mov	r0, r3
 800df92:	3720      	adds	r7, #32
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}
 800df98:	2000b394 	.word	0x2000b394
 800df9c:	2000b3a8 	.word	0x2000b3a8

0800dfa0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dfa4:	4b03      	ldr	r3, [pc, #12]	; (800dfb4 <vTaskMissedYield+0x14>)
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	601a      	str	r2, [r3, #0]
}
 800dfaa:	bf00      	nop
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr
 800dfb4:	2000b3a4 	.word	0x2000b3a4

0800dfb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dfc0:	f000 f852 	bl	800e068 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dfc4:	4b06      	ldr	r3, [pc, #24]	; (800dfe0 <prvIdleTask+0x28>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d9f9      	bls.n	800dfc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dfcc:	4b05      	ldr	r3, [pc, #20]	; (800dfe4 <prvIdleTask+0x2c>)
 800dfce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfd2:	601a      	str	r2, [r3, #0]
 800dfd4:	f3bf 8f4f 	dsb	sy
 800dfd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dfdc:	e7f0      	b.n	800dfc0 <prvIdleTask+0x8>
 800dfde:	bf00      	nop
 800dfe0:	2000aec0 	.word	0x2000aec0
 800dfe4:	e000ed04 	.word	0xe000ed04

0800dfe8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dfee:	2300      	movs	r3, #0
 800dff0:	607b      	str	r3, [r7, #4]
 800dff2:	e00c      	b.n	800e00e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dff4:	687a      	ldr	r2, [r7, #4]
 800dff6:	4613      	mov	r3, r2
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	4413      	add	r3, r2
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	4a12      	ldr	r2, [pc, #72]	; (800e048 <prvInitialiseTaskLists+0x60>)
 800e000:	4413      	add	r3, r2
 800e002:	4618      	mov	r0, r3
 800e004:	f7fe fca4 	bl	800c950 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	3301      	adds	r3, #1
 800e00c:	607b      	str	r3, [r7, #4]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2b37      	cmp	r3, #55	; 0x37
 800e012:	d9ef      	bls.n	800dff4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e014:	480d      	ldr	r0, [pc, #52]	; (800e04c <prvInitialiseTaskLists+0x64>)
 800e016:	f7fe fc9b 	bl	800c950 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e01a:	480d      	ldr	r0, [pc, #52]	; (800e050 <prvInitialiseTaskLists+0x68>)
 800e01c:	f7fe fc98 	bl	800c950 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e020:	480c      	ldr	r0, [pc, #48]	; (800e054 <prvInitialiseTaskLists+0x6c>)
 800e022:	f7fe fc95 	bl	800c950 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e026:	480c      	ldr	r0, [pc, #48]	; (800e058 <prvInitialiseTaskLists+0x70>)
 800e028:	f7fe fc92 	bl	800c950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e02c:	480b      	ldr	r0, [pc, #44]	; (800e05c <prvInitialiseTaskLists+0x74>)
 800e02e:	f7fe fc8f 	bl	800c950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e032:	4b0b      	ldr	r3, [pc, #44]	; (800e060 <prvInitialiseTaskLists+0x78>)
 800e034:	4a05      	ldr	r2, [pc, #20]	; (800e04c <prvInitialiseTaskLists+0x64>)
 800e036:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e038:	4b0a      	ldr	r3, [pc, #40]	; (800e064 <prvInitialiseTaskLists+0x7c>)
 800e03a:	4a05      	ldr	r2, [pc, #20]	; (800e050 <prvInitialiseTaskLists+0x68>)
 800e03c:	601a      	str	r2, [r3, #0]
}
 800e03e:	bf00      	nop
 800e040:	3708      	adds	r7, #8
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	2000aec0 	.word	0x2000aec0
 800e04c:	2000b320 	.word	0x2000b320
 800e050:	2000b334 	.word	0x2000b334
 800e054:	2000b350 	.word	0x2000b350
 800e058:	2000b364 	.word	0x2000b364
 800e05c:	2000b37c 	.word	0x2000b37c
 800e060:	2000b348 	.word	0x2000b348
 800e064:	2000b34c 	.word	0x2000b34c

0800e068 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e06e:	e019      	b.n	800e0a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e070:	f000 fdd8 	bl	800ec24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e074:	4b10      	ldr	r3, [pc, #64]	; (800e0b8 <prvCheckTasksWaitingTermination+0x50>)
 800e076:	68db      	ldr	r3, [r3, #12]
 800e078:	68db      	ldr	r3, [r3, #12]
 800e07a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	3304      	adds	r3, #4
 800e080:	4618      	mov	r0, r3
 800e082:	f7fe fcef 	bl	800ca64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e086:	4b0d      	ldr	r3, [pc, #52]	; (800e0bc <prvCheckTasksWaitingTermination+0x54>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	3b01      	subs	r3, #1
 800e08c:	4a0b      	ldr	r2, [pc, #44]	; (800e0bc <prvCheckTasksWaitingTermination+0x54>)
 800e08e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e090:	4b0b      	ldr	r3, [pc, #44]	; (800e0c0 <prvCheckTasksWaitingTermination+0x58>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	3b01      	subs	r3, #1
 800e096:	4a0a      	ldr	r2, [pc, #40]	; (800e0c0 <prvCheckTasksWaitingTermination+0x58>)
 800e098:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e09a:	f000 fdf3 	bl	800ec84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 f810 	bl	800e0c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e0a4:	4b06      	ldr	r3, [pc, #24]	; (800e0c0 <prvCheckTasksWaitingTermination+0x58>)
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d1e1      	bne.n	800e070 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e0ac:	bf00      	nop
 800e0ae:	bf00      	nop
 800e0b0:	3708      	adds	r7, #8
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
 800e0b6:	bf00      	nop
 800e0b8:	2000b364 	.word	0x2000b364
 800e0bc:	2000b390 	.word	0x2000b390
 800e0c0:	2000b378 	.word	0x2000b378

0800e0c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	3354      	adds	r3, #84	; 0x54
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f00b ff61 	bl	8019f98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d108      	bne.n	800e0f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	f000 ff8b 	bl	800f000 <vPortFree>
				vPortFree( pxTCB );
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f000 ff88 	bl	800f000 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e0f0:	e018      	b.n	800e124 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d103      	bne.n	800e104 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f000 ff7f 	bl	800f000 <vPortFree>
	}
 800e102:	e00f      	b.n	800e124 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e10a:	2b02      	cmp	r3, #2
 800e10c:	d00a      	beq.n	800e124 <prvDeleteTCB+0x60>
	__asm volatile
 800e10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	60fb      	str	r3, [r7, #12]
}
 800e120:	bf00      	nop
 800e122:	e7fe      	b.n	800e122 <prvDeleteTCB+0x5e>
	}
 800e124:	bf00      	nop
 800e126:	3710      	adds	r7, #16
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e132:	4b0c      	ldr	r3, [pc, #48]	; (800e164 <prvResetNextTaskUnblockTime+0x38>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d104      	bne.n	800e146 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e13c:	4b0a      	ldr	r3, [pc, #40]	; (800e168 <prvResetNextTaskUnblockTime+0x3c>)
 800e13e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e142:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e144:	e008      	b.n	800e158 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e146:	4b07      	ldr	r3, [pc, #28]	; (800e164 <prvResetNextTaskUnblockTime+0x38>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	68db      	ldr	r3, [r3, #12]
 800e14e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	4a04      	ldr	r2, [pc, #16]	; (800e168 <prvResetNextTaskUnblockTime+0x3c>)
 800e156:	6013      	str	r3, [r2, #0]
}
 800e158:	bf00      	nop
 800e15a:	370c      	adds	r7, #12
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr
 800e164:	2000b348 	.word	0x2000b348
 800e168:	2000b3b0 	.word	0x2000b3b0

0800e16c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e16c:	b480      	push	{r7}
 800e16e:	b083      	sub	sp, #12
 800e170:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e172:	4b0b      	ldr	r3, [pc, #44]	; (800e1a0 <xTaskGetSchedulerState+0x34>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d102      	bne.n	800e180 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e17a:	2301      	movs	r3, #1
 800e17c:	607b      	str	r3, [r7, #4]
 800e17e:	e008      	b.n	800e192 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e180:	4b08      	ldr	r3, [pc, #32]	; (800e1a4 <xTaskGetSchedulerState+0x38>)
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d102      	bne.n	800e18e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e188:	2302      	movs	r3, #2
 800e18a:	607b      	str	r3, [r7, #4]
 800e18c:	e001      	b.n	800e192 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e18e:	2300      	movs	r3, #0
 800e190:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e192:	687b      	ldr	r3, [r7, #4]
	}
 800e194:	4618      	mov	r0, r3
 800e196:	370c      	adds	r7, #12
 800e198:	46bd      	mov	sp, r7
 800e19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19e:	4770      	bx	lr
 800e1a0:	2000b39c 	.word	0x2000b39c
 800e1a4:	2000b3b8 	.word	0x2000b3b8

0800e1a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d056      	beq.n	800e26c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e1be:	4b2e      	ldr	r3, [pc, #184]	; (800e278 <xTaskPriorityDisinherit+0xd0>)
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	693a      	ldr	r2, [r7, #16]
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d00a      	beq.n	800e1de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1cc:	f383 8811 	msr	BASEPRI, r3
 800e1d0:	f3bf 8f6f 	isb	sy
 800e1d4:	f3bf 8f4f 	dsb	sy
 800e1d8:	60fb      	str	r3, [r7, #12]
}
 800e1da:	bf00      	nop
 800e1dc:	e7fe      	b.n	800e1dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d10a      	bne.n	800e1fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ea:	f383 8811 	msr	BASEPRI, r3
 800e1ee:	f3bf 8f6f 	isb	sy
 800e1f2:	f3bf 8f4f 	dsb	sy
 800e1f6:	60bb      	str	r3, [r7, #8]
}
 800e1f8:	bf00      	nop
 800e1fa:	e7fe      	b.n	800e1fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e200:	1e5a      	subs	r2, r3, #1
 800e202:	693b      	ldr	r3, [r7, #16]
 800e204:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e20e:	429a      	cmp	r2, r3
 800e210:	d02c      	beq.n	800e26c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e216:	2b00      	cmp	r3, #0
 800e218:	d128      	bne.n	800e26c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	3304      	adds	r3, #4
 800e21e:	4618      	mov	r0, r3
 800e220:	f7fe fc20 	bl	800ca64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e230:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e238:	693b      	ldr	r3, [r7, #16]
 800e23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e23c:	4b0f      	ldr	r3, [pc, #60]	; (800e27c <xTaskPriorityDisinherit+0xd4>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	429a      	cmp	r2, r3
 800e242:	d903      	bls.n	800e24c <xTaskPriorityDisinherit+0xa4>
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e248:	4a0c      	ldr	r2, [pc, #48]	; (800e27c <xTaskPriorityDisinherit+0xd4>)
 800e24a:	6013      	str	r3, [r2, #0]
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e250:	4613      	mov	r3, r2
 800e252:	009b      	lsls	r3, r3, #2
 800e254:	4413      	add	r3, r2
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	4a09      	ldr	r2, [pc, #36]	; (800e280 <xTaskPriorityDisinherit+0xd8>)
 800e25a:	441a      	add	r2, r3
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	3304      	adds	r3, #4
 800e260:	4619      	mov	r1, r3
 800e262:	4610      	mov	r0, r2
 800e264:	f7fe fba1 	bl	800c9aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e268:	2301      	movs	r3, #1
 800e26a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e26c:	697b      	ldr	r3, [r7, #20]
	}
 800e26e:	4618      	mov	r0, r3
 800e270:	3718      	adds	r7, #24
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	2000aebc 	.word	0x2000aebc
 800e27c:	2000b398 	.word	0x2000b398
 800e280:	2000aec0 	.word	0x2000aec0

0800e284 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e28e:	4b21      	ldr	r3, [pc, #132]	; (800e314 <prvAddCurrentTaskToDelayedList+0x90>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e294:	4b20      	ldr	r3, [pc, #128]	; (800e318 <prvAddCurrentTaskToDelayedList+0x94>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	3304      	adds	r3, #4
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7fe fbe2 	bl	800ca64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2a6:	d10a      	bne.n	800e2be <prvAddCurrentTaskToDelayedList+0x3a>
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d007      	beq.n	800e2be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2ae:	4b1a      	ldr	r3, [pc, #104]	; (800e318 <prvAddCurrentTaskToDelayedList+0x94>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	3304      	adds	r3, #4
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	4819      	ldr	r0, [pc, #100]	; (800e31c <prvAddCurrentTaskToDelayedList+0x98>)
 800e2b8:	f7fe fb77 	bl	800c9aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e2bc:	e026      	b.n	800e30c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e2be:	68fa      	ldr	r2, [r7, #12]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4413      	add	r3, r2
 800e2c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e2c6:	4b14      	ldr	r3, [pc, #80]	; (800e318 <prvAddCurrentTaskToDelayedList+0x94>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	68ba      	ldr	r2, [r7, #8]
 800e2cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e2ce:	68ba      	ldr	r2, [r7, #8]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d209      	bcs.n	800e2ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2d6:	4b12      	ldr	r3, [pc, #72]	; (800e320 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	4b0f      	ldr	r3, [pc, #60]	; (800e318 <prvAddCurrentTaskToDelayedList+0x94>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	3304      	adds	r3, #4
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	4610      	mov	r0, r2
 800e2e4:	f7fe fb85 	bl	800c9f2 <vListInsert>
}
 800e2e8:	e010      	b.n	800e30c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2ea:	4b0e      	ldr	r3, [pc, #56]	; (800e324 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e2ec:	681a      	ldr	r2, [r3, #0]
 800e2ee:	4b0a      	ldr	r3, [pc, #40]	; (800e318 <prvAddCurrentTaskToDelayedList+0x94>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	3304      	adds	r3, #4
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	f7fe fb7b 	bl	800c9f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e2fc:	4b0a      	ldr	r3, [pc, #40]	; (800e328 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	68ba      	ldr	r2, [r7, #8]
 800e302:	429a      	cmp	r2, r3
 800e304:	d202      	bcs.n	800e30c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e306:	4a08      	ldr	r2, [pc, #32]	; (800e328 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	6013      	str	r3, [r2, #0]
}
 800e30c:	bf00      	nop
 800e30e:	3710      	adds	r7, #16
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	2000b394 	.word	0x2000b394
 800e318:	2000aebc 	.word	0x2000aebc
 800e31c:	2000b37c 	.word	0x2000b37c
 800e320:	2000b34c 	.word	0x2000b34c
 800e324:	2000b348 	.word	0x2000b348
 800e328:	2000b3b0 	.word	0x2000b3b0

0800e32c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b08a      	sub	sp, #40	; 0x28
 800e330:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e332:	2300      	movs	r3, #0
 800e334:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e336:	f000 fb07 	bl	800e948 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e33a:	4b1c      	ldr	r3, [pc, #112]	; (800e3ac <xTimerCreateTimerTask+0x80>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d021      	beq.n	800e386 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e342:	2300      	movs	r3, #0
 800e344:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e346:	2300      	movs	r3, #0
 800e348:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e34a:	1d3a      	adds	r2, r7, #4
 800e34c:	f107 0108 	add.w	r1, r7, #8
 800e350:	f107 030c 	add.w	r3, r7, #12
 800e354:	4618      	mov	r0, r3
 800e356:	f7fe fae1 	bl	800c91c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e35a:	6879      	ldr	r1, [r7, #4]
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	68fa      	ldr	r2, [r7, #12]
 800e360:	9202      	str	r2, [sp, #8]
 800e362:	9301      	str	r3, [sp, #4]
 800e364:	2302      	movs	r3, #2
 800e366:	9300      	str	r3, [sp, #0]
 800e368:	2300      	movs	r3, #0
 800e36a:	460a      	mov	r2, r1
 800e36c:	4910      	ldr	r1, [pc, #64]	; (800e3b0 <xTimerCreateTimerTask+0x84>)
 800e36e:	4811      	ldr	r0, [pc, #68]	; (800e3b4 <xTimerCreateTimerTask+0x88>)
 800e370:	f7ff f88e 	bl	800d490 <xTaskCreateStatic>
 800e374:	4603      	mov	r3, r0
 800e376:	4a10      	ldr	r2, [pc, #64]	; (800e3b8 <xTimerCreateTimerTask+0x8c>)
 800e378:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e37a:	4b0f      	ldr	r3, [pc, #60]	; (800e3b8 <xTimerCreateTimerTask+0x8c>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d001      	beq.n	800e386 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e382:	2301      	movs	r3, #1
 800e384:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d10a      	bne.n	800e3a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e390:	f383 8811 	msr	BASEPRI, r3
 800e394:	f3bf 8f6f 	isb	sy
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	613b      	str	r3, [r7, #16]
}
 800e39e:	bf00      	nop
 800e3a0:	e7fe      	b.n	800e3a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e3a2:	697b      	ldr	r3, [r7, #20]
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3718      	adds	r7, #24
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	2000b3ec 	.word	0x2000b3ec
 800e3b0:	0801b2f4 	.word	0x0801b2f4
 800e3b4:	0800e4f1 	.word	0x0800e4f1
 800e3b8:	2000b3f0 	.word	0x2000b3f0

0800e3bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b08a      	sub	sp, #40	; 0x28
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	60f8      	str	r0, [r7, #12]
 800e3c4:	60b9      	str	r1, [r7, #8]
 800e3c6:	607a      	str	r2, [r7, #4]
 800e3c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d10a      	bne.n	800e3ea <xTimerGenericCommand+0x2e>
	__asm volatile
 800e3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d8:	f383 8811 	msr	BASEPRI, r3
 800e3dc:	f3bf 8f6f 	isb	sy
 800e3e0:	f3bf 8f4f 	dsb	sy
 800e3e4:	623b      	str	r3, [r7, #32]
}
 800e3e6:	bf00      	nop
 800e3e8:	e7fe      	b.n	800e3e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e3ea:	4b1a      	ldr	r3, [pc, #104]	; (800e454 <xTimerGenericCommand+0x98>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d02a      	beq.n	800e448 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	2b05      	cmp	r3, #5
 800e402:	dc18      	bgt.n	800e436 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e404:	f7ff feb2 	bl	800e16c <xTaskGetSchedulerState>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b02      	cmp	r3, #2
 800e40c:	d109      	bne.n	800e422 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e40e:	4b11      	ldr	r3, [pc, #68]	; (800e454 <xTimerGenericCommand+0x98>)
 800e410:	6818      	ldr	r0, [r3, #0]
 800e412:	f107 0110 	add.w	r1, r7, #16
 800e416:	2300      	movs	r3, #0
 800e418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e41a:	f7fe fc51 	bl	800ccc0 <xQueueGenericSend>
 800e41e:	6278      	str	r0, [r7, #36]	; 0x24
 800e420:	e012      	b.n	800e448 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e422:	4b0c      	ldr	r3, [pc, #48]	; (800e454 <xTimerGenericCommand+0x98>)
 800e424:	6818      	ldr	r0, [r3, #0]
 800e426:	f107 0110 	add.w	r1, r7, #16
 800e42a:	2300      	movs	r3, #0
 800e42c:	2200      	movs	r2, #0
 800e42e:	f7fe fc47 	bl	800ccc0 <xQueueGenericSend>
 800e432:	6278      	str	r0, [r7, #36]	; 0x24
 800e434:	e008      	b.n	800e448 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e436:	4b07      	ldr	r3, [pc, #28]	; (800e454 <xTimerGenericCommand+0x98>)
 800e438:	6818      	ldr	r0, [r3, #0]
 800e43a:	f107 0110 	add.w	r1, r7, #16
 800e43e:	2300      	movs	r3, #0
 800e440:	683a      	ldr	r2, [r7, #0]
 800e442:	f7fe fd3b 	bl	800cebc <xQueueGenericSendFromISR>
 800e446:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3728      	adds	r7, #40	; 0x28
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	2000b3ec 	.word	0x2000b3ec

0800e458 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b088      	sub	sp, #32
 800e45c:	af02      	add	r7, sp, #8
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e462:	4b22      	ldr	r3, [pc, #136]	; (800e4ec <prvProcessExpiredTimer+0x94>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	68db      	ldr	r3, [r3, #12]
 800e468:	68db      	ldr	r3, [r3, #12]
 800e46a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	3304      	adds	r3, #4
 800e470:	4618      	mov	r0, r3
 800e472:	f7fe faf7 	bl	800ca64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e47c:	f003 0304 	and.w	r3, r3, #4
 800e480:	2b00      	cmp	r3, #0
 800e482:	d022      	beq.n	800e4ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	699a      	ldr	r2, [r3, #24]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	18d1      	adds	r1, r2, r3
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	683a      	ldr	r2, [r7, #0]
 800e490:	6978      	ldr	r0, [r7, #20]
 800e492:	f000 f8d1 	bl	800e638 <prvInsertTimerInActiveList>
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d01f      	beq.n	800e4dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e49c:	2300      	movs	r3, #0
 800e49e:	9300      	str	r3, [sp, #0]
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	6978      	ldr	r0, [r7, #20]
 800e4a8:	f7ff ff88 	bl	800e3bc <xTimerGenericCommand>
 800e4ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d113      	bne.n	800e4dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b8:	f383 8811 	msr	BASEPRI, r3
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	60fb      	str	r3, [r7, #12]
}
 800e4c6:	bf00      	nop
 800e4c8:	e7fe      	b.n	800e4c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4d0:	f023 0301 	bic.w	r3, r3, #1
 800e4d4:	b2da      	uxtb	r2, r3
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	6a1b      	ldr	r3, [r3, #32]
 800e4e0:	6978      	ldr	r0, [r7, #20]
 800e4e2:	4798      	blx	r3
}
 800e4e4:	bf00      	nop
 800e4e6:	3718      	adds	r7, #24
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}
 800e4ec:	2000b3e4 	.word	0x2000b3e4

0800e4f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b084      	sub	sp, #16
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e4f8:	f107 0308 	add.w	r3, r7, #8
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f000 f857 	bl	800e5b0 <prvGetNextExpireTime>
 800e502:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	4619      	mov	r1, r3
 800e508:	68f8      	ldr	r0, [r7, #12]
 800e50a:	f000 f803 	bl	800e514 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e50e:	f000 f8d5 	bl	800e6bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e512:	e7f1      	b.n	800e4f8 <prvTimerTask+0x8>

0800e514 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b084      	sub	sp, #16
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e51e:	f7ff fa13 	bl	800d948 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e522:	f107 0308 	add.w	r3, r7, #8
 800e526:	4618      	mov	r0, r3
 800e528:	f000 f866 	bl	800e5f8 <prvSampleTimeNow>
 800e52c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d130      	bne.n	800e596 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d10a      	bne.n	800e550 <prvProcessTimerOrBlockTask+0x3c>
 800e53a:	687a      	ldr	r2, [r7, #4]
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	429a      	cmp	r2, r3
 800e540:	d806      	bhi.n	800e550 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e542:	f7ff fa0f 	bl	800d964 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e546:	68f9      	ldr	r1, [r7, #12]
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f7ff ff85 	bl	800e458 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e54e:	e024      	b.n	800e59a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d008      	beq.n	800e568 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e556:	4b13      	ldr	r3, [pc, #76]	; (800e5a4 <prvProcessTimerOrBlockTask+0x90>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d101      	bne.n	800e564 <prvProcessTimerOrBlockTask+0x50>
 800e560:	2301      	movs	r3, #1
 800e562:	e000      	b.n	800e566 <prvProcessTimerOrBlockTask+0x52>
 800e564:	2300      	movs	r3, #0
 800e566:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e568:	4b0f      	ldr	r3, [pc, #60]	; (800e5a8 <prvProcessTimerOrBlockTask+0x94>)
 800e56a:	6818      	ldr	r0, [r3, #0]
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	1ad3      	subs	r3, r2, r3
 800e572:	683a      	ldr	r2, [r7, #0]
 800e574:	4619      	mov	r1, r3
 800e576:	f7fe ff57 	bl	800d428 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e57a:	f7ff f9f3 	bl	800d964 <xTaskResumeAll>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	d10a      	bne.n	800e59a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e584:	4b09      	ldr	r3, [pc, #36]	; (800e5ac <prvProcessTimerOrBlockTask+0x98>)
 800e586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e58a:	601a      	str	r2, [r3, #0]
 800e58c:	f3bf 8f4f 	dsb	sy
 800e590:	f3bf 8f6f 	isb	sy
}
 800e594:	e001      	b.n	800e59a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e596:	f7ff f9e5 	bl	800d964 <xTaskResumeAll>
}
 800e59a:	bf00      	nop
 800e59c:	3710      	adds	r7, #16
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	2000b3e8 	.word	0x2000b3e8
 800e5a8:	2000b3ec 	.word	0x2000b3ec
 800e5ac:	e000ed04 	.word	0xe000ed04

0800e5b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	b085      	sub	sp, #20
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e5b8:	4b0e      	ldr	r3, [pc, #56]	; (800e5f4 <prvGetNextExpireTime+0x44>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d101      	bne.n	800e5c6 <prvGetNextExpireTime+0x16>
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	e000      	b.n	800e5c8 <prvGetNextExpireTime+0x18>
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d105      	bne.n	800e5e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e5d4:	4b07      	ldr	r3, [pc, #28]	; (800e5f4 <prvGetNextExpireTime+0x44>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	60fb      	str	r3, [r7, #12]
 800e5de:	e001      	b.n	800e5e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3714      	adds	r7, #20
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr
 800e5f2:	bf00      	nop
 800e5f4:	2000b3e4 	.word	0x2000b3e4

0800e5f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e600:	f7ff fa4e 	bl	800daa0 <xTaskGetTickCount>
 800e604:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e606:	4b0b      	ldr	r3, [pc, #44]	; (800e634 <prvSampleTimeNow+0x3c>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	68fa      	ldr	r2, [r7, #12]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d205      	bcs.n	800e61c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e610:	f000 f936 	bl	800e880 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2201      	movs	r2, #1
 800e618:	601a      	str	r2, [r3, #0]
 800e61a:	e002      	b.n	800e622 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2200      	movs	r2, #0
 800e620:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e622:	4a04      	ldr	r2, [pc, #16]	; (800e634 <prvSampleTimeNow+0x3c>)
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e628:	68fb      	ldr	r3, [r7, #12]
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3710      	adds	r7, #16
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	2000b3f4 	.word	0x2000b3f4

0800e638 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b086      	sub	sp, #24
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	607a      	str	r2, [r7, #4]
 800e644:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e646:	2300      	movs	r3, #0
 800e648:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	68ba      	ldr	r2, [r7, #8]
 800e64e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	68fa      	ldr	r2, [r7, #12]
 800e654:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e656:	68ba      	ldr	r2, [r7, #8]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d812      	bhi.n	800e684 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	1ad2      	subs	r2, r2, r3
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	699b      	ldr	r3, [r3, #24]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d302      	bcc.n	800e672 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e66c:	2301      	movs	r3, #1
 800e66e:	617b      	str	r3, [r7, #20]
 800e670:	e01b      	b.n	800e6aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e672:	4b10      	ldr	r3, [pc, #64]	; (800e6b4 <prvInsertTimerInActiveList+0x7c>)
 800e674:	681a      	ldr	r2, [r3, #0]
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	3304      	adds	r3, #4
 800e67a:	4619      	mov	r1, r3
 800e67c:	4610      	mov	r0, r2
 800e67e:	f7fe f9b8 	bl	800c9f2 <vListInsert>
 800e682:	e012      	b.n	800e6aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	429a      	cmp	r2, r3
 800e68a:	d206      	bcs.n	800e69a <prvInsertTimerInActiveList+0x62>
 800e68c:	68ba      	ldr	r2, [r7, #8]
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	429a      	cmp	r2, r3
 800e692:	d302      	bcc.n	800e69a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e694:	2301      	movs	r3, #1
 800e696:	617b      	str	r3, [r7, #20]
 800e698:	e007      	b.n	800e6aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e69a:	4b07      	ldr	r3, [pc, #28]	; (800e6b8 <prvInsertTimerInActiveList+0x80>)
 800e69c:	681a      	ldr	r2, [r3, #0]
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	3304      	adds	r3, #4
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	4610      	mov	r0, r2
 800e6a6:	f7fe f9a4 	bl	800c9f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e6aa:	697b      	ldr	r3, [r7, #20]
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3718      	adds	r7, #24
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}
 800e6b4:	2000b3e8 	.word	0x2000b3e8
 800e6b8:	2000b3e4 	.word	0x2000b3e4

0800e6bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b08e      	sub	sp, #56	; 0x38
 800e6c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e6c2:	e0ca      	b.n	800e85a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	da18      	bge.n	800e6fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e6ca:	1d3b      	adds	r3, r7, #4
 800e6cc:	3304      	adds	r3, #4
 800e6ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d10a      	bne.n	800e6ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6da:	f383 8811 	msr	BASEPRI, r3
 800e6de:	f3bf 8f6f 	isb	sy
 800e6e2:	f3bf 8f4f 	dsb	sy
 800e6e6:	61fb      	str	r3, [r7, #28]
}
 800e6e8:	bf00      	nop
 800e6ea:	e7fe      	b.n	800e6ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6f2:	6850      	ldr	r0, [r2, #4]
 800e6f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6f6:	6892      	ldr	r2, [r2, #8]
 800e6f8:	4611      	mov	r1, r2
 800e6fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	f2c0 80aa 	blt.w	800e858 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e70a:	695b      	ldr	r3, [r3, #20]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d004      	beq.n	800e71a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e712:	3304      	adds	r3, #4
 800e714:	4618      	mov	r0, r3
 800e716:	f7fe f9a5 	bl	800ca64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e71a:	463b      	mov	r3, r7
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7ff ff6b 	bl	800e5f8 <prvSampleTimeNow>
 800e722:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2b09      	cmp	r3, #9
 800e728:	f200 8097 	bhi.w	800e85a <prvProcessReceivedCommands+0x19e>
 800e72c:	a201      	add	r2, pc, #4	; (adr r2, 800e734 <prvProcessReceivedCommands+0x78>)
 800e72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e732:	bf00      	nop
 800e734:	0800e75d 	.word	0x0800e75d
 800e738:	0800e75d 	.word	0x0800e75d
 800e73c:	0800e75d 	.word	0x0800e75d
 800e740:	0800e7d1 	.word	0x0800e7d1
 800e744:	0800e7e5 	.word	0x0800e7e5
 800e748:	0800e82f 	.word	0x0800e82f
 800e74c:	0800e75d 	.word	0x0800e75d
 800e750:	0800e75d 	.word	0x0800e75d
 800e754:	0800e7d1 	.word	0x0800e7d1
 800e758:	0800e7e5 	.word	0x0800e7e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e762:	f043 0301 	orr.w	r3, r3, #1
 800e766:	b2da      	uxtb	r2, r3
 800e768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e76e:	68ba      	ldr	r2, [r7, #8]
 800e770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e772:	699b      	ldr	r3, [r3, #24]
 800e774:	18d1      	adds	r1, r2, r3
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e77a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e77c:	f7ff ff5c 	bl	800e638 <prvInsertTimerInActiveList>
 800e780:	4603      	mov	r3, r0
 800e782:	2b00      	cmp	r3, #0
 800e784:	d069      	beq.n	800e85a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e788:	6a1b      	ldr	r3, [r3, #32]
 800e78a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e78c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e794:	f003 0304 	and.w	r3, r3, #4
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d05e      	beq.n	800e85a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e79c:	68ba      	ldr	r2, [r7, #8]
 800e79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a0:	699b      	ldr	r3, [r3, #24]
 800e7a2:	441a      	add	r2, r3
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	9300      	str	r3, [sp, #0]
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	2100      	movs	r1, #0
 800e7ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7ae:	f7ff fe05 	bl	800e3bc <xTimerGenericCommand>
 800e7b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e7b4:	6a3b      	ldr	r3, [r7, #32]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d14f      	bne.n	800e85a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7be:	f383 8811 	msr	BASEPRI, r3
 800e7c2:	f3bf 8f6f 	isb	sy
 800e7c6:	f3bf 8f4f 	dsb	sy
 800e7ca:	61bb      	str	r3, [r7, #24]
}
 800e7cc:	bf00      	nop
 800e7ce:	e7fe      	b.n	800e7ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7d6:	f023 0301 	bic.w	r3, r3, #1
 800e7da:	b2da      	uxtb	r2, r3
 800e7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e7e2:	e03a      	b.n	800e85a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7ea:	f043 0301 	orr.w	r3, r3, #1
 800e7ee:	b2da      	uxtb	r2, r3
 800e7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e7f6:	68ba      	ldr	r2, [r7, #8]
 800e7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fe:	699b      	ldr	r3, [r3, #24]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10a      	bne.n	800e81a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e808:	f383 8811 	msr	BASEPRI, r3
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f3bf 8f4f 	dsb	sy
 800e814:	617b      	str	r3, [r7, #20]
}
 800e816:	bf00      	nop
 800e818:	e7fe      	b.n	800e818 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81c:	699a      	ldr	r2, [r3, #24]
 800e81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e820:	18d1      	adds	r1, r2, r3
 800e822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e828:	f7ff ff06 	bl	800e638 <prvInsertTimerInActiveList>
					break;
 800e82c:	e015      	b.n	800e85a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e834:	f003 0302 	and.w	r3, r3, #2
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d103      	bne.n	800e844 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e83c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e83e:	f000 fbdf 	bl	800f000 <vPortFree>
 800e842:	e00a      	b.n	800e85a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e84a:	f023 0301 	bic.w	r3, r3, #1
 800e84e:	b2da      	uxtb	r2, r3
 800e850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e856:	e000      	b.n	800e85a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e858:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e85a:	4b08      	ldr	r3, [pc, #32]	; (800e87c <prvProcessReceivedCommands+0x1c0>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	1d39      	adds	r1, r7, #4
 800e860:	2200      	movs	r2, #0
 800e862:	4618      	mov	r0, r3
 800e864:	f7fe fbc6 	bl	800cff4 <xQueueReceive>
 800e868:	4603      	mov	r3, r0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f47f af2a 	bne.w	800e6c4 <prvProcessReceivedCommands+0x8>
	}
}
 800e870:	bf00      	nop
 800e872:	bf00      	nop
 800e874:	3730      	adds	r7, #48	; 0x30
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	2000b3ec 	.word	0x2000b3ec

0800e880 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b088      	sub	sp, #32
 800e884:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e886:	e048      	b.n	800e91a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e888:	4b2d      	ldr	r3, [pc, #180]	; (800e940 <prvSwitchTimerLists+0xc0>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e892:	4b2b      	ldr	r3, [pc, #172]	; (800e940 <prvSwitchTimerLists+0xc0>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	68db      	ldr	r3, [r3, #12]
 800e898:	68db      	ldr	r3, [r3, #12]
 800e89a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	3304      	adds	r3, #4
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7fe f8df 	bl	800ca64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	6a1b      	ldr	r3, [r3, #32]
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8b4:	f003 0304 	and.w	r3, r3, #4
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d02e      	beq.n	800e91a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	699b      	ldr	r3, [r3, #24]
 800e8c0:	693a      	ldr	r2, [r7, #16]
 800e8c2:	4413      	add	r3, r2
 800e8c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e8c6:	68ba      	ldr	r2, [r7, #8]
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d90e      	bls.n	800e8ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	68ba      	ldr	r2, [r7, #8]
 800e8d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	68fa      	ldr	r2, [r7, #12]
 800e8d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e8da:	4b19      	ldr	r3, [pc, #100]	; (800e940 <prvSwitchTimerLists+0xc0>)
 800e8dc:	681a      	ldr	r2, [r3, #0]
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	3304      	adds	r3, #4
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	4610      	mov	r0, r2
 800e8e6:	f7fe f884 	bl	800c9f2 <vListInsert>
 800e8ea:	e016      	b.n	800e91a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	9300      	str	r3, [sp, #0]
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	693a      	ldr	r2, [r7, #16]
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f7ff fd60 	bl	800e3bc <xTimerGenericCommand>
 800e8fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d10a      	bne.n	800e91a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e908:	f383 8811 	msr	BASEPRI, r3
 800e90c:	f3bf 8f6f 	isb	sy
 800e910:	f3bf 8f4f 	dsb	sy
 800e914:	603b      	str	r3, [r7, #0]
}
 800e916:	bf00      	nop
 800e918:	e7fe      	b.n	800e918 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e91a:	4b09      	ldr	r3, [pc, #36]	; (800e940 <prvSwitchTimerLists+0xc0>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d1b1      	bne.n	800e888 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e924:	4b06      	ldr	r3, [pc, #24]	; (800e940 <prvSwitchTimerLists+0xc0>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e92a:	4b06      	ldr	r3, [pc, #24]	; (800e944 <prvSwitchTimerLists+0xc4>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	4a04      	ldr	r2, [pc, #16]	; (800e940 <prvSwitchTimerLists+0xc0>)
 800e930:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e932:	4a04      	ldr	r2, [pc, #16]	; (800e944 <prvSwitchTimerLists+0xc4>)
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	6013      	str	r3, [r2, #0]
}
 800e938:	bf00      	nop
 800e93a:	3718      	adds	r7, #24
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	2000b3e4 	.word	0x2000b3e4
 800e944:	2000b3e8 	.word	0x2000b3e8

0800e948 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e94e:	f000 f969 	bl	800ec24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e952:	4b15      	ldr	r3, [pc, #84]	; (800e9a8 <prvCheckForValidListAndQueue+0x60>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d120      	bne.n	800e99c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e95a:	4814      	ldr	r0, [pc, #80]	; (800e9ac <prvCheckForValidListAndQueue+0x64>)
 800e95c:	f7fd fff8 	bl	800c950 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e960:	4813      	ldr	r0, [pc, #76]	; (800e9b0 <prvCheckForValidListAndQueue+0x68>)
 800e962:	f7fd fff5 	bl	800c950 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e966:	4b13      	ldr	r3, [pc, #76]	; (800e9b4 <prvCheckForValidListAndQueue+0x6c>)
 800e968:	4a10      	ldr	r2, [pc, #64]	; (800e9ac <prvCheckForValidListAndQueue+0x64>)
 800e96a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e96c:	4b12      	ldr	r3, [pc, #72]	; (800e9b8 <prvCheckForValidListAndQueue+0x70>)
 800e96e:	4a10      	ldr	r2, [pc, #64]	; (800e9b0 <prvCheckForValidListAndQueue+0x68>)
 800e970:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e972:	2300      	movs	r3, #0
 800e974:	9300      	str	r3, [sp, #0]
 800e976:	4b11      	ldr	r3, [pc, #68]	; (800e9bc <prvCheckForValidListAndQueue+0x74>)
 800e978:	4a11      	ldr	r2, [pc, #68]	; (800e9c0 <prvCheckForValidListAndQueue+0x78>)
 800e97a:	2110      	movs	r1, #16
 800e97c:	200a      	movs	r0, #10
 800e97e:	f7fe f903 	bl	800cb88 <xQueueGenericCreateStatic>
 800e982:	4603      	mov	r3, r0
 800e984:	4a08      	ldr	r2, [pc, #32]	; (800e9a8 <prvCheckForValidListAndQueue+0x60>)
 800e986:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e988:	4b07      	ldr	r3, [pc, #28]	; (800e9a8 <prvCheckForValidListAndQueue+0x60>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d005      	beq.n	800e99c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e990:	4b05      	ldr	r3, [pc, #20]	; (800e9a8 <prvCheckForValidListAndQueue+0x60>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	490b      	ldr	r1, [pc, #44]	; (800e9c4 <prvCheckForValidListAndQueue+0x7c>)
 800e996:	4618      	mov	r0, r3
 800e998:	f7fe fd1c 	bl	800d3d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e99c:	f000 f972 	bl	800ec84 <vPortExitCritical>
}
 800e9a0:	bf00      	nop
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	2000b3ec 	.word	0x2000b3ec
 800e9ac:	2000b3bc 	.word	0x2000b3bc
 800e9b0:	2000b3d0 	.word	0x2000b3d0
 800e9b4:	2000b3e4 	.word	0x2000b3e4
 800e9b8:	2000b3e8 	.word	0x2000b3e8
 800e9bc:	2000b498 	.word	0x2000b498
 800e9c0:	2000b3f8 	.word	0x2000b3f8
 800e9c4:	0801b2fc 	.word	0x0801b2fc

0800e9c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b085      	sub	sp, #20
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	3b04      	subs	r3, #4
 800e9d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e9e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	3b04      	subs	r3, #4
 800e9e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	f023 0201 	bic.w	r2, r3, #1
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	3b04      	subs	r3, #4
 800e9f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e9f8:	4a0c      	ldr	r2, [pc, #48]	; (800ea2c <pxPortInitialiseStack+0x64>)
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	3b14      	subs	r3, #20
 800ea02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ea04:	687a      	ldr	r2, [r7, #4]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	3b04      	subs	r3, #4
 800ea0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	f06f 0202 	mvn.w	r2, #2
 800ea16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	3b20      	subs	r3, #32
 800ea1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3714      	adds	r7, #20
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr
 800ea2c:	0800ea31 	.word	0x0800ea31

0800ea30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ea30:	b480      	push	{r7}
 800ea32:	b085      	sub	sp, #20
 800ea34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ea3a:	4b12      	ldr	r3, [pc, #72]	; (800ea84 <prvTaskExitError+0x54>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea42:	d00a      	beq.n	800ea5a <prvTaskExitError+0x2a>
	__asm volatile
 800ea44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea48:	f383 8811 	msr	BASEPRI, r3
 800ea4c:	f3bf 8f6f 	isb	sy
 800ea50:	f3bf 8f4f 	dsb	sy
 800ea54:	60fb      	str	r3, [r7, #12]
}
 800ea56:	bf00      	nop
 800ea58:	e7fe      	b.n	800ea58 <prvTaskExitError+0x28>
	__asm volatile
 800ea5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea5e:	f383 8811 	msr	BASEPRI, r3
 800ea62:	f3bf 8f6f 	isb	sy
 800ea66:	f3bf 8f4f 	dsb	sy
 800ea6a:	60bb      	str	r3, [r7, #8]
}
 800ea6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ea6e:	bf00      	nop
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d0fc      	beq.n	800ea70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ea76:	bf00      	nop
 800ea78:	bf00      	nop
 800ea7a:	3714      	adds	r7, #20
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr
 800ea84:	2000009c 	.word	0x2000009c
	...

0800ea90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ea90:	4b07      	ldr	r3, [pc, #28]	; (800eab0 <pxCurrentTCBConst2>)
 800ea92:	6819      	ldr	r1, [r3, #0]
 800ea94:	6808      	ldr	r0, [r1, #0]
 800ea96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea9a:	f380 8809 	msr	PSP, r0
 800ea9e:	f3bf 8f6f 	isb	sy
 800eaa2:	f04f 0000 	mov.w	r0, #0
 800eaa6:	f380 8811 	msr	BASEPRI, r0
 800eaaa:	4770      	bx	lr
 800eaac:	f3af 8000 	nop.w

0800eab0 <pxCurrentTCBConst2>:
 800eab0:	2000aebc 	.word	0x2000aebc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eab4:	bf00      	nop
 800eab6:	bf00      	nop

0800eab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eab8:	4808      	ldr	r0, [pc, #32]	; (800eadc <prvPortStartFirstTask+0x24>)
 800eaba:	6800      	ldr	r0, [r0, #0]
 800eabc:	6800      	ldr	r0, [r0, #0]
 800eabe:	f380 8808 	msr	MSP, r0
 800eac2:	f04f 0000 	mov.w	r0, #0
 800eac6:	f380 8814 	msr	CONTROL, r0
 800eaca:	b662      	cpsie	i
 800eacc:	b661      	cpsie	f
 800eace:	f3bf 8f4f 	dsb	sy
 800ead2:	f3bf 8f6f 	isb	sy
 800ead6:	df00      	svc	0
 800ead8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eada:	bf00      	nop
 800eadc:	e000ed08 	.word	0xe000ed08

0800eae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b086      	sub	sp, #24
 800eae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eae6:	4b46      	ldr	r3, [pc, #280]	; (800ec00 <xPortStartScheduler+0x120>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4a46      	ldr	r2, [pc, #280]	; (800ec04 <xPortStartScheduler+0x124>)
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d10a      	bne.n	800eb06 <xPortStartScheduler+0x26>
	__asm volatile
 800eaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf4:	f383 8811 	msr	BASEPRI, r3
 800eaf8:	f3bf 8f6f 	isb	sy
 800eafc:	f3bf 8f4f 	dsb	sy
 800eb00:	613b      	str	r3, [r7, #16]
}
 800eb02:	bf00      	nop
 800eb04:	e7fe      	b.n	800eb04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eb06:	4b3e      	ldr	r3, [pc, #248]	; (800ec00 <xPortStartScheduler+0x120>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	4a3f      	ldr	r2, [pc, #252]	; (800ec08 <xPortStartScheduler+0x128>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d10a      	bne.n	800eb26 <xPortStartScheduler+0x46>
	__asm volatile
 800eb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb14:	f383 8811 	msr	BASEPRI, r3
 800eb18:	f3bf 8f6f 	isb	sy
 800eb1c:	f3bf 8f4f 	dsb	sy
 800eb20:	60fb      	str	r3, [r7, #12]
}
 800eb22:	bf00      	nop
 800eb24:	e7fe      	b.n	800eb24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eb26:	4b39      	ldr	r3, [pc, #228]	; (800ec0c <xPortStartScheduler+0x12c>)
 800eb28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	b2db      	uxtb	r3, r3
 800eb30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	22ff      	movs	r2, #255	; 0xff
 800eb36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eb40:	78fb      	ldrb	r3, [r7, #3]
 800eb42:	b2db      	uxtb	r3, r3
 800eb44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eb48:	b2da      	uxtb	r2, r3
 800eb4a:	4b31      	ldr	r3, [pc, #196]	; (800ec10 <xPortStartScheduler+0x130>)
 800eb4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eb4e:	4b31      	ldr	r3, [pc, #196]	; (800ec14 <xPortStartScheduler+0x134>)
 800eb50:	2207      	movs	r2, #7
 800eb52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb54:	e009      	b.n	800eb6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800eb56:	4b2f      	ldr	r3, [pc, #188]	; (800ec14 <xPortStartScheduler+0x134>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	3b01      	subs	r3, #1
 800eb5c:	4a2d      	ldr	r2, [pc, #180]	; (800ec14 <xPortStartScheduler+0x134>)
 800eb5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eb60:	78fb      	ldrb	r3, [r7, #3]
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	005b      	lsls	r3, r3, #1
 800eb66:	b2db      	uxtb	r3, r3
 800eb68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb6a:	78fb      	ldrb	r3, [r7, #3]
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb72:	2b80      	cmp	r3, #128	; 0x80
 800eb74:	d0ef      	beq.n	800eb56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eb76:	4b27      	ldr	r3, [pc, #156]	; (800ec14 <xPortStartScheduler+0x134>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f1c3 0307 	rsb	r3, r3, #7
 800eb7e:	2b04      	cmp	r3, #4
 800eb80:	d00a      	beq.n	800eb98 <xPortStartScheduler+0xb8>
	__asm volatile
 800eb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb86:	f383 8811 	msr	BASEPRI, r3
 800eb8a:	f3bf 8f6f 	isb	sy
 800eb8e:	f3bf 8f4f 	dsb	sy
 800eb92:	60bb      	str	r3, [r7, #8]
}
 800eb94:	bf00      	nop
 800eb96:	e7fe      	b.n	800eb96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eb98:	4b1e      	ldr	r3, [pc, #120]	; (800ec14 <xPortStartScheduler+0x134>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	021b      	lsls	r3, r3, #8
 800eb9e:	4a1d      	ldr	r2, [pc, #116]	; (800ec14 <xPortStartScheduler+0x134>)
 800eba0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eba2:	4b1c      	ldr	r3, [pc, #112]	; (800ec14 <xPortStartScheduler+0x134>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ebaa:	4a1a      	ldr	r2, [pc, #104]	; (800ec14 <xPortStartScheduler+0x134>)
 800ebac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	b2da      	uxtb	r2, r3
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ebb6:	4b18      	ldr	r3, [pc, #96]	; (800ec18 <xPortStartScheduler+0x138>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	4a17      	ldr	r2, [pc, #92]	; (800ec18 <xPortStartScheduler+0x138>)
 800ebbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ebc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ebc2:	4b15      	ldr	r3, [pc, #84]	; (800ec18 <xPortStartScheduler+0x138>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	4a14      	ldr	r2, [pc, #80]	; (800ec18 <xPortStartScheduler+0x138>)
 800ebc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ebcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ebce:	f000 f8dd 	bl	800ed8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ebd2:	4b12      	ldr	r3, [pc, #72]	; (800ec1c <xPortStartScheduler+0x13c>)
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ebd8:	f000 f8fc 	bl	800edd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ebdc:	4b10      	ldr	r3, [pc, #64]	; (800ec20 <xPortStartScheduler+0x140>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4a0f      	ldr	r2, [pc, #60]	; (800ec20 <xPortStartScheduler+0x140>)
 800ebe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ebe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ebe8:	f7ff ff66 	bl	800eab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ebec:	f7ff f822 	bl	800dc34 <vTaskSwitchContext>
	prvTaskExitError();
 800ebf0:	f7ff ff1e 	bl	800ea30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ebf4:	2300      	movs	r3, #0
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3718      	adds	r7, #24
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	e000ed00 	.word	0xe000ed00
 800ec04:	410fc271 	.word	0x410fc271
 800ec08:	410fc270 	.word	0x410fc270
 800ec0c:	e000e400 	.word	0xe000e400
 800ec10:	2000b4e8 	.word	0x2000b4e8
 800ec14:	2000b4ec 	.word	0x2000b4ec
 800ec18:	e000ed20 	.word	0xe000ed20
 800ec1c:	2000009c 	.word	0x2000009c
 800ec20:	e000ef34 	.word	0xe000ef34

0800ec24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
	__asm volatile
 800ec2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec2e:	f383 8811 	msr	BASEPRI, r3
 800ec32:	f3bf 8f6f 	isb	sy
 800ec36:	f3bf 8f4f 	dsb	sy
 800ec3a:	607b      	str	r3, [r7, #4]
}
 800ec3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ec3e:	4b0f      	ldr	r3, [pc, #60]	; (800ec7c <vPortEnterCritical+0x58>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	3301      	adds	r3, #1
 800ec44:	4a0d      	ldr	r2, [pc, #52]	; (800ec7c <vPortEnterCritical+0x58>)
 800ec46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ec48:	4b0c      	ldr	r3, [pc, #48]	; (800ec7c <vPortEnterCritical+0x58>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d10f      	bne.n	800ec70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ec50:	4b0b      	ldr	r3, [pc, #44]	; (800ec80 <vPortEnterCritical+0x5c>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	b2db      	uxtb	r3, r3
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d00a      	beq.n	800ec70 <vPortEnterCritical+0x4c>
	__asm volatile
 800ec5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec5e:	f383 8811 	msr	BASEPRI, r3
 800ec62:	f3bf 8f6f 	isb	sy
 800ec66:	f3bf 8f4f 	dsb	sy
 800ec6a:	603b      	str	r3, [r7, #0]
}
 800ec6c:	bf00      	nop
 800ec6e:	e7fe      	b.n	800ec6e <vPortEnterCritical+0x4a>
	}
}
 800ec70:	bf00      	nop
 800ec72:	370c      	adds	r7, #12
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr
 800ec7c:	2000009c 	.word	0x2000009c
 800ec80:	e000ed04 	.word	0xe000ed04

0800ec84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ec84:	b480      	push	{r7}
 800ec86:	b083      	sub	sp, #12
 800ec88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ec8a:	4b12      	ldr	r3, [pc, #72]	; (800ecd4 <vPortExitCritical+0x50>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d10a      	bne.n	800eca8 <vPortExitCritical+0x24>
	__asm volatile
 800ec92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec96:	f383 8811 	msr	BASEPRI, r3
 800ec9a:	f3bf 8f6f 	isb	sy
 800ec9e:	f3bf 8f4f 	dsb	sy
 800eca2:	607b      	str	r3, [r7, #4]
}
 800eca4:	bf00      	nop
 800eca6:	e7fe      	b.n	800eca6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eca8:	4b0a      	ldr	r3, [pc, #40]	; (800ecd4 <vPortExitCritical+0x50>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	3b01      	subs	r3, #1
 800ecae:	4a09      	ldr	r2, [pc, #36]	; (800ecd4 <vPortExitCritical+0x50>)
 800ecb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ecb2:	4b08      	ldr	r3, [pc, #32]	; (800ecd4 <vPortExitCritical+0x50>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d105      	bne.n	800ecc6 <vPortExitCritical+0x42>
 800ecba:	2300      	movs	r3, #0
 800ecbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	f383 8811 	msr	BASEPRI, r3
}
 800ecc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ecc6:	bf00      	nop
 800ecc8:	370c      	adds	r7, #12
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr
 800ecd2:	bf00      	nop
 800ecd4:	2000009c 	.word	0x2000009c
	...

0800ece0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ece0:	f3ef 8009 	mrs	r0, PSP
 800ece4:	f3bf 8f6f 	isb	sy
 800ece8:	4b15      	ldr	r3, [pc, #84]	; (800ed40 <pxCurrentTCBConst>)
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	f01e 0f10 	tst.w	lr, #16
 800ecf0:	bf08      	it	eq
 800ecf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ecf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecfa:	6010      	str	r0, [r2, #0]
 800ecfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ed00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ed04:	f380 8811 	msr	BASEPRI, r0
 800ed08:	f3bf 8f4f 	dsb	sy
 800ed0c:	f3bf 8f6f 	isb	sy
 800ed10:	f7fe ff90 	bl	800dc34 <vTaskSwitchContext>
 800ed14:	f04f 0000 	mov.w	r0, #0
 800ed18:	f380 8811 	msr	BASEPRI, r0
 800ed1c:	bc09      	pop	{r0, r3}
 800ed1e:	6819      	ldr	r1, [r3, #0]
 800ed20:	6808      	ldr	r0, [r1, #0]
 800ed22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed26:	f01e 0f10 	tst.w	lr, #16
 800ed2a:	bf08      	it	eq
 800ed2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ed30:	f380 8809 	msr	PSP, r0
 800ed34:	f3bf 8f6f 	isb	sy
 800ed38:	4770      	bx	lr
 800ed3a:	bf00      	nop
 800ed3c:	f3af 8000 	nop.w

0800ed40 <pxCurrentTCBConst>:
 800ed40:	2000aebc 	.word	0x2000aebc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ed44:	bf00      	nop
 800ed46:	bf00      	nop

0800ed48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ed4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed52:	f383 8811 	msr	BASEPRI, r3
 800ed56:	f3bf 8f6f 	isb	sy
 800ed5a:	f3bf 8f4f 	dsb	sy
 800ed5e:	607b      	str	r3, [r7, #4]
}
 800ed60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ed62:	f7fe fead 	bl	800dac0 <xTaskIncrementTick>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d003      	beq.n	800ed74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ed6c:	4b06      	ldr	r3, [pc, #24]	; (800ed88 <xPortSysTickHandler+0x40>)
 800ed6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed72:	601a      	str	r2, [r3, #0]
 800ed74:	2300      	movs	r3, #0
 800ed76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	f383 8811 	msr	BASEPRI, r3
}
 800ed7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ed80:	bf00      	nop
 800ed82:	3708      	adds	r7, #8
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}
 800ed88:	e000ed04 	.word	0xe000ed04

0800ed8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ed90:	4b0b      	ldr	r3, [pc, #44]	; (800edc0 <vPortSetupTimerInterrupt+0x34>)
 800ed92:	2200      	movs	r2, #0
 800ed94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ed96:	4b0b      	ldr	r3, [pc, #44]	; (800edc4 <vPortSetupTimerInterrupt+0x38>)
 800ed98:	2200      	movs	r2, #0
 800ed9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ed9c:	4b0a      	ldr	r3, [pc, #40]	; (800edc8 <vPortSetupTimerInterrupt+0x3c>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a0a      	ldr	r2, [pc, #40]	; (800edcc <vPortSetupTimerInterrupt+0x40>)
 800eda2:	fba2 2303 	umull	r2, r3, r2, r3
 800eda6:	099b      	lsrs	r3, r3, #6
 800eda8:	4a09      	ldr	r2, [pc, #36]	; (800edd0 <vPortSetupTimerInterrupt+0x44>)
 800edaa:	3b01      	subs	r3, #1
 800edac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800edae:	4b04      	ldr	r3, [pc, #16]	; (800edc0 <vPortSetupTimerInterrupt+0x34>)
 800edb0:	2207      	movs	r2, #7
 800edb2:	601a      	str	r2, [r3, #0]
}
 800edb4:	bf00      	nop
 800edb6:	46bd      	mov	sp, r7
 800edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop
 800edc0:	e000e010 	.word	0xe000e010
 800edc4:	e000e018 	.word	0xe000e018
 800edc8:	20000004 	.word	0x20000004
 800edcc:	10624dd3 	.word	0x10624dd3
 800edd0:	e000e014 	.word	0xe000e014

0800edd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800edd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ede4 <vPortEnableVFP+0x10>
 800edd8:	6801      	ldr	r1, [r0, #0]
 800edda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800edde:	6001      	str	r1, [r0, #0]
 800ede0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ede2:	bf00      	nop
 800ede4:	e000ed88 	.word	0xe000ed88

0800ede8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ede8:	b480      	push	{r7}
 800edea:	b085      	sub	sp, #20
 800edec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800edee:	f3ef 8305 	mrs	r3, IPSR
 800edf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	2b0f      	cmp	r3, #15
 800edf8:	d914      	bls.n	800ee24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800edfa:	4a17      	ldr	r2, [pc, #92]	; (800ee58 <vPortValidateInterruptPriority+0x70>)
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	4413      	add	r3, r2
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ee04:	4b15      	ldr	r3, [pc, #84]	; (800ee5c <vPortValidateInterruptPriority+0x74>)
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	7afa      	ldrb	r2, [r7, #11]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d20a      	bcs.n	800ee24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ee0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee12:	f383 8811 	msr	BASEPRI, r3
 800ee16:	f3bf 8f6f 	isb	sy
 800ee1a:	f3bf 8f4f 	dsb	sy
 800ee1e:	607b      	str	r3, [r7, #4]
}
 800ee20:	bf00      	nop
 800ee22:	e7fe      	b.n	800ee22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ee24:	4b0e      	ldr	r3, [pc, #56]	; (800ee60 <vPortValidateInterruptPriority+0x78>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ee2c:	4b0d      	ldr	r3, [pc, #52]	; (800ee64 <vPortValidateInterruptPriority+0x7c>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d90a      	bls.n	800ee4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ee34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee38:	f383 8811 	msr	BASEPRI, r3
 800ee3c:	f3bf 8f6f 	isb	sy
 800ee40:	f3bf 8f4f 	dsb	sy
 800ee44:	603b      	str	r3, [r7, #0]
}
 800ee46:	bf00      	nop
 800ee48:	e7fe      	b.n	800ee48 <vPortValidateInterruptPriority+0x60>
	}
 800ee4a:	bf00      	nop
 800ee4c:	3714      	adds	r7, #20
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr
 800ee56:	bf00      	nop
 800ee58:	e000e3f0 	.word	0xe000e3f0
 800ee5c:	2000b4e8 	.word	0x2000b4e8
 800ee60:	e000ed0c 	.word	0xe000ed0c
 800ee64:	2000b4ec 	.word	0x2000b4ec

0800ee68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b08a      	sub	sp, #40	; 0x28
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ee70:	2300      	movs	r3, #0
 800ee72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ee74:	f7fe fd68 	bl	800d948 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ee78:	4b5b      	ldr	r3, [pc, #364]	; (800efe8 <pvPortMalloc+0x180>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d101      	bne.n	800ee84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ee80:	f000 f920 	bl	800f0c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ee84:	4b59      	ldr	r3, [pc, #356]	; (800efec <pvPortMalloc+0x184>)
 800ee86:	681a      	ldr	r2, [r3, #0]
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	4013      	ands	r3, r2
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	f040 8093 	bne.w	800efb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d01d      	beq.n	800eed4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ee98:	2208      	movs	r2, #8
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	4413      	add	r3, r2
 800ee9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f003 0307 	and.w	r3, r3, #7
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d014      	beq.n	800eed4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f023 0307 	bic.w	r3, r3, #7
 800eeb0:	3308      	adds	r3, #8
 800eeb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f003 0307 	and.w	r3, r3, #7
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d00a      	beq.n	800eed4 <pvPortMalloc+0x6c>
	__asm volatile
 800eebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec2:	f383 8811 	msr	BASEPRI, r3
 800eec6:	f3bf 8f6f 	isb	sy
 800eeca:	f3bf 8f4f 	dsb	sy
 800eece:	617b      	str	r3, [r7, #20]
}
 800eed0:	bf00      	nop
 800eed2:	e7fe      	b.n	800eed2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d06e      	beq.n	800efb8 <pvPortMalloc+0x150>
 800eeda:	4b45      	ldr	r3, [pc, #276]	; (800eff0 <pvPortMalloc+0x188>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	687a      	ldr	r2, [r7, #4]
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d869      	bhi.n	800efb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eee4:	4b43      	ldr	r3, [pc, #268]	; (800eff4 <pvPortMalloc+0x18c>)
 800eee6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eee8:	4b42      	ldr	r3, [pc, #264]	; (800eff4 <pvPortMalloc+0x18c>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eeee:	e004      	b.n	800eefa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800eef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d903      	bls.n	800ef0c <pvPortMalloc+0xa4>
 800ef04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d1f1      	bne.n	800eef0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ef0c:	4b36      	ldr	r3, [pc, #216]	; (800efe8 <pvPortMalloc+0x180>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d050      	beq.n	800efb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ef16:	6a3b      	ldr	r3, [r7, #32]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	2208      	movs	r2, #8
 800ef1c:	4413      	add	r3, r2
 800ef1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ef20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	6a3b      	ldr	r3, [r7, #32]
 800ef26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ef28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2a:	685a      	ldr	r2, [r3, #4]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	1ad2      	subs	r2, r2, r3
 800ef30:	2308      	movs	r3, #8
 800ef32:	005b      	lsls	r3, r3, #1
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d91f      	bls.n	800ef78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ef38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef40:	69bb      	ldr	r3, [r7, #24]
 800ef42:	f003 0307 	and.w	r3, r3, #7
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d00a      	beq.n	800ef60 <pvPortMalloc+0xf8>
	__asm volatile
 800ef4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef4e:	f383 8811 	msr	BASEPRI, r3
 800ef52:	f3bf 8f6f 	isb	sy
 800ef56:	f3bf 8f4f 	dsb	sy
 800ef5a:	613b      	str	r3, [r7, #16]
}
 800ef5c:	bf00      	nop
 800ef5e:	e7fe      	b.n	800ef5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ef60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef62:	685a      	ldr	r2, [r3, #4]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	1ad2      	subs	r2, r2, r3
 800ef68:	69bb      	ldr	r3, [r7, #24]
 800ef6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ef6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6e:	687a      	ldr	r2, [r7, #4]
 800ef70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ef72:	69b8      	ldr	r0, [r7, #24]
 800ef74:	f000 f908 	bl	800f188 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ef78:	4b1d      	ldr	r3, [pc, #116]	; (800eff0 <pvPortMalloc+0x188>)
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	1ad3      	subs	r3, r2, r3
 800ef82:	4a1b      	ldr	r2, [pc, #108]	; (800eff0 <pvPortMalloc+0x188>)
 800ef84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ef86:	4b1a      	ldr	r3, [pc, #104]	; (800eff0 <pvPortMalloc+0x188>)
 800ef88:	681a      	ldr	r2, [r3, #0]
 800ef8a:	4b1b      	ldr	r3, [pc, #108]	; (800eff8 <pvPortMalloc+0x190>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d203      	bcs.n	800ef9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ef92:	4b17      	ldr	r3, [pc, #92]	; (800eff0 <pvPortMalloc+0x188>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	4a18      	ldr	r2, [pc, #96]	; (800eff8 <pvPortMalloc+0x190>)
 800ef98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ef9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9c:	685a      	ldr	r2, [r3, #4]
 800ef9e:	4b13      	ldr	r3, [pc, #76]	; (800efec <pvPortMalloc+0x184>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	431a      	orrs	r2, r3
 800efa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800efa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efaa:	2200      	movs	r2, #0
 800efac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800efae:	4b13      	ldr	r3, [pc, #76]	; (800effc <pvPortMalloc+0x194>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	3301      	adds	r3, #1
 800efb4:	4a11      	ldr	r2, [pc, #68]	; (800effc <pvPortMalloc+0x194>)
 800efb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800efb8:	f7fe fcd4 	bl	800d964 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	f003 0307 	and.w	r3, r3, #7
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d00a      	beq.n	800efdc <pvPortMalloc+0x174>
	__asm volatile
 800efc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efca:	f383 8811 	msr	BASEPRI, r3
 800efce:	f3bf 8f6f 	isb	sy
 800efd2:	f3bf 8f4f 	dsb	sy
 800efd6:	60fb      	str	r3, [r7, #12]
}
 800efd8:	bf00      	nop
 800efda:	e7fe      	b.n	800efda <pvPortMalloc+0x172>
	return pvReturn;
 800efdc:	69fb      	ldr	r3, [r7, #28]
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3728      	adds	r7, #40	; 0x28
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	2000f0f8 	.word	0x2000f0f8
 800efec:	2000f10c 	.word	0x2000f10c
 800eff0:	2000f0fc 	.word	0x2000f0fc
 800eff4:	2000f0f0 	.word	0x2000f0f0
 800eff8:	2000f100 	.word	0x2000f100
 800effc:	2000f104 	.word	0x2000f104

0800f000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b086      	sub	sp, #24
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d04d      	beq.n	800f0ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f012:	2308      	movs	r3, #8
 800f014:	425b      	negs	r3, r3
 800f016:	697a      	ldr	r2, [r7, #20]
 800f018:	4413      	add	r3, r2
 800f01a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	685a      	ldr	r2, [r3, #4]
 800f024:	4b24      	ldr	r3, [pc, #144]	; (800f0b8 <vPortFree+0xb8>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4013      	ands	r3, r2
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d10a      	bne.n	800f044 <vPortFree+0x44>
	__asm volatile
 800f02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f032:	f383 8811 	msr	BASEPRI, r3
 800f036:	f3bf 8f6f 	isb	sy
 800f03a:	f3bf 8f4f 	dsb	sy
 800f03e:	60fb      	str	r3, [r7, #12]
}
 800f040:	bf00      	nop
 800f042:	e7fe      	b.n	800f042 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d00a      	beq.n	800f062 <vPortFree+0x62>
	__asm volatile
 800f04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f050:	f383 8811 	msr	BASEPRI, r3
 800f054:	f3bf 8f6f 	isb	sy
 800f058:	f3bf 8f4f 	dsb	sy
 800f05c:	60bb      	str	r3, [r7, #8]
}
 800f05e:	bf00      	nop
 800f060:	e7fe      	b.n	800f060 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	685a      	ldr	r2, [r3, #4]
 800f066:	4b14      	ldr	r3, [pc, #80]	; (800f0b8 <vPortFree+0xb8>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	4013      	ands	r3, r2
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d01e      	beq.n	800f0ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d11a      	bne.n	800f0ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	685a      	ldr	r2, [r3, #4]
 800f07c:	4b0e      	ldr	r3, [pc, #56]	; (800f0b8 <vPortFree+0xb8>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	43db      	mvns	r3, r3
 800f082:	401a      	ands	r2, r3
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f088:	f7fe fc5e 	bl	800d948 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	685a      	ldr	r2, [r3, #4]
 800f090:	4b0a      	ldr	r3, [pc, #40]	; (800f0bc <vPortFree+0xbc>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4413      	add	r3, r2
 800f096:	4a09      	ldr	r2, [pc, #36]	; (800f0bc <vPortFree+0xbc>)
 800f098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f09a:	6938      	ldr	r0, [r7, #16]
 800f09c:	f000 f874 	bl	800f188 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f0a0:	4b07      	ldr	r3, [pc, #28]	; (800f0c0 <vPortFree+0xc0>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	4a06      	ldr	r2, [pc, #24]	; (800f0c0 <vPortFree+0xc0>)
 800f0a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f0aa:	f7fe fc5b 	bl	800d964 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f0ae:	bf00      	nop
 800f0b0:	3718      	adds	r7, #24
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	2000f10c 	.word	0x2000f10c
 800f0bc:	2000f0fc 	.word	0x2000f0fc
 800f0c0:	2000f108 	.word	0x2000f108

0800f0c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b085      	sub	sp, #20
 800f0c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f0ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f0ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f0d0:	4b27      	ldr	r3, [pc, #156]	; (800f170 <prvHeapInit+0xac>)
 800f0d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f003 0307 	and.w	r3, r3, #7
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00c      	beq.n	800f0f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	3307      	adds	r3, #7
 800f0e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f023 0307 	bic.w	r3, r3, #7
 800f0ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f0ec:	68ba      	ldr	r2, [r7, #8]
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	1ad3      	subs	r3, r2, r3
 800f0f2:	4a1f      	ldr	r2, [pc, #124]	; (800f170 <prvHeapInit+0xac>)
 800f0f4:	4413      	add	r3, r2
 800f0f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f0fc:	4a1d      	ldr	r2, [pc, #116]	; (800f174 <prvHeapInit+0xb0>)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f102:	4b1c      	ldr	r3, [pc, #112]	; (800f174 <prvHeapInit+0xb0>)
 800f104:	2200      	movs	r2, #0
 800f106:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	68ba      	ldr	r2, [r7, #8]
 800f10c:	4413      	add	r3, r2
 800f10e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f110:	2208      	movs	r2, #8
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	1a9b      	subs	r3, r3, r2
 800f116:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f023 0307 	bic.w	r3, r3, #7
 800f11e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	4a15      	ldr	r2, [pc, #84]	; (800f178 <prvHeapInit+0xb4>)
 800f124:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f126:	4b14      	ldr	r3, [pc, #80]	; (800f178 <prvHeapInit+0xb4>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	2200      	movs	r2, #0
 800f12c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f12e:	4b12      	ldr	r3, [pc, #72]	; (800f178 <prvHeapInit+0xb4>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	2200      	movs	r2, #0
 800f134:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	68fa      	ldr	r2, [r7, #12]
 800f13e:	1ad2      	subs	r2, r2, r3
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f144:	4b0c      	ldr	r3, [pc, #48]	; (800f178 <prvHeapInit+0xb4>)
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	4a0a      	ldr	r2, [pc, #40]	; (800f17c <prvHeapInit+0xb8>)
 800f152:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	4a09      	ldr	r2, [pc, #36]	; (800f180 <prvHeapInit+0xbc>)
 800f15a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f15c:	4b09      	ldr	r3, [pc, #36]	; (800f184 <prvHeapInit+0xc0>)
 800f15e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f162:	601a      	str	r2, [r3, #0]
}
 800f164:	bf00      	nop
 800f166:	3714      	adds	r7, #20
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr
 800f170:	2000b4f0 	.word	0x2000b4f0
 800f174:	2000f0f0 	.word	0x2000f0f0
 800f178:	2000f0f8 	.word	0x2000f0f8
 800f17c:	2000f100 	.word	0x2000f100
 800f180:	2000f0fc 	.word	0x2000f0fc
 800f184:	2000f10c 	.word	0x2000f10c

0800f188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f188:	b480      	push	{r7}
 800f18a:	b085      	sub	sp, #20
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f190:	4b28      	ldr	r3, [pc, #160]	; (800f234 <prvInsertBlockIntoFreeList+0xac>)
 800f192:	60fb      	str	r3, [r7, #12]
 800f194:	e002      	b.n	800f19c <prvInsertBlockIntoFreeList+0x14>
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	60fb      	str	r3, [r7, #12]
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	d8f7      	bhi.n	800f196 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	68ba      	ldr	r2, [r7, #8]
 800f1b0:	4413      	add	r3, r2
 800f1b2:	687a      	ldr	r2, [r7, #4]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d108      	bne.n	800f1ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	685a      	ldr	r2, [r3, #4]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	441a      	add	r2, r3
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	68ba      	ldr	r2, [r7, #8]
 800f1d4:	441a      	add	r2, r3
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d118      	bne.n	800f210 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681a      	ldr	r2, [r3, #0]
 800f1e2:	4b15      	ldr	r3, [pc, #84]	; (800f238 <prvInsertBlockIntoFreeList+0xb0>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d00d      	beq.n	800f206 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	685a      	ldr	r2, [r3, #4]
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	685b      	ldr	r3, [r3, #4]
 800f1f4:	441a      	add	r2, r3
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	681a      	ldr	r2, [r3, #0]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	601a      	str	r2, [r3, #0]
 800f204:	e008      	b.n	800f218 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f206:	4b0c      	ldr	r3, [pc, #48]	; (800f238 <prvInsertBlockIntoFreeList+0xb0>)
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	601a      	str	r2, [r3, #0]
 800f20e:	e003      	b.n	800f218 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	681a      	ldr	r2, [r3, #0]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f218:	68fa      	ldr	r2, [r7, #12]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d002      	beq.n	800f226 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	687a      	ldr	r2, [r7, #4]
 800f224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f226:	bf00      	nop
 800f228:	3714      	adds	r7, #20
 800f22a:	46bd      	mov	sp, r7
 800f22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f230:	4770      	bx	lr
 800f232:	bf00      	nop
 800f234:	2000f0f0 	.word	0x2000f0f0
 800f238:	2000f0f8 	.word	0x2000f0f8

0800f23c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f240:	2200      	movs	r2, #0
 800f242:	4912      	ldr	r1, [pc, #72]	; (800f28c <MX_USB_DEVICE_Init+0x50>)
 800f244:	4812      	ldr	r0, [pc, #72]	; (800f290 <MX_USB_DEVICE_Init+0x54>)
 800f246:	f7fb ff21 	bl	800b08c <USBD_Init>
 800f24a:	4603      	mov	r3, r0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d001      	beq.n	800f254 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f250:	f7f2 fcb0 	bl	8001bb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f254:	490f      	ldr	r1, [pc, #60]	; (800f294 <MX_USB_DEVICE_Init+0x58>)
 800f256:	480e      	ldr	r0, [pc, #56]	; (800f290 <MX_USB_DEVICE_Init+0x54>)
 800f258:	f7fb ff48 	bl	800b0ec <USBD_RegisterClass>
 800f25c:	4603      	mov	r3, r0
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d001      	beq.n	800f266 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f262:	f7f2 fca7 	bl	8001bb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f266:	490c      	ldr	r1, [pc, #48]	; (800f298 <MX_USB_DEVICE_Init+0x5c>)
 800f268:	4809      	ldr	r0, [pc, #36]	; (800f290 <MX_USB_DEVICE_Init+0x54>)
 800f26a:	f7fb fe7f 	bl	800af6c <USBD_CDC_RegisterInterface>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d001      	beq.n	800f278 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f274:	f7f2 fc9e 	bl	8001bb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f278:	4805      	ldr	r0, [pc, #20]	; (800f290 <MX_USB_DEVICE_Init+0x54>)
 800f27a:	f7fb ff6d 	bl	800b158 <USBD_Start>
 800f27e:	4603      	mov	r3, r0
 800f280:	2b00      	cmp	r3, #0
 800f282:	d001      	beq.n	800f288 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f284:	f7f2 fc96 	bl	8001bb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f288:	bf00      	nop
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	200000b4 	.word	0x200000b4
 800f290:	2000f110 	.word	0x2000f110
 800f294:	2000001c 	.word	0x2000001c
 800f298:	200000a0 	.word	0x200000a0

0800f29c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	4905      	ldr	r1, [pc, #20]	; (800f2b8 <CDC_Init_FS+0x1c>)
 800f2a4:	4805      	ldr	r0, [pc, #20]	; (800f2bc <CDC_Init_FS+0x20>)
 800f2a6:	f7fb fe7b 	bl	800afa0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f2aa:	4905      	ldr	r1, [pc, #20]	; (800f2c0 <CDC_Init_FS+0x24>)
 800f2ac:	4803      	ldr	r0, [pc, #12]	; (800f2bc <CDC_Init_FS+0x20>)
 800f2ae:	f7fb fe99 	bl	800afe4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f2b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	2000fbec 	.word	0x2000fbec
 800f2bc:	2000f110 	.word	0x2000f110
 800f2c0:	2000f3ec 	.word	0x2000f3ec

0800f2c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f2c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d2:	4770      	bx	lr

0800f2d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f2d4:	b480      	push	{r7}
 800f2d6:	b083      	sub	sp, #12
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	4603      	mov	r3, r0
 800f2dc:	6039      	str	r1, [r7, #0]
 800f2de:	71fb      	strb	r3, [r7, #7]
 800f2e0:	4613      	mov	r3, r2
 800f2e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f2e4:	79fb      	ldrb	r3, [r7, #7]
 800f2e6:	2b23      	cmp	r3, #35	; 0x23
 800f2e8:	d84a      	bhi.n	800f380 <CDC_Control_FS+0xac>
 800f2ea:	a201      	add	r2, pc, #4	; (adr r2, 800f2f0 <CDC_Control_FS+0x1c>)
 800f2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2f0:	0800f381 	.word	0x0800f381
 800f2f4:	0800f381 	.word	0x0800f381
 800f2f8:	0800f381 	.word	0x0800f381
 800f2fc:	0800f381 	.word	0x0800f381
 800f300:	0800f381 	.word	0x0800f381
 800f304:	0800f381 	.word	0x0800f381
 800f308:	0800f381 	.word	0x0800f381
 800f30c:	0800f381 	.word	0x0800f381
 800f310:	0800f381 	.word	0x0800f381
 800f314:	0800f381 	.word	0x0800f381
 800f318:	0800f381 	.word	0x0800f381
 800f31c:	0800f381 	.word	0x0800f381
 800f320:	0800f381 	.word	0x0800f381
 800f324:	0800f381 	.word	0x0800f381
 800f328:	0800f381 	.word	0x0800f381
 800f32c:	0800f381 	.word	0x0800f381
 800f330:	0800f381 	.word	0x0800f381
 800f334:	0800f381 	.word	0x0800f381
 800f338:	0800f381 	.word	0x0800f381
 800f33c:	0800f381 	.word	0x0800f381
 800f340:	0800f381 	.word	0x0800f381
 800f344:	0800f381 	.word	0x0800f381
 800f348:	0800f381 	.word	0x0800f381
 800f34c:	0800f381 	.word	0x0800f381
 800f350:	0800f381 	.word	0x0800f381
 800f354:	0800f381 	.word	0x0800f381
 800f358:	0800f381 	.word	0x0800f381
 800f35c:	0800f381 	.word	0x0800f381
 800f360:	0800f381 	.word	0x0800f381
 800f364:	0800f381 	.word	0x0800f381
 800f368:	0800f381 	.word	0x0800f381
 800f36c:	0800f381 	.word	0x0800f381
 800f370:	0800f381 	.word	0x0800f381
 800f374:	0800f381 	.word	0x0800f381
 800f378:	0800f381 	.word	0x0800f381
 800f37c:	0800f381 	.word	0x0800f381
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f380:	bf00      	nop
  }

  return (USBD_OK);
 800f382:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f384:	4618      	mov	r0, r3
 800f386:	370c      	adds	r7, #12
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr

0800f390 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f39a:	6879      	ldr	r1, [r7, #4]
 800f39c:	4805      	ldr	r0, [pc, #20]	; (800f3b4 <CDC_Receive_FS+0x24>)
 800f39e:	f7fb fe21 	bl	800afe4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f3a2:	4804      	ldr	r0, [pc, #16]	; (800f3b4 <CDC_Receive_FS+0x24>)
 800f3a4:	f7fb fe3c 	bl	800b020 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f3a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	3708      	adds	r7, #8
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	bd80      	pop	{r7, pc}
 800f3b2:	bf00      	nop
 800f3b4:	2000f110 	.word	0x2000f110

0800f3b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b087      	sub	sp, #28
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	60f8      	str	r0, [r7, #12]
 800f3c0:	60b9      	str	r1, [r7, #8]
 800f3c2:	4613      	mov	r3, r2
 800f3c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f3ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	371c      	adds	r7, #28
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d8:	4770      	bx	lr
	...

0800f3dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	6039      	str	r1, [r7, #0]
 800f3e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	2212      	movs	r2, #18
 800f3ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f3ee:	4b03      	ldr	r3, [pc, #12]	; (800f3fc <USBD_FS_DeviceDescriptor+0x20>)
}
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	370c      	adds	r7, #12
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fa:	4770      	bx	lr
 800f3fc:	200000d0 	.word	0x200000d0

0800f400 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f400:	b480      	push	{r7}
 800f402:	b083      	sub	sp, #12
 800f404:	af00      	add	r7, sp, #0
 800f406:	4603      	mov	r3, r0
 800f408:	6039      	str	r1, [r7, #0]
 800f40a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	2204      	movs	r2, #4
 800f410:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f412:	4b03      	ldr	r3, [pc, #12]	; (800f420 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f414:	4618      	mov	r0, r3
 800f416:	370c      	adds	r7, #12
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr
 800f420:	200000e4 	.word	0x200000e4

0800f424 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b082      	sub	sp, #8
 800f428:	af00      	add	r7, sp, #0
 800f42a:	4603      	mov	r3, r0
 800f42c:	6039      	str	r1, [r7, #0]
 800f42e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f430:	79fb      	ldrb	r3, [r7, #7]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d105      	bne.n	800f442 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f436:	683a      	ldr	r2, [r7, #0]
 800f438:	4907      	ldr	r1, [pc, #28]	; (800f458 <USBD_FS_ProductStrDescriptor+0x34>)
 800f43a:	4808      	ldr	r0, [pc, #32]	; (800f45c <USBD_FS_ProductStrDescriptor+0x38>)
 800f43c:	f7fd f838 	bl	800c4b0 <USBD_GetString>
 800f440:	e004      	b.n	800f44c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f442:	683a      	ldr	r2, [r7, #0]
 800f444:	4904      	ldr	r1, [pc, #16]	; (800f458 <USBD_FS_ProductStrDescriptor+0x34>)
 800f446:	4805      	ldr	r0, [pc, #20]	; (800f45c <USBD_FS_ProductStrDescriptor+0x38>)
 800f448:	f7fd f832 	bl	800c4b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f44c:	4b02      	ldr	r3, [pc, #8]	; (800f458 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f44e:	4618      	mov	r0, r3
 800f450:	3708      	adds	r7, #8
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	200103ec 	.word	0x200103ec
 800f45c:	0801b304 	.word	0x0801b304

0800f460 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b082      	sub	sp, #8
 800f464:	af00      	add	r7, sp, #0
 800f466:	4603      	mov	r3, r0
 800f468:	6039      	str	r1, [r7, #0]
 800f46a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f46c:	683a      	ldr	r2, [r7, #0]
 800f46e:	4904      	ldr	r1, [pc, #16]	; (800f480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f470:	4804      	ldr	r0, [pc, #16]	; (800f484 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f472:	f7fd f81d 	bl	800c4b0 <USBD_GetString>
  return USBD_StrDesc;
 800f476:	4b02      	ldr	r3, [pc, #8]	; (800f480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3708      	adds	r7, #8
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}
 800f480:	200103ec 	.word	0x200103ec
 800f484:	0801b310 	.word	0x0801b310

0800f488 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	4603      	mov	r3, r0
 800f490:	6039      	str	r1, [r7, #0]
 800f492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	221a      	movs	r2, #26
 800f498:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f49a:	f000 f843 	bl	800f524 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f49e:	4b02      	ldr	r3, [pc, #8]	; (800f4a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3708      	adds	r7, #8
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}
 800f4a8:	200000e8 	.word	0x200000e8

0800f4ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	6039      	str	r1, [r7, #0]
 800f4b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f4b8:	79fb      	ldrb	r3, [r7, #7]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d105      	bne.n	800f4ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f4be:	683a      	ldr	r2, [r7, #0]
 800f4c0:	4907      	ldr	r1, [pc, #28]	; (800f4e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f4c2:	4808      	ldr	r0, [pc, #32]	; (800f4e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f4c4:	f7fc fff4 	bl	800c4b0 <USBD_GetString>
 800f4c8:	e004      	b.n	800f4d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f4ca:	683a      	ldr	r2, [r7, #0]
 800f4cc:	4904      	ldr	r1, [pc, #16]	; (800f4e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f4ce:	4805      	ldr	r0, [pc, #20]	; (800f4e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f4d0:	f7fc ffee 	bl	800c4b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f4d4:	4b02      	ldr	r3, [pc, #8]	; (800f4e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3708      	adds	r7, #8
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	200103ec 	.word	0x200103ec
 800f4e4:	0801b318 	.word	0x0801b318

0800f4e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	6039      	str	r1, [r7, #0]
 800f4f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f4f4:	79fb      	ldrb	r3, [r7, #7]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d105      	bne.n	800f506 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f4fa:	683a      	ldr	r2, [r7, #0]
 800f4fc:	4907      	ldr	r1, [pc, #28]	; (800f51c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f4fe:	4808      	ldr	r0, [pc, #32]	; (800f520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f500:	f7fc ffd6 	bl	800c4b0 <USBD_GetString>
 800f504:	e004      	b.n	800f510 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f506:	683a      	ldr	r2, [r7, #0]
 800f508:	4904      	ldr	r1, [pc, #16]	; (800f51c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f50a:	4805      	ldr	r0, [pc, #20]	; (800f520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f50c:	f7fc ffd0 	bl	800c4b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f510:	4b02      	ldr	r3, [pc, #8]	; (800f51c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f512:	4618      	mov	r0, r3
 800f514:	3708      	adds	r7, #8
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	200103ec 	.word	0x200103ec
 800f520:	0801b324 	.word	0x0801b324

0800f524 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b084      	sub	sp, #16
 800f528:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f52a:	4b0f      	ldr	r3, [pc, #60]	; (800f568 <Get_SerialNum+0x44>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f530:	4b0e      	ldr	r3, [pc, #56]	; (800f56c <Get_SerialNum+0x48>)
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f536:	4b0e      	ldr	r3, [pc, #56]	; (800f570 <Get_SerialNum+0x4c>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f53c:	68fa      	ldr	r2, [r7, #12]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	4413      	add	r3, r2
 800f542:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d009      	beq.n	800f55e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f54a:	2208      	movs	r2, #8
 800f54c:	4909      	ldr	r1, [pc, #36]	; (800f574 <Get_SerialNum+0x50>)
 800f54e:	68f8      	ldr	r0, [r7, #12]
 800f550:	f000 f814 	bl	800f57c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f554:	2204      	movs	r2, #4
 800f556:	4908      	ldr	r1, [pc, #32]	; (800f578 <Get_SerialNum+0x54>)
 800f558:	68b8      	ldr	r0, [r7, #8]
 800f55a:	f000 f80f 	bl	800f57c <IntToUnicode>
  }
}
 800f55e:	bf00      	nop
 800f560:	3710      	adds	r7, #16
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
 800f566:	bf00      	nop
 800f568:	1fff7a10 	.word	0x1fff7a10
 800f56c:	1fff7a14 	.word	0x1fff7a14
 800f570:	1fff7a18 	.word	0x1fff7a18
 800f574:	200000ea 	.word	0x200000ea
 800f578:	200000fa 	.word	0x200000fa

0800f57c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f57c:	b480      	push	{r7}
 800f57e:	b087      	sub	sp, #28
 800f580:	af00      	add	r7, sp, #0
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	60b9      	str	r1, [r7, #8]
 800f586:	4613      	mov	r3, r2
 800f588:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f58a:	2300      	movs	r3, #0
 800f58c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f58e:	2300      	movs	r3, #0
 800f590:	75fb      	strb	r3, [r7, #23]
 800f592:	e027      	b.n	800f5e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	0f1b      	lsrs	r3, r3, #28
 800f598:	2b09      	cmp	r3, #9
 800f59a:	d80b      	bhi.n	800f5b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	0f1b      	lsrs	r3, r3, #28
 800f5a0:	b2da      	uxtb	r2, r3
 800f5a2:	7dfb      	ldrb	r3, [r7, #23]
 800f5a4:	005b      	lsls	r3, r3, #1
 800f5a6:	4619      	mov	r1, r3
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	440b      	add	r3, r1
 800f5ac:	3230      	adds	r2, #48	; 0x30
 800f5ae:	b2d2      	uxtb	r2, r2
 800f5b0:	701a      	strb	r2, [r3, #0]
 800f5b2:	e00a      	b.n	800f5ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	0f1b      	lsrs	r3, r3, #28
 800f5b8:	b2da      	uxtb	r2, r3
 800f5ba:	7dfb      	ldrb	r3, [r7, #23]
 800f5bc:	005b      	lsls	r3, r3, #1
 800f5be:	4619      	mov	r1, r3
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	440b      	add	r3, r1
 800f5c4:	3237      	adds	r2, #55	; 0x37
 800f5c6:	b2d2      	uxtb	r2, r2
 800f5c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	011b      	lsls	r3, r3, #4
 800f5ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f5d0:	7dfb      	ldrb	r3, [r7, #23]
 800f5d2:	005b      	lsls	r3, r3, #1
 800f5d4:	3301      	adds	r3, #1
 800f5d6:	68ba      	ldr	r2, [r7, #8]
 800f5d8:	4413      	add	r3, r2
 800f5da:	2200      	movs	r2, #0
 800f5dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f5de:	7dfb      	ldrb	r3, [r7, #23]
 800f5e0:	3301      	adds	r3, #1
 800f5e2:	75fb      	strb	r3, [r7, #23]
 800f5e4:	7dfa      	ldrb	r2, [r7, #23]
 800f5e6:	79fb      	ldrb	r3, [r7, #7]
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d3d3      	bcc.n	800f594 <IntToUnicode+0x18>
  }
}
 800f5ec:	bf00      	nop
 800f5ee:	bf00      	nop
 800f5f0:	371c      	adds	r7, #28
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f8:	4770      	bx	lr
	...

0800f5fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b08a      	sub	sp, #40	; 0x28
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f604:	f107 0314 	add.w	r3, r7, #20
 800f608:	2200      	movs	r2, #0
 800f60a:	601a      	str	r2, [r3, #0]
 800f60c:	605a      	str	r2, [r3, #4]
 800f60e:	609a      	str	r2, [r3, #8]
 800f610:	60da      	str	r2, [r3, #12]
 800f612:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f61c:	d13a      	bne.n	800f694 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f61e:	2300      	movs	r3, #0
 800f620:	613b      	str	r3, [r7, #16]
 800f622:	4b1e      	ldr	r3, [pc, #120]	; (800f69c <HAL_PCD_MspInit+0xa0>)
 800f624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f626:	4a1d      	ldr	r2, [pc, #116]	; (800f69c <HAL_PCD_MspInit+0xa0>)
 800f628:	f043 0301 	orr.w	r3, r3, #1
 800f62c:	6313      	str	r3, [r2, #48]	; 0x30
 800f62e:	4b1b      	ldr	r3, [pc, #108]	; (800f69c <HAL_PCD_MspInit+0xa0>)
 800f630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f632:	f003 0301 	and.w	r3, r3, #1
 800f636:	613b      	str	r3, [r7, #16]
 800f638:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f63a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f63e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f640:	2302      	movs	r3, #2
 800f642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f644:	2300      	movs	r3, #0
 800f646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f648:	2303      	movs	r3, #3
 800f64a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f64c:	230a      	movs	r3, #10
 800f64e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f650:	f107 0314 	add.w	r3, r7, #20
 800f654:	4619      	mov	r1, r3
 800f656:	4812      	ldr	r0, [pc, #72]	; (800f6a0 <HAL_PCD_MspInit+0xa4>)
 800f658:	f7f4 fbd0 	bl	8003dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f65c:	4b0f      	ldr	r3, [pc, #60]	; (800f69c <HAL_PCD_MspInit+0xa0>)
 800f65e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f660:	4a0e      	ldr	r2, [pc, #56]	; (800f69c <HAL_PCD_MspInit+0xa0>)
 800f662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f666:	6353      	str	r3, [r2, #52]	; 0x34
 800f668:	2300      	movs	r3, #0
 800f66a:	60fb      	str	r3, [r7, #12]
 800f66c:	4b0b      	ldr	r3, [pc, #44]	; (800f69c <HAL_PCD_MspInit+0xa0>)
 800f66e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f670:	4a0a      	ldr	r2, [pc, #40]	; (800f69c <HAL_PCD_MspInit+0xa0>)
 800f672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f676:	6453      	str	r3, [r2, #68]	; 0x44
 800f678:	4b08      	ldr	r3, [pc, #32]	; (800f69c <HAL_PCD_MspInit+0xa0>)
 800f67a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f67c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f680:	60fb      	str	r3, [r7, #12]
 800f682:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f684:	2200      	movs	r2, #0
 800f686:	2105      	movs	r1, #5
 800f688:	2043      	movs	r0, #67	; 0x43
 800f68a:	f7f3 ff6f 	bl	800356c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f68e:	2043      	movs	r0, #67	; 0x43
 800f690:	f7f3 ff88 	bl	80035a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f694:	bf00      	nop
 800f696:	3728      	adds	r7, #40	; 0x28
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	40023800 	.word	0x40023800
 800f6a0:	40020000 	.word	0x40020000

0800f6a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	4610      	mov	r0, r2
 800f6bc:	f7fb fd99 	bl	800b1f2 <USBD_LL_SetupStage>
}
 800f6c0:	bf00      	nop
 800f6c2:	3708      	adds	r7, #8
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b082      	sub	sp, #8
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	460b      	mov	r3, r1
 800f6d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f6da:	78fa      	ldrb	r2, [r7, #3]
 800f6dc:	6879      	ldr	r1, [r7, #4]
 800f6de:	4613      	mov	r3, r2
 800f6e0:	00db      	lsls	r3, r3, #3
 800f6e2:	4413      	add	r3, r2
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	440b      	add	r3, r1
 800f6e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f6ec:	681a      	ldr	r2, [r3, #0]
 800f6ee:	78fb      	ldrb	r3, [r7, #3]
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	f7fb fdd3 	bl	800b29c <USBD_LL_DataOutStage>
}
 800f6f6:	bf00      	nop
 800f6f8:	3708      	adds	r7, #8
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}

0800f6fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6fe:	b580      	push	{r7, lr}
 800f700:	b082      	sub	sp, #8
 800f702:	af00      	add	r7, sp, #0
 800f704:	6078      	str	r0, [r7, #4]
 800f706:	460b      	mov	r3, r1
 800f708:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f710:	78fa      	ldrb	r2, [r7, #3]
 800f712:	6879      	ldr	r1, [r7, #4]
 800f714:	4613      	mov	r3, r2
 800f716:	00db      	lsls	r3, r3, #3
 800f718:	4413      	add	r3, r2
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	440b      	add	r3, r1
 800f71e:	334c      	adds	r3, #76	; 0x4c
 800f720:	681a      	ldr	r2, [r3, #0]
 800f722:	78fb      	ldrb	r3, [r7, #3]
 800f724:	4619      	mov	r1, r3
 800f726:	f7fb fe6c 	bl	800b402 <USBD_LL_DataInStage>
}
 800f72a:	bf00      	nop
 800f72c:	3708      	adds	r7, #8
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}

0800f732 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f732:	b580      	push	{r7, lr}
 800f734:	b082      	sub	sp, #8
 800f736:	af00      	add	r7, sp, #0
 800f738:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f740:	4618      	mov	r0, r3
 800f742:	f7fb ffa0 	bl	800b686 <USBD_LL_SOF>
}
 800f746:	bf00      	nop
 800f748:	3708      	adds	r7, #8
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}

0800f74e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f74e:	b580      	push	{r7, lr}
 800f750:	b084      	sub	sp, #16
 800f752:	af00      	add	r7, sp, #0
 800f754:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f756:	2301      	movs	r3, #1
 800f758:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	68db      	ldr	r3, [r3, #12]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d102      	bne.n	800f768 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f762:	2300      	movs	r3, #0
 800f764:	73fb      	strb	r3, [r7, #15]
 800f766:	e008      	b.n	800f77a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	68db      	ldr	r3, [r3, #12]
 800f76c:	2b02      	cmp	r3, #2
 800f76e:	d102      	bne.n	800f776 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f770:	2301      	movs	r3, #1
 800f772:	73fb      	strb	r3, [r7, #15]
 800f774:	e001      	b.n	800f77a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f776:	f7f2 fa1d 	bl	8001bb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f780:	7bfa      	ldrb	r2, [r7, #15]
 800f782:	4611      	mov	r1, r2
 800f784:	4618      	mov	r0, r3
 800f786:	f7fb ff40 	bl	800b60a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f790:	4618      	mov	r0, r3
 800f792:	f7fb fee8 	bl	800b566 <USBD_LL_Reset>
}
 800f796:	bf00      	nop
 800f798:	3710      	adds	r7, #16
 800f79a:	46bd      	mov	sp, r7
 800f79c:	bd80      	pop	{r7, pc}
	...

0800f7a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b082      	sub	sp, #8
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fb ff3b 	bl	800b62a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	687a      	ldr	r2, [r7, #4]
 800f7c0:	6812      	ldr	r2, [r2, #0]
 800f7c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f7c6:	f043 0301 	orr.w	r3, r3, #1
 800f7ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6a1b      	ldr	r3, [r3, #32]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d005      	beq.n	800f7e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f7d4:	4b04      	ldr	r3, [pc, #16]	; (800f7e8 <HAL_PCD_SuspendCallback+0x48>)
 800f7d6:	691b      	ldr	r3, [r3, #16]
 800f7d8:	4a03      	ldr	r2, [pc, #12]	; (800f7e8 <HAL_PCD_SuspendCallback+0x48>)
 800f7da:	f043 0306 	orr.w	r3, r3, #6
 800f7de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f7e0:	bf00      	nop
 800f7e2:	3708      	adds	r7, #8
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}
 800f7e8:	e000ed00 	.word	0xe000ed00

0800f7ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b082      	sub	sp, #8
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7fb ff2b 	bl	800b656 <USBD_LL_Resume>
}
 800f800:	bf00      	nop
 800f802:	3708      	adds	r7, #8
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}

0800f808 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b082      	sub	sp, #8
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
 800f810:	460b      	mov	r3, r1
 800f812:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f81a:	78fa      	ldrb	r2, [r7, #3]
 800f81c:	4611      	mov	r1, r2
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fb ff83 	bl	800b72a <USBD_LL_IsoOUTIncomplete>
}
 800f824:	bf00      	nop
 800f826:	3708      	adds	r7, #8
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b082      	sub	sp, #8
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	460b      	mov	r3, r1
 800f836:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f83e:	78fa      	ldrb	r2, [r7, #3]
 800f840:	4611      	mov	r1, r2
 800f842:	4618      	mov	r0, r3
 800f844:	f7fb ff3f 	bl	800b6c6 <USBD_LL_IsoINIncomplete>
}
 800f848:	bf00      	nop
 800f84a:	3708      	adds	r7, #8
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f85e:	4618      	mov	r0, r3
 800f860:	f7fb ff95 	bl	800b78e <USBD_LL_DevConnected>
}
 800f864:	bf00      	nop
 800f866:	3708      	adds	r7, #8
 800f868:	46bd      	mov	sp, r7
 800f86a:	bd80      	pop	{r7, pc}

0800f86c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b082      	sub	sp, #8
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7fb ff92 	bl	800b7a4 <USBD_LL_DevDisconnected>
}
 800f880:	bf00      	nop
 800f882:	3708      	adds	r7, #8
 800f884:	46bd      	mov	sp, r7
 800f886:	bd80      	pop	{r7, pc}

0800f888 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b082      	sub	sp, #8
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d13c      	bne.n	800f912 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f898:	4a20      	ldr	r2, [pc, #128]	; (800f91c <USBD_LL_Init+0x94>)
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	4a1e      	ldr	r2, [pc, #120]	; (800f91c <USBD_LL_Init+0x94>)
 800f8a4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f8a8:	4b1c      	ldr	r3, [pc, #112]	; (800f91c <USBD_LL_Init+0x94>)
 800f8aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f8ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f8b0:	4b1a      	ldr	r3, [pc, #104]	; (800f91c <USBD_LL_Init+0x94>)
 800f8b2:	2204      	movs	r2, #4
 800f8b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f8b6:	4b19      	ldr	r3, [pc, #100]	; (800f91c <USBD_LL_Init+0x94>)
 800f8b8:	2202      	movs	r2, #2
 800f8ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f8bc:	4b17      	ldr	r3, [pc, #92]	; (800f91c <USBD_LL_Init+0x94>)
 800f8be:	2200      	movs	r2, #0
 800f8c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f8c2:	4b16      	ldr	r3, [pc, #88]	; (800f91c <USBD_LL_Init+0x94>)
 800f8c4:	2202      	movs	r2, #2
 800f8c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f8c8:	4b14      	ldr	r3, [pc, #80]	; (800f91c <USBD_LL_Init+0x94>)
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f8ce:	4b13      	ldr	r3, [pc, #76]	; (800f91c <USBD_LL_Init+0x94>)
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f8d4:	4b11      	ldr	r3, [pc, #68]	; (800f91c <USBD_LL_Init+0x94>)
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f8da:	4b10      	ldr	r3, [pc, #64]	; (800f91c <USBD_LL_Init+0x94>)
 800f8dc:	2200      	movs	r2, #0
 800f8de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f8e0:	4b0e      	ldr	r3, [pc, #56]	; (800f91c <USBD_LL_Init+0x94>)
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f8e6:	480d      	ldr	r0, [pc, #52]	; (800f91c <USBD_LL_Init+0x94>)
 800f8e8:	f7f4 fd82 	bl	80043f0 <HAL_PCD_Init>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d001      	beq.n	800f8f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f8f2:	f7f2 f95f 	bl	8001bb4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f8f6:	2180      	movs	r1, #128	; 0x80
 800f8f8:	4808      	ldr	r0, [pc, #32]	; (800f91c <USBD_LL_Init+0x94>)
 800f8fa:	f7f5 ffda 	bl	80058b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f8fe:	2240      	movs	r2, #64	; 0x40
 800f900:	2100      	movs	r1, #0
 800f902:	4806      	ldr	r0, [pc, #24]	; (800f91c <USBD_LL_Init+0x94>)
 800f904:	f7f5 ff8e 	bl	8005824 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f908:	2280      	movs	r2, #128	; 0x80
 800f90a:	2101      	movs	r1, #1
 800f90c:	4803      	ldr	r0, [pc, #12]	; (800f91c <USBD_LL_Init+0x94>)
 800f90e:	f7f5 ff89 	bl	8005824 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f912:	2300      	movs	r3, #0
}
 800f914:	4618      	mov	r0, r3
 800f916:	3708      	adds	r7, #8
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}
 800f91c:	200105ec 	.word	0x200105ec

0800f920 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f928:	2300      	movs	r3, #0
 800f92a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f92c:	2300      	movs	r3, #0
 800f92e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f936:	4618      	mov	r0, r3
 800f938:	f7f4 fe77 	bl	800462a <HAL_PCD_Start>
 800f93c:	4603      	mov	r3, r0
 800f93e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f940:	7bfb      	ldrb	r3, [r7, #15]
 800f942:	4618      	mov	r0, r3
 800f944:	f000 f942 	bl	800fbcc <USBD_Get_USB_Status>
 800f948:	4603      	mov	r3, r0
 800f94a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f94c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3710      	adds	r7, #16
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}

0800f956 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f956:	b580      	push	{r7, lr}
 800f958:	b084      	sub	sp, #16
 800f95a:	af00      	add	r7, sp, #0
 800f95c:	6078      	str	r0, [r7, #4]
 800f95e:	4608      	mov	r0, r1
 800f960:	4611      	mov	r1, r2
 800f962:	461a      	mov	r2, r3
 800f964:	4603      	mov	r3, r0
 800f966:	70fb      	strb	r3, [r7, #3]
 800f968:	460b      	mov	r3, r1
 800f96a:	70bb      	strb	r3, [r7, #2]
 800f96c:	4613      	mov	r3, r2
 800f96e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f970:	2300      	movs	r3, #0
 800f972:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f974:	2300      	movs	r3, #0
 800f976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f97e:	78bb      	ldrb	r3, [r7, #2]
 800f980:	883a      	ldrh	r2, [r7, #0]
 800f982:	78f9      	ldrb	r1, [r7, #3]
 800f984:	f7f5 fb48 	bl	8005018 <HAL_PCD_EP_Open>
 800f988:	4603      	mov	r3, r0
 800f98a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f98c:	7bfb      	ldrb	r3, [r7, #15]
 800f98e:	4618      	mov	r0, r3
 800f990:	f000 f91c 	bl	800fbcc <USBD_Get_USB_Status>
 800f994:	4603      	mov	r3, r0
 800f996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f998:	7bbb      	ldrb	r3, [r7, #14]
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3710      	adds	r7, #16
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}

0800f9a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9a2:	b580      	push	{r7, lr}
 800f9a4:	b084      	sub	sp, #16
 800f9a6:	af00      	add	r7, sp, #0
 800f9a8:	6078      	str	r0, [r7, #4]
 800f9aa:	460b      	mov	r3, r1
 800f9ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f9bc:	78fa      	ldrb	r2, [r7, #3]
 800f9be:	4611      	mov	r1, r2
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7f5 fb91 	bl	80050e8 <HAL_PCD_EP_Close>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9ca:	7bfb      	ldrb	r3, [r7, #15]
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f000 f8fd 	bl	800fbcc <USBD_Get_USB_Status>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3710      	adds	r7, #16
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	460b      	mov	r3, r1
 800f9ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f9fa:	78fa      	ldrb	r2, [r7, #3]
 800f9fc:	4611      	mov	r1, r2
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7f5 fc69 	bl	80052d6 <HAL_PCD_EP_SetStall>
 800fa04:	4603      	mov	r3, r0
 800fa06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa08:	7bfb      	ldrb	r3, [r7, #15]
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f000 f8de 	bl	800fbcc <USBD_Get_USB_Status>
 800fa10:	4603      	mov	r3, r0
 800fa12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa14:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3710      	adds	r7, #16
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}

0800fa1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa1e:	b580      	push	{r7, lr}
 800fa20:	b084      	sub	sp, #16
 800fa22:	af00      	add	r7, sp, #0
 800fa24:	6078      	str	r0, [r7, #4]
 800fa26:	460b      	mov	r3, r1
 800fa28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa38:	78fa      	ldrb	r2, [r7, #3]
 800fa3a:	4611      	mov	r1, r2
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7f5 fcae 	bl	800539e <HAL_PCD_EP_ClrStall>
 800fa42:	4603      	mov	r3, r0
 800fa44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa46:	7bfb      	ldrb	r3, [r7, #15]
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f000 f8bf 	bl	800fbcc <USBD_Get_USB_Status>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa52:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	3710      	adds	r7, #16
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b085      	sub	sp, #20
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	460b      	mov	r3, r1
 800fa66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fa70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	da0b      	bge.n	800fa90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fa78:	78fb      	ldrb	r3, [r7, #3]
 800fa7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa7e:	68f9      	ldr	r1, [r7, #12]
 800fa80:	4613      	mov	r3, r2
 800fa82:	00db      	lsls	r3, r3, #3
 800fa84:	4413      	add	r3, r2
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	440b      	add	r3, r1
 800fa8a:	333e      	adds	r3, #62	; 0x3e
 800fa8c:	781b      	ldrb	r3, [r3, #0]
 800fa8e:	e00b      	b.n	800faa8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fa90:	78fb      	ldrb	r3, [r7, #3]
 800fa92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa96:	68f9      	ldr	r1, [r7, #12]
 800fa98:	4613      	mov	r3, r2
 800fa9a:	00db      	lsls	r3, r3, #3
 800fa9c:	4413      	add	r3, r2
 800fa9e:	009b      	lsls	r3, r3, #2
 800faa0:	440b      	add	r3, r1
 800faa2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800faa6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3714      	adds	r7, #20
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr

0800fab4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b084      	sub	sp, #16
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	460b      	mov	r3, r1
 800fabe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fac0:	2300      	movs	r3, #0
 800fac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fac4:	2300      	movs	r3, #0
 800fac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800face:	78fa      	ldrb	r2, [r7, #3]
 800fad0:	4611      	mov	r1, r2
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7f5 fa7b 	bl	8004fce <HAL_PCD_SetAddress>
 800fad8:	4603      	mov	r3, r0
 800fada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fadc:	7bfb      	ldrb	r3, [r7, #15]
 800fade:	4618      	mov	r0, r3
 800fae0:	f000 f874 	bl	800fbcc <USBD_Get_USB_Status>
 800fae4:	4603      	mov	r3, r0
 800fae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fae8:	7bbb      	ldrb	r3, [r7, #14]
}
 800faea:	4618      	mov	r0, r3
 800faec:	3710      	adds	r7, #16
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}

0800faf2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800faf2:	b580      	push	{r7, lr}
 800faf4:	b086      	sub	sp, #24
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	60f8      	str	r0, [r7, #12]
 800fafa:	607a      	str	r2, [r7, #4]
 800fafc:	603b      	str	r3, [r7, #0]
 800fafe:	460b      	mov	r3, r1
 800fb00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb02:	2300      	movs	r3, #0
 800fb04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb06:	2300      	movs	r3, #0
 800fb08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fb10:	7af9      	ldrb	r1, [r7, #11]
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	687a      	ldr	r2, [r7, #4]
 800fb16:	f7f5 fb94 	bl	8005242 <HAL_PCD_EP_Transmit>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb1e:	7dfb      	ldrb	r3, [r7, #23]
 800fb20:	4618      	mov	r0, r3
 800fb22:	f000 f853 	bl	800fbcc <USBD_Get_USB_Status>
 800fb26:	4603      	mov	r3, r0
 800fb28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fb2a:	7dbb      	ldrb	r3, [r7, #22]
}
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	3718      	adds	r7, #24
 800fb30:	46bd      	mov	sp, r7
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b086      	sub	sp, #24
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	60f8      	str	r0, [r7, #12]
 800fb3c:	607a      	str	r2, [r7, #4]
 800fb3e:	603b      	str	r3, [r7, #0]
 800fb40:	460b      	mov	r3, r1
 800fb42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb44:	2300      	movs	r3, #0
 800fb46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb48:	2300      	movs	r3, #0
 800fb4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fb52:	7af9      	ldrb	r1, [r7, #11]
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	687a      	ldr	r2, [r7, #4]
 800fb58:	f7f5 fb10 	bl	800517c <HAL_PCD_EP_Receive>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb60:	7dfb      	ldrb	r3, [r7, #23]
 800fb62:	4618      	mov	r0, r3
 800fb64:	f000 f832 	bl	800fbcc <USBD_Get_USB_Status>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fb6c:	7dbb      	ldrb	r3, [r7, #22]
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3718      	adds	r7, #24
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}

0800fb76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb76:	b580      	push	{r7, lr}
 800fb78:	b082      	sub	sp, #8
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
 800fb7e:	460b      	mov	r3, r1
 800fb80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb88:	78fa      	ldrb	r2, [r7, #3]
 800fb8a:	4611      	mov	r1, r2
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7f5 fb40 	bl	8005212 <HAL_PCD_EP_GetRxCount>
 800fb92:	4603      	mov	r3, r0
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3708      	adds	r7, #8
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b083      	sub	sp, #12
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fba4:	4b03      	ldr	r3, [pc, #12]	; (800fbb4 <USBD_static_malloc+0x18>)
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	370c      	adds	r7, #12
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb0:	4770      	bx	lr
 800fbb2:	bf00      	nop
 800fbb4:	20010af8 	.word	0x20010af8

0800fbb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b083      	sub	sp, #12
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]

}
 800fbc0:	bf00      	nop
 800fbc2:	370c      	adds	r7, #12
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbca:	4770      	bx	lr

0800fbcc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b085      	sub	sp, #20
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fbda:	79fb      	ldrb	r3, [r7, #7]
 800fbdc:	2b03      	cmp	r3, #3
 800fbde:	d817      	bhi.n	800fc10 <USBD_Get_USB_Status+0x44>
 800fbe0:	a201      	add	r2, pc, #4	; (adr r2, 800fbe8 <USBD_Get_USB_Status+0x1c>)
 800fbe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe6:	bf00      	nop
 800fbe8:	0800fbf9 	.word	0x0800fbf9
 800fbec:	0800fbff 	.word	0x0800fbff
 800fbf0:	0800fc05 	.word	0x0800fc05
 800fbf4:	0800fc0b 	.word	0x0800fc0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	73fb      	strb	r3, [r7, #15]
    break;
 800fbfc:	e00b      	b.n	800fc16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fbfe:	2303      	movs	r3, #3
 800fc00:	73fb      	strb	r3, [r7, #15]
    break;
 800fc02:	e008      	b.n	800fc16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fc04:	2301      	movs	r3, #1
 800fc06:	73fb      	strb	r3, [r7, #15]
    break;
 800fc08:	e005      	b.n	800fc16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fc0a:	2303      	movs	r3, #3
 800fc0c:	73fb      	strb	r3, [r7, #15]
    break;
 800fc0e:	e002      	b.n	800fc16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fc10:	2303      	movs	r3, #3
 800fc12:	73fb      	strb	r3, [r7, #15]
    break;
 800fc14:	bf00      	nop
  }
  return usb_status;
 800fc16:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3714      	adds	r7, #20
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr

0800fc24 <rcl_get_zero_initialized_publisher>:
 800fc24:	4b01      	ldr	r3, [pc, #4]	; (800fc2c <rcl_get_zero_initialized_publisher+0x8>)
 800fc26:	6818      	ldr	r0, [r3, #0]
 800fc28:	4770      	bx	lr
 800fc2a:	bf00      	nop
 800fc2c:	0801b3a8 	.word	0x0801b3a8

0800fc30 <rcl_publisher_init>:
 800fc30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc34:	b088      	sub	sp, #32
 800fc36:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800fc38:	2d00      	cmp	r5, #0
 800fc3a:	d069      	beq.n	800fd10 <rcl_publisher_init+0xe0>
 800fc3c:	f105 0950 	add.w	r9, r5, #80	; 0x50
 800fc40:	4604      	mov	r4, r0
 800fc42:	4648      	mov	r0, r9
 800fc44:	460e      	mov	r6, r1
 800fc46:	4690      	mov	r8, r2
 800fc48:	461f      	mov	r7, r3
 800fc4a:	f000 f9d5 	bl	800fff8 <rcutils_allocator_is_valid>
 800fc4e:	2800      	cmp	r0, #0
 800fc50:	d05e      	beq.n	800fd10 <rcl_publisher_init+0xe0>
 800fc52:	2c00      	cmp	r4, #0
 800fc54:	d05c      	beq.n	800fd10 <rcl_publisher_init+0xe0>
 800fc56:	f8d4 a000 	ldr.w	sl, [r4]
 800fc5a:	f1ba 0f00 	cmp.w	sl, #0
 800fc5e:	d004      	beq.n	800fc6a <rcl_publisher_init+0x3a>
 800fc60:	2764      	movs	r7, #100	; 0x64
 800fc62:	4638      	mov	r0, r7
 800fc64:	b008      	add	sp, #32
 800fc66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc6a:	4630      	mov	r0, r6
 800fc6c:	f005 ff3c 	bl	8015ae8 <rcl_node_is_valid>
 800fc70:	2800      	cmp	r0, #0
 800fc72:	d052      	beq.n	800fd1a <rcl_publisher_init+0xea>
 800fc74:	f1b8 0f00 	cmp.w	r8, #0
 800fc78:	d04a      	beq.n	800fd10 <rcl_publisher_init+0xe0>
 800fc7a:	2f00      	cmp	r7, #0
 800fc7c:	d048      	beq.n	800fd10 <rcl_publisher_init+0xe0>
 800fc7e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800fc82:	aa07      	add	r2, sp, #28
 800fc84:	9205      	str	r2, [sp, #20]
 800fc86:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800fc8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fc8e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fc92:	f8cd a01c 	str.w	sl, [sp, #28]
 800fc96:	4639      	mov	r1, r7
 800fc98:	e899 000c 	ldmia.w	r9, {r2, r3}
 800fc9c:	4630      	mov	r0, r6
 800fc9e:	f005 ff77 	bl	8015b90 <rcl_node_resolve_name>
 800fca2:	4607      	mov	r7, r0
 800fca4:	2800      	cmp	r0, #0
 800fca6:	d14f      	bne.n	800fd48 <rcl_publisher_init+0x118>
 800fca8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800fcaa:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800fcac:	20c8      	movs	r0, #200	; 0xc8
 800fcae:	4798      	blx	r3
 800fcb0:	6020      	str	r0, [r4, #0]
 800fcb2:	2800      	cmp	r0, #0
 800fcb4:	d04e      	beq.n	800fd54 <rcl_publisher_init+0x124>
 800fcb6:	4630      	mov	r0, r6
 800fcb8:	f005 ff38 	bl	8015b2c <rcl_node_get_rmw_handle>
 800fcbc:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800fcc0:	9300      	str	r3, [sp, #0]
 800fcc2:	9a07      	ldr	r2, [sp, #28]
 800fcc4:	6827      	ldr	r7, [r4, #0]
 800fcc6:	462b      	mov	r3, r5
 800fcc8:	4641      	mov	r1, r8
 800fcca:	f000 fa53 	bl	8010174 <rmw_create_publisher>
 800fcce:	6823      	ldr	r3, [r4, #0]
 800fcd0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800fcd4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800fcd8:	b370      	cbz	r0, 800fd38 <rcl_publisher_init+0x108>
 800fcda:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800fcde:	f000 fb29 	bl	8010334 <rmw_publisher_get_actual_qos>
 800fce2:	6823      	ldr	r3, [r4, #0]
 800fce4:	4607      	mov	r7, r0
 800fce6:	b9d0      	cbnz	r0, 800fd1e <rcl_publisher_init+0xee>
 800fce8:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 800fcec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800fcf0:	4629      	mov	r1, r5
 800fcf2:	2270      	movs	r2, #112	; 0x70
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	f009 ffa9 	bl	8019c4c <memcpy>
 800fcfa:	6832      	ldr	r2, [r6, #0]
 800fcfc:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800fd00:	9807      	ldr	r0, [sp, #28]
 800fd02:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800fd04:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800fd06:	4798      	blx	r3
 800fd08:	4638      	mov	r0, r7
 800fd0a:	b008      	add	sp, #32
 800fd0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd10:	270b      	movs	r7, #11
 800fd12:	4638      	mov	r0, r7
 800fd14:	b008      	add	sp, #32
 800fd16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd1a:	27c8      	movs	r7, #200	; 0xc8
 800fd1c:	e7a1      	b.n	800fc62 <rcl_publisher_init+0x32>
 800fd1e:	b18b      	cbz	r3, 800fd44 <rcl_publisher_init+0x114>
 800fd20:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800fd24:	b142      	cbz	r2, 800fd38 <rcl_publisher_init+0x108>
 800fd26:	4630      	mov	r0, r6
 800fd28:	f005 ff00 	bl	8015b2c <rcl_node_get_rmw_handle>
 800fd2c:	6823      	ldr	r3, [r4, #0]
 800fd2e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800fd32:	f000 fb01 	bl	8010338 <rmw_destroy_publisher>
 800fd36:	6823      	ldr	r3, [r4, #0]
 800fd38:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800fd3a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	4790      	blx	r2
 800fd40:	2300      	movs	r3, #0
 800fd42:	6023      	str	r3, [r4, #0]
 800fd44:	2701      	movs	r7, #1
 800fd46:	e7db      	b.n	800fd00 <rcl_publisher_init+0xd0>
 800fd48:	2867      	cmp	r0, #103	; 0x67
 800fd4a:	d0d9      	beq.n	800fd00 <rcl_publisher_init+0xd0>
 800fd4c:	2869      	cmp	r0, #105	; 0x69
 800fd4e:	d003      	beq.n	800fd58 <rcl_publisher_init+0x128>
 800fd50:	280a      	cmp	r0, #10
 800fd52:	d1f7      	bne.n	800fd44 <rcl_publisher_init+0x114>
 800fd54:	270a      	movs	r7, #10
 800fd56:	e7d3      	b.n	800fd00 <rcl_publisher_init+0xd0>
 800fd58:	2767      	movs	r7, #103	; 0x67
 800fd5a:	e7d1      	b.n	800fd00 <rcl_publisher_init+0xd0>

0800fd5c <rcl_publisher_get_default_options>:
 800fd5c:	b570      	push	{r4, r5, r6, lr}
 800fd5e:	4d14      	ldr	r5, [pc, #80]	; (800fdb0 <rcl_publisher_get_default_options+0x54>)
 800fd60:	4914      	ldr	r1, [pc, #80]	; (800fdb4 <rcl_publisher_get_default_options+0x58>)
 800fd62:	b088      	sub	sp, #32
 800fd64:	4604      	mov	r4, r0
 800fd66:	2250      	movs	r2, #80	; 0x50
 800fd68:	4628      	mov	r0, r5
 800fd6a:	f009 ff6f 	bl	8019c4c <memcpy>
 800fd6e:	a802      	add	r0, sp, #8
 800fd70:	f000 f934 	bl	800ffdc <rcutils_get_default_allocator>
 800fd74:	f10d 0c08 	add.w	ip, sp, #8
 800fd78:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fd7c:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800fd80:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fd84:	466e      	mov	r6, sp
 800fd86:	f8dc 3000 	ldr.w	r3, [ip]
 800fd8a:	f8ce 3000 	str.w	r3, [lr]
 800fd8e:	4630      	mov	r0, r6
 800fd90:	f000 f972 	bl	8010078 <rmw_get_default_publisher_options>
 800fd94:	e896 0003 	ldmia.w	r6, {r0, r1}
 800fd98:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800fd9c:	e883 0003 	stmia.w	r3, {r0, r1}
 800fda0:	2270      	movs	r2, #112	; 0x70
 800fda2:	4629      	mov	r1, r5
 800fda4:	4620      	mov	r0, r4
 800fda6:	f009 ff51 	bl	8019c4c <memcpy>
 800fdaa:	4620      	mov	r0, r4
 800fdac:	b008      	add	sp, #32
 800fdae:	bd70      	pop	{r4, r5, r6, pc}
 800fdb0:	20010d18 	.word	0x20010d18
 800fdb4:	0801b3b0 	.word	0x0801b3b0

0800fdb8 <rcl_publish>:
 800fdb8:	b1f8      	cbz	r0, 800fdfa <rcl_publish+0x42>
 800fdba:	6803      	ldr	r3, [r0, #0]
 800fdbc:	b570      	push	{r4, r5, r6, lr}
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	b1b3      	cbz	r3, 800fdf0 <rcl_publish+0x38>
 800fdc2:	4616      	mov	r6, r2
 800fdc4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800fdc8:	b192      	cbz	r2, 800fdf0 <rcl_publish+0x38>
 800fdca:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800fdce:	460d      	mov	r5, r1
 800fdd0:	f005 fab0 	bl	8015334 <rcl_context_is_valid>
 800fdd4:	b160      	cbz	r0, 800fdf0 <rcl_publish+0x38>
 800fdd6:	6823      	ldr	r3, [r4, #0]
 800fdd8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800fddc:	b140      	cbz	r0, 800fdf0 <rcl_publish+0x38>
 800fdde:	b155      	cbz	r5, 800fdf6 <rcl_publish+0x3e>
 800fde0:	4632      	mov	r2, r6
 800fde2:	4629      	mov	r1, r5
 800fde4:	f000 f966 	bl	80100b4 <rmw_publish>
 800fde8:	3800      	subs	r0, #0
 800fdea:	bf18      	it	ne
 800fdec:	2001      	movne	r0, #1
 800fdee:	bd70      	pop	{r4, r5, r6, pc}
 800fdf0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800fdf4:	bd70      	pop	{r4, r5, r6, pc}
 800fdf6:	200b      	movs	r0, #11
 800fdf8:	bd70      	pop	{r4, r5, r6, pc}
 800fdfa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800fdfe:	4770      	bx	lr

0800fe00 <rclc_support_init>:
 800fe00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe04:	b086      	sub	sp, #24
 800fe06:	b3b8      	cbz	r0, 800fe78 <rclc_support_init+0x78>
 800fe08:	461c      	mov	r4, r3
 800fe0a:	b3ab      	cbz	r3, 800fe78 <rclc_support_init+0x78>
 800fe0c:	460f      	mov	r7, r1
 800fe0e:	4690      	mov	r8, r2
 800fe10:	4606      	mov	r6, r0
 800fe12:	f005 fbf9 	bl	8015608 <rcl_get_zero_initialized_init_options>
 800fe16:	f104 030c 	add.w	r3, r4, #12
 800fe1a:	9005      	str	r0, [sp, #20]
 800fe1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fe20:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fe24:	a805      	add	r0, sp, #20
 800fe26:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800fe2a:	f005 fbef 	bl	801560c <rcl_init_options_init>
 800fe2e:	4605      	mov	r5, r0
 800fe30:	b9e0      	cbnz	r0, 800fe6c <rclc_support_init+0x6c>
 800fe32:	ad02      	add	r5, sp, #8
 800fe34:	4628      	mov	r0, r5
 800fe36:	f005 fa73 	bl	8015320 <rcl_get_zero_initialized_context>
 800fe3a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fe3e:	4633      	mov	r3, r6
 800fe40:	e886 0003 	stmia.w	r6, {r0, r1}
 800fe44:	aa05      	add	r2, sp, #20
 800fe46:	4641      	mov	r1, r8
 800fe48:	4638      	mov	r0, r7
 800fe4a:	f005 fad9 	bl	8015400 <rcl_init>
 800fe4e:	4605      	mov	r5, r0
 800fe50:	b9b8      	cbnz	r0, 800fe82 <rclc_support_init+0x82>
 800fe52:	60b4      	str	r4, [r6, #8]
 800fe54:	4622      	mov	r2, r4
 800fe56:	f106 010c 	add.w	r1, r6, #12
 800fe5a:	2003      	movs	r0, #3
 800fe5c:	f006 f854 	bl	8015f08 <rcl_clock_init>
 800fe60:	4605      	mov	r5, r0
 800fe62:	b970      	cbnz	r0, 800fe82 <rclc_support_init+0x82>
 800fe64:	a805      	add	r0, sp, #20
 800fe66:	f005 fc37 	bl	80156d8 <rcl_init_options_fini>
 800fe6a:	b108      	cbz	r0, 800fe70 <rclc_support_init+0x70>
 800fe6c:	f000 f8e8 	bl	8010040 <rcutils_reset_error>
 800fe70:	4628      	mov	r0, r5
 800fe72:	b006      	add	sp, #24
 800fe74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe78:	250b      	movs	r5, #11
 800fe7a:	4628      	mov	r0, r5
 800fe7c:	b006      	add	sp, #24
 800fe7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe82:	f000 f8dd 	bl	8010040 <rcutils_reset_error>
 800fe86:	a805      	add	r0, sp, #20
 800fe88:	f005 fc26 	bl	80156d8 <rcl_init_options_fini>
 800fe8c:	2800      	cmp	r0, #0
 800fe8e:	d0ef      	beq.n	800fe70 <rclc_support_init+0x70>
 800fe90:	e7ec      	b.n	800fe6c <rclc_support_init+0x6c>
 800fe92:	bf00      	nop

0800fe94 <rclc_node_init_default>:
 800fe94:	b3b8      	cbz	r0, 800ff06 <rclc_node_init_default+0x72>
 800fe96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe9a:	460d      	mov	r5, r1
 800fe9c:	b0a1      	sub	sp, #132	; 0x84
 800fe9e:	b329      	cbz	r1, 800feec <rclc_node_init_default+0x58>
 800fea0:	4616      	mov	r6, r2
 800fea2:	b31a      	cbz	r2, 800feec <rclc_node_init_default+0x58>
 800fea4:	461f      	mov	r7, r3
 800fea6:	b30b      	cbz	r3, 800feec <rclc_node_init_default+0x58>
 800fea8:	f10d 0810 	add.w	r8, sp, #16
 800feac:	4604      	mov	r4, r0
 800feae:	4640      	mov	r0, r8
 800feb0:	f005 fcca 	bl	8015848 <rcl_get_zero_initialized_node>
 800feb4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800feb8:	f10d 0918 	add.w	r9, sp, #24
 800febc:	e884 0003 	stmia.w	r4, {r0, r1}
 800fec0:	4648      	mov	r0, r9
 800fec2:	f005 fe39 	bl	8015b38 <rcl_node_get_default_options>
 800fec6:	4640      	mov	r0, r8
 800fec8:	f005 fcbe 	bl	8015848 <rcl_get_zero_initialized_node>
 800fecc:	f8cd 9000 	str.w	r9, [sp]
 800fed0:	e898 0003 	ldmia.w	r8, {r0, r1}
 800fed4:	463b      	mov	r3, r7
 800fed6:	e884 0003 	stmia.w	r4, {r0, r1}
 800feda:	4632      	mov	r2, r6
 800fedc:	4629      	mov	r1, r5
 800fede:	4620      	mov	r0, r4
 800fee0:	f005 fcbc 	bl	801585c <rcl_node_init>
 800fee4:	b930      	cbnz	r0, 800fef4 <rclc_node_init_default+0x60>
 800fee6:	b021      	add	sp, #132	; 0x84
 800fee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800feec:	200b      	movs	r0, #11
 800feee:	b021      	add	sp, #132	; 0x84
 800fef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fef4:	9003      	str	r0, [sp, #12]
 800fef6:	f000 f8a3 	bl	8010040 <rcutils_reset_error>
 800fefa:	f000 f8a1 	bl	8010040 <rcutils_reset_error>
 800fefe:	9803      	ldr	r0, [sp, #12]
 800ff00:	b021      	add	sp, #132	; 0x84
 800ff02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff06:	200b      	movs	r0, #11
 800ff08:	4770      	bx	lr
 800ff0a:	bf00      	nop

0800ff0c <rclc_publisher_init_default>:
 800ff0c:	b368      	cbz	r0, 800ff6a <rclc_publisher_init_default+0x5e>
 800ff0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff12:	460d      	mov	r5, r1
 800ff14:	b0a0      	sub	sp, #128	; 0x80
 800ff16:	b321      	cbz	r1, 800ff62 <rclc_publisher_init_default+0x56>
 800ff18:	4616      	mov	r6, r2
 800ff1a:	b312      	cbz	r2, 800ff62 <rclc_publisher_init_default+0x56>
 800ff1c:	461f      	mov	r7, r3
 800ff1e:	b303      	cbz	r3, 800ff62 <rclc_publisher_init_default+0x56>
 800ff20:	4604      	mov	r4, r0
 800ff22:	f7ff fe7f 	bl	800fc24 <rcl_get_zero_initialized_publisher>
 800ff26:	f10d 0810 	add.w	r8, sp, #16
 800ff2a:	6020      	str	r0, [r4, #0]
 800ff2c:	4640      	mov	r0, r8
 800ff2e:	f7ff ff15 	bl	800fd5c <rcl_publisher_get_default_options>
 800ff32:	490f      	ldr	r1, [pc, #60]	; (800ff70 <rclc_publisher_init_default+0x64>)
 800ff34:	2250      	movs	r2, #80	; 0x50
 800ff36:	4640      	mov	r0, r8
 800ff38:	f009 fe88 	bl	8019c4c <memcpy>
 800ff3c:	f8cd 8000 	str.w	r8, [sp]
 800ff40:	463b      	mov	r3, r7
 800ff42:	4632      	mov	r2, r6
 800ff44:	4629      	mov	r1, r5
 800ff46:	4620      	mov	r0, r4
 800ff48:	f7ff fe72 	bl	800fc30 <rcl_publisher_init>
 800ff4c:	b910      	cbnz	r0, 800ff54 <rclc_publisher_init_default+0x48>
 800ff4e:	b020      	add	sp, #128	; 0x80
 800ff50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff54:	9003      	str	r0, [sp, #12]
 800ff56:	f000 f873 	bl	8010040 <rcutils_reset_error>
 800ff5a:	9803      	ldr	r0, [sp, #12]
 800ff5c:	b020      	add	sp, #128	; 0x80
 800ff5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff62:	200b      	movs	r0, #11
 800ff64:	b020      	add	sp, #128	; 0x80
 800ff66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff6a:	200b      	movs	r0, #11
 800ff6c:	4770      	bx	lr
 800ff6e:	bf00      	nop
 800ff70:	0801b400 	.word	0x0801b400

0800ff74 <__default_zero_allocate>:
 800ff74:	f009 bc64 	b.w	8019840 <calloc>

0800ff78 <__default_reallocate>:
 800ff78:	f009 bff8 	b.w	8019f6c <realloc>

0800ff7c <__default_deallocate>:
 800ff7c:	f009 be5e 	b.w	8019c3c <free>

0800ff80 <__default_allocate>:
 800ff80:	f009 be54 	b.w	8019c2c <malloc>

0800ff84 <rcutils_get_zero_initialized_allocator>:
 800ff84:	b510      	push	{r4, lr}
 800ff86:	4c05      	ldr	r4, [pc, #20]	; (800ff9c <rcutils_get_zero_initialized_allocator+0x18>)
 800ff88:	4686      	mov	lr, r0
 800ff8a:	4684      	mov	ip, r0
 800ff8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ff8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ff92:	6823      	ldr	r3, [r4, #0]
 800ff94:	f8cc 3000 	str.w	r3, [ip]
 800ff98:	4670      	mov	r0, lr
 800ff9a:	bd10      	pop	{r4, pc}
 800ff9c:	0801b450 	.word	0x0801b450

0800ffa0 <rcutils_set_default_allocator>:
 800ffa0:	b1a8      	cbz	r0, 800ffce <rcutils_set_default_allocator+0x2e>
 800ffa2:	6802      	ldr	r2, [r0, #0]
 800ffa4:	b1a2      	cbz	r2, 800ffd0 <rcutils_set_default_allocator+0x30>
 800ffa6:	6841      	ldr	r1, [r0, #4]
 800ffa8:	b1a1      	cbz	r1, 800ffd4 <rcutils_set_default_allocator+0x34>
 800ffaa:	b410      	push	{r4}
 800ffac:	68c4      	ldr	r4, [r0, #12]
 800ffae:	b164      	cbz	r4, 800ffca <rcutils_set_default_allocator+0x2a>
 800ffb0:	6880      	ldr	r0, [r0, #8]
 800ffb2:	b138      	cbz	r0, 800ffc4 <rcutils_set_default_allocator+0x24>
 800ffb4:	4b08      	ldr	r3, [pc, #32]	; (800ffd8 <rcutils_set_default_allocator+0x38>)
 800ffb6:	601a      	str	r2, [r3, #0]
 800ffb8:	2200      	movs	r2, #0
 800ffba:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800ffbe:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800ffc2:	2001      	movs	r0, #1
 800ffc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffc8:	4770      	bx	lr
 800ffca:	4620      	mov	r0, r4
 800ffcc:	e7fa      	b.n	800ffc4 <rcutils_set_default_allocator+0x24>
 800ffce:	4770      	bx	lr
 800ffd0:	4610      	mov	r0, r2
 800ffd2:	4770      	bx	lr
 800ffd4:	4608      	mov	r0, r1
 800ffd6:	4770      	bx	lr
 800ffd8:	20000104 	.word	0x20000104

0800ffdc <rcutils_get_default_allocator>:
 800ffdc:	b510      	push	{r4, lr}
 800ffde:	4c05      	ldr	r4, [pc, #20]	; (800fff4 <rcutils_get_default_allocator+0x18>)
 800ffe0:	4686      	mov	lr, r0
 800ffe2:	4684      	mov	ip, r0
 800ffe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ffe6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ffea:	6823      	ldr	r3, [r4, #0]
 800ffec:	f8cc 3000 	str.w	r3, [ip]
 800fff0:	4670      	mov	r0, lr
 800fff2:	bd10      	pop	{r4, pc}
 800fff4:	20000104 	.word	0x20000104

0800fff8 <rcutils_allocator_is_valid>:
 800fff8:	b158      	cbz	r0, 8010012 <rcutils_allocator_is_valid+0x1a>
 800fffa:	6803      	ldr	r3, [r0, #0]
 800fffc:	b143      	cbz	r3, 8010010 <rcutils_allocator_is_valid+0x18>
 800fffe:	6843      	ldr	r3, [r0, #4]
 8010000:	b133      	cbz	r3, 8010010 <rcutils_allocator_is_valid+0x18>
 8010002:	68c3      	ldr	r3, [r0, #12]
 8010004:	b123      	cbz	r3, 8010010 <rcutils_allocator_is_valid+0x18>
 8010006:	6880      	ldr	r0, [r0, #8]
 8010008:	3800      	subs	r0, #0
 801000a:	bf18      	it	ne
 801000c:	2001      	movne	r0, #1
 801000e:	4770      	bx	lr
 8010010:	4618      	mov	r0, r3
 8010012:	4770      	bx	lr

08010014 <rcutils_get_error_string>:
 8010014:	4b06      	ldr	r3, [pc, #24]	; (8010030 <rcutils_get_error_string+0x1c>)
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	b13b      	cbz	r3, 801002a <rcutils_get_error_string+0x16>
 801001a:	4b06      	ldr	r3, [pc, #24]	; (8010034 <rcutils_get_error_string+0x20>)
 801001c:	781a      	ldrb	r2, [r3, #0]
 801001e:	b90a      	cbnz	r2, 8010024 <rcutils_get_error_string+0x10>
 8010020:	2201      	movs	r2, #1
 8010022:	701a      	strb	r2, [r3, #0]
 8010024:	4b04      	ldr	r3, [pc, #16]	; (8010038 <rcutils_get_error_string+0x24>)
 8010026:	7818      	ldrb	r0, [r3, #0]
 8010028:	4770      	bx	lr
 801002a:	4b04      	ldr	r3, [pc, #16]	; (801003c <rcutils_get_error_string+0x28>)
 801002c:	7818      	ldrb	r0, [r3, #0]
 801002e:	4770      	bx	lr
 8010030:	20010d88 	.word	0x20010d88
 8010034:	20010da1 	.word	0x20010da1
 8010038:	20010da0 	.word	0x20010da0
 801003c:	0801b580 	.word	0x0801b580

08010040 <rcutils_reset_error>:
 8010040:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8010060 <rcutils_reset_error+0x20>
 8010044:	4a08      	ldr	r2, [pc, #32]	; (8010068 <rcutils_reset_error+0x28>)
 8010046:	4809      	ldr	r0, [pc, #36]	; (801006c <rcutils_reset_error+0x2c>)
 8010048:	4909      	ldr	r1, [pc, #36]	; (8010070 <rcutils_reset_error+0x30>)
 801004a:	2300      	movs	r3, #0
 801004c:	8013      	strh	r3, [r2, #0]
 801004e:	ed82 7b02 	vstr	d7, [r2, #8]
 8010052:	4a08      	ldr	r2, [pc, #32]	; (8010074 <rcutils_reset_error+0x34>)
 8010054:	7003      	strb	r3, [r0, #0]
 8010056:	700b      	strb	r3, [r1, #0]
 8010058:	7013      	strb	r3, [r2, #0]
 801005a:	4770      	bx	lr
 801005c:	f3af 8000 	nop.w
	...
 8010068:	20010d90 	.word	0x20010d90
 801006c:	20010da1 	.word	0x20010da1
 8010070:	20010da0 	.word	0x20010da0
 8010074:	20010d88 	.word	0x20010d88

08010078 <rmw_get_default_publisher_options>:
 8010078:	2200      	movs	r2, #0
 801007a:	6002      	str	r2, [r0, #0]
 801007c:	7102      	strb	r2, [r0, #4]
 801007e:	4770      	bx	lr

08010080 <rmw_uros_set_custom_transport>:
 8010080:	b470      	push	{r4, r5, r6}
 8010082:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8010086:	b162      	cbz	r2, 80100a2 <rmw_uros_set_custom_transport+0x22>
 8010088:	b15b      	cbz	r3, 80100a2 <rmw_uros_set_custom_transport+0x22>
 801008a:	b155      	cbz	r5, 80100a2 <rmw_uros_set_custom_transport+0x22>
 801008c:	b14e      	cbz	r6, 80100a2 <rmw_uros_set_custom_transport+0x22>
 801008e:	4c06      	ldr	r4, [pc, #24]	; (80100a8 <rmw_uros_set_custom_transport+0x28>)
 8010090:	7020      	strb	r0, [r4, #0]
 8010092:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8010096:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801009a:	6166      	str	r6, [r4, #20]
 801009c:	2000      	movs	r0, #0
 801009e:	bc70      	pop	{r4, r5, r6}
 80100a0:	4770      	bx	lr
 80100a2:	200b      	movs	r0, #11
 80100a4:	bc70      	pop	{r4, r5, r6}
 80100a6:	4770      	bx	lr
 80100a8:	20010da4 	.word	0x20010da4

080100ac <flush_session>:
 80100ac:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 80100ae:	f003 bac1 	b.w	8013634 <uxr_run_session_until_confirm_delivery>
 80100b2:	bf00      	nop

080100b4 <rmw_publish>:
 80100b4:	2800      	cmp	r0, #0
 80100b6:	d053      	beq.n	8010160 <rmw_publish+0xac>
 80100b8:	b570      	push	{r4, r5, r6, lr}
 80100ba:	460d      	mov	r5, r1
 80100bc:	b08e      	sub	sp, #56	; 0x38
 80100be:	2900      	cmp	r1, #0
 80100c0:	d04b      	beq.n	801015a <rmw_publish+0xa6>
 80100c2:	4604      	mov	r4, r0
 80100c4:	6800      	ldr	r0, [r0, #0]
 80100c6:	f000 fc3b 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 80100ca:	2800      	cmp	r0, #0
 80100cc:	d045      	beq.n	801015a <rmw_publish+0xa6>
 80100ce:	6866      	ldr	r6, [r4, #4]
 80100d0:	2e00      	cmp	r6, #0
 80100d2:	d042      	beq.n	801015a <rmw_publish+0xa6>
 80100d4:	69b4      	ldr	r4, [r6, #24]
 80100d6:	4628      	mov	r0, r5
 80100d8:	6923      	ldr	r3, [r4, #16]
 80100da:	4798      	blx	r3
 80100dc:	69f3      	ldr	r3, [r6, #28]
 80100de:	9005      	str	r0, [sp, #20]
 80100e0:	b113      	cbz	r3, 80100e8 <rmw_publish+0x34>
 80100e2:	a805      	add	r0, sp, #20
 80100e4:	4798      	blx	r3
 80100e6:	9805      	ldr	r0, [sp, #20]
 80100e8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80100ec:	691b      	ldr	r3, [r3, #16]
 80100ee:	9000      	str	r0, [sp, #0]
 80100f0:	6972      	ldr	r2, [r6, #20]
 80100f2:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80100f4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80100f8:	ab06      	add	r3, sp, #24
 80100fa:	f004 f887 	bl	801420c <uxr_prepare_output_stream>
 80100fe:	b1d8      	cbz	r0, 8010138 <rmw_publish+0x84>
 8010100:	68a3      	ldr	r3, [r4, #8]
 8010102:	a906      	add	r1, sp, #24
 8010104:	4628      	mov	r0, r5
 8010106:	4798      	blx	r3
 8010108:	6a33      	ldr	r3, [r6, #32]
 801010a:	4604      	mov	r4, r0
 801010c:	b10b      	cbz	r3, 8010112 <rmw_publish+0x5e>
 801010e:	a806      	add	r0, sp, #24
 8010110:	4798      	blx	r3
 8010112:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8010116:	2b01      	cmp	r3, #1
 8010118:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801011c:	d022      	beq.n	8010164 <rmw_publish+0xb0>
 801011e:	6918      	ldr	r0, [r3, #16]
 8010120:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8010122:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010126:	f003 fa85 	bl	8013634 <uxr_run_session_until_confirm_delivery>
 801012a:	4020      	ands	r0, r4
 801012c:	b2c4      	uxtb	r4, r0
 801012e:	f084 0001 	eor.w	r0, r4, #1
 8010132:	b2c0      	uxtb	r0, r0
 8010134:	b00e      	add	sp, #56	; 0x38
 8010136:	bd70      	pop	{r4, r5, r6, pc}
 8010138:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801013c:	6918      	ldr	r0, [r3, #16]
 801013e:	9b05      	ldr	r3, [sp, #20]
 8010140:	9300      	str	r3, [sp, #0]
 8010142:	4b0b      	ldr	r3, [pc, #44]	; (8010170 <rmw_publish+0xbc>)
 8010144:	9301      	str	r3, [sp, #4]
 8010146:	9602      	str	r6, [sp, #8]
 8010148:	6972      	ldr	r2, [r6, #20]
 801014a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 801014c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010150:	ab06      	add	r3, sp, #24
 8010152:	f004 f88b 	bl	801426c <uxr_prepare_output_stream_fragmented>
 8010156:	2800      	cmp	r0, #0
 8010158:	d1d2      	bne.n	8010100 <rmw_publish+0x4c>
 801015a:	2001      	movs	r0, #1
 801015c:	b00e      	add	sp, #56	; 0x38
 801015e:	bd70      	pop	{r4, r5, r6, pc}
 8010160:	2001      	movs	r0, #1
 8010162:	4770      	bx	lr
 8010164:	6918      	ldr	r0, [r3, #16]
 8010166:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801016a:	f002 fedd 	bl	8012f28 <uxr_flash_output_streams>
 801016e:	e7de      	b.n	801012e <rmw_publish+0x7a>
 8010170:	080100ad 	.word	0x080100ad

08010174 <rmw_create_publisher>:
 8010174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010178:	b087      	sub	sp, #28
 801017a:	2800      	cmp	r0, #0
 801017c:	f000 80cf 	beq.w	801031e <rmw_create_publisher+0x1aa>
 8010180:	460e      	mov	r6, r1
 8010182:	2900      	cmp	r1, #0
 8010184:	f000 80cb 	beq.w	801031e <rmw_create_publisher+0x1aa>
 8010188:	4604      	mov	r4, r0
 801018a:	6800      	ldr	r0, [r0, #0]
 801018c:	4615      	mov	r5, r2
 801018e:	4698      	mov	r8, r3
 8010190:	f000 fbd6 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 8010194:	2800      	cmp	r0, #0
 8010196:	f000 80c2 	beq.w	801031e <rmw_create_publisher+0x1aa>
 801019a:	2d00      	cmp	r5, #0
 801019c:	f000 80bf 	beq.w	801031e <rmw_create_publisher+0x1aa>
 80101a0:	782b      	ldrb	r3, [r5, #0]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	f000 80bb 	beq.w	801031e <rmw_create_publisher+0x1aa>
 80101a8:	f1b8 0f00 	cmp.w	r8, #0
 80101ac:	f000 80b7 	beq.w	801031e <rmw_create_publisher+0x1aa>
 80101b0:	485d      	ldr	r0, [pc, #372]	; (8010328 <rmw_create_publisher+0x1b4>)
 80101b2:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80101b6:	f006 fc1f 	bl	80169f8 <get_memory>
 80101ba:	2800      	cmp	r0, #0
 80101bc:	f000 80af 	beq.w	801031e <rmw_create_publisher+0x1aa>
 80101c0:	6884      	ldr	r4, [r0, #8]
 80101c2:	2300      	movs	r3, #0
 80101c4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80101c8:	f006 fc3a 	bl	8016a40 <rmw_get_implementation_identifier>
 80101cc:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 80101d0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 80101d4:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 80101d8:	4628      	mov	r0, r5
 80101da:	f7f0 f803 	bl	80001e4 <strlen>
 80101de:	3001      	adds	r0, #1
 80101e0:	283c      	cmp	r0, #60	; 0x3c
 80101e2:	f104 0784 	add.w	r7, r4, #132	; 0x84
 80101e6:	f200 8097 	bhi.w	8010318 <rmw_create_publisher+0x1a4>
 80101ea:	4a50      	ldr	r2, [pc, #320]	; (801032c <rmw_create_publisher+0x1b8>)
 80101ec:	462b      	mov	r3, r5
 80101ee:	213c      	movs	r1, #60	; 0x3c
 80101f0:	4650      	mov	r0, sl
 80101f2:	f009 ff3d 	bl	801a070 <sniprintf>
 80101f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80101fa:	67e3      	str	r3, [r4, #124]	; 0x7c
 80101fc:	4641      	mov	r1, r8
 80101fe:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8010202:	2250      	movs	r2, #80	; 0x50
 8010204:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8010208:	f009 fd20 	bl	8019c4c <memcpy>
 801020c:	f898 3008 	ldrb.w	r3, [r8, #8]
 8010210:	4947      	ldr	r1, [pc, #284]	; (8010330 <rmw_create_publisher+0x1bc>)
 8010212:	2b02      	cmp	r3, #2
 8010214:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010218:	bf0c      	ite	eq
 801021a:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 801021e:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8010222:	67a3      	str	r3, [r4, #120]	; 0x78
 8010224:	2300      	movs	r3, #0
 8010226:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801022a:	4630      	mov	r0, r6
 801022c:	f000 fb96 	bl	801095c <get_message_typesupport_handle>
 8010230:	2800      	cmp	r0, #0
 8010232:	d071      	beq.n	8010318 <rmw_create_publisher+0x1a4>
 8010234:	6842      	ldr	r2, [r0, #4]
 8010236:	61a2      	str	r2, [r4, #24]
 8010238:	2a00      	cmp	r2, #0
 801023a:	d06d      	beq.n	8010318 <rmw_create_publisher+0x1a4>
 801023c:	4629      	mov	r1, r5
 801023e:	4643      	mov	r3, r8
 8010240:	4648      	mov	r0, r9
 8010242:	f006 fe63 	bl	8016f0c <create_topic>
 8010246:	6260      	str	r0, [r4, #36]	; 0x24
 8010248:	2800      	cmp	r0, #0
 801024a:	d065      	beq.n	8010318 <rmw_create_publisher+0x1a4>
 801024c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010254:	2103      	movs	r1, #3
 8010256:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 801025a:	1c42      	adds	r2, r0, #1
 801025c:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8010260:	f002 fd14 	bl	8012c8c <uxr_object_id>
 8010264:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8010268:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801026c:	6120      	str	r0, [r4, #16]
 801026e:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8010272:	6910      	ldr	r0, [r2, #16]
 8010274:	2506      	movs	r5, #6
 8010276:	9500      	str	r5, [sp, #0]
 8010278:	6819      	ldr	r1, [r3, #0]
 801027a:	6922      	ldr	r2, [r4, #16]
 801027c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010280:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010284:	f002 fc5c 	bl	8012b40 <uxr_buffer_create_publisher_bin>
 8010288:	4602      	mov	r2, r0
 801028a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801028e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010292:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010296:	f000 fad3 	bl	8010840 <run_xrce_session>
 801029a:	b3c8      	cbz	r0, 8010310 <rmw_create_publisher+0x19c>
 801029c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80102a0:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 80102a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102a8:	2105      	movs	r1, #5
 80102aa:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 80102ae:	1c42      	adds	r2, r0, #1
 80102b0:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 80102b4:	f002 fcea 	bl	8012c8c <uxr_object_id>
 80102b8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80102bc:	6160      	str	r0, [r4, #20]
 80102be:	691e      	ldr	r6, [r3, #16]
 80102c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80102c4:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 80102c8:	f10d 0a10 	add.w	sl, sp, #16
 80102cc:	4641      	mov	r1, r8
 80102ce:	4650      	mov	r0, sl
 80102d0:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 80102d4:	f000 fad0 	bl	8010878 <convert_qos_profile>
 80102d8:	9503      	str	r5, [sp, #12]
 80102da:	e89a 0003 	ldmia.w	sl, {r0, r1}
 80102de:	9001      	str	r0, [sp, #4]
 80102e0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80102e4:	f8db 3010 	ldr.w	r3, [fp, #16]
 80102e8:	9300      	str	r3, [sp, #0]
 80102ea:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 80102ee:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80102f2:	f8d8 1000 	ldr.w	r1, [r8]
 80102f6:	4630      	mov	r0, r6
 80102f8:	f002 fc52 	bl	8012ba0 <uxr_buffer_create_datawriter_bin>
 80102fc:	4602      	mov	r2, r0
 80102fe:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8010302:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010306:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801030a:	f000 fa99 	bl	8010840 <run_xrce_session>
 801030e:	b938      	cbnz	r0, 8010320 <rmw_create_publisher+0x1ac>
 8010310:	4805      	ldr	r0, [pc, #20]	; (8010328 <rmw_create_publisher+0x1b4>)
 8010312:	4621      	mov	r1, r4
 8010314:	f006 fb80 	bl	8016a18 <put_memory>
 8010318:	4638      	mov	r0, r7
 801031a:	f000 f9dd 	bl	80106d8 <rmw_uxrce_fini_publisher_memory>
 801031e:	2700      	movs	r7, #0
 8010320:	4638      	mov	r0, r7
 8010322:	b007      	add	sp, #28
 8010324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010328:	2001569c 	.word	0x2001569c
 801032c:	0801b498 	.word	0x0801b498
 8010330:	0801b464 	.word	0x0801b464

08010334 <rmw_publisher_get_actual_qos>:
 8010334:	2000      	movs	r0, #0
 8010336:	4770      	bx	lr

08010338 <rmw_destroy_publisher>:
 8010338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801033a:	b128      	cbz	r0, 8010348 <rmw_destroy_publisher+0x10>
 801033c:	4604      	mov	r4, r0
 801033e:	6800      	ldr	r0, [r0, #0]
 8010340:	460d      	mov	r5, r1
 8010342:	f000 fafd 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 8010346:	b910      	cbnz	r0, 801034e <rmw_destroy_publisher+0x16>
 8010348:	2401      	movs	r4, #1
 801034a:	4620      	mov	r0, r4
 801034c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801034e:	6863      	ldr	r3, [r4, #4]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d0f9      	beq.n	8010348 <rmw_destroy_publisher+0x10>
 8010354:	2d00      	cmp	r5, #0
 8010356:	d0f7      	beq.n	8010348 <rmw_destroy_publisher+0x10>
 8010358:	6828      	ldr	r0, [r5, #0]
 801035a:	f000 faf1 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 801035e:	2800      	cmp	r0, #0
 8010360:	d0f2      	beq.n	8010348 <rmw_destroy_publisher+0x10>
 8010362:	686c      	ldr	r4, [r5, #4]
 8010364:	2c00      	cmp	r4, #0
 8010366:	d0ef      	beq.n	8010348 <rmw_destroy_publisher+0x10>
 8010368:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801036a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 801036e:	f006 fe31 	bl	8016fd4 <destroy_topic>
 8010372:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010376:	6962      	ldr	r2, [r4, #20]
 8010378:	6918      	ldr	r0, [r3, #16]
 801037a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801037e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010382:	6819      	ldr	r1, [r3, #0]
 8010384:	f002 fb28 	bl	80129d8 <uxr_buffer_delete_entity>
 8010388:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801038c:	6922      	ldr	r2, [r4, #16]
 801038e:	691b      	ldr	r3, [r3, #16]
 8010390:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8010394:	4604      	mov	r4, r0
 8010396:	6809      	ldr	r1, [r1, #0]
 8010398:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801039c:	f002 fb1c 	bl	80129d8 <uxr_buffer_delete_entity>
 80103a0:	693e      	ldr	r6, [r7, #16]
 80103a2:	4622      	mov	r2, r4
 80103a4:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 80103a8:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 80103ac:	4604      	mov	r4, r0
 80103ae:	4630      	mov	r0, r6
 80103b0:	f000 fa46 	bl	8010840 <run_xrce_session>
 80103b4:	693e      	ldr	r6, [r7, #16]
 80103b6:	4622      	mov	r2, r4
 80103b8:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 80103bc:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 80103c0:	4604      	mov	r4, r0
 80103c2:	4630      	mov	r0, r6
 80103c4:	f000 fa3c 	bl	8010840 <run_xrce_session>
 80103c8:	b12c      	cbz	r4, 80103d6 <rmw_destroy_publisher+0x9e>
 80103ca:	b120      	cbz	r0, 80103d6 <rmw_destroy_publisher+0x9e>
 80103cc:	2400      	movs	r4, #0
 80103ce:	4628      	mov	r0, r5
 80103d0:	f000 f982 	bl	80106d8 <rmw_uxrce_fini_publisher_memory>
 80103d4:	e7b9      	b.n	801034a <rmw_destroy_publisher+0x12>
 80103d6:	2402      	movs	r4, #2
 80103d8:	e7f9      	b.n	80103ce <rmw_destroy_publisher+0x96>
 80103da:	bf00      	nop

080103dc <rmw_uxrce_init_service_memory>:
 80103dc:	b1e2      	cbz	r2, 8010418 <rmw_uxrce_init_service_memory+0x3c>
 80103de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103e2:	7b05      	ldrb	r5, [r0, #12]
 80103e4:	4606      	mov	r6, r0
 80103e6:	b9ad      	cbnz	r5, 8010414 <rmw_uxrce_init_service_memory+0x38>
 80103e8:	23c8      	movs	r3, #200	; 0xc8
 80103ea:	e9c0 5500 	strd	r5, r5, [r0]
 80103ee:	6083      	str	r3, [r0, #8]
 80103f0:	f240 1301 	movw	r3, #257	; 0x101
 80103f4:	4617      	mov	r7, r2
 80103f6:	8183      	strh	r3, [r0, #12]
 80103f8:	460c      	mov	r4, r1
 80103fa:	46a8      	mov	r8, r5
 80103fc:	4621      	mov	r1, r4
 80103fe:	4630      	mov	r0, r6
 8010400:	3501      	adds	r5, #1
 8010402:	f006 fb09 	bl	8016a18 <put_memory>
 8010406:	42af      	cmp	r7, r5
 8010408:	60a4      	str	r4, [r4, #8]
 801040a:	f884 800c 	strb.w	r8, [r4, #12]
 801040e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8010412:	d1f3      	bne.n	80103fc <rmw_uxrce_init_service_memory+0x20>
 8010414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010418:	4770      	bx	lr
 801041a:	bf00      	nop

0801041c <rmw_uxrce_init_client_memory>:
 801041c:	b1e2      	cbz	r2, 8010458 <rmw_uxrce_init_client_memory+0x3c>
 801041e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010422:	7b05      	ldrb	r5, [r0, #12]
 8010424:	4606      	mov	r6, r0
 8010426:	b9ad      	cbnz	r5, 8010454 <rmw_uxrce_init_client_memory+0x38>
 8010428:	23c8      	movs	r3, #200	; 0xc8
 801042a:	e9c0 5500 	strd	r5, r5, [r0]
 801042e:	6083      	str	r3, [r0, #8]
 8010430:	f240 1301 	movw	r3, #257	; 0x101
 8010434:	4617      	mov	r7, r2
 8010436:	8183      	strh	r3, [r0, #12]
 8010438:	460c      	mov	r4, r1
 801043a:	46a8      	mov	r8, r5
 801043c:	4621      	mov	r1, r4
 801043e:	4630      	mov	r0, r6
 8010440:	3501      	adds	r5, #1
 8010442:	f006 fae9 	bl	8016a18 <put_memory>
 8010446:	42af      	cmp	r7, r5
 8010448:	60a4      	str	r4, [r4, #8]
 801044a:	f884 800c 	strb.w	r8, [r4, #12]
 801044e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8010452:	d1f3      	bne.n	801043c <rmw_uxrce_init_client_memory+0x20>
 8010454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010458:	4770      	bx	lr
 801045a:	bf00      	nop

0801045c <rmw_uxrce_init_publisher_memory>:
 801045c:	b1e2      	cbz	r2, 8010498 <rmw_uxrce_init_publisher_memory+0x3c>
 801045e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010462:	7b05      	ldrb	r5, [r0, #12]
 8010464:	4606      	mov	r6, r0
 8010466:	b9ad      	cbnz	r5, 8010494 <rmw_uxrce_init_publisher_memory+0x38>
 8010468:	23d8      	movs	r3, #216	; 0xd8
 801046a:	e9c0 5500 	strd	r5, r5, [r0]
 801046e:	6083      	str	r3, [r0, #8]
 8010470:	f240 1301 	movw	r3, #257	; 0x101
 8010474:	4617      	mov	r7, r2
 8010476:	8183      	strh	r3, [r0, #12]
 8010478:	460c      	mov	r4, r1
 801047a:	46a8      	mov	r8, r5
 801047c:	4621      	mov	r1, r4
 801047e:	4630      	mov	r0, r6
 8010480:	3501      	adds	r5, #1
 8010482:	f006 fac9 	bl	8016a18 <put_memory>
 8010486:	42af      	cmp	r7, r5
 8010488:	60a4      	str	r4, [r4, #8]
 801048a:	f884 800c 	strb.w	r8, [r4, #12]
 801048e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8010492:	d1f3      	bne.n	801047c <rmw_uxrce_init_publisher_memory+0x20>
 8010494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010498:	4770      	bx	lr
 801049a:	bf00      	nop

0801049c <rmw_uxrce_init_subscription_memory>:
 801049c:	b1e2      	cbz	r2, 80104d8 <rmw_uxrce_init_subscription_memory+0x3c>
 801049e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104a2:	7b05      	ldrb	r5, [r0, #12]
 80104a4:	4606      	mov	r6, r0
 80104a6:	b9ad      	cbnz	r5, 80104d4 <rmw_uxrce_init_subscription_memory+0x38>
 80104a8:	23d8      	movs	r3, #216	; 0xd8
 80104aa:	e9c0 5500 	strd	r5, r5, [r0]
 80104ae:	6083      	str	r3, [r0, #8]
 80104b0:	f240 1301 	movw	r3, #257	; 0x101
 80104b4:	4617      	mov	r7, r2
 80104b6:	8183      	strh	r3, [r0, #12]
 80104b8:	460c      	mov	r4, r1
 80104ba:	46a8      	mov	r8, r5
 80104bc:	4621      	mov	r1, r4
 80104be:	4630      	mov	r0, r6
 80104c0:	3501      	adds	r5, #1
 80104c2:	f006 faa9 	bl	8016a18 <put_memory>
 80104c6:	42af      	cmp	r7, r5
 80104c8:	60a4      	str	r4, [r4, #8]
 80104ca:	f884 800c 	strb.w	r8, [r4, #12]
 80104ce:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 80104d2:	d1f3      	bne.n	80104bc <rmw_uxrce_init_subscription_memory+0x20>
 80104d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104d8:	4770      	bx	lr
 80104da:	bf00      	nop

080104dc <rmw_uxrce_init_node_memory>:
 80104dc:	b1e2      	cbz	r2, 8010518 <rmw_uxrce_init_node_memory+0x3c>
 80104de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104e2:	7b05      	ldrb	r5, [r0, #12]
 80104e4:	4606      	mov	r6, r0
 80104e6:	b9ad      	cbnz	r5, 8010514 <rmw_uxrce_init_node_memory+0x38>
 80104e8:	23a4      	movs	r3, #164	; 0xa4
 80104ea:	e9c0 5500 	strd	r5, r5, [r0]
 80104ee:	6083      	str	r3, [r0, #8]
 80104f0:	f240 1301 	movw	r3, #257	; 0x101
 80104f4:	4617      	mov	r7, r2
 80104f6:	8183      	strh	r3, [r0, #12]
 80104f8:	460c      	mov	r4, r1
 80104fa:	46a8      	mov	r8, r5
 80104fc:	4621      	mov	r1, r4
 80104fe:	4630      	mov	r0, r6
 8010500:	3501      	adds	r5, #1
 8010502:	f006 fa89 	bl	8016a18 <put_memory>
 8010506:	42af      	cmp	r7, r5
 8010508:	60a4      	str	r4, [r4, #8]
 801050a:	f884 800c 	strb.w	r8, [r4, #12]
 801050e:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8010512:	d1f3      	bne.n	80104fc <rmw_uxrce_init_node_memory+0x20>
 8010514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010518:	4770      	bx	lr
 801051a:	bf00      	nop

0801051c <rmw_uxrce_init_session_memory>:
 801051c:	b1ea      	cbz	r2, 801055a <rmw_uxrce_init_session_memory+0x3e>
 801051e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010522:	7b05      	ldrb	r5, [r0, #12]
 8010524:	4606      	mov	r6, r0
 8010526:	b9b5      	cbnz	r5, 8010556 <rmw_uxrce_init_session_memory+0x3a>
 8010528:	e9c0 5500 	strd	r5, r5, [r0]
 801052c:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8010530:	f240 1301 	movw	r3, #257	; 0x101
 8010534:	4617      	mov	r7, r2
 8010536:	f8c0 8008 	str.w	r8, [r0, #8]
 801053a:	460c      	mov	r4, r1
 801053c:	8183      	strh	r3, [r0, #12]
 801053e:	46a9      	mov	r9, r5
 8010540:	4621      	mov	r1, r4
 8010542:	4630      	mov	r0, r6
 8010544:	3501      	adds	r5, #1
 8010546:	f006 fa67 	bl	8016a18 <put_memory>
 801054a:	42af      	cmp	r7, r5
 801054c:	60a4      	str	r4, [r4, #8]
 801054e:	f884 900c 	strb.w	r9, [r4, #12]
 8010552:	4444      	add	r4, r8
 8010554:	d1f4      	bne.n	8010540 <rmw_uxrce_init_session_memory+0x24>
 8010556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801055a:	4770      	bx	lr

0801055c <rmw_uxrce_init_topic_memory>:
 801055c:	b1e2      	cbz	r2, 8010598 <rmw_uxrce_init_topic_memory+0x3c>
 801055e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010562:	7b05      	ldrb	r5, [r0, #12]
 8010564:	4606      	mov	r6, r0
 8010566:	b9ad      	cbnz	r5, 8010594 <rmw_uxrce_init_topic_memory+0x38>
 8010568:	231c      	movs	r3, #28
 801056a:	e9c0 5500 	strd	r5, r5, [r0]
 801056e:	6083      	str	r3, [r0, #8]
 8010570:	f240 1301 	movw	r3, #257	; 0x101
 8010574:	4617      	mov	r7, r2
 8010576:	8183      	strh	r3, [r0, #12]
 8010578:	460c      	mov	r4, r1
 801057a:	46a8      	mov	r8, r5
 801057c:	4621      	mov	r1, r4
 801057e:	4630      	mov	r0, r6
 8010580:	3501      	adds	r5, #1
 8010582:	f006 fa49 	bl	8016a18 <put_memory>
 8010586:	42af      	cmp	r7, r5
 8010588:	60a4      	str	r4, [r4, #8]
 801058a:	f884 800c 	strb.w	r8, [r4, #12]
 801058e:	f104 041c 	add.w	r4, r4, #28
 8010592:	d1f3      	bne.n	801057c <rmw_uxrce_init_topic_memory+0x20>
 8010594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010598:	4770      	bx	lr
 801059a:	bf00      	nop

0801059c <rmw_uxrce_init_static_input_buffer_memory>:
 801059c:	b1ea      	cbz	r2, 80105da <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 801059e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105a2:	7b05      	ldrb	r5, [r0, #12]
 80105a4:	4606      	mov	r6, r0
 80105a6:	b9b5      	cbnz	r5, 80105d6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80105a8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80105ac:	e9c0 5500 	strd	r5, r5, [r0]
 80105b0:	6083      	str	r3, [r0, #8]
 80105b2:	f240 1301 	movw	r3, #257	; 0x101
 80105b6:	4617      	mov	r7, r2
 80105b8:	8183      	strh	r3, [r0, #12]
 80105ba:	460c      	mov	r4, r1
 80105bc:	46a8      	mov	r8, r5
 80105be:	4621      	mov	r1, r4
 80105c0:	4630      	mov	r0, r6
 80105c2:	3501      	adds	r5, #1
 80105c4:	f006 fa28 	bl	8016a18 <put_memory>
 80105c8:	42af      	cmp	r7, r5
 80105ca:	60a4      	str	r4, [r4, #8]
 80105cc:	f884 800c 	strb.w	r8, [r4, #12]
 80105d0:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 80105d4:	d1f3      	bne.n	80105be <rmw_uxrce_init_static_input_buffer_memory+0x22>
 80105d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105da:	4770      	bx	lr

080105dc <rmw_uxrce_init_init_options_impl_memory>:
 80105dc:	b1e2      	cbz	r2, 8010618 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 80105de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105e2:	7b05      	ldrb	r5, [r0, #12]
 80105e4:	4606      	mov	r6, r0
 80105e6:	b9ad      	cbnz	r5, 8010614 <rmw_uxrce_init_init_options_impl_memory+0x38>
 80105e8:	232c      	movs	r3, #44	; 0x2c
 80105ea:	e9c0 5500 	strd	r5, r5, [r0]
 80105ee:	6083      	str	r3, [r0, #8]
 80105f0:	f240 1301 	movw	r3, #257	; 0x101
 80105f4:	4617      	mov	r7, r2
 80105f6:	8183      	strh	r3, [r0, #12]
 80105f8:	460c      	mov	r4, r1
 80105fa:	46a8      	mov	r8, r5
 80105fc:	4621      	mov	r1, r4
 80105fe:	4630      	mov	r0, r6
 8010600:	3501      	adds	r5, #1
 8010602:	f006 fa09 	bl	8016a18 <put_memory>
 8010606:	42af      	cmp	r7, r5
 8010608:	60a4      	str	r4, [r4, #8]
 801060a:	f884 800c 	strb.w	r8, [r4, #12]
 801060e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8010612:	d1f3      	bne.n	80105fc <rmw_uxrce_init_init_options_impl_memory+0x20>
 8010614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010618:	4770      	bx	lr
 801061a:	bf00      	nop

0801061c <rmw_uxrce_init_wait_set_memory>:
 801061c:	b1e2      	cbz	r2, 8010658 <rmw_uxrce_init_wait_set_memory+0x3c>
 801061e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010622:	7b05      	ldrb	r5, [r0, #12]
 8010624:	4606      	mov	r6, r0
 8010626:	b9ad      	cbnz	r5, 8010654 <rmw_uxrce_init_wait_set_memory+0x38>
 8010628:	231c      	movs	r3, #28
 801062a:	e9c0 5500 	strd	r5, r5, [r0]
 801062e:	6083      	str	r3, [r0, #8]
 8010630:	f240 1301 	movw	r3, #257	; 0x101
 8010634:	4617      	mov	r7, r2
 8010636:	8183      	strh	r3, [r0, #12]
 8010638:	460c      	mov	r4, r1
 801063a:	46a8      	mov	r8, r5
 801063c:	4621      	mov	r1, r4
 801063e:	4630      	mov	r0, r6
 8010640:	3501      	adds	r5, #1
 8010642:	f006 f9e9 	bl	8016a18 <put_memory>
 8010646:	42af      	cmp	r7, r5
 8010648:	60a4      	str	r4, [r4, #8]
 801064a:	f884 800c 	strb.w	r8, [r4, #12]
 801064e:	f104 041c 	add.w	r4, r4, #28
 8010652:	d1f3      	bne.n	801063c <rmw_uxrce_init_wait_set_memory+0x20>
 8010654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010658:	4770      	bx	lr
 801065a:	bf00      	nop

0801065c <rmw_uxrce_init_guard_condition_memory>:
 801065c:	b1e2      	cbz	r2, 8010698 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801065e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010662:	7b05      	ldrb	r5, [r0, #12]
 8010664:	4606      	mov	r6, r0
 8010666:	b9ad      	cbnz	r5, 8010694 <rmw_uxrce_init_guard_condition_memory+0x38>
 8010668:	2320      	movs	r3, #32
 801066a:	e9c0 5500 	strd	r5, r5, [r0]
 801066e:	6083      	str	r3, [r0, #8]
 8010670:	f240 1301 	movw	r3, #257	; 0x101
 8010674:	4617      	mov	r7, r2
 8010676:	8183      	strh	r3, [r0, #12]
 8010678:	460c      	mov	r4, r1
 801067a:	46a8      	mov	r8, r5
 801067c:	4621      	mov	r1, r4
 801067e:	4630      	mov	r0, r6
 8010680:	3501      	adds	r5, #1
 8010682:	f006 f9c9 	bl	8016a18 <put_memory>
 8010686:	42af      	cmp	r7, r5
 8010688:	60a4      	str	r4, [r4, #8]
 801068a:	f884 800c 	strb.w	r8, [r4, #12]
 801068e:	f104 0420 	add.w	r4, r4, #32
 8010692:	d1f3      	bne.n	801067c <rmw_uxrce_init_guard_condition_memory+0x20>
 8010694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010698:	4770      	bx	lr
 801069a:	bf00      	nop

0801069c <rmw_uxrce_fini_session_memory>:
 801069c:	4601      	mov	r1, r0
 801069e:	4801      	ldr	r0, [pc, #4]	; (80106a4 <rmw_uxrce_fini_session_memory+0x8>)
 80106a0:	f006 b9ba 	b.w	8016a18 <put_memory>
 80106a4:	200156bc 	.word	0x200156bc

080106a8 <rmw_uxrce_fini_node_memory>:
 80106a8:	b538      	push	{r3, r4, r5, lr}
 80106aa:	4604      	mov	r4, r0
 80106ac:	6800      	ldr	r0, [r0, #0]
 80106ae:	b128      	cbz	r0, 80106bc <rmw_uxrce_fini_node_memory+0x14>
 80106b0:	4b07      	ldr	r3, [pc, #28]	; (80106d0 <rmw_uxrce_fini_node_memory+0x28>)
 80106b2:	6819      	ldr	r1, [r3, #0]
 80106b4:	f7ef fd8c 	bl	80001d0 <strcmp>
 80106b8:	b940      	cbnz	r0, 80106cc <rmw_uxrce_fini_node_memory+0x24>
 80106ba:	6020      	str	r0, [r4, #0]
 80106bc:	6861      	ldr	r1, [r4, #4]
 80106be:	b129      	cbz	r1, 80106cc <rmw_uxrce_fini_node_memory+0x24>
 80106c0:	2500      	movs	r5, #0
 80106c2:	4804      	ldr	r0, [pc, #16]	; (80106d4 <rmw_uxrce_fini_node_memory+0x2c>)
 80106c4:	610d      	str	r5, [r1, #16]
 80106c6:	f006 f9a7 	bl	8016a18 <put_memory>
 80106ca:	6065      	str	r5, [r4, #4]
 80106cc:	bd38      	pop	{r3, r4, r5, pc}
 80106ce:	bf00      	nop
 80106d0:	0801be7c 	.word	0x0801be7c
 80106d4:	2001568c 	.word	0x2001568c

080106d8 <rmw_uxrce_fini_publisher_memory>:
 80106d8:	b510      	push	{r4, lr}
 80106da:	4604      	mov	r4, r0
 80106dc:	6800      	ldr	r0, [r0, #0]
 80106de:	b128      	cbz	r0, 80106ec <rmw_uxrce_fini_publisher_memory+0x14>
 80106e0:	4b06      	ldr	r3, [pc, #24]	; (80106fc <rmw_uxrce_fini_publisher_memory+0x24>)
 80106e2:	6819      	ldr	r1, [r3, #0]
 80106e4:	f7ef fd74 	bl	80001d0 <strcmp>
 80106e8:	b938      	cbnz	r0, 80106fa <rmw_uxrce_fini_publisher_memory+0x22>
 80106ea:	6020      	str	r0, [r4, #0]
 80106ec:	6861      	ldr	r1, [r4, #4]
 80106ee:	b121      	cbz	r1, 80106fa <rmw_uxrce_fini_publisher_memory+0x22>
 80106f0:	4803      	ldr	r0, [pc, #12]	; (8010700 <rmw_uxrce_fini_publisher_memory+0x28>)
 80106f2:	f006 f991 	bl	8016a18 <put_memory>
 80106f6:	2300      	movs	r3, #0
 80106f8:	6063      	str	r3, [r4, #4]
 80106fa:	bd10      	pop	{r4, pc}
 80106fc:	0801be7c 	.word	0x0801be7c
 8010700:	2001569c 	.word	0x2001569c

08010704 <rmw_uxrce_fini_subscription_memory>:
 8010704:	b510      	push	{r4, lr}
 8010706:	4604      	mov	r4, r0
 8010708:	6800      	ldr	r0, [r0, #0]
 801070a:	b128      	cbz	r0, 8010718 <rmw_uxrce_fini_subscription_memory+0x14>
 801070c:	4b06      	ldr	r3, [pc, #24]	; (8010728 <rmw_uxrce_fini_subscription_memory+0x24>)
 801070e:	6819      	ldr	r1, [r3, #0]
 8010710:	f7ef fd5e 	bl	80001d0 <strcmp>
 8010714:	b938      	cbnz	r0, 8010726 <rmw_uxrce_fini_subscription_memory+0x22>
 8010716:	6020      	str	r0, [r4, #0]
 8010718:	6861      	ldr	r1, [r4, #4]
 801071a:	b121      	cbz	r1, 8010726 <rmw_uxrce_fini_subscription_memory+0x22>
 801071c:	4803      	ldr	r0, [pc, #12]	; (801072c <rmw_uxrce_fini_subscription_memory+0x28>)
 801071e:	f006 f97b 	bl	8016a18 <put_memory>
 8010722:	2300      	movs	r3, #0
 8010724:	6063      	str	r3, [r4, #4]
 8010726:	bd10      	pop	{r4, pc}
 8010728:	0801be7c 	.word	0x0801be7c
 801072c:	200156dc 	.word	0x200156dc

08010730 <rmw_uxrce_fini_service_memory>:
 8010730:	b510      	push	{r4, lr}
 8010732:	4604      	mov	r4, r0
 8010734:	6800      	ldr	r0, [r0, #0]
 8010736:	b128      	cbz	r0, 8010744 <rmw_uxrce_fini_service_memory+0x14>
 8010738:	4b06      	ldr	r3, [pc, #24]	; (8010754 <rmw_uxrce_fini_service_memory+0x24>)
 801073a:	6819      	ldr	r1, [r3, #0]
 801073c:	f7ef fd48 	bl	80001d0 <strcmp>
 8010740:	b938      	cbnz	r0, 8010752 <rmw_uxrce_fini_service_memory+0x22>
 8010742:	6020      	str	r0, [r4, #0]
 8010744:	6861      	ldr	r1, [r4, #4]
 8010746:	b121      	cbz	r1, 8010752 <rmw_uxrce_fini_service_memory+0x22>
 8010748:	4803      	ldr	r0, [pc, #12]	; (8010758 <rmw_uxrce_fini_service_memory+0x28>)
 801074a:	f006 f965 	bl	8016a18 <put_memory>
 801074e:	2300      	movs	r3, #0
 8010750:	6063      	str	r3, [r4, #4]
 8010752:	bd10      	pop	{r4, pc}
 8010754:	0801be7c 	.word	0x0801be7c
 8010758:	200156ac 	.word	0x200156ac

0801075c <rmw_uxrce_fini_client_memory>:
 801075c:	b510      	push	{r4, lr}
 801075e:	4604      	mov	r4, r0
 8010760:	6800      	ldr	r0, [r0, #0]
 8010762:	b128      	cbz	r0, 8010770 <rmw_uxrce_fini_client_memory+0x14>
 8010764:	4b06      	ldr	r3, [pc, #24]	; (8010780 <rmw_uxrce_fini_client_memory+0x24>)
 8010766:	6819      	ldr	r1, [r3, #0]
 8010768:	f7ef fd32 	bl	80001d0 <strcmp>
 801076c:	b938      	cbnz	r0, 801077e <rmw_uxrce_fini_client_memory+0x22>
 801076e:	6020      	str	r0, [r4, #0]
 8010770:	6861      	ldr	r1, [r4, #4]
 8010772:	b121      	cbz	r1, 801077e <rmw_uxrce_fini_client_memory+0x22>
 8010774:	4803      	ldr	r0, [pc, #12]	; (8010784 <rmw_uxrce_fini_client_memory+0x28>)
 8010776:	f006 f94f 	bl	8016a18 <put_memory>
 801077a:	2300      	movs	r3, #0
 801077c:	6063      	str	r3, [r4, #4]
 801077e:	bd10      	pop	{r4, pc}
 8010780:	0801be7c 	.word	0x0801be7c
 8010784:	20010dc0 	.word	0x20010dc0

08010788 <rmw_uxrce_fini_topic_memory>:
 8010788:	b510      	push	{r4, lr}
 801078a:	4604      	mov	r4, r0
 801078c:	4621      	mov	r1, r4
 801078e:	4803      	ldr	r0, [pc, #12]	; (801079c <rmw_uxrce_fini_topic_memory+0x14>)
 8010790:	f006 f942 	bl	8016a18 <put_memory>
 8010794:	2300      	movs	r3, #0
 8010796:	61a3      	str	r3, [r4, #24]
 8010798:	bd10      	pop	{r4, pc}
 801079a:	bf00      	nop
 801079c:	200156ec 	.word	0x200156ec

080107a0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 80107a0:	b082      	sub	sp, #8
 80107a2:	b530      	push	{r4, r5, lr}
 80107a4:	4925      	ldr	r1, [pc, #148]	; (801083c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80107a6:	680d      	ldr	r5, [r1, #0]
 80107a8:	ac03      	add	r4, sp, #12
 80107aa:	e884 000c 	stmia.w	r4, {r2, r3}
 80107ae:	461c      	mov	r4, r3
 80107b0:	2d00      	cmp	r5, #0
 80107b2:	d041      	beq.n	8010838 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 80107b4:	462b      	mov	r3, r5
 80107b6:	2100      	movs	r1, #0
 80107b8:	689a      	ldr	r2, [r3, #8]
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 80107c0:	4290      	cmp	r0, r2
 80107c2:	bf08      	it	eq
 80107c4:	3101      	addeq	r1, #1
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d1f6      	bne.n	80107b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 80107ca:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80107ce:	2b02      	cmp	r3, #2
 80107d0:	d029      	beq.n	8010826 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 80107d2:	d907      	bls.n	80107e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 80107d4:	2b03      	cmp	r3, #3
 80107d6:	d005      	beq.n	80107e4 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 80107d8:	2100      	movs	r1, #0
 80107da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80107de:	4608      	mov	r0, r1
 80107e0:	b002      	add	sp, #8
 80107e2:	4770      	bx	lr
 80107e4:	b314      	cbz	r4, 801082c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 80107e6:	428c      	cmp	r4, r1
 80107e8:	d820      	bhi.n	801082c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 80107ea:	2d00      	cmp	r5, #0
 80107ec:	d0f4      	beq.n	80107d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80107ee:	2100      	movs	r1, #0
 80107f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80107f4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80107f8:	e002      	b.n	8010800 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 80107fa:	686d      	ldr	r5, [r5, #4]
 80107fc:	2d00      	cmp	r5, #0
 80107fe:	d0ec      	beq.n	80107da <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 8010800:	68ab      	ldr	r3, [r5, #8]
 8010802:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 8010806:	4290      	cmp	r0, r2
 8010808:	d1f7      	bne.n	80107fa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801080a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 801080e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8010812:	4562      	cmp	r2, ip
 8010814:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8010818:	eb73 0e04 	sbcs.w	lr, r3, r4
 801081c:	daed      	bge.n	80107fa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 801081e:	4694      	mov	ip, r2
 8010820:	461c      	mov	r4, r3
 8010822:	4629      	mov	r1, r5
 8010824:	e7e9      	b.n	80107fa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 8010826:	b10c      	cbz	r4, 801082c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010828:	428c      	cmp	r4, r1
 801082a:	d9d5      	bls.n	80107d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 801082c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010830:	4802      	ldr	r0, [pc, #8]	; (801083c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8010832:	b002      	add	sp, #8
 8010834:	f006 b8e0 	b.w	80169f8 <get_memory>
 8010838:	4629      	mov	r1, r5
 801083a:	e7c6      	b.n	80107ca <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 801083c:	200156cc 	.word	0x200156cc

08010840 <run_xrce_session>:
 8010840:	b510      	push	{r4, lr}
 8010842:	788c      	ldrb	r4, [r1, #2]
 8010844:	b086      	sub	sp, #24
 8010846:	2c01      	cmp	r4, #1
 8010848:	f8ad 200e 	strh.w	r2, [sp, #14]
 801084c:	d00c      	beq.n	8010868 <run_xrce_session+0x28>
 801084e:	4619      	mov	r1, r3
 8010850:	2301      	movs	r3, #1
 8010852:	9300      	str	r3, [sp, #0]
 8010854:	f10d 020e 	add.w	r2, sp, #14
 8010858:	f10d 0317 	add.w	r3, sp, #23
 801085c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010860:	f002 ff0e 	bl	8013680 <uxr_run_session_until_all_status>
 8010864:	b006      	add	sp, #24
 8010866:	bd10      	pop	{r4, pc}
 8010868:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801086c:	f002 fb5c 	bl	8012f28 <uxr_flash_output_streams>
 8010870:	4620      	mov	r0, r4
 8010872:	b006      	add	sp, #24
 8010874:	bd10      	pop	{r4, pc}
 8010876:	bf00      	nop

08010878 <convert_qos_profile>:
 8010878:	7a4a      	ldrb	r2, [r1, #9]
 801087a:	f891 c008 	ldrb.w	ip, [r1, #8]
 801087e:	2a02      	cmp	r2, #2
 8010880:	bf18      	it	ne
 8010882:	2200      	movne	r2, #0
 8010884:	7002      	strb	r2, [r0, #0]
 8010886:	780a      	ldrb	r2, [r1, #0]
 8010888:	8889      	ldrh	r1, [r1, #4]
 801088a:	8081      	strh	r1, [r0, #4]
 801088c:	f1ac 0c02 	sub.w	ip, ip, #2
 8010890:	f1a2 0202 	sub.w	r2, r2, #2
 8010894:	fabc fc8c 	clz	ip, ip
 8010898:	fab2 f282 	clz	r2, r2
 801089c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80108a0:	0952      	lsrs	r2, r2, #5
 80108a2:	f880 c001 	strb.w	ip, [r0, #1]
 80108a6:	7082      	strb	r2, [r0, #2]
 80108a8:	4770      	bx	lr
 80108aa:	bf00      	nop

080108ac <generate_type_name>:
 80108ac:	b530      	push	{r4, r5, lr}
 80108ae:	2300      	movs	r3, #0
 80108b0:	700b      	strb	r3, [r1, #0]
 80108b2:	6803      	ldr	r3, [r0, #0]
 80108b4:	b087      	sub	sp, #28
 80108b6:	4614      	mov	r4, r2
 80108b8:	b1d3      	cbz	r3, 80108f0 <generate_type_name+0x44>
 80108ba:	4a0f      	ldr	r2, [pc, #60]	; (80108f8 <generate_type_name+0x4c>)
 80108bc:	4615      	mov	r5, r2
 80108be:	9203      	str	r2, [sp, #12]
 80108c0:	9500      	str	r5, [sp, #0]
 80108c2:	6842      	ldr	r2, [r0, #4]
 80108c4:	480d      	ldr	r0, [pc, #52]	; (80108fc <generate_type_name+0x50>)
 80108c6:	9001      	str	r0, [sp, #4]
 80108c8:	4608      	mov	r0, r1
 80108ca:	490d      	ldr	r1, [pc, #52]	; (8010900 <generate_type_name+0x54>)
 80108cc:	9204      	str	r2, [sp, #16]
 80108ce:	9105      	str	r1, [sp, #20]
 80108d0:	9102      	str	r1, [sp, #8]
 80108d2:	4a0c      	ldr	r2, [pc, #48]	; (8010904 <generate_type_name+0x58>)
 80108d4:	4621      	mov	r1, r4
 80108d6:	f009 fbcb 	bl	801a070 <sniprintf>
 80108da:	2800      	cmp	r0, #0
 80108dc:	db05      	blt.n	80108ea <generate_type_name+0x3e>
 80108de:	4284      	cmp	r4, r0
 80108e0:	bfd4      	ite	le
 80108e2:	2000      	movle	r0, #0
 80108e4:	2001      	movgt	r0, #1
 80108e6:	b007      	add	sp, #28
 80108e8:	bd30      	pop	{r4, r5, pc}
 80108ea:	2000      	movs	r0, #0
 80108ec:	b007      	add	sp, #28
 80108ee:	bd30      	pop	{r4, r5, pc}
 80108f0:	4b05      	ldr	r3, [pc, #20]	; (8010908 <generate_type_name+0x5c>)
 80108f2:	4a01      	ldr	r2, [pc, #4]	; (80108f8 <generate_type_name+0x4c>)
 80108f4:	461d      	mov	r5, r3
 80108f6:	e7e2      	b.n	80108be <generate_type_name+0x12>
 80108f8:	0801b488 	.word	0x0801b488
 80108fc:	0801b4a0 	.word	0x0801b4a0
 8010900:	0801b49c 	.word	0x0801b49c
 8010904:	0801b48c 	.word	0x0801b48c
 8010908:	0801c120 	.word	0x0801c120

0801090c <generate_topic_name>:
 801090c:	b510      	push	{r4, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	4614      	mov	r4, r2
 8010912:	9000      	str	r0, [sp, #0]
 8010914:	4b08      	ldr	r3, [pc, #32]	; (8010938 <generate_topic_name+0x2c>)
 8010916:	4a09      	ldr	r2, [pc, #36]	; (801093c <generate_topic_name+0x30>)
 8010918:	4608      	mov	r0, r1
 801091a:	4621      	mov	r1, r4
 801091c:	f009 fba8 	bl	801a070 <sniprintf>
 8010920:	2800      	cmp	r0, #0
 8010922:	db05      	blt.n	8010930 <generate_topic_name+0x24>
 8010924:	4284      	cmp	r4, r0
 8010926:	bfd4      	ite	le
 8010928:	2000      	movle	r0, #0
 801092a:	2001      	movgt	r0, #1
 801092c:	b002      	add	sp, #8
 801092e:	bd10      	pop	{r4, pc}
 8010930:	2000      	movs	r0, #0
 8010932:	b002      	add	sp, #8
 8010934:	bd10      	pop	{r4, pc}
 8010936:	bf00      	nop
 8010938:	0801b4ac 	.word	0x0801b4ac
 801093c:	0801b4a4 	.word	0x0801b4a4

08010940 <is_uxrce_rmw_identifier_valid>:
 8010940:	b510      	push	{r4, lr}
 8010942:	4604      	mov	r4, r0
 8010944:	b140      	cbz	r0, 8010958 <is_uxrce_rmw_identifier_valid+0x18>
 8010946:	f006 f87b 	bl	8016a40 <rmw_get_implementation_identifier>
 801094a:	4601      	mov	r1, r0
 801094c:	4620      	mov	r0, r4
 801094e:	f7ef fc3f 	bl	80001d0 <strcmp>
 8010952:	fab0 f080 	clz	r0, r0
 8010956:	0940      	lsrs	r0, r0, #5
 8010958:	bd10      	pop	{r4, pc}
 801095a:	bf00      	nop

0801095c <get_message_typesupport_handle>:
 801095c:	6883      	ldr	r3, [r0, #8]
 801095e:	4718      	bx	r3

08010960 <get_message_typesupport_handle_function>:
 8010960:	b510      	push	{r4, lr}
 8010962:	4604      	mov	r4, r0
 8010964:	6800      	ldr	r0, [r0, #0]
 8010966:	f7ef fc33 	bl	80001d0 <strcmp>
 801096a:	2800      	cmp	r0, #0
 801096c:	bf0c      	ite	eq
 801096e:	4620      	moveq	r0, r4
 8010970:	2000      	movne	r0, #0
 8010972:	bd10      	pop	{r4, pc}

08010974 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 8010974:	4b04      	ldr	r3, [pc, #16]	; (8010988 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 8010976:	681a      	ldr	r2, [r3, #0]
 8010978:	b10a      	cbz	r2, 801097e <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0xa>
 801097a:	4803      	ldr	r0, [pc, #12]	; (8010988 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 801097c:	4770      	bx	lr
 801097e:	4a03      	ldr	r2, [pc, #12]	; (801098c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x18>)
 8010980:	4801      	ldr	r0, [pc, #4]	; (8010988 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 8010982:	6812      	ldr	r2, [r2, #0]
 8010984:	601a      	str	r2, [r3, #0]
 8010986:	4770      	bx	lr
 8010988:	20000120 	.word	0x20000120
 801098c:	200005ac 	.word	0x200005ac

08010990 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 8010990:	4a02      	ldr	r2, [pc, #8]	; (801099c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0xc>)
 8010992:	4b03      	ldr	r3, [pc, #12]	; (80109a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x10>)
 8010994:	6812      	ldr	r2, [r2, #0]
 8010996:	601a      	str	r2, [r3, #0]
 8010998:	4770      	bx	lr
 801099a:	bf00      	nop
 801099c:	200005ac 	.word	0x200005ac
 80109a0:	20000120 	.word	0x20000120

080109a4 <sensor_msgs__msg__Temperature__rosidl_typesupport_introspection_c__Temperature_init_function>:
 80109a4:	f006 bd42 	b.w	801742c <sensor_msgs__msg__Temperature__init>

080109a8 <sensor_msgs__msg__Temperature__rosidl_typesupport_introspection_c__Temperature_fini_function>:
 80109a8:	f006 bd52 	b.w	8017450 <sensor_msgs__msg__Temperature__fini>

080109ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 80109ac:	b508      	push	{r3, lr}
 80109ae:	f000 f8eb 	bl	8010b88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 80109b2:	4b06      	ldr	r3, [pc, #24]	; (80109cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 80109b4:	4906      	ldr	r1, [pc, #24]	; (80109d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x24>)
 80109b6:	681a      	ldr	r2, [r3, #0]
 80109b8:	60c8      	str	r0, [r1, #12]
 80109ba:	b10a      	cbz	r2, 80109c0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>
 80109bc:	4803      	ldr	r0, [pc, #12]	; (80109cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 80109be:	bd08      	pop	{r3, pc}
 80109c0:	4a04      	ldr	r2, [pc, #16]	; (80109d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x28>)
 80109c2:	4802      	ldr	r0, [pc, #8]	; (80109cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 80109c4:	6812      	ldr	r2, [r2, #0]
 80109c6:	601a      	str	r2, [r3, #0]
 80109c8:	bd08      	pop	{r3, pc}
 80109ca:	bf00      	nop
 80109cc:	200001e0 	.word	0x200001e0
 80109d0:	2000012c 	.word	0x2000012c
 80109d4:	200005b0 	.word	0x200005b0

080109d8 <get_serialized_size_sensor_msgs__msg__Temperature>:
 80109d8:	b538      	push	{r3, r4, r5, lr}
 80109da:	b188      	cbz	r0, 8010a00 <get_serialized_size_sensor_msgs__msg__Temperature+0x28>
 80109dc:	460d      	mov	r5, r1
 80109de:	f000 f9a9 	bl	8010d34 <get_serialized_size_std_msgs__msg__Header>
 80109e2:	182c      	adds	r4, r5, r0
 80109e4:	2108      	movs	r1, #8
 80109e6:	4620      	mov	r0, r4
 80109e8:	f001 ff32 	bl	8012850 <ucdr_alignment>
 80109ec:	3008      	adds	r0, #8
 80109ee:	4404      	add	r4, r0
 80109f0:	2108      	movs	r1, #8
 80109f2:	4620      	mov	r0, r4
 80109f4:	f001 ff2c 	bl	8012850 <ucdr_alignment>
 80109f8:	f1c5 0508 	rsb	r5, r5, #8
 80109fc:	4428      	add	r0, r5
 80109fe:	4420      	add	r0, r4
 8010a00:	bd38      	pop	{r3, r4, r5, pc}
 8010a02:	bf00      	nop

08010a04 <_Temperature__cdr_deserialize>:
 8010a04:	b538      	push	{r3, r4, r5, lr}
 8010a06:	460c      	mov	r4, r1
 8010a08:	b199      	cbz	r1, 8010a32 <_Temperature__cdr_deserialize+0x2e>
 8010a0a:	4605      	mov	r5, r0
 8010a0c:	f000 fa14 	bl	8010e38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010a10:	6843      	ldr	r3, [r0, #4]
 8010a12:	4621      	mov	r1, r4
 8010a14:	68db      	ldr	r3, [r3, #12]
 8010a16:	4628      	mov	r0, r5
 8010a18:	4798      	blx	r3
 8010a1a:	f104 0118 	add.w	r1, r4, #24
 8010a1e:	4628      	mov	r0, r5
 8010a20:	f001 fdf8 	bl	8012614 <ucdr_deserialize_double>
 8010a24:	f104 0120 	add.w	r1, r4, #32
 8010a28:	4628      	mov	r0, r5
 8010a2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a2e:	f001 bdf1 	b.w	8012614 <ucdr_deserialize_double>
 8010a32:	4608      	mov	r0, r1
 8010a34:	bd38      	pop	{r3, r4, r5, pc}
 8010a36:	bf00      	nop

08010a38 <_Temperature__cdr_serialize>:
 8010a38:	b1a8      	cbz	r0, 8010a66 <_Temperature__cdr_serialize+0x2e>
 8010a3a:	b538      	push	{r3, r4, r5, lr}
 8010a3c:	460d      	mov	r5, r1
 8010a3e:	4604      	mov	r4, r0
 8010a40:	f000 f9fa 	bl	8010e38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010a44:	6843      	ldr	r3, [r0, #4]
 8010a46:	4629      	mov	r1, r5
 8010a48:	689b      	ldr	r3, [r3, #8]
 8010a4a:	4620      	mov	r0, r4
 8010a4c:	4798      	blx	r3
 8010a4e:	ed94 0b06 	vldr	d0, [r4, #24]
 8010a52:	4628      	mov	r0, r5
 8010a54:	f001 fd0e 	bl	8012474 <ucdr_serialize_double>
 8010a58:	ed94 0b08 	vldr	d0, [r4, #32]
 8010a5c:	4628      	mov	r0, r5
 8010a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a62:	f001 bd07 	b.w	8012474 <ucdr_serialize_double>
 8010a66:	4770      	bx	lr

08010a68 <_Temperature__get_serialized_size>:
 8010a68:	b188      	cbz	r0, 8010a8e <_Temperature__get_serialized_size+0x26>
 8010a6a:	b510      	push	{r4, lr}
 8010a6c:	2100      	movs	r1, #0
 8010a6e:	f000 f961 	bl	8010d34 <get_serialized_size_std_msgs__msg__Header>
 8010a72:	2108      	movs	r1, #8
 8010a74:	4604      	mov	r4, r0
 8010a76:	f001 feeb 	bl	8012850 <ucdr_alignment>
 8010a7a:	4420      	add	r0, r4
 8010a7c:	f100 0408 	add.w	r4, r0, #8
 8010a80:	2108      	movs	r1, #8
 8010a82:	4620      	mov	r0, r4
 8010a84:	f001 fee4 	bl	8012850 <ucdr_alignment>
 8010a88:	3008      	adds	r0, #8
 8010a8a:	4420      	add	r0, r4
 8010a8c:	bd10      	pop	{r4, pc}
 8010a8e:	4770      	bx	lr

08010a90 <_Temperature__max_serialized_size>:
 8010a90:	b510      	push	{r4, lr}
 8010a92:	b082      	sub	sp, #8
 8010a94:	2301      	movs	r3, #1
 8010a96:	2100      	movs	r1, #0
 8010a98:	f10d 0007 	add.w	r0, sp, #7
 8010a9c:	f88d 3007 	strb.w	r3, [sp, #7]
 8010aa0:	f000 f9c0 	bl	8010e24 <max_serialized_size_std_msgs__msg__Header>
 8010aa4:	2108      	movs	r1, #8
 8010aa6:	4604      	mov	r4, r0
 8010aa8:	f001 fed2 	bl	8012850 <ucdr_alignment>
 8010aac:	4420      	add	r0, r4
 8010aae:	f100 0408 	add.w	r4, r0, #8
 8010ab2:	2108      	movs	r1, #8
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	f001 fecb 	bl	8012850 <ucdr_alignment>
 8010aba:	3008      	adds	r0, #8
 8010abc:	4420      	add	r0, r4
 8010abe:	b002      	add	sp, #8
 8010ac0:	bd10      	pop	{r4, pc}
 8010ac2:	bf00      	nop

08010ac4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 8010ac4:	4800      	ldr	r0, [pc, #0]	; (8010ac8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x4>)
 8010ac6:	4770      	bx	lr
 8010ac8:	200001ec 	.word	0x200001ec

08010acc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 8010acc:	4b04      	ldr	r3, [pc, #16]	; (8010ae0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8010ace:	681a      	ldr	r2, [r3, #0]
 8010ad0:	b10a      	cbz	r2, 8010ad6 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0xa>
 8010ad2:	4803      	ldr	r0, [pc, #12]	; (8010ae0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8010ad4:	4770      	bx	lr
 8010ad6:	4a03      	ldr	r2, [pc, #12]	; (8010ae4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x18>)
 8010ad8:	4801      	ldr	r0, [pc, #4]	; (8010ae0 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8010ada:	6812      	ldr	r2, [r2, #0]
 8010adc:	601a      	str	r2, [r3, #0]
 8010ade:	4770      	bx	lr
 8010ae0:	2000021c 	.word	0x2000021c
 8010ae4:	200005ac 	.word	0x200005ac

08010ae8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 8010ae8:	4a02      	ldr	r2, [pc, #8]	; (8010af4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0xc>)
 8010aea:	4b03      	ldr	r3, [pc, #12]	; (8010af8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x10>)
 8010aec:	6812      	ldr	r2, [r2, #0]
 8010aee:	601a      	str	r2, [r3, #0]
 8010af0:	4770      	bx	lr
 8010af2:	bf00      	nop
 8010af4:	200005ac 	.word	0x200005ac
 8010af8:	2000021c 	.word	0x2000021c

08010afc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010afc:	4b04      	ldr	r3, [pc, #16]	; (8010b10 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010afe:	681a      	ldr	r2, [r3, #0]
 8010b00:	b10a      	cbz	r2, 8010b06 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8010b02:	4803      	ldr	r0, [pc, #12]	; (8010b10 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010b04:	4770      	bx	lr
 8010b06:	4a03      	ldr	r2, [pc, #12]	; (8010b14 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8010b08:	4801      	ldr	r0, [pc, #4]	; (8010b10 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010b0a:	6812      	ldr	r2, [r2, #0]
 8010b0c:	601a      	str	r2, [r3, #0]
 8010b0e:	4770      	bx	lr
 8010b10:	20000230 	.word	0x20000230
 8010b14:	200005ac 	.word	0x200005ac

08010b18 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010b18:	4a02      	ldr	r2, [pc, #8]	; (8010b24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8010b1a:	4b03      	ldr	r3, [pc, #12]	; (8010b28 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8010b1c:	6812      	ldr	r2, [r2, #0]
 8010b1e:	601a      	str	r2, [r3, #0]
 8010b20:	4770      	bx	lr
 8010b22:	bf00      	nop
 8010b24:	200005ac 	.word	0x200005ac
 8010b28:	20000230 	.word	0x20000230

08010b2c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 8010b2c:	4b04      	ldr	r3, [pc, #16]	; (8010b40 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8010b2e:	681a      	ldr	r2, [r3, #0]
 8010b30:	b10a      	cbz	r2, 8010b36 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0xa>
 8010b32:	4803      	ldr	r0, [pc, #12]	; (8010b40 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8010b34:	4770      	bx	lr
 8010b36:	4a03      	ldr	r2, [pc, #12]	; (8010b44 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x18>)
 8010b38:	4801      	ldr	r0, [pc, #4]	; (8010b40 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8010b3a:	6812      	ldr	r2, [r2, #0]
 8010b3c:	601a      	str	r2, [r3, #0]
 8010b3e:	4770      	bx	lr
 8010b40:	20000244 	.word	0x20000244
 8010b44:	200005ac 	.word	0x200005ac

08010b48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 8010b48:	4a02      	ldr	r2, [pc, #8]	; (8010b54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0xc>)
 8010b4a:	4b03      	ldr	r3, [pc, #12]	; (8010b58 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x10>)
 8010b4c:	6812      	ldr	r2, [r2, #0]
 8010b4e:	601a      	str	r2, [r3, #0]
 8010b50:	4770      	bx	lr
 8010b52:	bf00      	nop
 8010b54:	200005ac 	.word	0x200005ac
 8010b58:	20000244 	.word	0x20000244

08010b5c <std_msgs__msg__ColorRGBA__rosidl_typesupport_introspection_c__ColorRGBA_init_function>:
 8010b5c:	f006 bc7c 	b.w	8017458 <std_msgs__msg__ColorRGBA__init>

08010b60 <std_msgs__msg__ColorRGBA__rosidl_typesupport_introspection_c__ColorRGBA_fini_function>:
 8010b60:	f006 bc7e 	b.w	8017460 <std_msgs__msg__ColorRGBA__fini>

08010b64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 8010b64:	4b04      	ldr	r3, [pc, #16]	; (8010b78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	b10a      	cbz	r2, 8010b6e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0xa>
 8010b6a:	4803      	ldr	r0, [pc, #12]	; (8010b78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8010b6c:	4770      	bx	lr
 8010b6e:	4a03      	ldr	r2, [pc, #12]	; (8010b7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x18>)
 8010b70:	4801      	ldr	r0, [pc, #4]	; (8010b78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8010b72:	6812      	ldr	r2, [r2, #0]
 8010b74:	601a      	str	r2, [r3, #0]
 8010b76:	4770      	bx	lr
 8010b78:	20000340 	.word	0x20000340
 8010b7c:	200005b0 	.word	0x200005b0

08010b80 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8010b80:	f006 bc70 	b.w	8017464 <std_msgs__msg__Header__init>

08010b84 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 8010b84:	f006 bc92 	b.w	80174ac <std_msgs__msg__Header__fini>

08010b88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8010b88:	b508      	push	{r3, lr}
 8010b8a:	f000 f9b9 	bl	8010f00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010b8e:	4b06      	ldr	r3, [pc, #24]	; (8010ba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010b90:	4906      	ldr	r1, [pc, #24]	; (8010bac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 8010b92:	681a      	ldr	r2, [r3, #0]
 8010b94:	60c8      	str	r0, [r1, #12]
 8010b96:	b10a      	cbz	r2, 8010b9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8010b98:	4803      	ldr	r0, [pc, #12]	; (8010ba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010b9a:	bd08      	pop	{r3, pc}
 8010b9c:	4a04      	ldr	r2, [pc, #16]	; (8010bb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8010b9e:	4802      	ldr	r0, [pc, #8]	; (8010ba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8010ba0:	6812      	ldr	r2, [r2, #0]
 8010ba2:	601a      	str	r2, [r3, #0]
 8010ba4:	bd08      	pop	{r3, pc}
 8010ba6:	bf00      	nop
 8010ba8:	200003c4 	.word	0x200003c4
 8010bac:	2000034c 	.word	0x2000034c
 8010bb0:	200005b0 	.word	0x200005b0

08010bb4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 8010bb4:	f006 bc86 	b.w	80174c4 <std_msgs__msg__Int32__init>

08010bb8 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 8010bb8:	f006 bc88 	b.w	80174cc <std_msgs__msg__Int32__fini>

08010bbc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010bbc:	4b04      	ldr	r3, [pc, #16]	; (8010bd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010bbe:	681a      	ldr	r2, [r3, #0]
 8010bc0:	b10a      	cbz	r2, 8010bc6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 8010bc2:	4803      	ldr	r0, [pc, #12]	; (8010bd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010bc4:	4770      	bx	lr
 8010bc6:	4a03      	ldr	r2, [pc, #12]	; (8010bd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 8010bc8:	4801      	ldr	r0, [pc, #4]	; (8010bd0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 8010bca:	6812      	ldr	r2, [r2, #0]
 8010bcc:	601a      	str	r2, [r3, #0]
 8010bce:	4770      	bx	lr
 8010bd0:	2000040c 	.word	0x2000040c
 8010bd4:	200005b0 	.word	0x200005b0

08010bd8 <std_msgs__msg__Int64__rosidl_typesupport_introspection_c__Int64_init_function>:
 8010bd8:	f006 bc7a 	b.w	80174d0 <std_msgs__msg__Int64__init>

08010bdc <std_msgs__msg__Int64__rosidl_typesupport_introspection_c__Int64_fini_function>:
 8010bdc:	f006 bc7c 	b.w	80174d8 <std_msgs__msg__Int64__fini>

08010be0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 8010be0:	4b04      	ldr	r3, [pc, #16]	; (8010bf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8010be2:	681a      	ldr	r2, [r3, #0]
 8010be4:	b10a      	cbz	r2, 8010bea <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0xa>
 8010be6:	4803      	ldr	r0, [pc, #12]	; (8010bf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8010be8:	4770      	bx	lr
 8010bea:	4a03      	ldr	r2, [pc, #12]	; (8010bf8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x18>)
 8010bec:	4801      	ldr	r0, [pc, #4]	; (8010bf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8010bee:	6812      	ldr	r2, [r2, #0]
 8010bf0:	601a      	str	r2, [r3, #0]
 8010bf2:	4770      	bx	lr
 8010bf4:	20000454 	.word	0x20000454
 8010bf8:	200005b0 	.word	0x200005b0

08010bfc <get_serialized_size_std_msgs__msg__ColorRGBA>:
 8010bfc:	b1e0      	cbz	r0, 8010c38 <get_serialized_size_std_msgs__msg__ColorRGBA+0x3c>
 8010bfe:	b570      	push	{r4, r5, r6, lr}
 8010c00:	460d      	mov	r5, r1
 8010c02:	4628      	mov	r0, r5
 8010c04:	2104      	movs	r1, #4
 8010c06:	f001 fe23 	bl	8012850 <ucdr_alignment>
 8010c0a:	1d2b      	adds	r3, r5, #4
 8010c0c:	181e      	adds	r6, r3, r0
 8010c0e:	2104      	movs	r1, #4
 8010c10:	4630      	mov	r0, r6
 8010c12:	f001 fe1d 	bl	8012850 <ucdr_alignment>
 8010c16:	1d04      	adds	r4, r0, #4
 8010c18:	4434      	add	r4, r6
 8010c1a:	2104      	movs	r1, #4
 8010c1c:	4620      	mov	r0, r4
 8010c1e:	f001 fe17 	bl	8012850 <ucdr_alignment>
 8010c22:	3004      	adds	r0, #4
 8010c24:	4404      	add	r4, r0
 8010c26:	2104      	movs	r1, #4
 8010c28:	4620      	mov	r0, r4
 8010c2a:	f001 fe11 	bl	8012850 <ucdr_alignment>
 8010c2e:	f1c5 0504 	rsb	r5, r5, #4
 8010c32:	4428      	add	r0, r5
 8010c34:	4420      	add	r0, r4
 8010c36:	bd70      	pop	{r4, r5, r6, pc}
 8010c38:	4770      	bx	lr
 8010c3a:	bf00      	nop

08010c3c <_ColorRGBA__cdr_deserialize>:
 8010c3c:	b538      	push	{r3, r4, r5, lr}
 8010c3e:	460c      	mov	r4, r1
 8010c40:	b191      	cbz	r1, 8010c68 <_ColorRGBA__cdr_deserialize+0x2c>
 8010c42:	4605      	mov	r5, r0
 8010c44:	f001 fb86 	bl	8012354 <ucdr_deserialize_float>
 8010c48:	1d21      	adds	r1, r4, #4
 8010c4a:	4628      	mov	r0, r5
 8010c4c:	f001 fb82 	bl	8012354 <ucdr_deserialize_float>
 8010c50:	f104 0108 	add.w	r1, r4, #8
 8010c54:	4628      	mov	r0, r5
 8010c56:	f001 fb7d 	bl	8012354 <ucdr_deserialize_float>
 8010c5a:	f104 010c 	add.w	r1, r4, #12
 8010c5e:	4628      	mov	r0, r5
 8010c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c64:	f001 bb76 	b.w	8012354 <ucdr_deserialize_float>
 8010c68:	4608      	mov	r0, r1
 8010c6a:	bd38      	pop	{r3, r4, r5, pc}

08010c6c <_ColorRGBA__cdr_serialize>:
 8010c6c:	b1c0      	cbz	r0, 8010ca0 <_ColorRGBA__cdr_serialize+0x34>
 8010c6e:	b538      	push	{r3, r4, r5, lr}
 8010c70:	ed90 0a00 	vldr	s0, [r0]
 8010c74:	460d      	mov	r5, r1
 8010c76:	4604      	mov	r4, r0
 8010c78:	4608      	mov	r0, r1
 8010c7a:	f001 fad3 	bl	8012224 <ucdr_serialize_float>
 8010c7e:	ed94 0a01 	vldr	s0, [r4, #4]
 8010c82:	4628      	mov	r0, r5
 8010c84:	f001 face 	bl	8012224 <ucdr_serialize_float>
 8010c88:	ed94 0a02 	vldr	s0, [r4, #8]
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	f001 fac9 	bl	8012224 <ucdr_serialize_float>
 8010c92:	ed94 0a03 	vldr	s0, [r4, #12]
 8010c96:	4628      	mov	r0, r5
 8010c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c9c:	f001 bac2 	b.w	8012224 <ucdr_serialize_float>
 8010ca0:	4770      	bx	lr
 8010ca2:	bf00      	nop

08010ca4 <_ColorRGBA__get_serialized_size>:
 8010ca4:	b1c0      	cbz	r0, 8010cd8 <_ColorRGBA__get_serialized_size+0x34>
 8010ca6:	b538      	push	{r3, r4, r5, lr}
 8010ca8:	2104      	movs	r1, #4
 8010caa:	2000      	movs	r0, #0
 8010cac:	f001 fdd0 	bl	8012850 <ucdr_alignment>
 8010cb0:	1d05      	adds	r5, r0, #4
 8010cb2:	2104      	movs	r1, #4
 8010cb4:	4628      	mov	r0, r5
 8010cb6:	f001 fdcb 	bl	8012850 <ucdr_alignment>
 8010cba:	1d04      	adds	r4, r0, #4
 8010cbc:	442c      	add	r4, r5
 8010cbe:	2104      	movs	r1, #4
 8010cc0:	4620      	mov	r0, r4
 8010cc2:	f001 fdc5 	bl	8012850 <ucdr_alignment>
 8010cc6:	3004      	adds	r0, #4
 8010cc8:	4404      	add	r4, r0
 8010cca:	2104      	movs	r1, #4
 8010ccc:	4620      	mov	r0, r4
 8010cce:	f001 fdbf 	bl	8012850 <ucdr_alignment>
 8010cd2:	3004      	adds	r0, #4
 8010cd4:	4420      	add	r0, r4
 8010cd6:	bd38      	pop	{r3, r4, r5, pc}
 8010cd8:	4770      	bx	lr
 8010cda:	bf00      	nop

08010cdc <_ColorRGBA__max_serialized_size>:
 8010cdc:	b538      	push	{r3, r4, r5, lr}
 8010cde:	2104      	movs	r1, #4
 8010ce0:	2000      	movs	r0, #0
 8010ce2:	f001 fdb5 	bl	8012850 <ucdr_alignment>
 8010ce6:	1d05      	adds	r5, r0, #4
 8010ce8:	2104      	movs	r1, #4
 8010cea:	4628      	mov	r0, r5
 8010cec:	f001 fdb0 	bl	8012850 <ucdr_alignment>
 8010cf0:	1d04      	adds	r4, r0, #4
 8010cf2:	442c      	add	r4, r5
 8010cf4:	2104      	movs	r1, #4
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	f001 fdaa 	bl	8012850 <ucdr_alignment>
 8010cfc:	3004      	adds	r0, #4
 8010cfe:	4404      	add	r4, r0
 8010d00:	2104      	movs	r1, #4
 8010d02:	4620      	mov	r0, r4
 8010d04:	f001 fda4 	bl	8012850 <ucdr_alignment>
 8010d08:	3004      	adds	r0, #4
 8010d0a:	4420      	add	r0, r4
 8010d0c:	bd38      	pop	{r3, r4, r5, pc}
 8010d0e:	bf00      	nop

08010d10 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 8010d10:	4800      	ldr	r0, [pc, #0]	; (8010d14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x4>)
 8010d12:	4770      	bx	lr
 8010d14:	20000460 	.word	0x20000460

08010d18 <_Header__max_serialized_size>:
 8010d18:	b500      	push	{lr}
 8010d1a:	b083      	sub	sp, #12
 8010d1c:	2301      	movs	r3, #1
 8010d1e:	2100      	movs	r1, #0
 8010d20:	f10d 0007 	add.w	r0, sp, #7
 8010d24:	f88d 3007 	strb.w	r3, [sp, #7]
 8010d28:	f000 f948 	bl	8010fbc <max_serialized_size_builtin_interfaces__msg__Time>
 8010d2c:	b003      	add	sp, #12
 8010d2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d32:	bf00      	nop

08010d34 <get_serialized_size_std_msgs__msg__Header>:
 8010d34:	b570      	push	{r4, r5, r6, lr}
 8010d36:	4605      	mov	r5, r0
 8010d38:	b168      	cbz	r0, 8010d56 <get_serialized_size_std_msgs__msg__Header+0x22>
 8010d3a:	460c      	mov	r4, r1
 8010d3c:	f000 f8ee 	bl	8010f1c <get_serialized_size_builtin_interfaces__msg__Time>
 8010d40:	1826      	adds	r6, r4, r0
 8010d42:	2104      	movs	r1, #4
 8010d44:	4630      	mov	r0, r6
 8010d46:	f001 fd83 	bl	8012850 <ucdr_alignment>
 8010d4a:	68e9      	ldr	r1, [r5, #12]
 8010d4c:	f1c4 0405 	rsb	r4, r4, #5
 8010d50:	440c      	add	r4, r1
 8010d52:	4404      	add	r4, r0
 8010d54:	19a0      	adds	r0, r4, r6
 8010d56:	bd70      	pop	{r4, r5, r6, pc}

08010d58 <_Header__cdr_deserialize>:
 8010d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d5a:	460c      	mov	r4, r1
 8010d5c:	b083      	sub	sp, #12
 8010d5e:	b1e1      	cbz	r1, 8010d9a <_Header__cdr_deserialize+0x42>
 8010d60:	4606      	mov	r6, r0
 8010d62:	f000 f93f 	bl	8010fe4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010d66:	6843      	ldr	r3, [r0, #4]
 8010d68:	4621      	mov	r1, r4
 8010d6a:	68db      	ldr	r3, [r3, #12]
 8010d6c:	4630      	mov	r0, r6
 8010d6e:	4798      	blx	r3
 8010d70:	6927      	ldr	r7, [r4, #16]
 8010d72:	68a1      	ldr	r1, [r4, #8]
 8010d74:	ab01      	add	r3, sp, #4
 8010d76:	463a      	mov	r2, r7
 8010d78:	4630      	mov	r0, r6
 8010d7a:	f001 fde7 	bl	801294c <ucdr_deserialize_sequence_char>
 8010d7e:	9b01      	ldr	r3, [sp, #4]
 8010d80:	4605      	mov	r5, r0
 8010d82:	b920      	cbnz	r0, 8010d8e <_Header__cdr_deserialize+0x36>
 8010d84:	429f      	cmp	r7, r3
 8010d86:	d30c      	bcc.n	8010da2 <_Header__cdr_deserialize+0x4a>
 8010d88:	4628      	mov	r0, r5
 8010d8a:	b003      	add	sp, #12
 8010d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d8e:	b103      	cbz	r3, 8010d92 <_Header__cdr_deserialize+0x3a>
 8010d90:	3b01      	subs	r3, #1
 8010d92:	4628      	mov	r0, r5
 8010d94:	60e3      	str	r3, [r4, #12]
 8010d96:	b003      	add	sp, #12
 8010d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d9a:	460d      	mov	r5, r1
 8010d9c:	4628      	mov	r0, r5
 8010d9e:	b003      	add	sp, #12
 8010da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010da2:	2101      	movs	r1, #1
 8010da4:	75b0      	strb	r0, [r6, #22]
 8010da6:	7571      	strb	r1, [r6, #21]
 8010da8:	4630      	mov	r0, r6
 8010daa:	60e5      	str	r5, [r4, #12]
 8010dac:	f001 fd66 	bl	801287c <ucdr_align_to>
 8010db0:	4630      	mov	r0, r6
 8010db2:	9901      	ldr	r1, [sp, #4]
 8010db4:	f001 fd98 	bl	80128e8 <ucdr_advance_buffer>
 8010db8:	4628      	mov	r0, r5
 8010dba:	b003      	add	sp, #12
 8010dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dbe:	bf00      	nop

08010dc0 <_Header__cdr_serialize>:
 8010dc0:	b1f8      	cbz	r0, 8010e02 <_Header__cdr_serialize+0x42>
 8010dc2:	b570      	push	{r4, r5, r6, lr}
 8010dc4:	4604      	mov	r4, r0
 8010dc6:	460d      	mov	r5, r1
 8010dc8:	f000 f90c 	bl	8010fe4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8010dcc:	6843      	ldr	r3, [r0, #4]
 8010dce:	4629      	mov	r1, r5
 8010dd0:	689b      	ldr	r3, [r3, #8]
 8010dd2:	4620      	mov	r0, r4
 8010dd4:	4798      	blx	r3
 8010dd6:	68a6      	ldr	r6, [r4, #8]
 8010dd8:	b156      	cbz	r6, 8010df0 <_Header__cdr_serialize+0x30>
 8010dda:	4630      	mov	r0, r6
 8010ddc:	f7ef fa02 	bl	80001e4 <strlen>
 8010de0:	4631      	mov	r1, r6
 8010de2:	60e0      	str	r0, [r4, #12]
 8010de4:	1c42      	adds	r2, r0, #1
 8010de6:	4628      	mov	r0, r5
 8010de8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010dec:	f001 bd9c 	b.w	8012928 <ucdr_serialize_sequence_char>
 8010df0:	4630      	mov	r0, r6
 8010df2:	60e0      	str	r0, [r4, #12]
 8010df4:	4632      	mov	r2, r6
 8010df6:	4631      	mov	r1, r6
 8010df8:	4628      	mov	r0, r5
 8010dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010dfe:	f001 bd93 	b.w	8012928 <ucdr_serialize_sequence_char>
 8010e02:	4770      	bx	lr

08010e04 <_Header__get_serialized_size>:
 8010e04:	b538      	push	{r3, r4, r5, lr}
 8010e06:	4604      	mov	r4, r0
 8010e08:	b150      	cbz	r0, 8010e20 <_Header__get_serialized_size+0x1c>
 8010e0a:	2100      	movs	r1, #0
 8010e0c:	f000 f886 	bl	8010f1c <get_serialized_size_builtin_interfaces__msg__Time>
 8010e10:	2104      	movs	r1, #4
 8010e12:	4605      	mov	r5, r0
 8010e14:	f001 fd1c 	bl	8012850 <ucdr_alignment>
 8010e18:	68e2      	ldr	r2, [r4, #12]
 8010e1a:	3205      	adds	r2, #5
 8010e1c:	1953      	adds	r3, r2, r5
 8010e1e:	4418      	add	r0, r3
 8010e20:	bd38      	pop	{r3, r4, r5, pc}
 8010e22:	bf00      	nop

08010e24 <max_serialized_size_std_msgs__msg__Header>:
 8010e24:	b510      	push	{r4, lr}
 8010e26:	2301      	movs	r3, #1
 8010e28:	4604      	mov	r4, r0
 8010e2a:	7003      	strb	r3, [r0, #0]
 8010e2c:	f000 f8c6 	bl	8010fbc <max_serialized_size_builtin_interfaces__msg__Time>
 8010e30:	2300      	movs	r3, #0
 8010e32:	7023      	strb	r3, [r4, #0]
 8010e34:	bd10      	pop	{r4, pc}
 8010e36:	bf00      	nop

08010e38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8010e38:	4800      	ldr	r0, [pc, #0]	; (8010e3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8010e3a:	4770      	bx	lr
 8010e3c:	20000488 	.word	0x20000488

08010e40 <_Int32__max_serialized_size>:
 8010e40:	b508      	push	{r3, lr}
 8010e42:	2104      	movs	r1, #4
 8010e44:	2000      	movs	r0, #0
 8010e46:	f001 fd03 	bl	8012850 <ucdr_alignment>
 8010e4a:	3004      	adds	r0, #4
 8010e4c:	bd08      	pop	{r3, pc}
 8010e4e:	bf00      	nop

08010e50 <_Int32__cdr_deserialize>:
 8010e50:	b109      	cbz	r1, 8010e56 <_Int32__cdr_deserialize+0x6>
 8010e52:	f000 bfc1 	b.w	8011dd8 <ucdr_deserialize_int32_t>
 8010e56:	4608      	mov	r0, r1
 8010e58:	4770      	bx	lr
 8010e5a:	bf00      	nop

08010e5c <get_serialized_size_std_msgs__msg__Int32>:
 8010e5c:	b138      	cbz	r0, 8010e6e <get_serialized_size_std_msgs__msg__Int32+0x12>
 8010e5e:	b508      	push	{r3, lr}
 8010e60:	460b      	mov	r3, r1
 8010e62:	4618      	mov	r0, r3
 8010e64:	2104      	movs	r1, #4
 8010e66:	f001 fcf3 	bl	8012850 <ucdr_alignment>
 8010e6a:	3004      	adds	r0, #4
 8010e6c:	bd08      	pop	{r3, pc}
 8010e6e:	4770      	bx	lr

08010e70 <_Int32__cdr_serialize>:
 8010e70:	460a      	mov	r2, r1
 8010e72:	b118      	cbz	r0, 8010e7c <_Int32__cdr_serialize+0xc>
 8010e74:	6801      	ldr	r1, [r0, #0]
 8010e76:	4610      	mov	r0, r2
 8010e78:	f000 bf16 	b.w	8011ca8 <ucdr_serialize_int32_t>
 8010e7c:	4770      	bx	lr
 8010e7e:	bf00      	nop

08010e80 <_Int32__get_serialized_size>:
 8010e80:	b130      	cbz	r0, 8010e90 <_Int32__get_serialized_size+0x10>
 8010e82:	b508      	push	{r3, lr}
 8010e84:	2104      	movs	r1, #4
 8010e86:	2000      	movs	r0, #0
 8010e88:	f001 fce2 	bl	8012850 <ucdr_alignment>
 8010e8c:	3004      	adds	r0, #4
 8010e8e:	bd08      	pop	{r3, pc}
 8010e90:	4770      	bx	lr
 8010e92:	bf00      	nop

08010e94 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8010e94:	4800      	ldr	r0, [pc, #0]	; (8010e98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 8010e96:	4770      	bx	lr
 8010e98:	200004b0 	.word	0x200004b0

08010e9c <_Int64__max_serialized_size>:
 8010e9c:	b508      	push	{r3, lr}
 8010e9e:	2108      	movs	r1, #8
 8010ea0:	2000      	movs	r0, #0
 8010ea2:	f001 fcd5 	bl	8012850 <ucdr_alignment>
 8010ea6:	3008      	adds	r0, #8
 8010ea8:	bd08      	pop	{r3, pc}
 8010eaa:	bf00      	nop

08010eac <_Int64__cdr_deserialize>:
 8010eac:	b109      	cbz	r1, 8010eb2 <_Int64__cdr_deserialize+0x6>
 8010eae:	f001 b8f3 	b.w	8012098 <ucdr_deserialize_int64_t>
 8010eb2:	4608      	mov	r0, r1
 8010eb4:	4770      	bx	lr
 8010eb6:	bf00      	nop

08010eb8 <_Int64__get_serialized_size>:
 8010eb8:	b130      	cbz	r0, 8010ec8 <_Int64__get_serialized_size+0x10>
 8010eba:	b508      	push	{r3, lr}
 8010ebc:	2108      	movs	r1, #8
 8010ebe:	2000      	movs	r0, #0
 8010ec0:	f001 fcc6 	bl	8012850 <ucdr_alignment>
 8010ec4:	3008      	adds	r0, #8
 8010ec6:	bd08      	pop	{r3, pc}
 8010ec8:	4770      	bx	lr
 8010eca:	bf00      	nop

08010ecc <_Int64__cdr_serialize>:
 8010ecc:	b120      	cbz	r0, 8010ed8 <_Int64__cdr_serialize+0xc>
 8010ece:	e9d0 2300 	ldrd	r2, r3, [r0]
 8010ed2:	4608      	mov	r0, r1
 8010ed4:	f001 b810 	b.w	8011ef8 <ucdr_serialize_int64_t>
 8010ed8:	4770      	bx	lr
 8010eda:	bf00      	nop

08010edc <get_serialized_size_std_msgs__msg__Int64>:
 8010edc:	b138      	cbz	r0, 8010eee <get_serialized_size_std_msgs__msg__Int64+0x12>
 8010ede:	b508      	push	{r3, lr}
 8010ee0:	460b      	mov	r3, r1
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	2108      	movs	r1, #8
 8010ee6:	f001 fcb3 	bl	8012850 <ucdr_alignment>
 8010eea:	3008      	adds	r0, #8
 8010eec:	bd08      	pop	{r3, pc}
 8010eee:	4770      	bx	lr

08010ef0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 8010ef0:	4800      	ldr	r0, [pc, #0]	; (8010ef4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int64+0x4>)
 8010ef2:	4770      	bx	lr
 8010ef4:	200004d8 	.word	0x200004d8

08010ef8 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 8010ef8:	f006 baf0 	b.w	80174dc <builtin_interfaces__msg__Time__init>

08010efc <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 8010efc:	f006 baf2 	b.w	80174e4 <builtin_interfaces__msg__Time__fini>

08010f00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8010f00:	4b04      	ldr	r3, [pc, #16]	; (8010f14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8010f02:	681a      	ldr	r2, [r3, #0]
 8010f04:	b10a      	cbz	r2, 8010f0a <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 8010f06:	4803      	ldr	r0, [pc, #12]	; (8010f14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8010f08:	4770      	bx	lr
 8010f0a:	4a03      	ldr	r2, [pc, #12]	; (8010f18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 8010f0c:	4801      	ldr	r0, [pc, #4]	; (8010f14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 8010f0e:	6812      	ldr	r2, [r2, #0]
 8010f10:	601a      	str	r2, [r3, #0]
 8010f12:	4770      	bx	lr
 8010f14:	20000578 	.word	0x20000578
 8010f18:	200005b0 	.word	0x200005b0

08010f1c <get_serialized_size_builtin_interfaces__msg__Time>:
 8010f1c:	b180      	cbz	r0, 8010f40 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8010f1e:	b538      	push	{r3, r4, r5, lr}
 8010f20:	460d      	mov	r5, r1
 8010f22:	4628      	mov	r0, r5
 8010f24:	2104      	movs	r1, #4
 8010f26:	f001 fc93 	bl	8012850 <ucdr_alignment>
 8010f2a:	1d2b      	adds	r3, r5, #4
 8010f2c:	181c      	adds	r4, r3, r0
 8010f2e:	2104      	movs	r1, #4
 8010f30:	4620      	mov	r0, r4
 8010f32:	f001 fc8d 	bl	8012850 <ucdr_alignment>
 8010f36:	f1c5 0504 	rsb	r5, r5, #4
 8010f3a:	4428      	add	r0, r5
 8010f3c:	4420      	add	r0, r4
 8010f3e:	bd38      	pop	{r3, r4, r5, pc}
 8010f40:	4770      	bx	lr
 8010f42:	bf00      	nop

08010f44 <_Time__cdr_deserialize>:
 8010f44:	b538      	push	{r3, r4, r5, lr}
 8010f46:	460c      	mov	r4, r1
 8010f48:	b141      	cbz	r1, 8010f5c <_Time__cdr_deserialize+0x18>
 8010f4a:	4605      	mov	r5, r0
 8010f4c:	f000 ff44 	bl	8011dd8 <ucdr_deserialize_int32_t>
 8010f50:	1d21      	adds	r1, r4, #4
 8010f52:	4628      	mov	r0, r5
 8010f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f58:	f000 bbbc 	b.w	80116d4 <ucdr_deserialize_uint32_t>
 8010f5c:	4608      	mov	r0, r1
 8010f5e:	bd38      	pop	{r3, r4, r5, pc}

08010f60 <_Time__cdr_serialize>:
 8010f60:	b160      	cbz	r0, 8010f7c <_Time__cdr_serialize+0x1c>
 8010f62:	b538      	push	{r3, r4, r5, lr}
 8010f64:	460d      	mov	r5, r1
 8010f66:	4604      	mov	r4, r0
 8010f68:	6801      	ldr	r1, [r0, #0]
 8010f6a:	4628      	mov	r0, r5
 8010f6c:	f000 fe9c 	bl	8011ca8 <ucdr_serialize_int32_t>
 8010f70:	6861      	ldr	r1, [r4, #4]
 8010f72:	4628      	mov	r0, r5
 8010f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f78:	f000 ba7c 	b.w	8011474 <ucdr_serialize_uint32_t>
 8010f7c:	4770      	bx	lr
 8010f7e:	bf00      	nop

08010f80 <_Time__get_serialized_size>:
 8010f80:	b160      	cbz	r0, 8010f9c <_Time__get_serialized_size+0x1c>
 8010f82:	b510      	push	{r4, lr}
 8010f84:	2104      	movs	r1, #4
 8010f86:	2000      	movs	r0, #0
 8010f88:	f001 fc62 	bl	8012850 <ucdr_alignment>
 8010f8c:	1d04      	adds	r4, r0, #4
 8010f8e:	2104      	movs	r1, #4
 8010f90:	4620      	mov	r0, r4
 8010f92:	f001 fc5d 	bl	8012850 <ucdr_alignment>
 8010f96:	3004      	adds	r0, #4
 8010f98:	4420      	add	r0, r4
 8010f9a:	bd10      	pop	{r4, pc}
 8010f9c:	4770      	bx	lr
 8010f9e:	bf00      	nop

08010fa0 <_Time__max_serialized_size>:
 8010fa0:	b510      	push	{r4, lr}
 8010fa2:	2104      	movs	r1, #4
 8010fa4:	2000      	movs	r0, #0
 8010fa6:	f001 fc53 	bl	8012850 <ucdr_alignment>
 8010faa:	1d04      	adds	r4, r0, #4
 8010fac:	2104      	movs	r1, #4
 8010fae:	4620      	mov	r0, r4
 8010fb0:	f001 fc4e 	bl	8012850 <ucdr_alignment>
 8010fb4:	3004      	adds	r0, #4
 8010fb6:	4420      	add	r0, r4
 8010fb8:	bd10      	pop	{r4, pc}
 8010fba:	bf00      	nop

08010fbc <max_serialized_size_builtin_interfaces__msg__Time>:
 8010fbc:	b538      	push	{r3, r4, r5, lr}
 8010fbe:	460c      	mov	r4, r1
 8010fc0:	2301      	movs	r3, #1
 8010fc2:	7003      	strb	r3, [r0, #0]
 8010fc4:	2104      	movs	r1, #4
 8010fc6:	4620      	mov	r0, r4
 8010fc8:	f001 fc42 	bl	8012850 <ucdr_alignment>
 8010fcc:	1d25      	adds	r5, r4, #4
 8010fce:	4405      	add	r5, r0
 8010fd0:	2104      	movs	r1, #4
 8010fd2:	4628      	mov	r0, r5
 8010fd4:	f001 fc3c 	bl	8012850 <ucdr_alignment>
 8010fd8:	f1c4 0404 	rsb	r4, r4, #4
 8010fdc:	4420      	add	r0, r4
 8010fde:	4428      	add	r0, r5
 8010fe0:	bd38      	pop	{r3, r4, r5, pc}
 8010fe2:	bf00      	nop

08010fe4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 8010fe4:	4800      	ldr	r0, [pc, #0]	; (8010fe8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 8010fe6:	4770      	bx	lr
 8010fe8:	20000584 	.word	0x20000584

08010fec <ucdr_serialize_bool>:
 8010fec:	b538      	push	{r3, r4, r5, lr}
 8010fee:	460d      	mov	r5, r1
 8010ff0:	2101      	movs	r1, #1
 8010ff2:	4604      	mov	r4, r0
 8010ff4:	f001 fbe0 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8010ff8:	b148      	cbz	r0, 801100e <ucdr_serialize_bool+0x22>
 8010ffa:	68a3      	ldr	r3, [r4, #8]
 8010ffc:	701d      	strb	r5, [r3, #0]
 8010ffe:	68a2      	ldr	r2, [r4, #8]
 8011000:	6923      	ldr	r3, [r4, #16]
 8011002:	2101      	movs	r1, #1
 8011004:	440a      	add	r2, r1
 8011006:	440b      	add	r3, r1
 8011008:	60a2      	str	r2, [r4, #8]
 801100a:	6123      	str	r3, [r4, #16]
 801100c:	7561      	strb	r1, [r4, #21]
 801100e:	7da0      	ldrb	r0, [r4, #22]
 8011010:	f080 0001 	eor.w	r0, r0, #1
 8011014:	bd38      	pop	{r3, r4, r5, pc}
 8011016:	bf00      	nop

08011018 <ucdr_deserialize_bool>:
 8011018:	b538      	push	{r3, r4, r5, lr}
 801101a:	460d      	mov	r5, r1
 801101c:	2101      	movs	r1, #1
 801101e:	4604      	mov	r4, r0
 8011020:	f001 fbca 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8011024:	b160      	cbz	r0, 8011040 <ucdr_deserialize_bool+0x28>
 8011026:	68a2      	ldr	r2, [r4, #8]
 8011028:	6923      	ldr	r3, [r4, #16]
 801102a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801102e:	3900      	subs	r1, #0
 8011030:	bf18      	it	ne
 8011032:	2101      	movne	r1, #1
 8011034:	7029      	strb	r1, [r5, #0]
 8011036:	3301      	adds	r3, #1
 8011038:	2101      	movs	r1, #1
 801103a:	60a2      	str	r2, [r4, #8]
 801103c:	6123      	str	r3, [r4, #16]
 801103e:	7561      	strb	r1, [r4, #21]
 8011040:	7da0      	ldrb	r0, [r4, #22]
 8011042:	f080 0001 	eor.w	r0, r0, #1
 8011046:	bd38      	pop	{r3, r4, r5, pc}

08011048 <ucdr_serialize_uint8_t>:
 8011048:	b538      	push	{r3, r4, r5, lr}
 801104a:	460d      	mov	r5, r1
 801104c:	2101      	movs	r1, #1
 801104e:	4604      	mov	r4, r0
 8011050:	f001 fbb2 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8011054:	b148      	cbz	r0, 801106a <ucdr_serialize_uint8_t+0x22>
 8011056:	68a3      	ldr	r3, [r4, #8]
 8011058:	701d      	strb	r5, [r3, #0]
 801105a:	68a2      	ldr	r2, [r4, #8]
 801105c:	6923      	ldr	r3, [r4, #16]
 801105e:	2101      	movs	r1, #1
 8011060:	440a      	add	r2, r1
 8011062:	440b      	add	r3, r1
 8011064:	60a2      	str	r2, [r4, #8]
 8011066:	6123      	str	r3, [r4, #16]
 8011068:	7561      	strb	r1, [r4, #21]
 801106a:	7da0      	ldrb	r0, [r4, #22]
 801106c:	f080 0001 	eor.w	r0, r0, #1
 8011070:	bd38      	pop	{r3, r4, r5, pc}
 8011072:	bf00      	nop

08011074 <ucdr_deserialize_uint8_t>:
 8011074:	b538      	push	{r3, r4, r5, lr}
 8011076:	460d      	mov	r5, r1
 8011078:	2101      	movs	r1, #1
 801107a:	4604      	mov	r4, r0
 801107c:	f001 fb9c 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8011080:	b150      	cbz	r0, 8011098 <ucdr_deserialize_uint8_t+0x24>
 8011082:	68a3      	ldr	r3, [r4, #8]
 8011084:	781b      	ldrb	r3, [r3, #0]
 8011086:	702b      	strb	r3, [r5, #0]
 8011088:	68a2      	ldr	r2, [r4, #8]
 801108a:	6923      	ldr	r3, [r4, #16]
 801108c:	2101      	movs	r1, #1
 801108e:	440a      	add	r2, r1
 8011090:	440b      	add	r3, r1
 8011092:	60a2      	str	r2, [r4, #8]
 8011094:	6123      	str	r3, [r4, #16]
 8011096:	7561      	strb	r1, [r4, #21]
 8011098:	7da0      	ldrb	r0, [r4, #22]
 801109a:	f080 0001 	eor.w	r0, r0, #1
 801109e:	bd38      	pop	{r3, r4, r5, pc}

080110a0 <ucdr_serialize_uint16_t>:
 80110a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110a4:	b082      	sub	sp, #8
 80110a6:	460b      	mov	r3, r1
 80110a8:	2102      	movs	r1, #2
 80110aa:	4604      	mov	r4, r0
 80110ac:	f8ad 3006 	strh.w	r3, [sp, #6]
 80110b0:	f001 fbd6 	bl	8012860 <ucdr_buffer_alignment>
 80110b4:	4601      	mov	r1, r0
 80110b6:	4620      	mov	r0, r4
 80110b8:	7d67      	ldrb	r7, [r4, #21]
 80110ba:	f001 fc15 	bl	80128e8 <ucdr_advance_buffer>
 80110be:	2102      	movs	r1, #2
 80110c0:	4620      	mov	r0, r4
 80110c2:	f001 fb6d 	bl	80127a0 <ucdr_check_buffer_available_for>
 80110c6:	bb78      	cbnz	r0, 8011128 <ucdr_serialize_uint16_t+0x88>
 80110c8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80110cc:	42ab      	cmp	r3, r5
 80110ce:	d926      	bls.n	801111e <ucdr_serialize_uint16_t+0x7e>
 80110d0:	1b5e      	subs	r6, r3, r5
 80110d2:	60a3      	str	r3, [r4, #8]
 80110d4:	6923      	ldr	r3, [r4, #16]
 80110d6:	f1c6 0802 	rsb	r8, r6, #2
 80110da:	4433      	add	r3, r6
 80110dc:	6123      	str	r3, [r4, #16]
 80110de:	4641      	mov	r1, r8
 80110e0:	4620      	mov	r0, r4
 80110e2:	f001 fb69 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 80110e6:	2800      	cmp	r0, #0
 80110e8:	d03b      	beq.n	8011162 <ucdr_serialize_uint16_t+0xc2>
 80110ea:	7d23      	ldrb	r3, [r4, #20]
 80110ec:	2b01      	cmp	r3, #1
 80110ee:	d04a      	beq.n	8011186 <ucdr_serialize_uint16_t+0xe6>
 80110f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80110f4:	702b      	strb	r3, [r5, #0]
 80110f6:	2e00      	cmp	r6, #0
 80110f8:	d040      	beq.n	801117c <ucdr_serialize_uint16_t+0xdc>
 80110fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80110fe:	706b      	strb	r3, [r5, #1]
 8011100:	6923      	ldr	r3, [r4, #16]
 8011102:	68a2      	ldr	r2, [r4, #8]
 8011104:	7da0      	ldrb	r0, [r4, #22]
 8011106:	3302      	adds	r3, #2
 8011108:	1b9e      	subs	r6, r3, r6
 801110a:	4442      	add	r2, r8
 801110c:	2302      	movs	r3, #2
 801110e:	f080 0001 	eor.w	r0, r0, #1
 8011112:	60a2      	str	r2, [r4, #8]
 8011114:	6126      	str	r6, [r4, #16]
 8011116:	7563      	strb	r3, [r4, #21]
 8011118:	b002      	add	sp, #8
 801111a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801111e:	2102      	movs	r1, #2
 8011120:	4620      	mov	r0, r4
 8011122:	f001 fb49 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8011126:	b190      	cbz	r0, 801114e <ucdr_serialize_uint16_t+0xae>
 8011128:	7d23      	ldrb	r3, [r4, #20]
 801112a:	2b01      	cmp	r3, #1
 801112c:	68a3      	ldr	r3, [r4, #8]
 801112e:	d014      	beq.n	801115a <ucdr_serialize_uint16_t+0xba>
 8011130:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011134:	701a      	strb	r2, [r3, #0]
 8011136:	68a3      	ldr	r3, [r4, #8]
 8011138:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801113c:	705a      	strb	r2, [r3, #1]
 801113e:	68a2      	ldr	r2, [r4, #8]
 8011140:	6923      	ldr	r3, [r4, #16]
 8011142:	3202      	adds	r2, #2
 8011144:	3302      	adds	r3, #2
 8011146:	2102      	movs	r1, #2
 8011148:	60a2      	str	r2, [r4, #8]
 801114a:	6123      	str	r3, [r4, #16]
 801114c:	7561      	strb	r1, [r4, #21]
 801114e:	7da0      	ldrb	r0, [r4, #22]
 8011150:	f080 0001 	eor.w	r0, r0, #1
 8011154:	b002      	add	sp, #8
 8011156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801115a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801115e:	801a      	strh	r2, [r3, #0]
 8011160:	e7ed      	b.n	801113e <ucdr_serialize_uint16_t+0x9e>
 8011162:	68a2      	ldr	r2, [r4, #8]
 8011164:	6923      	ldr	r3, [r4, #16]
 8011166:	7da0      	ldrb	r0, [r4, #22]
 8011168:	7567      	strb	r7, [r4, #21]
 801116a:	1b92      	subs	r2, r2, r6
 801116c:	1b9b      	subs	r3, r3, r6
 801116e:	f080 0001 	eor.w	r0, r0, #1
 8011172:	60a2      	str	r2, [r4, #8]
 8011174:	6123      	str	r3, [r4, #16]
 8011176:	b002      	add	sp, #8
 8011178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801117c:	68a3      	ldr	r3, [r4, #8]
 801117e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011182:	701a      	strb	r2, [r3, #0]
 8011184:	e7bc      	b.n	8011100 <ucdr_serialize_uint16_t+0x60>
 8011186:	4628      	mov	r0, r5
 8011188:	f10d 0506 	add.w	r5, sp, #6
 801118c:	4629      	mov	r1, r5
 801118e:	4632      	mov	r2, r6
 8011190:	f008 fd5c 	bl	8019c4c <memcpy>
 8011194:	68a0      	ldr	r0, [r4, #8]
 8011196:	4642      	mov	r2, r8
 8011198:	19a9      	adds	r1, r5, r6
 801119a:	f008 fd57 	bl	8019c4c <memcpy>
 801119e:	e7af      	b.n	8011100 <ucdr_serialize_uint16_t+0x60>

080111a0 <ucdr_serialize_endian_uint16_t>:
 80111a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111a4:	b083      	sub	sp, #12
 80111a6:	460d      	mov	r5, r1
 80111a8:	2102      	movs	r1, #2
 80111aa:	4604      	mov	r4, r0
 80111ac:	f8ad 2006 	strh.w	r2, [sp, #6]
 80111b0:	f001 fb56 	bl	8012860 <ucdr_buffer_alignment>
 80111b4:	4601      	mov	r1, r0
 80111b6:	4620      	mov	r0, r4
 80111b8:	f894 8015 	ldrb.w	r8, [r4, #21]
 80111bc:	f001 fb94 	bl	80128e8 <ucdr_advance_buffer>
 80111c0:	2102      	movs	r1, #2
 80111c2:	4620      	mov	r0, r4
 80111c4:	f001 faec 	bl	80127a0 <ucdr_check_buffer_available_for>
 80111c8:	bb70      	cbnz	r0, 8011228 <ucdr_serialize_endian_uint16_t+0x88>
 80111ca:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80111ce:	42be      	cmp	r6, r7
 80111d0:	d925      	bls.n	801121e <ucdr_serialize_endian_uint16_t+0x7e>
 80111d2:	6923      	ldr	r3, [r4, #16]
 80111d4:	60a6      	str	r6, [r4, #8]
 80111d6:	1bf6      	subs	r6, r6, r7
 80111d8:	4433      	add	r3, r6
 80111da:	f1c6 0902 	rsb	r9, r6, #2
 80111de:	6123      	str	r3, [r4, #16]
 80111e0:	4649      	mov	r1, r9
 80111e2:	4620      	mov	r0, r4
 80111e4:	f001 fae8 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 80111e8:	2800      	cmp	r0, #0
 80111ea:	d039      	beq.n	8011260 <ucdr_serialize_endian_uint16_t+0xc0>
 80111ec:	2d01      	cmp	r5, #1
 80111ee:	d04a      	beq.n	8011286 <ucdr_serialize_endian_uint16_t+0xe6>
 80111f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80111f4:	703b      	strb	r3, [r7, #0]
 80111f6:	2e00      	cmp	r6, #0
 80111f8:	d040      	beq.n	801127c <ucdr_serialize_endian_uint16_t+0xdc>
 80111fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80111fe:	707b      	strb	r3, [r7, #1]
 8011200:	6923      	ldr	r3, [r4, #16]
 8011202:	68a2      	ldr	r2, [r4, #8]
 8011204:	7da0      	ldrb	r0, [r4, #22]
 8011206:	3302      	adds	r3, #2
 8011208:	444a      	add	r2, r9
 801120a:	1b9b      	subs	r3, r3, r6
 801120c:	2102      	movs	r1, #2
 801120e:	f080 0001 	eor.w	r0, r0, #1
 8011212:	60a2      	str	r2, [r4, #8]
 8011214:	6123      	str	r3, [r4, #16]
 8011216:	7561      	strb	r1, [r4, #21]
 8011218:	b003      	add	sp, #12
 801121a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801121e:	2102      	movs	r1, #2
 8011220:	4620      	mov	r0, r4
 8011222:	f001 fac9 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8011226:	b188      	cbz	r0, 801124c <ucdr_serialize_endian_uint16_t+0xac>
 8011228:	2d01      	cmp	r5, #1
 801122a:	68a3      	ldr	r3, [r4, #8]
 801122c:	d014      	beq.n	8011258 <ucdr_serialize_endian_uint16_t+0xb8>
 801122e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011232:	701a      	strb	r2, [r3, #0]
 8011234:	68a3      	ldr	r3, [r4, #8]
 8011236:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801123a:	705a      	strb	r2, [r3, #1]
 801123c:	68a2      	ldr	r2, [r4, #8]
 801123e:	6923      	ldr	r3, [r4, #16]
 8011240:	3202      	adds	r2, #2
 8011242:	3302      	adds	r3, #2
 8011244:	2102      	movs	r1, #2
 8011246:	60a2      	str	r2, [r4, #8]
 8011248:	6123      	str	r3, [r4, #16]
 801124a:	7561      	strb	r1, [r4, #21]
 801124c:	7da0      	ldrb	r0, [r4, #22]
 801124e:	f080 0001 	eor.w	r0, r0, #1
 8011252:	b003      	add	sp, #12
 8011254:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011258:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801125c:	801a      	strh	r2, [r3, #0]
 801125e:	e7ed      	b.n	801123c <ucdr_serialize_endian_uint16_t+0x9c>
 8011260:	68a2      	ldr	r2, [r4, #8]
 8011262:	6923      	ldr	r3, [r4, #16]
 8011264:	7da0      	ldrb	r0, [r4, #22]
 8011266:	f884 8015 	strb.w	r8, [r4, #21]
 801126a:	1b92      	subs	r2, r2, r6
 801126c:	1b9b      	subs	r3, r3, r6
 801126e:	f080 0001 	eor.w	r0, r0, #1
 8011272:	60a2      	str	r2, [r4, #8]
 8011274:	6123      	str	r3, [r4, #16]
 8011276:	b003      	add	sp, #12
 8011278:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801127c:	68a3      	ldr	r3, [r4, #8]
 801127e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011282:	701a      	strb	r2, [r3, #0]
 8011284:	e7bc      	b.n	8011200 <ucdr_serialize_endian_uint16_t+0x60>
 8011286:	f10d 0506 	add.w	r5, sp, #6
 801128a:	4629      	mov	r1, r5
 801128c:	4632      	mov	r2, r6
 801128e:	4638      	mov	r0, r7
 8011290:	f008 fcdc 	bl	8019c4c <memcpy>
 8011294:	68a0      	ldr	r0, [r4, #8]
 8011296:	464a      	mov	r2, r9
 8011298:	19a9      	adds	r1, r5, r6
 801129a:	f008 fcd7 	bl	8019c4c <memcpy>
 801129e:	e7af      	b.n	8011200 <ucdr_serialize_endian_uint16_t+0x60>

080112a0 <ucdr_deserialize_uint16_t>:
 80112a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112a4:	460d      	mov	r5, r1
 80112a6:	2102      	movs	r1, #2
 80112a8:	4604      	mov	r4, r0
 80112aa:	f001 fad9 	bl	8012860 <ucdr_buffer_alignment>
 80112ae:	4601      	mov	r1, r0
 80112b0:	4620      	mov	r0, r4
 80112b2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80112b6:	f001 fb17 	bl	80128e8 <ucdr_advance_buffer>
 80112ba:	2102      	movs	r1, #2
 80112bc:	4620      	mov	r0, r4
 80112be:	f001 fa6f 	bl	80127a0 <ucdr_check_buffer_available_for>
 80112c2:	bb60      	cbnz	r0, 801131e <ucdr_deserialize_uint16_t+0x7e>
 80112c4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80112c8:	42be      	cmp	r6, r7
 80112ca:	d923      	bls.n	8011314 <ucdr_deserialize_uint16_t+0x74>
 80112cc:	6923      	ldr	r3, [r4, #16]
 80112ce:	60a6      	str	r6, [r4, #8]
 80112d0:	1bf6      	subs	r6, r6, r7
 80112d2:	4433      	add	r3, r6
 80112d4:	f1c6 0902 	rsb	r9, r6, #2
 80112d8:	6123      	str	r3, [r4, #16]
 80112da:	4649      	mov	r1, r9
 80112dc:	4620      	mov	r0, r4
 80112de:	f001 fa6b 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 80112e2:	2800      	cmp	r0, #0
 80112e4:	d034      	beq.n	8011350 <ucdr_deserialize_uint16_t+0xb0>
 80112e6:	7d23      	ldrb	r3, [r4, #20]
 80112e8:	2b01      	cmp	r3, #1
 80112ea:	d042      	beq.n	8011372 <ucdr_deserialize_uint16_t+0xd2>
 80112ec:	787b      	ldrb	r3, [r7, #1]
 80112ee:	702b      	strb	r3, [r5, #0]
 80112f0:	2e00      	cmp	r6, #0
 80112f2:	d03a      	beq.n	801136a <ucdr_deserialize_uint16_t+0xca>
 80112f4:	783b      	ldrb	r3, [r7, #0]
 80112f6:	706b      	strb	r3, [r5, #1]
 80112f8:	6923      	ldr	r3, [r4, #16]
 80112fa:	68a2      	ldr	r2, [r4, #8]
 80112fc:	7da0      	ldrb	r0, [r4, #22]
 80112fe:	2102      	movs	r1, #2
 8011300:	3302      	adds	r3, #2
 8011302:	444a      	add	r2, r9
 8011304:	1b9b      	subs	r3, r3, r6
 8011306:	7561      	strb	r1, [r4, #21]
 8011308:	60a2      	str	r2, [r4, #8]
 801130a:	6123      	str	r3, [r4, #16]
 801130c:	f080 0001 	eor.w	r0, r0, #1
 8011310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011314:	2102      	movs	r1, #2
 8011316:	4620      	mov	r0, r4
 8011318:	f001 fa4e 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 801131c:	b180      	cbz	r0, 8011340 <ucdr_deserialize_uint16_t+0xa0>
 801131e:	7d23      	ldrb	r3, [r4, #20]
 8011320:	2b01      	cmp	r3, #1
 8011322:	68a3      	ldr	r3, [r4, #8]
 8011324:	d011      	beq.n	801134a <ucdr_deserialize_uint16_t+0xaa>
 8011326:	785b      	ldrb	r3, [r3, #1]
 8011328:	702b      	strb	r3, [r5, #0]
 801132a:	68a3      	ldr	r3, [r4, #8]
 801132c:	781b      	ldrb	r3, [r3, #0]
 801132e:	706b      	strb	r3, [r5, #1]
 8011330:	68a2      	ldr	r2, [r4, #8]
 8011332:	6923      	ldr	r3, [r4, #16]
 8011334:	3202      	adds	r2, #2
 8011336:	3302      	adds	r3, #2
 8011338:	2102      	movs	r1, #2
 801133a:	60a2      	str	r2, [r4, #8]
 801133c:	6123      	str	r3, [r4, #16]
 801133e:	7561      	strb	r1, [r4, #21]
 8011340:	7da0      	ldrb	r0, [r4, #22]
 8011342:	f080 0001 	eor.w	r0, r0, #1
 8011346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801134a:	881b      	ldrh	r3, [r3, #0]
 801134c:	802b      	strh	r3, [r5, #0]
 801134e:	e7ef      	b.n	8011330 <ucdr_deserialize_uint16_t+0x90>
 8011350:	68a2      	ldr	r2, [r4, #8]
 8011352:	6923      	ldr	r3, [r4, #16]
 8011354:	7da0      	ldrb	r0, [r4, #22]
 8011356:	f884 8015 	strb.w	r8, [r4, #21]
 801135a:	1b92      	subs	r2, r2, r6
 801135c:	1b9b      	subs	r3, r3, r6
 801135e:	60a2      	str	r2, [r4, #8]
 8011360:	6123      	str	r3, [r4, #16]
 8011362:	f080 0001 	eor.w	r0, r0, #1
 8011366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801136a:	68a3      	ldr	r3, [r4, #8]
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	706b      	strb	r3, [r5, #1]
 8011370:	e7c2      	b.n	80112f8 <ucdr_deserialize_uint16_t+0x58>
 8011372:	4639      	mov	r1, r7
 8011374:	4632      	mov	r2, r6
 8011376:	4628      	mov	r0, r5
 8011378:	f008 fc68 	bl	8019c4c <memcpy>
 801137c:	68a1      	ldr	r1, [r4, #8]
 801137e:	464a      	mov	r2, r9
 8011380:	19a8      	adds	r0, r5, r6
 8011382:	f008 fc63 	bl	8019c4c <memcpy>
 8011386:	e7b7      	b.n	80112f8 <ucdr_deserialize_uint16_t+0x58>

08011388 <ucdr_deserialize_endian_uint16_t>:
 8011388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801138c:	460e      	mov	r6, r1
 801138e:	2102      	movs	r1, #2
 8011390:	4604      	mov	r4, r0
 8011392:	4615      	mov	r5, r2
 8011394:	f001 fa64 	bl	8012860 <ucdr_buffer_alignment>
 8011398:	4601      	mov	r1, r0
 801139a:	4620      	mov	r0, r4
 801139c:	f894 9015 	ldrb.w	r9, [r4, #21]
 80113a0:	f001 faa2 	bl	80128e8 <ucdr_advance_buffer>
 80113a4:	2102      	movs	r1, #2
 80113a6:	4620      	mov	r0, r4
 80113a8:	f001 f9fa 	bl	80127a0 <ucdr_check_buffer_available_for>
 80113ac:	bb70      	cbnz	r0, 801140c <ucdr_deserialize_endian_uint16_t+0x84>
 80113ae:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 80113b2:	4547      	cmp	r7, r8
 80113b4:	d925      	bls.n	8011402 <ucdr_deserialize_endian_uint16_t+0x7a>
 80113b6:	6923      	ldr	r3, [r4, #16]
 80113b8:	60a7      	str	r7, [r4, #8]
 80113ba:	eba7 0708 	sub.w	r7, r7, r8
 80113be:	443b      	add	r3, r7
 80113c0:	f1c7 0a02 	rsb	sl, r7, #2
 80113c4:	6123      	str	r3, [r4, #16]
 80113c6:	4651      	mov	r1, sl
 80113c8:	4620      	mov	r0, r4
 80113ca:	f001 f9f5 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 80113ce:	2800      	cmp	r0, #0
 80113d0:	d034      	beq.n	801143c <ucdr_deserialize_endian_uint16_t+0xb4>
 80113d2:	2e01      	cmp	r6, #1
 80113d4:	d043      	beq.n	801145e <ucdr_deserialize_endian_uint16_t+0xd6>
 80113d6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80113da:	702b      	strb	r3, [r5, #0]
 80113dc:	2f00      	cmp	r7, #0
 80113de:	d03a      	beq.n	8011456 <ucdr_deserialize_endian_uint16_t+0xce>
 80113e0:	f898 3000 	ldrb.w	r3, [r8]
 80113e4:	706b      	strb	r3, [r5, #1]
 80113e6:	6923      	ldr	r3, [r4, #16]
 80113e8:	68a2      	ldr	r2, [r4, #8]
 80113ea:	7da0      	ldrb	r0, [r4, #22]
 80113ec:	2102      	movs	r1, #2
 80113ee:	3302      	adds	r3, #2
 80113f0:	4452      	add	r2, sl
 80113f2:	1bdb      	subs	r3, r3, r7
 80113f4:	7561      	strb	r1, [r4, #21]
 80113f6:	60a2      	str	r2, [r4, #8]
 80113f8:	6123      	str	r3, [r4, #16]
 80113fa:	f080 0001 	eor.w	r0, r0, #1
 80113fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011402:	2102      	movs	r1, #2
 8011404:	4620      	mov	r0, r4
 8011406:	f001 f9d7 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 801140a:	b178      	cbz	r0, 801142c <ucdr_deserialize_endian_uint16_t+0xa4>
 801140c:	2e01      	cmp	r6, #1
 801140e:	68a3      	ldr	r3, [r4, #8]
 8011410:	d011      	beq.n	8011436 <ucdr_deserialize_endian_uint16_t+0xae>
 8011412:	785b      	ldrb	r3, [r3, #1]
 8011414:	702b      	strb	r3, [r5, #0]
 8011416:	68a3      	ldr	r3, [r4, #8]
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	706b      	strb	r3, [r5, #1]
 801141c:	68a2      	ldr	r2, [r4, #8]
 801141e:	6923      	ldr	r3, [r4, #16]
 8011420:	3202      	adds	r2, #2
 8011422:	3302      	adds	r3, #2
 8011424:	2102      	movs	r1, #2
 8011426:	60a2      	str	r2, [r4, #8]
 8011428:	6123      	str	r3, [r4, #16]
 801142a:	7561      	strb	r1, [r4, #21]
 801142c:	7da0      	ldrb	r0, [r4, #22]
 801142e:	f080 0001 	eor.w	r0, r0, #1
 8011432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011436:	881b      	ldrh	r3, [r3, #0]
 8011438:	802b      	strh	r3, [r5, #0]
 801143a:	e7ef      	b.n	801141c <ucdr_deserialize_endian_uint16_t+0x94>
 801143c:	68a2      	ldr	r2, [r4, #8]
 801143e:	6923      	ldr	r3, [r4, #16]
 8011440:	7da0      	ldrb	r0, [r4, #22]
 8011442:	f884 9015 	strb.w	r9, [r4, #21]
 8011446:	1bd2      	subs	r2, r2, r7
 8011448:	1bdb      	subs	r3, r3, r7
 801144a:	60a2      	str	r2, [r4, #8]
 801144c:	6123      	str	r3, [r4, #16]
 801144e:	f080 0001 	eor.w	r0, r0, #1
 8011452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011456:	68a3      	ldr	r3, [r4, #8]
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	706b      	strb	r3, [r5, #1]
 801145c:	e7c3      	b.n	80113e6 <ucdr_deserialize_endian_uint16_t+0x5e>
 801145e:	4641      	mov	r1, r8
 8011460:	463a      	mov	r2, r7
 8011462:	4628      	mov	r0, r5
 8011464:	f008 fbf2 	bl	8019c4c <memcpy>
 8011468:	68a1      	ldr	r1, [r4, #8]
 801146a:	4652      	mov	r2, sl
 801146c:	19e8      	adds	r0, r5, r7
 801146e:	f008 fbed 	bl	8019c4c <memcpy>
 8011472:	e7b8      	b.n	80113e6 <ucdr_deserialize_endian_uint16_t+0x5e>

08011474 <ucdr_serialize_uint32_t>:
 8011474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011478:	b082      	sub	sp, #8
 801147a:	4604      	mov	r4, r0
 801147c:	9101      	str	r1, [sp, #4]
 801147e:	2104      	movs	r1, #4
 8011480:	f001 f9ee 	bl	8012860 <ucdr_buffer_alignment>
 8011484:	4601      	mov	r1, r0
 8011486:	4620      	mov	r0, r4
 8011488:	7d67      	ldrb	r7, [r4, #21]
 801148a:	f001 fa2d 	bl	80128e8 <ucdr_advance_buffer>
 801148e:	2104      	movs	r1, #4
 8011490:	4620      	mov	r0, r4
 8011492:	f001 f985 	bl	80127a0 <ucdr_check_buffer_available_for>
 8011496:	2800      	cmp	r0, #0
 8011498:	d139      	bne.n	801150e <ucdr_serialize_uint32_t+0x9a>
 801149a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801149e:	42ab      	cmp	r3, r5
 80114a0:	d930      	bls.n	8011504 <ucdr_serialize_uint32_t+0x90>
 80114a2:	1b5e      	subs	r6, r3, r5
 80114a4:	60a3      	str	r3, [r4, #8]
 80114a6:	6923      	ldr	r3, [r4, #16]
 80114a8:	f1c6 0804 	rsb	r8, r6, #4
 80114ac:	4433      	add	r3, r6
 80114ae:	6123      	str	r3, [r4, #16]
 80114b0:	4641      	mov	r1, r8
 80114b2:	4620      	mov	r0, r4
 80114b4:	f001 f980 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 80114b8:	2800      	cmp	r0, #0
 80114ba:	d04c      	beq.n	8011556 <ucdr_serialize_uint32_t+0xe2>
 80114bc:	7d23      	ldrb	r3, [r4, #20]
 80114be:	2b01      	cmp	r3, #1
 80114c0:	d063      	beq.n	801158a <ucdr_serialize_uint32_t+0x116>
 80114c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80114c6:	702b      	strb	r3, [r5, #0]
 80114c8:	2e00      	cmp	r6, #0
 80114ca:	d051      	beq.n	8011570 <ucdr_serialize_uint32_t+0xfc>
 80114cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80114d0:	706b      	strb	r3, [r5, #1]
 80114d2:	2e01      	cmp	r6, #1
 80114d4:	d050      	beq.n	8011578 <ucdr_serialize_uint32_t+0x104>
 80114d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80114da:	70ab      	strb	r3, [r5, #2]
 80114dc:	2e02      	cmp	r6, #2
 80114de:	d04f      	beq.n	8011580 <ucdr_serialize_uint32_t+0x10c>
 80114e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80114e4:	70eb      	strb	r3, [r5, #3]
 80114e6:	6923      	ldr	r3, [r4, #16]
 80114e8:	68a2      	ldr	r2, [r4, #8]
 80114ea:	7da0      	ldrb	r0, [r4, #22]
 80114ec:	3304      	adds	r3, #4
 80114ee:	1b9e      	subs	r6, r3, r6
 80114f0:	4442      	add	r2, r8
 80114f2:	2304      	movs	r3, #4
 80114f4:	f080 0001 	eor.w	r0, r0, #1
 80114f8:	60a2      	str	r2, [r4, #8]
 80114fa:	6126      	str	r6, [r4, #16]
 80114fc:	7563      	strb	r3, [r4, #21]
 80114fe:	b002      	add	sp, #8
 8011500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011504:	2104      	movs	r1, #4
 8011506:	4620      	mov	r0, r4
 8011508:	f001 f956 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 801150c:	b1d0      	cbz	r0, 8011544 <ucdr_serialize_uint32_t+0xd0>
 801150e:	7d23      	ldrb	r3, [r4, #20]
 8011510:	2b01      	cmp	r3, #1
 8011512:	68a3      	ldr	r3, [r4, #8]
 8011514:	d01c      	beq.n	8011550 <ucdr_serialize_uint32_t+0xdc>
 8011516:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801151a:	701a      	strb	r2, [r3, #0]
 801151c:	68a3      	ldr	r3, [r4, #8]
 801151e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011522:	705a      	strb	r2, [r3, #1]
 8011524:	68a3      	ldr	r3, [r4, #8]
 8011526:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801152a:	709a      	strb	r2, [r3, #2]
 801152c:	68a3      	ldr	r3, [r4, #8]
 801152e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011532:	70da      	strb	r2, [r3, #3]
 8011534:	68a2      	ldr	r2, [r4, #8]
 8011536:	6923      	ldr	r3, [r4, #16]
 8011538:	3204      	adds	r2, #4
 801153a:	3304      	adds	r3, #4
 801153c:	2104      	movs	r1, #4
 801153e:	60a2      	str	r2, [r4, #8]
 8011540:	6123      	str	r3, [r4, #16]
 8011542:	7561      	strb	r1, [r4, #21]
 8011544:	7da0      	ldrb	r0, [r4, #22]
 8011546:	f080 0001 	eor.w	r0, r0, #1
 801154a:	b002      	add	sp, #8
 801154c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011550:	9a01      	ldr	r2, [sp, #4]
 8011552:	601a      	str	r2, [r3, #0]
 8011554:	e7ee      	b.n	8011534 <ucdr_serialize_uint32_t+0xc0>
 8011556:	68a2      	ldr	r2, [r4, #8]
 8011558:	6923      	ldr	r3, [r4, #16]
 801155a:	7da0      	ldrb	r0, [r4, #22]
 801155c:	7567      	strb	r7, [r4, #21]
 801155e:	1b92      	subs	r2, r2, r6
 8011560:	1b9b      	subs	r3, r3, r6
 8011562:	f080 0001 	eor.w	r0, r0, #1
 8011566:	60a2      	str	r2, [r4, #8]
 8011568:	6123      	str	r3, [r4, #16]
 801156a:	b002      	add	sp, #8
 801156c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011570:	68a3      	ldr	r3, [r4, #8]
 8011572:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011576:	701a      	strb	r2, [r3, #0]
 8011578:	68a3      	ldr	r3, [r4, #8]
 801157a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801157e:	701a      	strb	r2, [r3, #0]
 8011580:	68a3      	ldr	r3, [r4, #8]
 8011582:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011586:	701a      	strb	r2, [r3, #0]
 8011588:	e7ad      	b.n	80114e6 <ucdr_serialize_uint32_t+0x72>
 801158a:	4628      	mov	r0, r5
 801158c:	ad01      	add	r5, sp, #4
 801158e:	4629      	mov	r1, r5
 8011590:	4632      	mov	r2, r6
 8011592:	f008 fb5b 	bl	8019c4c <memcpy>
 8011596:	68a0      	ldr	r0, [r4, #8]
 8011598:	4642      	mov	r2, r8
 801159a:	19a9      	adds	r1, r5, r6
 801159c:	f008 fb56 	bl	8019c4c <memcpy>
 80115a0:	e7a1      	b.n	80114e6 <ucdr_serialize_uint32_t+0x72>
 80115a2:	bf00      	nop

080115a4 <ucdr_serialize_endian_uint32_t>:
 80115a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115a8:	b083      	sub	sp, #12
 80115aa:	460d      	mov	r5, r1
 80115ac:	2104      	movs	r1, #4
 80115ae:	4604      	mov	r4, r0
 80115b0:	9201      	str	r2, [sp, #4]
 80115b2:	f001 f955 	bl	8012860 <ucdr_buffer_alignment>
 80115b6:	4601      	mov	r1, r0
 80115b8:	4620      	mov	r0, r4
 80115ba:	f894 8015 	ldrb.w	r8, [r4, #21]
 80115be:	f001 f993 	bl	80128e8 <ucdr_advance_buffer>
 80115c2:	2104      	movs	r1, #4
 80115c4:	4620      	mov	r0, r4
 80115c6:	f001 f8eb 	bl	80127a0 <ucdr_check_buffer_available_for>
 80115ca:	2800      	cmp	r0, #0
 80115cc:	d138      	bne.n	8011640 <ucdr_serialize_endian_uint32_t+0x9c>
 80115ce:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80115d2:	42b7      	cmp	r7, r6
 80115d4:	d92f      	bls.n	8011636 <ucdr_serialize_endian_uint32_t+0x92>
 80115d6:	6923      	ldr	r3, [r4, #16]
 80115d8:	60a7      	str	r7, [r4, #8]
 80115da:	1bbf      	subs	r7, r7, r6
 80115dc:	443b      	add	r3, r7
 80115de:	f1c7 0904 	rsb	r9, r7, #4
 80115e2:	6123      	str	r3, [r4, #16]
 80115e4:	4649      	mov	r1, r9
 80115e6:	4620      	mov	r0, r4
 80115e8:	f001 f8e6 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 80115ec:	2800      	cmp	r0, #0
 80115ee:	d04a      	beq.n	8011686 <ucdr_serialize_endian_uint32_t+0xe2>
 80115f0:	2d01      	cmp	r5, #1
 80115f2:	d063      	beq.n	80116bc <ucdr_serialize_endian_uint32_t+0x118>
 80115f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80115f8:	7033      	strb	r3, [r6, #0]
 80115fa:	2f00      	cmp	r7, #0
 80115fc:	d051      	beq.n	80116a2 <ucdr_serialize_endian_uint32_t+0xfe>
 80115fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011602:	7073      	strb	r3, [r6, #1]
 8011604:	2f01      	cmp	r7, #1
 8011606:	d050      	beq.n	80116aa <ucdr_serialize_endian_uint32_t+0x106>
 8011608:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801160c:	70b3      	strb	r3, [r6, #2]
 801160e:	2f02      	cmp	r7, #2
 8011610:	d04f      	beq.n	80116b2 <ucdr_serialize_endian_uint32_t+0x10e>
 8011612:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011616:	70f3      	strb	r3, [r6, #3]
 8011618:	6923      	ldr	r3, [r4, #16]
 801161a:	68a2      	ldr	r2, [r4, #8]
 801161c:	7da0      	ldrb	r0, [r4, #22]
 801161e:	3304      	adds	r3, #4
 8011620:	444a      	add	r2, r9
 8011622:	1bdb      	subs	r3, r3, r7
 8011624:	2104      	movs	r1, #4
 8011626:	f080 0001 	eor.w	r0, r0, #1
 801162a:	60a2      	str	r2, [r4, #8]
 801162c:	6123      	str	r3, [r4, #16]
 801162e:	7561      	strb	r1, [r4, #21]
 8011630:	b003      	add	sp, #12
 8011632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011636:	2104      	movs	r1, #4
 8011638:	4620      	mov	r0, r4
 801163a:	f001 f8bd 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 801163e:	b1c8      	cbz	r0, 8011674 <ucdr_serialize_endian_uint32_t+0xd0>
 8011640:	2d01      	cmp	r5, #1
 8011642:	68a3      	ldr	r3, [r4, #8]
 8011644:	d01c      	beq.n	8011680 <ucdr_serialize_endian_uint32_t+0xdc>
 8011646:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801164a:	701a      	strb	r2, [r3, #0]
 801164c:	68a3      	ldr	r3, [r4, #8]
 801164e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011652:	705a      	strb	r2, [r3, #1]
 8011654:	68a3      	ldr	r3, [r4, #8]
 8011656:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801165a:	709a      	strb	r2, [r3, #2]
 801165c:	68a3      	ldr	r3, [r4, #8]
 801165e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011662:	70da      	strb	r2, [r3, #3]
 8011664:	68a2      	ldr	r2, [r4, #8]
 8011666:	6923      	ldr	r3, [r4, #16]
 8011668:	3204      	adds	r2, #4
 801166a:	3304      	adds	r3, #4
 801166c:	2104      	movs	r1, #4
 801166e:	60a2      	str	r2, [r4, #8]
 8011670:	6123      	str	r3, [r4, #16]
 8011672:	7561      	strb	r1, [r4, #21]
 8011674:	7da0      	ldrb	r0, [r4, #22]
 8011676:	f080 0001 	eor.w	r0, r0, #1
 801167a:	b003      	add	sp, #12
 801167c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011680:	9a01      	ldr	r2, [sp, #4]
 8011682:	601a      	str	r2, [r3, #0]
 8011684:	e7ee      	b.n	8011664 <ucdr_serialize_endian_uint32_t+0xc0>
 8011686:	68a2      	ldr	r2, [r4, #8]
 8011688:	6923      	ldr	r3, [r4, #16]
 801168a:	7da0      	ldrb	r0, [r4, #22]
 801168c:	f884 8015 	strb.w	r8, [r4, #21]
 8011690:	1bd2      	subs	r2, r2, r7
 8011692:	1bdb      	subs	r3, r3, r7
 8011694:	f080 0001 	eor.w	r0, r0, #1
 8011698:	60a2      	str	r2, [r4, #8]
 801169a:	6123      	str	r3, [r4, #16]
 801169c:	b003      	add	sp, #12
 801169e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116a2:	68a3      	ldr	r3, [r4, #8]
 80116a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80116a8:	701a      	strb	r2, [r3, #0]
 80116aa:	68a3      	ldr	r3, [r4, #8]
 80116ac:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80116b0:	701a      	strb	r2, [r3, #0]
 80116b2:	68a3      	ldr	r3, [r4, #8]
 80116b4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80116b8:	701a      	strb	r2, [r3, #0]
 80116ba:	e7ad      	b.n	8011618 <ucdr_serialize_endian_uint32_t+0x74>
 80116bc:	ad01      	add	r5, sp, #4
 80116be:	4629      	mov	r1, r5
 80116c0:	463a      	mov	r2, r7
 80116c2:	4630      	mov	r0, r6
 80116c4:	f008 fac2 	bl	8019c4c <memcpy>
 80116c8:	68a0      	ldr	r0, [r4, #8]
 80116ca:	464a      	mov	r2, r9
 80116cc:	19e9      	adds	r1, r5, r7
 80116ce:	f008 fabd 	bl	8019c4c <memcpy>
 80116d2:	e7a1      	b.n	8011618 <ucdr_serialize_endian_uint32_t+0x74>

080116d4 <ucdr_deserialize_uint32_t>:
 80116d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80116d8:	460d      	mov	r5, r1
 80116da:	2104      	movs	r1, #4
 80116dc:	4604      	mov	r4, r0
 80116de:	f001 f8bf 	bl	8012860 <ucdr_buffer_alignment>
 80116e2:	4601      	mov	r1, r0
 80116e4:	4620      	mov	r0, r4
 80116e6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80116ea:	f001 f8fd 	bl	80128e8 <ucdr_advance_buffer>
 80116ee:	2104      	movs	r1, #4
 80116f0:	4620      	mov	r0, r4
 80116f2:	f001 f855 	bl	80127a0 <ucdr_check_buffer_available_for>
 80116f6:	2800      	cmp	r0, #0
 80116f8:	d138      	bne.n	801176c <ucdr_deserialize_uint32_t+0x98>
 80116fa:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80116fe:	42b7      	cmp	r7, r6
 8011700:	d92f      	bls.n	8011762 <ucdr_deserialize_uint32_t+0x8e>
 8011702:	6923      	ldr	r3, [r4, #16]
 8011704:	60a7      	str	r7, [r4, #8]
 8011706:	1bbf      	subs	r7, r7, r6
 8011708:	443b      	add	r3, r7
 801170a:	f1c7 0904 	rsb	r9, r7, #4
 801170e:	6123      	str	r3, [r4, #16]
 8011710:	4649      	mov	r1, r9
 8011712:	4620      	mov	r0, r4
 8011714:	f001 f850 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8011718:	2800      	cmp	r0, #0
 801171a:	d046      	beq.n	80117aa <ucdr_deserialize_uint32_t+0xd6>
 801171c:	7d23      	ldrb	r3, [r4, #20]
 801171e:	2b01      	cmp	r3, #1
 8011720:	d05c      	beq.n	80117dc <ucdr_deserialize_uint32_t+0x108>
 8011722:	78f3      	ldrb	r3, [r6, #3]
 8011724:	702b      	strb	r3, [r5, #0]
 8011726:	2f00      	cmp	r7, #0
 8011728:	d04c      	beq.n	80117c4 <ucdr_deserialize_uint32_t+0xf0>
 801172a:	78b3      	ldrb	r3, [r6, #2]
 801172c:	706b      	strb	r3, [r5, #1]
 801172e:	2f01      	cmp	r7, #1
 8011730:	f105 0302 	add.w	r3, r5, #2
 8011734:	d04a      	beq.n	80117cc <ucdr_deserialize_uint32_t+0xf8>
 8011736:	7873      	ldrb	r3, [r6, #1]
 8011738:	70ab      	strb	r3, [r5, #2]
 801173a:	2f02      	cmp	r7, #2
 801173c:	f105 0303 	add.w	r3, r5, #3
 8011740:	d048      	beq.n	80117d4 <ucdr_deserialize_uint32_t+0x100>
 8011742:	7833      	ldrb	r3, [r6, #0]
 8011744:	70eb      	strb	r3, [r5, #3]
 8011746:	6923      	ldr	r3, [r4, #16]
 8011748:	68a2      	ldr	r2, [r4, #8]
 801174a:	7da0      	ldrb	r0, [r4, #22]
 801174c:	2104      	movs	r1, #4
 801174e:	3304      	adds	r3, #4
 8011750:	444a      	add	r2, r9
 8011752:	1bdb      	subs	r3, r3, r7
 8011754:	7561      	strb	r1, [r4, #21]
 8011756:	60a2      	str	r2, [r4, #8]
 8011758:	6123      	str	r3, [r4, #16]
 801175a:	f080 0001 	eor.w	r0, r0, #1
 801175e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011762:	2104      	movs	r1, #4
 8011764:	4620      	mov	r0, r4
 8011766:	f001 f827 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 801176a:	b1b0      	cbz	r0, 801179a <ucdr_deserialize_uint32_t+0xc6>
 801176c:	7d23      	ldrb	r3, [r4, #20]
 801176e:	2b01      	cmp	r3, #1
 8011770:	68a3      	ldr	r3, [r4, #8]
 8011772:	d017      	beq.n	80117a4 <ucdr_deserialize_uint32_t+0xd0>
 8011774:	78db      	ldrb	r3, [r3, #3]
 8011776:	702b      	strb	r3, [r5, #0]
 8011778:	68a3      	ldr	r3, [r4, #8]
 801177a:	789b      	ldrb	r3, [r3, #2]
 801177c:	706b      	strb	r3, [r5, #1]
 801177e:	68a3      	ldr	r3, [r4, #8]
 8011780:	785b      	ldrb	r3, [r3, #1]
 8011782:	70ab      	strb	r3, [r5, #2]
 8011784:	68a3      	ldr	r3, [r4, #8]
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	70eb      	strb	r3, [r5, #3]
 801178a:	68a2      	ldr	r2, [r4, #8]
 801178c:	6923      	ldr	r3, [r4, #16]
 801178e:	3204      	adds	r2, #4
 8011790:	3304      	adds	r3, #4
 8011792:	2104      	movs	r1, #4
 8011794:	60a2      	str	r2, [r4, #8]
 8011796:	6123      	str	r3, [r4, #16]
 8011798:	7561      	strb	r1, [r4, #21]
 801179a:	7da0      	ldrb	r0, [r4, #22]
 801179c:	f080 0001 	eor.w	r0, r0, #1
 80117a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	602b      	str	r3, [r5, #0]
 80117a8:	e7ef      	b.n	801178a <ucdr_deserialize_uint32_t+0xb6>
 80117aa:	68a2      	ldr	r2, [r4, #8]
 80117ac:	6923      	ldr	r3, [r4, #16]
 80117ae:	7da0      	ldrb	r0, [r4, #22]
 80117b0:	f884 8015 	strb.w	r8, [r4, #21]
 80117b4:	1bd2      	subs	r2, r2, r7
 80117b6:	1bdb      	subs	r3, r3, r7
 80117b8:	60a2      	str	r2, [r4, #8]
 80117ba:	6123      	str	r3, [r4, #16]
 80117bc:	f080 0001 	eor.w	r0, r0, #1
 80117c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117c4:	68a3      	ldr	r3, [r4, #8]
 80117c6:	789b      	ldrb	r3, [r3, #2]
 80117c8:	706b      	strb	r3, [r5, #1]
 80117ca:	1cab      	adds	r3, r5, #2
 80117cc:	68a2      	ldr	r2, [r4, #8]
 80117ce:	7852      	ldrb	r2, [r2, #1]
 80117d0:	f803 2b01 	strb.w	r2, [r3], #1
 80117d4:	68a2      	ldr	r2, [r4, #8]
 80117d6:	7812      	ldrb	r2, [r2, #0]
 80117d8:	701a      	strb	r2, [r3, #0]
 80117da:	e7b4      	b.n	8011746 <ucdr_deserialize_uint32_t+0x72>
 80117dc:	4631      	mov	r1, r6
 80117de:	463a      	mov	r2, r7
 80117e0:	4628      	mov	r0, r5
 80117e2:	f008 fa33 	bl	8019c4c <memcpy>
 80117e6:	68a1      	ldr	r1, [r4, #8]
 80117e8:	464a      	mov	r2, r9
 80117ea:	19e8      	adds	r0, r5, r7
 80117ec:	f008 fa2e 	bl	8019c4c <memcpy>
 80117f0:	e7a9      	b.n	8011746 <ucdr_deserialize_uint32_t+0x72>
 80117f2:	bf00      	nop

080117f4 <ucdr_deserialize_endian_uint32_t>:
 80117f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117f8:	460e      	mov	r6, r1
 80117fa:	2104      	movs	r1, #4
 80117fc:	4604      	mov	r4, r0
 80117fe:	4615      	mov	r5, r2
 8011800:	f001 f82e 	bl	8012860 <ucdr_buffer_alignment>
 8011804:	4601      	mov	r1, r0
 8011806:	4620      	mov	r0, r4
 8011808:	f894 9015 	ldrb.w	r9, [r4, #21]
 801180c:	f001 f86c 	bl	80128e8 <ucdr_advance_buffer>
 8011810:	2104      	movs	r1, #4
 8011812:	4620      	mov	r0, r4
 8011814:	f000 ffc4 	bl	80127a0 <ucdr_check_buffer_available_for>
 8011818:	2800      	cmp	r0, #0
 801181a:	d13c      	bne.n	8011896 <ucdr_deserialize_endian_uint32_t+0xa2>
 801181c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8011820:	42bb      	cmp	r3, r7
 8011822:	d933      	bls.n	801188c <ucdr_deserialize_endian_uint32_t+0x98>
 8011824:	eba3 0807 	sub.w	r8, r3, r7
 8011828:	60a3      	str	r3, [r4, #8]
 801182a:	6923      	ldr	r3, [r4, #16]
 801182c:	f1c8 0a04 	rsb	sl, r8, #4
 8011830:	4443      	add	r3, r8
 8011832:	6123      	str	r3, [r4, #16]
 8011834:	4651      	mov	r1, sl
 8011836:	4620      	mov	r0, r4
 8011838:	f000 ffbe 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 801183c:	2800      	cmp	r0, #0
 801183e:	d048      	beq.n	80118d2 <ucdr_deserialize_endian_uint32_t+0xde>
 8011840:	2e01      	cmp	r6, #1
 8011842:	d061      	beq.n	8011908 <ucdr_deserialize_endian_uint32_t+0x114>
 8011844:	78fb      	ldrb	r3, [r7, #3]
 8011846:	702b      	strb	r3, [r5, #0]
 8011848:	f1b8 0f00 	cmp.w	r8, #0
 801184c:	d050      	beq.n	80118f0 <ucdr_deserialize_endian_uint32_t+0xfc>
 801184e:	78bb      	ldrb	r3, [r7, #2]
 8011850:	706b      	strb	r3, [r5, #1]
 8011852:	f1b8 0f01 	cmp.w	r8, #1
 8011856:	f105 0302 	add.w	r3, r5, #2
 801185a:	d04d      	beq.n	80118f8 <ucdr_deserialize_endian_uint32_t+0x104>
 801185c:	787b      	ldrb	r3, [r7, #1]
 801185e:	70ab      	strb	r3, [r5, #2]
 8011860:	f1b8 0f02 	cmp.w	r8, #2
 8011864:	f105 0303 	add.w	r3, r5, #3
 8011868:	d04a      	beq.n	8011900 <ucdr_deserialize_endian_uint32_t+0x10c>
 801186a:	783b      	ldrb	r3, [r7, #0]
 801186c:	70eb      	strb	r3, [r5, #3]
 801186e:	6923      	ldr	r3, [r4, #16]
 8011870:	68a2      	ldr	r2, [r4, #8]
 8011872:	7da0      	ldrb	r0, [r4, #22]
 8011874:	2104      	movs	r1, #4
 8011876:	3304      	adds	r3, #4
 8011878:	4452      	add	r2, sl
 801187a:	eba3 0308 	sub.w	r3, r3, r8
 801187e:	7561      	strb	r1, [r4, #21]
 8011880:	60a2      	str	r2, [r4, #8]
 8011882:	6123      	str	r3, [r4, #16]
 8011884:	f080 0001 	eor.w	r0, r0, #1
 8011888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801188c:	2104      	movs	r1, #4
 801188e:	4620      	mov	r0, r4
 8011890:	f000 ff92 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8011894:	b1a8      	cbz	r0, 80118c2 <ucdr_deserialize_endian_uint32_t+0xce>
 8011896:	2e01      	cmp	r6, #1
 8011898:	68a3      	ldr	r3, [r4, #8]
 801189a:	d017      	beq.n	80118cc <ucdr_deserialize_endian_uint32_t+0xd8>
 801189c:	78db      	ldrb	r3, [r3, #3]
 801189e:	702b      	strb	r3, [r5, #0]
 80118a0:	68a3      	ldr	r3, [r4, #8]
 80118a2:	789b      	ldrb	r3, [r3, #2]
 80118a4:	706b      	strb	r3, [r5, #1]
 80118a6:	68a3      	ldr	r3, [r4, #8]
 80118a8:	785b      	ldrb	r3, [r3, #1]
 80118aa:	70ab      	strb	r3, [r5, #2]
 80118ac:	68a3      	ldr	r3, [r4, #8]
 80118ae:	781b      	ldrb	r3, [r3, #0]
 80118b0:	70eb      	strb	r3, [r5, #3]
 80118b2:	68a2      	ldr	r2, [r4, #8]
 80118b4:	6923      	ldr	r3, [r4, #16]
 80118b6:	3204      	adds	r2, #4
 80118b8:	3304      	adds	r3, #4
 80118ba:	2104      	movs	r1, #4
 80118bc:	60a2      	str	r2, [r4, #8]
 80118be:	6123      	str	r3, [r4, #16]
 80118c0:	7561      	strb	r1, [r4, #21]
 80118c2:	7da0      	ldrb	r0, [r4, #22]
 80118c4:	f080 0001 	eor.w	r0, r0, #1
 80118c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	602b      	str	r3, [r5, #0]
 80118d0:	e7ef      	b.n	80118b2 <ucdr_deserialize_endian_uint32_t+0xbe>
 80118d2:	68a2      	ldr	r2, [r4, #8]
 80118d4:	6923      	ldr	r3, [r4, #16]
 80118d6:	7da0      	ldrb	r0, [r4, #22]
 80118d8:	f884 9015 	strb.w	r9, [r4, #21]
 80118dc:	eba2 0208 	sub.w	r2, r2, r8
 80118e0:	eba3 0308 	sub.w	r3, r3, r8
 80118e4:	60a2      	str	r2, [r4, #8]
 80118e6:	6123      	str	r3, [r4, #16]
 80118e8:	f080 0001 	eor.w	r0, r0, #1
 80118ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118f0:	68a3      	ldr	r3, [r4, #8]
 80118f2:	789b      	ldrb	r3, [r3, #2]
 80118f4:	706b      	strb	r3, [r5, #1]
 80118f6:	1cab      	adds	r3, r5, #2
 80118f8:	68a2      	ldr	r2, [r4, #8]
 80118fa:	7852      	ldrb	r2, [r2, #1]
 80118fc:	f803 2b01 	strb.w	r2, [r3], #1
 8011900:	68a2      	ldr	r2, [r4, #8]
 8011902:	7812      	ldrb	r2, [r2, #0]
 8011904:	701a      	strb	r2, [r3, #0]
 8011906:	e7b2      	b.n	801186e <ucdr_deserialize_endian_uint32_t+0x7a>
 8011908:	4639      	mov	r1, r7
 801190a:	4642      	mov	r2, r8
 801190c:	4628      	mov	r0, r5
 801190e:	f008 f99d 	bl	8019c4c <memcpy>
 8011912:	68a1      	ldr	r1, [r4, #8]
 8011914:	4652      	mov	r2, sl
 8011916:	eb05 0008 	add.w	r0, r5, r8
 801191a:	f008 f997 	bl	8019c4c <memcpy>
 801191e:	e7a6      	b.n	801186e <ucdr_deserialize_endian_uint32_t+0x7a>

08011920 <ucdr_serialize_uint64_t>:
 8011920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011924:	2108      	movs	r1, #8
 8011926:	b082      	sub	sp, #8
 8011928:	4604      	mov	r4, r0
 801192a:	e9cd 2300 	strd	r2, r3, [sp]
 801192e:	f000 ff97 	bl	8012860 <ucdr_buffer_alignment>
 8011932:	4601      	mov	r1, r0
 8011934:	4620      	mov	r0, r4
 8011936:	7d67      	ldrb	r7, [r4, #21]
 8011938:	f000 ffd6 	bl	80128e8 <ucdr_advance_buffer>
 801193c:	2108      	movs	r1, #8
 801193e:	4620      	mov	r0, r4
 8011940:	f000 ff2e 	bl	80127a0 <ucdr_check_buffer_available_for>
 8011944:	2800      	cmp	r0, #0
 8011946:	d14e      	bne.n	80119e6 <ucdr_serialize_uint64_t+0xc6>
 8011948:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801194c:	42ab      	cmp	r3, r5
 801194e:	d945      	bls.n	80119dc <ucdr_serialize_uint64_t+0xbc>
 8011950:	1b5e      	subs	r6, r3, r5
 8011952:	60a3      	str	r3, [r4, #8]
 8011954:	6923      	ldr	r3, [r4, #16]
 8011956:	f1c6 0808 	rsb	r8, r6, #8
 801195a:	4433      	add	r3, r6
 801195c:	6123      	str	r3, [r4, #16]
 801195e:	4641      	mov	r1, r8
 8011960:	4620      	mov	r0, r4
 8011962:	f000 ff29 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8011966:	2800      	cmp	r0, #0
 8011968:	d074      	beq.n	8011a54 <ucdr_serialize_uint64_t+0x134>
 801196a:	7d23      	ldrb	r3, [r4, #20]
 801196c:	2b01      	cmp	r3, #1
 801196e:	f000 809b 	beq.w	8011aa8 <ucdr_serialize_uint64_t+0x188>
 8011972:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011976:	702b      	strb	r3, [r5, #0]
 8011978:	2e00      	cmp	r6, #0
 801197a:	d078      	beq.n	8011a6e <ucdr_serialize_uint64_t+0x14e>
 801197c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011980:	706b      	strb	r3, [r5, #1]
 8011982:	2e01      	cmp	r6, #1
 8011984:	d077      	beq.n	8011a76 <ucdr_serialize_uint64_t+0x156>
 8011986:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801198a:	70ab      	strb	r3, [r5, #2]
 801198c:	2e02      	cmp	r6, #2
 801198e:	d076      	beq.n	8011a7e <ucdr_serialize_uint64_t+0x15e>
 8011990:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011994:	70eb      	strb	r3, [r5, #3]
 8011996:	2e03      	cmp	r6, #3
 8011998:	d075      	beq.n	8011a86 <ucdr_serialize_uint64_t+0x166>
 801199a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801199e:	712b      	strb	r3, [r5, #4]
 80119a0:	2e04      	cmp	r6, #4
 80119a2:	d074      	beq.n	8011a8e <ucdr_serialize_uint64_t+0x16e>
 80119a4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80119a8:	716b      	strb	r3, [r5, #5]
 80119aa:	2e05      	cmp	r6, #5
 80119ac:	d073      	beq.n	8011a96 <ucdr_serialize_uint64_t+0x176>
 80119ae:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80119b2:	71ab      	strb	r3, [r5, #6]
 80119b4:	2e06      	cmp	r6, #6
 80119b6:	d072      	beq.n	8011a9e <ucdr_serialize_uint64_t+0x17e>
 80119b8:	f89d 3000 	ldrb.w	r3, [sp]
 80119bc:	71eb      	strb	r3, [r5, #7]
 80119be:	6923      	ldr	r3, [r4, #16]
 80119c0:	68a2      	ldr	r2, [r4, #8]
 80119c2:	7da0      	ldrb	r0, [r4, #22]
 80119c4:	3308      	adds	r3, #8
 80119c6:	1b9e      	subs	r6, r3, r6
 80119c8:	4442      	add	r2, r8
 80119ca:	2308      	movs	r3, #8
 80119cc:	f080 0001 	eor.w	r0, r0, #1
 80119d0:	60a2      	str	r2, [r4, #8]
 80119d2:	6126      	str	r6, [r4, #16]
 80119d4:	7563      	strb	r3, [r4, #21]
 80119d6:	b002      	add	sp, #8
 80119d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119dc:	2108      	movs	r1, #8
 80119de:	4620      	mov	r0, r4
 80119e0:	f000 feea 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 80119e4:	b350      	cbz	r0, 8011a3c <ucdr_serialize_uint64_t+0x11c>
 80119e6:	7d23      	ldrb	r3, [r4, #20]
 80119e8:	2b01      	cmp	r3, #1
 80119ea:	d02d      	beq.n	8011a48 <ucdr_serialize_uint64_t+0x128>
 80119ec:	68a3      	ldr	r3, [r4, #8]
 80119ee:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80119f2:	701a      	strb	r2, [r3, #0]
 80119f4:	68a3      	ldr	r3, [r4, #8]
 80119f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80119fa:	705a      	strb	r2, [r3, #1]
 80119fc:	68a3      	ldr	r3, [r4, #8]
 80119fe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011a02:	709a      	strb	r2, [r3, #2]
 8011a04:	68a3      	ldr	r3, [r4, #8]
 8011a06:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011a0a:	70da      	strb	r2, [r3, #3]
 8011a0c:	68a3      	ldr	r3, [r4, #8]
 8011a0e:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011a12:	711a      	strb	r2, [r3, #4]
 8011a14:	68a3      	ldr	r3, [r4, #8]
 8011a16:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011a1a:	715a      	strb	r2, [r3, #5]
 8011a1c:	68a3      	ldr	r3, [r4, #8]
 8011a1e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011a22:	719a      	strb	r2, [r3, #6]
 8011a24:	68a3      	ldr	r3, [r4, #8]
 8011a26:	f89d 2000 	ldrb.w	r2, [sp]
 8011a2a:	71da      	strb	r2, [r3, #7]
 8011a2c:	68a2      	ldr	r2, [r4, #8]
 8011a2e:	6923      	ldr	r3, [r4, #16]
 8011a30:	3208      	adds	r2, #8
 8011a32:	3308      	adds	r3, #8
 8011a34:	2108      	movs	r1, #8
 8011a36:	60a2      	str	r2, [r4, #8]
 8011a38:	6123      	str	r3, [r4, #16]
 8011a3a:	7561      	strb	r1, [r4, #21]
 8011a3c:	7da0      	ldrb	r0, [r4, #22]
 8011a3e:	f080 0001 	eor.w	r0, r0, #1
 8011a42:	b002      	add	sp, #8
 8011a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a48:	466b      	mov	r3, sp
 8011a4a:	cb03      	ldmia	r3!, {r0, r1}
 8011a4c:	68a3      	ldr	r3, [r4, #8]
 8011a4e:	6018      	str	r0, [r3, #0]
 8011a50:	6059      	str	r1, [r3, #4]
 8011a52:	e7eb      	b.n	8011a2c <ucdr_serialize_uint64_t+0x10c>
 8011a54:	68a2      	ldr	r2, [r4, #8]
 8011a56:	6923      	ldr	r3, [r4, #16]
 8011a58:	7da0      	ldrb	r0, [r4, #22]
 8011a5a:	7567      	strb	r7, [r4, #21]
 8011a5c:	1b92      	subs	r2, r2, r6
 8011a5e:	1b9b      	subs	r3, r3, r6
 8011a60:	f080 0001 	eor.w	r0, r0, #1
 8011a64:	60a2      	str	r2, [r4, #8]
 8011a66:	6123      	str	r3, [r4, #16]
 8011a68:	b002      	add	sp, #8
 8011a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a6e:	68a3      	ldr	r3, [r4, #8]
 8011a70:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011a74:	701a      	strb	r2, [r3, #0]
 8011a76:	68a3      	ldr	r3, [r4, #8]
 8011a78:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011a7c:	701a      	strb	r2, [r3, #0]
 8011a7e:	68a3      	ldr	r3, [r4, #8]
 8011a80:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011a84:	701a      	strb	r2, [r3, #0]
 8011a86:	68a3      	ldr	r3, [r4, #8]
 8011a88:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011a8c:	701a      	strb	r2, [r3, #0]
 8011a8e:	68a3      	ldr	r3, [r4, #8]
 8011a90:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011a94:	701a      	strb	r2, [r3, #0]
 8011a96:	68a3      	ldr	r3, [r4, #8]
 8011a98:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011a9c:	701a      	strb	r2, [r3, #0]
 8011a9e:	68a3      	ldr	r3, [r4, #8]
 8011aa0:	f89d 2000 	ldrb.w	r2, [sp]
 8011aa4:	701a      	strb	r2, [r3, #0]
 8011aa6:	e78a      	b.n	80119be <ucdr_serialize_uint64_t+0x9e>
 8011aa8:	4628      	mov	r0, r5
 8011aaa:	466d      	mov	r5, sp
 8011aac:	4629      	mov	r1, r5
 8011aae:	4632      	mov	r2, r6
 8011ab0:	f008 f8cc 	bl	8019c4c <memcpy>
 8011ab4:	68a0      	ldr	r0, [r4, #8]
 8011ab6:	4642      	mov	r2, r8
 8011ab8:	19a9      	adds	r1, r5, r6
 8011aba:	f008 f8c7 	bl	8019c4c <memcpy>
 8011abe:	e77e      	b.n	80119be <ucdr_serialize_uint64_t+0x9e>

08011ac0 <ucdr_serialize_int16_t>:
 8011ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ac4:	b082      	sub	sp, #8
 8011ac6:	460b      	mov	r3, r1
 8011ac8:	2102      	movs	r1, #2
 8011aca:	4604      	mov	r4, r0
 8011acc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011ad0:	f000 fec6 	bl	8012860 <ucdr_buffer_alignment>
 8011ad4:	4601      	mov	r1, r0
 8011ad6:	4620      	mov	r0, r4
 8011ad8:	7d67      	ldrb	r7, [r4, #21]
 8011ada:	f000 ff05 	bl	80128e8 <ucdr_advance_buffer>
 8011ade:	2102      	movs	r1, #2
 8011ae0:	4620      	mov	r0, r4
 8011ae2:	f000 fe5d 	bl	80127a0 <ucdr_check_buffer_available_for>
 8011ae6:	bb78      	cbnz	r0, 8011b48 <ucdr_serialize_int16_t+0x88>
 8011ae8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011aec:	42ab      	cmp	r3, r5
 8011aee:	d926      	bls.n	8011b3e <ucdr_serialize_int16_t+0x7e>
 8011af0:	1b5e      	subs	r6, r3, r5
 8011af2:	60a3      	str	r3, [r4, #8]
 8011af4:	6923      	ldr	r3, [r4, #16]
 8011af6:	f1c6 0802 	rsb	r8, r6, #2
 8011afa:	4433      	add	r3, r6
 8011afc:	6123      	str	r3, [r4, #16]
 8011afe:	4641      	mov	r1, r8
 8011b00:	4620      	mov	r0, r4
 8011b02:	f000 fe59 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8011b06:	2800      	cmp	r0, #0
 8011b08:	d03b      	beq.n	8011b82 <ucdr_serialize_int16_t+0xc2>
 8011b0a:	7d23      	ldrb	r3, [r4, #20]
 8011b0c:	2b01      	cmp	r3, #1
 8011b0e:	d04a      	beq.n	8011ba6 <ucdr_serialize_int16_t+0xe6>
 8011b10:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011b14:	702b      	strb	r3, [r5, #0]
 8011b16:	2e00      	cmp	r6, #0
 8011b18:	d040      	beq.n	8011b9c <ucdr_serialize_int16_t+0xdc>
 8011b1a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011b1e:	706b      	strb	r3, [r5, #1]
 8011b20:	6923      	ldr	r3, [r4, #16]
 8011b22:	68a2      	ldr	r2, [r4, #8]
 8011b24:	7da0      	ldrb	r0, [r4, #22]
 8011b26:	3302      	adds	r3, #2
 8011b28:	1b9e      	subs	r6, r3, r6
 8011b2a:	4442      	add	r2, r8
 8011b2c:	2302      	movs	r3, #2
 8011b2e:	f080 0001 	eor.w	r0, r0, #1
 8011b32:	60a2      	str	r2, [r4, #8]
 8011b34:	6126      	str	r6, [r4, #16]
 8011b36:	7563      	strb	r3, [r4, #21]
 8011b38:	b002      	add	sp, #8
 8011b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b3e:	2102      	movs	r1, #2
 8011b40:	4620      	mov	r0, r4
 8011b42:	f000 fe39 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8011b46:	b190      	cbz	r0, 8011b6e <ucdr_serialize_int16_t+0xae>
 8011b48:	7d23      	ldrb	r3, [r4, #20]
 8011b4a:	2b01      	cmp	r3, #1
 8011b4c:	68a3      	ldr	r3, [r4, #8]
 8011b4e:	d014      	beq.n	8011b7a <ucdr_serialize_int16_t+0xba>
 8011b50:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011b54:	701a      	strb	r2, [r3, #0]
 8011b56:	68a3      	ldr	r3, [r4, #8]
 8011b58:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011b5c:	705a      	strb	r2, [r3, #1]
 8011b5e:	68a2      	ldr	r2, [r4, #8]
 8011b60:	6923      	ldr	r3, [r4, #16]
 8011b62:	3202      	adds	r2, #2
 8011b64:	3302      	adds	r3, #2
 8011b66:	2102      	movs	r1, #2
 8011b68:	60a2      	str	r2, [r4, #8]
 8011b6a:	6123      	str	r3, [r4, #16]
 8011b6c:	7561      	strb	r1, [r4, #21]
 8011b6e:	7da0      	ldrb	r0, [r4, #22]
 8011b70:	f080 0001 	eor.w	r0, r0, #1
 8011b74:	b002      	add	sp, #8
 8011b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b7a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011b7e:	801a      	strh	r2, [r3, #0]
 8011b80:	e7ed      	b.n	8011b5e <ucdr_serialize_int16_t+0x9e>
 8011b82:	68a2      	ldr	r2, [r4, #8]
 8011b84:	6923      	ldr	r3, [r4, #16]
 8011b86:	7da0      	ldrb	r0, [r4, #22]
 8011b88:	7567      	strb	r7, [r4, #21]
 8011b8a:	1b92      	subs	r2, r2, r6
 8011b8c:	1b9b      	subs	r3, r3, r6
 8011b8e:	f080 0001 	eor.w	r0, r0, #1
 8011b92:	60a2      	str	r2, [r4, #8]
 8011b94:	6123      	str	r3, [r4, #16]
 8011b96:	b002      	add	sp, #8
 8011b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b9c:	68a3      	ldr	r3, [r4, #8]
 8011b9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011ba2:	701a      	strb	r2, [r3, #0]
 8011ba4:	e7bc      	b.n	8011b20 <ucdr_serialize_int16_t+0x60>
 8011ba6:	4628      	mov	r0, r5
 8011ba8:	f10d 0506 	add.w	r5, sp, #6
 8011bac:	4629      	mov	r1, r5
 8011bae:	4632      	mov	r2, r6
 8011bb0:	f008 f84c 	bl	8019c4c <memcpy>
 8011bb4:	68a0      	ldr	r0, [r4, #8]
 8011bb6:	4642      	mov	r2, r8
 8011bb8:	19a9      	adds	r1, r5, r6
 8011bba:	f008 f847 	bl	8019c4c <memcpy>
 8011bbe:	e7af      	b.n	8011b20 <ucdr_serialize_int16_t+0x60>

08011bc0 <ucdr_deserialize_int16_t>:
 8011bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011bc4:	460d      	mov	r5, r1
 8011bc6:	2102      	movs	r1, #2
 8011bc8:	4604      	mov	r4, r0
 8011bca:	f000 fe49 	bl	8012860 <ucdr_buffer_alignment>
 8011bce:	4601      	mov	r1, r0
 8011bd0:	4620      	mov	r0, r4
 8011bd2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011bd6:	f000 fe87 	bl	80128e8 <ucdr_advance_buffer>
 8011bda:	2102      	movs	r1, #2
 8011bdc:	4620      	mov	r0, r4
 8011bde:	f000 fddf 	bl	80127a0 <ucdr_check_buffer_available_for>
 8011be2:	bb60      	cbnz	r0, 8011c3e <ucdr_deserialize_int16_t+0x7e>
 8011be4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011be8:	42be      	cmp	r6, r7
 8011bea:	d923      	bls.n	8011c34 <ucdr_deserialize_int16_t+0x74>
 8011bec:	6923      	ldr	r3, [r4, #16]
 8011bee:	60a6      	str	r6, [r4, #8]
 8011bf0:	1bf6      	subs	r6, r6, r7
 8011bf2:	4433      	add	r3, r6
 8011bf4:	f1c6 0902 	rsb	r9, r6, #2
 8011bf8:	6123      	str	r3, [r4, #16]
 8011bfa:	4649      	mov	r1, r9
 8011bfc:	4620      	mov	r0, r4
 8011bfe:	f000 fddb 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8011c02:	2800      	cmp	r0, #0
 8011c04:	d034      	beq.n	8011c70 <ucdr_deserialize_int16_t+0xb0>
 8011c06:	7d23      	ldrb	r3, [r4, #20]
 8011c08:	2b01      	cmp	r3, #1
 8011c0a:	d042      	beq.n	8011c92 <ucdr_deserialize_int16_t+0xd2>
 8011c0c:	787b      	ldrb	r3, [r7, #1]
 8011c0e:	702b      	strb	r3, [r5, #0]
 8011c10:	2e00      	cmp	r6, #0
 8011c12:	d03a      	beq.n	8011c8a <ucdr_deserialize_int16_t+0xca>
 8011c14:	783b      	ldrb	r3, [r7, #0]
 8011c16:	706b      	strb	r3, [r5, #1]
 8011c18:	6923      	ldr	r3, [r4, #16]
 8011c1a:	68a2      	ldr	r2, [r4, #8]
 8011c1c:	7da0      	ldrb	r0, [r4, #22]
 8011c1e:	2102      	movs	r1, #2
 8011c20:	3302      	adds	r3, #2
 8011c22:	444a      	add	r2, r9
 8011c24:	1b9b      	subs	r3, r3, r6
 8011c26:	7561      	strb	r1, [r4, #21]
 8011c28:	60a2      	str	r2, [r4, #8]
 8011c2a:	6123      	str	r3, [r4, #16]
 8011c2c:	f080 0001 	eor.w	r0, r0, #1
 8011c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c34:	2102      	movs	r1, #2
 8011c36:	4620      	mov	r0, r4
 8011c38:	f000 fdbe 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8011c3c:	b180      	cbz	r0, 8011c60 <ucdr_deserialize_int16_t+0xa0>
 8011c3e:	7d23      	ldrb	r3, [r4, #20]
 8011c40:	2b01      	cmp	r3, #1
 8011c42:	68a3      	ldr	r3, [r4, #8]
 8011c44:	d011      	beq.n	8011c6a <ucdr_deserialize_int16_t+0xaa>
 8011c46:	785b      	ldrb	r3, [r3, #1]
 8011c48:	702b      	strb	r3, [r5, #0]
 8011c4a:	68a3      	ldr	r3, [r4, #8]
 8011c4c:	781b      	ldrb	r3, [r3, #0]
 8011c4e:	706b      	strb	r3, [r5, #1]
 8011c50:	68a2      	ldr	r2, [r4, #8]
 8011c52:	6923      	ldr	r3, [r4, #16]
 8011c54:	3202      	adds	r2, #2
 8011c56:	3302      	adds	r3, #2
 8011c58:	2102      	movs	r1, #2
 8011c5a:	60a2      	str	r2, [r4, #8]
 8011c5c:	6123      	str	r3, [r4, #16]
 8011c5e:	7561      	strb	r1, [r4, #21]
 8011c60:	7da0      	ldrb	r0, [r4, #22]
 8011c62:	f080 0001 	eor.w	r0, r0, #1
 8011c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c6a:	881b      	ldrh	r3, [r3, #0]
 8011c6c:	802b      	strh	r3, [r5, #0]
 8011c6e:	e7ef      	b.n	8011c50 <ucdr_deserialize_int16_t+0x90>
 8011c70:	68a2      	ldr	r2, [r4, #8]
 8011c72:	6923      	ldr	r3, [r4, #16]
 8011c74:	7da0      	ldrb	r0, [r4, #22]
 8011c76:	f884 8015 	strb.w	r8, [r4, #21]
 8011c7a:	1b92      	subs	r2, r2, r6
 8011c7c:	1b9b      	subs	r3, r3, r6
 8011c7e:	60a2      	str	r2, [r4, #8]
 8011c80:	6123      	str	r3, [r4, #16]
 8011c82:	f080 0001 	eor.w	r0, r0, #1
 8011c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c8a:	68a3      	ldr	r3, [r4, #8]
 8011c8c:	781b      	ldrb	r3, [r3, #0]
 8011c8e:	706b      	strb	r3, [r5, #1]
 8011c90:	e7c2      	b.n	8011c18 <ucdr_deserialize_int16_t+0x58>
 8011c92:	4639      	mov	r1, r7
 8011c94:	4632      	mov	r2, r6
 8011c96:	4628      	mov	r0, r5
 8011c98:	f007 ffd8 	bl	8019c4c <memcpy>
 8011c9c:	68a1      	ldr	r1, [r4, #8]
 8011c9e:	464a      	mov	r2, r9
 8011ca0:	19a8      	adds	r0, r5, r6
 8011ca2:	f007 ffd3 	bl	8019c4c <memcpy>
 8011ca6:	e7b7      	b.n	8011c18 <ucdr_deserialize_int16_t+0x58>

08011ca8 <ucdr_serialize_int32_t>:
 8011ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cac:	b082      	sub	sp, #8
 8011cae:	4604      	mov	r4, r0
 8011cb0:	9101      	str	r1, [sp, #4]
 8011cb2:	2104      	movs	r1, #4
 8011cb4:	f000 fdd4 	bl	8012860 <ucdr_buffer_alignment>
 8011cb8:	4601      	mov	r1, r0
 8011cba:	4620      	mov	r0, r4
 8011cbc:	7d67      	ldrb	r7, [r4, #21]
 8011cbe:	f000 fe13 	bl	80128e8 <ucdr_advance_buffer>
 8011cc2:	2104      	movs	r1, #4
 8011cc4:	4620      	mov	r0, r4
 8011cc6:	f000 fd6b 	bl	80127a0 <ucdr_check_buffer_available_for>
 8011cca:	2800      	cmp	r0, #0
 8011ccc:	d139      	bne.n	8011d42 <ucdr_serialize_int32_t+0x9a>
 8011cce:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011cd2:	42ab      	cmp	r3, r5
 8011cd4:	d930      	bls.n	8011d38 <ucdr_serialize_int32_t+0x90>
 8011cd6:	1b5e      	subs	r6, r3, r5
 8011cd8:	60a3      	str	r3, [r4, #8]
 8011cda:	6923      	ldr	r3, [r4, #16]
 8011cdc:	f1c6 0804 	rsb	r8, r6, #4
 8011ce0:	4433      	add	r3, r6
 8011ce2:	6123      	str	r3, [r4, #16]
 8011ce4:	4641      	mov	r1, r8
 8011ce6:	4620      	mov	r0, r4
 8011ce8:	f000 fd66 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8011cec:	2800      	cmp	r0, #0
 8011cee:	d04c      	beq.n	8011d8a <ucdr_serialize_int32_t+0xe2>
 8011cf0:	7d23      	ldrb	r3, [r4, #20]
 8011cf2:	2b01      	cmp	r3, #1
 8011cf4:	d063      	beq.n	8011dbe <ucdr_serialize_int32_t+0x116>
 8011cf6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011cfa:	702b      	strb	r3, [r5, #0]
 8011cfc:	2e00      	cmp	r6, #0
 8011cfe:	d051      	beq.n	8011da4 <ucdr_serialize_int32_t+0xfc>
 8011d00:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011d04:	706b      	strb	r3, [r5, #1]
 8011d06:	2e01      	cmp	r6, #1
 8011d08:	d050      	beq.n	8011dac <ucdr_serialize_int32_t+0x104>
 8011d0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011d0e:	70ab      	strb	r3, [r5, #2]
 8011d10:	2e02      	cmp	r6, #2
 8011d12:	d04f      	beq.n	8011db4 <ucdr_serialize_int32_t+0x10c>
 8011d14:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011d18:	70eb      	strb	r3, [r5, #3]
 8011d1a:	6923      	ldr	r3, [r4, #16]
 8011d1c:	68a2      	ldr	r2, [r4, #8]
 8011d1e:	7da0      	ldrb	r0, [r4, #22]
 8011d20:	3304      	adds	r3, #4
 8011d22:	1b9e      	subs	r6, r3, r6
 8011d24:	4442      	add	r2, r8
 8011d26:	2304      	movs	r3, #4
 8011d28:	f080 0001 	eor.w	r0, r0, #1
 8011d2c:	60a2      	str	r2, [r4, #8]
 8011d2e:	6126      	str	r6, [r4, #16]
 8011d30:	7563      	strb	r3, [r4, #21]
 8011d32:	b002      	add	sp, #8
 8011d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d38:	2104      	movs	r1, #4
 8011d3a:	4620      	mov	r0, r4
 8011d3c:	f000 fd3c 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8011d40:	b1d0      	cbz	r0, 8011d78 <ucdr_serialize_int32_t+0xd0>
 8011d42:	7d23      	ldrb	r3, [r4, #20]
 8011d44:	2b01      	cmp	r3, #1
 8011d46:	68a3      	ldr	r3, [r4, #8]
 8011d48:	d01c      	beq.n	8011d84 <ucdr_serialize_int32_t+0xdc>
 8011d4a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011d4e:	701a      	strb	r2, [r3, #0]
 8011d50:	68a3      	ldr	r3, [r4, #8]
 8011d52:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011d56:	705a      	strb	r2, [r3, #1]
 8011d58:	68a3      	ldr	r3, [r4, #8]
 8011d5a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011d5e:	709a      	strb	r2, [r3, #2]
 8011d60:	68a3      	ldr	r3, [r4, #8]
 8011d62:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011d66:	70da      	strb	r2, [r3, #3]
 8011d68:	68a2      	ldr	r2, [r4, #8]
 8011d6a:	6923      	ldr	r3, [r4, #16]
 8011d6c:	3204      	adds	r2, #4
 8011d6e:	3304      	adds	r3, #4
 8011d70:	2104      	movs	r1, #4
 8011d72:	60a2      	str	r2, [r4, #8]
 8011d74:	6123      	str	r3, [r4, #16]
 8011d76:	7561      	strb	r1, [r4, #21]
 8011d78:	7da0      	ldrb	r0, [r4, #22]
 8011d7a:	f080 0001 	eor.w	r0, r0, #1
 8011d7e:	b002      	add	sp, #8
 8011d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d84:	9a01      	ldr	r2, [sp, #4]
 8011d86:	601a      	str	r2, [r3, #0]
 8011d88:	e7ee      	b.n	8011d68 <ucdr_serialize_int32_t+0xc0>
 8011d8a:	68a2      	ldr	r2, [r4, #8]
 8011d8c:	6923      	ldr	r3, [r4, #16]
 8011d8e:	7da0      	ldrb	r0, [r4, #22]
 8011d90:	7567      	strb	r7, [r4, #21]
 8011d92:	1b92      	subs	r2, r2, r6
 8011d94:	1b9b      	subs	r3, r3, r6
 8011d96:	f080 0001 	eor.w	r0, r0, #1
 8011d9a:	60a2      	str	r2, [r4, #8]
 8011d9c:	6123      	str	r3, [r4, #16]
 8011d9e:	b002      	add	sp, #8
 8011da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011da4:	68a3      	ldr	r3, [r4, #8]
 8011da6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011daa:	701a      	strb	r2, [r3, #0]
 8011dac:	68a3      	ldr	r3, [r4, #8]
 8011dae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011db2:	701a      	strb	r2, [r3, #0]
 8011db4:	68a3      	ldr	r3, [r4, #8]
 8011db6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011dba:	701a      	strb	r2, [r3, #0]
 8011dbc:	e7ad      	b.n	8011d1a <ucdr_serialize_int32_t+0x72>
 8011dbe:	4628      	mov	r0, r5
 8011dc0:	ad01      	add	r5, sp, #4
 8011dc2:	4629      	mov	r1, r5
 8011dc4:	4632      	mov	r2, r6
 8011dc6:	f007 ff41 	bl	8019c4c <memcpy>
 8011dca:	68a0      	ldr	r0, [r4, #8]
 8011dcc:	4642      	mov	r2, r8
 8011dce:	19a9      	adds	r1, r5, r6
 8011dd0:	f007 ff3c 	bl	8019c4c <memcpy>
 8011dd4:	e7a1      	b.n	8011d1a <ucdr_serialize_int32_t+0x72>
 8011dd6:	bf00      	nop

08011dd8 <ucdr_deserialize_int32_t>:
 8011dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ddc:	460d      	mov	r5, r1
 8011dde:	2104      	movs	r1, #4
 8011de0:	4604      	mov	r4, r0
 8011de2:	f000 fd3d 	bl	8012860 <ucdr_buffer_alignment>
 8011de6:	4601      	mov	r1, r0
 8011de8:	4620      	mov	r0, r4
 8011dea:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011dee:	f000 fd7b 	bl	80128e8 <ucdr_advance_buffer>
 8011df2:	2104      	movs	r1, #4
 8011df4:	4620      	mov	r0, r4
 8011df6:	f000 fcd3 	bl	80127a0 <ucdr_check_buffer_available_for>
 8011dfa:	2800      	cmp	r0, #0
 8011dfc:	d138      	bne.n	8011e70 <ucdr_deserialize_int32_t+0x98>
 8011dfe:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011e02:	42b7      	cmp	r7, r6
 8011e04:	d92f      	bls.n	8011e66 <ucdr_deserialize_int32_t+0x8e>
 8011e06:	6923      	ldr	r3, [r4, #16]
 8011e08:	60a7      	str	r7, [r4, #8]
 8011e0a:	1bbf      	subs	r7, r7, r6
 8011e0c:	443b      	add	r3, r7
 8011e0e:	f1c7 0904 	rsb	r9, r7, #4
 8011e12:	6123      	str	r3, [r4, #16]
 8011e14:	4649      	mov	r1, r9
 8011e16:	4620      	mov	r0, r4
 8011e18:	f000 fcce 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8011e1c:	2800      	cmp	r0, #0
 8011e1e:	d046      	beq.n	8011eae <ucdr_deserialize_int32_t+0xd6>
 8011e20:	7d23      	ldrb	r3, [r4, #20]
 8011e22:	2b01      	cmp	r3, #1
 8011e24:	d05c      	beq.n	8011ee0 <ucdr_deserialize_int32_t+0x108>
 8011e26:	78f3      	ldrb	r3, [r6, #3]
 8011e28:	702b      	strb	r3, [r5, #0]
 8011e2a:	2f00      	cmp	r7, #0
 8011e2c:	d04c      	beq.n	8011ec8 <ucdr_deserialize_int32_t+0xf0>
 8011e2e:	78b3      	ldrb	r3, [r6, #2]
 8011e30:	706b      	strb	r3, [r5, #1]
 8011e32:	2f01      	cmp	r7, #1
 8011e34:	f105 0302 	add.w	r3, r5, #2
 8011e38:	d04a      	beq.n	8011ed0 <ucdr_deserialize_int32_t+0xf8>
 8011e3a:	7873      	ldrb	r3, [r6, #1]
 8011e3c:	70ab      	strb	r3, [r5, #2]
 8011e3e:	2f02      	cmp	r7, #2
 8011e40:	f105 0303 	add.w	r3, r5, #3
 8011e44:	d048      	beq.n	8011ed8 <ucdr_deserialize_int32_t+0x100>
 8011e46:	7833      	ldrb	r3, [r6, #0]
 8011e48:	70eb      	strb	r3, [r5, #3]
 8011e4a:	6923      	ldr	r3, [r4, #16]
 8011e4c:	68a2      	ldr	r2, [r4, #8]
 8011e4e:	7da0      	ldrb	r0, [r4, #22]
 8011e50:	2104      	movs	r1, #4
 8011e52:	3304      	adds	r3, #4
 8011e54:	444a      	add	r2, r9
 8011e56:	1bdb      	subs	r3, r3, r7
 8011e58:	7561      	strb	r1, [r4, #21]
 8011e5a:	60a2      	str	r2, [r4, #8]
 8011e5c:	6123      	str	r3, [r4, #16]
 8011e5e:	f080 0001 	eor.w	r0, r0, #1
 8011e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e66:	2104      	movs	r1, #4
 8011e68:	4620      	mov	r0, r4
 8011e6a:	f000 fca5 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8011e6e:	b1b0      	cbz	r0, 8011e9e <ucdr_deserialize_int32_t+0xc6>
 8011e70:	7d23      	ldrb	r3, [r4, #20]
 8011e72:	2b01      	cmp	r3, #1
 8011e74:	68a3      	ldr	r3, [r4, #8]
 8011e76:	d017      	beq.n	8011ea8 <ucdr_deserialize_int32_t+0xd0>
 8011e78:	78db      	ldrb	r3, [r3, #3]
 8011e7a:	702b      	strb	r3, [r5, #0]
 8011e7c:	68a3      	ldr	r3, [r4, #8]
 8011e7e:	789b      	ldrb	r3, [r3, #2]
 8011e80:	706b      	strb	r3, [r5, #1]
 8011e82:	68a3      	ldr	r3, [r4, #8]
 8011e84:	785b      	ldrb	r3, [r3, #1]
 8011e86:	70ab      	strb	r3, [r5, #2]
 8011e88:	68a3      	ldr	r3, [r4, #8]
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	70eb      	strb	r3, [r5, #3]
 8011e8e:	68a2      	ldr	r2, [r4, #8]
 8011e90:	6923      	ldr	r3, [r4, #16]
 8011e92:	3204      	adds	r2, #4
 8011e94:	3304      	adds	r3, #4
 8011e96:	2104      	movs	r1, #4
 8011e98:	60a2      	str	r2, [r4, #8]
 8011e9a:	6123      	str	r3, [r4, #16]
 8011e9c:	7561      	strb	r1, [r4, #21]
 8011e9e:	7da0      	ldrb	r0, [r4, #22]
 8011ea0:	f080 0001 	eor.w	r0, r0, #1
 8011ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	602b      	str	r3, [r5, #0]
 8011eac:	e7ef      	b.n	8011e8e <ucdr_deserialize_int32_t+0xb6>
 8011eae:	68a2      	ldr	r2, [r4, #8]
 8011eb0:	6923      	ldr	r3, [r4, #16]
 8011eb2:	7da0      	ldrb	r0, [r4, #22]
 8011eb4:	f884 8015 	strb.w	r8, [r4, #21]
 8011eb8:	1bd2      	subs	r2, r2, r7
 8011eba:	1bdb      	subs	r3, r3, r7
 8011ebc:	60a2      	str	r2, [r4, #8]
 8011ebe:	6123      	str	r3, [r4, #16]
 8011ec0:	f080 0001 	eor.w	r0, r0, #1
 8011ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ec8:	68a3      	ldr	r3, [r4, #8]
 8011eca:	789b      	ldrb	r3, [r3, #2]
 8011ecc:	706b      	strb	r3, [r5, #1]
 8011ece:	1cab      	adds	r3, r5, #2
 8011ed0:	68a2      	ldr	r2, [r4, #8]
 8011ed2:	7852      	ldrb	r2, [r2, #1]
 8011ed4:	f803 2b01 	strb.w	r2, [r3], #1
 8011ed8:	68a2      	ldr	r2, [r4, #8]
 8011eda:	7812      	ldrb	r2, [r2, #0]
 8011edc:	701a      	strb	r2, [r3, #0]
 8011ede:	e7b4      	b.n	8011e4a <ucdr_deserialize_int32_t+0x72>
 8011ee0:	4631      	mov	r1, r6
 8011ee2:	463a      	mov	r2, r7
 8011ee4:	4628      	mov	r0, r5
 8011ee6:	f007 feb1 	bl	8019c4c <memcpy>
 8011eea:	68a1      	ldr	r1, [r4, #8]
 8011eec:	464a      	mov	r2, r9
 8011eee:	19e8      	adds	r0, r5, r7
 8011ef0:	f007 feac 	bl	8019c4c <memcpy>
 8011ef4:	e7a9      	b.n	8011e4a <ucdr_deserialize_int32_t+0x72>
 8011ef6:	bf00      	nop

08011ef8 <ucdr_serialize_int64_t>:
 8011ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011efc:	2108      	movs	r1, #8
 8011efe:	b082      	sub	sp, #8
 8011f00:	4604      	mov	r4, r0
 8011f02:	e9cd 2300 	strd	r2, r3, [sp]
 8011f06:	f000 fcab 	bl	8012860 <ucdr_buffer_alignment>
 8011f0a:	4601      	mov	r1, r0
 8011f0c:	4620      	mov	r0, r4
 8011f0e:	7d67      	ldrb	r7, [r4, #21]
 8011f10:	f000 fcea 	bl	80128e8 <ucdr_advance_buffer>
 8011f14:	2108      	movs	r1, #8
 8011f16:	4620      	mov	r0, r4
 8011f18:	f000 fc42 	bl	80127a0 <ucdr_check_buffer_available_for>
 8011f1c:	2800      	cmp	r0, #0
 8011f1e:	d14e      	bne.n	8011fbe <ucdr_serialize_int64_t+0xc6>
 8011f20:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011f24:	42ab      	cmp	r3, r5
 8011f26:	d945      	bls.n	8011fb4 <ucdr_serialize_int64_t+0xbc>
 8011f28:	1b5e      	subs	r6, r3, r5
 8011f2a:	60a3      	str	r3, [r4, #8]
 8011f2c:	6923      	ldr	r3, [r4, #16]
 8011f2e:	f1c6 0808 	rsb	r8, r6, #8
 8011f32:	4433      	add	r3, r6
 8011f34:	6123      	str	r3, [r4, #16]
 8011f36:	4641      	mov	r1, r8
 8011f38:	4620      	mov	r0, r4
 8011f3a:	f000 fc3d 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8011f3e:	2800      	cmp	r0, #0
 8011f40:	d074      	beq.n	801202c <ucdr_serialize_int64_t+0x134>
 8011f42:	7d23      	ldrb	r3, [r4, #20]
 8011f44:	2b01      	cmp	r3, #1
 8011f46:	f000 809b 	beq.w	8012080 <ucdr_serialize_int64_t+0x188>
 8011f4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011f4e:	702b      	strb	r3, [r5, #0]
 8011f50:	2e00      	cmp	r6, #0
 8011f52:	d078      	beq.n	8012046 <ucdr_serialize_int64_t+0x14e>
 8011f54:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011f58:	706b      	strb	r3, [r5, #1]
 8011f5a:	2e01      	cmp	r6, #1
 8011f5c:	d077      	beq.n	801204e <ucdr_serialize_int64_t+0x156>
 8011f5e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011f62:	70ab      	strb	r3, [r5, #2]
 8011f64:	2e02      	cmp	r6, #2
 8011f66:	d076      	beq.n	8012056 <ucdr_serialize_int64_t+0x15e>
 8011f68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011f6c:	70eb      	strb	r3, [r5, #3]
 8011f6e:	2e03      	cmp	r6, #3
 8011f70:	d075      	beq.n	801205e <ucdr_serialize_int64_t+0x166>
 8011f72:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011f76:	712b      	strb	r3, [r5, #4]
 8011f78:	2e04      	cmp	r6, #4
 8011f7a:	d074      	beq.n	8012066 <ucdr_serialize_int64_t+0x16e>
 8011f7c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011f80:	716b      	strb	r3, [r5, #5]
 8011f82:	2e05      	cmp	r6, #5
 8011f84:	d073      	beq.n	801206e <ucdr_serialize_int64_t+0x176>
 8011f86:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8011f8a:	71ab      	strb	r3, [r5, #6]
 8011f8c:	2e06      	cmp	r6, #6
 8011f8e:	d072      	beq.n	8012076 <ucdr_serialize_int64_t+0x17e>
 8011f90:	f89d 3000 	ldrb.w	r3, [sp]
 8011f94:	71eb      	strb	r3, [r5, #7]
 8011f96:	6923      	ldr	r3, [r4, #16]
 8011f98:	68a2      	ldr	r2, [r4, #8]
 8011f9a:	7da0      	ldrb	r0, [r4, #22]
 8011f9c:	3308      	adds	r3, #8
 8011f9e:	1b9e      	subs	r6, r3, r6
 8011fa0:	4442      	add	r2, r8
 8011fa2:	2308      	movs	r3, #8
 8011fa4:	f080 0001 	eor.w	r0, r0, #1
 8011fa8:	60a2      	str	r2, [r4, #8]
 8011faa:	6126      	str	r6, [r4, #16]
 8011fac:	7563      	strb	r3, [r4, #21]
 8011fae:	b002      	add	sp, #8
 8011fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fb4:	2108      	movs	r1, #8
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	f000 fbfe 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8011fbc:	b350      	cbz	r0, 8012014 <ucdr_serialize_int64_t+0x11c>
 8011fbe:	7d23      	ldrb	r3, [r4, #20]
 8011fc0:	2b01      	cmp	r3, #1
 8011fc2:	d02d      	beq.n	8012020 <ucdr_serialize_int64_t+0x128>
 8011fc4:	68a3      	ldr	r3, [r4, #8]
 8011fc6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011fca:	701a      	strb	r2, [r3, #0]
 8011fcc:	68a3      	ldr	r3, [r4, #8]
 8011fce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011fd2:	705a      	strb	r2, [r3, #1]
 8011fd4:	68a3      	ldr	r3, [r4, #8]
 8011fd6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011fda:	709a      	strb	r2, [r3, #2]
 8011fdc:	68a3      	ldr	r3, [r4, #8]
 8011fde:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011fe2:	70da      	strb	r2, [r3, #3]
 8011fe4:	68a3      	ldr	r3, [r4, #8]
 8011fe6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011fea:	711a      	strb	r2, [r3, #4]
 8011fec:	68a3      	ldr	r3, [r4, #8]
 8011fee:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011ff2:	715a      	strb	r2, [r3, #5]
 8011ff4:	68a3      	ldr	r3, [r4, #8]
 8011ff6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8011ffa:	719a      	strb	r2, [r3, #6]
 8011ffc:	68a3      	ldr	r3, [r4, #8]
 8011ffe:	f89d 2000 	ldrb.w	r2, [sp]
 8012002:	71da      	strb	r2, [r3, #7]
 8012004:	68a2      	ldr	r2, [r4, #8]
 8012006:	6923      	ldr	r3, [r4, #16]
 8012008:	3208      	adds	r2, #8
 801200a:	3308      	adds	r3, #8
 801200c:	2108      	movs	r1, #8
 801200e:	60a2      	str	r2, [r4, #8]
 8012010:	6123      	str	r3, [r4, #16]
 8012012:	7561      	strb	r1, [r4, #21]
 8012014:	7da0      	ldrb	r0, [r4, #22]
 8012016:	f080 0001 	eor.w	r0, r0, #1
 801201a:	b002      	add	sp, #8
 801201c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012020:	466b      	mov	r3, sp
 8012022:	cb03      	ldmia	r3!, {r0, r1}
 8012024:	68a3      	ldr	r3, [r4, #8]
 8012026:	6018      	str	r0, [r3, #0]
 8012028:	6059      	str	r1, [r3, #4]
 801202a:	e7eb      	b.n	8012004 <ucdr_serialize_int64_t+0x10c>
 801202c:	68a2      	ldr	r2, [r4, #8]
 801202e:	6923      	ldr	r3, [r4, #16]
 8012030:	7da0      	ldrb	r0, [r4, #22]
 8012032:	7567      	strb	r7, [r4, #21]
 8012034:	1b92      	subs	r2, r2, r6
 8012036:	1b9b      	subs	r3, r3, r6
 8012038:	f080 0001 	eor.w	r0, r0, #1
 801203c:	60a2      	str	r2, [r4, #8]
 801203e:	6123      	str	r3, [r4, #16]
 8012040:	b002      	add	sp, #8
 8012042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012046:	68a3      	ldr	r3, [r4, #8]
 8012048:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801204c:	701a      	strb	r2, [r3, #0]
 801204e:	68a3      	ldr	r3, [r4, #8]
 8012050:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012054:	701a      	strb	r2, [r3, #0]
 8012056:	68a3      	ldr	r3, [r4, #8]
 8012058:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801205c:	701a      	strb	r2, [r3, #0]
 801205e:	68a3      	ldr	r3, [r4, #8]
 8012060:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012064:	701a      	strb	r2, [r3, #0]
 8012066:	68a3      	ldr	r3, [r4, #8]
 8012068:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801206c:	701a      	strb	r2, [r3, #0]
 801206e:	68a3      	ldr	r3, [r4, #8]
 8012070:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012074:	701a      	strb	r2, [r3, #0]
 8012076:	68a3      	ldr	r3, [r4, #8]
 8012078:	f89d 2000 	ldrb.w	r2, [sp]
 801207c:	701a      	strb	r2, [r3, #0]
 801207e:	e78a      	b.n	8011f96 <ucdr_serialize_int64_t+0x9e>
 8012080:	4628      	mov	r0, r5
 8012082:	466d      	mov	r5, sp
 8012084:	4629      	mov	r1, r5
 8012086:	4632      	mov	r2, r6
 8012088:	f007 fde0 	bl	8019c4c <memcpy>
 801208c:	68a0      	ldr	r0, [r4, #8]
 801208e:	4642      	mov	r2, r8
 8012090:	19a9      	adds	r1, r5, r6
 8012092:	f007 fddb 	bl	8019c4c <memcpy>
 8012096:	e77e      	b.n	8011f96 <ucdr_serialize_int64_t+0x9e>

08012098 <ucdr_deserialize_int64_t>:
 8012098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801209c:	460d      	mov	r5, r1
 801209e:	2108      	movs	r1, #8
 80120a0:	4604      	mov	r4, r0
 80120a2:	f000 fbdd 	bl	8012860 <ucdr_buffer_alignment>
 80120a6:	4601      	mov	r1, r0
 80120a8:	4620      	mov	r0, r4
 80120aa:	f894 9015 	ldrb.w	r9, [r4, #21]
 80120ae:	f000 fc1b 	bl	80128e8 <ucdr_advance_buffer>
 80120b2:	2108      	movs	r1, #8
 80120b4:	4620      	mov	r0, r4
 80120b6:	f000 fb73 	bl	80127a0 <ucdr_check_buffer_available_for>
 80120ba:	2800      	cmp	r0, #0
 80120bc:	d151      	bne.n	8012162 <ucdr_deserialize_int64_t+0xca>
 80120be:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80120c2:	42be      	cmp	r6, r7
 80120c4:	d948      	bls.n	8012158 <ucdr_deserialize_int64_t+0xc0>
 80120c6:	6923      	ldr	r3, [r4, #16]
 80120c8:	60a6      	str	r6, [r4, #8]
 80120ca:	1bf6      	subs	r6, r6, r7
 80120cc:	4433      	add	r3, r6
 80120ce:	f1c6 0808 	rsb	r8, r6, #8
 80120d2:	6123      	str	r3, [r4, #16]
 80120d4:	4641      	mov	r1, r8
 80120d6:	4620      	mov	r0, r4
 80120d8:	f000 fb6e 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 80120dc:	2800      	cmp	r0, #0
 80120de:	d06d      	beq.n	80121bc <ucdr_deserialize_int64_t+0x124>
 80120e0:	7d23      	ldrb	r3, [r4, #20]
 80120e2:	2b01      	cmp	r3, #1
 80120e4:	f000 8093 	beq.w	801220e <ucdr_deserialize_int64_t+0x176>
 80120e8:	79fb      	ldrb	r3, [r7, #7]
 80120ea:	702b      	strb	r3, [r5, #0]
 80120ec:	2e00      	cmp	r6, #0
 80120ee:	d072      	beq.n	80121d6 <ucdr_deserialize_int64_t+0x13e>
 80120f0:	79bb      	ldrb	r3, [r7, #6]
 80120f2:	706b      	strb	r3, [r5, #1]
 80120f4:	2e01      	cmp	r6, #1
 80120f6:	f105 0302 	add.w	r3, r5, #2
 80120fa:	d070      	beq.n	80121de <ucdr_deserialize_int64_t+0x146>
 80120fc:	797b      	ldrb	r3, [r7, #5]
 80120fe:	70ab      	strb	r3, [r5, #2]
 8012100:	2e02      	cmp	r6, #2
 8012102:	f105 0303 	add.w	r3, r5, #3
 8012106:	d06e      	beq.n	80121e6 <ucdr_deserialize_int64_t+0x14e>
 8012108:	793b      	ldrb	r3, [r7, #4]
 801210a:	70eb      	strb	r3, [r5, #3]
 801210c:	2e03      	cmp	r6, #3
 801210e:	f105 0304 	add.w	r3, r5, #4
 8012112:	d06c      	beq.n	80121ee <ucdr_deserialize_int64_t+0x156>
 8012114:	78fb      	ldrb	r3, [r7, #3]
 8012116:	712b      	strb	r3, [r5, #4]
 8012118:	2e04      	cmp	r6, #4
 801211a:	f105 0305 	add.w	r3, r5, #5
 801211e:	d06a      	beq.n	80121f6 <ucdr_deserialize_int64_t+0x15e>
 8012120:	78bb      	ldrb	r3, [r7, #2]
 8012122:	716b      	strb	r3, [r5, #5]
 8012124:	2e05      	cmp	r6, #5
 8012126:	f105 0306 	add.w	r3, r5, #6
 801212a:	d068      	beq.n	80121fe <ucdr_deserialize_int64_t+0x166>
 801212c:	787b      	ldrb	r3, [r7, #1]
 801212e:	71ab      	strb	r3, [r5, #6]
 8012130:	2e06      	cmp	r6, #6
 8012132:	f105 0307 	add.w	r3, r5, #7
 8012136:	d066      	beq.n	8012206 <ucdr_deserialize_int64_t+0x16e>
 8012138:	783b      	ldrb	r3, [r7, #0]
 801213a:	71eb      	strb	r3, [r5, #7]
 801213c:	6923      	ldr	r3, [r4, #16]
 801213e:	68a2      	ldr	r2, [r4, #8]
 8012140:	7da0      	ldrb	r0, [r4, #22]
 8012142:	3308      	adds	r3, #8
 8012144:	1b9e      	subs	r6, r3, r6
 8012146:	2308      	movs	r3, #8
 8012148:	4442      	add	r2, r8
 801214a:	7563      	strb	r3, [r4, #21]
 801214c:	60a2      	str	r2, [r4, #8]
 801214e:	6126      	str	r6, [r4, #16]
 8012150:	f080 0001 	eor.w	r0, r0, #1
 8012154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012158:	2108      	movs	r1, #8
 801215a:	4620      	mov	r0, r4
 801215c:	f000 fb2c 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8012160:	b310      	cbz	r0, 80121a8 <ucdr_deserialize_int64_t+0x110>
 8012162:	7d23      	ldrb	r3, [r4, #20]
 8012164:	2b01      	cmp	r3, #1
 8012166:	68a3      	ldr	r3, [r4, #8]
 8012168:	d023      	beq.n	80121b2 <ucdr_deserialize_int64_t+0x11a>
 801216a:	79db      	ldrb	r3, [r3, #7]
 801216c:	702b      	strb	r3, [r5, #0]
 801216e:	68a3      	ldr	r3, [r4, #8]
 8012170:	799b      	ldrb	r3, [r3, #6]
 8012172:	706b      	strb	r3, [r5, #1]
 8012174:	68a3      	ldr	r3, [r4, #8]
 8012176:	795b      	ldrb	r3, [r3, #5]
 8012178:	70ab      	strb	r3, [r5, #2]
 801217a:	68a3      	ldr	r3, [r4, #8]
 801217c:	791b      	ldrb	r3, [r3, #4]
 801217e:	70eb      	strb	r3, [r5, #3]
 8012180:	68a3      	ldr	r3, [r4, #8]
 8012182:	78db      	ldrb	r3, [r3, #3]
 8012184:	712b      	strb	r3, [r5, #4]
 8012186:	68a3      	ldr	r3, [r4, #8]
 8012188:	789b      	ldrb	r3, [r3, #2]
 801218a:	716b      	strb	r3, [r5, #5]
 801218c:	68a3      	ldr	r3, [r4, #8]
 801218e:	785b      	ldrb	r3, [r3, #1]
 8012190:	71ab      	strb	r3, [r5, #6]
 8012192:	68a3      	ldr	r3, [r4, #8]
 8012194:	781b      	ldrb	r3, [r3, #0]
 8012196:	71eb      	strb	r3, [r5, #7]
 8012198:	68a2      	ldr	r2, [r4, #8]
 801219a:	6923      	ldr	r3, [r4, #16]
 801219c:	3208      	adds	r2, #8
 801219e:	3308      	adds	r3, #8
 80121a0:	2108      	movs	r1, #8
 80121a2:	60a2      	str	r2, [r4, #8]
 80121a4:	6123      	str	r3, [r4, #16]
 80121a6:	7561      	strb	r1, [r4, #21]
 80121a8:	7da0      	ldrb	r0, [r4, #22]
 80121aa:	f080 0001 	eor.w	r0, r0, #1
 80121ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121b2:	681a      	ldr	r2, [r3, #0]
 80121b4:	685b      	ldr	r3, [r3, #4]
 80121b6:	606b      	str	r3, [r5, #4]
 80121b8:	602a      	str	r2, [r5, #0]
 80121ba:	e7ed      	b.n	8012198 <ucdr_deserialize_int64_t+0x100>
 80121bc:	68a2      	ldr	r2, [r4, #8]
 80121be:	6923      	ldr	r3, [r4, #16]
 80121c0:	7da0      	ldrb	r0, [r4, #22]
 80121c2:	f884 9015 	strb.w	r9, [r4, #21]
 80121c6:	1b92      	subs	r2, r2, r6
 80121c8:	1b9b      	subs	r3, r3, r6
 80121ca:	60a2      	str	r2, [r4, #8]
 80121cc:	6123      	str	r3, [r4, #16]
 80121ce:	f080 0001 	eor.w	r0, r0, #1
 80121d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80121d6:	68a3      	ldr	r3, [r4, #8]
 80121d8:	799b      	ldrb	r3, [r3, #6]
 80121da:	706b      	strb	r3, [r5, #1]
 80121dc:	1cab      	adds	r3, r5, #2
 80121de:	68a2      	ldr	r2, [r4, #8]
 80121e0:	7952      	ldrb	r2, [r2, #5]
 80121e2:	f803 2b01 	strb.w	r2, [r3], #1
 80121e6:	68a2      	ldr	r2, [r4, #8]
 80121e8:	7912      	ldrb	r2, [r2, #4]
 80121ea:	f803 2b01 	strb.w	r2, [r3], #1
 80121ee:	68a2      	ldr	r2, [r4, #8]
 80121f0:	78d2      	ldrb	r2, [r2, #3]
 80121f2:	f803 2b01 	strb.w	r2, [r3], #1
 80121f6:	68a2      	ldr	r2, [r4, #8]
 80121f8:	7892      	ldrb	r2, [r2, #2]
 80121fa:	f803 2b01 	strb.w	r2, [r3], #1
 80121fe:	68a2      	ldr	r2, [r4, #8]
 8012200:	7852      	ldrb	r2, [r2, #1]
 8012202:	f803 2b01 	strb.w	r2, [r3], #1
 8012206:	68a2      	ldr	r2, [r4, #8]
 8012208:	7812      	ldrb	r2, [r2, #0]
 801220a:	701a      	strb	r2, [r3, #0]
 801220c:	e796      	b.n	801213c <ucdr_deserialize_int64_t+0xa4>
 801220e:	4639      	mov	r1, r7
 8012210:	4632      	mov	r2, r6
 8012212:	4628      	mov	r0, r5
 8012214:	f007 fd1a 	bl	8019c4c <memcpy>
 8012218:	68a1      	ldr	r1, [r4, #8]
 801221a:	4642      	mov	r2, r8
 801221c:	19a8      	adds	r0, r5, r6
 801221e:	f007 fd15 	bl	8019c4c <memcpy>
 8012222:	e78b      	b.n	801213c <ucdr_deserialize_int64_t+0xa4>

08012224 <ucdr_serialize_float>:
 8012224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012228:	2104      	movs	r1, #4
 801222a:	b082      	sub	sp, #8
 801222c:	4604      	mov	r4, r0
 801222e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012232:	f000 fb15 	bl	8012860 <ucdr_buffer_alignment>
 8012236:	4601      	mov	r1, r0
 8012238:	4620      	mov	r0, r4
 801223a:	7d67      	ldrb	r7, [r4, #21]
 801223c:	f000 fb54 	bl	80128e8 <ucdr_advance_buffer>
 8012240:	2104      	movs	r1, #4
 8012242:	4620      	mov	r0, r4
 8012244:	f000 faac 	bl	80127a0 <ucdr_check_buffer_available_for>
 8012248:	2800      	cmp	r0, #0
 801224a:	d139      	bne.n	80122c0 <ucdr_serialize_float+0x9c>
 801224c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012250:	42ab      	cmp	r3, r5
 8012252:	d930      	bls.n	80122b6 <ucdr_serialize_float+0x92>
 8012254:	1b5e      	subs	r6, r3, r5
 8012256:	60a3      	str	r3, [r4, #8]
 8012258:	6923      	ldr	r3, [r4, #16]
 801225a:	f1c6 0804 	rsb	r8, r6, #4
 801225e:	4433      	add	r3, r6
 8012260:	6123      	str	r3, [r4, #16]
 8012262:	4641      	mov	r1, r8
 8012264:	4620      	mov	r0, r4
 8012266:	f000 faa7 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 801226a:	2800      	cmp	r0, #0
 801226c:	d04c      	beq.n	8012308 <ucdr_serialize_float+0xe4>
 801226e:	7d23      	ldrb	r3, [r4, #20]
 8012270:	2b01      	cmp	r3, #1
 8012272:	d063      	beq.n	801233c <ucdr_serialize_float+0x118>
 8012274:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012278:	702b      	strb	r3, [r5, #0]
 801227a:	2e00      	cmp	r6, #0
 801227c:	d051      	beq.n	8012322 <ucdr_serialize_float+0xfe>
 801227e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012282:	706b      	strb	r3, [r5, #1]
 8012284:	2e01      	cmp	r6, #1
 8012286:	d050      	beq.n	801232a <ucdr_serialize_float+0x106>
 8012288:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801228c:	70ab      	strb	r3, [r5, #2]
 801228e:	2e02      	cmp	r6, #2
 8012290:	d04f      	beq.n	8012332 <ucdr_serialize_float+0x10e>
 8012292:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012296:	70eb      	strb	r3, [r5, #3]
 8012298:	6923      	ldr	r3, [r4, #16]
 801229a:	68a2      	ldr	r2, [r4, #8]
 801229c:	7da0      	ldrb	r0, [r4, #22]
 801229e:	3304      	adds	r3, #4
 80122a0:	1b9e      	subs	r6, r3, r6
 80122a2:	4442      	add	r2, r8
 80122a4:	2304      	movs	r3, #4
 80122a6:	f080 0001 	eor.w	r0, r0, #1
 80122aa:	60a2      	str	r2, [r4, #8]
 80122ac:	6126      	str	r6, [r4, #16]
 80122ae:	7563      	strb	r3, [r4, #21]
 80122b0:	b002      	add	sp, #8
 80122b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122b6:	2104      	movs	r1, #4
 80122b8:	4620      	mov	r0, r4
 80122ba:	f000 fa7d 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 80122be:	b1d0      	cbz	r0, 80122f6 <ucdr_serialize_float+0xd2>
 80122c0:	7d23      	ldrb	r3, [r4, #20]
 80122c2:	2b01      	cmp	r3, #1
 80122c4:	68a3      	ldr	r3, [r4, #8]
 80122c6:	d01c      	beq.n	8012302 <ucdr_serialize_float+0xde>
 80122c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80122cc:	701a      	strb	r2, [r3, #0]
 80122ce:	68a3      	ldr	r3, [r4, #8]
 80122d0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80122d4:	705a      	strb	r2, [r3, #1]
 80122d6:	68a3      	ldr	r3, [r4, #8]
 80122d8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80122dc:	709a      	strb	r2, [r3, #2]
 80122de:	68a3      	ldr	r3, [r4, #8]
 80122e0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80122e4:	70da      	strb	r2, [r3, #3]
 80122e6:	68a2      	ldr	r2, [r4, #8]
 80122e8:	6923      	ldr	r3, [r4, #16]
 80122ea:	3204      	adds	r2, #4
 80122ec:	3304      	adds	r3, #4
 80122ee:	2104      	movs	r1, #4
 80122f0:	60a2      	str	r2, [r4, #8]
 80122f2:	6123      	str	r3, [r4, #16]
 80122f4:	7561      	strb	r1, [r4, #21]
 80122f6:	7da0      	ldrb	r0, [r4, #22]
 80122f8:	f080 0001 	eor.w	r0, r0, #1
 80122fc:	b002      	add	sp, #8
 80122fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012302:	9a01      	ldr	r2, [sp, #4]
 8012304:	601a      	str	r2, [r3, #0]
 8012306:	e7ee      	b.n	80122e6 <ucdr_serialize_float+0xc2>
 8012308:	68a2      	ldr	r2, [r4, #8]
 801230a:	6923      	ldr	r3, [r4, #16]
 801230c:	7da0      	ldrb	r0, [r4, #22]
 801230e:	7567      	strb	r7, [r4, #21]
 8012310:	1b92      	subs	r2, r2, r6
 8012312:	1b9b      	subs	r3, r3, r6
 8012314:	f080 0001 	eor.w	r0, r0, #1
 8012318:	60a2      	str	r2, [r4, #8]
 801231a:	6123      	str	r3, [r4, #16]
 801231c:	b002      	add	sp, #8
 801231e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012322:	68a3      	ldr	r3, [r4, #8]
 8012324:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012328:	701a      	strb	r2, [r3, #0]
 801232a:	68a3      	ldr	r3, [r4, #8]
 801232c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012330:	701a      	strb	r2, [r3, #0]
 8012332:	68a3      	ldr	r3, [r4, #8]
 8012334:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012338:	701a      	strb	r2, [r3, #0]
 801233a:	e7ad      	b.n	8012298 <ucdr_serialize_float+0x74>
 801233c:	4628      	mov	r0, r5
 801233e:	ad01      	add	r5, sp, #4
 8012340:	4629      	mov	r1, r5
 8012342:	4632      	mov	r2, r6
 8012344:	f007 fc82 	bl	8019c4c <memcpy>
 8012348:	68a0      	ldr	r0, [r4, #8]
 801234a:	4642      	mov	r2, r8
 801234c:	19a9      	adds	r1, r5, r6
 801234e:	f007 fc7d 	bl	8019c4c <memcpy>
 8012352:	e7a1      	b.n	8012298 <ucdr_serialize_float+0x74>

08012354 <ucdr_deserialize_float>:
 8012354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012358:	460d      	mov	r5, r1
 801235a:	2104      	movs	r1, #4
 801235c:	4604      	mov	r4, r0
 801235e:	f000 fa7f 	bl	8012860 <ucdr_buffer_alignment>
 8012362:	4601      	mov	r1, r0
 8012364:	4620      	mov	r0, r4
 8012366:	f894 8015 	ldrb.w	r8, [r4, #21]
 801236a:	f000 fabd 	bl	80128e8 <ucdr_advance_buffer>
 801236e:	2104      	movs	r1, #4
 8012370:	4620      	mov	r0, r4
 8012372:	f000 fa15 	bl	80127a0 <ucdr_check_buffer_available_for>
 8012376:	2800      	cmp	r0, #0
 8012378:	d138      	bne.n	80123ec <ucdr_deserialize_float+0x98>
 801237a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801237e:	42b7      	cmp	r7, r6
 8012380:	d92f      	bls.n	80123e2 <ucdr_deserialize_float+0x8e>
 8012382:	6923      	ldr	r3, [r4, #16]
 8012384:	60a7      	str	r7, [r4, #8]
 8012386:	1bbf      	subs	r7, r7, r6
 8012388:	443b      	add	r3, r7
 801238a:	f1c7 0904 	rsb	r9, r7, #4
 801238e:	6123      	str	r3, [r4, #16]
 8012390:	4649      	mov	r1, r9
 8012392:	4620      	mov	r0, r4
 8012394:	f000 fa10 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8012398:	2800      	cmp	r0, #0
 801239a:	d046      	beq.n	801242a <ucdr_deserialize_float+0xd6>
 801239c:	7d23      	ldrb	r3, [r4, #20]
 801239e:	2b01      	cmp	r3, #1
 80123a0:	d05c      	beq.n	801245c <ucdr_deserialize_float+0x108>
 80123a2:	78f3      	ldrb	r3, [r6, #3]
 80123a4:	702b      	strb	r3, [r5, #0]
 80123a6:	2f00      	cmp	r7, #0
 80123a8:	d04c      	beq.n	8012444 <ucdr_deserialize_float+0xf0>
 80123aa:	78b3      	ldrb	r3, [r6, #2]
 80123ac:	706b      	strb	r3, [r5, #1]
 80123ae:	2f01      	cmp	r7, #1
 80123b0:	f105 0302 	add.w	r3, r5, #2
 80123b4:	d04a      	beq.n	801244c <ucdr_deserialize_float+0xf8>
 80123b6:	7873      	ldrb	r3, [r6, #1]
 80123b8:	70ab      	strb	r3, [r5, #2]
 80123ba:	2f02      	cmp	r7, #2
 80123bc:	f105 0303 	add.w	r3, r5, #3
 80123c0:	d048      	beq.n	8012454 <ucdr_deserialize_float+0x100>
 80123c2:	7833      	ldrb	r3, [r6, #0]
 80123c4:	70eb      	strb	r3, [r5, #3]
 80123c6:	6923      	ldr	r3, [r4, #16]
 80123c8:	68a2      	ldr	r2, [r4, #8]
 80123ca:	7da0      	ldrb	r0, [r4, #22]
 80123cc:	2104      	movs	r1, #4
 80123ce:	3304      	adds	r3, #4
 80123d0:	444a      	add	r2, r9
 80123d2:	1bdb      	subs	r3, r3, r7
 80123d4:	7561      	strb	r1, [r4, #21]
 80123d6:	60a2      	str	r2, [r4, #8]
 80123d8:	6123      	str	r3, [r4, #16]
 80123da:	f080 0001 	eor.w	r0, r0, #1
 80123de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123e2:	2104      	movs	r1, #4
 80123e4:	4620      	mov	r0, r4
 80123e6:	f000 f9e7 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 80123ea:	b1b0      	cbz	r0, 801241a <ucdr_deserialize_float+0xc6>
 80123ec:	7d23      	ldrb	r3, [r4, #20]
 80123ee:	2b01      	cmp	r3, #1
 80123f0:	68a3      	ldr	r3, [r4, #8]
 80123f2:	d017      	beq.n	8012424 <ucdr_deserialize_float+0xd0>
 80123f4:	78db      	ldrb	r3, [r3, #3]
 80123f6:	702b      	strb	r3, [r5, #0]
 80123f8:	68a3      	ldr	r3, [r4, #8]
 80123fa:	789b      	ldrb	r3, [r3, #2]
 80123fc:	706b      	strb	r3, [r5, #1]
 80123fe:	68a3      	ldr	r3, [r4, #8]
 8012400:	785b      	ldrb	r3, [r3, #1]
 8012402:	70ab      	strb	r3, [r5, #2]
 8012404:	68a3      	ldr	r3, [r4, #8]
 8012406:	781b      	ldrb	r3, [r3, #0]
 8012408:	70eb      	strb	r3, [r5, #3]
 801240a:	68a2      	ldr	r2, [r4, #8]
 801240c:	6923      	ldr	r3, [r4, #16]
 801240e:	3204      	adds	r2, #4
 8012410:	3304      	adds	r3, #4
 8012412:	2104      	movs	r1, #4
 8012414:	60a2      	str	r2, [r4, #8]
 8012416:	6123      	str	r3, [r4, #16]
 8012418:	7561      	strb	r1, [r4, #21]
 801241a:	7da0      	ldrb	r0, [r4, #22]
 801241c:	f080 0001 	eor.w	r0, r0, #1
 8012420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	602b      	str	r3, [r5, #0]
 8012428:	e7ef      	b.n	801240a <ucdr_deserialize_float+0xb6>
 801242a:	68a2      	ldr	r2, [r4, #8]
 801242c:	6923      	ldr	r3, [r4, #16]
 801242e:	7da0      	ldrb	r0, [r4, #22]
 8012430:	f884 8015 	strb.w	r8, [r4, #21]
 8012434:	1bd2      	subs	r2, r2, r7
 8012436:	1bdb      	subs	r3, r3, r7
 8012438:	60a2      	str	r2, [r4, #8]
 801243a:	6123      	str	r3, [r4, #16]
 801243c:	f080 0001 	eor.w	r0, r0, #1
 8012440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012444:	68a3      	ldr	r3, [r4, #8]
 8012446:	789b      	ldrb	r3, [r3, #2]
 8012448:	706b      	strb	r3, [r5, #1]
 801244a:	1cab      	adds	r3, r5, #2
 801244c:	68a2      	ldr	r2, [r4, #8]
 801244e:	7852      	ldrb	r2, [r2, #1]
 8012450:	f803 2b01 	strb.w	r2, [r3], #1
 8012454:	68a2      	ldr	r2, [r4, #8]
 8012456:	7812      	ldrb	r2, [r2, #0]
 8012458:	701a      	strb	r2, [r3, #0]
 801245a:	e7b4      	b.n	80123c6 <ucdr_deserialize_float+0x72>
 801245c:	4631      	mov	r1, r6
 801245e:	463a      	mov	r2, r7
 8012460:	4628      	mov	r0, r5
 8012462:	f007 fbf3 	bl	8019c4c <memcpy>
 8012466:	68a1      	ldr	r1, [r4, #8]
 8012468:	464a      	mov	r2, r9
 801246a:	19e8      	adds	r0, r5, r7
 801246c:	f007 fbee 	bl	8019c4c <memcpy>
 8012470:	e7a9      	b.n	80123c6 <ucdr_deserialize_float+0x72>
 8012472:	bf00      	nop

08012474 <ucdr_serialize_double>:
 8012474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012478:	2108      	movs	r1, #8
 801247a:	b082      	sub	sp, #8
 801247c:	4604      	mov	r4, r0
 801247e:	ed8d 0b00 	vstr	d0, [sp]
 8012482:	f000 f9ed 	bl	8012860 <ucdr_buffer_alignment>
 8012486:	4601      	mov	r1, r0
 8012488:	4620      	mov	r0, r4
 801248a:	7d67      	ldrb	r7, [r4, #21]
 801248c:	f000 fa2c 	bl	80128e8 <ucdr_advance_buffer>
 8012490:	2108      	movs	r1, #8
 8012492:	4620      	mov	r0, r4
 8012494:	f000 f984 	bl	80127a0 <ucdr_check_buffer_available_for>
 8012498:	2800      	cmp	r0, #0
 801249a:	d14e      	bne.n	801253a <ucdr_serialize_double+0xc6>
 801249c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80124a0:	42ab      	cmp	r3, r5
 80124a2:	d945      	bls.n	8012530 <ucdr_serialize_double+0xbc>
 80124a4:	1b5e      	subs	r6, r3, r5
 80124a6:	60a3      	str	r3, [r4, #8]
 80124a8:	6923      	ldr	r3, [r4, #16]
 80124aa:	f1c6 0808 	rsb	r8, r6, #8
 80124ae:	4433      	add	r3, r6
 80124b0:	6123      	str	r3, [r4, #16]
 80124b2:	4641      	mov	r1, r8
 80124b4:	4620      	mov	r0, r4
 80124b6:	f000 f97f 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 80124ba:	2800      	cmp	r0, #0
 80124bc:	d074      	beq.n	80125a8 <ucdr_serialize_double+0x134>
 80124be:	7d23      	ldrb	r3, [r4, #20]
 80124c0:	2b01      	cmp	r3, #1
 80124c2:	f000 809b 	beq.w	80125fc <ucdr_serialize_double+0x188>
 80124c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80124ca:	702b      	strb	r3, [r5, #0]
 80124cc:	2e00      	cmp	r6, #0
 80124ce:	d078      	beq.n	80125c2 <ucdr_serialize_double+0x14e>
 80124d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80124d4:	706b      	strb	r3, [r5, #1]
 80124d6:	2e01      	cmp	r6, #1
 80124d8:	d077      	beq.n	80125ca <ucdr_serialize_double+0x156>
 80124da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80124de:	70ab      	strb	r3, [r5, #2]
 80124e0:	2e02      	cmp	r6, #2
 80124e2:	d076      	beq.n	80125d2 <ucdr_serialize_double+0x15e>
 80124e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80124e8:	70eb      	strb	r3, [r5, #3]
 80124ea:	2e03      	cmp	r6, #3
 80124ec:	d075      	beq.n	80125da <ucdr_serialize_double+0x166>
 80124ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80124f2:	712b      	strb	r3, [r5, #4]
 80124f4:	2e04      	cmp	r6, #4
 80124f6:	d074      	beq.n	80125e2 <ucdr_serialize_double+0x16e>
 80124f8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80124fc:	716b      	strb	r3, [r5, #5]
 80124fe:	2e05      	cmp	r6, #5
 8012500:	d073      	beq.n	80125ea <ucdr_serialize_double+0x176>
 8012502:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012506:	71ab      	strb	r3, [r5, #6]
 8012508:	2e06      	cmp	r6, #6
 801250a:	d072      	beq.n	80125f2 <ucdr_serialize_double+0x17e>
 801250c:	f89d 3000 	ldrb.w	r3, [sp]
 8012510:	71eb      	strb	r3, [r5, #7]
 8012512:	6923      	ldr	r3, [r4, #16]
 8012514:	68a2      	ldr	r2, [r4, #8]
 8012516:	7da0      	ldrb	r0, [r4, #22]
 8012518:	3308      	adds	r3, #8
 801251a:	1b9e      	subs	r6, r3, r6
 801251c:	4442      	add	r2, r8
 801251e:	2308      	movs	r3, #8
 8012520:	f080 0001 	eor.w	r0, r0, #1
 8012524:	60a2      	str	r2, [r4, #8]
 8012526:	6126      	str	r6, [r4, #16]
 8012528:	7563      	strb	r3, [r4, #21]
 801252a:	b002      	add	sp, #8
 801252c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012530:	2108      	movs	r1, #8
 8012532:	4620      	mov	r0, r4
 8012534:	f000 f940 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8012538:	b350      	cbz	r0, 8012590 <ucdr_serialize_double+0x11c>
 801253a:	7d23      	ldrb	r3, [r4, #20]
 801253c:	2b01      	cmp	r3, #1
 801253e:	d02d      	beq.n	801259c <ucdr_serialize_double+0x128>
 8012540:	68a3      	ldr	r3, [r4, #8]
 8012542:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012546:	701a      	strb	r2, [r3, #0]
 8012548:	68a3      	ldr	r3, [r4, #8]
 801254a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801254e:	705a      	strb	r2, [r3, #1]
 8012550:	68a3      	ldr	r3, [r4, #8]
 8012552:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012556:	709a      	strb	r2, [r3, #2]
 8012558:	68a3      	ldr	r3, [r4, #8]
 801255a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801255e:	70da      	strb	r2, [r3, #3]
 8012560:	68a3      	ldr	r3, [r4, #8]
 8012562:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012566:	711a      	strb	r2, [r3, #4]
 8012568:	68a3      	ldr	r3, [r4, #8]
 801256a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801256e:	715a      	strb	r2, [r3, #5]
 8012570:	68a3      	ldr	r3, [r4, #8]
 8012572:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012576:	719a      	strb	r2, [r3, #6]
 8012578:	68a3      	ldr	r3, [r4, #8]
 801257a:	f89d 2000 	ldrb.w	r2, [sp]
 801257e:	71da      	strb	r2, [r3, #7]
 8012580:	68a2      	ldr	r2, [r4, #8]
 8012582:	6923      	ldr	r3, [r4, #16]
 8012584:	3208      	adds	r2, #8
 8012586:	3308      	adds	r3, #8
 8012588:	2108      	movs	r1, #8
 801258a:	60a2      	str	r2, [r4, #8]
 801258c:	6123      	str	r3, [r4, #16]
 801258e:	7561      	strb	r1, [r4, #21]
 8012590:	7da0      	ldrb	r0, [r4, #22]
 8012592:	f080 0001 	eor.w	r0, r0, #1
 8012596:	b002      	add	sp, #8
 8012598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801259c:	466b      	mov	r3, sp
 801259e:	cb03      	ldmia	r3!, {r0, r1}
 80125a0:	68a3      	ldr	r3, [r4, #8]
 80125a2:	6018      	str	r0, [r3, #0]
 80125a4:	6059      	str	r1, [r3, #4]
 80125a6:	e7eb      	b.n	8012580 <ucdr_serialize_double+0x10c>
 80125a8:	68a2      	ldr	r2, [r4, #8]
 80125aa:	6923      	ldr	r3, [r4, #16]
 80125ac:	7da0      	ldrb	r0, [r4, #22]
 80125ae:	7567      	strb	r7, [r4, #21]
 80125b0:	1b92      	subs	r2, r2, r6
 80125b2:	1b9b      	subs	r3, r3, r6
 80125b4:	f080 0001 	eor.w	r0, r0, #1
 80125b8:	60a2      	str	r2, [r4, #8]
 80125ba:	6123      	str	r3, [r4, #16]
 80125bc:	b002      	add	sp, #8
 80125be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125c2:	68a3      	ldr	r3, [r4, #8]
 80125c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80125c8:	701a      	strb	r2, [r3, #0]
 80125ca:	68a3      	ldr	r3, [r4, #8]
 80125cc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80125d0:	701a      	strb	r2, [r3, #0]
 80125d2:	68a3      	ldr	r3, [r4, #8]
 80125d4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80125d8:	701a      	strb	r2, [r3, #0]
 80125da:	68a3      	ldr	r3, [r4, #8]
 80125dc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80125e0:	701a      	strb	r2, [r3, #0]
 80125e2:	68a3      	ldr	r3, [r4, #8]
 80125e4:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80125e8:	701a      	strb	r2, [r3, #0]
 80125ea:	68a3      	ldr	r3, [r4, #8]
 80125ec:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80125f0:	701a      	strb	r2, [r3, #0]
 80125f2:	68a3      	ldr	r3, [r4, #8]
 80125f4:	f89d 2000 	ldrb.w	r2, [sp]
 80125f8:	701a      	strb	r2, [r3, #0]
 80125fa:	e78a      	b.n	8012512 <ucdr_serialize_double+0x9e>
 80125fc:	4628      	mov	r0, r5
 80125fe:	466d      	mov	r5, sp
 8012600:	4629      	mov	r1, r5
 8012602:	4632      	mov	r2, r6
 8012604:	f007 fb22 	bl	8019c4c <memcpy>
 8012608:	68a0      	ldr	r0, [r4, #8]
 801260a:	4642      	mov	r2, r8
 801260c:	19a9      	adds	r1, r5, r6
 801260e:	f007 fb1d 	bl	8019c4c <memcpy>
 8012612:	e77e      	b.n	8012512 <ucdr_serialize_double+0x9e>

08012614 <ucdr_deserialize_double>:
 8012614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012618:	460d      	mov	r5, r1
 801261a:	2108      	movs	r1, #8
 801261c:	4604      	mov	r4, r0
 801261e:	f000 f91f 	bl	8012860 <ucdr_buffer_alignment>
 8012622:	4601      	mov	r1, r0
 8012624:	4620      	mov	r0, r4
 8012626:	f894 9015 	ldrb.w	r9, [r4, #21]
 801262a:	f000 f95d 	bl	80128e8 <ucdr_advance_buffer>
 801262e:	2108      	movs	r1, #8
 8012630:	4620      	mov	r0, r4
 8012632:	f000 f8b5 	bl	80127a0 <ucdr_check_buffer_available_for>
 8012636:	2800      	cmp	r0, #0
 8012638:	d151      	bne.n	80126de <ucdr_deserialize_double+0xca>
 801263a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801263e:	42be      	cmp	r6, r7
 8012640:	d948      	bls.n	80126d4 <ucdr_deserialize_double+0xc0>
 8012642:	6923      	ldr	r3, [r4, #16]
 8012644:	60a6      	str	r6, [r4, #8]
 8012646:	1bf6      	subs	r6, r6, r7
 8012648:	4433      	add	r3, r6
 801264a:	f1c6 0808 	rsb	r8, r6, #8
 801264e:	6123      	str	r3, [r4, #16]
 8012650:	4641      	mov	r1, r8
 8012652:	4620      	mov	r0, r4
 8012654:	f000 f8b0 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 8012658:	2800      	cmp	r0, #0
 801265a:	d06d      	beq.n	8012738 <ucdr_deserialize_double+0x124>
 801265c:	7d23      	ldrb	r3, [r4, #20]
 801265e:	2b01      	cmp	r3, #1
 8012660:	f000 8093 	beq.w	801278a <ucdr_deserialize_double+0x176>
 8012664:	79fb      	ldrb	r3, [r7, #7]
 8012666:	702b      	strb	r3, [r5, #0]
 8012668:	2e00      	cmp	r6, #0
 801266a:	d072      	beq.n	8012752 <ucdr_deserialize_double+0x13e>
 801266c:	79bb      	ldrb	r3, [r7, #6]
 801266e:	706b      	strb	r3, [r5, #1]
 8012670:	2e01      	cmp	r6, #1
 8012672:	f105 0302 	add.w	r3, r5, #2
 8012676:	d070      	beq.n	801275a <ucdr_deserialize_double+0x146>
 8012678:	797b      	ldrb	r3, [r7, #5]
 801267a:	70ab      	strb	r3, [r5, #2]
 801267c:	2e02      	cmp	r6, #2
 801267e:	f105 0303 	add.w	r3, r5, #3
 8012682:	d06e      	beq.n	8012762 <ucdr_deserialize_double+0x14e>
 8012684:	793b      	ldrb	r3, [r7, #4]
 8012686:	70eb      	strb	r3, [r5, #3]
 8012688:	2e03      	cmp	r6, #3
 801268a:	f105 0304 	add.w	r3, r5, #4
 801268e:	d06c      	beq.n	801276a <ucdr_deserialize_double+0x156>
 8012690:	78fb      	ldrb	r3, [r7, #3]
 8012692:	712b      	strb	r3, [r5, #4]
 8012694:	2e04      	cmp	r6, #4
 8012696:	f105 0305 	add.w	r3, r5, #5
 801269a:	d06a      	beq.n	8012772 <ucdr_deserialize_double+0x15e>
 801269c:	78bb      	ldrb	r3, [r7, #2]
 801269e:	716b      	strb	r3, [r5, #5]
 80126a0:	2e05      	cmp	r6, #5
 80126a2:	f105 0306 	add.w	r3, r5, #6
 80126a6:	d068      	beq.n	801277a <ucdr_deserialize_double+0x166>
 80126a8:	787b      	ldrb	r3, [r7, #1]
 80126aa:	71ab      	strb	r3, [r5, #6]
 80126ac:	2e06      	cmp	r6, #6
 80126ae:	f105 0307 	add.w	r3, r5, #7
 80126b2:	d066      	beq.n	8012782 <ucdr_deserialize_double+0x16e>
 80126b4:	783b      	ldrb	r3, [r7, #0]
 80126b6:	71eb      	strb	r3, [r5, #7]
 80126b8:	6923      	ldr	r3, [r4, #16]
 80126ba:	68a2      	ldr	r2, [r4, #8]
 80126bc:	7da0      	ldrb	r0, [r4, #22]
 80126be:	3308      	adds	r3, #8
 80126c0:	1b9e      	subs	r6, r3, r6
 80126c2:	2308      	movs	r3, #8
 80126c4:	4442      	add	r2, r8
 80126c6:	7563      	strb	r3, [r4, #21]
 80126c8:	60a2      	str	r2, [r4, #8]
 80126ca:	6126      	str	r6, [r4, #16]
 80126cc:	f080 0001 	eor.w	r0, r0, #1
 80126d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126d4:	2108      	movs	r1, #8
 80126d6:	4620      	mov	r0, r4
 80126d8:	f000 f86e 	bl	80127b8 <ucdr_check_final_buffer_behavior>
 80126dc:	b310      	cbz	r0, 8012724 <ucdr_deserialize_double+0x110>
 80126de:	7d23      	ldrb	r3, [r4, #20]
 80126e0:	2b01      	cmp	r3, #1
 80126e2:	68a3      	ldr	r3, [r4, #8]
 80126e4:	d023      	beq.n	801272e <ucdr_deserialize_double+0x11a>
 80126e6:	79db      	ldrb	r3, [r3, #7]
 80126e8:	702b      	strb	r3, [r5, #0]
 80126ea:	68a3      	ldr	r3, [r4, #8]
 80126ec:	799b      	ldrb	r3, [r3, #6]
 80126ee:	706b      	strb	r3, [r5, #1]
 80126f0:	68a3      	ldr	r3, [r4, #8]
 80126f2:	795b      	ldrb	r3, [r3, #5]
 80126f4:	70ab      	strb	r3, [r5, #2]
 80126f6:	68a3      	ldr	r3, [r4, #8]
 80126f8:	791b      	ldrb	r3, [r3, #4]
 80126fa:	70eb      	strb	r3, [r5, #3]
 80126fc:	68a3      	ldr	r3, [r4, #8]
 80126fe:	78db      	ldrb	r3, [r3, #3]
 8012700:	712b      	strb	r3, [r5, #4]
 8012702:	68a3      	ldr	r3, [r4, #8]
 8012704:	789b      	ldrb	r3, [r3, #2]
 8012706:	716b      	strb	r3, [r5, #5]
 8012708:	68a3      	ldr	r3, [r4, #8]
 801270a:	785b      	ldrb	r3, [r3, #1]
 801270c:	71ab      	strb	r3, [r5, #6]
 801270e:	68a3      	ldr	r3, [r4, #8]
 8012710:	781b      	ldrb	r3, [r3, #0]
 8012712:	71eb      	strb	r3, [r5, #7]
 8012714:	68a2      	ldr	r2, [r4, #8]
 8012716:	6923      	ldr	r3, [r4, #16]
 8012718:	3208      	adds	r2, #8
 801271a:	3308      	adds	r3, #8
 801271c:	2108      	movs	r1, #8
 801271e:	60a2      	str	r2, [r4, #8]
 8012720:	6123      	str	r3, [r4, #16]
 8012722:	7561      	strb	r1, [r4, #21]
 8012724:	7da0      	ldrb	r0, [r4, #22]
 8012726:	f080 0001 	eor.w	r0, r0, #1
 801272a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801272e:	681a      	ldr	r2, [r3, #0]
 8012730:	685b      	ldr	r3, [r3, #4]
 8012732:	606b      	str	r3, [r5, #4]
 8012734:	602a      	str	r2, [r5, #0]
 8012736:	e7ed      	b.n	8012714 <ucdr_deserialize_double+0x100>
 8012738:	68a2      	ldr	r2, [r4, #8]
 801273a:	6923      	ldr	r3, [r4, #16]
 801273c:	7da0      	ldrb	r0, [r4, #22]
 801273e:	f884 9015 	strb.w	r9, [r4, #21]
 8012742:	1b92      	subs	r2, r2, r6
 8012744:	1b9b      	subs	r3, r3, r6
 8012746:	60a2      	str	r2, [r4, #8]
 8012748:	6123      	str	r3, [r4, #16]
 801274a:	f080 0001 	eor.w	r0, r0, #1
 801274e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012752:	68a3      	ldr	r3, [r4, #8]
 8012754:	799b      	ldrb	r3, [r3, #6]
 8012756:	706b      	strb	r3, [r5, #1]
 8012758:	1cab      	adds	r3, r5, #2
 801275a:	68a2      	ldr	r2, [r4, #8]
 801275c:	7952      	ldrb	r2, [r2, #5]
 801275e:	f803 2b01 	strb.w	r2, [r3], #1
 8012762:	68a2      	ldr	r2, [r4, #8]
 8012764:	7912      	ldrb	r2, [r2, #4]
 8012766:	f803 2b01 	strb.w	r2, [r3], #1
 801276a:	68a2      	ldr	r2, [r4, #8]
 801276c:	78d2      	ldrb	r2, [r2, #3]
 801276e:	f803 2b01 	strb.w	r2, [r3], #1
 8012772:	68a2      	ldr	r2, [r4, #8]
 8012774:	7892      	ldrb	r2, [r2, #2]
 8012776:	f803 2b01 	strb.w	r2, [r3], #1
 801277a:	68a2      	ldr	r2, [r4, #8]
 801277c:	7852      	ldrb	r2, [r2, #1]
 801277e:	f803 2b01 	strb.w	r2, [r3], #1
 8012782:	68a2      	ldr	r2, [r4, #8]
 8012784:	7812      	ldrb	r2, [r2, #0]
 8012786:	701a      	strb	r2, [r3, #0]
 8012788:	e796      	b.n	80126b8 <ucdr_deserialize_double+0xa4>
 801278a:	4639      	mov	r1, r7
 801278c:	4632      	mov	r2, r6
 801278e:	4628      	mov	r0, r5
 8012790:	f007 fa5c 	bl	8019c4c <memcpy>
 8012794:	68a1      	ldr	r1, [r4, #8]
 8012796:	4642      	mov	r2, r8
 8012798:	19a8      	adds	r0, r5, r6
 801279a:	f007 fa57 	bl	8019c4c <memcpy>
 801279e:	e78b      	b.n	80126b8 <ucdr_deserialize_double+0xa4>

080127a0 <ucdr_check_buffer_available_for>:
 80127a0:	7d83      	ldrb	r3, [r0, #22]
 80127a2:	b93b      	cbnz	r3, 80127b4 <ucdr_check_buffer_available_for+0x14>
 80127a4:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80127a8:	4419      	add	r1, r3
 80127aa:	4288      	cmp	r0, r1
 80127ac:	bf34      	ite	cc
 80127ae:	2000      	movcc	r0, #0
 80127b0:	2001      	movcs	r0, #1
 80127b2:	4770      	bx	lr
 80127b4:	2000      	movs	r0, #0
 80127b6:	4770      	bx	lr

080127b8 <ucdr_check_final_buffer_behavior>:
 80127b8:	7d83      	ldrb	r3, [r0, #22]
 80127ba:	b943      	cbnz	r3, 80127ce <ucdr_check_final_buffer_behavior+0x16>
 80127bc:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 80127c0:	4291      	cmp	r1, r2
 80127c2:	b510      	push	{r4, lr}
 80127c4:	4604      	mov	r4, r0
 80127c6:	d205      	bcs.n	80127d4 <ucdr_check_final_buffer_behavior+0x1c>
 80127c8:	2301      	movs	r3, #1
 80127ca:	4618      	mov	r0, r3
 80127cc:	bd10      	pop	{r4, pc}
 80127ce:	2300      	movs	r3, #0
 80127d0:	4618      	mov	r0, r3
 80127d2:	4770      	bx	lr
 80127d4:	6982      	ldr	r2, [r0, #24]
 80127d6:	b13a      	cbz	r2, 80127e8 <ucdr_check_final_buffer_behavior+0x30>
 80127d8:	69c1      	ldr	r1, [r0, #28]
 80127da:	4790      	blx	r2
 80127dc:	f080 0301 	eor.w	r3, r0, #1
 80127e0:	b2db      	uxtb	r3, r3
 80127e2:	75a0      	strb	r0, [r4, #22]
 80127e4:	4618      	mov	r0, r3
 80127e6:	bd10      	pop	{r4, pc}
 80127e8:	2001      	movs	r0, #1
 80127ea:	75a0      	strb	r0, [r4, #22]
 80127ec:	e7fa      	b.n	80127e4 <ucdr_check_final_buffer_behavior+0x2c>
 80127ee:	bf00      	nop

080127f0 <ucdr_set_on_full_buffer_callback>:
 80127f0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80127f4:	4770      	bx	lr
 80127f6:	bf00      	nop

080127f8 <ucdr_init_buffer_origin_offset_endian>:
 80127f8:	b410      	push	{r4}
 80127fa:	9c01      	ldr	r4, [sp, #4]
 80127fc:	6001      	str	r1, [r0, #0]
 80127fe:	440a      	add	r2, r1
 8012800:	6042      	str	r2, [r0, #4]
 8012802:	190a      	adds	r2, r1, r4
 8012804:	441c      	add	r4, r3
 8012806:	e9c0 3403 	strd	r3, r4, [r0, #12]
 801280a:	6082      	str	r2, [r0, #8]
 801280c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012810:	7503      	strb	r3, [r0, #20]
 8012812:	2200      	movs	r2, #0
 8012814:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8012818:	f85d 4b04 	ldr.w	r4, [sp], #4
 801281c:	7542      	strb	r2, [r0, #21]
 801281e:	7582      	strb	r2, [r0, #22]
 8012820:	4770      	bx	lr
 8012822:	bf00      	nop

08012824 <ucdr_init_buffer_origin_offset>:
 8012824:	b510      	push	{r4, lr}
 8012826:	b082      	sub	sp, #8
 8012828:	9c04      	ldr	r4, [sp, #16]
 801282a:	9400      	str	r4, [sp, #0]
 801282c:	2401      	movs	r4, #1
 801282e:	9401      	str	r4, [sp, #4]
 8012830:	f7ff ffe2 	bl	80127f8 <ucdr_init_buffer_origin_offset_endian>
 8012834:	b002      	add	sp, #8
 8012836:	bd10      	pop	{r4, pc}

08012838 <ucdr_init_buffer_origin>:
 8012838:	b510      	push	{r4, lr}
 801283a:	b082      	sub	sp, #8
 801283c:	2400      	movs	r4, #0
 801283e:	9400      	str	r4, [sp, #0]
 8012840:	f7ff fff0 	bl	8012824 <ucdr_init_buffer_origin_offset>
 8012844:	b002      	add	sp, #8
 8012846:	bd10      	pop	{r4, pc}

08012848 <ucdr_init_buffer>:
 8012848:	2300      	movs	r3, #0
 801284a:	f7ff bff5 	b.w	8012838 <ucdr_init_buffer_origin>
 801284e:	bf00      	nop

08012850 <ucdr_alignment>:
 8012850:	fbb0 f3f1 	udiv	r3, r0, r1
 8012854:	fb03 0011 	mls	r0, r3, r1, r0
 8012858:	1a08      	subs	r0, r1, r0
 801285a:	3901      	subs	r1, #1
 801285c:	4008      	ands	r0, r1
 801285e:	4770      	bx	lr

08012860 <ucdr_buffer_alignment>:
 8012860:	7d43      	ldrb	r3, [r0, #21]
 8012862:	428b      	cmp	r3, r1
 8012864:	d208      	bcs.n	8012878 <ucdr_buffer_alignment+0x18>
 8012866:	6900      	ldr	r0, [r0, #16]
 8012868:	fbb0 f3f1 	udiv	r3, r0, r1
 801286c:	fb01 0013 	mls	r0, r1, r3, r0
 8012870:	1a08      	subs	r0, r1, r0
 8012872:	3901      	subs	r1, #1
 8012874:	4008      	ands	r0, r1
 8012876:	4770      	bx	lr
 8012878:	2000      	movs	r0, #0
 801287a:	4770      	bx	lr

0801287c <ucdr_align_to>:
 801287c:	b538      	push	{r3, r4, r5, lr}
 801287e:	4604      	mov	r4, r0
 8012880:	460d      	mov	r5, r1
 8012882:	f7ff ffed 	bl	8012860 <ucdr_buffer_alignment>
 8012886:	68a3      	ldr	r3, [r4, #8]
 8012888:	6921      	ldr	r1, [r4, #16]
 801288a:	7565      	strb	r5, [r4, #21]
 801288c:	181a      	adds	r2, r3, r0
 801288e:	6863      	ldr	r3, [r4, #4]
 8012890:	4293      	cmp	r3, r2
 8012892:	4408      	add	r0, r1
 8012894:	bf28      	it	cs
 8012896:	4613      	movcs	r3, r2
 8012898:	6120      	str	r0, [r4, #16]
 801289a:	60a3      	str	r3, [r4, #8]
 801289c:	bd38      	pop	{r3, r4, r5, pc}
 801289e:	bf00      	nop

080128a0 <ucdr_buffer_length>:
 80128a0:	6882      	ldr	r2, [r0, #8]
 80128a2:	6800      	ldr	r0, [r0, #0]
 80128a4:	1a10      	subs	r0, r2, r0
 80128a6:	4770      	bx	lr

080128a8 <ucdr_buffer_remaining>:
 80128a8:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80128ac:	1a10      	subs	r0, r2, r0
 80128ae:	4770      	bx	lr

080128b0 <ucdr_check_final_buffer_behavior_array>:
 80128b0:	b538      	push	{r3, r4, r5, lr}
 80128b2:	7d83      	ldrb	r3, [r0, #22]
 80128b4:	b963      	cbnz	r3, 80128d0 <ucdr_check_final_buffer_behavior_array+0x20>
 80128b6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80128ba:	429a      	cmp	r2, r3
 80128bc:	4604      	mov	r4, r0
 80128be:	460d      	mov	r5, r1
 80128c0:	d308      	bcc.n	80128d4 <ucdr_check_final_buffer_behavior_array+0x24>
 80128c2:	b139      	cbz	r1, 80128d4 <ucdr_check_final_buffer_behavior_array+0x24>
 80128c4:	6983      	ldr	r3, [r0, #24]
 80128c6:	b163      	cbz	r3, 80128e2 <ucdr_check_final_buffer_behavior_array+0x32>
 80128c8:	69c1      	ldr	r1, [r0, #28]
 80128ca:	4798      	blx	r3
 80128cc:	75a0      	strb	r0, [r4, #22]
 80128ce:	b108      	cbz	r0, 80128d4 <ucdr_check_final_buffer_behavior_array+0x24>
 80128d0:	2000      	movs	r0, #0
 80128d2:	bd38      	pop	{r3, r4, r5, pc}
 80128d4:	4620      	mov	r0, r4
 80128d6:	f7ff ffe7 	bl	80128a8 <ucdr_buffer_remaining>
 80128da:	42a8      	cmp	r0, r5
 80128dc:	bf28      	it	cs
 80128de:	4628      	movcs	r0, r5
 80128e0:	bd38      	pop	{r3, r4, r5, pc}
 80128e2:	2301      	movs	r3, #1
 80128e4:	7583      	strb	r3, [r0, #22]
 80128e6:	e7f3      	b.n	80128d0 <ucdr_check_final_buffer_behavior_array+0x20>

080128e8 <ucdr_advance_buffer>:
 80128e8:	b538      	push	{r3, r4, r5, lr}
 80128ea:	4604      	mov	r4, r0
 80128ec:	460d      	mov	r5, r1
 80128ee:	f7ff ff57 	bl	80127a0 <ucdr_check_buffer_available_for>
 80128f2:	b178      	cbz	r0, 8012914 <ucdr_advance_buffer+0x2c>
 80128f4:	6923      	ldr	r3, [r4, #16]
 80128f6:	68a2      	ldr	r2, [r4, #8]
 80128f8:	442b      	add	r3, r5
 80128fa:	6123      	str	r3, [r4, #16]
 80128fc:	2301      	movs	r3, #1
 80128fe:	442a      	add	r2, r5
 8012900:	7563      	strb	r3, [r4, #21]
 8012902:	60a2      	str	r2, [r4, #8]
 8012904:	bd38      	pop	{r3, r4, r5, pc}
 8012906:	68a2      	ldr	r2, [r4, #8]
 8012908:	6923      	ldr	r3, [r4, #16]
 801290a:	4402      	add	r2, r0
 801290c:	4403      	add	r3, r0
 801290e:	1a2d      	subs	r5, r5, r0
 8012910:	60a2      	str	r2, [r4, #8]
 8012912:	6123      	str	r3, [r4, #16]
 8012914:	4629      	mov	r1, r5
 8012916:	2201      	movs	r2, #1
 8012918:	4620      	mov	r0, r4
 801291a:	f7ff ffc9 	bl	80128b0 <ucdr_check_final_buffer_behavior_array>
 801291e:	2800      	cmp	r0, #0
 8012920:	d1f1      	bne.n	8012906 <ucdr_advance_buffer+0x1e>
 8012922:	2301      	movs	r3, #1
 8012924:	7563      	strb	r3, [r4, #21]
 8012926:	bd38      	pop	{r3, r4, r5, pc}

08012928 <ucdr_serialize_sequence_char>:
 8012928:	b570      	push	{r4, r5, r6, lr}
 801292a:	4615      	mov	r5, r2
 801292c:	460e      	mov	r6, r1
 801292e:	7d01      	ldrb	r1, [r0, #20]
 8012930:	4604      	mov	r4, r0
 8012932:	f7fe fe37 	bl	80115a4 <ucdr_serialize_endian_uint32_t>
 8012936:	b90d      	cbnz	r5, 801293c <ucdr_serialize_sequence_char+0x14>
 8012938:	2001      	movs	r0, #1
 801293a:	bd70      	pop	{r4, r5, r6, pc}
 801293c:	7d21      	ldrb	r1, [r4, #20]
 801293e:	462b      	mov	r3, r5
 8012940:	4632      	mov	r2, r6
 8012942:	4620      	mov	r0, r4
 8012944:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012948:	f004 bdce 	b.w	80174e8 <ucdr_serialize_endian_array_char>

0801294c <ucdr_deserialize_sequence_char>:
 801294c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012950:	461d      	mov	r5, r3
 8012952:	4616      	mov	r6, r2
 8012954:	460f      	mov	r7, r1
 8012956:	461a      	mov	r2, r3
 8012958:	7d01      	ldrb	r1, [r0, #20]
 801295a:	4604      	mov	r4, r0
 801295c:	f7fe ff4a 	bl	80117f4 <ucdr_deserialize_endian_uint32_t>
 8012960:	682b      	ldr	r3, [r5, #0]
 8012962:	429e      	cmp	r6, r3
 8012964:	bf3c      	itt	cc
 8012966:	2201      	movcc	r2, #1
 8012968:	75a2      	strbcc	r2, [r4, #22]
 801296a:	b913      	cbnz	r3, 8012972 <ucdr_deserialize_sequence_char+0x26>
 801296c:	2001      	movs	r0, #1
 801296e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012972:	7d21      	ldrb	r1, [r4, #20]
 8012974:	463a      	mov	r2, r7
 8012976:	4620      	mov	r0, r4
 8012978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801297c:	f004 bde6 	b.w	801754c <ucdr_deserialize_endian_array_char>

08012980 <ucdr_serialize_sequence_uint8_t>:
 8012980:	b570      	push	{r4, r5, r6, lr}
 8012982:	4615      	mov	r5, r2
 8012984:	460e      	mov	r6, r1
 8012986:	7d01      	ldrb	r1, [r0, #20]
 8012988:	4604      	mov	r4, r0
 801298a:	f7fe fe0b 	bl	80115a4 <ucdr_serialize_endian_uint32_t>
 801298e:	b90d      	cbnz	r5, 8012994 <ucdr_serialize_sequence_uint8_t+0x14>
 8012990:	2001      	movs	r0, #1
 8012992:	bd70      	pop	{r4, r5, r6, pc}
 8012994:	7d21      	ldrb	r1, [r4, #20]
 8012996:	462b      	mov	r3, r5
 8012998:	4632      	mov	r2, r6
 801299a:	4620      	mov	r0, r4
 801299c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129a0:	f004 be38 	b.w	8017614 <ucdr_serialize_endian_array_uint8_t>

080129a4 <ucdr_deserialize_sequence_uint8_t>:
 80129a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129a8:	461d      	mov	r5, r3
 80129aa:	4616      	mov	r6, r2
 80129ac:	460f      	mov	r7, r1
 80129ae:	461a      	mov	r2, r3
 80129b0:	7d01      	ldrb	r1, [r0, #20]
 80129b2:	4604      	mov	r4, r0
 80129b4:	f7fe ff1e 	bl	80117f4 <ucdr_deserialize_endian_uint32_t>
 80129b8:	682b      	ldr	r3, [r5, #0]
 80129ba:	429e      	cmp	r6, r3
 80129bc:	bf3c      	itt	cc
 80129be:	2201      	movcc	r2, #1
 80129c0:	75a2      	strbcc	r2, [r4, #22]
 80129c2:	b913      	cbnz	r3, 80129ca <ucdr_deserialize_sequence_uint8_t+0x26>
 80129c4:	2001      	movs	r0, #1
 80129c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129ca:	7d21      	ldrb	r1, [r4, #20]
 80129cc:	463a      	mov	r2, r7
 80129ce:	4620      	mov	r0, r4
 80129d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80129d4:	f004 be82 	b.w	80176dc <ucdr_deserialize_endian_array_uint8_t>

080129d8 <uxr_buffer_delete_entity>:
 80129d8:	b510      	push	{r4, lr}
 80129da:	2300      	movs	r3, #0
 80129dc:	b08e      	sub	sp, #56	; 0x38
 80129de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80129e2:	2303      	movs	r3, #3
 80129e4:	9300      	str	r3, [sp, #0]
 80129e6:	2204      	movs	r2, #4
 80129e8:	ab06      	add	r3, sp, #24
 80129ea:	4604      	mov	r4, r0
 80129ec:	9103      	str	r1, [sp, #12]
 80129ee:	f001 f86f 	bl	8013ad0 <uxr_prepare_stream_to_write_submessage>
 80129f2:	b918      	cbnz	r0, 80129fc <uxr_buffer_delete_entity+0x24>
 80129f4:	4604      	mov	r4, r0
 80129f6:	4620      	mov	r0, r4
 80129f8:	b00e      	add	sp, #56	; 0x38
 80129fa:	bd10      	pop	{r4, pc}
 80129fc:	9902      	ldr	r1, [sp, #8]
 80129fe:	aa05      	add	r2, sp, #20
 8012a00:	4620      	mov	r0, r4
 8012a02:	f001 f99b 	bl	8013d3c <uxr_init_base_object_request>
 8012a06:	a905      	add	r1, sp, #20
 8012a08:	4604      	mov	r4, r0
 8012a0a:	a806      	add	r0, sp, #24
 8012a0c:	f002 fb00 	bl	8015010 <uxr_serialize_DELETE_Payload>
 8012a10:	4620      	mov	r0, r4
 8012a12:	b00e      	add	sp, #56	; 0x38
 8012a14:	bd10      	pop	{r4, pc}
 8012a16:	bf00      	nop

08012a18 <uxr_common_create_entity>:
 8012a18:	b510      	push	{r4, lr}
 8012a1a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012a1e:	b08c      	sub	sp, #48	; 0x30
 8012a20:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012a24:	f1bc 0f01 	cmp.w	ip, #1
 8012a28:	bf0c      	ite	eq
 8012a2a:	f003 0201 	andeq.w	r2, r3, #1
 8012a2e:	2200      	movne	r2, #0
 8012a30:	330e      	adds	r3, #14
 8012a32:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8012a36:	9101      	str	r1, [sp, #4]
 8012a38:	441a      	add	r2, r3
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	9300      	str	r3, [sp, #0]
 8012a3e:	9903      	ldr	r1, [sp, #12]
 8012a40:	ab04      	add	r3, sp, #16
 8012a42:	b292      	uxth	r2, r2
 8012a44:	4604      	mov	r4, r0
 8012a46:	f001 f843 	bl	8013ad0 <uxr_prepare_stream_to_write_submessage>
 8012a4a:	b918      	cbnz	r0, 8012a54 <uxr_common_create_entity+0x3c>
 8012a4c:	4604      	mov	r4, r0
 8012a4e:	4620      	mov	r0, r4
 8012a50:	b00c      	add	sp, #48	; 0x30
 8012a52:	bd10      	pop	{r4, pc}
 8012a54:	9902      	ldr	r1, [sp, #8]
 8012a56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012a58:	4620      	mov	r0, r4
 8012a5a:	f001 f96f 	bl	8013d3c <uxr_init_base_object_request>
 8012a5e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012a60:	4604      	mov	r4, r0
 8012a62:	a804      	add	r0, sp, #16
 8012a64:	f002 fa30 	bl	8014ec8 <uxr_serialize_CREATE_Payload>
 8012a68:	4620      	mov	r0, r4
 8012a6a:	b00c      	add	sp, #48	; 0x30
 8012a6c:	bd10      	pop	{r4, pc}
 8012a6e:	bf00      	nop

08012a70 <uxr_buffer_create_participant_bin>:
 8012a70:	b570      	push	{r4, r5, r6, lr}
 8012a72:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8012a76:	ac11      	add	r4, sp, #68	; 0x44
 8012a78:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8012a7c:	2303      	movs	r3, #3
 8012a7e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8012a82:	7223      	strb	r3, [r4, #8]
 8012a84:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8012a86:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8012a8a:	2201      	movs	r2, #1
 8012a8c:	2100      	movs	r1, #0
 8012a8e:	4605      	mov	r5, r0
 8012a90:	7122      	strb	r2, [r4, #4]
 8012a92:	f88d 1014 	strb.w	r1, [sp, #20]
 8012a96:	b1cb      	cbz	r3, 8012acc <uxr_buffer_create_participant_bin+0x5c>
 8012a98:	f88d 201c 	strb.w	r2, [sp, #28]
 8012a9c:	9308      	str	r3, [sp, #32]
 8012a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012aa2:	a915      	add	r1, sp, #84	; 0x54
 8012aa4:	a809      	add	r0, sp, #36	; 0x24
 8012aa6:	f7ff fecf 	bl	8012848 <ucdr_init_buffer>
 8012aaa:	a905      	add	r1, sp, #20
 8012aac:	a809      	add	r0, sp, #36	; 0x24
 8012aae:	f001 fed9 	bl	8014864 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8012ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ab4:	9600      	str	r6, [sp, #0]
 8012ab6:	9401      	str	r4, [sp, #4]
 8012ab8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012abc:	60e3      	str	r3, [r4, #12]
 8012abe:	4628      	mov	r0, r5
 8012ac0:	b29b      	uxth	r3, r3
 8012ac2:	f7ff ffa9 	bl	8012a18 <uxr_common_create_entity>
 8012ac6:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8012aca:	bd70      	pop	{r4, r5, r6, pc}
 8012acc:	f88d 301c 	strb.w	r3, [sp, #28]
 8012ad0:	e7e5      	b.n	8012a9e <uxr_buffer_create_participant_bin+0x2e>
 8012ad2:	bf00      	nop

08012ad4 <uxr_buffer_create_topic_bin>:
 8012ad4:	b570      	push	{r4, r5, r6, lr}
 8012ad6:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8012ada:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012ade:	9105      	str	r1, [sp, #20]
 8012ae0:	4605      	mov	r5, r0
 8012ae2:	a997      	add	r1, sp, #604	; 0x25c
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	2302      	movs	r3, #2
 8012ae8:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8012aec:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8012af0:	f000 f8ee 	bl	8012cd0 <uxr_object_id_to_raw>
 8012af4:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8012af6:	9306      	str	r3, [sp, #24]
 8012af8:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8012afa:	930a      	str	r3, [sp, #40]	; 0x28
 8012afc:	2303      	movs	r3, #3
 8012afe:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8012b02:	2301      	movs	r3, #1
 8012b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b08:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8012b0c:	a917      	add	r1, sp, #92	; 0x5c
 8012b0e:	2300      	movs	r3, #0
 8012b10:	a80b      	add	r0, sp, #44	; 0x2c
 8012b12:	f88d 301c 	strb.w	r3, [sp, #28]
 8012b16:	f7ff fe97 	bl	8012848 <ucdr_init_buffer>
 8012b1a:	a906      	add	r1, sp, #24
 8012b1c:	a80b      	add	r0, sp, #44	; 0x2c
 8012b1e:	f001 fec3 	bl	80148a8 <uxr_serialize_OBJK_Topic_Binary>
 8012b22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012b24:	9316      	str	r3, [sp, #88]	; 0x58
 8012b26:	ac13      	add	r4, sp, #76	; 0x4c
 8012b28:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012b2c:	9600      	str	r6, [sp, #0]
 8012b2e:	9401      	str	r4, [sp, #4]
 8012b30:	b29b      	uxth	r3, r3
 8012b32:	4628      	mov	r0, r5
 8012b34:	f7ff ff70 	bl	8012a18 <uxr_common_create_entity>
 8012b38:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 8012b3c:	bd70      	pop	{r4, r5, r6, pc}
 8012b3e:	bf00      	nop

08012b40 <uxr_buffer_create_publisher_bin>:
 8012b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b42:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8012b46:	4605      	mov	r5, r0
 8012b48:	9105      	str	r1, [sp, #20]
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	2603      	movs	r6, #3
 8012b4e:	a992      	add	r1, sp, #584	; 0x248
 8012b50:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012b54:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8012b58:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8012b5c:	f000 f8b8 	bl	8012cd0 <uxr_object_id_to_raw>
 8012b60:	2300      	movs	r3, #0
 8012b62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b66:	a912      	add	r1, sp, #72	; 0x48
 8012b68:	a806      	add	r0, sp, #24
 8012b6a:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8012b6e:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8012b72:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8012b76:	f7ff fe67 	bl	8012848 <ucdr_init_buffer>
 8012b7a:	a993      	add	r1, sp, #588	; 0x24c
 8012b7c:	a806      	add	r0, sp, #24
 8012b7e:	f001 ff47 	bl	8014a10 <uxr_serialize_OBJK_Publisher_Binary>
 8012b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b84:	9311      	str	r3, [sp, #68]	; 0x44
 8012b86:	ac0e      	add	r4, sp, #56	; 0x38
 8012b88:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012b8c:	9700      	str	r7, [sp, #0]
 8012b8e:	9401      	str	r4, [sp, #4]
 8012b90:	b29b      	uxth	r3, r3
 8012b92:	4628      	mov	r0, r5
 8012b94:	f7ff ff40 	bl	8012a18 <uxr_common_create_entity>
 8012b98:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8012b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b9e:	bf00      	nop

08012ba0 <uxr_buffer_create_datawriter_bin>:
 8012ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ba4:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8012ba8:	ac1d      	add	r4, sp, #116	; 0x74
 8012baa:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012bae:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8012bb2:	9105      	str	r1, [sp, #20]
 8012bb4:	4606      	mov	r6, r0
 8012bb6:	a9a1      	add	r1, sp, #644	; 0x284
 8012bb8:	4618      	mov	r0, r3
 8012bba:	2305      	movs	r3, #5
 8012bbc:	7123      	strb	r3, [r4, #4]
 8012bbe:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8012bc2:	2703      	movs	r7, #3
 8012bc4:	f000 f884 	bl	8012cd0 <uxr_object_id_to_raw>
 8012bc8:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8012bca:	7227      	strb	r7, [r4, #8]
 8012bcc:	a90e      	add	r1, sp, #56	; 0x38
 8012bce:	f000 f87f 	bl	8012cd0 <uxr_object_id_to_raw>
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8012bd8:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8012bdc:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8012be0:	3d00      	subs	r5, #0
 8012be2:	bf18      	it	ne
 8012be4:	2501      	movne	r5, #1
 8012be6:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8012bea:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8012bee:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8012bf2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8012bfc:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8012c00:	bb8a      	cbnz	r2, 8012c66 <uxr_buffer_create_datawriter_bin+0xc6>
 8012c02:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8012c06:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8012c0a:	f04f 0c13 	mov.w	ip, #19
 8012c0e:	250b      	movs	r5, #11
 8012c10:	2221      	movs	r2, #33	; 0x21
 8012c12:	2111      	movs	r1, #17
 8012c14:	2009      	movs	r0, #9
 8012c16:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8012c1a:	b923      	cbnz	r3, 8012c26 <uxr_buffer_create_datawriter_bin+0x86>
 8012c1c:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8012c20:	4672      	mov	r2, lr
 8012c22:	4661      	mov	r1, ip
 8012c24:	4628      	mov	r0, r5
 8012c26:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8012c2a:	2b01      	cmp	r3, #1
 8012c2c:	d025      	beq.n	8012c7a <uxr_buffer_create_datawriter_bin+0xda>
 8012c2e:	2b03      	cmp	r3, #3
 8012c30:	d029      	beq.n	8012c86 <uxr_buffer_create_datawriter_bin+0xe6>
 8012c32:	b32b      	cbz	r3, 8012c80 <uxr_buffer_create_datawriter_bin+0xe0>
 8012c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012c38:	a921      	add	r1, sp, #132	; 0x84
 8012c3a:	a806      	add	r0, sp, #24
 8012c3c:	f7ff fe04 	bl	8012848 <ucdr_init_buffer>
 8012c40:	a90e      	add	r1, sp, #56	; 0x38
 8012c42:	a806      	add	r0, sp, #24
 8012c44:	f001 ff5a 	bl	8014afc <uxr_serialize_OBJK_DataWriter_Binary>
 8012c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c4a:	f8cd 8000 	str.w	r8, [sp]
 8012c4e:	9401      	str	r4, [sp, #4]
 8012c50:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8012c54:	60e3      	str	r3, [r4, #12]
 8012c56:	4630      	mov	r0, r6
 8012c58:	b29b      	uxth	r3, r3
 8012c5a:	f7ff fedd 	bl	8012a18 <uxr_common_create_entity>
 8012c5e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8012c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c66:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8012c6a:	f04f 0c12 	mov.w	ip, #18
 8012c6e:	250a      	movs	r5, #10
 8012c70:	2220      	movs	r2, #32
 8012c72:	2110      	movs	r1, #16
 8012c74:	2008      	movs	r0, #8
 8012c76:	2702      	movs	r7, #2
 8012c78:	e7cd      	b.n	8012c16 <uxr_buffer_create_datawriter_bin+0x76>
 8012c7a:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8012c7e:	e7d9      	b.n	8012c34 <uxr_buffer_create_datawriter_bin+0x94>
 8012c80:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8012c84:	e7d6      	b.n	8012c34 <uxr_buffer_create_datawriter_bin+0x94>
 8012c86:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8012c8a:	e7d3      	b.n	8012c34 <uxr_buffer_create_datawriter_bin+0x94>

08012c8c <uxr_object_id>:
 8012c8c:	b082      	sub	sp, #8
 8012c8e:	2300      	movs	r3, #0
 8012c90:	f88d 1006 	strb.w	r1, [sp, #6]
 8012c94:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012c98:	f360 030f 	bfi	r3, r0, #0, #16
 8012c9c:	f362 431f 	bfi	r3, r2, #16, #16
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	b002      	add	sp, #8
 8012ca4:	4770      	bx	lr
 8012ca6:	bf00      	nop

08012ca8 <uxr_object_id_from_raw>:
 8012ca8:	7843      	ldrb	r3, [r0, #1]
 8012caa:	7801      	ldrb	r1, [r0, #0]
 8012cac:	b082      	sub	sp, #8
 8012cae:	f003 020f 	and.w	r2, r3, #15
 8012cb2:	f88d 2006 	strb.w	r2, [sp, #6]
 8012cb6:	091b      	lsrs	r3, r3, #4
 8012cb8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012cbc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8012cc0:	2000      	movs	r0, #0
 8012cc2:	f363 000f 	bfi	r0, r3, #0, #16
 8012cc6:	f362 401f 	bfi	r0, r2, #16, #16
 8012cca:	b002      	add	sp, #8
 8012ccc:	4770      	bx	lr
 8012cce:	bf00      	nop

08012cd0 <uxr_object_id_to_raw>:
 8012cd0:	4602      	mov	r2, r0
 8012cd2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8012cd6:	b082      	sub	sp, #8
 8012cd8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8012cdc:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8012ce0:	f881 c000 	strb.w	ip, [r1]
 8012ce4:	7048      	strb	r0, [r1, #1]
 8012ce6:	b002      	add	sp, #8
 8012ce8:	4770      	bx	lr
 8012cea:	bf00      	nop

08012cec <on_get_fragmentation_info>:
 8012cec:	b500      	push	{lr}
 8012cee:	b08b      	sub	sp, #44	; 0x2c
 8012cf0:	4601      	mov	r1, r0
 8012cf2:	2204      	movs	r2, #4
 8012cf4:	a802      	add	r0, sp, #8
 8012cf6:	f7ff fda7 	bl	8012848 <ucdr_init_buffer>
 8012cfa:	f10d 0305 	add.w	r3, sp, #5
 8012cfe:	f10d 0206 	add.w	r2, sp, #6
 8012d02:	a901      	add	r1, sp, #4
 8012d04:	a802      	add	r0, sp, #8
 8012d06:	f001 f99b 	bl	8014040 <uxr_read_submessage_header>
 8012d0a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012d0e:	2b0d      	cmp	r3, #13
 8012d10:	d003      	beq.n	8012d1a <on_get_fragmentation_info+0x2e>
 8012d12:	2000      	movs	r0, #0
 8012d14:	b00b      	add	sp, #44	; 0x2c
 8012d16:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d1a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012d1e:	f013 0f02 	tst.w	r3, #2
 8012d22:	bf14      	ite	ne
 8012d24:	2002      	movne	r0, #2
 8012d26:	2001      	moveq	r0, #1
 8012d28:	b00b      	add	sp, #44	; 0x2c
 8012d2a:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d2e:	bf00      	nop

08012d30 <read_submessage_get_info>:
 8012d30:	b570      	push	{r4, r5, r6, lr}
 8012d32:	2500      	movs	r5, #0
 8012d34:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8012d38:	4604      	mov	r4, r0
 8012d3a:	f44f 7224 	mov.w	r2, #656	; 0x290
 8012d3e:	460e      	mov	r6, r1
 8012d40:	a810      	add	r0, sp, #64	; 0x40
 8012d42:	4629      	mov	r1, r5
 8012d44:	e9cd 5503 	strd	r5, r5, [sp, #12]
 8012d48:	f006 ff8e 	bl	8019c68 <memset>
 8012d4c:	a903      	add	r1, sp, #12
 8012d4e:	4630      	mov	r0, r6
 8012d50:	f002 f94a 	bl	8014fe8 <uxr_deserialize_GET_INFO_Payload>
 8012d54:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012d58:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8012d5c:	4620      	mov	r0, r4
 8012d5e:	f000 ffe5 	bl	8013d2c <uxr_session_header_offset>
 8012d62:	462b      	mov	r3, r5
 8012d64:	9000      	str	r0, [sp, #0]
 8012d66:	220c      	movs	r2, #12
 8012d68:	a905      	add	r1, sp, #20
 8012d6a:	a808      	add	r0, sp, #32
 8012d6c:	f7ff fd5a 	bl	8012824 <ucdr_init_buffer_origin_offset>
 8012d70:	a910      	add	r1, sp, #64	; 0x40
 8012d72:	a808      	add	r0, sp, #32
 8012d74:	f002 f9aa 	bl	80150cc <uxr_serialize_INFO_Payload>
 8012d78:	9b08      	ldr	r3, [sp, #32]
 8012d7a:	462a      	mov	r2, r5
 8012d7c:	4629      	mov	r1, r5
 8012d7e:	4620      	mov	r0, r4
 8012d80:	f000 ff7e 	bl	8013c80 <uxr_stamp_session_header>
 8012d84:	a808      	add	r0, sp, #32
 8012d86:	f7ff fd8b 	bl	80128a0 <ucdr_buffer_length>
 8012d8a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012d8c:	4602      	mov	r2, r0
 8012d8e:	a905      	add	r1, sp, #20
 8012d90:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012d94:	47a0      	blx	r4
 8012d96:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8012d9a:	bd70      	pop	{r4, r5, r6, pc}

08012d9c <write_submessage_acknack.isra.0>:
 8012d9c:	b570      	push	{r4, r5, r6, lr}
 8012d9e:	b092      	sub	sp, #72	; 0x48
 8012da0:	4605      	mov	r5, r0
 8012da2:	460e      	mov	r6, r1
 8012da4:	4614      	mov	r4, r2
 8012da6:	f000 ffc1 	bl	8013d2c <uxr_session_header_offset>
 8012daa:	a905      	add	r1, sp, #20
 8012dac:	9000      	str	r0, [sp, #0]
 8012dae:	2300      	movs	r3, #0
 8012db0:	a80a      	add	r0, sp, #40	; 0x28
 8012db2:	2211      	movs	r2, #17
 8012db4:	f7ff fd36 	bl	8012824 <ucdr_init_buffer_origin_offset>
 8012db8:	2218      	movs	r2, #24
 8012dba:	fb02 5404 	mla	r4, r2, r4, r5
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	2205      	movs	r2, #5
 8012dc2:	3450      	adds	r4, #80	; 0x50
 8012dc4:	210a      	movs	r1, #10
 8012dc6:	a80a      	add	r0, sp, #40	; 0x28
 8012dc8:	f001 f920 	bl	801400c <uxr_buffer_submessage_header>
 8012dcc:	a903      	add	r1, sp, #12
 8012dce:	4620      	mov	r0, r4
 8012dd0:	f004 ff32 	bl	8017c38 <uxr_compute_acknack>
 8012dd4:	ba40      	rev16	r0, r0
 8012dd6:	f8ad 000e 	strh.w	r0, [sp, #14]
 8012dda:	a903      	add	r1, sp, #12
 8012ddc:	a80a      	add	r0, sp, #40	; 0x28
 8012dde:	f88d 6010 	strb.w	r6, [sp, #16]
 8012de2:	f002 f9e3 	bl	80151ac <uxr_serialize_ACKNACK_Payload>
 8012de6:	2200      	movs	r2, #0
 8012de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dea:	4611      	mov	r1, r2
 8012dec:	4628      	mov	r0, r5
 8012dee:	f000 ff47 	bl	8013c80 <uxr_stamp_session_header>
 8012df2:	a80a      	add	r0, sp, #40	; 0x28
 8012df4:	f7ff fd54 	bl	80128a0 <ucdr_buffer_length>
 8012df8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8012dfa:	4602      	mov	r2, r0
 8012dfc:	a905      	add	r1, sp, #20
 8012dfe:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012e02:	47a0      	blx	r4
 8012e04:	b012      	add	sp, #72	; 0x48
 8012e06:	bd70      	pop	{r4, r5, r6, pc}

08012e08 <uxr_init_session>:
 8012e08:	b510      	push	{r4, lr}
 8012e0a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8012e40 <uxr_init_session+0x38>
 8012e0e:	2300      	movs	r3, #0
 8012e10:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8012e14:	4604      	mov	r4, r0
 8012e16:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8012e1a:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 8012e1e:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8012e22:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8012e26:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8012e2a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8012e2e:	2181      	movs	r1, #129	; 0x81
 8012e30:	f000 fe92 	bl	8013b58 <uxr_init_session_info>
 8012e34:	f104 0008 	add.w	r0, r4, #8
 8012e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e3c:	f001 b802 	b.w	8013e44 <uxr_init_stream_storage>
	...

08012e48 <uxr_set_status_callback>:
 8012e48:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8012e4c:	4770      	bx	lr
 8012e4e:	bf00      	nop

08012e50 <uxr_set_topic_callback>:
 8012e50:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8012e54:	4770      	bx	lr
 8012e56:	bf00      	nop

08012e58 <uxr_set_request_callback>:
 8012e58:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8012e5c:	4770      	bx	lr
 8012e5e:	bf00      	nop

08012e60 <uxr_set_reply_callback>:
 8012e60:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8012e64:	4770      	bx	lr
 8012e66:	bf00      	nop

08012e68 <uxr_create_output_best_effort_stream>:
 8012e68:	b510      	push	{r4, lr}
 8012e6a:	b084      	sub	sp, #16
 8012e6c:	e9cd 2100 	strd	r2, r1, [sp]
 8012e70:	4604      	mov	r4, r0
 8012e72:	f000 ff5b 	bl	8013d2c <uxr_session_header_offset>
 8012e76:	e9dd 2100 	ldrd	r2, r1, [sp]
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	f104 0008 	add.w	r0, r4, #8
 8012e80:	b004      	add	sp, #16
 8012e82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e86:	f001 b827 	b.w	8013ed8 <uxr_add_output_best_effort_buffer>
 8012e8a:	bf00      	nop

08012e8c <uxr_create_output_reliable_stream>:
 8012e8c:	b510      	push	{r4, lr}
 8012e8e:	b088      	sub	sp, #32
 8012e90:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8012e94:	4604      	mov	r4, r0
 8012e96:	9303      	str	r3, [sp, #12]
 8012e98:	f000 ff48 	bl	8013d2c <uxr_session_header_offset>
 8012e9c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8012ea0:	9000      	str	r0, [sp, #0]
 8012ea2:	9905      	ldr	r1, [sp, #20]
 8012ea4:	f104 0008 	add.w	r0, r4, #8
 8012ea8:	f001 f82a 	bl	8013f00 <uxr_add_output_reliable_buffer>
 8012eac:	2200      	movs	r2, #0
 8012eae:	b2c3      	uxtb	r3, r0
 8012eb0:	f363 0207 	bfi	r2, r3, #0, #8
 8012eb4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012eb8:	f363 220f 	bfi	r2, r3, #8, #8
 8012ebc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012ec0:	f363 4217 	bfi	r2, r3, #16, #8
 8012ec4:	0e03      	lsrs	r3, r0, #24
 8012ec6:	f363 621f 	bfi	r2, r3, #24, #8
 8012eca:	4610      	mov	r0, r2
 8012ecc:	b008      	add	sp, #32
 8012ece:	bd10      	pop	{r4, pc}

08012ed0 <uxr_create_input_best_effort_stream>:
 8012ed0:	b082      	sub	sp, #8
 8012ed2:	3008      	adds	r0, #8
 8012ed4:	b002      	add	sp, #8
 8012ed6:	f001 b82d 	b.w	8013f34 <uxr_add_input_best_effort_buffer>
 8012eda:	bf00      	nop

08012edc <uxr_create_input_reliable_stream>:
 8012edc:	b510      	push	{r4, lr}
 8012ede:	b084      	sub	sp, #16
 8012ee0:	4c0b      	ldr	r4, [pc, #44]	; (8012f10 <uxr_create_input_reliable_stream+0x34>)
 8012ee2:	9400      	str	r4, [sp, #0]
 8012ee4:	3008      	adds	r0, #8
 8012ee6:	f001 f83b 	bl	8013f60 <uxr_add_input_reliable_buffer>
 8012eea:	2200      	movs	r2, #0
 8012eec:	b2c3      	uxtb	r3, r0
 8012eee:	f363 0207 	bfi	r2, r3, #0, #8
 8012ef2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012ef6:	f363 220f 	bfi	r2, r3, #8, #8
 8012efa:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012efe:	f363 4217 	bfi	r2, r3, #16, #8
 8012f02:	0e03      	lsrs	r3, r0, #24
 8012f04:	f363 621f 	bfi	r2, r3, #24, #8
 8012f08:	4610      	mov	r0, r2
 8012f0a:	b004      	add	sp, #16
 8012f0c:	bd10      	pop	{r4, pc}
 8012f0e:	bf00      	nop
 8012f10:	08012ced 	.word	0x08012ced

08012f14 <uxr_epoch_nanos>:
 8012f14:	b510      	push	{r4, lr}
 8012f16:	4604      	mov	r4, r0
 8012f18:	f001 f8d8 	bl	80140cc <uxr_nanos>
 8012f1c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8012f20:	1ac0      	subs	r0, r0, r3
 8012f22:	eb61 0102 	sbc.w	r1, r1, r2
 8012f26:	bd10      	pop	{r4, pc}

08012f28 <uxr_flash_output_streams>:
 8012f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f2c:	7e03      	ldrb	r3, [r0, #24]
 8012f2e:	b084      	sub	sp, #16
 8012f30:	4604      	mov	r4, r0
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d035      	beq.n	8012fa2 <uxr_flash_output_streams+0x7a>
 8012f36:	f04f 0900 	mov.w	r9, #0
 8012f3a:	4648      	mov	r0, r9
 8012f3c:	f10d 0802 	add.w	r8, sp, #2
 8012f40:	af03      	add	r7, sp, #12
 8012f42:	ae02      	add	r6, sp, #8
 8012f44:	e006      	b.n	8012f54 <uxr_flash_output_streams+0x2c>
 8012f46:	7e23      	ldrb	r3, [r4, #24]
 8012f48:	f109 0901 	add.w	r9, r9, #1
 8012f4c:	fa5f f089 	uxtb.w	r0, r9
 8012f50:	4283      	cmp	r3, r0
 8012f52:	d926      	bls.n	8012fa2 <uxr_flash_output_streams+0x7a>
 8012f54:	2201      	movs	r2, #1
 8012f56:	4611      	mov	r1, r2
 8012f58:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8012f5c:	f000 ff1e 	bl	8013d9c <uxr_stream_id>
 8012f60:	3508      	adds	r5, #8
 8012f62:	4684      	mov	ip, r0
 8012f64:	4643      	mov	r3, r8
 8012f66:	463a      	mov	r2, r7
 8012f68:	4631      	mov	r1, r6
 8012f6a:	4628      	mov	r0, r5
 8012f6c:	f8cd c004 	str.w	ip, [sp, #4]
 8012f70:	f004 fee8 	bl	8017d44 <uxr_prepare_best_effort_buffer_to_send>
 8012f74:	2800      	cmp	r0, #0
 8012f76:	d0e6      	beq.n	8012f46 <uxr_flash_output_streams+0x1e>
 8012f78:	9b02      	ldr	r3, [sp, #8]
 8012f7a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012f7e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012f82:	4620      	mov	r0, r4
 8012f84:	f000 fe7c 	bl	8013c80 <uxr_stamp_session_header>
 8012f88:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012f8a:	9a03      	ldr	r2, [sp, #12]
 8012f8c:	685d      	ldr	r5, [r3, #4]
 8012f8e:	6818      	ldr	r0, [r3, #0]
 8012f90:	9902      	ldr	r1, [sp, #8]
 8012f92:	47a8      	blx	r5
 8012f94:	f109 0901 	add.w	r9, r9, #1
 8012f98:	7e23      	ldrb	r3, [r4, #24]
 8012f9a:	fa5f f089 	uxtb.w	r0, r9
 8012f9e:	4283      	cmp	r3, r0
 8012fa0:	d8d8      	bhi.n	8012f54 <uxr_flash_output_streams+0x2c>
 8012fa2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012fa6:	b38b      	cbz	r3, 801300c <uxr_flash_output_streams+0xe4>
 8012fa8:	f04f 0900 	mov.w	r9, #0
 8012fac:	f10d 0802 	add.w	r8, sp, #2
 8012fb0:	af03      	add	r7, sp, #12
 8012fb2:	ae02      	add	r6, sp, #8
 8012fb4:	4648      	mov	r0, r9
 8012fb6:	2201      	movs	r2, #1
 8012fb8:	2102      	movs	r1, #2
 8012fba:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8012fbe:	f000 feed 	bl	8013d9c <uxr_stream_id>
 8012fc2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8012fc6:	3520      	adds	r5, #32
 8012fc8:	9001      	str	r0, [sp, #4]
 8012fca:	e00d      	b.n	8012fe8 <uxr_flash_output_streams+0xc0>
 8012fcc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012fd0:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012fd4:	9b02      	ldr	r3, [sp, #8]
 8012fd6:	f000 fe53 	bl	8013c80 <uxr_stamp_session_header>
 8012fda:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012fdc:	9a03      	ldr	r2, [sp, #12]
 8012fde:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8012fe2:	9902      	ldr	r1, [sp, #8]
 8012fe4:	6818      	ldr	r0, [r3, #0]
 8012fe6:	47d0      	blx	sl
 8012fe8:	4643      	mov	r3, r8
 8012fea:	463a      	mov	r2, r7
 8012fec:	4631      	mov	r1, r6
 8012fee:	4628      	mov	r0, r5
 8012ff0:	f005 f8b4 	bl	801815c <uxr_prepare_next_reliable_buffer_to_send>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d1e7      	bne.n	8012fcc <uxr_flash_output_streams+0xa4>
 8012ffc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8013000:	f109 0901 	add.w	r9, r9, #1
 8013004:	fa5f f089 	uxtb.w	r0, r9
 8013008:	4283      	cmp	r3, r0
 801300a:	d8d4      	bhi.n	8012fb6 <uxr_flash_output_streams+0x8e>
 801300c:	b004      	add	sp, #16
 801300e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013012:	bf00      	nop

08013014 <read_submessage_info>:
 8013014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013018:	460d      	mov	r5, r1
 801301a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 801301e:	4669      	mov	r1, sp
 8013020:	4607      	mov	r7, r0
 8013022:	4628      	mov	r0, r5
 8013024:	f001 feee 	bl	8014e04 <uxr_deserialize_BaseObjectReply>
 8013028:	a902      	add	r1, sp, #8
 801302a:	4604      	mov	r4, r0
 801302c:	4628      	mov	r0, r5
 801302e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8013032:	f7fd fff1 	bl	8011018 <ucdr_deserialize_bool>
 8013036:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801303a:	4004      	ands	r4, r0
 801303c:	b2e4      	uxtb	r4, r4
 801303e:	b95b      	cbnz	r3, 8013058 <read_submessage_info+0x44>
 8013040:	a987      	add	r1, sp, #540	; 0x21c
 8013042:	4628      	mov	r0, r5
 8013044:	f7fd ffe8 	bl	8011018 <ucdr_deserialize_bool>
 8013048:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 801304c:	4606      	mov	r6, r0
 801304e:	b94b      	cbnz	r3, 8013064 <read_submessage_info+0x50>
 8013050:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8013054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013058:	a903      	add	r1, sp, #12
 801305a:	4628      	mov	r0, r5
 801305c:	f001 fd7a 	bl	8014b54 <uxr_deserialize_ObjectVariant>
 8013060:	4004      	ands	r4, r0
 8013062:	e7ed      	b.n	8013040 <read_submessage_info+0x2c>
 8013064:	a988      	add	r1, sp, #544	; 0x220
 8013066:	4628      	mov	r0, r5
 8013068:	f7fe f804 	bl	8011074 <ucdr_deserialize_uint8_t>
 801306c:	4234      	tst	r4, r6
 801306e:	d0ef      	beq.n	8013050 <read_submessage_info+0x3c>
 8013070:	2800      	cmp	r0, #0
 8013072:	d0ed      	beq.n	8013050 <read_submessage_info+0x3c>
 8013074:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8013078:	2b0d      	cmp	r3, #13
 801307a:	d1e9      	bne.n	8013050 <read_submessage_info+0x3c>
 801307c:	a98a      	add	r1, sp, #552	; 0x228
 801307e:	4628      	mov	r0, r5
 8013080:	f7fe fd9e 	bl	8011bc0 <ucdr_deserialize_int16_t>
 8013084:	b140      	cbz	r0, 8013098 <read_submessage_info+0x84>
 8013086:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 801308a:	2b00      	cmp	r3, #0
 801308c:	dd07      	ble.n	801309e <read_submessage_info+0x8a>
 801308e:	f1b8 0f00 	cmp.w	r8, #0
 8013092:	bf14      	ite	ne
 8013094:	2001      	movne	r0, #1
 8013096:	2002      	moveq	r0, #2
 8013098:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 801309c:	e7d8      	b.n	8013050 <read_submessage_info+0x3c>
 801309e:	2000      	movs	r0, #0
 80130a0:	e7fa      	b.n	8013098 <read_submessage_info+0x84>
 80130a2:	bf00      	nop

080130a4 <read_submessage_list>:
 80130a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130a8:	b097      	sub	sp, #92	; 0x5c
 80130aa:	4ec1      	ldr	r6, [pc, #772]	; (80133b0 <read_submessage_list+0x30c>)
 80130ac:	9209      	str	r2, [sp, #36]	; 0x24
 80130ae:	4604      	mov	r4, r0
 80130b0:	460d      	mov	r5, r1
 80130b2:	f04f 0801 	mov.w	r8, #1
 80130b6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80130ba:	aa0c      	add	r2, sp, #48	; 0x30
 80130bc:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 80130c0:	4628      	mov	r0, r5
 80130c2:	f000 ffbd 	bl	8014040 <uxr_read_submessage_header>
 80130c6:	2800      	cmp	r0, #0
 80130c8:	f000 813e 	beq.w	8013348 <read_submessage_list+0x2a4>
 80130cc:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80130d0:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 80130d4:	3b02      	subs	r3, #2
 80130d6:	2b0d      	cmp	r3, #13
 80130d8:	d8ed      	bhi.n	80130b6 <read_submessage_list+0x12>
 80130da:	a101      	add	r1, pc, #4	; (adr r1, 80130e0 <read_submessage_list+0x3c>)
 80130dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80130e0:	0801333f 	.word	0x0801333f
 80130e4:	080130b7 	.word	0x080130b7
 80130e8:	0801332f 	.word	0x0801332f
 80130ec:	080132cd 	.word	0x080132cd
 80130f0:	080132c3 	.word	0x080132c3
 80130f4:	080130b7 	.word	0x080130b7
 80130f8:	080130b7 	.word	0x080130b7
 80130fc:	08013223 	.word	0x08013223
 8013100:	080131b3 	.word	0x080131b3
 8013104:	08013173 	.word	0x08013173
 8013108:	080130b7 	.word	0x080130b7
 801310c:	080130b7 	.word	0x080130b7
 8013110:	080130b7 	.word	0x080130b7
 8013114:	08013119 	.word	0x08013119
 8013118:	a910      	add	r1, sp, #64	; 0x40
 801311a:	4628      	mov	r0, r5
 801311c:	f002 f896 	bl	801524c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8013120:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 8013124:	f1b9 0f00 	cmp.w	r9, #0
 8013128:	f000 8116 	beq.w	8013358 <read_submessage_list+0x2b4>
 801312c:	f000 ffce 	bl	80140cc <uxr_nanos>
 8013130:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8013132:	4602      	mov	r2, r0
 8013134:	460b      	mov	r3, r1
 8013136:	9814      	ldr	r0, [sp, #80]	; 0x50
 8013138:	2100      	movs	r1, #0
 801313a:	468c      	mov	ip, r1
 801313c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8013140:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 8013144:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013146:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8013148:	468c      	mov	ip, r1
 801314a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 801314e:	46e2      	mov	sl, ip
 8013150:	46bc      	mov	ip, r7
 8013152:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 8013156:	fbc0 7106 	smlal	r7, r1, r0, r6
 801315a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 801315e:	e9cd 7100 	strd	r7, r1, [sp]
 8013162:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8013166:	9106      	str	r1, [sp, #24]
 8013168:	4620      	mov	r0, r4
 801316a:	47c8      	blx	r9
 801316c:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 8013170:	e7a1      	b.n	80130b6 <read_submessage_list+0x12>
 8013172:	a910      	add	r1, sp, #64	; 0x40
 8013174:	4628      	mov	r0, r5
 8013176:	f002 f857 	bl	8015228 <uxr_deserialize_HEARTBEAT_Payload>
 801317a:	2100      	movs	r1, #0
 801317c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8013180:	f000 fe36 	bl	8013df0 <uxr_stream_id_from_raw>
 8013184:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8013188:	900f      	str	r0, [sp, #60]	; 0x3c
 801318a:	4639      	mov	r1, r7
 801318c:	f104 0008 	add.w	r0, r4, #8
 8013190:	f000 ff1c 	bl	8013fcc <uxr_get_input_reliable_stream>
 8013194:	2800      	cmp	r0, #0
 8013196:	d08e      	beq.n	80130b6 <read_submessage_list+0x12>
 8013198:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 801319c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80131a0:	f004 fd3e 	bl	8017c20 <uxr_process_heartbeat>
 80131a4:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80131a8:	463a      	mov	r2, r7
 80131aa:	4620      	mov	r0, r4
 80131ac:	f7ff fdf6 	bl	8012d9c <write_submessage_acknack.isra.0>
 80131b0:	e781      	b.n	80130b6 <read_submessage_list+0x12>
 80131b2:	a910      	add	r1, sp, #64	; 0x40
 80131b4:	4628      	mov	r0, r5
 80131b6:	f002 f80f 	bl	80151d8 <uxr_deserialize_ACKNACK_Payload>
 80131ba:	2100      	movs	r1, #0
 80131bc:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80131c0:	f000 fe16 	bl	8013df0 <uxr_stream_id_from_raw>
 80131c4:	900d      	str	r0, [sp, #52]	; 0x34
 80131c6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80131ca:	f104 0008 	add.w	r0, r4, #8
 80131ce:	f000 fee9 	bl	8013fa4 <uxr_get_output_reliable_stream>
 80131d2:	4607      	mov	r7, r0
 80131d4:	2800      	cmp	r0, #0
 80131d6:	f43f af6e 	beq.w	80130b6 <read_submessage_list+0x12>
 80131da:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80131de:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 80131e2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80131e6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80131ea:	b289      	uxth	r1, r1
 80131ec:	f005 f860 	bl	80182b0 <uxr_process_acknack>
 80131f0:	4638      	mov	r0, r7
 80131f2:	f005 f81d 	bl	8018230 <uxr_begin_output_nack_buffer_it>
 80131f6:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80131fa:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 80131fe:	e006      	b.n	801320e <read_submessage_list+0x16a>
 8013200:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013202:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013204:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8013208:	990e      	ldr	r1, [sp, #56]	; 0x38
 801320a:	6818      	ldr	r0, [r3, #0]
 801320c:	47c8      	blx	r9
 801320e:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8013212:	aa0f      	add	r2, sp, #60	; 0x3c
 8013214:	4651      	mov	r1, sl
 8013216:	4638      	mov	r0, r7
 8013218:	f005 f80c 	bl	8018234 <uxr_next_reliable_nack_buffer_to_send>
 801321c:	2800      	cmp	r0, #0
 801321e:	d1ef      	bne.n	8013200 <read_submessage_list+0x15c>
 8013220:	e749      	b.n	80130b6 <read_submessage_list+0x12>
 8013222:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8013226:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 801322a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 801322e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8013232:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8013236:	4651      	mov	r1, sl
 8013238:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801323c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 8013240:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8013244:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8013248:	4628      	mov	r0, r5
 801324a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 801324e:	f001 fd23 	bl	8014c98 <uxr_deserialize_BaseObjectRequest>
 8013252:	4650      	mov	r0, sl
 8013254:	a90f      	add	r1, sp, #60	; 0x3c
 8013256:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801325a:	f000 fd8d 	bl	8013d78 <uxr_parse_base_object_request>
 801325e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8013262:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013264:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8013268:	9110      	str	r1, [sp, #64]	; 0x40
 801326a:	3f04      	subs	r7, #4
 801326c:	f009 090e 	and.w	r9, r9, #14
 8013270:	b2bf      	uxth	r7, r7
 8013272:	f1bb 0f00 	cmp.w	fp, #0
 8013276:	d006      	beq.n	8013286 <read_submessage_list+0x1e2>
 8013278:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801327c:	9300      	str	r3, [sp, #0]
 801327e:	4652      	mov	r2, sl
 8013280:	2300      	movs	r3, #0
 8013282:	4620      	mov	r0, r4
 8013284:	47d8      	blx	fp
 8013286:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8013288:	b16a      	cbz	r2, 80132a6 <read_submessage_list+0x202>
 801328a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801328c:	2100      	movs	r1, #0
 801328e:	3802      	subs	r0, #2
 8013290:	e002      	b.n	8013298 <read_submessage_list+0x1f4>
 8013292:	3101      	adds	r1, #1
 8013294:	4291      	cmp	r1, r2
 8013296:	d006      	beq.n	80132a6 <read_submessage_list+0x202>
 8013298:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801329c:	4553      	cmp	r3, sl
 801329e:	d1f8      	bne.n	8013292 <read_submessage_list+0x1ee>
 80132a0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80132a2:	2200      	movs	r2, #0
 80132a4:	545a      	strb	r2, [r3, r1]
 80132a6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 80132aa:	9102      	str	r1, [sp, #8]
 80132ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80132ae:	9101      	str	r1, [sp, #4]
 80132b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80132b2:	9100      	str	r1, [sp, #0]
 80132b4:	464b      	mov	r3, r9
 80132b6:	463a      	mov	r2, r7
 80132b8:	4629      	mov	r1, r5
 80132ba:	4620      	mov	r0, r4
 80132bc:	f005 f87c 	bl	80183b8 <read_submessage_format>
 80132c0:	e6f9      	b.n	80130b6 <read_submessage_list+0x12>
 80132c2:	4629      	mov	r1, r5
 80132c4:	4620      	mov	r0, r4
 80132c6:	f7ff fea5 	bl	8013014 <read_submessage_info>
 80132ca:	e6f4      	b.n	80130b6 <read_submessage_list+0x12>
 80132cc:	2a00      	cmp	r2, #0
 80132ce:	d03e      	beq.n	801334e <read_submessage_list+0x2aa>
 80132d0:	a910      	add	r1, sp, #64	; 0x40
 80132d2:	4628      	mov	r0, r5
 80132d4:	f001 fedc 	bl	8015090 <uxr_deserialize_STATUS_Payload>
 80132d8:	a90e      	add	r1, sp, #56	; 0x38
 80132da:	aa0d      	add	r2, sp, #52	; 0x34
 80132dc:	a810      	add	r0, sp, #64	; 0x40
 80132de:	f000 fd4b 	bl	8013d78 <uxr_parse_base_object_request>
 80132e2:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 80132e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80132e8:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 80132ec:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 80132f0:	910f      	str	r1, [sp, #60]	; 0x3c
 80132f2:	f1ba 0f00 	cmp.w	sl, #0
 80132f6:	d006      	beq.n	8013306 <read_submessage_list+0x262>
 80132f8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80132fc:	9300      	str	r3, [sp, #0]
 80132fe:	463a      	mov	r2, r7
 8013300:	464b      	mov	r3, r9
 8013302:	4620      	mov	r0, r4
 8013304:	47d0      	blx	sl
 8013306:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8013308:	2a00      	cmp	r2, #0
 801330a:	f43f aed4 	beq.w	80130b6 <read_submessage_list+0x12>
 801330e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8013310:	2100      	movs	r1, #0
 8013312:	3802      	subs	r0, #2
 8013314:	e003      	b.n	801331e <read_submessage_list+0x27a>
 8013316:	3101      	adds	r1, #1
 8013318:	4291      	cmp	r1, r2
 801331a:	f43f aecc 	beq.w	80130b6 <read_submessage_list+0x12>
 801331e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8013322:	42bb      	cmp	r3, r7
 8013324:	d1f7      	bne.n	8013316 <read_submessage_list+0x272>
 8013326:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8013328:	f803 9001 	strb.w	r9, [r3, r1]
 801332c:	e6c3      	b.n	80130b6 <read_submessage_list+0x12>
 801332e:	2a00      	cmp	r2, #0
 8013330:	f47f aec1 	bne.w	80130b6 <read_submessage_list+0x12>
 8013334:	4629      	mov	r1, r5
 8013336:	4620      	mov	r0, r4
 8013338:	f000 fc64 	bl	8013c04 <uxr_read_create_session_status>
 801333c:	e6bb      	b.n	80130b6 <read_submessage_list+0x12>
 801333e:	4629      	mov	r1, r5
 8013340:	4620      	mov	r0, r4
 8013342:	f7ff fcf5 	bl	8012d30 <read_submessage_get_info>
 8013346:	e6b6      	b.n	80130b6 <read_submessage_list+0x12>
 8013348:	b017      	add	sp, #92	; 0x5c
 801334a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801334e:	4629      	mov	r1, r5
 8013350:	4620      	mov	r0, r4
 8013352:	f000 fc63 	bl	8013c1c <uxr_read_delete_session_status>
 8013356:	e6ae      	b.n	80130b6 <read_submessage_list+0x12>
 8013358:	f000 feb8 	bl	80140cc <uxr_nanos>
 801335c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801335e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013360:	464f      	mov	r7, r9
 8013362:	fbc3 2706 	smlal	r2, r7, r3, r6
 8013366:	1812      	adds	r2, r2, r0
 8013368:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801336a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801336c:	eb47 0101 	adc.w	r1, r7, r1
 8013370:	464f      	mov	r7, r9
 8013372:	fbc3 0706 	smlal	r0, r7, r3, r6
 8013376:	463b      	mov	r3, r7
 8013378:	4684      	mov	ip, r0
 801337a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801337e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8013382:	eb1c 0c00 	adds.w	ip, ip, r0
 8013386:	464f      	mov	r7, r9
 8013388:	eb43 0307 	adc.w	r3, r3, r7
 801338c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8013390:	eb61 0303 	sbc.w	r3, r1, r3
 8013394:	0fda      	lsrs	r2, r3, #31
 8013396:	eb12 020c 	adds.w	r2, r2, ip
 801339a:	f143 0300 	adc.w	r3, r3, #0
 801339e:	0852      	lsrs	r2, r2, #1
 80133a0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 80133a4:	105b      	asrs	r3, r3, #1
 80133a6:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 80133aa:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 80133ae:	e6dd      	b.n	801316c <read_submessage_list+0xc8>
 80133b0:	3b9aca00 	.word	0x3b9aca00

080133b4 <listen_message_reliably>:
 80133b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b8:	1e0b      	subs	r3, r1, #0
 80133ba:	b09d      	sub	sp, #116	; 0x74
 80133bc:	bfb8      	it	lt
 80133be:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80133c2:	4680      	mov	r8, r0
 80133c4:	9305      	str	r3, [sp, #20]
 80133c6:	f000 fe67 	bl	8014098 <uxr_millis>
 80133ca:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 80133ce:	4681      	mov	r9, r0
 80133d0:	2a00      	cmp	r2, #0
 80133d2:	f000 80a1 	beq.w	8013518 <listen_message_reliably+0x164>
 80133d6:	2600      	movs	r6, #0
 80133d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80133dc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80133e0:	9303      	str	r3, [sp, #12]
 80133e2:	4630      	mov	r0, r6
 80133e4:	460f      	mov	r7, r1
 80133e6:	e00f      	b.n	8013408 <listen_message_reliably+0x54>
 80133e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80133ec:	9903      	ldr	r1, [sp, #12]
 80133ee:	455a      	cmp	r2, fp
 80133f0:	f106 0601 	add.w	r6, r6, #1
 80133f4:	eb73 0101 	sbcs.w	r1, r3, r1
 80133f8:	b2f0      	uxtb	r0, r6
 80133fa:	da01      	bge.n	8013400 <listen_message_reliably+0x4c>
 80133fc:	4693      	mov	fp, r2
 80133fe:	9303      	str	r3, [sp, #12]
 8013400:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8013404:	4283      	cmp	r3, r0
 8013406:	d960      	bls.n	80134ca <listen_message_reliably+0x116>
 8013408:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801340c:	2102      	movs	r1, #2
 801340e:	2201      	movs	r2, #1
 8013410:	f000 fcc4 	bl	8013d9c <uxr_stream_id>
 8013414:	00e4      	lsls	r4, r4, #3
 8013416:	f104 0520 	add.w	r5, r4, #32
 801341a:	4445      	add	r5, r8
 801341c:	4601      	mov	r1, r0
 801341e:	463b      	mov	r3, r7
 8013420:	464a      	mov	r2, r9
 8013422:	4628      	mov	r0, r5
 8013424:	9109      	str	r1, [sp, #36]	; 0x24
 8013426:	f004 fed9 	bl	80181dc <uxr_update_output_stream_heartbeat_timestamp>
 801342a:	eb08 0304 	add.w	r3, r8, r4
 801342e:	2800      	cmp	r0, #0
 8013430:	d0da      	beq.n	80133e8 <listen_message_reliably+0x34>
 8013432:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8013436:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 801343a:	9304      	str	r3, [sp, #16]
 801343c:	4640      	mov	r0, r8
 801343e:	f000 fc75 	bl	8013d2c <uxr_session_header_offset>
 8013442:	3501      	adds	r5, #1
 8013444:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8013448:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801344c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8013450:	2300      	movs	r3, #0
 8013452:	2211      	movs	r2, #17
 8013454:	9000      	str	r0, [sp, #0]
 8013456:	a90c      	add	r1, sp, #48	; 0x30
 8013458:	4650      	mov	r0, sl
 801345a:	f7ff f9e3 	bl	8012824 <ucdr_init_buffer_origin_offset>
 801345e:	2300      	movs	r3, #0
 8013460:	2205      	movs	r2, #5
 8013462:	210b      	movs	r1, #11
 8013464:	4650      	mov	r0, sl
 8013466:	f000 fdd1 	bl	801400c <uxr_buffer_submessage_header>
 801346a:	8968      	ldrh	r0, [r5, #10]
 801346c:	2101      	movs	r1, #1
 801346e:	f005 f86d 	bl	801854c <uxr_seq_num_add>
 8013472:	892b      	ldrh	r3, [r5, #8]
 8013474:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8013478:	4602      	mov	r2, r0
 801347a:	9b04      	ldr	r3, [sp, #16]
 801347c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8013480:	a90a      	add	r1, sp, #40	; 0x28
 8013482:	4650      	mov	r0, sl
 8013484:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8013488:	f001 feba 	bl	8015200 <uxr_serialize_HEARTBEAT_Payload>
 801348c:	2200      	movs	r2, #0
 801348e:	4611      	mov	r1, r2
 8013490:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013492:	4640      	mov	r0, r8
 8013494:	f000 fbf4 	bl	8013c80 <uxr_stamp_session_header>
 8013498:	4650      	mov	r0, sl
 801349a:	f7ff fa01 	bl	80128a0 <ucdr_buffer_length>
 801349e:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80134a2:	4602      	mov	r2, r0
 80134a4:	a90c      	add	r1, sp, #48	; 0x30
 80134a6:	e9d3 0500 	ldrd	r0, r5, [r3]
 80134aa:	4444      	add	r4, r8
 80134ac:	47a8      	blx	r5
 80134ae:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80134b2:	9903      	ldr	r1, [sp, #12]
 80134b4:	455a      	cmp	r2, fp
 80134b6:	f106 0601 	add.w	r6, r6, #1
 80134ba:	eb73 0101 	sbcs.w	r1, r3, r1
 80134be:	b2f0      	uxtb	r0, r6
 80134c0:	db9c      	blt.n	80133fc <listen_message_reliably+0x48>
 80134c2:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80134c6:	4283      	cmp	r3, r0
 80134c8:	d89e      	bhi.n	8013408 <listen_message_reliably+0x54>
 80134ca:	9a03      	ldr	r2, [sp, #12]
 80134cc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80134d0:	429a      	cmp	r2, r3
 80134d2:	bf08      	it	eq
 80134d4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 80134d8:	d01e      	beq.n	8013518 <listen_message_reliably+0x164>
 80134da:	ebab 0309 	sub.w	r3, fp, r9
 80134de:	9905      	ldr	r1, [sp, #20]
 80134e0:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	bf08      	it	eq
 80134e8:	2301      	moveq	r3, #1
 80134ea:	4299      	cmp	r1, r3
 80134ec:	bfa8      	it	ge
 80134ee:	4619      	movge	r1, r3
 80134f0:	6894      	ldr	r4, [r2, #8]
 80134f2:	6810      	ldr	r0, [r2, #0]
 80134f4:	4689      	mov	r9, r1
 80134f6:	460b      	mov	r3, r1
 80134f8:	aa08      	add	r2, sp, #32
 80134fa:	a907      	add	r1, sp, #28
 80134fc:	47a0      	blx	r4
 80134fe:	b968      	cbnz	r0, 801351c <listen_message_reliably+0x168>
 8013500:	9b05      	ldr	r3, [sp, #20]
 8013502:	eba3 0309 	sub.w	r3, r3, r9
 8013506:	2b00      	cmp	r3, #0
 8013508:	9305      	str	r3, [sp, #20]
 801350a:	f73f af5c 	bgt.w	80133c6 <listen_message_reliably+0x12>
 801350e:	4604      	mov	r4, r0
 8013510:	4620      	mov	r0, r4
 8013512:	b01d      	add	sp, #116	; 0x74
 8013514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013518:	9b05      	ldr	r3, [sp, #20]
 801351a:	e7e0      	b.n	80134de <listen_message_reliably+0x12a>
 801351c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8013520:	4604      	mov	r4, r0
 8013522:	a80c      	add	r0, sp, #48	; 0x30
 8013524:	f7ff f990 	bl	8012848 <ucdr_init_buffer>
 8013528:	2500      	movs	r5, #0
 801352a:	f10d 031a 	add.w	r3, sp, #26
 801352e:	aa06      	add	r2, sp, #24
 8013530:	a90c      	add	r1, sp, #48	; 0x30
 8013532:	4640      	mov	r0, r8
 8013534:	f88d 5018 	strb.w	r5, [sp, #24]
 8013538:	f000 fbb6 	bl	8013ca8 <uxr_read_session_header>
 801353c:	b918      	cbnz	r0, 8013546 <listen_message_reliably+0x192>
 801353e:	4620      	mov	r0, r4
 8013540:	b01d      	add	sp, #116	; 0x74
 8013542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013546:	4629      	mov	r1, r5
 8013548:	f89d 0018 	ldrb.w	r0, [sp, #24]
 801354c:	f000 fc50 	bl	8013df0 <uxr_stream_id_from_raw>
 8013550:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8013554:	2d01      	cmp	r5, #1
 8013556:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 801355a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801355e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8013562:	d04b      	beq.n	80135fc <listen_message_reliably+0x248>
 8013564:	2d02      	cmp	r5, #2
 8013566:	d00f      	beq.n	8013588 <listen_message_reliably+0x1d4>
 8013568:	2d00      	cmp	r5, #0
 801356a:	d1e8      	bne.n	801353e <listen_message_reliably+0x18a>
 801356c:	4629      	mov	r1, r5
 801356e:	4628      	mov	r0, r5
 8013570:	f000 fc3e 	bl	8013df0 <uxr_stream_id_from_raw>
 8013574:	a90c      	add	r1, sp, #48	; 0x30
 8013576:	4602      	mov	r2, r0
 8013578:	4640      	mov	r0, r8
 801357a:	920a      	str	r2, [sp, #40]	; 0x28
 801357c:	f7ff fd92 	bl	80130a4 <read_submessage_list>
 8013580:	4620      	mov	r0, r4
 8013582:	b01d      	add	sp, #116	; 0x74
 8013584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013588:	4631      	mov	r1, r6
 801358a:	f108 0008 	add.w	r0, r8, #8
 801358e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8013592:	f000 fd1b 	bl	8013fcc <uxr_get_input_reliable_stream>
 8013596:	4607      	mov	r7, r0
 8013598:	b338      	cbz	r0, 80135ea <listen_message_reliably+0x236>
 801359a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801359c:	9203      	str	r2, [sp, #12]
 801359e:	a80c      	add	r0, sp, #48	; 0x30
 80135a0:	f7ff f982 	bl	80128a8 <ucdr_buffer_remaining>
 80135a4:	4603      	mov	r3, r0
 80135a6:	f10d 0019 	add.w	r0, sp, #25
 80135aa:	9000      	str	r0, [sp, #0]
 80135ac:	9a03      	ldr	r2, [sp, #12]
 80135ae:	4651      	mov	r1, sl
 80135b0:	4638      	mov	r0, r7
 80135b2:	f004 fa3b 	bl	8017a2c <uxr_receive_reliable_message>
 80135b6:	b1c0      	cbz	r0, 80135ea <listen_message_reliably+0x236>
 80135b8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80135bc:	b393      	cbz	r3, 8013624 <listen_message_reliably+0x270>
 80135be:	ad14      	add	r5, sp, #80	; 0x50
 80135c0:	f04f 0a02 	mov.w	sl, #2
 80135c4:	e00a      	b.n	80135dc <listen_message_reliably+0x228>
 80135c6:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 80135ca:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 80135ce:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 80135d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80135d4:	4629      	mov	r1, r5
 80135d6:	4640      	mov	r0, r8
 80135d8:	f7ff fd64 	bl	80130a4 <read_submessage_list>
 80135dc:	2204      	movs	r2, #4
 80135de:	4629      	mov	r1, r5
 80135e0:	4638      	mov	r0, r7
 80135e2:	f004 faa3 	bl	8017b2c <uxr_next_input_reliable_buffer_available>
 80135e6:	2800      	cmp	r0, #0
 80135e8:	d1ed      	bne.n	80135c6 <listen_message_reliably+0x212>
 80135ea:	4640      	mov	r0, r8
 80135ec:	4632      	mov	r2, r6
 80135ee:	4649      	mov	r1, r9
 80135f0:	f7ff fbd4 	bl	8012d9c <write_submessage_acknack.isra.0>
 80135f4:	4620      	mov	r0, r4
 80135f6:	b01d      	add	sp, #116	; 0x74
 80135f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135fc:	4631      	mov	r1, r6
 80135fe:	f108 0008 	add.w	r0, r8, #8
 8013602:	f000 fcd9 	bl	8013fb8 <uxr_get_input_best_effort_stream>
 8013606:	2800      	cmp	r0, #0
 8013608:	d099      	beq.n	801353e <listen_message_reliably+0x18a>
 801360a:	4651      	mov	r1, sl
 801360c:	f004 f97a 	bl	8017904 <uxr_receive_best_effort_message>
 8013610:	2800      	cmp	r0, #0
 8013612:	d094      	beq.n	801353e <listen_message_reliably+0x18a>
 8013614:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8013618:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801361a:	a90c      	add	r1, sp, #48	; 0x30
 801361c:	4640      	mov	r0, r8
 801361e:	f7ff fd41 	bl	80130a4 <read_submessage_list>
 8013622:	e78c      	b.n	801353e <listen_message_reliably+0x18a>
 8013624:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8013628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801362a:	a90c      	add	r1, sp, #48	; 0x30
 801362c:	4640      	mov	r0, r8
 801362e:	f7ff fd39 	bl	80130a4 <read_submessage_list>
 8013632:	e7c4      	b.n	80135be <listen_message_reliably+0x20a>

08013634 <uxr_run_session_until_confirm_delivery>:
 8013634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013638:	4606      	mov	r6, r0
 801363a:	460d      	mov	r5, r1
 801363c:	f000 fd2c 	bl	8014098 <uxr_millis>
 8013640:	4607      	mov	r7, r0
 8013642:	4630      	mov	r0, r6
 8013644:	f7ff fc70 	bl	8012f28 <uxr_flash_output_streams>
 8013648:	2d00      	cmp	r5, #0
 801364a:	f106 0808 	add.w	r8, r6, #8
 801364e:	bfa8      	it	ge
 8013650:	462c      	movge	r4, r5
 8013652:	da07      	bge.n	8013664 <uxr_run_session_until_confirm_delivery+0x30>
 8013654:	e00e      	b.n	8013674 <uxr_run_session_until_confirm_delivery+0x40>
 8013656:	f7ff fead 	bl	80133b4 <listen_message_reliably>
 801365a:	f000 fd1d 	bl	8014098 <uxr_millis>
 801365e:	1bc3      	subs	r3, r0, r7
 8013660:	1aec      	subs	r4, r5, r3
 8013662:	d407      	bmi.n	8013674 <uxr_run_session_until_confirm_delivery+0x40>
 8013664:	4640      	mov	r0, r8
 8013666:	f000 fcbb 	bl	8013fe0 <uxr_output_streams_confirmed>
 801366a:	4603      	mov	r3, r0
 801366c:	4621      	mov	r1, r4
 801366e:	4630      	mov	r0, r6
 8013670:	2b00      	cmp	r3, #0
 8013672:	d0f0      	beq.n	8013656 <uxr_run_session_until_confirm_delivery+0x22>
 8013674:	4640      	mov	r0, r8
 8013676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801367a:	f000 bcb1 	b.w	8013fe0 <uxr_output_streams_confirmed>
 801367e:	bf00      	nop

08013680 <uxr_run_session_until_all_status>:
 8013680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013684:	9c08      	ldr	r4, [sp, #32]
 8013686:	4606      	mov	r6, r0
 8013688:	460f      	mov	r7, r1
 801368a:	4691      	mov	r9, r2
 801368c:	461d      	mov	r5, r3
 801368e:	f7ff fc4b 	bl	8012f28 <uxr_flash_output_streams>
 8013692:	b124      	cbz	r4, 801369e <uxr_run_session_until_all_status+0x1e>
 8013694:	4622      	mov	r2, r4
 8013696:	21ff      	movs	r1, #255	; 0xff
 8013698:	4628      	mov	r0, r5
 801369a:	f006 fae5 	bl	8019c68 <memset>
 801369e:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 80136a2:	67f4      	str	r4, [r6, #124]	; 0x7c
 80136a4:	f000 fcf8 	bl	8014098 <uxr_millis>
 80136a8:	3d01      	subs	r5, #1
 80136aa:	f1a9 0902 	sub.w	r9, r9, #2
 80136ae:	4680      	mov	r8, r0
 80136b0:	4639      	mov	r1, r7
 80136b2:	4630      	mov	r0, r6
 80136b4:	f7ff fe7e 	bl	80133b4 <listen_message_reliably>
 80136b8:	f000 fcee 	bl	8014098 <uxr_millis>
 80136bc:	eba0 0008 	sub.w	r0, r0, r8
 80136c0:	1a39      	subs	r1, r7, r0
 80136c2:	b344      	cbz	r4, 8013716 <uxr_run_session_until_all_status+0x96>
 80136c4:	4628      	mov	r0, r5
 80136c6:	46ac      	mov	ip, r5
 80136c8:	2301      	movs	r3, #1
 80136ca:	e002      	b.n	80136d2 <uxr_run_session_until_all_status+0x52>
 80136cc:	42a3      	cmp	r3, r4
 80136ce:	d20d      	bcs.n	80136ec <uxr_run_session_until_all_status+0x6c>
 80136d0:	3301      	adds	r3, #1
 80136d2:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 80136d6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80136da:	d1f7      	bne.n	80136cc <uxr_run_session_until_all_status+0x4c>
 80136dc:	42a3      	cmp	r3, r4
 80136de:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 80136e2:	d213      	bcs.n	801370c <uxr_run_session_until_all_status+0x8c>
 80136e4:	2a00      	cmp	r2, #0
 80136e6:	d0f3      	beq.n	80136d0 <uxr_run_session_until_all_status+0x50>
 80136e8:	2900      	cmp	r1, #0
 80136ea:	dce2      	bgt.n	80136b2 <uxr_run_session_until_all_status+0x32>
 80136ec:	2300      	movs	r3, #0
 80136ee:	67f3      	str	r3, [r6, #124]	; 0x7c
 80136f0:	442c      	add	r4, r5
 80136f2:	e001      	b.n	80136f8 <uxr_run_session_until_all_status+0x78>
 80136f4:	2b01      	cmp	r3, #1
 80136f6:	d812      	bhi.n	801371e <uxr_run_session_until_all_status+0x9e>
 80136f8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80136fc:	4284      	cmp	r4, r0
 80136fe:	d1f9      	bne.n	80136f4 <uxr_run_session_until_all_status+0x74>
 8013700:	2b01      	cmp	r3, #1
 8013702:	bf8c      	ite	hi
 8013704:	2000      	movhi	r0, #0
 8013706:	2001      	movls	r0, #1
 8013708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801370c:	2900      	cmp	r1, #0
 801370e:	dded      	ble.n	80136ec <uxr_run_session_until_all_status+0x6c>
 8013710:	2a00      	cmp	r2, #0
 8013712:	d1ce      	bne.n	80136b2 <uxr_run_session_until_all_status+0x32>
 8013714:	e7ea      	b.n	80136ec <uxr_run_session_until_all_status+0x6c>
 8013716:	67f4      	str	r4, [r6, #124]	; 0x7c
 8013718:	2001      	movs	r0, #1
 801371a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801371e:	2000      	movs	r0, #0
 8013720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013724 <wait_session_status>:
 8013724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013728:	4604      	mov	r4, r0
 801372a:	b09d      	sub	sp, #116	; 0x74
 801372c:	20ff      	movs	r0, #255	; 0xff
 801372e:	7160      	strb	r0, [r4, #5]
 8013730:	9303      	str	r3, [sp, #12]
 8013732:	2b00      	cmp	r3, #0
 8013734:	f000 80b6 	beq.w	80138a4 <wait_session_status+0x180>
 8013738:	468a      	mov	sl, r1
 801373a:	4691      	mov	r9, r2
 801373c:	f04f 0b00 	mov.w	fp, #0
 8013740:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013742:	464a      	mov	r2, r9
 8013744:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013748:	4651      	mov	r1, sl
 801374a:	47a8      	blx	r5
 801374c:	f000 fca4 	bl	8014098 <uxr_millis>
 8013750:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013754:	4605      	mov	r5, r0
 8013756:	e009      	b.n	801376c <wait_session_status+0x48>
 8013758:	f000 fc9e 	bl	8014098 <uxr_millis>
 801375c:	1b40      	subs	r0, r0, r5
 801375e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8013762:	2b00      	cmp	r3, #0
 8013764:	dd40      	ble.n	80137e8 <wait_session_status+0xc4>
 8013766:	7960      	ldrb	r0, [r4, #5]
 8013768:	28ff      	cmp	r0, #255	; 0xff
 801376a:	d145      	bne.n	80137f8 <wait_session_status+0xd4>
 801376c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801376e:	a908      	add	r1, sp, #32
 8013770:	6896      	ldr	r6, [r2, #8]
 8013772:	6810      	ldr	r0, [r2, #0]
 8013774:	aa09      	add	r2, sp, #36	; 0x24
 8013776:	47b0      	blx	r6
 8013778:	2800      	cmp	r0, #0
 801377a:	d0ed      	beq.n	8013758 <wait_session_status+0x34>
 801377c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8013780:	a80c      	add	r0, sp, #48	; 0x30
 8013782:	f7ff f861 	bl	8012848 <ucdr_init_buffer>
 8013786:	2600      	movs	r6, #0
 8013788:	f10d 031e 	add.w	r3, sp, #30
 801378c:	aa07      	add	r2, sp, #28
 801378e:	a90c      	add	r1, sp, #48	; 0x30
 8013790:	4620      	mov	r0, r4
 8013792:	f88d 601c 	strb.w	r6, [sp, #28]
 8013796:	f000 fa87 	bl	8013ca8 <uxr_read_session_header>
 801379a:	2800      	cmp	r0, #0
 801379c:	d0dc      	beq.n	8013758 <wait_session_status+0x34>
 801379e:	4631      	mov	r1, r6
 80137a0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80137a4:	f000 fb24 	bl	8013df0 <uxr_stream_id_from_raw>
 80137a8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80137ac:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80137b0:	9302      	str	r3, [sp, #8]
 80137b2:	2f01      	cmp	r7, #1
 80137b4:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 80137b8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80137bc:	d05c      	beq.n	8013878 <wait_session_status+0x154>
 80137be:	2f02      	cmp	r7, #2
 80137c0:	d020      	beq.n	8013804 <wait_session_status+0xe0>
 80137c2:	2f00      	cmp	r7, #0
 80137c4:	d1c8      	bne.n	8013758 <wait_session_status+0x34>
 80137c6:	4639      	mov	r1, r7
 80137c8:	4638      	mov	r0, r7
 80137ca:	f000 fb11 	bl	8013df0 <uxr_stream_id_from_raw>
 80137ce:	a90c      	add	r1, sp, #48	; 0x30
 80137d0:	4602      	mov	r2, r0
 80137d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80137d4:	4620      	mov	r0, r4
 80137d6:	f7ff fc65 	bl	80130a4 <read_submessage_list>
 80137da:	f000 fc5d 	bl	8014098 <uxr_millis>
 80137de:	1b40      	subs	r0, r0, r5
 80137e0:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	dcbe      	bgt.n	8013766 <wait_session_status+0x42>
 80137e8:	9b03      	ldr	r3, [sp, #12]
 80137ea:	7960      	ldrb	r0, [r4, #5]
 80137ec:	f10b 0b01 	add.w	fp, fp, #1
 80137f0:	455b      	cmp	r3, fp
 80137f2:	d001      	beq.n	80137f8 <wait_session_status+0xd4>
 80137f4:	28ff      	cmp	r0, #255	; 0xff
 80137f6:	d0a3      	beq.n	8013740 <wait_session_status+0x1c>
 80137f8:	38ff      	subs	r0, #255	; 0xff
 80137fa:	bf18      	it	ne
 80137fc:	2001      	movne	r0, #1
 80137fe:	b01d      	add	sp, #116	; 0x74
 8013800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013804:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8013808:	9304      	str	r3, [sp, #16]
 801380a:	4631      	mov	r1, r6
 801380c:	f104 0008 	add.w	r0, r4, #8
 8013810:	f000 fbdc 	bl	8013fcc <uxr_get_input_reliable_stream>
 8013814:	4680      	mov	r8, r0
 8013816:	b348      	cbz	r0, 801386c <wait_session_status+0x148>
 8013818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801381a:	9205      	str	r2, [sp, #20]
 801381c:	a80c      	add	r0, sp, #48	; 0x30
 801381e:	f7ff f843 	bl	80128a8 <ucdr_buffer_remaining>
 8013822:	4603      	mov	r3, r0
 8013824:	f10d 001d 	add.w	r0, sp, #29
 8013828:	9000      	str	r0, [sp, #0]
 801382a:	9a05      	ldr	r2, [sp, #20]
 801382c:	9902      	ldr	r1, [sp, #8]
 801382e:	4640      	mov	r0, r8
 8013830:	f004 f8fc 	bl	8017a2c <uxr_receive_reliable_message>
 8013834:	b1d0      	cbz	r0, 801386c <wait_session_status+0x148>
 8013836:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d03a      	beq.n	80138b4 <wait_session_status+0x190>
 801383e:	9f04      	ldr	r7, [sp, #16]
 8013840:	e00a      	b.n	8013858 <wait_session_status+0x134>
 8013842:	f04f 0302 	mov.w	r3, #2
 8013846:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 801384a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801384e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8013852:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013854:	f7ff fc26 	bl	80130a4 <read_submessage_list>
 8013858:	a914      	add	r1, sp, #80	; 0x50
 801385a:	2204      	movs	r2, #4
 801385c:	4640      	mov	r0, r8
 801385e:	f004 f965 	bl	8017b2c <uxr_next_input_reliable_buffer_available>
 8013862:	4603      	mov	r3, r0
 8013864:	a914      	add	r1, sp, #80	; 0x50
 8013866:	4620      	mov	r0, r4
 8013868:	2b00      	cmp	r3, #0
 801386a:	d1ea      	bne.n	8013842 <wait_session_status+0x11e>
 801386c:	9904      	ldr	r1, [sp, #16]
 801386e:	4632      	mov	r2, r6
 8013870:	4620      	mov	r0, r4
 8013872:	f7ff fa93 	bl	8012d9c <write_submessage_acknack.isra.0>
 8013876:	e76f      	b.n	8013758 <wait_session_status+0x34>
 8013878:	4631      	mov	r1, r6
 801387a:	f104 0008 	add.w	r0, r4, #8
 801387e:	f000 fb9b 	bl	8013fb8 <uxr_get_input_best_effort_stream>
 8013882:	2800      	cmp	r0, #0
 8013884:	f43f af68 	beq.w	8013758 <wait_session_status+0x34>
 8013888:	9902      	ldr	r1, [sp, #8]
 801388a:	f004 f83b 	bl	8017904 <uxr_receive_best_effort_message>
 801388e:	2800      	cmp	r0, #0
 8013890:	f43f af62 	beq.w	8013758 <wait_session_status+0x34>
 8013894:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8013898:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801389a:	a90c      	add	r1, sp, #48	; 0x30
 801389c:	4620      	mov	r0, r4
 801389e:	f7ff fc01 	bl	80130a4 <read_submessage_list>
 80138a2:	e759      	b.n	8013758 <wait_session_status+0x34>
 80138a4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80138a6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80138aa:	47a0      	blx	r4
 80138ac:	2001      	movs	r0, #1
 80138ae:	b01d      	add	sp, #116	; 0x74
 80138b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138b4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 80138b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80138ba:	a90c      	add	r1, sp, #48	; 0x30
 80138bc:	4620      	mov	r0, r4
 80138be:	f7ff fbf1 	bl	80130a4 <read_submessage_list>
 80138c2:	e7bc      	b.n	801383e <wait_session_status+0x11a>

080138c4 <uxr_delete_session_retries>:
 80138c4:	b530      	push	{r4, r5, lr}
 80138c6:	b08f      	sub	sp, #60	; 0x3c
 80138c8:	4604      	mov	r4, r0
 80138ca:	460d      	mov	r5, r1
 80138cc:	f000 fa2e 	bl	8013d2c <uxr_session_header_offset>
 80138d0:	2300      	movs	r3, #0
 80138d2:	2210      	movs	r2, #16
 80138d4:	9000      	str	r0, [sp, #0]
 80138d6:	a902      	add	r1, sp, #8
 80138d8:	a806      	add	r0, sp, #24
 80138da:	f7fe ffa3 	bl	8012824 <ucdr_init_buffer_origin_offset>
 80138de:	a906      	add	r1, sp, #24
 80138e0:	4620      	mov	r0, r4
 80138e2:	f000 f973 	bl	8013bcc <uxr_buffer_delete_session>
 80138e6:	2200      	movs	r2, #0
 80138e8:	4611      	mov	r1, r2
 80138ea:	9b06      	ldr	r3, [sp, #24]
 80138ec:	4620      	mov	r0, r4
 80138ee:	f000 f9c7 	bl	8013c80 <uxr_stamp_session_header>
 80138f2:	a806      	add	r0, sp, #24
 80138f4:	f7fe ffd4 	bl	80128a0 <ucdr_buffer_length>
 80138f8:	462b      	mov	r3, r5
 80138fa:	4602      	mov	r2, r0
 80138fc:	a902      	add	r1, sp, #8
 80138fe:	4620      	mov	r0, r4
 8013900:	f7ff ff10 	bl	8013724 <wait_session_status>
 8013904:	b118      	cbz	r0, 801390e <uxr_delete_session_retries+0x4a>
 8013906:	7960      	ldrb	r0, [r4, #5]
 8013908:	fab0 f080 	clz	r0, r0
 801390c:	0940      	lsrs	r0, r0, #5
 801390e:	b00f      	add	sp, #60	; 0x3c
 8013910:	bd30      	pop	{r4, r5, pc}
 8013912:	bf00      	nop

08013914 <uxr_create_session>:
 8013914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013918:	f100 0b08 	add.w	fp, r0, #8
 801391c:	b0ab      	sub	sp, #172	; 0xac
 801391e:	4604      	mov	r4, r0
 8013920:	4658      	mov	r0, fp
 8013922:	f000 fa99 	bl	8013e58 <uxr_reset_stream_storage>
 8013926:	4620      	mov	r0, r4
 8013928:	f000 fa00 	bl	8013d2c <uxr_session_header_offset>
 801392c:	2300      	movs	r3, #0
 801392e:	9000      	str	r0, [sp, #0]
 8013930:	221c      	movs	r2, #28
 8013932:	a90b      	add	r1, sp, #44	; 0x2c
 8013934:	a812      	add	r0, sp, #72	; 0x48
 8013936:	f7fe ff75 	bl	8012824 <ucdr_init_buffer_origin_offset>
 801393a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801393c:	8a1a      	ldrh	r2, [r3, #16]
 801393e:	3a04      	subs	r2, #4
 8013940:	b292      	uxth	r2, r2
 8013942:	a912      	add	r1, sp, #72	; 0x48
 8013944:	4620      	mov	r0, r4
 8013946:	f000 f917 	bl	8013b78 <uxr_buffer_create_session>
 801394a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801394c:	4620      	mov	r0, r4
 801394e:	f000 f983 	bl	8013c58 <uxr_stamp_create_session_header>
 8013952:	a812      	add	r0, sp, #72	; 0x48
 8013954:	f7fe ffa4 	bl	80128a0 <ucdr_buffer_length>
 8013958:	23ff      	movs	r3, #255	; 0xff
 801395a:	7163      	strb	r3, [r4, #5]
 801395c:	230a      	movs	r3, #10
 801395e:	46da      	mov	sl, fp
 8013960:	9303      	str	r3, [sp, #12]
 8013962:	4683      	mov	fp, r0
 8013964:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013966:	465a      	mov	r2, fp
 8013968:	e9d3 0500 	ldrd	r0, r5, [r3]
 801396c:	a90b      	add	r1, sp, #44	; 0x2c
 801396e:	47a8      	blx	r5
 8013970:	f000 fb92 	bl	8014098 <uxr_millis>
 8013974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013978:	4605      	mov	r5, r0
 801397a:	e009      	b.n	8013990 <uxr_create_session+0x7c>
 801397c:	f000 fb8c 	bl	8014098 <uxr_millis>
 8013980:	1b40      	subs	r0, r0, r5
 8013982:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8013986:	2b00      	cmp	r3, #0
 8013988:	7962      	ldrb	r2, [r4, #5]
 801398a:	dd38      	ble.n	80139fe <uxr_create_session+0xea>
 801398c:	2aff      	cmp	r2, #255	; 0xff
 801398e:	d13c      	bne.n	8013a0a <uxr_create_session+0xf6>
 8013990:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8013992:	a907      	add	r1, sp, #28
 8013994:	6896      	ldr	r6, [r2, #8]
 8013996:	6810      	ldr	r0, [r2, #0]
 8013998:	aa08      	add	r2, sp, #32
 801399a:	47b0      	blx	r6
 801399c:	2800      	cmp	r0, #0
 801399e:	d0ed      	beq.n	801397c <uxr_create_session+0x68>
 80139a0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80139a4:	a81a      	add	r0, sp, #104	; 0x68
 80139a6:	f7fe ff4f 	bl	8012848 <ucdr_init_buffer>
 80139aa:	2600      	movs	r6, #0
 80139ac:	f10d 031a 	add.w	r3, sp, #26
 80139b0:	aa06      	add	r2, sp, #24
 80139b2:	a91a      	add	r1, sp, #104	; 0x68
 80139b4:	4620      	mov	r0, r4
 80139b6:	f88d 6018 	strb.w	r6, [sp, #24]
 80139ba:	f000 f975 	bl	8013ca8 <uxr_read_session_header>
 80139be:	2800      	cmp	r0, #0
 80139c0:	d0dc      	beq.n	801397c <uxr_create_session+0x68>
 80139c2:	4631      	mov	r1, r6
 80139c4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80139c8:	f000 fa12 	bl	8013df0 <uxr_stream_id_from_raw>
 80139cc:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80139d0:	2e01      	cmp	r6, #1
 80139d2:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 80139d6:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80139da:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80139de:	d053      	beq.n	8013a88 <uxr_create_session+0x174>
 80139e0:	2e02      	cmp	r6, #2
 80139e2:	d018      	beq.n	8013a16 <uxr_create_session+0x102>
 80139e4:	2e00      	cmp	r6, #0
 80139e6:	d1c9      	bne.n	801397c <uxr_create_session+0x68>
 80139e8:	4631      	mov	r1, r6
 80139ea:	4630      	mov	r0, r6
 80139ec:	f000 fa00 	bl	8013df0 <uxr_stream_id_from_raw>
 80139f0:	a91a      	add	r1, sp, #104	; 0x68
 80139f2:	4602      	mov	r2, r0
 80139f4:	900a      	str	r0, [sp, #40]	; 0x28
 80139f6:	4620      	mov	r0, r4
 80139f8:	f7ff fb54 	bl	80130a4 <read_submessage_list>
 80139fc:	e7be      	b.n	801397c <uxr_create_session+0x68>
 80139fe:	9b03      	ldr	r3, [sp, #12]
 8013a00:	3b01      	subs	r3, #1
 8013a02:	9303      	str	r3, [sp, #12]
 8013a04:	d001      	beq.n	8013a0a <uxr_create_session+0xf6>
 8013a06:	2aff      	cmp	r2, #255	; 0xff
 8013a08:	d0ac      	beq.n	8013964 <uxr_create_session+0x50>
 8013a0a:	2a00      	cmp	r2, #0
 8013a0c:	d051      	beq.n	8013ab2 <uxr_create_session+0x19e>
 8013a0e:	2000      	movs	r0, #0
 8013a10:	b02b      	add	sp, #172	; 0xac
 8013a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a16:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8013a1a:	9304      	str	r3, [sp, #16]
 8013a1c:	4639      	mov	r1, r7
 8013a1e:	4650      	mov	r0, sl
 8013a20:	f000 fad4 	bl	8013fcc <uxr_get_input_reliable_stream>
 8013a24:	4680      	mov	r8, r0
 8013a26:	b348      	cbz	r0, 8013a7c <uxr_create_session+0x168>
 8013a28:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013a2a:	9205      	str	r2, [sp, #20]
 8013a2c:	a81a      	add	r0, sp, #104	; 0x68
 8013a2e:	f7fe ff3b 	bl	80128a8 <ucdr_buffer_remaining>
 8013a32:	4603      	mov	r3, r0
 8013a34:	f10d 0019 	add.w	r0, sp, #25
 8013a38:	9000      	str	r0, [sp, #0]
 8013a3a:	9a05      	ldr	r2, [sp, #20]
 8013a3c:	4649      	mov	r1, r9
 8013a3e:	4640      	mov	r0, r8
 8013a40:	f003 fff4 	bl	8017a2c <uxr_receive_reliable_message>
 8013a44:	b1d0      	cbz	r0, 8013a7c <uxr_create_session+0x168>
 8013a46:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d038      	beq.n	8013ac0 <uxr_create_session+0x1ac>
 8013a4e:	9e04      	ldr	r6, [sp, #16]
 8013a50:	e00a      	b.n	8013a68 <uxr_create_session+0x154>
 8013a52:	f04f 0302 	mov.w	r3, #2
 8013a56:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 8013a5a:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 8013a5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013a62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013a64:	f7ff fb1e 	bl	80130a4 <read_submessage_list>
 8013a68:	a922      	add	r1, sp, #136	; 0x88
 8013a6a:	2204      	movs	r2, #4
 8013a6c:	4640      	mov	r0, r8
 8013a6e:	f004 f85d 	bl	8017b2c <uxr_next_input_reliable_buffer_available>
 8013a72:	4603      	mov	r3, r0
 8013a74:	a922      	add	r1, sp, #136	; 0x88
 8013a76:	4620      	mov	r0, r4
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d1ea      	bne.n	8013a52 <uxr_create_session+0x13e>
 8013a7c:	9904      	ldr	r1, [sp, #16]
 8013a7e:	463a      	mov	r2, r7
 8013a80:	4620      	mov	r0, r4
 8013a82:	f7ff f98b 	bl	8012d9c <write_submessage_acknack.isra.0>
 8013a86:	e779      	b.n	801397c <uxr_create_session+0x68>
 8013a88:	4639      	mov	r1, r7
 8013a8a:	4650      	mov	r0, sl
 8013a8c:	f000 fa94 	bl	8013fb8 <uxr_get_input_best_effort_stream>
 8013a90:	2800      	cmp	r0, #0
 8013a92:	f43f af73 	beq.w	801397c <uxr_create_session+0x68>
 8013a96:	4649      	mov	r1, r9
 8013a98:	f003 ff34 	bl	8017904 <uxr_receive_best_effort_message>
 8013a9c:	2800      	cmp	r0, #0
 8013a9e:	f43f af6d 	beq.w	801397c <uxr_create_session+0x68>
 8013aa2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8013aa6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013aa8:	a91a      	add	r1, sp, #104	; 0x68
 8013aaa:	4620      	mov	r0, r4
 8013aac:	f7ff fafa 	bl	80130a4 <read_submessage_list>
 8013ab0:	e764      	b.n	801397c <uxr_create_session+0x68>
 8013ab2:	4650      	mov	r0, sl
 8013ab4:	f000 f9d0 	bl	8013e58 <uxr_reset_stream_storage>
 8013ab8:	2001      	movs	r0, #1
 8013aba:	b02b      	add	sp, #172	; 0xac
 8013abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ac0:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8013ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013ac6:	a91a      	add	r1, sp, #104	; 0x68
 8013ac8:	4620      	mov	r0, r4
 8013aca:	f7ff faeb 	bl	80130a4 <read_submessage_list>
 8013ace:	e7be      	b.n	8013a4e <uxr_create_session+0x13a>

08013ad0 <uxr_prepare_stream_to_write_submessage>:
 8013ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ad4:	b082      	sub	sp, #8
 8013ad6:	4682      	mov	sl, r0
 8013ad8:	4610      	mov	r0, r2
 8013ada:	4615      	mov	r5, r2
 8013adc:	461e      	mov	r6, r3
 8013ade:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8013ae2:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8013ae6:	9101      	str	r1, [sp, #4]
 8013ae8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8013aec:	f000 face 	bl	801408c <uxr_submessage_padding>
 8013af0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8013af4:	f105 0904 	add.w	r9, r5, #4
 8013af8:	2b01      	cmp	r3, #1
 8013afa:	4481      	add	r9, r0
 8013afc:	d01d      	beq.n	8013b3a <uxr_prepare_stream_to_write_submessage+0x6a>
 8013afe:	2b02      	cmp	r3, #2
 8013b00:	d116      	bne.n	8013b30 <uxr_prepare_stream_to_write_submessage+0x60>
 8013b02:	4621      	mov	r1, r4
 8013b04:	f10a 0008 	add.w	r0, sl, #8
 8013b08:	f000 fa4c 	bl	8013fa4 <uxr_get_output_reliable_stream>
 8013b0c:	4604      	mov	r4, r0
 8013b0e:	b158      	cbz	r0, 8013b28 <uxr_prepare_stream_to_write_submessage+0x58>
 8013b10:	4649      	mov	r1, r9
 8013b12:	4632      	mov	r2, r6
 8013b14:	f004 f9c6 	bl	8017ea4 <uxr_prepare_reliable_buffer_to_write>
 8013b18:	4604      	mov	r4, r0
 8013b1a:	b12c      	cbz	r4, 8013b28 <uxr_prepare_stream_to_write_submessage+0x58>
 8013b1c:	4643      	mov	r3, r8
 8013b1e:	b2aa      	uxth	r2, r5
 8013b20:	4639      	mov	r1, r7
 8013b22:	4630      	mov	r0, r6
 8013b24:	f000 fa72 	bl	801400c <uxr_buffer_submessage_header>
 8013b28:	4620      	mov	r0, r4
 8013b2a:	b002      	add	sp, #8
 8013b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b30:	2400      	movs	r4, #0
 8013b32:	4620      	mov	r0, r4
 8013b34:	b002      	add	sp, #8
 8013b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b3a:	4621      	mov	r1, r4
 8013b3c:	f10a 0008 	add.w	r0, sl, #8
 8013b40:	f000 fa28 	bl	8013f94 <uxr_get_output_best_effort_stream>
 8013b44:	4604      	mov	r4, r0
 8013b46:	2800      	cmp	r0, #0
 8013b48:	d0ee      	beq.n	8013b28 <uxr_prepare_stream_to_write_submessage+0x58>
 8013b4a:	4649      	mov	r1, r9
 8013b4c:	4632      	mov	r2, r6
 8013b4e:	f004 f8d9 	bl	8017d04 <uxr_prepare_best_effort_buffer_to_write>
 8013b52:	4604      	mov	r4, r0
 8013b54:	e7e1      	b.n	8013b1a <uxr_prepare_stream_to_write_submessage+0x4a>
 8013b56:	bf00      	nop

08013b58 <uxr_init_session_info>:
 8013b58:	0e13      	lsrs	r3, r2, #24
 8013b5a:	7043      	strb	r3, [r0, #1]
 8013b5c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8013b60:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8013b64:	7001      	strb	r1, [r0, #0]
 8013b66:	70c3      	strb	r3, [r0, #3]
 8013b68:	2109      	movs	r1, #9
 8013b6a:	23ff      	movs	r3, #255	; 0xff
 8013b6c:	f880 c002 	strb.w	ip, [r0, #2]
 8013b70:	7102      	strb	r2, [r0, #4]
 8013b72:	80c1      	strh	r1, [r0, #6]
 8013b74:	7143      	strb	r3, [r0, #5]
 8013b76:	4770      	bx	lr

08013b78 <uxr_buffer_create_session>:
 8013b78:	b530      	push	{r4, r5, lr}
 8013b7a:	b089      	sub	sp, #36	; 0x24
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	4d12      	ldr	r5, [pc, #72]	; (8013bc8 <uxr_buffer_create_session+0x50>)
 8013b80:	9307      	str	r3, [sp, #28]
 8013b82:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013b86:	2201      	movs	r2, #1
 8013b88:	9301      	str	r3, [sp, #4]
 8013b8a:	80c2      	strh	r2, [r0, #6]
 8013b8c:	f88d 2004 	strb.w	r2, [sp, #4]
 8013b90:	682a      	ldr	r2, [r5, #0]
 8013b92:	9200      	str	r2, [sp, #0]
 8013b94:	88aa      	ldrh	r2, [r5, #4]
 8013b96:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013b9a:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8013b9e:	9202      	str	r2, [sp, #8]
 8013ba0:	460c      	mov	r4, r1
 8013ba2:	7802      	ldrb	r2, [r0, #0]
 8013ba4:	9303      	str	r3, [sp, #12]
 8013ba6:	4619      	mov	r1, r3
 8013ba8:	f88d 200c 	strb.w	r2, [sp, #12]
 8013bac:	4620      	mov	r0, r4
 8013bae:	2210      	movs	r2, #16
 8013bb0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8013bb4:	9306      	str	r3, [sp, #24]
 8013bb6:	f000 fa29 	bl	801400c <uxr_buffer_submessage_header>
 8013bba:	4669      	mov	r1, sp
 8013bbc:	4620      	mov	r0, r4
 8013bbe:	f001 f981 	bl	8014ec4 <uxr_serialize_CREATE_CLIENT_Payload>
 8013bc2:	b009      	add	sp, #36	; 0x24
 8013bc4:	bd30      	pop	{r4, r5, pc}
 8013bc6:	bf00      	nop
 8013bc8:	0801b334 	.word	0x0801b334

08013bcc <uxr_buffer_delete_session>:
 8013bcc:	b510      	push	{r4, lr}
 8013bce:	4b0c      	ldr	r3, [pc, #48]	; (8013c00 <uxr_buffer_delete_session+0x34>)
 8013bd0:	b082      	sub	sp, #8
 8013bd2:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8013bd6:	f8ad c006 	strh.w	ip, [sp, #6]
 8013bda:	460c      	mov	r4, r1
 8013bdc:	2202      	movs	r2, #2
 8013bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013be2:	80c2      	strh	r2, [r0, #6]
 8013be4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013be8:	2204      	movs	r2, #4
 8013bea:	2300      	movs	r3, #0
 8013bec:	2103      	movs	r1, #3
 8013bee:	4620      	mov	r0, r4
 8013bf0:	f000 fa0c 	bl	801400c <uxr_buffer_submessage_header>
 8013bf4:	a901      	add	r1, sp, #4
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	f001 fa0a 	bl	8015010 <uxr_serialize_DELETE_Payload>
 8013bfc:	b002      	add	sp, #8
 8013bfe:	bd10      	pop	{r4, pc}
 8013c00:	0801b334 	.word	0x0801b334

08013c04 <uxr_read_create_session_status>:
 8013c04:	b510      	push	{r4, lr}
 8013c06:	b088      	sub	sp, #32
 8013c08:	4604      	mov	r4, r0
 8013c0a:	4608      	mov	r0, r1
 8013c0c:	a901      	add	r1, sp, #4
 8013c0e:	f001 fa0f 	bl	8015030 <uxr_deserialize_STATUS_AGENT_Payload>
 8013c12:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013c16:	7163      	strb	r3, [r4, #5]
 8013c18:	b008      	add	sp, #32
 8013c1a:	bd10      	pop	{r4, pc}

08013c1c <uxr_read_delete_session_status>:
 8013c1c:	b510      	push	{r4, lr}
 8013c1e:	4604      	mov	r4, r0
 8013c20:	b084      	sub	sp, #16
 8013c22:	4608      	mov	r0, r1
 8013c24:	a902      	add	r1, sp, #8
 8013c26:	f001 fa33 	bl	8015090 <uxr_deserialize_STATUS_Payload>
 8013c2a:	88e3      	ldrh	r3, [r4, #6]
 8013c2c:	2b02      	cmp	r3, #2
 8013c2e:	d001      	beq.n	8013c34 <uxr_read_delete_session_status+0x18>
 8013c30:	b004      	add	sp, #16
 8013c32:	bd10      	pop	{r4, pc}
 8013c34:	f10d 000a 	add.w	r0, sp, #10
 8013c38:	f7ff f836 	bl	8012ca8 <uxr_object_id_from_raw>
 8013c3c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013c40:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8013c44:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013c48:	b29b      	uxth	r3, r3
 8013c4a:	2b02      	cmp	r3, #2
 8013c4c:	bf04      	itt	eq
 8013c4e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8013c52:	7163      	strbeq	r3, [r4, #5]
 8013c54:	b004      	add	sp, #16
 8013c56:	bd10      	pop	{r4, pc}

08013c58 <uxr_stamp_create_session_header>:
 8013c58:	b510      	push	{r4, lr}
 8013c5a:	2208      	movs	r2, #8
 8013c5c:	b08a      	sub	sp, #40	; 0x28
 8013c5e:	4604      	mov	r4, r0
 8013c60:	eb0d 0002 	add.w	r0, sp, r2
 8013c64:	f7fe fdf0 	bl	8012848 <ucdr_init_buffer>
 8013c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c6c:	9400      	str	r4, [sp, #0]
 8013c6e:	2300      	movs	r3, #0
 8013c70:	461a      	mov	r2, r3
 8013c72:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8013c76:	a802      	add	r0, sp, #8
 8013c78:	f000 fbc2 	bl	8014400 <uxr_serialize_message_header>
 8013c7c:	b00a      	add	sp, #40	; 0x28
 8013c7e:	bd10      	pop	{r4, pc}

08013c80 <uxr_stamp_session_header>:
 8013c80:	b530      	push	{r4, r5, lr}
 8013c82:	b08d      	sub	sp, #52	; 0x34
 8013c84:	4604      	mov	r4, r0
 8013c86:	460d      	mov	r5, r1
 8013c88:	9203      	str	r2, [sp, #12]
 8013c8a:	4619      	mov	r1, r3
 8013c8c:	a804      	add	r0, sp, #16
 8013c8e:	2208      	movs	r2, #8
 8013c90:	f7fe fdda 	bl	8012848 <ucdr_init_buffer>
 8013c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c98:	9b03      	ldr	r3, [sp, #12]
 8013c9a:	9400      	str	r4, [sp, #0]
 8013c9c:	462a      	mov	r2, r5
 8013c9e:	a804      	add	r0, sp, #16
 8013ca0:	f000 fbae 	bl	8014400 <uxr_serialize_message_header>
 8013ca4:	b00d      	add	sp, #52	; 0x34
 8013ca6:	bd30      	pop	{r4, r5, pc}

08013ca8 <uxr_read_session_header>:
 8013ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cac:	4607      	mov	r7, r0
 8013cae:	b084      	sub	sp, #16
 8013cb0:	4608      	mov	r0, r1
 8013cb2:	460c      	mov	r4, r1
 8013cb4:	4615      	mov	r5, r2
 8013cb6:	461e      	mov	r6, r3
 8013cb8:	f7fe fdf6 	bl	80128a8 <ucdr_buffer_remaining>
 8013cbc:	2808      	cmp	r0, #8
 8013cbe:	d803      	bhi.n	8013cc8 <uxr_read_session_header+0x20>
 8013cc0:	2000      	movs	r0, #0
 8013cc2:	b004      	add	sp, #16
 8013cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cc8:	f10d 080c 	add.w	r8, sp, #12
 8013ccc:	4633      	mov	r3, r6
 8013cce:	462a      	mov	r2, r5
 8013cd0:	f8cd 8000 	str.w	r8, [sp]
 8013cd4:	4620      	mov	r0, r4
 8013cd6:	f10d 010b 	add.w	r1, sp, #11
 8013cda:	f000 fbaf 	bl	801443c <uxr_deserialize_message_header>
 8013cde:	783a      	ldrb	r2, [r7, #0]
 8013ce0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8013ce4:	4293      	cmp	r3, r2
 8013ce6:	d1eb      	bne.n	8013cc0 <uxr_read_session_header+0x18>
 8013ce8:	061b      	lsls	r3, r3, #24
 8013cea:	d41c      	bmi.n	8013d26 <uxr_read_session_header+0x7e>
 8013cec:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8013cf0:	787b      	ldrb	r3, [r7, #1]
 8013cf2:	429a      	cmp	r2, r3
 8013cf4:	d003      	beq.n	8013cfe <uxr_read_session_header+0x56>
 8013cf6:	2001      	movs	r0, #1
 8013cf8:	f080 0001 	eor.w	r0, r0, #1
 8013cfc:	e7e1      	b.n	8013cc2 <uxr_read_session_header+0x1a>
 8013cfe:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8013d02:	78bb      	ldrb	r3, [r7, #2]
 8013d04:	429a      	cmp	r2, r3
 8013d06:	f107 0102 	add.w	r1, r7, #2
 8013d0a:	d1f4      	bne.n	8013cf6 <uxr_read_session_header+0x4e>
 8013d0c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8013d10:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013d14:	429a      	cmp	r2, r3
 8013d16:	d1ee      	bne.n	8013cf6 <uxr_read_session_header+0x4e>
 8013d18:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8013d1c:	784b      	ldrb	r3, [r1, #1]
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	d1e9      	bne.n	8013cf6 <uxr_read_session_header+0x4e>
 8013d22:	2000      	movs	r0, #0
 8013d24:	e7e8      	b.n	8013cf8 <uxr_read_session_header+0x50>
 8013d26:	2001      	movs	r0, #1
 8013d28:	e7cb      	b.n	8013cc2 <uxr_read_session_header+0x1a>
 8013d2a:	bf00      	nop

08013d2c <uxr_session_header_offset>:
 8013d2c:	f990 3000 	ldrsb.w	r3, [r0]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	bfac      	ite	ge
 8013d34:	2008      	movge	r0, #8
 8013d36:	2004      	movlt	r0, #4
 8013d38:	4770      	bx	lr
 8013d3a:	bf00      	nop

08013d3c <uxr_init_base_object_request>:
 8013d3c:	b510      	push	{r4, lr}
 8013d3e:	88c3      	ldrh	r3, [r0, #6]
 8013d40:	b082      	sub	sp, #8
 8013d42:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8013d46:	9101      	str	r1, [sp, #4]
 8013d48:	f1a3 010a 	sub.w	r1, r3, #10
 8013d4c:	b289      	uxth	r1, r1
 8013d4e:	42a1      	cmp	r1, r4
 8013d50:	d80e      	bhi.n	8013d70 <uxr_init_base_object_request+0x34>
 8013d52:	3301      	adds	r3, #1
 8013d54:	b29c      	uxth	r4, r3
 8013d56:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013d5a:	b2db      	uxtb	r3, r3
 8013d5c:	80c4      	strh	r4, [r0, #6]
 8013d5e:	9801      	ldr	r0, [sp, #4]
 8013d60:	7011      	strb	r1, [r2, #0]
 8013d62:	7053      	strb	r3, [r2, #1]
 8013d64:	1c91      	adds	r1, r2, #2
 8013d66:	f7fe ffb3 	bl	8012cd0 <uxr_object_id_to_raw>
 8013d6a:	4620      	mov	r0, r4
 8013d6c:	b002      	add	sp, #8
 8013d6e:	bd10      	pop	{r4, pc}
 8013d70:	230a      	movs	r3, #10
 8013d72:	2100      	movs	r1, #0
 8013d74:	461c      	mov	r4, r3
 8013d76:	e7f1      	b.n	8013d5c <uxr_init_base_object_request+0x20>

08013d78 <uxr_parse_base_object_request>:
 8013d78:	b570      	push	{r4, r5, r6, lr}
 8013d7a:	4604      	mov	r4, r0
 8013d7c:	3002      	adds	r0, #2
 8013d7e:	460d      	mov	r5, r1
 8013d80:	4616      	mov	r6, r2
 8013d82:	f7fe ff91 	bl	8012ca8 <uxr_object_id_from_raw>
 8013d86:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8013d8a:	8028      	strh	r0, [r5, #0]
 8013d8c:	806b      	strh	r3, [r5, #2]
 8013d8e:	7822      	ldrb	r2, [r4, #0]
 8013d90:	7863      	ldrb	r3, [r4, #1]
 8013d92:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013d96:	8033      	strh	r3, [r6, #0]
 8013d98:	bd70      	pop	{r4, r5, r6, pc}
 8013d9a:	bf00      	nop

08013d9c <uxr_stream_id>:
 8013d9c:	2901      	cmp	r1, #1
 8013d9e:	b082      	sub	sp, #8
 8013da0:	d01d      	beq.n	8013dde <uxr_stream_id+0x42>
 8013da2:	2902      	cmp	r1, #2
 8013da4:	f04f 0c00 	mov.w	ip, #0
 8013da8:	d01e      	beq.n	8013de8 <uxr_stream_id+0x4c>
 8013daa:	2300      	movs	r3, #0
 8013dac:	f36c 0307 	bfi	r3, ip, #0, #8
 8013db0:	f360 230f 	bfi	r3, r0, #8, #8
 8013db4:	f361 4317 	bfi	r3, r1, #16, #8
 8013db8:	f362 631f 	bfi	r3, r2, #24, #8
 8013dbc:	b2da      	uxtb	r2, r3
 8013dbe:	2000      	movs	r0, #0
 8013dc0:	f362 0007 	bfi	r0, r2, #0, #8
 8013dc4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013dc8:	f362 200f 	bfi	r0, r2, #8, #8
 8013dcc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013dd0:	f362 4017 	bfi	r0, r2, #16, #8
 8013dd4:	0e1b      	lsrs	r3, r3, #24
 8013dd6:	f363 601f 	bfi	r0, r3, #24, #8
 8013dda:	b002      	add	sp, #8
 8013ddc:	4770      	bx	lr
 8013dde:	f100 0c01 	add.w	ip, r0, #1
 8013de2:	fa5f fc8c 	uxtb.w	ip, ip
 8013de6:	e7e0      	b.n	8013daa <uxr_stream_id+0xe>
 8013de8:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 8013dec:	e7dd      	b.n	8013daa <uxr_stream_id+0xe>
 8013dee:	bf00      	nop

08013df0 <uxr_stream_id_from_raw>:
 8013df0:	b082      	sub	sp, #8
 8013df2:	b130      	cbz	r0, 8013e02 <uxr_stream_id_from_raw+0x12>
 8013df4:	0603      	lsls	r3, r0, #24
 8013df6:	d420      	bmi.n	8013e3a <uxr_stream_id_from_raw+0x4a>
 8013df8:	1e42      	subs	r2, r0, #1
 8013dfa:	b2d2      	uxtb	r2, r2
 8013dfc:	f04f 0c01 	mov.w	ip, #1
 8013e00:	e001      	b.n	8013e06 <uxr_stream_id_from_raw+0x16>
 8013e02:	4684      	mov	ip, r0
 8013e04:	4602      	mov	r2, r0
 8013e06:	2300      	movs	r3, #0
 8013e08:	f360 0307 	bfi	r3, r0, #0, #8
 8013e0c:	f362 230f 	bfi	r3, r2, #8, #8
 8013e10:	f36c 4317 	bfi	r3, ip, #16, #8
 8013e14:	f361 631f 	bfi	r3, r1, #24, #8
 8013e18:	b2da      	uxtb	r2, r3
 8013e1a:	2000      	movs	r0, #0
 8013e1c:	f362 0007 	bfi	r0, r2, #0, #8
 8013e20:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013e24:	f362 200f 	bfi	r0, r2, #8, #8
 8013e28:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013e2c:	f362 4017 	bfi	r0, r2, #16, #8
 8013e30:	0e1b      	lsrs	r3, r3, #24
 8013e32:	f363 601f 	bfi	r0, r3, #24, #8
 8013e36:	b002      	add	sp, #8
 8013e38:	4770      	bx	lr
 8013e3a:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8013e3e:	f04f 0c02 	mov.w	ip, #2
 8013e42:	e7e0      	b.n	8013e06 <uxr_stream_id_from_raw+0x16>

08013e44 <uxr_init_stream_storage>:
 8013e44:	2300      	movs	r3, #0
 8013e46:	7403      	strb	r3, [r0, #16]
 8013e48:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8013e4c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8013e50:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8013e54:	4770      	bx	lr
 8013e56:	bf00      	nop

08013e58 <uxr_reset_stream_storage>:
 8013e58:	b570      	push	{r4, r5, r6, lr}
 8013e5a:	7c03      	ldrb	r3, [r0, #16]
 8013e5c:	4604      	mov	r4, r0
 8013e5e:	b153      	cbz	r3, 8013e76 <uxr_reset_stream_storage+0x1e>
 8013e60:	4606      	mov	r6, r0
 8013e62:	2500      	movs	r5, #0
 8013e64:	4630      	mov	r0, r6
 8013e66:	f003 ff47 	bl	8017cf8 <uxr_reset_output_best_effort_stream>
 8013e6a:	7c23      	ldrb	r3, [r4, #16]
 8013e6c:	3501      	adds	r5, #1
 8013e6e:	42ab      	cmp	r3, r5
 8013e70:	f106 0610 	add.w	r6, r6, #16
 8013e74:	d8f6      	bhi.n	8013e64 <uxr_reset_stream_storage+0xc>
 8013e76:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013e7a:	b163      	cbz	r3, 8013e96 <uxr_reset_stream_storage+0x3e>
 8013e7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013e80:	2500      	movs	r5, #0
 8013e82:	4630      	mov	r0, r6
 8013e84:	f003 fd3a 	bl	80178fc <uxr_reset_input_best_effort_stream>
 8013e88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013e8c:	3501      	adds	r5, #1
 8013e8e:	42ab      	cmp	r3, r5
 8013e90:	f106 0602 	add.w	r6, r6, #2
 8013e94:	d8f5      	bhi.n	8013e82 <uxr_reset_stream_storage+0x2a>
 8013e96:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8013e9a:	b163      	cbz	r3, 8013eb6 <uxr_reset_stream_storage+0x5e>
 8013e9c:	f104 0618 	add.w	r6, r4, #24
 8013ea0:	2500      	movs	r5, #0
 8013ea2:	4630      	mov	r0, r6
 8013ea4:	f003 ffd4 	bl	8017e50 <uxr_reset_output_reliable_stream>
 8013ea8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8013eac:	3501      	adds	r5, #1
 8013eae:	42ab      	cmp	r3, r5
 8013eb0:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8013eb4:	d8f5      	bhi.n	8013ea2 <uxr_reset_stream_storage+0x4a>
 8013eb6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8013eba:	b163      	cbz	r3, 8013ed6 <uxr_reset_stream_storage+0x7e>
 8013ebc:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8013ec0:	2500      	movs	r5, #0
 8013ec2:	4630      	mov	r0, r6
 8013ec4:	f003 fd8e 	bl	80179e4 <uxr_reset_input_reliable_stream>
 8013ec8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8013ecc:	3501      	adds	r5, #1
 8013ece:	42ab      	cmp	r3, r5
 8013ed0:	f106 0618 	add.w	r6, r6, #24
 8013ed4:	d8f5      	bhi.n	8013ec2 <uxr_reset_stream_storage+0x6a>
 8013ed6:	bd70      	pop	{r4, r5, r6, pc}

08013ed8 <uxr_add_output_best_effort_buffer>:
 8013ed8:	b510      	push	{r4, lr}
 8013eda:	7c04      	ldrb	r4, [r0, #16]
 8013edc:	f104 0c01 	add.w	ip, r4, #1
 8013ee0:	b082      	sub	sp, #8
 8013ee2:	f880 c010 	strb.w	ip, [r0, #16]
 8013ee6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013eea:	f003 fefb 	bl	8017ce4 <uxr_init_output_best_effort_stream>
 8013eee:	2201      	movs	r2, #1
 8013ef0:	4611      	mov	r1, r2
 8013ef2:	4620      	mov	r0, r4
 8013ef4:	b002      	add	sp, #8
 8013ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013efa:	f7ff bf4f 	b.w	8013d9c <uxr_stream_id>
 8013efe:	bf00      	nop

08013f00 <uxr_add_output_reliable_buffer>:
 8013f00:	b510      	push	{r4, lr}
 8013f02:	b084      	sub	sp, #16
 8013f04:	4684      	mov	ip, r0
 8013f06:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013f0a:	9000      	str	r0, [sp, #0]
 8013f0c:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8013f10:	2028      	movs	r0, #40	; 0x28
 8013f12:	fb00 c004 	mla	r0, r0, r4, ip
 8013f16:	f104 0e01 	add.w	lr, r4, #1
 8013f1a:	3018      	adds	r0, #24
 8013f1c:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8013f20:	f003 ff5e 	bl	8017de0 <uxr_init_output_reliable_stream>
 8013f24:	2201      	movs	r2, #1
 8013f26:	2102      	movs	r1, #2
 8013f28:	4620      	mov	r0, r4
 8013f2a:	b004      	add	sp, #16
 8013f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f30:	f7ff bf34 	b.w	8013d9c <uxr_stream_id>

08013f34 <uxr_add_input_best_effort_buffer>:
 8013f34:	b510      	push	{r4, lr}
 8013f36:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	1c62      	adds	r2, r4, #1
 8013f3e:	f104 0021 	add.w	r0, r4, #33	; 0x21
 8013f42:	b082      	sub	sp, #8
 8013f44:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8013f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013f4c:	f003 fcd2 	bl	80178f4 <uxr_init_input_best_effort_stream>
 8013f50:	2200      	movs	r2, #0
 8013f52:	2101      	movs	r1, #1
 8013f54:	4620      	mov	r0, r4
 8013f56:	b002      	add	sp, #8
 8013f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f5c:	f7ff bf1e 	b.w	8013d9c <uxr_stream_id>

08013f60 <uxr_add_input_reliable_buffer>:
 8013f60:	b510      	push	{r4, lr}
 8013f62:	b084      	sub	sp, #16
 8013f64:	4684      	mov	ip, r0
 8013f66:	9806      	ldr	r0, [sp, #24]
 8013f68:	9000      	str	r0, [sp, #0]
 8013f6a:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8013f6e:	2018      	movs	r0, #24
 8013f70:	fb00 c004 	mla	r0, r0, r4, ip
 8013f74:	f104 0e01 	add.w	lr, r4, #1
 8013f78:	3048      	adds	r0, #72	; 0x48
 8013f7a:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8013f7e:	f003 fd05 	bl	801798c <uxr_init_input_reliable_stream>
 8013f82:	2200      	movs	r2, #0
 8013f84:	2102      	movs	r1, #2
 8013f86:	4620      	mov	r0, r4
 8013f88:	b004      	add	sp, #16
 8013f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f8e:	f7ff bf05 	b.w	8013d9c <uxr_stream_id>
 8013f92:	bf00      	nop

08013f94 <uxr_get_output_best_effort_stream>:
 8013f94:	7c03      	ldrb	r3, [r0, #16]
 8013f96:	428b      	cmp	r3, r1
 8013f98:	bf8c      	ite	hi
 8013f9a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8013f9e:	2000      	movls	r0, #0
 8013fa0:	4770      	bx	lr
 8013fa2:	bf00      	nop

08013fa4 <uxr_get_output_reliable_stream>:
 8013fa4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8013fa8:	428b      	cmp	r3, r1
 8013faa:	bf83      	ittte	hi
 8013fac:	2328      	movhi	r3, #40	; 0x28
 8013fae:	fb03 0001 	mlahi	r0, r3, r1, r0
 8013fb2:	3018      	addhi	r0, #24
 8013fb4:	2000      	movls	r0, #0
 8013fb6:	4770      	bx	lr

08013fb8 <uxr_get_input_best_effort_stream>:
 8013fb8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8013fbc:	428b      	cmp	r3, r1
 8013fbe:	bf86      	itte	hi
 8013fc0:	3121      	addhi	r1, #33	; 0x21
 8013fc2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8013fc6:	2000      	movls	r0, #0
 8013fc8:	4770      	bx	lr
 8013fca:	bf00      	nop

08013fcc <uxr_get_input_reliable_stream>:
 8013fcc:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8013fd0:	428b      	cmp	r3, r1
 8013fd2:	bf83      	ittte	hi
 8013fd4:	2318      	movhi	r3, #24
 8013fd6:	fb03 0001 	mlahi	r0, r3, r1, r0
 8013fda:	3048      	addhi	r0, #72	; 0x48
 8013fdc:	2000      	movls	r0, #0
 8013fde:	4770      	bx	lr

08013fe0 <uxr_output_streams_confirmed>:
 8013fe0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8013fe4:	b183      	cbz	r3, 8014008 <uxr_output_streams_confirmed+0x28>
 8013fe6:	b570      	push	{r4, r5, r6, lr}
 8013fe8:	4606      	mov	r6, r0
 8013fea:	f100 0518 	add.w	r5, r0, #24
 8013fee:	2400      	movs	r4, #0
 8013ff0:	e001      	b.n	8013ff6 <uxr_output_streams_confirmed+0x16>
 8013ff2:	3528      	adds	r5, #40	; 0x28
 8013ff4:	b138      	cbz	r0, 8014006 <uxr_output_streams_confirmed+0x26>
 8013ff6:	4628      	mov	r0, r5
 8013ff8:	f004 f988 	bl	801830c <uxr_is_output_up_to_date>
 8013ffc:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8014000:	3401      	adds	r4, #1
 8014002:	42a3      	cmp	r3, r4
 8014004:	d8f5      	bhi.n	8013ff2 <uxr_output_streams_confirmed+0x12>
 8014006:	bd70      	pop	{r4, r5, r6, pc}
 8014008:	2001      	movs	r0, #1
 801400a:	4770      	bx	lr

0801400c <uxr_buffer_submessage_header>:
 801400c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801400e:	4604      	mov	r4, r0
 8014010:	460e      	mov	r6, r1
 8014012:	2104      	movs	r1, #4
 8014014:	4615      	mov	r5, r2
 8014016:	461f      	mov	r7, r3
 8014018:	f7fe fc30 	bl	801287c <ucdr_align_to>
 801401c:	2301      	movs	r3, #1
 801401e:	ea47 0203 	orr.w	r2, r7, r3
 8014022:	4631      	mov	r1, r6
 8014024:	7523      	strb	r3, [r4, #20]
 8014026:	4620      	mov	r0, r4
 8014028:	462b      	mov	r3, r5
 801402a:	f000 fa27 	bl	801447c <uxr_serialize_submessage_header>
 801402e:	4620      	mov	r0, r4
 8014030:	f7fe fc3a 	bl	80128a8 <ucdr_buffer_remaining>
 8014034:	42a8      	cmp	r0, r5
 8014036:	bf34      	ite	cc
 8014038:	2000      	movcc	r0, #0
 801403a:	2001      	movcs	r0, #1
 801403c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801403e:	bf00      	nop

08014040 <uxr_read_submessage_header>:
 8014040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014044:	4604      	mov	r4, r0
 8014046:	460d      	mov	r5, r1
 8014048:	2104      	movs	r1, #4
 801404a:	4616      	mov	r6, r2
 801404c:	4698      	mov	r8, r3
 801404e:	f7fe fc15 	bl	801287c <ucdr_align_to>
 8014052:	4620      	mov	r0, r4
 8014054:	f7fe fc28 	bl	80128a8 <ucdr_buffer_remaining>
 8014058:	2803      	cmp	r0, #3
 801405a:	bf8c      	ite	hi
 801405c:	2701      	movhi	r7, #1
 801405e:	2700      	movls	r7, #0
 8014060:	d802      	bhi.n	8014068 <uxr_read_submessage_header+0x28>
 8014062:	4638      	mov	r0, r7
 8014064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014068:	4633      	mov	r3, r6
 801406a:	4642      	mov	r2, r8
 801406c:	4620      	mov	r0, r4
 801406e:	4629      	mov	r1, r5
 8014070:	f000 fa18 	bl	80144a4 <uxr_deserialize_submessage_header>
 8014074:	f898 3000 	ldrb.w	r3, [r8]
 8014078:	f003 0201 	and.w	r2, r3, #1
 801407c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8014080:	f888 3000 	strb.w	r3, [r8]
 8014084:	7522      	strb	r2, [r4, #20]
 8014086:	4638      	mov	r0, r7
 8014088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801408c <uxr_submessage_padding>:
 801408c:	f010 0003 	ands.w	r0, r0, #3
 8014090:	bf18      	it	ne
 8014092:	f1c0 0004 	rsbne	r0, r0, #4
 8014096:	4770      	bx	lr

08014098 <uxr_millis>:
 8014098:	b510      	push	{r4, lr}
 801409a:	b084      	sub	sp, #16
 801409c:	4669      	mov	r1, sp
 801409e:	2001      	movs	r0, #1
 80140a0:	f7ed fe7a 	bl	8001d98 <clock_gettime>
 80140a4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80140a8:	4906      	ldr	r1, [pc, #24]	; (80140c4 <uxr_millis+0x2c>)
 80140aa:	fba0 0301 	umull	r0, r3, r0, r1
 80140ae:	1900      	adds	r0, r0, r4
 80140b0:	fb01 3102 	mla	r1, r1, r2, r3
 80140b4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80140b8:	4a03      	ldr	r2, [pc, #12]	; (80140c8 <uxr_millis+0x30>)
 80140ba:	2300      	movs	r3, #0
 80140bc:	f7ec fafc 	bl	80006b8 <__aeabi_ldivmod>
 80140c0:	b004      	add	sp, #16
 80140c2:	bd10      	pop	{r4, pc}
 80140c4:	3b9aca00 	.word	0x3b9aca00
 80140c8:	000f4240 	.word	0x000f4240

080140cc <uxr_nanos>:
 80140cc:	b510      	push	{r4, lr}
 80140ce:	b084      	sub	sp, #16
 80140d0:	4669      	mov	r1, sp
 80140d2:	2001      	movs	r0, #1
 80140d4:	f7ed fe60 	bl	8001d98 <clock_gettime>
 80140d8:	4a06      	ldr	r2, [pc, #24]	; (80140f4 <uxr_nanos+0x28>)
 80140da:	9800      	ldr	r0, [sp, #0]
 80140dc:	9902      	ldr	r1, [sp, #8]
 80140de:	9c01      	ldr	r4, [sp, #4]
 80140e0:	fba0 0302 	umull	r0, r3, r0, r2
 80140e4:	1840      	adds	r0, r0, r1
 80140e6:	fb02 3304 	mla	r3, r2, r4, r3
 80140ea:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80140ee:	b004      	add	sp, #16
 80140f0:	bd10      	pop	{r4, pc}
 80140f2:	bf00      	nop
 80140f4:	3b9aca00 	.word	0x3b9aca00

080140f8 <on_full_output_buffer_fragmented>:
 80140f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140fc:	460c      	mov	r4, r1
 80140fe:	b08a      	sub	sp, #40	; 0x28
 8014100:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8014104:	4606      	mov	r6, r0
 8014106:	f104 0008 	add.w	r0, r4, #8
 801410a:	f7ff ff4b 	bl	8013fa4 <uxr_get_output_reliable_stream>
 801410e:	4605      	mov	r5, r0
 8014110:	f004 f906 	bl	8018320 <get_available_free_slots>
 8014114:	b968      	cbnz	r0, 8014132 <on_full_output_buffer_fragmented+0x3a>
 8014116:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801411a:	4620      	mov	r0, r4
 801411c:	4798      	blx	r3
 801411e:	b918      	cbnz	r0, 8014128 <on_full_output_buffer_fragmented+0x30>
 8014120:	2001      	movs	r0, #1
 8014122:	b00a      	add	sp, #40	; 0x28
 8014124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014128:	4628      	mov	r0, r5
 801412a:	f004 f8f9 	bl	8018320 <get_available_free_slots>
 801412e:	2800      	cmp	r0, #0
 8014130:	d0f6      	beq.n	8014120 <on_full_output_buffer_fragmented+0x28>
 8014132:	8929      	ldrh	r1, [r5, #8]
 8014134:	89eb      	ldrh	r3, [r5, #14]
 8014136:	7b28      	ldrb	r0, [r5, #12]
 8014138:	686a      	ldr	r2, [r5, #4]
 801413a:	fbb2 f8f1 	udiv	r8, r2, r1
 801413e:	fbb3 f2f1 	udiv	r2, r3, r1
 8014142:	fb01 3112 	mls	r1, r1, r2, r3
 8014146:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 801414a:	b289      	uxth	r1, r1
 801414c:	fb08 f101 	mul.w	r1, r8, r1
 8014150:	30fc      	adds	r0, #252	; 0xfc
 8014152:	f1a8 0804 	sub.w	r8, r8, #4
 8014156:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 801415a:	4440      	add	r0, r8
 801415c:	b287      	uxth	r7, r0
 801415e:	1bdb      	subs	r3, r3, r7
 8014160:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8014164:	682b      	ldr	r3, [r5, #0]
 8014166:	3104      	adds	r1, #4
 8014168:	4419      	add	r1, r3
 801416a:	4642      	mov	r2, r8
 801416c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014170:	9300      	str	r3, [sp, #0]
 8014172:	a802      	add	r0, sp, #8
 8014174:	2300      	movs	r3, #0
 8014176:	f7fe fb55 	bl	8012824 <ucdr_init_buffer_origin_offset>
 801417a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 801417e:	f102 0308 	add.w	r3, r2, #8
 8014182:	4543      	cmp	r3, r8
 8014184:	d928      	bls.n	80141d8 <on_full_output_buffer_fragmented+0xe0>
 8014186:	463a      	mov	r2, r7
 8014188:	2300      	movs	r3, #0
 801418a:	210d      	movs	r1, #13
 801418c:	a802      	add	r0, sp, #8
 801418e:	f7ff ff3d 	bl	801400c <uxr_buffer_submessage_header>
 8014192:	8929      	ldrh	r1, [r5, #8]
 8014194:	89eb      	ldrh	r3, [r5, #14]
 8014196:	fbb3 f2f1 	udiv	r2, r3, r1
 801419a:	fb01 3312 	mls	r3, r1, r2, r3
 801419e:	b29b      	uxth	r3, r3
 80141a0:	686a      	ldr	r2, [r5, #4]
 80141a2:	fbb2 f2f1 	udiv	r2, r2, r1
 80141a6:	fb02 f303 	mul.w	r3, r2, r3
 80141aa:	682a      	ldr	r2, [r5, #0]
 80141ac:	f842 8003 	str.w	r8, [r2, r3]
 80141b0:	89e8      	ldrh	r0, [r5, #14]
 80141b2:	2101      	movs	r1, #1
 80141b4:	f004 f9ca 	bl	801854c <uxr_seq_num_add>
 80141b8:	9904      	ldr	r1, [sp, #16]
 80141ba:	9a03      	ldr	r2, [sp, #12]
 80141bc:	81e8      	strh	r0, [r5, #14]
 80141be:	1a52      	subs	r2, r2, r1
 80141c0:	4630      	mov	r0, r6
 80141c2:	f7fe fb41 	bl	8012848 <ucdr_init_buffer>
 80141c6:	4630      	mov	r0, r6
 80141c8:	490f      	ldr	r1, [pc, #60]	; (8014208 <on_full_output_buffer_fragmented+0x110>)
 80141ca:	4622      	mov	r2, r4
 80141cc:	f7fe fb10 	bl	80127f0 <ucdr_set_on_full_buffer_callback>
 80141d0:	2000      	movs	r0, #0
 80141d2:	b00a      	add	sp, #40	; 0x28
 80141d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141d8:	b292      	uxth	r2, r2
 80141da:	2302      	movs	r3, #2
 80141dc:	210d      	movs	r1, #13
 80141de:	a802      	add	r0, sp, #8
 80141e0:	f7ff ff14 	bl	801400c <uxr_buffer_submessage_header>
 80141e4:	8928      	ldrh	r0, [r5, #8]
 80141e6:	89eb      	ldrh	r3, [r5, #14]
 80141e8:	fbb3 f1f0 	udiv	r1, r3, r0
 80141ec:	fb00 3311 	mls	r3, r0, r1, r3
 80141f0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80141f4:	6869      	ldr	r1, [r5, #4]
 80141f6:	fbb1 f1f0 	udiv	r1, r1, r0
 80141fa:	b29b      	uxth	r3, r3
 80141fc:	fb01 f303 	mul.w	r3, r1, r3
 8014200:	6829      	ldr	r1, [r5, #0]
 8014202:	3208      	adds	r2, #8
 8014204:	50ca      	str	r2, [r1, r3]
 8014206:	e7d3      	b.n	80141b0 <on_full_output_buffer_fragmented+0xb8>
 8014208:	080140f9 	.word	0x080140f9

0801420c <uxr_prepare_output_stream>:
 801420c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801420e:	b087      	sub	sp, #28
 8014210:	2707      	movs	r7, #7
 8014212:	9202      	str	r2, [sp, #8]
 8014214:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014216:	9103      	str	r1, [sp, #12]
 8014218:	2500      	movs	r5, #0
 801421a:	3204      	adds	r2, #4
 801421c:	e9cd 7500 	strd	r7, r5, [sp]
 8014220:	461c      	mov	r4, r3
 8014222:	4606      	mov	r6, r0
 8014224:	f7ff fc54 	bl	8013ad0 <uxr_prepare_stream_to_write_submessage>
 8014228:	f080 0201 	eor.w	r2, r0, #1
 801422c:	b2d2      	uxtb	r2, r2
 801422e:	75a2      	strb	r2, [r4, #22]
 8014230:	b112      	cbz	r2, 8014238 <uxr_prepare_output_stream+0x2c>
 8014232:	4628      	mov	r0, r5
 8014234:	b007      	add	sp, #28
 8014236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014238:	aa05      	add	r2, sp, #20
 801423a:	9902      	ldr	r1, [sp, #8]
 801423c:	4630      	mov	r0, r6
 801423e:	f7ff fd7d 	bl	8013d3c <uxr_init_base_object_request>
 8014242:	a905      	add	r1, sp, #20
 8014244:	4605      	mov	r5, r0
 8014246:	4620      	mov	r0, r4
 8014248:	f000 ffa0 	bl	801518c <uxr_serialize_WRITE_DATA_Payload_Data>
 801424c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8014250:	69a6      	ldr	r6, [r4, #24]
 8014252:	69e7      	ldr	r7, [r4, #28]
 8014254:	1a52      	subs	r2, r2, r1
 8014256:	4620      	mov	r0, r4
 8014258:	f7fe faf6 	bl	8012848 <ucdr_init_buffer>
 801425c:	4620      	mov	r0, r4
 801425e:	463a      	mov	r2, r7
 8014260:	4631      	mov	r1, r6
 8014262:	f7fe fac5 	bl	80127f0 <ucdr_set_on_full_buffer_callback>
 8014266:	4628      	mov	r0, r5
 8014268:	b007      	add	sp, #28
 801426a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801426c <uxr_prepare_output_stream_fragmented>:
 801426c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014270:	b091      	sub	sp, #68	; 0x44
 8014272:	4605      	mov	r5, r0
 8014274:	9105      	str	r1, [sp, #20]
 8014276:	3008      	adds	r0, #8
 8014278:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801427c:	461e      	mov	r6, r3
 801427e:	9204      	str	r2, [sp, #16]
 8014280:	f7ff fe90 	bl	8013fa4 <uxr_get_output_reliable_stream>
 8014284:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8014288:	2b01      	cmp	r3, #1
 801428a:	f000 8091 	beq.w	80143b0 <uxr_prepare_output_stream_fragmented+0x144>
 801428e:	4604      	mov	r4, r0
 8014290:	2800      	cmp	r0, #0
 8014292:	f000 808d 	beq.w	80143b0 <uxr_prepare_output_stream_fragmented+0x144>
 8014296:	f004 f843 	bl	8018320 <get_available_free_slots>
 801429a:	2800      	cmp	r0, #0
 801429c:	f000 8083 	beq.w	80143a6 <uxr_prepare_output_stream_fragmented+0x13a>
 80142a0:	8922      	ldrh	r2, [r4, #8]
 80142a2:	89e7      	ldrh	r7, [r4, #14]
 80142a4:	fbb7 f9f2 	udiv	r9, r7, r2
 80142a8:	fb02 7919 	mls	r9, r2, r9, r7
 80142ac:	fa1f f989 	uxth.w	r9, r9
 80142b0:	6863      	ldr	r3, [r4, #4]
 80142b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80142b6:	6823      	ldr	r3, [r4, #0]
 80142b8:	9203      	str	r2, [sp, #12]
 80142ba:	fb02 f909 	mul.w	r9, r2, r9
 80142be:	f109 0904 	add.w	r9, r9, #4
 80142c2:	4499      	add	r9, r3
 80142c4:	7b23      	ldrb	r3, [r4, #12]
 80142c6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80142ca:	4543      	cmp	r3, r8
 80142cc:	f1a2 0b04 	sub.w	fp, r2, #4
 80142d0:	d37a      	bcc.n	80143c8 <uxr_prepare_output_stream_fragmented+0x15c>
 80142d2:	f1ab 0a04 	sub.w	sl, fp, #4
 80142d6:	ebaa 0a03 	sub.w	sl, sl, r3
 80142da:	465a      	mov	r2, fp
 80142dc:	2300      	movs	r3, #0
 80142de:	4649      	mov	r1, r9
 80142e0:	a808      	add	r0, sp, #32
 80142e2:	f8cd 8000 	str.w	r8, [sp]
 80142e6:	f7fe fa9d 	bl	8012824 <ucdr_init_buffer_origin_offset>
 80142ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80142ec:	fa1f fa8a 	uxth.w	sl, sl
 80142f0:	4652      	mov	r2, sl
 80142f2:	f103 0a08 	add.w	sl, r3, #8
 80142f6:	45da      	cmp	sl, fp
 80142f8:	bf34      	ite	cc
 80142fa:	2302      	movcc	r3, #2
 80142fc:	2300      	movcs	r3, #0
 80142fe:	210d      	movs	r1, #13
 8014300:	a808      	add	r0, sp, #32
 8014302:	f7ff fe83 	bl	801400c <uxr_buffer_submessage_header>
 8014306:	8921      	ldrh	r1, [r4, #8]
 8014308:	fbb7 f2f1 	udiv	r2, r7, r1
 801430c:	fb01 7212 	mls	r2, r1, r2, r7
 8014310:	b292      	uxth	r2, r2
 8014312:	6863      	ldr	r3, [r4, #4]
 8014314:	fbb3 f3f1 	udiv	r3, r3, r1
 8014318:	fb02 f303 	mul.w	r3, r2, r3
 801431c:	6822      	ldr	r2, [r4, #0]
 801431e:	4638      	mov	r0, r7
 8014320:	f842 b003 	str.w	fp, [r2, r3]
 8014324:	2101      	movs	r1, #1
 8014326:	f004 f911 	bl	801854c <uxr_seq_num_add>
 801432a:	9b03      	ldr	r3, [sp, #12]
 801432c:	f108 0104 	add.w	r1, r8, #4
 8014330:	f1a3 0208 	sub.w	r2, r3, #8
 8014334:	eba2 0208 	sub.w	r2, r2, r8
 8014338:	4449      	add	r1, r9
 801433a:	4607      	mov	r7, r0
 801433c:	4630      	mov	r0, r6
 801433e:	f7fe fa83 	bl	8012848 <ucdr_init_buffer>
 8014342:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014344:	81e7      	strh	r7, [r4, #14]
 8014346:	1d1a      	adds	r2, r3, #4
 8014348:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801434c:	bf28      	it	cs
 801434e:	2200      	movcs	r2, #0
 8014350:	2300      	movs	r3, #0
 8014352:	b292      	uxth	r2, r2
 8014354:	2107      	movs	r1, #7
 8014356:	4630      	mov	r0, r6
 8014358:	f7ff fe58 	bl	801400c <uxr_buffer_submessage_header>
 801435c:	9904      	ldr	r1, [sp, #16]
 801435e:	aa07      	add	r2, sp, #28
 8014360:	4628      	mov	r0, r5
 8014362:	f7ff fceb 	bl	8013d3c <uxr_init_base_object_request>
 8014366:	4604      	mov	r4, r0
 8014368:	b318      	cbz	r0, 80143b2 <uxr_prepare_output_stream_fragmented+0x146>
 801436a:	a907      	add	r1, sp, #28
 801436c:	4630      	mov	r0, r6
 801436e:	f000 ff0d 	bl	801518c <uxr_serialize_WRITE_DATA_Payload_Data>
 8014372:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8014376:	4630      	mov	r0, r6
 8014378:	1a52      	subs	r2, r2, r1
 801437a:	f7fe fa65 	bl	8012848 <ucdr_init_buffer>
 801437e:	9b05      	ldr	r3, [sp, #20]
 8014380:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8014384:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014386:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 801438a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801438c:	491b      	ldr	r1, [pc, #108]	; (80143fc <uxr_prepare_output_stream_fragmented+0x190>)
 801438e:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 8014392:	4630      	mov	r0, r6
 8014394:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8014398:	462a      	mov	r2, r5
 801439a:	f7fe fa29 	bl	80127f0 <ucdr_set_on_full_buffer_callback>
 801439e:	4620      	mov	r0, r4
 80143a0:	b011      	add	sp, #68	; 0x44
 80143a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80143a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80143aa:	4628      	mov	r0, r5
 80143ac:	4798      	blx	r3
 80143ae:	b920      	cbnz	r0, 80143ba <uxr_prepare_output_stream_fragmented+0x14e>
 80143b0:	2400      	movs	r4, #0
 80143b2:	4620      	mov	r0, r4
 80143b4:	b011      	add	sp, #68	; 0x44
 80143b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ba:	4620      	mov	r0, r4
 80143bc:	f003 ffb0 	bl	8018320 <get_available_free_slots>
 80143c0:	2800      	cmp	r0, #0
 80143c2:	f47f af6d 	bne.w	80142a0 <uxr_prepare_output_stream_fragmented+0x34>
 80143c6:	e7f3      	b.n	80143b0 <uxr_prepare_output_stream_fragmented+0x144>
 80143c8:	4638      	mov	r0, r7
 80143ca:	2101      	movs	r1, #1
 80143cc:	f004 f8be 	bl	801854c <uxr_seq_num_add>
 80143d0:	8921      	ldrh	r1, [r4, #8]
 80143d2:	fbb0 f2f1 	udiv	r2, r0, r1
 80143d6:	fb01 0912 	mls	r9, r1, r2, r0
 80143da:	fa1f f289 	uxth.w	r2, r9
 80143de:	6863      	ldr	r3, [r4, #4]
 80143e0:	fbb3 f9f1 	udiv	r9, r3, r1
 80143e4:	6823      	ldr	r3, [r4, #0]
 80143e6:	fb02 f909 	mul.w	r9, r2, r9
 80143ea:	f109 0904 	add.w	r9, r9, #4
 80143ee:	4499      	add	r9, r3
 80143f0:	4607      	mov	r7, r0
 80143f2:	7b23      	ldrb	r3, [r4, #12]
 80143f4:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80143f8:	e76b      	b.n	80142d2 <uxr_prepare_output_stream_fragmented+0x66>
 80143fa:	bf00      	nop
 80143fc:	080140f9 	.word	0x080140f9

08014400 <uxr_serialize_message_header>:
 8014400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014402:	b083      	sub	sp, #12
 8014404:	4616      	mov	r6, r2
 8014406:	4604      	mov	r4, r0
 8014408:	9301      	str	r3, [sp, #4]
 801440a:	460d      	mov	r5, r1
 801440c:	9f08      	ldr	r7, [sp, #32]
 801440e:	f7fc fe1b 	bl	8011048 <ucdr_serialize_uint8_t>
 8014412:	4631      	mov	r1, r6
 8014414:	4620      	mov	r0, r4
 8014416:	f7fc fe17 	bl	8011048 <ucdr_serialize_uint8_t>
 801441a:	9a01      	ldr	r2, [sp, #4]
 801441c:	2101      	movs	r1, #1
 801441e:	4620      	mov	r0, r4
 8014420:	f7fc febe 	bl	80111a0 <ucdr_serialize_endian_uint16_t>
 8014424:	062b      	lsls	r3, r5, #24
 8014426:	d501      	bpl.n	801442c <uxr_serialize_message_header+0x2c>
 8014428:	b003      	add	sp, #12
 801442a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801442c:	2204      	movs	r2, #4
 801442e:	4639      	mov	r1, r7
 8014430:	4620      	mov	r0, r4
 8014432:	b003      	add	sp, #12
 8014434:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014438:	f003 b8ba 	b.w	80175b0 <ucdr_serialize_array_uint8_t>

0801443c <uxr_deserialize_message_header>:
 801443c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801443e:	b083      	sub	sp, #12
 8014440:	4616      	mov	r6, r2
 8014442:	4604      	mov	r4, r0
 8014444:	9301      	str	r3, [sp, #4]
 8014446:	460d      	mov	r5, r1
 8014448:	9f08      	ldr	r7, [sp, #32]
 801444a:	f7fc fe13 	bl	8011074 <ucdr_deserialize_uint8_t>
 801444e:	4631      	mov	r1, r6
 8014450:	4620      	mov	r0, r4
 8014452:	f7fc fe0f 	bl	8011074 <ucdr_deserialize_uint8_t>
 8014456:	9a01      	ldr	r2, [sp, #4]
 8014458:	2101      	movs	r1, #1
 801445a:	4620      	mov	r0, r4
 801445c:	f7fc ff94 	bl	8011388 <ucdr_deserialize_endian_uint16_t>
 8014460:	f995 3000 	ldrsb.w	r3, [r5]
 8014464:	2b00      	cmp	r3, #0
 8014466:	da01      	bge.n	801446c <uxr_deserialize_message_header+0x30>
 8014468:	b003      	add	sp, #12
 801446a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801446c:	2204      	movs	r2, #4
 801446e:	4639      	mov	r1, r7
 8014470:	4620      	mov	r0, r4
 8014472:	b003      	add	sp, #12
 8014474:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014478:	f003 b8fe 	b.w	8017678 <ucdr_deserialize_array_uint8_t>

0801447c <uxr_serialize_submessage_header>:
 801447c:	b530      	push	{r4, r5, lr}
 801447e:	b083      	sub	sp, #12
 8014480:	4615      	mov	r5, r2
 8014482:	4604      	mov	r4, r0
 8014484:	9301      	str	r3, [sp, #4]
 8014486:	f7fc fddf 	bl	8011048 <ucdr_serialize_uint8_t>
 801448a:	4629      	mov	r1, r5
 801448c:	4620      	mov	r0, r4
 801448e:	f7fc fddb 	bl	8011048 <ucdr_serialize_uint8_t>
 8014492:	9a01      	ldr	r2, [sp, #4]
 8014494:	2101      	movs	r1, #1
 8014496:	4620      	mov	r0, r4
 8014498:	b003      	add	sp, #12
 801449a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801449e:	f7fc be7f 	b.w	80111a0 <ucdr_serialize_endian_uint16_t>
 80144a2:	bf00      	nop

080144a4 <uxr_deserialize_submessage_header>:
 80144a4:	b530      	push	{r4, r5, lr}
 80144a6:	b083      	sub	sp, #12
 80144a8:	4615      	mov	r5, r2
 80144aa:	4604      	mov	r4, r0
 80144ac:	9301      	str	r3, [sp, #4]
 80144ae:	f7fc fde1 	bl	8011074 <ucdr_deserialize_uint8_t>
 80144b2:	4629      	mov	r1, r5
 80144b4:	4620      	mov	r0, r4
 80144b6:	f7fc fddd 	bl	8011074 <ucdr_deserialize_uint8_t>
 80144ba:	9a01      	ldr	r2, [sp, #4]
 80144bc:	2101      	movs	r1, #1
 80144be:	4620      	mov	r0, r4
 80144c0:	b003      	add	sp, #12
 80144c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80144c6:	f7fc bf5f 	b.w	8011388 <ucdr_deserialize_endian_uint16_t>
 80144ca:	bf00      	nop

080144cc <uxr_serialize_CLIENT_Representation>:
 80144cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144d0:	2204      	movs	r2, #4
 80144d2:	460e      	mov	r6, r1
 80144d4:	4605      	mov	r5, r0
 80144d6:	f003 f86b 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 80144da:	2202      	movs	r2, #2
 80144dc:	4607      	mov	r7, r0
 80144de:	1d31      	adds	r1, r6, #4
 80144e0:	4628      	mov	r0, r5
 80144e2:	f003 f865 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 80144e6:	4038      	ands	r0, r7
 80144e8:	2202      	movs	r2, #2
 80144ea:	1db1      	adds	r1, r6, #6
 80144ec:	b2c7      	uxtb	r7, r0
 80144ee:	4628      	mov	r0, r5
 80144f0:	f003 f85e 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 80144f4:	2204      	movs	r2, #4
 80144f6:	4007      	ands	r7, r0
 80144f8:	f106 0108 	add.w	r1, r6, #8
 80144fc:	4628      	mov	r0, r5
 80144fe:	f003 f857 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 8014502:	7b31      	ldrb	r1, [r6, #12]
 8014504:	4007      	ands	r7, r0
 8014506:	4628      	mov	r0, r5
 8014508:	f7fc fd9e 	bl	8011048 <ucdr_serialize_uint8_t>
 801450c:	7b71      	ldrb	r1, [r6, #13]
 801450e:	4007      	ands	r7, r0
 8014510:	4628      	mov	r0, r5
 8014512:	f7fc fd6b 	bl	8010fec <ucdr_serialize_bool>
 8014516:	7b73      	ldrb	r3, [r6, #13]
 8014518:	ea07 0800 	and.w	r8, r7, r0
 801451c:	b93b      	cbnz	r3, 801452e <uxr_serialize_CLIENT_Representation+0x62>
 801451e:	8bb1      	ldrh	r1, [r6, #28]
 8014520:	4628      	mov	r0, r5
 8014522:	f7fc fdbd 	bl	80110a0 <ucdr_serialize_uint16_t>
 8014526:	ea08 0000 	and.w	r0, r8, r0
 801452a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801452e:	6931      	ldr	r1, [r6, #16]
 8014530:	4628      	mov	r0, r5
 8014532:	f7fc ff9f 	bl	8011474 <ucdr_serialize_uint32_t>
 8014536:	6933      	ldr	r3, [r6, #16]
 8014538:	b1e3      	cbz	r3, 8014574 <uxr_serialize_CLIENT_Representation+0xa8>
 801453a:	b1c0      	cbz	r0, 801456e <uxr_serialize_CLIENT_Representation+0xa2>
 801453c:	4637      	mov	r7, r6
 801453e:	f04f 0900 	mov.w	r9, #0
 8014542:	e001      	b.n	8014548 <uxr_serialize_CLIENT_Representation+0x7c>
 8014544:	3708      	adds	r7, #8
 8014546:	b194      	cbz	r4, 801456e <uxr_serialize_CLIENT_Representation+0xa2>
 8014548:	6979      	ldr	r1, [r7, #20]
 801454a:	4628      	mov	r0, r5
 801454c:	f003 f8f8 	bl	8017740 <ucdr_serialize_string>
 8014550:	69b9      	ldr	r1, [r7, #24]
 8014552:	4604      	mov	r4, r0
 8014554:	4628      	mov	r0, r5
 8014556:	f003 f8f3 	bl	8017740 <ucdr_serialize_string>
 801455a:	6933      	ldr	r3, [r6, #16]
 801455c:	f109 0901 	add.w	r9, r9, #1
 8014560:	4004      	ands	r4, r0
 8014562:	4599      	cmp	r9, r3
 8014564:	b2e4      	uxtb	r4, r4
 8014566:	d3ed      	bcc.n	8014544 <uxr_serialize_CLIENT_Representation+0x78>
 8014568:	ea08 0804 	and.w	r8, r8, r4
 801456c:	e7d7      	b.n	801451e <uxr_serialize_CLIENT_Representation+0x52>
 801456e:	f04f 0800 	mov.w	r8, #0
 8014572:	e7d4      	b.n	801451e <uxr_serialize_CLIENT_Representation+0x52>
 8014574:	ea08 0800 	and.w	r8, r8, r0
 8014578:	e7d1      	b.n	801451e <uxr_serialize_CLIENT_Representation+0x52>
 801457a:	bf00      	nop

0801457c <uxr_deserialize_CLIENT_Representation>:
 801457c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014580:	2204      	movs	r2, #4
 8014582:	460c      	mov	r4, r1
 8014584:	4605      	mov	r5, r0
 8014586:	f003 f877 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 801458a:	2202      	movs	r2, #2
 801458c:	4607      	mov	r7, r0
 801458e:	1d21      	adds	r1, r4, #4
 8014590:	4628      	mov	r0, r5
 8014592:	f003 f871 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 8014596:	4038      	ands	r0, r7
 8014598:	2202      	movs	r2, #2
 801459a:	1da1      	adds	r1, r4, #6
 801459c:	b2c6      	uxtb	r6, r0
 801459e:	4628      	mov	r0, r5
 80145a0:	f003 f86a 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 80145a4:	2204      	movs	r2, #4
 80145a6:	4006      	ands	r6, r0
 80145a8:	f104 0108 	add.w	r1, r4, #8
 80145ac:	4628      	mov	r0, r5
 80145ae:	f003 f863 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 80145b2:	f104 010c 	add.w	r1, r4, #12
 80145b6:	4006      	ands	r6, r0
 80145b8:	4628      	mov	r0, r5
 80145ba:	f7fc fd5b 	bl	8011074 <ucdr_deserialize_uint8_t>
 80145be:	f104 010d 	add.w	r1, r4, #13
 80145c2:	ea06 0700 	and.w	r7, r6, r0
 80145c6:	4628      	mov	r0, r5
 80145c8:	f7fc fd26 	bl	8011018 <ucdr_deserialize_bool>
 80145cc:	7b63      	ldrb	r3, [r4, #13]
 80145ce:	4007      	ands	r7, r0
 80145d0:	b93b      	cbnz	r3, 80145e2 <uxr_deserialize_CLIENT_Representation+0x66>
 80145d2:	f104 011c 	add.w	r1, r4, #28
 80145d6:	4628      	mov	r0, r5
 80145d8:	f7fc fe62 	bl	80112a0 <ucdr_deserialize_uint16_t>
 80145dc:	4038      	ands	r0, r7
 80145de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145e2:	f104 0110 	add.w	r1, r4, #16
 80145e6:	4628      	mov	r0, r5
 80145e8:	f7fd f874 	bl	80116d4 <ucdr_deserialize_uint32_t>
 80145ec:	6923      	ldr	r3, [r4, #16]
 80145ee:	2b01      	cmp	r3, #1
 80145f0:	d903      	bls.n	80145fa <uxr_deserialize_CLIENT_Representation+0x7e>
 80145f2:	2301      	movs	r3, #1
 80145f4:	75ab      	strb	r3, [r5, #22]
 80145f6:	2700      	movs	r7, #0
 80145f8:	e7eb      	b.n	80145d2 <uxr_deserialize_CLIENT_Representation+0x56>
 80145fa:	b30b      	cbz	r3, 8014640 <uxr_deserialize_CLIENT_Representation+0xc4>
 80145fc:	2800      	cmp	r0, #0
 80145fe:	d0fa      	beq.n	80145f6 <uxr_deserialize_CLIENT_Representation+0x7a>
 8014600:	46a0      	mov	r8, r4
 8014602:	f04f 0900 	mov.w	r9, #0
 8014606:	e001      	b.n	801460c <uxr_deserialize_CLIENT_Representation+0x90>
 8014608:	2e00      	cmp	r6, #0
 801460a:	d0f4      	beq.n	80145f6 <uxr_deserialize_CLIENT_Representation+0x7a>
 801460c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014614:	4628      	mov	r0, r5
 8014616:	f003 f8a3 	bl	8017760 <ucdr_deserialize_string>
 801461a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801461e:	4606      	mov	r6, r0
 8014620:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8014624:	4628      	mov	r0, r5
 8014626:	f003 f89b 	bl	8017760 <ucdr_deserialize_string>
 801462a:	6923      	ldr	r3, [r4, #16]
 801462c:	f109 0901 	add.w	r9, r9, #1
 8014630:	4006      	ands	r6, r0
 8014632:	4599      	cmp	r9, r3
 8014634:	f108 0808 	add.w	r8, r8, #8
 8014638:	b2f6      	uxtb	r6, r6
 801463a:	d3e5      	bcc.n	8014608 <uxr_deserialize_CLIENT_Representation+0x8c>
 801463c:	4037      	ands	r7, r6
 801463e:	e7c8      	b.n	80145d2 <uxr_deserialize_CLIENT_Representation+0x56>
 8014640:	4007      	ands	r7, r0
 8014642:	e7c6      	b.n	80145d2 <uxr_deserialize_CLIENT_Representation+0x56>

08014644 <uxr_serialize_AGENT_Representation>:
 8014644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014648:	2204      	movs	r2, #4
 801464a:	460f      	mov	r7, r1
 801464c:	4605      	mov	r5, r0
 801464e:	f002 ffaf 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 8014652:	2202      	movs	r2, #2
 8014654:	4604      	mov	r4, r0
 8014656:	1d39      	adds	r1, r7, #4
 8014658:	4628      	mov	r0, r5
 801465a:	f002 ffa9 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 801465e:	4020      	ands	r0, r4
 8014660:	2202      	movs	r2, #2
 8014662:	1db9      	adds	r1, r7, #6
 8014664:	b2c4      	uxtb	r4, r0
 8014666:	4628      	mov	r0, r5
 8014668:	f002 ffa2 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 801466c:	7a39      	ldrb	r1, [r7, #8]
 801466e:	4004      	ands	r4, r0
 8014670:	4628      	mov	r0, r5
 8014672:	f7fc fcbb 	bl	8010fec <ucdr_serialize_bool>
 8014676:	7a3b      	ldrb	r3, [r7, #8]
 8014678:	ea00 0804 	and.w	r8, r0, r4
 801467c:	b913      	cbnz	r3, 8014684 <uxr_serialize_AGENT_Representation+0x40>
 801467e:	4640      	mov	r0, r8
 8014680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014684:	68f9      	ldr	r1, [r7, #12]
 8014686:	4628      	mov	r0, r5
 8014688:	f7fc fef4 	bl	8011474 <ucdr_serialize_uint32_t>
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	b303      	cbz	r3, 80146d2 <uxr_serialize_AGENT_Representation+0x8e>
 8014690:	b1d0      	cbz	r0, 80146c8 <uxr_serialize_AGENT_Representation+0x84>
 8014692:	463e      	mov	r6, r7
 8014694:	f04f 0900 	mov.w	r9, #0
 8014698:	e001      	b.n	801469e <uxr_serialize_AGENT_Representation+0x5a>
 801469a:	3608      	adds	r6, #8
 801469c:	b1a4      	cbz	r4, 80146c8 <uxr_serialize_AGENT_Representation+0x84>
 801469e:	6931      	ldr	r1, [r6, #16]
 80146a0:	4628      	mov	r0, r5
 80146a2:	f003 f84d 	bl	8017740 <ucdr_serialize_string>
 80146a6:	6971      	ldr	r1, [r6, #20]
 80146a8:	4604      	mov	r4, r0
 80146aa:	4628      	mov	r0, r5
 80146ac:	f003 f848 	bl	8017740 <ucdr_serialize_string>
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	f109 0901 	add.w	r9, r9, #1
 80146b6:	4004      	ands	r4, r0
 80146b8:	4599      	cmp	r9, r3
 80146ba:	b2e4      	uxtb	r4, r4
 80146bc:	d3ed      	bcc.n	801469a <uxr_serialize_AGENT_Representation+0x56>
 80146be:	ea08 0804 	and.w	r8, r8, r4
 80146c2:	4640      	mov	r0, r8
 80146c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146c8:	f04f 0800 	mov.w	r8, #0
 80146cc:	4640      	mov	r0, r8
 80146ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80146d2:	ea08 0800 	and.w	r8, r8, r0
 80146d6:	e7d2      	b.n	801467e <uxr_serialize_AGENT_Representation+0x3a>

080146d8 <uxr_serialize_DATAWRITER_Representation>:
 80146d8:	b570      	push	{r4, r5, r6, lr}
 80146da:	460d      	mov	r5, r1
 80146dc:	7809      	ldrb	r1, [r1, #0]
 80146de:	4606      	mov	r6, r0
 80146e0:	f7fc fcb2 	bl	8011048 <ucdr_serialize_uint8_t>
 80146e4:	4604      	mov	r4, r0
 80146e6:	b130      	cbz	r0, 80146f6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80146e8:	782b      	ldrb	r3, [r5, #0]
 80146ea:	2b02      	cmp	r3, #2
 80146ec:	d00c      	beq.n	8014708 <uxr_serialize_DATAWRITER_Representation+0x30>
 80146ee:	2b03      	cmp	r3, #3
 80146f0:	d010      	beq.n	8014714 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80146f2:	2b01      	cmp	r3, #1
 80146f4:	d008      	beq.n	8014708 <uxr_serialize_DATAWRITER_Representation+0x30>
 80146f6:	2202      	movs	r2, #2
 80146f8:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80146fc:	4630      	mov	r0, r6
 80146fe:	f002 ff57 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 8014702:	4020      	ands	r0, r4
 8014704:	b2c0      	uxtb	r0, r0
 8014706:	bd70      	pop	{r4, r5, r6, pc}
 8014708:	6869      	ldr	r1, [r5, #4]
 801470a:	4630      	mov	r0, r6
 801470c:	f003 f818 	bl	8017740 <ucdr_serialize_string>
 8014710:	4604      	mov	r4, r0
 8014712:	e7f0      	b.n	80146f6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014714:	4629      	mov	r1, r5
 8014716:	4630      	mov	r0, r6
 8014718:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801471c:	3104      	adds	r1, #4
 801471e:	f7fe f92f 	bl	8012980 <ucdr_serialize_sequence_uint8_t>
 8014722:	4604      	mov	r4, r0
 8014724:	e7e7      	b.n	80146f6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014726:	bf00      	nop

08014728 <uxr_serialize_ObjectVariant.part.0>:
 8014728:	b570      	push	{r4, r5, r6, lr}
 801472a:	780b      	ldrb	r3, [r1, #0]
 801472c:	3b01      	subs	r3, #1
 801472e:	460c      	mov	r4, r1
 8014730:	4605      	mov	r5, r0
 8014732:	2b0d      	cmp	r3, #13
 8014734:	d854      	bhi.n	80147e0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014736:	e8df f003 	tbb	[pc, r3]
 801473a:	0730      	.short	0x0730
 801473c:	07071b1b 	.word	0x07071b1b
 8014740:	0c530707 	.word	0x0c530707
 8014744:	494e0c0c 	.word	0x494e0c0c
 8014748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801474c:	3104      	adds	r1, #4
 801474e:	f7ff bfc3 	b.w	80146d8 <uxr_serialize_DATAWRITER_Representation>
 8014752:	7909      	ldrb	r1, [r1, #4]
 8014754:	f7fc fc78 	bl	8011048 <ucdr_serialize_uint8_t>
 8014758:	b1e8      	cbz	r0, 8014796 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801475a:	7923      	ldrb	r3, [r4, #4]
 801475c:	2b01      	cmp	r3, #1
 801475e:	d001      	beq.n	8014764 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8014760:	2b02      	cmp	r3, #2
 8014762:	d13d      	bne.n	80147e0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014764:	68a1      	ldr	r1, [r4, #8]
 8014766:	4628      	mov	r0, r5
 8014768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801476c:	f002 bfe8 	b.w	8017740 <ucdr_serialize_string>
 8014770:	7909      	ldrb	r1, [r1, #4]
 8014772:	f7fc fc69 	bl	8011048 <ucdr_serialize_uint8_t>
 8014776:	4606      	mov	r6, r0
 8014778:	b120      	cbz	r0, 8014784 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801477a:	7923      	ldrb	r3, [r4, #4]
 801477c:	2b02      	cmp	r3, #2
 801477e:	d039      	beq.n	80147f4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8014780:	2b03      	cmp	r3, #3
 8014782:	d02f      	beq.n	80147e4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8014784:	2202      	movs	r2, #2
 8014786:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801478a:	4628      	mov	r0, r5
 801478c:	f002 ff10 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 8014790:	4030      	ands	r0, r6
 8014792:	b2c0      	uxtb	r0, r0
 8014794:	bd70      	pop	{r4, r5, r6, pc}
 8014796:	2000      	movs	r0, #0
 8014798:	bd70      	pop	{r4, r5, r6, pc}
 801479a:	7909      	ldrb	r1, [r1, #4]
 801479c:	f7fc fc54 	bl	8011048 <ucdr_serialize_uint8_t>
 80147a0:	4606      	mov	r6, r0
 80147a2:	b158      	cbz	r0, 80147bc <uxr_serialize_ObjectVariant.part.0+0x94>
 80147a4:	7923      	ldrb	r3, [r4, #4]
 80147a6:	2b02      	cmp	r3, #2
 80147a8:	d003      	beq.n	80147b2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80147aa:	2b03      	cmp	r3, #3
 80147ac:	d028      	beq.n	8014800 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80147ae:	2b01      	cmp	r3, #1
 80147b0:	d104      	bne.n	80147bc <uxr_serialize_ObjectVariant.part.0+0x94>
 80147b2:	68a1      	ldr	r1, [r4, #8]
 80147b4:	4628      	mov	r0, r5
 80147b6:	f002 ffc3 	bl	8017740 <ucdr_serialize_string>
 80147ba:	4606      	mov	r6, r0
 80147bc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 80147c0:	4628      	mov	r0, r5
 80147c2:	f7fd f97d 	bl	8011ac0 <ucdr_serialize_int16_t>
 80147c6:	4030      	ands	r0, r6
 80147c8:	b2c0      	uxtb	r0, r0
 80147ca:	bd70      	pop	{r4, r5, r6, pc}
 80147cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80147d0:	3104      	adds	r1, #4
 80147d2:	f7ff be7b 	b.w	80144cc <uxr_serialize_CLIENT_Representation>
 80147d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80147da:	3104      	adds	r1, #4
 80147dc:	f7ff bf32 	b.w	8014644 <uxr_serialize_AGENT_Representation>
 80147e0:	2001      	movs	r0, #1
 80147e2:	bd70      	pop	{r4, r5, r6, pc}
 80147e4:	68a2      	ldr	r2, [r4, #8]
 80147e6:	f104 010c 	add.w	r1, r4, #12
 80147ea:	4628      	mov	r0, r5
 80147ec:	f7fe f8c8 	bl	8012980 <ucdr_serialize_sequence_uint8_t>
 80147f0:	4606      	mov	r6, r0
 80147f2:	e7c7      	b.n	8014784 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80147f4:	68a1      	ldr	r1, [r4, #8]
 80147f6:	4628      	mov	r0, r5
 80147f8:	f002 ffa2 	bl	8017740 <ucdr_serialize_string>
 80147fc:	4606      	mov	r6, r0
 80147fe:	e7c1      	b.n	8014784 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014800:	68a2      	ldr	r2, [r4, #8]
 8014802:	f104 010c 	add.w	r1, r4, #12
 8014806:	4628      	mov	r0, r5
 8014808:	f7fe f8ba 	bl	8012980 <ucdr_serialize_sequence_uint8_t>
 801480c:	4606      	mov	r6, r0
 801480e:	e7d5      	b.n	80147bc <uxr_serialize_ObjectVariant.part.0+0x94>

08014810 <uxr_deserialize_DATAWRITER_Representation>:
 8014810:	b570      	push	{r4, r5, r6, lr}
 8014812:	4606      	mov	r6, r0
 8014814:	460d      	mov	r5, r1
 8014816:	f7fc fc2d 	bl	8011074 <ucdr_deserialize_uint8_t>
 801481a:	4604      	mov	r4, r0
 801481c:	b130      	cbz	r0, 801482c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801481e:	782b      	ldrb	r3, [r5, #0]
 8014820:	2b02      	cmp	r3, #2
 8014822:	d00c      	beq.n	801483e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8014824:	2b03      	cmp	r3, #3
 8014826:	d012      	beq.n	801484e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8014828:	2b01      	cmp	r3, #1
 801482a:	d008      	beq.n	801483e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801482c:	2202      	movs	r2, #2
 801482e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8014832:	4630      	mov	r0, r6
 8014834:	f002 ff20 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 8014838:	4020      	ands	r0, r4
 801483a:	b2c0      	uxtb	r0, r0
 801483c:	bd70      	pop	{r4, r5, r6, pc}
 801483e:	6869      	ldr	r1, [r5, #4]
 8014840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014844:	4630      	mov	r0, r6
 8014846:	f002 ff8b 	bl	8017760 <ucdr_deserialize_string>
 801484a:	4604      	mov	r4, r0
 801484c:	e7ee      	b.n	801482c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801484e:	1d2b      	adds	r3, r5, #4
 8014850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014854:	f105 0108 	add.w	r1, r5, #8
 8014858:	4630      	mov	r0, r6
 801485a:	f7fe f8a3 	bl	80129a4 <ucdr_deserialize_sequence_uint8_t>
 801485e:	4604      	mov	r4, r0
 8014860:	e7e4      	b.n	801482c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8014862:	bf00      	nop

08014864 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8014864:	b570      	push	{r4, r5, r6, lr}
 8014866:	460d      	mov	r5, r1
 8014868:	7809      	ldrb	r1, [r1, #0]
 801486a:	4606      	mov	r6, r0
 801486c:	f7fc fbbe 	bl	8010fec <ucdr_serialize_bool>
 8014870:	782b      	ldrb	r3, [r5, #0]
 8014872:	4604      	mov	r4, r0
 8014874:	b94b      	cbnz	r3, 801488a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8014876:	7a29      	ldrb	r1, [r5, #8]
 8014878:	4630      	mov	r0, r6
 801487a:	f7fc fbb7 	bl	8010fec <ucdr_serialize_bool>
 801487e:	7a2b      	ldrb	r3, [r5, #8]
 8014880:	4004      	ands	r4, r0
 8014882:	b2e4      	uxtb	r4, r4
 8014884:	b943      	cbnz	r3, 8014898 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8014886:	4620      	mov	r0, r4
 8014888:	bd70      	pop	{r4, r5, r6, pc}
 801488a:	6869      	ldr	r1, [r5, #4]
 801488c:	4630      	mov	r0, r6
 801488e:	f002 ff57 	bl	8017740 <ucdr_serialize_string>
 8014892:	4004      	ands	r4, r0
 8014894:	b2e4      	uxtb	r4, r4
 8014896:	e7ee      	b.n	8014876 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8014898:	68e9      	ldr	r1, [r5, #12]
 801489a:	4630      	mov	r0, r6
 801489c:	f002 ff50 	bl	8017740 <ucdr_serialize_string>
 80148a0:	4004      	ands	r4, r0
 80148a2:	4620      	mov	r0, r4
 80148a4:	bd70      	pop	{r4, r5, r6, pc}
 80148a6:	bf00      	nop

080148a8 <uxr_serialize_OBJK_Topic_Binary>:
 80148a8:	b570      	push	{r4, r5, r6, lr}
 80148aa:	460d      	mov	r5, r1
 80148ac:	6809      	ldr	r1, [r1, #0]
 80148ae:	4606      	mov	r6, r0
 80148b0:	f002 ff46 	bl	8017740 <ucdr_serialize_string>
 80148b4:	7929      	ldrb	r1, [r5, #4]
 80148b6:	4604      	mov	r4, r0
 80148b8:	4630      	mov	r0, r6
 80148ba:	f7fc fb97 	bl	8010fec <ucdr_serialize_bool>
 80148be:	792b      	ldrb	r3, [r5, #4]
 80148c0:	4004      	ands	r4, r0
 80148c2:	b2e4      	uxtb	r4, r4
 80148c4:	b943      	cbnz	r3, 80148d8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80148c6:	7b29      	ldrb	r1, [r5, #12]
 80148c8:	4630      	mov	r0, r6
 80148ca:	f7fc fb8f 	bl	8010fec <ucdr_serialize_bool>
 80148ce:	7b2b      	ldrb	r3, [r5, #12]
 80148d0:	4004      	ands	r4, r0
 80148d2:	b93b      	cbnz	r3, 80148e4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80148d4:	4620      	mov	r0, r4
 80148d6:	bd70      	pop	{r4, r5, r6, pc}
 80148d8:	68a9      	ldr	r1, [r5, #8]
 80148da:	4630      	mov	r0, r6
 80148dc:	f002 ff30 	bl	8017740 <ucdr_serialize_string>
 80148e0:	4004      	ands	r4, r0
 80148e2:	e7f0      	b.n	80148c6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80148e4:	6929      	ldr	r1, [r5, #16]
 80148e6:	4630      	mov	r0, r6
 80148e8:	f002 ff2a 	bl	8017740 <ucdr_serialize_string>
 80148ec:	4004      	ands	r4, r0
 80148ee:	b2e4      	uxtb	r4, r4
 80148f0:	4620      	mov	r0, r4
 80148f2:	bd70      	pop	{r4, r5, r6, pc}

080148f4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80148f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148f8:	460c      	mov	r4, r1
 80148fa:	7809      	ldrb	r1, [r1, #0]
 80148fc:	4606      	mov	r6, r0
 80148fe:	f7fc fb75 	bl	8010fec <ucdr_serialize_bool>
 8014902:	7823      	ldrb	r3, [r4, #0]
 8014904:	4605      	mov	r5, r0
 8014906:	b96b      	cbnz	r3, 8014924 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8014908:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801490c:	4630      	mov	r0, r6
 801490e:	f7fc fb6d 	bl	8010fec <ucdr_serialize_bool>
 8014912:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8014916:	4005      	ands	r5, r0
 8014918:	b2ed      	uxtb	r5, r5
 801491a:	2b00      	cmp	r3, #0
 801491c:	d169      	bne.n	80149f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801491e:	4628      	mov	r0, r5
 8014920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014924:	6861      	ldr	r1, [r4, #4]
 8014926:	4630      	mov	r0, r6
 8014928:	f7fc fda4 	bl	8011474 <ucdr_serialize_uint32_t>
 801492c:	6863      	ldr	r3, [r4, #4]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d06b      	beq.n	8014a0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8014932:	2800      	cmp	r0, #0
 8014934:	d067      	beq.n	8014a06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014936:	68a1      	ldr	r1, [r4, #8]
 8014938:	4630      	mov	r0, r6
 801493a:	f002 ff01 	bl	8017740 <ucdr_serialize_string>
 801493e:	6863      	ldr	r3, [r4, #4]
 8014940:	2b01      	cmp	r3, #1
 8014942:	d953      	bls.n	80149ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014944:	2800      	cmp	r0, #0
 8014946:	d05e      	beq.n	8014a06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014948:	68e1      	ldr	r1, [r4, #12]
 801494a:	4630      	mov	r0, r6
 801494c:	f002 fef8 	bl	8017740 <ucdr_serialize_string>
 8014950:	6863      	ldr	r3, [r4, #4]
 8014952:	2b02      	cmp	r3, #2
 8014954:	d94a      	bls.n	80149ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014956:	2800      	cmp	r0, #0
 8014958:	d055      	beq.n	8014a06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801495a:	6921      	ldr	r1, [r4, #16]
 801495c:	4630      	mov	r0, r6
 801495e:	f002 feef 	bl	8017740 <ucdr_serialize_string>
 8014962:	6863      	ldr	r3, [r4, #4]
 8014964:	2b03      	cmp	r3, #3
 8014966:	d941      	bls.n	80149ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014968:	2800      	cmp	r0, #0
 801496a:	d04c      	beq.n	8014a06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801496c:	6961      	ldr	r1, [r4, #20]
 801496e:	4630      	mov	r0, r6
 8014970:	f002 fee6 	bl	8017740 <ucdr_serialize_string>
 8014974:	6863      	ldr	r3, [r4, #4]
 8014976:	2b04      	cmp	r3, #4
 8014978:	d938      	bls.n	80149ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801497a:	2800      	cmp	r0, #0
 801497c:	d043      	beq.n	8014a06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801497e:	69a1      	ldr	r1, [r4, #24]
 8014980:	4630      	mov	r0, r6
 8014982:	f002 fedd 	bl	8017740 <ucdr_serialize_string>
 8014986:	6863      	ldr	r3, [r4, #4]
 8014988:	2b05      	cmp	r3, #5
 801498a:	d92f      	bls.n	80149ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801498c:	2800      	cmp	r0, #0
 801498e:	d03a      	beq.n	8014a06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014990:	69e1      	ldr	r1, [r4, #28]
 8014992:	4630      	mov	r0, r6
 8014994:	f002 fed4 	bl	8017740 <ucdr_serialize_string>
 8014998:	6863      	ldr	r3, [r4, #4]
 801499a:	2b06      	cmp	r3, #6
 801499c:	d926      	bls.n	80149ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801499e:	b390      	cbz	r0, 8014a06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80149a0:	6a21      	ldr	r1, [r4, #32]
 80149a2:	4630      	mov	r0, r6
 80149a4:	f002 fecc 	bl	8017740 <ucdr_serialize_string>
 80149a8:	6863      	ldr	r3, [r4, #4]
 80149aa:	2b07      	cmp	r3, #7
 80149ac:	d91e      	bls.n	80149ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80149ae:	b350      	cbz	r0, 8014a06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80149b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80149b2:	4630      	mov	r0, r6
 80149b4:	f002 fec4 	bl	8017740 <ucdr_serialize_string>
 80149b8:	6863      	ldr	r3, [r4, #4]
 80149ba:	2b08      	cmp	r3, #8
 80149bc:	d916      	bls.n	80149ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80149be:	b310      	cbz	r0, 8014a06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80149c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80149c2:	4630      	mov	r0, r6
 80149c4:	f002 febc 	bl	8017740 <ucdr_serialize_string>
 80149c8:	6863      	ldr	r3, [r4, #4]
 80149ca:	2b09      	cmp	r3, #9
 80149cc:	d90e      	bls.n	80149ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80149ce:	b1d0      	cbz	r0, 8014a06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80149d0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 80149d4:	2709      	movs	r7, #9
 80149d6:	e000      	b.n	80149da <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80149d8:	b1a8      	cbz	r0, 8014a06 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80149da:	f858 1b04 	ldr.w	r1, [r8], #4
 80149de:	4630      	mov	r0, r6
 80149e0:	f002 feae 	bl	8017740 <ucdr_serialize_string>
 80149e4:	6862      	ldr	r2, [r4, #4]
 80149e6:	3701      	adds	r7, #1
 80149e8:	4297      	cmp	r7, r2
 80149ea:	d3f5      	bcc.n	80149d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80149ec:	4005      	ands	r5, r0
 80149ee:	b2ed      	uxtb	r5, r5
 80149f0:	e78a      	b.n	8014908 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80149f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80149f4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80149f8:	4630      	mov	r0, r6
 80149fa:	f7fd ffc1 	bl	8012980 <ucdr_serialize_sequence_uint8_t>
 80149fe:	4005      	ands	r5, r0
 8014a00:	4628      	mov	r0, r5
 8014a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a06:	2500      	movs	r5, #0
 8014a08:	e77e      	b.n	8014908 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8014a0a:	4028      	ands	r0, r5
 8014a0c:	b2c5      	uxtb	r5, r0
 8014a0e:	e77b      	b.n	8014908 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08014a10 <uxr_serialize_OBJK_Publisher_Binary>:
 8014a10:	b570      	push	{r4, r5, r6, lr}
 8014a12:	460d      	mov	r5, r1
 8014a14:	7809      	ldrb	r1, [r1, #0]
 8014a16:	4606      	mov	r6, r0
 8014a18:	f7fc fae8 	bl	8010fec <ucdr_serialize_bool>
 8014a1c:	782b      	ldrb	r3, [r5, #0]
 8014a1e:	4604      	mov	r4, r0
 8014a20:	b94b      	cbnz	r3, 8014a36 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8014a22:	7a29      	ldrb	r1, [r5, #8]
 8014a24:	4630      	mov	r0, r6
 8014a26:	f7fc fae1 	bl	8010fec <ucdr_serialize_bool>
 8014a2a:	7a2b      	ldrb	r3, [r5, #8]
 8014a2c:	4004      	ands	r4, r0
 8014a2e:	b2e4      	uxtb	r4, r4
 8014a30:	b943      	cbnz	r3, 8014a44 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8014a32:	4620      	mov	r0, r4
 8014a34:	bd70      	pop	{r4, r5, r6, pc}
 8014a36:	6869      	ldr	r1, [r5, #4]
 8014a38:	4630      	mov	r0, r6
 8014a3a:	f002 fe81 	bl	8017740 <ucdr_serialize_string>
 8014a3e:	4004      	ands	r4, r0
 8014a40:	b2e4      	uxtb	r4, r4
 8014a42:	e7ee      	b.n	8014a22 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8014a44:	f105 010c 	add.w	r1, r5, #12
 8014a48:	4630      	mov	r0, r6
 8014a4a:	f7ff ff53 	bl	80148f4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8014a4e:	4004      	ands	r4, r0
 8014a50:	4620      	mov	r0, r4
 8014a52:	bd70      	pop	{r4, r5, r6, pc}

08014a54 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8014a54:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8014a58:	4688      	mov	r8, r1
 8014a5a:	8809      	ldrh	r1, [r1, #0]
 8014a5c:	4681      	mov	r9, r0
 8014a5e:	f7fc fb1f 	bl	80110a0 <ucdr_serialize_uint16_t>
 8014a62:	f898 1002 	ldrb.w	r1, [r8, #2]
 8014a66:	4606      	mov	r6, r0
 8014a68:	4648      	mov	r0, r9
 8014a6a:	f7fc fabf 	bl	8010fec <ucdr_serialize_bool>
 8014a6e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014a72:	4006      	ands	r6, r0
 8014a74:	b2f5      	uxtb	r5, r6
 8014a76:	b9eb      	cbnz	r3, 8014ab4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8014a78:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014a7c:	4648      	mov	r0, r9
 8014a7e:	f7fc fab5 	bl	8010fec <ucdr_serialize_bool>
 8014a82:	f898 3006 	ldrb.w	r3, [r8, #6]
 8014a86:	4005      	ands	r5, r0
 8014a88:	bb7b      	cbnz	r3, 8014aea <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8014a8a:	f898 100c 	ldrb.w	r1, [r8, #12]
 8014a8e:	4648      	mov	r0, r9
 8014a90:	f7fc faac 	bl	8010fec <ucdr_serialize_bool>
 8014a94:	f898 300c 	ldrb.w	r3, [r8, #12]
 8014a98:	4005      	ands	r5, r0
 8014a9a:	b9f3      	cbnz	r3, 8014ada <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8014a9c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8014aa0:	4648      	mov	r0, r9
 8014aa2:	f7fc faa3 	bl	8010fec <ucdr_serialize_bool>
 8014aa6:	f898 3014 	ldrb.w	r3, [r8, #20]
 8014aaa:	4005      	ands	r5, r0
 8014aac:	b94b      	cbnz	r3, 8014ac2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8014aae:	4628      	mov	r0, r5
 8014ab0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014ab4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8014ab8:	4648      	mov	r0, r9
 8014aba:	f7fc faf1 	bl	80110a0 <ucdr_serialize_uint16_t>
 8014abe:	4005      	ands	r5, r0
 8014ac0:	e7da      	b.n	8014a78 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8014ac2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8014ac6:	f108 011c 	add.w	r1, r8, #28
 8014aca:	4648      	mov	r0, r9
 8014acc:	f7fd ff58 	bl	8012980 <ucdr_serialize_sequence_uint8_t>
 8014ad0:	4028      	ands	r0, r5
 8014ad2:	b2c5      	uxtb	r5, r0
 8014ad4:	4628      	mov	r0, r5
 8014ad6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014ada:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014ade:	4648      	mov	r0, r9
 8014ae0:	f7fc fcc8 	bl	8011474 <ucdr_serialize_uint32_t>
 8014ae4:	4028      	ands	r0, r5
 8014ae6:	b2c5      	uxtb	r5, r0
 8014ae8:	e7d8      	b.n	8014a9c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8014aea:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8014aee:	4648      	mov	r0, r9
 8014af0:	f7fc fcc0 	bl	8011474 <ucdr_serialize_uint32_t>
 8014af4:	4028      	ands	r0, r5
 8014af6:	b2c5      	uxtb	r5, r0
 8014af8:	e7c7      	b.n	8014a8a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8014afa:	bf00      	nop

08014afc <uxr_serialize_OBJK_DataWriter_Binary>:
 8014afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014afe:	2202      	movs	r2, #2
 8014b00:	460d      	mov	r5, r1
 8014b02:	4606      	mov	r6, r0
 8014b04:	f002 fd54 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 8014b08:	78a9      	ldrb	r1, [r5, #2]
 8014b0a:	4604      	mov	r4, r0
 8014b0c:	4630      	mov	r0, r6
 8014b0e:	f7fc fa6d 	bl	8010fec <ucdr_serialize_bool>
 8014b12:	78ab      	ldrb	r3, [r5, #2]
 8014b14:	4004      	ands	r4, r0
 8014b16:	b2e4      	uxtb	r4, r4
 8014b18:	b90b      	cbnz	r3, 8014b1e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8014b1a:	4620      	mov	r0, r4
 8014b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b1e:	f105 0108 	add.w	r1, r5, #8
 8014b22:	4630      	mov	r0, r6
 8014b24:	f7ff ff96 	bl	8014a54 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014b28:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8014b2c:	4607      	mov	r7, r0
 8014b2e:	4630      	mov	r0, r6
 8014b30:	f7fc fa5c 	bl	8010fec <ucdr_serialize_bool>
 8014b34:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8014b38:	4038      	ands	r0, r7
 8014b3a:	b2c7      	uxtb	r7, r0
 8014b3c:	b913      	cbnz	r3, 8014b44 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8014b3e:	403c      	ands	r4, r7
 8014b40:	4620      	mov	r0, r4
 8014b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b44:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8014b48:	4630      	mov	r0, r6
 8014b4a:	f7fc fee9 	bl	8011920 <ucdr_serialize_uint64_t>
 8014b4e:	4007      	ands	r7, r0
 8014b50:	e7f5      	b.n	8014b3e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8014b52:	bf00      	nop

08014b54 <uxr_deserialize_ObjectVariant>:
 8014b54:	b570      	push	{r4, r5, r6, lr}
 8014b56:	4605      	mov	r5, r0
 8014b58:	460e      	mov	r6, r1
 8014b5a:	f7fc fa8b 	bl	8011074 <ucdr_deserialize_uint8_t>
 8014b5e:	b168      	cbz	r0, 8014b7c <uxr_deserialize_ObjectVariant+0x28>
 8014b60:	7833      	ldrb	r3, [r6, #0]
 8014b62:	3b01      	subs	r3, #1
 8014b64:	4604      	mov	r4, r0
 8014b66:	2b0d      	cmp	r3, #13
 8014b68:	d809      	bhi.n	8014b7e <uxr_deserialize_ObjectVariant+0x2a>
 8014b6a:	e8df f003 	tbb	[pc, r3]
 8014b6e:	0a41      	.short	0x0a41
 8014b70:	0a0a2323 	.word	0x0a0a2323
 8014b74:	10080a0a 	.word	0x10080a0a
 8014b78:	565c1010 	.word	0x565c1010
 8014b7c:	2400      	movs	r4, #0
 8014b7e:	4620      	mov	r0, r4
 8014b80:	bd70      	pop	{r4, r5, r6, pc}
 8014b82:	1d31      	adds	r1, r6, #4
 8014b84:	4628      	mov	r0, r5
 8014b86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014b8a:	f7ff be41 	b.w	8014810 <uxr_deserialize_DATAWRITER_Representation>
 8014b8e:	1d31      	adds	r1, r6, #4
 8014b90:	4628      	mov	r0, r5
 8014b92:	f7fc fa6f 	bl	8011074 <ucdr_deserialize_uint8_t>
 8014b96:	2800      	cmp	r0, #0
 8014b98:	d0f0      	beq.n	8014b7c <uxr_deserialize_ObjectVariant+0x28>
 8014b9a:	7933      	ldrb	r3, [r6, #4]
 8014b9c:	2b01      	cmp	r3, #1
 8014b9e:	d001      	beq.n	8014ba4 <uxr_deserialize_ObjectVariant+0x50>
 8014ba0:	2b02      	cmp	r3, #2
 8014ba2:	d1ec      	bne.n	8014b7e <uxr_deserialize_ObjectVariant+0x2a>
 8014ba4:	68b1      	ldr	r1, [r6, #8]
 8014ba6:	4628      	mov	r0, r5
 8014ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014bac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014bb0:	f002 bdd6 	b.w	8017760 <ucdr_deserialize_string>
 8014bb4:	1d31      	adds	r1, r6, #4
 8014bb6:	4628      	mov	r0, r5
 8014bb8:	f7fc fa5c 	bl	8011074 <ucdr_deserialize_uint8_t>
 8014bbc:	4604      	mov	r4, r0
 8014bbe:	b170      	cbz	r0, 8014bde <uxr_deserialize_ObjectVariant+0x8a>
 8014bc0:	7933      	ldrb	r3, [r6, #4]
 8014bc2:	2b02      	cmp	r3, #2
 8014bc4:	d04c      	beq.n	8014c60 <uxr_deserialize_ObjectVariant+0x10c>
 8014bc6:	2b03      	cmp	r3, #3
 8014bc8:	d109      	bne.n	8014bde <uxr_deserialize_ObjectVariant+0x8a>
 8014bca:	f106 0308 	add.w	r3, r6, #8
 8014bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014bd2:	f106 010c 	add.w	r1, r6, #12
 8014bd6:	4628      	mov	r0, r5
 8014bd8:	f7fd fee4 	bl	80129a4 <ucdr_deserialize_sequence_uint8_t>
 8014bdc:	4604      	mov	r4, r0
 8014bde:	2202      	movs	r2, #2
 8014be0:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8014be4:	4628      	mov	r0, r5
 8014be6:	f002 fd47 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 8014bea:	4020      	ands	r0, r4
 8014bec:	b2c4      	uxtb	r4, r0
 8014bee:	e7c6      	b.n	8014b7e <uxr_deserialize_ObjectVariant+0x2a>
 8014bf0:	1d31      	adds	r1, r6, #4
 8014bf2:	4628      	mov	r0, r5
 8014bf4:	f7fc fa3e 	bl	8011074 <ucdr_deserialize_uint8_t>
 8014bf8:	4604      	mov	r4, r0
 8014bfa:	b130      	cbz	r0, 8014c0a <uxr_deserialize_ObjectVariant+0xb6>
 8014bfc:	7933      	ldrb	r3, [r6, #4]
 8014bfe:	2b02      	cmp	r3, #2
 8014c00:	d036      	beq.n	8014c70 <uxr_deserialize_ObjectVariant+0x11c>
 8014c02:	2b03      	cmp	r3, #3
 8014c04:	d03c      	beq.n	8014c80 <uxr_deserialize_ObjectVariant+0x12c>
 8014c06:	2b01      	cmp	r3, #1
 8014c08:	d032      	beq.n	8014c70 <uxr_deserialize_ObjectVariant+0x11c>
 8014c0a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8014c0e:	4628      	mov	r0, r5
 8014c10:	f7fc ffd6 	bl	8011bc0 <ucdr_deserialize_int16_t>
 8014c14:	4020      	ands	r0, r4
 8014c16:	b2c4      	uxtb	r4, r0
 8014c18:	e7b1      	b.n	8014b7e <uxr_deserialize_ObjectVariant+0x2a>
 8014c1a:	1d31      	adds	r1, r6, #4
 8014c1c:	4628      	mov	r0, r5
 8014c1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c22:	f7ff bcab 	b.w	801457c <uxr_deserialize_CLIENT_Representation>
 8014c26:	2204      	movs	r2, #4
 8014c28:	18b1      	adds	r1, r6, r2
 8014c2a:	4628      	mov	r0, r5
 8014c2c:	f002 fd24 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 8014c30:	2202      	movs	r2, #2
 8014c32:	f106 0108 	add.w	r1, r6, #8
 8014c36:	4604      	mov	r4, r0
 8014c38:	4628      	mov	r0, r5
 8014c3a:	f002 fd1d 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 8014c3e:	2202      	movs	r2, #2
 8014c40:	4004      	ands	r4, r0
 8014c42:	f106 010a 	add.w	r1, r6, #10
 8014c46:	4628      	mov	r0, r5
 8014c48:	f002 fd16 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 8014c4c:	b2e4      	uxtb	r4, r4
 8014c4e:	4603      	mov	r3, r0
 8014c50:	f106 010c 	add.w	r1, r6, #12
 8014c54:	4628      	mov	r0, r5
 8014c56:	401c      	ands	r4, r3
 8014c58:	f7fc f9de 	bl	8011018 <ucdr_deserialize_bool>
 8014c5c:	4004      	ands	r4, r0
 8014c5e:	e78e      	b.n	8014b7e <uxr_deserialize_ObjectVariant+0x2a>
 8014c60:	68b1      	ldr	r1, [r6, #8]
 8014c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014c66:	4628      	mov	r0, r5
 8014c68:	f002 fd7a 	bl	8017760 <ucdr_deserialize_string>
 8014c6c:	4604      	mov	r4, r0
 8014c6e:	e7b6      	b.n	8014bde <uxr_deserialize_ObjectVariant+0x8a>
 8014c70:	68b1      	ldr	r1, [r6, #8]
 8014c72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014c76:	4628      	mov	r0, r5
 8014c78:	f002 fd72 	bl	8017760 <ucdr_deserialize_string>
 8014c7c:	4604      	mov	r4, r0
 8014c7e:	e7c4      	b.n	8014c0a <uxr_deserialize_ObjectVariant+0xb6>
 8014c80:	f106 0308 	add.w	r3, r6, #8
 8014c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014c88:	f106 010c 	add.w	r1, r6, #12
 8014c8c:	4628      	mov	r0, r5
 8014c8e:	f7fd fe89 	bl	80129a4 <ucdr_deserialize_sequence_uint8_t>
 8014c92:	4604      	mov	r4, r0
 8014c94:	e7b9      	b.n	8014c0a <uxr_deserialize_ObjectVariant+0xb6>
 8014c96:	bf00      	nop

08014c98 <uxr_deserialize_BaseObjectRequest>:
 8014c98:	b570      	push	{r4, r5, r6, lr}
 8014c9a:	2202      	movs	r2, #2
 8014c9c:	4605      	mov	r5, r0
 8014c9e:	460e      	mov	r6, r1
 8014ca0:	f002 fcea 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 8014ca4:	2202      	movs	r2, #2
 8014ca6:	4604      	mov	r4, r0
 8014ca8:	18b1      	adds	r1, r6, r2
 8014caa:	4628      	mov	r0, r5
 8014cac:	f002 fce4 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 8014cb0:	4020      	ands	r0, r4
 8014cb2:	b2c0      	uxtb	r0, r0
 8014cb4:	bd70      	pop	{r4, r5, r6, pc}
 8014cb6:	bf00      	nop

08014cb8 <uxr_serialize_ActivityInfoVariant>:
 8014cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014cbc:	460d      	mov	r5, r1
 8014cbe:	7809      	ldrb	r1, [r1, #0]
 8014cc0:	4607      	mov	r7, r0
 8014cc2:	f7fc f9c1 	bl	8011048 <ucdr_serialize_uint8_t>
 8014cc6:	4681      	mov	r9, r0
 8014cc8:	b138      	cbz	r0, 8014cda <uxr_serialize_ActivityInfoVariant+0x22>
 8014cca:	782b      	ldrb	r3, [r5, #0]
 8014ccc:	2b06      	cmp	r3, #6
 8014cce:	f000 8082 	beq.w	8014dd6 <uxr_serialize_ActivityInfoVariant+0x11e>
 8014cd2:	2b0d      	cmp	r3, #13
 8014cd4:	d016      	beq.n	8014d04 <uxr_serialize_ActivityInfoVariant+0x4c>
 8014cd6:	2b05      	cmp	r3, #5
 8014cd8:	d002      	beq.n	8014ce0 <uxr_serialize_ActivityInfoVariant+0x28>
 8014cda:	4648      	mov	r0, r9
 8014cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ce0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014ce4:	4638      	mov	r0, r7
 8014ce6:	f7fc feeb 	bl	8011ac0 <ucdr_serialize_int16_t>
 8014cea:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8014cee:	4681      	mov	r9, r0
 8014cf0:	4638      	mov	r0, r7
 8014cf2:	f7fc fe15 	bl	8011920 <ucdr_serialize_uint64_t>
 8014cf6:	ea09 0000 	and.w	r0, r9, r0
 8014cfa:	fa5f f980 	uxtb.w	r9, r0
 8014cfe:	4648      	mov	r0, r9
 8014d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d04:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014d08:	4638      	mov	r0, r7
 8014d0a:	f7fc fed9 	bl	8011ac0 <ucdr_serialize_int16_t>
 8014d0e:	68e9      	ldr	r1, [r5, #12]
 8014d10:	4681      	mov	r9, r0
 8014d12:	4638      	mov	r0, r7
 8014d14:	f7fc fbae 	bl	8011474 <ucdr_serialize_uint32_t>
 8014d18:	68eb      	ldr	r3, [r5, #12]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d0eb      	beq.n	8014cf6 <uxr_serialize_ActivityInfoVariant+0x3e>
 8014d1e:	b320      	cbz	r0, 8014d6a <uxr_serialize_ActivityInfoVariant+0xb2>
 8014d20:	f105 080c 	add.w	r8, r5, #12
 8014d24:	2600      	movs	r6, #0
 8014d26:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8014d2a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8014d2e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8014d32:	4638      	mov	r0, r7
 8014d34:	f7fc f988 	bl	8011048 <ucdr_serialize_uint8_t>
 8014d38:	2800      	cmp	r0, #0
 8014d3a:	d053      	beq.n	8014de4 <uxr_serialize_ActivityInfoVariant+0x12c>
 8014d3c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8014d40:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8014d44:	0074      	lsls	r4, r6, #1
 8014d46:	00c9      	lsls	r1, r1, #3
 8014d48:	2b03      	cmp	r3, #3
 8014d4a:	d854      	bhi.n	8014df6 <uxr_serialize_ActivityInfoVariant+0x13e>
 8014d4c:	e8df f003 	tbb	[pc, r3]
 8014d50:	02102132 	.word	0x02102132
 8014d54:	4441      	add	r1, r8
 8014d56:	4638      	mov	r0, r7
 8014d58:	6889      	ldr	r1, [r1, #8]
 8014d5a:	f002 fcf1 	bl	8017740 <ucdr_serialize_string>
 8014d5e:	68ea      	ldr	r2, [r5, #12]
 8014d60:	3601      	adds	r6, #1
 8014d62:	4296      	cmp	r6, r2
 8014d64:	d242      	bcs.n	8014dec <uxr_serialize_ActivityInfoVariant+0x134>
 8014d66:	2800      	cmp	r0, #0
 8014d68:	d1dd      	bne.n	8014d26 <uxr_serialize_ActivityInfoVariant+0x6e>
 8014d6a:	f04f 0900 	mov.w	r9, #0
 8014d6e:	e7b4      	b.n	8014cda <uxr_serialize_ActivityInfoVariant+0x22>
 8014d70:	3108      	adds	r1, #8
 8014d72:	4441      	add	r1, r8
 8014d74:	2210      	movs	r2, #16
 8014d76:	4638      	mov	r0, r7
 8014d78:	f002 fc1a 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 8014d7c:	4434      	add	r4, r6
 8014d7e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014d82:	4604      	mov	r4, r0
 8014d84:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8014d86:	4638      	mov	r0, r7
 8014d88:	f7fc fb74 	bl	8011474 <ucdr_serialize_uint32_t>
 8014d8c:	4020      	ands	r0, r4
 8014d8e:	b2c0      	uxtb	r0, r0
 8014d90:	e7e5      	b.n	8014d5e <uxr_serialize_ActivityInfoVariant+0xa6>
 8014d92:	3108      	adds	r1, #8
 8014d94:	4441      	add	r1, r8
 8014d96:	2204      	movs	r2, #4
 8014d98:	4638      	mov	r0, r7
 8014d9a:	f002 fc09 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 8014d9e:	4434      	add	r4, r6
 8014da0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014da4:	4604      	mov	r4, r0
 8014da6:	8b19      	ldrh	r1, [r3, #24]
 8014da8:	4638      	mov	r0, r7
 8014daa:	f7fc f979 	bl	80110a0 <ucdr_serialize_uint16_t>
 8014dae:	4020      	ands	r0, r4
 8014db0:	b2c0      	uxtb	r0, r0
 8014db2:	e7d4      	b.n	8014d5e <uxr_serialize_ActivityInfoVariant+0xa6>
 8014db4:	3108      	adds	r1, #8
 8014db6:	4441      	add	r1, r8
 8014db8:	2202      	movs	r2, #2
 8014dba:	4638      	mov	r0, r7
 8014dbc:	f002 fbf8 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 8014dc0:	4434      	add	r4, r6
 8014dc2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8014dc6:	4604      	mov	r4, r0
 8014dc8:	7d99      	ldrb	r1, [r3, #22]
 8014dca:	4638      	mov	r0, r7
 8014dcc:	f7fc f93c 	bl	8011048 <ucdr_serialize_uint8_t>
 8014dd0:	4020      	ands	r0, r4
 8014dd2:	b2c0      	uxtb	r0, r0
 8014dd4:	e7c3      	b.n	8014d5e <uxr_serialize_ActivityInfoVariant+0xa6>
 8014dd6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8014dda:	4638      	mov	r0, r7
 8014ddc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014de0:	f7fc be6e 	b.w	8011ac0 <ucdr_serialize_int16_t>
 8014de4:	68ea      	ldr	r2, [r5, #12]
 8014de6:	3601      	adds	r6, #1
 8014de8:	42b2      	cmp	r2, r6
 8014dea:	d8be      	bhi.n	8014d6a <uxr_serialize_ActivityInfoVariant+0xb2>
 8014dec:	ea09 0900 	and.w	r9, r9, r0
 8014df0:	fa5f f989 	uxtb.w	r9, r9
 8014df4:	e771      	b.n	8014cda <uxr_serialize_ActivityInfoVariant+0x22>
 8014df6:	68eb      	ldr	r3, [r5, #12]
 8014df8:	3601      	adds	r6, #1
 8014dfa:	429e      	cmp	r6, r3
 8014dfc:	f10a 0a18 	add.w	sl, sl, #24
 8014e00:	d395      	bcc.n	8014d2e <uxr_serialize_ActivityInfoVariant+0x76>
 8014e02:	e76a      	b.n	8014cda <uxr_serialize_ActivityInfoVariant+0x22>

08014e04 <uxr_deserialize_BaseObjectReply>:
 8014e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e08:	2202      	movs	r2, #2
 8014e0a:	4606      	mov	r6, r0
 8014e0c:	460f      	mov	r7, r1
 8014e0e:	f002 fc33 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 8014e12:	2202      	movs	r2, #2
 8014e14:	18b9      	adds	r1, r7, r2
 8014e16:	4605      	mov	r5, r0
 8014e18:	4630      	mov	r0, r6
 8014e1a:	f002 fc2d 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 8014e1e:	1d39      	adds	r1, r7, #4
 8014e20:	4680      	mov	r8, r0
 8014e22:	4630      	mov	r0, r6
 8014e24:	f7fc f926 	bl	8011074 <ucdr_deserialize_uint8_t>
 8014e28:	1d79      	adds	r1, r7, #5
 8014e2a:	4604      	mov	r4, r0
 8014e2c:	4630      	mov	r0, r6
 8014e2e:	f7fc f921 	bl	8011074 <ucdr_deserialize_uint8_t>
 8014e32:	ea05 0508 	and.w	r5, r5, r8
 8014e36:	402c      	ands	r4, r5
 8014e38:	4020      	ands	r0, r4
 8014e3a:	b2c0      	uxtb	r0, r0
 8014e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014e40 <uxr_serialize_ReadSpecification>:
 8014e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e44:	460e      	mov	r6, r1
 8014e46:	7809      	ldrb	r1, [r1, #0]
 8014e48:	4607      	mov	r7, r0
 8014e4a:	f7fc f8fd 	bl	8011048 <ucdr_serialize_uint8_t>
 8014e4e:	7871      	ldrb	r1, [r6, #1]
 8014e50:	4604      	mov	r4, r0
 8014e52:	4638      	mov	r0, r7
 8014e54:	f7fc f8f8 	bl	8011048 <ucdr_serialize_uint8_t>
 8014e58:	78b1      	ldrb	r1, [r6, #2]
 8014e5a:	4004      	ands	r4, r0
 8014e5c:	4638      	mov	r0, r7
 8014e5e:	f7fc f8c5 	bl	8010fec <ucdr_serialize_bool>
 8014e62:	78b3      	ldrb	r3, [r6, #2]
 8014e64:	b2e4      	uxtb	r4, r4
 8014e66:	4004      	ands	r4, r0
 8014e68:	b94b      	cbnz	r3, 8014e7e <uxr_serialize_ReadSpecification+0x3e>
 8014e6a:	7a31      	ldrb	r1, [r6, #8]
 8014e6c:	4638      	mov	r0, r7
 8014e6e:	f7fc f8bd 	bl	8010fec <ucdr_serialize_bool>
 8014e72:	7a33      	ldrb	r3, [r6, #8]
 8014e74:	4004      	ands	r4, r0
 8014e76:	b943      	cbnz	r3, 8014e8a <uxr_serialize_ReadSpecification+0x4a>
 8014e78:	4620      	mov	r0, r4
 8014e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e7e:	6871      	ldr	r1, [r6, #4]
 8014e80:	4638      	mov	r0, r7
 8014e82:	f002 fc5d 	bl	8017740 <ucdr_serialize_string>
 8014e86:	4004      	ands	r4, r0
 8014e88:	e7ef      	b.n	8014e6a <uxr_serialize_ReadSpecification+0x2a>
 8014e8a:	8971      	ldrh	r1, [r6, #10]
 8014e8c:	4638      	mov	r0, r7
 8014e8e:	f7fc f907 	bl	80110a0 <ucdr_serialize_uint16_t>
 8014e92:	89b1      	ldrh	r1, [r6, #12]
 8014e94:	4605      	mov	r5, r0
 8014e96:	4638      	mov	r0, r7
 8014e98:	f7fc f902 	bl	80110a0 <ucdr_serialize_uint16_t>
 8014e9c:	89f1      	ldrh	r1, [r6, #14]
 8014e9e:	4005      	ands	r5, r0
 8014ea0:	4638      	mov	r0, r7
 8014ea2:	f7fc f8fd 	bl	80110a0 <ucdr_serialize_uint16_t>
 8014ea6:	8a31      	ldrh	r1, [r6, #16]
 8014ea8:	4680      	mov	r8, r0
 8014eaa:	4638      	mov	r0, r7
 8014eac:	f7fc f8f8 	bl	80110a0 <ucdr_serialize_uint16_t>
 8014eb0:	b2ed      	uxtb	r5, r5
 8014eb2:	4025      	ands	r5, r4
 8014eb4:	ea08 0505 	and.w	r5, r8, r5
 8014eb8:	ea00 0405 	and.w	r4, r0, r5
 8014ebc:	4620      	mov	r0, r4
 8014ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ec2:	bf00      	nop

08014ec4 <uxr_serialize_CREATE_CLIENT_Payload>:
 8014ec4:	f7ff bb02 	b.w	80144cc <uxr_serialize_CLIENT_Representation>

08014ec8 <uxr_serialize_CREATE_Payload>:
 8014ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014eca:	2202      	movs	r2, #2
 8014ecc:	4607      	mov	r7, r0
 8014ece:	460e      	mov	r6, r1
 8014ed0:	f002 fb6e 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 8014ed4:	2202      	movs	r2, #2
 8014ed6:	18b1      	adds	r1, r6, r2
 8014ed8:	4605      	mov	r5, r0
 8014eda:	4638      	mov	r0, r7
 8014edc:	f002 fb68 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 8014ee0:	7931      	ldrb	r1, [r6, #4]
 8014ee2:	4604      	mov	r4, r0
 8014ee4:	4638      	mov	r0, r7
 8014ee6:	f7fc f8af 	bl	8011048 <ucdr_serialize_uint8_t>
 8014eea:	b170      	cbz	r0, 8014f0a <uxr_serialize_CREATE_Payload+0x42>
 8014eec:	7933      	ldrb	r3, [r6, #4]
 8014eee:	402c      	ands	r4, r5
 8014ef0:	3b01      	subs	r3, #1
 8014ef2:	b2e4      	uxtb	r4, r4
 8014ef4:	2b0d      	cmp	r3, #13
 8014ef6:	d809      	bhi.n	8014f0c <uxr_serialize_CREATE_Payload+0x44>
 8014ef8:	e8df f003 	tbb	[pc, r3]
 8014efc:	23230a4c 	.word	0x23230a4c
 8014f00:	0a0a0a0a 	.word	0x0a0a0a0a
 8014f04:	12121208 	.word	0x12121208
 8014f08:	3e45      	.short	0x3e45
 8014f0a:	2400      	movs	r4, #0
 8014f0c:	4620      	mov	r0, r4
 8014f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f10:	f106 0108 	add.w	r1, r6, #8
 8014f14:	4638      	mov	r0, r7
 8014f16:	f7ff fbdf 	bl	80146d8 <uxr_serialize_DATAWRITER_Representation>
 8014f1a:	4004      	ands	r4, r0
 8014f1c:	4620      	mov	r0, r4
 8014f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f20:	7a31      	ldrb	r1, [r6, #8]
 8014f22:	4638      	mov	r0, r7
 8014f24:	f7fc f890 	bl	8011048 <ucdr_serialize_uint8_t>
 8014f28:	2800      	cmp	r0, #0
 8014f2a:	d0ee      	beq.n	8014f0a <uxr_serialize_CREATE_Payload+0x42>
 8014f2c:	7a33      	ldrb	r3, [r6, #8]
 8014f2e:	2b01      	cmp	r3, #1
 8014f30:	d001      	beq.n	8014f36 <uxr_serialize_CREATE_Payload+0x6e>
 8014f32:	2b02      	cmp	r3, #2
 8014f34:	d1ea      	bne.n	8014f0c <uxr_serialize_CREATE_Payload+0x44>
 8014f36:	68f1      	ldr	r1, [r6, #12]
 8014f38:	4638      	mov	r0, r7
 8014f3a:	f002 fc01 	bl	8017740 <ucdr_serialize_string>
 8014f3e:	4004      	ands	r4, r0
 8014f40:	e7e4      	b.n	8014f0c <uxr_serialize_CREATE_Payload+0x44>
 8014f42:	7a31      	ldrb	r1, [r6, #8]
 8014f44:	4638      	mov	r0, r7
 8014f46:	f7fc f87f 	bl	8011048 <ucdr_serialize_uint8_t>
 8014f4a:	4605      	mov	r5, r0
 8014f4c:	b158      	cbz	r0, 8014f66 <uxr_serialize_CREATE_Payload+0x9e>
 8014f4e:	7a33      	ldrb	r3, [r6, #8]
 8014f50:	2b02      	cmp	r3, #2
 8014f52:	d034      	beq.n	8014fbe <uxr_serialize_CREATE_Payload+0xf6>
 8014f54:	2b03      	cmp	r3, #3
 8014f56:	d106      	bne.n	8014f66 <uxr_serialize_CREATE_Payload+0x9e>
 8014f58:	68f2      	ldr	r2, [r6, #12]
 8014f5a:	f106 0110 	add.w	r1, r6, #16
 8014f5e:	4638      	mov	r0, r7
 8014f60:	f7fd fd0e 	bl	8012980 <ucdr_serialize_sequence_uint8_t>
 8014f64:	4605      	mov	r5, r0
 8014f66:	2202      	movs	r2, #2
 8014f68:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8014f6c:	4638      	mov	r0, r7
 8014f6e:	f002 fb1f 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 8014f72:	4028      	ands	r0, r5
 8014f74:	4004      	ands	r4, r0
 8014f76:	e7c9      	b.n	8014f0c <uxr_serialize_CREATE_Payload+0x44>
 8014f78:	f106 0108 	add.w	r1, r6, #8
 8014f7c:	4638      	mov	r0, r7
 8014f7e:	f7ff faa5 	bl	80144cc <uxr_serialize_CLIENT_Representation>
 8014f82:	4004      	ands	r4, r0
 8014f84:	e7c2      	b.n	8014f0c <uxr_serialize_CREATE_Payload+0x44>
 8014f86:	f106 0108 	add.w	r1, r6, #8
 8014f8a:	4638      	mov	r0, r7
 8014f8c:	f7ff fb5a 	bl	8014644 <uxr_serialize_AGENT_Representation>
 8014f90:	4004      	ands	r4, r0
 8014f92:	e7bb      	b.n	8014f0c <uxr_serialize_CREATE_Payload+0x44>
 8014f94:	7a31      	ldrb	r1, [r6, #8]
 8014f96:	4638      	mov	r0, r7
 8014f98:	f7fc f856 	bl	8011048 <ucdr_serialize_uint8_t>
 8014f9c:	4605      	mov	r5, r0
 8014f9e:	b130      	cbz	r0, 8014fae <uxr_serialize_CREATE_Payload+0xe6>
 8014fa0:	7a33      	ldrb	r3, [r6, #8]
 8014fa2:	2b02      	cmp	r3, #2
 8014fa4:	d011      	beq.n	8014fca <uxr_serialize_CREATE_Payload+0x102>
 8014fa6:	2b03      	cmp	r3, #3
 8014fa8:	d015      	beq.n	8014fd6 <uxr_serialize_CREATE_Payload+0x10e>
 8014faa:	2b01      	cmp	r3, #1
 8014fac:	d00d      	beq.n	8014fca <uxr_serialize_CREATE_Payload+0x102>
 8014fae:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 8014fb2:	4638      	mov	r0, r7
 8014fb4:	f7fc fd84 	bl	8011ac0 <ucdr_serialize_int16_t>
 8014fb8:	4028      	ands	r0, r5
 8014fba:	4004      	ands	r4, r0
 8014fbc:	e7a6      	b.n	8014f0c <uxr_serialize_CREATE_Payload+0x44>
 8014fbe:	68f1      	ldr	r1, [r6, #12]
 8014fc0:	4638      	mov	r0, r7
 8014fc2:	f002 fbbd 	bl	8017740 <ucdr_serialize_string>
 8014fc6:	4605      	mov	r5, r0
 8014fc8:	e7cd      	b.n	8014f66 <uxr_serialize_CREATE_Payload+0x9e>
 8014fca:	68f1      	ldr	r1, [r6, #12]
 8014fcc:	4638      	mov	r0, r7
 8014fce:	f002 fbb7 	bl	8017740 <ucdr_serialize_string>
 8014fd2:	4605      	mov	r5, r0
 8014fd4:	e7eb      	b.n	8014fae <uxr_serialize_CREATE_Payload+0xe6>
 8014fd6:	68f2      	ldr	r2, [r6, #12]
 8014fd8:	f106 0110 	add.w	r1, r6, #16
 8014fdc:	4638      	mov	r0, r7
 8014fde:	f7fd fccf 	bl	8012980 <ucdr_serialize_sequence_uint8_t>
 8014fe2:	4605      	mov	r5, r0
 8014fe4:	e7e3      	b.n	8014fae <uxr_serialize_CREATE_Payload+0xe6>
 8014fe6:	bf00      	nop

08014fe8 <uxr_deserialize_GET_INFO_Payload>:
 8014fe8:	b570      	push	{r4, r5, r6, lr}
 8014fea:	2202      	movs	r2, #2
 8014fec:	4605      	mov	r5, r0
 8014fee:	460e      	mov	r6, r1
 8014ff0:	f002 fb42 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 8014ff4:	2202      	movs	r2, #2
 8014ff6:	18b1      	adds	r1, r6, r2
 8014ff8:	4604      	mov	r4, r0
 8014ffa:	4628      	mov	r0, r5
 8014ffc:	f002 fb3c 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 8015000:	1d31      	adds	r1, r6, #4
 8015002:	4004      	ands	r4, r0
 8015004:	4628      	mov	r0, r5
 8015006:	f7fc fb65 	bl	80116d4 <ucdr_deserialize_uint32_t>
 801500a:	b2e4      	uxtb	r4, r4
 801500c:	4020      	ands	r0, r4
 801500e:	bd70      	pop	{r4, r5, r6, pc}

08015010 <uxr_serialize_DELETE_Payload>:
 8015010:	b570      	push	{r4, r5, r6, lr}
 8015012:	2202      	movs	r2, #2
 8015014:	4605      	mov	r5, r0
 8015016:	460e      	mov	r6, r1
 8015018:	f002 faca 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 801501c:	2202      	movs	r2, #2
 801501e:	4604      	mov	r4, r0
 8015020:	18b1      	adds	r1, r6, r2
 8015022:	4628      	mov	r0, r5
 8015024:	f002 fac4 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 8015028:	4020      	ands	r0, r4
 801502a:	b2c0      	uxtb	r0, r0
 801502c:	bd70      	pop	{r4, r5, r6, pc}
 801502e:	bf00      	nop

08015030 <uxr_deserialize_STATUS_AGENT_Payload>:
 8015030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015034:	4605      	mov	r5, r0
 8015036:	460e      	mov	r6, r1
 8015038:	f7fc f81c 	bl	8011074 <ucdr_deserialize_uint8_t>
 801503c:	1c71      	adds	r1, r6, #1
 801503e:	4604      	mov	r4, r0
 8015040:	4628      	mov	r0, r5
 8015042:	f7fc f817 	bl	8011074 <ucdr_deserialize_uint8_t>
 8015046:	2204      	movs	r2, #4
 8015048:	18b1      	adds	r1, r6, r2
 801504a:	4680      	mov	r8, r0
 801504c:	4628      	mov	r0, r5
 801504e:	f002 fb13 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 8015052:	f106 0108 	add.w	r1, r6, #8
 8015056:	4607      	mov	r7, r0
 8015058:	2202      	movs	r2, #2
 801505a:	4628      	mov	r0, r5
 801505c:	f002 fb0c 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 8015060:	ea04 0308 	and.w	r3, r4, r8
 8015064:	b2db      	uxtb	r3, r3
 8015066:	ea03 0407 	and.w	r4, r3, r7
 801506a:	2202      	movs	r2, #2
 801506c:	4607      	mov	r7, r0
 801506e:	f106 010a 	add.w	r1, r6, #10
 8015072:	4628      	mov	r0, r5
 8015074:	f002 fb00 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 8015078:	f106 010c 	add.w	r1, r6, #12
 801507c:	4603      	mov	r3, r0
 801507e:	4628      	mov	r0, r5
 8015080:	461d      	mov	r5, r3
 8015082:	f7fb ffc9 	bl	8011018 <ucdr_deserialize_bool>
 8015086:	403c      	ands	r4, r7
 8015088:	4025      	ands	r5, r4
 801508a:	4028      	ands	r0, r5
 801508c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015090 <uxr_deserialize_STATUS_Payload>:
 8015090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015094:	2202      	movs	r2, #2
 8015096:	4606      	mov	r6, r0
 8015098:	460f      	mov	r7, r1
 801509a:	f002 faed 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 801509e:	2202      	movs	r2, #2
 80150a0:	18b9      	adds	r1, r7, r2
 80150a2:	4605      	mov	r5, r0
 80150a4:	4630      	mov	r0, r6
 80150a6:	f002 fae7 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 80150aa:	1d39      	adds	r1, r7, #4
 80150ac:	4680      	mov	r8, r0
 80150ae:	4630      	mov	r0, r6
 80150b0:	f7fb ffe0 	bl	8011074 <ucdr_deserialize_uint8_t>
 80150b4:	1d79      	adds	r1, r7, #5
 80150b6:	4604      	mov	r4, r0
 80150b8:	4630      	mov	r0, r6
 80150ba:	f7fb ffdb 	bl	8011074 <ucdr_deserialize_uint8_t>
 80150be:	ea05 0508 	and.w	r5, r5, r8
 80150c2:	402c      	ands	r4, r5
 80150c4:	4020      	ands	r0, r4
 80150c6:	b2c0      	uxtb	r0, r0
 80150c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080150cc <uxr_serialize_INFO_Payload>:
 80150cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150d0:	2202      	movs	r2, #2
 80150d2:	460c      	mov	r4, r1
 80150d4:	4605      	mov	r5, r0
 80150d6:	f002 fa6b 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 80150da:	2202      	movs	r2, #2
 80150dc:	18a1      	adds	r1, r4, r2
 80150de:	4680      	mov	r8, r0
 80150e0:	4628      	mov	r0, r5
 80150e2:	f002 fa65 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 80150e6:	7921      	ldrb	r1, [r4, #4]
 80150e8:	4607      	mov	r7, r0
 80150ea:	4628      	mov	r0, r5
 80150ec:	f7fb ffac 	bl	8011048 <ucdr_serialize_uint8_t>
 80150f0:	7961      	ldrb	r1, [r4, #5]
 80150f2:	4606      	mov	r6, r0
 80150f4:	4628      	mov	r0, r5
 80150f6:	f7fb ffa7 	bl	8011048 <ucdr_serialize_uint8_t>
 80150fa:	ea08 0807 	and.w	r8, r8, r7
 80150fe:	ea06 0608 	and.w	r6, r6, r8
 8015102:	4006      	ands	r6, r0
 8015104:	7a21      	ldrb	r1, [r4, #8]
 8015106:	4628      	mov	r0, r5
 8015108:	f7fb ff70 	bl	8010fec <ucdr_serialize_bool>
 801510c:	7a23      	ldrb	r3, [r4, #8]
 801510e:	b2f7      	uxtb	r7, r6
 8015110:	4606      	mov	r6, r0
 8015112:	b96b      	cbnz	r3, 8015130 <uxr_serialize_INFO_Payload+0x64>
 8015114:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8015118:	4628      	mov	r0, r5
 801511a:	f7fb ff67 	bl	8010fec <ucdr_serialize_bool>
 801511e:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8015122:	4030      	ands	r0, r6
 8015124:	b2c6      	uxtb	r6, r0
 8015126:	b983      	cbnz	r3, 801514a <uxr_serialize_INFO_Payload+0x7e>
 8015128:	ea06 0007 	and.w	r0, r6, r7
 801512c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015130:	7b21      	ldrb	r1, [r4, #12]
 8015132:	4628      	mov	r0, r5
 8015134:	f7fb ff88 	bl	8011048 <ucdr_serialize_uint8_t>
 8015138:	b188      	cbz	r0, 801515e <uxr_serialize_INFO_Payload+0x92>
 801513a:	f104 010c 	add.w	r1, r4, #12
 801513e:	4628      	mov	r0, r5
 8015140:	f7ff faf2 	bl	8014728 <uxr_serialize_ObjectVariant.part.0>
 8015144:	4030      	ands	r0, r6
 8015146:	b2c6      	uxtb	r6, r0
 8015148:	e7e4      	b.n	8015114 <uxr_serialize_INFO_Payload+0x48>
 801514a:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801514e:	4628      	mov	r0, r5
 8015150:	f7ff fdb2 	bl	8014cb8 <uxr_serialize_ActivityInfoVariant>
 8015154:	4006      	ands	r6, r0
 8015156:	ea06 0007 	and.w	r0, r6, r7
 801515a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801515e:	4606      	mov	r6, r0
 8015160:	e7d8      	b.n	8015114 <uxr_serialize_INFO_Payload+0x48>
 8015162:	bf00      	nop

08015164 <uxr_serialize_READ_DATA_Payload>:
 8015164:	b570      	push	{r4, r5, r6, lr}
 8015166:	2202      	movs	r2, #2
 8015168:	4605      	mov	r5, r0
 801516a:	460e      	mov	r6, r1
 801516c:	f002 fa20 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 8015170:	2202      	movs	r2, #2
 8015172:	18b1      	adds	r1, r6, r2
 8015174:	4604      	mov	r4, r0
 8015176:	4628      	mov	r0, r5
 8015178:	f002 fa1a 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 801517c:	1d31      	adds	r1, r6, #4
 801517e:	4004      	ands	r4, r0
 8015180:	4628      	mov	r0, r5
 8015182:	f7ff fe5d 	bl	8014e40 <uxr_serialize_ReadSpecification>
 8015186:	b2e4      	uxtb	r4, r4
 8015188:	4020      	ands	r0, r4
 801518a:	bd70      	pop	{r4, r5, r6, pc}

0801518c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801518c:	b570      	push	{r4, r5, r6, lr}
 801518e:	2202      	movs	r2, #2
 8015190:	4605      	mov	r5, r0
 8015192:	460e      	mov	r6, r1
 8015194:	f002 fa0c 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 8015198:	2202      	movs	r2, #2
 801519a:	4604      	mov	r4, r0
 801519c:	18b1      	adds	r1, r6, r2
 801519e:	4628      	mov	r0, r5
 80151a0:	f002 fa06 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 80151a4:	4020      	ands	r0, r4
 80151a6:	b2c0      	uxtb	r0, r0
 80151a8:	bd70      	pop	{r4, r5, r6, pc}
 80151aa:	bf00      	nop

080151ac <uxr_serialize_ACKNACK_Payload>:
 80151ac:	b570      	push	{r4, r5, r6, lr}
 80151ae:	460c      	mov	r4, r1
 80151b0:	460e      	mov	r6, r1
 80151b2:	f834 1b02 	ldrh.w	r1, [r4], #2
 80151b6:	4605      	mov	r5, r0
 80151b8:	f7fb ff72 	bl	80110a0 <ucdr_serialize_uint16_t>
 80151bc:	2202      	movs	r2, #2
 80151be:	4621      	mov	r1, r4
 80151c0:	4604      	mov	r4, r0
 80151c2:	4628      	mov	r0, r5
 80151c4:	f002 f9f4 	bl	80175b0 <ucdr_serialize_array_uint8_t>
 80151c8:	7931      	ldrb	r1, [r6, #4]
 80151ca:	4004      	ands	r4, r0
 80151cc:	4628      	mov	r0, r5
 80151ce:	f7fb ff3b 	bl	8011048 <ucdr_serialize_uint8_t>
 80151d2:	b2e4      	uxtb	r4, r4
 80151d4:	4020      	ands	r0, r4
 80151d6:	bd70      	pop	{r4, r5, r6, pc}

080151d8 <uxr_deserialize_ACKNACK_Payload>:
 80151d8:	b570      	push	{r4, r5, r6, lr}
 80151da:	4605      	mov	r5, r0
 80151dc:	460e      	mov	r6, r1
 80151de:	f7fc f85f 	bl	80112a0 <ucdr_deserialize_uint16_t>
 80151e2:	2202      	movs	r2, #2
 80151e4:	18b1      	adds	r1, r6, r2
 80151e6:	4604      	mov	r4, r0
 80151e8:	4628      	mov	r0, r5
 80151ea:	f002 fa45 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 80151ee:	1d31      	adds	r1, r6, #4
 80151f0:	4004      	ands	r4, r0
 80151f2:	4628      	mov	r0, r5
 80151f4:	f7fb ff3e 	bl	8011074 <ucdr_deserialize_uint8_t>
 80151f8:	b2e4      	uxtb	r4, r4
 80151fa:	4020      	ands	r0, r4
 80151fc:	bd70      	pop	{r4, r5, r6, pc}
 80151fe:	bf00      	nop

08015200 <uxr_serialize_HEARTBEAT_Payload>:
 8015200:	b570      	push	{r4, r5, r6, lr}
 8015202:	460d      	mov	r5, r1
 8015204:	8809      	ldrh	r1, [r1, #0]
 8015206:	4606      	mov	r6, r0
 8015208:	f7fb ff4a 	bl	80110a0 <ucdr_serialize_uint16_t>
 801520c:	8869      	ldrh	r1, [r5, #2]
 801520e:	4604      	mov	r4, r0
 8015210:	4630      	mov	r0, r6
 8015212:	f7fb ff45 	bl	80110a0 <ucdr_serialize_uint16_t>
 8015216:	7929      	ldrb	r1, [r5, #4]
 8015218:	4004      	ands	r4, r0
 801521a:	4630      	mov	r0, r6
 801521c:	f7fb ff14 	bl	8011048 <ucdr_serialize_uint8_t>
 8015220:	b2e4      	uxtb	r4, r4
 8015222:	4020      	ands	r0, r4
 8015224:	bd70      	pop	{r4, r5, r6, pc}
 8015226:	bf00      	nop

08015228 <uxr_deserialize_HEARTBEAT_Payload>:
 8015228:	b570      	push	{r4, r5, r6, lr}
 801522a:	4605      	mov	r5, r0
 801522c:	460e      	mov	r6, r1
 801522e:	f7fc f837 	bl	80112a0 <ucdr_deserialize_uint16_t>
 8015232:	1cb1      	adds	r1, r6, #2
 8015234:	4604      	mov	r4, r0
 8015236:	4628      	mov	r0, r5
 8015238:	f7fc f832 	bl	80112a0 <ucdr_deserialize_uint16_t>
 801523c:	1d31      	adds	r1, r6, #4
 801523e:	4004      	ands	r4, r0
 8015240:	4628      	mov	r0, r5
 8015242:	f7fb ff17 	bl	8011074 <ucdr_deserialize_uint8_t>
 8015246:	b2e4      	uxtb	r4, r4
 8015248:	4020      	ands	r0, r4
 801524a:	bd70      	pop	{r4, r5, r6, pc}

0801524c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801524c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015250:	4605      	mov	r5, r0
 8015252:	460e      	mov	r6, r1
 8015254:	f7fc fdc0 	bl	8011dd8 <ucdr_deserialize_int32_t>
 8015258:	1d31      	adds	r1, r6, #4
 801525a:	4607      	mov	r7, r0
 801525c:	4628      	mov	r0, r5
 801525e:	f7fc fa39 	bl	80116d4 <ucdr_deserialize_uint32_t>
 8015262:	f106 0108 	add.w	r1, r6, #8
 8015266:	4680      	mov	r8, r0
 8015268:	4628      	mov	r0, r5
 801526a:	f7fc fdb5 	bl	8011dd8 <ucdr_deserialize_int32_t>
 801526e:	f106 010c 	add.w	r1, r6, #12
 8015272:	4604      	mov	r4, r0
 8015274:	4628      	mov	r0, r5
 8015276:	f7fc fa2d 	bl	80116d4 <ucdr_deserialize_uint32_t>
 801527a:	ea07 0708 	and.w	r7, r7, r8
 801527e:	403c      	ands	r4, r7
 8015280:	f106 0110 	add.w	r1, r6, #16
 8015284:	4004      	ands	r4, r0
 8015286:	4628      	mov	r0, r5
 8015288:	f7fc fda6 	bl	8011dd8 <ucdr_deserialize_int32_t>
 801528c:	f106 0114 	add.w	r1, r6, #20
 8015290:	4607      	mov	r7, r0
 8015292:	4628      	mov	r0, r5
 8015294:	f7fc fa1e 	bl	80116d4 <ucdr_deserialize_uint32_t>
 8015298:	b2e4      	uxtb	r4, r4
 801529a:	403c      	ands	r4, r7
 801529c:	4020      	ands	r0, r4
 801529e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152a2:	bf00      	nop

080152a4 <uxr_deserialize_SampleIdentity>:
 80152a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152a8:	220c      	movs	r2, #12
 80152aa:	4604      	mov	r4, r0
 80152ac:	460d      	mov	r5, r1
 80152ae:	f002 f9e3 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 80152b2:	2203      	movs	r2, #3
 80152b4:	f105 010c 	add.w	r1, r5, #12
 80152b8:	4607      	mov	r7, r0
 80152ba:	4620      	mov	r0, r4
 80152bc:	f002 f9dc 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 80152c0:	f105 010f 	add.w	r1, r5, #15
 80152c4:	4680      	mov	r8, r0
 80152c6:	4620      	mov	r0, r4
 80152c8:	f7fb fed4 	bl	8011074 <ucdr_deserialize_uint8_t>
 80152cc:	f105 0110 	add.w	r1, r5, #16
 80152d0:	4606      	mov	r6, r0
 80152d2:	4620      	mov	r0, r4
 80152d4:	f7fc fd80 	bl	8011dd8 <ucdr_deserialize_int32_t>
 80152d8:	f105 0114 	add.w	r1, r5, #20
 80152dc:	4603      	mov	r3, r0
 80152de:	4620      	mov	r0, r4
 80152e0:	ea07 0708 	and.w	r7, r7, r8
 80152e4:	461c      	mov	r4, r3
 80152e6:	f7fc f9f5 	bl	80116d4 <ucdr_deserialize_uint32_t>
 80152ea:	403e      	ands	r6, r7
 80152ec:	4034      	ands	r4, r6
 80152ee:	4020      	ands	r0, r4
 80152f0:	b2c0      	uxtb	r0, r0
 80152f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152f6:	bf00      	nop

080152f8 <rcl_convert_rmw_ret_to_rcl_ret>:
 80152f8:	280b      	cmp	r0, #11
 80152fa:	dc0d      	bgt.n	8015318 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80152fc:	2800      	cmp	r0, #0
 80152fe:	db09      	blt.n	8015314 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015300:	280b      	cmp	r0, #11
 8015302:	d807      	bhi.n	8015314 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015304:	e8df f000 	tbb	[pc, r0]
 8015308:	07060607 	.word	0x07060607
 801530c:	06060606 	.word	0x06060606
 8015310:	07070606 	.word	0x07070606
 8015314:	2001      	movs	r0, #1
 8015316:	4770      	bx	lr
 8015318:	28cb      	cmp	r0, #203	; 0xcb
 801531a:	bf18      	it	ne
 801531c:	2001      	movne	r0, #1
 801531e:	4770      	bx	lr

08015320 <rcl_get_zero_initialized_context>:
 8015320:	4a03      	ldr	r2, [pc, #12]	; (8015330 <rcl_get_zero_initialized_context+0x10>)
 8015322:	4603      	mov	r3, r0
 8015324:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015328:	e883 0003 	stmia.w	r3, {r0, r1}
 801532c:	4618      	mov	r0, r3
 801532e:	4770      	bx	lr
 8015330:	0801b9fc 	.word	0x0801b9fc

08015334 <rcl_context_is_valid>:
 8015334:	b118      	cbz	r0, 801533e <rcl_context_is_valid+0xa>
 8015336:	6840      	ldr	r0, [r0, #4]
 8015338:	3800      	subs	r0, #0
 801533a:	bf18      	it	ne
 801533c:	2001      	movne	r0, #1
 801533e:	4770      	bx	lr

08015340 <__cleanup_context>:
 8015340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015344:	4606      	mov	r6, r0
 8015346:	6800      	ldr	r0, [r0, #0]
 8015348:	2300      	movs	r3, #0
 801534a:	6073      	str	r3, [r6, #4]
 801534c:	2800      	cmp	r0, #0
 801534e:	d049      	beq.n	80153e4 <__cleanup_context+0xa4>
 8015350:	6947      	ldr	r7, [r0, #20]
 8015352:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015356:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801535a:	b137      	cbz	r7, 801536a <__cleanup_context+0x2a>
 801535c:	3014      	adds	r0, #20
 801535e:	f000 f9bb 	bl	80156d8 <rcl_init_options_fini>
 8015362:	4607      	mov	r7, r0
 8015364:	2800      	cmp	r0, #0
 8015366:	d144      	bne.n	80153f2 <__cleanup_context+0xb2>
 8015368:	6830      	ldr	r0, [r6, #0]
 801536a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801536c:	b143      	cbz	r3, 8015380 <__cleanup_context+0x40>
 801536e:	3028      	adds	r0, #40	; 0x28
 8015370:	f001 fd9a 	bl	8016ea8 <rmw_context_fini>
 8015374:	b118      	cbz	r0, 801537e <__cleanup_context+0x3e>
 8015376:	2f00      	cmp	r7, #0
 8015378:	d03e      	beq.n	80153f8 <__cleanup_context+0xb8>
 801537a:	f7fa fe61 	bl	8010040 <rcutils_reset_error>
 801537e:	6830      	ldr	r0, [r6, #0]
 8015380:	6a03      	ldr	r3, [r0, #32]
 8015382:	b1db      	cbz	r3, 80153bc <__cleanup_context+0x7c>
 8015384:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8015388:	2a01      	cmp	r2, #1
 801538a:	f17c 0100 	sbcs.w	r1, ip, #0
 801538e:	db11      	blt.n	80153b4 <__cleanup_context+0x74>
 8015390:	2400      	movs	r4, #0
 8015392:	4625      	mov	r5, r4
 8015394:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015398:	4649      	mov	r1, r9
 801539a:	b1b8      	cbz	r0, 80153cc <__cleanup_context+0x8c>
 801539c:	47c0      	blx	r8
 801539e:	6833      	ldr	r3, [r6, #0]
 80153a0:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80153a4:	3401      	adds	r4, #1
 80153a6:	f145 0500 	adc.w	r5, r5, #0
 80153aa:	4294      	cmp	r4, r2
 80153ac:	eb75 010c 	sbcs.w	r1, r5, ip
 80153b0:	6a1b      	ldr	r3, [r3, #32]
 80153b2:	dbef      	blt.n	8015394 <__cleanup_context+0x54>
 80153b4:	4618      	mov	r0, r3
 80153b6:	4649      	mov	r1, r9
 80153b8:	47c0      	blx	r8
 80153ba:	6830      	ldr	r0, [r6, #0]
 80153bc:	4649      	mov	r1, r9
 80153be:	47c0      	blx	r8
 80153c0:	2300      	movs	r3, #0
 80153c2:	e9c6 3300 	strd	r3, r3, [r6]
 80153c6:	4638      	mov	r0, r7
 80153c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153cc:	3401      	adds	r4, #1
 80153ce:	f145 0500 	adc.w	r5, r5, #0
 80153d2:	4294      	cmp	r4, r2
 80153d4:	eb75 010c 	sbcs.w	r1, r5, ip
 80153d8:	dbdc      	blt.n	8015394 <__cleanup_context+0x54>
 80153da:	4618      	mov	r0, r3
 80153dc:	4649      	mov	r1, r9
 80153de:	47c0      	blx	r8
 80153e0:	6830      	ldr	r0, [r6, #0]
 80153e2:	e7eb      	b.n	80153bc <__cleanup_context+0x7c>
 80153e4:	4607      	mov	r7, r0
 80153e6:	2300      	movs	r3, #0
 80153e8:	e9c6 3300 	strd	r3, r3, [r6]
 80153ec:	4638      	mov	r0, r7
 80153ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153f2:	f7fa fe25 	bl	8010040 <rcutils_reset_error>
 80153f6:	e7b7      	b.n	8015368 <__cleanup_context+0x28>
 80153f8:	f7ff ff7e 	bl	80152f8 <rcl_convert_rmw_ret_to_rcl_ret>
 80153fc:	4607      	mov	r7, r0
 80153fe:	e7bc      	b.n	801537a <__cleanup_context+0x3a>

08015400 <rcl_init>:
 8015400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015404:	1e05      	subs	r5, r0, #0
 8015406:	b09e      	sub	sp, #120	; 0x78
 8015408:	460e      	mov	r6, r1
 801540a:	4690      	mov	r8, r2
 801540c:	461f      	mov	r7, r3
 801540e:	f340 809c 	ble.w	801554a <rcl_init+0x14a>
 8015412:	2900      	cmp	r1, #0
 8015414:	f000 809c 	beq.w	8015550 <rcl_init+0x150>
 8015418:	f1a1 0e04 	sub.w	lr, r1, #4
 801541c:	f04f 0c00 	mov.w	ip, #0
 8015420:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8015424:	f10c 0c01 	add.w	ip, ip, #1
 8015428:	2c00      	cmp	r4, #0
 801542a:	f000 8091 	beq.w	8015550 <rcl_init+0x150>
 801542e:	4565      	cmp	r5, ip
 8015430:	d1f6      	bne.n	8015420 <rcl_init+0x20>
 8015432:	f1b8 0f00 	cmp.w	r8, #0
 8015436:	f000 808b 	beq.w	8015550 <rcl_init+0x150>
 801543a:	f8d8 4000 	ldr.w	r4, [r8]
 801543e:	2c00      	cmp	r4, #0
 8015440:	f000 8086 	beq.w	8015550 <rcl_init+0x150>
 8015444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015446:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 801544a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801544e:	6823      	ldr	r3, [r4, #0]
 8015450:	f8cc 3000 	str.w	r3, [ip]
 8015454:	a819      	add	r0, sp, #100	; 0x64
 8015456:	f7fa fdcf 	bl	800fff8 <rcutils_allocator_is_valid>
 801545a:	2800      	cmp	r0, #0
 801545c:	d078      	beq.n	8015550 <rcl_init+0x150>
 801545e:	2f00      	cmp	r7, #0
 8015460:	d076      	beq.n	8015550 <rcl_init+0x150>
 8015462:	683b      	ldr	r3, [r7, #0]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d178      	bne.n	801555a <rcl_init+0x15a>
 8015468:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 801546c:	2178      	movs	r1, #120	; 0x78
 801546e:	2001      	movs	r0, #1
 8015470:	4798      	blx	r3
 8015472:	4604      	mov	r4, r0
 8015474:	6038      	str	r0, [r7, #0]
 8015476:	2800      	cmp	r0, #0
 8015478:	f000 80b6 	beq.w	80155e8 <rcl_init+0x1e8>
 801547c:	a802      	add	r0, sp, #8
 801547e:	f001 f957 	bl	8016730 <rmw_get_zero_initialized_context>
 8015482:	a902      	add	r1, sp, #8
 8015484:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015488:	2250      	movs	r2, #80	; 0x50
 801548a:	ac19      	add	r4, sp, #100	; 0x64
 801548c:	f004 fbde 	bl	8019c4c <memcpy>
 8015490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015492:	f8d7 e000 	ldr.w	lr, [r7]
 8015496:	46f4      	mov	ip, lr
 8015498:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801549c:	6823      	ldr	r3, [r4, #0]
 801549e:	f8cc 3000 	str.w	r3, [ip]
 80154a2:	f10e 0114 	add.w	r1, lr, #20
 80154a6:	4640      	mov	r0, r8
 80154a8:	f000 f940 	bl	801572c <rcl_init_options_copy>
 80154ac:	4604      	mov	r4, r0
 80154ae:	2800      	cmp	r0, #0
 80154b0:	d144      	bne.n	801553c <rcl_init+0x13c>
 80154b2:	f8d7 9000 	ldr.w	r9, [r7]
 80154b6:	ea4f 78e5 	mov.w	r8, r5, asr #31
 80154ba:	f8c9 0020 	str.w	r0, [r9, #32]
 80154be:	f8c9 5018 	str.w	r5, [r9, #24]
 80154c2:	f8c9 801c 	str.w	r8, [r9, #28]
 80154c6:	2d00      	cmp	r5, #0
 80154c8:	d04e      	beq.n	8015568 <rcl_init+0x168>
 80154ca:	2e00      	cmp	r6, #0
 80154cc:	d04c      	beq.n	8015568 <rcl_init+0x168>
 80154ce:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 80154d2:	2104      	movs	r1, #4
 80154d4:	4628      	mov	r0, r5
 80154d6:	4798      	blx	r3
 80154d8:	f8c9 0020 	str.w	r0, [r9, #32]
 80154dc:	f8d7 9000 	ldr.w	r9, [r7]
 80154e0:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80154e4:	46ca      	mov	sl, r9
 80154e6:	b343      	cbz	r3, 801553a <rcl_init+0x13a>
 80154e8:	2d01      	cmp	r5, #1
 80154ea:	f178 0300 	sbcs.w	r3, r8, #0
 80154ee:	db3b      	blt.n	8015568 <rcl_init+0x168>
 80154f0:	2400      	movs	r4, #0
 80154f2:	3e04      	subs	r6, #4
 80154f4:	46a1      	mov	r9, r4
 80154f6:	e00b      	b.n	8015510 <rcl_init+0x110>
 80154f8:	6831      	ldr	r1, [r6, #0]
 80154fa:	f004 fba7 	bl	8019c4c <memcpy>
 80154fe:	3401      	adds	r4, #1
 8015500:	f149 0900 	adc.w	r9, r9, #0
 8015504:	45c8      	cmp	r8, r9
 8015506:	bf08      	it	eq
 8015508:	42a5      	cmpeq	r5, r4
 801550a:	d02b      	beq.n	8015564 <rcl_init+0x164>
 801550c:	f8d7 a000 	ldr.w	sl, [r7]
 8015510:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8015514:	f7ea fe66 	bl	80001e4 <strlen>
 8015518:	1c42      	adds	r2, r0, #1
 801551a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801551c:	991d      	ldr	r1, [sp, #116]	; 0x74
 801551e:	f8da a020 	ldr.w	sl, [sl, #32]
 8015522:	9201      	str	r2, [sp, #4]
 8015524:	4610      	mov	r0, r2
 8015526:	4798      	blx	r3
 8015528:	683b      	ldr	r3, [r7, #0]
 801552a:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801552e:	6a1b      	ldr	r3, [r3, #32]
 8015530:	9a01      	ldr	r2, [sp, #4]
 8015532:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015536:	2800      	cmp	r0, #0
 8015538:	d1de      	bne.n	80154f8 <rcl_init+0xf8>
 801553a:	240a      	movs	r4, #10
 801553c:	4638      	mov	r0, r7
 801553e:	f7ff feff 	bl	8015340 <__cleanup_context>
 8015542:	4620      	mov	r0, r4
 8015544:	b01e      	add	sp, #120	; 0x78
 8015546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801554a:	2900      	cmp	r1, #0
 801554c:	f43f af71 	beq.w	8015432 <rcl_init+0x32>
 8015550:	240b      	movs	r4, #11
 8015552:	4620      	mov	r0, r4
 8015554:	b01e      	add	sp, #120	; 0x78
 8015556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801555a:	2464      	movs	r4, #100	; 0x64
 801555c:	4620      	mov	r0, r4
 801555e:	b01e      	add	sp, #120	; 0x78
 8015560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015564:	f8d7 9000 	ldr.w	r9, [r7]
 8015568:	4926      	ldr	r1, [pc, #152]	; (8015604 <rcl_init+0x204>)
 801556a:	680b      	ldr	r3, [r1, #0]
 801556c:	3301      	adds	r3, #1
 801556e:	d036      	beq.n	80155de <rcl_init+0x1de>
 8015570:	600b      	str	r3, [r1, #0]
 8015572:	461a      	mov	r2, r3
 8015574:	2400      	movs	r4, #0
 8015576:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801557a:	607b      	str	r3, [r7, #4]
 801557c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801557e:	3301      	adds	r3, #1
 8015580:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8015584:	d034      	beq.n	80155f0 <rcl_init+0x1f0>
 8015586:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 801558a:	b93b      	cbnz	r3, 801559c <rcl_init+0x19c>
 801558c:	3030      	adds	r0, #48	; 0x30
 801558e:	f000 f939 	bl	8015804 <rcl_get_localhost_only>
 8015592:	4604      	mov	r4, r0
 8015594:	2800      	cmp	r0, #0
 8015596:	d1d1      	bne.n	801553c <rcl_init+0x13c>
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	6958      	ldr	r0, [r3, #20]
 801559c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801559e:	aa18      	add	r2, sp, #96	; 0x60
 80155a0:	a917      	add	r1, sp, #92	; 0x5c
 80155a2:	f000 fd81 	bl	80160a8 <rcl_validate_enclave_name>
 80155a6:	4604      	mov	r4, r0
 80155a8:	2800      	cmp	r0, #0
 80155aa:	d1c7      	bne.n	801553c <rcl_init+0x13c>
 80155ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80155ae:	b9eb      	cbnz	r3, 80155ec <rcl_init+0x1ec>
 80155b0:	6839      	ldr	r1, [r7, #0]
 80155b2:	694b      	ldr	r3, [r1, #20]
 80155b4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80155b6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80155ba:	f000 fc3d 	bl	8015e38 <rcl_get_security_options_from_environment>
 80155be:	4604      	mov	r4, r0
 80155c0:	2800      	cmp	r0, #0
 80155c2:	d1bb      	bne.n	801553c <rcl_init+0x13c>
 80155c4:	6839      	ldr	r1, [r7, #0]
 80155c6:	6948      	ldr	r0, [r1, #20]
 80155c8:	3128      	adds	r1, #40	; 0x28
 80155ca:	3018      	adds	r0, #24
 80155cc:	f001 fb36 	bl	8016c3c <rmw_init>
 80155d0:	4604      	mov	r4, r0
 80155d2:	2800      	cmp	r0, #0
 80155d4:	d0bd      	beq.n	8015552 <rcl_init+0x152>
 80155d6:	f7ff fe8f 	bl	80152f8 <rcl_convert_rmw_ret_to_rcl_ret>
 80155da:	4604      	mov	r4, r0
 80155dc:	e7ae      	b.n	801553c <rcl_init+0x13c>
 80155de:	2201      	movs	r2, #1
 80155e0:	461c      	mov	r4, r3
 80155e2:	600a      	str	r2, [r1, #0]
 80155e4:	4613      	mov	r3, r2
 80155e6:	e7c6      	b.n	8015576 <rcl_init+0x176>
 80155e8:	240a      	movs	r4, #10
 80155ea:	e7b2      	b.n	8015552 <rcl_init+0x152>
 80155ec:	2401      	movs	r4, #1
 80155ee:	e7a5      	b.n	801553c <rcl_init+0x13c>
 80155f0:	3024      	adds	r0, #36	; 0x24
 80155f2:	f003 fc5d 	bl	8018eb0 <rcl_get_default_domain_id>
 80155f6:	4604      	mov	r4, r0
 80155f8:	2800      	cmp	r0, #0
 80155fa:	d19f      	bne.n	801553c <rcl_init+0x13c>
 80155fc:	683b      	ldr	r3, [r7, #0]
 80155fe:	6958      	ldr	r0, [r3, #20]
 8015600:	e7c1      	b.n	8015586 <rcl_init+0x186>
 8015602:	bf00      	nop
 8015604:	2001570c 	.word	0x2001570c

08015608 <rcl_get_zero_initialized_init_options>:
 8015608:	2000      	movs	r0, #0
 801560a:	4770      	bx	lr

0801560c <rcl_init_options_init>:
 801560c:	b084      	sub	sp, #16
 801560e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015610:	b097      	sub	sp, #92	; 0x5c
 8015612:	ae1d      	add	r6, sp, #116	; 0x74
 8015614:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8015618:	2800      	cmp	r0, #0
 801561a:	d058      	beq.n	80156ce <rcl_init_options_init+0xc2>
 801561c:	6803      	ldr	r3, [r0, #0]
 801561e:	4605      	mov	r5, r0
 8015620:	b133      	cbz	r3, 8015630 <rcl_init_options_init+0x24>
 8015622:	2464      	movs	r4, #100	; 0x64
 8015624:	4620      	mov	r0, r4
 8015626:	b017      	add	sp, #92	; 0x5c
 8015628:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801562c:	b004      	add	sp, #16
 801562e:	4770      	bx	lr
 8015630:	4630      	mov	r0, r6
 8015632:	f7fa fce1 	bl	800fff8 <rcutils_allocator_is_valid>
 8015636:	2800      	cmp	r0, #0
 8015638:	d049      	beq.n	80156ce <rcl_init_options_init+0xc2>
 801563a:	46b4      	mov	ip, r6
 801563c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015640:	ac11      	add	r4, sp, #68	; 0x44
 8015642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015644:	f8dc 3000 	ldr.w	r3, [ip]
 8015648:	6023      	str	r3, [r4, #0]
 801564a:	9921      	ldr	r1, [sp, #132]	; 0x84
 801564c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801564e:	2050      	movs	r0, #80	; 0x50
 8015650:	4798      	blx	r3
 8015652:	4604      	mov	r4, r0
 8015654:	6028      	str	r0, [r5, #0]
 8015656:	2800      	cmp	r0, #0
 8015658:	d03b      	beq.n	80156d2 <rcl_init_options_init+0xc6>
 801565a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 801565e:	4686      	mov	lr, r0
 8015660:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015664:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015668:	f8dc 3000 	ldr.w	r3, [ip]
 801566c:	f8ce 3000 	str.w	r3, [lr]
 8015670:	a802      	add	r0, sp, #8
 8015672:	f001 f86d 	bl	8016750 <rmw_get_zero_initialized_init_options>
 8015676:	f10d 0e08 	add.w	lr, sp, #8
 801567a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801567e:	f104 0c18 	add.w	ip, r4, #24
 8015682:	682f      	ldr	r7, [r5, #0]
 8015684:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015688:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801568c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015690:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015694:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015698:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801569c:	ac20      	add	r4, sp, #128	; 0x80
 801569e:	e88c 0003 	stmia.w	ip, {r0, r1}
 80156a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80156a6:	e88d 0003 	stmia.w	sp, {r0, r1}
 80156aa:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80156ae:	f107 0018 	add.w	r0, r7, #24
 80156b2:	f001 f9cb 	bl	8016a4c <rmw_init_options_init>
 80156b6:	4604      	mov	r4, r0
 80156b8:	2800      	cmp	r0, #0
 80156ba:	d0b3      	beq.n	8015624 <rcl_init_options_init+0x18>
 80156bc:	9921      	ldr	r1, [sp, #132]	; 0x84
 80156be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80156c0:	6828      	ldr	r0, [r5, #0]
 80156c2:	4798      	blx	r3
 80156c4:	4620      	mov	r0, r4
 80156c6:	f7ff fe17 	bl	80152f8 <rcl_convert_rmw_ret_to_rcl_ret>
 80156ca:	4604      	mov	r4, r0
 80156cc:	e7aa      	b.n	8015624 <rcl_init_options_init+0x18>
 80156ce:	240b      	movs	r4, #11
 80156d0:	e7a8      	b.n	8015624 <rcl_init_options_init+0x18>
 80156d2:	240a      	movs	r4, #10
 80156d4:	e7a6      	b.n	8015624 <rcl_init_options_init+0x18>
 80156d6:	bf00      	nop

080156d8 <rcl_init_options_fini>:
 80156d8:	b530      	push	{r4, r5, lr}
 80156da:	b087      	sub	sp, #28
 80156dc:	b1f0      	cbz	r0, 801571c <rcl_init_options_fini+0x44>
 80156de:	6803      	ldr	r3, [r0, #0]
 80156e0:	4604      	mov	r4, r0
 80156e2:	b1db      	cbz	r3, 801571c <rcl_init_options_fini+0x44>
 80156e4:	469c      	mov	ip, r3
 80156e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80156ea:	f10d 0e04 	add.w	lr, sp, #4
 80156ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80156f2:	f8dc 3000 	ldr.w	r3, [ip]
 80156f6:	f8ce 3000 	str.w	r3, [lr]
 80156fa:	a801      	add	r0, sp, #4
 80156fc:	f7fa fc7c 	bl	800fff8 <rcutils_allocator_is_valid>
 8015700:	b160      	cbz	r0, 801571c <rcl_init_options_fini+0x44>
 8015702:	6820      	ldr	r0, [r4, #0]
 8015704:	3018      	adds	r0, #24
 8015706:	f001 fa51 	bl	8016bac <rmw_init_options_fini>
 801570a:	4605      	mov	r5, r0
 801570c:	b950      	cbnz	r0, 8015724 <rcl_init_options_fini+0x4c>
 801570e:	6820      	ldr	r0, [r4, #0]
 8015710:	9b02      	ldr	r3, [sp, #8]
 8015712:	9905      	ldr	r1, [sp, #20]
 8015714:	4798      	blx	r3
 8015716:	4628      	mov	r0, r5
 8015718:	b007      	add	sp, #28
 801571a:	bd30      	pop	{r4, r5, pc}
 801571c:	250b      	movs	r5, #11
 801571e:	4628      	mov	r0, r5
 8015720:	b007      	add	sp, #28
 8015722:	bd30      	pop	{r4, r5, pc}
 8015724:	f7ff fde8 	bl	80152f8 <rcl_convert_rmw_ret_to_rcl_ret>
 8015728:	4605      	mov	r5, r0
 801572a:	e7f8      	b.n	801571e <rcl_init_options_fini+0x46>

0801572c <rcl_init_options_copy>:
 801572c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015730:	b094      	sub	sp, #80	; 0x50
 8015732:	2800      	cmp	r0, #0
 8015734:	d058      	beq.n	80157e8 <rcl_init_options_copy+0xbc>
 8015736:	4604      	mov	r4, r0
 8015738:	6800      	ldr	r0, [r0, #0]
 801573a:	2800      	cmp	r0, #0
 801573c:	d054      	beq.n	80157e8 <rcl_init_options_copy+0xbc>
 801573e:	460e      	mov	r6, r1
 8015740:	f7fa fc5a 	bl	800fff8 <rcutils_allocator_is_valid>
 8015744:	2800      	cmp	r0, #0
 8015746:	d04f      	beq.n	80157e8 <rcl_init_options_copy+0xbc>
 8015748:	2e00      	cmp	r6, #0
 801574a:	d04d      	beq.n	80157e8 <rcl_init_options_copy+0xbc>
 801574c:	6833      	ldr	r3, [r6, #0]
 801574e:	b123      	cbz	r3, 801575a <rcl_init_options_copy+0x2e>
 8015750:	2464      	movs	r4, #100	; 0x64
 8015752:	4620      	mov	r0, r4
 8015754:	b014      	add	sp, #80	; 0x50
 8015756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801575a:	6827      	ldr	r7, [r4, #0]
 801575c:	46bc      	mov	ip, r7
 801575e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015762:	ad0f      	add	r5, sp, #60	; 0x3c
 8015764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015766:	f8dc 3000 	ldr.w	r3, [ip]
 801576a:	f8d7 8000 	ldr.w	r8, [r7]
 801576e:	602b      	str	r3, [r5, #0]
 8015770:	4619      	mov	r1, r3
 8015772:	2050      	movs	r0, #80	; 0x50
 8015774:	47c0      	blx	r8
 8015776:	4605      	mov	r5, r0
 8015778:	6030      	str	r0, [r6, #0]
 801577a:	b3d0      	cbz	r0, 80157f2 <rcl_init_options_copy+0xc6>
 801577c:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8015780:	4686      	mov	lr, r0
 8015782:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015786:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801578a:	f8dc 3000 	ldr.w	r3, [ip]
 801578e:	f8ce 3000 	str.w	r3, [lr]
 8015792:	4668      	mov	r0, sp
 8015794:	f000 ffdc 	bl	8016750 <rmw_get_zero_initialized_init_options>
 8015798:	46ee      	mov	lr, sp
 801579a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801579e:	f105 0c18 	add.w	ip, r5, #24
 80157a2:	6824      	ldr	r4, [r4, #0]
 80157a4:	6835      	ldr	r5, [r6, #0]
 80157a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80157aa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80157ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80157b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80157b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80157ba:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80157be:	e88c 0003 	stmia.w	ip, {r0, r1}
 80157c2:	f104 0018 	add.w	r0, r4, #24
 80157c6:	f105 0118 	add.w	r1, r5, #24
 80157ca:	f001 f9a7 	bl	8016b1c <rmw_init_options_copy>
 80157ce:	4604      	mov	r4, r0
 80157d0:	2800      	cmp	r0, #0
 80157d2:	d0be      	beq.n	8015752 <rcl_init_options_copy+0x26>
 80157d4:	f7fa fc1e 	bl	8010014 <rcutils_get_error_string>
 80157d8:	f7fa fc32 	bl	8010040 <rcutils_reset_error>
 80157dc:	4630      	mov	r0, r6
 80157de:	f7ff ff7b 	bl	80156d8 <rcl_init_options_fini>
 80157e2:	b140      	cbz	r0, 80157f6 <rcl_init_options_copy+0xca>
 80157e4:	4604      	mov	r4, r0
 80157e6:	e7b4      	b.n	8015752 <rcl_init_options_copy+0x26>
 80157e8:	240b      	movs	r4, #11
 80157ea:	4620      	mov	r0, r4
 80157ec:	b014      	add	sp, #80	; 0x50
 80157ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157f2:	240a      	movs	r4, #10
 80157f4:	e7ad      	b.n	8015752 <rcl_init_options_copy+0x26>
 80157f6:	4620      	mov	r0, r4
 80157f8:	b014      	add	sp, #80	; 0x50
 80157fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80157fe:	f7ff bd7b 	b.w	80152f8 <rcl_convert_rmw_ret_to_rcl_ret>
 8015802:	bf00      	nop

08015804 <rcl_get_localhost_only>:
 8015804:	b510      	push	{r4, lr}
 8015806:	b082      	sub	sp, #8
 8015808:	2300      	movs	r3, #0
 801580a:	9301      	str	r3, [sp, #4]
 801580c:	b1b8      	cbz	r0, 801583e <rcl_get_localhost_only+0x3a>
 801580e:	4604      	mov	r4, r0
 8015810:	a901      	add	r1, sp, #4
 8015812:	480c      	ldr	r0, [pc, #48]	; (8015844 <rcl_get_localhost_only+0x40>)
 8015814:	f000 fc90 	bl	8016138 <rcutils_get_env>
 8015818:	b110      	cbz	r0, 8015820 <rcl_get_localhost_only+0x1c>
 801581a:	2001      	movs	r0, #1
 801581c:	b002      	add	sp, #8
 801581e:	bd10      	pop	{r4, pc}
 8015820:	9b01      	ldr	r3, [sp, #4]
 8015822:	b113      	cbz	r3, 801582a <rcl_get_localhost_only+0x26>
 8015824:	781a      	ldrb	r2, [r3, #0]
 8015826:	2a31      	cmp	r2, #49	; 0x31
 8015828:	d004      	beq.n	8015834 <rcl_get_localhost_only+0x30>
 801582a:	2302      	movs	r3, #2
 801582c:	2000      	movs	r0, #0
 801582e:	7023      	strb	r3, [r4, #0]
 8015830:	b002      	add	sp, #8
 8015832:	bd10      	pop	{r4, pc}
 8015834:	785b      	ldrb	r3, [r3, #1]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d1f7      	bne.n	801582a <rcl_get_localhost_only+0x26>
 801583a:	2301      	movs	r3, #1
 801583c:	e7f6      	b.n	801582c <rcl_get_localhost_only+0x28>
 801583e:	200b      	movs	r0, #11
 8015840:	b002      	add	sp, #8
 8015842:	bd10      	pop	{r4, pc}
 8015844:	0801ba04 	.word	0x0801ba04

08015848 <rcl_get_zero_initialized_node>:
 8015848:	4a03      	ldr	r2, [pc, #12]	; (8015858 <rcl_get_zero_initialized_node+0x10>)
 801584a:	4603      	mov	r3, r0
 801584c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015850:	e883 0003 	stmia.w	r3, {r0, r1}
 8015854:	4618      	mov	r0, r3
 8015856:	4770      	bx	lr
 8015858:	0801ba2c 	.word	0x0801ba2c

0801585c <rcl_node_init>:
 801585c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015860:	b0a9      	sub	sp, #164	; 0xa4
 8015862:	4604      	mov	r4, r0
 8015864:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8015868:	a823      	add	r0, sp, #140	; 0x8c
 801586a:	460e      	mov	r6, r1
 801586c:	4615      	mov	r5, r2
 801586e:	461f      	mov	r7, r3
 8015870:	f003 fd46 	bl	8019300 <rcl_guard_condition_get_default_options>
 8015874:	f1b8 0f00 	cmp.w	r8, #0
 8015878:	f000 80e6 	beq.w	8015a48 <rcl_node_init+0x1ec>
 801587c:	4640      	mov	r0, r8
 801587e:	f7fa fbbb 	bl	800fff8 <rcutils_allocator_is_valid>
 8015882:	2800      	cmp	r0, #0
 8015884:	f000 80e0 	beq.w	8015a48 <rcl_node_init+0x1ec>
 8015888:	2e00      	cmp	r6, #0
 801588a:	f000 80dd 	beq.w	8015a48 <rcl_node_init+0x1ec>
 801588e:	2d00      	cmp	r5, #0
 8015890:	f000 80da 	beq.w	8015a48 <rcl_node_init+0x1ec>
 8015894:	2c00      	cmp	r4, #0
 8015896:	f000 80d7 	beq.w	8015a48 <rcl_node_init+0x1ec>
 801589a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801589e:	f1b9 0f00 	cmp.w	r9, #0
 80158a2:	f040 80fd 	bne.w	8015aa0 <rcl_node_init+0x244>
 80158a6:	2f00      	cmp	r7, #0
 80158a8:	f000 80ce 	beq.w	8015a48 <rcl_node_init+0x1ec>
 80158ac:	4638      	mov	r0, r7
 80158ae:	f7ff fd41 	bl	8015334 <rcl_context_is_valid>
 80158b2:	4682      	mov	sl, r0
 80158b4:	2800      	cmp	r0, #0
 80158b6:	f000 80cd 	beq.w	8015a54 <rcl_node_init+0x1f8>
 80158ba:	464a      	mov	r2, r9
 80158bc:	a922      	add	r1, sp, #136	; 0x88
 80158be:	4630      	mov	r0, r6
 80158c0:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 80158c4:	f001 f83a 	bl	801693c <rmw_validate_node_name>
 80158c8:	4681      	mov	r9, r0
 80158ca:	2800      	cmp	r0, #0
 80158cc:	f040 80be 	bne.w	8015a4c <rcl_node_init+0x1f0>
 80158d0:	9822      	ldr	r0, [sp, #136]	; 0x88
 80158d2:	2800      	cmp	r0, #0
 80158d4:	f040 80f0 	bne.w	8015ab8 <rcl_node_init+0x25c>
 80158d8:	4628      	mov	r0, r5
 80158da:	f7ea fc83 	bl	80001e4 <strlen>
 80158de:	2800      	cmp	r0, #0
 80158e0:	f040 80bb 	bne.w	8015a5a <rcl_node_init+0x1fe>
 80158e4:	4d7c      	ldr	r5, [pc, #496]	; (8015ad8 <rcl_node_init+0x27c>)
 80158e6:	a922      	add	r1, sp, #136	; 0x88
 80158e8:	2200      	movs	r2, #0
 80158ea:	4628      	mov	r0, r5
 80158ec:	f001 f808 	bl	8016900 <rmw_validate_namespace>
 80158f0:	4681      	mov	r9, r0
 80158f2:	2800      	cmp	r0, #0
 80158f4:	f040 80aa 	bne.w	8015a4c <rcl_node_init+0x1f0>
 80158f8:	4682      	mov	sl, r0
 80158fa:	9822      	ldr	r0, [sp, #136]	; 0x88
 80158fc:	2800      	cmp	r0, #0
 80158fe:	f040 80e0 	bne.w	8015ac2 <rcl_node_init+0x266>
 8015902:	f8d8 3000 	ldr.w	r3, [r8]
 8015906:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801590a:	2078      	movs	r0, #120	; 0x78
 801590c:	4798      	blx	r3
 801590e:	4681      	mov	r9, r0
 8015910:	6060      	str	r0, [r4, #4]
 8015912:	2800      	cmp	r0, #0
 8015914:	f000 80ca 	beq.w	8015aac <rcl_node_init+0x250>
 8015918:	2200      	movs	r2, #0
 801591a:	2300      	movs	r3, #0
 801591c:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 8015920:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 8015924:	a808      	add	r0, sp, #32
 8015926:	f000 f907 	bl	8015b38 <rcl_node_get_default_options>
 801592a:	a908      	add	r1, sp, #32
 801592c:	4648      	mov	r0, r9
 801592e:	2268      	movs	r2, #104	; 0x68
 8015930:	f004 f98c 	bl	8019c4c <memcpy>
 8015934:	6861      	ldr	r1, [r4, #4]
 8015936:	6027      	str	r7, [r4, #0]
 8015938:	4640      	mov	r0, r8
 801593a:	f000 f90b 	bl	8015b54 <rcl_node_options_copy>
 801593e:	2800      	cmp	r0, #0
 8015940:	d158      	bne.n	80159f4 <rcl_node_init+0x198>
 8015942:	4628      	mov	r0, r5
 8015944:	f7ea fc4e 	bl	80001e4 <strlen>
 8015948:	4428      	add	r0, r5
 801594a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 801594e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8015952:	2b2f      	cmp	r3, #47	; 0x2f
 8015954:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015958:	9300      	str	r3, [sp, #0]
 801595a:	bf0c      	ite	eq
 801595c:	4b5f      	ldreq	r3, [pc, #380]	; (8015adc <rcl_node_init+0x280>)
 801595e:	4b60      	ldrne	r3, [pc, #384]	; (8015ae0 <rcl_node_init+0x284>)
 8015960:	9302      	str	r3, [sp, #8]
 8015962:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015966:	9301      	str	r3, [sp, #4]
 8015968:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801596c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8015970:	f000 fc0a 	bl	8016188 <rcutils_format_string_limit>
 8015974:	6823      	ldr	r3, [r4, #0]
 8015976:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 801597a:	6818      	ldr	r0, [r3, #0]
 801597c:	4631      	mov	r1, r6
 801597e:	3028      	adds	r0, #40	; 0x28
 8015980:	462a      	mov	r2, r5
 8015982:	6866      	ldr	r6, [r4, #4]
 8015984:	f001 fbc2 	bl	801710c <rmw_create_node>
 8015988:	6863      	ldr	r3, [r4, #4]
 801598a:	66b0      	str	r0, [r6, #104]	; 0x68
 801598c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801598e:	2800      	cmp	r0, #0
 8015990:	d032      	beq.n	80159f8 <rcl_node_init+0x19c>
 8015992:	f001 fc4d 	bl	8017230 <rmw_node_get_graph_guard_condition>
 8015996:	4681      	mov	r9, r0
 8015998:	b360      	cbz	r0, 80159f4 <rcl_node_init+0x198>
 801599a:	f8d8 3000 	ldr.w	r3, [r8]
 801599e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80159a2:	6866      	ldr	r6, [r4, #4]
 80159a4:	2008      	movs	r0, #8
 80159a6:	4798      	blx	r3
 80159a8:	6863      	ldr	r3, [r4, #4]
 80159aa:	66f0      	str	r0, [r6, #108]	; 0x6c
 80159ac:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 80159b0:	f1bb 0f00 	cmp.w	fp, #0
 80159b4:	d020      	beq.n	80159f8 <rcl_node_init+0x19c>
 80159b6:	a806      	add	r0, sp, #24
 80159b8:	f003 fc12 	bl	80191e0 <rcl_get_zero_initialized_guard_condition>
 80159bc:	a806      	add	r0, sp, #24
 80159be:	c803      	ldmia	r0, {r0, r1}
 80159c0:	6863      	ldr	r3, [r4, #4]
 80159c2:	46c4      	mov	ip, r8
 80159c4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 80159c8:	e88b 0003 	stmia.w	fp, {r0, r1}
 80159cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80159d0:	ae23      	add	r6, sp, #140	; 0x8c
 80159d2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80159d4:	f8dc 3000 	ldr.w	r3, [ip]
 80159d8:	6033      	str	r3, [r6, #0]
 80159da:	ab28      	add	r3, sp, #160	; 0xa0
 80159dc:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 80159e0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80159e4:	4649      	mov	r1, r9
 80159e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80159e8:	463a      	mov	r2, r7
 80159ea:	4670      	mov	r0, lr
 80159ec:	f003 fc02 	bl	80191f4 <rcl_guard_condition_init_from_rmw>
 80159f0:	4681      	mov	r9, r0
 80159f2:	b328      	cbz	r0, 8015a40 <rcl_node_init+0x1e4>
 80159f4:	6863      	ldr	r3, [r4, #4]
 80159f6:	b1f3      	cbz	r3, 8015a36 <rcl_node_init+0x1da>
 80159f8:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80159fa:	b128      	cbz	r0, 8015a08 <rcl_node_init+0x1ac>
 80159fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015a00:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015a04:	4798      	blx	r3
 8015a06:	6863      	ldr	r3, [r4, #4]
 8015a08:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8015a0a:	b110      	cbz	r0, 8015a12 <rcl_node_init+0x1b6>
 8015a0c:	f001 fb96 	bl	801713c <rmw_destroy_node>
 8015a10:	6863      	ldr	r3, [r4, #4]
 8015a12:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8015a14:	b148      	cbz	r0, 8015a2a <rcl_node_init+0x1ce>
 8015a16:	f003 fc4d 	bl	80192b4 <rcl_guard_condition_fini>
 8015a1a:	6863      	ldr	r3, [r4, #4]
 8015a1c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015a20:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8015a22:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015a26:	4798      	blx	r3
 8015a28:	6863      	ldr	r3, [r4, #4]
 8015a2a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015a34:	4798      	blx	r3
 8015a36:	2300      	movs	r3, #0
 8015a38:	e9c4 3300 	strd	r3, r3, [r4]
 8015a3c:	f04f 0901 	mov.w	r9, #1
 8015a40:	f1ba 0f00 	cmp.w	sl, #0
 8015a44:	d125      	bne.n	8015a92 <rcl_node_init+0x236>
 8015a46:	e001      	b.n	8015a4c <rcl_node_init+0x1f0>
 8015a48:	f04f 090b 	mov.w	r9, #11
 8015a4c:	4648      	mov	r0, r9
 8015a4e:	b029      	add	sp, #164	; 0xa4
 8015a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a54:	f04f 0965 	mov.w	r9, #101	; 0x65
 8015a58:	e7f8      	b.n	8015a4c <rcl_node_init+0x1f0>
 8015a5a:	782b      	ldrb	r3, [r5, #0]
 8015a5c:	2b2f      	cmp	r3, #47	; 0x2f
 8015a5e:	f43f af42 	beq.w	80158e6 <rcl_node_init+0x8a>
 8015a62:	9503      	str	r5, [sp, #12]
 8015a64:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015a68:	9300      	str	r3, [sp, #0]
 8015a6a:	4b1e      	ldr	r3, [pc, #120]	; (8015ae4 <rcl_node_init+0x288>)
 8015a6c:	9302      	str	r3, [sp, #8]
 8015a6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015a72:	9301      	str	r3, [sp, #4]
 8015a74:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8015a78:	f000 fb86 	bl	8016188 <rcutils_format_string_limit>
 8015a7c:	4605      	mov	r5, r0
 8015a7e:	b340      	cbz	r0, 8015ad2 <rcl_node_init+0x276>
 8015a80:	2200      	movs	r2, #0
 8015a82:	a922      	add	r1, sp, #136	; 0x88
 8015a84:	9222      	str	r2, [sp, #136]	; 0x88
 8015a86:	f000 ff3b 	bl	8016900 <rmw_validate_namespace>
 8015a8a:	4681      	mov	r9, r0
 8015a8c:	2800      	cmp	r0, #0
 8015a8e:	f43f af34 	beq.w	80158fa <rcl_node_init+0x9e>
 8015a92:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015a96:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015a9a:	4628      	mov	r0, r5
 8015a9c:	4798      	blx	r3
 8015a9e:	e7d5      	b.n	8015a4c <rcl_node_init+0x1f0>
 8015aa0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8015aa4:	4648      	mov	r0, r9
 8015aa6:	b029      	add	sp, #164	; 0xa4
 8015aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015aac:	f04f 090a 	mov.w	r9, #10
 8015ab0:	f1ba 0f00 	cmp.w	sl, #0
 8015ab4:	d1ed      	bne.n	8015a92 <rcl_node_init+0x236>
 8015ab6:	e7c9      	b.n	8015a4c <rcl_node_init+0x1f0>
 8015ab8:	f000 ff92 	bl	80169e0 <rmw_node_name_validation_result_string>
 8015abc:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 8015ac0:	e7c4      	b.n	8015a4c <rcl_node_init+0x1f0>
 8015ac2:	f000 ff2f 	bl	8016924 <rmw_namespace_validation_result_string>
 8015ac6:	f04f 09ca 	mov.w	r9, #202	; 0xca
 8015aca:	f1ba 0f00 	cmp.w	sl, #0
 8015ace:	d1e0      	bne.n	8015a92 <rcl_node_init+0x236>
 8015ad0:	e7bc      	b.n	8015a4c <rcl_node_init+0x1f0>
 8015ad2:	f04f 090a 	mov.w	r9, #10
 8015ad6:	e7b9      	b.n	8015a4c <rcl_node_init+0x1f0>
 8015ad8:	0801ba1c 	.word	0x0801ba1c
 8015adc:	0801b4a4 	.word	0x0801b4a4
 8015ae0:	0801ba24 	.word	0x0801ba24
 8015ae4:	0801ba20 	.word	0x0801ba20

08015ae8 <rcl_node_is_valid>:
 8015ae8:	b130      	cbz	r0, 8015af8 <rcl_node_is_valid+0x10>
 8015aea:	6843      	ldr	r3, [r0, #4]
 8015aec:	b123      	cbz	r3, 8015af8 <rcl_node_is_valid+0x10>
 8015aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015af0:	b113      	cbz	r3, 8015af8 <rcl_node_is_valid+0x10>
 8015af2:	6800      	ldr	r0, [r0, #0]
 8015af4:	f7ff bc1e 	b.w	8015334 <rcl_context_is_valid>
 8015af8:	2000      	movs	r0, #0
 8015afa:	4770      	bx	lr

08015afc <rcl_node_get_name>:
 8015afc:	b120      	cbz	r0, 8015b08 <rcl_node_get_name+0xc>
 8015afe:	6840      	ldr	r0, [r0, #4]
 8015b00:	b110      	cbz	r0, 8015b08 <rcl_node_get_name+0xc>
 8015b02:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8015b04:	b100      	cbz	r0, 8015b08 <rcl_node_get_name+0xc>
 8015b06:	6880      	ldr	r0, [r0, #8]
 8015b08:	4770      	bx	lr
 8015b0a:	bf00      	nop

08015b0c <rcl_node_get_namespace>:
 8015b0c:	b120      	cbz	r0, 8015b18 <rcl_node_get_namespace+0xc>
 8015b0e:	6840      	ldr	r0, [r0, #4]
 8015b10:	b110      	cbz	r0, 8015b18 <rcl_node_get_namespace+0xc>
 8015b12:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8015b14:	b100      	cbz	r0, 8015b18 <rcl_node_get_namespace+0xc>
 8015b16:	68c0      	ldr	r0, [r0, #12]
 8015b18:	4770      	bx	lr
 8015b1a:	bf00      	nop

08015b1c <rcl_node_get_options>:
 8015b1c:	b128      	cbz	r0, 8015b2a <rcl_node_get_options+0xe>
 8015b1e:	6840      	ldr	r0, [r0, #4]
 8015b20:	b118      	cbz	r0, 8015b2a <rcl_node_get_options+0xe>
 8015b22:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	bf08      	it	eq
 8015b28:	2000      	moveq	r0, #0
 8015b2a:	4770      	bx	lr

08015b2c <rcl_node_get_rmw_handle>:
 8015b2c:	b110      	cbz	r0, 8015b34 <rcl_node_get_rmw_handle+0x8>
 8015b2e:	6840      	ldr	r0, [r0, #4]
 8015b30:	b100      	cbz	r0, 8015b34 <rcl_node_get_rmw_handle+0x8>
 8015b32:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8015b34:	4770      	bx	lr
 8015b36:	bf00      	nop

08015b38 <rcl_node_get_default_options>:
 8015b38:	b510      	push	{r4, lr}
 8015b3a:	2268      	movs	r2, #104	; 0x68
 8015b3c:	4604      	mov	r4, r0
 8015b3e:	2100      	movs	r1, #0
 8015b40:	f004 f892 	bl	8019c68 <memset>
 8015b44:	4620      	mov	r0, r4
 8015b46:	f7fa fa49 	bl	800ffdc <rcutils_get_default_allocator>
 8015b4a:	2301      	movs	r3, #1
 8015b4c:	7523      	strb	r3, [r4, #20]
 8015b4e:	4620      	mov	r0, r4
 8015b50:	bd10      	pop	{r4, pc}
 8015b52:	bf00      	nop

08015b54 <rcl_node_options_copy>:
 8015b54:	b1d0      	cbz	r0, 8015b8c <rcl_node_options_copy+0x38>
 8015b56:	b570      	push	{r4, r5, r6, lr}
 8015b58:	460c      	mov	r4, r1
 8015b5a:	b1a9      	cbz	r1, 8015b88 <rcl_node_options_copy+0x34>
 8015b5c:	4288      	cmp	r0, r1
 8015b5e:	4684      	mov	ip, r0
 8015b60:	d012      	beq.n	8015b88 <rcl_node_options_copy+0x34>
 8015b62:	4605      	mov	r5, r0
 8015b64:	8a86      	ldrh	r6, [r0, #20]
 8015b66:	468e      	mov	lr, r1
 8015b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015b6a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015b6e:	682b      	ldr	r3, [r5, #0]
 8015b70:	f8ce 3000 	str.w	r3, [lr]
 8015b74:	f10c 0118 	add.w	r1, ip, #24
 8015b78:	2250      	movs	r2, #80	; 0x50
 8015b7a:	82a6      	strh	r6, [r4, #20]
 8015b7c:	f104 0018 	add.w	r0, r4, #24
 8015b80:	f004 f864 	bl	8019c4c <memcpy>
 8015b84:	2000      	movs	r0, #0
 8015b86:	bd70      	pop	{r4, r5, r6, pc}
 8015b88:	200b      	movs	r0, #11
 8015b8a:	bd70      	pop	{r4, r5, r6, pc}
 8015b8c:	200b      	movs	r0, #11
 8015b8e:	4770      	bx	lr

08015b90 <rcl_node_resolve_name>:
 8015b90:	b082      	sub	sp, #8
 8015b92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b96:	b091      	sub	sp, #68	; 0x44
 8015b98:	ac1a      	add	r4, sp, #104	; 0x68
 8015b9a:	e884 000c 	stmia.w	r4, {r2, r3}
 8015b9e:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 8015ba2:	2800      	cmp	r0, #0
 8015ba4:	d03b      	beq.n	8015c1e <rcl_node_resolve_name+0x8e>
 8015ba6:	460c      	mov	r4, r1
 8015ba8:	4605      	mov	r5, r0
 8015baa:	f7ff ffb7 	bl	8015b1c <rcl_node_get_options>
 8015bae:	2800      	cmp	r0, #0
 8015bb0:	d037      	beq.n	8015c22 <rcl_node_resolve_name+0x92>
 8015bb2:	4628      	mov	r0, r5
 8015bb4:	f7ff ffa2 	bl	8015afc <rcl_node_get_name>
 8015bb8:	4606      	mov	r6, r0
 8015bba:	4628      	mov	r0, r5
 8015bbc:	f7ff ffa6 	bl	8015b0c <rcl_node_get_namespace>
 8015bc0:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8015bc4:	4681      	mov	r9, r0
 8015bc6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015bca:	ad0b      	add	r5, sp, #44	; 0x2c
 8015bcc:	46ac      	mov	ip, r5
 8015bce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015bd2:	f8de 3000 	ldr.w	r3, [lr]
 8015bd6:	f8cc 3000 	str.w	r3, [ip]
 8015bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015bdc:	b1fb      	cbz	r3, 8015c1e <rcl_node_resolve_name+0x8e>
 8015bde:	468a      	mov	sl, r1
 8015be0:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8015be4:	f000 fc28 	bl	8016438 <rcutils_get_zero_initialized_string_map>
 8015be8:	ab10      	add	r3, sp, #64	; 0x40
 8015bea:	9008      	str	r0, [sp, #32]
 8015bec:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015bf0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015bf4:	2100      	movs	r1, #0
 8015bf6:	e895 000c 	ldmia.w	r5, {r2, r3}
 8015bfa:	a808      	add	r0, sp, #32
 8015bfc:	f000 fc94 	bl	8016528 <rcutils_string_map_init>
 8015c00:	4607      	mov	r7, r0
 8015c02:	b180      	cbz	r0, 8015c26 <rcl_node_resolve_name+0x96>
 8015c04:	f7fa fa06 	bl	8010014 <rcutils_get_error_string>
 8015c08:	f7fa fa1a 	bl	8010040 <rcutils_reset_error>
 8015c0c:	2f0a      	cmp	r7, #10
 8015c0e:	bf18      	it	ne
 8015c10:	2701      	movne	r7, #1
 8015c12:	4638      	mov	r0, r7
 8015c14:	b011      	add	sp, #68	; 0x44
 8015c16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c1a:	b002      	add	sp, #8
 8015c1c:	4770      	bx	lr
 8015c1e:	270b      	movs	r7, #11
 8015c20:	e7f7      	b.n	8015c12 <rcl_node_resolve_name+0x82>
 8015c22:	2701      	movs	r7, #1
 8015c24:	e7f5      	b.n	8015c12 <rcl_node_resolve_name+0x82>
 8015c26:	9009      	str	r0, [sp, #36]	; 0x24
 8015c28:	9007      	str	r0, [sp, #28]
 8015c2a:	a808      	add	r0, sp, #32
 8015c2c:	f003 fad2 	bl	80191d4 <rcl_get_default_topic_name_substitutions>
 8015c30:	4607      	mov	r7, r0
 8015c32:	b1a8      	cbz	r0, 8015c60 <rcl_node_resolve_name+0xd0>
 8015c34:	280a      	cmp	r0, #10
 8015c36:	9c07      	ldr	r4, [sp, #28]
 8015c38:	d000      	beq.n	8015c3c <rcl_node_resolve_name+0xac>
 8015c3a:	2701      	movs	r7, #1
 8015c3c:	a808      	add	r0, sp, #32
 8015c3e:	f000 fcb3 	bl	80165a8 <rcutils_string_map_fini>
 8015c42:	2800      	cmp	r0, #0
 8015c44:	d13d      	bne.n	8015cc2 <rcl_node_resolve_name+0x132>
 8015c46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c48:	4659      	mov	r1, fp
 8015c4a:	47d0      	blx	sl
 8015c4c:	4659      	mov	r1, fp
 8015c4e:	4620      	mov	r0, r4
 8015c50:	47d0      	blx	sl
 8015c52:	f1b8 0f00 	cmp.w	r8, #0
 8015c56:	d0dc      	beq.n	8015c12 <rcl_node_resolve_name+0x82>
 8015c58:	2f67      	cmp	r7, #103	; 0x67
 8015c5a:	bf08      	it	eq
 8015c5c:	2768      	moveq	r7, #104	; 0x68
 8015c5e:	e7d8      	b.n	8015c12 <rcl_node_resolve_name+0x82>
 8015c60:	ab09      	add	r3, sp, #36	; 0x24
 8015c62:	9305      	str	r3, [sp, #20]
 8015c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015c66:	46ec      	mov	ip, sp
 8015c68:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015c6c:	682b      	ldr	r3, [r5, #0]
 8015c6e:	f8cc 3000 	str.w	r3, [ip]
 8015c72:	464a      	mov	r2, r9
 8015c74:	4631      	mov	r1, r6
 8015c76:	4620      	mov	r0, r4
 8015c78:	ab08      	add	r3, sp, #32
 8015c7a:	f003 f94d 	bl	8018f18 <rcl_expand_topic_name>
 8015c7e:	4607      	mov	r7, r0
 8015c80:	b9b8      	cbnz	r0, 8015cb2 <rcl_node_resolve_name+0x122>
 8015c82:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8015c84:	9009      	str	r0, [sp, #36]	; 0x24
 8015c86:	4602      	mov	r2, r0
 8015c88:	a90a      	add	r1, sp, #40	; 0x28
 8015c8a:	4620      	mov	r0, r4
 8015c8c:	f000 fd74 	bl	8016778 <rmw_validate_full_topic_name>
 8015c90:	b988      	cbnz	r0, 8015cb6 <rcl_node_resolve_name+0x126>
 8015c92:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015c94:	b9d5      	cbnz	r5, 8015ccc <rcl_node_resolve_name+0x13c>
 8015c96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c98:	a808      	add	r0, sp, #32
 8015c9a:	601c      	str	r4, [r3, #0]
 8015c9c:	f000 fc84 	bl	80165a8 <rcutils_string_map_fini>
 8015ca0:	4607      	mov	r7, r0
 8015ca2:	b1a8      	cbz	r0, 8015cd0 <rcl_node_resolve_name+0x140>
 8015ca4:	f7fa f9b6 	bl	8010014 <rcutils_get_error_string>
 8015ca8:	462c      	mov	r4, r5
 8015caa:	f7fa f9c9 	bl	8010040 <rcutils_reset_error>
 8015cae:	2701      	movs	r7, #1
 8015cb0:	e7c9      	b.n	8015c46 <rcl_node_resolve_name+0xb6>
 8015cb2:	9c07      	ldr	r4, [sp, #28]
 8015cb4:	e7c2      	b.n	8015c3c <rcl_node_resolve_name+0xac>
 8015cb6:	f7fa f9ad 	bl	8010014 <rcutils_get_error_string>
 8015cba:	2701      	movs	r7, #1
 8015cbc:	f7fa f9c0 	bl	8010040 <rcutils_reset_error>
 8015cc0:	e7bc      	b.n	8015c3c <rcl_node_resolve_name+0xac>
 8015cc2:	f7fa f9a7 	bl	8010014 <rcutils_get_error_string>
 8015cc6:	f7fa f9bb 	bl	8010040 <rcutils_reset_error>
 8015cca:	e7bc      	b.n	8015c46 <rcl_node_resolve_name+0xb6>
 8015ccc:	2767      	movs	r7, #103	; 0x67
 8015cce:	e7b5      	b.n	8015c3c <rcl_node_resolve_name+0xac>
 8015cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015cd2:	4659      	mov	r1, fp
 8015cd4:	47d0      	blx	sl
 8015cd6:	4659      	mov	r1, fp
 8015cd8:	4638      	mov	r0, r7
 8015cda:	47d0      	blx	sl
 8015cdc:	e799      	b.n	8015c12 <rcl_node_resolve_name+0x82>
 8015cde:	bf00      	nop

08015ce0 <exact_match_lookup>:
 8015ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ce2:	f102 0708 	add.w	r7, r2, #8
 8015ce6:	460b      	mov	r3, r1
 8015ce8:	4614      	mov	r4, r2
 8015cea:	4606      	mov	r6, r0
 8015cec:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015cf0:	b085      	sub	sp, #20
 8015cf2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	4919      	ldr	r1, [pc, #100]	; (8015d60 <exact_match_lookup+0x80>)
 8015cfa:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015cfe:	f000 fa35 	bl	801616c <rcutils_join_path>
 8015d02:	7833      	ldrb	r3, [r6, #0]
 8015d04:	2b2f      	cmp	r3, #47	; 0x2f
 8015d06:	4605      	mov	r5, r0
 8015d08:	d023      	beq.n	8015d52 <exact_match_lookup+0x72>
 8015d0a:	f104 030c 	add.w	r3, r4, #12
 8015d0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015d12:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015d16:	1c70      	adds	r0, r6, #1
 8015d18:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015d1c:	f000 fa2c 	bl	8016178 <rcutils_to_native_path>
 8015d20:	4606      	mov	r6, r0
 8015d22:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015d26:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015d2a:	4631      	mov	r1, r6
 8015d2c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8015d30:	4628      	mov	r0, r5
 8015d32:	f000 fa1b 	bl	801616c <rcutils_join_path>
 8015d36:	6862      	ldr	r2, [r4, #4]
 8015d38:	6921      	ldr	r1, [r4, #16]
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	4630      	mov	r0, r6
 8015d3e:	461e      	mov	r6, r3
 8015d40:	4790      	blx	r2
 8015d42:	4628      	mov	r0, r5
 8015d44:	6863      	ldr	r3, [r4, #4]
 8015d46:	6921      	ldr	r1, [r4, #16]
 8015d48:	4798      	blx	r3
 8015d4a:	4635      	mov	r5, r6
 8015d4c:	4628      	mov	r0, r5
 8015d4e:	b005      	add	sp, #20
 8015d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d52:	7873      	ldrb	r3, [r6, #1]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d1d8      	bne.n	8015d0a <exact_match_lookup+0x2a>
 8015d58:	4628      	mov	r0, r5
 8015d5a:	b005      	add	sp, #20
 8015d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d5e:	bf00      	nop
 8015d60:	0801ba70 	.word	0x0801ba70

08015d64 <rcl_get_secure_root>:
 8015d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d68:	b085      	sub	sp, #20
 8015d6a:	b168      	cbz	r0, 8015d88 <rcl_get_secure_root+0x24>
 8015d6c:	4607      	mov	r7, r0
 8015d6e:	4608      	mov	r0, r1
 8015d70:	460c      	mov	r4, r1
 8015d72:	f7fa f941 	bl	800fff8 <rcutils_allocator_is_valid>
 8015d76:	b138      	cbz	r0, 8015d88 <rcl_get_secure_root+0x24>
 8015d78:	2300      	movs	r3, #0
 8015d7a:	482d      	ldr	r0, [pc, #180]	; (8015e30 <rcl_get_secure_root+0xcc>)
 8015d7c:	9303      	str	r3, [sp, #12]
 8015d7e:	a903      	add	r1, sp, #12
 8015d80:	f000 f9da 	bl	8016138 <rcutils_get_env>
 8015d84:	4605      	mov	r5, r0
 8015d86:	b120      	cbz	r0, 8015d92 <rcl_get_secure_root+0x2e>
 8015d88:	2500      	movs	r5, #0
 8015d8a:	4628      	mov	r0, r5
 8015d8c:	b005      	add	sp, #20
 8015d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d92:	9b03      	ldr	r3, [sp, #12]
 8015d94:	781a      	ldrb	r2, [r3, #0]
 8015d96:	2a00      	cmp	r2, #0
 8015d98:	d0f6      	beq.n	8015d88 <rcl_get_secure_root+0x24>
 8015d9a:	f104 090c 	add.w	r9, r4, #12
 8015d9e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015da2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015da6:	4618      	mov	r0, r3
 8015da8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015dac:	f000 fb06 	bl	80163bc <rcutils_strdup>
 8015db0:	4680      	mov	r8, r0
 8015db2:	2800      	cmp	r0, #0
 8015db4:	d0e8      	beq.n	8015d88 <rcl_get_secure_root+0x24>
 8015db6:	481f      	ldr	r0, [pc, #124]	; (8015e34 <rcl_get_secure_root+0xd0>)
 8015db8:	9503      	str	r5, [sp, #12]
 8015dba:	a903      	add	r1, sp, #12
 8015dbc:	f000 f9bc 	bl	8016138 <rcutils_get_env>
 8015dc0:	b160      	cbz	r0, 8015ddc <rcl_get_secure_root+0x78>
 8015dc2:	2600      	movs	r6, #0
 8015dc4:	6863      	ldr	r3, [r4, #4]
 8015dc6:	6921      	ldr	r1, [r4, #16]
 8015dc8:	4630      	mov	r0, r6
 8015dca:	4798      	blx	r3
 8015dcc:	4640      	mov	r0, r8
 8015dce:	6863      	ldr	r3, [r4, #4]
 8015dd0:	6921      	ldr	r1, [r4, #16]
 8015dd2:	4798      	blx	r3
 8015dd4:	4628      	mov	r0, r5
 8015dd6:	b005      	add	sp, #20
 8015dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ddc:	9b03      	ldr	r3, [sp, #12]
 8015dde:	781e      	ldrb	r6, [r3, #0]
 8015de0:	b1f6      	cbz	r6, 8015e20 <rcl_get_secure_root+0xbc>
 8015de2:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015de6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015dea:	4618      	mov	r0, r3
 8015dec:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015df0:	f000 fae4 	bl	80163bc <rcutils_strdup>
 8015df4:	4606      	mov	r6, r0
 8015df6:	2800      	cmp	r0, #0
 8015df8:	d0e3      	beq.n	8015dc2 <rcl_get_secure_root+0x5e>
 8015dfa:	4622      	mov	r2, r4
 8015dfc:	4641      	mov	r1, r8
 8015dfe:	f7ff ff6f 	bl	8015ce0 <exact_match_lookup>
 8015e02:	4605      	mov	r5, r0
 8015e04:	2d00      	cmp	r5, #0
 8015e06:	d0dd      	beq.n	8015dc4 <rcl_get_secure_root+0x60>
 8015e08:	4628      	mov	r0, r5
 8015e0a:	f000 f9ad 	bl	8016168 <rcutils_is_directory>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	2800      	cmp	r0, #0
 8015e12:	d1d7      	bne.n	8015dc4 <rcl_get_secure_root+0x60>
 8015e14:	4628      	mov	r0, r5
 8015e16:	6921      	ldr	r1, [r4, #16]
 8015e18:	461d      	mov	r5, r3
 8015e1a:	6863      	ldr	r3, [r4, #4]
 8015e1c:	4798      	blx	r3
 8015e1e:	e7d1      	b.n	8015dc4 <rcl_get_secure_root+0x60>
 8015e20:	4622      	mov	r2, r4
 8015e22:	4638      	mov	r0, r7
 8015e24:	4641      	mov	r1, r8
 8015e26:	f7ff ff5b 	bl	8015ce0 <exact_match_lookup>
 8015e2a:	4605      	mov	r5, r0
 8015e2c:	e7ea      	b.n	8015e04 <rcl_get_secure_root+0xa0>
 8015e2e:	bf00      	nop
 8015e30:	0801ba7c 	.word	0x0801ba7c
 8015e34:	0801ba94 	.word	0x0801ba94

08015e38 <rcl_get_security_options_from_environment>:
 8015e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e3c:	b082      	sub	sp, #8
 8015e3e:	2300      	movs	r3, #0
 8015e40:	4606      	mov	r6, r0
 8015e42:	460f      	mov	r7, r1
 8015e44:	4820      	ldr	r0, [pc, #128]	; (8015ec8 <rcl_get_security_options_from_environment+0x90>)
 8015e46:	9301      	str	r3, [sp, #4]
 8015e48:	a901      	add	r1, sp, #4
 8015e4a:	4690      	mov	r8, r2
 8015e4c:	f000 f974 	bl	8016138 <rcutils_get_env>
 8015e50:	b120      	cbz	r0, 8015e5c <rcl_get_security_options_from_environment+0x24>
 8015e52:	2501      	movs	r5, #1
 8015e54:	4628      	mov	r0, r5
 8015e56:	b002      	add	sp, #8
 8015e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e5c:	491b      	ldr	r1, [pc, #108]	; (8015ecc <rcl_get_security_options_from_environment+0x94>)
 8015e5e:	4604      	mov	r4, r0
 8015e60:	9801      	ldr	r0, [sp, #4]
 8015e62:	f7ea f9b5 	bl	80001d0 <strcmp>
 8015e66:	4605      	mov	r5, r0
 8015e68:	b9e8      	cbnz	r0, 8015ea6 <rcl_get_security_options_from_environment+0x6e>
 8015e6a:	9001      	str	r0, [sp, #4]
 8015e6c:	f1b8 0f00 	cmp.w	r8, #0
 8015e70:	d020      	beq.n	8015eb4 <rcl_get_security_options_from_environment+0x7c>
 8015e72:	4817      	ldr	r0, [pc, #92]	; (8015ed0 <rcl_get_security_options_from_environment+0x98>)
 8015e74:	a901      	add	r1, sp, #4
 8015e76:	f000 f95f 	bl	8016138 <rcutils_get_env>
 8015e7a:	2800      	cmp	r0, #0
 8015e7c:	d1e9      	bne.n	8015e52 <rcl_get_security_options_from_environment+0x1a>
 8015e7e:	4915      	ldr	r1, [pc, #84]	; (8015ed4 <rcl_get_security_options_from_environment+0x9c>)
 8015e80:	9801      	ldr	r0, [sp, #4]
 8015e82:	f7ea f9a5 	bl	80001d0 <strcmp>
 8015e86:	fab0 f080 	clz	r0, r0
 8015e8a:	0940      	lsrs	r0, r0, #5
 8015e8c:	f888 0000 	strb.w	r0, [r8]
 8015e90:	4639      	mov	r1, r7
 8015e92:	4630      	mov	r0, r6
 8015e94:	f7ff ff66 	bl	8015d64 <rcl_get_secure_root>
 8015e98:	b170      	cbz	r0, 8015eb8 <rcl_get_security_options_from_environment+0x80>
 8015e9a:	f8c8 0004 	str.w	r0, [r8, #4]
 8015e9e:	4628      	mov	r0, r5
 8015ea0:	b002      	add	sp, #8
 8015ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ea6:	4625      	mov	r5, r4
 8015ea8:	4628      	mov	r0, r5
 8015eaa:	f888 4000 	strb.w	r4, [r8]
 8015eae:	b002      	add	sp, #8
 8015eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015eb4:	250b      	movs	r5, #11
 8015eb6:	e7cd      	b.n	8015e54 <rcl_get_security_options_from_environment+0x1c>
 8015eb8:	f898 5000 	ldrb.w	r5, [r8]
 8015ebc:	f1a5 0501 	sub.w	r5, r5, #1
 8015ec0:	fab5 f585 	clz	r5, r5
 8015ec4:	096d      	lsrs	r5, r5, #5
 8015ec6:	e7c5      	b.n	8015e54 <rcl_get_security_options_from_environment+0x1c>
 8015ec8:	0801ba34 	.word	0x0801ba34
 8015ecc:	0801ba48 	.word	0x0801ba48
 8015ed0:	0801ba50 	.word	0x0801ba50
 8015ed4:	0801ba68 	.word	0x0801ba68

08015ed8 <rcl_get_system_time>:
 8015ed8:	4608      	mov	r0, r1
 8015eda:	f000 bbd9 	b.w	8016690 <rcutils_system_time_now>
 8015ede:	bf00      	nop

08015ee0 <rcl_get_steady_time>:
 8015ee0:	4608      	mov	r0, r1
 8015ee2:	f000 bbfd 	b.w	80166e0 <rcutils_steady_time_now>
 8015ee6:	bf00      	nop

08015ee8 <rcl_get_ros_time>:
 8015ee8:	7a03      	ldrb	r3, [r0, #8]
 8015eea:	b510      	push	{r4, lr}
 8015eec:	460c      	mov	r4, r1
 8015eee:	b133      	cbz	r3, 8015efe <rcl_get_ros_time+0x16>
 8015ef0:	2105      	movs	r1, #5
 8015ef2:	f000 f8eb 	bl	80160cc <__atomic_load_8>
 8015ef6:	e9c4 0100 	strd	r0, r1, [r4]
 8015efa:	2000      	movs	r0, #0
 8015efc:	bd10      	pop	{r4, pc}
 8015efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015f02:	4608      	mov	r0, r1
 8015f04:	f000 bbc4 	b.w	8016690 <rcutils_system_time_now>

08015f08 <rcl_clock_init>:
 8015f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f0a:	4605      	mov	r5, r0
 8015f0c:	4610      	mov	r0, r2
 8015f0e:	4614      	mov	r4, r2
 8015f10:	460e      	mov	r6, r1
 8015f12:	f7fa f871 	bl	800fff8 <rcutils_allocator_is_valid>
 8015f16:	b128      	cbz	r0, 8015f24 <rcl_clock_init+0x1c>
 8015f18:	2d03      	cmp	r5, #3
 8015f1a:	d803      	bhi.n	8015f24 <rcl_clock_init+0x1c>
 8015f1c:	e8df f005 	tbb	[pc, r5]
 8015f20:	06532e1d 	.word	0x06532e1d
 8015f24:	f04f 0c0b 	mov.w	ip, #11
 8015f28:	4660      	mov	r0, ip
 8015f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f2c:	2e00      	cmp	r6, #0
 8015f2e:	d0f9      	beq.n	8015f24 <rcl_clock_init+0x1c>
 8015f30:	2c00      	cmp	r4, #0
 8015f32:	d0f7      	beq.n	8015f24 <rcl_clock_init+0x1c>
 8015f34:	2300      	movs	r3, #0
 8015f36:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015f3a:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8015ff0 <rcl_clock_init+0xe8>
 8015f3e:	6133      	str	r3, [r6, #16]
 8015f40:	f106 0514 	add.w	r5, r6, #20
 8015f44:	469c      	mov	ip, r3
 8015f46:	2703      	movs	r7, #3
 8015f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015f4c:	6823      	ldr	r3, [r4, #0]
 8015f4e:	602b      	str	r3, [r5, #0]
 8015f50:	7037      	strb	r7, [r6, #0]
 8015f52:	f8c6 e00c 	str.w	lr, [r6, #12]
 8015f56:	4660      	mov	r0, ip
 8015f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f5a:	2e00      	cmp	r6, #0
 8015f5c:	d0e2      	beq.n	8015f24 <rcl_clock_init+0x1c>
 8015f5e:	2300      	movs	r3, #0
 8015f60:	7033      	strb	r3, [r6, #0]
 8015f62:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015f66:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8015f6a:	469c      	mov	ip, r3
 8015f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f6e:	f106 0514 	add.w	r5, r6, #20
 8015f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015f74:	6823      	ldr	r3, [r4, #0]
 8015f76:	602b      	str	r3, [r5, #0]
 8015f78:	4660      	mov	r0, ip
 8015f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f7c:	2e00      	cmp	r6, #0
 8015f7e:	d0d1      	beq.n	8015f24 <rcl_clock_init+0x1c>
 8015f80:	2c00      	cmp	r4, #0
 8015f82:	d0cf      	beq.n	8015f24 <rcl_clock_init+0x1c>
 8015f84:	2700      	movs	r7, #0
 8015f86:	7037      	strb	r7, [r6, #0]
 8015f88:	46a4      	mov	ip, r4
 8015f8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015f8e:	f106 0514 	add.w	r5, r6, #20
 8015f92:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8015f96:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8015f9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015f9c:	f8dc 3000 	ldr.w	r3, [ip]
 8015fa0:	602b      	str	r3, [r5, #0]
 8015fa2:	6921      	ldr	r1, [r4, #16]
 8015fa4:	6823      	ldr	r3, [r4, #0]
 8015fa6:	2010      	movs	r0, #16
 8015fa8:	4798      	blx	r3
 8015faa:	6130      	str	r0, [r6, #16]
 8015fac:	b1d0      	cbz	r0, 8015fe4 <rcl_clock_init+0xdc>
 8015fae:	2200      	movs	r2, #0
 8015fb0:	2300      	movs	r3, #0
 8015fb2:	e9c0 2300 	strd	r2, r3, [r0]
 8015fb6:	2301      	movs	r3, #1
 8015fb8:	7207      	strb	r7, [r0, #8]
 8015fba:	4a0c      	ldr	r2, [pc, #48]	; (8015fec <rcl_clock_init+0xe4>)
 8015fbc:	7033      	strb	r3, [r6, #0]
 8015fbe:	46bc      	mov	ip, r7
 8015fc0:	60f2      	str	r2, [r6, #12]
 8015fc2:	4660      	mov	r0, ip
 8015fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fc6:	2e00      	cmp	r6, #0
 8015fc8:	d0ac      	beq.n	8015f24 <rcl_clock_init+0x1c>
 8015fca:	2c00      	cmp	r4, #0
 8015fcc:	d0aa      	beq.n	8015f24 <rcl_clock_init+0x1c>
 8015fce:	2300      	movs	r3, #0
 8015fd0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015fd4:	f8df e01c 	ldr.w	lr, [pc, #28]	; 8015ff4 <rcl_clock_init+0xec>
 8015fd8:	6133      	str	r3, [r6, #16]
 8015fda:	f106 0514 	add.w	r5, r6, #20
 8015fde:	469c      	mov	ip, r3
 8015fe0:	2702      	movs	r7, #2
 8015fe2:	e7b1      	b.n	8015f48 <rcl_clock_init+0x40>
 8015fe4:	f04f 0c0a 	mov.w	ip, #10
 8015fe8:	e79e      	b.n	8015f28 <rcl_clock_init+0x20>
 8015fea:	bf00      	nop
 8015fec:	08015ee9 	.word	0x08015ee9
 8015ff0:	08015ee1 	.word	0x08015ee1
 8015ff4:	08015ed9 	.word	0x08015ed9

08015ff8 <rcl_validate_enclave_name_with_size>:
 8015ff8:	b378      	cbz	r0, 801605a <rcl_validate_enclave_name_with_size+0x62>
 8015ffa:	b570      	push	{r4, r5, r6, lr}
 8015ffc:	4615      	mov	r5, r2
 8015ffe:	b0c2      	sub	sp, #264	; 0x108
 8016000:	b302      	cbz	r2, 8016044 <rcl_validate_enclave_name_with_size+0x4c>
 8016002:	461e      	mov	r6, r3
 8016004:	466a      	mov	r2, sp
 8016006:	ab01      	add	r3, sp, #4
 8016008:	460c      	mov	r4, r1
 801600a:	f000 fc2b 	bl	8016864 <rmw_validate_namespace_with_size>
 801600e:	4684      	mov	ip, r0
 8016010:	b9e8      	cbnz	r0, 801604e <rcl_validate_enclave_name_with_size+0x56>
 8016012:	9b00      	ldr	r3, [sp, #0]
 8016014:	b923      	cbnz	r3, 8016020 <rcl_validate_enclave_name_with_size+0x28>
 8016016:	2300      	movs	r3, #0
 8016018:	602b      	str	r3, [r5, #0]
 801601a:	4660      	mov	r0, ip
 801601c:	b042      	add	sp, #264	; 0x108
 801601e:	bd70      	pop	{r4, r5, r6, pc}
 8016020:	2b07      	cmp	r3, #7
 8016022:	d007      	beq.n	8016034 <rcl_validate_enclave_name_with_size+0x3c>
 8016024:	1e5a      	subs	r2, r3, #1
 8016026:	2a05      	cmp	r2, #5
 8016028:	d833      	bhi.n	8016092 <rcl_validate_enclave_name_with_size+0x9a>
 801602a:	e8df f002 	tbb	[pc, r2]
 801602e:	2c2f      	.short	0x2c2f
 8016030:	1a232629 	.word	0x1a232629
 8016034:	2cff      	cmp	r4, #255	; 0xff
 8016036:	d9ee      	bls.n	8016016 <rcl_validate_enclave_name_with_size+0x1e>
 8016038:	602b      	str	r3, [r5, #0]
 801603a:	2e00      	cmp	r6, #0
 801603c:	d0ed      	beq.n	801601a <rcl_validate_enclave_name_with_size+0x22>
 801603e:	23fe      	movs	r3, #254	; 0xfe
 8016040:	6033      	str	r3, [r6, #0]
 8016042:	e7ea      	b.n	801601a <rcl_validate_enclave_name_with_size+0x22>
 8016044:	f04f 0c0b 	mov.w	ip, #11
 8016048:	4660      	mov	r0, ip
 801604a:	b042      	add	sp, #264	; 0x108
 801604c:	bd70      	pop	{r4, r5, r6, pc}
 801604e:	f7ff f953 	bl	80152f8 <rcl_convert_rmw_ret_to_rcl_ret>
 8016052:	4684      	mov	ip, r0
 8016054:	4660      	mov	r0, ip
 8016056:	b042      	add	sp, #264	; 0x108
 8016058:	bd70      	pop	{r4, r5, r6, pc}
 801605a:	f04f 0c0b 	mov.w	ip, #11
 801605e:	4660      	mov	r0, ip
 8016060:	4770      	bx	lr
 8016062:	2306      	movs	r3, #6
 8016064:	602b      	str	r3, [r5, #0]
 8016066:	2e00      	cmp	r6, #0
 8016068:	d0d7      	beq.n	801601a <rcl_validate_enclave_name_with_size+0x22>
 801606a:	9b01      	ldr	r3, [sp, #4]
 801606c:	6033      	str	r3, [r6, #0]
 801606e:	4660      	mov	r0, ip
 8016070:	b042      	add	sp, #264	; 0x108
 8016072:	bd70      	pop	{r4, r5, r6, pc}
 8016074:	2305      	movs	r3, #5
 8016076:	602b      	str	r3, [r5, #0]
 8016078:	e7f5      	b.n	8016066 <rcl_validate_enclave_name_with_size+0x6e>
 801607a:	2304      	movs	r3, #4
 801607c:	602b      	str	r3, [r5, #0]
 801607e:	e7f2      	b.n	8016066 <rcl_validate_enclave_name_with_size+0x6e>
 8016080:	2303      	movs	r3, #3
 8016082:	602b      	str	r3, [r5, #0]
 8016084:	e7ef      	b.n	8016066 <rcl_validate_enclave_name_with_size+0x6e>
 8016086:	2302      	movs	r3, #2
 8016088:	602b      	str	r3, [r5, #0]
 801608a:	e7ec      	b.n	8016066 <rcl_validate_enclave_name_with_size+0x6e>
 801608c:	2301      	movs	r3, #1
 801608e:	602b      	str	r3, [r5, #0]
 8016090:	e7e9      	b.n	8016066 <rcl_validate_enclave_name_with_size+0x6e>
 8016092:	4a04      	ldr	r2, [pc, #16]	; (80160a4 <rcl_validate_enclave_name_with_size+0xac>)
 8016094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016098:	a802      	add	r0, sp, #8
 801609a:	f000 f963 	bl	8016364 <rcutils_snprintf>
 801609e:	f04f 0c01 	mov.w	ip, #1
 80160a2:	e7ba      	b.n	801601a <rcl_validate_enclave_name_with_size+0x22>
 80160a4:	0801bab4 	.word	0x0801bab4

080160a8 <rcl_validate_enclave_name>:
 80160a8:	b168      	cbz	r0, 80160c6 <rcl_validate_enclave_name+0x1e>
 80160aa:	b570      	push	{r4, r5, r6, lr}
 80160ac:	460d      	mov	r5, r1
 80160ae:	4616      	mov	r6, r2
 80160b0:	4604      	mov	r4, r0
 80160b2:	f7ea f897 	bl	80001e4 <strlen>
 80160b6:	4633      	mov	r3, r6
 80160b8:	4601      	mov	r1, r0
 80160ba:	462a      	mov	r2, r5
 80160bc:	4620      	mov	r0, r4
 80160be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160c2:	f7ff bf99 	b.w	8015ff8 <rcl_validate_enclave_name_with_size>
 80160c6:	200b      	movs	r0, #11
 80160c8:	4770      	bx	lr
 80160ca:	bf00      	nop

080160cc <__atomic_load_8>:
 80160cc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80160d0:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 80160d4:	4a15      	ldr	r2, [pc, #84]	; (801612c <__atomic_load_8+0x60>)
 80160d6:	4b16      	ldr	r3, [pc, #88]	; (8016130 <__atomic_load_8+0x64>)
 80160d8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80160dc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80160e0:	fb02 f101 	mul.w	r1, r2, r1
 80160e4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80160e8:	fba3 2301 	umull	r2, r3, r3, r1
 80160ec:	091b      	lsrs	r3, r3, #4
 80160ee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80160f2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80160f6:	b4d0      	push	{r4, r6, r7}
 80160f8:	4c0e      	ldr	r4, [pc, #56]	; (8016134 <__atomic_load_8+0x68>)
 80160fa:	1ac9      	subs	r1, r1, r3
 80160fc:	1862      	adds	r2, r4, r1
 80160fe:	f04f 0c01 	mov.w	ip, #1
 8016102:	e8d2 3f4f 	ldrexb	r3, [r2]
 8016106:	e8c2 cf46 	strexb	r6, ip, [r2]
 801610a:	2e00      	cmp	r6, #0
 801610c:	d1f9      	bne.n	8016102 <__atomic_load_8+0x36>
 801610e:	f3bf 8f5b 	dmb	ish
 8016112:	b2db      	uxtb	r3, r3
 8016114:	2b00      	cmp	r3, #0
 8016116:	d1f4      	bne.n	8016102 <__atomic_load_8+0x36>
 8016118:	e9d0 6700 	ldrd	r6, r7, [r0]
 801611c:	f3bf 8f5b 	dmb	ish
 8016120:	5463      	strb	r3, [r4, r1]
 8016122:	4630      	mov	r0, r6
 8016124:	4639      	mov	r1, r7
 8016126:	bcd0      	pop	{r4, r6, r7}
 8016128:	4770      	bx	lr
 801612a:	bf00      	nop
 801612c:	27d4eb2d 	.word	0x27d4eb2d
 8016130:	b21642c9 	.word	0xb21642c9
 8016134:	20015710 	.word	0x20015710

08016138 <rcutils_get_env>:
 8016138:	b168      	cbz	r0, 8016156 <rcutils_get_env+0x1e>
 801613a:	b510      	push	{r4, lr}
 801613c:	460c      	mov	r4, r1
 801613e:	b129      	cbz	r1, 801614c <rcutils_get_env+0x14>
 8016140:	f003 fd04 	bl	8019b4c <getenv>
 8016144:	b120      	cbz	r0, 8016150 <rcutils_get_env+0x18>
 8016146:	6020      	str	r0, [r4, #0]
 8016148:	2000      	movs	r0, #0
 801614a:	bd10      	pop	{r4, pc}
 801614c:	4803      	ldr	r0, [pc, #12]	; (801615c <rcutils_get_env+0x24>)
 801614e:	bd10      	pop	{r4, pc}
 8016150:	4b03      	ldr	r3, [pc, #12]	; (8016160 <rcutils_get_env+0x28>)
 8016152:	6023      	str	r3, [r4, #0]
 8016154:	bd10      	pop	{r4, pc}
 8016156:	4803      	ldr	r0, [pc, #12]	; (8016164 <rcutils_get_env+0x2c>)
 8016158:	4770      	bx	lr
 801615a:	bf00      	nop
 801615c:	0801bb30 	.word	0x0801bb30
 8016160:	0801c120 	.word	0x0801c120
 8016164:	0801bb14 	.word	0x0801bb14

08016168 <rcutils_is_directory>:
 8016168:	2000      	movs	r0, #0
 801616a:	4770      	bx	lr

0801616c <rcutils_join_path>:
 801616c:	b082      	sub	sp, #8
 801616e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8016172:	2000      	movs	r0, #0
 8016174:	b002      	add	sp, #8
 8016176:	4770      	bx	lr

08016178 <rcutils_to_native_path>:
 8016178:	b084      	sub	sp, #16
 801617a:	a801      	add	r0, sp, #4
 801617c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016180:	b004      	add	sp, #16
 8016182:	2000      	movs	r0, #0
 8016184:	4770      	bx	lr
 8016186:	bf00      	nop

08016188 <rcutils_format_string_limit>:
 8016188:	b40f      	push	{r0, r1, r2, r3}
 801618a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801618c:	b083      	sub	sp, #12
 801618e:	ac08      	add	r4, sp, #32
 8016190:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016192:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016196:	b34e      	cbz	r6, 80161ec <rcutils_format_string_limit+0x64>
 8016198:	a808      	add	r0, sp, #32
 801619a:	f7f9 ff2d 	bl	800fff8 <rcutils_allocator_is_valid>
 801619e:	b328      	cbz	r0, 80161ec <rcutils_format_string_limit+0x64>
 80161a0:	2100      	movs	r1, #0
 80161a2:	ab0f      	add	r3, sp, #60	; 0x3c
 80161a4:	4632      	mov	r2, r6
 80161a6:	4608      	mov	r0, r1
 80161a8:	e9cd 3300 	strd	r3, r3, [sp]
 80161ac:	f000 f8f4 	bl	8016398 <rcutils_vsnprintf>
 80161b0:	1c43      	adds	r3, r0, #1
 80161b2:	4605      	mov	r5, r0
 80161b4:	d01a      	beq.n	80161ec <rcutils_format_string_limit+0x64>
 80161b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161b8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80161ba:	1c47      	adds	r7, r0, #1
 80161bc:	429f      	cmp	r7, r3
 80161be:	bf84      	itt	hi
 80161c0:	461f      	movhi	r7, r3
 80161c2:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 80161c6:	4638      	mov	r0, r7
 80161c8:	9b08      	ldr	r3, [sp, #32]
 80161ca:	4798      	blx	r3
 80161cc:	4604      	mov	r4, r0
 80161ce:	b168      	cbz	r0, 80161ec <rcutils_format_string_limit+0x64>
 80161d0:	9b01      	ldr	r3, [sp, #4]
 80161d2:	4632      	mov	r2, r6
 80161d4:	4639      	mov	r1, r7
 80161d6:	f000 f8df 	bl	8016398 <rcutils_vsnprintf>
 80161da:	2800      	cmp	r0, #0
 80161dc:	db02      	blt.n	80161e4 <rcutils_format_string_limit+0x5c>
 80161de:	2300      	movs	r3, #0
 80161e0:	5563      	strb	r3, [r4, r5]
 80161e2:	e004      	b.n	80161ee <rcutils_format_string_limit+0x66>
 80161e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80161e8:	4620      	mov	r0, r4
 80161ea:	4798      	blx	r3
 80161ec:	2400      	movs	r4, #0
 80161ee:	4620      	mov	r0, r4
 80161f0:	b003      	add	sp, #12
 80161f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80161f6:	b004      	add	sp, #16
 80161f8:	4770      	bx	lr
 80161fa:	bf00      	nop

080161fc <rcutils_repl_str>:
 80161fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016200:	ed2d 8b02 	vpush	{d8}
 8016204:	b087      	sub	sp, #28
 8016206:	4680      	mov	r8, r0
 8016208:	4608      	mov	r0, r1
 801620a:	f8cd 8004 	str.w	r8, [sp, #4]
 801620e:	ee08 2a10 	vmov	s16, r2
 8016212:	468a      	mov	sl, r1
 8016214:	4699      	mov	r9, r3
 8016216:	f7e9 ffe5 	bl	80001e4 <strlen>
 801621a:	2600      	movs	r6, #0
 801621c:	4647      	mov	r7, r8
 801621e:	9002      	str	r0, [sp, #8]
 8016220:	46b3      	mov	fp, r6
 8016222:	2510      	movs	r5, #16
 8016224:	46b0      	mov	r8, r6
 8016226:	e01d      	b.n	8016264 <rcutils_repl_str+0x68>
 8016228:	f10b 0b01 	add.w	fp, fp, #1
 801622c:	455e      	cmp	r6, fp
 801622e:	d211      	bcs.n	8016254 <rcutils_repl_str+0x58>
 8016230:	442e      	add	r6, r5
 8016232:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016236:	f8d9 2010 	ldr.w	r2, [r9, #16]
 801623a:	00b1      	lsls	r1, r6, #2
 801623c:	4798      	blx	r3
 801623e:	2800      	cmp	r0, #0
 8016240:	f000 8088 	beq.w	8016354 <rcutils_repl_str+0x158>
 8016244:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016248:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801624c:	4680      	mov	r8, r0
 801624e:	bf28      	it	cs
 8016250:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8016254:	9a01      	ldr	r2, [sp, #4]
 8016256:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 801625a:	1aa2      	subs	r2, r4, r2
 801625c:	f843 2c04 	str.w	r2, [r3, #-4]
 8016260:	9b02      	ldr	r3, [sp, #8]
 8016262:	18e7      	adds	r7, r4, r3
 8016264:	4651      	mov	r1, sl
 8016266:	4638      	mov	r0, r7
 8016268:	f003 ffa2 	bl	801a1b0 <strstr>
 801626c:	4604      	mov	r4, r0
 801626e:	4640      	mov	r0, r8
 8016270:	2c00      	cmp	r4, #0
 8016272:	d1d9      	bne.n	8016228 <rcutils_repl_str+0x2c>
 8016274:	46b8      	mov	r8, r7
 8016276:	4607      	mov	r7, r0
 8016278:	4640      	mov	r0, r8
 801627a:	f7e9 ffb3 	bl	80001e4 <strlen>
 801627e:	9b01      	ldr	r3, [sp, #4]
 8016280:	eba8 0303 	sub.w	r3, r8, r3
 8016284:	181c      	adds	r4, r3, r0
 8016286:	9404      	str	r4, [sp, #16]
 8016288:	f1bb 0f00 	cmp.w	fp, #0
 801628c:	d04a      	beq.n	8016324 <rcutils_repl_str+0x128>
 801628e:	ee18 0a10 	vmov	r0, s16
 8016292:	f7e9 ffa7 	bl	80001e4 <strlen>
 8016296:	9b02      	ldr	r3, [sp, #8]
 8016298:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801629c:	1ac3      	subs	r3, r0, r3
 801629e:	fb0b 4303 	mla	r3, fp, r3, r4
 80162a2:	461a      	mov	r2, r3
 80162a4:	9305      	str	r3, [sp, #20]
 80162a6:	4606      	mov	r6, r0
 80162a8:	f8d9 3000 	ldr.w	r3, [r9]
 80162ac:	1c50      	adds	r0, r2, #1
 80162ae:	4798      	blx	r3
 80162b0:	9003      	str	r0, [sp, #12]
 80162b2:	2800      	cmp	r0, #0
 80162b4:	d04f      	beq.n	8016356 <rcutils_repl_str+0x15a>
 80162b6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80162ba:	683a      	ldr	r2, [r7, #0]
 80162bc:	4641      	mov	r1, r8
 80162be:	f003 fcc5 	bl	8019c4c <memcpy>
 80162c2:	683d      	ldr	r5, [r7, #0]
 80162c4:	9b03      	ldr	r3, [sp, #12]
 80162c6:	9701      	str	r7, [sp, #4]
 80162c8:	46ba      	mov	sl, r7
 80162ca:	441d      	add	r5, r3
 80162cc:	9f02      	ldr	r7, [sp, #8]
 80162ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80162d2:	2401      	movs	r4, #1
 80162d4:	46d1      	mov	r9, sl
 80162d6:	ee18 aa10 	vmov	sl, s16
 80162da:	e00a      	b.n	80162f2 <rcutils_repl_str+0xf6>
 80162dc:	f8d9 5000 	ldr.w	r5, [r9]
 80162e0:	1aaa      	subs	r2, r5, r2
 80162e2:	1885      	adds	r5, r0, r2
 80162e4:	f003 fcb2 	bl	8019c4c <memcpy>
 80162e8:	45a3      	cmp	fp, r4
 80162ea:	f104 0201 	add.w	r2, r4, #1
 80162ee:	d935      	bls.n	801635c <rcutils_repl_str+0x160>
 80162f0:	4614      	mov	r4, r2
 80162f2:	4632      	mov	r2, r6
 80162f4:	4651      	mov	r1, sl
 80162f6:	4628      	mov	r0, r5
 80162f8:	f003 fca8 	bl	8019c4c <memcpy>
 80162fc:	f859 2b04 	ldr.w	r2, [r9], #4
 8016300:	45a3      	cmp	fp, r4
 8016302:	443a      	add	r2, r7
 8016304:	eb05 0006 	add.w	r0, r5, r6
 8016308:	eb08 0102 	add.w	r1, r8, r2
 801630c:	d1e6      	bne.n	80162dc <rcutils_repl_str+0xe0>
 801630e:	9b04      	ldr	r3, [sp, #16]
 8016310:	1a9a      	subs	r2, r3, r2
 8016312:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8016316:	f003 fc99 	bl	8019c4c <memcpy>
 801631a:	9a03      	ldr	r2, [sp, #12]
 801631c:	9905      	ldr	r1, [sp, #20]
 801631e:	2300      	movs	r3, #0
 8016320:	5453      	strb	r3, [r2, r1]
 8016322:	e00b      	b.n	801633c <rcutils_repl_str+0x140>
 8016324:	4620      	mov	r0, r4
 8016326:	f8d9 3000 	ldr.w	r3, [r9]
 801632a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801632e:	3001      	adds	r0, #1
 8016330:	4798      	blx	r3
 8016332:	9003      	str	r0, [sp, #12]
 8016334:	b110      	cbz	r0, 801633c <rcutils_repl_str+0x140>
 8016336:	9901      	ldr	r1, [sp, #4]
 8016338:	f003 ff1e 	bl	801a178 <strcpy>
 801633c:	4638      	mov	r0, r7
 801633e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016342:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016346:	4798      	blx	r3
 8016348:	9803      	ldr	r0, [sp, #12]
 801634a:	b007      	add	sp, #28
 801634c:	ecbd 8b02 	vpop	{d8}
 8016350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016354:	4647      	mov	r7, r8
 8016356:	2300      	movs	r3, #0
 8016358:	9303      	str	r3, [sp, #12]
 801635a:	e7ef      	b.n	801633c <rcutils_repl_str+0x140>
 801635c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8016360:	e7db      	b.n	801631a <rcutils_repl_str+0x11e>
 8016362:	bf00      	nop

08016364 <rcutils_snprintf>:
 8016364:	b40c      	push	{r2, r3}
 8016366:	b530      	push	{r4, r5, lr}
 8016368:	b083      	sub	sp, #12
 801636a:	ab06      	add	r3, sp, #24
 801636c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016370:	9301      	str	r3, [sp, #4]
 8016372:	b152      	cbz	r2, 801638a <rcutils_snprintf+0x26>
 8016374:	b138      	cbz	r0, 8016386 <rcutils_snprintf+0x22>
 8016376:	b141      	cbz	r1, 801638a <rcutils_snprintf+0x26>
 8016378:	f003 ffd8 	bl	801a32c <vsniprintf>
 801637c:	b003      	add	sp, #12
 801637e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016382:	b002      	add	sp, #8
 8016384:	4770      	bx	lr
 8016386:	2900      	cmp	r1, #0
 8016388:	d0f6      	beq.n	8016378 <rcutils_snprintf+0x14>
 801638a:	f003 fa61 	bl	8019850 <__errno>
 801638e:	2316      	movs	r3, #22
 8016390:	6003      	str	r3, [r0, #0]
 8016392:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016396:	e7f1      	b.n	801637c <rcutils_snprintf+0x18>

08016398 <rcutils_vsnprintf>:
 8016398:	b570      	push	{r4, r5, r6, lr}
 801639a:	b13a      	cbz	r2, 80163ac <rcutils_vsnprintf+0x14>
 801639c:	b120      	cbz	r0, 80163a8 <rcutils_vsnprintf+0x10>
 801639e:	b129      	cbz	r1, 80163ac <rcutils_vsnprintf+0x14>
 80163a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163a4:	f003 bfc2 	b.w	801a32c <vsniprintf>
 80163a8:	2900      	cmp	r1, #0
 80163aa:	d0f9      	beq.n	80163a0 <rcutils_vsnprintf+0x8>
 80163ac:	f003 fa50 	bl	8019850 <__errno>
 80163b0:	2316      	movs	r3, #22
 80163b2:	6003      	str	r3, [r0, #0]
 80163b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80163b8:	bd70      	pop	{r4, r5, r6, pc}
 80163ba:	bf00      	nop

080163bc <rcutils_strdup>:
 80163bc:	b084      	sub	sp, #16
 80163be:	b570      	push	{r4, r5, r6, lr}
 80163c0:	b082      	sub	sp, #8
 80163c2:	ac07      	add	r4, sp, #28
 80163c4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80163c8:	4605      	mov	r5, r0
 80163ca:	b1b0      	cbz	r0, 80163fa <rcutils_strdup+0x3e>
 80163cc:	f7e9 ff0a 	bl	80001e4 <strlen>
 80163d0:	1c42      	adds	r2, r0, #1
 80163d2:	9b07      	ldr	r3, [sp, #28]
 80163d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163d6:	9201      	str	r2, [sp, #4]
 80163d8:	4606      	mov	r6, r0
 80163da:	4610      	mov	r0, r2
 80163dc:	4798      	blx	r3
 80163de:	4604      	mov	r4, r0
 80163e0:	b128      	cbz	r0, 80163ee <rcutils_strdup+0x32>
 80163e2:	9a01      	ldr	r2, [sp, #4]
 80163e4:	4629      	mov	r1, r5
 80163e6:	f003 fc31 	bl	8019c4c <memcpy>
 80163ea:	2300      	movs	r3, #0
 80163ec:	55a3      	strb	r3, [r4, r6]
 80163ee:	4620      	mov	r0, r4
 80163f0:	b002      	add	sp, #8
 80163f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163f6:	b004      	add	sp, #16
 80163f8:	4770      	bx	lr
 80163fa:	4604      	mov	r4, r0
 80163fc:	e7f7      	b.n	80163ee <rcutils_strdup+0x32>
 80163fe:	bf00      	nop

08016400 <rcutils_strndup>:
 8016400:	b082      	sub	sp, #8
 8016402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016404:	ac06      	add	r4, sp, #24
 8016406:	e884 000c 	stmia.w	r4, {r2, r3}
 801640a:	4605      	mov	r5, r0
 801640c:	b188      	cbz	r0, 8016432 <rcutils_strndup+0x32>
 801640e:	1c4f      	adds	r7, r1, #1
 8016410:	460e      	mov	r6, r1
 8016412:	4638      	mov	r0, r7
 8016414:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016416:	4790      	blx	r2
 8016418:	4604      	mov	r4, r0
 801641a:	b128      	cbz	r0, 8016428 <rcutils_strndup+0x28>
 801641c:	463a      	mov	r2, r7
 801641e:	4629      	mov	r1, r5
 8016420:	f003 fc14 	bl	8019c4c <memcpy>
 8016424:	2300      	movs	r3, #0
 8016426:	55a3      	strb	r3, [r4, r6]
 8016428:	4620      	mov	r0, r4
 801642a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801642e:	b002      	add	sp, #8
 8016430:	4770      	bx	lr
 8016432:	4604      	mov	r4, r0
 8016434:	e7f8      	b.n	8016428 <rcutils_strndup+0x28>
 8016436:	bf00      	nop

08016438 <rcutils_get_zero_initialized_string_map>:
 8016438:	4b01      	ldr	r3, [pc, #4]	; (8016440 <rcutils_get_zero_initialized_string_map+0x8>)
 801643a:	2000      	movs	r0, #0
 801643c:	6018      	str	r0, [r3, #0]
 801643e:	4770      	bx	lr
 8016440:	20015728 	.word	0x20015728

08016444 <rcutils_string_map_reserve>:
 8016444:	2800      	cmp	r0, #0
 8016446:	d05f      	beq.n	8016508 <rcutils_string_map_reserve+0xc4>
 8016448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801644c:	460c      	mov	r4, r1
 801644e:	6801      	ldr	r1, [r0, #0]
 8016450:	b082      	sub	sp, #8
 8016452:	4605      	mov	r5, r0
 8016454:	b129      	cbz	r1, 8016462 <rcutils_string_map_reserve+0x1e>
 8016456:	68cb      	ldr	r3, [r1, #12]
 8016458:	42a3      	cmp	r3, r4
 801645a:	d906      	bls.n	801646a <rcutils_string_map_reserve+0x26>
 801645c:	461c      	mov	r4, r3
 801645e:	2900      	cmp	r1, #0
 8016460:	d1f9      	bne.n	8016456 <rcutils_string_map_reserve+0x12>
 8016462:	201f      	movs	r0, #31
 8016464:	b002      	add	sp, #8
 8016466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801646a:	688b      	ldr	r3, [r1, #8]
 801646c:	42a3      	cmp	r3, r4
 801646e:	d047      	beq.n	8016500 <rcutils_string_map_reserve+0xbc>
 8016470:	6a0e      	ldr	r6, [r1, #32]
 8016472:	2c00      	cmp	r4, #0
 8016474:	d034      	beq.n	80164e0 <rcutils_string_map_reserve+0x9c>
 8016476:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801647a:	d243      	bcs.n	8016504 <rcutils_string_map_reserve+0xc0>
 801647c:	00a7      	lsls	r7, r4, #2
 801647e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8016482:	6808      	ldr	r0, [r1, #0]
 8016484:	4632      	mov	r2, r6
 8016486:	4639      	mov	r1, r7
 8016488:	47c0      	blx	r8
 801648a:	2800      	cmp	r0, #0
 801648c:	d03a      	beq.n	8016504 <rcutils_string_map_reserve+0xc0>
 801648e:	682b      	ldr	r3, [r5, #0]
 8016490:	4632      	mov	r2, r6
 8016492:	6018      	str	r0, [r3, #0]
 8016494:	4639      	mov	r1, r7
 8016496:	6858      	ldr	r0, [r3, #4]
 8016498:	47c0      	blx	r8
 801649a:	2800      	cmp	r0, #0
 801649c:	d032      	beq.n	8016504 <rcutils_string_map_reserve+0xc0>
 801649e:	682d      	ldr	r5, [r5, #0]
 80164a0:	68ab      	ldr	r3, [r5, #8]
 80164a2:	6068      	str	r0, [r5, #4]
 80164a4:	42a3      	cmp	r3, r4
 80164a6:	d226      	bcs.n	80164f6 <rcutils_string_map_reserve+0xb2>
 80164a8:	682a      	ldr	r2, [r5, #0]
 80164aa:	eb00 0c07 	add.w	ip, r0, r7
 80164ae:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80164b2:	45e6      	cmp	lr, ip
 80164b4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80164b8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80164bc:	d203      	bcs.n	80164c6 <rcutils_string_map_reserve+0x82>
 80164be:	eb02 0c07 	add.w	ip, r2, r7
 80164c2:	4566      	cmp	r6, ip
 80164c4:	d322      	bcc.n	801650c <rcutils_string_map_reserve+0xc8>
 80164c6:	1ae3      	subs	r3, r4, r3
 80164c8:	009a      	lsls	r2, r3, #2
 80164ca:	4670      	mov	r0, lr
 80164cc:	2100      	movs	r1, #0
 80164ce:	9201      	str	r2, [sp, #4]
 80164d0:	f003 fbca 	bl	8019c68 <memset>
 80164d4:	9a01      	ldr	r2, [sp, #4]
 80164d6:	2100      	movs	r1, #0
 80164d8:	4630      	mov	r0, r6
 80164da:	f003 fbc5 	bl	8019c68 <memset>
 80164de:	e00a      	b.n	80164f6 <rcutils_string_map_reserve+0xb2>
 80164e0:	694f      	ldr	r7, [r1, #20]
 80164e2:	6808      	ldr	r0, [r1, #0]
 80164e4:	4631      	mov	r1, r6
 80164e6:	47b8      	blx	r7
 80164e8:	682b      	ldr	r3, [r5, #0]
 80164ea:	4631      	mov	r1, r6
 80164ec:	6858      	ldr	r0, [r3, #4]
 80164ee:	601c      	str	r4, [r3, #0]
 80164f0:	47b8      	blx	r7
 80164f2:	682d      	ldr	r5, [r5, #0]
 80164f4:	606c      	str	r4, [r5, #4]
 80164f6:	2000      	movs	r0, #0
 80164f8:	60ac      	str	r4, [r5, #8]
 80164fa:	b002      	add	sp, #8
 80164fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016500:	2000      	movs	r0, #0
 8016502:	e7af      	b.n	8016464 <rcutils_string_map_reserve+0x20>
 8016504:	200a      	movs	r0, #10
 8016506:	e7ad      	b.n	8016464 <rcutils_string_map_reserve+0x20>
 8016508:	200b      	movs	r0, #11
 801650a:	4770      	bx	lr
 801650c:	1f0b      	subs	r3, r1, #4
 801650e:	4418      	add	r0, r3
 8016510:	4413      	add	r3, r2
 8016512:	3a04      	subs	r2, #4
 8016514:	4417      	add	r7, r2
 8016516:	2200      	movs	r2, #0
 8016518:	f843 2f04 	str.w	r2, [r3, #4]!
 801651c:	42bb      	cmp	r3, r7
 801651e:	f840 2f04 	str.w	r2, [r0, #4]!
 8016522:	d1f9      	bne.n	8016518 <rcutils_string_map_reserve+0xd4>
 8016524:	e7e7      	b.n	80164f6 <rcutils_string_map_reserve+0xb2>
 8016526:	bf00      	nop

08016528 <rcutils_string_map_init>:
 8016528:	b082      	sub	sp, #8
 801652a:	b570      	push	{r4, r5, r6, lr}
 801652c:	ac04      	add	r4, sp, #16
 801652e:	e884 000c 	stmia.w	r4, {r2, r3}
 8016532:	b380      	cbz	r0, 8016596 <rcutils_string_map_init+0x6e>
 8016534:	6806      	ldr	r6, [r0, #0]
 8016536:	4604      	mov	r4, r0
 8016538:	b12e      	cbz	r6, 8016546 <rcutils_string_map_init+0x1e>
 801653a:	251e      	movs	r5, #30
 801653c:	4628      	mov	r0, r5
 801653e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016542:	b002      	add	sp, #8
 8016544:	4770      	bx	lr
 8016546:	a804      	add	r0, sp, #16
 8016548:	460d      	mov	r5, r1
 801654a:	f7f9 fd55 	bl	800fff8 <rcutils_allocator_is_valid>
 801654e:	b310      	cbz	r0, 8016596 <rcutils_string_map_init+0x6e>
 8016550:	9b04      	ldr	r3, [sp, #16]
 8016552:	9908      	ldr	r1, [sp, #32]
 8016554:	2024      	movs	r0, #36	; 0x24
 8016556:	4798      	blx	r3
 8016558:	6020      	str	r0, [r4, #0]
 801655a:	b310      	cbz	r0, 80165a2 <rcutils_string_map_init+0x7a>
 801655c:	f10d 0e10 	add.w	lr, sp, #16
 8016560:	e9c0 6600 	strd	r6, r6, [r0]
 8016564:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8016568:	f100 0c10 	add.w	ip, r0, #16
 801656c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016570:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016574:	f8de 3000 	ldr.w	r3, [lr]
 8016578:	f8cc 3000 	str.w	r3, [ip]
 801657c:	4629      	mov	r1, r5
 801657e:	4620      	mov	r0, r4
 8016580:	f7ff ff60 	bl	8016444 <rcutils_string_map_reserve>
 8016584:	4605      	mov	r5, r0
 8016586:	2800      	cmp	r0, #0
 8016588:	d0d8      	beq.n	801653c <rcutils_string_map_init+0x14>
 801658a:	9b05      	ldr	r3, [sp, #20]
 801658c:	9908      	ldr	r1, [sp, #32]
 801658e:	6820      	ldr	r0, [r4, #0]
 8016590:	4798      	blx	r3
 8016592:	6026      	str	r6, [r4, #0]
 8016594:	e7d2      	b.n	801653c <rcutils_string_map_init+0x14>
 8016596:	250b      	movs	r5, #11
 8016598:	4628      	mov	r0, r5
 801659a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801659e:	b002      	add	sp, #8
 80165a0:	4770      	bx	lr
 80165a2:	250a      	movs	r5, #10
 80165a4:	e7ca      	b.n	801653c <rcutils_string_map_init+0x14>
 80165a6:	bf00      	nop

080165a8 <rcutils_string_map_fini>:
 80165a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165ac:	b082      	sub	sp, #8
 80165ae:	2800      	cmp	r0, #0
 80165b0:	d03a      	beq.n	8016628 <rcutils_string_map_fini+0x80>
 80165b2:	6804      	ldr	r4, [r0, #0]
 80165b4:	4606      	mov	r6, r0
 80165b6:	2c00      	cmp	r4, #0
 80165b8:	d032      	beq.n	8016620 <rcutils_string_map_fini+0x78>
 80165ba:	68a3      	ldr	r3, [r4, #8]
 80165bc:	b32b      	cbz	r3, 801660a <rcutils_string_map_fini+0x62>
 80165be:	2500      	movs	r5, #0
 80165c0:	6822      	ldr	r2, [r4, #0]
 80165c2:	462f      	mov	r7, r5
 80165c4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80165c8:	b1e0      	cbz	r0, 8016604 <rcutils_string_map_fini+0x5c>
 80165ca:	6a21      	ldr	r1, [r4, #32]
 80165cc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80165d0:	9101      	str	r1, [sp, #4]
 80165d2:	47c0      	blx	r8
 80165d4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80165d8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80165dc:	9901      	ldr	r1, [sp, #4]
 80165de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80165e2:	47c0      	blx	r8
 80165e4:	68e3      	ldr	r3, [r4, #12]
 80165e6:	6862      	ldr	r2, [r4, #4]
 80165e8:	3b01      	subs	r3, #1
 80165ea:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80165ee:	60e3      	str	r3, [r4, #12]
 80165f0:	6834      	ldr	r4, [r6, #0]
 80165f2:	68a3      	ldr	r3, [r4, #8]
 80165f4:	3501      	adds	r5, #1
 80165f6:	429d      	cmp	r5, r3
 80165f8:	d207      	bcs.n	801660a <rcutils_string_map_fini+0x62>
 80165fa:	6822      	ldr	r2, [r4, #0]
 80165fc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016600:	2800      	cmp	r0, #0
 8016602:	d1e2      	bne.n	80165ca <rcutils_string_map_fini+0x22>
 8016604:	3501      	adds	r5, #1
 8016606:	429d      	cmp	r5, r3
 8016608:	d3dc      	bcc.n	80165c4 <rcutils_string_map_fini+0x1c>
 801660a:	2100      	movs	r1, #0
 801660c:	4630      	mov	r0, r6
 801660e:	f7ff ff19 	bl	8016444 <rcutils_string_map_reserve>
 8016612:	4604      	mov	r4, r0
 8016614:	b920      	cbnz	r0, 8016620 <rcutils_string_map_fini+0x78>
 8016616:	6830      	ldr	r0, [r6, #0]
 8016618:	6943      	ldr	r3, [r0, #20]
 801661a:	6a01      	ldr	r1, [r0, #32]
 801661c:	4798      	blx	r3
 801661e:	6034      	str	r4, [r6, #0]
 8016620:	4620      	mov	r0, r4
 8016622:	b002      	add	sp, #8
 8016624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016628:	240b      	movs	r4, #11
 801662a:	4620      	mov	r0, r4
 801662c:	b002      	add	sp, #8
 801662e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016632:	bf00      	nop

08016634 <rcutils_string_map_getn>:
 8016634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016638:	b300      	cbz	r0, 801667c <rcutils_string_map_getn+0x48>
 801663a:	6807      	ldr	r7, [r0, #0]
 801663c:	b1ff      	cbz	r7, 801667e <rcutils_string_map_getn+0x4a>
 801663e:	4688      	mov	r8, r1
 8016640:	b1e1      	cbz	r1, 801667c <rcutils_string_map_getn+0x48>
 8016642:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8016646:	683e      	ldr	r6, [r7, #0]
 8016648:	f1ba 0f00 	cmp.w	sl, #0
 801664c:	d016      	beq.n	801667c <rcutils_string_map_getn+0x48>
 801664e:	4691      	mov	r9, r2
 8016650:	3e04      	subs	r6, #4
 8016652:	2400      	movs	r4, #0
 8016654:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8016658:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801665c:	4628      	mov	r0, r5
 801665e:	3401      	adds	r4, #1
 8016660:	b155      	cbz	r5, 8016678 <rcutils_string_map_getn+0x44>
 8016662:	f7e9 fdbf 	bl	80001e4 <strlen>
 8016666:	4548      	cmp	r0, r9
 8016668:	4602      	mov	r2, r0
 801666a:	4629      	mov	r1, r5
 801666c:	bf38      	it	cc
 801666e:	464a      	movcc	r2, r9
 8016670:	4640      	mov	r0, r8
 8016672:	f003 fd89 	bl	801a188 <strncmp>
 8016676:	b128      	cbz	r0, 8016684 <rcutils_string_map_getn+0x50>
 8016678:	45a2      	cmp	sl, r4
 801667a:	d1eb      	bne.n	8016654 <rcutils_string_map_getn+0x20>
 801667c:	2700      	movs	r7, #0
 801667e:	4638      	mov	r0, r7
 8016680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	f853 700b 	ldr.w	r7, [r3, fp]
 801668a:	4638      	mov	r0, r7
 801668c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016690 <rcutils_system_time_now>:
 8016690:	b308      	cbz	r0, 80166d6 <rcutils_system_time_now+0x46>
 8016692:	b570      	push	{r4, r5, r6, lr}
 8016694:	b084      	sub	sp, #16
 8016696:	4604      	mov	r4, r0
 8016698:	4669      	mov	r1, sp
 801669a:	2001      	movs	r0, #1
 801669c:	f7eb fb7c 	bl	8001d98 <clock_gettime>
 80166a0:	e9dd 3500 	ldrd	r3, r5, [sp]
 80166a4:	2d00      	cmp	r5, #0
 80166a6:	db13      	blt.n	80166d0 <rcutils_system_time_now+0x40>
 80166a8:	9902      	ldr	r1, [sp, #8]
 80166aa:	2900      	cmp	r1, #0
 80166ac:	db0d      	blt.n	80166ca <rcutils_system_time_now+0x3a>
 80166ae:	4e0b      	ldr	r6, [pc, #44]	; (80166dc <rcutils_system_time_now+0x4c>)
 80166b0:	fba3 3206 	umull	r3, r2, r3, r6
 80166b4:	185b      	adds	r3, r3, r1
 80166b6:	fb06 2205 	mla	r2, r6, r5, r2
 80166ba:	f04f 0000 	mov.w	r0, #0
 80166be:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 80166c2:	e9c4 3200 	strd	r3, r2, [r4]
 80166c6:	b004      	add	sp, #16
 80166c8:	bd70      	pop	{r4, r5, r6, pc}
 80166ca:	ea53 0205 	orrs.w	r2, r3, r5
 80166ce:	d1ee      	bne.n	80166ae <rcutils_system_time_now+0x1e>
 80166d0:	2002      	movs	r0, #2
 80166d2:	b004      	add	sp, #16
 80166d4:	bd70      	pop	{r4, r5, r6, pc}
 80166d6:	200b      	movs	r0, #11
 80166d8:	4770      	bx	lr
 80166da:	bf00      	nop
 80166dc:	3b9aca00 	.word	0x3b9aca00

080166e0 <rcutils_steady_time_now>:
 80166e0:	b308      	cbz	r0, 8016726 <rcutils_steady_time_now+0x46>
 80166e2:	b570      	push	{r4, r5, r6, lr}
 80166e4:	b084      	sub	sp, #16
 80166e6:	4604      	mov	r4, r0
 80166e8:	4669      	mov	r1, sp
 80166ea:	2000      	movs	r0, #0
 80166ec:	f7eb fb54 	bl	8001d98 <clock_gettime>
 80166f0:	e9dd 3500 	ldrd	r3, r5, [sp]
 80166f4:	2d00      	cmp	r5, #0
 80166f6:	db13      	blt.n	8016720 <rcutils_steady_time_now+0x40>
 80166f8:	9902      	ldr	r1, [sp, #8]
 80166fa:	2900      	cmp	r1, #0
 80166fc:	db0d      	blt.n	801671a <rcutils_steady_time_now+0x3a>
 80166fe:	4e0b      	ldr	r6, [pc, #44]	; (801672c <rcutils_steady_time_now+0x4c>)
 8016700:	fba3 3206 	umull	r3, r2, r3, r6
 8016704:	185b      	adds	r3, r3, r1
 8016706:	fb06 2205 	mla	r2, r6, r5, r2
 801670a:	f04f 0000 	mov.w	r0, #0
 801670e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8016712:	e9c4 3200 	strd	r3, r2, [r4]
 8016716:	b004      	add	sp, #16
 8016718:	bd70      	pop	{r4, r5, r6, pc}
 801671a:	ea53 0205 	orrs.w	r2, r3, r5
 801671e:	d1ee      	bne.n	80166fe <rcutils_steady_time_now+0x1e>
 8016720:	2002      	movs	r0, #2
 8016722:	b004      	add	sp, #16
 8016724:	bd70      	pop	{r4, r5, r6, pc}
 8016726:	200b      	movs	r0, #11
 8016728:	4770      	bx	lr
 801672a:	bf00      	nop
 801672c:	3b9aca00 	.word	0x3b9aca00

08016730 <rmw_get_zero_initialized_context>:
 8016730:	b510      	push	{r4, lr}
 8016732:	4604      	mov	r4, r0
 8016734:	3010      	adds	r0, #16
 8016736:	f000 f80b 	bl	8016750 <rmw_get_zero_initialized_init_options>
 801673a:	2300      	movs	r3, #0
 801673c:	2000      	movs	r0, #0
 801673e:	2100      	movs	r1, #0
 8016740:	e9c4 0100 	strd	r0, r1, [r4]
 8016744:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016748:	60a3      	str	r3, [r4, #8]
 801674a:	4620      	mov	r0, r4
 801674c:	bd10      	pop	{r4, pc}
 801674e:	bf00      	nop

08016750 <rmw_get_zero_initialized_init_options>:
 8016750:	b510      	push	{r4, lr}
 8016752:	2238      	movs	r2, #56	; 0x38
 8016754:	4604      	mov	r4, r0
 8016756:	2100      	movs	r1, #0
 8016758:	f003 fa86 	bl	8019c68 <memset>
 801675c:	f104 0010 	add.w	r0, r4, #16
 8016760:	f000 f806 	bl	8016770 <rmw_get_default_security_options>
 8016764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016768:	60e3      	str	r3, [r4, #12]
 801676a:	4620      	mov	r0, r4
 801676c:	bd10      	pop	{r4, pc}
 801676e:	bf00      	nop

08016770 <rmw_get_default_security_options>:
 8016770:	2200      	movs	r2, #0
 8016772:	7002      	strb	r2, [r0, #0]
 8016774:	6042      	str	r2, [r0, #4]
 8016776:	4770      	bx	lr

08016778 <rmw_validate_full_topic_name>:
 8016778:	2800      	cmp	r0, #0
 801677a:	d057      	beq.n	801682c <rmw_validate_full_topic_name+0xb4>
 801677c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016780:	460d      	mov	r5, r1
 8016782:	2900      	cmp	r1, #0
 8016784:	d054      	beq.n	8016830 <rmw_validate_full_topic_name+0xb8>
 8016786:	4616      	mov	r6, r2
 8016788:	4604      	mov	r4, r0
 801678a:	f7e9 fd2b 	bl	80001e4 <strlen>
 801678e:	b148      	cbz	r0, 80167a4 <rmw_validate_full_topic_name+0x2c>
 8016790:	7823      	ldrb	r3, [r4, #0]
 8016792:	2b2f      	cmp	r3, #47	; 0x2f
 8016794:	d00d      	beq.n	80167b2 <rmw_validate_full_topic_name+0x3a>
 8016796:	2302      	movs	r3, #2
 8016798:	602b      	str	r3, [r5, #0]
 801679a:	b13e      	cbz	r6, 80167ac <rmw_validate_full_topic_name+0x34>
 801679c:	2000      	movs	r0, #0
 801679e:	6030      	str	r0, [r6, #0]
 80167a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167a4:	2301      	movs	r3, #1
 80167a6:	602b      	str	r3, [r5, #0]
 80167a8:	2e00      	cmp	r6, #0
 80167aa:	d1f7      	bne.n	801679c <rmw_validate_full_topic_name+0x24>
 80167ac:	2000      	movs	r0, #0
 80167ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80167b2:	1e43      	subs	r3, r0, #1
 80167b4:	5ce2      	ldrb	r2, [r4, r3]
 80167b6:	2a2f      	cmp	r2, #47	; 0x2f
 80167b8:	d03c      	beq.n	8016834 <rmw_validate_full_topic_name+0xbc>
 80167ba:	1e63      	subs	r3, r4, #1
 80167bc:	eb03 0800 	add.w	r8, r3, r0
 80167c0:	f1c4 0e01 	rsb	lr, r4, #1
 80167c4:	eb0e 0703 	add.w	r7, lr, r3
 80167c8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80167cc:	f021 0220 	bic.w	r2, r1, #32
 80167d0:	3a41      	subs	r2, #65	; 0x41
 80167d2:	2a19      	cmp	r2, #25
 80167d4:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 80167d8:	d90b      	bls.n	80167f2 <rmw_validate_full_topic_name+0x7a>
 80167da:	295f      	cmp	r1, #95	; 0x5f
 80167dc:	d009      	beq.n	80167f2 <rmw_validate_full_topic_name+0x7a>
 80167de:	f1bc 0f0a 	cmp.w	ip, #10
 80167e2:	d906      	bls.n	80167f2 <rmw_validate_full_topic_name+0x7a>
 80167e4:	2304      	movs	r3, #4
 80167e6:	602b      	str	r3, [r5, #0]
 80167e8:	2e00      	cmp	r6, #0
 80167ea:	d0df      	beq.n	80167ac <rmw_validate_full_topic_name+0x34>
 80167ec:	6037      	str	r7, [r6, #0]
 80167ee:	2000      	movs	r0, #0
 80167f0:	e7d6      	b.n	80167a0 <rmw_validate_full_topic_name+0x28>
 80167f2:	4543      	cmp	r3, r8
 80167f4:	d1e6      	bne.n	80167c4 <rmw_validate_full_topic_name+0x4c>
 80167f6:	4f1a      	ldr	r7, [pc, #104]	; (8016860 <rmw_validate_full_topic_name+0xe8>)
 80167f8:	2301      	movs	r3, #1
 80167fa:	e004      	b.n	8016806 <rmw_validate_full_topic_name+0x8e>
 80167fc:	4298      	cmp	r0, r3
 80167fe:	f104 0401 	add.w	r4, r4, #1
 8016802:	d91c      	bls.n	801683e <rmw_validate_full_topic_name+0xc6>
 8016804:	4613      	mov	r3, r2
 8016806:	4298      	cmp	r0, r3
 8016808:	f103 0201 	add.w	r2, r3, #1
 801680c:	d0f6      	beq.n	80167fc <rmw_validate_full_topic_name+0x84>
 801680e:	7821      	ldrb	r1, [r4, #0]
 8016810:	292f      	cmp	r1, #47	; 0x2f
 8016812:	d1f3      	bne.n	80167fc <rmw_validate_full_topic_name+0x84>
 8016814:	7861      	ldrb	r1, [r4, #1]
 8016816:	292f      	cmp	r1, #47	; 0x2f
 8016818:	d01c      	beq.n	8016854 <rmw_validate_full_topic_name+0xdc>
 801681a:	5dc9      	ldrb	r1, [r1, r7]
 801681c:	0749      	lsls	r1, r1, #29
 801681e:	d5ed      	bpl.n	80167fc <rmw_validate_full_topic_name+0x84>
 8016820:	2206      	movs	r2, #6
 8016822:	602a      	str	r2, [r5, #0]
 8016824:	2e00      	cmp	r6, #0
 8016826:	d0c1      	beq.n	80167ac <rmw_validate_full_topic_name+0x34>
 8016828:	6033      	str	r3, [r6, #0]
 801682a:	e7bf      	b.n	80167ac <rmw_validate_full_topic_name+0x34>
 801682c:	200b      	movs	r0, #11
 801682e:	4770      	bx	lr
 8016830:	200b      	movs	r0, #11
 8016832:	e7b5      	b.n	80167a0 <rmw_validate_full_topic_name+0x28>
 8016834:	2203      	movs	r2, #3
 8016836:	602a      	str	r2, [r5, #0]
 8016838:	2e00      	cmp	r6, #0
 801683a:	d1f5      	bne.n	8016828 <rmw_validate_full_topic_name+0xb0>
 801683c:	e7b6      	b.n	80167ac <rmw_validate_full_topic_name+0x34>
 801683e:	28f7      	cmp	r0, #247	; 0xf7
 8016840:	d802      	bhi.n	8016848 <rmw_validate_full_topic_name+0xd0>
 8016842:	2000      	movs	r0, #0
 8016844:	6028      	str	r0, [r5, #0]
 8016846:	e7ab      	b.n	80167a0 <rmw_validate_full_topic_name+0x28>
 8016848:	2307      	movs	r3, #7
 801684a:	602b      	str	r3, [r5, #0]
 801684c:	2e00      	cmp	r6, #0
 801684e:	d0ad      	beq.n	80167ac <rmw_validate_full_topic_name+0x34>
 8016850:	23f6      	movs	r3, #246	; 0xf6
 8016852:	e7e9      	b.n	8016828 <rmw_validate_full_topic_name+0xb0>
 8016854:	2205      	movs	r2, #5
 8016856:	602a      	str	r2, [r5, #0]
 8016858:	2e00      	cmp	r6, #0
 801685a:	d1e5      	bne.n	8016828 <rmw_validate_full_topic_name+0xb0>
 801685c:	e7a6      	b.n	80167ac <rmw_validate_full_topic_name+0x34>
 801685e:	bf00      	nop
 8016860:	0801c1c7 	.word	0x0801c1c7

08016864 <rmw_validate_namespace_with_size>:
 8016864:	b340      	cbz	r0, 80168b8 <rmw_validate_namespace_with_size+0x54>
 8016866:	b570      	push	{r4, r5, r6, lr}
 8016868:	4614      	mov	r4, r2
 801686a:	b0c2      	sub	sp, #264	; 0x108
 801686c:	b332      	cbz	r2, 80168bc <rmw_validate_namespace_with_size+0x58>
 801686e:	2901      	cmp	r1, #1
 8016870:	460d      	mov	r5, r1
 8016872:	461e      	mov	r6, r3
 8016874:	d102      	bne.n	801687c <rmw_validate_namespace_with_size+0x18>
 8016876:	7803      	ldrb	r3, [r0, #0]
 8016878:	2b2f      	cmp	r3, #47	; 0x2f
 801687a:	d012      	beq.n	80168a2 <rmw_validate_namespace_with_size+0x3e>
 801687c:	aa01      	add	r2, sp, #4
 801687e:	4669      	mov	r1, sp
 8016880:	f7ff ff7a 	bl	8016778 <rmw_validate_full_topic_name>
 8016884:	b978      	cbnz	r0, 80168a6 <rmw_validate_namespace_with_size+0x42>
 8016886:	9b00      	ldr	r3, [sp, #0]
 8016888:	b14b      	cbz	r3, 801689e <rmw_validate_namespace_with_size+0x3a>
 801688a:	2b07      	cmp	r3, #7
 801688c:	d007      	beq.n	801689e <rmw_validate_namespace_with_size+0x3a>
 801688e:	1e5a      	subs	r2, r3, #1
 8016890:	2a05      	cmp	r2, #5
 8016892:	d82b      	bhi.n	80168ec <rmw_validate_namespace_with_size+0x88>
 8016894:	e8df f002 	tbb	[pc, r2]
 8016898:	1e212427 	.word	0x1e212427
 801689c:	141b      	.short	0x141b
 801689e:	2df5      	cmp	r5, #245	; 0xf5
 80168a0:	d803      	bhi.n	80168aa <rmw_validate_namespace_with_size+0x46>
 80168a2:	2000      	movs	r0, #0
 80168a4:	6020      	str	r0, [r4, #0]
 80168a6:	b042      	add	sp, #264	; 0x108
 80168a8:	bd70      	pop	{r4, r5, r6, pc}
 80168aa:	2307      	movs	r3, #7
 80168ac:	6023      	str	r3, [r4, #0]
 80168ae:	2e00      	cmp	r6, #0
 80168b0:	d0f9      	beq.n	80168a6 <rmw_validate_namespace_with_size+0x42>
 80168b2:	23f4      	movs	r3, #244	; 0xf4
 80168b4:	6033      	str	r3, [r6, #0]
 80168b6:	e7f6      	b.n	80168a6 <rmw_validate_namespace_with_size+0x42>
 80168b8:	200b      	movs	r0, #11
 80168ba:	4770      	bx	lr
 80168bc:	200b      	movs	r0, #11
 80168be:	e7f2      	b.n	80168a6 <rmw_validate_namespace_with_size+0x42>
 80168c0:	2306      	movs	r3, #6
 80168c2:	6023      	str	r3, [r4, #0]
 80168c4:	2e00      	cmp	r6, #0
 80168c6:	d0ee      	beq.n	80168a6 <rmw_validate_namespace_with_size+0x42>
 80168c8:	9b01      	ldr	r3, [sp, #4]
 80168ca:	6033      	str	r3, [r6, #0]
 80168cc:	e7eb      	b.n	80168a6 <rmw_validate_namespace_with_size+0x42>
 80168ce:	2305      	movs	r3, #5
 80168d0:	6023      	str	r3, [r4, #0]
 80168d2:	e7f7      	b.n	80168c4 <rmw_validate_namespace_with_size+0x60>
 80168d4:	2304      	movs	r3, #4
 80168d6:	6023      	str	r3, [r4, #0]
 80168d8:	e7f4      	b.n	80168c4 <rmw_validate_namespace_with_size+0x60>
 80168da:	2303      	movs	r3, #3
 80168dc:	6023      	str	r3, [r4, #0]
 80168de:	e7f1      	b.n	80168c4 <rmw_validate_namespace_with_size+0x60>
 80168e0:	2302      	movs	r3, #2
 80168e2:	6023      	str	r3, [r4, #0]
 80168e4:	e7ee      	b.n	80168c4 <rmw_validate_namespace_with_size+0x60>
 80168e6:	2301      	movs	r3, #1
 80168e8:	6023      	str	r3, [r4, #0]
 80168ea:	e7eb      	b.n	80168c4 <rmw_validate_namespace_with_size+0x60>
 80168ec:	4a03      	ldr	r2, [pc, #12]	; (80168fc <rmw_validate_namespace_with_size+0x98>)
 80168ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80168f2:	a802      	add	r0, sp, #8
 80168f4:	f7ff fd36 	bl	8016364 <rcutils_snprintf>
 80168f8:	2001      	movs	r0, #1
 80168fa:	e7d4      	b.n	80168a6 <rmw_validate_namespace_with_size+0x42>
 80168fc:	0801bb4c 	.word	0x0801bb4c

08016900 <rmw_validate_namespace>:
 8016900:	b168      	cbz	r0, 801691e <rmw_validate_namespace+0x1e>
 8016902:	b570      	push	{r4, r5, r6, lr}
 8016904:	460d      	mov	r5, r1
 8016906:	4616      	mov	r6, r2
 8016908:	4604      	mov	r4, r0
 801690a:	f7e9 fc6b 	bl	80001e4 <strlen>
 801690e:	4633      	mov	r3, r6
 8016910:	4601      	mov	r1, r0
 8016912:	462a      	mov	r2, r5
 8016914:	4620      	mov	r0, r4
 8016916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801691a:	f7ff bfa3 	b.w	8016864 <rmw_validate_namespace_with_size>
 801691e:	200b      	movs	r0, #11
 8016920:	4770      	bx	lr
 8016922:	bf00      	nop

08016924 <rmw_namespace_validation_result_string>:
 8016924:	2807      	cmp	r0, #7
 8016926:	bf9a      	itte	ls
 8016928:	4b02      	ldrls	r3, [pc, #8]	; (8016934 <rmw_namespace_validation_result_string+0x10>)
 801692a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801692e:	4802      	ldrhi	r0, [pc, #8]	; (8016938 <rmw_namespace_validation_result_string+0x14>)
 8016930:	4770      	bx	lr
 8016932:	bf00      	nop
 8016934:	0801bd44 	.word	0x0801bd44
 8016938:	0801bb9c 	.word	0x0801bb9c

0801693c <rmw_validate_node_name>:
 801693c:	2800      	cmp	r0, #0
 801693e:	d03b      	beq.n	80169b8 <rmw_validate_node_name+0x7c>
 8016940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016944:	460d      	mov	r5, r1
 8016946:	2900      	cmp	r1, #0
 8016948:	d038      	beq.n	80169bc <rmw_validate_node_name+0x80>
 801694a:	4616      	mov	r6, r2
 801694c:	4604      	mov	r4, r0
 801694e:	f7e9 fc49 	bl	80001e4 <strlen>
 8016952:	b1e0      	cbz	r0, 801698e <rmw_validate_node_name+0x52>
 8016954:	1e63      	subs	r3, r4, #1
 8016956:	eb03 0800 	add.w	r8, r3, r0
 801695a:	f1c4 0101 	rsb	r1, r4, #1
 801695e:	18cf      	adds	r7, r1, r3
 8016960:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8016964:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8016968:	f02e 0c20 	bic.w	ip, lr, #32
 801696c:	2a09      	cmp	r2, #9
 801696e:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8016972:	d914      	bls.n	801699e <rmw_validate_node_name+0x62>
 8016974:	f1bc 0f19 	cmp.w	ip, #25
 8016978:	d911      	bls.n	801699e <rmw_validate_node_name+0x62>
 801697a:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 801697e:	d00e      	beq.n	801699e <rmw_validate_node_name+0x62>
 8016980:	2302      	movs	r3, #2
 8016982:	602b      	str	r3, [r5, #0]
 8016984:	b106      	cbz	r6, 8016988 <rmw_validate_node_name+0x4c>
 8016986:	6037      	str	r7, [r6, #0]
 8016988:	2000      	movs	r0, #0
 801698a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801698e:	2301      	movs	r3, #1
 8016990:	602b      	str	r3, [r5, #0]
 8016992:	2e00      	cmp	r6, #0
 8016994:	d0f8      	beq.n	8016988 <rmw_validate_node_name+0x4c>
 8016996:	2000      	movs	r0, #0
 8016998:	6030      	str	r0, [r6, #0]
 801699a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801699e:	4543      	cmp	r3, r8
 80169a0:	d1dd      	bne.n	801695e <rmw_validate_node_name+0x22>
 80169a2:	7822      	ldrb	r2, [r4, #0]
 80169a4:	4b0d      	ldr	r3, [pc, #52]	; (80169dc <rmw_validate_node_name+0xa0>)
 80169a6:	5cd3      	ldrb	r3, [r2, r3]
 80169a8:	f013 0304 	ands.w	r3, r3, #4
 80169ac:	d110      	bne.n	80169d0 <rmw_validate_node_name+0x94>
 80169ae:	28ff      	cmp	r0, #255	; 0xff
 80169b0:	d806      	bhi.n	80169c0 <rmw_validate_node_name+0x84>
 80169b2:	602b      	str	r3, [r5, #0]
 80169b4:	4618      	mov	r0, r3
 80169b6:	e7e8      	b.n	801698a <rmw_validate_node_name+0x4e>
 80169b8:	200b      	movs	r0, #11
 80169ba:	4770      	bx	lr
 80169bc:	200b      	movs	r0, #11
 80169be:	e7e4      	b.n	801698a <rmw_validate_node_name+0x4e>
 80169c0:	2204      	movs	r2, #4
 80169c2:	602a      	str	r2, [r5, #0]
 80169c4:	2e00      	cmp	r6, #0
 80169c6:	d0df      	beq.n	8016988 <rmw_validate_node_name+0x4c>
 80169c8:	22fe      	movs	r2, #254	; 0xfe
 80169ca:	6032      	str	r2, [r6, #0]
 80169cc:	4618      	mov	r0, r3
 80169ce:	e7dc      	b.n	801698a <rmw_validate_node_name+0x4e>
 80169d0:	2303      	movs	r3, #3
 80169d2:	602b      	str	r3, [r5, #0]
 80169d4:	2e00      	cmp	r6, #0
 80169d6:	d1de      	bne.n	8016996 <rmw_validate_node_name+0x5a>
 80169d8:	e7d6      	b.n	8016988 <rmw_validate_node_name+0x4c>
 80169da:	bf00      	nop
 80169dc:	0801c1c7 	.word	0x0801c1c7

080169e0 <rmw_node_name_validation_result_string>:
 80169e0:	2804      	cmp	r0, #4
 80169e2:	bf9a      	itte	ls
 80169e4:	4b02      	ldrls	r3, [pc, #8]	; (80169f0 <rmw_node_name_validation_result_string+0x10>)
 80169e6:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80169ea:	4802      	ldrhi	r0, [pc, #8]	; (80169f4 <rmw_node_name_validation_result_string+0x14>)
 80169ec:	4770      	bx	lr
 80169ee:	bf00      	nop
 80169f0:	0801be50 	.word	0x0801be50
 80169f4:	0801bd64 	.word	0x0801bd64

080169f8 <get_memory>:
 80169f8:	4603      	mov	r3, r0
 80169fa:	6840      	ldr	r0, [r0, #4]
 80169fc:	b158      	cbz	r0, 8016a16 <get_memory+0x1e>
 80169fe:	6842      	ldr	r2, [r0, #4]
 8016a00:	605a      	str	r2, [r3, #4]
 8016a02:	b10a      	cbz	r2, 8016a08 <get_memory+0x10>
 8016a04:	2100      	movs	r1, #0
 8016a06:	6011      	str	r1, [r2, #0]
 8016a08:	681a      	ldr	r2, [r3, #0]
 8016a0a:	6042      	str	r2, [r0, #4]
 8016a0c:	b102      	cbz	r2, 8016a10 <get_memory+0x18>
 8016a0e:	6010      	str	r0, [r2, #0]
 8016a10:	2200      	movs	r2, #0
 8016a12:	6002      	str	r2, [r0, #0]
 8016a14:	6018      	str	r0, [r3, #0]
 8016a16:	4770      	bx	lr

08016a18 <put_memory>:
 8016a18:	680b      	ldr	r3, [r1, #0]
 8016a1a:	b10b      	cbz	r3, 8016a20 <put_memory+0x8>
 8016a1c:	684a      	ldr	r2, [r1, #4]
 8016a1e:	605a      	str	r2, [r3, #4]
 8016a20:	684a      	ldr	r2, [r1, #4]
 8016a22:	b102      	cbz	r2, 8016a26 <put_memory+0xe>
 8016a24:	6013      	str	r3, [r2, #0]
 8016a26:	6803      	ldr	r3, [r0, #0]
 8016a28:	428b      	cmp	r3, r1
 8016a2a:	6843      	ldr	r3, [r0, #4]
 8016a2c:	bf08      	it	eq
 8016a2e:	6002      	streq	r2, [r0, #0]
 8016a30:	604b      	str	r3, [r1, #4]
 8016a32:	b103      	cbz	r3, 8016a36 <put_memory+0x1e>
 8016a34:	6019      	str	r1, [r3, #0]
 8016a36:	2300      	movs	r3, #0
 8016a38:	600b      	str	r3, [r1, #0]
 8016a3a:	6041      	str	r1, [r0, #4]
 8016a3c:	4770      	bx	lr
 8016a3e:	bf00      	nop

08016a40 <rmw_get_implementation_identifier>:
 8016a40:	4b01      	ldr	r3, [pc, #4]	; (8016a48 <rmw_get_implementation_identifier+0x8>)
 8016a42:	6818      	ldr	r0, [r3, #0]
 8016a44:	4770      	bx	lr
 8016a46:	bf00      	nop
 8016a48:	0801be7c 	.word	0x0801be7c

08016a4c <rmw_init_options_init>:
 8016a4c:	b084      	sub	sp, #16
 8016a4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a50:	b083      	sub	sp, #12
 8016a52:	ad09      	add	r5, sp, #36	; 0x24
 8016a54:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8016a58:	b130      	cbz	r0, 8016a68 <rmw_init_options_init+0x1c>
 8016a5a:	4604      	mov	r4, r0
 8016a5c:	4628      	mov	r0, r5
 8016a5e:	f7f9 facb 	bl	800fff8 <rcutils_allocator_is_valid>
 8016a62:	b108      	cbz	r0, 8016a68 <rmw_init_options_init+0x1c>
 8016a64:	68a6      	ldr	r6, [r4, #8]
 8016a66:	b12e      	cbz	r6, 8016a74 <rmw_init_options_init+0x28>
 8016a68:	200b      	movs	r0, #11
 8016a6a:	b003      	add	sp, #12
 8016a6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016a70:	b004      	add	sp, #16
 8016a72:	4770      	bx	lr
 8016a74:	2200      	movs	r2, #0
 8016a76:	2300      	movs	r3, #0
 8016a78:	e9c4 2300 	strd	r2, r3, [r4]
 8016a7c:	4b22      	ldr	r3, [pc, #136]	; (8016b08 <rmw_init_options_init+0xbc>)
 8016a7e:	f8df e098 	ldr.w	lr, [pc, #152]	; 8016b18 <rmw_init_options_init+0xcc>
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	60a3      	str	r3, [r4, #8]
 8016a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a88:	f104 0c20 	add.w	ip, r4, #32
 8016a8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a90:	466f      	mov	r7, sp
 8016a92:	682b      	ldr	r3, [r5, #0]
 8016a94:	f8cc 3000 	str.w	r3, [ip]
 8016a98:	4638      	mov	r0, r7
 8016a9a:	f8c4 e01c 	str.w	lr, [r4, #28]
 8016a9e:	60e6      	str	r6, [r4, #12]
 8016aa0:	f7ff fe66 	bl	8016770 <rmw_get_default_security_options>
 8016aa4:	e897 0003 	ldmia.w	r7, {r0, r1}
 8016aa8:	f104 0310 	add.w	r3, r4, #16
 8016aac:	e883 0003 	stmia.w	r3, {r0, r1}
 8016ab0:	2203      	movs	r2, #3
 8016ab2:	4816      	ldr	r0, [pc, #88]	; (8016b0c <rmw_init_options_init+0xc0>)
 8016ab4:	4916      	ldr	r1, [pc, #88]	; (8016b10 <rmw_init_options_init+0xc4>)
 8016ab6:	7626      	strb	r6, [r4, #24]
 8016ab8:	f7f9 fd90 	bl	80105dc <rmw_uxrce_init_init_options_impl_memory>
 8016abc:	4813      	ldr	r0, [pc, #76]	; (8016b0c <rmw_init_options_init+0xc0>)
 8016abe:	f7ff ff9b 	bl	80169f8 <get_memory>
 8016ac2:	b1f0      	cbz	r0, 8016b02 <rmw_init_options_init+0xb6>
 8016ac4:	4a13      	ldr	r2, [pc, #76]	; (8016b14 <rmw_init_options_init+0xc8>)
 8016ac6:	6883      	ldr	r3, [r0, #8]
 8016ac8:	6851      	ldr	r1, [r2, #4]
 8016aca:	7810      	ldrb	r0, [r2, #0]
 8016acc:	6363      	str	r3, [r4, #52]	; 0x34
 8016ace:	7418      	strb	r0, [r3, #16]
 8016ad0:	6159      	str	r1, [r3, #20]
 8016ad2:	68d1      	ldr	r1, [r2, #12]
 8016ad4:	61d9      	str	r1, [r3, #28]
 8016ad6:	6911      	ldr	r1, [r2, #16]
 8016ad8:	6219      	str	r1, [r3, #32]
 8016ada:	6951      	ldr	r1, [r2, #20]
 8016adc:	6892      	ldr	r2, [r2, #8]
 8016ade:	619a      	str	r2, [r3, #24]
 8016ae0:	6259      	str	r1, [r3, #36]	; 0x24
 8016ae2:	f7fd faf3 	bl	80140cc <uxr_nanos>
 8016ae6:	f003 f9d5 	bl	8019e94 <srand>
 8016aea:	f003 fa01 	bl	8019ef0 <rand>
 8016aee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016af0:	6298      	str	r0, [r3, #40]	; 0x28
 8016af2:	2800      	cmp	r0, #0
 8016af4:	d0f9      	beq.n	8016aea <rmw_init_options_init+0x9e>
 8016af6:	2000      	movs	r0, #0
 8016af8:	b003      	add	sp, #12
 8016afa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016afe:	b004      	add	sp, #16
 8016b00:	4770      	bx	lr
 8016b02:	2001      	movs	r0, #1
 8016b04:	e7b1      	b.n	8016a6a <rmw_init_options_init+0x1e>
 8016b06:	bf00      	nop
 8016b08:	0801be7c 	.word	0x0801be7c
 8016b0c:	2001567c 	.word	0x2001567c
 8016b10:	20010f18 	.word	0x20010f18
 8016b14:	20010da4 	.word	0x20010da4
 8016b18:	0801ba1c 	.word	0x0801ba1c

08016b1c <rmw_init_options_copy>:
 8016b1c:	b570      	push	{r4, r5, r6, lr}
 8016b1e:	b158      	cbz	r0, 8016b38 <rmw_init_options_copy+0x1c>
 8016b20:	460d      	mov	r5, r1
 8016b22:	b149      	cbz	r1, 8016b38 <rmw_init_options_copy+0x1c>
 8016b24:	4604      	mov	r4, r0
 8016b26:	6880      	ldr	r0, [r0, #8]
 8016b28:	b120      	cbz	r0, 8016b34 <rmw_init_options_copy+0x18>
 8016b2a:	4b1e      	ldr	r3, [pc, #120]	; (8016ba4 <rmw_init_options_copy+0x88>)
 8016b2c:	6819      	ldr	r1, [r3, #0]
 8016b2e:	f7e9 fb4f 	bl	80001d0 <strcmp>
 8016b32:	bb90      	cbnz	r0, 8016b9a <rmw_init_options_copy+0x7e>
 8016b34:	68ab      	ldr	r3, [r5, #8]
 8016b36:	b113      	cbz	r3, 8016b3e <rmw_init_options_copy+0x22>
 8016b38:	250b      	movs	r5, #11
 8016b3a:	4628      	mov	r0, r5
 8016b3c:	bd70      	pop	{r4, r5, r6, pc}
 8016b3e:	4623      	mov	r3, r4
 8016b40:	462a      	mov	r2, r5
 8016b42:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8016b46:	f8d3 c000 	ldr.w	ip, [r3]
 8016b4a:	6858      	ldr	r0, [r3, #4]
 8016b4c:	6899      	ldr	r1, [r3, #8]
 8016b4e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8016b52:	f8c2 e00c 	str.w	lr, [r2, #12]
 8016b56:	3310      	adds	r3, #16
 8016b58:	42b3      	cmp	r3, r6
 8016b5a:	f8c2 c000 	str.w	ip, [r2]
 8016b5e:	6050      	str	r0, [r2, #4]
 8016b60:	6091      	str	r1, [r2, #8]
 8016b62:	f102 0210 	add.w	r2, r2, #16
 8016b66:	d1ee      	bne.n	8016b46 <rmw_init_options_copy+0x2a>
 8016b68:	6819      	ldr	r1, [r3, #0]
 8016b6a:	685b      	ldr	r3, [r3, #4]
 8016b6c:	480e      	ldr	r0, [pc, #56]	; (8016ba8 <rmw_init_options_copy+0x8c>)
 8016b6e:	6053      	str	r3, [r2, #4]
 8016b70:	6011      	str	r1, [r2, #0]
 8016b72:	f7ff ff41 	bl	80169f8 <get_memory>
 8016b76:	b198      	cbz	r0, 8016ba0 <rmw_init_options_copy+0x84>
 8016b78:	6883      	ldr	r3, [r0, #8]
 8016b7a:	636b      	str	r3, [r5, #52]	; 0x34
 8016b7c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016b7e:	f102 0c10 	add.w	ip, r2, #16
 8016b82:	f103 0410 	add.w	r4, r3, #16
 8016b86:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016b8c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8016b90:	2500      	movs	r5, #0
 8016b92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8016b96:	4628      	mov	r0, r5
 8016b98:	bd70      	pop	{r4, r5, r6, pc}
 8016b9a:	250c      	movs	r5, #12
 8016b9c:	4628      	mov	r0, r5
 8016b9e:	bd70      	pop	{r4, r5, r6, pc}
 8016ba0:	2501      	movs	r5, #1
 8016ba2:	e7ca      	b.n	8016b3a <rmw_init_options_copy+0x1e>
 8016ba4:	0801be7c 	.word	0x0801be7c
 8016ba8:	2001567c 	.word	0x2001567c

08016bac <rmw_init_options_fini>:
 8016bac:	2800      	cmp	r0, #0
 8016bae:	d03d      	beq.n	8016c2c <rmw_init_options_fini+0x80>
 8016bb0:	b510      	push	{r4, lr}
 8016bb2:	4604      	mov	r4, r0
 8016bb4:	b08e      	sub	sp, #56	; 0x38
 8016bb6:	3020      	adds	r0, #32
 8016bb8:	f7f9 fa1e 	bl	800fff8 <rcutils_allocator_is_valid>
 8016bbc:	b360      	cbz	r0, 8016c18 <rmw_init_options_fini+0x6c>
 8016bbe:	68a0      	ldr	r0, [r4, #8]
 8016bc0:	b120      	cbz	r0, 8016bcc <rmw_init_options_fini+0x20>
 8016bc2:	4b1c      	ldr	r3, [pc, #112]	; (8016c34 <rmw_init_options_fini+0x88>)
 8016bc4:	6819      	ldr	r1, [r3, #0]
 8016bc6:	f7e9 fb03 	bl	80001d0 <strcmp>
 8016bca:	bb68      	cbnz	r0, 8016c28 <rmw_init_options_fini+0x7c>
 8016bcc:	4b1a      	ldr	r3, [pc, #104]	; (8016c38 <rmw_init_options_fini+0x8c>)
 8016bce:	6819      	ldr	r1, [r3, #0]
 8016bd0:	b331      	cbz	r1, 8016c20 <rmw_init_options_fini+0x74>
 8016bd2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8016bd4:	e001      	b.n	8016bda <rmw_init_options_fini+0x2e>
 8016bd6:	6849      	ldr	r1, [r1, #4]
 8016bd8:	b311      	cbz	r1, 8016c20 <rmw_init_options_fini+0x74>
 8016bda:	688b      	ldr	r3, [r1, #8]
 8016bdc:	429a      	cmp	r2, r3
 8016bde:	d1fa      	bne.n	8016bd6 <rmw_init_options_fini+0x2a>
 8016be0:	4815      	ldr	r0, [pc, #84]	; (8016c38 <rmw_init_options_fini+0x8c>)
 8016be2:	f7ff ff19 	bl	8016a18 <put_memory>
 8016be6:	4668      	mov	r0, sp
 8016be8:	f7ff fdb2 	bl	8016750 <rmw_get_zero_initialized_init_options>
 8016bec:	46ee      	mov	lr, sp
 8016bee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016bf2:	46a4      	mov	ip, r4
 8016bf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016bf8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016bfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016c00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016c04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016c08:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016c0c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016c10:	2300      	movs	r3, #0
 8016c12:	4618      	mov	r0, r3
 8016c14:	b00e      	add	sp, #56	; 0x38
 8016c16:	bd10      	pop	{r4, pc}
 8016c18:	230b      	movs	r3, #11
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	b00e      	add	sp, #56	; 0x38
 8016c1e:	bd10      	pop	{r4, pc}
 8016c20:	2301      	movs	r3, #1
 8016c22:	4618      	mov	r0, r3
 8016c24:	b00e      	add	sp, #56	; 0x38
 8016c26:	bd10      	pop	{r4, pc}
 8016c28:	230c      	movs	r3, #12
 8016c2a:	e7f2      	b.n	8016c12 <rmw_init_options_fini+0x66>
 8016c2c:	230b      	movs	r3, #11
 8016c2e:	4618      	mov	r0, r3
 8016c30:	4770      	bx	lr
 8016c32:	bf00      	nop
 8016c34:	0801be7c 	.word	0x0801be7c
 8016c38:	2001567c 	.word	0x2001567c

08016c3c <rmw_init>:
 8016c3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c40:	b083      	sub	sp, #12
 8016c42:	2800      	cmp	r0, #0
 8016c44:	f000 80d3 	beq.w	8016dee <rmw_init+0x1b2>
 8016c48:	460e      	mov	r6, r1
 8016c4a:	2900      	cmp	r1, #0
 8016c4c:	f000 80cf 	beq.w	8016dee <rmw_init+0x1b2>
 8016c50:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016c52:	4605      	mov	r5, r0
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	f000 80ca 	beq.w	8016dee <rmw_init+0x1b2>
 8016c5a:	4b78      	ldr	r3, [pc, #480]	; (8016e3c <rmw_init+0x200>)
 8016c5c:	6880      	ldr	r0, [r0, #8]
 8016c5e:	681f      	ldr	r7, [r3, #0]
 8016c60:	b128      	cbz	r0, 8016c6e <rmw_init+0x32>
 8016c62:	4639      	mov	r1, r7
 8016c64:	f7e9 fab4 	bl	80001d0 <strcmp>
 8016c68:	2800      	cmp	r0, #0
 8016c6a:	f040 80ca 	bne.w	8016e02 <rmw_init+0x1c6>
 8016c6e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016c72:	4c73      	ldr	r4, [pc, #460]	; (8016e40 <rmw_init+0x204>)
 8016c74:	4973      	ldr	r1, [pc, #460]	; (8016e44 <rmw_init+0x208>)
 8016c76:	4874      	ldr	r0, [pc, #464]	; (8016e48 <rmw_init+0x20c>)
 8016c78:	60b7      	str	r7, [r6, #8]
 8016c7a:	e9c6 2300 	strd	r2, r3, [r6]
 8016c7e:	68eb      	ldr	r3, [r5, #12]
 8016c80:	64b3      	str	r3, [r6, #72]	; 0x48
 8016c82:	2201      	movs	r2, #1
 8016c84:	f7f9 fc4a 	bl	801051c <rmw_uxrce_init_session_memory>
 8016c88:	4620      	mov	r0, r4
 8016c8a:	4970      	ldr	r1, [pc, #448]	; (8016e4c <rmw_init+0x210>)
 8016c8c:	2204      	movs	r2, #4
 8016c8e:	f7f9 fc85 	bl	801059c <rmw_uxrce_init_static_input_buffer_memory>
 8016c92:	f04f 0800 	mov.w	r8, #0
 8016c96:	486c      	ldr	r0, [pc, #432]	; (8016e48 <rmw_init+0x20c>)
 8016c98:	f884 800d 	strb.w	r8, [r4, #13]
 8016c9c:	f7ff feac 	bl	80169f8 <get_memory>
 8016ca0:	2800      	cmp	r0, #0
 8016ca2:	f000 80a9 	beq.w	8016df8 <rmw_init+0x1bc>
 8016ca6:	6884      	ldr	r4, [r0, #8]
 8016ca8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8016caa:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8016cac:	f890 c010 	ldrb.w	ip, [r0, #16]
 8016cb0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8016cb4:	9101      	str	r1, [sp, #4]
 8016cb6:	6a00      	ldr	r0, [r0, #32]
 8016cb8:	9000      	str	r0, [sp, #0]
 8016cba:	f104 0910 	add.w	r9, r4, #16
 8016cbe:	4661      	mov	r1, ip
 8016cc0:	4648      	mov	r0, r9
 8016cc2:	f000 fdd1 	bl	8017868 <uxr_set_custom_transport_callbacks>
 8016cc6:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8016cca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016cce:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8016cd2:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8016cd6:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8016cda:	495d      	ldr	r1, [pc, #372]	; (8016e50 <rmw_init+0x214>)
 8016cdc:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8016ce0:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8016ce4:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8016ce8:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8016cec:	4859      	ldr	r0, [pc, #356]	; (8016e54 <rmw_init+0x218>)
 8016cee:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8016cf2:	2201      	movs	r2, #1
 8016cf4:	64f4      	str	r4, [r6, #76]	; 0x4c
 8016cf6:	f7f9 fbf1 	bl	80104dc <rmw_uxrce_init_node_memory>
 8016cfa:	4957      	ldr	r1, [pc, #348]	; (8016e58 <rmw_init+0x21c>)
 8016cfc:	4857      	ldr	r0, [pc, #348]	; (8016e5c <rmw_init+0x220>)
 8016cfe:	2205      	movs	r2, #5
 8016d00:	f7f9 fbcc 	bl	801049c <rmw_uxrce_init_subscription_memory>
 8016d04:	4956      	ldr	r1, [pc, #344]	; (8016e60 <rmw_init+0x224>)
 8016d06:	4857      	ldr	r0, [pc, #348]	; (8016e64 <rmw_init+0x228>)
 8016d08:	220a      	movs	r2, #10
 8016d0a:	f7f9 fba7 	bl	801045c <rmw_uxrce_init_publisher_memory>
 8016d0e:	4956      	ldr	r1, [pc, #344]	; (8016e68 <rmw_init+0x22c>)
 8016d10:	4856      	ldr	r0, [pc, #344]	; (8016e6c <rmw_init+0x230>)
 8016d12:	2201      	movs	r2, #1
 8016d14:	f7f9 fb62 	bl	80103dc <rmw_uxrce_init_service_memory>
 8016d18:	4955      	ldr	r1, [pc, #340]	; (8016e70 <rmw_init+0x234>)
 8016d1a:	4856      	ldr	r0, [pc, #344]	; (8016e74 <rmw_init+0x238>)
 8016d1c:	2201      	movs	r2, #1
 8016d1e:	f7f9 fb7d 	bl	801041c <rmw_uxrce_init_client_memory>
 8016d22:	4955      	ldr	r1, [pc, #340]	; (8016e78 <rmw_init+0x23c>)
 8016d24:	4855      	ldr	r0, [pc, #340]	; (8016e7c <rmw_init+0x240>)
 8016d26:	220f      	movs	r2, #15
 8016d28:	f7f9 fc18 	bl	801055c <rmw_uxrce_init_topic_memory>
 8016d2c:	4954      	ldr	r1, [pc, #336]	; (8016e80 <rmw_init+0x244>)
 8016d2e:	4855      	ldr	r0, [pc, #340]	; (8016e84 <rmw_init+0x248>)
 8016d30:	2203      	movs	r2, #3
 8016d32:	f7f9 fc53 	bl	80105dc <rmw_uxrce_init_init_options_impl_memory>
 8016d36:	4954      	ldr	r1, [pc, #336]	; (8016e88 <rmw_init+0x24c>)
 8016d38:	4854      	ldr	r0, [pc, #336]	; (8016e8c <rmw_init+0x250>)
 8016d3a:	2204      	movs	r2, #4
 8016d3c:	f7f9 fc6e 	bl	801061c <rmw_uxrce_init_wait_set_memory>
 8016d40:	4953      	ldr	r1, [pc, #332]	; (8016e90 <rmw_init+0x254>)
 8016d42:	4854      	ldr	r0, [pc, #336]	; (8016e94 <rmw_init+0x258>)
 8016d44:	2204      	movs	r2, #4
 8016d46:	f7f9 fc89 	bl	801065c <rmw_uxrce_init_guard_condition_memory>
 8016d4a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8016d4c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8016d4e:	4642      	mov	r2, r8
 8016d50:	f000 fb18 	bl	8017384 <rmw_uxrce_transport_init>
 8016d54:	4607      	mov	r7, r0
 8016d56:	2800      	cmp	r0, #0
 8016d58:	d158      	bne.n	8016e0c <rmw_init+0x1d0>
 8016d5a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8016d5c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8016d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016d62:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8016d66:	4628      	mov	r0, r5
 8016d68:	f7fc f84e 	bl	8012e08 <uxr_init_session>
 8016d6c:	494a      	ldr	r1, [pc, #296]	; (8016e98 <rmw_init+0x25c>)
 8016d6e:	4622      	mov	r2, r4
 8016d70:	4628      	mov	r0, r5
 8016d72:	f7fc f86d 	bl	8012e50 <uxr_set_topic_callback>
 8016d76:	4949      	ldr	r1, [pc, #292]	; (8016e9c <rmw_init+0x260>)
 8016d78:	463a      	mov	r2, r7
 8016d7a:	4628      	mov	r0, r5
 8016d7c:	f7fc f864 	bl	8012e48 <uxr_set_status_callback>
 8016d80:	4947      	ldr	r1, [pc, #284]	; (8016ea0 <rmw_init+0x264>)
 8016d82:	463a      	mov	r2, r7
 8016d84:	4628      	mov	r0, r5
 8016d86:	f7fc f867 	bl	8012e58 <uxr_set_request_callback>
 8016d8a:	4946      	ldr	r1, [pc, #280]	; (8016ea4 <rmw_init+0x268>)
 8016d8c:	463a      	mov	r2, r7
 8016d8e:	4628      	mov	r0, r5
 8016d90:	f7fc f866 	bl	8012e60 <uxr_set_reply_callback>
 8016d94:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8016d98:	2304      	movs	r3, #4
 8016d9a:	0092      	lsls	r2, r2, #2
 8016d9c:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8016da0:	4628      	mov	r0, r5
 8016da2:	f7fc f89b 	bl	8012edc <uxr_create_input_reliable_stream>
 8016da6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8016daa:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8016dae:	0092      	lsls	r2, r2, #2
 8016db0:	2304      	movs	r3, #4
 8016db2:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8016db6:	4628      	mov	r0, r5
 8016db8:	f7fc f868 	bl	8012e8c <uxr_create_output_reliable_stream>
 8016dbc:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8016dc0:	4628      	mov	r0, r5
 8016dc2:	f7fc f885 	bl	8012ed0 <uxr_create_input_best_effort_stream>
 8016dc6:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 8016dca:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8016dce:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8016dd2:	3114      	adds	r1, #20
 8016dd4:	4628      	mov	r0, r5
 8016dd6:	f7fc f847 	bl	8012e68 <uxr_create_output_best_effort_stream>
 8016dda:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8016dde:	4628      	mov	r0, r5
 8016de0:	f7fc fd98 	bl	8013914 <uxr_create_session>
 8016de4:	b1f8      	cbz	r0, 8016e26 <rmw_init+0x1ea>
 8016de6:	4638      	mov	r0, r7
 8016de8:	b003      	add	sp, #12
 8016dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016dee:	270b      	movs	r7, #11
 8016df0:	4638      	mov	r0, r7
 8016df2:	b003      	add	sp, #12
 8016df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016df8:	2701      	movs	r7, #1
 8016dfa:	4638      	mov	r0, r7
 8016dfc:	b003      	add	sp, #12
 8016dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e02:	270c      	movs	r7, #12
 8016e04:	4638      	mov	r0, r7
 8016e06:	b003      	add	sp, #12
 8016e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e0c:	4648      	mov	r0, r9
 8016e0e:	f000 fd6d 	bl	80178ec <uxr_close_custom_transport>
 8016e12:	480d      	ldr	r0, [pc, #52]	; (8016e48 <rmw_init+0x20c>)
 8016e14:	4621      	mov	r1, r4
 8016e16:	f7ff fdff 	bl	8016a18 <put_memory>
 8016e1a:	4638      	mov	r0, r7
 8016e1c:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8016e20:	b003      	add	sp, #12
 8016e22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e26:	4648      	mov	r0, r9
 8016e28:	f000 fd60 	bl	80178ec <uxr_close_custom_transport>
 8016e2c:	4806      	ldr	r0, [pc, #24]	; (8016e48 <rmw_init+0x20c>)
 8016e2e:	4621      	mov	r1, r4
 8016e30:	f7ff fdf2 	bl	8016a18 <put_memory>
 8016e34:	64f7      	str	r7, [r6, #76]	; 0x4c
 8016e36:	2701      	movs	r7, #1
 8016e38:	e7d5      	b.n	8016de6 <rmw_init+0x1aa>
 8016e3a:	bf00      	nop
 8016e3c:	0801be7c 	.word	0x0801be7c
 8016e40:	200156cc 	.word	0x200156cc
 8016e44:	20011978 	.word	0x20011978
 8016e48:	200156bc 	.word	0x200156bc
 8016e4c:	20012f20 	.word	0x20012f20
 8016e50:	20010f9c 	.word	0x20010f9c
 8016e54:	2001568c 	.word	0x2001568c
 8016e58:	20015020 	.word	0x20015020
 8016e5c:	200156dc 	.word	0x200156dc
 8016e60:	20011040 	.word	0x20011040
 8016e64:	2001569c 	.word	0x2001569c
 8016e68:	200118b0 	.word	0x200118b0
 8016e6c:	200156ac 	.word	0x200156ac
 8016e70:	20010dd0 	.word	0x20010dd0
 8016e74:	20010dc0 	.word	0x20010dc0
 8016e78:	20015458 	.word	0x20015458
 8016e7c:	200156ec 	.word	0x200156ec
 8016e80:	20010f18 	.word	0x20010f18
 8016e84:	2001567c 	.word	0x2001567c
 8016e88:	200155fc 	.word	0x200155fc
 8016e8c:	200156fc 	.word	0x200156fc
 8016e90:	20010e98 	.word	0x20010e98
 8016e94:	2001566c 	.word	0x2001566c
 8016e98:	080194e5 	.word	0x080194e5
 8016e9c:	080194dd 	.word	0x080194dd
 8016ea0:	0801957d 	.word	0x0801957d
 8016ea4:	08019619 	.word	0x08019619

08016ea8 <rmw_context_fini>:
 8016ea8:	4b17      	ldr	r3, [pc, #92]	; (8016f08 <rmw_context_fini+0x60>)
 8016eaa:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8016eac:	b570      	push	{r4, r5, r6, lr}
 8016eae:	681c      	ldr	r4, [r3, #0]
 8016eb0:	4605      	mov	r5, r0
 8016eb2:	b334      	cbz	r4, 8016f02 <rmw_context_fini+0x5a>
 8016eb4:	2600      	movs	r6, #0
 8016eb6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8016eba:	6902      	ldr	r2, [r0, #16]
 8016ebc:	428a      	cmp	r2, r1
 8016ebe:	d018      	beq.n	8016ef2 <rmw_context_fini+0x4a>
 8016ec0:	2c00      	cmp	r4, #0
 8016ec2:	d1f8      	bne.n	8016eb6 <rmw_context_fini+0xe>
 8016ec4:	b189      	cbz	r1, 8016eea <rmw_context_fini+0x42>
 8016ec6:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8016eca:	789b      	ldrb	r3, [r3, #2]
 8016ecc:	2b01      	cmp	r3, #1
 8016ece:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8016ed2:	bf14      	ite	ne
 8016ed4:	210a      	movne	r1, #10
 8016ed6:	2100      	moveq	r1, #0
 8016ed8:	f7fc fcf4 	bl	80138c4 <uxr_delete_session_retries>
 8016edc:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8016ede:	f7f9 fbdd 	bl	801069c <rmw_uxrce_fini_session_memory>
 8016ee2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8016ee4:	3010      	adds	r0, #16
 8016ee6:	f000 fd01 	bl	80178ec <uxr_close_custom_transport>
 8016eea:	2300      	movs	r3, #0
 8016eec:	64eb      	str	r3, [r5, #76]	; 0x4c
 8016eee:	4630      	mov	r0, r6
 8016ef0:	bd70      	pop	{r4, r5, r6, pc}
 8016ef2:	3018      	adds	r0, #24
 8016ef4:	f000 f922 	bl	801713c <rmw_destroy_node>
 8016ef8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8016efa:	4606      	mov	r6, r0
 8016efc:	2c00      	cmp	r4, #0
 8016efe:	d1da      	bne.n	8016eb6 <rmw_context_fini+0xe>
 8016f00:	e7e0      	b.n	8016ec4 <rmw_context_fini+0x1c>
 8016f02:	4626      	mov	r6, r4
 8016f04:	e7de      	b.n	8016ec4 <rmw_context_fini+0x1c>
 8016f06:	bf00      	nop
 8016f08:	2001568c 	.word	0x2001568c

08016f0c <create_topic>:
 8016f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f10:	4605      	mov	r5, r0
 8016f12:	b084      	sub	sp, #16
 8016f14:	482c      	ldr	r0, [pc, #176]	; (8016fc8 <create_topic+0xbc>)
 8016f16:	460f      	mov	r7, r1
 8016f18:	4616      	mov	r6, r2
 8016f1a:	f7ff fd6d 	bl	80169f8 <get_memory>
 8016f1e:	4604      	mov	r4, r0
 8016f20:	2800      	cmp	r0, #0
 8016f22:	d038      	beq.n	8016f96 <create_topic+0x8a>
 8016f24:	692b      	ldr	r3, [r5, #16]
 8016f26:	6884      	ldr	r4, [r0, #8]
 8016f28:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8016fd0 <create_topic+0xc4>
 8016f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016f30:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8016f34:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8016f38:	1c42      	adds	r2, r0, #1
 8016f3a:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8016f3e:	2102      	movs	r1, #2
 8016f40:	f7fb fea4 	bl	8012c8c <uxr_object_id>
 8016f44:	223c      	movs	r2, #60	; 0x3c
 8016f46:	6120      	str	r0, [r4, #16]
 8016f48:	4641      	mov	r1, r8
 8016f4a:	4638      	mov	r0, r7
 8016f4c:	f7f9 fcde 	bl	801090c <generate_topic_name>
 8016f50:	4607      	mov	r7, r0
 8016f52:	b320      	cbz	r0, 8016f9e <create_topic+0x92>
 8016f54:	4f1d      	ldr	r7, [pc, #116]	; (8016fcc <create_topic+0xc0>)
 8016f56:	4630      	mov	r0, r6
 8016f58:	2264      	movs	r2, #100	; 0x64
 8016f5a:	4639      	mov	r1, r7
 8016f5c:	f7f9 fca6 	bl	80108ac <generate_type_name>
 8016f60:	4606      	mov	r6, r0
 8016f62:	b320      	cbz	r0, 8016fae <create_topic+0xa2>
 8016f64:	6928      	ldr	r0, [r5, #16]
 8016f66:	2306      	movs	r3, #6
 8016f68:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8016f6c:	f8cd 8000 	str.w	r8, [sp]
 8016f70:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8016f74:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016f78:	696b      	ldr	r3, [r5, #20]
 8016f7a:	6811      	ldr	r1, [r2, #0]
 8016f7c:	6922      	ldr	r2, [r4, #16]
 8016f7e:	f7fb fda9 	bl	8012ad4 <uxr_buffer_create_topic_bin>
 8016f82:	4602      	mov	r2, r0
 8016f84:	6928      	ldr	r0, [r5, #16]
 8016f86:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8016f8a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8016f8e:	f7f9 fc57 	bl	8010840 <run_xrce_session>
 8016f92:	4605      	mov	r5, r0
 8016f94:	b198      	cbz	r0, 8016fbe <create_topic+0xb2>
 8016f96:	4620      	mov	r0, r4
 8016f98:	b004      	add	sp, #16
 8016f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f9e:	4620      	mov	r0, r4
 8016fa0:	f7f9 fbf2 	bl	8010788 <rmw_uxrce_fini_topic_memory>
 8016fa4:	463c      	mov	r4, r7
 8016fa6:	4620      	mov	r0, r4
 8016fa8:	b004      	add	sp, #16
 8016faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fae:	4620      	mov	r0, r4
 8016fb0:	f7f9 fbea 	bl	8010788 <rmw_uxrce_fini_topic_memory>
 8016fb4:	4634      	mov	r4, r6
 8016fb6:	4620      	mov	r0, r4
 8016fb8:	b004      	add	sp, #16
 8016fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fbe:	4620      	mov	r0, r4
 8016fc0:	f7f9 fbe2 	bl	8010788 <rmw_uxrce_fini_topic_memory>
 8016fc4:	462c      	mov	r4, r5
 8016fc6:	e7e6      	b.n	8016f96 <create_topic+0x8a>
 8016fc8:	200156ec 	.word	0x200156ec
 8016fcc:	20015768 	.word	0x20015768
 8016fd0:	2001572c 	.word	0x2001572c

08016fd4 <destroy_topic>:
 8016fd4:	b538      	push	{r3, r4, r5, lr}
 8016fd6:	6985      	ldr	r5, [r0, #24]
 8016fd8:	b1d5      	cbz	r5, 8017010 <destroy_topic+0x3c>
 8016fda:	4604      	mov	r4, r0
 8016fdc:	6928      	ldr	r0, [r5, #16]
 8016fde:	6922      	ldr	r2, [r4, #16]
 8016fe0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8016fe4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8016fe8:	6819      	ldr	r1, [r3, #0]
 8016fea:	f7fb fcf5 	bl	80129d8 <uxr_buffer_delete_entity>
 8016fee:	4602      	mov	r2, r0
 8016ff0:	6928      	ldr	r0, [r5, #16]
 8016ff2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8016ff6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8016ffa:	f7f9 fc21 	bl	8010840 <run_xrce_session>
 8016ffe:	2800      	cmp	r0, #0
 8017000:	4620      	mov	r0, r4
 8017002:	bf14      	ite	ne
 8017004:	2400      	movne	r4, #0
 8017006:	2402      	moveq	r4, #2
 8017008:	f7f9 fbbe 	bl	8010788 <rmw_uxrce_fini_topic_memory>
 801700c:	4620      	mov	r0, r4
 801700e:	bd38      	pop	{r3, r4, r5, pc}
 8017010:	2401      	movs	r4, #1
 8017012:	4620      	mov	r0, r4
 8017014:	bd38      	pop	{r3, r4, r5, pc}
 8017016:	bf00      	nop

08017018 <create_node>:
 8017018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801701c:	b083      	sub	sp, #12
 801701e:	2b00      	cmp	r3, #0
 8017020:	d05f      	beq.n	80170e2 <create_node+0xca>
 8017022:	4606      	mov	r6, r0
 8017024:	4835      	ldr	r0, [pc, #212]	; (80170fc <create_node+0xe4>)
 8017026:	460f      	mov	r7, r1
 8017028:	4690      	mov	r8, r2
 801702a:	461d      	mov	r5, r3
 801702c:	f7ff fce4 	bl	80169f8 <get_memory>
 8017030:	2800      	cmp	r0, #0
 8017032:	d056      	beq.n	80170e2 <create_node+0xca>
 8017034:	6884      	ldr	r4, [r0, #8]
 8017036:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8017038:	6123      	str	r3, [r4, #16]
 801703a:	f7ff fd01 	bl	8016a40 <rmw_get_implementation_identifier>
 801703e:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8017042:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8017046:	f8c4 9020 	str.w	r9, [r4, #32]
 801704a:	4630      	mov	r0, r6
 801704c:	f7e9 f8ca 	bl	80001e4 <strlen>
 8017050:	1c42      	adds	r2, r0, #1
 8017052:	2a3c      	cmp	r2, #60	; 0x3c
 8017054:	f104 0518 	add.w	r5, r4, #24
 8017058:	d840      	bhi.n	80170dc <create_node+0xc4>
 801705a:	4648      	mov	r0, r9
 801705c:	4631      	mov	r1, r6
 801705e:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8017062:	f002 fdf3 	bl	8019c4c <memcpy>
 8017066:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 801706a:	4638      	mov	r0, r7
 801706c:	f7e9 f8ba 	bl	80001e4 <strlen>
 8017070:	1c42      	adds	r2, r0, #1
 8017072:	2a3c      	cmp	r2, #60	; 0x3c
 8017074:	d832      	bhi.n	80170dc <create_node+0xc4>
 8017076:	4639      	mov	r1, r7
 8017078:	4648      	mov	r0, r9
 801707a:	f002 fde7 	bl	8019c4c <memcpy>
 801707e:	6923      	ldr	r3, [r4, #16]
 8017080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017084:	2101      	movs	r1, #1
 8017086:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 801708a:	1842      	adds	r2, r0, r1
 801708c:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8017090:	f7fb fdfc 	bl	8012c8c <uxr_object_id>
 8017094:	6160      	str	r0, [r4, #20]
 8017096:	783b      	ldrb	r3, [r7, #0]
 8017098:	2b2f      	cmp	r3, #47	; 0x2f
 801709a:	d127      	bne.n	80170ec <create_node+0xd4>
 801709c:	787b      	ldrb	r3, [r7, #1]
 801709e:	bb2b      	cbnz	r3, 80170ec <create_node+0xd4>
 80170a0:	4a17      	ldr	r2, [pc, #92]	; (8017100 <create_node+0xe8>)
 80170a2:	4818      	ldr	r0, [pc, #96]	; (8017104 <create_node+0xec>)
 80170a4:	4633      	mov	r3, r6
 80170a6:	213c      	movs	r1, #60	; 0x3c
 80170a8:	f002 ffe2 	bl	801a070 <sniprintf>
 80170ac:	6920      	ldr	r0, [r4, #16]
 80170ae:	4915      	ldr	r1, [pc, #84]	; (8017104 <create_node+0xec>)
 80170b0:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80170b4:	9100      	str	r1, [sp, #0]
 80170b6:	2106      	movs	r1, #6
 80170b8:	9101      	str	r1, [sp, #4]
 80170ba:	6811      	ldr	r1, [r2, #0]
 80170bc:	6962      	ldr	r2, [r4, #20]
 80170be:	fa1f f388 	uxth.w	r3, r8
 80170c2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80170c6:	f7fb fcd3 	bl	8012a70 <uxr_buffer_create_participant_bin>
 80170ca:	4602      	mov	r2, r0
 80170cc:	6920      	ldr	r0, [r4, #16]
 80170ce:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80170d2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80170d6:	f7f9 fbb3 	bl	8010840 <run_xrce_session>
 80170da:	b918      	cbnz	r0, 80170e4 <create_node+0xcc>
 80170dc:	4628      	mov	r0, r5
 80170de:	f7f9 fae3 	bl	80106a8 <rmw_uxrce_fini_node_memory>
 80170e2:	2500      	movs	r5, #0
 80170e4:	4628      	mov	r0, r5
 80170e6:	b003      	add	sp, #12
 80170e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80170ec:	4a06      	ldr	r2, [pc, #24]	; (8017108 <create_node+0xf0>)
 80170ee:	9600      	str	r6, [sp, #0]
 80170f0:	463b      	mov	r3, r7
 80170f2:	213c      	movs	r1, #60	; 0x3c
 80170f4:	4803      	ldr	r0, [pc, #12]	; (8017104 <create_node+0xec>)
 80170f6:	f002 ffbb 	bl	801a070 <sniprintf>
 80170fa:	e7d7      	b.n	80170ac <create_node+0x94>
 80170fc:	2001568c 	.word	0x2001568c
 8017100:	0801b498 	.word	0x0801b498
 8017104:	200157cc 	.word	0x200157cc
 8017108:	0801ba24 	.word	0x0801ba24

0801710c <rmw_create_node>:
 801710c:	b199      	cbz	r1, 8017136 <rmw_create_node+0x2a>
 801710e:	780b      	ldrb	r3, [r1, #0]
 8017110:	468c      	mov	ip, r1
 8017112:	b183      	cbz	r3, 8017136 <rmw_create_node+0x2a>
 8017114:	b410      	push	{r4}
 8017116:	4614      	mov	r4, r2
 8017118:	b14a      	cbz	r2, 801712e <rmw_create_node+0x22>
 801711a:	7813      	ldrb	r3, [r2, #0]
 801711c:	b13b      	cbz	r3, 801712e <rmw_create_node+0x22>
 801711e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8017120:	4603      	mov	r3, r0
 8017122:	4621      	mov	r1, r4
 8017124:	4660      	mov	r0, ip
 8017126:	f85d 4b04 	ldr.w	r4, [sp], #4
 801712a:	f7ff bf75 	b.w	8017018 <create_node>
 801712e:	2000      	movs	r0, #0
 8017130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017134:	4770      	bx	lr
 8017136:	2000      	movs	r0, #0
 8017138:	4770      	bx	lr
 801713a:	bf00      	nop

0801713c <rmw_destroy_node>:
 801713c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801713e:	2800      	cmp	r0, #0
 8017140:	d066      	beq.n	8017210 <rmw_destroy_node+0xd4>
 8017142:	4607      	mov	r7, r0
 8017144:	6800      	ldr	r0, [r0, #0]
 8017146:	b128      	cbz	r0, 8017154 <rmw_destroy_node+0x18>
 8017148:	4b34      	ldr	r3, [pc, #208]	; (801721c <rmw_destroy_node+0xe0>)
 801714a:	6819      	ldr	r1, [r3, #0]
 801714c:	f7e9 f840 	bl	80001d0 <strcmp>
 8017150:	2800      	cmp	r0, #0
 8017152:	d15d      	bne.n	8017210 <rmw_destroy_node+0xd4>
 8017154:	687c      	ldr	r4, [r7, #4]
 8017156:	2c00      	cmp	r4, #0
 8017158:	d05a      	beq.n	8017210 <rmw_destroy_node+0xd4>
 801715a:	4b31      	ldr	r3, [pc, #196]	; (8017220 <rmw_destroy_node+0xe4>)
 801715c:	681d      	ldr	r5, [r3, #0]
 801715e:	2d00      	cmp	r5, #0
 8017160:	d059      	beq.n	8017216 <rmw_destroy_node+0xda>
 8017162:	2600      	movs	r6, #0
 8017164:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8017168:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 801716c:	429c      	cmp	r4, r3
 801716e:	d047      	beq.n	8017200 <rmw_destroy_node+0xc4>
 8017170:	2d00      	cmp	r5, #0
 8017172:	d1f7      	bne.n	8017164 <rmw_destroy_node+0x28>
 8017174:	4b2b      	ldr	r3, [pc, #172]	; (8017224 <rmw_destroy_node+0xe8>)
 8017176:	681d      	ldr	r5, [r3, #0]
 8017178:	b15d      	cbz	r5, 8017192 <rmw_destroy_node+0x56>
 801717a:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 801717e:	6a0b      	ldr	r3, [r1, #32]
 8017180:	429c      	cmp	r4, r3
 8017182:	d1f9      	bne.n	8017178 <rmw_destroy_node+0x3c>
 8017184:	317c      	adds	r1, #124	; 0x7c
 8017186:	4638      	mov	r0, r7
 8017188:	f000 f89c 	bl	80172c4 <rmw_destroy_subscription>
 801718c:	4606      	mov	r6, r0
 801718e:	2d00      	cmp	r5, #0
 8017190:	d1f3      	bne.n	801717a <rmw_destroy_node+0x3e>
 8017192:	4b25      	ldr	r3, [pc, #148]	; (8017228 <rmw_destroy_node+0xec>)
 8017194:	681d      	ldr	r5, [r3, #0]
 8017196:	b15d      	cbz	r5, 80171b0 <rmw_destroy_node+0x74>
 8017198:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 801719c:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801719e:	429c      	cmp	r4, r3
 80171a0:	d1f9      	bne.n	8017196 <rmw_destroy_node+0x5a>
 80171a2:	317c      	adds	r1, #124	; 0x7c
 80171a4:	4638      	mov	r0, r7
 80171a6:	f000 f849 	bl	801723c <rmw_destroy_service>
 80171aa:	4606      	mov	r6, r0
 80171ac:	2d00      	cmp	r5, #0
 80171ae:	d1f3      	bne.n	8017198 <rmw_destroy_node+0x5c>
 80171b0:	4b1e      	ldr	r3, [pc, #120]	; (801722c <rmw_destroy_node+0xf0>)
 80171b2:	681d      	ldr	r5, [r3, #0]
 80171b4:	b15d      	cbz	r5, 80171ce <rmw_destroy_node+0x92>
 80171b6:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 80171ba:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 80171bc:	429c      	cmp	r4, r3
 80171be:	d1f9      	bne.n	80171b4 <rmw_destroy_node+0x78>
 80171c0:	317c      	adds	r1, #124	; 0x7c
 80171c2:	4638      	mov	r0, r7
 80171c4:	f002 fa72 	bl	80196ac <rmw_destroy_client>
 80171c8:	4606      	mov	r6, r0
 80171ca:	2d00      	cmp	r5, #0
 80171cc:	d1f3      	bne.n	80171b6 <rmw_destroy_node+0x7a>
 80171ce:	6920      	ldr	r0, [r4, #16]
 80171d0:	6962      	ldr	r2, [r4, #20]
 80171d2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80171d6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80171da:	6819      	ldr	r1, [r3, #0]
 80171dc:	f7fb fbfc 	bl	80129d8 <uxr_buffer_delete_entity>
 80171e0:	4602      	mov	r2, r0
 80171e2:	6920      	ldr	r0, [r4, #16]
 80171e4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80171e8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80171ec:	f7f9 fb28 	bl	8010840 <run_xrce_session>
 80171f0:	2800      	cmp	r0, #0
 80171f2:	bf08      	it	eq
 80171f4:	2602      	moveq	r6, #2
 80171f6:	4638      	mov	r0, r7
 80171f8:	f7f9 fa56 	bl	80106a8 <rmw_uxrce_fini_node_memory>
 80171fc:	4630      	mov	r0, r6
 80171fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017200:	3184      	adds	r1, #132	; 0x84
 8017202:	4638      	mov	r0, r7
 8017204:	f7f9 f898 	bl	8010338 <rmw_destroy_publisher>
 8017208:	4606      	mov	r6, r0
 801720a:	2d00      	cmp	r5, #0
 801720c:	d1aa      	bne.n	8017164 <rmw_destroy_node+0x28>
 801720e:	e7b1      	b.n	8017174 <rmw_destroy_node+0x38>
 8017210:	2601      	movs	r6, #1
 8017212:	4630      	mov	r0, r6
 8017214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017216:	462e      	mov	r6, r5
 8017218:	e7ac      	b.n	8017174 <rmw_destroy_node+0x38>
 801721a:	bf00      	nop
 801721c:	0801be7c 	.word	0x0801be7c
 8017220:	2001569c 	.word	0x2001569c
 8017224:	200156dc 	.word	0x200156dc
 8017228:	200156ac 	.word	0x200156ac
 801722c:	20010dc0 	.word	0x20010dc0

08017230 <rmw_node_get_graph_guard_condition>:
 8017230:	6843      	ldr	r3, [r0, #4]
 8017232:	6918      	ldr	r0, [r3, #16]
 8017234:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8017238:	4770      	bx	lr
 801723a:	bf00      	nop

0801723c <rmw_destroy_service>:
 801723c:	b570      	push	{r4, r5, r6, lr}
 801723e:	b128      	cbz	r0, 801724c <rmw_destroy_service+0x10>
 8017240:	4604      	mov	r4, r0
 8017242:	6800      	ldr	r0, [r0, #0]
 8017244:	460d      	mov	r5, r1
 8017246:	f7f9 fb7b 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 801724a:	b910      	cbnz	r0, 8017252 <rmw_destroy_service+0x16>
 801724c:	2401      	movs	r4, #1
 801724e:	4620      	mov	r0, r4
 8017250:	bd70      	pop	{r4, r5, r6, pc}
 8017252:	6863      	ldr	r3, [r4, #4]
 8017254:	2b00      	cmp	r3, #0
 8017256:	d0f9      	beq.n	801724c <rmw_destroy_service+0x10>
 8017258:	2d00      	cmp	r5, #0
 801725a:	d0f7      	beq.n	801724c <rmw_destroy_service+0x10>
 801725c:	6828      	ldr	r0, [r5, #0]
 801725e:	f7f9 fb6f 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 8017262:	2800      	cmp	r0, #0
 8017264:	d0f2      	beq.n	801724c <rmw_destroy_service+0x10>
 8017266:	686e      	ldr	r6, [r5, #4]
 8017268:	2e00      	cmp	r6, #0
 801726a:	d0ef      	beq.n	801724c <rmw_destroy_service+0x10>
 801726c:	6864      	ldr	r4, [r4, #4]
 801726e:	6932      	ldr	r2, [r6, #16]
 8017270:	6920      	ldr	r0, [r4, #16]
 8017272:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017276:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801727a:	6819      	ldr	r1, [r3, #0]
 801727c:	f001 f870 	bl	8018360 <uxr_buffer_cancel_data>
 8017280:	4602      	mov	r2, r0
 8017282:	6920      	ldr	r0, [r4, #16]
 8017284:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017288:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801728c:	f7f9 fad8 	bl	8010840 <run_xrce_session>
 8017290:	6920      	ldr	r0, [r4, #16]
 8017292:	6932      	ldr	r2, [r6, #16]
 8017294:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017298:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801729c:	6819      	ldr	r1, [r3, #0]
 801729e:	f7fb fb9b 	bl	80129d8 <uxr_buffer_delete_entity>
 80172a2:	4602      	mov	r2, r0
 80172a4:	6920      	ldr	r0, [r4, #16]
 80172a6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80172aa:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80172ae:	f7f9 fac7 	bl	8010840 <run_xrce_session>
 80172b2:	2800      	cmp	r0, #0
 80172b4:	4628      	mov	r0, r5
 80172b6:	bf14      	ite	ne
 80172b8:	2400      	movne	r4, #0
 80172ba:	2402      	moveq	r4, #2
 80172bc:	f7f9 fa38 	bl	8010730 <rmw_uxrce_fini_service_memory>
 80172c0:	e7c5      	b.n	801724e <rmw_destroy_service+0x12>
 80172c2:	bf00      	nop

080172c4 <rmw_destroy_subscription>:
 80172c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172c6:	b128      	cbz	r0, 80172d4 <rmw_destroy_subscription+0x10>
 80172c8:	4604      	mov	r4, r0
 80172ca:	6800      	ldr	r0, [r0, #0]
 80172cc:	460d      	mov	r5, r1
 80172ce:	f7f9 fb37 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 80172d2:	b910      	cbnz	r0, 80172da <rmw_destroy_subscription+0x16>
 80172d4:	2401      	movs	r4, #1
 80172d6:	4620      	mov	r0, r4
 80172d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172da:	6863      	ldr	r3, [r4, #4]
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d0f9      	beq.n	80172d4 <rmw_destroy_subscription+0x10>
 80172e0:	2d00      	cmp	r5, #0
 80172e2:	d0f7      	beq.n	80172d4 <rmw_destroy_subscription+0x10>
 80172e4:	6828      	ldr	r0, [r5, #0]
 80172e6:	f7f9 fb2b 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 80172ea:	2800      	cmp	r0, #0
 80172ec:	d0f2      	beq.n	80172d4 <rmw_destroy_subscription+0x10>
 80172ee:	686c      	ldr	r4, [r5, #4]
 80172f0:	2c00      	cmp	r4, #0
 80172f2:	d0ef      	beq.n	80172d4 <rmw_destroy_subscription+0x10>
 80172f4:	6a26      	ldr	r6, [r4, #32]
 80172f6:	6962      	ldr	r2, [r4, #20]
 80172f8:	6930      	ldr	r0, [r6, #16]
 80172fa:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80172fe:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017302:	6819      	ldr	r1, [r3, #0]
 8017304:	f001 f82c 	bl	8018360 <uxr_buffer_cancel_data>
 8017308:	4602      	mov	r2, r0
 801730a:	6930      	ldr	r0, [r6, #16]
 801730c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017310:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017314:	f7f9 fa94 	bl	8010840 <run_xrce_session>
 8017318:	69e0      	ldr	r0, [r4, #28]
 801731a:	f7ff fe5b 	bl	8016fd4 <destroy_topic>
 801731e:	6a23      	ldr	r3, [r4, #32]
 8017320:	6962      	ldr	r2, [r4, #20]
 8017322:	6918      	ldr	r0, [r3, #16]
 8017324:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017328:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801732c:	6819      	ldr	r1, [r3, #0]
 801732e:	f7fb fb53 	bl	80129d8 <uxr_buffer_delete_entity>
 8017332:	6a23      	ldr	r3, [r4, #32]
 8017334:	6922      	ldr	r2, [r4, #16]
 8017336:	691b      	ldr	r3, [r3, #16]
 8017338:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 801733c:	4604      	mov	r4, r0
 801733e:	6809      	ldr	r1, [r1, #0]
 8017340:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8017344:	f7fb fb48 	bl	80129d8 <uxr_buffer_delete_entity>
 8017348:	6937      	ldr	r7, [r6, #16]
 801734a:	4622      	mov	r2, r4
 801734c:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8017350:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8017354:	4604      	mov	r4, r0
 8017356:	4638      	mov	r0, r7
 8017358:	f7f9 fa72 	bl	8010840 <run_xrce_session>
 801735c:	6936      	ldr	r6, [r6, #16]
 801735e:	4622      	mov	r2, r4
 8017360:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8017364:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8017368:	4604      	mov	r4, r0
 801736a:	4630      	mov	r0, r6
 801736c:	f7f9 fa68 	bl	8010840 <run_xrce_session>
 8017370:	b12c      	cbz	r4, 801737e <rmw_destroy_subscription+0xba>
 8017372:	b120      	cbz	r0, 801737e <rmw_destroy_subscription+0xba>
 8017374:	2400      	movs	r4, #0
 8017376:	4628      	mov	r0, r5
 8017378:	f7f9 f9c4 	bl	8010704 <rmw_uxrce_fini_subscription_memory>
 801737c:	e7ab      	b.n	80172d6 <rmw_destroy_subscription+0x12>
 801737e:	2402      	movs	r4, #2
 8017380:	e7f9      	b.n	8017376 <rmw_destroy_subscription+0xb2>
 8017382:	bf00      	nop

08017384 <rmw_uxrce_transport_init>:
 8017384:	b508      	push	{r3, lr}
 8017386:	b108      	cbz	r0, 801738c <rmw_uxrce_transport_init+0x8>
 8017388:	f100 0210 	add.w	r2, r0, #16
 801738c:	b139      	cbz	r1, 801739e <rmw_uxrce_transport_init+0x1a>
 801738e:	6949      	ldr	r1, [r1, #20]
 8017390:	4610      	mov	r0, r2
 8017392:	f000 fa77 	bl	8017884 <uxr_init_custom_transport>
 8017396:	f080 0001 	eor.w	r0, r0, #1
 801739a:	b2c0      	uxtb	r0, r0
 801739c:	bd08      	pop	{r3, pc}
 801739e:	4b04      	ldr	r3, [pc, #16]	; (80173b0 <rmw_uxrce_transport_init+0x2c>)
 80173a0:	4610      	mov	r0, r2
 80173a2:	6859      	ldr	r1, [r3, #4]
 80173a4:	f000 fa6e 	bl	8017884 <uxr_init_custom_transport>
 80173a8:	f080 0001 	eor.w	r0, r0, #1
 80173ac:	b2c0      	uxtb	r0, r0
 80173ae:	bd08      	pop	{r3, pc}
 80173b0:	20010da4 	.word	0x20010da4

080173b4 <rmw_uros_epoch_nanos>:
 80173b4:	4b05      	ldr	r3, [pc, #20]	; (80173cc <rmw_uros_epoch_nanos+0x18>)
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	b123      	cbz	r3, 80173c4 <rmw_uros_epoch_nanos+0x10>
 80173ba:	6898      	ldr	r0, [r3, #8]
 80173bc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80173c0:	f7fb bda8 	b.w	8012f14 <uxr_epoch_nanos>
 80173c4:	2000      	movs	r0, #0
 80173c6:	2100      	movs	r1, #0
 80173c8:	4770      	bx	lr
 80173ca:	bf00      	nop
 80173cc:	200156bc 	.word	0x200156bc

080173d0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80173d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173d4:	6805      	ldr	r5, [r0, #0]
 80173d6:	4604      	mov	r4, r0
 80173d8:	4628      	mov	r0, r5
 80173da:	460e      	mov	r6, r1
 80173dc:	f7e8 fef8 	bl	80001d0 <strcmp>
 80173e0:	b1c8      	cbz	r0, 8017416 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80173e2:	4b11      	ldr	r3, [pc, #68]	; (8017428 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80173e4:	681b      	ldr	r3, [r3, #0]
 80173e6:	429d      	cmp	r5, r3
 80173e8:	d112      	bne.n	8017410 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80173ea:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80173ee:	f8d8 4000 	ldr.w	r4, [r8]
 80173f2:	b16c      	cbz	r4, 8017410 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80173f4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80173f8:	2700      	movs	r7, #0
 80173fa:	3d04      	subs	r5, #4
 80173fc:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8017400:	4631      	mov	r1, r6
 8017402:	f7e8 fee5 	bl	80001d0 <strcmp>
 8017406:	00bb      	lsls	r3, r7, #2
 8017408:	b140      	cbz	r0, 801741c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 801740a:	3701      	adds	r7, #1
 801740c:	42bc      	cmp	r4, r7
 801740e:	d1f5      	bne.n	80173fc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8017410:	2000      	movs	r0, #0
 8017412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017416:	4620      	mov	r0, r4
 8017418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801741c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017424:	58d3      	ldr	r3, [r2, r3]
 8017426:	4718      	bx	r3
 8017428:	200005ac 	.word	0x200005ac

0801742c <sensor_msgs__msg__Temperature__init>:
 801742c:	b538      	push	{r3, r4, r5, lr}
 801742e:	4604      	mov	r4, r0
 8017430:	b128      	cbz	r0, 801743e <sensor_msgs__msg__Temperature__init+0x12>
 8017432:	f000 f817 	bl	8017464 <std_msgs__msg__Header__init>
 8017436:	4605      	mov	r5, r0
 8017438:	b120      	cbz	r0, 8017444 <sensor_msgs__msg__Temperature__init+0x18>
 801743a:	4628      	mov	r0, r5
 801743c:	bd38      	pop	{r3, r4, r5, pc}
 801743e:	4605      	mov	r5, r0
 8017440:	4628      	mov	r0, r5
 8017442:	bd38      	pop	{r3, r4, r5, pc}
 8017444:	4620      	mov	r0, r4
 8017446:	f000 f831 	bl	80174ac <std_msgs__msg__Header__fini>
 801744a:	4628      	mov	r0, r5
 801744c:	bd38      	pop	{r3, r4, r5, pc}
 801744e:	bf00      	nop

08017450 <sensor_msgs__msg__Temperature__fini>:
 8017450:	b108      	cbz	r0, 8017456 <sensor_msgs__msg__Temperature__fini+0x6>
 8017452:	f000 b82b 	b.w	80174ac <std_msgs__msg__Header__fini>
 8017456:	4770      	bx	lr

08017458 <std_msgs__msg__ColorRGBA__init>:
 8017458:	3800      	subs	r0, #0
 801745a:	bf18      	it	ne
 801745c:	2001      	movne	r0, #1
 801745e:	4770      	bx	lr

08017460 <std_msgs__msg__ColorRGBA__fini>:
 8017460:	4770      	bx	lr
 8017462:	bf00      	nop

08017464 <std_msgs__msg__Header__init>:
 8017464:	b570      	push	{r4, r5, r6, lr}
 8017466:	4605      	mov	r5, r0
 8017468:	b1a8      	cbz	r0, 8017496 <std_msgs__msg__Header__init+0x32>
 801746a:	f000 f837 	bl	80174dc <builtin_interfaces__msg__Time__init>
 801746e:	4604      	mov	r4, r0
 8017470:	b140      	cbz	r0, 8017484 <std_msgs__msg__Header__init+0x20>
 8017472:	f105 0608 	add.w	r6, r5, #8
 8017476:	4630      	mov	r0, r6
 8017478:	f002 f984 	bl	8019784 <rosidl_runtime_c__String__init>
 801747c:	4604      	mov	r4, r0
 801747e:	b168      	cbz	r0, 801749c <std_msgs__msg__Header__init+0x38>
 8017480:	4620      	mov	r0, r4
 8017482:	bd70      	pop	{r4, r5, r6, pc}
 8017484:	4628      	mov	r0, r5
 8017486:	f000 f82d 	bl	80174e4 <builtin_interfaces__msg__Time__fini>
 801748a:	f105 0008 	add.w	r0, r5, #8
 801748e:	f002 f98f 	bl	80197b0 <rosidl_runtime_c__String__fini>
 8017492:	4620      	mov	r0, r4
 8017494:	bd70      	pop	{r4, r5, r6, pc}
 8017496:	4604      	mov	r4, r0
 8017498:	4620      	mov	r0, r4
 801749a:	bd70      	pop	{r4, r5, r6, pc}
 801749c:	4628      	mov	r0, r5
 801749e:	f000 f821 	bl	80174e4 <builtin_interfaces__msg__Time__fini>
 80174a2:	4630      	mov	r0, r6
 80174a4:	f002 f984 	bl	80197b0 <rosidl_runtime_c__String__fini>
 80174a8:	e7ea      	b.n	8017480 <std_msgs__msg__Header__init+0x1c>
 80174aa:	bf00      	nop

080174ac <std_msgs__msg__Header__fini>:
 80174ac:	b148      	cbz	r0, 80174c2 <std_msgs__msg__Header__fini+0x16>
 80174ae:	b510      	push	{r4, lr}
 80174b0:	4604      	mov	r4, r0
 80174b2:	f000 f817 	bl	80174e4 <builtin_interfaces__msg__Time__fini>
 80174b6:	f104 0008 	add.w	r0, r4, #8
 80174ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174be:	f002 b977 	b.w	80197b0 <rosidl_runtime_c__String__fini>
 80174c2:	4770      	bx	lr

080174c4 <std_msgs__msg__Int32__init>:
 80174c4:	3800      	subs	r0, #0
 80174c6:	bf18      	it	ne
 80174c8:	2001      	movne	r0, #1
 80174ca:	4770      	bx	lr

080174cc <std_msgs__msg__Int32__fini>:
 80174cc:	4770      	bx	lr
 80174ce:	bf00      	nop

080174d0 <std_msgs__msg__Int64__init>:
 80174d0:	3800      	subs	r0, #0
 80174d2:	bf18      	it	ne
 80174d4:	2001      	movne	r0, #1
 80174d6:	4770      	bx	lr

080174d8 <std_msgs__msg__Int64__fini>:
 80174d8:	4770      	bx	lr
 80174da:	bf00      	nop

080174dc <builtin_interfaces__msg__Time__init>:
 80174dc:	3800      	subs	r0, #0
 80174de:	bf18      	it	ne
 80174e0:	2001      	movne	r0, #1
 80174e2:	4770      	bx	lr

080174e4 <builtin_interfaces__msg__Time__fini>:
 80174e4:	4770      	bx	lr
 80174e6:	bf00      	nop

080174e8 <ucdr_serialize_endian_array_char>:
 80174e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174ec:	4619      	mov	r1, r3
 80174ee:	461f      	mov	r7, r3
 80174f0:	4605      	mov	r5, r0
 80174f2:	4690      	mov	r8, r2
 80174f4:	f7fb f954 	bl	80127a0 <ucdr_check_buffer_available_for>
 80174f8:	b9e0      	cbnz	r0, 8017534 <ucdr_serialize_endian_array_char+0x4c>
 80174fa:	463e      	mov	r6, r7
 80174fc:	e009      	b.n	8017512 <ucdr_serialize_endian_array_char+0x2a>
 80174fe:	68a8      	ldr	r0, [r5, #8]
 8017500:	f002 fba4 	bl	8019c4c <memcpy>
 8017504:	68ab      	ldr	r3, [r5, #8]
 8017506:	6928      	ldr	r0, [r5, #16]
 8017508:	4423      	add	r3, r4
 801750a:	4420      	add	r0, r4
 801750c:	1b36      	subs	r6, r6, r4
 801750e:	60ab      	str	r3, [r5, #8]
 8017510:	6128      	str	r0, [r5, #16]
 8017512:	4631      	mov	r1, r6
 8017514:	2201      	movs	r2, #1
 8017516:	4628      	mov	r0, r5
 8017518:	f7fb f9ca 	bl	80128b0 <ucdr_check_final_buffer_behavior_array>
 801751c:	1bb9      	subs	r1, r7, r6
 801751e:	4441      	add	r1, r8
 8017520:	4604      	mov	r4, r0
 8017522:	4602      	mov	r2, r0
 8017524:	2800      	cmp	r0, #0
 8017526:	d1ea      	bne.n	80174fe <ucdr_serialize_endian_array_char+0x16>
 8017528:	2301      	movs	r3, #1
 801752a:	7da8      	ldrb	r0, [r5, #22]
 801752c:	756b      	strb	r3, [r5, #21]
 801752e:	4058      	eors	r0, r3
 8017530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017534:	463a      	mov	r2, r7
 8017536:	68a8      	ldr	r0, [r5, #8]
 8017538:	4641      	mov	r1, r8
 801753a:	f002 fb87 	bl	8019c4c <memcpy>
 801753e:	68aa      	ldr	r2, [r5, #8]
 8017540:	692b      	ldr	r3, [r5, #16]
 8017542:	443a      	add	r2, r7
 8017544:	443b      	add	r3, r7
 8017546:	60aa      	str	r2, [r5, #8]
 8017548:	612b      	str	r3, [r5, #16]
 801754a:	e7ed      	b.n	8017528 <ucdr_serialize_endian_array_char+0x40>

0801754c <ucdr_deserialize_endian_array_char>:
 801754c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017550:	4619      	mov	r1, r3
 8017552:	461f      	mov	r7, r3
 8017554:	4605      	mov	r5, r0
 8017556:	4690      	mov	r8, r2
 8017558:	f7fb f922 	bl	80127a0 <ucdr_check_buffer_available_for>
 801755c:	b9e0      	cbnz	r0, 8017598 <ucdr_deserialize_endian_array_char+0x4c>
 801755e:	463e      	mov	r6, r7
 8017560:	e009      	b.n	8017576 <ucdr_deserialize_endian_array_char+0x2a>
 8017562:	68a9      	ldr	r1, [r5, #8]
 8017564:	f002 fb72 	bl	8019c4c <memcpy>
 8017568:	68ab      	ldr	r3, [r5, #8]
 801756a:	6928      	ldr	r0, [r5, #16]
 801756c:	4423      	add	r3, r4
 801756e:	4420      	add	r0, r4
 8017570:	1b36      	subs	r6, r6, r4
 8017572:	60ab      	str	r3, [r5, #8]
 8017574:	6128      	str	r0, [r5, #16]
 8017576:	2201      	movs	r2, #1
 8017578:	4631      	mov	r1, r6
 801757a:	4628      	mov	r0, r5
 801757c:	f7fb f998 	bl	80128b0 <ucdr_check_final_buffer_behavior_array>
 8017580:	4604      	mov	r4, r0
 8017582:	1bb8      	subs	r0, r7, r6
 8017584:	4440      	add	r0, r8
 8017586:	4622      	mov	r2, r4
 8017588:	2c00      	cmp	r4, #0
 801758a:	d1ea      	bne.n	8017562 <ucdr_deserialize_endian_array_char+0x16>
 801758c:	2301      	movs	r3, #1
 801758e:	7da8      	ldrb	r0, [r5, #22]
 8017590:	756b      	strb	r3, [r5, #21]
 8017592:	4058      	eors	r0, r3
 8017594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017598:	463a      	mov	r2, r7
 801759a:	68a9      	ldr	r1, [r5, #8]
 801759c:	4640      	mov	r0, r8
 801759e:	f002 fb55 	bl	8019c4c <memcpy>
 80175a2:	68aa      	ldr	r2, [r5, #8]
 80175a4:	692b      	ldr	r3, [r5, #16]
 80175a6:	443a      	add	r2, r7
 80175a8:	443b      	add	r3, r7
 80175aa:	60aa      	str	r2, [r5, #8]
 80175ac:	612b      	str	r3, [r5, #16]
 80175ae:	e7ed      	b.n	801758c <ucdr_deserialize_endian_array_char+0x40>

080175b0 <ucdr_serialize_array_uint8_t>:
 80175b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175b4:	4688      	mov	r8, r1
 80175b6:	4611      	mov	r1, r2
 80175b8:	4617      	mov	r7, r2
 80175ba:	4605      	mov	r5, r0
 80175bc:	f7fb f8f0 	bl	80127a0 <ucdr_check_buffer_available_for>
 80175c0:	b9e0      	cbnz	r0, 80175fc <ucdr_serialize_array_uint8_t+0x4c>
 80175c2:	463e      	mov	r6, r7
 80175c4:	e009      	b.n	80175da <ucdr_serialize_array_uint8_t+0x2a>
 80175c6:	68a8      	ldr	r0, [r5, #8]
 80175c8:	f002 fb40 	bl	8019c4c <memcpy>
 80175cc:	68aa      	ldr	r2, [r5, #8]
 80175ce:	692b      	ldr	r3, [r5, #16]
 80175d0:	4422      	add	r2, r4
 80175d2:	4423      	add	r3, r4
 80175d4:	1b36      	subs	r6, r6, r4
 80175d6:	60aa      	str	r2, [r5, #8]
 80175d8:	612b      	str	r3, [r5, #16]
 80175da:	4631      	mov	r1, r6
 80175dc:	2201      	movs	r2, #1
 80175de:	4628      	mov	r0, r5
 80175e0:	f7fb f966 	bl	80128b0 <ucdr_check_final_buffer_behavior_array>
 80175e4:	1bb9      	subs	r1, r7, r6
 80175e6:	4441      	add	r1, r8
 80175e8:	4604      	mov	r4, r0
 80175ea:	4602      	mov	r2, r0
 80175ec:	2800      	cmp	r0, #0
 80175ee:	d1ea      	bne.n	80175c6 <ucdr_serialize_array_uint8_t+0x16>
 80175f0:	2301      	movs	r3, #1
 80175f2:	7da8      	ldrb	r0, [r5, #22]
 80175f4:	756b      	strb	r3, [r5, #21]
 80175f6:	4058      	eors	r0, r3
 80175f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175fc:	463a      	mov	r2, r7
 80175fe:	68a8      	ldr	r0, [r5, #8]
 8017600:	4641      	mov	r1, r8
 8017602:	f002 fb23 	bl	8019c4c <memcpy>
 8017606:	68aa      	ldr	r2, [r5, #8]
 8017608:	692b      	ldr	r3, [r5, #16]
 801760a:	443a      	add	r2, r7
 801760c:	443b      	add	r3, r7
 801760e:	60aa      	str	r2, [r5, #8]
 8017610:	612b      	str	r3, [r5, #16]
 8017612:	e7ed      	b.n	80175f0 <ucdr_serialize_array_uint8_t+0x40>

08017614 <ucdr_serialize_endian_array_uint8_t>:
 8017614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017618:	4619      	mov	r1, r3
 801761a:	461f      	mov	r7, r3
 801761c:	4605      	mov	r5, r0
 801761e:	4690      	mov	r8, r2
 8017620:	f7fb f8be 	bl	80127a0 <ucdr_check_buffer_available_for>
 8017624:	b9e0      	cbnz	r0, 8017660 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8017626:	463e      	mov	r6, r7
 8017628:	e009      	b.n	801763e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801762a:	68a8      	ldr	r0, [r5, #8]
 801762c:	f002 fb0e 	bl	8019c4c <memcpy>
 8017630:	68ab      	ldr	r3, [r5, #8]
 8017632:	6928      	ldr	r0, [r5, #16]
 8017634:	4423      	add	r3, r4
 8017636:	4420      	add	r0, r4
 8017638:	1b36      	subs	r6, r6, r4
 801763a:	60ab      	str	r3, [r5, #8]
 801763c:	6128      	str	r0, [r5, #16]
 801763e:	4631      	mov	r1, r6
 8017640:	2201      	movs	r2, #1
 8017642:	4628      	mov	r0, r5
 8017644:	f7fb f934 	bl	80128b0 <ucdr_check_final_buffer_behavior_array>
 8017648:	1bb9      	subs	r1, r7, r6
 801764a:	4441      	add	r1, r8
 801764c:	4604      	mov	r4, r0
 801764e:	4602      	mov	r2, r0
 8017650:	2800      	cmp	r0, #0
 8017652:	d1ea      	bne.n	801762a <ucdr_serialize_endian_array_uint8_t+0x16>
 8017654:	2301      	movs	r3, #1
 8017656:	7da8      	ldrb	r0, [r5, #22]
 8017658:	756b      	strb	r3, [r5, #21]
 801765a:	4058      	eors	r0, r3
 801765c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017660:	463a      	mov	r2, r7
 8017662:	68a8      	ldr	r0, [r5, #8]
 8017664:	4641      	mov	r1, r8
 8017666:	f002 faf1 	bl	8019c4c <memcpy>
 801766a:	68aa      	ldr	r2, [r5, #8]
 801766c:	692b      	ldr	r3, [r5, #16]
 801766e:	443a      	add	r2, r7
 8017670:	443b      	add	r3, r7
 8017672:	60aa      	str	r2, [r5, #8]
 8017674:	612b      	str	r3, [r5, #16]
 8017676:	e7ed      	b.n	8017654 <ucdr_serialize_endian_array_uint8_t+0x40>

08017678 <ucdr_deserialize_array_uint8_t>:
 8017678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801767c:	4688      	mov	r8, r1
 801767e:	4611      	mov	r1, r2
 8017680:	4617      	mov	r7, r2
 8017682:	4605      	mov	r5, r0
 8017684:	f7fb f88c 	bl	80127a0 <ucdr_check_buffer_available_for>
 8017688:	b9e0      	cbnz	r0, 80176c4 <ucdr_deserialize_array_uint8_t+0x4c>
 801768a:	463e      	mov	r6, r7
 801768c:	e009      	b.n	80176a2 <ucdr_deserialize_array_uint8_t+0x2a>
 801768e:	68a9      	ldr	r1, [r5, #8]
 8017690:	f002 fadc 	bl	8019c4c <memcpy>
 8017694:	68aa      	ldr	r2, [r5, #8]
 8017696:	692b      	ldr	r3, [r5, #16]
 8017698:	4422      	add	r2, r4
 801769a:	4423      	add	r3, r4
 801769c:	1b36      	subs	r6, r6, r4
 801769e:	60aa      	str	r2, [r5, #8]
 80176a0:	612b      	str	r3, [r5, #16]
 80176a2:	2201      	movs	r2, #1
 80176a4:	4631      	mov	r1, r6
 80176a6:	4628      	mov	r0, r5
 80176a8:	f7fb f902 	bl	80128b0 <ucdr_check_final_buffer_behavior_array>
 80176ac:	4604      	mov	r4, r0
 80176ae:	1bb8      	subs	r0, r7, r6
 80176b0:	4440      	add	r0, r8
 80176b2:	4622      	mov	r2, r4
 80176b4:	2c00      	cmp	r4, #0
 80176b6:	d1ea      	bne.n	801768e <ucdr_deserialize_array_uint8_t+0x16>
 80176b8:	2301      	movs	r3, #1
 80176ba:	7da8      	ldrb	r0, [r5, #22]
 80176bc:	756b      	strb	r3, [r5, #21]
 80176be:	4058      	eors	r0, r3
 80176c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176c4:	463a      	mov	r2, r7
 80176c6:	68a9      	ldr	r1, [r5, #8]
 80176c8:	4640      	mov	r0, r8
 80176ca:	f002 fabf 	bl	8019c4c <memcpy>
 80176ce:	68aa      	ldr	r2, [r5, #8]
 80176d0:	692b      	ldr	r3, [r5, #16]
 80176d2:	443a      	add	r2, r7
 80176d4:	443b      	add	r3, r7
 80176d6:	60aa      	str	r2, [r5, #8]
 80176d8:	612b      	str	r3, [r5, #16]
 80176da:	e7ed      	b.n	80176b8 <ucdr_deserialize_array_uint8_t+0x40>

080176dc <ucdr_deserialize_endian_array_uint8_t>:
 80176dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176e0:	4619      	mov	r1, r3
 80176e2:	461f      	mov	r7, r3
 80176e4:	4605      	mov	r5, r0
 80176e6:	4690      	mov	r8, r2
 80176e8:	f7fb f85a 	bl	80127a0 <ucdr_check_buffer_available_for>
 80176ec:	b9e0      	cbnz	r0, 8017728 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80176ee:	463e      	mov	r6, r7
 80176f0:	e009      	b.n	8017706 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80176f2:	68a9      	ldr	r1, [r5, #8]
 80176f4:	f002 faaa 	bl	8019c4c <memcpy>
 80176f8:	68ab      	ldr	r3, [r5, #8]
 80176fa:	6928      	ldr	r0, [r5, #16]
 80176fc:	4423      	add	r3, r4
 80176fe:	4420      	add	r0, r4
 8017700:	1b36      	subs	r6, r6, r4
 8017702:	60ab      	str	r3, [r5, #8]
 8017704:	6128      	str	r0, [r5, #16]
 8017706:	2201      	movs	r2, #1
 8017708:	4631      	mov	r1, r6
 801770a:	4628      	mov	r0, r5
 801770c:	f7fb f8d0 	bl	80128b0 <ucdr_check_final_buffer_behavior_array>
 8017710:	4604      	mov	r4, r0
 8017712:	1bb8      	subs	r0, r7, r6
 8017714:	4440      	add	r0, r8
 8017716:	4622      	mov	r2, r4
 8017718:	2c00      	cmp	r4, #0
 801771a:	d1ea      	bne.n	80176f2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801771c:	2301      	movs	r3, #1
 801771e:	7da8      	ldrb	r0, [r5, #22]
 8017720:	756b      	strb	r3, [r5, #21]
 8017722:	4058      	eors	r0, r3
 8017724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017728:	463a      	mov	r2, r7
 801772a:	68a9      	ldr	r1, [r5, #8]
 801772c:	4640      	mov	r0, r8
 801772e:	f002 fa8d 	bl	8019c4c <memcpy>
 8017732:	68aa      	ldr	r2, [r5, #8]
 8017734:	692b      	ldr	r3, [r5, #16]
 8017736:	443a      	add	r2, r7
 8017738:	443b      	add	r3, r7
 801773a:	60aa      	str	r2, [r5, #8]
 801773c:	612b      	str	r3, [r5, #16]
 801773e:	e7ed      	b.n	801771c <ucdr_deserialize_endian_array_uint8_t+0x40>

08017740 <ucdr_serialize_string>:
 8017740:	b510      	push	{r4, lr}
 8017742:	b082      	sub	sp, #8
 8017744:	4604      	mov	r4, r0
 8017746:	4608      	mov	r0, r1
 8017748:	9101      	str	r1, [sp, #4]
 801774a:	f7e8 fd4b 	bl	80001e4 <strlen>
 801774e:	9901      	ldr	r1, [sp, #4]
 8017750:	1c42      	adds	r2, r0, #1
 8017752:	4620      	mov	r0, r4
 8017754:	b002      	add	sp, #8
 8017756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801775a:	f7fb b8e5 	b.w	8012928 <ucdr_serialize_sequence_char>
 801775e:	bf00      	nop

08017760 <ucdr_deserialize_string>:
 8017760:	b500      	push	{lr}
 8017762:	b083      	sub	sp, #12
 8017764:	ab01      	add	r3, sp, #4
 8017766:	f7fb f8f1 	bl	801294c <ucdr_deserialize_sequence_char>
 801776a:	b003      	add	sp, #12
 801776c:	f85d fb04 	ldr.w	pc, [sp], #4

08017770 <get_custom_error>:
 8017770:	4b01      	ldr	r3, [pc, #4]	; (8017778 <get_custom_error+0x8>)
 8017772:	7818      	ldrb	r0, [r3, #0]
 8017774:	4770      	bx	lr
 8017776:	bf00      	nop
 8017778:	20015808 	.word	0x20015808

0801777c <recv_custom_msg>:
 801777c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017780:	4693      	mov	fp, r2
 8017782:	b089      	sub	sp, #36	; 0x24
 8017784:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8017788:	9305      	str	r3, [sp, #20]
 801778a:	468a      	mov	sl, r1
 801778c:	2100      	movs	r1, #0
 801778e:	4604      	mov	r4, r0
 8017790:	f88d 101e 	strb.w	r1, [sp, #30]
 8017794:	b322      	cbz	r2, 80177e0 <recv_custom_msg+0x64>
 8017796:	f200 2902 	addw	r9, r0, #514	; 0x202
 801779a:	f10d 081f 	add.w	r8, sp, #31
 801779e:	af05      	add	r7, sp, #20
 80177a0:	f10d 061e 	add.w	r6, sp, #30
 80177a4:	f44f 7500 	mov.w	r5, #512	; 0x200
 80177a8:	e002      	b.n	80177b0 <recv_custom_msg+0x34>
 80177aa:	9b05      	ldr	r3, [sp, #20]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	dd0f      	ble.n	80177d0 <recv_custom_msg+0x54>
 80177b0:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 80177b4:	4623      	mov	r3, r4
 80177b6:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80177ba:	e9cd 5600 	strd	r5, r6, [sp]
 80177be:	4622      	mov	r2, r4
 80177c0:	4648      	mov	r0, r9
 80177c2:	f001 f8e1 	bl	8018988 <uxr_read_framed_msg>
 80177c6:	2800      	cmp	r0, #0
 80177c8:	d0ef      	beq.n	80177aa <recv_custom_msg+0x2e>
 80177ca:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80177ce:	b1b3      	cbz	r3, 80177fe <recv_custom_msg+0x82>
 80177d0:	4b0f      	ldr	r3, [pc, #60]	; (8017810 <recv_custom_msg+0x94>)
 80177d2:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80177d6:	701a      	strb	r2, [r3, #0]
 80177d8:	2000      	movs	r0, #0
 80177da:	b009      	add	sp, #36	; 0x24
 80177dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177e0:	f10d 021f 	add.w	r2, sp, #31
 80177e4:	9200      	str	r2, [sp, #0]
 80177e6:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80177ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80177ee:	4601      	mov	r1, r0
 80177f0:	47a8      	blx	r5
 80177f2:	2800      	cmp	r0, #0
 80177f4:	d0ec      	beq.n	80177d0 <recv_custom_msg+0x54>
 80177f6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d1e8      	bne.n	80177d0 <recv_custom_msg+0x54>
 80177fe:	f8cb 0000 	str.w	r0, [fp]
 8017802:	2001      	movs	r0, #1
 8017804:	f8ca 4000 	str.w	r4, [sl]
 8017808:	b009      	add	sp, #36	; 0x24
 801780a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801780e:	bf00      	nop
 8017810:	20015808 	.word	0x20015808

08017814 <send_custom_msg>:
 8017814:	b530      	push	{r4, r5, lr}
 8017816:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 801781a:	b087      	sub	sp, #28
 801781c:	4615      	mov	r5, r2
 801781e:	b974      	cbnz	r4, 801783e <send_custom_msg+0x2a>
 8017820:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8017824:	f10d 0317 	add.w	r3, sp, #23
 8017828:	47a0      	blx	r4
 801782a:	b108      	cbz	r0, 8017830 <send_custom_msg+0x1c>
 801782c:	42a8      	cmp	r0, r5
 801782e:	d015      	beq.n	801785c <send_custom_msg+0x48>
 8017830:	4b0c      	ldr	r3, [pc, #48]	; (8017864 <send_custom_msg+0x50>)
 8017832:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8017836:	701a      	strb	r2, [r3, #0]
 8017838:	2000      	movs	r0, #0
 801783a:	b007      	add	sp, #28
 801783c:	bd30      	pop	{r4, r5, pc}
 801783e:	460b      	mov	r3, r1
 8017840:	2200      	movs	r2, #0
 8017842:	f10d 0117 	add.w	r1, sp, #23
 8017846:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801784a:	4602      	mov	r2, r0
 801784c:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8017850:	9500      	str	r5, [sp, #0]
 8017852:	f200 2002 	addw	r0, r0, #514	; 0x202
 8017856:	f000 fe9f 	bl	8018598 <uxr_write_framed_msg>
 801785a:	e7e6      	b.n	801782a <send_custom_msg+0x16>
 801785c:	2001      	movs	r0, #1
 801785e:	b007      	add	sp, #28
 8017860:	bd30      	pop	{r4, r5, pc}
 8017862:	bf00      	nop
 8017864:	20015808 	.word	0x20015808

08017868 <uxr_set_custom_transport_callbacks>:
 8017868:	b410      	push	{r4}
 801786a:	9c01      	ldr	r4, [sp, #4]
 801786c:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 8017870:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8017874:	9b02      	ldr	r3, [sp, #8]
 8017876:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 801787a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801787e:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 8017882:	4770      	bx	lr

08017884 <uxr_init_custom_transport>:
 8017884:	b538      	push	{r3, r4, r5, lr}
 8017886:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801788a:	b303      	cbz	r3, 80178ce <uxr_init_custom_transport+0x4a>
 801788c:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8017890:	4604      	mov	r4, r0
 8017892:	b1e2      	cbz	r2, 80178ce <uxr_init_custom_transport+0x4a>
 8017894:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8017898:	b1ca      	cbz	r2, 80178ce <uxr_init_custom_transport+0x4a>
 801789a:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801789e:	b1b2      	cbz	r2, 80178ce <uxr_init_custom_transport+0x4a>
 80178a0:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80178a4:	4798      	blx	r3
 80178a6:	4605      	mov	r5, r0
 80178a8:	b188      	cbz	r0, 80178ce <uxr_init_custom_transport+0x4a>
 80178aa:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80178ae:	b98b      	cbnz	r3, 80178d4 <uxr_init_custom_transport+0x50>
 80178b0:	490b      	ldr	r1, [pc, #44]	; (80178e0 <uxr_init_custom_transport+0x5c>)
 80178b2:	4b0c      	ldr	r3, [pc, #48]	; (80178e4 <uxr_init_custom_transport+0x60>)
 80178b4:	4a0c      	ldr	r2, [pc, #48]	; (80178e8 <uxr_init_custom_transport+0x64>)
 80178b6:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 80178ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80178be:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 80178c2:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 80178c6:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 80178ca:	4628      	mov	r0, r5
 80178cc:	bd38      	pop	{r3, r4, r5, pc}
 80178ce:	2500      	movs	r5, #0
 80178d0:	4628      	mov	r0, r5
 80178d2:	bd38      	pop	{r3, r4, r5, pc}
 80178d4:	2100      	movs	r1, #0
 80178d6:	f204 2002 	addw	r0, r4, #514	; 0x202
 80178da:	f000 fe57 	bl	801858c <uxr_init_framing_io>
 80178de:	e7e7      	b.n	80178b0 <uxr_init_custom_transport+0x2c>
 80178e0:	08017815 	.word	0x08017815
 80178e4:	0801777d 	.word	0x0801777d
 80178e8:	08017771 	.word	0x08017771

080178ec <uxr_close_custom_transport>:
 80178ec:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 80178f0:	4718      	bx	r3
 80178f2:	bf00      	nop

080178f4 <uxr_init_input_best_effort_stream>:
 80178f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80178f8:	8003      	strh	r3, [r0, #0]
 80178fa:	4770      	bx	lr

080178fc <uxr_reset_input_best_effort_stream>:
 80178fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017900:	8003      	strh	r3, [r0, #0]
 8017902:	4770      	bx	lr

08017904 <uxr_receive_best_effort_message>:
 8017904:	b538      	push	{r3, r4, r5, lr}
 8017906:	4604      	mov	r4, r0
 8017908:	8800      	ldrh	r0, [r0, #0]
 801790a:	460d      	mov	r5, r1
 801790c:	f000 fe26 	bl	801855c <uxr_seq_num_cmp>
 8017910:	4603      	mov	r3, r0
 8017912:	2b00      	cmp	r3, #0
 8017914:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8017918:	bfb8      	it	lt
 801791a:	8025      	strhlt	r5, [r4, #0]
 801791c:	bd38      	pop	{r3, r4, r5, pc}
 801791e:	bf00      	nop

08017920 <on_full_input_buffer>:
 8017920:	b570      	push	{r4, r5, r6, lr}
 8017922:	4605      	mov	r5, r0
 8017924:	460c      	mov	r4, r1
 8017926:	682b      	ldr	r3, [r5, #0]
 8017928:	6809      	ldr	r1, [r1, #0]
 801792a:	8920      	ldrh	r0, [r4, #8]
 801792c:	6862      	ldr	r2, [r4, #4]
 801792e:	fbb2 f2f0 	udiv	r2, r2, r0
 8017932:	eba3 0c01 	sub.w	ip, r3, r1
 8017936:	fbbc fcf2 	udiv	ip, ip, r2
 801793a:	f10c 0c01 	add.w	ip, ip, #1
 801793e:	fa1f f38c 	uxth.w	r3, ip
 8017942:	fbb3 f6f0 	udiv	r6, r3, r0
 8017946:	fb00 3316 	mls	r3, r0, r6, r3
 801794a:	b29b      	uxth	r3, r3
 801794c:	fb02 f303 	mul.w	r3, r2, r3
 8017950:	1d18      	adds	r0, r3, #4
 8017952:	4408      	add	r0, r1
 8017954:	7d26      	ldrb	r6, [r4, #20]
 8017956:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801795a:	b116      	cbz	r6, 8017962 <on_full_input_buffer+0x42>
 801795c:	2600      	movs	r6, #0
 801795e:	f840 6c04 	str.w	r6, [r0, #-4]
 8017962:	2a03      	cmp	r2, #3
 8017964:	d801      	bhi.n	801796a <on_full_input_buffer+0x4a>
 8017966:	2001      	movs	r0, #1
 8017968:	bd70      	pop	{r4, r5, r6, pc}
 801796a:	3308      	adds	r3, #8
 801796c:	4419      	add	r1, r3
 801796e:	4628      	mov	r0, r5
 8017970:	692b      	ldr	r3, [r5, #16]
 8017972:	3a04      	subs	r2, #4
 8017974:	f7fa ff60 	bl	8012838 <ucdr_init_buffer_origin>
 8017978:	4628      	mov	r0, r5
 801797a:	4903      	ldr	r1, [pc, #12]	; (8017988 <on_full_input_buffer+0x68>)
 801797c:	4622      	mov	r2, r4
 801797e:	f7fa ff37 	bl	80127f0 <ucdr_set_on_full_buffer_callback>
 8017982:	2000      	movs	r0, #0
 8017984:	bd70      	pop	{r4, r5, r6, pc}
 8017986:	bf00      	nop
 8017988:	08017921 	.word	0x08017921

0801798c <uxr_init_input_reliable_stream>:
 801798c:	b500      	push	{lr}
 801798e:	e9c0 1200 	strd	r1, r2, [r0]
 8017992:	f04f 0e00 	mov.w	lr, #0
 8017996:	9a01      	ldr	r2, [sp, #4]
 8017998:	8103      	strh	r3, [r0, #8]
 801799a:	6102      	str	r2, [r0, #16]
 801799c:	f880 e014 	strb.w	lr, [r0, #20]
 80179a0:	b1d3      	cbz	r3, 80179d8 <uxr_init_input_reliable_stream+0x4c>
 80179a2:	f8c1 e000 	str.w	lr, [r1]
 80179a6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80179aa:	f1bc 0f01 	cmp.w	ip, #1
 80179ae:	d913      	bls.n	80179d8 <uxr_init_input_reliable_stream+0x4c>
 80179b0:	2301      	movs	r3, #1
 80179b2:	fbb3 f1fc 	udiv	r1, r3, ip
 80179b6:	fb0c 3111 	mls	r1, ip, r1, r3
 80179ba:	b289      	uxth	r1, r1
 80179bc:	6842      	ldr	r2, [r0, #4]
 80179be:	fbb2 f2fc 	udiv	r2, r2, ip
 80179c2:	fb01 f202 	mul.w	r2, r1, r2
 80179c6:	6801      	ldr	r1, [r0, #0]
 80179c8:	f841 e002 	str.w	lr, [r1, r2]
 80179cc:	3301      	adds	r3, #1
 80179ce:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80179d2:	b29b      	uxth	r3, r3
 80179d4:	459c      	cmp	ip, r3
 80179d6:	d8ec      	bhi.n	80179b2 <uxr_init_input_reliable_stream+0x26>
 80179d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80179dc:	60c3      	str	r3, [r0, #12]
 80179de:	f85d fb04 	ldr.w	pc, [sp], #4
 80179e2:	bf00      	nop

080179e4 <uxr_reset_input_reliable_stream>:
 80179e4:	8901      	ldrh	r1, [r0, #8]
 80179e6:	b1e9      	cbz	r1, 8017a24 <uxr_reset_input_reliable_stream+0x40>
 80179e8:	f04f 0c00 	mov.w	ip, #0
 80179ec:	b500      	push	{lr}
 80179ee:	4663      	mov	r3, ip
 80179f0:	46e6      	mov	lr, ip
 80179f2:	fbb3 f2f1 	udiv	r2, r3, r1
 80179f6:	fb01 3312 	mls	r3, r1, r2, r3
 80179fa:	b29b      	uxth	r3, r3
 80179fc:	6842      	ldr	r2, [r0, #4]
 80179fe:	fbb2 f2f1 	udiv	r2, r2, r1
 8017a02:	fb02 f303 	mul.w	r3, r2, r3
 8017a06:	6802      	ldr	r2, [r0, #0]
 8017a08:	f842 e003 	str.w	lr, [r2, r3]
 8017a0c:	f10c 0c01 	add.w	ip, ip, #1
 8017a10:	8901      	ldrh	r1, [r0, #8]
 8017a12:	fa1f f38c 	uxth.w	r3, ip
 8017a16:	4299      	cmp	r1, r3
 8017a18:	d8eb      	bhi.n	80179f2 <uxr_reset_input_reliable_stream+0xe>
 8017a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017a1e:	60c3      	str	r3, [r0, #12]
 8017a20:	f85d fb04 	ldr.w	pc, [sp], #4
 8017a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017a28:	60c3      	str	r3, [r0, #12]
 8017a2a:	4770      	bx	lr

08017a2c <uxr_receive_reliable_message>:
 8017a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a30:	4604      	mov	r4, r0
 8017a32:	460d      	mov	r5, r1
 8017a34:	8901      	ldrh	r1, [r0, #8]
 8017a36:	8980      	ldrh	r0, [r0, #12]
 8017a38:	4690      	mov	r8, r2
 8017a3a:	461f      	mov	r7, r3
 8017a3c:	f000 fd86 	bl	801854c <uxr_seq_num_add>
 8017a40:	4629      	mov	r1, r5
 8017a42:	4606      	mov	r6, r0
 8017a44:	89a0      	ldrh	r0, [r4, #12]
 8017a46:	f000 fd89 	bl	801855c <uxr_seq_num_cmp>
 8017a4a:	2800      	cmp	r0, #0
 8017a4c:	db0a      	blt.n	8017a64 <uxr_receive_reliable_message+0x38>
 8017a4e:	2600      	movs	r6, #0
 8017a50:	89e0      	ldrh	r0, [r4, #14]
 8017a52:	4629      	mov	r1, r5
 8017a54:	f000 fd82 	bl	801855c <uxr_seq_num_cmp>
 8017a58:	2800      	cmp	r0, #0
 8017a5a:	da00      	bge.n	8017a5e <uxr_receive_reliable_message+0x32>
 8017a5c:	81e5      	strh	r5, [r4, #14]
 8017a5e:	4630      	mov	r0, r6
 8017a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a64:	4630      	mov	r0, r6
 8017a66:	4629      	mov	r1, r5
 8017a68:	f000 fd78 	bl	801855c <uxr_seq_num_cmp>
 8017a6c:	2800      	cmp	r0, #0
 8017a6e:	dbee      	blt.n	8017a4e <uxr_receive_reliable_message+0x22>
 8017a70:	6923      	ldr	r3, [r4, #16]
 8017a72:	4640      	mov	r0, r8
 8017a74:	4798      	blx	r3
 8017a76:	2101      	movs	r1, #1
 8017a78:	4681      	mov	r9, r0
 8017a7a:	89a0      	ldrh	r0, [r4, #12]
 8017a7c:	f000 fd66 	bl	801854c <uxr_seq_num_add>
 8017a80:	f1b9 0f00 	cmp.w	r9, #0
 8017a84:	d101      	bne.n	8017a8a <uxr_receive_reliable_message+0x5e>
 8017a86:	4285      	cmp	r5, r0
 8017a88:	d047      	beq.n	8017b1a <uxr_receive_reliable_message+0xee>
 8017a8a:	8922      	ldrh	r2, [r4, #8]
 8017a8c:	fbb5 f0f2 	udiv	r0, r5, r2
 8017a90:	fb02 5010 	mls	r0, r2, r0, r5
 8017a94:	b280      	uxth	r0, r0
 8017a96:	6863      	ldr	r3, [r4, #4]
 8017a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8017a9c:	fb00 f303 	mul.w	r3, r0, r3
 8017aa0:	6820      	ldr	r0, [r4, #0]
 8017aa2:	3304      	adds	r3, #4
 8017aa4:	4418      	add	r0, r3
 8017aa6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d1cf      	bne.n	8017a4e <uxr_receive_reliable_message+0x22>
 8017aae:	4641      	mov	r1, r8
 8017ab0:	463a      	mov	r2, r7
 8017ab2:	f002 f8cb 	bl	8019c4c <memcpy>
 8017ab6:	8921      	ldrh	r1, [r4, #8]
 8017ab8:	fbb5 f2f1 	udiv	r2, r5, r1
 8017abc:	fb01 5212 	mls	r2, r1, r2, r5
 8017ac0:	b292      	uxth	r2, r2
 8017ac2:	6863      	ldr	r3, [r4, #4]
 8017ac4:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ac8:	fb02 f303 	mul.w	r3, r2, r3
 8017acc:	6822      	ldr	r2, [r4, #0]
 8017ace:	50d7      	str	r7, [r2, r3]
 8017ad0:	9a08      	ldr	r2, [sp, #32]
 8017ad2:	2301      	movs	r3, #1
 8017ad4:	7013      	strb	r3, [r2, #0]
 8017ad6:	f1b9 0f00 	cmp.w	r9, #0
 8017ada:	d0b8      	beq.n	8017a4e <uxr_receive_reliable_message+0x22>
 8017adc:	89a6      	ldrh	r6, [r4, #12]
 8017ade:	4630      	mov	r0, r6
 8017ae0:	2101      	movs	r1, #1
 8017ae2:	f000 fd33 	bl	801854c <uxr_seq_num_add>
 8017ae6:	8922      	ldrh	r2, [r4, #8]
 8017ae8:	6863      	ldr	r3, [r4, #4]
 8017aea:	fbb3 f3f2 	udiv	r3, r3, r2
 8017aee:	4606      	mov	r6, r0
 8017af0:	fbb0 f0f2 	udiv	r0, r0, r2
 8017af4:	fb02 6010 	mls	r0, r2, r0, r6
 8017af8:	b280      	uxth	r0, r0
 8017afa:	fb00 f303 	mul.w	r3, r0, r3
 8017afe:	6820      	ldr	r0, [r4, #0]
 8017b00:	3304      	adds	r3, #4
 8017b02:	4418      	add	r0, r3
 8017b04:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d0a0      	beq.n	8017a4e <uxr_receive_reliable_message+0x22>
 8017b0c:	6923      	ldr	r3, [r4, #16]
 8017b0e:	4798      	blx	r3
 8017b10:	2802      	cmp	r0, #2
 8017b12:	d008      	beq.n	8017b26 <uxr_receive_reliable_message+0xfa>
 8017b14:	2801      	cmp	r0, #1
 8017b16:	d0e2      	beq.n	8017ade <uxr_receive_reliable_message+0xb2>
 8017b18:	e799      	b.n	8017a4e <uxr_receive_reliable_message+0x22>
 8017b1a:	9b08      	ldr	r3, [sp, #32]
 8017b1c:	81a5      	strh	r5, [r4, #12]
 8017b1e:	2601      	movs	r6, #1
 8017b20:	f883 9000 	strb.w	r9, [r3]
 8017b24:	e794      	b.n	8017a50 <uxr_receive_reliable_message+0x24>
 8017b26:	2601      	movs	r6, #1
 8017b28:	e792      	b.n	8017a50 <uxr_receive_reliable_message+0x24>
 8017b2a:	bf00      	nop

08017b2c <uxr_next_input_reliable_buffer_available>:
 8017b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b30:	4604      	mov	r4, r0
 8017b32:	460f      	mov	r7, r1
 8017b34:	8980      	ldrh	r0, [r0, #12]
 8017b36:	2101      	movs	r1, #1
 8017b38:	4690      	mov	r8, r2
 8017b3a:	f000 fd07 	bl	801854c <uxr_seq_num_add>
 8017b3e:	8922      	ldrh	r2, [r4, #8]
 8017b40:	fbb0 f6f2 	udiv	r6, r0, r2
 8017b44:	fb02 0616 	mls	r6, r2, r6, r0
 8017b48:	b2b6      	uxth	r6, r6
 8017b4a:	6863      	ldr	r3, [r4, #4]
 8017b4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8017b50:	fb06 f303 	mul.w	r3, r6, r3
 8017b54:	6826      	ldr	r6, [r4, #0]
 8017b56:	3304      	adds	r3, #4
 8017b58:	441e      	add	r6, r3
 8017b5a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8017b5e:	f1b9 0f00 	cmp.w	r9, #0
 8017b62:	d023      	beq.n	8017bac <uxr_next_input_reliable_buffer_available+0x80>
 8017b64:	6923      	ldr	r3, [r4, #16]
 8017b66:	4605      	mov	r5, r0
 8017b68:	4630      	mov	r0, r6
 8017b6a:	4798      	blx	r3
 8017b6c:	4682      	mov	sl, r0
 8017b6e:	b300      	cbz	r0, 8017bb2 <uxr_next_input_reliable_buffer_available+0x86>
 8017b70:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8017b74:	2101      	movs	r1, #1
 8017b76:	4650      	mov	r0, sl
 8017b78:	f000 fce8 	bl	801854c <uxr_seq_num_add>
 8017b7c:	8921      	ldrh	r1, [r4, #8]
 8017b7e:	fbb0 f2f1 	udiv	r2, r0, r1
 8017b82:	4682      	mov	sl, r0
 8017b84:	fb01 0212 	mls	r2, r1, r2, r0
 8017b88:	e9d4 0300 	ldrd	r0, r3, [r4]
 8017b8c:	b292      	uxth	r2, r2
 8017b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017b92:	fb02 f303 	mul.w	r3, r2, r3
 8017b96:	3304      	adds	r3, #4
 8017b98:	4418      	add	r0, r3
 8017b9a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017b9e:	b12b      	cbz	r3, 8017bac <uxr_next_input_reliable_buffer_available+0x80>
 8017ba0:	6923      	ldr	r3, [r4, #16]
 8017ba2:	4798      	blx	r3
 8017ba4:	2802      	cmp	r0, #2
 8017ba6:	d01b      	beq.n	8017be0 <uxr_next_input_reliable_buffer_available+0xb4>
 8017ba8:	2801      	cmp	r0, #1
 8017baa:	d0e3      	beq.n	8017b74 <uxr_next_input_reliable_buffer_available+0x48>
 8017bac:	2000      	movs	r0, #0
 8017bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bb2:	464a      	mov	r2, r9
 8017bb4:	4631      	mov	r1, r6
 8017bb6:	4638      	mov	r0, r7
 8017bb8:	f7fa fe46 	bl	8012848 <ucdr_init_buffer>
 8017bbc:	8921      	ldrh	r1, [r4, #8]
 8017bbe:	fbb5 f2f1 	udiv	r2, r5, r1
 8017bc2:	fb01 5212 	mls	r2, r1, r2, r5
 8017bc6:	b292      	uxth	r2, r2
 8017bc8:	6863      	ldr	r3, [r4, #4]
 8017bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8017bce:	fb02 f303 	mul.w	r3, r2, r3
 8017bd2:	6822      	ldr	r2, [r4, #0]
 8017bd4:	f842 a003 	str.w	sl, [r2, r3]
 8017bd8:	2001      	movs	r0, #1
 8017bda:	81a5      	strh	r5, [r4, #12]
 8017bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017be0:	8920      	ldrh	r0, [r4, #8]
 8017be2:	fbb5 f3f0 	udiv	r3, r5, r0
 8017be6:	fb00 5513 	mls	r5, r0, r3, r5
 8017bea:	b2ad      	uxth	r5, r5
 8017bec:	6863      	ldr	r3, [r4, #4]
 8017bee:	fbb3 f3f0 	udiv	r3, r3, r0
 8017bf2:	fb03 f505 	mul.w	r5, r3, r5
 8017bf6:	6823      	ldr	r3, [r4, #0]
 8017bf8:	2000      	movs	r0, #0
 8017bfa:	5158      	str	r0, [r3, r5]
 8017bfc:	eb06 0108 	add.w	r1, r6, r8
 8017c00:	eba9 0208 	sub.w	r2, r9, r8
 8017c04:	4638      	mov	r0, r7
 8017c06:	f7fa fe1f 	bl	8012848 <ucdr_init_buffer>
 8017c0a:	4638      	mov	r0, r7
 8017c0c:	4903      	ldr	r1, [pc, #12]	; (8017c1c <uxr_next_input_reliable_buffer_available+0xf0>)
 8017c0e:	4622      	mov	r2, r4
 8017c10:	f7fa fdee 	bl	80127f0 <ucdr_set_on_full_buffer_callback>
 8017c14:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8017c18:	2001      	movs	r0, #1
 8017c1a:	e7c8      	b.n	8017bae <uxr_next_input_reliable_buffer_available+0x82>
 8017c1c:	08017921 	.word	0x08017921

08017c20 <uxr_process_heartbeat>:
 8017c20:	b538      	push	{r3, r4, r5, lr}
 8017c22:	4611      	mov	r1, r2
 8017c24:	4604      	mov	r4, r0
 8017c26:	89c0      	ldrh	r0, [r0, #14]
 8017c28:	4615      	mov	r5, r2
 8017c2a:	f000 fc97 	bl	801855c <uxr_seq_num_cmp>
 8017c2e:	2800      	cmp	r0, #0
 8017c30:	bfb8      	it	lt
 8017c32:	81e5      	strhlt	r5, [r4, #14]
 8017c34:	bd38      	pop	{r3, r4, r5, pc}
 8017c36:	bf00      	nop

08017c38 <uxr_compute_acknack>:
 8017c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c3c:	8903      	ldrh	r3, [r0, #8]
 8017c3e:	8985      	ldrh	r5, [r0, #12]
 8017c40:	4604      	mov	r4, r0
 8017c42:	460e      	mov	r6, r1
 8017c44:	b1d3      	cbz	r3, 8017c7c <uxr_compute_acknack+0x44>
 8017c46:	4628      	mov	r0, r5
 8017c48:	2701      	movs	r7, #1
 8017c4a:	e003      	b.n	8017c54 <uxr_compute_acknack+0x1c>
 8017c4c:	4567      	cmp	r7, ip
 8017c4e:	d215      	bcs.n	8017c7c <uxr_compute_acknack+0x44>
 8017c50:	89a0      	ldrh	r0, [r4, #12]
 8017c52:	3701      	adds	r7, #1
 8017c54:	b2b9      	uxth	r1, r7
 8017c56:	f000 fc79 	bl	801854c <uxr_seq_num_add>
 8017c5a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017c5e:	fbb0 f3fc 	udiv	r3, r0, ip
 8017c62:	fb0c 0313 	mls	r3, ip, r3, r0
 8017c66:	b29a      	uxth	r2, r3
 8017c68:	e9d4 1300 	ldrd	r1, r3, [r4]
 8017c6c:	fbb3 f3fc 	udiv	r3, r3, ip
 8017c70:	fb02 f303 	mul.w	r3, r2, r3
 8017c74:	58cb      	ldr	r3, [r1, r3]
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d1e8      	bne.n	8017c4c <uxr_compute_acknack+0x14>
 8017c7a:	4605      	mov	r5, r0
 8017c7c:	8035      	strh	r5, [r6, #0]
 8017c7e:	2101      	movs	r1, #1
 8017c80:	4628      	mov	r0, r5
 8017c82:	89e7      	ldrh	r7, [r4, #14]
 8017c84:	f000 fc66 	bl	8018554 <uxr_seq_num_sub>
 8017c88:	4601      	mov	r1, r0
 8017c8a:	4638      	mov	r0, r7
 8017c8c:	f000 fc62 	bl	8018554 <uxr_seq_num_sub>
 8017c90:	4605      	mov	r5, r0
 8017c92:	b318      	cbz	r0, 8017cdc <uxr_compute_acknack+0xa4>
 8017c94:	f04f 0900 	mov.w	r9, #0
 8017c98:	464f      	mov	r7, r9
 8017c9a:	f04f 0801 	mov.w	r8, #1
 8017c9e:	fa1f f189 	uxth.w	r1, r9
 8017ca2:	8830      	ldrh	r0, [r6, #0]
 8017ca4:	f000 fc52 	bl	801854c <uxr_seq_num_add>
 8017ca8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8017cac:	fbb0 f3fc 	udiv	r3, r0, ip
 8017cb0:	e9d4 1200 	ldrd	r1, r2, [r4]
 8017cb4:	fb03 001c 	mls	r0, r3, ip, r0
 8017cb8:	b283      	uxth	r3, r0
 8017cba:	fbb2 f2fc 	udiv	r2, r2, ip
 8017cbe:	fb02 f303 	mul.w	r3, r2, r3
 8017cc2:	fa08 f209 	lsl.w	r2, r8, r9
 8017cc6:	58cb      	ldr	r3, [r1, r3]
 8017cc8:	f109 0901 	add.w	r9, r9, #1
 8017ccc:	b90b      	cbnz	r3, 8017cd2 <uxr_compute_acknack+0x9a>
 8017cce:	4317      	orrs	r7, r2
 8017cd0:	b2bf      	uxth	r7, r7
 8017cd2:	454d      	cmp	r5, r9
 8017cd4:	d1e3      	bne.n	8017c9e <uxr_compute_acknack+0x66>
 8017cd6:	4638      	mov	r0, r7
 8017cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017cdc:	4607      	mov	r7, r0
 8017cde:	4638      	mov	r0, r7
 8017ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017ce4 <uxr_init_output_best_effort_stream>:
 8017ce4:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8017ce8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8017cec:	6001      	str	r1, [r0, #0]
 8017cee:	7303      	strb	r3, [r0, #12]
 8017cf0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8017cf4:	4770      	bx	lr
 8017cf6:	bf00      	nop

08017cf8 <uxr_reset_output_best_effort_stream>:
 8017cf8:	7b02      	ldrb	r2, [r0, #12]
 8017cfa:	6042      	str	r2, [r0, #4]
 8017cfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017d00:	81c3      	strh	r3, [r0, #14]
 8017d02:	4770      	bx	lr

08017d04 <uxr_prepare_best_effort_buffer_to_write>:
 8017d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d06:	4604      	mov	r4, r0
 8017d08:	b083      	sub	sp, #12
 8017d0a:	6840      	ldr	r0, [r0, #4]
 8017d0c:	460d      	mov	r5, r1
 8017d0e:	4616      	mov	r6, r2
 8017d10:	f7fc f9bc 	bl	801408c <uxr_submessage_padding>
 8017d14:	6863      	ldr	r3, [r4, #4]
 8017d16:	4418      	add	r0, r3
 8017d18:	68a3      	ldr	r3, [r4, #8]
 8017d1a:	1942      	adds	r2, r0, r5
 8017d1c:	4293      	cmp	r3, r2
 8017d1e:	bf2c      	ite	cs
 8017d20:	2701      	movcs	r7, #1
 8017d22:	2700      	movcc	r7, #0
 8017d24:	d202      	bcs.n	8017d2c <uxr_prepare_best_effort_buffer_to_write+0x28>
 8017d26:	4638      	mov	r0, r7
 8017d28:	b003      	add	sp, #12
 8017d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d2c:	9000      	str	r0, [sp, #0]
 8017d2e:	6821      	ldr	r1, [r4, #0]
 8017d30:	4630      	mov	r0, r6
 8017d32:	2300      	movs	r3, #0
 8017d34:	f7fa fd76 	bl	8012824 <ucdr_init_buffer_origin_offset>
 8017d38:	6861      	ldr	r1, [r4, #4]
 8017d3a:	4638      	mov	r0, r7
 8017d3c:	4429      	add	r1, r5
 8017d3e:	6061      	str	r1, [r4, #4]
 8017d40:	b003      	add	sp, #12
 8017d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017d44 <uxr_prepare_best_effort_buffer_to_send>:
 8017d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d48:	4604      	mov	r4, r0
 8017d4a:	461d      	mov	r5, r3
 8017d4c:	6840      	ldr	r0, [r0, #4]
 8017d4e:	7b23      	ldrb	r3, [r4, #12]
 8017d50:	4298      	cmp	r0, r3
 8017d52:	bf8c      	ite	hi
 8017d54:	2601      	movhi	r6, #1
 8017d56:	2600      	movls	r6, #0
 8017d58:	d802      	bhi.n	8017d60 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8017d5a:	4630      	mov	r0, r6
 8017d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d60:	4688      	mov	r8, r1
 8017d62:	89e0      	ldrh	r0, [r4, #14]
 8017d64:	2101      	movs	r1, #1
 8017d66:	4617      	mov	r7, r2
 8017d68:	f000 fbf0 	bl	801854c <uxr_seq_num_add>
 8017d6c:	6823      	ldr	r3, [r4, #0]
 8017d6e:	81e0      	strh	r0, [r4, #14]
 8017d70:	8028      	strh	r0, [r5, #0]
 8017d72:	f8c8 3000 	str.w	r3, [r8]
 8017d76:	6863      	ldr	r3, [r4, #4]
 8017d78:	603b      	str	r3, [r7, #0]
 8017d7a:	7b23      	ldrb	r3, [r4, #12]
 8017d7c:	6063      	str	r3, [r4, #4]
 8017d7e:	4630      	mov	r0, r6
 8017d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017d84 <on_full_output_buffer>:
 8017d84:	b538      	push	{r3, r4, r5, lr}
 8017d86:	6802      	ldr	r2, [r0, #0]
 8017d88:	460c      	mov	r4, r1
 8017d8a:	6809      	ldr	r1, [r1, #0]
 8017d8c:	8923      	ldrh	r3, [r4, #8]
 8017d8e:	eba2 0c01 	sub.w	ip, r2, r1
 8017d92:	6862      	ldr	r2, [r4, #4]
 8017d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8017d98:	fbbc fcf2 	udiv	ip, ip, r2
 8017d9c:	f10c 0c01 	add.w	ip, ip, #1
 8017da0:	fa1f fc8c 	uxth.w	ip, ip
 8017da4:	fbbc fef3 	udiv	lr, ip, r3
 8017da8:	fb03 c31e 	mls	r3, r3, lr, ip
 8017dac:	b29b      	uxth	r3, r3
 8017dae:	fb02 f303 	mul.w	r3, r2, r3
 8017db2:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8017db6:	58ca      	ldr	r2, [r1, r3]
 8017db8:	4463      	add	r3, ip
 8017dba:	eba2 020c 	sub.w	r2, r2, ip
 8017dbe:	3308      	adds	r3, #8
 8017dc0:	4605      	mov	r5, r0
 8017dc2:	4419      	add	r1, r3
 8017dc4:	3a04      	subs	r2, #4
 8017dc6:	6903      	ldr	r3, [r0, #16]
 8017dc8:	f7fa fd36 	bl	8012838 <ucdr_init_buffer_origin>
 8017dcc:	4628      	mov	r0, r5
 8017dce:	4903      	ldr	r1, [pc, #12]	; (8017ddc <on_full_output_buffer+0x58>)
 8017dd0:	4622      	mov	r2, r4
 8017dd2:	f7fa fd0d 	bl	80127f0 <ucdr_set_on_full_buffer_callback>
 8017dd6:	2000      	movs	r0, #0
 8017dd8:	bd38      	pop	{r3, r4, r5, pc}
 8017dda:	bf00      	nop
 8017ddc:	08017d85 	.word	0x08017d85

08017de0 <uxr_init_output_reliable_stream>:
 8017de0:	b410      	push	{r4}
 8017de2:	f89d c004 	ldrb.w	ip, [sp, #4]
 8017de6:	8103      	strh	r3, [r0, #8]
 8017de8:	e9c0 1200 	strd	r1, r2, [r0]
 8017dec:	f880 c00c 	strb.w	ip, [r0, #12]
 8017df0:	b1d3      	cbz	r3, 8017e28 <uxr_init_output_reliable_stream+0x48>
 8017df2:	f8c1 c000 	str.w	ip, [r1]
 8017df6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017dfa:	f1bc 0f01 	cmp.w	ip, #1
 8017dfe:	d913      	bls.n	8017e28 <uxr_init_output_reliable_stream+0x48>
 8017e00:	2301      	movs	r3, #1
 8017e02:	fbb3 f1fc 	udiv	r1, r3, ip
 8017e06:	fb0c 3111 	mls	r1, ip, r1, r3
 8017e0a:	b289      	uxth	r1, r1
 8017e0c:	6842      	ldr	r2, [r0, #4]
 8017e0e:	6804      	ldr	r4, [r0, #0]
 8017e10:	fbb2 f2fc 	udiv	r2, r2, ip
 8017e14:	fb01 f202 	mul.w	r2, r1, r2
 8017e18:	7b01      	ldrb	r1, [r0, #12]
 8017e1a:	50a1      	str	r1, [r4, r2]
 8017e1c:	3301      	adds	r3, #1
 8017e1e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8017e22:	b29b      	uxth	r3, r3
 8017e24:	459c      	cmp	ip, r3
 8017e26:	d8ec      	bhi.n	8017e02 <uxr_init_output_reliable_stream+0x22>
 8017e28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017e2c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017e30:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017e34:	4905      	ldr	r1, [pc, #20]	; (8017e4c <uxr_init_output_reliable_stream+0x6c>)
 8017e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e3a:	f8c0 100e 	str.w	r1, [r0, #14]
 8017e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e42:	2300      	movs	r3, #0
 8017e44:	8242      	strh	r2, [r0, #18]
 8017e46:	8403      	strh	r3, [r0, #32]
 8017e48:	4770      	bx	lr
 8017e4a:	bf00      	nop
 8017e4c:	ffff0000 	.word	0xffff0000

08017e50 <uxr_reset_output_reliable_stream>:
 8017e50:	8901      	ldrh	r1, [r0, #8]
 8017e52:	b1b1      	cbz	r1, 8017e82 <uxr_reset_output_reliable_stream+0x32>
 8017e54:	f04f 0c00 	mov.w	ip, #0
 8017e58:	4663      	mov	r3, ip
 8017e5a:	fbb3 f2f1 	udiv	r2, r3, r1
 8017e5e:	fb01 3312 	mls	r3, r1, r2, r3
 8017e62:	b29b      	uxth	r3, r3
 8017e64:	6842      	ldr	r2, [r0, #4]
 8017e66:	fbb2 f2f1 	udiv	r2, r2, r1
 8017e6a:	6801      	ldr	r1, [r0, #0]
 8017e6c:	fb02 f303 	mul.w	r3, r2, r3
 8017e70:	7b02      	ldrb	r2, [r0, #12]
 8017e72:	50ca      	str	r2, [r1, r3]
 8017e74:	f10c 0c01 	add.w	ip, ip, #1
 8017e78:	8901      	ldrh	r1, [r0, #8]
 8017e7a:	fa1f f38c 	uxth.w	r3, ip
 8017e7e:	4299      	cmp	r1, r3
 8017e80:	d8eb      	bhi.n	8017e5a <uxr_reset_output_reliable_stream+0xa>
 8017e82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017e86:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8017e8a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8017e8e:	4904      	ldr	r1, [pc, #16]	; (8017ea0 <uxr_reset_output_reliable_stream+0x50>)
 8017e90:	f8c0 100e 	str.w	r1, [r0, #14]
 8017e94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e98:	2300      	movs	r3, #0
 8017e9a:	8242      	strh	r2, [r0, #18]
 8017e9c:	8403      	strh	r3, [r0, #32]
 8017e9e:	4770      	bx	lr
 8017ea0:	ffff0000 	.word	0xffff0000

08017ea4 <uxr_prepare_reliable_buffer_to_write>:
 8017ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ea8:	4604      	mov	r4, r0
 8017eaa:	8900      	ldrh	r0, [r0, #8]
 8017eac:	89e5      	ldrh	r5, [r4, #14]
 8017eae:	fbb5 f3f0 	udiv	r3, r5, r0
 8017eb2:	b091      	sub	sp, #68	; 0x44
 8017eb4:	fb00 5313 	mls	r3, r0, r3, r5
 8017eb8:	b29b      	uxth	r3, r3
 8017eba:	9205      	str	r2, [sp, #20]
 8017ebc:	6862      	ldr	r2, [r4, #4]
 8017ebe:	fbb2 f0f0 	udiv	r0, r2, r0
 8017ec2:	6822      	ldr	r2, [r4, #0]
 8017ec4:	9006      	str	r0, [sp, #24]
 8017ec6:	fb00 f303 	mul.w	r3, r0, r3
 8017eca:	3304      	adds	r3, #4
 8017ecc:	18d3      	adds	r3, r2, r3
 8017ece:	4689      	mov	r9, r1
 8017ed0:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8017ed4:	9304      	str	r3, [sp, #16]
 8017ed6:	f1a0 0804 	sub.w	r8, r0, #4
 8017eda:	2104      	movs	r1, #4
 8017edc:	4630      	mov	r0, r6
 8017ede:	f7fa fcb7 	bl	8012850 <ucdr_alignment>
 8017ee2:	1833      	adds	r3, r6, r0
 8017ee4:	eb03 0609 	add.w	r6, r3, r9
 8017ee8:	4546      	cmp	r6, r8
 8017eea:	9303      	str	r3, [sp, #12]
 8017eec:	f240 80d6 	bls.w	801809c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8017ef0:	7b26      	ldrb	r6, [r4, #12]
 8017ef2:	eb06 0309 	add.w	r3, r6, r9
 8017ef6:	4543      	cmp	r3, r8
 8017ef8:	f240 80bd 	bls.w	8018076 <uxr_prepare_reliable_buffer_to_write+0x1d2>
 8017efc:	9b03      	ldr	r3, [sp, #12]
 8017efe:	3304      	adds	r3, #4
 8017f00:	4543      	cmp	r3, r8
 8017f02:	f080 810d 	bcs.w	8018120 <uxr_prepare_reliable_buffer_to_write+0x27c>
 8017f06:	8920      	ldrh	r0, [r4, #8]
 8017f08:	2800      	cmp	r0, #0
 8017f0a:	f000 8122 	beq.w	8018152 <uxr_prepare_reliable_buffer_to_write+0x2ae>
 8017f0e:	2100      	movs	r1, #0
 8017f10:	6827      	ldr	r7, [r4, #0]
 8017f12:	6862      	ldr	r2, [r4, #4]
 8017f14:	fbb2 fef0 	udiv	lr, r2, r0
 8017f18:	468c      	mov	ip, r1
 8017f1a:	460b      	mov	r3, r1
 8017f1c:	fbb3 f2f0 	udiv	r2, r3, r0
 8017f20:	fb00 3312 	mls	r3, r0, r2, r3
 8017f24:	b29b      	uxth	r3, r3
 8017f26:	fb0e f303 	mul.w	r3, lr, r3
 8017f2a:	3101      	adds	r1, #1
 8017f2c:	58fa      	ldr	r2, [r7, r3]
 8017f2e:	4296      	cmp	r6, r2
 8017f30:	bf08      	it	eq
 8017f32:	f10c 0c01 	addeq.w	ip, ip, #1
 8017f36:	b28b      	uxth	r3, r1
 8017f38:	bf08      	it	eq
 8017f3a:	fa1f fc8c 	uxtheq.w	ip, ip
 8017f3e:	4283      	cmp	r3, r0
 8017f40:	d3ec      	bcc.n	8017f1c <uxr_prepare_reliable_buffer_to_write+0x78>
 8017f42:	9b03      	ldr	r3, [sp, #12]
 8017f44:	f1a8 0704 	sub.w	r7, r8, #4
 8017f48:	b2bf      	uxth	r7, r7
 8017f4a:	1bbe      	subs	r6, r7, r6
 8017f4c:	1aff      	subs	r7, r7, r3
 8017f4e:	b2bf      	uxth	r7, r7
 8017f50:	b2b6      	uxth	r6, r6
 8017f52:	eba9 0907 	sub.w	r9, r9, r7
 8017f56:	fbb9 faf6 	udiv	sl, r9, r6
 8017f5a:	fb06 911a 	mls	r1, r6, sl, r9
 8017f5e:	9607      	str	r6, [sp, #28]
 8017f60:	2900      	cmp	r1, #0
 8017f62:	f040 80bc 	bne.w	80180de <uxr_prepare_reliable_buffer_to_write+0x23a>
 8017f66:	fa1f fa8a 	uxth.w	sl, sl
 8017f6a:	45e2      	cmp	sl, ip
 8017f6c:	f200 8092 	bhi.w	8018094 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8017f70:	f10d 0b20 	add.w	fp, sp, #32
 8017f74:	f1ba 0f00 	cmp.w	sl, #0
 8017f78:	d03a      	beq.n	8017ff0 <uxr_prepare_reliable_buffer_to_write+0x14c>
 8017f7a:	f04f 0900 	mov.w	r9, #0
 8017f7e:	f10d 0b20 	add.w	fp, sp, #32
 8017f82:	e9d4 2300 	ldrd	r2, r3, [r4]
 8017f86:	fbb5 fcf0 	udiv	ip, r5, r0
 8017f8a:	fb00 511c 	mls	r1, r0, ip, r5
 8017f8e:	fa1f fc81 	uxth.w	ip, r1
 8017f92:	fbb3 f1f0 	udiv	r1, r3, r0
 8017f96:	fb0c f101 	mul.w	r1, ip, r1
 8017f9a:	3104      	adds	r1, #4
 8017f9c:	4411      	add	r1, r2
 8017f9e:	4658      	mov	r0, fp
 8017fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fa4:	9300      	str	r3, [sp, #0]
 8017fa6:	4642      	mov	r2, r8
 8017fa8:	2300      	movs	r3, #0
 8017faa:	f7fa fc3b 	bl	8012824 <ucdr_init_buffer_origin_offset>
 8017fae:	463a      	mov	r2, r7
 8017fb0:	2300      	movs	r3, #0
 8017fb2:	210d      	movs	r1, #13
 8017fb4:	4658      	mov	r0, fp
 8017fb6:	f7fc f829 	bl	801400c <uxr_buffer_submessage_header>
 8017fba:	8921      	ldrh	r1, [r4, #8]
 8017fbc:	fbb5 f2f1 	udiv	r2, r5, r1
 8017fc0:	fb01 5212 	mls	r2, r1, r2, r5
 8017fc4:	b292      	uxth	r2, r2
 8017fc6:	6863      	ldr	r3, [r4, #4]
 8017fc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8017fcc:	fb02 f303 	mul.w	r3, r2, r3
 8017fd0:	6822      	ldr	r2, [r4, #0]
 8017fd2:	4628      	mov	r0, r5
 8017fd4:	f842 8003 	str.w	r8, [r2, r3]
 8017fd8:	2101      	movs	r1, #1
 8017fda:	f000 fab7 	bl	801854c <uxr_seq_num_add>
 8017fde:	f109 0901 	add.w	r9, r9, #1
 8017fe2:	fa1f f389 	uxth.w	r3, r9
 8017fe6:	459a      	cmp	sl, r3
 8017fe8:	4605      	mov	r5, r0
 8017fea:	4637      	mov	r7, r6
 8017fec:	8920      	ldrh	r0, [r4, #8]
 8017fee:	d8c8      	bhi.n	8017f82 <uxr_prepare_reliable_buffer_to_write+0xde>
 8017ff0:	fbb5 f1f0 	udiv	r1, r5, r0
 8017ff4:	fb00 5111 	mls	r1, r0, r1, r5
 8017ff8:	b28e      	uxth	r6, r1
 8017ffa:	6863      	ldr	r3, [r4, #4]
 8017ffc:	fbb3 f1f0 	udiv	r1, r3, r0
 8018000:	6823      	ldr	r3, [r4, #0]
 8018002:	fb06 f101 	mul.w	r1, r6, r1
 8018006:	3104      	adds	r1, #4
 8018008:	4419      	add	r1, r3
 801800a:	4642      	mov	r2, r8
 801800c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8018010:	9000      	str	r0, [sp, #0]
 8018012:	2300      	movs	r3, #0
 8018014:	4658      	mov	r0, fp
 8018016:	f7fa fc05 	bl	8012824 <ucdr_init_buffer_origin_offset>
 801801a:	9e07      	ldr	r6, [sp, #28]
 801801c:	4658      	mov	r0, fp
 801801e:	b2b2      	uxth	r2, r6
 8018020:	2302      	movs	r3, #2
 8018022:	210d      	movs	r1, #13
 8018024:	f7fb fff2 	bl	801400c <uxr_buffer_submessage_header>
 8018028:	9b06      	ldr	r3, [sp, #24]
 801802a:	7b20      	ldrb	r0, [r4, #12]
 801802c:	8927      	ldrh	r7, [r4, #8]
 801802e:	f1a3 0208 	sub.w	r2, r3, #8
 8018032:	9b03      	ldr	r3, [sp, #12]
 8018034:	3004      	adds	r0, #4
 8018036:	1ad2      	subs	r2, r2, r3
 8018038:	1d19      	adds	r1, r3, #4
 801803a:	9b04      	ldr	r3, [sp, #16]
 801803c:	4430      	add	r0, r6
 801803e:	fbb5 f6f7 	udiv	r6, r5, r7
 8018042:	fb07 5616 	mls	r6, r7, r6, r5
 8018046:	440b      	add	r3, r1
 8018048:	b2b6      	uxth	r6, r6
 801804a:	4619      	mov	r1, r3
 801804c:	6863      	ldr	r3, [r4, #4]
 801804e:	fbb3 f3f7 	udiv	r3, r3, r7
 8018052:	fb06 f303 	mul.w	r3, r6, r3
 8018056:	6826      	ldr	r6, [r4, #0]
 8018058:	50f0      	str	r0, [r6, r3]
 801805a:	9e05      	ldr	r6, [sp, #20]
 801805c:	4630      	mov	r0, r6
 801805e:	f7fa fbf3 	bl	8012848 <ucdr_init_buffer>
 8018062:	4630      	mov	r0, r6
 8018064:	493c      	ldr	r1, [pc, #240]	; (8018158 <uxr_prepare_reliable_buffer_to_write+0x2b4>)
 8018066:	4622      	mov	r2, r4
 8018068:	f7fa fbc2 	bl	80127f0 <ucdr_set_on_full_buffer_callback>
 801806c:	2001      	movs	r0, #1
 801806e:	81e5      	strh	r5, [r4, #14]
 8018070:	b011      	add	sp, #68	; 0x44
 8018072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018076:	2101      	movs	r1, #1
 8018078:	89e0      	ldrh	r0, [r4, #14]
 801807a:	f000 fa67 	bl	801854c <uxr_seq_num_add>
 801807e:	8921      	ldrh	r1, [r4, #8]
 8018080:	4605      	mov	r5, r0
 8018082:	8a60      	ldrh	r0, [r4, #18]
 8018084:	f000 fa62 	bl	801854c <uxr_seq_num_add>
 8018088:	4601      	mov	r1, r0
 801808a:	4628      	mov	r0, r5
 801808c:	f000 fa66 	bl	801855c <uxr_seq_num_cmp>
 8018090:	2800      	cmp	r0, #0
 8018092:	dd2a      	ble.n	80180ea <uxr_prepare_reliable_buffer_to_write+0x246>
 8018094:	2000      	movs	r0, #0
 8018096:	b011      	add	sp, #68	; 0x44
 8018098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801809c:	8921      	ldrh	r1, [r4, #8]
 801809e:	8a60      	ldrh	r0, [r4, #18]
 80180a0:	f000 fa54 	bl	801854c <uxr_seq_num_add>
 80180a4:	4601      	mov	r1, r0
 80180a6:	4628      	mov	r0, r5
 80180a8:	f000 fa58 	bl	801855c <uxr_seq_num_cmp>
 80180ac:	2800      	cmp	r0, #0
 80180ae:	dcf1      	bgt.n	8018094 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 80180b0:	8927      	ldrh	r7, [r4, #8]
 80180b2:	fbb5 f2f7 	udiv	r2, r5, r7
 80180b6:	fb07 5512 	mls	r5, r7, r2, r5
 80180ba:	b2ad      	uxth	r5, r5
 80180bc:	6863      	ldr	r3, [r4, #4]
 80180be:	6822      	ldr	r2, [r4, #0]
 80180c0:	fbb3 f3f7 	udiv	r3, r3, r7
 80180c4:	fb05 f303 	mul.w	r3, r5, r3
 80180c8:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 80180cc:	50d6      	str	r6, [r2, r3]
 80180ce:	9a03      	ldr	r2, [sp, #12]
 80180d0:	9200      	str	r2, [sp, #0]
 80180d2:	2300      	movs	r3, #0
 80180d4:	4632      	mov	r2, r6
 80180d6:	f7fa fba5 	bl	8012824 <ucdr_init_buffer_origin_offset>
 80180da:	2001      	movs	r0, #1
 80180dc:	e7db      	b.n	8018096 <uxr_prepare_reliable_buffer_to_write+0x1f2>
 80180de:	f10a 0a01 	add.w	sl, sl, #1
 80180e2:	fa1f fa8a 	uxth.w	sl, sl
 80180e6:	9107      	str	r1, [sp, #28]
 80180e8:	e73f      	b.n	8017f6a <uxr_prepare_reliable_buffer_to_write+0xc6>
 80180ea:	8921      	ldrh	r1, [r4, #8]
 80180ec:	fbb5 f3f1 	udiv	r3, r5, r1
 80180f0:	fb01 5313 	mls	r3, r1, r3, r5
 80180f4:	b29a      	uxth	r2, r3
 80180f6:	6863      	ldr	r3, [r4, #4]
 80180f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80180fc:	6821      	ldr	r1, [r4, #0]
 80180fe:	9805      	ldr	r0, [sp, #20]
 8018100:	fb02 f303 	mul.w	r3, r2, r3
 8018104:	3304      	adds	r3, #4
 8018106:	7b22      	ldrb	r2, [r4, #12]
 8018108:	4419      	add	r1, r3
 801810a:	444a      	add	r2, r9
 801810c:	f841 2c04 	str.w	r2, [r1, #-4]
 8018110:	7b23      	ldrb	r3, [r4, #12]
 8018112:	9300      	str	r3, [sp, #0]
 8018114:	2300      	movs	r3, #0
 8018116:	f7fa fb85 	bl	8012824 <ucdr_init_buffer_origin_offset>
 801811a:	81e5      	strh	r5, [r4, #14]
 801811c:	2001      	movs	r0, #1
 801811e:	e7ba      	b.n	8018096 <uxr_prepare_reliable_buffer_to_write+0x1f2>
 8018120:	4628      	mov	r0, r5
 8018122:	2101      	movs	r1, #1
 8018124:	f000 fa12 	bl	801854c <uxr_seq_num_add>
 8018128:	4605      	mov	r5, r0
 801812a:	8920      	ldrh	r0, [r4, #8]
 801812c:	fbb5 f3f0 	udiv	r3, r5, r0
 8018130:	fb00 5313 	mls	r3, r0, r3, r5
 8018134:	b29a      	uxth	r2, r3
 8018136:	6863      	ldr	r3, [r4, #4]
 8018138:	fbb3 f3f0 	udiv	r3, r3, r0
 801813c:	fb02 f303 	mul.w	r3, r2, r3
 8018140:	6822      	ldr	r2, [r4, #0]
 8018142:	7b26      	ldrb	r6, [r4, #12]
 8018144:	3304      	adds	r3, #4
 8018146:	18d3      	adds	r3, r2, r3
 8018148:	9304      	str	r3, [sp, #16]
 801814a:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801814e:	9303      	str	r3, [sp, #12]
 8018150:	e6da      	b.n	8017f08 <uxr_prepare_reliable_buffer_to_write+0x64>
 8018152:	4684      	mov	ip, r0
 8018154:	e6f5      	b.n	8017f42 <uxr_prepare_reliable_buffer_to_write+0x9e>
 8018156:	bf00      	nop
 8018158:	08017d85 	.word	0x08017d85

0801815c <uxr_prepare_next_reliable_buffer_to_send>:
 801815c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801815e:	4604      	mov	r4, r0
 8018160:	460f      	mov	r7, r1
 8018162:	8a00      	ldrh	r0, [r0, #16]
 8018164:	2101      	movs	r1, #1
 8018166:	4616      	mov	r6, r2
 8018168:	461d      	mov	r5, r3
 801816a:	f000 f9ef 	bl	801854c <uxr_seq_num_add>
 801816e:	8028      	strh	r0, [r5, #0]
 8018170:	8922      	ldrh	r2, [r4, #8]
 8018172:	fbb0 f3f2 	udiv	r3, r0, r2
 8018176:	fb02 0c13 	mls	ip, r2, r3, r0
 801817a:	fa1f fc8c 	uxth.w	ip, ip
 801817e:	6863      	ldr	r3, [r4, #4]
 8018180:	fbb3 f3f2 	udiv	r3, r3, r2
 8018184:	fb0c fc03 	mul.w	ip, ip, r3
 8018188:	6823      	ldr	r3, [r4, #0]
 801818a:	89e1      	ldrh	r1, [r4, #14]
 801818c:	f10c 0c04 	add.w	ip, ip, #4
 8018190:	4463      	add	r3, ip
 8018192:	603b      	str	r3, [r7, #0]
 8018194:	6823      	ldr	r3, [r4, #0]
 8018196:	449c      	add	ip, r3
 8018198:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801819c:	6033      	str	r3, [r6, #0]
 801819e:	f000 f9dd 	bl	801855c <uxr_seq_num_cmp>
 80181a2:	2800      	cmp	r0, #0
 80181a4:	dd01      	ble.n	80181aa <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80181a6:	2000      	movs	r0, #0
 80181a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181aa:	7b23      	ldrb	r3, [r4, #12]
 80181ac:	6832      	ldr	r2, [r6, #0]
 80181ae:	429a      	cmp	r2, r3
 80181b0:	d9f9      	bls.n	80181a6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80181b2:	8a61      	ldrh	r1, [r4, #18]
 80181b4:	8a20      	ldrh	r0, [r4, #16]
 80181b6:	f000 f9cd 	bl	8018554 <uxr_seq_num_sub>
 80181ba:	8923      	ldrh	r3, [r4, #8]
 80181bc:	4283      	cmp	r3, r0
 80181be:	d0f2      	beq.n	80181a6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80181c0:	8828      	ldrh	r0, [r5, #0]
 80181c2:	89e3      	ldrh	r3, [r4, #14]
 80181c4:	8220      	strh	r0, [r4, #16]
 80181c6:	4298      	cmp	r0, r3
 80181c8:	d001      	beq.n	80181ce <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80181ca:	2001      	movs	r0, #1
 80181cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181ce:	2101      	movs	r1, #1
 80181d0:	f000 f9bc 	bl	801854c <uxr_seq_num_add>
 80181d4:	81e0      	strh	r0, [r4, #14]
 80181d6:	2001      	movs	r0, #1
 80181d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181da:	bf00      	nop

080181dc <uxr_update_output_stream_heartbeat_timestamp>:
 80181dc:	b570      	push	{r4, r5, r6, lr}
 80181de:	8a01      	ldrh	r1, [r0, #16]
 80181e0:	4604      	mov	r4, r0
 80181e2:	8a40      	ldrh	r0, [r0, #18]
 80181e4:	4615      	mov	r5, r2
 80181e6:	461e      	mov	r6, r3
 80181e8:	f000 f9b8 	bl	801855c <uxr_seq_num_cmp>
 80181ec:	2800      	cmp	r0, #0
 80181ee:	db07      	blt.n	8018200 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80181f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80181f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80181f8:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80181fc:	2000      	movs	r0, #0
 80181fe:	bd70      	pop	{r4, r5, r6, pc}
 8018200:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018204:	b940      	cbnz	r0, 8018218 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8018206:	2301      	movs	r3, #1
 8018208:	f884 3020 	strb.w	r3, [r4, #32]
 801820c:	3564      	adds	r5, #100	; 0x64
 801820e:	f146 0600 	adc.w	r6, r6, #0
 8018212:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018216:	bd70      	pop	{r4, r5, r6, pc}
 8018218:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801821c:	4295      	cmp	r5, r2
 801821e:	eb76 0303 	sbcs.w	r3, r6, r3
 8018222:	bfa5      	ittet	ge
 8018224:	3001      	addge	r0, #1
 8018226:	f884 0020 	strbge.w	r0, [r4, #32]
 801822a:	2000      	movlt	r0, #0
 801822c:	2001      	movge	r0, #1
 801822e:	e7ed      	b.n	801820c <uxr_update_output_stream_heartbeat_timestamp+0x30>

08018230 <uxr_begin_output_nack_buffer_it>:
 8018230:	8a40      	ldrh	r0, [r0, #18]
 8018232:	4770      	bx	lr

08018234 <uxr_next_reliable_nack_buffer_to_send>:
 8018234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018238:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 801823c:	b082      	sub	sp, #8
 801823e:	f1b8 0f00 	cmp.w	r8, #0
 8018242:	d011      	beq.n	8018268 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8018244:	4604      	mov	r4, r0
 8018246:	8818      	ldrh	r0, [r3, #0]
 8018248:	460e      	mov	r6, r1
 801824a:	4617      	mov	r7, r2
 801824c:	461d      	mov	r5, r3
 801824e:	2101      	movs	r1, #1
 8018250:	f000 f97c 	bl	801854c <uxr_seq_num_add>
 8018254:	8028      	strh	r0, [r5, #0]
 8018256:	8a21      	ldrh	r1, [r4, #16]
 8018258:	f000 f980 	bl	801855c <uxr_seq_num_cmp>
 801825c:	2800      	cmp	r0, #0
 801825e:	dd07      	ble.n	8018270 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8018260:	f04f 0800 	mov.w	r8, #0
 8018264:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 8018268:	4640      	mov	r0, r8
 801826a:	b002      	add	sp, #8
 801826c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018270:	8921      	ldrh	r1, [r4, #8]
 8018272:	8828      	ldrh	r0, [r5, #0]
 8018274:	6823      	ldr	r3, [r4, #0]
 8018276:	fbb0 f2f1 	udiv	r2, r0, r1
 801827a:	fb01 0c12 	mls	ip, r1, r2, r0
 801827e:	fa1f f28c 	uxth.w	r2, ip
 8018282:	9301      	str	r3, [sp, #4]
 8018284:	6863      	ldr	r3, [r4, #4]
 8018286:	fbb3 fcf1 	udiv	ip, r3, r1
 801828a:	9b01      	ldr	r3, [sp, #4]
 801828c:	fb02 fc0c 	mul.w	ip, r2, ip
 8018290:	f10c 0c04 	add.w	ip, ip, #4
 8018294:	4463      	add	r3, ip
 8018296:	6033      	str	r3, [r6, #0]
 8018298:	6823      	ldr	r3, [r4, #0]
 801829a:	4463      	add	r3, ip
 801829c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80182a0:	603b      	str	r3, [r7, #0]
 80182a2:	7b22      	ldrb	r2, [r4, #12]
 80182a4:	429a      	cmp	r2, r3
 80182a6:	d0d2      	beq.n	801824e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80182a8:	4640      	mov	r0, r8
 80182aa:	b002      	add	sp, #8
 80182ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080182b0 <uxr_process_acknack>:
 80182b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182b2:	4604      	mov	r4, r0
 80182b4:	460e      	mov	r6, r1
 80182b6:	4610      	mov	r0, r2
 80182b8:	2101      	movs	r1, #1
 80182ba:	f000 f94b 	bl	8018554 <uxr_seq_num_sub>
 80182be:	8a61      	ldrh	r1, [r4, #18]
 80182c0:	f000 f948 	bl	8018554 <uxr_seq_num_sub>
 80182c4:	b1c0      	cbz	r0, 80182f8 <uxr_process_acknack+0x48>
 80182c6:	4605      	mov	r5, r0
 80182c8:	2700      	movs	r7, #0
 80182ca:	2101      	movs	r1, #1
 80182cc:	8a60      	ldrh	r0, [r4, #18]
 80182ce:	f000 f93d 	bl	801854c <uxr_seq_num_add>
 80182d2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80182d6:	fbb0 f1fc 	udiv	r1, r0, ip
 80182da:	e9d4 2300 	ldrd	r2, r3, [r4]
 80182de:	fb0c 0111 	mls	r1, ip, r1, r0
 80182e2:	b289      	uxth	r1, r1
 80182e4:	3701      	adds	r7, #1
 80182e6:	fbb3 f3fc 	udiv	r3, r3, ip
 80182ea:	fb01 f303 	mul.w	r3, r1, r3
 80182ee:	42bd      	cmp	r5, r7
 80182f0:	7b21      	ldrb	r1, [r4, #12]
 80182f2:	8260      	strh	r0, [r4, #18]
 80182f4:	50d1      	str	r1, [r2, r3]
 80182f6:	d1e8      	bne.n	80182ca <uxr_process_acknack+0x1a>
 80182f8:	3e00      	subs	r6, #0
 80182fa:	f04f 0300 	mov.w	r3, #0
 80182fe:	bf18      	it	ne
 8018300:	2601      	movne	r6, #1
 8018302:	f884 3020 	strb.w	r3, [r4, #32]
 8018306:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801830a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801830c <uxr_is_output_up_to_date>:
 801830c:	8a01      	ldrh	r1, [r0, #16]
 801830e:	8a40      	ldrh	r0, [r0, #18]
 8018310:	b508      	push	{r3, lr}
 8018312:	f000 f923 	bl	801855c <uxr_seq_num_cmp>
 8018316:	fab0 f080 	clz	r0, r0
 801831a:	0940      	lsrs	r0, r0, #5
 801831c:	bd08      	pop	{r3, pc}
 801831e:	bf00      	nop

08018320 <get_available_free_slots>:
 8018320:	8902      	ldrh	r2, [r0, #8]
 8018322:	b1da      	cbz	r2, 801835c <get_available_free_slots+0x3c>
 8018324:	b530      	push	{r4, r5, lr}
 8018326:	2100      	movs	r1, #0
 8018328:	6843      	ldr	r3, [r0, #4]
 801832a:	6805      	ldr	r5, [r0, #0]
 801832c:	7b04      	ldrb	r4, [r0, #12]
 801832e:	fbb3 fef2 	udiv	lr, r3, r2
 8018332:	4608      	mov	r0, r1
 8018334:	460b      	mov	r3, r1
 8018336:	fbb3 fcf2 	udiv	ip, r3, r2
 801833a:	fb02 331c 	mls	r3, r2, ip, r3
 801833e:	b29b      	uxth	r3, r3
 8018340:	fb0e f303 	mul.w	r3, lr, r3
 8018344:	3101      	adds	r1, #1
 8018346:	f855 c003 	ldr.w	ip, [r5, r3]
 801834a:	4564      	cmp	r4, ip
 801834c:	bf08      	it	eq
 801834e:	3001      	addeq	r0, #1
 8018350:	b28b      	uxth	r3, r1
 8018352:	bf08      	it	eq
 8018354:	b280      	uxtheq	r0, r0
 8018356:	4293      	cmp	r3, r2
 8018358:	d3ed      	bcc.n	8018336 <get_available_free_slots+0x16>
 801835a:	bd30      	pop	{r4, r5, pc}
 801835c:	4610      	mov	r0, r2
 801835e:	4770      	bx	lr

08018360 <uxr_buffer_cancel_data>:
 8018360:	b510      	push	{r4, lr}
 8018362:	b094      	sub	sp, #80	; 0x50
 8018364:	2300      	movs	r3, #0
 8018366:	9202      	str	r2, [sp, #8]
 8018368:	9205      	str	r2, [sp, #20]
 801836a:	9301      	str	r3, [sp, #4]
 801836c:	2201      	movs	r2, #1
 801836e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018372:	f88d 301e 	strb.w	r3, [sp, #30]
 8018376:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 801837a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801837e:	2308      	movs	r3, #8
 8018380:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8018384:	9300      	str	r3, [sp, #0]
 8018386:	2210      	movs	r2, #16
 8018388:	ab0c      	add	r3, sp, #48	; 0x30
 801838a:	4604      	mov	r4, r0
 801838c:	9103      	str	r1, [sp, #12]
 801838e:	f7fb fb9f 	bl	8013ad0 <uxr_prepare_stream_to_write_submessage>
 8018392:	b918      	cbnz	r0, 801839c <uxr_buffer_cancel_data+0x3c>
 8018394:	4604      	mov	r4, r0
 8018396:	4620      	mov	r0, r4
 8018398:	b014      	add	sp, #80	; 0x50
 801839a:	bd10      	pop	{r4, pc}
 801839c:	9905      	ldr	r1, [sp, #20]
 801839e:	aa06      	add	r2, sp, #24
 80183a0:	4620      	mov	r0, r4
 80183a2:	f7fb fccb 	bl	8013d3c <uxr_init_base_object_request>
 80183a6:	a906      	add	r1, sp, #24
 80183a8:	4604      	mov	r4, r0
 80183aa:	a80c      	add	r0, sp, #48	; 0x30
 80183ac:	f7fc feda 	bl	8015164 <uxr_serialize_READ_DATA_Payload>
 80183b0:	4620      	mov	r0, r4
 80183b2:	b014      	add	sp, #80	; 0x50
 80183b4:	bd10      	pop	{r4, pc}
 80183b6:	bf00      	nop

080183b8 <read_submessage_format>:
 80183b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80183bc:	b095      	sub	sp, #84	; 0x54
 80183be:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 80183c2:	b113      	cbz	r3, 80183ca <read_submessage_format+0x12>
 80183c4:	b015      	add	sp, #84	; 0x54
 80183c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183ca:	460c      	mov	r4, r1
 80183cc:	4615      	mov	r5, r2
 80183ce:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80183d2:	4607      	mov	r7, r0
 80183d4:	981c      	ldr	r0, [sp, #112]	; 0x70
 80183d6:	9004      	str	r0, [sp, #16]
 80183d8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80183da:	9005      	str	r0, [sp, #20]
 80183dc:	1a52      	subs	r2, r2, r1
 80183de:	a80c      	add	r0, sp, #48	; 0x30
 80183e0:	4699      	mov	r9, r3
 80183e2:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 80183e6:	f7fa fa2f 	bl	8012848 <ucdr_init_buffer>
 80183ea:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80183ee:	a80c      	add	r0, sp, #48	; 0x30
 80183f0:	f7fa f9fe 	bl	80127f0 <ucdr_set_on_full_buffer_callback>
 80183f4:	69e2      	ldr	r2, [r4, #28]
 80183f6:	b19a      	cbz	r2, 8018420 <read_submessage_format+0x68>
 80183f8:	f1b8 0f07 	cmp.w	r8, #7
 80183fc:	f882 9014 	strb.w	r9, [r2, #20]
 8018400:	d040      	beq.n	8018484 <read_submessage_format+0xcc>
 8018402:	f1b8 0f08 	cmp.w	r8, #8
 8018406:	d02e      	beq.n	8018466 <read_submessage_format+0xae>
 8018408:	f1b8 0f06 	cmp.w	r8, #6
 801840c:	d011      	beq.n	8018432 <read_submessage_format+0x7a>
 801840e:	2301      	movs	r3, #1
 8018410:	7513      	strb	r3, [r2, #20]
 8018412:	4629      	mov	r1, r5
 8018414:	4620      	mov	r0, r4
 8018416:	f7fa fa67 	bl	80128e8 <ucdr_advance_buffer>
 801841a:	b015      	add	sp, #84	; 0x54
 801841c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018420:	f1b8 0f07 	cmp.w	r8, #7
 8018424:	d02e      	beq.n	8018484 <read_submessage_format+0xcc>
 8018426:	f1b8 0f08 	cmp.w	r8, #8
 801842a:	d01c      	beq.n	8018466 <read_submessage_format+0xae>
 801842c:	f1b8 0f06 	cmp.w	r8, #6
 8018430:	d1ef      	bne.n	8018412 <read_submessage_format+0x5a>
 8018432:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 8018436:	f1b8 0f00 	cmp.w	r8, #0
 801843a:	d011      	beq.n	8018460 <read_submessage_format+0xa8>
 801843c:	ab0c      	add	r3, sp, #48	; 0x30
 801843e:	e9cd 3500 	strd	r3, r5, [sp]
 8018442:	2306      	movs	r3, #6
 8018444:	f88d 3016 	strb.w	r3, [sp, #22]
 8018448:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801844c:	9302      	str	r3, [sp, #8]
 801844e:	4632      	mov	r2, r6
 8018450:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8018454:	4638      	mov	r0, r7
 8018456:	47c0      	blx	r8
 8018458:	2301      	movs	r3, #1
 801845a:	69e2      	ldr	r2, [r4, #28]
 801845c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8018460:	2a00      	cmp	r2, #0
 8018462:	d1d4      	bne.n	801840e <read_submessage_format+0x56>
 8018464:	e7d5      	b.n	8018412 <read_submessage_format+0x5a>
 8018466:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801846a:	2b00      	cmp	r3, #0
 801846c:	d0f8      	beq.n	8018460 <read_submessage_format+0xa8>
 801846e:	a906      	add	r1, sp, #24
 8018470:	a80c      	add	r0, sp, #48	; 0x30
 8018472:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8018476:	f7fc ff15 	bl	80152a4 <uxr_deserialize_SampleIdentity>
 801847a:	b9a0      	cbnz	r0, 80184a6 <read_submessage_format+0xee>
 801847c:	69e2      	ldr	r2, [r4, #28]
 801847e:	2a00      	cmp	r2, #0
 8018480:	d1c5      	bne.n	801840e <read_submessage_format+0x56>
 8018482:	e7c6      	b.n	8018412 <read_submessage_format+0x5a>
 8018484:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018488:	b13b      	cbz	r3, 801849a <read_submessage_format+0xe2>
 801848a:	a906      	add	r1, sp, #24
 801848c:	a80c      	add	r0, sp, #48	; 0x30
 801848e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8018492:	f7fc fc01 	bl	8014c98 <uxr_deserialize_BaseObjectRequest>
 8018496:	bb60      	cbnz	r0, 80184f2 <read_submessage_format+0x13a>
 8018498:	69e2      	ldr	r2, [r4, #28]
 801849a:	68a3      	ldr	r3, [r4, #8]
 801849c:	442b      	add	r3, r5
 801849e:	60a3      	str	r3, [r4, #8]
 80184a0:	2a00      	cmp	r2, #0
 80184a2:	d1b4      	bne.n	801840e <read_submessage_format+0x56>
 80184a4:	e7b5      	b.n	8018412 <read_submessage_format+0x5a>
 80184a6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80184aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80184ac:	1a52      	subs	r2, r2, r1
 80184ae:	eba8 0803 	sub.w	r8, r8, r3
 80184b2:	a80c      	add	r0, sp, #48	; 0x30
 80184b4:	f7fa f9c8 	bl	8012848 <ucdr_init_buffer>
 80184b8:	44a8      	add	r8, r5
 80184ba:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80184be:	a80c      	add	r0, sp, #48	; 0x30
 80184c0:	f7fa f996 	bl	80127f0 <ucdr_set_on_full_buffer_callback>
 80184c4:	fa1f f888 	uxth.w	r8, r8
 80184c8:	ab0c      	add	r3, sp, #48	; 0x30
 80184ca:	9300      	str	r3, [sp, #0]
 80184cc:	f8cd 8004 	str.w	r8, [sp, #4]
 80184d0:	2108      	movs	r1, #8
 80184d2:	f88d 1016 	strb.w	r1, [sp, #22]
 80184d6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80184da:	9102      	str	r1, [sp, #8]
 80184dc:	ab06      	add	r3, sp, #24
 80184de:	4632      	mov	r2, r6
 80184e0:	9905      	ldr	r1, [sp, #20]
 80184e2:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 80184e6:	4638      	mov	r0, r7
 80184e8:	47b0      	blx	r6
 80184ea:	2301      	movs	r3, #1
 80184ec:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80184f0:	e7c4      	b.n	801847c <read_submessage_format+0xc4>
 80184f2:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80184f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80184f8:	1a52      	subs	r2, r2, r1
 80184fa:	a80c      	add	r0, sp, #48	; 0x30
 80184fc:	eba8 0803 	sub.w	r8, r8, r3
 8018500:	f7fa f9a2 	bl	8012848 <ucdr_init_buffer>
 8018504:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018508:	a80c      	add	r0, sp, #48	; 0x30
 801850a:	f7fa f971 	bl	80127f0 <ucdr_set_on_full_buffer_callback>
 801850e:	ab0c      	add	r3, sp, #48	; 0x30
 8018510:	9300      	str	r3, [sp, #0]
 8018512:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8018516:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801851a:	44a8      	add	r8, r5
 801851c:	fa1f f888 	uxth.w	r8, r8
 8018520:	f8cd 8004 	str.w	r8, [sp, #4]
 8018524:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018528:	2107      	movs	r1, #7
 801852a:	f88d 1016 	strb.w	r1, [sp, #22]
 801852e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8018532:	9102      	str	r1, [sp, #8]
 8018534:	4632      	mov	r2, r6
 8018536:	b29b      	uxth	r3, r3
 8018538:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 801853c:	9905      	ldr	r1, [sp, #20]
 801853e:	4638      	mov	r0, r7
 8018540:	47b0      	blx	r6
 8018542:	2301      	movs	r3, #1
 8018544:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8018548:	e7a6      	b.n	8018498 <read_submessage_format+0xe0>
 801854a:	bf00      	nop

0801854c <uxr_seq_num_add>:
 801854c:	4408      	add	r0, r1
 801854e:	b280      	uxth	r0, r0
 8018550:	4770      	bx	lr
 8018552:	bf00      	nop

08018554 <uxr_seq_num_sub>:
 8018554:	1a40      	subs	r0, r0, r1
 8018556:	b280      	uxth	r0, r0
 8018558:	4770      	bx	lr
 801855a:	bf00      	nop

0801855c <uxr_seq_num_cmp>:
 801855c:	4288      	cmp	r0, r1
 801855e:	d011      	beq.n	8018584 <uxr_seq_num_cmp+0x28>
 8018560:	d309      	bcc.n	8018576 <uxr_seq_num_cmp+0x1a>
 8018562:	4288      	cmp	r0, r1
 8018564:	d910      	bls.n	8018588 <uxr_seq_num_cmp+0x2c>
 8018566:	1a40      	subs	r0, r0, r1
 8018568:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801856c:	bfd4      	ite	le
 801856e:	2001      	movle	r0, #1
 8018570:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8018574:	4770      	bx	lr
 8018576:	1a0b      	subs	r3, r1, r0
 8018578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801857c:	daf1      	bge.n	8018562 <uxr_seq_num_cmp+0x6>
 801857e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018582:	4770      	bx	lr
 8018584:	2000      	movs	r0, #0
 8018586:	4770      	bx	lr
 8018588:	2001      	movs	r0, #1
 801858a:	4770      	bx	lr

0801858c <uxr_init_framing_io>:
 801858c:	2300      	movs	r3, #0
 801858e:	7041      	strb	r1, [r0, #1]
 8018590:	7003      	strb	r3, [r0, #0]
 8018592:	8583      	strh	r3, [r0, #44]	; 0x2c
 8018594:	4770      	bx	lr
 8018596:	bf00      	nop

08018598 <uxr_write_framed_msg>:
 8018598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801859c:	4617      	mov	r7, r2
 801859e:	7842      	ldrb	r2, [r0, #1]
 80185a0:	b083      	sub	sp, #12
 80185a2:	460e      	mov	r6, r1
 80185a4:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 80185a8:	469a      	mov	sl, r3
 80185aa:	2901      	cmp	r1, #1
 80185ac:	f04f 037e 	mov.w	r3, #126	; 0x7e
 80185b0:	4604      	mov	r4, r0
 80185b2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80185b6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80185ba:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 80185be:	f240 8137 	bls.w	8018830 <uxr_write_framed_msg+0x298>
 80185c2:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80185c6:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 80185ca:	2901      	cmp	r1, #1
 80185cc:	f04f 0202 	mov.w	r2, #2
 80185d0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80185d4:	f240 808f 	bls.w	80186f6 <uxr_write_framed_msg+0x15e>
 80185d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80185da:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 80185de:	b2dd      	uxtb	r5, r3
 80185e0:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 80185e4:	2203      	movs	r2, #3
 80185e6:	2901      	cmp	r1, #1
 80185e8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80185ec:	f240 809a 	bls.w	8018724 <uxr_write_framed_msg+0x18c>
 80185f0:	18a1      	adds	r1, r4, r2
 80185f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80185f4:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 80185f8:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80185fc:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8018600:	3201      	adds	r2, #1
 8018602:	2801      	cmp	r0, #1
 8018604:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018608:	f240 80a0 	bls.w	801874c <uxr_write_framed_msg+0x1b4>
 801860c:	18a0      	adds	r0, r4, r2
 801860e:	3201      	adds	r2, #1
 8018610:	b2d2      	uxtb	r2, r2
 8018612:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8018616:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801861a:	2b00      	cmp	r3, #0
 801861c:	f000 80a9 	beq.w	8018772 <uxr_write_framed_msg+0x1da>
 8018620:	f04f 0900 	mov.w	r9, #0
 8018624:	46c8      	mov	r8, r9
 8018626:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801862a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 801862e:	2901      	cmp	r1, #1
 8018630:	f240 80c3 	bls.w	80187ba <uxr_write_framed_msg+0x222>
 8018634:	2a29      	cmp	r2, #41	; 0x29
 8018636:	f200 809f 	bhi.w	8018778 <uxr_write_framed_msg+0x1e0>
 801863a:	18a1      	adds	r1, r4, r2
 801863c:	3201      	adds	r2, #1
 801863e:	b2d2      	uxtb	r2, r2
 8018640:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8018644:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018648:	ea89 0303 	eor.w	r3, r9, r3
 801864c:	498c      	ldr	r1, [pc, #560]	; (8018880 <uxr_write_framed_msg+0x2e8>)
 801864e:	b2db      	uxtb	r3, r3
 8018650:	f108 0801 	add.w	r8, r8, #1
 8018654:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8018658:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 801865c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801865e:	4543      	cmp	r3, r8
 8018660:	d8e1      	bhi.n	8018626 <uxr_write_framed_msg+0x8e>
 8018662:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8018666:	fa5f f889 	uxtb.w	r8, r9
 801866a:	9301      	str	r3, [sp, #4]
 801866c:	f04f 0900 	mov.w	r9, #0
 8018670:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 8018674:	fa5f f18a 	uxtb.w	r1, sl
 8018678:	2901      	cmp	r1, #1
 801867a:	d921      	bls.n	80186c0 <uxr_write_framed_msg+0x128>
 801867c:	2a29      	cmp	r2, #41	; 0x29
 801867e:	f240 80af 	bls.w	80187e0 <uxr_write_framed_msg+0x248>
 8018682:	2500      	movs	r5, #0
 8018684:	e000      	b.n	8018688 <uxr_write_framed_msg+0xf0>
 8018686:	b160      	cbz	r0, 80186a2 <uxr_write_framed_msg+0x10a>
 8018688:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801868c:	1b52      	subs	r2, r2, r5
 801868e:	465b      	mov	r3, fp
 8018690:	4421      	add	r1, r4
 8018692:	4638      	mov	r0, r7
 8018694:	47b0      	blx	r6
 8018696:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801869a:	4405      	add	r5, r0
 801869c:	4295      	cmp	r5, r2
 801869e:	d3f2      	bcc.n	8018686 <uxr_write_framed_msg+0xee>
 80186a0:	d003      	beq.n	80186aa <uxr_write_framed_msg+0x112>
 80186a2:	2000      	movs	r0, #0
 80186a4:	b003      	add	sp, #12
 80186a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186aa:	fa5f f18a 	uxtb.w	r1, sl
 80186ae:	f04f 0300 	mov.w	r3, #0
 80186b2:	2901      	cmp	r1, #1
 80186b4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80186b8:	f04f 0200 	mov.w	r2, #0
 80186bc:	f200 8090 	bhi.w	80187e0 <uxr_write_framed_msg+0x248>
 80186c0:	1c51      	adds	r1, r2, #1
 80186c2:	b2c9      	uxtb	r1, r1
 80186c4:	2929      	cmp	r1, #41	; 0x29
 80186c6:	d8dc      	bhi.n	8018682 <uxr_write_framed_msg+0xea>
 80186c8:	18a5      	adds	r5, r4, r2
 80186ca:	4421      	add	r1, r4
 80186cc:	3202      	adds	r2, #2
 80186ce:	f088 0820 	eor.w	r8, r8, #32
 80186d2:	4648      	mov	r0, r9
 80186d4:	f04f 037d 	mov.w	r3, #125	; 0x7d
 80186d8:	b2d2      	uxtb	r2, r2
 80186da:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 80186de:	f04f 0901 	mov.w	r9, #1
 80186e2:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 80186e6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80186ea:	2800      	cmp	r0, #0
 80186ec:	f040 8085 	bne.w	80187fa <uxr_write_framed_msg+0x262>
 80186f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80186f4:	e7bc      	b.n	8018670 <uxr_write_framed_msg+0xd8>
 80186f6:	4611      	mov	r1, r2
 80186f8:	f04f 0c03 	mov.w	ip, #3
 80186fc:	2204      	movs	r2, #4
 80186fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018700:	4421      	add	r1, r4
 8018702:	b2dd      	uxtb	r5, r3
 8018704:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8018708:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 801870c:	44a4      	add	ip, r4
 801870e:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8018712:	f080 0020 	eor.w	r0, r0, #32
 8018716:	2901      	cmp	r1, #1
 8018718:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801871c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018720:	f63f af66 	bhi.w	80185f0 <uxr_write_framed_msg+0x58>
 8018724:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018726:	18a0      	adds	r0, r4, r2
 8018728:	f085 0520 	eor.w	r5, r5, #32
 801872c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8018730:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8018734:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 8018738:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801873c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8018740:	3202      	adds	r2, #2
 8018742:	2801      	cmp	r0, #1
 8018744:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8018748:	f63f af60 	bhi.w	801860c <uxr_write_framed_msg+0x74>
 801874c:	1c50      	adds	r0, r2, #1
 801874e:	18a5      	adds	r5, r4, r2
 8018750:	fa54 f080 	uxtab	r0, r4, r0
 8018754:	3202      	adds	r2, #2
 8018756:	f081 0120 	eor.w	r1, r1, #32
 801875a:	b2d2      	uxtb	r2, r2
 801875c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8018760:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 8018764:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8018768:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801876c:	2b00      	cmp	r3, #0
 801876e:	f47f af57 	bne.w	8018620 <uxr_write_framed_msg+0x88>
 8018772:	9301      	str	r3, [sp, #4]
 8018774:	4698      	mov	r8, r3
 8018776:	e779      	b.n	801866c <uxr_write_framed_msg+0xd4>
 8018778:	2500      	movs	r5, #0
 801877a:	e001      	b.n	8018780 <uxr_write_framed_msg+0x1e8>
 801877c:	2800      	cmp	r0, #0
 801877e:	d090      	beq.n	80186a2 <uxr_write_framed_msg+0x10a>
 8018780:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018784:	1b52      	subs	r2, r2, r5
 8018786:	465b      	mov	r3, fp
 8018788:	4421      	add	r1, r4
 801878a:	4638      	mov	r0, r7
 801878c:	47b0      	blx	r6
 801878e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018792:	4405      	add	r5, r0
 8018794:	4295      	cmp	r5, r2
 8018796:	d3f1      	bcc.n	801877c <uxr_write_framed_msg+0x1e4>
 8018798:	d183      	bne.n	80186a2 <uxr_write_framed_msg+0x10a>
 801879a:	f04f 0300 	mov.w	r3, #0
 801879e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80187a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80187a4:	4543      	cmp	r3, r8
 80187a6:	d964      	bls.n	8018872 <uxr_write_framed_msg+0x2da>
 80187a8:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80187ac:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 80187b0:	2901      	cmp	r1, #1
 80187b2:	f04f 0200 	mov.w	r2, #0
 80187b6:	f63f af3d 	bhi.w	8018634 <uxr_write_framed_msg+0x9c>
 80187ba:	1c51      	adds	r1, r2, #1
 80187bc:	b2c9      	uxtb	r1, r1
 80187be:	2929      	cmp	r1, #41	; 0x29
 80187c0:	d8da      	bhi.n	8018778 <uxr_write_framed_msg+0x1e0>
 80187c2:	18a0      	adds	r0, r4, r2
 80187c4:	4421      	add	r1, r4
 80187c6:	f04f 057d 	mov.w	r5, #125	; 0x7d
 80187ca:	3202      	adds	r2, #2
 80187cc:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 80187d0:	b2d2      	uxtb	r2, r2
 80187d2:	f083 0020 	eor.w	r0, r3, #32
 80187d6:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80187da:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80187de:	e733      	b.n	8018648 <uxr_write_framed_msg+0xb0>
 80187e0:	18a1      	adds	r1, r4, r2
 80187e2:	3201      	adds	r2, #1
 80187e4:	4648      	mov	r0, r9
 80187e6:	b2d2      	uxtb	r2, r2
 80187e8:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 80187ec:	f04f 0901 	mov.w	r9, #1
 80187f0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80187f4:	2800      	cmp	r0, #0
 80187f6:	f43f af7b 	beq.w	80186f0 <uxr_write_framed_msg+0x158>
 80187fa:	2500      	movs	r5, #0
 80187fc:	e002      	b.n	8018804 <uxr_write_framed_msg+0x26c>
 80187fe:	2800      	cmp	r0, #0
 8018800:	f43f af4f 	beq.w	80186a2 <uxr_write_framed_msg+0x10a>
 8018804:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8018808:	1b52      	subs	r2, r2, r5
 801880a:	465b      	mov	r3, fp
 801880c:	4421      	add	r1, r4
 801880e:	4638      	mov	r0, r7
 8018810:	47b0      	blx	r6
 8018812:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8018816:	4405      	add	r5, r0
 8018818:	4295      	cmp	r5, r2
 801881a:	d3f0      	bcc.n	80187fe <uxr_write_framed_msg+0x266>
 801881c:	f47f af41 	bne.w	80186a2 <uxr_write_framed_msg+0x10a>
 8018820:	2300      	movs	r3, #0
 8018822:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8018826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018828:	b298      	uxth	r0, r3
 801882a:	b003      	add	sp, #12
 801882c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018830:	217d      	movs	r1, #125	; 0x7d
 8018832:	f082 0220 	eor.w	r2, r2, #32
 8018836:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801883a:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801883e:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8018842:	2901      	cmp	r1, #1
 8018844:	f04f 0203 	mov.w	r2, #3
 8018848:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801884c:	d804      	bhi.n	8018858 <uxr_write_framed_msg+0x2c0>
 801884e:	4611      	mov	r1, r2
 8018850:	f04f 0c04 	mov.w	ip, #4
 8018854:	2205      	movs	r2, #5
 8018856:	e752      	b.n	80186fe <uxr_write_framed_msg+0x166>
 8018858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801885a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801885e:	b2dd      	uxtb	r5, r3
 8018860:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8018864:	2204      	movs	r2, #4
 8018866:	2901      	cmp	r1, #1
 8018868:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801886c:	f63f aec0 	bhi.w	80185f0 <uxr_write_framed_msg+0x58>
 8018870:	e758      	b.n	8018724 <uxr_write_framed_msg+0x18c>
 8018872:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8018876:	fa5f f889 	uxtb.w	r8, r9
 801887a:	9301      	str	r3, [sp, #4]
 801887c:	2200      	movs	r2, #0
 801887e:	e6f5      	b.n	801866c <uxr_write_framed_msg+0xd4>
 8018880:	0801be98 	.word	0x0801be98

08018884 <uxr_framing_read_transport>:
 8018884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018888:	4604      	mov	r4, r0
 801888a:	b083      	sub	sp, #12
 801888c:	461f      	mov	r7, r3
 801888e:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8018892:	4689      	mov	r9, r1
 8018894:	4692      	mov	sl, r2
 8018896:	f7fb fbff 	bl	8014098 <uxr_millis>
 801889a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801889e:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 80188a2:	42b3      	cmp	r3, r6
 80188a4:	4680      	mov	r8, r0
 80188a6:	d061      	beq.n	801896c <uxr_framing_read_transport+0xe8>
 80188a8:	d81c      	bhi.n	80188e4 <uxr_framing_read_transport+0x60>
 80188aa:	1e75      	subs	r5, r6, #1
 80188ac:	1aed      	subs	r5, r5, r3
 80188ae:	b2ed      	uxtb	r5, r5
 80188b0:	2600      	movs	r6, #0
 80188b2:	455d      	cmp	r5, fp
 80188b4:	d81f      	bhi.n	80188f6 <uxr_framing_read_transport+0x72>
 80188b6:	19ab      	adds	r3, r5, r6
 80188b8:	455b      	cmp	r3, fp
 80188ba:	bf84      	itt	hi
 80188bc:	ebab 0605 	subhi.w	r6, fp, r5
 80188c0:	b2f6      	uxtbhi	r6, r6
 80188c2:	b9ed      	cbnz	r5, 8018900 <uxr_framing_read_transport+0x7c>
 80188c4:	f04f 0b00 	mov.w	fp, #0
 80188c8:	f7fb fbe6 	bl	8014098 <uxr_millis>
 80188cc:	683b      	ldr	r3, [r7, #0]
 80188ce:	eba0 0808 	sub.w	r8, r0, r8
 80188d2:	eba3 0308 	sub.w	r3, r3, r8
 80188d6:	4658      	mov	r0, fp
 80188d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80188dc:	603b      	str	r3, [r7, #0]
 80188de:	b003      	add	sp, #12
 80188e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188e4:	2e00      	cmp	r6, #0
 80188e6:	d049      	beq.n	801897c <uxr_framing_read_transport+0xf8>
 80188e8:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 80188ec:	b2ed      	uxtb	r5, r5
 80188ee:	3e01      	subs	r6, #1
 80188f0:	455d      	cmp	r5, fp
 80188f2:	b2f6      	uxtb	r6, r6
 80188f4:	d9df      	bls.n	80188b6 <uxr_framing_read_transport+0x32>
 80188f6:	fa5f f58b 	uxtb.w	r5, fp
 80188fa:	2600      	movs	r6, #0
 80188fc:	2d00      	cmp	r5, #0
 80188fe:	d0e1      	beq.n	80188c4 <uxr_framing_read_transport+0x40>
 8018900:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8018904:	3102      	adds	r1, #2
 8018906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018908:	9300      	str	r3, [sp, #0]
 801890a:	683b      	ldr	r3, [r7, #0]
 801890c:	4421      	add	r1, r4
 801890e:	462a      	mov	r2, r5
 8018910:	4650      	mov	r0, sl
 8018912:	47c8      	blx	r9
 8018914:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8018918:	4a1a      	ldr	r2, [pc, #104]	; (8018984 <uxr_framing_read_transport+0x100>)
 801891a:	4403      	add	r3, r0
 801891c:	0859      	lsrs	r1, r3, #1
 801891e:	fba2 2101 	umull	r2, r1, r2, r1
 8018922:	0889      	lsrs	r1, r1, #2
 8018924:	222a      	movs	r2, #42	; 0x2a
 8018926:	fb02 3111 	mls	r1, r2, r1, r3
 801892a:	4683      	mov	fp, r0
 801892c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8018930:	2800      	cmp	r0, #0
 8018932:	d0c7      	beq.n	80188c4 <uxr_framing_read_transport+0x40>
 8018934:	42a8      	cmp	r0, r5
 8018936:	d1c7      	bne.n	80188c8 <uxr_framing_read_transport+0x44>
 8018938:	2e00      	cmp	r6, #0
 801893a:	d0c5      	beq.n	80188c8 <uxr_framing_read_transport+0x44>
 801893c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801893e:	9300      	str	r3, [sp, #0]
 8018940:	3102      	adds	r1, #2
 8018942:	4632      	mov	r2, r6
 8018944:	4421      	add	r1, r4
 8018946:	2300      	movs	r3, #0
 8018948:	4650      	mov	r0, sl
 801894a:	47c8      	blx	r9
 801894c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8018950:	4a0c      	ldr	r2, [pc, #48]	; (8018984 <uxr_framing_read_transport+0x100>)
 8018952:	180b      	adds	r3, r1, r0
 8018954:	0859      	lsrs	r1, r3, #1
 8018956:	fba2 1201 	umull	r1, r2, r2, r1
 801895a:	0892      	lsrs	r2, r2, #2
 801895c:	212a      	movs	r1, #42	; 0x2a
 801895e:	fb01 3312 	mls	r3, r1, r2, r3
 8018962:	eb00 0b05 	add.w	fp, r0, r5
 8018966:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801896a:	e7ad      	b.n	80188c8 <uxr_framing_read_transport+0x44>
 801896c:	2600      	movs	r6, #0
 801896e:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8018972:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8018974:	d9bf      	bls.n	80188f6 <uxr_framing_read_transport+0x72>
 8018976:	2102      	movs	r1, #2
 8018978:	2529      	movs	r5, #41	; 0x29
 801897a:	e7c4      	b.n	8018906 <uxr_framing_read_transport+0x82>
 801897c:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8018980:	b2ed      	uxtb	r5, r5
 8018982:	e796      	b.n	80188b2 <uxr_framing_read_transport+0x2e>
 8018984:	30c30c31 	.word	0x30c30c31

08018988 <uxr_read_framed_msg>:
 8018988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801898c:	461e      	mov	r6, r3
 801898e:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8018992:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8018996:	429d      	cmp	r5, r3
 8018998:	b083      	sub	sp, #12
 801899a:	4604      	mov	r4, r0
 801899c:	4688      	mov	r8, r1
 801899e:	4691      	mov	r9, r2
 80189a0:	f000 8188 	beq.w	8018cb4 <uxr_read_framed_msg+0x32c>
 80189a4:	7823      	ldrb	r3, [r4, #0]
 80189a6:	4dc1      	ldr	r5, [pc, #772]	; (8018cac <uxr_read_framed_msg+0x324>)
 80189a8:	4fc1      	ldr	r7, [pc, #772]	; (8018cb0 <uxr_read_framed_msg+0x328>)
 80189aa:	2b07      	cmp	r3, #7
 80189ac:	d8fd      	bhi.n	80189aa <uxr_read_framed_msg+0x22>
 80189ae:	e8df f013 	tbh	[pc, r3, lsl #1]
 80189b2:	0115      	.short	0x0115
 80189b4:	00d600f6 	.word	0x00d600f6
 80189b8:	009000b9 	.word	0x009000b9
 80189bc:	0030004d 	.word	0x0030004d
 80189c0:	0008      	.short	0x0008
 80189c2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80189c6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80189ca:	4299      	cmp	r1, r3
 80189cc:	f000 814a 	beq.w	8018c64 <uxr_read_framed_msg+0x2dc>
 80189d0:	18e2      	adds	r2, r4, r3
 80189d2:	7892      	ldrb	r2, [r2, #2]
 80189d4:	2a7d      	cmp	r2, #125	; 0x7d
 80189d6:	f000 8199 	beq.w	8018d0c <uxr_read_framed_msg+0x384>
 80189da:	3301      	adds	r3, #1
 80189dc:	0858      	lsrs	r0, r3, #1
 80189de:	fba5 1000 	umull	r1, r0, r5, r0
 80189e2:	0880      	lsrs	r0, r0, #2
 80189e4:	212a      	movs	r1, #42	; 0x2a
 80189e6:	fb01 3310 	mls	r3, r1, r0, r3
 80189ea:	2a7e      	cmp	r2, #126	; 0x7e
 80189ec:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80189f0:	f000 8252 	beq.w	8018e98 <uxr_read_framed_msg+0x510>
 80189f4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 80189f6:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 80189f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80189fc:	b29b      	uxth	r3, r3
 80189fe:	2200      	movs	r2, #0
 8018a00:	4299      	cmp	r1, r3
 8018a02:	86a3      	strh	r3, [r4, #52]	; 0x34
 8018a04:	7022      	strb	r2, [r4, #0]
 8018a06:	f000 8179 	beq.w	8018cfc <uxr_read_framed_msg+0x374>
 8018a0a:	2000      	movs	r0, #0
 8018a0c:	b003      	add	sp, #12
 8018a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a12:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8018a16:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8018a1a:	4299      	cmp	r1, r3
 8018a1c:	f000 8131 	beq.w	8018c82 <uxr_read_framed_msg+0x2fa>
 8018a20:	18e2      	adds	r2, r4, r3
 8018a22:	7890      	ldrb	r0, [r2, #2]
 8018a24:	287d      	cmp	r0, #125	; 0x7d
 8018a26:	f000 8190 	beq.w	8018d4a <uxr_read_framed_msg+0x3c2>
 8018a2a:	3301      	adds	r3, #1
 8018a2c:	085a      	lsrs	r2, r3, #1
 8018a2e:	fba5 1202 	umull	r1, r2, r5, r2
 8018a32:	0892      	lsrs	r2, r2, #2
 8018a34:	212a      	movs	r1, #42	; 0x2a
 8018a36:	fb01 3312 	mls	r3, r1, r2, r3
 8018a3a:	287e      	cmp	r0, #126	; 0x7e
 8018a3c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018a40:	f000 821a 	beq.w	8018e78 <uxr_read_framed_msg+0x4f0>
 8018a44:	2307      	movs	r3, #7
 8018a46:	86a0      	strh	r0, [r4, #52]	; 0x34
 8018a48:	7023      	strb	r3, [r4, #0]
 8018a4a:	e7ae      	b.n	80189aa <uxr_read_framed_msg+0x22>
 8018a4c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8018a4e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8018a52:	459e      	cmp	lr, r3
 8018a54:	d938      	bls.n	8018ac8 <uxr_read_framed_msg+0x140>
 8018a56:	ee07 8a90 	vmov	s15, r8
 8018a5a:	212a      	movs	r1, #42	; 0x2a
 8018a5c:	e020      	b.n	8018aa0 <uxr_read_framed_msg+0x118>
 8018a5e:	f89b c002 	ldrb.w	ip, [fp, #2]
 8018a62:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8018a66:	f000 80d4 	beq.w	8018c12 <uxr_read_framed_msg+0x28a>
 8018a6a:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8018a6e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8018a72:	f000 8219 	beq.w	8018ea8 <uxr_read_framed_msg+0x520>
 8018a76:	f806 c003 	strb.w	ip, [r6, r3]
 8018a7a:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 8018a7e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8018a80:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8018a84:	ea8a 000c 	eor.w	r0, sl, ip
 8018a88:	b2c0      	uxtb	r0, r0
 8018a8a:	3301      	adds	r3, #1
 8018a8c:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8018a90:	b29b      	uxth	r3, r3
 8018a92:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8018a96:	4573      	cmp	r3, lr
 8018a98:	8663      	strh	r3, [r4, #50]	; 0x32
 8018a9a:	86e2      	strh	r2, [r4, #54]	; 0x36
 8018a9c:	f080 8120 	bcs.w	8018ce0 <uxr_read_framed_msg+0x358>
 8018aa0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8018aa4:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8018aa8:	f100 0c01 	add.w	ip, r0, #1
 8018aac:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8018ab0:	fba5 8202 	umull	r8, r2, r5, r2
 8018ab4:	0892      	lsrs	r2, r2, #2
 8018ab6:	4582      	cmp	sl, r0
 8018ab8:	eb04 0b00 	add.w	fp, r4, r0
 8018abc:	fb01 c212 	mls	r2, r1, r2, ip
 8018ac0:	d1cd      	bne.n	8018a5e <uxr_read_framed_msg+0xd6>
 8018ac2:	ee17 8a90 	vmov	r8, s15
 8018ac6:	459e      	cmp	lr, r3
 8018ac8:	f040 8111 	bne.w	8018cee <uxr_read_framed_msg+0x366>
 8018acc:	2306      	movs	r3, #6
 8018ace:	7023      	strb	r3, [r4, #0]
 8018ad0:	e76b      	b.n	80189aa <uxr_read_framed_msg+0x22>
 8018ad2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8018ad6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8018ada:	4298      	cmp	r0, r3
 8018adc:	f000 80c2 	beq.w	8018c64 <uxr_read_framed_msg+0x2dc>
 8018ae0:	18e2      	adds	r2, r4, r3
 8018ae2:	7891      	ldrb	r1, [r2, #2]
 8018ae4:	297d      	cmp	r1, #125	; 0x7d
 8018ae6:	f000 814c 	beq.w	8018d82 <uxr_read_framed_msg+0x3fa>
 8018aea:	3301      	adds	r3, #1
 8018aec:	085a      	lsrs	r2, r3, #1
 8018aee:	fba5 0202 	umull	r0, r2, r5, r2
 8018af2:	0892      	lsrs	r2, r2, #2
 8018af4:	202a      	movs	r0, #42	; 0x2a
 8018af6:	fb00 3312 	mls	r3, r0, r2, r3
 8018afa:	297e      	cmp	r1, #126	; 0x7e
 8018afc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018b00:	f000 81ca 	beq.w	8018e98 <uxr_read_framed_msg+0x510>
 8018b04:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8018b06:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8018b0a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018b0c:	b29b      	uxth	r3, r3
 8018b0e:	2000      	movs	r0, #0
 8018b10:	428b      	cmp	r3, r1
 8018b12:	8623      	strh	r3, [r4, #48]	; 0x30
 8018b14:	8660      	strh	r0, [r4, #50]	; 0x32
 8018b16:	86e0      	strh	r0, [r4, #54]	; 0x36
 8018b18:	f240 80df 	bls.w	8018cda <uxr_read_framed_msg+0x352>
 8018b1c:	7020      	strb	r0, [r4, #0]
 8018b1e:	b003      	add	sp, #12
 8018b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b24:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8018b28:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8018b2c:	4299      	cmp	r1, r3
 8018b2e:	f000 80a8 	beq.w	8018c82 <uxr_read_framed_msg+0x2fa>
 8018b32:	18e2      	adds	r2, r4, r3
 8018b34:	7890      	ldrb	r0, [r2, #2]
 8018b36:	287d      	cmp	r0, #125	; 0x7d
 8018b38:	f000 8164 	beq.w	8018e04 <uxr_read_framed_msg+0x47c>
 8018b3c:	3301      	adds	r3, #1
 8018b3e:	085a      	lsrs	r2, r3, #1
 8018b40:	fba5 1202 	umull	r1, r2, r5, r2
 8018b44:	0892      	lsrs	r2, r2, #2
 8018b46:	212a      	movs	r1, #42	; 0x2a
 8018b48:	fb01 3312 	mls	r3, r1, r2, r3
 8018b4c:	287e      	cmp	r0, #126	; 0x7e
 8018b4e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018b52:	f000 8191 	beq.w	8018e78 <uxr_read_framed_msg+0x4f0>
 8018b56:	2304      	movs	r3, #4
 8018b58:	8620      	strh	r0, [r4, #48]	; 0x30
 8018b5a:	7023      	strb	r3, [r4, #0]
 8018b5c:	e725      	b.n	80189aa <uxr_read_framed_msg+0x22>
 8018b5e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8018b62:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8018b66:	4290      	cmp	r0, r2
 8018b68:	f000 80b3 	beq.w	8018cd2 <uxr_read_framed_msg+0x34a>
 8018b6c:	18a3      	adds	r3, r4, r2
 8018b6e:	7899      	ldrb	r1, [r3, #2]
 8018b70:	297d      	cmp	r1, #125	; 0x7d
 8018b72:	f000 8164 	beq.w	8018e3e <uxr_read_framed_msg+0x4b6>
 8018b76:	3201      	adds	r2, #1
 8018b78:	0850      	lsrs	r0, r2, #1
 8018b7a:	fba5 3000 	umull	r3, r0, r5, r0
 8018b7e:	0880      	lsrs	r0, r0, #2
 8018b80:	232a      	movs	r3, #42	; 0x2a
 8018b82:	fb03 2210 	mls	r2, r3, r0, r2
 8018b86:	297e      	cmp	r1, #126	; 0x7e
 8018b88:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8018b8c:	f000 8188 	beq.w	8018ea0 <uxr_read_framed_msg+0x518>
 8018b90:	7863      	ldrb	r3, [r4, #1]
 8018b92:	428b      	cmp	r3, r1
 8018b94:	bf0c      	ite	eq
 8018b96:	2303      	moveq	r3, #3
 8018b98:	2300      	movne	r3, #0
 8018b9a:	7023      	strb	r3, [r4, #0]
 8018b9c:	e705      	b.n	80189aa <uxr_read_framed_msg+0x22>
 8018b9e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8018ba2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8018ba6:	2200      	movs	r2, #0
 8018ba8:	4299      	cmp	r1, r3
 8018baa:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 8018bae:	d06c      	beq.n	8018c8a <uxr_read_framed_msg+0x302>
 8018bb0:	18e2      	adds	r2, r4, r3
 8018bb2:	7890      	ldrb	r0, [r2, #2]
 8018bb4:	287d      	cmp	r0, #125	; 0x7d
 8018bb6:	f000 8101 	beq.w	8018dbc <uxr_read_framed_msg+0x434>
 8018bba:	3301      	adds	r3, #1
 8018bbc:	085a      	lsrs	r2, r3, #1
 8018bbe:	fba5 1202 	umull	r1, r2, r5, r2
 8018bc2:	0892      	lsrs	r2, r2, #2
 8018bc4:	212a      	movs	r1, #42	; 0x2a
 8018bc6:	fb01 3312 	mls	r3, r1, r2, r3
 8018bca:	287e      	cmp	r0, #126	; 0x7e
 8018bcc:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8018bd0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018bd4:	d059      	beq.n	8018c8a <uxr_read_framed_msg+0x302>
 8018bd6:	2302      	movs	r3, #2
 8018bd8:	7023      	strb	r3, [r4, #0]
 8018bda:	e6e6      	b.n	80189aa <uxr_read_framed_msg+0x22>
 8018bdc:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8018be0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8018be4:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8018be8:	1c51      	adds	r1, r2, #1
 8018bea:	084b      	lsrs	r3, r1, #1
 8018bec:	fba5 c303 	umull	ip, r3, r5, r3
 8018bf0:	089b      	lsrs	r3, r3, #2
 8018bf2:	fb0e 1313 	mls	r3, lr, r3, r1
 8018bf6:	4592      	cmp	sl, r2
 8018bf8:	eb04 0002 	add.w	r0, r4, r2
 8018bfc:	b2da      	uxtb	r2, r3
 8018bfe:	f43f af04 	beq.w	8018a0a <uxr_read_framed_msg+0x82>
 8018c02:	7883      	ldrb	r3, [r0, #2]
 8018c04:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8018c08:	2b7e      	cmp	r3, #126	; 0x7e
 8018c0a:	d1ed      	bne.n	8018be8 <uxr_read_framed_msg+0x260>
 8018c0c:	2301      	movs	r3, #1
 8018c0e:	7023      	strb	r3, [r4, #0]
 8018c10:	e6cb      	b.n	80189aa <uxr_read_framed_msg+0x22>
 8018c12:	f100 0c01 	add.w	ip, r0, #1
 8018c16:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8018c1a:	fba5 8202 	umull	r8, r2, r5, r2
 8018c1e:	0892      	lsrs	r2, r2, #2
 8018c20:	fb01 c212 	mls	r2, r1, r2, ip
 8018c24:	eb04 0c02 	add.w	ip, r4, r2
 8018c28:	b2d2      	uxtb	r2, r2
 8018c2a:	4592      	cmp	sl, r2
 8018c2c:	f100 0002 	add.w	r0, r0, #2
 8018c30:	f43f af47 	beq.w	8018ac2 <uxr_read_framed_msg+0x13a>
 8018c34:	0842      	lsrs	r2, r0, #1
 8018c36:	f89c a002 	ldrb.w	sl, [ip, #2]
 8018c3a:	fba5 8202 	umull	r8, r2, r5, r2
 8018c3e:	0892      	lsrs	r2, r2, #2
 8018c40:	fb01 0012 	mls	r0, r1, r2, r0
 8018c44:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 8018c48:	f08a 0c20 	eor.w	ip, sl, #32
 8018c4c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8018c50:	f47f af11 	bne.w	8018a76 <uxr_read_framed_msg+0xee>
 8018c54:	459e      	cmp	lr, r3
 8018c56:	ee17 8a90 	vmov	r8, s15
 8018c5a:	f43f af37 	beq.w	8018acc <uxr_read_framed_msg+0x144>
 8018c5e:	2301      	movs	r3, #1
 8018c60:	7023      	strb	r3, [r4, #0]
 8018c62:	e6a2      	b.n	80189aa <uxr_read_framed_msg+0x22>
 8018c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018c66:	9300      	str	r3, [sp, #0]
 8018c68:	2301      	movs	r3, #1
 8018c6a:	9301      	str	r3, [sp, #4]
 8018c6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018c6e:	464a      	mov	r2, r9
 8018c70:	4641      	mov	r1, r8
 8018c72:	4620      	mov	r0, r4
 8018c74:	f7ff fe06 	bl	8018884 <uxr_framing_read_transport>
 8018c78:	2800      	cmp	r0, #0
 8018c7a:	f43f aec6 	beq.w	8018a0a <uxr_read_framed_msg+0x82>
 8018c7e:	7823      	ldrb	r3, [r4, #0]
 8018c80:	e693      	b.n	80189aa <uxr_read_framed_msg+0x22>
 8018c82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018c84:	9300      	str	r3, [sp, #0]
 8018c86:	2302      	movs	r3, #2
 8018c88:	e7ef      	b.n	8018c6a <uxr_read_framed_msg+0x2e2>
 8018c8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018c8c:	9300      	str	r3, [sp, #0]
 8018c8e:	2304      	movs	r3, #4
 8018c90:	9301      	str	r3, [sp, #4]
 8018c92:	464a      	mov	r2, r9
 8018c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018c96:	4641      	mov	r1, r8
 8018c98:	4620      	mov	r0, r4
 8018c9a:	f7ff fdf3 	bl	8018884 <uxr_framing_read_transport>
 8018c9e:	2800      	cmp	r0, #0
 8018ca0:	d1ed      	bne.n	8018c7e <uxr_read_framed_msg+0x2f6>
 8018ca2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8018ca6:	2b7e      	cmp	r3, #126	; 0x7e
 8018ca8:	d0e9      	beq.n	8018c7e <uxr_read_framed_msg+0x2f6>
 8018caa:	e6ae      	b.n	8018a0a <uxr_read_framed_msg+0x82>
 8018cac:	30c30c31 	.word	0x30c30c31
 8018cb0:	0801be98 	.word	0x0801be98
 8018cb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018cb6:	9300      	str	r3, [sp, #0]
 8018cb8:	2305      	movs	r3, #5
 8018cba:	9301      	str	r3, [sp, #4]
 8018cbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018cbe:	f7ff fde1 	bl	8018884 <uxr_framing_read_transport>
 8018cc2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8018cc6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8018cca:	429a      	cmp	r2, r3
 8018ccc:	f43f ae9d 	beq.w	8018a0a <uxr_read_framed_msg+0x82>
 8018cd0:	e668      	b.n	80189a4 <uxr_read_framed_msg+0x1c>
 8018cd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018cd4:	9300      	str	r3, [sp, #0]
 8018cd6:	2303      	movs	r3, #3
 8018cd8:	e7c7      	b.n	8018c6a <uxr_read_framed_msg+0x2e2>
 8018cda:	2305      	movs	r3, #5
 8018cdc:	7023      	strb	r3, [r4, #0]
 8018cde:	e664      	b.n	80189aa <uxr_read_framed_msg+0x22>
 8018ce0:	ee17 8a90 	vmov	r8, s15
 8018ce4:	f43f aef2 	beq.w	8018acc <uxr_read_framed_msg+0x144>
 8018ce8:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8018cec:	d08e      	beq.n	8018c0c <uxr_read_framed_msg+0x284>
 8018cee:	ebae 0303 	sub.w	r3, lr, r3
 8018cf2:	3302      	adds	r3, #2
 8018cf4:	9301      	str	r3, [sp, #4]
 8018cf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018cf8:	9300      	str	r3, [sp, #0]
 8018cfa:	e7b7      	b.n	8018c6c <uxr_read_framed_msg+0x2e4>
 8018cfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8018cfe:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8018d02:	7013      	strb	r3, [r2, #0]
 8018d04:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8018d06:	b003      	add	sp, #12
 8018d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d0c:	f103 0c01 	add.w	ip, r3, #1
 8018d10:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8018d14:	fba5 0202 	umull	r0, r2, r5, r2
 8018d18:	0892      	lsrs	r2, r2, #2
 8018d1a:	202a      	movs	r0, #42	; 0x2a
 8018d1c:	fb00 c212 	mls	r2, r0, r2, ip
 8018d20:	fa5f fc82 	uxtb.w	ip, r2
 8018d24:	4561      	cmp	r1, ip
 8018d26:	d09d      	beq.n	8018c64 <uxr_read_framed_msg+0x2dc>
 8018d28:	3302      	adds	r3, #2
 8018d2a:	4422      	add	r2, r4
 8018d2c:	0859      	lsrs	r1, r3, #1
 8018d2e:	7892      	ldrb	r2, [r2, #2]
 8018d30:	fba5 c101 	umull	ip, r1, r5, r1
 8018d34:	0889      	lsrs	r1, r1, #2
 8018d36:	fb00 3311 	mls	r3, r0, r1, r3
 8018d3a:	2a7e      	cmp	r2, #126	; 0x7e
 8018d3c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018d40:	f000 80aa 	beq.w	8018e98 <uxr_read_framed_msg+0x510>
 8018d44:	f082 0220 	eor.w	r2, r2, #32
 8018d48:	e654      	b.n	80189f4 <uxr_read_framed_msg+0x6c>
 8018d4a:	1c58      	adds	r0, r3, #1
 8018d4c:	0842      	lsrs	r2, r0, #1
 8018d4e:	fba5 c202 	umull	ip, r2, r5, r2
 8018d52:	0892      	lsrs	r2, r2, #2
 8018d54:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8018d58:	fb0c 0212 	mls	r2, ip, r2, r0
 8018d5c:	b2d0      	uxtb	r0, r2
 8018d5e:	4281      	cmp	r1, r0
 8018d60:	d08f      	beq.n	8018c82 <uxr_read_framed_msg+0x2fa>
 8018d62:	4422      	add	r2, r4
 8018d64:	3302      	adds	r3, #2
 8018d66:	7890      	ldrb	r0, [r2, #2]
 8018d68:	085a      	lsrs	r2, r3, #1
 8018d6a:	fba5 1202 	umull	r1, r2, r5, r2
 8018d6e:	0892      	lsrs	r2, r2, #2
 8018d70:	fb0c 3312 	mls	r3, ip, r2, r3
 8018d74:	287e      	cmp	r0, #126	; 0x7e
 8018d76:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018d7a:	d07d      	beq.n	8018e78 <uxr_read_framed_msg+0x4f0>
 8018d7c:	f080 0020 	eor.w	r0, r0, #32
 8018d80:	e660      	b.n	8018a44 <uxr_read_framed_msg+0xbc>
 8018d82:	1c59      	adds	r1, r3, #1
 8018d84:	084a      	lsrs	r2, r1, #1
 8018d86:	fba5 c202 	umull	ip, r2, r5, r2
 8018d8a:	0892      	lsrs	r2, r2, #2
 8018d8c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8018d90:	fb0c 1212 	mls	r2, ip, r2, r1
 8018d94:	b2d1      	uxtb	r1, r2
 8018d96:	4288      	cmp	r0, r1
 8018d98:	f43f af64 	beq.w	8018c64 <uxr_read_framed_msg+0x2dc>
 8018d9c:	4422      	add	r2, r4
 8018d9e:	3302      	adds	r3, #2
 8018da0:	7891      	ldrb	r1, [r2, #2]
 8018da2:	085a      	lsrs	r2, r3, #1
 8018da4:	fba5 0202 	umull	r0, r2, r5, r2
 8018da8:	0892      	lsrs	r2, r2, #2
 8018daa:	fb0c 3312 	mls	r3, ip, r2, r3
 8018dae:	297e      	cmp	r1, #126	; 0x7e
 8018db0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018db4:	d070      	beq.n	8018e98 <uxr_read_framed_msg+0x510>
 8018db6:	f081 0120 	eor.w	r1, r1, #32
 8018dba:	e6a3      	b.n	8018b04 <uxr_read_framed_msg+0x17c>
 8018dbc:	f103 0c01 	add.w	ip, r3, #1
 8018dc0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8018dc4:	fba5 0202 	umull	r0, r2, r5, r2
 8018dc8:	0892      	lsrs	r2, r2, #2
 8018dca:	202a      	movs	r0, #42	; 0x2a
 8018dcc:	fb00 c212 	mls	r2, r0, r2, ip
 8018dd0:	fa5f fc82 	uxtb.w	ip, r2
 8018dd4:	4561      	cmp	r1, ip
 8018dd6:	f43f af58 	beq.w	8018c8a <uxr_read_framed_msg+0x302>
 8018dda:	4422      	add	r2, r4
 8018ddc:	3302      	adds	r3, #2
 8018dde:	7891      	ldrb	r1, [r2, #2]
 8018de0:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8018de4:	085a      	lsrs	r2, r3, #1
 8018de6:	fba5 c202 	umull	ip, r2, r5, r2
 8018dea:	0892      	lsrs	r2, r2, #2
 8018dec:	fb00 3312 	mls	r3, r0, r2, r3
 8018df0:	297e      	cmp	r1, #126	; 0x7e
 8018df2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018df6:	f43f af48 	beq.w	8018c8a <uxr_read_framed_msg+0x302>
 8018dfa:	f081 0120 	eor.w	r1, r1, #32
 8018dfe:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8018e02:	e6e8      	b.n	8018bd6 <uxr_read_framed_msg+0x24e>
 8018e04:	1c58      	adds	r0, r3, #1
 8018e06:	0842      	lsrs	r2, r0, #1
 8018e08:	fba5 c202 	umull	ip, r2, r5, r2
 8018e0c:	0892      	lsrs	r2, r2, #2
 8018e0e:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8018e12:	fb0c 0212 	mls	r2, ip, r2, r0
 8018e16:	b2d0      	uxtb	r0, r2
 8018e18:	4281      	cmp	r1, r0
 8018e1a:	f43f af32 	beq.w	8018c82 <uxr_read_framed_msg+0x2fa>
 8018e1e:	4422      	add	r2, r4
 8018e20:	3302      	adds	r3, #2
 8018e22:	7890      	ldrb	r0, [r2, #2]
 8018e24:	085a      	lsrs	r2, r3, #1
 8018e26:	fba5 1202 	umull	r1, r2, r5, r2
 8018e2a:	0892      	lsrs	r2, r2, #2
 8018e2c:	fb0c 3312 	mls	r3, ip, r2, r3
 8018e30:	287e      	cmp	r0, #126	; 0x7e
 8018e32:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8018e36:	d01f      	beq.n	8018e78 <uxr_read_framed_msg+0x4f0>
 8018e38:	f080 0020 	eor.w	r0, r0, #32
 8018e3c:	e68b      	b.n	8018b56 <uxr_read_framed_msg+0x1ce>
 8018e3e:	1c51      	adds	r1, r2, #1
 8018e40:	084b      	lsrs	r3, r1, #1
 8018e42:	fba5 c303 	umull	ip, r3, r5, r3
 8018e46:	089b      	lsrs	r3, r3, #2
 8018e48:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8018e4c:	fb0c 1313 	mls	r3, ip, r3, r1
 8018e50:	b2d9      	uxtb	r1, r3
 8018e52:	4288      	cmp	r0, r1
 8018e54:	f43f af3d 	beq.w	8018cd2 <uxr_read_framed_msg+0x34a>
 8018e58:	3202      	adds	r2, #2
 8018e5a:	4423      	add	r3, r4
 8018e5c:	0850      	lsrs	r0, r2, #1
 8018e5e:	789b      	ldrb	r3, [r3, #2]
 8018e60:	fba5 1000 	umull	r1, r0, r5, r0
 8018e64:	0880      	lsrs	r0, r0, #2
 8018e66:	fb0c 2210 	mls	r2, ip, r0, r2
 8018e6a:	2b7e      	cmp	r3, #126	; 0x7e
 8018e6c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8018e70:	d016      	beq.n	8018ea0 <uxr_read_framed_msg+0x518>
 8018e72:	f083 0120 	eor.w	r1, r3, #32
 8018e76:	e68b      	b.n	8018b90 <uxr_read_framed_msg+0x208>
 8018e78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018e7a:	9300      	str	r3, [sp, #0]
 8018e7c:	2302      	movs	r3, #2
 8018e7e:	9301      	str	r3, [sp, #4]
 8018e80:	464a      	mov	r2, r9
 8018e82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e84:	4641      	mov	r1, r8
 8018e86:	4620      	mov	r0, r4
 8018e88:	f7ff fcfc 	bl	8018884 <uxr_framing_read_transport>
 8018e8c:	2800      	cmp	r0, #0
 8018e8e:	f47f aef6 	bne.w	8018c7e <uxr_read_framed_msg+0x2f6>
 8018e92:	2301      	movs	r3, #1
 8018e94:	7023      	strb	r3, [r4, #0]
 8018e96:	e588      	b.n	80189aa <uxr_read_framed_msg+0x22>
 8018e98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018e9a:	9300      	str	r3, [sp, #0]
 8018e9c:	2301      	movs	r3, #1
 8018e9e:	e7ee      	b.n	8018e7e <uxr_read_framed_msg+0x4f6>
 8018ea0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018ea2:	9300      	str	r3, [sp, #0]
 8018ea4:	2303      	movs	r3, #3
 8018ea6:	e7ea      	b.n	8018e7e <uxr_read_framed_msg+0x4f6>
 8018ea8:	ee17 8a90 	vmov	r8, s15
 8018eac:	e6ae      	b.n	8018c0c <uxr_read_framed_msg+0x284>
 8018eae:	bf00      	nop

08018eb0 <rcl_get_default_domain_id>:
 8018eb0:	b530      	push	{r4, r5, lr}
 8018eb2:	b083      	sub	sp, #12
 8018eb4:	2300      	movs	r3, #0
 8018eb6:	9300      	str	r3, [sp, #0]
 8018eb8:	b1d0      	cbz	r0, 8018ef0 <rcl_get_default_domain_id+0x40>
 8018eba:	4604      	mov	r4, r0
 8018ebc:	4669      	mov	r1, sp
 8018ebe:	4815      	ldr	r0, [pc, #84]	; (8018f14 <rcl_get_default_domain_id+0x64>)
 8018ec0:	f7fd f93a 	bl	8016138 <rcutils_get_env>
 8018ec4:	4602      	mov	r2, r0
 8018ec6:	b110      	cbz	r0, 8018ece <rcl_get_default_domain_id+0x1e>
 8018ec8:	2001      	movs	r0, #1
 8018eca:	b003      	add	sp, #12
 8018ecc:	bd30      	pop	{r4, r5, pc}
 8018ece:	9b00      	ldr	r3, [sp, #0]
 8018ed0:	b18b      	cbz	r3, 8018ef6 <rcl_get_default_domain_id+0x46>
 8018ed2:	7818      	ldrb	r0, [r3, #0]
 8018ed4:	2800      	cmp	r0, #0
 8018ed6:	d0f8      	beq.n	8018eca <rcl_get_default_domain_id+0x1a>
 8018ed8:	a901      	add	r1, sp, #4
 8018eda:	4618      	mov	r0, r3
 8018edc:	9201      	str	r2, [sp, #4]
 8018ede:	f001 f9ef 	bl	801a2c0 <strtoul>
 8018ee2:	4605      	mov	r5, r0
 8018ee4:	b150      	cbz	r0, 8018efc <rcl_get_default_domain_id+0x4c>
 8018ee6:	1c43      	adds	r3, r0, #1
 8018ee8:	d00d      	beq.n	8018f06 <rcl_get_default_domain_id+0x56>
 8018eea:	6025      	str	r5, [r4, #0]
 8018eec:	2000      	movs	r0, #0
 8018eee:	e7ec      	b.n	8018eca <rcl_get_default_domain_id+0x1a>
 8018ef0:	200b      	movs	r0, #11
 8018ef2:	b003      	add	sp, #12
 8018ef4:	bd30      	pop	{r4, r5, pc}
 8018ef6:	4618      	mov	r0, r3
 8018ef8:	b003      	add	sp, #12
 8018efa:	bd30      	pop	{r4, r5, pc}
 8018efc:	9b01      	ldr	r3, [sp, #4]
 8018efe:	781b      	ldrb	r3, [r3, #0]
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d0f2      	beq.n	8018eea <rcl_get_default_domain_id+0x3a>
 8018f04:	e7e0      	b.n	8018ec8 <rcl_get_default_domain_id+0x18>
 8018f06:	f000 fca3 	bl	8019850 <__errno>
 8018f0a:	6803      	ldr	r3, [r0, #0]
 8018f0c:	2b22      	cmp	r3, #34	; 0x22
 8018f0e:	d1ec      	bne.n	8018eea <rcl_get_default_domain_id+0x3a>
 8018f10:	e7da      	b.n	8018ec8 <rcl_get_default_domain_id+0x18>
 8018f12:	bf00      	nop
 8018f14:	0801c098 	.word	0x0801c098

08018f18 <rcl_expand_topic_name>:
 8018f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f1c:	b08b      	sub	sp, #44	; 0x2c
 8018f1e:	9306      	str	r3, [sp, #24]
 8018f20:	2800      	cmp	r0, #0
 8018f22:	f000 80ad 	beq.w	8019080 <rcl_expand_topic_name+0x168>
 8018f26:	460e      	mov	r6, r1
 8018f28:	2900      	cmp	r1, #0
 8018f2a:	f000 80a9 	beq.w	8019080 <rcl_expand_topic_name+0x168>
 8018f2e:	4617      	mov	r7, r2
 8018f30:	2a00      	cmp	r2, #0
 8018f32:	f000 80a5 	beq.w	8019080 <rcl_expand_topic_name+0x168>
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	f000 80a2 	beq.w	8019080 <rcl_expand_topic_name+0x168>
 8018f3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	f000 809e 	beq.w	8019080 <rcl_expand_topic_name+0x168>
 8018f44:	2200      	movs	r2, #0
 8018f46:	a909      	add	r1, sp, #36	; 0x24
 8018f48:	4680      	mov	r8, r0
 8018f4a:	f000 f9f5 	bl	8019338 <rcl_validate_topic_name>
 8018f4e:	4604      	mov	r4, r0
 8018f50:	2800      	cmp	r0, #0
 8018f52:	f040 8096 	bne.w	8019082 <rcl_expand_topic_name+0x16a>
 8018f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	f040 809a 	bne.w	8019092 <rcl_expand_topic_name+0x17a>
 8018f5e:	4602      	mov	r2, r0
 8018f60:	a909      	add	r1, sp, #36	; 0x24
 8018f62:	4630      	mov	r0, r6
 8018f64:	f7fd fcea 	bl	801693c <rmw_validate_node_name>
 8018f68:	2800      	cmp	r0, #0
 8018f6a:	f040 808e 	bne.w	801908a <rcl_expand_topic_name+0x172>
 8018f6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018f70:	2a00      	cmp	r2, #0
 8018f72:	f040 8093 	bne.w	801909c <rcl_expand_topic_name+0x184>
 8018f76:	a909      	add	r1, sp, #36	; 0x24
 8018f78:	4638      	mov	r0, r7
 8018f7a:	f7fd fcc1 	bl	8016900 <rmw_validate_namespace>
 8018f7e:	2800      	cmp	r0, #0
 8018f80:	f040 8083 	bne.w	801908a <rcl_expand_topic_name+0x172>
 8018f84:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018f86:	2c00      	cmp	r4, #0
 8018f88:	f040 80ed 	bne.w	8019166 <rcl_expand_topic_name+0x24e>
 8018f8c:	217b      	movs	r1, #123	; 0x7b
 8018f8e:	4640      	mov	r0, r8
 8018f90:	f001 f8e5 	bl	801a15e <strchr>
 8018f94:	f898 3000 	ldrb.w	r3, [r8]
 8018f98:	2b2f      	cmp	r3, #47	; 0x2f
 8018f9a:	4605      	mov	r5, r0
 8018f9c:	f000 809e 	beq.w	80190dc <rcl_expand_topic_name+0x1c4>
 8018fa0:	2b7e      	cmp	r3, #126	; 0x7e
 8018fa2:	f040 80a2 	bne.w	80190ea <rcl_expand_topic_name+0x1d2>
 8018fa6:	4638      	mov	r0, r7
 8018fa8:	f7e7 f91c 	bl	80001e4 <strlen>
 8018fac:	4a82      	ldr	r2, [pc, #520]	; (80191b8 <rcl_expand_topic_name+0x2a0>)
 8018fae:	4b83      	ldr	r3, [pc, #524]	; (80191bc <rcl_expand_topic_name+0x2a4>)
 8018fb0:	2801      	cmp	r0, #1
 8018fb2:	bf18      	it	ne
 8018fb4:	4613      	movne	r3, r2
 8018fb6:	9302      	str	r3, [sp, #8]
 8018fb8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018fba:	9300      	str	r3, [sp, #0]
 8018fbc:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8018fc0:	f108 0301 	add.w	r3, r8, #1
 8018fc4:	9305      	str	r3, [sp, #20]
 8018fc6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018fca:	9301      	str	r3, [sp, #4]
 8018fcc:	ab14      	add	r3, sp, #80	; 0x50
 8018fce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018fd0:	f7fd f8da 	bl	8016188 <rcutils_format_string_limit>
 8018fd4:	4682      	mov	sl, r0
 8018fd6:	2800      	cmp	r0, #0
 8018fd8:	f000 80c7 	beq.w	801916a <rcl_expand_topic_name+0x252>
 8018fdc:	2d00      	cmp	r5, #0
 8018fde:	f000 80a2 	beq.w	8019126 <rcl_expand_topic_name+0x20e>
 8018fe2:	217b      	movs	r1, #123	; 0x7b
 8018fe4:	f001 f8bb 	bl	801a15e <strchr>
 8018fe8:	46d1      	mov	r9, sl
 8018fea:	4605      	mov	r5, r0
 8018fec:	9407      	str	r4, [sp, #28]
 8018fee:	46d3      	mov	fp, sl
 8018ff0:	464c      	mov	r4, r9
 8018ff2:	2d00      	cmp	r5, #0
 8018ff4:	f000 80be 	beq.w	8019174 <rcl_expand_topic_name+0x25c>
 8018ff8:	217d      	movs	r1, #125	; 0x7d
 8018ffa:	4620      	mov	r0, r4
 8018ffc:	f001 f8af 	bl	801a15e <strchr>
 8019000:	eba0 0905 	sub.w	r9, r0, r5
 8019004:	f109 0a01 	add.w	sl, r9, #1
 8019008:	486d      	ldr	r0, [pc, #436]	; (80191c0 <rcl_expand_topic_name+0x2a8>)
 801900a:	4652      	mov	r2, sl
 801900c:	4629      	mov	r1, r5
 801900e:	f001 f8bb 	bl	801a188 <strncmp>
 8019012:	2800      	cmp	r0, #0
 8019014:	d067      	beq.n	80190e6 <rcl_expand_topic_name+0x1ce>
 8019016:	486b      	ldr	r0, [pc, #428]	; (80191c4 <rcl_expand_topic_name+0x2ac>)
 8019018:	4652      	mov	r2, sl
 801901a:	4629      	mov	r1, r5
 801901c:	f001 f8b4 	bl	801a188 <strncmp>
 8019020:	b130      	cbz	r0, 8019030 <rcl_expand_topic_name+0x118>
 8019022:	4869      	ldr	r0, [pc, #420]	; (80191c8 <rcl_expand_topic_name+0x2b0>)
 8019024:	4652      	mov	r2, sl
 8019026:	4629      	mov	r1, r5
 8019028:	f001 f8ae 	bl	801a188 <strncmp>
 801902c:	2800      	cmp	r0, #0
 801902e:	d137      	bne.n	80190a0 <rcl_expand_topic_name+0x188>
 8019030:	46b9      	mov	r9, r7
 8019032:	ab16      	add	r3, sp, #88	; 0x58
 8019034:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019038:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801903c:	ab14      	add	r3, sp, #80	; 0x50
 801903e:	4628      	mov	r0, r5
 8019040:	cb0c      	ldmia	r3, {r2, r3}
 8019042:	4651      	mov	r1, sl
 8019044:	f7fd f9dc 	bl	8016400 <rcutils_strndup>
 8019048:	4605      	mov	r5, r0
 801904a:	2800      	cmp	r0, #0
 801904c:	f000 809c 	beq.w	8019188 <rcl_expand_topic_name+0x270>
 8019050:	464a      	mov	r2, r9
 8019052:	4620      	mov	r0, r4
 8019054:	ab14      	add	r3, sp, #80	; 0x50
 8019056:	4629      	mov	r1, r5
 8019058:	f7fd f8d0 	bl	80161fc <rcutils_repl_str>
 801905c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801905e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019060:	4604      	mov	r4, r0
 8019062:	4628      	mov	r0, r5
 8019064:	4798      	blx	r3
 8019066:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019068:	9918      	ldr	r1, [sp, #96]	; 0x60
 801906a:	4658      	mov	r0, fp
 801906c:	4798      	blx	r3
 801906e:	2c00      	cmp	r4, #0
 8019070:	d07b      	beq.n	801916a <rcl_expand_topic_name+0x252>
 8019072:	217b      	movs	r1, #123	; 0x7b
 8019074:	4620      	mov	r0, r4
 8019076:	f001 f872 	bl	801a15e <strchr>
 801907a:	46a3      	mov	fp, r4
 801907c:	4605      	mov	r5, r0
 801907e:	e7b8      	b.n	8018ff2 <rcl_expand_topic_name+0xda>
 8019080:	240b      	movs	r4, #11
 8019082:	4620      	mov	r0, r4
 8019084:	b00b      	add	sp, #44	; 0x2c
 8019086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801908a:	f7fc f935 	bl	80152f8 <rcl_convert_rmw_ret_to_rcl_ret>
 801908e:	4604      	mov	r4, r0
 8019090:	e7f7      	b.n	8019082 <rcl_expand_topic_name+0x16a>
 8019092:	2467      	movs	r4, #103	; 0x67
 8019094:	4620      	mov	r0, r4
 8019096:	b00b      	add	sp, #44	; 0x2c
 8019098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801909c:	24c9      	movs	r4, #201	; 0xc9
 801909e:	e7f0      	b.n	8019082 <rcl_expand_topic_name+0x16a>
 80190a0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80190a4:	9806      	ldr	r0, [sp, #24]
 80190a6:	1c69      	adds	r1, r5, #1
 80190a8:	f7fd fac4 	bl	8016634 <rcutils_string_map_getn>
 80190ac:	4681      	mov	r9, r0
 80190ae:	2800      	cmp	r0, #0
 80190b0:	d1bf      	bne.n	8019032 <rcl_expand_topic_name+0x11a>
 80190b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80190b4:	aa16      	add	r2, sp, #88	; 0x58
 80190b6:	6018      	str	r0, [r3, #0]
 80190b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80190ba:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80190be:	ab14      	add	r3, sp, #80	; 0x50
 80190c0:	cb0c      	ldmia	r3, {r2, r3}
 80190c2:	4651      	mov	r1, sl
 80190c4:	4628      	mov	r0, r5
 80190c6:	f7fd f99b 	bl	8016400 <rcutils_strndup>
 80190ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80190cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80190ce:	4798      	blx	r3
 80190d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80190d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80190d4:	4658      	mov	r0, fp
 80190d6:	2469      	movs	r4, #105	; 0x69
 80190d8:	4798      	blx	r3
 80190da:	e7d2      	b.n	8019082 <rcl_expand_topic_name+0x16a>
 80190dc:	2800      	cmp	r0, #0
 80190de:	d05b      	beq.n	8019198 <rcl_expand_topic_name+0x280>
 80190e0:	46c1      	mov	r9, r8
 80190e2:	46a2      	mov	sl, r4
 80190e4:	e782      	b.n	8018fec <rcl_expand_topic_name+0xd4>
 80190e6:	46b1      	mov	r9, r6
 80190e8:	e7a3      	b.n	8019032 <rcl_expand_topic_name+0x11a>
 80190ea:	2800      	cmp	r0, #0
 80190ec:	d1f8      	bne.n	80190e0 <rcl_expand_topic_name+0x1c8>
 80190ee:	4638      	mov	r0, r7
 80190f0:	f7e7 f878 	bl	80001e4 <strlen>
 80190f4:	4a35      	ldr	r2, [pc, #212]	; (80191cc <rcl_expand_topic_name+0x2b4>)
 80190f6:	4b36      	ldr	r3, [pc, #216]	; (80191d0 <rcl_expand_topic_name+0x2b8>)
 80190f8:	f8cd 8010 	str.w	r8, [sp, #16]
 80190fc:	2801      	cmp	r0, #1
 80190fe:	bf18      	it	ne
 8019100:	4613      	movne	r3, r2
 8019102:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8019106:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801910a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801910c:	9703      	str	r7, [sp, #12]
 801910e:	9200      	str	r2, [sp, #0]
 8019110:	ab14      	add	r3, sp, #80	; 0x50
 8019112:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019114:	f7fd f838 	bl	8016188 <rcutils_format_string_limit>
 8019118:	4682      	mov	sl, r0
 801911a:	4653      	mov	r3, sl
 801911c:	b32b      	cbz	r3, 801916a <rcl_expand_topic_name+0x252>
 801911e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019120:	f8c3 a000 	str.w	sl, [r3]
 8019124:	e7ad      	b.n	8019082 <rcl_expand_topic_name+0x16a>
 8019126:	f89a 3000 	ldrb.w	r3, [sl]
 801912a:	2b2f      	cmp	r3, #47	; 0x2f
 801912c:	d0f7      	beq.n	801911e <rcl_expand_topic_name+0x206>
 801912e:	4638      	mov	r0, r7
 8019130:	f7e7 f858 	bl	80001e4 <strlen>
 8019134:	4a25      	ldr	r2, [pc, #148]	; (80191cc <rcl_expand_topic_name+0x2b4>)
 8019136:	4b26      	ldr	r3, [pc, #152]	; (80191d0 <rcl_expand_topic_name+0x2b8>)
 8019138:	f8cd a010 	str.w	sl, [sp, #16]
 801913c:	2801      	cmp	r0, #1
 801913e:	bf18      	it	ne
 8019140:	4613      	movne	r3, r2
 8019142:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8019146:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801914a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801914c:	9703      	str	r7, [sp, #12]
 801914e:	9200      	str	r2, [sp, #0]
 8019150:	ab14      	add	r3, sp, #80	; 0x50
 8019152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019154:	f7fd f818 	bl	8016188 <rcutils_format_string_limit>
 8019158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801915a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801915c:	4605      	mov	r5, r0
 801915e:	4650      	mov	r0, sl
 8019160:	4798      	blx	r3
 8019162:	46aa      	mov	sl, r5
 8019164:	e7d9      	b.n	801911a <rcl_expand_topic_name+0x202>
 8019166:	24ca      	movs	r4, #202	; 0xca
 8019168:	e78b      	b.n	8019082 <rcl_expand_topic_name+0x16a>
 801916a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801916c:	2300      	movs	r3, #0
 801916e:	6013      	str	r3, [r2, #0]
 8019170:	240a      	movs	r4, #10
 8019172:	e786      	b.n	8019082 <rcl_expand_topic_name+0x16a>
 8019174:	465b      	mov	r3, fp
 8019176:	9c07      	ldr	r4, [sp, #28]
 8019178:	46da      	mov	sl, fp
 801917a:	2b00      	cmp	r3, #0
 801917c:	d1d3      	bne.n	8019126 <rcl_expand_topic_name+0x20e>
 801917e:	f898 3000 	ldrb.w	r3, [r8]
 8019182:	2b2f      	cmp	r3, #47	; 0x2f
 8019184:	d0cb      	beq.n	801911e <rcl_expand_topic_name+0x206>
 8019186:	e7b2      	b.n	80190ee <rcl_expand_topic_name+0x1d6>
 8019188:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 801918c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801918e:	6015      	str	r5, [r2, #0]
 8019190:	4658      	mov	r0, fp
 8019192:	4798      	blx	r3
 8019194:	240a      	movs	r4, #10
 8019196:	e774      	b.n	8019082 <rcl_expand_topic_name+0x16a>
 8019198:	ab17      	add	r3, sp, #92	; 0x5c
 801919a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801919e:	e88d 0003 	stmia.w	sp, {r0, r1}
 80191a2:	ab14      	add	r3, sp, #80	; 0x50
 80191a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80191a6:	4640      	mov	r0, r8
 80191a8:	f7fd f908 	bl	80163bc <rcutils_strdup>
 80191ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80191ae:	2800      	cmp	r0, #0
 80191b0:	6018      	str	r0, [r3, #0]
 80191b2:	bf08      	it	eq
 80191b4:	240a      	moveq	r4, #10
 80191b6:	e764      	b.n	8019082 <rcl_expand_topic_name+0x16a>
 80191b8:	0801c0a8 	.word	0x0801c0a8
 80191bc:	0801b494 	.word	0x0801b494
 80191c0:	0801c0b0 	.word	0x0801c0b0
 80191c4:	0801c0b8 	.word	0x0801c0b8
 80191c8:	0801c0c0 	.word	0x0801c0c0
 80191cc:	0801ba24 	.word	0x0801ba24
 80191d0:	0801b4a4 	.word	0x0801b4a4

080191d4 <rcl_get_default_topic_name_substitutions>:
 80191d4:	2800      	cmp	r0, #0
 80191d6:	bf0c      	ite	eq
 80191d8:	200b      	moveq	r0, #11
 80191da:	2000      	movne	r0, #0
 80191dc:	4770      	bx	lr
 80191de:	bf00      	nop

080191e0 <rcl_get_zero_initialized_guard_condition>:
 80191e0:	4a03      	ldr	r2, [pc, #12]	; (80191f0 <rcl_get_zero_initialized_guard_condition+0x10>)
 80191e2:	4603      	mov	r3, r0
 80191e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80191e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80191ec:	4618      	mov	r0, r3
 80191ee:	4770      	bx	lr
 80191f0:	0801c0cc 	.word	0x0801c0cc

080191f4 <rcl_guard_condition_init_from_rmw>:
 80191f4:	b082      	sub	sp, #8
 80191f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80191fa:	b086      	sub	sp, #24
 80191fc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019200:	4604      	mov	r4, r0
 8019202:	f84c 3f04 	str.w	r3, [ip, #4]!
 8019206:	460e      	mov	r6, r1
 8019208:	4617      	mov	r7, r2
 801920a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801920e:	f10d 0e04 	add.w	lr, sp, #4
 8019212:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019216:	f8dc 3000 	ldr.w	r3, [ip]
 801921a:	f8ce 3000 	str.w	r3, [lr]
 801921e:	a801      	add	r0, sp, #4
 8019220:	f7f6 feea 	bl	800fff8 <rcutils_allocator_is_valid>
 8019224:	b350      	cbz	r0, 801927c <rcl_guard_condition_init_from_rmw+0x88>
 8019226:	b34c      	cbz	r4, 801927c <rcl_guard_condition_init_from_rmw+0x88>
 8019228:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801922c:	f1b8 0f00 	cmp.w	r8, #0
 8019230:	d11e      	bne.n	8019270 <rcl_guard_condition_init_from_rmw+0x7c>
 8019232:	b31f      	cbz	r7, 801927c <rcl_guard_condition_init_from_rmw+0x88>
 8019234:	4638      	mov	r0, r7
 8019236:	f7fc f87d 	bl	8015334 <rcl_context_is_valid>
 801923a:	b328      	cbz	r0, 8019288 <rcl_guard_condition_init_from_rmw+0x94>
 801923c:	9b01      	ldr	r3, [sp, #4]
 801923e:	9905      	ldr	r1, [sp, #20]
 8019240:	201c      	movs	r0, #28
 8019242:	4798      	blx	r3
 8019244:	4605      	mov	r5, r0
 8019246:	6060      	str	r0, [r4, #4]
 8019248:	b358      	cbz	r0, 80192a2 <rcl_guard_condition_init_from_rmw+0xae>
 801924a:	b1fe      	cbz	r6, 801928c <rcl_guard_condition_init_from_rmw+0x98>
 801924c:	6006      	str	r6, [r0, #0]
 801924e:	f880 8004 	strb.w	r8, [r0, #4]
 8019252:	ac01      	add	r4, sp, #4
 8019254:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019256:	f105 0c08 	add.w	ip, r5, #8
 801925a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801925e:	6823      	ldr	r3, [r4, #0]
 8019260:	f8cc 3000 	str.w	r3, [ip]
 8019264:	2000      	movs	r0, #0
 8019266:	b006      	add	sp, #24
 8019268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801926c:	b002      	add	sp, #8
 801926e:	4770      	bx	lr
 8019270:	2064      	movs	r0, #100	; 0x64
 8019272:	b006      	add	sp, #24
 8019274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019278:	b002      	add	sp, #8
 801927a:	4770      	bx	lr
 801927c:	200b      	movs	r0, #11
 801927e:	b006      	add	sp, #24
 8019280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019284:	b002      	add	sp, #8
 8019286:	4770      	bx	lr
 8019288:	2065      	movs	r0, #101	; 0x65
 801928a:	e7f2      	b.n	8019272 <rcl_guard_condition_init_from_rmw+0x7e>
 801928c:	6838      	ldr	r0, [r7, #0]
 801928e:	3028      	adds	r0, #40	; 0x28
 8019290:	f000 fa50 	bl	8019734 <rmw_create_guard_condition>
 8019294:	6028      	str	r0, [r5, #0]
 8019296:	6865      	ldr	r5, [r4, #4]
 8019298:	682e      	ldr	r6, [r5, #0]
 801929a:	b126      	cbz	r6, 80192a6 <rcl_guard_condition_init_from_rmw+0xb2>
 801929c:	2301      	movs	r3, #1
 801929e:	712b      	strb	r3, [r5, #4]
 80192a0:	e7d7      	b.n	8019252 <rcl_guard_condition_init_from_rmw+0x5e>
 80192a2:	200a      	movs	r0, #10
 80192a4:	e7e5      	b.n	8019272 <rcl_guard_condition_init_from_rmw+0x7e>
 80192a6:	4628      	mov	r0, r5
 80192a8:	9b02      	ldr	r3, [sp, #8]
 80192aa:	9905      	ldr	r1, [sp, #20]
 80192ac:	4798      	blx	r3
 80192ae:	6066      	str	r6, [r4, #4]
 80192b0:	2001      	movs	r0, #1
 80192b2:	e7de      	b.n	8019272 <rcl_guard_condition_init_from_rmw+0x7e>

080192b4 <rcl_guard_condition_fini>:
 80192b4:	b570      	push	{r4, r5, r6, lr}
 80192b6:	b082      	sub	sp, #8
 80192b8:	b1f0      	cbz	r0, 80192f8 <rcl_guard_condition_fini+0x44>
 80192ba:	6843      	ldr	r3, [r0, #4]
 80192bc:	4604      	mov	r4, r0
 80192be:	b163      	cbz	r3, 80192da <rcl_guard_condition_fini+0x26>
 80192c0:	6818      	ldr	r0, [r3, #0]
 80192c2:	68de      	ldr	r6, [r3, #12]
 80192c4:	6999      	ldr	r1, [r3, #24]
 80192c6:	b160      	cbz	r0, 80192e2 <rcl_guard_condition_fini+0x2e>
 80192c8:	791d      	ldrb	r5, [r3, #4]
 80192ca:	b965      	cbnz	r5, 80192e6 <rcl_guard_condition_fini+0x32>
 80192cc:	4618      	mov	r0, r3
 80192ce:	47b0      	blx	r6
 80192d0:	2300      	movs	r3, #0
 80192d2:	4628      	mov	r0, r5
 80192d4:	6063      	str	r3, [r4, #4]
 80192d6:	b002      	add	sp, #8
 80192d8:	bd70      	pop	{r4, r5, r6, pc}
 80192da:	461d      	mov	r5, r3
 80192dc:	4628      	mov	r0, r5
 80192de:	b002      	add	sp, #8
 80192e0:	bd70      	pop	{r4, r5, r6, pc}
 80192e2:	4605      	mov	r5, r0
 80192e4:	e7f2      	b.n	80192cc <rcl_guard_condition_fini+0x18>
 80192e6:	9101      	str	r1, [sp, #4]
 80192e8:	f000 fa38 	bl	801975c <rmw_destroy_guard_condition>
 80192ec:	1e05      	subs	r5, r0, #0
 80192ee:	6863      	ldr	r3, [r4, #4]
 80192f0:	9901      	ldr	r1, [sp, #4]
 80192f2:	bf18      	it	ne
 80192f4:	2501      	movne	r5, #1
 80192f6:	e7e9      	b.n	80192cc <rcl_guard_condition_fini+0x18>
 80192f8:	250b      	movs	r5, #11
 80192fa:	4628      	mov	r0, r5
 80192fc:	b002      	add	sp, #8
 80192fe:	bd70      	pop	{r4, r5, r6, pc}

08019300 <rcl_guard_condition_get_default_options>:
 8019300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019302:	b087      	sub	sp, #28
 8019304:	4606      	mov	r6, r0
 8019306:	4668      	mov	r0, sp
 8019308:	f7f6 fe68 	bl	800ffdc <rcutils_get_default_allocator>
 801930c:	4b09      	ldr	r3, [pc, #36]	; (8019334 <rcl_guard_condition_get_default_options+0x34>)
 801930e:	46ee      	mov	lr, sp
 8019310:	469c      	mov	ip, r3
 8019312:	461d      	mov	r5, r3
 8019314:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019318:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801931c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801931e:	4634      	mov	r4, r6
 8019320:	f8de 7000 	ldr.w	r7, [lr]
 8019324:	f8cc 7000 	str.w	r7, [ip]
 8019328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801932a:	4630      	mov	r0, r6
 801932c:	6027      	str	r7, [r4, #0]
 801932e:	b007      	add	sp, #28
 8019330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019332:	bf00      	nop
 8019334:	2001580c 	.word	0x2001580c

08019338 <rcl_validate_topic_name>:
 8019338:	2800      	cmp	r0, #0
 801933a:	d07a      	beq.n	8019432 <rcl_validate_topic_name+0xfa>
 801933c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019340:	460e      	mov	r6, r1
 8019342:	2900      	cmp	r1, #0
 8019344:	d07c      	beq.n	8019440 <rcl_validate_topic_name+0x108>
 8019346:	4617      	mov	r7, r2
 8019348:	4605      	mov	r5, r0
 801934a:	f7e6 ff4b 	bl	80001e4 <strlen>
 801934e:	b1b0      	cbz	r0, 801937e <rcl_validate_topic_name+0x46>
 8019350:	f895 9000 	ldrb.w	r9, [r5]
 8019354:	f8df c180 	ldr.w	ip, [pc, #384]	; 80194d8 <rcl_validate_topic_name+0x1a0>
 8019358:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801935c:	f013 0304 	ands.w	r3, r3, #4
 8019360:	d169      	bne.n	8019436 <rcl_validate_topic_name+0xfe>
 8019362:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8019366:	f815 2008 	ldrb.w	r2, [r5, r8]
 801936a:	2a2f      	cmp	r2, #47	; 0x2f
 801936c:	d10e      	bne.n	801938c <rcl_validate_topic_name+0x54>
 801936e:	2202      	movs	r2, #2
 8019370:	6032      	str	r2, [r6, #0]
 8019372:	b36f      	cbz	r7, 80193d0 <rcl_validate_topic_name+0x98>
 8019374:	f8c7 8000 	str.w	r8, [r7]
 8019378:	4618      	mov	r0, r3
 801937a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801937e:	2301      	movs	r3, #1
 8019380:	6033      	str	r3, [r6, #0]
 8019382:	b32f      	cbz	r7, 80193d0 <rcl_validate_topic_name+0x98>
 8019384:	2000      	movs	r0, #0
 8019386:	6038      	str	r0, [r7, #0]
 8019388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801938c:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8019390:	461c      	mov	r4, r3
 8019392:	4619      	mov	r1, r3
 8019394:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8019398:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801939c:	f1be 0f09 	cmp.w	lr, #9
 80193a0:	d919      	bls.n	80193d6 <rcl_validate_topic_name+0x9e>
 80193a2:	f022 0e20 	bic.w	lr, r2, #32
 80193a6:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 80193aa:	f1be 0f19 	cmp.w	lr, #25
 80193ae:	d912      	bls.n	80193d6 <rcl_validate_topic_name+0x9e>
 80193b0:	2a5f      	cmp	r2, #95	; 0x5f
 80193b2:	d019      	beq.n	80193e8 <rcl_validate_topic_name+0xb0>
 80193b4:	2a2f      	cmp	r2, #47	; 0x2f
 80193b6:	d051      	beq.n	801945c <rcl_validate_topic_name+0x124>
 80193b8:	2a7e      	cmp	r2, #126	; 0x7e
 80193ba:	d048      	beq.n	801944e <rcl_validate_topic_name+0x116>
 80193bc:	2a7b      	cmp	r2, #123	; 0x7b
 80193be:	d054      	beq.n	801946a <rcl_validate_topic_name+0x132>
 80193c0:	2a7d      	cmp	r2, #125	; 0x7d
 80193c2:	d161      	bne.n	8019488 <rcl_validate_topic_name+0x150>
 80193c4:	2c00      	cmp	r4, #0
 80193c6:	d155      	bne.n	8019474 <rcl_validate_topic_name+0x13c>
 80193c8:	2305      	movs	r3, #5
 80193ca:	6033      	str	r3, [r6, #0]
 80193cc:	b107      	cbz	r7, 80193d0 <rcl_validate_topic_name+0x98>
 80193ce:	6039      	str	r1, [r7, #0]
 80193d0:	2000      	movs	r0, #0
 80193d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193d6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80193da:	0752      	lsls	r2, r2, #29
 80193dc:	d504      	bpl.n	80193e8 <rcl_validate_topic_name+0xb0>
 80193de:	b11c      	cbz	r4, 80193e8 <rcl_validate_topic_name+0xb0>
 80193e0:	b111      	cbz	r1, 80193e8 <rcl_validate_topic_name+0xb0>
 80193e2:	1e4a      	subs	r2, r1, #1
 80193e4:	429a      	cmp	r2, r3
 80193e6:	d02d      	beq.n	8019444 <rcl_validate_topic_name+0x10c>
 80193e8:	3101      	adds	r1, #1
 80193ea:	4288      	cmp	r0, r1
 80193ec:	d1d2      	bne.n	8019394 <rcl_validate_topic_name+0x5c>
 80193ee:	2c00      	cmp	r4, #0
 80193f0:	d145      	bne.n	801947e <rcl_validate_topic_name+0x146>
 80193f2:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 80193f6:	d04f      	beq.n	8019498 <rcl_validate_topic_name+0x160>
 80193f8:	4620      	mov	r0, r4
 80193fa:	2301      	movs	r3, #1
 80193fc:	e006      	b.n	801940c <rcl_validate_topic_name+0xd4>
 80193fe:	428b      	cmp	r3, r1
 8019400:	f105 0501 	add.w	r5, r5, #1
 8019404:	f103 0201 	add.w	r2, r3, #1
 8019408:	d236      	bcs.n	8019478 <rcl_validate_topic_name+0x140>
 801940a:	4613      	mov	r3, r2
 801940c:	4580      	cmp	r8, r0
 801940e:	f100 0001 	add.w	r0, r0, #1
 8019412:	d0f4      	beq.n	80193fe <rcl_validate_topic_name+0xc6>
 8019414:	782a      	ldrb	r2, [r5, #0]
 8019416:	2a2f      	cmp	r2, #47	; 0x2f
 8019418:	d1f1      	bne.n	80193fe <rcl_validate_topic_name+0xc6>
 801941a:	786a      	ldrb	r2, [r5, #1]
 801941c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019420:	0754      	lsls	r4, r2, #29
 8019422:	d5ec      	bpl.n	80193fe <rcl_validate_topic_name+0xc6>
 8019424:	2204      	movs	r2, #4
 8019426:	6032      	str	r2, [r6, #0]
 8019428:	2f00      	cmp	r7, #0
 801942a:	d0d1      	beq.n	80193d0 <rcl_validate_topic_name+0x98>
 801942c:	603b      	str	r3, [r7, #0]
 801942e:	2000      	movs	r0, #0
 8019430:	e7aa      	b.n	8019388 <rcl_validate_topic_name+0x50>
 8019432:	200b      	movs	r0, #11
 8019434:	4770      	bx	lr
 8019436:	2304      	movs	r3, #4
 8019438:	6033      	str	r3, [r6, #0]
 801943a:	2f00      	cmp	r7, #0
 801943c:	d1a2      	bne.n	8019384 <rcl_validate_topic_name+0x4c>
 801943e:	e7c7      	b.n	80193d0 <rcl_validate_topic_name+0x98>
 8019440:	200b      	movs	r0, #11
 8019442:	e7a1      	b.n	8019388 <rcl_validate_topic_name+0x50>
 8019444:	2309      	movs	r3, #9
 8019446:	6033      	str	r3, [r6, #0]
 8019448:	2f00      	cmp	r7, #0
 801944a:	d1c0      	bne.n	80193ce <rcl_validate_topic_name+0x96>
 801944c:	e7c0      	b.n	80193d0 <rcl_validate_topic_name+0x98>
 801944e:	2900      	cmp	r1, #0
 8019450:	d0ca      	beq.n	80193e8 <rcl_validate_topic_name+0xb0>
 8019452:	2306      	movs	r3, #6
 8019454:	6033      	str	r3, [r6, #0]
 8019456:	2f00      	cmp	r7, #0
 8019458:	d1b9      	bne.n	80193ce <rcl_validate_topic_name+0x96>
 801945a:	e7b9      	b.n	80193d0 <rcl_validate_topic_name+0x98>
 801945c:	2c00      	cmp	r4, #0
 801945e:	d0c3      	beq.n	80193e8 <rcl_validate_topic_name+0xb0>
 8019460:	2308      	movs	r3, #8
 8019462:	6033      	str	r3, [r6, #0]
 8019464:	2f00      	cmp	r7, #0
 8019466:	d1b2      	bne.n	80193ce <rcl_validate_topic_name+0x96>
 8019468:	e7b2      	b.n	80193d0 <rcl_validate_topic_name+0x98>
 801946a:	2c00      	cmp	r4, #0
 801946c:	d1f8      	bne.n	8019460 <rcl_validate_topic_name+0x128>
 801946e:	460b      	mov	r3, r1
 8019470:	2401      	movs	r4, #1
 8019472:	e7b9      	b.n	80193e8 <rcl_validate_topic_name+0xb0>
 8019474:	2400      	movs	r4, #0
 8019476:	e7b7      	b.n	80193e8 <rcl_validate_topic_name+0xb0>
 8019478:	2000      	movs	r0, #0
 801947a:	6030      	str	r0, [r6, #0]
 801947c:	e784      	b.n	8019388 <rcl_validate_topic_name+0x50>
 801947e:	2205      	movs	r2, #5
 8019480:	6032      	str	r2, [r6, #0]
 8019482:	2f00      	cmp	r7, #0
 8019484:	d1d2      	bne.n	801942c <rcl_validate_topic_name+0xf4>
 8019486:	e7a3      	b.n	80193d0 <rcl_validate_topic_name+0x98>
 8019488:	2c00      	cmp	r4, #0
 801948a:	bf14      	ite	ne
 801948c:	2308      	movne	r3, #8
 801948e:	2303      	moveq	r3, #3
 8019490:	6033      	str	r3, [r6, #0]
 8019492:	2f00      	cmp	r7, #0
 8019494:	d19b      	bne.n	80193ce <rcl_validate_topic_name+0x96>
 8019496:	e79b      	b.n	80193d0 <rcl_validate_topic_name+0x98>
 8019498:	2301      	movs	r3, #1
 801949a:	e00a      	b.n	80194b2 <rcl_validate_topic_name+0x17a>
 801949c:	2c01      	cmp	r4, #1
 801949e:	d013      	beq.n	80194c8 <rcl_validate_topic_name+0x190>
 80194a0:	4299      	cmp	r1, r3
 80194a2:	f104 0401 	add.w	r4, r4, #1
 80194a6:	f105 0501 	add.w	r5, r5, #1
 80194aa:	f103 0201 	add.w	r2, r3, #1
 80194ae:	d9e3      	bls.n	8019478 <rcl_validate_topic_name+0x140>
 80194b0:	4613      	mov	r3, r2
 80194b2:	45a0      	cmp	r8, r4
 80194b4:	d0f4      	beq.n	80194a0 <rcl_validate_topic_name+0x168>
 80194b6:	782a      	ldrb	r2, [r5, #0]
 80194b8:	2a2f      	cmp	r2, #47	; 0x2f
 80194ba:	d1ef      	bne.n	801949c <rcl_validate_topic_name+0x164>
 80194bc:	786a      	ldrb	r2, [r5, #1]
 80194be:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80194c2:	0752      	lsls	r2, r2, #29
 80194c4:	d5ec      	bpl.n	80194a0 <rcl_validate_topic_name+0x168>
 80194c6:	e7ad      	b.n	8019424 <rcl_validate_topic_name+0xec>
 80194c8:	2307      	movs	r3, #7
 80194ca:	6033      	str	r3, [r6, #0]
 80194cc:	2f00      	cmp	r7, #0
 80194ce:	f43f af7f 	beq.w	80193d0 <rcl_validate_topic_name+0x98>
 80194d2:	603c      	str	r4, [r7, #0]
 80194d4:	2000      	movs	r0, #0
 80194d6:	e757      	b.n	8019388 <rcl_validate_topic_name+0x50>
 80194d8:	0801c1c7 	.word	0x0801c1c7

080194dc <on_status>:
 80194dc:	b082      	sub	sp, #8
 80194de:	b002      	add	sp, #8
 80194e0:	4770      	bx	lr
 80194e2:	bf00      	nop

080194e4 <on_topic>:
 80194e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194e8:	4a22      	ldr	r2, [pc, #136]	; (8019574 <on_topic+0x90>)
 80194ea:	b094      	sub	sp, #80	; 0x50
 80194ec:	6812      	ldr	r2, [r2, #0]
 80194ee:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80194f0:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 80194f4:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 80194f8:	b3c2      	cbz	r2, 801956c <on_topic+0x88>
 80194fa:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80194fe:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8019502:	e001      	b.n	8019508 <on_topic+0x24>
 8019504:	6852      	ldr	r2, [r2, #4]
 8019506:	b38a      	cbz	r2, 801956c <on_topic+0x88>
 8019508:	6894      	ldr	r4, [r2, #8]
 801950a:	8aa3      	ldrh	r3, [r4, #20]
 801950c:	428b      	cmp	r3, r1
 801950e:	d1f9      	bne.n	8019504 <on_topic+0x20>
 8019510:	7da3      	ldrb	r3, [r4, #22]
 8019512:	4283      	cmp	r3, r0
 8019514:	d1f6      	bne.n	8019504 <on_topic+0x20>
 8019516:	2248      	movs	r2, #72	; 0x48
 8019518:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801951c:	4668      	mov	r0, sp
 801951e:	f000 fb95 	bl	8019c4c <memcpy>
 8019522:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8019526:	cb0c      	ldmia	r3, {r2, r3}
 8019528:	4620      	mov	r0, r4
 801952a:	f7f7 f939 	bl	80107a0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801952e:	4607      	mov	r7, r0
 8019530:	b1e0      	cbz	r0, 801956c <on_topic+0x88>
 8019532:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8019536:	4632      	mov	r2, r6
 8019538:	4628      	mov	r0, r5
 801953a:	f108 0110 	add.w	r1, r8, #16
 801953e:	f7fe f89b 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 8019542:	b930      	cbnz	r0, 8019552 <on_topic+0x6e>
 8019544:	480c      	ldr	r0, [pc, #48]	; (8019578 <on_topic+0x94>)
 8019546:	4639      	mov	r1, r7
 8019548:	b014      	add	sp, #80	; 0x50
 801954a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801954e:	f7fd ba63 	b.w	8016a18 <put_memory>
 8019552:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8019556:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 801955a:	f7fd ff2b 	bl	80173b4 <rmw_uros_epoch_nanos>
 801955e:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8019562:	2305      	movs	r3, #5
 8019564:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019568:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801956c:	b014      	add	sp, #80	; 0x50
 801956e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019572:	bf00      	nop
 8019574:	200156dc 	.word	0x200156dc
 8019578:	200156cc 	.word	0x200156cc

0801957c <on_request>:
 801957c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019580:	4823      	ldr	r0, [pc, #140]	; (8019610 <on_request+0x94>)
 8019582:	b094      	sub	sp, #80	; 0x50
 8019584:	6800      	ldr	r0, [r0, #0]
 8019586:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8019588:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 801958c:	9113      	str	r1, [sp, #76]	; 0x4c
 801958e:	2800      	cmp	r0, #0
 8019590:	d03b      	beq.n	801960a <on_request+0x8e>
 8019592:	461d      	mov	r5, r3
 8019594:	e001      	b.n	801959a <on_request+0x1e>
 8019596:	6840      	ldr	r0, [r0, #4]
 8019598:	b3b8      	cbz	r0, 801960a <on_request+0x8e>
 801959a:	6884      	ldr	r4, [r0, #8]
 801959c:	8b21      	ldrh	r1, [r4, #24]
 801959e:	4291      	cmp	r1, r2
 80195a0:	d1f9      	bne.n	8019596 <on_request+0x1a>
 80195a2:	2248      	movs	r2, #72	; 0x48
 80195a4:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80195a8:	4668      	mov	r0, sp
 80195aa:	f000 fb4f 	bl	8019c4c <memcpy>
 80195ae:	f104 0320 	add.w	r3, r4, #32
 80195b2:	cb0c      	ldmia	r3, {r2, r3}
 80195b4:	4620      	mov	r0, r4
 80195b6:	f7f7 f8f3 	bl	80107a0 <rmw_uxrce_get_static_input_buffer_for_entity>
 80195ba:	4680      	mov	r8, r0
 80195bc:	b328      	cbz	r0, 801960a <on_request+0x8e>
 80195be:	4638      	mov	r0, r7
 80195c0:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80195c4:	4632      	mov	r2, r6
 80195c6:	f107 0110 	add.w	r1, r7, #16
 80195ca:	f7fe f855 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 80195ce:	b930      	cbnz	r0, 80195de <on_request+0x62>
 80195d0:	4810      	ldr	r0, [pc, #64]	; (8019614 <on_request+0x98>)
 80195d2:	4641      	mov	r1, r8
 80195d4:	b014      	add	sp, #80	; 0x50
 80195d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80195da:	f7fd ba1d 	b.w	8016a18 <put_memory>
 80195de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80195e0:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 80195e4:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 80195e8:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 80195ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80195f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80195f4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80195f8:	f7fd fedc 	bl	80173b4 <rmw_uros_epoch_nanos>
 80195fc:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8019600:	2303      	movs	r3, #3
 8019602:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019606:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 801960a:	b014      	add	sp, #80	; 0x50
 801960c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019610:	200156ac 	.word	0x200156ac
 8019614:	200156cc 	.word	0x200156cc

08019618 <on_reply>:
 8019618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801961c:	4821      	ldr	r0, [pc, #132]	; (80196a4 <on_reply+0x8c>)
 801961e:	b094      	sub	sp, #80	; 0x50
 8019620:	6800      	ldr	r0, [r0, #0]
 8019622:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8019624:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8019628:	9113      	str	r1, [sp, #76]	; 0x4c
 801962a:	b3b8      	cbz	r0, 801969c <on_reply+0x84>
 801962c:	461d      	mov	r5, r3
 801962e:	e001      	b.n	8019634 <on_reply+0x1c>
 8019630:	6840      	ldr	r0, [r0, #4]
 8019632:	b398      	cbz	r0, 801969c <on_reply+0x84>
 8019634:	6884      	ldr	r4, [r0, #8]
 8019636:	8b21      	ldrh	r1, [r4, #24]
 8019638:	4291      	cmp	r1, r2
 801963a:	d1f9      	bne.n	8019630 <on_reply+0x18>
 801963c:	2248      	movs	r2, #72	; 0x48
 801963e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8019642:	4668      	mov	r0, sp
 8019644:	f000 fb02 	bl	8019c4c <memcpy>
 8019648:	f104 0320 	add.w	r3, r4, #32
 801964c:	cb0c      	ldmia	r3, {r2, r3}
 801964e:	4620      	mov	r0, r4
 8019650:	f7f7 f8a6 	bl	80107a0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019654:	4680      	mov	r8, r0
 8019656:	b308      	cbz	r0, 801969c <on_reply+0x84>
 8019658:	4638      	mov	r0, r7
 801965a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801965e:	4632      	mov	r2, r6
 8019660:	f107 0110 	add.w	r1, r7, #16
 8019664:	f7fe f808 	bl	8017678 <ucdr_deserialize_array_uint8_t>
 8019668:	b930      	cbnz	r0, 8019678 <on_reply+0x60>
 801966a:	480f      	ldr	r0, [pc, #60]	; (80196a8 <on_reply+0x90>)
 801966c:	4641      	mov	r1, r8
 801966e:	b014      	add	sp, #80	; 0x50
 8019670:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019674:	f7fd b9d0 	b.w	8016a18 <put_memory>
 8019678:	2200      	movs	r2, #0
 801967a:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 801967e:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8019682:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8019686:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 801968a:	f7fd fe93 	bl	80173b4 <rmw_uros_epoch_nanos>
 801968e:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8019692:	2304      	movs	r3, #4
 8019694:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019698:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 801969c:	b014      	add	sp, #80	; 0x50
 801969e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196a2:	bf00      	nop
 80196a4:	20010dc0 	.word	0x20010dc0
 80196a8:	200156cc 	.word	0x200156cc

080196ac <rmw_destroy_client>:
 80196ac:	b570      	push	{r4, r5, r6, lr}
 80196ae:	b128      	cbz	r0, 80196bc <rmw_destroy_client+0x10>
 80196b0:	4604      	mov	r4, r0
 80196b2:	6800      	ldr	r0, [r0, #0]
 80196b4:	460d      	mov	r5, r1
 80196b6:	f7f7 f943 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 80196ba:	b910      	cbnz	r0, 80196c2 <rmw_destroy_client+0x16>
 80196bc:	2401      	movs	r4, #1
 80196be:	4620      	mov	r0, r4
 80196c0:	bd70      	pop	{r4, r5, r6, pc}
 80196c2:	6863      	ldr	r3, [r4, #4]
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d0f9      	beq.n	80196bc <rmw_destroy_client+0x10>
 80196c8:	2d00      	cmp	r5, #0
 80196ca:	d0f7      	beq.n	80196bc <rmw_destroy_client+0x10>
 80196cc:	6828      	ldr	r0, [r5, #0]
 80196ce:	f7f7 f937 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 80196d2:	2800      	cmp	r0, #0
 80196d4:	d0f2      	beq.n	80196bc <rmw_destroy_client+0x10>
 80196d6:	686e      	ldr	r6, [r5, #4]
 80196d8:	2e00      	cmp	r6, #0
 80196da:	d0ef      	beq.n	80196bc <rmw_destroy_client+0x10>
 80196dc:	6864      	ldr	r4, [r4, #4]
 80196de:	6932      	ldr	r2, [r6, #16]
 80196e0:	6920      	ldr	r0, [r4, #16]
 80196e2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80196e6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80196ea:	6819      	ldr	r1, [r3, #0]
 80196ec:	f7fe fe38 	bl	8018360 <uxr_buffer_cancel_data>
 80196f0:	4602      	mov	r2, r0
 80196f2:	6920      	ldr	r0, [r4, #16]
 80196f4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80196f8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80196fc:	f7f7 f8a0 	bl	8010840 <run_xrce_session>
 8019700:	6920      	ldr	r0, [r4, #16]
 8019702:	6932      	ldr	r2, [r6, #16]
 8019704:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019708:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801970c:	6819      	ldr	r1, [r3, #0]
 801970e:	f7f9 f963 	bl	80129d8 <uxr_buffer_delete_entity>
 8019712:	4602      	mov	r2, r0
 8019714:	6920      	ldr	r0, [r4, #16]
 8019716:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801971a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801971e:	f7f7 f88f 	bl	8010840 <run_xrce_session>
 8019722:	2800      	cmp	r0, #0
 8019724:	4628      	mov	r0, r5
 8019726:	bf14      	ite	ne
 8019728:	2400      	movne	r4, #0
 801972a:	2402      	moveq	r4, #2
 801972c:	f7f7 f816 	bl	801075c <rmw_uxrce_fini_client_memory>
 8019730:	e7c5      	b.n	80196be <rmw_destroy_client+0x12>
 8019732:	bf00      	nop

08019734 <rmw_create_guard_condition>:
 8019734:	b538      	push	{r3, r4, r5, lr}
 8019736:	4605      	mov	r5, r0
 8019738:	4807      	ldr	r0, [pc, #28]	; (8019758 <rmw_create_guard_condition+0x24>)
 801973a:	f7fd f95d 	bl	80169f8 <get_memory>
 801973e:	b148      	cbz	r0, 8019754 <rmw_create_guard_condition+0x20>
 8019740:	6884      	ldr	r4, [r0, #8]
 8019742:	2300      	movs	r3, #0
 8019744:	7423      	strb	r3, [r4, #16]
 8019746:	61e5      	str	r5, [r4, #28]
 8019748:	f7fd f97a 	bl	8016a40 <rmw_get_implementation_identifier>
 801974c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019750:	f104 0014 	add.w	r0, r4, #20
 8019754:	bd38      	pop	{r3, r4, r5, pc}
 8019756:	bf00      	nop
 8019758:	2001566c 	.word	0x2001566c

0801975c <rmw_destroy_guard_condition>:
 801975c:	b508      	push	{r3, lr}
 801975e:	4b08      	ldr	r3, [pc, #32]	; (8019780 <rmw_destroy_guard_condition+0x24>)
 8019760:	6819      	ldr	r1, [r3, #0]
 8019762:	b911      	cbnz	r1, 801976a <rmw_destroy_guard_condition+0xe>
 8019764:	e00a      	b.n	801977c <rmw_destroy_guard_condition+0x20>
 8019766:	6849      	ldr	r1, [r1, #4]
 8019768:	b141      	cbz	r1, 801977c <rmw_destroy_guard_condition+0x20>
 801976a:	688b      	ldr	r3, [r1, #8]
 801976c:	3314      	adds	r3, #20
 801976e:	4298      	cmp	r0, r3
 8019770:	d1f9      	bne.n	8019766 <rmw_destroy_guard_condition+0xa>
 8019772:	4803      	ldr	r0, [pc, #12]	; (8019780 <rmw_destroy_guard_condition+0x24>)
 8019774:	f7fd f950 	bl	8016a18 <put_memory>
 8019778:	2000      	movs	r0, #0
 801977a:	bd08      	pop	{r3, pc}
 801977c:	2001      	movs	r0, #1
 801977e:	bd08      	pop	{r3, pc}
 8019780:	2001566c 	.word	0x2001566c

08019784 <rosidl_runtime_c__String__init>:
 8019784:	b510      	push	{r4, lr}
 8019786:	4604      	mov	r4, r0
 8019788:	b086      	sub	sp, #24
 801978a:	b170      	cbz	r0, 80197aa <rosidl_runtime_c__String__init+0x26>
 801978c:	a801      	add	r0, sp, #4
 801978e:	f7f6 fc25 	bl	800ffdc <rcutils_get_default_allocator>
 8019792:	9b01      	ldr	r3, [sp, #4]
 8019794:	9905      	ldr	r1, [sp, #20]
 8019796:	2001      	movs	r0, #1
 8019798:	4798      	blx	r3
 801979a:	6020      	str	r0, [r4, #0]
 801979c:	b128      	cbz	r0, 80197aa <rosidl_runtime_c__String__init+0x26>
 801979e:	2100      	movs	r1, #0
 80197a0:	2201      	movs	r2, #1
 80197a2:	7001      	strb	r1, [r0, #0]
 80197a4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80197a8:	4610      	mov	r0, r2
 80197aa:	b006      	add	sp, #24
 80197ac:	bd10      	pop	{r4, pc}
 80197ae:	bf00      	nop

080197b0 <rosidl_runtime_c__String__fini>:
 80197b0:	b320      	cbz	r0, 80197fc <rosidl_runtime_c__String__fini+0x4c>
 80197b2:	b510      	push	{r4, lr}
 80197b4:	6803      	ldr	r3, [r0, #0]
 80197b6:	b086      	sub	sp, #24
 80197b8:	4604      	mov	r4, r0
 80197ba:	b173      	cbz	r3, 80197da <rosidl_runtime_c__String__fini+0x2a>
 80197bc:	6883      	ldr	r3, [r0, #8]
 80197be:	b1f3      	cbz	r3, 80197fe <rosidl_runtime_c__String__fini+0x4e>
 80197c0:	a801      	add	r0, sp, #4
 80197c2:	f7f6 fc0b 	bl	800ffdc <rcutils_get_default_allocator>
 80197c6:	9b02      	ldr	r3, [sp, #8]
 80197c8:	9905      	ldr	r1, [sp, #20]
 80197ca:	6820      	ldr	r0, [r4, #0]
 80197cc:	4798      	blx	r3
 80197ce:	2300      	movs	r3, #0
 80197d0:	e9c4 3300 	strd	r3, r3, [r4]
 80197d4:	60a3      	str	r3, [r4, #8]
 80197d6:	b006      	add	sp, #24
 80197d8:	bd10      	pop	{r4, pc}
 80197da:	6843      	ldr	r3, [r0, #4]
 80197dc:	b9db      	cbnz	r3, 8019816 <rosidl_runtime_c__String__fini+0x66>
 80197de:	6883      	ldr	r3, [r0, #8]
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d0f8      	beq.n	80197d6 <rosidl_runtime_c__String__fini+0x26>
 80197e4:	4b12      	ldr	r3, [pc, #72]	; (8019830 <rosidl_runtime_c__String__fini+0x80>)
 80197e6:	4813      	ldr	r0, [pc, #76]	; (8019834 <rosidl_runtime_c__String__fini+0x84>)
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	2251      	movs	r2, #81	; 0x51
 80197ec:	68db      	ldr	r3, [r3, #12]
 80197ee:	2101      	movs	r1, #1
 80197f0:	f000 f99e 	bl	8019b30 <fwrite>
 80197f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80197f8:	f000 f830 	bl	801985c <exit>
 80197fc:	4770      	bx	lr
 80197fe:	4b0c      	ldr	r3, [pc, #48]	; (8019830 <rosidl_runtime_c__String__fini+0x80>)
 8019800:	480d      	ldr	r0, [pc, #52]	; (8019838 <rosidl_runtime_c__String__fini+0x88>)
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	224c      	movs	r2, #76	; 0x4c
 8019806:	68db      	ldr	r3, [r3, #12]
 8019808:	2101      	movs	r1, #1
 801980a:	f000 f991 	bl	8019b30 <fwrite>
 801980e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019812:	f000 f823 	bl	801985c <exit>
 8019816:	4b06      	ldr	r3, [pc, #24]	; (8019830 <rosidl_runtime_c__String__fini+0x80>)
 8019818:	4808      	ldr	r0, [pc, #32]	; (801983c <rosidl_runtime_c__String__fini+0x8c>)
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	224e      	movs	r2, #78	; 0x4e
 801981e:	68db      	ldr	r3, [r3, #12]
 8019820:	2101      	movs	r1, #1
 8019822:	f000 f985 	bl	8019b30 <fwrite>
 8019826:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801982a:	f000 f817 	bl	801985c <exit>
 801982e:	bf00      	nop
 8019830:	200005b4 	.word	0x200005b4
 8019834:	0801c174 	.word	0x0801c174
 8019838:	0801c0d4 	.word	0x0801c0d4
 801983c:	0801c124 	.word	0x0801c124

08019840 <calloc>:
 8019840:	4b02      	ldr	r3, [pc, #8]	; (801984c <calloc+0xc>)
 8019842:	460a      	mov	r2, r1
 8019844:	4601      	mov	r1, r0
 8019846:	6818      	ldr	r0, [r3, #0]
 8019848:	f000 ba16 	b.w	8019c78 <_calloc_r>
 801984c:	200005b4 	.word	0x200005b4

08019850 <__errno>:
 8019850:	4b01      	ldr	r3, [pc, #4]	; (8019858 <__errno+0x8>)
 8019852:	6818      	ldr	r0, [r3, #0]
 8019854:	4770      	bx	lr
 8019856:	bf00      	nop
 8019858:	200005b4 	.word	0x200005b4

0801985c <exit>:
 801985c:	b508      	push	{r3, lr}
 801985e:	4b07      	ldr	r3, [pc, #28]	; (801987c <exit+0x20>)
 8019860:	4604      	mov	r4, r0
 8019862:	b113      	cbz	r3, 801986a <exit+0xe>
 8019864:	2100      	movs	r1, #0
 8019866:	f3af 8000 	nop.w
 801986a:	4b05      	ldr	r3, [pc, #20]	; (8019880 <exit+0x24>)
 801986c:	6818      	ldr	r0, [r3, #0]
 801986e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019870:	b103      	cbz	r3, 8019874 <exit+0x18>
 8019872:	4798      	blx	r3
 8019874:	4620      	mov	r0, r4
 8019876:	f7e8 fcaf 	bl	80021d8 <_exit>
 801987a:	bf00      	nop
 801987c:	00000000 	.word	0x00000000
 8019880:	0801c328 	.word	0x0801c328

08019884 <std>:
 8019884:	2300      	movs	r3, #0
 8019886:	b510      	push	{r4, lr}
 8019888:	4604      	mov	r4, r0
 801988a:	e9c0 3300 	strd	r3, r3, [r0]
 801988e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019892:	6083      	str	r3, [r0, #8]
 8019894:	8181      	strh	r1, [r0, #12]
 8019896:	6643      	str	r3, [r0, #100]	; 0x64
 8019898:	81c2      	strh	r2, [r0, #14]
 801989a:	6183      	str	r3, [r0, #24]
 801989c:	4619      	mov	r1, r3
 801989e:	2208      	movs	r2, #8
 80198a0:	305c      	adds	r0, #92	; 0x5c
 80198a2:	f000 f9e1 	bl	8019c68 <memset>
 80198a6:	4b05      	ldr	r3, [pc, #20]	; (80198bc <std+0x38>)
 80198a8:	6263      	str	r3, [r4, #36]	; 0x24
 80198aa:	4b05      	ldr	r3, [pc, #20]	; (80198c0 <std+0x3c>)
 80198ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80198ae:	4b05      	ldr	r3, [pc, #20]	; (80198c4 <std+0x40>)
 80198b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80198b2:	4b05      	ldr	r3, [pc, #20]	; (80198c8 <std+0x44>)
 80198b4:	6224      	str	r4, [r4, #32]
 80198b6:	6323      	str	r3, [r4, #48]	; 0x30
 80198b8:	bd10      	pop	{r4, pc}
 80198ba:	bf00      	nop
 80198bc:	0801a0d9 	.word	0x0801a0d9
 80198c0:	0801a0fb 	.word	0x0801a0fb
 80198c4:	0801a133 	.word	0x0801a133
 80198c8:	0801a157 	.word	0x0801a157

080198cc <_cleanup_r>:
 80198cc:	4901      	ldr	r1, [pc, #4]	; (80198d4 <_cleanup_r+0x8>)
 80198ce:	f000 b8af 	b.w	8019a30 <_fwalk_reent>
 80198d2:	bf00      	nop
 80198d4:	0801a66d 	.word	0x0801a66d

080198d8 <__sfmoreglue>:
 80198d8:	b570      	push	{r4, r5, r6, lr}
 80198da:	2268      	movs	r2, #104	; 0x68
 80198dc:	1e4d      	subs	r5, r1, #1
 80198de:	4355      	muls	r5, r2
 80198e0:	460e      	mov	r6, r1
 80198e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80198e6:	f000 fa49 	bl	8019d7c <_malloc_r>
 80198ea:	4604      	mov	r4, r0
 80198ec:	b140      	cbz	r0, 8019900 <__sfmoreglue+0x28>
 80198ee:	2100      	movs	r1, #0
 80198f0:	e9c0 1600 	strd	r1, r6, [r0]
 80198f4:	300c      	adds	r0, #12
 80198f6:	60a0      	str	r0, [r4, #8]
 80198f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80198fc:	f000 f9b4 	bl	8019c68 <memset>
 8019900:	4620      	mov	r0, r4
 8019902:	bd70      	pop	{r4, r5, r6, pc}

08019904 <__sfp_lock_acquire>:
 8019904:	4801      	ldr	r0, [pc, #4]	; (801990c <__sfp_lock_acquire+0x8>)
 8019906:	f000 b98e 	b.w	8019c26 <__retarget_lock_acquire_recursive>
 801990a:	bf00      	nop
 801990c:	20015822 	.word	0x20015822

08019910 <__sfp_lock_release>:
 8019910:	4801      	ldr	r0, [pc, #4]	; (8019918 <__sfp_lock_release+0x8>)
 8019912:	f000 b989 	b.w	8019c28 <__retarget_lock_release_recursive>
 8019916:	bf00      	nop
 8019918:	20015822 	.word	0x20015822

0801991c <__sinit_lock_acquire>:
 801991c:	4801      	ldr	r0, [pc, #4]	; (8019924 <__sinit_lock_acquire+0x8>)
 801991e:	f000 b982 	b.w	8019c26 <__retarget_lock_acquire_recursive>
 8019922:	bf00      	nop
 8019924:	20015823 	.word	0x20015823

08019928 <__sinit_lock_release>:
 8019928:	4801      	ldr	r0, [pc, #4]	; (8019930 <__sinit_lock_release+0x8>)
 801992a:	f000 b97d 	b.w	8019c28 <__retarget_lock_release_recursive>
 801992e:	bf00      	nop
 8019930:	20015823 	.word	0x20015823

08019934 <__sinit>:
 8019934:	b510      	push	{r4, lr}
 8019936:	4604      	mov	r4, r0
 8019938:	f7ff fff0 	bl	801991c <__sinit_lock_acquire>
 801993c:	69a3      	ldr	r3, [r4, #24]
 801993e:	b11b      	cbz	r3, 8019948 <__sinit+0x14>
 8019940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019944:	f7ff bff0 	b.w	8019928 <__sinit_lock_release>
 8019948:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801994c:	6523      	str	r3, [r4, #80]	; 0x50
 801994e:	4b13      	ldr	r3, [pc, #76]	; (801999c <__sinit+0x68>)
 8019950:	4a13      	ldr	r2, [pc, #76]	; (80199a0 <__sinit+0x6c>)
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	62a2      	str	r2, [r4, #40]	; 0x28
 8019956:	42a3      	cmp	r3, r4
 8019958:	bf04      	itt	eq
 801995a:	2301      	moveq	r3, #1
 801995c:	61a3      	streq	r3, [r4, #24]
 801995e:	4620      	mov	r0, r4
 8019960:	f000 f820 	bl	80199a4 <__sfp>
 8019964:	6060      	str	r0, [r4, #4]
 8019966:	4620      	mov	r0, r4
 8019968:	f000 f81c 	bl	80199a4 <__sfp>
 801996c:	60a0      	str	r0, [r4, #8]
 801996e:	4620      	mov	r0, r4
 8019970:	f000 f818 	bl	80199a4 <__sfp>
 8019974:	2200      	movs	r2, #0
 8019976:	60e0      	str	r0, [r4, #12]
 8019978:	2104      	movs	r1, #4
 801997a:	6860      	ldr	r0, [r4, #4]
 801997c:	f7ff ff82 	bl	8019884 <std>
 8019980:	68a0      	ldr	r0, [r4, #8]
 8019982:	2201      	movs	r2, #1
 8019984:	2109      	movs	r1, #9
 8019986:	f7ff ff7d 	bl	8019884 <std>
 801998a:	68e0      	ldr	r0, [r4, #12]
 801998c:	2202      	movs	r2, #2
 801998e:	2112      	movs	r1, #18
 8019990:	f7ff ff78 	bl	8019884 <std>
 8019994:	2301      	movs	r3, #1
 8019996:	61a3      	str	r3, [r4, #24]
 8019998:	e7d2      	b.n	8019940 <__sinit+0xc>
 801999a:	bf00      	nop
 801999c:	0801c328 	.word	0x0801c328
 80199a0:	080198cd 	.word	0x080198cd

080199a4 <__sfp>:
 80199a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199a6:	4607      	mov	r7, r0
 80199a8:	f7ff ffac 	bl	8019904 <__sfp_lock_acquire>
 80199ac:	4b1e      	ldr	r3, [pc, #120]	; (8019a28 <__sfp+0x84>)
 80199ae:	681e      	ldr	r6, [r3, #0]
 80199b0:	69b3      	ldr	r3, [r6, #24]
 80199b2:	b913      	cbnz	r3, 80199ba <__sfp+0x16>
 80199b4:	4630      	mov	r0, r6
 80199b6:	f7ff ffbd 	bl	8019934 <__sinit>
 80199ba:	3648      	adds	r6, #72	; 0x48
 80199bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80199c0:	3b01      	subs	r3, #1
 80199c2:	d503      	bpl.n	80199cc <__sfp+0x28>
 80199c4:	6833      	ldr	r3, [r6, #0]
 80199c6:	b30b      	cbz	r3, 8019a0c <__sfp+0x68>
 80199c8:	6836      	ldr	r6, [r6, #0]
 80199ca:	e7f7      	b.n	80199bc <__sfp+0x18>
 80199cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80199d0:	b9d5      	cbnz	r5, 8019a08 <__sfp+0x64>
 80199d2:	4b16      	ldr	r3, [pc, #88]	; (8019a2c <__sfp+0x88>)
 80199d4:	60e3      	str	r3, [r4, #12]
 80199d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80199da:	6665      	str	r5, [r4, #100]	; 0x64
 80199dc:	f000 f922 	bl	8019c24 <__retarget_lock_init_recursive>
 80199e0:	f7ff ff96 	bl	8019910 <__sfp_lock_release>
 80199e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80199e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80199ec:	6025      	str	r5, [r4, #0]
 80199ee:	61a5      	str	r5, [r4, #24]
 80199f0:	2208      	movs	r2, #8
 80199f2:	4629      	mov	r1, r5
 80199f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80199f8:	f000 f936 	bl	8019c68 <memset>
 80199fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019a00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019a04:	4620      	mov	r0, r4
 8019a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a08:	3468      	adds	r4, #104	; 0x68
 8019a0a:	e7d9      	b.n	80199c0 <__sfp+0x1c>
 8019a0c:	2104      	movs	r1, #4
 8019a0e:	4638      	mov	r0, r7
 8019a10:	f7ff ff62 	bl	80198d8 <__sfmoreglue>
 8019a14:	4604      	mov	r4, r0
 8019a16:	6030      	str	r0, [r6, #0]
 8019a18:	2800      	cmp	r0, #0
 8019a1a:	d1d5      	bne.n	80199c8 <__sfp+0x24>
 8019a1c:	f7ff ff78 	bl	8019910 <__sfp_lock_release>
 8019a20:	230c      	movs	r3, #12
 8019a22:	603b      	str	r3, [r7, #0]
 8019a24:	e7ee      	b.n	8019a04 <__sfp+0x60>
 8019a26:	bf00      	nop
 8019a28:	0801c328 	.word	0x0801c328
 8019a2c:	ffff0001 	.word	0xffff0001

08019a30 <_fwalk_reent>:
 8019a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a34:	4606      	mov	r6, r0
 8019a36:	4688      	mov	r8, r1
 8019a38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019a3c:	2700      	movs	r7, #0
 8019a3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019a42:	f1b9 0901 	subs.w	r9, r9, #1
 8019a46:	d505      	bpl.n	8019a54 <_fwalk_reent+0x24>
 8019a48:	6824      	ldr	r4, [r4, #0]
 8019a4a:	2c00      	cmp	r4, #0
 8019a4c:	d1f7      	bne.n	8019a3e <_fwalk_reent+0xe>
 8019a4e:	4638      	mov	r0, r7
 8019a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019a54:	89ab      	ldrh	r3, [r5, #12]
 8019a56:	2b01      	cmp	r3, #1
 8019a58:	d907      	bls.n	8019a6a <_fwalk_reent+0x3a>
 8019a5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019a5e:	3301      	adds	r3, #1
 8019a60:	d003      	beq.n	8019a6a <_fwalk_reent+0x3a>
 8019a62:	4629      	mov	r1, r5
 8019a64:	4630      	mov	r0, r6
 8019a66:	47c0      	blx	r8
 8019a68:	4307      	orrs	r7, r0
 8019a6a:	3568      	adds	r5, #104	; 0x68
 8019a6c:	e7e9      	b.n	8019a42 <_fwalk_reent+0x12>
	...

08019a70 <_fwrite_r>:
 8019a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a74:	9c08      	ldr	r4, [sp, #32]
 8019a76:	468a      	mov	sl, r1
 8019a78:	4690      	mov	r8, r2
 8019a7a:	fb02 f903 	mul.w	r9, r2, r3
 8019a7e:	4605      	mov	r5, r0
 8019a80:	b118      	cbz	r0, 8019a8a <_fwrite_r+0x1a>
 8019a82:	6983      	ldr	r3, [r0, #24]
 8019a84:	b90b      	cbnz	r3, 8019a8a <_fwrite_r+0x1a>
 8019a86:	f7ff ff55 	bl	8019934 <__sinit>
 8019a8a:	4b26      	ldr	r3, [pc, #152]	; (8019b24 <_fwrite_r+0xb4>)
 8019a8c:	429c      	cmp	r4, r3
 8019a8e:	d123      	bne.n	8019ad8 <_fwrite_r+0x68>
 8019a90:	686c      	ldr	r4, [r5, #4]
 8019a92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019a94:	07de      	lsls	r6, r3, #31
 8019a96:	d405      	bmi.n	8019aa4 <_fwrite_r+0x34>
 8019a98:	89a3      	ldrh	r3, [r4, #12]
 8019a9a:	0598      	lsls	r0, r3, #22
 8019a9c:	d402      	bmi.n	8019aa4 <_fwrite_r+0x34>
 8019a9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019aa0:	f000 f8c1 	bl	8019c26 <__retarget_lock_acquire_recursive>
 8019aa4:	89a3      	ldrh	r3, [r4, #12]
 8019aa6:	0719      	lsls	r1, r3, #28
 8019aa8:	d520      	bpl.n	8019aec <_fwrite_r+0x7c>
 8019aaa:	6923      	ldr	r3, [r4, #16]
 8019aac:	b1f3      	cbz	r3, 8019aec <_fwrite_r+0x7c>
 8019aae:	2600      	movs	r6, #0
 8019ab0:	454e      	cmp	r6, r9
 8019ab2:	d029      	beq.n	8019b08 <_fwrite_r+0x98>
 8019ab4:	68a7      	ldr	r7, [r4, #8]
 8019ab6:	f81a 1006 	ldrb.w	r1, [sl, r6]
 8019aba:	3f01      	subs	r7, #1
 8019abc:	2f00      	cmp	r7, #0
 8019abe:	60a7      	str	r7, [r4, #8]
 8019ac0:	da04      	bge.n	8019acc <_fwrite_r+0x5c>
 8019ac2:	69a3      	ldr	r3, [r4, #24]
 8019ac4:	429f      	cmp	r7, r3
 8019ac6:	db19      	blt.n	8019afc <_fwrite_r+0x8c>
 8019ac8:	290a      	cmp	r1, #10
 8019aca:	d017      	beq.n	8019afc <_fwrite_r+0x8c>
 8019acc:	6823      	ldr	r3, [r4, #0]
 8019ace:	1c5a      	adds	r2, r3, #1
 8019ad0:	6022      	str	r2, [r4, #0]
 8019ad2:	7019      	strb	r1, [r3, #0]
 8019ad4:	3601      	adds	r6, #1
 8019ad6:	e7eb      	b.n	8019ab0 <_fwrite_r+0x40>
 8019ad8:	4b13      	ldr	r3, [pc, #76]	; (8019b28 <_fwrite_r+0xb8>)
 8019ada:	429c      	cmp	r4, r3
 8019adc:	d101      	bne.n	8019ae2 <_fwrite_r+0x72>
 8019ade:	68ac      	ldr	r4, [r5, #8]
 8019ae0:	e7d7      	b.n	8019a92 <_fwrite_r+0x22>
 8019ae2:	4b12      	ldr	r3, [pc, #72]	; (8019b2c <_fwrite_r+0xbc>)
 8019ae4:	429c      	cmp	r4, r3
 8019ae6:	bf08      	it	eq
 8019ae8:	68ec      	ldreq	r4, [r5, #12]
 8019aea:	e7d2      	b.n	8019a92 <_fwrite_r+0x22>
 8019aec:	4621      	mov	r1, r4
 8019aee:	4628      	mov	r0, r5
 8019af0:	f000 fc8e 	bl	801a410 <__swsetup_r>
 8019af4:	2800      	cmp	r0, #0
 8019af6:	d0da      	beq.n	8019aae <_fwrite_r+0x3e>
 8019af8:	2600      	movs	r6, #0
 8019afa:	e005      	b.n	8019b08 <_fwrite_r+0x98>
 8019afc:	4622      	mov	r2, r4
 8019afe:	4628      	mov	r0, r5
 8019b00:	f000 fc22 	bl	801a348 <__swbuf_r>
 8019b04:	3001      	adds	r0, #1
 8019b06:	d1e5      	bne.n	8019ad4 <_fwrite_r+0x64>
 8019b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019b0a:	07da      	lsls	r2, r3, #31
 8019b0c:	d405      	bmi.n	8019b1a <_fwrite_r+0xaa>
 8019b0e:	89a3      	ldrh	r3, [r4, #12]
 8019b10:	059b      	lsls	r3, r3, #22
 8019b12:	d402      	bmi.n	8019b1a <_fwrite_r+0xaa>
 8019b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b16:	f000 f887 	bl	8019c28 <__retarget_lock_release_recursive>
 8019b1a:	fbb6 f0f8 	udiv	r0, r6, r8
 8019b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b22:	bf00      	nop
 8019b24:	0801c2e8 	.word	0x0801c2e8
 8019b28:	0801c308 	.word	0x0801c308
 8019b2c:	0801c2c8 	.word	0x0801c2c8

08019b30 <fwrite>:
 8019b30:	b507      	push	{r0, r1, r2, lr}
 8019b32:	9300      	str	r3, [sp, #0]
 8019b34:	4613      	mov	r3, r2
 8019b36:	460a      	mov	r2, r1
 8019b38:	4601      	mov	r1, r0
 8019b3a:	4803      	ldr	r0, [pc, #12]	; (8019b48 <fwrite+0x18>)
 8019b3c:	6800      	ldr	r0, [r0, #0]
 8019b3e:	f7ff ff97 	bl	8019a70 <_fwrite_r>
 8019b42:	b003      	add	sp, #12
 8019b44:	f85d fb04 	ldr.w	pc, [sp], #4
 8019b48:	200005b4 	.word	0x200005b4

08019b4c <getenv>:
 8019b4c:	b507      	push	{r0, r1, r2, lr}
 8019b4e:	4b04      	ldr	r3, [pc, #16]	; (8019b60 <getenv+0x14>)
 8019b50:	4601      	mov	r1, r0
 8019b52:	aa01      	add	r2, sp, #4
 8019b54:	6818      	ldr	r0, [r3, #0]
 8019b56:	f000 f805 	bl	8019b64 <_findenv_r>
 8019b5a:	b003      	add	sp, #12
 8019b5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019b60:	200005b4 	.word	0x200005b4

08019b64 <_findenv_r>:
 8019b64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b68:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8019bd8 <_findenv_r+0x74>
 8019b6c:	4607      	mov	r7, r0
 8019b6e:	4689      	mov	r9, r1
 8019b70:	4616      	mov	r6, r2
 8019b72:	f000 fce9 	bl	801a548 <__env_lock>
 8019b76:	f8da 4000 	ldr.w	r4, [sl]
 8019b7a:	b134      	cbz	r4, 8019b8a <_findenv_r+0x26>
 8019b7c:	464b      	mov	r3, r9
 8019b7e:	4698      	mov	r8, r3
 8019b80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019b84:	b13a      	cbz	r2, 8019b96 <_findenv_r+0x32>
 8019b86:	2a3d      	cmp	r2, #61	; 0x3d
 8019b88:	d1f9      	bne.n	8019b7e <_findenv_r+0x1a>
 8019b8a:	4638      	mov	r0, r7
 8019b8c:	f000 fce2 	bl	801a554 <__env_unlock>
 8019b90:	2000      	movs	r0, #0
 8019b92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b96:	eba8 0809 	sub.w	r8, r8, r9
 8019b9a:	46a3      	mov	fp, r4
 8019b9c:	f854 0b04 	ldr.w	r0, [r4], #4
 8019ba0:	2800      	cmp	r0, #0
 8019ba2:	d0f2      	beq.n	8019b8a <_findenv_r+0x26>
 8019ba4:	4642      	mov	r2, r8
 8019ba6:	4649      	mov	r1, r9
 8019ba8:	f000 faee 	bl	801a188 <strncmp>
 8019bac:	2800      	cmp	r0, #0
 8019bae:	d1f4      	bne.n	8019b9a <_findenv_r+0x36>
 8019bb0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019bb4:	eb03 0508 	add.w	r5, r3, r8
 8019bb8:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019bbc:	2b3d      	cmp	r3, #61	; 0x3d
 8019bbe:	d1ec      	bne.n	8019b9a <_findenv_r+0x36>
 8019bc0:	f8da 3000 	ldr.w	r3, [sl]
 8019bc4:	ebab 0303 	sub.w	r3, fp, r3
 8019bc8:	109b      	asrs	r3, r3, #2
 8019bca:	4638      	mov	r0, r7
 8019bcc:	6033      	str	r3, [r6, #0]
 8019bce:	f000 fcc1 	bl	801a554 <__env_unlock>
 8019bd2:	1c68      	adds	r0, r5, #1
 8019bd4:	e7dd      	b.n	8019b92 <_findenv_r+0x2e>
 8019bd6:	bf00      	nop
 8019bd8:	20000000 	.word	0x20000000

08019bdc <__libc_init_array>:
 8019bdc:	b570      	push	{r4, r5, r6, lr}
 8019bde:	4d0d      	ldr	r5, [pc, #52]	; (8019c14 <__libc_init_array+0x38>)
 8019be0:	4c0d      	ldr	r4, [pc, #52]	; (8019c18 <__libc_init_array+0x3c>)
 8019be2:	1b64      	subs	r4, r4, r5
 8019be4:	10a4      	asrs	r4, r4, #2
 8019be6:	2600      	movs	r6, #0
 8019be8:	42a6      	cmp	r6, r4
 8019bea:	d109      	bne.n	8019c00 <__libc_init_array+0x24>
 8019bec:	4d0b      	ldr	r5, [pc, #44]	; (8019c1c <__libc_init_array+0x40>)
 8019bee:	4c0c      	ldr	r4, [pc, #48]	; (8019c20 <__libc_init_array+0x44>)
 8019bf0:	f001 fb28 	bl	801b244 <_init>
 8019bf4:	1b64      	subs	r4, r4, r5
 8019bf6:	10a4      	asrs	r4, r4, #2
 8019bf8:	2600      	movs	r6, #0
 8019bfa:	42a6      	cmp	r6, r4
 8019bfc:	d105      	bne.n	8019c0a <__libc_init_array+0x2e>
 8019bfe:	bd70      	pop	{r4, r5, r6, pc}
 8019c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8019c04:	4798      	blx	r3
 8019c06:	3601      	adds	r6, #1
 8019c08:	e7ee      	b.n	8019be8 <__libc_init_array+0xc>
 8019c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8019c0e:	4798      	blx	r3
 8019c10:	3601      	adds	r6, #1
 8019c12:	e7f2      	b.n	8019bfa <__libc_init_array+0x1e>
 8019c14:	0801c418 	.word	0x0801c418
 8019c18:	0801c418 	.word	0x0801c418
 8019c1c:	0801c418 	.word	0x0801c418
 8019c20:	0801c42c 	.word	0x0801c42c

08019c24 <__retarget_lock_init_recursive>:
 8019c24:	4770      	bx	lr

08019c26 <__retarget_lock_acquire_recursive>:
 8019c26:	4770      	bx	lr

08019c28 <__retarget_lock_release_recursive>:
 8019c28:	4770      	bx	lr
	...

08019c2c <malloc>:
 8019c2c:	4b02      	ldr	r3, [pc, #8]	; (8019c38 <malloc+0xc>)
 8019c2e:	4601      	mov	r1, r0
 8019c30:	6818      	ldr	r0, [r3, #0]
 8019c32:	f000 b8a3 	b.w	8019d7c <_malloc_r>
 8019c36:	bf00      	nop
 8019c38:	200005b4 	.word	0x200005b4

08019c3c <free>:
 8019c3c:	4b02      	ldr	r3, [pc, #8]	; (8019c48 <free+0xc>)
 8019c3e:	4601      	mov	r1, r0
 8019c40:	6818      	ldr	r0, [r3, #0]
 8019c42:	f000 b82f 	b.w	8019ca4 <_free_r>
 8019c46:	bf00      	nop
 8019c48:	200005b4 	.word	0x200005b4

08019c4c <memcpy>:
 8019c4c:	440a      	add	r2, r1
 8019c4e:	4291      	cmp	r1, r2
 8019c50:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019c54:	d100      	bne.n	8019c58 <memcpy+0xc>
 8019c56:	4770      	bx	lr
 8019c58:	b510      	push	{r4, lr}
 8019c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019c62:	4291      	cmp	r1, r2
 8019c64:	d1f9      	bne.n	8019c5a <memcpy+0xe>
 8019c66:	bd10      	pop	{r4, pc}

08019c68 <memset>:
 8019c68:	4402      	add	r2, r0
 8019c6a:	4603      	mov	r3, r0
 8019c6c:	4293      	cmp	r3, r2
 8019c6e:	d100      	bne.n	8019c72 <memset+0xa>
 8019c70:	4770      	bx	lr
 8019c72:	f803 1b01 	strb.w	r1, [r3], #1
 8019c76:	e7f9      	b.n	8019c6c <memset+0x4>

08019c78 <_calloc_r>:
 8019c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c7a:	fba1 2402 	umull	r2, r4, r1, r2
 8019c7e:	b94c      	cbnz	r4, 8019c94 <_calloc_r+0x1c>
 8019c80:	4611      	mov	r1, r2
 8019c82:	9201      	str	r2, [sp, #4]
 8019c84:	f000 f87a 	bl	8019d7c <_malloc_r>
 8019c88:	9a01      	ldr	r2, [sp, #4]
 8019c8a:	4605      	mov	r5, r0
 8019c8c:	b930      	cbnz	r0, 8019c9c <_calloc_r+0x24>
 8019c8e:	4628      	mov	r0, r5
 8019c90:	b003      	add	sp, #12
 8019c92:	bd30      	pop	{r4, r5, pc}
 8019c94:	220c      	movs	r2, #12
 8019c96:	6002      	str	r2, [r0, #0]
 8019c98:	2500      	movs	r5, #0
 8019c9a:	e7f8      	b.n	8019c8e <_calloc_r+0x16>
 8019c9c:	4621      	mov	r1, r4
 8019c9e:	f7ff ffe3 	bl	8019c68 <memset>
 8019ca2:	e7f4      	b.n	8019c8e <_calloc_r+0x16>

08019ca4 <_free_r>:
 8019ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ca6:	2900      	cmp	r1, #0
 8019ca8:	d044      	beq.n	8019d34 <_free_r+0x90>
 8019caa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019cae:	9001      	str	r0, [sp, #4]
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	f1a1 0404 	sub.w	r4, r1, #4
 8019cb6:	bfb8      	it	lt
 8019cb8:	18e4      	addlt	r4, r4, r3
 8019cba:	f000 fd9d 	bl	801a7f8 <__malloc_lock>
 8019cbe:	4a1e      	ldr	r2, [pc, #120]	; (8019d38 <_free_r+0x94>)
 8019cc0:	9801      	ldr	r0, [sp, #4]
 8019cc2:	6813      	ldr	r3, [r2, #0]
 8019cc4:	b933      	cbnz	r3, 8019cd4 <_free_r+0x30>
 8019cc6:	6063      	str	r3, [r4, #4]
 8019cc8:	6014      	str	r4, [r2, #0]
 8019cca:	b003      	add	sp, #12
 8019ccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019cd0:	f000 bd98 	b.w	801a804 <__malloc_unlock>
 8019cd4:	42a3      	cmp	r3, r4
 8019cd6:	d908      	bls.n	8019cea <_free_r+0x46>
 8019cd8:	6825      	ldr	r5, [r4, #0]
 8019cda:	1961      	adds	r1, r4, r5
 8019cdc:	428b      	cmp	r3, r1
 8019cde:	bf01      	itttt	eq
 8019ce0:	6819      	ldreq	r1, [r3, #0]
 8019ce2:	685b      	ldreq	r3, [r3, #4]
 8019ce4:	1949      	addeq	r1, r1, r5
 8019ce6:	6021      	streq	r1, [r4, #0]
 8019ce8:	e7ed      	b.n	8019cc6 <_free_r+0x22>
 8019cea:	461a      	mov	r2, r3
 8019cec:	685b      	ldr	r3, [r3, #4]
 8019cee:	b10b      	cbz	r3, 8019cf4 <_free_r+0x50>
 8019cf0:	42a3      	cmp	r3, r4
 8019cf2:	d9fa      	bls.n	8019cea <_free_r+0x46>
 8019cf4:	6811      	ldr	r1, [r2, #0]
 8019cf6:	1855      	adds	r5, r2, r1
 8019cf8:	42a5      	cmp	r5, r4
 8019cfa:	d10b      	bne.n	8019d14 <_free_r+0x70>
 8019cfc:	6824      	ldr	r4, [r4, #0]
 8019cfe:	4421      	add	r1, r4
 8019d00:	1854      	adds	r4, r2, r1
 8019d02:	42a3      	cmp	r3, r4
 8019d04:	6011      	str	r1, [r2, #0]
 8019d06:	d1e0      	bne.n	8019cca <_free_r+0x26>
 8019d08:	681c      	ldr	r4, [r3, #0]
 8019d0a:	685b      	ldr	r3, [r3, #4]
 8019d0c:	6053      	str	r3, [r2, #4]
 8019d0e:	4421      	add	r1, r4
 8019d10:	6011      	str	r1, [r2, #0]
 8019d12:	e7da      	b.n	8019cca <_free_r+0x26>
 8019d14:	d902      	bls.n	8019d1c <_free_r+0x78>
 8019d16:	230c      	movs	r3, #12
 8019d18:	6003      	str	r3, [r0, #0]
 8019d1a:	e7d6      	b.n	8019cca <_free_r+0x26>
 8019d1c:	6825      	ldr	r5, [r4, #0]
 8019d1e:	1961      	adds	r1, r4, r5
 8019d20:	428b      	cmp	r3, r1
 8019d22:	bf04      	itt	eq
 8019d24:	6819      	ldreq	r1, [r3, #0]
 8019d26:	685b      	ldreq	r3, [r3, #4]
 8019d28:	6063      	str	r3, [r4, #4]
 8019d2a:	bf04      	itt	eq
 8019d2c:	1949      	addeq	r1, r1, r5
 8019d2e:	6021      	streq	r1, [r4, #0]
 8019d30:	6054      	str	r4, [r2, #4]
 8019d32:	e7ca      	b.n	8019cca <_free_r+0x26>
 8019d34:	b003      	add	sp, #12
 8019d36:	bd30      	pop	{r4, r5, pc}
 8019d38:	20015824 	.word	0x20015824

08019d3c <sbrk_aligned>:
 8019d3c:	b570      	push	{r4, r5, r6, lr}
 8019d3e:	4e0e      	ldr	r6, [pc, #56]	; (8019d78 <sbrk_aligned+0x3c>)
 8019d40:	460c      	mov	r4, r1
 8019d42:	6831      	ldr	r1, [r6, #0]
 8019d44:	4605      	mov	r5, r0
 8019d46:	b911      	cbnz	r1, 8019d4e <sbrk_aligned+0x12>
 8019d48:	f000 f982 	bl	801a050 <_sbrk_r>
 8019d4c:	6030      	str	r0, [r6, #0]
 8019d4e:	4621      	mov	r1, r4
 8019d50:	4628      	mov	r0, r5
 8019d52:	f000 f97d 	bl	801a050 <_sbrk_r>
 8019d56:	1c43      	adds	r3, r0, #1
 8019d58:	d00a      	beq.n	8019d70 <sbrk_aligned+0x34>
 8019d5a:	1cc4      	adds	r4, r0, #3
 8019d5c:	f024 0403 	bic.w	r4, r4, #3
 8019d60:	42a0      	cmp	r0, r4
 8019d62:	d007      	beq.n	8019d74 <sbrk_aligned+0x38>
 8019d64:	1a21      	subs	r1, r4, r0
 8019d66:	4628      	mov	r0, r5
 8019d68:	f000 f972 	bl	801a050 <_sbrk_r>
 8019d6c:	3001      	adds	r0, #1
 8019d6e:	d101      	bne.n	8019d74 <sbrk_aligned+0x38>
 8019d70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019d74:	4620      	mov	r0, r4
 8019d76:	bd70      	pop	{r4, r5, r6, pc}
 8019d78:	20015828 	.word	0x20015828

08019d7c <_malloc_r>:
 8019d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d80:	1ccd      	adds	r5, r1, #3
 8019d82:	f025 0503 	bic.w	r5, r5, #3
 8019d86:	3508      	adds	r5, #8
 8019d88:	2d0c      	cmp	r5, #12
 8019d8a:	bf38      	it	cc
 8019d8c:	250c      	movcc	r5, #12
 8019d8e:	2d00      	cmp	r5, #0
 8019d90:	4607      	mov	r7, r0
 8019d92:	db01      	blt.n	8019d98 <_malloc_r+0x1c>
 8019d94:	42a9      	cmp	r1, r5
 8019d96:	d905      	bls.n	8019da4 <_malloc_r+0x28>
 8019d98:	230c      	movs	r3, #12
 8019d9a:	603b      	str	r3, [r7, #0]
 8019d9c:	2600      	movs	r6, #0
 8019d9e:	4630      	mov	r0, r6
 8019da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019da4:	4e2e      	ldr	r6, [pc, #184]	; (8019e60 <_malloc_r+0xe4>)
 8019da6:	f000 fd27 	bl	801a7f8 <__malloc_lock>
 8019daa:	6833      	ldr	r3, [r6, #0]
 8019dac:	461c      	mov	r4, r3
 8019dae:	bb34      	cbnz	r4, 8019dfe <_malloc_r+0x82>
 8019db0:	4629      	mov	r1, r5
 8019db2:	4638      	mov	r0, r7
 8019db4:	f7ff ffc2 	bl	8019d3c <sbrk_aligned>
 8019db8:	1c43      	adds	r3, r0, #1
 8019dba:	4604      	mov	r4, r0
 8019dbc:	d14d      	bne.n	8019e5a <_malloc_r+0xde>
 8019dbe:	6834      	ldr	r4, [r6, #0]
 8019dc0:	4626      	mov	r6, r4
 8019dc2:	2e00      	cmp	r6, #0
 8019dc4:	d140      	bne.n	8019e48 <_malloc_r+0xcc>
 8019dc6:	6823      	ldr	r3, [r4, #0]
 8019dc8:	4631      	mov	r1, r6
 8019dca:	4638      	mov	r0, r7
 8019dcc:	eb04 0803 	add.w	r8, r4, r3
 8019dd0:	f000 f93e 	bl	801a050 <_sbrk_r>
 8019dd4:	4580      	cmp	r8, r0
 8019dd6:	d13a      	bne.n	8019e4e <_malloc_r+0xd2>
 8019dd8:	6821      	ldr	r1, [r4, #0]
 8019dda:	3503      	adds	r5, #3
 8019ddc:	1a6d      	subs	r5, r5, r1
 8019dde:	f025 0503 	bic.w	r5, r5, #3
 8019de2:	3508      	adds	r5, #8
 8019de4:	2d0c      	cmp	r5, #12
 8019de6:	bf38      	it	cc
 8019de8:	250c      	movcc	r5, #12
 8019dea:	4629      	mov	r1, r5
 8019dec:	4638      	mov	r0, r7
 8019dee:	f7ff ffa5 	bl	8019d3c <sbrk_aligned>
 8019df2:	3001      	adds	r0, #1
 8019df4:	d02b      	beq.n	8019e4e <_malloc_r+0xd2>
 8019df6:	6823      	ldr	r3, [r4, #0]
 8019df8:	442b      	add	r3, r5
 8019dfa:	6023      	str	r3, [r4, #0]
 8019dfc:	e00e      	b.n	8019e1c <_malloc_r+0xa0>
 8019dfe:	6822      	ldr	r2, [r4, #0]
 8019e00:	1b52      	subs	r2, r2, r5
 8019e02:	d41e      	bmi.n	8019e42 <_malloc_r+0xc6>
 8019e04:	2a0b      	cmp	r2, #11
 8019e06:	d916      	bls.n	8019e36 <_malloc_r+0xba>
 8019e08:	1961      	adds	r1, r4, r5
 8019e0a:	42a3      	cmp	r3, r4
 8019e0c:	6025      	str	r5, [r4, #0]
 8019e0e:	bf18      	it	ne
 8019e10:	6059      	strne	r1, [r3, #4]
 8019e12:	6863      	ldr	r3, [r4, #4]
 8019e14:	bf08      	it	eq
 8019e16:	6031      	streq	r1, [r6, #0]
 8019e18:	5162      	str	r2, [r4, r5]
 8019e1a:	604b      	str	r3, [r1, #4]
 8019e1c:	4638      	mov	r0, r7
 8019e1e:	f104 060b 	add.w	r6, r4, #11
 8019e22:	f000 fcef 	bl	801a804 <__malloc_unlock>
 8019e26:	f026 0607 	bic.w	r6, r6, #7
 8019e2a:	1d23      	adds	r3, r4, #4
 8019e2c:	1af2      	subs	r2, r6, r3
 8019e2e:	d0b6      	beq.n	8019d9e <_malloc_r+0x22>
 8019e30:	1b9b      	subs	r3, r3, r6
 8019e32:	50a3      	str	r3, [r4, r2]
 8019e34:	e7b3      	b.n	8019d9e <_malloc_r+0x22>
 8019e36:	6862      	ldr	r2, [r4, #4]
 8019e38:	42a3      	cmp	r3, r4
 8019e3a:	bf0c      	ite	eq
 8019e3c:	6032      	streq	r2, [r6, #0]
 8019e3e:	605a      	strne	r2, [r3, #4]
 8019e40:	e7ec      	b.n	8019e1c <_malloc_r+0xa0>
 8019e42:	4623      	mov	r3, r4
 8019e44:	6864      	ldr	r4, [r4, #4]
 8019e46:	e7b2      	b.n	8019dae <_malloc_r+0x32>
 8019e48:	4634      	mov	r4, r6
 8019e4a:	6876      	ldr	r6, [r6, #4]
 8019e4c:	e7b9      	b.n	8019dc2 <_malloc_r+0x46>
 8019e4e:	230c      	movs	r3, #12
 8019e50:	603b      	str	r3, [r7, #0]
 8019e52:	4638      	mov	r0, r7
 8019e54:	f000 fcd6 	bl	801a804 <__malloc_unlock>
 8019e58:	e7a1      	b.n	8019d9e <_malloc_r+0x22>
 8019e5a:	6025      	str	r5, [r4, #0]
 8019e5c:	e7de      	b.n	8019e1c <_malloc_r+0xa0>
 8019e5e:	bf00      	nop
 8019e60:	20015824 	.word	0x20015824

08019e64 <iprintf>:
 8019e64:	b40f      	push	{r0, r1, r2, r3}
 8019e66:	4b0a      	ldr	r3, [pc, #40]	; (8019e90 <iprintf+0x2c>)
 8019e68:	b513      	push	{r0, r1, r4, lr}
 8019e6a:	681c      	ldr	r4, [r3, #0]
 8019e6c:	b124      	cbz	r4, 8019e78 <iprintf+0x14>
 8019e6e:	69a3      	ldr	r3, [r4, #24]
 8019e70:	b913      	cbnz	r3, 8019e78 <iprintf+0x14>
 8019e72:	4620      	mov	r0, r4
 8019e74:	f7ff fd5e 	bl	8019934 <__sinit>
 8019e78:	ab05      	add	r3, sp, #20
 8019e7a:	9a04      	ldr	r2, [sp, #16]
 8019e7c:	68a1      	ldr	r1, [r4, #8]
 8019e7e:	9301      	str	r3, [sp, #4]
 8019e80:	4620      	mov	r0, r4
 8019e82:	f000 fe79 	bl	801ab78 <_vfiprintf_r>
 8019e86:	b002      	add	sp, #8
 8019e88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e8c:	b004      	add	sp, #16
 8019e8e:	4770      	bx	lr
 8019e90:	200005b4 	.word	0x200005b4

08019e94 <srand>:
 8019e94:	b538      	push	{r3, r4, r5, lr}
 8019e96:	4b10      	ldr	r3, [pc, #64]	; (8019ed8 <srand+0x44>)
 8019e98:	681d      	ldr	r5, [r3, #0]
 8019e9a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8019e9c:	4604      	mov	r4, r0
 8019e9e:	b9b3      	cbnz	r3, 8019ece <srand+0x3a>
 8019ea0:	2018      	movs	r0, #24
 8019ea2:	f7ff fec3 	bl	8019c2c <malloc>
 8019ea6:	4602      	mov	r2, r0
 8019ea8:	63a8      	str	r0, [r5, #56]	; 0x38
 8019eaa:	b920      	cbnz	r0, 8019eb6 <srand+0x22>
 8019eac:	4b0b      	ldr	r3, [pc, #44]	; (8019edc <srand+0x48>)
 8019eae:	480c      	ldr	r0, [pc, #48]	; (8019ee0 <srand+0x4c>)
 8019eb0:	2142      	movs	r1, #66	; 0x42
 8019eb2:	f000 fb1b 	bl	801a4ec <__assert_func>
 8019eb6:	490b      	ldr	r1, [pc, #44]	; (8019ee4 <srand+0x50>)
 8019eb8:	4b0b      	ldr	r3, [pc, #44]	; (8019ee8 <srand+0x54>)
 8019eba:	e9c0 1300 	strd	r1, r3, [r0]
 8019ebe:	4b0b      	ldr	r3, [pc, #44]	; (8019eec <srand+0x58>)
 8019ec0:	6083      	str	r3, [r0, #8]
 8019ec2:	230b      	movs	r3, #11
 8019ec4:	8183      	strh	r3, [r0, #12]
 8019ec6:	2100      	movs	r1, #0
 8019ec8:	2001      	movs	r0, #1
 8019eca:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019ece:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8019ed0:	2200      	movs	r2, #0
 8019ed2:	611c      	str	r4, [r3, #16]
 8019ed4:	615a      	str	r2, [r3, #20]
 8019ed6:	bd38      	pop	{r3, r4, r5, pc}
 8019ed8:	200005b4 	.word	0x200005b4
 8019edc:	0801c32c 	.word	0x0801c32c
 8019ee0:	0801c343 	.word	0x0801c343
 8019ee4:	abcd330e 	.word	0xabcd330e
 8019ee8:	e66d1234 	.word	0xe66d1234
 8019eec:	0005deec 	.word	0x0005deec

08019ef0 <rand>:
 8019ef0:	4b16      	ldr	r3, [pc, #88]	; (8019f4c <rand+0x5c>)
 8019ef2:	b510      	push	{r4, lr}
 8019ef4:	681c      	ldr	r4, [r3, #0]
 8019ef6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019ef8:	b9b3      	cbnz	r3, 8019f28 <rand+0x38>
 8019efa:	2018      	movs	r0, #24
 8019efc:	f7ff fe96 	bl	8019c2c <malloc>
 8019f00:	63a0      	str	r0, [r4, #56]	; 0x38
 8019f02:	b928      	cbnz	r0, 8019f10 <rand+0x20>
 8019f04:	4602      	mov	r2, r0
 8019f06:	4b12      	ldr	r3, [pc, #72]	; (8019f50 <rand+0x60>)
 8019f08:	4812      	ldr	r0, [pc, #72]	; (8019f54 <rand+0x64>)
 8019f0a:	214e      	movs	r1, #78	; 0x4e
 8019f0c:	f000 faee 	bl	801a4ec <__assert_func>
 8019f10:	4a11      	ldr	r2, [pc, #68]	; (8019f58 <rand+0x68>)
 8019f12:	4b12      	ldr	r3, [pc, #72]	; (8019f5c <rand+0x6c>)
 8019f14:	e9c0 2300 	strd	r2, r3, [r0]
 8019f18:	4b11      	ldr	r3, [pc, #68]	; (8019f60 <rand+0x70>)
 8019f1a:	6083      	str	r3, [r0, #8]
 8019f1c:	230b      	movs	r3, #11
 8019f1e:	8183      	strh	r3, [r0, #12]
 8019f20:	2201      	movs	r2, #1
 8019f22:	2300      	movs	r3, #0
 8019f24:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8019f28:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8019f2a:	4a0e      	ldr	r2, [pc, #56]	; (8019f64 <rand+0x74>)
 8019f2c:	6920      	ldr	r0, [r4, #16]
 8019f2e:	6963      	ldr	r3, [r4, #20]
 8019f30:	490d      	ldr	r1, [pc, #52]	; (8019f68 <rand+0x78>)
 8019f32:	4342      	muls	r2, r0
 8019f34:	fb01 2203 	mla	r2, r1, r3, r2
 8019f38:	fba0 0101 	umull	r0, r1, r0, r1
 8019f3c:	1c43      	adds	r3, r0, #1
 8019f3e:	eb42 0001 	adc.w	r0, r2, r1
 8019f42:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8019f46:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019f4a:	bd10      	pop	{r4, pc}
 8019f4c:	200005b4 	.word	0x200005b4
 8019f50:	0801c32c 	.word	0x0801c32c
 8019f54:	0801c343 	.word	0x0801c343
 8019f58:	abcd330e 	.word	0xabcd330e
 8019f5c:	e66d1234 	.word	0xe66d1234
 8019f60:	0005deec 	.word	0x0005deec
 8019f64:	5851f42d 	.word	0x5851f42d
 8019f68:	4c957f2d 	.word	0x4c957f2d

08019f6c <realloc>:
 8019f6c:	4b02      	ldr	r3, [pc, #8]	; (8019f78 <realloc+0xc>)
 8019f6e:	460a      	mov	r2, r1
 8019f70:	4601      	mov	r1, r0
 8019f72:	6818      	ldr	r0, [r3, #0]
 8019f74:	f000 bc4c 	b.w	801a810 <_realloc_r>
 8019f78:	200005b4 	.word	0x200005b4

08019f7c <cleanup_glue>:
 8019f7c:	b538      	push	{r3, r4, r5, lr}
 8019f7e:	460c      	mov	r4, r1
 8019f80:	6809      	ldr	r1, [r1, #0]
 8019f82:	4605      	mov	r5, r0
 8019f84:	b109      	cbz	r1, 8019f8a <cleanup_glue+0xe>
 8019f86:	f7ff fff9 	bl	8019f7c <cleanup_glue>
 8019f8a:	4621      	mov	r1, r4
 8019f8c:	4628      	mov	r0, r5
 8019f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019f92:	f7ff be87 	b.w	8019ca4 <_free_r>
	...

08019f98 <_reclaim_reent>:
 8019f98:	4b2c      	ldr	r3, [pc, #176]	; (801a04c <_reclaim_reent+0xb4>)
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	4283      	cmp	r3, r0
 8019f9e:	b570      	push	{r4, r5, r6, lr}
 8019fa0:	4604      	mov	r4, r0
 8019fa2:	d051      	beq.n	801a048 <_reclaim_reent+0xb0>
 8019fa4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019fa6:	b143      	cbz	r3, 8019fba <_reclaim_reent+0x22>
 8019fa8:	68db      	ldr	r3, [r3, #12]
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d14a      	bne.n	801a044 <_reclaim_reent+0xac>
 8019fae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019fb0:	6819      	ldr	r1, [r3, #0]
 8019fb2:	b111      	cbz	r1, 8019fba <_reclaim_reent+0x22>
 8019fb4:	4620      	mov	r0, r4
 8019fb6:	f7ff fe75 	bl	8019ca4 <_free_r>
 8019fba:	6961      	ldr	r1, [r4, #20]
 8019fbc:	b111      	cbz	r1, 8019fc4 <_reclaim_reent+0x2c>
 8019fbe:	4620      	mov	r0, r4
 8019fc0:	f7ff fe70 	bl	8019ca4 <_free_r>
 8019fc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019fc6:	b111      	cbz	r1, 8019fce <_reclaim_reent+0x36>
 8019fc8:	4620      	mov	r0, r4
 8019fca:	f7ff fe6b 	bl	8019ca4 <_free_r>
 8019fce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019fd0:	b111      	cbz	r1, 8019fd8 <_reclaim_reent+0x40>
 8019fd2:	4620      	mov	r0, r4
 8019fd4:	f7ff fe66 	bl	8019ca4 <_free_r>
 8019fd8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8019fda:	b111      	cbz	r1, 8019fe2 <_reclaim_reent+0x4a>
 8019fdc:	4620      	mov	r0, r4
 8019fde:	f7ff fe61 	bl	8019ca4 <_free_r>
 8019fe2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8019fe4:	b111      	cbz	r1, 8019fec <_reclaim_reent+0x54>
 8019fe6:	4620      	mov	r0, r4
 8019fe8:	f7ff fe5c 	bl	8019ca4 <_free_r>
 8019fec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8019fee:	b111      	cbz	r1, 8019ff6 <_reclaim_reent+0x5e>
 8019ff0:	4620      	mov	r0, r4
 8019ff2:	f7ff fe57 	bl	8019ca4 <_free_r>
 8019ff6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8019ff8:	b111      	cbz	r1, 801a000 <_reclaim_reent+0x68>
 8019ffa:	4620      	mov	r0, r4
 8019ffc:	f7ff fe52 	bl	8019ca4 <_free_r>
 801a000:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a002:	b111      	cbz	r1, 801a00a <_reclaim_reent+0x72>
 801a004:	4620      	mov	r0, r4
 801a006:	f7ff fe4d 	bl	8019ca4 <_free_r>
 801a00a:	69a3      	ldr	r3, [r4, #24]
 801a00c:	b1e3      	cbz	r3, 801a048 <_reclaim_reent+0xb0>
 801a00e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a010:	4620      	mov	r0, r4
 801a012:	4798      	blx	r3
 801a014:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a016:	b1b9      	cbz	r1, 801a048 <_reclaim_reent+0xb0>
 801a018:	4620      	mov	r0, r4
 801a01a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a01e:	f7ff bfad 	b.w	8019f7c <cleanup_glue>
 801a022:	5949      	ldr	r1, [r1, r5]
 801a024:	b941      	cbnz	r1, 801a038 <_reclaim_reent+0xa0>
 801a026:	3504      	adds	r5, #4
 801a028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a02a:	2d80      	cmp	r5, #128	; 0x80
 801a02c:	68d9      	ldr	r1, [r3, #12]
 801a02e:	d1f8      	bne.n	801a022 <_reclaim_reent+0x8a>
 801a030:	4620      	mov	r0, r4
 801a032:	f7ff fe37 	bl	8019ca4 <_free_r>
 801a036:	e7ba      	b.n	8019fae <_reclaim_reent+0x16>
 801a038:	680e      	ldr	r6, [r1, #0]
 801a03a:	4620      	mov	r0, r4
 801a03c:	f7ff fe32 	bl	8019ca4 <_free_r>
 801a040:	4631      	mov	r1, r6
 801a042:	e7ef      	b.n	801a024 <_reclaim_reent+0x8c>
 801a044:	2500      	movs	r5, #0
 801a046:	e7ef      	b.n	801a028 <_reclaim_reent+0x90>
 801a048:	bd70      	pop	{r4, r5, r6, pc}
 801a04a:	bf00      	nop
 801a04c:	200005b4 	.word	0x200005b4

0801a050 <_sbrk_r>:
 801a050:	b538      	push	{r3, r4, r5, lr}
 801a052:	4d06      	ldr	r5, [pc, #24]	; (801a06c <_sbrk_r+0x1c>)
 801a054:	2300      	movs	r3, #0
 801a056:	4604      	mov	r4, r0
 801a058:	4608      	mov	r0, r1
 801a05a:	602b      	str	r3, [r5, #0]
 801a05c:	f7e8 f900 	bl	8002260 <_sbrk>
 801a060:	1c43      	adds	r3, r0, #1
 801a062:	d102      	bne.n	801a06a <_sbrk_r+0x1a>
 801a064:	682b      	ldr	r3, [r5, #0]
 801a066:	b103      	cbz	r3, 801a06a <_sbrk_r+0x1a>
 801a068:	6023      	str	r3, [r4, #0]
 801a06a:	bd38      	pop	{r3, r4, r5, pc}
 801a06c:	2001582c 	.word	0x2001582c

0801a070 <sniprintf>:
 801a070:	b40c      	push	{r2, r3}
 801a072:	b530      	push	{r4, r5, lr}
 801a074:	4b17      	ldr	r3, [pc, #92]	; (801a0d4 <sniprintf+0x64>)
 801a076:	1e0c      	subs	r4, r1, #0
 801a078:	681d      	ldr	r5, [r3, #0]
 801a07a:	b09d      	sub	sp, #116	; 0x74
 801a07c:	da08      	bge.n	801a090 <sniprintf+0x20>
 801a07e:	238b      	movs	r3, #139	; 0x8b
 801a080:	602b      	str	r3, [r5, #0]
 801a082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a086:	b01d      	add	sp, #116	; 0x74
 801a088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a08c:	b002      	add	sp, #8
 801a08e:	4770      	bx	lr
 801a090:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a094:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a098:	bf14      	ite	ne
 801a09a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801a09e:	4623      	moveq	r3, r4
 801a0a0:	9304      	str	r3, [sp, #16]
 801a0a2:	9307      	str	r3, [sp, #28]
 801a0a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a0a8:	9002      	str	r0, [sp, #8]
 801a0aa:	9006      	str	r0, [sp, #24]
 801a0ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a0b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a0b2:	ab21      	add	r3, sp, #132	; 0x84
 801a0b4:	a902      	add	r1, sp, #8
 801a0b6:	4628      	mov	r0, r5
 801a0b8:	9301      	str	r3, [sp, #4]
 801a0ba:	f000 fc33 	bl	801a924 <_svfiprintf_r>
 801a0be:	1c43      	adds	r3, r0, #1
 801a0c0:	bfbc      	itt	lt
 801a0c2:	238b      	movlt	r3, #139	; 0x8b
 801a0c4:	602b      	strlt	r3, [r5, #0]
 801a0c6:	2c00      	cmp	r4, #0
 801a0c8:	d0dd      	beq.n	801a086 <sniprintf+0x16>
 801a0ca:	9b02      	ldr	r3, [sp, #8]
 801a0cc:	2200      	movs	r2, #0
 801a0ce:	701a      	strb	r2, [r3, #0]
 801a0d0:	e7d9      	b.n	801a086 <sniprintf+0x16>
 801a0d2:	bf00      	nop
 801a0d4:	200005b4 	.word	0x200005b4

0801a0d8 <__sread>:
 801a0d8:	b510      	push	{r4, lr}
 801a0da:	460c      	mov	r4, r1
 801a0dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0e0:	f001 f80e 	bl	801b100 <_read_r>
 801a0e4:	2800      	cmp	r0, #0
 801a0e6:	bfab      	itete	ge
 801a0e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a0ea:	89a3      	ldrhlt	r3, [r4, #12]
 801a0ec:	181b      	addge	r3, r3, r0
 801a0ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a0f2:	bfac      	ite	ge
 801a0f4:	6563      	strge	r3, [r4, #84]	; 0x54
 801a0f6:	81a3      	strhlt	r3, [r4, #12]
 801a0f8:	bd10      	pop	{r4, pc}

0801a0fa <__swrite>:
 801a0fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0fe:	461f      	mov	r7, r3
 801a100:	898b      	ldrh	r3, [r1, #12]
 801a102:	05db      	lsls	r3, r3, #23
 801a104:	4605      	mov	r5, r0
 801a106:	460c      	mov	r4, r1
 801a108:	4616      	mov	r6, r2
 801a10a:	d505      	bpl.n	801a118 <__swrite+0x1e>
 801a10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a110:	2302      	movs	r3, #2
 801a112:	2200      	movs	r2, #0
 801a114:	f000 faf8 	bl	801a708 <_lseek_r>
 801a118:	89a3      	ldrh	r3, [r4, #12]
 801a11a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a11e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a122:	81a3      	strh	r3, [r4, #12]
 801a124:	4632      	mov	r2, r6
 801a126:	463b      	mov	r3, r7
 801a128:	4628      	mov	r0, r5
 801a12a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a12e:	f000 b95d 	b.w	801a3ec <_write_r>

0801a132 <__sseek>:
 801a132:	b510      	push	{r4, lr}
 801a134:	460c      	mov	r4, r1
 801a136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a13a:	f000 fae5 	bl	801a708 <_lseek_r>
 801a13e:	1c43      	adds	r3, r0, #1
 801a140:	89a3      	ldrh	r3, [r4, #12]
 801a142:	bf15      	itete	ne
 801a144:	6560      	strne	r0, [r4, #84]	; 0x54
 801a146:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a14a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a14e:	81a3      	strheq	r3, [r4, #12]
 801a150:	bf18      	it	ne
 801a152:	81a3      	strhne	r3, [r4, #12]
 801a154:	bd10      	pop	{r4, pc}

0801a156 <__sclose>:
 801a156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a15a:	f000 b9e5 	b.w	801a528 <_close_r>

0801a15e <strchr>:
 801a15e:	b2c9      	uxtb	r1, r1
 801a160:	4603      	mov	r3, r0
 801a162:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a166:	b11a      	cbz	r2, 801a170 <strchr+0x12>
 801a168:	428a      	cmp	r2, r1
 801a16a:	d1f9      	bne.n	801a160 <strchr+0x2>
 801a16c:	4618      	mov	r0, r3
 801a16e:	4770      	bx	lr
 801a170:	2900      	cmp	r1, #0
 801a172:	bf18      	it	ne
 801a174:	2300      	movne	r3, #0
 801a176:	e7f9      	b.n	801a16c <strchr+0xe>

0801a178 <strcpy>:
 801a178:	4603      	mov	r3, r0
 801a17a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a17e:	f803 2b01 	strb.w	r2, [r3], #1
 801a182:	2a00      	cmp	r2, #0
 801a184:	d1f9      	bne.n	801a17a <strcpy+0x2>
 801a186:	4770      	bx	lr

0801a188 <strncmp>:
 801a188:	b510      	push	{r4, lr}
 801a18a:	b17a      	cbz	r2, 801a1ac <strncmp+0x24>
 801a18c:	4603      	mov	r3, r0
 801a18e:	3901      	subs	r1, #1
 801a190:	1884      	adds	r4, r0, r2
 801a192:	f813 0b01 	ldrb.w	r0, [r3], #1
 801a196:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a19a:	4290      	cmp	r0, r2
 801a19c:	d101      	bne.n	801a1a2 <strncmp+0x1a>
 801a19e:	42a3      	cmp	r3, r4
 801a1a0:	d101      	bne.n	801a1a6 <strncmp+0x1e>
 801a1a2:	1a80      	subs	r0, r0, r2
 801a1a4:	bd10      	pop	{r4, pc}
 801a1a6:	2800      	cmp	r0, #0
 801a1a8:	d1f3      	bne.n	801a192 <strncmp+0xa>
 801a1aa:	e7fa      	b.n	801a1a2 <strncmp+0x1a>
 801a1ac:	4610      	mov	r0, r2
 801a1ae:	e7f9      	b.n	801a1a4 <strncmp+0x1c>

0801a1b0 <strstr>:
 801a1b0:	780a      	ldrb	r2, [r1, #0]
 801a1b2:	b570      	push	{r4, r5, r6, lr}
 801a1b4:	b96a      	cbnz	r2, 801a1d2 <strstr+0x22>
 801a1b6:	bd70      	pop	{r4, r5, r6, pc}
 801a1b8:	429a      	cmp	r2, r3
 801a1ba:	d109      	bne.n	801a1d0 <strstr+0x20>
 801a1bc:	460c      	mov	r4, r1
 801a1be:	4605      	mov	r5, r0
 801a1c0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d0f6      	beq.n	801a1b6 <strstr+0x6>
 801a1c8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a1cc:	429e      	cmp	r6, r3
 801a1ce:	d0f7      	beq.n	801a1c0 <strstr+0x10>
 801a1d0:	3001      	adds	r0, #1
 801a1d2:	7803      	ldrb	r3, [r0, #0]
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d1ef      	bne.n	801a1b8 <strstr+0x8>
 801a1d8:	4618      	mov	r0, r3
 801a1da:	e7ec      	b.n	801a1b6 <strstr+0x6>

0801a1dc <_strtoul_l.constprop.0>:
 801a1dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a1e0:	4f36      	ldr	r7, [pc, #216]	; (801a2bc <_strtoul_l.constprop.0+0xe0>)
 801a1e2:	4686      	mov	lr, r0
 801a1e4:	460d      	mov	r5, r1
 801a1e6:	4628      	mov	r0, r5
 801a1e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a1ec:	5de6      	ldrb	r6, [r4, r7]
 801a1ee:	f016 0608 	ands.w	r6, r6, #8
 801a1f2:	d1f8      	bne.n	801a1e6 <_strtoul_l.constprop.0+0xa>
 801a1f4:	2c2d      	cmp	r4, #45	; 0x2d
 801a1f6:	d12f      	bne.n	801a258 <_strtoul_l.constprop.0+0x7c>
 801a1f8:	782c      	ldrb	r4, [r5, #0]
 801a1fa:	2601      	movs	r6, #1
 801a1fc:	1c85      	adds	r5, r0, #2
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d057      	beq.n	801a2b2 <_strtoul_l.constprop.0+0xd6>
 801a202:	2b10      	cmp	r3, #16
 801a204:	d109      	bne.n	801a21a <_strtoul_l.constprop.0+0x3e>
 801a206:	2c30      	cmp	r4, #48	; 0x30
 801a208:	d107      	bne.n	801a21a <_strtoul_l.constprop.0+0x3e>
 801a20a:	7828      	ldrb	r0, [r5, #0]
 801a20c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801a210:	2858      	cmp	r0, #88	; 0x58
 801a212:	d149      	bne.n	801a2a8 <_strtoul_l.constprop.0+0xcc>
 801a214:	786c      	ldrb	r4, [r5, #1]
 801a216:	2310      	movs	r3, #16
 801a218:	3502      	adds	r5, #2
 801a21a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801a21e:	2700      	movs	r7, #0
 801a220:	fbb8 f8f3 	udiv	r8, r8, r3
 801a224:	fb03 f908 	mul.w	r9, r3, r8
 801a228:	ea6f 0909 	mvn.w	r9, r9
 801a22c:	4638      	mov	r0, r7
 801a22e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a232:	f1bc 0f09 	cmp.w	ip, #9
 801a236:	d814      	bhi.n	801a262 <_strtoul_l.constprop.0+0x86>
 801a238:	4664      	mov	r4, ip
 801a23a:	42a3      	cmp	r3, r4
 801a23c:	dd22      	ble.n	801a284 <_strtoul_l.constprop.0+0xa8>
 801a23e:	2f00      	cmp	r7, #0
 801a240:	db1d      	blt.n	801a27e <_strtoul_l.constprop.0+0xa2>
 801a242:	4580      	cmp	r8, r0
 801a244:	d31b      	bcc.n	801a27e <_strtoul_l.constprop.0+0xa2>
 801a246:	d101      	bne.n	801a24c <_strtoul_l.constprop.0+0x70>
 801a248:	45a1      	cmp	r9, r4
 801a24a:	db18      	blt.n	801a27e <_strtoul_l.constprop.0+0xa2>
 801a24c:	fb00 4003 	mla	r0, r0, r3, r4
 801a250:	2701      	movs	r7, #1
 801a252:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a256:	e7ea      	b.n	801a22e <_strtoul_l.constprop.0+0x52>
 801a258:	2c2b      	cmp	r4, #43	; 0x2b
 801a25a:	bf04      	itt	eq
 801a25c:	782c      	ldrbeq	r4, [r5, #0]
 801a25e:	1c85      	addeq	r5, r0, #2
 801a260:	e7cd      	b.n	801a1fe <_strtoul_l.constprop.0+0x22>
 801a262:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a266:	f1bc 0f19 	cmp.w	ip, #25
 801a26a:	d801      	bhi.n	801a270 <_strtoul_l.constprop.0+0x94>
 801a26c:	3c37      	subs	r4, #55	; 0x37
 801a26e:	e7e4      	b.n	801a23a <_strtoul_l.constprop.0+0x5e>
 801a270:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a274:	f1bc 0f19 	cmp.w	ip, #25
 801a278:	d804      	bhi.n	801a284 <_strtoul_l.constprop.0+0xa8>
 801a27a:	3c57      	subs	r4, #87	; 0x57
 801a27c:	e7dd      	b.n	801a23a <_strtoul_l.constprop.0+0x5e>
 801a27e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a282:	e7e6      	b.n	801a252 <_strtoul_l.constprop.0+0x76>
 801a284:	2f00      	cmp	r7, #0
 801a286:	da07      	bge.n	801a298 <_strtoul_l.constprop.0+0xbc>
 801a288:	2322      	movs	r3, #34	; 0x22
 801a28a:	f8ce 3000 	str.w	r3, [lr]
 801a28e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a292:	b932      	cbnz	r2, 801a2a2 <_strtoul_l.constprop.0+0xc6>
 801a294:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a298:	b106      	cbz	r6, 801a29c <_strtoul_l.constprop.0+0xc0>
 801a29a:	4240      	negs	r0, r0
 801a29c:	2a00      	cmp	r2, #0
 801a29e:	d0f9      	beq.n	801a294 <_strtoul_l.constprop.0+0xb8>
 801a2a0:	b107      	cbz	r7, 801a2a4 <_strtoul_l.constprop.0+0xc8>
 801a2a2:	1e69      	subs	r1, r5, #1
 801a2a4:	6011      	str	r1, [r2, #0]
 801a2a6:	e7f5      	b.n	801a294 <_strtoul_l.constprop.0+0xb8>
 801a2a8:	2430      	movs	r4, #48	; 0x30
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d1b5      	bne.n	801a21a <_strtoul_l.constprop.0+0x3e>
 801a2ae:	2308      	movs	r3, #8
 801a2b0:	e7b3      	b.n	801a21a <_strtoul_l.constprop.0+0x3e>
 801a2b2:	2c30      	cmp	r4, #48	; 0x30
 801a2b4:	d0a9      	beq.n	801a20a <_strtoul_l.constprop.0+0x2e>
 801a2b6:	230a      	movs	r3, #10
 801a2b8:	e7af      	b.n	801a21a <_strtoul_l.constprop.0+0x3e>
 801a2ba:	bf00      	nop
 801a2bc:	0801c1c7 	.word	0x0801c1c7

0801a2c0 <strtoul>:
 801a2c0:	4613      	mov	r3, r2
 801a2c2:	460a      	mov	r2, r1
 801a2c4:	4601      	mov	r1, r0
 801a2c6:	4802      	ldr	r0, [pc, #8]	; (801a2d0 <strtoul+0x10>)
 801a2c8:	6800      	ldr	r0, [r0, #0]
 801a2ca:	f7ff bf87 	b.w	801a1dc <_strtoul_l.constprop.0>
 801a2ce:	bf00      	nop
 801a2d0:	200005b4 	.word	0x200005b4

0801a2d4 <_vsniprintf_r>:
 801a2d4:	b530      	push	{r4, r5, lr}
 801a2d6:	4614      	mov	r4, r2
 801a2d8:	2c00      	cmp	r4, #0
 801a2da:	b09b      	sub	sp, #108	; 0x6c
 801a2dc:	4605      	mov	r5, r0
 801a2de:	461a      	mov	r2, r3
 801a2e0:	da05      	bge.n	801a2ee <_vsniprintf_r+0x1a>
 801a2e2:	238b      	movs	r3, #139	; 0x8b
 801a2e4:	6003      	str	r3, [r0, #0]
 801a2e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a2ea:	b01b      	add	sp, #108	; 0x6c
 801a2ec:	bd30      	pop	{r4, r5, pc}
 801a2ee:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a2f2:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a2f6:	bf14      	ite	ne
 801a2f8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801a2fc:	4623      	moveq	r3, r4
 801a2fe:	9302      	str	r3, [sp, #8]
 801a300:	9305      	str	r3, [sp, #20]
 801a302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a306:	9100      	str	r1, [sp, #0]
 801a308:	9104      	str	r1, [sp, #16]
 801a30a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a30e:	4669      	mov	r1, sp
 801a310:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a312:	f000 fb07 	bl	801a924 <_svfiprintf_r>
 801a316:	1c43      	adds	r3, r0, #1
 801a318:	bfbc      	itt	lt
 801a31a:	238b      	movlt	r3, #139	; 0x8b
 801a31c:	602b      	strlt	r3, [r5, #0]
 801a31e:	2c00      	cmp	r4, #0
 801a320:	d0e3      	beq.n	801a2ea <_vsniprintf_r+0x16>
 801a322:	9b00      	ldr	r3, [sp, #0]
 801a324:	2200      	movs	r2, #0
 801a326:	701a      	strb	r2, [r3, #0]
 801a328:	e7df      	b.n	801a2ea <_vsniprintf_r+0x16>
	...

0801a32c <vsniprintf>:
 801a32c:	b507      	push	{r0, r1, r2, lr}
 801a32e:	9300      	str	r3, [sp, #0]
 801a330:	4613      	mov	r3, r2
 801a332:	460a      	mov	r2, r1
 801a334:	4601      	mov	r1, r0
 801a336:	4803      	ldr	r0, [pc, #12]	; (801a344 <vsniprintf+0x18>)
 801a338:	6800      	ldr	r0, [r0, #0]
 801a33a:	f7ff ffcb 	bl	801a2d4 <_vsniprintf_r>
 801a33e:	b003      	add	sp, #12
 801a340:	f85d fb04 	ldr.w	pc, [sp], #4
 801a344:	200005b4 	.word	0x200005b4

0801a348 <__swbuf_r>:
 801a348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a34a:	460e      	mov	r6, r1
 801a34c:	4614      	mov	r4, r2
 801a34e:	4605      	mov	r5, r0
 801a350:	b118      	cbz	r0, 801a35a <__swbuf_r+0x12>
 801a352:	6983      	ldr	r3, [r0, #24]
 801a354:	b90b      	cbnz	r3, 801a35a <__swbuf_r+0x12>
 801a356:	f7ff faed 	bl	8019934 <__sinit>
 801a35a:	4b21      	ldr	r3, [pc, #132]	; (801a3e0 <__swbuf_r+0x98>)
 801a35c:	429c      	cmp	r4, r3
 801a35e:	d12b      	bne.n	801a3b8 <__swbuf_r+0x70>
 801a360:	686c      	ldr	r4, [r5, #4]
 801a362:	69a3      	ldr	r3, [r4, #24]
 801a364:	60a3      	str	r3, [r4, #8]
 801a366:	89a3      	ldrh	r3, [r4, #12]
 801a368:	071a      	lsls	r2, r3, #28
 801a36a:	d52f      	bpl.n	801a3cc <__swbuf_r+0x84>
 801a36c:	6923      	ldr	r3, [r4, #16]
 801a36e:	b36b      	cbz	r3, 801a3cc <__swbuf_r+0x84>
 801a370:	6923      	ldr	r3, [r4, #16]
 801a372:	6820      	ldr	r0, [r4, #0]
 801a374:	1ac0      	subs	r0, r0, r3
 801a376:	6963      	ldr	r3, [r4, #20]
 801a378:	b2f6      	uxtb	r6, r6
 801a37a:	4283      	cmp	r3, r0
 801a37c:	4637      	mov	r7, r6
 801a37e:	dc04      	bgt.n	801a38a <__swbuf_r+0x42>
 801a380:	4621      	mov	r1, r4
 801a382:	4628      	mov	r0, r5
 801a384:	f000 f972 	bl	801a66c <_fflush_r>
 801a388:	bb30      	cbnz	r0, 801a3d8 <__swbuf_r+0x90>
 801a38a:	68a3      	ldr	r3, [r4, #8]
 801a38c:	3b01      	subs	r3, #1
 801a38e:	60a3      	str	r3, [r4, #8]
 801a390:	6823      	ldr	r3, [r4, #0]
 801a392:	1c5a      	adds	r2, r3, #1
 801a394:	6022      	str	r2, [r4, #0]
 801a396:	701e      	strb	r6, [r3, #0]
 801a398:	6963      	ldr	r3, [r4, #20]
 801a39a:	3001      	adds	r0, #1
 801a39c:	4283      	cmp	r3, r0
 801a39e:	d004      	beq.n	801a3aa <__swbuf_r+0x62>
 801a3a0:	89a3      	ldrh	r3, [r4, #12]
 801a3a2:	07db      	lsls	r3, r3, #31
 801a3a4:	d506      	bpl.n	801a3b4 <__swbuf_r+0x6c>
 801a3a6:	2e0a      	cmp	r6, #10
 801a3a8:	d104      	bne.n	801a3b4 <__swbuf_r+0x6c>
 801a3aa:	4621      	mov	r1, r4
 801a3ac:	4628      	mov	r0, r5
 801a3ae:	f000 f95d 	bl	801a66c <_fflush_r>
 801a3b2:	b988      	cbnz	r0, 801a3d8 <__swbuf_r+0x90>
 801a3b4:	4638      	mov	r0, r7
 801a3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3b8:	4b0a      	ldr	r3, [pc, #40]	; (801a3e4 <__swbuf_r+0x9c>)
 801a3ba:	429c      	cmp	r4, r3
 801a3bc:	d101      	bne.n	801a3c2 <__swbuf_r+0x7a>
 801a3be:	68ac      	ldr	r4, [r5, #8]
 801a3c0:	e7cf      	b.n	801a362 <__swbuf_r+0x1a>
 801a3c2:	4b09      	ldr	r3, [pc, #36]	; (801a3e8 <__swbuf_r+0xa0>)
 801a3c4:	429c      	cmp	r4, r3
 801a3c6:	bf08      	it	eq
 801a3c8:	68ec      	ldreq	r4, [r5, #12]
 801a3ca:	e7ca      	b.n	801a362 <__swbuf_r+0x1a>
 801a3cc:	4621      	mov	r1, r4
 801a3ce:	4628      	mov	r0, r5
 801a3d0:	f000 f81e 	bl	801a410 <__swsetup_r>
 801a3d4:	2800      	cmp	r0, #0
 801a3d6:	d0cb      	beq.n	801a370 <__swbuf_r+0x28>
 801a3d8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a3dc:	e7ea      	b.n	801a3b4 <__swbuf_r+0x6c>
 801a3de:	bf00      	nop
 801a3e0:	0801c2e8 	.word	0x0801c2e8
 801a3e4:	0801c308 	.word	0x0801c308
 801a3e8:	0801c2c8 	.word	0x0801c2c8

0801a3ec <_write_r>:
 801a3ec:	b538      	push	{r3, r4, r5, lr}
 801a3ee:	4d07      	ldr	r5, [pc, #28]	; (801a40c <_write_r+0x20>)
 801a3f0:	4604      	mov	r4, r0
 801a3f2:	4608      	mov	r0, r1
 801a3f4:	4611      	mov	r1, r2
 801a3f6:	2200      	movs	r2, #0
 801a3f8:	602a      	str	r2, [r5, #0]
 801a3fa:	461a      	mov	r2, r3
 801a3fc:	f7e7 ff13 	bl	8002226 <_write>
 801a400:	1c43      	adds	r3, r0, #1
 801a402:	d102      	bne.n	801a40a <_write_r+0x1e>
 801a404:	682b      	ldr	r3, [r5, #0]
 801a406:	b103      	cbz	r3, 801a40a <_write_r+0x1e>
 801a408:	6023      	str	r3, [r4, #0]
 801a40a:	bd38      	pop	{r3, r4, r5, pc}
 801a40c:	2001582c 	.word	0x2001582c

0801a410 <__swsetup_r>:
 801a410:	4b32      	ldr	r3, [pc, #200]	; (801a4dc <__swsetup_r+0xcc>)
 801a412:	b570      	push	{r4, r5, r6, lr}
 801a414:	681d      	ldr	r5, [r3, #0]
 801a416:	4606      	mov	r6, r0
 801a418:	460c      	mov	r4, r1
 801a41a:	b125      	cbz	r5, 801a426 <__swsetup_r+0x16>
 801a41c:	69ab      	ldr	r3, [r5, #24]
 801a41e:	b913      	cbnz	r3, 801a426 <__swsetup_r+0x16>
 801a420:	4628      	mov	r0, r5
 801a422:	f7ff fa87 	bl	8019934 <__sinit>
 801a426:	4b2e      	ldr	r3, [pc, #184]	; (801a4e0 <__swsetup_r+0xd0>)
 801a428:	429c      	cmp	r4, r3
 801a42a:	d10f      	bne.n	801a44c <__swsetup_r+0x3c>
 801a42c:	686c      	ldr	r4, [r5, #4]
 801a42e:	89a3      	ldrh	r3, [r4, #12]
 801a430:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a434:	0719      	lsls	r1, r3, #28
 801a436:	d42c      	bmi.n	801a492 <__swsetup_r+0x82>
 801a438:	06dd      	lsls	r5, r3, #27
 801a43a:	d411      	bmi.n	801a460 <__swsetup_r+0x50>
 801a43c:	2309      	movs	r3, #9
 801a43e:	6033      	str	r3, [r6, #0]
 801a440:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a444:	81a3      	strh	r3, [r4, #12]
 801a446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a44a:	e03e      	b.n	801a4ca <__swsetup_r+0xba>
 801a44c:	4b25      	ldr	r3, [pc, #148]	; (801a4e4 <__swsetup_r+0xd4>)
 801a44e:	429c      	cmp	r4, r3
 801a450:	d101      	bne.n	801a456 <__swsetup_r+0x46>
 801a452:	68ac      	ldr	r4, [r5, #8]
 801a454:	e7eb      	b.n	801a42e <__swsetup_r+0x1e>
 801a456:	4b24      	ldr	r3, [pc, #144]	; (801a4e8 <__swsetup_r+0xd8>)
 801a458:	429c      	cmp	r4, r3
 801a45a:	bf08      	it	eq
 801a45c:	68ec      	ldreq	r4, [r5, #12]
 801a45e:	e7e6      	b.n	801a42e <__swsetup_r+0x1e>
 801a460:	0758      	lsls	r0, r3, #29
 801a462:	d512      	bpl.n	801a48a <__swsetup_r+0x7a>
 801a464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a466:	b141      	cbz	r1, 801a47a <__swsetup_r+0x6a>
 801a468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a46c:	4299      	cmp	r1, r3
 801a46e:	d002      	beq.n	801a476 <__swsetup_r+0x66>
 801a470:	4630      	mov	r0, r6
 801a472:	f7ff fc17 	bl	8019ca4 <_free_r>
 801a476:	2300      	movs	r3, #0
 801a478:	6363      	str	r3, [r4, #52]	; 0x34
 801a47a:	89a3      	ldrh	r3, [r4, #12]
 801a47c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a480:	81a3      	strh	r3, [r4, #12]
 801a482:	2300      	movs	r3, #0
 801a484:	6063      	str	r3, [r4, #4]
 801a486:	6923      	ldr	r3, [r4, #16]
 801a488:	6023      	str	r3, [r4, #0]
 801a48a:	89a3      	ldrh	r3, [r4, #12]
 801a48c:	f043 0308 	orr.w	r3, r3, #8
 801a490:	81a3      	strh	r3, [r4, #12]
 801a492:	6923      	ldr	r3, [r4, #16]
 801a494:	b94b      	cbnz	r3, 801a4aa <__swsetup_r+0x9a>
 801a496:	89a3      	ldrh	r3, [r4, #12]
 801a498:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a49c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a4a0:	d003      	beq.n	801a4aa <__swsetup_r+0x9a>
 801a4a2:	4621      	mov	r1, r4
 801a4a4:	4630      	mov	r0, r6
 801a4a6:	f000 f967 	bl	801a778 <__smakebuf_r>
 801a4aa:	89a0      	ldrh	r0, [r4, #12]
 801a4ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a4b0:	f010 0301 	ands.w	r3, r0, #1
 801a4b4:	d00a      	beq.n	801a4cc <__swsetup_r+0xbc>
 801a4b6:	2300      	movs	r3, #0
 801a4b8:	60a3      	str	r3, [r4, #8]
 801a4ba:	6963      	ldr	r3, [r4, #20]
 801a4bc:	425b      	negs	r3, r3
 801a4be:	61a3      	str	r3, [r4, #24]
 801a4c0:	6923      	ldr	r3, [r4, #16]
 801a4c2:	b943      	cbnz	r3, 801a4d6 <__swsetup_r+0xc6>
 801a4c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a4c8:	d1ba      	bne.n	801a440 <__swsetup_r+0x30>
 801a4ca:	bd70      	pop	{r4, r5, r6, pc}
 801a4cc:	0781      	lsls	r1, r0, #30
 801a4ce:	bf58      	it	pl
 801a4d0:	6963      	ldrpl	r3, [r4, #20]
 801a4d2:	60a3      	str	r3, [r4, #8]
 801a4d4:	e7f4      	b.n	801a4c0 <__swsetup_r+0xb0>
 801a4d6:	2000      	movs	r0, #0
 801a4d8:	e7f7      	b.n	801a4ca <__swsetup_r+0xba>
 801a4da:	bf00      	nop
 801a4dc:	200005b4 	.word	0x200005b4
 801a4e0:	0801c2e8 	.word	0x0801c2e8
 801a4e4:	0801c308 	.word	0x0801c308
 801a4e8:	0801c2c8 	.word	0x0801c2c8

0801a4ec <__assert_func>:
 801a4ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a4ee:	4614      	mov	r4, r2
 801a4f0:	461a      	mov	r2, r3
 801a4f2:	4b09      	ldr	r3, [pc, #36]	; (801a518 <__assert_func+0x2c>)
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	4605      	mov	r5, r0
 801a4f8:	68d8      	ldr	r0, [r3, #12]
 801a4fa:	b14c      	cbz	r4, 801a510 <__assert_func+0x24>
 801a4fc:	4b07      	ldr	r3, [pc, #28]	; (801a51c <__assert_func+0x30>)
 801a4fe:	9100      	str	r1, [sp, #0]
 801a500:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a504:	4906      	ldr	r1, [pc, #24]	; (801a520 <__assert_func+0x34>)
 801a506:	462b      	mov	r3, r5
 801a508:	f000 f8ec 	bl	801a6e4 <fiprintf>
 801a50c:	f000 fe0a 	bl	801b124 <abort>
 801a510:	4b04      	ldr	r3, [pc, #16]	; (801a524 <__assert_func+0x38>)
 801a512:	461c      	mov	r4, r3
 801a514:	e7f3      	b.n	801a4fe <__assert_func+0x12>
 801a516:	bf00      	nop
 801a518:	200005b4 	.word	0x200005b4
 801a51c:	0801c39e 	.word	0x0801c39e
 801a520:	0801c3ab 	.word	0x0801c3ab
 801a524:	0801c3d9 	.word	0x0801c3d9

0801a528 <_close_r>:
 801a528:	b538      	push	{r3, r4, r5, lr}
 801a52a:	4d06      	ldr	r5, [pc, #24]	; (801a544 <_close_r+0x1c>)
 801a52c:	2300      	movs	r3, #0
 801a52e:	4604      	mov	r4, r0
 801a530:	4608      	mov	r0, r1
 801a532:	602b      	str	r3, [r5, #0]
 801a534:	f7e7 feca 	bl	80022cc <_close>
 801a538:	1c43      	adds	r3, r0, #1
 801a53a:	d102      	bne.n	801a542 <_close_r+0x1a>
 801a53c:	682b      	ldr	r3, [r5, #0]
 801a53e:	b103      	cbz	r3, 801a542 <_close_r+0x1a>
 801a540:	6023      	str	r3, [r4, #0]
 801a542:	bd38      	pop	{r3, r4, r5, pc}
 801a544:	2001582c 	.word	0x2001582c

0801a548 <__env_lock>:
 801a548:	4801      	ldr	r0, [pc, #4]	; (801a550 <__env_lock+0x8>)
 801a54a:	f7ff bb6c 	b.w	8019c26 <__retarget_lock_acquire_recursive>
 801a54e:	bf00      	nop
 801a550:	20015820 	.word	0x20015820

0801a554 <__env_unlock>:
 801a554:	4801      	ldr	r0, [pc, #4]	; (801a55c <__env_unlock+0x8>)
 801a556:	f7ff bb67 	b.w	8019c28 <__retarget_lock_release_recursive>
 801a55a:	bf00      	nop
 801a55c:	20015820 	.word	0x20015820

0801a560 <__sflush_r>:
 801a560:	898a      	ldrh	r2, [r1, #12]
 801a562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a566:	4605      	mov	r5, r0
 801a568:	0710      	lsls	r0, r2, #28
 801a56a:	460c      	mov	r4, r1
 801a56c:	d458      	bmi.n	801a620 <__sflush_r+0xc0>
 801a56e:	684b      	ldr	r3, [r1, #4]
 801a570:	2b00      	cmp	r3, #0
 801a572:	dc05      	bgt.n	801a580 <__sflush_r+0x20>
 801a574:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a576:	2b00      	cmp	r3, #0
 801a578:	dc02      	bgt.n	801a580 <__sflush_r+0x20>
 801a57a:	2000      	movs	r0, #0
 801a57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a580:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a582:	2e00      	cmp	r6, #0
 801a584:	d0f9      	beq.n	801a57a <__sflush_r+0x1a>
 801a586:	2300      	movs	r3, #0
 801a588:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a58c:	682f      	ldr	r7, [r5, #0]
 801a58e:	602b      	str	r3, [r5, #0]
 801a590:	d032      	beq.n	801a5f8 <__sflush_r+0x98>
 801a592:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a594:	89a3      	ldrh	r3, [r4, #12]
 801a596:	075a      	lsls	r2, r3, #29
 801a598:	d505      	bpl.n	801a5a6 <__sflush_r+0x46>
 801a59a:	6863      	ldr	r3, [r4, #4]
 801a59c:	1ac0      	subs	r0, r0, r3
 801a59e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a5a0:	b10b      	cbz	r3, 801a5a6 <__sflush_r+0x46>
 801a5a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a5a4:	1ac0      	subs	r0, r0, r3
 801a5a6:	2300      	movs	r3, #0
 801a5a8:	4602      	mov	r2, r0
 801a5aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a5ac:	6a21      	ldr	r1, [r4, #32]
 801a5ae:	4628      	mov	r0, r5
 801a5b0:	47b0      	blx	r6
 801a5b2:	1c43      	adds	r3, r0, #1
 801a5b4:	89a3      	ldrh	r3, [r4, #12]
 801a5b6:	d106      	bne.n	801a5c6 <__sflush_r+0x66>
 801a5b8:	6829      	ldr	r1, [r5, #0]
 801a5ba:	291d      	cmp	r1, #29
 801a5bc:	d82c      	bhi.n	801a618 <__sflush_r+0xb8>
 801a5be:	4a2a      	ldr	r2, [pc, #168]	; (801a668 <__sflush_r+0x108>)
 801a5c0:	40ca      	lsrs	r2, r1
 801a5c2:	07d6      	lsls	r6, r2, #31
 801a5c4:	d528      	bpl.n	801a618 <__sflush_r+0xb8>
 801a5c6:	2200      	movs	r2, #0
 801a5c8:	6062      	str	r2, [r4, #4]
 801a5ca:	04d9      	lsls	r1, r3, #19
 801a5cc:	6922      	ldr	r2, [r4, #16]
 801a5ce:	6022      	str	r2, [r4, #0]
 801a5d0:	d504      	bpl.n	801a5dc <__sflush_r+0x7c>
 801a5d2:	1c42      	adds	r2, r0, #1
 801a5d4:	d101      	bne.n	801a5da <__sflush_r+0x7a>
 801a5d6:	682b      	ldr	r3, [r5, #0]
 801a5d8:	b903      	cbnz	r3, 801a5dc <__sflush_r+0x7c>
 801a5da:	6560      	str	r0, [r4, #84]	; 0x54
 801a5dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a5de:	602f      	str	r7, [r5, #0]
 801a5e0:	2900      	cmp	r1, #0
 801a5e2:	d0ca      	beq.n	801a57a <__sflush_r+0x1a>
 801a5e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a5e8:	4299      	cmp	r1, r3
 801a5ea:	d002      	beq.n	801a5f2 <__sflush_r+0x92>
 801a5ec:	4628      	mov	r0, r5
 801a5ee:	f7ff fb59 	bl	8019ca4 <_free_r>
 801a5f2:	2000      	movs	r0, #0
 801a5f4:	6360      	str	r0, [r4, #52]	; 0x34
 801a5f6:	e7c1      	b.n	801a57c <__sflush_r+0x1c>
 801a5f8:	6a21      	ldr	r1, [r4, #32]
 801a5fa:	2301      	movs	r3, #1
 801a5fc:	4628      	mov	r0, r5
 801a5fe:	47b0      	blx	r6
 801a600:	1c41      	adds	r1, r0, #1
 801a602:	d1c7      	bne.n	801a594 <__sflush_r+0x34>
 801a604:	682b      	ldr	r3, [r5, #0]
 801a606:	2b00      	cmp	r3, #0
 801a608:	d0c4      	beq.n	801a594 <__sflush_r+0x34>
 801a60a:	2b1d      	cmp	r3, #29
 801a60c:	d001      	beq.n	801a612 <__sflush_r+0xb2>
 801a60e:	2b16      	cmp	r3, #22
 801a610:	d101      	bne.n	801a616 <__sflush_r+0xb6>
 801a612:	602f      	str	r7, [r5, #0]
 801a614:	e7b1      	b.n	801a57a <__sflush_r+0x1a>
 801a616:	89a3      	ldrh	r3, [r4, #12]
 801a618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a61c:	81a3      	strh	r3, [r4, #12]
 801a61e:	e7ad      	b.n	801a57c <__sflush_r+0x1c>
 801a620:	690f      	ldr	r7, [r1, #16]
 801a622:	2f00      	cmp	r7, #0
 801a624:	d0a9      	beq.n	801a57a <__sflush_r+0x1a>
 801a626:	0793      	lsls	r3, r2, #30
 801a628:	680e      	ldr	r6, [r1, #0]
 801a62a:	bf08      	it	eq
 801a62c:	694b      	ldreq	r3, [r1, #20]
 801a62e:	600f      	str	r7, [r1, #0]
 801a630:	bf18      	it	ne
 801a632:	2300      	movne	r3, #0
 801a634:	eba6 0807 	sub.w	r8, r6, r7
 801a638:	608b      	str	r3, [r1, #8]
 801a63a:	f1b8 0f00 	cmp.w	r8, #0
 801a63e:	dd9c      	ble.n	801a57a <__sflush_r+0x1a>
 801a640:	6a21      	ldr	r1, [r4, #32]
 801a642:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a644:	4643      	mov	r3, r8
 801a646:	463a      	mov	r2, r7
 801a648:	4628      	mov	r0, r5
 801a64a:	47b0      	blx	r6
 801a64c:	2800      	cmp	r0, #0
 801a64e:	dc06      	bgt.n	801a65e <__sflush_r+0xfe>
 801a650:	89a3      	ldrh	r3, [r4, #12]
 801a652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a656:	81a3      	strh	r3, [r4, #12]
 801a658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a65c:	e78e      	b.n	801a57c <__sflush_r+0x1c>
 801a65e:	4407      	add	r7, r0
 801a660:	eba8 0800 	sub.w	r8, r8, r0
 801a664:	e7e9      	b.n	801a63a <__sflush_r+0xda>
 801a666:	bf00      	nop
 801a668:	20400001 	.word	0x20400001

0801a66c <_fflush_r>:
 801a66c:	b538      	push	{r3, r4, r5, lr}
 801a66e:	690b      	ldr	r3, [r1, #16]
 801a670:	4605      	mov	r5, r0
 801a672:	460c      	mov	r4, r1
 801a674:	b913      	cbnz	r3, 801a67c <_fflush_r+0x10>
 801a676:	2500      	movs	r5, #0
 801a678:	4628      	mov	r0, r5
 801a67a:	bd38      	pop	{r3, r4, r5, pc}
 801a67c:	b118      	cbz	r0, 801a686 <_fflush_r+0x1a>
 801a67e:	6983      	ldr	r3, [r0, #24]
 801a680:	b90b      	cbnz	r3, 801a686 <_fflush_r+0x1a>
 801a682:	f7ff f957 	bl	8019934 <__sinit>
 801a686:	4b14      	ldr	r3, [pc, #80]	; (801a6d8 <_fflush_r+0x6c>)
 801a688:	429c      	cmp	r4, r3
 801a68a:	d11b      	bne.n	801a6c4 <_fflush_r+0x58>
 801a68c:	686c      	ldr	r4, [r5, #4]
 801a68e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a692:	2b00      	cmp	r3, #0
 801a694:	d0ef      	beq.n	801a676 <_fflush_r+0xa>
 801a696:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a698:	07d0      	lsls	r0, r2, #31
 801a69a:	d404      	bmi.n	801a6a6 <_fflush_r+0x3a>
 801a69c:	0599      	lsls	r1, r3, #22
 801a69e:	d402      	bmi.n	801a6a6 <_fflush_r+0x3a>
 801a6a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a6a2:	f7ff fac0 	bl	8019c26 <__retarget_lock_acquire_recursive>
 801a6a6:	4628      	mov	r0, r5
 801a6a8:	4621      	mov	r1, r4
 801a6aa:	f7ff ff59 	bl	801a560 <__sflush_r>
 801a6ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a6b0:	07da      	lsls	r2, r3, #31
 801a6b2:	4605      	mov	r5, r0
 801a6b4:	d4e0      	bmi.n	801a678 <_fflush_r+0xc>
 801a6b6:	89a3      	ldrh	r3, [r4, #12]
 801a6b8:	059b      	lsls	r3, r3, #22
 801a6ba:	d4dd      	bmi.n	801a678 <_fflush_r+0xc>
 801a6bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a6be:	f7ff fab3 	bl	8019c28 <__retarget_lock_release_recursive>
 801a6c2:	e7d9      	b.n	801a678 <_fflush_r+0xc>
 801a6c4:	4b05      	ldr	r3, [pc, #20]	; (801a6dc <_fflush_r+0x70>)
 801a6c6:	429c      	cmp	r4, r3
 801a6c8:	d101      	bne.n	801a6ce <_fflush_r+0x62>
 801a6ca:	68ac      	ldr	r4, [r5, #8]
 801a6cc:	e7df      	b.n	801a68e <_fflush_r+0x22>
 801a6ce:	4b04      	ldr	r3, [pc, #16]	; (801a6e0 <_fflush_r+0x74>)
 801a6d0:	429c      	cmp	r4, r3
 801a6d2:	bf08      	it	eq
 801a6d4:	68ec      	ldreq	r4, [r5, #12]
 801a6d6:	e7da      	b.n	801a68e <_fflush_r+0x22>
 801a6d8:	0801c2e8 	.word	0x0801c2e8
 801a6dc:	0801c308 	.word	0x0801c308
 801a6e0:	0801c2c8 	.word	0x0801c2c8

0801a6e4 <fiprintf>:
 801a6e4:	b40e      	push	{r1, r2, r3}
 801a6e6:	b503      	push	{r0, r1, lr}
 801a6e8:	4601      	mov	r1, r0
 801a6ea:	ab03      	add	r3, sp, #12
 801a6ec:	4805      	ldr	r0, [pc, #20]	; (801a704 <fiprintf+0x20>)
 801a6ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801a6f2:	6800      	ldr	r0, [r0, #0]
 801a6f4:	9301      	str	r3, [sp, #4]
 801a6f6:	f000 fa3f 	bl	801ab78 <_vfiprintf_r>
 801a6fa:	b002      	add	sp, #8
 801a6fc:	f85d eb04 	ldr.w	lr, [sp], #4
 801a700:	b003      	add	sp, #12
 801a702:	4770      	bx	lr
 801a704:	200005b4 	.word	0x200005b4

0801a708 <_lseek_r>:
 801a708:	b538      	push	{r3, r4, r5, lr}
 801a70a:	4d07      	ldr	r5, [pc, #28]	; (801a728 <_lseek_r+0x20>)
 801a70c:	4604      	mov	r4, r0
 801a70e:	4608      	mov	r0, r1
 801a710:	4611      	mov	r1, r2
 801a712:	2200      	movs	r2, #0
 801a714:	602a      	str	r2, [r5, #0]
 801a716:	461a      	mov	r2, r3
 801a718:	f7e7 fdff 	bl	800231a <_lseek>
 801a71c:	1c43      	adds	r3, r0, #1
 801a71e:	d102      	bne.n	801a726 <_lseek_r+0x1e>
 801a720:	682b      	ldr	r3, [r5, #0]
 801a722:	b103      	cbz	r3, 801a726 <_lseek_r+0x1e>
 801a724:	6023      	str	r3, [r4, #0]
 801a726:	bd38      	pop	{r3, r4, r5, pc}
 801a728:	2001582c 	.word	0x2001582c

0801a72c <__swhatbuf_r>:
 801a72c:	b570      	push	{r4, r5, r6, lr}
 801a72e:	460e      	mov	r6, r1
 801a730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a734:	2900      	cmp	r1, #0
 801a736:	b096      	sub	sp, #88	; 0x58
 801a738:	4614      	mov	r4, r2
 801a73a:	461d      	mov	r5, r3
 801a73c:	da08      	bge.n	801a750 <__swhatbuf_r+0x24>
 801a73e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a742:	2200      	movs	r2, #0
 801a744:	602a      	str	r2, [r5, #0]
 801a746:	061a      	lsls	r2, r3, #24
 801a748:	d410      	bmi.n	801a76c <__swhatbuf_r+0x40>
 801a74a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a74e:	e00e      	b.n	801a76e <__swhatbuf_r+0x42>
 801a750:	466a      	mov	r2, sp
 801a752:	f000 fcef 	bl	801b134 <_fstat_r>
 801a756:	2800      	cmp	r0, #0
 801a758:	dbf1      	blt.n	801a73e <__swhatbuf_r+0x12>
 801a75a:	9a01      	ldr	r2, [sp, #4]
 801a75c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a760:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a764:	425a      	negs	r2, r3
 801a766:	415a      	adcs	r2, r3
 801a768:	602a      	str	r2, [r5, #0]
 801a76a:	e7ee      	b.n	801a74a <__swhatbuf_r+0x1e>
 801a76c:	2340      	movs	r3, #64	; 0x40
 801a76e:	2000      	movs	r0, #0
 801a770:	6023      	str	r3, [r4, #0]
 801a772:	b016      	add	sp, #88	; 0x58
 801a774:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a778 <__smakebuf_r>:
 801a778:	898b      	ldrh	r3, [r1, #12]
 801a77a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a77c:	079d      	lsls	r5, r3, #30
 801a77e:	4606      	mov	r6, r0
 801a780:	460c      	mov	r4, r1
 801a782:	d507      	bpl.n	801a794 <__smakebuf_r+0x1c>
 801a784:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a788:	6023      	str	r3, [r4, #0]
 801a78a:	6123      	str	r3, [r4, #16]
 801a78c:	2301      	movs	r3, #1
 801a78e:	6163      	str	r3, [r4, #20]
 801a790:	b002      	add	sp, #8
 801a792:	bd70      	pop	{r4, r5, r6, pc}
 801a794:	ab01      	add	r3, sp, #4
 801a796:	466a      	mov	r2, sp
 801a798:	f7ff ffc8 	bl	801a72c <__swhatbuf_r>
 801a79c:	9900      	ldr	r1, [sp, #0]
 801a79e:	4605      	mov	r5, r0
 801a7a0:	4630      	mov	r0, r6
 801a7a2:	f7ff faeb 	bl	8019d7c <_malloc_r>
 801a7a6:	b948      	cbnz	r0, 801a7bc <__smakebuf_r+0x44>
 801a7a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a7ac:	059a      	lsls	r2, r3, #22
 801a7ae:	d4ef      	bmi.n	801a790 <__smakebuf_r+0x18>
 801a7b0:	f023 0303 	bic.w	r3, r3, #3
 801a7b4:	f043 0302 	orr.w	r3, r3, #2
 801a7b8:	81a3      	strh	r3, [r4, #12]
 801a7ba:	e7e3      	b.n	801a784 <__smakebuf_r+0xc>
 801a7bc:	4b0d      	ldr	r3, [pc, #52]	; (801a7f4 <__smakebuf_r+0x7c>)
 801a7be:	62b3      	str	r3, [r6, #40]	; 0x28
 801a7c0:	89a3      	ldrh	r3, [r4, #12]
 801a7c2:	6020      	str	r0, [r4, #0]
 801a7c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a7c8:	81a3      	strh	r3, [r4, #12]
 801a7ca:	9b00      	ldr	r3, [sp, #0]
 801a7cc:	6163      	str	r3, [r4, #20]
 801a7ce:	9b01      	ldr	r3, [sp, #4]
 801a7d0:	6120      	str	r0, [r4, #16]
 801a7d2:	b15b      	cbz	r3, 801a7ec <__smakebuf_r+0x74>
 801a7d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a7d8:	4630      	mov	r0, r6
 801a7da:	f000 fcbd 	bl	801b158 <_isatty_r>
 801a7de:	b128      	cbz	r0, 801a7ec <__smakebuf_r+0x74>
 801a7e0:	89a3      	ldrh	r3, [r4, #12]
 801a7e2:	f023 0303 	bic.w	r3, r3, #3
 801a7e6:	f043 0301 	orr.w	r3, r3, #1
 801a7ea:	81a3      	strh	r3, [r4, #12]
 801a7ec:	89a0      	ldrh	r0, [r4, #12]
 801a7ee:	4305      	orrs	r5, r0
 801a7f0:	81a5      	strh	r5, [r4, #12]
 801a7f2:	e7cd      	b.n	801a790 <__smakebuf_r+0x18>
 801a7f4:	080198cd 	.word	0x080198cd

0801a7f8 <__malloc_lock>:
 801a7f8:	4801      	ldr	r0, [pc, #4]	; (801a800 <__malloc_lock+0x8>)
 801a7fa:	f7ff ba14 	b.w	8019c26 <__retarget_lock_acquire_recursive>
 801a7fe:	bf00      	nop
 801a800:	20015821 	.word	0x20015821

0801a804 <__malloc_unlock>:
 801a804:	4801      	ldr	r0, [pc, #4]	; (801a80c <__malloc_unlock+0x8>)
 801a806:	f7ff ba0f 	b.w	8019c28 <__retarget_lock_release_recursive>
 801a80a:	bf00      	nop
 801a80c:	20015821 	.word	0x20015821

0801a810 <_realloc_r>:
 801a810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a814:	4680      	mov	r8, r0
 801a816:	4614      	mov	r4, r2
 801a818:	460e      	mov	r6, r1
 801a81a:	b921      	cbnz	r1, 801a826 <_realloc_r+0x16>
 801a81c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a820:	4611      	mov	r1, r2
 801a822:	f7ff baab 	b.w	8019d7c <_malloc_r>
 801a826:	b92a      	cbnz	r2, 801a834 <_realloc_r+0x24>
 801a828:	f7ff fa3c 	bl	8019ca4 <_free_r>
 801a82c:	4625      	mov	r5, r4
 801a82e:	4628      	mov	r0, r5
 801a830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a834:	f000 fcba 	bl	801b1ac <_malloc_usable_size_r>
 801a838:	4284      	cmp	r4, r0
 801a83a:	4607      	mov	r7, r0
 801a83c:	d802      	bhi.n	801a844 <_realloc_r+0x34>
 801a83e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a842:	d812      	bhi.n	801a86a <_realloc_r+0x5a>
 801a844:	4621      	mov	r1, r4
 801a846:	4640      	mov	r0, r8
 801a848:	f7ff fa98 	bl	8019d7c <_malloc_r>
 801a84c:	4605      	mov	r5, r0
 801a84e:	2800      	cmp	r0, #0
 801a850:	d0ed      	beq.n	801a82e <_realloc_r+0x1e>
 801a852:	42bc      	cmp	r4, r7
 801a854:	4622      	mov	r2, r4
 801a856:	4631      	mov	r1, r6
 801a858:	bf28      	it	cs
 801a85a:	463a      	movcs	r2, r7
 801a85c:	f7ff f9f6 	bl	8019c4c <memcpy>
 801a860:	4631      	mov	r1, r6
 801a862:	4640      	mov	r0, r8
 801a864:	f7ff fa1e 	bl	8019ca4 <_free_r>
 801a868:	e7e1      	b.n	801a82e <_realloc_r+0x1e>
 801a86a:	4635      	mov	r5, r6
 801a86c:	e7df      	b.n	801a82e <_realloc_r+0x1e>

0801a86e <__ssputs_r>:
 801a86e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a872:	688e      	ldr	r6, [r1, #8]
 801a874:	429e      	cmp	r6, r3
 801a876:	4682      	mov	sl, r0
 801a878:	460c      	mov	r4, r1
 801a87a:	4690      	mov	r8, r2
 801a87c:	461f      	mov	r7, r3
 801a87e:	d838      	bhi.n	801a8f2 <__ssputs_r+0x84>
 801a880:	898a      	ldrh	r2, [r1, #12]
 801a882:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a886:	d032      	beq.n	801a8ee <__ssputs_r+0x80>
 801a888:	6825      	ldr	r5, [r4, #0]
 801a88a:	6909      	ldr	r1, [r1, #16]
 801a88c:	eba5 0901 	sub.w	r9, r5, r1
 801a890:	6965      	ldr	r5, [r4, #20]
 801a892:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a896:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a89a:	3301      	adds	r3, #1
 801a89c:	444b      	add	r3, r9
 801a89e:	106d      	asrs	r5, r5, #1
 801a8a0:	429d      	cmp	r5, r3
 801a8a2:	bf38      	it	cc
 801a8a4:	461d      	movcc	r5, r3
 801a8a6:	0553      	lsls	r3, r2, #21
 801a8a8:	d531      	bpl.n	801a90e <__ssputs_r+0xa0>
 801a8aa:	4629      	mov	r1, r5
 801a8ac:	f7ff fa66 	bl	8019d7c <_malloc_r>
 801a8b0:	4606      	mov	r6, r0
 801a8b2:	b950      	cbnz	r0, 801a8ca <__ssputs_r+0x5c>
 801a8b4:	230c      	movs	r3, #12
 801a8b6:	f8ca 3000 	str.w	r3, [sl]
 801a8ba:	89a3      	ldrh	r3, [r4, #12]
 801a8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a8c0:	81a3      	strh	r3, [r4, #12]
 801a8c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8ca:	6921      	ldr	r1, [r4, #16]
 801a8cc:	464a      	mov	r2, r9
 801a8ce:	f7ff f9bd 	bl	8019c4c <memcpy>
 801a8d2:	89a3      	ldrh	r3, [r4, #12]
 801a8d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a8d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a8dc:	81a3      	strh	r3, [r4, #12]
 801a8de:	6126      	str	r6, [r4, #16]
 801a8e0:	6165      	str	r5, [r4, #20]
 801a8e2:	444e      	add	r6, r9
 801a8e4:	eba5 0509 	sub.w	r5, r5, r9
 801a8e8:	6026      	str	r6, [r4, #0]
 801a8ea:	60a5      	str	r5, [r4, #8]
 801a8ec:	463e      	mov	r6, r7
 801a8ee:	42be      	cmp	r6, r7
 801a8f0:	d900      	bls.n	801a8f4 <__ssputs_r+0x86>
 801a8f2:	463e      	mov	r6, r7
 801a8f4:	6820      	ldr	r0, [r4, #0]
 801a8f6:	4632      	mov	r2, r6
 801a8f8:	4641      	mov	r1, r8
 801a8fa:	f000 fc3d 	bl	801b178 <memmove>
 801a8fe:	68a3      	ldr	r3, [r4, #8]
 801a900:	1b9b      	subs	r3, r3, r6
 801a902:	60a3      	str	r3, [r4, #8]
 801a904:	6823      	ldr	r3, [r4, #0]
 801a906:	4433      	add	r3, r6
 801a908:	6023      	str	r3, [r4, #0]
 801a90a:	2000      	movs	r0, #0
 801a90c:	e7db      	b.n	801a8c6 <__ssputs_r+0x58>
 801a90e:	462a      	mov	r2, r5
 801a910:	f7ff ff7e 	bl	801a810 <_realloc_r>
 801a914:	4606      	mov	r6, r0
 801a916:	2800      	cmp	r0, #0
 801a918:	d1e1      	bne.n	801a8de <__ssputs_r+0x70>
 801a91a:	6921      	ldr	r1, [r4, #16]
 801a91c:	4650      	mov	r0, sl
 801a91e:	f7ff f9c1 	bl	8019ca4 <_free_r>
 801a922:	e7c7      	b.n	801a8b4 <__ssputs_r+0x46>

0801a924 <_svfiprintf_r>:
 801a924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a928:	4698      	mov	r8, r3
 801a92a:	898b      	ldrh	r3, [r1, #12]
 801a92c:	061b      	lsls	r3, r3, #24
 801a92e:	b09d      	sub	sp, #116	; 0x74
 801a930:	4607      	mov	r7, r0
 801a932:	460d      	mov	r5, r1
 801a934:	4614      	mov	r4, r2
 801a936:	d50e      	bpl.n	801a956 <_svfiprintf_r+0x32>
 801a938:	690b      	ldr	r3, [r1, #16]
 801a93a:	b963      	cbnz	r3, 801a956 <_svfiprintf_r+0x32>
 801a93c:	2140      	movs	r1, #64	; 0x40
 801a93e:	f7ff fa1d 	bl	8019d7c <_malloc_r>
 801a942:	6028      	str	r0, [r5, #0]
 801a944:	6128      	str	r0, [r5, #16]
 801a946:	b920      	cbnz	r0, 801a952 <_svfiprintf_r+0x2e>
 801a948:	230c      	movs	r3, #12
 801a94a:	603b      	str	r3, [r7, #0]
 801a94c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a950:	e0d1      	b.n	801aaf6 <_svfiprintf_r+0x1d2>
 801a952:	2340      	movs	r3, #64	; 0x40
 801a954:	616b      	str	r3, [r5, #20]
 801a956:	2300      	movs	r3, #0
 801a958:	9309      	str	r3, [sp, #36]	; 0x24
 801a95a:	2320      	movs	r3, #32
 801a95c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a960:	f8cd 800c 	str.w	r8, [sp, #12]
 801a964:	2330      	movs	r3, #48	; 0x30
 801a966:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ab10 <_svfiprintf_r+0x1ec>
 801a96a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a96e:	f04f 0901 	mov.w	r9, #1
 801a972:	4623      	mov	r3, r4
 801a974:	469a      	mov	sl, r3
 801a976:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a97a:	b10a      	cbz	r2, 801a980 <_svfiprintf_r+0x5c>
 801a97c:	2a25      	cmp	r2, #37	; 0x25
 801a97e:	d1f9      	bne.n	801a974 <_svfiprintf_r+0x50>
 801a980:	ebba 0b04 	subs.w	fp, sl, r4
 801a984:	d00b      	beq.n	801a99e <_svfiprintf_r+0x7a>
 801a986:	465b      	mov	r3, fp
 801a988:	4622      	mov	r2, r4
 801a98a:	4629      	mov	r1, r5
 801a98c:	4638      	mov	r0, r7
 801a98e:	f7ff ff6e 	bl	801a86e <__ssputs_r>
 801a992:	3001      	adds	r0, #1
 801a994:	f000 80aa 	beq.w	801aaec <_svfiprintf_r+0x1c8>
 801a998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a99a:	445a      	add	r2, fp
 801a99c:	9209      	str	r2, [sp, #36]	; 0x24
 801a99e:	f89a 3000 	ldrb.w	r3, [sl]
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	f000 80a2 	beq.w	801aaec <_svfiprintf_r+0x1c8>
 801a9a8:	2300      	movs	r3, #0
 801a9aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a9ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a9b2:	f10a 0a01 	add.w	sl, sl, #1
 801a9b6:	9304      	str	r3, [sp, #16]
 801a9b8:	9307      	str	r3, [sp, #28]
 801a9ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a9be:	931a      	str	r3, [sp, #104]	; 0x68
 801a9c0:	4654      	mov	r4, sl
 801a9c2:	2205      	movs	r2, #5
 801a9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9c8:	4851      	ldr	r0, [pc, #324]	; (801ab10 <_svfiprintf_r+0x1ec>)
 801a9ca:	f7e5 fc19 	bl	8000200 <memchr>
 801a9ce:	9a04      	ldr	r2, [sp, #16]
 801a9d0:	b9d8      	cbnz	r0, 801aa0a <_svfiprintf_r+0xe6>
 801a9d2:	06d0      	lsls	r0, r2, #27
 801a9d4:	bf44      	itt	mi
 801a9d6:	2320      	movmi	r3, #32
 801a9d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9dc:	0711      	lsls	r1, r2, #28
 801a9de:	bf44      	itt	mi
 801a9e0:	232b      	movmi	r3, #43	; 0x2b
 801a9e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9e6:	f89a 3000 	ldrb.w	r3, [sl]
 801a9ea:	2b2a      	cmp	r3, #42	; 0x2a
 801a9ec:	d015      	beq.n	801aa1a <_svfiprintf_r+0xf6>
 801a9ee:	9a07      	ldr	r2, [sp, #28]
 801a9f0:	4654      	mov	r4, sl
 801a9f2:	2000      	movs	r0, #0
 801a9f4:	f04f 0c0a 	mov.w	ip, #10
 801a9f8:	4621      	mov	r1, r4
 801a9fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a9fe:	3b30      	subs	r3, #48	; 0x30
 801aa00:	2b09      	cmp	r3, #9
 801aa02:	d94e      	bls.n	801aaa2 <_svfiprintf_r+0x17e>
 801aa04:	b1b0      	cbz	r0, 801aa34 <_svfiprintf_r+0x110>
 801aa06:	9207      	str	r2, [sp, #28]
 801aa08:	e014      	b.n	801aa34 <_svfiprintf_r+0x110>
 801aa0a:	eba0 0308 	sub.w	r3, r0, r8
 801aa0e:	fa09 f303 	lsl.w	r3, r9, r3
 801aa12:	4313      	orrs	r3, r2
 801aa14:	9304      	str	r3, [sp, #16]
 801aa16:	46a2      	mov	sl, r4
 801aa18:	e7d2      	b.n	801a9c0 <_svfiprintf_r+0x9c>
 801aa1a:	9b03      	ldr	r3, [sp, #12]
 801aa1c:	1d19      	adds	r1, r3, #4
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	9103      	str	r1, [sp, #12]
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	bfbb      	ittet	lt
 801aa26:	425b      	neglt	r3, r3
 801aa28:	f042 0202 	orrlt.w	r2, r2, #2
 801aa2c:	9307      	strge	r3, [sp, #28]
 801aa2e:	9307      	strlt	r3, [sp, #28]
 801aa30:	bfb8      	it	lt
 801aa32:	9204      	strlt	r2, [sp, #16]
 801aa34:	7823      	ldrb	r3, [r4, #0]
 801aa36:	2b2e      	cmp	r3, #46	; 0x2e
 801aa38:	d10c      	bne.n	801aa54 <_svfiprintf_r+0x130>
 801aa3a:	7863      	ldrb	r3, [r4, #1]
 801aa3c:	2b2a      	cmp	r3, #42	; 0x2a
 801aa3e:	d135      	bne.n	801aaac <_svfiprintf_r+0x188>
 801aa40:	9b03      	ldr	r3, [sp, #12]
 801aa42:	1d1a      	adds	r2, r3, #4
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	9203      	str	r2, [sp, #12]
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	bfb8      	it	lt
 801aa4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801aa50:	3402      	adds	r4, #2
 801aa52:	9305      	str	r3, [sp, #20]
 801aa54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ab20 <_svfiprintf_r+0x1fc>
 801aa58:	7821      	ldrb	r1, [r4, #0]
 801aa5a:	2203      	movs	r2, #3
 801aa5c:	4650      	mov	r0, sl
 801aa5e:	f7e5 fbcf 	bl	8000200 <memchr>
 801aa62:	b140      	cbz	r0, 801aa76 <_svfiprintf_r+0x152>
 801aa64:	2340      	movs	r3, #64	; 0x40
 801aa66:	eba0 000a 	sub.w	r0, r0, sl
 801aa6a:	fa03 f000 	lsl.w	r0, r3, r0
 801aa6e:	9b04      	ldr	r3, [sp, #16]
 801aa70:	4303      	orrs	r3, r0
 801aa72:	3401      	adds	r4, #1
 801aa74:	9304      	str	r3, [sp, #16]
 801aa76:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa7a:	4826      	ldr	r0, [pc, #152]	; (801ab14 <_svfiprintf_r+0x1f0>)
 801aa7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aa80:	2206      	movs	r2, #6
 801aa82:	f7e5 fbbd 	bl	8000200 <memchr>
 801aa86:	2800      	cmp	r0, #0
 801aa88:	d038      	beq.n	801aafc <_svfiprintf_r+0x1d8>
 801aa8a:	4b23      	ldr	r3, [pc, #140]	; (801ab18 <_svfiprintf_r+0x1f4>)
 801aa8c:	bb1b      	cbnz	r3, 801aad6 <_svfiprintf_r+0x1b2>
 801aa8e:	9b03      	ldr	r3, [sp, #12]
 801aa90:	3307      	adds	r3, #7
 801aa92:	f023 0307 	bic.w	r3, r3, #7
 801aa96:	3308      	adds	r3, #8
 801aa98:	9303      	str	r3, [sp, #12]
 801aa9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa9c:	4433      	add	r3, r6
 801aa9e:	9309      	str	r3, [sp, #36]	; 0x24
 801aaa0:	e767      	b.n	801a972 <_svfiprintf_r+0x4e>
 801aaa2:	fb0c 3202 	mla	r2, ip, r2, r3
 801aaa6:	460c      	mov	r4, r1
 801aaa8:	2001      	movs	r0, #1
 801aaaa:	e7a5      	b.n	801a9f8 <_svfiprintf_r+0xd4>
 801aaac:	2300      	movs	r3, #0
 801aaae:	3401      	adds	r4, #1
 801aab0:	9305      	str	r3, [sp, #20]
 801aab2:	4619      	mov	r1, r3
 801aab4:	f04f 0c0a 	mov.w	ip, #10
 801aab8:	4620      	mov	r0, r4
 801aaba:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aabe:	3a30      	subs	r2, #48	; 0x30
 801aac0:	2a09      	cmp	r2, #9
 801aac2:	d903      	bls.n	801aacc <_svfiprintf_r+0x1a8>
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d0c5      	beq.n	801aa54 <_svfiprintf_r+0x130>
 801aac8:	9105      	str	r1, [sp, #20]
 801aaca:	e7c3      	b.n	801aa54 <_svfiprintf_r+0x130>
 801aacc:	fb0c 2101 	mla	r1, ip, r1, r2
 801aad0:	4604      	mov	r4, r0
 801aad2:	2301      	movs	r3, #1
 801aad4:	e7f0      	b.n	801aab8 <_svfiprintf_r+0x194>
 801aad6:	ab03      	add	r3, sp, #12
 801aad8:	9300      	str	r3, [sp, #0]
 801aada:	462a      	mov	r2, r5
 801aadc:	4b0f      	ldr	r3, [pc, #60]	; (801ab1c <_svfiprintf_r+0x1f8>)
 801aade:	a904      	add	r1, sp, #16
 801aae0:	4638      	mov	r0, r7
 801aae2:	f3af 8000 	nop.w
 801aae6:	1c42      	adds	r2, r0, #1
 801aae8:	4606      	mov	r6, r0
 801aaea:	d1d6      	bne.n	801aa9a <_svfiprintf_r+0x176>
 801aaec:	89ab      	ldrh	r3, [r5, #12]
 801aaee:	065b      	lsls	r3, r3, #25
 801aaf0:	f53f af2c 	bmi.w	801a94c <_svfiprintf_r+0x28>
 801aaf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aaf6:	b01d      	add	sp, #116	; 0x74
 801aaf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aafc:	ab03      	add	r3, sp, #12
 801aafe:	9300      	str	r3, [sp, #0]
 801ab00:	462a      	mov	r2, r5
 801ab02:	4b06      	ldr	r3, [pc, #24]	; (801ab1c <_svfiprintf_r+0x1f8>)
 801ab04:	a904      	add	r1, sp, #16
 801ab06:	4638      	mov	r0, r7
 801ab08:	f000 f9d4 	bl	801aeb4 <_printf_i>
 801ab0c:	e7eb      	b.n	801aae6 <_svfiprintf_r+0x1c2>
 801ab0e:	bf00      	nop
 801ab10:	0801c3da 	.word	0x0801c3da
 801ab14:	0801c3e4 	.word	0x0801c3e4
 801ab18:	00000000 	.word	0x00000000
 801ab1c:	0801a86f 	.word	0x0801a86f
 801ab20:	0801c3e0 	.word	0x0801c3e0

0801ab24 <__sfputc_r>:
 801ab24:	6893      	ldr	r3, [r2, #8]
 801ab26:	3b01      	subs	r3, #1
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	b410      	push	{r4}
 801ab2c:	6093      	str	r3, [r2, #8]
 801ab2e:	da08      	bge.n	801ab42 <__sfputc_r+0x1e>
 801ab30:	6994      	ldr	r4, [r2, #24]
 801ab32:	42a3      	cmp	r3, r4
 801ab34:	db01      	blt.n	801ab3a <__sfputc_r+0x16>
 801ab36:	290a      	cmp	r1, #10
 801ab38:	d103      	bne.n	801ab42 <__sfputc_r+0x1e>
 801ab3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab3e:	f7ff bc03 	b.w	801a348 <__swbuf_r>
 801ab42:	6813      	ldr	r3, [r2, #0]
 801ab44:	1c58      	adds	r0, r3, #1
 801ab46:	6010      	str	r0, [r2, #0]
 801ab48:	7019      	strb	r1, [r3, #0]
 801ab4a:	4608      	mov	r0, r1
 801ab4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab50:	4770      	bx	lr

0801ab52 <__sfputs_r>:
 801ab52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab54:	4606      	mov	r6, r0
 801ab56:	460f      	mov	r7, r1
 801ab58:	4614      	mov	r4, r2
 801ab5a:	18d5      	adds	r5, r2, r3
 801ab5c:	42ac      	cmp	r4, r5
 801ab5e:	d101      	bne.n	801ab64 <__sfputs_r+0x12>
 801ab60:	2000      	movs	r0, #0
 801ab62:	e007      	b.n	801ab74 <__sfputs_r+0x22>
 801ab64:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab68:	463a      	mov	r2, r7
 801ab6a:	4630      	mov	r0, r6
 801ab6c:	f7ff ffda 	bl	801ab24 <__sfputc_r>
 801ab70:	1c43      	adds	r3, r0, #1
 801ab72:	d1f3      	bne.n	801ab5c <__sfputs_r+0xa>
 801ab74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ab78 <_vfiprintf_r>:
 801ab78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab7c:	460d      	mov	r5, r1
 801ab7e:	b09d      	sub	sp, #116	; 0x74
 801ab80:	4614      	mov	r4, r2
 801ab82:	4698      	mov	r8, r3
 801ab84:	4606      	mov	r6, r0
 801ab86:	b118      	cbz	r0, 801ab90 <_vfiprintf_r+0x18>
 801ab88:	6983      	ldr	r3, [r0, #24]
 801ab8a:	b90b      	cbnz	r3, 801ab90 <_vfiprintf_r+0x18>
 801ab8c:	f7fe fed2 	bl	8019934 <__sinit>
 801ab90:	4b89      	ldr	r3, [pc, #548]	; (801adb8 <_vfiprintf_r+0x240>)
 801ab92:	429d      	cmp	r5, r3
 801ab94:	d11b      	bne.n	801abce <_vfiprintf_r+0x56>
 801ab96:	6875      	ldr	r5, [r6, #4]
 801ab98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ab9a:	07d9      	lsls	r1, r3, #31
 801ab9c:	d405      	bmi.n	801abaa <_vfiprintf_r+0x32>
 801ab9e:	89ab      	ldrh	r3, [r5, #12]
 801aba0:	059a      	lsls	r2, r3, #22
 801aba2:	d402      	bmi.n	801abaa <_vfiprintf_r+0x32>
 801aba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aba6:	f7ff f83e 	bl	8019c26 <__retarget_lock_acquire_recursive>
 801abaa:	89ab      	ldrh	r3, [r5, #12]
 801abac:	071b      	lsls	r3, r3, #28
 801abae:	d501      	bpl.n	801abb4 <_vfiprintf_r+0x3c>
 801abb0:	692b      	ldr	r3, [r5, #16]
 801abb2:	b9eb      	cbnz	r3, 801abf0 <_vfiprintf_r+0x78>
 801abb4:	4629      	mov	r1, r5
 801abb6:	4630      	mov	r0, r6
 801abb8:	f7ff fc2a 	bl	801a410 <__swsetup_r>
 801abbc:	b1c0      	cbz	r0, 801abf0 <_vfiprintf_r+0x78>
 801abbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801abc0:	07dc      	lsls	r4, r3, #31
 801abc2:	d50e      	bpl.n	801abe2 <_vfiprintf_r+0x6a>
 801abc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801abc8:	b01d      	add	sp, #116	; 0x74
 801abca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abce:	4b7b      	ldr	r3, [pc, #492]	; (801adbc <_vfiprintf_r+0x244>)
 801abd0:	429d      	cmp	r5, r3
 801abd2:	d101      	bne.n	801abd8 <_vfiprintf_r+0x60>
 801abd4:	68b5      	ldr	r5, [r6, #8]
 801abd6:	e7df      	b.n	801ab98 <_vfiprintf_r+0x20>
 801abd8:	4b79      	ldr	r3, [pc, #484]	; (801adc0 <_vfiprintf_r+0x248>)
 801abda:	429d      	cmp	r5, r3
 801abdc:	bf08      	it	eq
 801abde:	68f5      	ldreq	r5, [r6, #12]
 801abe0:	e7da      	b.n	801ab98 <_vfiprintf_r+0x20>
 801abe2:	89ab      	ldrh	r3, [r5, #12]
 801abe4:	0598      	lsls	r0, r3, #22
 801abe6:	d4ed      	bmi.n	801abc4 <_vfiprintf_r+0x4c>
 801abe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801abea:	f7ff f81d 	bl	8019c28 <__retarget_lock_release_recursive>
 801abee:	e7e9      	b.n	801abc4 <_vfiprintf_r+0x4c>
 801abf0:	2300      	movs	r3, #0
 801abf2:	9309      	str	r3, [sp, #36]	; 0x24
 801abf4:	2320      	movs	r3, #32
 801abf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801abfa:	f8cd 800c 	str.w	r8, [sp, #12]
 801abfe:	2330      	movs	r3, #48	; 0x30
 801ac00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801adc4 <_vfiprintf_r+0x24c>
 801ac04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ac08:	f04f 0901 	mov.w	r9, #1
 801ac0c:	4623      	mov	r3, r4
 801ac0e:	469a      	mov	sl, r3
 801ac10:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ac14:	b10a      	cbz	r2, 801ac1a <_vfiprintf_r+0xa2>
 801ac16:	2a25      	cmp	r2, #37	; 0x25
 801ac18:	d1f9      	bne.n	801ac0e <_vfiprintf_r+0x96>
 801ac1a:	ebba 0b04 	subs.w	fp, sl, r4
 801ac1e:	d00b      	beq.n	801ac38 <_vfiprintf_r+0xc0>
 801ac20:	465b      	mov	r3, fp
 801ac22:	4622      	mov	r2, r4
 801ac24:	4629      	mov	r1, r5
 801ac26:	4630      	mov	r0, r6
 801ac28:	f7ff ff93 	bl	801ab52 <__sfputs_r>
 801ac2c:	3001      	adds	r0, #1
 801ac2e:	f000 80aa 	beq.w	801ad86 <_vfiprintf_r+0x20e>
 801ac32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac34:	445a      	add	r2, fp
 801ac36:	9209      	str	r2, [sp, #36]	; 0x24
 801ac38:	f89a 3000 	ldrb.w	r3, [sl]
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	f000 80a2 	beq.w	801ad86 <_vfiprintf_r+0x20e>
 801ac42:	2300      	movs	r3, #0
 801ac44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ac48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ac4c:	f10a 0a01 	add.w	sl, sl, #1
 801ac50:	9304      	str	r3, [sp, #16]
 801ac52:	9307      	str	r3, [sp, #28]
 801ac54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ac58:	931a      	str	r3, [sp, #104]	; 0x68
 801ac5a:	4654      	mov	r4, sl
 801ac5c:	2205      	movs	r2, #5
 801ac5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ac62:	4858      	ldr	r0, [pc, #352]	; (801adc4 <_vfiprintf_r+0x24c>)
 801ac64:	f7e5 facc 	bl	8000200 <memchr>
 801ac68:	9a04      	ldr	r2, [sp, #16]
 801ac6a:	b9d8      	cbnz	r0, 801aca4 <_vfiprintf_r+0x12c>
 801ac6c:	06d1      	lsls	r1, r2, #27
 801ac6e:	bf44      	itt	mi
 801ac70:	2320      	movmi	r3, #32
 801ac72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ac76:	0713      	lsls	r3, r2, #28
 801ac78:	bf44      	itt	mi
 801ac7a:	232b      	movmi	r3, #43	; 0x2b
 801ac7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ac80:	f89a 3000 	ldrb.w	r3, [sl]
 801ac84:	2b2a      	cmp	r3, #42	; 0x2a
 801ac86:	d015      	beq.n	801acb4 <_vfiprintf_r+0x13c>
 801ac88:	9a07      	ldr	r2, [sp, #28]
 801ac8a:	4654      	mov	r4, sl
 801ac8c:	2000      	movs	r0, #0
 801ac8e:	f04f 0c0a 	mov.w	ip, #10
 801ac92:	4621      	mov	r1, r4
 801ac94:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ac98:	3b30      	subs	r3, #48	; 0x30
 801ac9a:	2b09      	cmp	r3, #9
 801ac9c:	d94e      	bls.n	801ad3c <_vfiprintf_r+0x1c4>
 801ac9e:	b1b0      	cbz	r0, 801acce <_vfiprintf_r+0x156>
 801aca0:	9207      	str	r2, [sp, #28]
 801aca2:	e014      	b.n	801acce <_vfiprintf_r+0x156>
 801aca4:	eba0 0308 	sub.w	r3, r0, r8
 801aca8:	fa09 f303 	lsl.w	r3, r9, r3
 801acac:	4313      	orrs	r3, r2
 801acae:	9304      	str	r3, [sp, #16]
 801acb0:	46a2      	mov	sl, r4
 801acb2:	e7d2      	b.n	801ac5a <_vfiprintf_r+0xe2>
 801acb4:	9b03      	ldr	r3, [sp, #12]
 801acb6:	1d19      	adds	r1, r3, #4
 801acb8:	681b      	ldr	r3, [r3, #0]
 801acba:	9103      	str	r1, [sp, #12]
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	bfbb      	ittet	lt
 801acc0:	425b      	neglt	r3, r3
 801acc2:	f042 0202 	orrlt.w	r2, r2, #2
 801acc6:	9307      	strge	r3, [sp, #28]
 801acc8:	9307      	strlt	r3, [sp, #28]
 801acca:	bfb8      	it	lt
 801accc:	9204      	strlt	r2, [sp, #16]
 801acce:	7823      	ldrb	r3, [r4, #0]
 801acd0:	2b2e      	cmp	r3, #46	; 0x2e
 801acd2:	d10c      	bne.n	801acee <_vfiprintf_r+0x176>
 801acd4:	7863      	ldrb	r3, [r4, #1]
 801acd6:	2b2a      	cmp	r3, #42	; 0x2a
 801acd8:	d135      	bne.n	801ad46 <_vfiprintf_r+0x1ce>
 801acda:	9b03      	ldr	r3, [sp, #12]
 801acdc:	1d1a      	adds	r2, r3, #4
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	9203      	str	r2, [sp, #12]
 801ace2:	2b00      	cmp	r3, #0
 801ace4:	bfb8      	it	lt
 801ace6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801acea:	3402      	adds	r4, #2
 801acec:	9305      	str	r3, [sp, #20]
 801acee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801add4 <_vfiprintf_r+0x25c>
 801acf2:	7821      	ldrb	r1, [r4, #0]
 801acf4:	2203      	movs	r2, #3
 801acf6:	4650      	mov	r0, sl
 801acf8:	f7e5 fa82 	bl	8000200 <memchr>
 801acfc:	b140      	cbz	r0, 801ad10 <_vfiprintf_r+0x198>
 801acfe:	2340      	movs	r3, #64	; 0x40
 801ad00:	eba0 000a 	sub.w	r0, r0, sl
 801ad04:	fa03 f000 	lsl.w	r0, r3, r0
 801ad08:	9b04      	ldr	r3, [sp, #16]
 801ad0a:	4303      	orrs	r3, r0
 801ad0c:	3401      	adds	r4, #1
 801ad0e:	9304      	str	r3, [sp, #16]
 801ad10:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ad14:	482c      	ldr	r0, [pc, #176]	; (801adc8 <_vfiprintf_r+0x250>)
 801ad16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ad1a:	2206      	movs	r2, #6
 801ad1c:	f7e5 fa70 	bl	8000200 <memchr>
 801ad20:	2800      	cmp	r0, #0
 801ad22:	d03f      	beq.n	801ada4 <_vfiprintf_r+0x22c>
 801ad24:	4b29      	ldr	r3, [pc, #164]	; (801adcc <_vfiprintf_r+0x254>)
 801ad26:	bb1b      	cbnz	r3, 801ad70 <_vfiprintf_r+0x1f8>
 801ad28:	9b03      	ldr	r3, [sp, #12]
 801ad2a:	3307      	adds	r3, #7
 801ad2c:	f023 0307 	bic.w	r3, r3, #7
 801ad30:	3308      	adds	r3, #8
 801ad32:	9303      	str	r3, [sp, #12]
 801ad34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad36:	443b      	add	r3, r7
 801ad38:	9309      	str	r3, [sp, #36]	; 0x24
 801ad3a:	e767      	b.n	801ac0c <_vfiprintf_r+0x94>
 801ad3c:	fb0c 3202 	mla	r2, ip, r2, r3
 801ad40:	460c      	mov	r4, r1
 801ad42:	2001      	movs	r0, #1
 801ad44:	e7a5      	b.n	801ac92 <_vfiprintf_r+0x11a>
 801ad46:	2300      	movs	r3, #0
 801ad48:	3401      	adds	r4, #1
 801ad4a:	9305      	str	r3, [sp, #20]
 801ad4c:	4619      	mov	r1, r3
 801ad4e:	f04f 0c0a 	mov.w	ip, #10
 801ad52:	4620      	mov	r0, r4
 801ad54:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ad58:	3a30      	subs	r2, #48	; 0x30
 801ad5a:	2a09      	cmp	r2, #9
 801ad5c:	d903      	bls.n	801ad66 <_vfiprintf_r+0x1ee>
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	d0c5      	beq.n	801acee <_vfiprintf_r+0x176>
 801ad62:	9105      	str	r1, [sp, #20]
 801ad64:	e7c3      	b.n	801acee <_vfiprintf_r+0x176>
 801ad66:	fb0c 2101 	mla	r1, ip, r1, r2
 801ad6a:	4604      	mov	r4, r0
 801ad6c:	2301      	movs	r3, #1
 801ad6e:	e7f0      	b.n	801ad52 <_vfiprintf_r+0x1da>
 801ad70:	ab03      	add	r3, sp, #12
 801ad72:	9300      	str	r3, [sp, #0]
 801ad74:	462a      	mov	r2, r5
 801ad76:	4b16      	ldr	r3, [pc, #88]	; (801add0 <_vfiprintf_r+0x258>)
 801ad78:	a904      	add	r1, sp, #16
 801ad7a:	4630      	mov	r0, r6
 801ad7c:	f3af 8000 	nop.w
 801ad80:	4607      	mov	r7, r0
 801ad82:	1c78      	adds	r0, r7, #1
 801ad84:	d1d6      	bne.n	801ad34 <_vfiprintf_r+0x1bc>
 801ad86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ad88:	07d9      	lsls	r1, r3, #31
 801ad8a:	d405      	bmi.n	801ad98 <_vfiprintf_r+0x220>
 801ad8c:	89ab      	ldrh	r3, [r5, #12]
 801ad8e:	059a      	lsls	r2, r3, #22
 801ad90:	d402      	bmi.n	801ad98 <_vfiprintf_r+0x220>
 801ad92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ad94:	f7fe ff48 	bl	8019c28 <__retarget_lock_release_recursive>
 801ad98:	89ab      	ldrh	r3, [r5, #12]
 801ad9a:	065b      	lsls	r3, r3, #25
 801ad9c:	f53f af12 	bmi.w	801abc4 <_vfiprintf_r+0x4c>
 801ada0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ada2:	e711      	b.n	801abc8 <_vfiprintf_r+0x50>
 801ada4:	ab03      	add	r3, sp, #12
 801ada6:	9300      	str	r3, [sp, #0]
 801ada8:	462a      	mov	r2, r5
 801adaa:	4b09      	ldr	r3, [pc, #36]	; (801add0 <_vfiprintf_r+0x258>)
 801adac:	a904      	add	r1, sp, #16
 801adae:	4630      	mov	r0, r6
 801adb0:	f000 f880 	bl	801aeb4 <_printf_i>
 801adb4:	e7e4      	b.n	801ad80 <_vfiprintf_r+0x208>
 801adb6:	bf00      	nop
 801adb8:	0801c2e8 	.word	0x0801c2e8
 801adbc:	0801c308 	.word	0x0801c308
 801adc0:	0801c2c8 	.word	0x0801c2c8
 801adc4:	0801c3da 	.word	0x0801c3da
 801adc8:	0801c3e4 	.word	0x0801c3e4
 801adcc:	00000000 	.word	0x00000000
 801add0:	0801ab53 	.word	0x0801ab53
 801add4:	0801c3e0 	.word	0x0801c3e0

0801add8 <_printf_common>:
 801add8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801addc:	4616      	mov	r6, r2
 801adde:	4699      	mov	r9, r3
 801ade0:	688a      	ldr	r2, [r1, #8]
 801ade2:	690b      	ldr	r3, [r1, #16]
 801ade4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ade8:	4293      	cmp	r3, r2
 801adea:	bfb8      	it	lt
 801adec:	4613      	movlt	r3, r2
 801adee:	6033      	str	r3, [r6, #0]
 801adf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801adf4:	4607      	mov	r7, r0
 801adf6:	460c      	mov	r4, r1
 801adf8:	b10a      	cbz	r2, 801adfe <_printf_common+0x26>
 801adfa:	3301      	adds	r3, #1
 801adfc:	6033      	str	r3, [r6, #0]
 801adfe:	6823      	ldr	r3, [r4, #0]
 801ae00:	0699      	lsls	r1, r3, #26
 801ae02:	bf42      	ittt	mi
 801ae04:	6833      	ldrmi	r3, [r6, #0]
 801ae06:	3302      	addmi	r3, #2
 801ae08:	6033      	strmi	r3, [r6, #0]
 801ae0a:	6825      	ldr	r5, [r4, #0]
 801ae0c:	f015 0506 	ands.w	r5, r5, #6
 801ae10:	d106      	bne.n	801ae20 <_printf_common+0x48>
 801ae12:	f104 0a19 	add.w	sl, r4, #25
 801ae16:	68e3      	ldr	r3, [r4, #12]
 801ae18:	6832      	ldr	r2, [r6, #0]
 801ae1a:	1a9b      	subs	r3, r3, r2
 801ae1c:	42ab      	cmp	r3, r5
 801ae1e:	dc26      	bgt.n	801ae6e <_printf_common+0x96>
 801ae20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ae24:	1e13      	subs	r3, r2, #0
 801ae26:	6822      	ldr	r2, [r4, #0]
 801ae28:	bf18      	it	ne
 801ae2a:	2301      	movne	r3, #1
 801ae2c:	0692      	lsls	r2, r2, #26
 801ae2e:	d42b      	bmi.n	801ae88 <_printf_common+0xb0>
 801ae30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ae34:	4649      	mov	r1, r9
 801ae36:	4638      	mov	r0, r7
 801ae38:	47c0      	blx	r8
 801ae3a:	3001      	adds	r0, #1
 801ae3c:	d01e      	beq.n	801ae7c <_printf_common+0xa4>
 801ae3e:	6823      	ldr	r3, [r4, #0]
 801ae40:	68e5      	ldr	r5, [r4, #12]
 801ae42:	6832      	ldr	r2, [r6, #0]
 801ae44:	f003 0306 	and.w	r3, r3, #6
 801ae48:	2b04      	cmp	r3, #4
 801ae4a:	bf08      	it	eq
 801ae4c:	1aad      	subeq	r5, r5, r2
 801ae4e:	68a3      	ldr	r3, [r4, #8]
 801ae50:	6922      	ldr	r2, [r4, #16]
 801ae52:	bf0c      	ite	eq
 801ae54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ae58:	2500      	movne	r5, #0
 801ae5a:	4293      	cmp	r3, r2
 801ae5c:	bfc4      	itt	gt
 801ae5e:	1a9b      	subgt	r3, r3, r2
 801ae60:	18ed      	addgt	r5, r5, r3
 801ae62:	2600      	movs	r6, #0
 801ae64:	341a      	adds	r4, #26
 801ae66:	42b5      	cmp	r5, r6
 801ae68:	d11a      	bne.n	801aea0 <_printf_common+0xc8>
 801ae6a:	2000      	movs	r0, #0
 801ae6c:	e008      	b.n	801ae80 <_printf_common+0xa8>
 801ae6e:	2301      	movs	r3, #1
 801ae70:	4652      	mov	r2, sl
 801ae72:	4649      	mov	r1, r9
 801ae74:	4638      	mov	r0, r7
 801ae76:	47c0      	blx	r8
 801ae78:	3001      	adds	r0, #1
 801ae7a:	d103      	bne.n	801ae84 <_printf_common+0xac>
 801ae7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ae80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae84:	3501      	adds	r5, #1
 801ae86:	e7c6      	b.n	801ae16 <_printf_common+0x3e>
 801ae88:	18e1      	adds	r1, r4, r3
 801ae8a:	1c5a      	adds	r2, r3, #1
 801ae8c:	2030      	movs	r0, #48	; 0x30
 801ae8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ae92:	4422      	add	r2, r4
 801ae94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ae98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ae9c:	3302      	adds	r3, #2
 801ae9e:	e7c7      	b.n	801ae30 <_printf_common+0x58>
 801aea0:	2301      	movs	r3, #1
 801aea2:	4622      	mov	r2, r4
 801aea4:	4649      	mov	r1, r9
 801aea6:	4638      	mov	r0, r7
 801aea8:	47c0      	blx	r8
 801aeaa:	3001      	adds	r0, #1
 801aeac:	d0e6      	beq.n	801ae7c <_printf_common+0xa4>
 801aeae:	3601      	adds	r6, #1
 801aeb0:	e7d9      	b.n	801ae66 <_printf_common+0x8e>
	...

0801aeb4 <_printf_i>:
 801aeb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aeb8:	7e0f      	ldrb	r7, [r1, #24]
 801aeba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801aebc:	2f78      	cmp	r7, #120	; 0x78
 801aebe:	4691      	mov	r9, r2
 801aec0:	4680      	mov	r8, r0
 801aec2:	460c      	mov	r4, r1
 801aec4:	469a      	mov	sl, r3
 801aec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801aeca:	d807      	bhi.n	801aedc <_printf_i+0x28>
 801aecc:	2f62      	cmp	r7, #98	; 0x62
 801aece:	d80a      	bhi.n	801aee6 <_printf_i+0x32>
 801aed0:	2f00      	cmp	r7, #0
 801aed2:	f000 80d8 	beq.w	801b086 <_printf_i+0x1d2>
 801aed6:	2f58      	cmp	r7, #88	; 0x58
 801aed8:	f000 80a3 	beq.w	801b022 <_printf_i+0x16e>
 801aedc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801aee4:	e03a      	b.n	801af5c <_printf_i+0xa8>
 801aee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801aeea:	2b15      	cmp	r3, #21
 801aeec:	d8f6      	bhi.n	801aedc <_printf_i+0x28>
 801aeee:	a101      	add	r1, pc, #4	; (adr r1, 801aef4 <_printf_i+0x40>)
 801aef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aef4:	0801af4d 	.word	0x0801af4d
 801aef8:	0801af61 	.word	0x0801af61
 801aefc:	0801aedd 	.word	0x0801aedd
 801af00:	0801aedd 	.word	0x0801aedd
 801af04:	0801aedd 	.word	0x0801aedd
 801af08:	0801aedd 	.word	0x0801aedd
 801af0c:	0801af61 	.word	0x0801af61
 801af10:	0801aedd 	.word	0x0801aedd
 801af14:	0801aedd 	.word	0x0801aedd
 801af18:	0801aedd 	.word	0x0801aedd
 801af1c:	0801aedd 	.word	0x0801aedd
 801af20:	0801b06d 	.word	0x0801b06d
 801af24:	0801af91 	.word	0x0801af91
 801af28:	0801b04f 	.word	0x0801b04f
 801af2c:	0801aedd 	.word	0x0801aedd
 801af30:	0801aedd 	.word	0x0801aedd
 801af34:	0801b08f 	.word	0x0801b08f
 801af38:	0801aedd 	.word	0x0801aedd
 801af3c:	0801af91 	.word	0x0801af91
 801af40:	0801aedd 	.word	0x0801aedd
 801af44:	0801aedd 	.word	0x0801aedd
 801af48:	0801b057 	.word	0x0801b057
 801af4c:	682b      	ldr	r3, [r5, #0]
 801af4e:	1d1a      	adds	r2, r3, #4
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	602a      	str	r2, [r5, #0]
 801af54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801af58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801af5c:	2301      	movs	r3, #1
 801af5e:	e0a3      	b.n	801b0a8 <_printf_i+0x1f4>
 801af60:	6820      	ldr	r0, [r4, #0]
 801af62:	6829      	ldr	r1, [r5, #0]
 801af64:	0606      	lsls	r6, r0, #24
 801af66:	f101 0304 	add.w	r3, r1, #4
 801af6a:	d50a      	bpl.n	801af82 <_printf_i+0xce>
 801af6c:	680e      	ldr	r6, [r1, #0]
 801af6e:	602b      	str	r3, [r5, #0]
 801af70:	2e00      	cmp	r6, #0
 801af72:	da03      	bge.n	801af7c <_printf_i+0xc8>
 801af74:	232d      	movs	r3, #45	; 0x2d
 801af76:	4276      	negs	r6, r6
 801af78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af7c:	485e      	ldr	r0, [pc, #376]	; (801b0f8 <_printf_i+0x244>)
 801af7e:	230a      	movs	r3, #10
 801af80:	e019      	b.n	801afb6 <_printf_i+0x102>
 801af82:	680e      	ldr	r6, [r1, #0]
 801af84:	602b      	str	r3, [r5, #0]
 801af86:	f010 0f40 	tst.w	r0, #64	; 0x40
 801af8a:	bf18      	it	ne
 801af8c:	b236      	sxthne	r6, r6
 801af8e:	e7ef      	b.n	801af70 <_printf_i+0xbc>
 801af90:	682b      	ldr	r3, [r5, #0]
 801af92:	6820      	ldr	r0, [r4, #0]
 801af94:	1d19      	adds	r1, r3, #4
 801af96:	6029      	str	r1, [r5, #0]
 801af98:	0601      	lsls	r1, r0, #24
 801af9a:	d501      	bpl.n	801afa0 <_printf_i+0xec>
 801af9c:	681e      	ldr	r6, [r3, #0]
 801af9e:	e002      	b.n	801afa6 <_printf_i+0xf2>
 801afa0:	0646      	lsls	r6, r0, #25
 801afa2:	d5fb      	bpl.n	801af9c <_printf_i+0xe8>
 801afa4:	881e      	ldrh	r6, [r3, #0]
 801afa6:	4854      	ldr	r0, [pc, #336]	; (801b0f8 <_printf_i+0x244>)
 801afa8:	2f6f      	cmp	r7, #111	; 0x6f
 801afaa:	bf0c      	ite	eq
 801afac:	2308      	moveq	r3, #8
 801afae:	230a      	movne	r3, #10
 801afb0:	2100      	movs	r1, #0
 801afb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801afb6:	6865      	ldr	r5, [r4, #4]
 801afb8:	60a5      	str	r5, [r4, #8]
 801afba:	2d00      	cmp	r5, #0
 801afbc:	bfa2      	ittt	ge
 801afbe:	6821      	ldrge	r1, [r4, #0]
 801afc0:	f021 0104 	bicge.w	r1, r1, #4
 801afc4:	6021      	strge	r1, [r4, #0]
 801afc6:	b90e      	cbnz	r6, 801afcc <_printf_i+0x118>
 801afc8:	2d00      	cmp	r5, #0
 801afca:	d04d      	beq.n	801b068 <_printf_i+0x1b4>
 801afcc:	4615      	mov	r5, r2
 801afce:	fbb6 f1f3 	udiv	r1, r6, r3
 801afd2:	fb03 6711 	mls	r7, r3, r1, r6
 801afd6:	5dc7      	ldrb	r7, [r0, r7]
 801afd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801afdc:	4637      	mov	r7, r6
 801afde:	42bb      	cmp	r3, r7
 801afe0:	460e      	mov	r6, r1
 801afe2:	d9f4      	bls.n	801afce <_printf_i+0x11a>
 801afe4:	2b08      	cmp	r3, #8
 801afe6:	d10b      	bne.n	801b000 <_printf_i+0x14c>
 801afe8:	6823      	ldr	r3, [r4, #0]
 801afea:	07de      	lsls	r6, r3, #31
 801afec:	d508      	bpl.n	801b000 <_printf_i+0x14c>
 801afee:	6923      	ldr	r3, [r4, #16]
 801aff0:	6861      	ldr	r1, [r4, #4]
 801aff2:	4299      	cmp	r1, r3
 801aff4:	bfde      	ittt	le
 801aff6:	2330      	movle	r3, #48	; 0x30
 801aff8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801affc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801b000:	1b52      	subs	r2, r2, r5
 801b002:	6122      	str	r2, [r4, #16]
 801b004:	f8cd a000 	str.w	sl, [sp]
 801b008:	464b      	mov	r3, r9
 801b00a:	aa03      	add	r2, sp, #12
 801b00c:	4621      	mov	r1, r4
 801b00e:	4640      	mov	r0, r8
 801b010:	f7ff fee2 	bl	801add8 <_printf_common>
 801b014:	3001      	adds	r0, #1
 801b016:	d14c      	bne.n	801b0b2 <_printf_i+0x1fe>
 801b018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b01c:	b004      	add	sp, #16
 801b01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b022:	4835      	ldr	r0, [pc, #212]	; (801b0f8 <_printf_i+0x244>)
 801b024:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b028:	6829      	ldr	r1, [r5, #0]
 801b02a:	6823      	ldr	r3, [r4, #0]
 801b02c:	f851 6b04 	ldr.w	r6, [r1], #4
 801b030:	6029      	str	r1, [r5, #0]
 801b032:	061d      	lsls	r5, r3, #24
 801b034:	d514      	bpl.n	801b060 <_printf_i+0x1ac>
 801b036:	07df      	lsls	r7, r3, #31
 801b038:	bf44      	itt	mi
 801b03a:	f043 0320 	orrmi.w	r3, r3, #32
 801b03e:	6023      	strmi	r3, [r4, #0]
 801b040:	b91e      	cbnz	r6, 801b04a <_printf_i+0x196>
 801b042:	6823      	ldr	r3, [r4, #0]
 801b044:	f023 0320 	bic.w	r3, r3, #32
 801b048:	6023      	str	r3, [r4, #0]
 801b04a:	2310      	movs	r3, #16
 801b04c:	e7b0      	b.n	801afb0 <_printf_i+0xfc>
 801b04e:	6823      	ldr	r3, [r4, #0]
 801b050:	f043 0320 	orr.w	r3, r3, #32
 801b054:	6023      	str	r3, [r4, #0]
 801b056:	2378      	movs	r3, #120	; 0x78
 801b058:	4828      	ldr	r0, [pc, #160]	; (801b0fc <_printf_i+0x248>)
 801b05a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b05e:	e7e3      	b.n	801b028 <_printf_i+0x174>
 801b060:	0659      	lsls	r1, r3, #25
 801b062:	bf48      	it	mi
 801b064:	b2b6      	uxthmi	r6, r6
 801b066:	e7e6      	b.n	801b036 <_printf_i+0x182>
 801b068:	4615      	mov	r5, r2
 801b06a:	e7bb      	b.n	801afe4 <_printf_i+0x130>
 801b06c:	682b      	ldr	r3, [r5, #0]
 801b06e:	6826      	ldr	r6, [r4, #0]
 801b070:	6961      	ldr	r1, [r4, #20]
 801b072:	1d18      	adds	r0, r3, #4
 801b074:	6028      	str	r0, [r5, #0]
 801b076:	0635      	lsls	r5, r6, #24
 801b078:	681b      	ldr	r3, [r3, #0]
 801b07a:	d501      	bpl.n	801b080 <_printf_i+0x1cc>
 801b07c:	6019      	str	r1, [r3, #0]
 801b07e:	e002      	b.n	801b086 <_printf_i+0x1d2>
 801b080:	0670      	lsls	r0, r6, #25
 801b082:	d5fb      	bpl.n	801b07c <_printf_i+0x1c8>
 801b084:	8019      	strh	r1, [r3, #0]
 801b086:	2300      	movs	r3, #0
 801b088:	6123      	str	r3, [r4, #16]
 801b08a:	4615      	mov	r5, r2
 801b08c:	e7ba      	b.n	801b004 <_printf_i+0x150>
 801b08e:	682b      	ldr	r3, [r5, #0]
 801b090:	1d1a      	adds	r2, r3, #4
 801b092:	602a      	str	r2, [r5, #0]
 801b094:	681d      	ldr	r5, [r3, #0]
 801b096:	6862      	ldr	r2, [r4, #4]
 801b098:	2100      	movs	r1, #0
 801b09a:	4628      	mov	r0, r5
 801b09c:	f7e5 f8b0 	bl	8000200 <memchr>
 801b0a0:	b108      	cbz	r0, 801b0a6 <_printf_i+0x1f2>
 801b0a2:	1b40      	subs	r0, r0, r5
 801b0a4:	6060      	str	r0, [r4, #4]
 801b0a6:	6863      	ldr	r3, [r4, #4]
 801b0a8:	6123      	str	r3, [r4, #16]
 801b0aa:	2300      	movs	r3, #0
 801b0ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b0b0:	e7a8      	b.n	801b004 <_printf_i+0x150>
 801b0b2:	6923      	ldr	r3, [r4, #16]
 801b0b4:	462a      	mov	r2, r5
 801b0b6:	4649      	mov	r1, r9
 801b0b8:	4640      	mov	r0, r8
 801b0ba:	47d0      	blx	sl
 801b0bc:	3001      	adds	r0, #1
 801b0be:	d0ab      	beq.n	801b018 <_printf_i+0x164>
 801b0c0:	6823      	ldr	r3, [r4, #0]
 801b0c2:	079b      	lsls	r3, r3, #30
 801b0c4:	d413      	bmi.n	801b0ee <_printf_i+0x23a>
 801b0c6:	68e0      	ldr	r0, [r4, #12]
 801b0c8:	9b03      	ldr	r3, [sp, #12]
 801b0ca:	4298      	cmp	r0, r3
 801b0cc:	bfb8      	it	lt
 801b0ce:	4618      	movlt	r0, r3
 801b0d0:	e7a4      	b.n	801b01c <_printf_i+0x168>
 801b0d2:	2301      	movs	r3, #1
 801b0d4:	4632      	mov	r2, r6
 801b0d6:	4649      	mov	r1, r9
 801b0d8:	4640      	mov	r0, r8
 801b0da:	47d0      	blx	sl
 801b0dc:	3001      	adds	r0, #1
 801b0de:	d09b      	beq.n	801b018 <_printf_i+0x164>
 801b0e0:	3501      	adds	r5, #1
 801b0e2:	68e3      	ldr	r3, [r4, #12]
 801b0e4:	9903      	ldr	r1, [sp, #12]
 801b0e6:	1a5b      	subs	r3, r3, r1
 801b0e8:	42ab      	cmp	r3, r5
 801b0ea:	dcf2      	bgt.n	801b0d2 <_printf_i+0x21e>
 801b0ec:	e7eb      	b.n	801b0c6 <_printf_i+0x212>
 801b0ee:	2500      	movs	r5, #0
 801b0f0:	f104 0619 	add.w	r6, r4, #25
 801b0f4:	e7f5      	b.n	801b0e2 <_printf_i+0x22e>
 801b0f6:	bf00      	nop
 801b0f8:	0801c3eb 	.word	0x0801c3eb
 801b0fc:	0801c3fc 	.word	0x0801c3fc

0801b100 <_read_r>:
 801b100:	b538      	push	{r3, r4, r5, lr}
 801b102:	4d07      	ldr	r5, [pc, #28]	; (801b120 <_read_r+0x20>)
 801b104:	4604      	mov	r4, r0
 801b106:	4608      	mov	r0, r1
 801b108:	4611      	mov	r1, r2
 801b10a:	2200      	movs	r2, #0
 801b10c:	602a      	str	r2, [r5, #0]
 801b10e:	461a      	mov	r2, r3
 801b110:	f7e7 f86c 	bl	80021ec <_read>
 801b114:	1c43      	adds	r3, r0, #1
 801b116:	d102      	bne.n	801b11e <_read_r+0x1e>
 801b118:	682b      	ldr	r3, [r5, #0]
 801b11a:	b103      	cbz	r3, 801b11e <_read_r+0x1e>
 801b11c:	6023      	str	r3, [r4, #0]
 801b11e:	bd38      	pop	{r3, r4, r5, pc}
 801b120:	2001582c 	.word	0x2001582c

0801b124 <abort>:
 801b124:	b508      	push	{r3, lr}
 801b126:	2006      	movs	r0, #6
 801b128:	f000 f870 	bl	801b20c <raise>
 801b12c:	2001      	movs	r0, #1
 801b12e:	f7e7 f853 	bl	80021d8 <_exit>
	...

0801b134 <_fstat_r>:
 801b134:	b538      	push	{r3, r4, r5, lr}
 801b136:	4d07      	ldr	r5, [pc, #28]	; (801b154 <_fstat_r+0x20>)
 801b138:	2300      	movs	r3, #0
 801b13a:	4604      	mov	r4, r0
 801b13c:	4608      	mov	r0, r1
 801b13e:	4611      	mov	r1, r2
 801b140:	602b      	str	r3, [r5, #0]
 801b142:	f7e7 f8cf 	bl	80022e4 <_fstat>
 801b146:	1c43      	adds	r3, r0, #1
 801b148:	d102      	bne.n	801b150 <_fstat_r+0x1c>
 801b14a:	682b      	ldr	r3, [r5, #0]
 801b14c:	b103      	cbz	r3, 801b150 <_fstat_r+0x1c>
 801b14e:	6023      	str	r3, [r4, #0]
 801b150:	bd38      	pop	{r3, r4, r5, pc}
 801b152:	bf00      	nop
 801b154:	2001582c 	.word	0x2001582c

0801b158 <_isatty_r>:
 801b158:	b538      	push	{r3, r4, r5, lr}
 801b15a:	4d06      	ldr	r5, [pc, #24]	; (801b174 <_isatty_r+0x1c>)
 801b15c:	2300      	movs	r3, #0
 801b15e:	4604      	mov	r4, r0
 801b160:	4608      	mov	r0, r1
 801b162:	602b      	str	r3, [r5, #0]
 801b164:	f7e7 f8ce 	bl	8002304 <_isatty>
 801b168:	1c43      	adds	r3, r0, #1
 801b16a:	d102      	bne.n	801b172 <_isatty_r+0x1a>
 801b16c:	682b      	ldr	r3, [r5, #0]
 801b16e:	b103      	cbz	r3, 801b172 <_isatty_r+0x1a>
 801b170:	6023      	str	r3, [r4, #0]
 801b172:	bd38      	pop	{r3, r4, r5, pc}
 801b174:	2001582c 	.word	0x2001582c

0801b178 <memmove>:
 801b178:	4288      	cmp	r0, r1
 801b17a:	b510      	push	{r4, lr}
 801b17c:	eb01 0402 	add.w	r4, r1, r2
 801b180:	d902      	bls.n	801b188 <memmove+0x10>
 801b182:	4284      	cmp	r4, r0
 801b184:	4623      	mov	r3, r4
 801b186:	d807      	bhi.n	801b198 <memmove+0x20>
 801b188:	1e43      	subs	r3, r0, #1
 801b18a:	42a1      	cmp	r1, r4
 801b18c:	d008      	beq.n	801b1a0 <memmove+0x28>
 801b18e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b192:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b196:	e7f8      	b.n	801b18a <memmove+0x12>
 801b198:	4402      	add	r2, r0
 801b19a:	4601      	mov	r1, r0
 801b19c:	428a      	cmp	r2, r1
 801b19e:	d100      	bne.n	801b1a2 <memmove+0x2a>
 801b1a0:	bd10      	pop	{r4, pc}
 801b1a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b1a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b1aa:	e7f7      	b.n	801b19c <memmove+0x24>

0801b1ac <_malloc_usable_size_r>:
 801b1ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b1b0:	1f18      	subs	r0, r3, #4
 801b1b2:	2b00      	cmp	r3, #0
 801b1b4:	bfbc      	itt	lt
 801b1b6:	580b      	ldrlt	r3, [r1, r0]
 801b1b8:	18c0      	addlt	r0, r0, r3
 801b1ba:	4770      	bx	lr

0801b1bc <_raise_r>:
 801b1bc:	291f      	cmp	r1, #31
 801b1be:	b538      	push	{r3, r4, r5, lr}
 801b1c0:	4604      	mov	r4, r0
 801b1c2:	460d      	mov	r5, r1
 801b1c4:	d904      	bls.n	801b1d0 <_raise_r+0x14>
 801b1c6:	2316      	movs	r3, #22
 801b1c8:	6003      	str	r3, [r0, #0]
 801b1ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b1ce:	bd38      	pop	{r3, r4, r5, pc}
 801b1d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b1d2:	b112      	cbz	r2, 801b1da <_raise_r+0x1e>
 801b1d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b1d8:	b94b      	cbnz	r3, 801b1ee <_raise_r+0x32>
 801b1da:	4620      	mov	r0, r4
 801b1dc:	f000 f830 	bl	801b240 <_getpid_r>
 801b1e0:	462a      	mov	r2, r5
 801b1e2:	4601      	mov	r1, r0
 801b1e4:	4620      	mov	r0, r4
 801b1e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b1ea:	f000 b817 	b.w	801b21c <_kill_r>
 801b1ee:	2b01      	cmp	r3, #1
 801b1f0:	d00a      	beq.n	801b208 <_raise_r+0x4c>
 801b1f2:	1c59      	adds	r1, r3, #1
 801b1f4:	d103      	bne.n	801b1fe <_raise_r+0x42>
 801b1f6:	2316      	movs	r3, #22
 801b1f8:	6003      	str	r3, [r0, #0]
 801b1fa:	2001      	movs	r0, #1
 801b1fc:	e7e7      	b.n	801b1ce <_raise_r+0x12>
 801b1fe:	2400      	movs	r4, #0
 801b200:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b204:	4628      	mov	r0, r5
 801b206:	4798      	blx	r3
 801b208:	2000      	movs	r0, #0
 801b20a:	e7e0      	b.n	801b1ce <_raise_r+0x12>

0801b20c <raise>:
 801b20c:	4b02      	ldr	r3, [pc, #8]	; (801b218 <raise+0xc>)
 801b20e:	4601      	mov	r1, r0
 801b210:	6818      	ldr	r0, [r3, #0]
 801b212:	f7ff bfd3 	b.w	801b1bc <_raise_r>
 801b216:	bf00      	nop
 801b218:	200005b4 	.word	0x200005b4

0801b21c <_kill_r>:
 801b21c:	b538      	push	{r3, r4, r5, lr}
 801b21e:	4d07      	ldr	r5, [pc, #28]	; (801b23c <_kill_r+0x20>)
 801b220:	2300      	movs	r3, #0
 801b222:	4604      	mov	r4, r0
 801b224:	4608      	mov	r0, r1
 801b226:	4611      	mov	r1, r2
 801b228:	602b      	str	r3, [r5, #0]
 801b22a:	f7e6 ffc5 	bl	80021b8 <_kill>
 801b22e:	1c43      	adds	r3, r0, #1
 801b230:	d102      	bne.n	801b238 <_kill_r+0x1c>
 801b232:	682b      	ldr	r3, [r5, #0]
 801b234:	b103      	cbz	r3, 801b238 <_kill_r+0x1c>
 801b236:	6023      	str	r3, [r4, #0]
 801b238:	bd38      	pop	{r3, r4, r5, pc}
 801b23a:	bf00      	nop
 801b23c:	2001582c 	.word	0x2001582c

0801b240 <_getpid_r>:
 801b240:	f7e6 bfb2 	b.w	80021a8 <_getpid>

0801b244 <_init>:
 801b244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b246:	bf00      	nop
 801b248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b24a:	bc08      	pop	{r3}
 801b24c:	469e      	mov	lr, r3
 801b24e:	4770      	bx	lr

0801b250 <_fini>:
 801b250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b252:	bf00      	nop
 801b254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b256:	bc08      	pop	{r3}
 801b258:	469e      	mov	lr, r3
 801b25a:	4770      	bx	lr
