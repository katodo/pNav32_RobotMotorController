
pNav32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bc28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001398  0801bdb8  0801bdb8  0002bdb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d150  0801d150  00030a20  2**0
                  CONTENTS
  4 .ARM          00000008  0801d150  0801d150  0002d150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d158  0801d158  00030a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  0801d158  0801d158  0002d158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d170  0801d170  0002d170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a20  20000000  0801d174  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030a20  2**0
                  CONTENTS
 10 .bss          000152e8  20000a20  20000a20  00030a20  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20015d08  20015d08  00030a20  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030a20  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031216  00000000  00000000  00030a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000704b  00000000  00000000  00061c66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002568  00000000  00000000  00068cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002278  00000000  00000000  0006b220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e31e  00000000  00000000  0006d498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00032ef8  00000000  00000000  0009b7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f65a0  00000000  00000000  000ce6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000083  00000000  00000000  001c4c4e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000aab0  00000000  00000000  001c4cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a20 	.word	0x20000a20
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801bda0 	.word	0x0801bda0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a24 	.word	0x20000a24
 80001cc:	0801bda0 	.word	0x0801bda0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_d2f>:
 8000618:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800061c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000620:	bf24      	itt	cs
 8000622:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000626:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800062a:	d90d      	bls.n	8000648 <__aeabi_d2f+0x30>
 800062c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000630:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000634:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000638:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800063c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000640:	bf08      	it	eq
 8000642:	f020 0001 	biceq.w	r0, r0, #1
 8000646:	4770      	bx	lr
 8000648:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800064c:	d121      	bne.n	8000692 <__aeabi_d2f+0x7a>
 800064e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000652:	bfbc      	itt	lt
 8000654:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000658:	4770      	bxlt	lr
 800065a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000662:	f1c2 0218 	rsb	r2, r2, #24
 8000666:	f1c2 0c20 	rsb	ip, r2, #32
 800066a:	fa10 f30c 	lsls.w	r3, r0, ip
 800066e:	fa20 f002 	lsr.w	r0, r0, r2
 8000672:	bf18      	it	ne
 8000674:	f040 0001 	orrne.w	r0, r0, #1
 8000678:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800067c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000680:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000684:	ea40 000c 	orr.w	r0, r0, ip
 8000688:	fa23 f302 	lsr.w	r3, r3, r2
 800068c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000690:	e7cc      	b.n	800062c <__aeabi_d2f+0x14>
 8000692:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000696:	d107      	bne.n	80006a8 <__aeabi_d2f+0x90>
 8000698:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800069c:	bf1e      	ittt	ne
 800069e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80006a2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80006a6:	4770      	bxne	lr
 80006a8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80006ac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80006b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <__aeabi_ldivmod>:
 80006b8:	b97b      	cbnz	r3, 80006da <__aeabi_ldivmod+0x22>
 80006ba:	b972      	cbnz	r2, 80006da <__aeabi_ldivmod+0x22>
 80006bc:	2900      	cmp	r1, #0
 80006be:	bfbe      	ittt	lt
 80006c0:	2000      	movlt	r0, #0
 80006c2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80006c6:	e006      	blt.n	80006d6 <__aeabi_ldivmod+0x1e>
 80006c8:	bf08      	it	eq
 80006ca:	2800      	cmpeq	r0, #0
 80006cc:	bf1c      	itt	ne
 80006ce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80006d2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006d6:	f000 b9bf 	b.w	8000a58 <__aeabi_idiv0>
 80006da:	f1ad 0c08 	sub.w	ip, sp, #8
 80006de:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006e2:	2900      	cmp	r1, #0
 80006e4:	db09      	blt.n	80006fa <__aeabi_ldivmod+0x42>
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	db1a      	blt.n	8000720 <__aeabi_ldivmod+0x68>
 80006ea:	f000 f84d 	bl	8000788 <__udivmoddi4>
 80006ee:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006f6:	b004      	add	sp, #16
 80006f8:	4770      	bx	lr
 80006fa:	4240      	negs	r0, r0
 80006fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000700:	2b00      	cmp	r3, #0
 8000702:	db1b      	blt.n	800073c <__aeabi_ldivmod+0x84>
 8000704:	f000 f840 	bl	8000788 <__udivmoddi4>
 8000708:	f8dd e004 	ldr.w	lr, [sp, #4]
 800070c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000710:	b004      	add	sp, #16
 8000712:	4240      	negs	r0, r0
 8000714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000718:	4252      	negs	r2, r2
 800071a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800071e:	4770      	bx	lr
 8000720:	4252      	negs	r2, r2
 8000722:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000726:	f000 f82f 	bl	8000788 <__udivmoddi4>
 800072a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800072e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000732:	b004      	add	sp, #16
 8000734:	4240      	negs	r0, r0
 8000736:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800073a:	4770      	bx	lr
 800073c:	4252      	negs	r2, r2
 800073e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000742:	f000 f821 	bl	8000788 <__udivmoddi4>
 8000746:	f8dd e004 	ldr.w	lr, [sp, #4]
 800074a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800074e:	b004      	add	sp, #16
 8000750:	4252      	negs	r2, r2
 8000752:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000756:	4770      	bx	lr

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000768:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800076c:	f000 b974 	b.w	8000a58 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f806 	bl	8000788 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__udivmoddi4>:
 8000788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800078c:	9d08      	ldr	r5, [sp, #32]
 800078e:	4604      	mov	r4, r0
 8000790:	468e      	mov	lr, r1
 8000792:	2b00      	cmp	r3, #0
 8000794:	d14d      	bne.n	8000832 <__udivmoddi4+0xaa>
 8000796:	428a      	cmp	r2, r1
 8000798:	4694      	mov	ip, r2
 800079a:	d969      	bls.n	8000870 <__udivmoddi4+0xe8>
 800079c:	fab2 f282 	clz	r2, r2
 80007a0:	b152      	cbz	r2, 80007b8 <__udivmoddi4+0x30>
 80007a2:	fa01 f302 	lsl.w	r3, r1, r2
 80007a6:	f1c2 0120 	rsb	r1, r2, #32
 80007aa:	fa20 f101 	lsr.w	r1, r0, r1
 80007ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80007b2:	ea41 0e03 	orr.w	lr, r1, r3
 80007b6:	4094      	lsls	r4, r2
 80007b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007bc:	0c21      	lsrs	r1, r4, #16
 80007be:	fbbe f6f8 	udiv	r6, lr, r8
 80007c2:	fa1f f78c 	uxth.w	r7, ip
 80007c6:	fb08 e316 	mls	r3, r8, r6, lr
 80007ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ce:	fb06 f107 	mul.w	r1, r6, r7
 80007d2:	4299      	cmp	r1, r3
 80007d4:	d90a      	bls.n	80007ec <__udivmoddi4+0x64>
 80007d6:	eb1c 0303 	adds.w	r3, ip, r3
 80007da:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007de:	f080 811f 	bcs.w	8000a20 <__udivmoddi4+0x298>
 80007e2:	4299      	cmp	r1, r3
 80007e4:	f240 811c 	bls.w	8000a20 <__udivmoddi4+0x298>
 80007e8:	3e02      	subs	r6, #2
 80007ea:	4463      	add	r3, ip
 80007ec:	1a5b      	subs	r3, r3, r1
 80007ee:	b2a4      	uxth	r4, r4
 80007f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007f4:	fb08 3310 	mls	r3, r8, r0, r3
 80007f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007fc:	fb00 f707 	mul.w	r7, r0, r7
 8000800:	42a7      	cmp	r7, r4
 8000802:	d90a      	bls.n	800081a <__udivmoddi4+0x92>
 8000804:	eb1c 0404 	adds.w	r4, ip, r4
 8000808:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800080c:	f080 810a 	bcs.w	8000a24 <__udivmoddi4+0x29c>
 8000810:	42a7      	cmp	r7, r4
 8000812:	f240 8107 	bls.w	8000a24 <__udivmoddi4+0x29c>
 8000816:	4464      	add	r4, ip
 8000818:	3802      	subs	r0, #2
 800081a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800081e:	1be4      	subs	r4, r4, r7
 8000820:	2600      	movs	r6, #0
 8000822:	b11d      	cbz	r5, 800082c <__udivmoddi4+0xa4>
 8000824:	40d4      	lsrs	r4, r2
 8000826:	2300      	movs	r3, #0
 8000828:	e9c5 4300 	strd	r4, r3, [r5]
 800082c:	4631      	mov	r1, r6
 800082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000832:	428b      	cmp	r3, r1
 8000834:	d909      	bls.n	800084a <__udivmoddi4+0xc2>
 8000836:	2d00      	cmp	r5, #0
 8000838:	f000 80ef 	beq.w	8000a1a <__udivmoddi4+0x292>
 800083c:	2600      	movs	r6, #0
 800083e:	e9c5 0100 	strd	r0, r1, [r5]
 8000842:	4630      	mov	r0, r6
 8000844:	4631      	mov	r1, r6
 8000846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084a:	fab3 f683 	clz	r6, r3
 800084e:	2e00      	cmp	r6, #0
 8000850:	d14a      	bne.n	80008e8 <__udivmoddi4+0x160>
 8000852:	428b      	cmp	r3, r1
 8000854:	d302      	bcc.n	800085c <__udivmoddi4+0xd4>
 8000856:	4282      	cmp	r2, r0
 8000858:	f200 80f9 	bhi.w	8000a4e <__udivmoddi4+0x2c6>
 800085c:	1a84      	subs	r4, r0, r2
 800085e:	eb61 0303 	sbc.w	r3, r1, r3
 8000862:	2001      	movs	r0, #1
 8000864:	469e      	mov	lr, r3
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e0      	beq.n	800082c <__udivmoddi4+0xa4>
 800086a:	e9c5 4e00 	strd	r4, lr, [r5]
 800086e:	e7dd      	b.n	800082c <__udivmoddi4+0xa4>
 8000870:	b902      	cbnz	r2, 8000874 <__udivmoddi4+0xec>
 8000872:	deff      	udf	#255	; 0xff
 8000874:	fab2 f282 	clz	r2, r2
 8000878:	2a00      	cmp	r2, #0
 800087a:	f040 8092 	bne.w	80009a2 <__udivmoddi4+0x21a>
 800087e:	eba1 010c 	sub.w	r1, r1, ip
 8000882:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000886:	fa1f fe8c 	uxth.w	lr, ip
 800088a:	2601      	movs	r6, #1
 800088c:	0c20      	lsrs	r0, r4, #16
 800088e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000892:	fb07 1113 	mls	r1, r7, r3, r1
 8000896:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089a:	fb0e f003 	mul.w	r0, lr, r3
 800089e:	4288      	cmp	r0, r1
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0x12c>
 80008a2:	eb1c 0101 	adds.w	r1, ip, r1
 80008a6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80008aa:	d202      	bcs.n	80008b2 <__udivmoddi4+0x12a>
 80008ac:	4288      	cmp	r0, r1
 80008ae:	f200 80cb 	bhi.w	8000a48 <__udivmoddi4+0x2c0>
 80008b2:	4643      	mov	r3, r8
 80008b4:	1a09      	subs	r1, r1, r0
 80008b6:	b2a4      	uxth	r4, r4
 80008b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80008bc:	fb07 1110 	mls	r1, r7, r0, r1
 80008c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008c4:	fb0e fe00 	mul.w	lr, lr, r0
 80008c8:	45a6      	cmp	lr, r4
 80008ca:	d908      	bls.n	80008de <__udivmoddi4+0x156>
 80008cc:	eb1c 0404 	adds.w	r4, ip, r4
 80008d0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80008d4:	d202      	bcs.n	80008dc <__udivmoddi4+0x154>
 80008d6:	45a6      	cmp	lr, r4
 80008d8:	f200 80bb 	bhi.w	8000a52 <__udivmoddi4+0x2ca>
 80008dc:	4608      	mov	r0, r1
 80008de:	eba4 040e 	sub.w	r4, r4, lr
 80008e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008e6:	e79c      	b.n	8000822 <__udivmoddi4+0x9a>
 80008e8:	f1c6 0720 	rsb	r7, r6, #32
 80008ec:	40b3      	lsls	r3, r6
 80008ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80008f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008f6:	fa20 f407 	lsr.w	r4, r0, r7
 80008fa:	fa01 f306 	lsl.w	r3, r1, r6
 80008fe:	431c      	orrs	r4, r3
 8000900:	40f9      	lsrs	r1, r7
 8000902:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000906:	fa00 f306 	lsl.w	r3, r0, r6
 800090a:	fbb1 f8f9 	udiv	r8, r1, r9
 800090e:	0c20      	lsrs	r0, r4, #16
 8000910:	fa1f fe8c 	uxth.w	lr, ip
 8000914:	fb09 1118 	mls	r1, r9, r8, r1
 8000918:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800091c:	fb08 f00e 	mul.w	r0, r8, lr
 8000920:	4288      	cmp	r0, r1
 8000922:	fa02 f206 	lsl.w	r2, r2, r6
 8000926:	d90b      	bls.n	8000940 <__udivmoddi4+0x1b8>
 8000928:	eb1c 0101 	adds.w	r1, ip, r1
 800092c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000930:	f080 8088 	bcs.w	8000a44 <__udivmoddi4+0x2bc>
 8000934:	4288      	cmp	r0, r1
 8000936:	f240 8085 	bls.w	8000a44 <__udivmoddi4+0x2bc>
 800093a:	f1a8 0802 	sub.w	r8, r8, #2
 800093e:	4461      	add	r1, ip
 8000940:	1a09      	subs	r1, r1, r0
 8000942:	b2a4      	uxth	r4, r4
 8000944:	fbb1 f0f9 	udiv	r0, r1, r9
 8000948:	fb09 1110 	mls	r1, r9, r0, r1
 800094c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000950:	fb00 fe0e 	mul.w	lr, r0, lr
 8000954:	458e      	cmp	lr, r1
 8000956:	d908      	bls.n	800096a <__udivmoddi4+0x1e2>
 8000958:	eb1c 0101 	adds.w	r1, ip, r1
 800095c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000960:	d26c      	bcs.n	8000a3c <__udivmoddi4+0x2b4>
 8000962:	458e      	cmp	lr, r1
 8000964:	d96a      	bls.n	8000a3c <__udivmoddi4+0x2b4>
 8000966:	3802      	subs	r0, #2
 8000968:	4461      	add	r1, ip
 800096a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800096e:	fba0 9402 	umull	r9, r4, r0, r2
 8000972:	eba1 010e 	sub.w	r1, r1, lr
 8000976:	42a1      	cmp	r1, r4
 8000978:	46c8      	mov	r8, r9
 800097a:	46a6      	mov	lr, r4
 800097c:	d356      	bcc.n	8000a2c <__udivmoddi4+0x2a4>
 800097e:	d053      	beq.n	8000a28 <__udivmoddi4+0x2a0>
 8000980:	b15d      	cbz	r5, 800099a <__udivmoddi4+0x212>
 8000982:	ebb3 0208 	subs.w	r2, r3, r8
 8000986:	eb61 010e 	sbc.w	r1, r1, lr
 800098a:	fa01 f707 	lsl.w	r7, r1, r7
 800098e:	fa22 f306 	lsr.w	r3, r2, r6
 8000992:	40f1      	lsrs	r1, r6
 8000994:	431f      	orrs	r7, r3
 8000996:	e9c5 7100 	strd	r7, r1, [r5]
 800099a:	2600      	movs	r6, #0
 800099c:	4631      	mov	r1, r6
 800099e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a2:	f1c2 0320 	rsb	r3, r2, #32
 80009a6:	40d8      	lsrs	r0, r3
 80009a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ac:	fa21 f303 	lsr.w	r3, r1, r3
 80009b0:	4091      	lsls	r1, r2
 80009b2:	4301      	orrs	r1, r0
 80009b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b8:	fa1f fe8c 	uxth.w	lr, ip
 80009bc:	fbb3 f0f7 	udiv	r0, r3, r7
 80009c0:	fb07 3610 	mls	r6, r7, r0, r3
 80009c4:	0c0b      	lsrs	r3, r1, #16
 80009c6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009ca:	fb00 f60e 	mul.w	r6, r0, lr
 80009ce:	429e      	cmp	r6, r3
 80009d0:	fa04 f402 	lsl.w	r4, r4, r2
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x260>
 80009d6:	eb1c 0303 	adds.w	r3, ip, r3
 80009da:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80009de:	d22f      	bcs.n	8000a40 <__udivmoddi4+0x2b8>
 80009e0:	429e      	cmp	r6, r3
 80009e2:	d92d      	bls.n	8000a40 <__udivmoddi4+0x2b8>
 80009e4:	3802      	subs	r0, #2
 80009e6:	4463      	add	r3, ip
 80009e8:	1b9b      	subs	r3, r3, r6
 80009ea:	b289      	uxth	r1, r1
 80009ec:	fbb3 f6f7 	udiv	r6, r3, r7
 80009f0:	fb07 3316 	mls	r3, r7, r6, r3
 80009f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009f8:	fb06 f30e 	mul.w	r3, r6, lr
 80009fc:	428b      	cmp	r3, r1
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x28a>
 8000a00:	eb1c 0101 	adds.w	r1, ip, r1
 8000a04:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000a08:	d216      	bcs.n	8000a38 <__udivmoddi4+0x2b0>
 8000a0a:	428b      	cmp	r3, r1
 8000a0c:	d914      	bls.n	8000a38 <__udivmoddi4+0x2b0>
 8000a0e:	3e02      	subs	r6, #2
 8000a10:	4461      	add	r1, ip
 8000a12:	1ac9      	subs	r1, r1, r3
 8000a14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a18:	e738      	b.n	800088c <__udivmoddi4+0x104>
 8000a1a:	462e      	mov	r6, r5
 8000a1c:	4628      	mov	r0, r5
 8000a1e:	e705      	b.n	800082c <__udivmoddi4+0xa4>
 8000a20:	4606      	mov	r6, r0
 8000a22:	e6e3      	b.n	80007ec <__udivmoddi4+0x64>
 8000a24:	4618      	mov	r0, r3
 8000a26:	e6f8      	b.n	800081a <__udivmoddi4+0x92>
 8000a28:	454b      	cmp	r3, r9
 8000a2a:	d2a9      	bcs.n	8000980 <__udivmoddi4+0x1f8>
 8000a2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a34:	3801      	subs	r0, #1
 8000a36:	e7a3      	b.n	8000980 <__udivmoddi4+0x1f8>
 8000a38:	4646      	mov	r6, r8
 8000a3a:	e7ea      	b.n	8000a12 <__udivmoddi4+0x28a>
 8000a3c:	4620      	mov	r0, r4
 8000a3e:	e794      	b.n	800096a <__udivmoddi4+0x1e2>
 8000a40:	4640      	mov	r0, r8
 8000a42:	e7d1      	b.n	80009e8 <__udivmoddi4+0x260>
 8000a44:	46d0      	mov	r8, sl
 8000a46:	e77b      	b.n	8000940 <__udivmoddi4+0x1b8>
 8000a48:	3b02      	subs	r3, #2
 8000a4a:	4461      	add	r1, ip
 8000a4c:	e732      	b.n	80008b4 <__udivmoddi4+0x12c>
 8000a4e:	4630      	mov	r0, r6
 8000a50:	e709      	b.n	8000866 <__udivmoddi4+0xde>
 8000a52:	4464      	add	r4, ip
 8000a54:	3802      	subs	r0, #2
 8000a56:	e742      	b.n	80008de <__udivmoddi4+0x156>

08000a58 <__aeabi_idiv0>:
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a70:	4a21      	ldr	r2, [pc, #132]	; (8000af8 <MX_ADC1_Init+0x9c>)
 8000a72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a88:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a8e:	4b19      	ldr	r3, [pc, #100]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000a9e:	4a17      	ldr	r2, [pc, #92]	; (8000afc <MX_ADC1_Init+0xa0>)
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000abe:	f002 fa93 	bl	8002fe8 <HAL_ADC_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ac8:	f001 f8cc 	bl	8001c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad8:	463b      	mov	r3, r7
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_ADC1_Init+0x98>)
 8000ade:	f002 fac7 	bl	8003070 <HAL_ADC_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ae8:	f001 f8bc 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000a3c 	.word	0x20000a3c
 8000af8:	40012000 	.word	0x40012000
 8000afc:	0f000001 	.word	0x0f000001

08000b00 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b06:	463b      	mov	r3, r7
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000b12:	4b64      	ldr	r3, [pc, #400]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b14:	4a64      	ldr	r2, [pc, #400]	; (8000ca8 <MX_ADC3_Init+0x1a8>)
 8000b16:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b18:	4b62      	ldr	r3, [pc, #392]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b1e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b20:	4b60      	ldr	r3, [pc, #384]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8000b26:	4b5f      	ldr	r3, [pc, #380]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b2c:	4b5d      	ldr	r3, [pc, #372]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b32:	4b5c      	ldr	r3, [pc, #368]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b3a:	4b5a      	ldr	r3, [pc, #360]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8000b42:	4b58      	ldr	r3, [pc, #352]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b44:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b4a:	4b56      	ldr	r3, [pc, #344]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 12;
 8000b50:	4b54      	ldr	r3, [pc, #336]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b52:	220c      	movs	r2, #12
 8000b54:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b56:	4b53      	ldr	r3, [pc, #332]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b5e:	4b51      	ldr	r3, [pc, #324]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b64:	484f      	ldr	r0, [pc, #316]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b66:	f002 fa3f 	bl	8002fe8 <HAL_ADC_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 8000b70:	f001 f878 	bl	8001c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000b74:	230a      	movs	r3, #10
 8000b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b80:	463b      	mov	r3, r7
 8000b82:	4619      	mov	r1, r3
 8000b84:	4847      	ldr	r0, [pc, #284]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b86:	f002 fa73 	bl	8003070 <HAL_ADC_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000b90:	f001 f868 	bl	8001c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4841      	ldr	r0, [pc, #260]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000b9e:	f002 fa67 	bl	8003070 <HAL_ADC_ConfigChannel>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000ba8:	f001 f85c 	bl	8001c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8000bac:	2303      	movs	r3, #3
 8000bae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	483b      	ldr	r0, [pc, #236]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000bb6:	f002 fa5b 	bl	8003070 <HAL_ADC_ConfigChannel>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_ADC3_Init+0xc4>
  {
    Error_Handler();
 8000bc0:	f001 f850 	bl	8001c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bc8:	463b      	mov	r3, r7
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4835      	ldr	r0, [pc, #212]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000bce:	f002 fa4f 	bl	8003070 <HAL_ADC_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000bd8:	f001 f844 	bl	8001c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 5;
 8000bdc:	2305      	movs	r3, #5
 8000bde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	482f      	ldr	r0, [pc, #188]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000be6:	f002 fa43 	bl	8003070 <HAL_ADC_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 8000bf0:	f001 f838 	bl	8001c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 8000bf4:	2306      	movs	r3, #6
 8000bf6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4829      	ldr	r0, [pc, #164]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000bfe:	f002 fa37 	bl	8003070 <HAL_ADC_ConfigChannel>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_ADC3_Init+0x10c>
  {
    Error_Handler();
 8000c08:	f001 f82c 	bl	8001c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 7;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c10:	463b      	mov	r3, r7
 8000c12:	4619      	mov	r1, r3
 8000c14:	4823      	ldr	r0, [pc, #140]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c16:	f002 fa2b 	bl	8003070 <HAL_ADC_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC3_Init+0x124>
  {
    Error_Handler();
 8000c20:	f001 f820 	bl	8001c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 8;
 8000c24:	2308      	movs	r3, #8
 8000c26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c28:	463b      	mov	r3, r7
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481d      	ldr	r0, [pc, #116]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c2e:	f002 fa1f 	bl	8003070 <HAL_ADC_ConfigChannel>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC3_Init+0x13c>
  {
    Error_Handler();
 8000c38:	f001 f814 	bl	8001c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 9;
 8000c3c:	2309      	movs	r3, #9
 8000c3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c40:	463b      	mov	r3, r7
 8000c42:	4619      	mov	r1, r3
 8000c44:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c46:	f002 fa13 	bl	8003070 <HAL_ADC_ConfigChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC3_Init+0x154>
  {
    Error_Handler();
 8000c50:	f001 f808 	bl	8001c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 10;
 8000c54:	230a      	movs	r3, #10
 8000c56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c58:	463b      	mov	r3, r7
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c5e:	f002 fa07 	bl	8003070 <HAL_ADC_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_ADC3_Init+0x16c>
  {
    Error_Handler();
 8000c68:	f000 fffc 	bl	8001c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 11;
 8000c6c:	230b      	movs	r3, #11
 8000c6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	4619      	mov	r1, r3
 8000c74:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c76:	f002 f9fb 	bl	8003070 <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC3_Init+0x184>
  {
    Error_Handler();
 8000c80:	f000 fff0 	bl	8001c64 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 12;
 8000c84:	230c      	movs	r3, #12
 8000c86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_ADC3_Init+0x1a4>)
 8000c8e:	f002 f9ef 	bl	8003070 <HAL_ADC_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ADC3_Init+0x19c>
  {
    Error_Handler();
 8000c98:	f000 ffe4 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3710      	adds	r7, #16
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000a84 	.word	0x20000a84
 8000ca8:	40012200 	.word	0x40012200

08000cac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08c      	sub	sp, #48	; 0x30
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a53      	ldr	r2, [pc, #332]	; (8000e18 <HAL_ADC_MspInit+0x16c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d142      	bne.n	8000d54 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
 8000cd2:	4b52      	ldr	r3, [pc, #328]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	4a51      	ldr	r2, [pc, #324]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cde:	4b4f      	ldr	r3, [pc, #316]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	4b4b      	ldr	r3, [pc, #300]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a4a      	ldr	r2, [pc, #296]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b48      	ldr	r3, [pc, #288]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b44      	ldr	r3, [pc, #272]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a43      	ldr	r2, [pc, #268]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b41      	ldr	r3, [pc, #260]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC_VREF_Pin;
 8000d22:	2304      	movs	r3, #4
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d26:	2303      	movs	r3, #3
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_VREF_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	483a      	ldr	r0, [pc, #232]	; (8000e20 <HAL_ADC_MspInit+0x174>)
 8000d36:	f003 f8b9 	bl	8003eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_TEMP_Pin;
 8000d3a:	2304      	movs	r3, #4
 8000d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ADC_TEMP_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4835      	ldr	r0, [pc, #212]	; (8000e24 <HAL_ADC_MspInit+0x178>)
 8000d4e:	f003 f8ad 	bl	8003eac <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000d52:	e05d      	b.n	8000e10 <HAL_ADC_MspInit+0x164>
  else if(adcHandle->Instance==ADC3)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a33      	ldr	r2, [pc, #204]	; (8000e28 <HAL_ADC_MspInit+0x17c>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d158      	bne.n	8000e10 <HAL_ADC_MspInit+0x164>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b2e      	ldr	r3, [pc, #184]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a2d      	ldr	r2, [pc, #180]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b2b      	ldr	r3, [pc, #172]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
 8000d7e:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a26      	ldr	r2, [pc, #152]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <HAL_ADC_MspInit+0x170>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0304 	and.w	r3, r3, #4
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_MOT1_CUR_Pin|ADC_MOT2_CUR_Pin|ADC_VREF_Pin;
 8000d96:	2307      	movs	r3, #7
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	4619      	mov	r1, r3
 8000da8:	481d      	ldr	r0, [pc, #116]	; (8000e20 <HAL_ADC_MspInit+0x174>)
 8000daa:	f003 f87f 	bl	8003eac <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000db0:	4a1f      	ldr	r2, [pc, #124]	; (8000e30 <HAL_ADC_MspInit+0x184>)
 8000db2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000db6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000dba:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dce:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dd6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dde:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000de8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dec:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000df6:	f002 fc57 	bl	80036a8 <HAL_DMA_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_ADC_MspInit+0x158>
      Error_Handler();
 8000e00:	f000 ff30 	bl	8001c64 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
 8000e0a:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_ADC_MspInit+0x180>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e10:	bf00      	nop
 8000e12:	3730      	adds	r7, #48	; 0x30
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40012000 	.word	0x40012000
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020800 	.word	0x40020800
 8000e24:	40020000 	.word	0x40020000
 8000e28:	40012200 	.word	0x40012200
 8000e2c:	20000acc 	.word	0x20000acc
 8000e30:	40026410 	.word	0x40026410

08000e34 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_CRC_Init+0x20>)
 8000e3a:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <MX_CRC_Init+0x24>)
 8000e3c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_CRC_Init+0x20>)
 8000e40:	f002 fc16 	bl	8003670 <HAL_CRC_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e4a:	f000 ff0b 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000b2c 	.word	0x20000b2c
 8000e58:	40023000 	.word	0x40023000

08000e5c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <HAL_CRC_MspInit+0x3c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d10d      	bne.n	8000e8a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <HAL_CRC_MspInit+0x40>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <HAL_CRC_MspInit+0x40>)
 8000e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <HAL_CRC_MspInit+0x40>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40023000 	.word	0x40023000
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000eac:	f00c fda4 	bl	800d9f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000eb0:	4b58      	ldr	r3, [pc, #352]	; (8001014 <pvPortMallocMicroROS+0x174>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d101      	bne.n	8000ebc <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000eb8:	f000 f980 	bl	80011bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000ebc:	4b56      	ldr	r3, [pc, #344]	; (8001018 <pvPortMallocMicroROS+0x178>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f040 808e 	bne.w	8000fe6 <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d01d      	beq.n	8000f0c <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d014      	beq.n	8000f0c <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f023 0307 	bic.w	r3, r3, #7
 8000ee8:	3308      	adds	r3, #8
 8000eea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00a      	beq.n	8000f0c <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000efa:	f383 8811 	msr	BASEPRI, r3
 8000efe:	f3bf 8f6f 	isb	sy
 8000f02:	f3bf 8f4f 	dsb	sy
 8000f06:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000f08:	bf00      	nop
 8000f0a:	e7fe      	b.n	8000f0a <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d069      	beq.n	8000fe6 <pvPortMallocMicroROS+0x146>
 8000f12:	4b42      	ldr	r3, [pc, #264]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d864      	bhi.n	8000fe6 <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000f1c:	4b40      	ldr	r3, [pc, #256]	; (8001020 <pvPortMallocMicroROS+0x180>)
 8000f1e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000f20:	4b3f      	ldr	r3, [pc, #252]	; (8001020 <pvPortMallocMicroROS+0x180>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f26:	e004      	b.n	8000f32 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d903      	bls.n	8000f44 <pvPortMallocMicroROS+0xa4>
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1f1      	bne.n	8000f28 <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000f44:	4b33      	ldr	r3, [pc, #204]	; (8001014 <pvPortMallocMicroROS+0x174>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d04b      	beq.n	8000fe6 <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000f4e:	6a3b      	ldr	r3, [r7, #32]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2208      	movs	r2, #8
 8000f54:	4413      	add	r3, r2
 8000f56:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
 8000f5e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	1ad2      	subs	r2, r2, r3
 8000f68:	2308      	movs	r3, #8
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d91f      	bls.n	8000fb0 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00a      	beq.n	8000f98 <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8000f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f86:	f383 8811 	msr	BASEPRI, r3
 8000f8a:	f3bf 8f6f 	isb	sy
 8000f8e:	f3bf 8f4f 	dsb	sy
 8000f92:	613b      	str	r3, [r7, #16]
}
 8000f94:	bf00      	nop
 8000f96:	e7fe      	b.n	8000f96 <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	685a      	ldr	r2, [r3, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	1ad2      	subs	r2, r2, r3
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000faa:	69b8      	ldr	r0, [r7, #24]
 8000fac:	f000 f968 	bl	8001280 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	4a18      	ldr	r2, [pc, #96]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000fbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <pvPortMallocMicroROS+0x184>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d203      	bcs.n	8000fd2 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <pvPortMallocMicroROS+0x17c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a15      	ldr	r2, [pc, #84]	; (8001024 <pvPortMallocMicroROS+0x184>)
 8000fd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <pvPortMallocMicroROS+0x178>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000fe6:	f00c fd15 	bl	800da14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00a      	beq.n	800100a <pvPortMallocMicroROS+0x16a>
	__asm volatile
 8000ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ff8:	f383 8811 	msr	BASEPRI, r3
 8000ffc:	f3bf 8f6f 	isb	sy
 8001000:	f3bf 8f4f 	dsb	sy
 8001004:	60fb      	str	r3, [r7, #12]
}
 8001006:	bf00      	nop
 8001008:	e7fe      	b.n	8001008 <pvPortMallocMicroROS+0x168>
	return pvReturn;
 800100a:	69fb      	ldr	r3, [r7, #28]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3728      	adds	r7, #40	; 0x28
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000473c 	.word	0x2000473c
 8001018:	20004748 	.word	0x20004748
 800101c:	20004740 	.word	0x20004740
 8001020:	20004734 	.word	0x20004734
 8001024:	20004744 	.word	0x20004744

08001028 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d048      	beq.n	80010cc <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800103a:	2308      	movs	r3, #8
 800103c:	425b      	negs	r3, r3
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4413      	add	r3, r2
 8001042:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <vPortFreeMicroROS+0xac>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4013      	ands	r3, r2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10a      	bne.n	800106c <vPortFreeMicroROS+0x44>
	__asm volatile
 8001056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105a:	f383 8811 	msr	BASEPRI, r3
 800105e:	f3bf 8f6f 	isb	sy
 8001062:	f3bf 8f4f 	dsb	sy
 8001066:	60fb      	str	r3, [r7, #12]
}
 8001068:	bf00      	nop
 800106a:	e7fe      	b.n	800106a <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00a      	beq.n	800108a <vPortFreeMicroROS+0x62>
	__asm volatile
 8001074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001078:	f383 8811 	msr	BASEPRI, r3
 800107c:	f3bf 8f6f 	isb	sy
 8001080:	f3bf 8f4f 	dsb	sy
 8001084:	60bb      	str	r3, [r7, #8]
}
 8001086:	bf00      	nop
 8001088:	e7fe      	b.n	8001088 <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <vPortFreeMicroROS+0xac>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4013      	ands	r3, r2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d019      	beq.n	80010cc <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d115      	bne.n	80010cc <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <vPortFreeMicroROS+0xac>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	401a      	ands	r2, r3
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80010b0:	f00c fca2 	bl	800d9f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <vPortFreeMicroROS+0xb0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4413      	add	r3, r2
 80010be:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <vPortFreeMicroROS+0xb0>)
 80010c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80010c2:	6938      	ldr	r0, [r7, #16]
 80010c4:	f000 f8dc 	bl	8001280 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80010c8:	f00c fca4 	bl	800da14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80010cc:	bf00      	nop
 80010ce:	3718      	adds	r7, #24
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20004748 	.word	0x20004748
 80010d8:	20004740 	.word	0x20004740

080010dc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80010dc:	b480      	push	{r7}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80010e8:	2308      	movs	r3, #8
 80010ea:	425b      	negs	r3, r3
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	4413      	add	r3, r2
 80010f0:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <getBlockSize+0x38>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	43db      	mvns	r3, r3
 8001100:	4013      	ands	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]

	return count;
 8001104:	68fb      	ldr	r3, [r7, #12]
}
 8001106:	4618      	mov	r0, r3
 8001108:	371c      	adds	r7, #28
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20004748 	.word	0x20004748

08001118 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001122:	f00c fc69 	bl	800d9f8 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001126:	6838      	ldr	r0, [r7, #0]
 8001128:	f7ff feba 	bl	8000ea0 <pvPortMallocMicroROS>
 800112c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d017      	beq.n	8001164 <pvPortReallocMicroROS+0x4c>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d014      	beq.n	8001164 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffce 	bl	80010dc <getBlockSize>
 8001140:	4603      	mov	r3, r0
 8001142:	2208      	movs	r2, #8
 8001144:	1a9b      	subs	r3, r3, r2
 8001146:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d201      	bcs.n	8001154 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f019 fb25 	bl	801a7a8 <memcpy>

		vPortFreeMicroROS(pv);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ff62 	bl	8001028 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001164:	f00c fc56 	bl	800da14 <xTaskResumeAll>

	return newmem;
 8001168:	68bb      	ldr	r3, [r7, #8]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800117c:	f00c fc3c 	bl	800d9f8 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff fe88 	bl	8000ea0 <pvPortMallocMicroROS>
 8001190:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001196:	e004      	b.n	80011a2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	613a      	str	r2, [r7, #16]
 800119e:	2200      	movs	r2, #0
 80011a0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	1e5a      	subs	r2, r3, #1
 80011a6:	617a      	str	r2, [r7, #20]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f5      	bne.n	8001198 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80011ac:	f00c fc32 	bl	800da14 <xTaskResumeAll>
  	return mem;
 80011b0:	68fb      	ldr	r3, [r7, #12]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80011c2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80011c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80011c8:	4b27      	ldr	r3, [pc, #156]	; (8001268 <prvHeapInit+0xac>)
 80011ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00c      	beq.n	80011f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	3307      	adds	r3, #7
 80011da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f023 0307 	bic.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80011e4:	68ba      	ldr	r2, [r7, #8]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <prvHeapInit+0xac>)
 80011ec:	4413      	add	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80011f4:	4a1d      	ldr	r2, [pc, #116]	; (800126c <prvHeapInit+0xb0>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <prvHeapInit+0xb0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68ba      	ldr	r2, [r7, #8]
 8001204:	4413      	add	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001208:	2208      	movs	r2, #8
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f023 0307 	bic.w	r3, r3, #7
 8001216:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4a15      	ldr	r2, [pc, #84]	; (8001270 <prvHeapInit+0xb4>)
 800121c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <prvHeapInit+0xb4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <prvHeapInit+0xb4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	1ad2      	subs	r2, r2, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <prvHeapInit+0xb4>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <prvHeapInit+0xb8>)
 800124a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4a09      	ldr	r2, [pc, #36]	; (8001278 <prvHeapInit+0xbc>)
 8001252:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <prvHeapInit+0xc0>)
 8001256:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800125a:	601a      	str	r2, [r3, #0]
}
 800125c:	bf00      	nop
 800125e:	3714      	adds	r7, #20
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	20000b34 	.word	0x20000b34
 800126c:	20004734 	.word	0x20004734
 8001270:	2000473c 	.word	0x2000473c
 8001274:	20004744 	.word	0x20004744
 8001278:	20004740 	.word	0x20004740
 800127c:	20004748 	.word	0x20004748

08001280 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001288:	4b28      	ldr	r3, [pc, #160]	; (800132c <prvInsertBlockIntoFreeList+0xac>)
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	e002      	b.n	8001294 <prvInsertBlockIntoFreeList+0x14>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	429a      	cmp	r2, r3
 800129c:	d8f7      	bhi.n	800128e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	4413      	add	r3, r2
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d108      	bne.n	80012c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	441a      	add	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	441a      	add	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d118      	bne.n	8001308 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <prvInsertBlockIntoFreeList+0xb0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d00d      	beq.n	80012fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	441a      	add	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	e008      	b.n	8001310 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <prvInsertBlockIntoFreeList+0xb0>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e003      	b.n	8001310 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	d002      	beq.n	800131e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20004734 	.word	0x20004734
 8001330:	2000473c 	.word	0x2000473c

08001334 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_DMA_Init+0x5c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a13      	ldr	r2, [pc, #76]	; (8001390 <MX_DMA_Init+0x5c>)
 8001344:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_DMA_Init+0x5c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2105      	movs	r1, #5
 800135a:	2038      	movs	r0, #56	; 0x38
 800135c:	f002 f95e 	bl	800361c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001360:	2038      	movs	r0, #56	; 0x38
 8001362:	f002 f977 	bl	8003654 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2105      	movs	r1, #5
 800136a:	203a      	movs	r0, #58	; 0x3a
 800136c:	f002 f956 	bl	800361c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001370:	203a      	movs	r0, #58	; 0x3a
 8001372:	f002 f96f 	bl	8003654 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2105      	movs	r1, #5
 800137a:	2046      	movs	r0, #70	; 0x46
 800137c:	f002 f94e 	bl	800361c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001380:	2046      	movs	r0, #70	; 0x46
 8001382:	f002 f967 	bl	8003654 <HAL_NVIC_EnableIRQ>

}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800

08001394 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80013a2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80013a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013a8:	4904      	ldr	r1, [pc, #16]	; (80013bc <cubemx_transport_open+0x28>)
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f006 fc44 	bl	8007c38 <HAL_UART_Receive_DMA>
    return true;
 80013b0:	2301      	movs	r3, #1
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000474c 	.word	0x2000474c

080013c0 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80013ce:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80013d0:	68f8      	ldr	r0, [r7, #12]
 80013d2:	f006 fc61 	bl	8007c98 <HAL_UART_DMAStop>
    return true;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80013f4:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b20      	cmp	r3, #32
 8001400:	d11c      	bne.n	800143c <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	b29b      	uxth	r3, r3
 8001406:	461a      	mov	r2, r3
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f006 fb96 	bl	8007b3c <HAL_UART_Transmit_DMA>
 8001410:	4603      	mov	r3, r0
 8001412:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001414:	e002      	b.n	800141c <cubemx_transport_write+0x3c>
            osDelay(1);
 8001416:	2001      	movs	r0, #1
 8001418:	f00b faa2 	bl	800c960 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800141c:	7cfb      	ldrb	r3, [r7, #19]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d105      	bne.n	800142e <cubemx_transport_write+0x4e>
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b20      	cmp	r3, #32
 800142c:	d1f3      	bne.n	8001416 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 800142e:	7cfb      	ldrb	r3, [r7, #19]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <cubemx_transport_write+0x58>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	e002      	b.n	800143e <cubemx_transport_write+0x5e>
 8001438:	2300      	movs	r3, #0
 800143a:	e000      	b.n	800143e <cubemx_transport_write+0x5e>
    }else{
        return 0;
 800143c:	2300      	movs	r3, #0
    }
}
 800143e:	4618      	mov	r0, r3
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001448:	b580      	push	{r7, lr}
 800144a:	b088      	sub	sp, #32
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800145c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001462:	b672      	cpsid	i
}
 8001464:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001472:	4a1c      	ldr	r2, [pc, #112]	; (80014e4 <cubemx_transport_read+0x9c>)
 8001474:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001476:	b662      	cpsie	i
}
 8001478:	bf00      	nop
        __enable_irq();
        ms_used++;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3301      	adds	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001480:	2001      	movs	r0, #1
 8001482:	f00b fa6d 	bl	800c960 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <cubemx_transport_read+0xa0>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <cubemx_transport_read+0x9c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	429a      	cmp	r2, r3
 8001490:	d103      	bne.n	800149a <cubemx_transport_read+0x52>
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	dbe3      	blt.n	8001462 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800149e:	e011      	b.n	80014c4 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <cubemx_transport_read+0xa0>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	440b      	add	r3, r1
 80014aa:	4910      	ldr	r1, [pc, #64]	; (80014ec <cubemx_transport_read+0xa4>)
 80014ac:	5c8a      	ldrb	r2, [r1, r2]
 80014ae:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <cubemx_transport_read+0xa0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <cubemx_transport_read+0xa0>)
 80014bc:	6013      	str	r3, [r2, #0]
        wrote++;
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	3301      	adds	r3, #1
 80014c2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <cubemx_transport_read+0xa0>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <cubemx_transport_read+0x9c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d003      	beq.n	80014d8 <cubemx_transport_read+0x90>
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d3e3      	bcc.n	80014a0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80014d8:	69bb      	ldr	r3, [r7, #24]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3720      	adds	r7, #32
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20004f50 	.word	0x20004f50
 80014e8:	20004f4c 	.word	0x20004f4c
 80014ec:	2000474c 	.word	0x2000474c

080014f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of rosTaskLed */
  rosTaskLedHandle = osThreadNew(StartTaskLed, NULL, &rosTaskLed_attributes);
 80014f4:	4a08      	ldr	r2, [pc, #32]	; (8001518 <MX_FREERTOS_Init+0x28>)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4808      	ldr	r0, [pc, #32]	; (800151c <MX_FREERTOS_Init+0x2c>)
 80014fa:	f00b f99f 	bl	800c83c <osThreadNew>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <MX_FREERTOS_Init+0x30>)
 8001502:	6013      	str	r3, [r2, #0]

  /* creation of rosTaskCom */
  rosTaskComHandle = osThreadNew(StartTaskCom, NULL, &rosTaskCom_attributes);
 8001504:	4a07      	ldr	r2, [pc, #28]	; (8001524 <MX_FREERTOS_Init+0x34>)
 8001506:	2100      	movs	r1, #0
 8001508:	4807      	ldr	r0, [pc, #28]	; (8001528 <MX_FREERTOS_Init+0x38>)
 800150a:	f00b f997 	bl	800c83c <osThreadNew>
 800150e:	4603      	mov	r3, r0
 8001510:	4a06      	ldr	r2, [pc, #24]	; (800152c <MX_FREERTOS_Init+0x3c>)
 8001512:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	0801bea0 	.word	0x0801bea0
 800151c:	08001531 	.word	0x08001531
 8001520:	20005020 	.word	0x20005020
 8001524:	0801bec4 	.word	0x0801bec4
 8001528:	08001569 	.word	0x08001569
 800152c:	200058e0 	.word	0x200058e0

08001530 <StartTaskLed>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskLed */
void StartTaskLed(void *argument)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001538:	f00d fed8 	bl	800f2ec <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartTaskLed */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_WritePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin, 1);
 800153c:	2201      	movs	r2, #1
 800153e:	2140      	movs	r1, #64	; 0x40
 8001540:	4807      	ldr	r0, [pc, #28]	; (8001560 <StartTaskLed+0x30>)
 8001542:	f002 fe4f 	bl	80041e4 <HAL_GPIO_WritePin>
		osDelay(100);
 8001546:	2064      	movs	r0, #100	; 0x64
 8001548:	f00b fa0a 	bl	800c960 <osDelay>
		HAL_GPIO_WritePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2140      	movs	r1, #64	; 0x40
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <StartTaskLed+0x30>)
 8001552:	f002 fe47 	bl	80041e4 <HAL_GPIO_WritePin>
		osDelay(200);
 8001556:	20c8      	movs	r0, #200	; 0xc8
 8001558:	f00b fa02 	bl	800c960 <osDelay>
		HAL_GPIO_WritePin(O_LED_D2_GPIO_Port, O_LED_D2_Pin, 1);
 800155c:	e7ee      	b.n	800153c <StartTaskLed+0xc>
 800155e:	bf00      	nop
 8001560:	40020000 	.word	0x40020000
 8001564:	00000000 	.word	0x00000000

08001568 <StartTaskCom>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCom */
void StartTaskCom(void *argument)
{
 8001568:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800156c:	b0a4      	sub	sp, #144	; 0x90
 800156e:	af02      	add	r7, sp, #8
 8001570:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartTaskCom */
	rmw_uros_set_custom_transport(
 8001572:	4ba3      	ldr	r3, [pc, #652]	; (8001800 <StartTaskCom+0x298>)
 8001574:	9301      	str	r3, [sp, #4]
 8001576:	4ba3      	ldr	r3, [pc, #652]	; (8001804 <StartTaskCom+0x29c>)
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	4ba3      	ldr	r3, [pc, #652]	; (8001808 <StartTaskCom+0x2a0>)
 800157c:	4aa3      	ldr	r2, [pc, #652]	; (800180c <StartTaskCom+0x2a4>)
 800157e:	49a4      	ldr	r1, [pc, #656]	; (8001810 <StartTaskCom+0x2a8>)
 8001580:	2001      	movs	r0, #1
 8001582:	f00e fdd5 	bl	8010130 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001586:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800158a:	4618      	mov	r0, r3
 800158c:	f00e fd52 	bl	8010034 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8001590:	4ba0      	ldr	r3, [pc, #640]	; (8001814 <StartTaskCom+0x2ac>)
 8001592:	673b      	str	r3, [r7, #112]	; 0x70
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001594:	4ba0      	ldr	r3, [pc, #640]	; (8001818 <StartTaskCom+0x2b0>)
 8001596:	677b      	str	r3, [r7, #116]	; 0x74
	freeRTOS_allocator.reallocate = microros_reallocate;
 8001598:	4ba0      	ldr	r3, [pc, #640]	; (800181c <StartTaskCom+0x2b4>)
 800159a:	67bb      	str	r3, [r7, #120]	; 0x78
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800159c:	4ba0      	ldr	r3, [pc, #640]	; (8001820 <StartTaskCom+0x2b8>)
 800159e:	67fb      	str	r3, [r7, #124]	; 0x7c

	if (!rcutils_set_default_allocator(&freeRTOS_allocator))
 80015a0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015a4:	4618      	mov	r0, r3
 80015a6:	f00e fd53 	bl	8010050 <rcutils_set_default_allocator>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f083 0301 	eor.w	r3, r3, #1
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <StartTaskCom+0x56>
	{	printf("Error on default allocators (line %d)\n", __LINE__);
 80015b6:	21dd      	movs	r1, #221	; 0xdd
 80015b8:	489a      	ldr	r0, [pc, #616]	; (8001824 <StartTaskCom+0x2bc>)
 80015ba:	f019 fa01 	bl	801a9c0 <iprintf>

	rclc_support_t support;
	rcl_allocator_t allocator;
	rcl_node_t node;

	allocator = rcl_get_default_allocator();
 80015be:	463b      	mov	r3, r7
 80015c0:	4618      	mov	r0, r3
 80015c2:	f00e fd63 	bl	801008c <rcutils_get_default_allocator>
 80015c6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80015ca:	463d      	mov	r5, r7
 80015cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d0:	682b      	ldr	r3, [r5, #0]
 80015d2:	6023      	str	r3, [r4, #0]

	//create init_options
	rclc_support_init(&support, 0, NULL, &allocator);
 80015d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	f00e fc66 	bl	800feb0 <rclc_support_init>

	// create node
	rclc_node_init_default(&node, "pnav32", "", &support);
 80015e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015e8:	f107 0020 	add.w	r0, r7, #32
 80015ec:	4a8e      	ldr	r2, [pc, #568]	; (8001828 <StartTaskCom+0x2c0>)
 80015ee:	498f      	ldr	r1, [pc, #572]	; (800182c <StartTaskCom+0x2c4>)
 80015f0:	f00e fca8 	bl	800ff44 <rclc_node_init_default>

	// create publisher
	rclc_publisher_init_default( &publisher_int32, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32), "pInt32");
 80015f4:	f00f fd76 	bl	80110e4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 80015f8:	4602      	mov	r2, r0
 80015fa:	f107 0120 	add.w	r1, r7, #32
 80015fe:	4b8c      	ldr	r3, [pc, #560]	; (8001830 <StartTaskCom+0x2c8>)
 8001600:	488c      	ldr	r0, [pc, #560]	; (8001834 <StartTaskCom+0x2cc>)
 8001602:	f00e fcdb 	bl	800ffbc <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher_int64, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int64), "pInt64");
 8001606:	f00f fd85 	bl	8011114 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64>
 800160a:	4602      	mov	r2, r0
 800160c:	f107 0120 	add.w	r1, r7, #32
 8001610:	4b89      	ldr	r3, [pc, #548]	; (8001838 <StartTaskCom+0x2d0>)
 8001612:	488a      	ldr	r0, [pc, #552]	; (800183c <StartTaskCom+0x2d4>)
 8001614:	f00e fcd2 	bl	800ffbc <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher_color, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, ColorRGBA), "pColorRGBA");
 8001618:	f00f fd4c 	bl	80110b4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>
 800161c:	4602      	mov	r2, r0
 800161e:	f107 0120 	add.w	r1, r7, #32
 8001622:	4b87      	ldr	r3, [pc, #540]	; (8001840 <StartTaskCom+0x2d8>)
 8001624:	4887      	ldr	r0, [pc, #540]	; (8001844 <StartTaskCom+0x2dc>)
 8001626:	f00e fcc9 	bl	800ffbc <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher_batt, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, BatteryState), "pBatt");
 800162a:	f00f f9fb 	bl	8010a24 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>
 800162e:	4602      	mov	r2, r0
 8001630:	f107 0120 	add.w	r1, r7, #32
 8001634:	4b84      	ldr	r3, [pc, #528]	; (8001848 <StartTaskCom+0x2e0>)
 8001636:	4885      	ldr	r0, [pc, #532]	; (800184c <StartTaskCom+0x2e4>)
 8001638:	f00e fcc0 	bl	800ffbc <rclc_publisher_init_default>
	rclc_publisher_init_default( &publisher_temp, &node, ROSIDL_GET_MSG_TYPE_SUPPORT(sensor_msgs, msg, Temperature), "pTemp");
 800163c:	f00f fa0a 	bl	8010a54 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>
 8001640:	4602      	mov	r2, r0
 8001642:	f107 0120 	add.w	r1, r7, #32
 8001646:	4b82      	ldr	r3, [pc, #520]	; (8001850 <StartTaskCom+0x2e8>)
 8001648:	4882      	ldr	r0, [pc, #520]	; (8001854 <StartTaskCom+0x2ec>)
 800164a:	f00e fcb7 	bl	800ffbc <rclc_publisher_init_default>

	// preinit with random test value
	msgInt32.data = 1;
 800164e:	4b82      	ldr	r3, [pc, #520]	; (8001858 <StartTaskCom+0x2f0>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]

	msgInt64.data = 10;
 8001654:	4981      	ldr	r1, [pc, #516]	; (800185c <StartTaskCom+0x2f4>)
 8001656:	f04f 020a 	mov.w	r2, #10
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	e9c1 2300 	strd	r2, r3, [r1]

	msgColorRGBA.r= 127;
 8001662:	4b7f      	ldr	r3, [pc, #508]	; (8001860 <StartTaskCom+0x2f8>)
 8001664:	4a7f      	ldr	r2, [pc, #508]	; (8001864 <StartTaskCom+0x2fc>)
 8001666:	601a      	str	r2, [r3, #0]
	msgColorRGBA.g= 127;
 8001668:	4b7d      	ldr	r3, [pc, #500]	; (8001860 <StartTaskCom+0x2f8>)
 800166a:	4a7e      	ldr	r2, [pc, #504]	; (8001864 <StartTaskCom+0x2fc>)
 800166c:	605a      	str	r2, [r3, #4]
	msgColorRGBA.b= 100;
 800166e:	4b7c      	ldr	r3, [pc, #496]	; (8001860 <StartTaskCom+0x2f8>)
 8001670:	4a7d      	ldr	r2, [pc, #500]	; (8001868 <StartTaskCom+0x300>)
 8001672:	609a      	str	r2, [r3, #8]
	msgColorRGBA.a= 200;
 8001674:	4b7a      	ldr	r3, [pc, #488]	; (8001860 <StartTaskCom+0x2f8>)
 8001676:	4a7d      	ldr	r2, [pc, #500]	; (800186c <StartTaskCom+0x304>)
 8001678:	60da      	str	r2, [r3, #12]

	msgBattery.power_supply_status = sensor_msgs__msg__BatteryState__POWER_SUPPLY_STATUS_UNKNOWN;
 800167a:	4b7d      	ldr	r3, [pc, #500]	; (8001870 <StartTaskCom+0x308>)
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	msgBattery.power_supply_health = sensor_msgs__msg__BatteryState__POWER_SUPPLY_HEALTH_UNKNOWN;
 8001682:	4b7b      	ldr	r3, [pc, #492]	; (8001870 <StartTaskCom+0x308>)
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	msgBattery.power_supply_technology = sensor_msgs__msg__BatteryState__POWER_SUPPLY_TECHNOLOGY_LION;
 800168a:	4b79      	ldr	r3, [pc, #484]	; (8001870 <StartTaskCom+0x308>)
 800168c:	2202      	movs	r2, #2
 800168e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	msgBattery.charge = 2;
 8001692:	4b77      	ldr	r3, [pc, #476]	; (8001870 <StartTaskCom+0x308>)
 8001694:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001698:	621a      	str	r2, [r3, #32]
	msgBattery.current = 10;
 800169a:	4b75      	ldr	r3, [pc, #468]	; (8001870 <StartTaskCom+0x308>)
 800169c:	4a75      	ldr	r2, [pc, #468]	; (8001874 <StartTaskCom+0x30c>)
 800169e:	61da      	str	r2, [r3, #28]
    battVoltage.size = NUMBEROFFCELL;
 80016a0:	2206      	movs	r2, #6
 80016a2:	4b75      	ldr	r3, [pc, #468]	; (8001878 <StartTaskCom+0x310>)
 80016a4:	605a      	str	r2, [r3, #4]
    msgBattery.cell_voltage.capacity = NUMBEROFFCELL;
 80016a6:	2206      	movs	r2, #6
 80016a8:	4b71      	ldr	r3, [pc, #452]	; (8001870 <StartTaskCom+0x308>)
 80016aa:	63da      	str	r2, [r3, #60]	; 0x3c
    msgBattery.cell_voltage.size = NUMBEROFFCELL;
 80016ac:	2206      	movs	r2, #6
 80016ae:	4b70      	ldr	r3, [pc, #448]	; (8001870 <StartTaskCom+0x308>)
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38
    msgBattery.cell_voltage.data = ( float*) malloc( msgBattery.cell_voltage.capacity * sizeof(float));
 80016b2:	4b6f      	ldr	r3, [pc, #444]	; (8001870 <StartTaskCom+0x308>)
 80016b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f019 f865 	bl	801a788 <malloc>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b6b      	ldr	r3, [pc, #428]	; (8001870 <StartTaskCom+0x308>)
 80016c4:	635a      	str	r2, [r3, #52]	; 0x34
    msgBattery.cell_voltage.data[0] = 0;
 80016c6:	4b6a      	ldr	r3, [pc, #424]	; (8001870 <StartTaskCom+0x308>)
 80016c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
    msgBattery.cell_voltage.data[1] = 1;
 80016d0:	4b67      	ldr	r3, [pc, #412]	; (8001870 <StartTaskCom+0x308>)
 80016d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d4:	3304      	adds	r3, #4
 80016d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80016da:	601a      	str	r2, [r3, #0]
    msgBattery.cell_voltage.data[3] = 3;
 80016dc:	4b64      	ldr	r3, [pc, #400]	; (8001870 <StartTaskCom+0x308>)
 80016de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e0:	330c      	adds	r3, #12
 80016e2:	4a66      	ldr	r2, [pc, #408]	; (800187c <StartTaskCom+0x314>)
 80016e4:	601a      	str	r2, [r3, #0]

	msgTemperature.temperature = 25;
 80016e6:	4966      	ldr	r1, [pc, #408]	; (8001880 <StartTaskCom+0x318>)
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	4b65      	ldr	r3, [pc, #404]	; (8001884 <StartTaskCom+0x31c>)
 80016ee:	e9c1 2306 	strd	r2, r3, [r1, #24]

  for(;;)
  {
	// TEST: Random data update before publish
	msgInt32.data++;
 80016f2:	4b59      	ldr	r3, [pc, #356]	; (8001858 <StartTaskCom+0x2f0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	3301      	adds	r3, #1
 80016f8:	4a57      	ldr	r2, [pc, #348]	; (8001858 <StartTaskCom+0x2f0>)
 80016fa:	6013      	str	r3, [r2, #0]
	msgInt64.data++;
 80016fc:	4b57      	ldr	r3, [pc, #348]	; (800185c <StartTaskCom+0x2f4>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f112 0801 	adds.w	r8, r2, #1
 8001706:	f143 0900 	adc.w	r9, r3, #0
 800170a:	4b54      	ldr	r3, [pc, #336]	; (800185c <StartTaskCom+0x2f4>)
 800170c:	e9c3 8900 	strd	r8, r9, [r3]
	msgBattery.voltage += 0.001;
 8001710:	4b57      	ldr	r3, [pc, #348]	; (8001870 <StartTaskCom+0x308>)
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff27 	bl	8000568 <__aeabi_f2d>
 800171a:	a337      	add	r3, pc, #220	; (adr r3, 80017f8 <StartTaskCom+0x290>)
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	f7fe fdc4 	bl	80002ac <__adddf3>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	f7fe ff74 	bl	8000618 <__aeabi_d2f>
 8001730:	4603      	mov	r3, r0
 8001732:	4a4f      	ldr	r2, [pc, #316]	; (8001870 <StartTaskCom+0x308>)
 8001734:	6153      	str	r3, [r2, #20]
	msgTemperature.temperature += 0.001;
 8001736:	4b52      	ldr	r3, [pc, #328]	; (8001880 <StartTaskCom+0x318>)
 8001738:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800173c:	a32e      	add	r3, pc, #184	; (adr r3, 80017f8 <StartTaskCom+0x290>)
 800173e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001742:	f7fe fdb3 	bl	80002ac <__adddf3>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	494d      	ldr	r1, [pc, #308]	; (8001880 <StartTaskCom+0x318>)
 800174c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	msgColorRGBA.g++;
 8001750:	4b43      	ldr	r3, [pc, #268]	; (8001860 <StartTaskCom+0x2f8>)
 8001752:	edd3 7a01 	vldr	s15, [r3, #4]
 8001756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800175a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800175e:	4b40      	ldr	r3, [pc, #256]	; (8001860 <StartTaskCom+0x2f8>)
 8001760:	edc3 7a01 	vstr	s15, [r3, #4]
	// TEST END

	// Led ON
	HAL_GPIO_WritePin(O_LED_D3_GPIO_Port, O_LED_D3_Pin, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	2180      	movs	r1, #128	; 0x80
 8001768:	4847      	ldr	r0, [pc, #284]	; (8001888 <StartTaskCom+0x320>)
 800176a:	f002 fd3b 	bl	80041e4 <HAL_GPIO_WritePin>

	rcl_ret_t ret;
	ret = rcl_publish(&publisher_int32, &msgInt32, NULL);
 800176e:	2200      	movs	r2, #0
 8001770:	4939      	ldr	r1, [pc, #228]	; (8001858 <StartTaskCom+0x2f0>)
 8001772:	4830      	ldr	r0, [pc, #192]	; (8001834 <StartTaskCom+0x2cc>)
 8001774:	f00e fb78 	bl	800fe68 <rcl_publish>
 8001778:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	ret += rcl_publish(&publisher_int64, &msgInt64, NULL);
 800177c:	2200      	movs	r2, #0
 800177e:	4937      	ldr	r1, [pc, #220]	; (800185c <StartTaskCom+0x2f4>)
 8001780:	482e      	ldr	r0, [pc, #184]	; (800183c <StartTaskCom+0x2d4>)
 8001782:	f00e fb71 	bl	800fe68 <rcl_publish>
 8001786:	4602      	mov	r2, r0
 8001788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800178c:	4413      	add	r3, r2
 800178e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ret += rcl_publish(&publisher_color, &msgColorRGBA, NULL);
 8001792:	2200      	movs	r2, #0
 8001794:	4932      	ldr	r1, [pc, #200]	; (8001860 <StartTaskCom+0x2f8>)
 8001796:	482b      	ldr	r0, [pc, #172]	; (8001844 <StartTaskCom+0x2dc>)
 8001798:	f00e fb66 	bl	800fe68 <rcl_publish>
 800179c:	4602      	mov	r2, r0
 800179e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017a2:	4413      	add	r3, r2
 80017a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ret += rcl_publish(&publisher_batt, &msgBattery, NULL);
 80017a8:	2200      	movs	r2, #0
 80017aa:	4931      	ldr	r1, [pc, #196]	; (8001870 <StartTaskCom+0x308>)
 80017ac:	4827      	ldr	r0, [pc, #156]	; (800184c <StartTaskCom+0x2e4>)
 80017ae:	f00e fb5b 	bl	800fe68 <rcl_publish>
 80017b2:	4602      	mov	r2, r0
 80017b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017b8:	4413      	add	r3, r2
 80017ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	ret += rcl_publish(&publisher_temp, &msgTemperature, NULL);
 80017be:	2200      	movs	r2, #0
 80017c0:	492f      	ldr	r1, [pc, #188]	; (8001880 <StartTaskCom+0x318>)
 80017c2:	4824      	ldr	r0, [pc, #144]	; (8001854 <StartTaskCom+0x2ec>)
 80017c4:	f00e fb50 	bl	800fe68 <rcl_publish>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017ce:	4413      	add	r3, r2
 80017d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	if (ret != RCL_RET_OK)
 80017d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d004      	beq.n	80017e6 <StartTaskCom+0x27e>
	{
	  printf("Error publishing (line %d)\n", __LINE__);
 80017dc:	f44f 7192 	mov.w	r1, #292	; 0x124
 80017e0:	482a      	ldr	r0, [pc, #168]	; (800188c <StartTaskCom+0x324>)
 80017e2:	f019 f8ed 	bl	801a9c0 <iprintf>
	}

	// Led turn Off
	HAL_GPIO_WritePin(O_LED_D3_GPIO_Port, O_LED_D3_Pin, 1);
 80017e6:	2201      	movs	r2, #1
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	4827      	ldr	r0, [pc, #156]	; (8001888 <StartTaskCom+0x320>)
 80017ec:	f002 fcfa 	bl	80041e4 <HAL_GPIO_WritePin>
	osDelay(100);
 80017f0:	2064      	movs	r0, #100	; 0x64
 80017f2:	f00b f8b5 	bl	800c960 <osDelay>
  {
 80017f6:	e77c      	b.n	80016f2 <StartTaskCom+0x18a>
 80017f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017fc:	3f50624d 	.word	0x3f50624d
 8001800:	08001449 	.word	0x08001449
 8001804:	080013e1 	.word	0x080013e1
 8001808:	080013c1 	.word	0x080013c1
 800180c:	08001395 	.word	0x08001395
 8001810:	2000aac8 	.word	0x2000aac8
 8001814:	08001c71 	.word	0x08001c71
 8001818:	08001cb5 	.word	0x08001cb5
 800181c:	08001ced 	.word	0x08001ced
 8001820:	08001d59 	.word	0x08001d59
 8001824:	0801bdd0 	.word	0x0801bdd0
 8001828:	0801bdf8 	.word	0x0801bdf8
 800182c:	0801bdfc 	.word	0x0801bdfc
 8001830:	0801be04 	.word	0x0801be04
 8001834:	20004f54 	.word	0x20004f54
 8001838:	0801be0c 	.word	0x0801be0c
 800183c:	20004f5c 	.word	0x20004f5c
 8001840:	0801be14 	.word	0x0801be14
 8001844:	20004f98 	.word	0x20004f98
 8001848:	0801be20 	.word	0x0801be20
 800184c:	20004fac 	.word	0x20004fac
 8001850:	0801be28 	.word	0x0801be28
 8001854:	20004f68 	.word	0x20004f68
 8001858:	20004f58 	.word	0x20004f58
 800185c:	20004f60 	.word	0x20004f60
 8001860:	20004f9c 	.word	0x20004f9c
 8001864:	42fe0000 	.word	0x42fe0000
 8001868:	42c80000 	.word	0x42c80000
 800186c:	43480000 	.word	0x43480000
 8001870:	20004fb0 	.word	0x20004fb0
 8001874:	41200000 	.word	0x41200000
 8001878:	20005014 	.word	0x20005014
 800187c:	40400000 	.word	0x40400000
 8001880:	20004f70 	.word	0x20004f70
 8001884:	40390000 	.word	0x40390000
 8001888:	40020000 	.word	0x40020000
 800188c:	0801be30 	.word	0x0801be30

08001890 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PB9   ------> S_TIM11_CH1
*/
void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	; 0x30
 8001894:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <MX_GPIO_Init+0x180>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a58      	ldr	r2, [pc, #352]	; (8001a10 <MX_GPIO_Init+0x180>)
 80018b0:	f043 0310 	orr.w	r3, r3, #16
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b56      	ldr	r3, [pc, #344]	; (8001a10 <MX_GPIO_Init+0x180>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	61bb      	str	r3, [r7, #24]
 80018c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	4b52      	ldr	r3, [pc, #328]	; (8001a10 <MX_GPIO_Init+0x180>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a51      	ldr	r2, [pc, #324]	; (8001a10 <MX_GPIO_Init+0x180>)
 80018cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b4f      	ldr	r3, [pc, #316]	; (8001a10 <MX_GPIO_Init+0x180>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
 80018e2:	4b4b      	ldr	r3, [pc, #300]	; (8001a10 <MX_GPIO_Init+0x180>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a4a      	ldr	r2, [pc, #296]	; (8001a10 <MX_GPIO_Init+0x180>)
 80018e8:	f043 0304 	orr.w	r3, r3, #4
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b48      	ldr	r3, [pc, #288]	; (8001a10 <MX_GPIO_Init+0x180>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b44      	ldr	r3, [pc, #272]	; (8001a10 <MX_GPIO_Init+0x180>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a43      	ldr	r2, [pc, #268]	; (8001a10 <MX_GPIO_Init+0x180>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b41      	ldr	r3, [pc, #260]	; (8001a10 <MX_GPIO_Init+0x180>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <MX_GPIO_Init+0x180>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a3c      	ldr	r2, [pc, #240]	; (8001a10 <MX_GPIO_Init+0x180>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b3a      	ldr	r3, [pc, #232]	; (8001a10 <MX_GPIO_Init+0x180>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <MX_GPIO_Init+0x180>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a35      	ldr	r2, [pc, #212]	; (8001a10 <MX_GPIO_Init+0x180>)
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b33      	ldr	r3, [pc, #204]	; (8001a10 <MX_GPIO_Init+0x180>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, O_LED_D2_Pin|O_LED_D3_Pin|O_PWR_MOT_EN_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8001954:	482f      	ldr	r0, [pc, #188]	; (8001a14 <MX_GPIO_Init+0x184>)
 8001956:	f002 fc45 	bl	80041e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, O_MOT_ENABLE_Pin|O_PWR_SBC_EN_Pin|O_SPI_CS2_Pin|O_SPI_CS1_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 6164 	mov.w	r1, #3648	; 0xe40
 8001960:	482d      	ldr	r0, [pc, #180]	; (8001a18 <MX_GPIO_Init+0x188>)
 8001962:	f002 fc3f 	bl	80041e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O_PWR_REG_EN_GPIO_Port, O_PWR_REG_EN_Pin, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	f44f 7180 	mov.w	r1, #256	; 0x100
 800196c:	482b      	ldr	r0, [pc, #172]	; (8001a1c <MX_GPIO_Init+0x18c>)
 800196e:	f002 fc39 	bl	80041e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = I_KEY1_Pin|I_KEY0_Pin;
 8001972:	2318      	movs	r3, #24
 8001974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800197a:	2301      	movs	r3, #1
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	4619      	mov	r1, r3
 8001984:	4826      	ldr	r0, [pc, #152]	; (8001a20 <MX_GPIO_Init+0x190>)
 8001986:	f002 fa91 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = O_LED_D2_Pin|O_LED_D3_Pin|O_PWR_MOT_EN_Pin;
 800198a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	481c      	ldr	r0, [pc, #112]	; (8001a14 <MX_GPIO_Init+0x184>)
 80019a4:	f002 fa82 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = O_MOT_ENABLE_Pin|O_PWR_SBC_EN_Pin|O_SPI_CS2_Pin|O_SPI_CS1_Pin;
 80019a8:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 80019ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	4619      	mov	r1, r3
 80019c0:	4815      	ldr	r0, [pc, #84]	; (8001a18 <MX_GPIO_Init+0x188>)
 80019c2:	f002 fa73 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = O_PWR_REG_EN_Pin;
 80019c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(O_PWR_REG_EN_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	4619      	mov	r1, r3
 80019de:	480f      	ldr	r0, [pc, #60]	; (8001a1c <MX_GPIO_Init+0x18c>)
 80019e0:	f002 fa64 	bl	8003eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TIM_AUX2_PWM_Pin;
 80019e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80019f6:	2303      	movs	r3, #3
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TIM_AUX2_PWM_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	4806      	ldr	r0, [pc, #24]	; (8001a1c <MX_GPIO_Init+0x18c>)
 8001a02:	f002 fa53 	bl	8003eac <HAL_GPIO_Init>

}
 8001a06:	bf00      	nop
 8001a08:	3730      	adds	r7, #48	; 0x30
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020800 	.word	0x40020800
 8001a1c:	40020400 	.word	0x40020400
 8001a20:	40021000 	.word	0x40021000

08001a24 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a2a:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <MX_I2C2_Init+0x54>)
 8001a2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a30:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <MX_I2C2_Init+0x58>)
 8001a32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a46:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a54:	4b07      	ldr	r3, [pc, #28]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a60:	4804      	ldr	r0, [pc, #16]	; (8001a74 <MX_I2C2_Init+0x50>)
 8001a62:	f002 fbd9 	bl	8004218 <HAL_I2C_Init>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a6c:	f000 f8fa 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	2000a7c0 	.word	0x2000a7c0
 8001a78:	40005800 	.word	0x40005800
 8001a7c:	000186a0 	.word	0x000186a0

08001a80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a19      	ldr	r2, [pc, #100]	; (8001b04 <HAL_I2C_MspInit+0x84>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d12c      	bne.n	8001afc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <HAL_I2C_MspInit+0x88>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <HAL_I2C_MspInit+0x88>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <HAL_I2C_MspInit+0x88>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8001abe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac4:	2312      	movs	r3, #18
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480c      	ldr	r0, [pc, #48]	; (8001b0c <HAL_I2C_MspInit+0x8c>)
 8001adc:	f002 f9e6 	bl	8003eac <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <HAL_I2C_MspInit+0x88>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <HAL_I2C_MspInit+0x88>)
 8001aea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aee:	6413      	str	r3, [r2, #64]	; 0x40
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_I2C_MspInit+0x88>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001afc:	bf00      	nop
 8001afe:	3728      	adds	r7, #40	; 0x28
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40005800 	.word	0x40005800
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020400 	.word	0x40020400

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b14:	f001 fa02 	bl	8002f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b18:	f000 f828 	bl	8001b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b1c:	f7ff feb8 	bl	8001890 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001b20:	f000 fc72 	bl	8002408 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001b24:	f000 fcc8 	bl	80024b8 <MX_TIM2_Init>
  MX_TIM8_Init();
 8001b28:	f000 fdf4 	bl	8002714 <MX_TIM8_Init>
  MX_I2C2_Init();
 8001b2c:	f7ff ff7a 	bl	8001a24 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001b30:	f000 fa38 	bl	8001fa4 <MX_SPI1_Init>
  MX_DMA_Init();
 8001b34:	f7ff fbfe 	bl	8001334 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001b38:	f001 f88e 	bl	8002c58 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001b3c:	f7fe ff8e 	bl	8000a5c <MX_ADC1_Init>
  MX_ADC3_Init();
 8001b40:	f7fe ffde 	bl	8000b00 <MX_ADC3_Init>
  MX_TIM3_Init();
 8001b44:	f000 fd0c 	bl	8002560 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b48:	f000 fd86 	bl	8002658 <MX_TIM4_Init>
  MX_UART5_Init();
 8001b4c:	f001 f85a 	bl	8002c04 <MX_UART5_Init>
  MX_CRC_Init();
 8001b50:	f7ff f970 	bl	8000e34 <MX_CRC_Init>
  MX_RNG_Init();
 8001b54:	f000 f9f0 	bl	8001f38 <MX_RNG_Init>
  MX_TIM14_Init();
 8001b58:	f000 fe8a 	bl	8002870 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001b5c:	f00a fe24 	bl	800c7a8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001b60:	f7ff fcc6 	bl	80014f0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b64:	f00a fe44 	bl	800c7f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <main+0x58>
	...

08001b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b094      	sub	sp, #80	; 0x50
 8001b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b72:	f107 0320 	add.w	r3, r7, #32
 8001b76:	2230      	movs	r2, #48	; 0x30
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f018 fe22 	bl	801a7c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	4b28      	ldr	r3, [pc, #160]	; (8001c38 <SystemClock_Config+0xcc>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	4a27      	ldr	r2, [pc, #156]	; (8001c38 <SystemClock_Config+0xcc>)
 8001b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba0:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <SystemClock_Config+0xcc>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bac:	2300      	movs	r3, #0
 8001bae:	607b      	str	r3, [r7, #4]
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <SystemClock_Config+0xd0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a21      	ldr	r2, [pc, #132]	; (8001c3c <SystemClock_Config+0xd0>)
 8001bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bba:	6013      	str	r3, [r2, #0]
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <SystemClock_Config+0xd0>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bdc:	2304      	movs	r3, #4
 8001bde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001be0:	23a8      	movs	r3, #168	; 0xa8
 8001be2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001be4:	2302      	movs	r3, #2
 8001be6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001be8:	2307      	movs	r3, #7
 8001bea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bec:	f107 0320 	add.w	r3, r7, #32
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f003 fed3 	bl	800599c <HAL_RCC_OscConfig>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bfc:	f000 f832 	bl	8001c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c00:	230f      	movs	r3, #15
 8001c02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c04:	2302      	movs	r3, #2
 8001c06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c0c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	2105      	movs	r1, #5
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f004 f934 	bl	8005e8c <HAL_RCC_ClockConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c2a:	f000 f81b 	bl	8001c64 <Error_Handler>
  }
}
 8001c2e:	bf00      	nop
 8001c30:	3750      	adds	r7, #80	; 0x50
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40007000 	.word	0x40007000

08001c40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d101      	bne.n	8001c56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c52:	f001 f985 	bl	8002f60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40014400 	.word	0x40014400

08001c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c68:	b672      	cpsid	i
}
 8001c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <Error_Handler+0x8>
	...

08001c70 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <microros_allocate+0x3c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b09      	ldr	r3, [pc, #36]	; (8001cac <microros_allocate+0x3c>)
 8001c88:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <microros_allocate+0x40>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <microros_allocate+0x40>)
 8001c98:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff f900 	bl	8000ea0 <pvPortMallocMicroROS>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000a814 	.word	0x2000a814
 8001cb0:	2000a818 	.word	0x2000a818

08001cb4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00c      	beq.n	8001cde <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff fa09 	bl	80010dc <getBlockSize>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4a06      	ldr	r2, [pc, #24]	; (8001ce8 <microros_deallocate+0x34>)
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <microros_deallocate+0x34>)
 8001cd6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff f9a5 	bl	8001028 <vPortFreeMicroROS>
  }
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000a818 	.word	0x2000a818

08001cec <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <microros_reallocate+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	4413      	add	r3, r2
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <microros_reallocate+0x64>)
 8001d06:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <microros_reallocate+0x68>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	4413      	add	r3, r2
 8001d12:	461a      	mov	r2, r3
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <microros_reallocate+0x68>)
 8001d16:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d104      	bne.n	8001d28 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001d1e:	68b8      	ldr	r0, [r7, #8]
 8001d20:	f7ff f8be 	bl	8000ea0 <pvPortMallocMicroROS>
 8001d24:	4603      	mov	r3, r0
 8001d26:	e00e      	b.n	8001d46 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f7ff f9d7 	bl	80010dc <getBlockSize>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	4a08      	ldr	r2, [pc, #32]	; (8001d54 <microros_reallocate+0x68>)
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	461a      	mov	r2, r3
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <microros_reallocate+0x68>)
 8001d3a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f7ff f9ea 	bl	8001118 <pvPortReallocMicroROS>
 8001d44:	4603      	mov	r3, r0
  }
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	2000a814 	.word	0x2000a814
 8001d54:	2000a818 	.word	0x2000a818

08001d58 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	fb02 f303 	mul.w	r3, r2, r3
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	; (8001da0 <microros_zero_allocate+0x48>)
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	4413      	add	r3, r2
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <microros_zero_allocate+0x48>)
 8001d76:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
 8001d80:	4a08      	ldr	r2, [pc, #32]	; (8001da4 <microros_zero_allocate+0x4c>)
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <microros_zero_allocate+0x4c>)
 8001d8a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f7ff f9ef 	bl	8001172 <pvPortCallocMicroROS>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	2000a814 	.word	0x2000a814
 8001da4:	2000a818 	.word	0x2000a818

08001da8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001da8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001dba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dbe:	a320      	add	r3, pc, #128	; (adr r3, 8001e40 <UTILS_NanosecondsToTimespec+0x98>)
 8001dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc4:	f7fe fc78 	bl	80006b8 <__aeabi_ldivmod>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001dd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dd6:	a31a      	add	r3, pc, #104	; (adr r3, 8001e40 <UTILS_NanosecondsToTimespec+0x98>)
 8001dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ddc:	f7fe fc6c 	bl	80006b8 <__aeabi_ldivmod>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	da20      	bge.n	8001e2e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	4a11      	ldr	r2, [pc, #68]	; (8001e38 <UTILS_NanosecondsToTimespec+0x90>)
 8001df2:	fb82 1203 	smull	r1, r2, r2, r3
 8001df6:	1712      	asrs	r2, r2, #28
 8001df8:	17db      	asrs	r3, r3, #31
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e06:	6979      	ldr	r1, [r7, #20]
 8001e08:	17c8      	asrs	r0, r1, #31
 8001e0a:	460c      	mov	r4, r1
 8001e0c:	4605      	mov	r5, r0
 8001e0e:	ebb2 0804 	subs.w	r8, r2, r4
 8001e12:	eb63 0905 	sbc.w	r9, r3, r5
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	4906      	ldr	r1, [pc, #24]	; (8001e3c <UTILS_NanosecondsToTimespec+0x94>)
 8001e24:	fb01 f303 	mul.w	r3, r1, r3
 8001e28:	441a      	add	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
    }
}
 8001e2e:	bf00      	nop
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e38:	44b82fa1 	.word	0x44b82fa1
 8001e3c:	3b9aca00 	.word	0x3b9aca00
 8001e40:	3b9aca00 	.word	0x3b9aca00
 8001e44:	00000000 	.word	0x00000000

08001e48 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e4c:	b08e      	sub	sp, #56	; 0x38
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6278      	str	r0, [r7, #36]	; 0x24
 8001e52:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001e54:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e58:	2300      	movs	r3, #0
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001e6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f00c f850 	bl	800df14 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e76:	17da      	asrs	r2, r3, #31
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	61fa      	str	r2, [r7, #28]
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	69b9      	ldr	r1, [r7, #24]
 8001e86:	000b      	movs	r3, r1
 8001e88:	2200      	movs	r2, #0
 8001e8a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e90:	2200      	movs	r2, #0
 8001e92:	461c      	mov	r4, r3
 8001e94:	4615      	mov	r5, r2
 8001e96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e9a:	1911      	adds	r1, r2, r4
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	416b      	adcs	r3, r5
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001ea6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001eaa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	f04f 0400 	mov.w	r4, #0
 8001eb6:	f04f 0500 	mov.w	r5, #0
 8001eba:	015d      	lsls	r5, r3, #5
 8001ebc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001ec0:	0154      	lsls	r4, r2, #5
 8001ec2:	4622      	mov	r2, r4
 8001ec4:	462b      	mov	r3, r5
 8001ec6:	ebb2 0800 	subs.w	r8, r2, r0
 8001eca:	eb63 0901 	sbc.w	r9, r3, r1
 8001ece:	f04f 0200 	mov.w	r2, #0
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001eda:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001ede:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001ee2:	4690      	mov	r8, r2
 8001ee4:	4699      	mov	r9, r3
 8001ee6:	eb18 0a00 	adds.w	sl, r8, r0
 8001eea:	eb49 0b01 	adc.w	fp, r9, r1
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001efa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001efe:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f02:	ebb2 040a 	subs.w	r4, r2, sl
 8001f06:	603c      	str	r4, [r7, #0]
 8001f08:	eb63 030b 	sbc.w	r3, r3, fp
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f12:	4623      	mov	r3, r4
 8001f14:	181b      	adds	r3, r3, r0
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	462b      	mov	r3, r5
 8001f1a:	eb41 0303 	adc.w	r3, r1, r3
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	6a3a      	ldr	r2, [r7, #32]
 8001f22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f26:	f7ff ff3f 	bl	8001da8 <UTILS_NanosecondsToTimespec>

    return 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3738      	adds	r7, #56	; 0x38
 8001f30:	46bd      	mov	sp, r7
 8001f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001f38 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_RNG_Init+0x20>)
 8001f3e:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <MX_RNG_Init+0x24>)
 8001f40:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001f42:	4805      	ldr	r0, [pc, #20]	; (8001f58 <MX_RNG_Init+0x20>)
 8001f44:	f004 f9f4 	bl	8006330 <HAL_RNG_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001f4e:	f7ff fe89 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	2000a81c 	.word	0x2000a81c
 8001f5c:	50060800 	.word	0x50060800

08001f60 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <HAL_RNG_MspInit+0x3c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d10d      	bne.n	8001f8e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_RNG_MspInit+0x40>)
 8001f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7a:	4a09      	ldr	r2, [pc, #36]	; (8001fa0 <HAL_RNG_MspInit+0x40>)
 8001f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f80:	6353      	str	r3, [r2, #52]	; 0x34
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <HAL_RNG_MspInit+0x40>)
 8001f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001f8e:	bf00      	nop
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	50060800 	.word	0x50060800
 8001fa0:	40023800 	.word	0x40023800

08001fa4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001fa8:	4b17      	ldr	r3, [pc, #92]	; (8002008 <MX_SPI1_Init+0x64>)
 8001faa:	4a18      	ldr	r2, [pc, #96]	; (800200c <MX_SPI1_Init+0x68>)
 8001fac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <MX_SPI1_Init+0x64>)
 8001fb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fb6:	4b14      	ldr	r3, [pc, #80]	; (8002008 <MX_SPI1_Init+0x64>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <MX_SPI1_Init+0x64>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <MX_SPI1_Init+0x64>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <MX_SPI1_Init+0x64>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <MX_SPI1_Init+0x64>)
 8001fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <MX_SPI1_Init+0x64>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <MX_SPI1_Init+0x64>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <MX_SPI1_Init+0x64>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe8:	4b07      	ldr	r3, [pc, #28]	; (8002008 <MX_SPI1_Init+0x64>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <MX_SPI1_Init+0x64>)
 8001ff0:	220a      	movs	r2, #10
 8001ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ff4:	4804      	ldr	r0, [pc, #16]	; (8002008 <MX_SPI1_Init+0x64>)
 8001ff6:	f004 f9c5 	bl	8006384 <HAL_SPI_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002000:	f7ff fe30 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	2000a82c 	.word	0x2000a82c
 800200c:	40013000 	.word	0x40013000

08002010 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	; 0x28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a19      	ldr	r2, [pc, #100]	; (8002094 <HAL_SPI_MspInit+0x84>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d12b      	bne.n	800208a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <HAL_SPI_MspInit+0x88>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	4a17      	ldr	r2, [pc, #92]	; (8002098 <HAL_SPI_MspInit+0x88>)
 800203c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002040:	6453      	str	r3, [r2, #68]	; 0x44
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <HAL_SPI_MspInit+0x88>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b11      	ldr	r3, [pc, #68]	; (8002098 <HAL_SPI_MspInit+0x88>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a10      	ldr	r2, [pc, #64]	; (8002098 <HAL_SPI_MspInit+0x88>)
 8002058:	f043 0302 	orr.w	r3, r3, #2
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <HAL_SPI_MspInit+0x88>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800206a:	2338      	movs	r3, #56	; 0x38
 800206c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800207a:	2305      	movs	r3, #5
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	4805      	ldr	r0, [pc, #20]	; (800209c <HAL_SPI_MspInit+0x8c>)
 8002086:	f001 ff11 	bl	8003eac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	; 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40013000 	.word	0x40013000
 8002098:	40023800 	.word	0x40023800
 800209c:	40020400 	.word	0x40020400

080020a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_MspInit+0x54>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	4a11      	ldr	r2, [pc, #68]	; (80020f4 <HAL_MspInit+0x54>)
 80020b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b4:	6453      	str	r3, [r2, #68]	; 0x44
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_MspInit+0x54>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_MspInit+0x54>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <HAL_MspInit+0x54>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
 80020d2:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <HAL_MspInit+0x54>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	210f      	movs	r1, #15
 80020e2:	f06f 0001 	mvn.w	r0, #1
 80020e6:	f001 fa99 	bl	800361c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800

080020f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08c      	sub	sp, #48	; 0x30
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002108:	2200      	movs	r2, #0
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	2019      	movs	r0, #25
 800210e:	f001 fa85 	bl	800361c <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002112:	2019      	movs	r0, #25
 8002114:	f001 fa9e 	bl	8003654 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	4b1f      	ldr	r3, [pc, #124]	; (800219c <HAL_InitTick+0xa4>)
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	4a1e      	ldr	r2, [pc, #120]	; (800219c <HAL_InitTick+0xa4>)
 8002122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002126:	6453      	str	r3, [r2, #68]	; 0x44
 8002128:	4b1c      	ldr	r3, [pc, #112]	; (800219c <HAL_InitTick+0xa4>)
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002134:	f107 0210 	add.w	r2, r7, #16
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f004 f8c4 	bl	80062cc <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002144:	f004 f8ae 	bl	80062a4 <HAL_RCC_GetPCLK2Freq>
 8002148:	4603      	mov	r3, r0
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800214e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002150:	4a13      	ldr	r2, [pc, #76]	; (80021a0 <HAL_InitTick+0xa8>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	0c9b      	lsrs	r3, r3, #18
 8002158:	3b01      	subs	r3, #1
 800215a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <HAL_InitTick+0xac>)
 800215e:	4a12      	ldr	r2, [pc, #72]	; (80021a8 <HAL_InitTick+0xb0>)
 8002160:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_InitTick+0xac>)
 8002164:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002168:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800216a:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <HAL_InitTick+0xac>)
 800216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <HAL_InitTick+0xac>)
 8002172:	2200      	movs	r2, #0
 8002174:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_InitTick+0xac>)
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 800217c:	4809      	ldr	r0, [pc, #36]	; (80021a4 <HAL_InitTick+0xac>)
 800217e:	f004 f98a 	bl	8006496 <HAL_TIM_Base_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d104      	bne.n	8002192 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8002188:	4806      	ldr	r0, [pc, #24]	; (80021a4 <HAL_InitTick+0xac>)
 800218a:	f004 f9d3 	bl	8006534 <HAL_TIM_Base_Start_IT>
 800218e:	4603      	mov	r3, r0
 8002190:	e000      	b.n	8002194 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
}
 8002194:	4618      	mov	r0, r3
 8002196:	3730      	adds	r7, #48	; 0x30
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800
 80021a0:	431bde83 	.word	0x431bde83
 80021a4:	2000a884 	.word	0x2000a884
 80021a8:	40014400 	.word	0x40014400

080021ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <NMI_Handler+0x4>

080021b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021b6:	e7fe      	b.n	80021b6 <HardFault_Handler+0x4>

080021b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <MemManage_Handler+0x4>

080021be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <BusFault_Handler+0x4>

080021c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021c8:	e7fe      	b.n	80021c8 <UsageFault_Handler+0x4>

080021ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ca:	b480      	push	{r7}
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021dc:	4803      	ldr	r0, [pc, #12]	; (80021ec <TIM1_UP_TIM10_IRQHandler+0x14>)
 80021de:	f004 fbb6 	bl	800694e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80021e2:	4803      	ldr	r0, [pc, #12]	; (80021f0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80021e4:	f004 fbb3 	bl	800694e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	2000a8d4 	.word	0x2000a8d4
 80021f0:	2000a884 	.word	0x2000a884

080021f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <USART1_IRQHandler+0x10>)
 80021fa:	f005 fdcd 	bl	8007d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	2000aac8 	.word	0x2000aac8

08002208 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <DMA2_Stream0_IRQHandler+0x10>)
 800220e:	f001 fbe3 	bl	80039d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20000acc 	.word	0x20000acc

0800221c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <DMA2_Stream2_IRQHandler+0x10>)
 8002222:	f001 fbd9 	bl	80039d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	2000ab0c 	.word	0x2000ab0c

08002230 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <OTG_FS_IRQHandler+0x10>)
 8002236:	f002 fa83 	bl	8004740 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20010ac0 	.word	0x20010ac0

08002244 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <DMA2_Stream7_IRQHandler+0x10>)
 800224a:	f001 fbc5 	bl	80039d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	2000ab6c 	.word	0x2000ab6c

08002258 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
	return 1;
 800225c:	2301      	movs	r3, #1
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_kill>:

int _kill(int pid, int sig)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002272:	f018 f89b 	bl	801a3ac <__errno>
 8002276:	4603      	mov	r3, r0
 8002278:	2216      	movs	r2, #22
 800227a:	601a      	str	r2, [r3, #0]
	return -1;
 800227c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <_exit>:

void _exit (int status)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002290:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ffe7 	bl	8002268 <_kill>
	while (1) {}		/* Make sure we hang here */
 800229a:	e7fe      	b.n	800229a <_exit+0x12>

0800229c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	e00a      	b.n	80022c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022ae:	f3af 8000 	nop.w
 80022b2:	4601      	mov	r1, r0
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	60ba      	str	r2, [r7, #8]
 80022ba:	b2ca      	uxtb	r2, r1
 80022bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3301      	adds	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	dbf0      	blt.n	80022ae <_read+0x12>
	}

return len;
 80022cc:	687b      	ldr	r3, [r7, #4]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b086      	sub	sp, #24
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	e009      	b.n	80022fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	60ba      	str	r2, [r7, #8]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	dbf1      	blt.n	80022e8 <_write+0x12>
	}
	return len;
 8002304:	687b      	ldr	r3, [r7, #4]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <_sbrk>:

caddr_t _sbrk(int incr) {
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
    extern char __heap_start__ asm("end");  // Defined by the linker.
    static char *heap_end;
    char *prev_heap_end;

    if (heap_end == NULL) heap_end = &__heap_start__;
 8002318:	4b14      	ldr	r3, [pc, #80]	; (800236c <_sbrk+0x5c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <_sbrk+0x16>
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <_sbrk+0x5c>)
 8002322:	4a13      	ldr	r2, [pc, #76]	; (8002370 <_sbrk+0x60>)
 8002324:	601a      	str	r2, [r3, #0]

    prev_heap_end = heap_end;
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <_sbrk+0x5c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60fb      	str	r3, [r7, #12]

    if (heap_end + incr > &_estack - _Min_Stack_Size) {
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <_sbrk+0x5c>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	441a      	add	r2, r3
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <_sbrk+0x64>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	425b      	negs	r3, r3
 800233a:	490f      	ldr	r1, [pc, #60]	; (8002378 <_sbrk+0x68>)
 800233c:	440b      	add	r3, r1
 800233e:	429a      	cmp	r2, r3
 8002340:	d908      	bls.n	8002354 <_sbrk+0x44>
    		__asm("BKPT #0\n");
 8002342:	be00      	bkpt	0x0000
        errno = ENOMEM;
 8002344:	f018 f832 	bl	801a3ac <__errno>
 8002348:	4603      	mov	r3, r0
 800234a:	220c      	movs	r2, #12
 800234c:	601a      	str	r2, [r3, #0]
        return (caddr_t)-1;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002352:	e006      	b.n	8002362 <_sbrk+0x52>

    }

    heap_end += incr;
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <_sbrk+0x5c>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4413      	add	r3, r2
 800235c:	4a03      	ldr	r2, [pc, #12]	; (800236c <_sbrk+0x5c>)
 800235e:	6013      	str	r3, [r2, #0]
    return (caddr_t)prev_heap_end;
 8002360:	68fb      	ldr	r3, [r7, #12]

}
 8002362:	4618      	mov	r0, r3
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	2000a8d0 	.word	0x2000a8d0
 8002370:	20015d08 	.word	0x20015d08
 8002374:	00000400 	.word	0x00000400
 8002378:	20020000 	.word	0x20020000

0800237c <_close>:

int _close(int file)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	return -1;
 8002384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002388:	4618      	mov	r0, r3
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023a4:	605a      	str	r2, [r3, #4]
	return 0;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <_isatty>:

int _isatty(int file)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	return 1;
 80023bc:	2301      	movs	r3, #1
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b085      	sub	sp, #20
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
	return 0;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <SystemInit+0x20>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	4a05      	ldr	r2, [pc, #20]	; (8002404 <SystemInit+0x20>)
 80023f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08c      	sub	sp, #48	; 0x30
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	2224      	movs	r2, #36	; 0x24
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f018 f9d4 	bl	801a7c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002424:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <MX_TIM1_Init+0xa8>)
 8002426:	4a23      	ldr	r2, [pc, #140]	; (80024b4 <MX_TIM1_Init+0xac>)
 8002428:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800242a:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <MX_TIM1_Init+0xa8>)
 800242c:	2200      	movs	r2, #0
 800242e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002430:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <MX_TIM1_Init+0xa8>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002436:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <MX_TIM1_Init+0xa8>)
 8002438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800243c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243e:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <MX_TIM1_Init+0xa8>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <MX_TIM1_Init+0xa8>)
 8002446:	2200      	movs	r2, #0
 8002448:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800244a:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <MX_TIM1_Init+0xa8>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002450:	2303      	movs	r3, #3
 8002452:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002458:	2301      	movs	r3, #1
 800245a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800245c:	2300      	movs	r3, #0
 800245e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002468:	2301      	movs	r3, #1
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800246c:	2300      	movs	r3, #0
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002474:	f107 030c 	add.w	r3, r7, #12
 8002478:	4619      	mov	r1, r3
 800247a:	480d      	ldr	r0, [pc, #52]	; (80024b0 <MX_TIM1_Init+0xa8>)
 800247c:	f004 f9c1 	bl	8006802 <HAL_TIM_Encoder_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002486:	f7ff fbed 	bl	8001c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	4619      	mov	r1, r3
 8002496:	4806      	ldr	r0, [pc, #24]	; (80024b0 <MX_TIM1_Init+0xa8>)
 8002498:	f005 fa20 	bl	80078dc <HAL_TIMEx_MasterConfigSynchronization>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80024a2:	f7ff fbdf 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024a6:	bf00      	nop
 80024a8:	3730      	adds	r7, #48	; 0x30
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	2000a8d4 	.word	0x2000a8d4
 80024b4:	40010000 	.word	0x40010000

080024b8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08c      	sub	sp, #48	; 0x30
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024be:	f107 030c 	add.w	r3, r7, #12
 80024c2:	2224      	movs	r2, #36	; 0x24
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f018 f97c 	bl	801a7c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024d4:	4b21      	ldr	r3, [pc, #132]	; (800255c <MX_TIM2_Init+0xa4>)
 80024d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024dc:	4b1f      	ldr	r3, [pc, #124]	; (800255c <MX_TIM2_Init+0xa4>)
 80024de:	2200      	movs	r2, #0
 80024e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e2:	4b1e      	ldr	r3, [pc, #120]	; (800255c <MX_TIM2_Init+0xa4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80024e8:	4b1c      	ldr	r3, [pc, #112]	; (800255c <MX_TIM2_Init+0xa4>)
 80024ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f0:	4b1a      	ldr	r3, [pc, #104]	; (800255c <MX_TIM2_Init+0xa4>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <MX_TIM2_Init+0xa4>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024fc:	2303      	movs	r3, #3
 80024fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002504:	2301      	movs	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002508:	2300      	movs	r3, #0
 800250a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002510:	2300      	movs	r3, #0
 8002512:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002514:	2301      	movs	r3, #1
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002518:	2300      	movs	r3, #0
 800251a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002520:	f107 030c 	add.w	r3, r7, #12
 8002524:	4619      	mov	r1, r3
 8002526:	480d      	ldr	r0, [pc, #52]	; (800255c <MX_TIM2_Init+0xa4>)
 8002528:	f004 f96b 	bl	8006802 <HAL_TIM_Encoder_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002532:	f7ff fb97 	bl	8001c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800253e:	1d3b      	adds	r3, r7, #4
 8002540:	4619      	mov	r1, r3
 8002542:	4806      	ldr	r0, [pc, #24]	; (800255c <MX_TIM2_Init+0xa4>)
 8002544:	f005 f9ca 	bl	80078dc <HAL_TIMEx_MasterConfigSynchronization>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800254e:	f7ff fb89 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002552:	bf00      	nop
 8002554:	3730      	adds	r7, #48	; 0x30
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	2000a91c 	.word	0x2000a91c

08002560 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08e      	sub	sp, #56	; 0x38
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002566:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800256a:	2200      	movs	r2, #0
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002570:	f107 0314 	add.w	r3, r7, #20
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	611a      	str	r2, [r3, #16]
 8002580:	615a      	str	r2, [r3, #20]
 8002582:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	609a      	str	r2, [r3, #8]
 800258e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002590:	4b2f      	ldr	r3, [pc, #188]	; (8002650 <MX_TIM3_Init+0xf0>)
 8002592:	4a30      	ldr	r2, [pc, #192]	; (8002654 <MX_TIM3_Init+0xf4>)
 8002594:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002596:	4b2e      	ldr	r3, [pc, #184]	; (8002650 <MX_TIM3_Init+0xf0>)
 8002598:	2200      	movs	r2, #0
 800259a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259c:	4b2c      	ldr	r3, [pc, #176]	; (8002650 <MX_TIM3_Init+0xf0>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80025a2:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <MX_TIM3_Init+0xf0>)
 80025a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025aa:	4b29      	ldr	r3, [pc, #164]	; (8002650 <MX_TIM3_Init+0xf0>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b0:	4b27      	ldr	r3, [pc, #156]	; (8002650 <MX_TIM3_Init+0xf0>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80025b6:	4826      	ldr	r0, [pc, #152]	; (8002650 <MX_TIM3_Init+0xf0>)
 80025b8:	f004 f87b 	bl	80066b2 <HAL_TIM_PWM_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80025c2:	f7ff fb4f 	bl	8001c64 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80025c6:	4822      	ldr	r0, [pc, #136]	; (8002650 <MX_TIM3_Init+0xf0>)
 80025c8:	f004 f8c2 	bl	8006750 <HAL_TIM_IC_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80025d2:	f7ff fb47 	bl	8001c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025da:	2300      	movs	r3, #0
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80025e2:	4619      	mov	r1, r3
 80025e4:	481a      	ldr	r0, [pc, #104]	; (8002650 <MX_TIM3_Init+0xf0>)
 80025e6:	f005 f979 	bl	80078dc <HAL_TIMEx_MasterConfigSynchronization>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80025f0:	f7ff fb38 	bl	8001c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025f4:	2360      	movs	r3, #96	; 0x60
 80025f6:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	2208      	movs	r2, #8
 800260a:	4619      	mov	r1, r3
 800260c:	4810      	ldr	r0, [pc, #64]	; (8002650 <MX_TIM3_Init+0xf0>)
 800260e:	f004 fb9f 	bl	8006d50 <HAL_TIM_PWM_ConfigChannel>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 8002618:	f7ff fb24 	bl	8001c64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800261c:	2300      	movs	r3, #0
 800261e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002620:	2301      	movs	r3, #1
 8002622:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	220c      	movs	r2, #12
 8002630:	4619      	mov	r1, r3
 8002632:	4807      	ldr	r0, [pc, #28]	; (8002650 <MX_TIM3_Init+0xf0>)
 8002634:	f004 faf0 	bl	8006c18 <HAL_TIM_IC_ConfigChannel>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 800263e:	f7ff fb11 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002642:	4803      	ldr	r0, [pc, #12]	; (8002650 <MX_TIM3_Init+0xf0>)
 8002644:	f000 fa5c 	bl	8002b00 <HAL_TIM_MspPostInit>

}
 8002648:	bf00      	nop
 800264a:	3738      	adds	r7, #56	; 0x38
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	2000a964 	.word	0x2000a964
 8002654:	40000400 	.word	0x40000400

08002658 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265e:	f107 0320 	add.w	r3, r7, #32
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	609a      	str	r2, [r3, #8]
 8002672:	60da      	str	r2, [r3, #12]
 8002674:	611a      	str	r2, [r3, #16]
 8002676:	615a      	str	r2, [r3, #20]
 8002678:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800267a:	4b24      	ldr	r3, [pc, #144]	; (800270c <MX_TIM4_Init+0xb4>)
 800267c:	4a24      	ldr	r2, [pc, #144]	; (8002710 <MX_TIM4_Init+0xb8>)
 800267e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002680:	4b22      	ldr	r3, [pc, #136]	; (800270c <MX_TIM4_Init+0xb4>)
 8002682:	2200      	movs	r2, #0
 8002684:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002686:	4b21      	ldr	r3, [pc, #132]	; (800270c <MX_TIM4_Init+0xb4>)
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800268c:	4b1f      	ldr	r3, [pc, #124]	; (800270c <MX_TIM4_Init+0xb4>)
 800268e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002692:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <MX_TIM4_Init+0xb4>)
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800269a:	4b1c      	ldr	r3, [pc, #112]	; (800270c <MX_TIM4_Init+0xb4>)
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80026a0:	481a      	ldr	r0, [pc, #104]	; (800270c <MX_TIM4_Init+0xb4>)
 80026a2:	f003 ffb7 	bl	8006614 <HAL_TIM_OC_Init>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80026ac:	f7ff fada 	bl	8001c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b0:	2300      	movs	r3, #0
 80026b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b4:	2300      	movs	r3, #0
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026b8:	f107 0320 	add.w	r3, r7, #32
 80026bc:	4619      	mov	r1, r3
 80026be:	4813      	ldr	r0, [pc, #76]	; (800270c <MX_TIM4_Init+0xb4>)
 80026c0:	f005 f90c 	bl	80078dc <HAL_TIMEx_MasterConfigSynchronization>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80026ca:	f7ff facb 	bl	8001c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80026ce:	2300      	movs	r3, #0
 80026d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	220c      	movs	r2, #12
 80026e2:	4619      	mov	r1, r3
 80026e4:	4809      	ldr	r0, [pc, #36]	; (800270c <MX_TIM4_Init+0xb4>)
 80026e6:	f004 fa3b 	bl	8006b60 <HAL_TIM_OC_ConfigChannel>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80026f0:	f7ff fab8 	bl	8001c64 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_4);
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <MX_TIM4_Init+0xb4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	69da      	ldr	r2, [r3, #28]
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <MX_TIM4_Init+0xb4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002702:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002704:	bf00      	nop
 8002706:	3728      	adds	r7, #40	; 0x28
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	2000a9ac 	.word	0x2000a9ac
 8002710:	40000800 	.word	0x40000800

08002714 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b096      	sub	sp, #88	; 0x58
 8002718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800271a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	609a      	str	r2, [r3, #8]
 8002726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002728:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	609a      	str	r2, [r3, #8]
 800273e:	60da      	str	r2, [r3, #12]
 8002740:	611a      	str	r2, [r3, #16]
 8002742:	615a      	str	r2, [r3, #20]
 8002744:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	2220      	movs	r2, #32
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f018 f839 	bl	801a7c4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002752:	4b45      	ldr	r3, [pc, #276]	; (8002868 <MX_TIM8_Init+0x154>)
 8002754:	4a45      	ldr	r2, [pc, #276]	; (800286c <MX_TIM8_Init+0x158>)
 8002756:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002758:	4b43      	ldr	r3, [pc, #268]	; (8002868 <MX_TIM8_Init+0x154>)
 800275a:	2200      	movs	r2, #0
 800275c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275e:	4b42      	ldr	r3, [pc, #264]	; (8002868 <MX_TIM8_Init+0x154>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002764:	4b40      	ldr	r3, [pc, #256]	; (8002868 <MX_TIM8_Init+0x154>)
 8002766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800276a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276c:	4b3e      	ldr	r3, [pc, #248]	; (8002868 <MX_TIM8_Init+0x154>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002772:	4b3d      	ldr	r3, [pc, #244]	; (8002868 <MX_TIM8_Init+0x154>)
 8002774:	2200      	movs	r2, #0
 8002776:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002778:	4b3b      	ldr	r3, [pc, #236]	; (8002868 <MX_TIM8_Init+0x154>)
 800277a:	2200      	movs	r2, #0
 800277c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800277e:	483a      	ldr	r0, [pc, #232]	; (8002868 <MX_TIM8_Init+0x154>)
 8002780:	f003 fe89 	bl	8006496 <HAL_TIM_Base_Init>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800278a:	f7ff fa6b 	bl	8001c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800278e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002792:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002794:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002798:	4619      	mov	r1, r3
 800279a:	4833      	ldr	r0, [pc, #204]	; (8002868 <MX_TIM8_Init+0x154>)
 800279c:	f004 fb9a 	bl	8006ed4 <HAL_TIM_ConfigClockSource>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80027a6:	f7ff fa5d 	bl	8001c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80027aa:	482f      	ldr	r0, [pc, #188]	; (8002868 <MX_TIM8_Init+0x154>)
 80027ac:	f003 ff81 	bl	80066b2 <HAL_TIM_PWM_Init>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80027b6:	f7ff fa55 	bl	8001c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ba:	2300      	movs	r3, #0
 80027bc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027be:	2300      	movs	r3, #0
 80027c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80027c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027c6:	4619      	mov	r1, r3
 80027c8:	4827      	ldr	r0, [pc, #156]	; (8002868 <MX_TIM8_Init+0x154>)
 80027ca:	f005 f887 	bl	80078dc <HAL_TIMEx_MasterConfigSynchronization>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80027d4:	f7ff fa46 	bl	8001c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027d8:	2360      	movs	r3, #96	; 0x60
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 512;
 80027dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027e2:	2300      	movs	r3, #0
 80027e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027e6:	2300      	movs	r3, #0
 80027e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ea:	2300      	movs	r3, #0
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027ee:	2300      	movs	r3, #0
 80027f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027fa:	2204      	movs	r2, #4
 80027fc:	4619      	mov	r1, r3
 80027fe:	481a      	ldr	r0, [pc, #104]	; (8002868 <MX_TIM8_Init+0x154>)
 8002800:	f004 faa6 	bl	8006d50 <HAL_TIM_PWM_ConfigChannel>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800280a:	f7ff fa2b 	bl	8001c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800280e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002812:	2208      	movs	r2, #8
 8002814:	4619      	mov	r1, r3
 8002816:	4814      	ldr	r0, [pc, #80]	; (8002868 <MX_TIM8_Init+0x154>)
 8002818:	f004 fa9a 	bl	8006d50 <HAL_TIM_PWM_ConfigChannel>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8002822:	f7ff fa1f 	bl	8001c64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 2;
 8002832:	2302      	movs	r3, #2
 8002834:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800283a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800283e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002840:	2300      	movs	r3, #0
 8002842:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	4619      	mov	r1, r3
 8002848:	4807      	ldr	r0, [pc, #28]	; (8002868 <MX_TIM8_Init+0x154>)
 800284a:	f005 f8c3 	bl	80079d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 8002854:	f7ff fa06 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002858:	4803      	ldr	r0, [pc, #12]	; (8002868 <MX_TIM8_Init+0x154>)
 800285a:	f000 f951 	bl	8002b00 <HAL_TIM_MspPostInit>

}
 800285e:	bf00      	nop
 8002860:	3758      	adds	r7, #88	; 0x58
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	2000a9f4 	.word	0x2000a9f4
 800286c:	40010400 	.word	0x40010400

08002870 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002874:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <MX_TIM14_Init+0x40>)
 8002876:	4a0f      	ldr	r2, [pc, #60]	; (80028b4 <MX_TIM14_Init+0x44>)
 8002878:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800287a:	4b0d      	ldr	r3, [pc, #52]	; (80028b0 <MX_TIM14_Init+0x40>)
 800287c:	2200      	movs	r2, #0
 800287e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <MX_TIM14_Init+0x40>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <MX_TIM14_Init+0x40>)
 8002888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800288c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800288e:	4b08      	ldr	r3, [pc, #32]	; (80028b0 <MX_TIM14_Init+0x40>)
 8002890:	2200      	movs	r2, #0
 8002892:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <MX_TIM14_Init+0x40>)
 8002896:	2200      	movs	r2, #0
 8002898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800289a:	4805      	ldr	r0, [pc, #20]	; (80028b0 <MX_TIM14_Init+0x40>)
 800289c:	f003 fdfb 	bl	8006496 <HAL_TIM_Base_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80028a6:	f7ff f9dd 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	2000aa3c 	.word	0x2000aa3c
 80028b4:	40002000 	.word	0x40002000

080028b8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08c      	sub	sp, #48	; 0x30
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a36      	ldr	r2, [pc, #216]	; (80029b0 <HAL_TIM_Encoder_MspInit+0xf8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d135      	bne.n	8002946 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	4b35      	ldr	r3, [pc, #212]	; (80029b4 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	4a34      	ldr	r2, [pc, #208]	; (80029b4 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ea:	4b32      	ldr	r3, [pc, #200]	; (80029b4 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	61bb      	str	r3, [r7, #24]
 80028f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <HAL_TIM_Encoder_MspInit+0xfc>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a2d      	ldr	r2, [pc, #180]	; (80029b4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b2b      	ldr	r3, [pc, #172]	; (80029b4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = TIM_ENC1_A_Pin|TIM_ENC1_B_Pin;
 8002912:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002916:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002920:	2300      	movs	r3, #0
 8002922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002924:	2301      	movs	r3, #1
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002928:	f107 031c 	add.w	r3, r7, #28
 800292c:	4619      	mov	r1, r3
 800292e:	4822      	ldr	r0, [pc, #136]	; (80029b8 <HAL_TIM_Encoder_MspInit+0x100>)
 8002930:	f001 fabc 	bl	8003eac <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002934:	2200      	movs	r2, #0
 8002936:	2105      	movs	r1, #5
 8002938:	2019      	movs	r0, #25
 800293a:	f000 fe6f 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800293e:	2019      	movs	r0, #25
 8002940:	f000 fe88 	bl	8003654 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002944:	e030      	b.n	80029a8 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM2)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294e:	d12b      	bne.n	80029a8 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	4a16      	ldr	r2, [pc, #88]	; (80029b4 <HAL_TIM_Encoder_MspInit+0xfc>)
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	6413      	str	r3, [r2, #64]	; 0x40
 8002960:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296c:	2300      	movs	r3, #0
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002974:	4a0f      	ldr	r2, [pc, #60]	; (80029b4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6313      	str	r3, [r2, #48]	; 0x30
 800297c:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <HAL_TIM_Encoder_MspInit+0xfc>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_ENC2_B_Pin|TIM_ENC2_A_Pin;
 8002988:	2322      	movs	r3, #34	; 0x22
 800298a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002998:	2301      	movs	r3, #1
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	4619      	mov	r1, r3
 80029a2:	4805      	ldr	r0, [pc, #20]	; (80029b8 <HAL_TIM_Encoder_MspInit+0x100>)
 80029a4:	f001 fa82 	bl	8003eac <HAL_GPIO_Init>
}
 80029a8:	bf00      	nop
 80029aa:	3730      	adds	r7, #48	; 0x30
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40010000 	.word	0x40010000
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40020000 	.word	0x40020000

080029bc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
 80029d2:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM3)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a19      	ldr	r2, [pc, #100]	; (8002a40 <HAL_TIM_PWM_MspInit+0x84>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d12b      	bne.n	8002a36 <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <HAL_TIM_PWM_MspInit+0x88>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	4a17      	ldr	r2, [pc, #92]	; (8002a44 <HAL_TIM_PWM_MspInit+0x88>)
 80029e8:	f043 0302 	orr.w	r3, r3, #2
 80029ec:	6413      	str	r3, [r2, #64]	; 0x40
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_TIM_PWM_MspInit+0x88>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_TIM_PWM_MspInit+0x88>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	4a10      	ldr	r2, [pc, #64]	; (8002a44 <HAL_TIM_PWM_MspInit+0x88>)
 8002a04:	f043 0302 	orr.w	r3, r3, #2
 8002a08:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <HAL_TIM_PWM_MspInit+0x88>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = TIM_FAN_INDEX_Pin;
 8002a16:	2302      	movs	r3, #2
 8002a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a26:	2302      	movs	r3, #2
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM_FAN_INDEX_GPIO_Port, &GPIO_InitStruct);
 8002a2a:	f107 0314 	add.w	r3, r7, #20
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4805      	ldr	r0, [pc, #20]	; (8002a48 <HAL_TIM_PWM_MspInit+0x8c>)
 8002a32:	f001 fa3b 	bl	8003eac <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a36:	bf00      	nop
 8002a38:	3728      	adds	r7, #40	; 0x28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40020400 	.word	0x40020400

08002a4c <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM4)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0b      	ldr	r2, [pc, #44]	; (8002a88 <HAL_TIM_OC_MspInit+0x3c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10d      	bne.n	8002a7a <HAL_TIM_OC_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_TIM_OC_MspInit+0x40>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <HAL_TIM_OC_MspInit+0x40>)
 8002a68:	f043 0304 	orr.w	r3, r3, #4
 8002a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a6e:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <HAL_TIM_OC_MspInit+0x40>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	40000800 	.word	0x40000800
 8002a8c:	40023800 	.word	0x40023800

08002a90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a15      	ldr	r2, [pc, #84]	; (8002af4 <HAL_TIM_Base_MspInit+0x64>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_TIM_Base_MspInit+0x68>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aaa:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <HAL_TIM_Base_MspInit+0x68>)
 8002aac:	f043 0302 	orr.w	r3, r3, #2
 8002ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <HAL_TIM_Base_MspInit+0x68>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002abe:	e012      	b.n	8002ae6 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM14)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0d      	ldr	r2, [pc, #52]	; (8002afc <HAL_TIM_Base_MspInit+0x6c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10d      	bne.n	8002ae6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_TIM_Base_MspInit+0x68>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	4a09      	ldr	r2, [pc, #36]	; (8002af8 <HAL_TIM_Base_MspInit+0x68>)
 8002ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ada:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <HAL_TIM_Base_MspInit+0x68>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
}
 8002ae6:	bf00      	nop
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40010400 	.word	0x40010400
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40002000 	.word	0x40002000

08002b00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a34      	ldr	r2, [pc, #208]	; (8002bf0 <HAL_TIM_MspPostInit+0xf0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d11e      	bne.n	8002b60 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	4b33      	ldr	r3, [pc, #204]	; (8002bf4 <HAL_TIM_MspPostInit+0xf4>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	4a32      	ldr	r2, [pc, #200]	; (8002bf4 <HAL_TIM_MspPostInit+0xf4>)
 8002b2c:	f043 0302 	orr.w	r3, r3, #2
 8002b30:	6313      	str	r3, [r2, #48]	; 0x30
 8002b32:	4b30      	ldr	r3, [pc, #192]	; (8002bf4 <HAL_TIM_MspPostInit+0xf4>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = TIM_FAN_PWM_Pin;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	2302      	movs	r3, #2
 8002b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TIM_FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8002b52:	f107 0314 	add.w	r3, r7, #20
 8002b56:	4619      	mov	r1, r3
 8002b58:	4827      	ldr	r0, [pc, #156]	; (8002bf8 <HAL_TIM_MspPostInit+0xf8>)
 8002b5a:	f001 f9a7 	bl	8003eac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002b5e:	e042      	b.n	8002be6 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM8)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a25      	ldr	r2, [pc, #148]	; (8002bfc <HAL_TIM_MspPostInit+0xfc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d13d      	bne.n	8002be6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	4b21      	ldr	r3, [pc, #132]	; (8002bf4 <HAL_TIM_MspPostInit+0xf4>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	4a20      	ldr	r2, [pc, #128]	; (8002bf4 <HAL_TIM_MspPostInit+0xf4>)
 8002b74:	f043 0302 	orr.w	r3, r3, #2
 8002b78:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7a:	4b1e      	ldr	r3, [pc, #120]	; (8002bf4 <HAL_TIM_MspPostInit+0xf4>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	f003 0302 	and.w	r3, r3, #2
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <HAL_TIM_MspPostInit+0xf4>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	4a19      	ldr	r2, [pc, #100]	; (8002bf4 <HAL_TIM_MspPostInit+0xf4>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	6313      	str	r3, [r2, #48]	; 0x30
 8002b96:	4b17      	ldr	r3, [pc, #92]	; (8002bf4 <HAL_TIM_MspPostInit+0xf4>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TIM_MOT1_B_Pin|TIM_MOT2_B_Pin;
 8002ba2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb8:	f107 0314 	add.w	r3, r7, #20
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	480e      	ldr	r0, [pc, #56]	; (8002bf8 <HAL_TIM_MspPostInit+0xf8>)
 8002bc0:	f001 f974 	bl	8003eac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM_MOT1_A_Pin|TIM_MOT2_A_Pin;
 8002bc4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bda:	f107 0314 	add.w	r3, r7, #20
 8002bde:	4619      	mov	r1, r3
 8002be0:	4807      	ldr	r0, [pc, #28]	; (8002c00 <HAL_TIM_MspPostInit+0x100>)
 8002be2:	f001 f963 	bl	8003eac <HAL_GPIO_Init>
}
 8002be6:	bf00      	nop
 8002be8:	3728      	adds	r7, #40	; 0x28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40020400 	.word	0x40020400
 8002bfc:	40010400 	.word	0x40010400
 8002c00:	40020800 	.word	0x40020800

08002c04 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <MX_UART5_Init+0x4c>)
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <MX_UART5_Init+0x50>)
 8002c0c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <MX_UART5_Init+0x4c>)
 8002c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c14:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <MX_UART5_Init+0x4c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <MX_UART5_Init+0x4c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <MX_UART5_Init+0x4c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <MX_UART5_Init+0x4c>)
 8002c2a:	220c      	movs	r2, #12
 8002c2c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <MX_UART5_Init+0x4c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <MX_UART5_Init+0x4c>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002c3a:	4805      	ldr	r0, [pc, #20]	; (8002c50 <MX_UART5_Init+0x4c>)
 8002c3c:	f004 ff30 	bl	8007aa0 <HAL_UART_Init>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002c46:	f7ff f80d 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	2000aa84 	.word	0x2000aa84
 8002c54:	40005000 	.word	0x40005000

08002c58 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <MX_USART1_UART_Init+0x4c>)
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <MX_USART1_UART_Init+0x50>)
 8002c60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <MX_USART1_UART_Init+0x4c>)
 8002c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <MX_USART1_UART_Init+0x4c>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <MX_USART1_UART_Init+0x4c>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <MX_USART1_UART_Init+0x4c>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c7c:	4b09      	ldr	r3, [pc, #36]	; (8002ca4 <MX_USART1_UART_Init+0x4c>)
 8002c7e:	220c      	movs	r2, #12
 8002c80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <MX_USART1_UART_Init+0x4c>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <MX_USART1_UART_Init+0x4c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c8e:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <MX_USART1_UART_Init+0x4c>)
 8002c90:	f004 ff06 	bl	8007aa0 <HAL_UART_Init>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c9a:	f7fe ffe3 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	2000aac8 	.word	0x2000aac8
 8002ca8:	40011000 	.word	0x40011000

08002cac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08c      	sub	sp, #48	; 0x30
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	f107 031c 	add.w	r3, r7, #28
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a75      	ldr	r2, [pc, #468]	; (8002ea0 <HAL_UART_MspInit+0x1f4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d14b      	bne.n	8002d66 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	4b74      	ldr	r3, [pc, #464]	; (8002ea4 <HAL_UART_MspInit+0x1f8>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	4a73      	ldr	r2, [pc, #460]	; (8002ea4 <HAL_UART_MspInit+0x1f8>)
 8002cd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cde:	4b71      	ldr	r3, [pc, #452]	; (8002ea4 <HAL_UART_MspInit+0x1f8>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce6:	61bb      	str	r3, [r7, #24]
 8002ce8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	4b6d      	ldr	r3, [pc, #436]	; (8002ea4 <HAL_UART_MspInit+0x1f8>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	4a6c      	ldr	r2, [pc, #432]	; (8002ea4 <HAL_UART_MspInit+0x1f8>)
 8002cf4:	f043 0304 	orr.w	r3, r3, #4
 8002cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfa:	4b6a      	ldr	r3, [pc, #424]	; (8002ea4 <HAL_UART_MspInit+0x1f8>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	613b      	str	r3, [r7, #16]
 8002d0a:	4b66      	ldr	r3, [pc, #408]	; (8002ea4 <HAL_UART_MspInit+0x1f8>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4a65      	ldr	r2, [pc, #404]	; (8002ea4 <HAL_UART_MspInit+0x1f8>)
 8002d10:	f043 0308 	orr.w	r3, r3, #8
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4b63      	ldr	r3, [pc, #396]	; (8002ea4 <HAL_UART_MspInit+0x1f8>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	613b      	str	r3, [r7, #16]
 8002d20:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = SER2_TX_Pin;
 8002d22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d30:	2303      	movs	r3, #3
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d34:	2308      	movs	r3, #8
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SER2_TX_GPIO_Port, &GPIO_InitStruct);
 8002d38:	f107 031c 	add.w	r3, r7, #28
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	485a      	ldr	r0, [pc, #360]	; (8002ea8 <HAL_UART_MspInit+0x1fc>)
 8002d40:	f001 f8b4 	bl	8003eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SER2_RX_Pin;
 8002d44:	2304      	movs	r3, #4
 8002d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d50:	2303      	movs	r3, #3
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d54:	2308      	movs	r3, #8
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SER2_RX_GPIO_Port, &GPIO_InitStruct);
 8002d58:	f107 031c 	add.w	r3, r7, #28
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4853      	ldr	r0, [pc, #332]	; (8002eac <HAL_UART_MspInit+0x200>)
 8002d60:	f001 f8a4 	bl	8003eac <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002d64:	e098      	b.n	8002e98 <HAL_UART_MspInit+0x1ec>
  else if(uartHandle->Instance==USART1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a51      	ldr	r2, [pc, #324]	; (8002eb0 <HAL_UART_MspInit+0x204>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	f040 8093 	bne.w	8002e98 <HAL_UART_MspInit+0x1ec>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	4b4b      	ldr	r3, [pc, #300]	; (8002ea4 <HAL_UART_MspInit+0x1f8>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	4a4a      	ldr	r2, [pc, #296]	; (8002ea4 <HAL_UART_MspInit+0x1f8>)
 8002d7c:	f043 0310 	orr.w	r3, r3, #16
 8002d80:	6453      	str	r3, [r2, #68]	; 0x44
 8002d82:	4b48      	ldr	r3, [pc, #288]	; (8002ea4 <HAL_UART_MspInit+0x1f8>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	4b44      	ldr	r3, [pc, #272]	; (8002ea4 <HAL_UART_MspInit+0x1f8>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a43      	ldr	r2, [pc, #268]	; (8002ea4 <HAL_UART_MspInit+0x1f8>)
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <HAL_UART_MspInit+0x1f8>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002daa:	23c0      	movs	r3, #192	; 0xc0
 8002dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db6:	2303      	movs	r3, #3
 8002db8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dba:	2307      	movs	r3, #7
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dbe:	f107 031c 	add.w	r3, r7, #28
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	483b      	ldr	r0, [pc, #236]	; (8002eb4 <HAL_UART_MspInit+0x208>)
 8002dc6:	f001 f871 	bl	8003eac <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002dca:	4b3b      	ldr	r3, [pc, #236]	; (8002eb8 <HAL_UART_MspInit+0x20c>)
 8002dcc:	4a3b      	ldr	r2, [pc, #236]	; (8002ebc <HAL_UART_MspInit+0x210>)
 8002dce:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002dd0:	4b39      	ldr	r3, [pc, #228]	; (8002eb8 <HAL_UART_MspInit+0x20c>)
 8002dd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dd6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dd8:	4b37      	ldr	r3, [pc, #220]	; (8002eb8 <HAL_UART_MspInit+0x20c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dde:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <HAL_UART_MspInit+0x20c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002de4:	4b34      	ldr	r3, [pc, #208]	; (8002eb8 <HAL_UART_MspInit+0x20c>)
 8002de6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dec:	4b32      	ldr	r3, [pc, #200]	; (8002eb8 <HAL_UART_MspInit+0x20c>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002df2:	4b31      	ldr	r3, [pc, #196]	; (8002eb8 <HAL_UART_MspInit+0x20c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002df8:	4b2f      	ldr	r3, [pc, #188]	; (8002eb8 <HAL_UART_MspInit+0x20c>)
 8002dfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dfe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e00:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <HAL_UART_MspInit+0x20c>)
 8002e02:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e06:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e08:	4b2b      	ldr	r3, [pc, #172]	; (8002eb8 <HAL_UART_MspInit+0x20c>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002e0e:	482a      	ldr	r0, [pc, #168]	; (8002eb8 <HAL_UART_MspInit+0x20c>)
 8002e10:	f000 fc4a 	bl	80036a8 <HAL_DMA_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_UART_MspInit+0x172>
      Error_Handler();
 8002e1a:	f7fe ff23 	bl	8001c64 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a25      	ldr	r2, [pc, #148]	; (8002eb8 <HAL_UART_MspInit+0x20c>)
 8002e22:	639a      	str	r2, [r3, #56]	; 0x38
 8002e24:	4a24      	ldr	r2, [pc, #144]	; (8002eb8 <HAL_UART_MspInit+0x20c>)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002e2a:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <HAL_UART_MspInit+0x214>)
 8002e2c:	4a25      	ldr	r2, [pc, #148]	; (8002ec4 <HAL_UART_MspInit+0x218>)
 8002e2e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002e30:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <HAL_UART_MspInit+0x214>)
 8002e32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e36:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e38:	4b21      	ldr	r3, [pc, #132]	; (8002ec0 <HAL_UART_MspInit+0x214>)
 8002e3a:	2240      	movs	r2, #64	; 0x40
 8002e3c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e3e:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <HAL_UART_MspInit+0x214>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e44:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <HAL_UART_MspInit+0x214>)
 8002e46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e4a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e4c:	4b1c      	ldr	r3, [pc, #112]	; (8002ec0 <HAL_UART_MspInit+0x214>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e52:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <HAL_UART_MspInit+0x214>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_UART_MspInit+0x214>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e5e:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <HAL_UART_MspInit+0x214>)
 8002e60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e64:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e66:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <HAL_UART_MspInit+0x214>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002e6c:	4814      	ldr	r0, [pc, #80]	; (8002ec0 <HAL_UART_MspInit+0x214>)
 8002e6e:	f000 fc1b 	bl	80036a8 <HAL_DMA_Init>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 8002e78:	f7fe fef4 	bl	8001c64 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <HAL_UART_MspInit+0x214>)
 8002e80:	635a      	str	r2, [r3, #52]	; 0x34
 8002e82:	4a0f      	ldr	r2, [pc, #60]	; (8002ec0 <HAL_UART_MspInit+0x214>)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2105      	movs	r1, #5
 8002e8c:	2025      	movs	r0, #37	; 0x25
 8002e8e:	f000 fbc5 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e92:	2025      	movs	r0, #37	; 0x25
 8002e94:	f000 fbde 	bl	8003654 <HAL_NVIC_EnableIRQ>
}
 8002e98:	bf00      	nop
 8002e9a:	3730      	adds	r7, #48	; 0x30
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40005000 	.word	0x40005000
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40020800 	.word	0x40020800
 8002eac:	40020c00 	.word	0x40020c00
 8002eb0:	40011000 	.word	0x40011000
 8002eb4:	40020400 	.word	0x40020400
 8002eb8:	2000ab0c 	.word	0x2000ab0c
 8002ebc:	40026440 	.word	0x40026440
 8002ec0:	2000ab6c 	.word	0x2000ab6c
 8002ec4:	400264b8 	.word	0x400264b8

08002ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ecc:	480d      	ldr	r0, [pc, #52]	; (8002f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ece:	490e      	ldr	r1, [pc, #56]	; (8002f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ed0:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed4:	e002      	b.n	8002edc <LoopCopyDataInit>

08002ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eda:	3304      	adds	r3, #4

08002edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee0:	d3f9      	bcc.n	8002ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee2:	4a0b      	ldr	r2, [pc, #44]	; (8002f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ee4:	4c0b      	ldr	r4, [pc, #44]	; (8002f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee8:	e001      	b.n	8002eee <LoopFillZerobss>

08002eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eec:	3204      	adds	r2, #4

08002eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef0:	d3fb      	bcc.n	8002eea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ef2:	f7ff fa77 	bl	80023e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ef6:	f017 fc1f 	bl	801a738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002efa:	f7fe fe09 	bl	8001b10 <main>
  bx  lr    
 8002efe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f08:	20000a20 	.word	0x20000a20
  ldr r2, =_sidata
 8002f0c:	0801d174 	.word	0x0801d174
  ldr r2, =_sbss
 8002f10:	20000a20 	.word	0x20000a20
  ldr r4, =_ebss
 8002f14:	20015d08 	.word	0x20015d08

08002f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f18:	e7fe      	b.n	8002f18 <ADC_IRQHandler>
	...

08002f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f20:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <HAL_Init+0x40>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a0d      	ldr	r2, [pc, #52]	; (8002f5c <HAL_Init+0x40>)
 8002f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <HAL_Init+0x40>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <HAL_Init+0x40>)
 8002f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f38:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <HAL_Init+0x40>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a07      	ldr	r2, [pc, #28]	; (8002f5c <HAL_Init+0x40>)
 8002f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f44:	2003      	movs	r0, #3
 8002f46:	f000 fb5e 	bl	8003606 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f4a:	2005      	movs	r0, #5
 8002f4c:	f7ff f8d4 	bl	80020f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f50:	f7ff f8a6 	bl	80020a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023c00 	.word	0x40023c00

08002f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_IncTick+0x20>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <HAL_IncTick+0x24>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <HAL_IncTick+0x24>)
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	2000000c 	.word	0x2000000c
 8002f84:	2000abcc 	.word	0x2000abcc

08002f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <HAL_GetTick+0x14>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	2000abcc 	.word	0x2000abcc

08002fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fa8:	f7ff ffee 	bl	8002f88 <HAL_GetTick>
 8002fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fb8:	d005      	beq.n	8002fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fba:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <HAL_Delay+0x44>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fc6:	bf00      	nop
 8002fc8:	f7ff ffde 	bl	8002f88 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d8f7      	bhi.n	8002fc8 <HAL_Delay+0x28>
  {
  }
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2000000c 	.word	0x2000000c

08002fe8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e033      	b.n	8003066 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	2b00      	cmp	r3, #0
 8003004:	d109      	bne.n	800301a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7fd fe50 	bl	8000cac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	2b00      	cmp	r3, #0
 8003024:	d118      	bne.n	8003058 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800302e:	f023 0302 	bic.w	r3, r3, #2
 8003032:	f043 0202 	orr.w	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f93a 	bl	80032b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f023 0303 	bic.w	r3, r3, #3
 800304e:	f043 0201 	orr.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
 8003056:	e001      	b.n	800305c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003064:	7bfb      	ldrb	r3, [r7, #15]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_ADC_ConfigChannel+0x1c>
 8003088:	2302      	movs	r3, #2
 800308a:	e105      	b.n	8003298 <HAL_ADC_ConfigChannel+0x228>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b09      	cmp	r3, #9
 800309a:	d925      	bls.n	80030e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68d9      	ldr	r1, [r3, #12]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	3b1e      	subs	r3, #30
 80030b2:	2207      	movs	r2, #7
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43da      	mvns	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	400a      	ands	r2, r1
 80030c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68d9      	ldr	r1, [r3, #12]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	4618      	mov	r0, r3
 80030d4:	4603      	mov	r3, r0
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4403      	add	r3, r0
 80030da:	3b1e      	subs	r3, #30
 80030dc:	409a      	lsls	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	60da      	str	r2, [r3, #12]
 80030e6:	e022      	b.n	800312e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6919      	ldr	r1, [r3, #16]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	461a      	mov	r2, r3
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	2207      	movs	r2, #7
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43da      	mvns	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	400a      	ands	r2, r1
 800310a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6919      	ldr	r1, [r3, #16]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	b29b      	uxth	r3, r3
 800311c:	4618      	mov	r0, r3
 800311e:	4603      	mov	r3, r0
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	4403      	add	r3, r0
 8003124:	409a      	lsls	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b06      	cmp	r3, #6
 8003134:	d824      	bhi.n	8003180 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	3b05      	subs	r3, #5
 8003148:	221f      	movs	r2, #31
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43da      	mvns	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	400a      	ands	r2, r1
 8003156:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	4618      	mov	r0, r3
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	3b05      	subs	r3, #5
 8003172:	fa00 f203 	lsl.w	r2, r0, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	635a      	str	r2, [r3, #52]	; 0x34
 800317e:	e04c      	b.n	800321a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b0c      	cmp	r3, #12
 8003186:	d824      	bhi.n	80031d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	4413      	add	r3, r2
 8003198:	3b23      	subs	r3, #35	; 0x23
 800319a:	221f      	movs	r2, #31
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43da      	mvns	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	400a      	ands	r2, r1
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	4618      	mov	r0, r3
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	3b23      	subs	r3, #35	; 0x23
 80031c4:	fa00 f203 	lsl.w	r2, r0, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30
 80031d0:	e023      	b.n	800321a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	3b41      	subs	r3, #65	; 0x41
 80031e4:	221f      	movs	r2, #31
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43da      	mvns	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	400a      	ands	r2, r1
 80031f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	4618      	mov	r0, r3
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	3b41      	subs	r3, #65	; 0x41
 800320e:	fa00 f203 	lsl.w	r2, r0, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800321a:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <HAL_ADC_ConfigChannel+0x234>)
 800321c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a21      	ldr	r2, [pc, #132]	; (80032a8 <HAL_ADC_ConfigChannel+0x238>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d109      	bne.n	800323c <HAL_ADC_ConfigChannel+0x1cc>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b12      	cmp	r3, #18
 800322e:	d105      	bne.n	800323c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <HAL_ADC_ConfigChannel+0x238>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d123      	bne.n	800328e <HAL_ADC_ConfigChannel+0x21e>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b10      	cmp	r3, #16
 800324c:	d003      	beq.n	8003256 <HAL_ADC_ConfigChannel+0x1e6>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b11      	cmp	r3, #17
 8003254:	d11b      	bne.n	800328e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b10      	cmp	r3, #16
 8003268:	d111      	bne.n	800328e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800326a:	4b10      	ldr	r3, [pc, #64]	; (80032ac <HAL_ADC_ConfigChannel+0x23c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a10      	ldr	r2, [pc, #64]	; (80032b0 <HAL_ADC_ConfigChannel+0x240>)
 8003270:	fba2 2303 	umull	r2, r3, r2, r3
 8003274:	0c9a      	lsrs	r2, r3, #18
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003280:	e002      	b.n	8003288 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	3b01      	subs	r3, #1
 8003286:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f9      	bne.n	8003282 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	40012300 	.word	0x40012300
 80032a8:	40012000 	.word	0x40012000
 80032ac:	20000004 	.word	0x20000004
 80032b0:	431bde83 	.word	0x431bde83

080032b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032bc:	4b79      	ldr	r3, [pc, #484]	; (80034a4 <ADC_Init+0x1f0>)
 80032be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	431a      	orrs	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6859      	ldr	r1, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	021a      	lsls	r2, r3, #8
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800330c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6859      	ldr	r1, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800332e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6899      	ldr	r1, [r3, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68da      	ldr	r2, [r3, #12]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003346:	4a58      	ldr	r2, [pc, #352]	; (80034a8 <ADC_Init+0x1f4>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d022      	beq.n	8003392 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800335a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6899      	ldr	r1, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689a      	ldr	r2, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800337c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6899      	ldr	r1, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	609a      	str	r2, [r3, #8]
 8003390:	e00f      	b.n	80033b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0202 	bic.w	r2, r2, #2
 80033c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6899      	ldr	r1, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	7e1b      	ldrb	r3, [r3, #24]
 80033cc:	005a      	lsls	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d01b      	beq.n	8003418 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6859      	ldr	r1, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	3b01      	subs	r3, #1
 800340c:	035a      	lsls	r2, r3, #13
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	e007      	b.n	8003428 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003426:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003436:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	3b01      	subs	r3, #1
 8003444:	051a      	lsls	r2, r3, #20
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800345c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6899      	ldr	r1, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800346a:	025a      	lsls	r2, r3, #9
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003482:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6899      	ldr	r1, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	029a      	lsls	r2, r3, #10
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	609a      	str	r2, [r3, #8]
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	40012300 	.word	0x40012300
 80034a8:	0f000001 	.word	0x0f000001

080034ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034bc:	4b0c      	ldr	r3, [pc, #48]	; (80034f0 <__NVIC_SetPriorityGrouping+0x44>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034c8:	4013      	ands	r3, r2
 80034ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034de:	4a04      	ldr	r2, [pc, #16]	; (80034f0 <__NVIC_SetPriorityGrouping+0x44>)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	60d3      	str	r3, [r2, #12]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f8:	4b04      	ldr	r3, [pc, #16]	; (800350c <__NVIC_GetPriorityGrouping+0x18>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	0a1b      	lsrs	r3, r3, #8
 80034fe:	f003 0307 	and.w	r3, r3, #7
}
 8003502:	4618      	mov	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351e:	2b00      	cmp	r3, #0
 8003520:	db0b      	blt.n	800353a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	f003 021f 	and.w	r2, r3, #31
 8003528:	4907      	ldr	r1, [pc, #28]	; (8003548 <__NVIC_EnableIRQ+0x38>)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	2001      	movs	r0, #1
 8003532:	fa00 f202 	lsl.w	r2, r0, r2
 8003536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	e000e100 	.word	0xe000e100

0800354c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	6039      	str	r1, [r7, #0]
 8003556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355c:	2b00      	cmp	r3, #0
 800355e:	db0a      	blt.n	8003576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	b2da      	uxtb	r2, r3
 8003564:	490c      	ldr	r1, [pc, #48]	; (8003598 <__NVIC_SetPriority+0x4c>)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	0112      	lsls	r2, r2, #4
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	440b      	add	r3, r1
 8003570:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003574:	e00a      	b.n	800358c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4908      	ldr	r1, [pc, #32]	; (800359c <__NVIC_SetPriority+0x50>)
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	3b04      	subs	r3, #4
 8003584:	0112      	lsls	r2, r2, #4
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	440b      	add	r3, r1
 800358a:	761a      	strb	r2, [r3, #24]
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	e000e100 	.word	0xe000e100
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b089      	sub	sp, #36	; 0x24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f1c3 0307 	rsb	r3, r3, #7
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	bf28      	it	cs
 80035be:	2304      	movcs	r3, #4
 80035c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	3304      	adds	r3, #4
 80035c6:	2b06      	cmp	r3, #6
 80035c8:	d902      	bls.n	80035d0 <NVIC_EncodePriority+0x30>
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	3b03      	subs	r3, #3
 80035ce:	e000      	b.n	80035d2 <NVIC_EncodePriority+0x32>
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43da      	mvns	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	401a      	ands	r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	43d9      	mvns	r1, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f8:	4313      	orrs	r3, r2
         );
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3724      	adds	r7, #36	; 0x24
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff ff4c 	bl	80034ac <__NVIC_SetPriorityGrouping>
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800362e:	f7ff ff61 	bl	80034f4 <__NVIC_GetPriorityGrouping>
 8003632:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	68b9      	ldr	r1, [r7, #8]
 8003638:	6978      	ldr	r0, [r7, #20]
 800363a:	f7ff ffb1 	bl	80035a0 <NVIC_EncodePriority>
 800363e:	4602      	mov	r2, r0
 8003640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003644:	4611      	mov	r1, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff ff80 	bl	800354c <__NVIC_SetPriority>
}
 800364c:	bf00      	nop
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800365e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff ff54 	bl	8003510 <__NVIC_EnableIRQ>
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e00e      	b.n	80036a0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	795b      	ldrb	r3, [r3, #5]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d105      	bne.n	8003698 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f7fd fbe2 	bl	8000e5c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036b4:	f7ff fc68 	bl	8002f88 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e099      	b.n	80037f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036e4:	e00f      	b.n	8003706 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036e6:	f7ff fc4f 	bl	8002f88 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b05      	cmp	r3, #5
 80036f2:	d908      	bls.n	8003706 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2220      	movs	r2, #32
 80036f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2203      	movs	r2, #3
 80036fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e078      	b.n	80037f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e8      	bne.n	80036e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	4b38      	ldr	r3, [pc, #224]	; (8003800 <HAL_DMA_Init+0x158>)
 8003720:	4013      	ands	r3, r2
 8003722:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003732:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800373e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800374a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	2b04      	cmp	r3, #4
 800375e:	d107      	bne.n	8003770 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	4313      	orrs	r3, r2
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f023 0307 	bic.w	r3, r3, #7
 8003786:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	2b04      	cmp	r3, #4
 8003798:	d117      	bne.n	80037ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00e      	beq.n	80037ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fb01 	bl	8003db4 <DMA_CheckFifoParam>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d008      	beq.n	80037ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2240      	movs	r2, #64	; 0x40
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037c6:	2301      	movs	r3, #1
 80037c8:	e016      	b.n	80037f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fab8 	bl	8003d48 <DMA_CalcBaseAndBitshift>
 80037d8:	4603      	mov	r3, r0
 80037da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e0:	223f      	movs	r2, #63	; 0x3f
 80037e2:	409a      	lsls	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	f010803f 	.word	0xf010803f

08003804 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
 8003810:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_DMA_Start_IT+0x26>
 8003826:	2302      	movs	r3, #2
 8003828:	e040      	b.n	80038ac <HAL_DMA_Start_IT+0xa8>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b01      	cmp	r3, #1
 800383c:	d12f      	bne.n	800389e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2202      	movs	r2, #2
 8003842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fa4a 	bl	8003cec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385c:	223f      	movs	r2, #63	; 0x3f
 800385e:	409a      	lsls	r2, r3
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0216 	orr.w	r2, r2, #22
 8003872:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	2b00      	cmp	r3, #0
 800387a:	d007      	beq.n	800388c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0208 	orr.w	r2, r2, #8
 800388a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0201 	orr.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	e005      	b.n	80038aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038a6:	2302      	movs	r3, #2
 80038a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038c2:	f7ff fb61 	bl	8002f88 <HAL_GetTick>
 80038c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d008      	beq.n	80038e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2280      	movs	r2, #128	; 0x80
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e052      	b.n	800398c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0216 	bic.w	r2, r2, #22
 80038f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003904:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	2b00      	cmp	r3, #0
 800390c:	d103      	bne.n	8003916 <HAL_DMA_Abort+0x62>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003912:	2b00      	cmp	r3, #0
 8003914:	d007      	beq.n	8003926 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0208 	bic.w	r2, r2, #8
 8003924:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003936:	e013      	b.n	8003960 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003938:	f7ff fb26 	bl	8002f88 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b05      	cmp	r3, #5
 8003944:	d90c      	bls.n	8003960 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2220      	movs	r2, #32
 800394a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2203      	movs	r2, #3
 8003950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e015      	b.n	800398c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1e4      	bne.n	8003938 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003972:	223f      	movs	r2, #63	; 0x3f
 8003974:	409a      	lsls	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d004      	beq.n	80039b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2280      	movs	r2, #128	; 0x80
 80039ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e00c      	b.n	80039cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2205      	movs	r2, #5
 80039b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0201 	bic.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039e4:	4b8e      	ldr	r3, [pc, #568]	; (8003c20 <HAL_DMA_IRQHandler+0x248>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a8e      	ldr	r2, [pc, #568]	; (8003c24 <HAL_DMA_IRQHandler+0x24c>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	0a9b      	lsrs	r3, r3, #10
 80039f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	2208      	movs	r2, #8
 8003a04:	409a      	lsls	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d01a      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d013      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0204 	bic.w	r2, r2, #4
 8003a2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a30:	2208      	movs	r2, #8
 8003a32:	409a      	lsls	r2, r3
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	f043 0201 	orr.w	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a48:	2201      	movs	r2, #1
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d012      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00b      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a66:	2201      	movs	r2, #1
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	f043 0202 	orr.w	r2, r3, #2
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7e:	2204      	movs	r2, #4
 8003a80:	409a      	lsls	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d012      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00b      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9c:	2204      	movs	r2, #4
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa8:	f043 0204 	orr.w	r2, r3, #4
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d043      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0308 	and.w	r3, r3, #8
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d03c      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad2:	2210      	movs	r2, #16
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d018      	beq.n	8003b1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d108      	bne.n	8003b08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d024      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4798      	blx	r3
 8003b06:	e01f      	b.n	8003b48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d01b      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	4798      	blx	r3
 8003b18:	e016      	b.n	8003b48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d107      	bne.n	8003b38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0208 	bic.w	r2, r2, #8
 8003b36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 808f 	beq.w	8003c78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f000 8087 	beq.w	8003c78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6e:	2220      	movs	r2, #32
 8003b70:	409a      	lsls	r2, r3
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b05      	cmp	r3, #5
 8003b80:	d136      	bne.n	8003bf0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0216 	bic.w	r2, r2, #22
 8003b90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695a      	ldr	r2, [r3, #20]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ba0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d103      	bne.n	8003bb2 <HAL_DMA_IRQHandler+0x1da>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d007      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0208 	bic.w	r2, r2, #8
 8003bc0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc6:	223f      	movs	r2, #63	; 0x3f
 8003bc8:	409a      	lsls	r2, r3
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d07e      	beq.n	8003ce4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	4798      	blx	r3
        }
        return;
 8003bee:	e079      	b.n	8003ce4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d01d      	beq.n	8003c3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10d      	bne.n	8003c28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d031      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	4798      	blx	r3
 8003c1c:	e02c      	b.n	8003c78 <HAL_DMA_IRQHandler+0x2a0>
 8003c1e:	bf00      	nop
 8003c20:	20000004 	.word	0x20000004
 8003c24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d023      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	4798      	blx	r3
 8003c38:	e01e      	b.n	8003c78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10f      	bne.n	8003c68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0210 	bic.w	r2, r2, #16
 8003c56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d032      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d022      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2205      	movs	r2, #5
 8003c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0201 	bic.w	r2, r2, #1
 8003ca2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d307      	bcc.n	8003cc0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f2      	bne.n	8003ca4 <HAL_DMA_IRQHandler+0x2cc>
 8003cbe:	e000      	b.n	8003cc2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003cc0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	4798      	blx	r3
 8003ce2:	e000      	b.n	8003ce6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ce4:	bf00      	nop
    }
  }
}
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2b40      	cmp	r3, #64	; 0x40
 8003d18:	d108      	bne.n	8003d2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d2a:	e007      	b.n	8003d3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	60da      	str	r2, [r3, #12]
}
 8003d3c:	bf00      	nop
 8003d3e:	3714      	adds	r7, #20
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	3b10      	subs	r3, #16
 8003d58:	4a14      	ldr	r2, [pc, #80]	; (8003dac <DMA_CalcBaseAndBitshift+0x64>)
 8003d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d5e:	091b      	lsrs	r3, r3, #4
 8003d60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d62:	4a13      	ldr	r2, [pc, #76]	; (8003db0 <DMA_CalcBaseAndBitshift+0x68>)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4413      	add	r3, r2
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d909      	bls.n	8003d8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d7e:	f023 0303 	bic.w	r3, r3, #3
 8003d82:	1d1a      	adds	r2, r3, #4
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	659a      	str	r2, [r3, #88]	; 0x58
 8003d88:	e007      	b.n	8003d9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	aaaaaaab 	.word	0xaaaaaaab
 8003db0:	0801bf00 	.word	0x0801bf00

08003db4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d11f      	bne.n	8003e0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d856      	bhi.n	8003e82 <DMA_CheckFifoParam+0xce>
 8003dd4:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <DMA_CheckFifoParam+0x28>)
 8003dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dda:	bf00      	nop
 8003ddc:	08003ded 	.word	0x08003ded
 8003de0:	08003dff 	.word	0x08003dff
 8003de4:	08003ded 	.word	0x08003ded
 8003de8:	08003e83 	.word	0x08003e83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d046      	beq.n	8003e86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dfc:	e043      	b.n	8003e86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e06:	d140      	bne.n	8003e8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e0c:	e03d      	b.n	8003e8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e16:	d121      	bne.n	8003e5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d837      	bhi.n	8003e8e <DMA_CheckFifoParam+0xda>
 8003e1e:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <DMA_CheckFifoParam+0x70>)
 8003e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e24:	08003e35 	.word	0x08003e35
 8003e28:	08003e3b 	.word	0x08003e3b
 8003e2c:	08003e35 	.word	0x08003e35
 8003e30:	08003e4d 	.word	0x08003e4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
      break;
 8003e38:	e030      	b.n	8003e9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d025      	beq.n	8003e92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e4a:	e022      	b.n	8003e92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e54:	d11f      	bne.n	8003e96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e5a:	e01c      	b.n	8003e96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d903      	bls.n	8003e6a <DMA_CheckFifoParam+0xb6>
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d003      	beq.n	8003e70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e68:	e018      	b.n	8003e9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8003e6e:	e015      	b.n	8003e9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00e      	beq.n	8003e9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e80:	e00b      	b.n	8003e9a <DMA_CheckFifoParam+0xe6>
      break;
 8003e82:	bf00      	nop
 8003e84:	e00a      	b.n	8003e9c <DMA_CheckFifoParam+0xe8>
      break;
 8003e86:	bf00      	nop
 8003e88:	e008      	b.n	8003e9c <DMA_CheckFifoParam+0xe8>
      break;
 8003e8a:	bf00      	nop
 8003e8c:	e006      	b.n	8003e9c <DMA_CheckFifoParam+0xe8>
      break;
 8003e8e:	bf00      	nop
 8003e90:	e004      	b.n	8003e9c <DMA_CheckFifoParam+0xe8>
      break;
 8003e92:	bf00      	nop
 8003e94:	e002      	b.n	8003e9c <DMA_CheckFifoParam+0xe8>
      break;   
 8003e96:	bf00      	nop
 8003e98:	e000      	b.n	8003e9c <DMA_CheckFifoParam+0xe8>
      break;
 8003e9a:	bf00      	nop
    }
  } 
  
  return status; 
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop

08003eac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b089      	sub	sp, #36	; 0x24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	e16b      	b.n	80041a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ec8:	2201      	movs	r2, #1
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	f040 815a 	bne.w	800419a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d005      	beq.n	8003efe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d130      	bne.n	8003f60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	2203      	movs	r2, #3
 8003f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4013      	ands	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f34:	2201      	movs	r2, #1
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	4013      	ands	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 0201 	and.w	r2, r3, #1
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	2b03      	cmp	r3, #3
 8003f6a:	d017      	beq.n	8003f9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	2203      	movs	r2, #3
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f003 0303 	and.w	r3, r3, #3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d123      	bne.n	8003ff0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	08da      	lsrs	r2, r3, #3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3208      	adds	r2, #8
 8003fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	220f      	movs	r2, #15
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	691a      	ldr	r2, [r3, #16]
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	08da      	lsrs	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3208      	adds	r2, #8
 8003fea:	69b9      	ldr	r1, [r7, #24]
 8003fec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	2203      	movs	r2, #3
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	43db      	mvns	r3, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4013      	ands	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 0203 	and.w	r2, r3, #3
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4313      	orrs	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80b4 	beq.w	800419a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	4b60      	ldr	r3, [pc, #384]	; (80041b8 <HAL_GPIO_Init+0x30c>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	4a5f      	ldr	r2, [pc, #380]	; (80041b8 <HAL_GPIO_Init+0x30c>)
 800403c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004040:	6453      	str	r3, [r2, #68]	; 0x44
 8004042:	4b5d      	ldr	r3, [pc, #372]	; (80041b8 <HAL_GPIO_Init+0x30c>)
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800404e:	4a5b      	ldr	r2, [pc, #364]	; (80041bc <HAL_GPIO_Init+0x310>)
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	089b      	lsrs	r3, r3, #2
 8004054:	3302      	adds	r3, #2
 8004056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800405a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	220f      	movs	r2, #15
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43db      	mvns	r3, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4013      	ands	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a52      	ldr	r2, [pc, #328]	; (80041c0 <HAL_GPIO_Init+0x314>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d02b      	beq.n	80040d2 <HAL_GPIO_Init+0x226>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a51      	ldr	r2, [pc, #324]	; (80041c4 <HAL_GPIO_Init+0x318>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d025      	beq.n	80040ce <HAL_GPIO_Init+0x222>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a50      	ldr	r2, [pc, #320]	; (80041c8 <HAL_GPIO_Init+0x31c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d01f      	beq.n	80040ca <HAL_GPIO_Init+0x21e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a4f      	ldr	r2, [pc, #316]	; (80041cc <HAL_GPIO_Init+0x320>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d019      	beq.n	80040c6 <HAL_GPIO_Init+0x21a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a4e      	ldr	r2, [pc, #312]	; (80041d0 <HAL_GPIO_Init+0x324>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d013      	beq.n	80040c2 <HAL_GPIO_Init+0x216>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a4d      	ldr	r2, [pc, #308]	; (80041d4 <HAL_GPIO_Init+0x328>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00d      	beq.n	80040be <HAL_GPIO_Init+0x212>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a4c      	ldr	r2, [pc, #304]	; (80041d8 <HAL_GPIO_Init+0x32c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d007      	beq.n	80040ba <HAL_GPIO_Init+0x20e>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a4b      	ldr	r2, [pc, #300]	; (80041dc <HAL_GPIO_Init+0x330>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d101      	bne.n	80040b6 <HAL_GPIO_Init+0x20a>
 80040b2:	2307      	movs	r3, #7
 80040b4:	e00e      	b.n	80040d4 <HAL_GPIO_Init+0x228>
 80040b6:	2308      	movs	r3, #8
 80040b8:	e00c      	b.n	80040d4 <HAL_GPIO_Init+0x228>
 80040ba:	2306      	movs	r3, #6
 80040bc:	e00a      	b.n	80040d4 <HAL_GPIO_Init+0x228>
 80040be:	2305      	movs	r3, #5
 80040c0:	e008      	b.n	80040d4 <HAL_GPIO_Init+0x228>
 80040c2:	2304      	movs	r3, #4
 80040c4:	e006      	b.n	80040d4 <HAL_GPIO_Init+0x228>
 80040c6:	2303      	movs	r3, #3
 80040c8:	e004      	b.n	80040d4 <HAL_GPIO_Init+0x228>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e002      	b.n	80040d4 <HAL_GPIO_Init+0x228>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <HAL_GPIO_Init+0x228>
 80040d2:	2300      	movs	r3, #0
 80040d4:	69fa      	ldr	r2, [r7, #28]
 80040d6:	f002 0203 	and.w	r2, r2, #3
 80040da:	0092      	lsls	r2, r2, #2
 80040dc:	4093      	lsls	r3, r2
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040e4:	4935      	ldr	r1, [pc, #212]	; (80041bc <HAL_GPIO_Init+0x310>)
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	089b      	lsrs	r3, r3, #2
 80040ea:	3302      	adds	r3, #2
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040f2:	4b3b      	ldr	r3, [pc, #236]	; (80041e0 <HAL_GPIO_Init+0x334>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	43db      	mvns	r3, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4013      	ands	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004116:	4a32      	ldr	r2, [pc, #200]	; (80041e0 <HAL_GPIO_Init+0x334>)
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800411c:	4b30      	ldr	r3, [pc, #192]	; (80041e0 <HAL_GPIO_Init+0x334>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	43db      	mvns	r3, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4013      	ands	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004140:	4a27      	ldr	r2, [pc, #156]	; (80041e0 <HAL_GPIO_Init+0x334>)
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004146:	4b26      	ldr	r3, [pc, #152]	; (80041e0 <HAL_GPIO_Init+0x334>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800416a:	4a1d      	ldr	r2, [pc, #116]	; (80041e0 <HAL_GPIO_Init+0x334>)
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004170:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <HAL_GPIO_Init+0x334>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004194:	4a12      	ldr	r2, [pc, #72]	; (80041e0 <HAL_GPIO_Init+0x334>)
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	3301      	adds	r3, #1
 800419e:	61fb      	str	r3, [r7, #28]
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b0f      	cmp	r3, #15
 80041a4:	f67f ae90 	bls.w	8003ec8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	3724      	adds	r7, #36	; 0x24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40013800 	.word	0x40013800
 80041c0:	40020000 	.word	0x40020000
 80041c4:	40020400 	.word	0x40020400
 80041c8:	40020800 	.word	0x40020800
 80041cc:	40020c00 	.word	0x40020c00
 80041d0:	40021000 	.word	0x40021000
 80041d4:	40021400 	.word	0x40021400
 80041d8:	40021800 	.word	0x40021800
 80041dc:	40021c00 	.word	0x40021c00
 80041e0:	40013c00 	.word	0x40013c00

080041e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	807b      	strh	r3, [r7, #2]
 80041f0:	4613      	mov	r3, r2
 80041f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041f4:	787b      	ldrb	r3, [r7, #1]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041fa:	887a      	ldrh	r2, [r7, #2]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004200:	e003      	b.n	800420a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004202:	887b      	ldrh	r3, [r7, #2]
 8004204:	041a      	lsls	r2, r3, #16
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	619a      	str	r2, [r3, #24]
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
	...

08004218 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e12b      	b.n	8004482 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d106      	bne.n	8004244 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fd fc1e 	bl	8001a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2224      	movs	r2, #36	; 0x24
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0201 	bic.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800426a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800427a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800427c:	f001 fffe 	bl	800627c <HAL_RCC_GetPCLK1Freq>
 8004280:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	4a81      	ldr	r2, [pc, #516]	; (800448c <HAL_I2C_Init+0x274>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d807      	bhi.n	800429c <HAL_I2C_Init+0x84>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4a80      	ldr	r2, [pc, #512]	; (8004490 <HAL_I2C_Init+0x278>)
 8004290:	4293      	cmp	r3, r2
 8004292:	bf94      	ite	ls
 8004294:	2301      	movls	r3, #1
 8004296:	2300      	movhi	r3, #0
 8004298:	b2db      	uxtb	r3, r3
 800429a:	e006      	b.n	80042aa <HAL_I2C_Init+0x92>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4a7d      	ldr	r2, [pc, #500]	; (8004494 <HAL_I2C_Init+0x27c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	bf94      	ite	ls
 80042a4:	2301      	movls	r3, #1
 80042a6:	2300      	movhi	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e0e7      	b.n	8004482 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4a78      	ldr	r2, [pc, #480]	; (8004498 <HAL_I2C_Init+0x280>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	0c9b      	lsrs	r3, r3, #18
 80042bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6a1b      	ldr	r3, [r3, #32]
 80042d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	4a6a      	ldr	r2, [pc, #424]	; (800448c <HAL_I2C_Init+0x274>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d802      	bhi.n	80042ec <HAL_I2C_Init+0xd4>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	3301      	adds	r3, #1
 80042ea:	e009      	b.n	8004300 <HAL_I2C_Init+0xe8>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042f2:	fb02 f303 	mul.w	r3, r2, r3
 80042f6:	4a69      	ldr	r2, [pc, #420]	; (800449c <HAL_I2C_Init+0x284>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	099b      	lsrs	r3, r3, #6
 80042fe:	3301      	adds	r3, #1
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	430b      	orrs	r3, r1
 8004306:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004312:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	495c      	ldr	r1, [pc, #368]	; (800448c <HAL_I2C_Init+0x274>)
 800431c:	428b      	cmp	r3, r1
 800431e:	d819      	bhi.n	8004354 <HAL_I2C_Init+0x13c>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1e59      	subs	r1, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	fbb1 f3f3 	udiv	r3, r1, r3
 800432e:	1c59      	adds	r1, r3, #1
 8004330:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004334:	400b      	ands	r3, r1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <HAL_I2C_Init+0x138>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1e59      	subs	r1, r3, #1
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	fbb1 f3f3 	udiv	r3, r1, r3
 8004348:	3301      	adds	r3, #1
 800434a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800434e:	e051      	b.n	80043f4 <HAL_I2C_Init+0x1dc>
 8004350:	2304      	movs	r3, #4
 8004352:	e04f      	b.n	80043f4 <HAL_I2C_Init+0x1dc>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d111      	bne.n	8004380 <HAL_I2C_Init+0x168>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	1e58      	subs	r0, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6859      	ldr	r1, [r3, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	440b      	add	r3, r1
 800436a:	fbb0 f3f3 	udiv	r3, r0, r3
 800436e:	3301      	adds	r3, #1
 8004370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004374:	2b00      	cmp	r3, #0
 8004376:	bf0c      	ite	eq
 8004378:	2301      	moveq	r3, #1
 800437a:	2300      	movne	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	e012      	b.n	80043a6 <HAL_I2C_Init+0x18e>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	1e58      	subs	r0, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6859      	ldr	r1, [r3, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	0099      	lsls	r1, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	fbb0 f3f3 	udiv	r3, r0, r3
 8004396:	3301      	adds	r3, #1
 8004398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800439c:	2b00      	cmp	r3, #0
 800439e:	bf0c      	ite	eq
 80043a0:	2301      	moveq	r3, #1
 80043a2:	2300      	movne	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_I2C_Init+0x196>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e022      	b.n	80043f4 <HAL_I2C_Init+0x1dc>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10e      	bne.n	80043d4 <HAL_I2C_Init+0x1bc>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1e58      	subs	r0, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6859      	ldr	r1, [r3, #4]
 80043be:	460b      	mov	r3, r1
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	440b      	add	r3, r1
 80043c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c8:	3301      	adds	r3, #1
 80043ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d2:	e00f      	b.n	80043f4 <HAL_I2C_Init+0x1dc>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1e58      	subs	r0, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6859      	ldr	r1, [r3, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	0099      	lsls	r1, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ea:	3301      	adds	r3, #1
 80043ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	6809      	ldr	r1, [r1, #0]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69da      	ldr	r2, [r3, #28]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004422:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6911      	ldr	r1, [r2, #16]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	68d2      	ldr	r2, [r2, #12]
 800442e:	4311      	orrs	r1, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	430b      	orrs	r3, r1
 8004436:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695a      	ldr	r2, [r3, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2220      	movs	r2, #32
 800446e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	000186a0 	.word	0x000186a0
 8004490:	001e847f 	.word	0x001e847f
 8004494:	003d08ff 	.word	0x003d08ff
 8004498:	431bde83 	.word	0x431bde83
 800449c:	10624dd3 	.word	0x10624dd3

080044a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044a2:	b08f      	sub	sp, #60	; 0x3c
 80044a4:	af0a      	add	r7, sp, #40	; 0x28
 80044a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e10f      	b.n	80046d2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d106      	bne.n	80044d2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f00b f8ed 	bl	800f6ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2203      	movs	r2, #3
 80044d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d102      	bne.n	80044ec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f004 fe5a 	bl	80091aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	687e      	ldr	r6, [r7, #4]
 80044fe:	466d      	mov	r5, sp
 8004500:	f106 0410 	add.w	r4, r6, #16
 8004504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800450a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800450c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004510:	e885 0003 	stmia.w	r5, {r0, r1}
 8004514:	1d33      	adds	r3, r6, #4
 8004516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004518:	6838      	ldr	r0, [r7, #0]
 800451a:	f004 fd31 	bl	8008f80 <USB_CoreInit>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0d0      	b.n	80046d2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2100      	movs	r1, #0
 8004536:	4618      	mov	r0, r3
 8004538:	f004 fe48 	bl	80091cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800453c:	2300      	movs	r3, #0
 800453e:	73fb      	strb	r3, [r7, #15]
 8004540:	e04a      	b.n	80045d8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004542:	7bfa      	ldrb	r2, [r7, #15]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	4413      	add	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	333d      	adds	r3, #61	; 0x3d
 8004552:	2201      	movs	r2, #1
 8004554:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004556:	7bfa      	ldrb	r2, [r7, #15]
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	4413      	add	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	333c      	adds	r3, #60	; 0x3c
 8004566:	7bfa      	ldrb	r2, [r7, #15]
 8004568:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800456a:	7bfa      	ldrb	r2, [r7, #15]
 800456c:	7bfb      	ldrb	r3, [r7, #15]
 800456e:	b298      	uxth	r0, r3
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	4413      	add	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	3344      	adds	r3, #68	; 0x44
 800457e:	4602      	mov	r2, r0
 8004580:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004582:	7bfa      	ldrb	r2, [r7, #15]
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4413      	add	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	440b      	add	r3, r1
 8004590:	3340      	adds	r3, #64	; 0x40
 8004592:	2200      	movs	r2, #0
 8004594:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004596:	7bfa      	ldrb	r2, [r7, #15]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	3348      	adds	r3, #72	; 0x48
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045aa:	7bfa      	ldrb	r2, [r7, #15]
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4413      	add	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	334c      	adds	r3, #76	; 0x4c
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045be:	7bfa      	ldrb	r2, [r7, #15]
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	4413      	add	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	3354      	adds	r3, #84	; 0x54
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	3301      	adds	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
 80045d8:	7bfa      	ldrb	r2, [r7, #15]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d3af      	bcc.n	8004542 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045e2:	2300      	movs	r3, #0
 80045e4:	73fb      	strb	r3, [r7, #15]
 80045e6:	e044      	b.n	8004672 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045e8:	7bfa      	ldrb	r2, [r7, #15]
 80045ea:	6879      	ldr	r1, [r7, #4]
 80045ec:	4613      	mov	r3, r2
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4413      	add	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	440b      	add	r3, r1
 80045f6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80045fa:	2200      	movs	r2, #0
 80045fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045fe:	7bfa      	ldrb	r2, [r7, #15]
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004610:	7bfa      	ldrb	r2, [r7, #15]
 8004612:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004614:	7bfa      	ldrb	r2, [r7, #15]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004626:	2200      	movs	r2, #0
 8004628:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800462a:	7bfa      	ldrb	r2, [r7, #15]
 800462c:	6879      	ldr	r1, [r7, #4]
 800462e:	4613      	mov	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004640:	7bfa      	ldrb	r2, [r7, #15]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004656:	7bfa      	ldrb	r2, [r7, #15]
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4413      	add	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	3301      	adds	r3, #1
 8004670:	73fb      	strb	r3, [r7, #15]
 8004672:	7bfa      	ldrb	r2, [r7, #15]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	429a      	cmp	r2, r3
 800467a:	d3b5      	bcc.n	80045e8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	687e      	ldr	r6, [r7, #4]
 8004684:	466d      	mov	r5, sp
 8004686:	f106 0410 	add.w	r4, r6, #16
 800468a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800468c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800468e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004692:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004696:	e885 0003 	stmia.w	r5, {r0, r1}
 800469a:	1d33      	adds	r3, r6, #4
 800469c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800469e:	6838      	ldr	r0, [r7, #0]
 80046a0:	f004 fde0 	bl	8009264 <USB_DevInit>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e00d      	b.n	80046d2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f005 ff2f 	bl	800a52e <USB_DevDisconnect>

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b084      	sub	sp, #16
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <HAL_PCD_Start+0x1c>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e020      	b.n	8004738 <HAL_PCD_Start+0x5e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	2b01      	cmp	r3, #1
 8004704:	d109      	bne.n	800471a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800470a:	2b01      	cmp	r3, #1
 800470c:	d005      	beq.n	800471a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f004 fd32 	bl	8009188 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f005 fedf 	bl	800a4ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004740:	b590      	push	{r4, r7, lr}
 8004742:	b08d      	sub	sp, #52	; 0x34
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f005 ff9d 	bl	800a696 <USB_GetMode>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	f040 848a 	bne.w	8005078 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4618      	mov	r0, r3
 800476a:	f005 ff01 	bl	800a570 <USB_ReadInterrupts>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8480 	beq.w	8005076 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	0a1b      	lsrs	r3, r3, #8
 8004780:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f005 feee 	bl	800a570 <USB_ReadInterrupts>
 8004794:	4603      	mov	r3, r0
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b02      	cmp	r3, #2
 800479c:	d107      	bne.n	80047ae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695a      	ldr	r2, [r3, #20]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f002 0202 	and.w	r2, r2, #2
 80047ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f005 fedc 	bl	800a570 <USB_ReadInterrupts>
 80047b8:	4603      	mov	r3, r0
 80047ba:	f003 0310 	and.w	r3, r3, #16
 80047be:	2b10      	cmp	r3, #16
 80047c0:	d161      	bne.n	8004886 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699a      	ldr	r2, [r3, #24]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0210 	bic.w	r2, r2, #16
 80047d0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80047d2:	6a3b      	ldr	r3, [r7, #32]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	f003 020f 	and.w	r2, r3, #15
 80047de:	4613      	mov	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	4413      	add	r3, r2
 80047ee:	3304      	adds	r3, #4
 80047f0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	0c5b      	lsrs	r3, r3, #17
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d124      	bne.n	8004848 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004804:	4013      	ands	r3, r2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d035      	beq.n	8004876 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	091b      	lsrs	r3, r3, #4
 8004812:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004814:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004818:	b29b      	uxth	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	6a38      	ldr	r0, [r7, #32]
 800481e:	f005 fd13 	bl	800a248 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	691a      	ldr	r2, [r3, #16]
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	091b      	lsrs	r3, r3, #4
 800482a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800482e:	441a      	add	r2, r3
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	6a1a      	ldr	r2, [r3, #32]
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	091b      	lsrs	r3, r3, #4
 800483c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004840:	441a      	add	r2, r3
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	621a      	str	r2, [r3, #32]
 8004846:	e016      	b.n	8004876 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	0c5b      	lsrs	r3, r3, #17
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	2b06      	cmp	r3, #6
 8004852:	d110      	bne.n	8004876 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800485a:	2208      	movs	r2, #8
 800485c:	4619      	mov	r1, r3
 800485e:	6a38      	ldr	r0, [r7, #32]
 8004860:	f005 fcf2 	bl	800a248 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	6a1a      	ldr	r2, [r3, #32]
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	091b      	lsrs	r3, r3, #4
 800486c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004870:	441a      	add	r2, r3
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	699a      	ldr	r2, [r3, #24]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0210 	orr.w	r2, r2, #16
 8004884:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f005 fe70 	bl	800a570 <USB_ReadInterrupts>
 8004890:	4603      	mov	r3, r0
 8004892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004896:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800489a:	f040 80a7 	bne.w	80049ec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f005 fe75 	bl	800a596 <USB_ReadDevAllOutEpInterrupt>
 80048ac:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80048ae:	e099      	b.n	80049e4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 808e 	beq.w	80049d8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	4611      	mov	r1, r2
 80048c6:	4618      	mov	r0, r3
 80048c8:	f005 fe99 	bl	800a5fe <USB_ReadDevOutEPInterrupt>
 80048cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00c      	beq.n	80048f2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e4:	461a      	mov	r2, r3
 80048e6:	2301      	movs	r3, #1
 80048e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80048ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 fec3 	bl	8005678 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00c      	beq.n	8004916 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004908:	461a      	mov	r2, r3
 800490a:	2308      	movs	r3, #8
 800490c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800490e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 ff99 	bl	8005848 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492c:	461a      	mov	r2, r3
 800492e:	2310      	movs	r3, #16
 8004930:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b00      	cmp	r3, #0
 800493a:	d030      	beq.n	800499e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004944:	2b80      	cmp	r3, #128	; 0x80
 8004946:	d109      	bne.n	800495c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800495a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800495c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495e:	4613      	mov	r3, r2
 8004960:	00db      	lsls	r3, r3, #3
 8004962:	4413      	add	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	4413      	add	r3, r2
 800496e:	3304      	adds	r3, #4
 8004970:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	78db      	ldrb	r3, [r3, #3]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d108      	bne.n	800498c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2200      	movs	r2, #0
 800497e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	b2db      	uxtb	r3, r3
 8004984:	4619      	mov	r1, r3
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f00a ff96 	bl	800f8b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004998:	461a      	mov	r2, r3
 800499a:	2302      	movs	r3, #2
 800499c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f003 0320 	and.w	r3, r3, #32
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d008      	beq.n	80049ba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b4:	461a      	mov	r2, r3
 80049b6:	2320      	movs	r3, #32
 80049b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d009      	beq.n	80049d8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d0:	461a      	mov	r2, r3
 80049d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049d6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	3301      	adds	r3, #1
 80049dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80049de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e0:	085b      	lsrs	r3, r3, #1
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80049e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f47f af62 	bne.w	80048b0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f005 fdbd 	bl	800a570 <USB_ReadInterrupts>
 80049f6:	4603      	mov	r3, r0
 80049f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a00:	f040 80db 	bne.w	8004bba <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f005 fdde 	bl	800a5ca <USB_ReadDevAllInEpInterrupt>
 8004a0e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004a14:	e0cd      	b.n	8004bb2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f000 80c2 	beq.w	8004ba6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f005 fe04 	bl	800a63a <USB_ReadDevInEPInterrupt>
 8004a32:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d057      	beq.n	8004aee <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	2201      	movs	r2, #1
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	43db      	mvns	r3, r3
 8004a58:	69f9      	ldr	r1, [r7, #28]
 8004a5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a5e:	4013      	ands	r3, r2
 8004a60:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2301      	movs	r3, #1
 8004a72:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d132      	bne.n	8004ae2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a80:	4613      	mov	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	440b      	add	r3, r1
 8004a8a:	334c      	adds	r3, #76	; 0x4c
 8004a8c:	6819      	ldr	r1, [r3, #0]
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a92:	4613      	mov	r3, r2
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	4413      	add	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4403      	add	r3, r0
 8004a9c:	3348      	adds	r3, #72	; 0x48
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4419      	add	r1, r3
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4403      	add	r3, r0
 8004ab0:	334c      	adds	r3, #76	; 0x4c
 8004ab2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d113      	bne.n	8004ae2 <HAL_PCD_IRQHandler+0x3a2>
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abe:	4613      	mov	r3, r2
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	3354      	adds	r3, #84	; 0x54
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d108      	bne.n	8004ae2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ada:	461a      	mov	r2, r3
 8004adc:	2101      	movs	r1, #1
 8004ade:	f005 fe0b 	bl	800a6f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f00a fe60 	bl	800f7ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b04:	461a      	mov	r2, r3
 8004b06:	2308      	movs	r3, #8
 8004b08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f003 0310 	and.w	r3, r3, #16
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b20:	461a      	mov	r2, r3
 8004b22:	2310      	movs	r3, #16
 8004b24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d008      	beq.n	8004b42 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	2340      	movs	r3, #64	; 0x40
 8004b40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d023      	beq.n	8004b94 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b4e:	6a38      	ldr	r0, [r7, #32]
 8004b50:	f004 fcec 	bl	800952c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b56:	4613      	mov	r3, r2
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	3338      	adds	r3, #56	; 0x38
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	4413      	add	r3, r2
 8004b64:	3304      	adds	r3, #4
 8004b66:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	78db      	ldrb	r3, [r3, #3]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d108      	bne.n	8004b82 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2200      	movs	r2, #0
 8004b74:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f00a fead 	bl	800f8dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8e:	461a      	mov	r2, r3
 8004b90:	2302      	movs	r3, #2
 8004b92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004b9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fcdb 	bl	800555c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	3301      	adds	r3, #1
 8004baa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bae:	085b      	lsrs	r3, r3, #1
 8004bb0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f47f af2e 	bne.w	8004a16 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f005 fcd6 	bl	800a570 <USB_ReadInterrupts>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bce:	d122      	bne.n	8004c16 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	69fa      	ldr	r2, [r7, #28]
 8004bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bde:	f023 0301 	bic.w	r3, r3, #1
 8004be2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d108      	bne.n	8004c00 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fec3 	bl	8005984 <HAL_PCDEx_LPM_Callback>
 8004bfe:	e002      	b.n	8004c06 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f00a fe4b 	bl	800f89c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695a      	ldr	r2, [r3, #20]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f005 fca8 	bl	800a570 <USB_ReadInterrupts>
 8004c20:	4603      	mov	r3, r0
 8004c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c2a:	d112      	bne.n	8004c52 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d102      	bne.n	8004c42 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f00a fe07 	bl	800f850 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	695a      	ldr	r2, [r3, #20]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004c50:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f005 fc8a 	bl	800a570 <USB_ReadInterrupts>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c66:	f040 80b7 	bne.w	8004dd8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c78:	f023 0301 	bic.w	r3, r3, #1
 8004c7c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2110      	movs	r1, #16
 8004c84:	4618      	mov	r0, r3
 8004c86:	f004 fc51 	bl	800952c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c8e:	e046      	b.n	8004d1e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ca2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cb4:	0151      	lsls	r1, r2, #5
 8004cb6:	69fa      	ldr	r2, [r7, #28]
 8004cb8:	440a      	add	r2, r1
 8004cba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cc2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd0:	461a      	mov	r2, r3
 8004cd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cd6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ce8:	0151      	lsls	r1, r2, #5
 8004cea:	69fa      	ldr	r2, [r7, #28]
 8004cec:	440a      	add	r2, r1
 8004cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cf6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d08:	0151      	lsls	r1, r2, #5
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	440a      	add	r2, r1
 8004d0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d16:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d3b3      	bcc.n	8004c90 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	69fa      	ldr	r2, [r7, #28]
 8004d32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d36:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004d3a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d016      	beq.n	8004d72 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d4e:	69fa      	ldr	r2, [r7, #28]
 8004d50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d54:	f043 030b 	orr.w	r3, r3, #11
 8004d58:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d6a:	f043 030b 	orr.w	r3, r3, #11
 8004d6e:	6453      	str	r3, [r2, #68]	; 0x44
 8004d70:	e015      	b.n	8004d9e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	69fa      	ldr	r2, [r7, #28]
 8004d7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d84:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004d88:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d98:	f043 030b 	orr.w	r3, r3, #11
 8004d9c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004db0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f005 fc98 	bl	800a6f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695a      	ldr	r2, [r3, #20]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004dd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f005 fbc7 	bl	800a570 <USB_ReadInterrupts>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dec:	d124      	bne.n	8004e38 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4618      	mov	r0, r3
 8004df4:	f005 fc5d 	bl	800a6b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f004 fc12 	bl	8009626 <USB_GetDevSpeed>
 8004e02:	4603      	mov	r3, r0
 8004e04:	461a      	mov	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681c      	ldr	r4, [r3, #0]
 8004e0e:	f001 fa29 	bl	8006264 <HAL_RCC_GetHCLKFreq>
 8004e12:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f004 f911 	bl	8009044 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f00a fceb 	bl	800f7fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695a      	ldr	r2, [r3, #20]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004e36:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f005 fb97 	bl	800a570 <USB_ReadInterrupts>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b08      	cmp	r3, #8
 8004e4a:	d10a      	bne.n	8004e62 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f00a fcc8 	bl	800f7e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695a      	ldr	r2, [r3, #20]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f002 0208 	and.w	r2, r2, #8
 8004e60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4618      	mov	r0, r3
 8004e68:	f005 fb82 	bl	800a570 <USB_ReadInterrupts>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e72:	2b80      	cmp	r3, #128	; 0x80
 8004e74:	d122      	bne.n	8004ebc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e82:	2301      	movs	r3, #1
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
 8004e86:	e014      	b.n	8004eb2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d105      	bne.n	8004eac <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fb27 	bl	80054fa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	3301      	adds	r3, #1
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d3e5      	bcc.n	8004e88 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f005 fb55 	bl	800a570 <USB_ReadInterrupts>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ecc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ed0:	d13b      	bne.n	8004f4a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed6:	e02b      	b.n	8004f30 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ee8:	6879      	ldr	r1, [r7, #4]
 8004eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eec:	4613      	mov	r3, r2
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	3340      	adds	r3, #64	; 0x40
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d115      	bne.n	8004f2a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004efe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	da12      	bge.n	8004f2a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f08:	4613      	mov	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	333f      	adds	r3, #63	; 0x3f
 8004f14:	2201      	movs	r2, #1
 8004f16:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	4619      	mov	r1, r3
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fae8 	bl	80054fa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d3ce      	bcc.n	8004ed8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f005 fb0e 	bl	800a570 <USB_ReadInterrupts>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f5e:	d155      	bne.n	800500c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f60:	2301      	movs	r3, #1
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
 8004f64:	e045      	b.n	8004ff2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f76:	6879      	ldr	r1, [r7, #4]
 8004f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	440b      	add	r3, r1
 8004f84:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d12e      	bne.n	8004fec <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004f8e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	da2b      	bge.n	8004fec <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004fa0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d121      	bne.n	8004fec <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004fa8:	6879      	ldr	r1, [r7, #4]
 8004faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fac:	4613      	mov	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	440b      	add	r3, r1
 8004fb6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004fba:	2201      	movs	r2, #1
 8004fbc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10a      	bne.n	8004fec <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	69fa      	ldr	r2, [r7, #28]
 8004fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fe4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fe8:	6053      	str	r3, [r2, #4]
            break;
 8004fea:	e007      	b.n	8004ffc <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	3301      	adds	r3, #1
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d3b4      	bcc.n	8004f66 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695a      	ldr	r2, [r3, #20]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800500a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f005 faad 	bl	800a570 <USB_ReadInterrupts>
 8005016:	4603      	mov	r3, r0
 8005018:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800501c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005020:	d10a      	bne.n	8005038 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f00a fc6c 	bl	800f900 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695a      	ldr	r2, [r3, #20]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005036:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	f005 fa97 	bl	800a570 <USB_ReadInterrupts>
 8005042:	4603      	mov	r3, r0
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b04      	cmp	r3, #4
 800504a:	d115      	bne.n	8005078 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f00a fc5c 	bl	800f91c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6859      	ldr	r1, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	430a      	orrs	r2, r1
 8005072:	605a      	str	r2, [r3, #4]
 8005074:	e000      	b.n	8005078 <HAL_PCD_IRQHandler+0x938>
      return;
 8005076:	bf00      	nop
    }
  }
}
 8005078:	3734      	adds	r7, #52	; 0x34
 800507a:	46bd      	mov	sp, r7
 800507c:	bd90      	pop	{r4, r7, pc}

0800507e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	460b      	mov	r3, r1
 8005088:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_PCD_SetAddress+0x1a>
 8005094:	2302      	movs	r3, #2
 8005096:	e013      	b.n	80050c0 <HAL_PCD_SetAddress+0x42>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	78fa      	ldrb	r2, [r7, #3]
 80050a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	78fa      	ldrb	r2, [r7, #3]
 80050ae:	4611      	mov	r1, r2
 80050b0:	4618      	mov	r0, r3
 80050b2:	f005 f9f5 	bl	800a4a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	4608      	mov	r0, r1
 80050d2:	4611      	mov	r1, r2
 80050d4:	461a      	mov	r2, r3
 80050d6:	4603      	mov	r3, r0
 80050d8:	70fb      	strb	r3, [r7, #3]
 80050da:	460b      	mov	r3, r1
 80050dc:	803b      	strh	r3, [r7, #0]
 80050de:	4613      	mov	r3, r2
 80050e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	da0f      	bge.n	800510e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	f003 020f 	and.w	r2, r3, #15
 80050f4:	4613      	mov	r3, r2
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	3338      	adds	r3, #56	; 0x38
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	4413      	add	r3, r2
 8005102:	3304      	adds	r3, #4
 8005104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	705a      	strb	r2, [r3, #1]
 800510c:	e00f      	b.n	800512e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800510e:	78fb      	ldrb	r3, [r7, #3]
 8005110:	f003 020f 	and.w	r2, r3, #15
 8005114:	4613      	mov	r3, r2
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	4413      	add	r3, r2
 8005124:	3304      	adds	r3, #4
 8005126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800512e:	78fb      	ldrb	r3, [r7, #3]
 8005130:	f003 030f 	and.w	r3, r3, #15
 8005134:	b2da      	uxtb	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800513a:	883a      	ldrh	r2, [r7, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	78ba      	ldrb	r2, [r7, #2]
 8005144:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	785b      	ldrb	r3, [r3, #1]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d004      	beq.n	8005158 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005158:	78bb      	ldrb	r3, [r7, #2]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d102      	bne.n	8005164 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800516a:	2b01      	cmp	r3, #1
 800516c:	d101      	bne.n	8005172 <HAL_PCD_EP_Open+0xaa>
 800516e:	2302      	movs	r3, #2
 8005170:	e00e      	b.n	8005190 <HAL_PCD_EP_Open+0xc8>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68f9      	ldr	r1, [r7, #12]
 8005180:	4618      	mov	r0, r3
 8005182:	f004 fa75 	bl	8009670 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800518e:	7afb      	ldrb	r3, [r7, #11]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	da0f      	bge.n	80051cc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	f003 020f 	and.w	r2, r3, #15
 80051b2:	4613      	mov	r3, r2
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	4413      	add	r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	3338      	adds	r3, #56	; 0x38
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	4413      	add	r3, r2
 80051c0:	3304      	adds	r3, #4
 80051c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2201      	movs	r2, #1
 80051c8:	705a      	strb	r2, [r3, #1]
 80051ca:	e00f      	b.n	80051ec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051cc:	78fb      	ldrb	r3, [r7, #3]
 80051ce:	f003 020f 	and.w	r2, r3, #15
 80051d2:	4613      	mov	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	4413      	add	r3, r2
 80051e2:	3304      	adds	r3, #4
 80051e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d101      	bne.n	8005206 <HAL_PCD_EP_Close+0x6e>
 8005202:	2302      	movs	r3, #2
 8005204:	e00e      	b.n	8005224 <HAL_PCD_EP_Close+0x8c>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68f9      	ldr	r1, [r7, #12]
 8005214:	4618      	mov	r0, r3
 8005216:	f004 fab3 	bl	8009780 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	607a      	str	r2, [r7, #4]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	460b      	mov	r3, r1
 800523a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800523c:	7afb      	ldrb	r3, [r7, #11]
 800523e:	f003 020f 	and.w	r2, r3, #15
 8005242:	4613      	mov	r3, r2
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4413      	add	r3, r2
 8005252:	3304      	adds	r3, #4
 8005254:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2200      	movs	r2, #0
 8005266:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	2200      	movs	r2, #0
 800526c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800526e:	7afb      	ldrb	r3, [r7, #11]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	b2da      	uxtb	r2, r3
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d102      	bne.n	8005288 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005288:	7afb      	ldrb	r3, [r7, #11]
 800528a:	f003 030f 	and.w	r3, r3, #15
 800528e:	2b00      	cmp	r3, #0
 8005290:	d109      	bne.n	80052a6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	6979      	ldr	r1, [r7, #20]
 80052a0:	f004 fd92 	bl	8009dc8 <USB_EP0StartXfer>
 80052a4:	e008      	b.n	80052b8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	6979      	ldr	r1, [r7, #20]
 80052b4:	f004 fb40 	bl	8009938 <USB_EPStartXfer>
  }

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b083      	sub	sp, #12
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	460b      	mov	r3, r1
 80052cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80052ce:	78fb      	ldrb	r3, [r7, #3]
 80052d0:	f003 020f 	and.w	r2, r3, #15
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	4613      	mov	r3, r2
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	4413      	add	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	440b      	add	r3, r1
 80052e0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80052e4:	681b      	ldr	r3, [r3, #0]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b086      	sub	sp, #24
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	607a      	str	r2, [r7, #4]
 80052fc:	603b      	str	r3, [r7, #0]
 80052fe:	460b      	mov	r3, r1
 8005300:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005302:	7afb      	ldrb	r3, [r7, #11]
 8005304:	f003 020f 	and.w	r2, r3, #15
 8005308:	4613      	mov	r3, r2
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	3338      	adds	r3, #56	; 0x38
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	3304      	adds	r3, #4
 8005318:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2200      	movs	r2, #0
 800532a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	2201      	movs	r2, #1
 8005330:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005332:	7afb      	ldrb	r3, [r7, #11]
 8005334:	f003 030f 	and.w	r3, r3, #15
 8005338:	b2da      	uxtb	r2, r3
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d102      	bne.n	800534c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800534c:	7afb      	ldrb	r3, [r7, #11]
 800534e:	f003 030f 	and.w	r3, r3, #15
 8005352:	2b00      	cmp	r3, #0
 8005354:	d109      	bne.n	800536a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	b2db      	uxtb	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	6979      	ldr	r1, [r7, #20]
 8005364:	f004 fd30 	bl	8009dc8 <USB_EP0StartXfer>
 8005368:	e008      	b.n	800537c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6818      	ldr	r0, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	461a      	mov	r2, r3
 8005376:	6979      	ldr	r1, [r7, #20]
 8005378:	f004 fade 	bl	8009938 <USB_EPStartXfer>
  }

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	460b      	mov	r3, r1
 8005390:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005392:	78fb      	ldrb	r3, [r7, #3]
 8005394:	f003 020f 	and.w	r2, r3, #15
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	429a      	cmp	r2, r3
 800539e:	d901      	bls.n	80053a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e050      	b.n	8005446 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80053a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	da0f      	bge.n	80053cc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053ac:	78fb      	ldrb	r3, [r7, #3]
 80053ae:	f003 020f 	and.w	r2, r3, #15
 80053b2:	4613      	mov	r3, r2
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	4413      	add	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	3338      	adds	r3, #56	; 0x38
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	4413      	add	r3, r2
 80053c0:	3304      	adds	r3, #4
 80053c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2201      	movs	r2, #1
 80053c8:	705a      	strb	r2, [r3, #1]
 80053ca:	e00d      	b.n	80053e8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80053cc:	78fa      	ldrb	r2, [r7, #3]
 80053ce:	4613      	mov	r3, r2
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	4413      	add	r3, r2
 80053de:	3304      	adds	r3, #4
 80053e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053ee:	78fb      	ldrb	r3, [r7, #3]
 80053f0:	f003 030f 	and.w	r3, r3, #15
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_PCD_EP_SetStall+0x82>
 8005404:	2302      	movs	r3, #2
 8005406:	e01e      	b.n	8005446 <HAL_PCD_EP_SetStall+0xc0>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68f9      	ldr	r1, [r7, #12]
 8005416:	4618      	mov	r0, r3
 8005418:	f004 ff6e 	bl	800a2f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10a      	bne.n	800543c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	b2d9      	uxtb	r1, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005436:	461a      	mov	r2, r3
 8005438:	f005 f95e 	bl	800a6f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
 8005456:	460b      	mov	r3, r1
 8005458:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800545a:	78fb      	ldrb	r3, [r7, #3]
 800545c:	f003 020f 	and.w	r2, r3, #15
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	429a      	cmp	r2, r3
 8005466:	d901      	bls.n	800546c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e042      	b.n	80054f2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800546c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005470:	2b00      	cmp	r3, #0
 8005472:	da0f      	bge.n	8005494 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005474:	78fb      	ldrb	r3, [r7, #3]
 8005476:	f003 020f 	and.w	r2, r3, #15
 800547a:	4613      	mov	r3, r2
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	3338      	adds	r3, #56	; 0x38
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	4413      	add	r3, r2
 8005488:	3304      	adds	r3, #4
 800548a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2201      	movs	r2, #1
 8005490:	705a      	strb	r2, [r3, #1]
 8005492:	e00f      	b.n	80054b4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	f003 020f 	and.w	r2, r3, #15
 800549a:	4613      	mov	r3, r2
 800549c:	00db      	lsls	r3, r3, #3
 800549e:	4413      	add	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	4413      	add	r3, r2
 80054aa:	3304      	adds	r3, #4
 80054ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	f003 030f 	and.w	r3, r3, #15
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_PCD_EP_ClrStall+0x86>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e00e      	b.n	80054f2 <HAL_PCD_EP_ClrStall+0xa4>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68f9      	ldr	r1, [r7, #12]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f004 ff76 	bl	800a3d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	460b      	mov	r3, r1
 8005504:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005506:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800550a:	2b00      	cmp	r3, #0
 800550c:	da0c      	bge.n	8005528 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800550e:	78fb      	ldrb	r3, [r7, #3]
 8005510:	f003 020f 	and.w	r2, r3, #15
 8005514:	4613      	mov	r3, r2
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	3338      	adds	r3, #56	; 0x38
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	4413      	add	r3, r2
 8005522:	3304      	adds	r3, #4
 8005524:	60fb      	str	r3, [r7, #12]
 8005526:	e00c      	b.n	8005542 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005528:	78fb      	ldrb	r3, [r7, #3]
 800552a:	f003 020f 	and.w	r2, r3, #15
 800552e:	4613      	mov	r3, r2
 8005530:	00db      	lsls	r3, r3, #3
 8005532:	4413      	add	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	4413      	add	r3, r2
 800553e:	3304      	adds	r3, #4
 8005540:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68f9      	ldr	r1, [r7, #12]
 8005548:	4618      	mov	r0, r3
 800554a:	f004 fd95 	bl	800a078 <USB_EPStopXfer>
 800554e:	4603      	mov	r3, r0
 8005550:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005552:	7afb      	ldrb	r3, [r7, #11]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08a      	sub	sp, #40	; 0x28
 8005560:	af02      	add	r7, sp, #8
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	4613      	mov	r3, r2
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	3338      	adds	r3, #56	; 0x38
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	4413      	add	r3, r2
 8005580:	3304      	adds	r3, #4
 8005582:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1a      	ldr	r2, [r3, #32]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	429a      	cmp	r2, r3
 800558e:	d901      	bls.n	8005594 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e06c      	b.n	800566e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	699a      	ldr	r2, [r3, #24]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a1b      	ldr	r3, [r3, #32]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d902      	bls.n	80055b0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	3303      	adds	r3, #3
 80055b4:	089b      	lsrs	r3, r3, #2
 80055b6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80055b8:	e02b      	b.n	8005612 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	699a      	ldr	r2, [r3, #24]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	69fa      	ldr	r2, [r7, #28]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d902      	bls.n	80055d6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	3303      	adds	r3, #3
 80055da:	089b      	lsrs	r3, r3, #2
 80055dc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6919      	ldr	r1, [r3, #16]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	4603      	mov	r3, r0
 80055f4:	6978      	ldr	r0, [r7, #20]
 80055f6:	f004 fde9 	bl	800a1cc <USB_WritePacket>

    ep->xfer_buff  += len;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	691a      	ldr	r2, [r3, #16]
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	441a      	add	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a1a      	ldr	r2, [r3, #32]
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	441a      	add	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	015a      	lsls	r2, r3, #5
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	4413      	add	r3, r2
 800561a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	b29b      	uxth	r3, r3
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	429a      	cmp	r2, r3
 8005626:	d809      	bhi.n	800563c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a1a      	ldr	r2, [r3, #32]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005630:	429a      	cmp	r2, r3
 8005632:	d203      	bcs.n	800563c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1be      	bne.n	80055ba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	699a      	ldr	r2, [r3, #24]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	429a      	cmp	r2, r3
 8005646:	d811      	bhi.n	800566c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	2201      	movs	r2, #1
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	43db      	mvns	r3, r3
 8005662:	6939      	ldr	r1, [r7, #16]
 8005664:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005668:	4013      	ands	r3, r2
 800566a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3720      	adds	r7, #32
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
	...

08005678 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b088      	sub	sp, #32
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	333c      	adds	r3, #60	; 0x3c
 8005690:	3304      	adds	r3, #4
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d17b      	bne.n	80057a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f003 0308 	and.w	r3, r3, #8
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d015      	beq.n	80056e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	4a61      	ldr	r2, [pc, #388]	; (8005840 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	f240 80b9 	bls.w	8005834 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 80b3 	beq.w	8005834 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056da:	461a      	mov	r2, r3
 80056dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056e0:	6093      	str	r3, [r2, #8]
 80056e2:	e0a7      	b.n	8005834 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f003 0320 	and.w	r3, r3, #32
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fa:	461a      	mov	r2, r3
 80056fc:	2320      	movs	r3, #32
 80056fe:	6093      	str	r3, [r2, #8]
 8005700:	e098      	b.n	8005834 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005708:	2b00      	cmp	r3, #0
 800570a:	f040 8093 	bne.w	8005834 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	4a4b      	ldr	r2, [pc, #300]	; (8005840 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d90f      	bls.n	8005736 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572c:	461a      	mov	r2, r3
 800572e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005732:	6093      	str	r3, [r2, #8]
 8005734:	e07e      	b.n	8005834 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	4613      	mov	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	4413      	add	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	4413      	add	r3, r2
 8005748:	3304      	adds	r3, #4
 800574a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	0159      	lsls	r1, r3, #5
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	440b      	add	r3, r1
 8005758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005762:	1ad2      	subs	r2, r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d114      	bne.n	8005798 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005780:	461a      	mov	r2, r3
 8005782:	2101      	movs	r1, #1
 8005784:	f004 ffb8 	bl	800a6f8 <USB_EP0_OutStart>
 8005788:	e006      	b.n	8005798 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	441a      	add	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	b2db      	uxtb	r3, r3
 800579c:	4619      	mov	r1, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f009 ffea 	bl	800f778 <HAL_PCD_DataOutStageCallback>
 80057a4:	e046      	b.n	8005834 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	4a26      	ldr	r2, [pc, #152]	; (8005844 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d124      	bne.n	80057f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00a      	beq.n	80057ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c4:	461a      	mov	r2, r3
 80057c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ca:	6093      	str	r3, [r2, #8]
 80057cc:	e032      	b.n	8005834 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d008      	beq.n	80057ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e4:	461a      	mov	r2, r3
 80057e6:	2320      	movs	r3, #32
 80057e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	4619      	mov	r1, r3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f009 ffc1 	bl	800f778 <HAL_PCD_DataOutStageCallback>
 80057f6:	e01d      	b.n	8005834 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d114      	bne.n	8005828 <PCD_EP_OutXfrComplete_int+0x1b0>
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	4613      	mov	r3, r2
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d108      	bne.n	8005828 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6818      	ldr	r0, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005820:	461a      	mov	r2, r3
 8005822:	2100      	movs	r1, #0
 8005824:	f004 ff68 	bl	800a6f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	b2db      	uxtb	r3, r3
 800582c:	4619      	mov	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f009 ffa2 	bl	800f778 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3720      	adds	r7, #32
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	4f54300a 	.word	0x4f54300a
 8005844:	4f54310a 	.word	0x4f54310a

08005848 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	333c      	adds	r3, #60	; 0x3c
 8005860:	3304      	adds	r3, #4
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	4a15      	ldr	r2, [pc, #84]	; (80058d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d90e      	bls.n	800589c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005884:	2b00      	cmp	r3, #0
 8005886:	d009      	beq.n	800589c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005894:	461a      	mov	r2, r3
 8005896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800589a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f009 ff59 	bl	800f754 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4a0a      	ldr	r2, [pc, #40]	; (80058d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d90c      	bls.n	80058c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d108      	bne.n	80058c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80058bc:	461a      	mov	r2, r3
 80058be:	2101      	movs	r1, #1
 80058c0:	f004 ff1a 	bl	800a6f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	4f54300a 	.word	0x4f54300a

080058d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	70fb      	strb	r3, [r7, #3]
 80058e0:	4613      	mov	r3, r2
 80058e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80058ec:	78fb      	ldrb	r3, [r7, #3]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d107      	bne.n	8005902 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80058f2:	883b      	ldrh	r3, [r7, #0]
 80058f4:	0419      	lsls	r1, r3, #16
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	629a      	str	r2, [r3, #40]	; 0x28
 8005900:	e028      	b.n	8005954 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005908:	0c1b      	lsrs	r3, r3, #16
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	4413      	add	r3, r2
 800590e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005910:	2300      	movs	r3, #0
 8005912:	73fb      	strb	r3, [r7, #15]
 8005914:	e00d      	b.n	8005932 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	7bfb      	ldrb	r3, [r7, #15]
 800591c:	3340      	adds	r3, #64	; 0x40
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	0c1b      	lsrs	r3, r3, #16
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	4413      	add	r3, r2
 800592a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800592c:	7bfb      	ldrb	r3, [r7, #15]
 800592e:	3301      	adds	r3, #1
 8005930:	73fb      	strb	r3, [r7, #15]
 8005932:	7bfa      	ldrb	r2, [r7, #15]
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	3b01      	subs	r3, #1
 8005938:	429a      	cmp	r2, r3
 800593a:	d3ec      	bcc.n	8005916 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800593c:	883b      	ldrh	r3, [r7, #0]
 800593e:	0418      	lsls	r0, r3, #16
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6819      	ldr	r1, [r3, #0]
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	3b01      	subs	r3, #1
 8005948:	68ba      	ldr	r2, [r7, #8]
 800594a:	4302      	orrs	r2, r0
 800594c:	3340      	adds	r3, #64	; 0x40
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	440b      	add	r3, r1
 8005952:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3714      	adds	r7, #20
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	460b      	mov	r3, r1
 800596c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	887a      	ldrh	r2, [r7, #2]
 8005974:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e267      	b.n	8005e7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d075      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059ba:	4b88      	ldr	r3, [pc, #544]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 030c 	and.w	r3, r3, #12
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	d00c      	beq.n	80059e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059c6:	4b85      	ldr	r3, [pc, #532]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d112      	bne.n	80059f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059d2:	4b82      	ldr	r3, [pc, #520]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059de:	d10b      	bne.n	80059f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e0:	4b7e      	ldr	r3, [pc, #504]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d05b      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x108>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d157      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e242      	b.n	8005e7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a00:	d106      	bne.n	8005a10 <HAL_RCC_OscConfig+0x74>
 8005a02:	4b76      	ldr	r3, [pc, #472]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a75      	ldr	r2, [pc, #468]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	e01d      	b.n	8005a4c <HAL_RCC_OscConfig+0xb0>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a18:	d10c      	bne.n	8005a34 <HAL_RCC_OscConfig+0x98>
 8005a1a:	4b70      	ldr	r3, [pc, #448]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a6f      	ldr	r2, [pc, #444]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	4b6d      	ldr	r3, [pc, #436]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a6c      	ldr	r2, [pc, #432]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	e00b      	b.n	8005a4c <HAL_RCC_OscConfig+0xb0>
 8005a34:	4b69      	ldr	r3, [pc, #420]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a68      	ldr	r2, [pc, #416]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	4b66      	ldr	r3, [pc, #408]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a65      	ldr	r2, [pc, #404]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d013      	beq.n	8005a7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a54:	f7fd fa98 	bl	8002f88 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a5a:	e008      	b.n	8005a6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a5c:	f7fd fa94 	bl	8002f88 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	2b64      	cmp	r3, #100	; 0x64
 8005a68:	d901      	bls.n	8005a6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e207      	b.n	8005e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a6e:	4b5b      	ldr	r3, [pc, #364]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d0f0      	beq.n	8005a5c <HAL_RCC_OscConfig+0xc0>
 8005a7a:	e014      	b.n	8005aa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a7c:	f7fd fa84 	bl	8002f88 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a84:	f7fd fa80 	bl	8002f88 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b64      	cmp	r3, #100	; 0x64
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e1f3      	b.n	8005e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a96:	4b51      	ldr	r3, [pc, #324]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1f0      	bne.n	8005a84 <HAL_RCC_OscConfig+0xe8>
 8005aa2:	e000      	b.n	8005aa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 0302 	and.w	r3, r3, #2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d063      	beq.n	8005b7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ab2:	4b4a      	ldr	r3, [pc, #296]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 030c 	and.w	r3, r3, #12
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00b      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005abe:	4b47      	ldr	r3, [pc, #284]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ac6:	2b08      	cmp	r3, #8
 8005ac8:	d11c      	bne.n	8005b04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aca:	4b44      	ldr	r3, [pc, #272]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d116      	bne.n	8005b04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ad6:	4b41      	ldr	r3, [pc, #260]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d005      	beq.n	8005aee <HAL_RCC_OscConfig+0x152>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d001      	beq.n	8005aee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e1c7      	b.n	8005e7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aee:	4b3b      	ldr	r3, [pc, #236]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	4937      	ldr	r1, [pc, #220]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b02:	e03a      	b.n	8005b7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d020      	beq.n	8005b4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b0c:	4b34      	ldr	r3, [pc, #208]	; (8005be0 <HAL_RCC_OscConfig+0x244>)
 8005b0e:	2201      	movs	r2, #1
 8005b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b12:	f7fd fa39 	bl	8002f88 <HAL_GetTick>
 8005b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b18:	e008      	b.n	8005b2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b1a:	f7fd fa35 	bl	8002f88 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e1a8      	b.n	8005e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b2c:	4b2b      	ldr	r3, [pc, #172]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0f0      	beq.n	8005b1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b38:	4b28      	ldr	r3, [pc, #160]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	4925      	ldr	r1, [pc, #148]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	600b      	str	r3, [r1, #0]
 8005b4c:	e015      	b.n	8005b7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b4e:	4b24      	ldr	r3, [pc, #144]	; (8005be0 <HAL_RCC_OscConfig+0x244>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b54:	f7fd fa18 	bl	8002f88 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b5c:	f7fd fa14 	bl	8002f88 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e187      	b.n	8005e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b6e:	4b1b      	ldr	r3, [pc, #108]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f0      	bne.n	8005b5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0308 	and.w	r3, r3, #8
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d036      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d016      	beq.n	8005bbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b8e:	4b15      	ldr	r3, [pc, #84]	; (8005be4 <HAL_RCC_OscConfig+0x248>)
 8005b90:	2201      	movs	r2, #1
 8005b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b94:	f7fd f9f8 	bl	8002f88 <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b9c:	f7fd f9f4 	bl	8002f88 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e167      	b.n	8005e7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bae:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <HAL_RCC_OscConfig+0x240>)
 8005bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0f0      	beq.n	8005b9c <HAL_RCC_OscConfig+0x200>
 8005bba:	e01b      	b.n	8005bf4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bbc:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <HAL_RCC_OscConfig+0x248>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bc2:	f7fd f9e1 	bl	8002f88 <HAL_GetTick>
 8005bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bc8:	e00e      	b.n	8005be8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bca:	f7fd f9dd 	bl	8002f88 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d907      	bls.n	8005be8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e150      	b.n	8005e7e <HAL_RCC_OscConfig+0x4e2>
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	42470000 	.word	0x42470000
 8005be4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005be8:	4b88      	ldr	r3, [pc, #544]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1ea      	bne.n	8005bca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 8097 	beq.w	8005d30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c02:	2300      	movs	r3, #0
 8005c04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c06:	4b81      	ldr	r3, [pc, #516]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10f      	bne.n	8005c32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c12:	2300      	movs	r3, #0
 8005c14:	60bb      	str	r3, [r7, #8]
 8005c16:	4b7d      	ldr	r3, [pc, #500]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	4a7c      	ldr	r2, [pc, #496]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c20:	6413      	str	r3, [r2, #64]	; 0x40
 8005c22:	4b7a      	ldr	r3, [pc, #488]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c2a:	60bb      	str	r3, [r7, #8]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c32:	4b77      	ldr	r3, [pc, #476]	; (8005e10 <HAL_RCC_OscConfig+0x474>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d118      	bne.n	8005c70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c3e:	4b74      	ldr	r3, [pc, #464]	; (8005e10 <HAL_RCC_OscConfig+0x474>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a73      	ldr	r2, [pc, #460]	; (8005e10 <HAL_RCC_OscConfig+0x474>)
 8005c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c4a:	f7fd f99d 	bl	8002f88 <HAL_GetTick>
 8005c4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c50:	e008      	b.n	8005c64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c52:	f7fd f999 	bl	8002f88 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e10c      	b.n	8005e7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c64:	4b6a      	ldr	r3, [pc, #424]	; (8005e10 <HAL_RCC_OscConfig+0x474>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0f0      	beq.n	8005c52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d106      	bne.n	8005c86 <HAL_RCC_OscConfig+0x2ea>
 8005c78:	4b64      	ldr	r3, [pc, #400]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7c:	4a63      	ldr	r2, [pc, #396]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	6713      	str	r3, [r2, #112]	; 0x70
 8005c84:	e01c      	b.n	8005cc0 <HAL_RCC_OscConfig+0x324>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	2b05      	cmp	r3, #5
 8005c8c:	d10c      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x30c>
 8005c8e:	4b5f      	ldr	r3, [pc, #380]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c92:	4a5e      	ldr	r2, [pc, #376]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005c94:	f043 0304 	orr.w	r3, r3, #4
 8005c98:	6713      	str	r3, [r2, #112]	; 0x70
 8005c9a:	4b5c      	ldr	r3, [pc, #368]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c9e:	4a5b      	ldr	r2, [pc, #364]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005ca0:	f043 0301 	orr.w	r3, r3, #1
 8005ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ca6:	e00b      	b.n	8005cc0 <HAL_RCC_OscConfig+0x324>
 8005ca8:	4b58      	ldr	r3, [pc, #352]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cac:	4a57      	ldr	r2, [pc, #348]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005cae:	f023 0301 	bic.w	r3, r3, #1
 8005cb2:	6713      	str	r3, [r2, #112]	; 0x70
 8005cb4:	4b55      	ldr	r3, [pc, #340]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb8:	4a54      	ldr	r2, [pc, #336]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005cba:	f023 0304 	bic.w	r3, r3, #4
 8005cbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d015      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc8:	f7fd f95e 	bl	8002f88 <HAL_GetTick>
 8005ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cce:	e00a      	b.n	8005ce6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cd0:	f7fd f95a 	bl	8002f88 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e0cb      	b.n	8005e7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ce6:	4b49      	ldr	r3, [pc, #292]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0ee      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x334>
 8005cf2:	e014      	b.n	8005d1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cf4:	f7fd f948 	bl	8002f88 <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cfa:	e00a      	b.n	8005d12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cfc:	f7fd f944 	bl	8002f88 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d901      	bls.n	8005d12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e0b5      	b.n	8005e7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d12:	4b3e      	ldr	r3, [pc, #248]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1ee      	bne.n	8005cfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d1e:	7dfb      	ldrb	r3, [r7, #23]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d105      	bne.n	8005d30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d24:	4b39      	ldr	r3, [pc, #228]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	4a38      	ldr	r2, [pc, #224]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 80a1 	beq.w	8005e7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d3a:	4b34      	ldr	r3, [pc, #208]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 030c 	and.w	r3, r3, #12
 8005d42:	2b08      	cmp	r3, #8
 8005d44:	d05c      	beq.n	8005e00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d141      	bne.n	8005dd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d4e:	4b31      	ldr	r3, [pc, #196]	; (8005e14 <HAL_RCC_OscConfig+0x478>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d54:	f7fd f918 	bl	8002f88 <HAL_GetTick>
 8005d58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d5a:	e008      	b.n	8005d6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d5c:	f7fd f914 	bl	8002f88 <HAL_GetTick>
 8005d60:	4602      	mov	r2, r0
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d901      	bls.n	8005d6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e087      	b.n	8005e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d6e:	4b27      	ldr	r3, [pc, #156]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1f0      	bne.n	8005d5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	69da      	ldr	r2, [r3, #28]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	019b      	lsls	r3, r3, #6
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d90:	085b      	lsrs	r3, r3, #1
 8005d92:	3b01      	subs	r3, #1
 8005d94:	041b      	lsls	r3, r3, #16
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	061b      	lsls	r3, r3, #24
 8005d9e:	491b      	ldr	r1, [pc, #108]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005da4:	4b1b      	ldr	r3, [pc, #108]	; (8005e14 <HAL_RCC_OscConfig+0x478>)
 8005da6:	2201      	movs	r2, #1
 8005da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005daa:	f7fd f8ed 	bl	8002f88 <HAL_GetTick>
 8005dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005db0:	e008      	b.n	8005dc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005db2:	f7fd f8e9 	bl	8002f88 <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d901      	bls.n	8005dc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e05c      	b.n	8005e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dc4:	4b11      	ldr	r3, [pc, #68]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0f0      	beq.n	8005db2 <HAL_RCC_OscConfig+0x416>
 8005dd0:	e054      	b.n	8005e7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dd2:	4b10      	ldr	r3, [pc, #64]	; (8005e14 <HAL_RCC_OscConfig+0x478>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd8:	f7fd f8d6 	bl	8002f88 <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005de0:	f7fd f8d2 	bl	8002f88 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e045      	b.n	8005e7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df2:	4b06      	ldr	r3, [pc, #24]	; (8005e0c <HAL_RCC_OscConfig+0x470>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f0      	bne.n	8005de0 <HAL_RCC_OscConfig+0x444>
 8005dfe:	e03d      	b.n	8005e7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d107      	bne.n	8005e18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e038      	b.n	8005e7e <HAL_RCC_OscConfig+0x4e2>
 8005e0c:	40023800 	.word	0x40023800
 8005e10:	40007000 	.word	0x40007000
 8005e14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e18:	4b1b      	ldr	r3, [pc, #108]	; (8005e88 <HAL_RCC_OscConfig+0x4ec>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d028      	beq.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d121      	bne.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d11a      	bne.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e48:	4013      	ands	r3, r2
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005e4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d111      	bne.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5e:	085b      	lsrs	r3, r3, #1
 8005e60:	3b01      	subs	r3, #1
 8005e62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d107      	bne.n	8005e78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d001      	beq.n	8005e7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e000      	b.n	8005e7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	40023800 	.word	0x40023800

08005e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e0cc      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ea0:	4b68      	ldr	r3, [pc, #416]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d90c      	bls.n	8005ec8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eae:	4b65      	ldr	r3, [pc, #404]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005eb6:	4b63      	ldr	r3, [pc, #396]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d001      	beq.n	8005ec8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e0b8      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d020      	beq.n	8005f16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ee0:	4b59      	ldr	r3, [pc, #356]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	4a58      	ldr	r2, [pc, #352]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005eea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 0308 	and.w	r3, r3, #8
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ef8:	4b53      	ldr	r3, [pc, #332]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	4a52      	ldr	r2, [pc, #328]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005efe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f04:	4b50      	ldr	r3, [pc, #320]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	494d      	ldr	r1, [pc, #308]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d044      	beq.n	8005fac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d107      	bne.n	8005f3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f2a:	4b47      	ldr	r3, [pc, #284]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d119      	bne.n	8005f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e07f      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d003      	beq.n	8005f4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	d107      	bne.n	8005f5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f4a:	4b3f      	ldr	r3, [pc, #252]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d109      	bne.n	8005f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e06f      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f5a:	4b3b      	ldr	r3, [pc, #236]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e067      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f6a:	4b37      	ldr	r3, [pc, #220]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f023 0203 	bic.w	r2, r3, #3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	4934      	ldr	r1, [pc, #208]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f7c:	f7fd f804 	bl	8002f88 <HAL_GetTick>
 8005f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f82:	e00a      	b.n	8005f9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f84:	f7fd f800 	bl	8002f88 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d901      	bls.n	8005f9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e04f      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f9a:	4b2b      	ldr	r3, [pc, #172]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f003 020c 	and.w	r2, r3, #12
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d1eb      	bne.n	8005f84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fac:	4b25      	ldr	r3, [pc, #148]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d20c      	bcs.n	8005fd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fba:	4b22      	ldr	r3, [pc, #136]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc2:	4b20      	ldr	r3, [pc, #128]	; (8006044 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d001      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e032      	b.n	800603a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d008      	beq.n	8005ff2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005fe0:	4b19      	ldr	r3, [pc, #100]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	4916      	ldr	r1, [pc, #88]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0308 	and.w	r3, r3, #8
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d009      	beq.n	8006012 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ffe:	4b12      	ldr	r3, [pc, #72]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	490e      	ldr	r1, [pc, #56]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 800600e:	4313      	orrs	r3, r2
 8006010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006012:	f000 f821 	bl	8006058 <HAL_RCC_GetSysClockFreq>
 8006016:	4602      	mov	r2, r0
 8006018:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <HAL_RCC_ClockConfig+0x1bc>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	091b      	lsrs	r3, r3, #4
 800601e:	f003 030f 	and.w	r3, r3, #15
 8006022:	490a      	ldr	r1, [pc, #40]	; (800604c <HAL_RCC_ClockConfig+0x1c0>)
 8006024:	5ccb      	ldrb	r3, [r1, r3]
 8006026:	fa22 f303 	lsr.w	r3, r2, r3
 800602a:	4a09      	ldr	r2, [pc, #36]	; (8006050 <HAL_RCC_ClockConfig+0x1c4>)
 800602c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800602e:	4b09      	ldr	r3, [pc, #36]	; (8006054 <HAL_RCC_ClockConfig+0x1c8>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4618      	mov	r0, r3
 8006034:	f7fc f860 	bl	80020f8 <HAL_InitTick>

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	40023c00 	.word	0x40023c00
 8006048:	40023800 	.word	0x40023800
 800604c:	0801bee8 	.word	0x0801bee8
 8006050:	20000004 	.word	0x20000004
 8006054:	20000008 	.word	0x20000008

08006058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800605c:	b094      	sub	sp, #80	; 0x50
 800605e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006060:	2300      	movs	r3, #0
 8006062:	647b      	str	r3, [r7, #68]	; 0x44
 8006064:	2300      	movs	r3, #0
 8006066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006068:	2300      	movs	r3, #0
 800606a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800606c:	2300      	movs	r3, #0
 800606e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006070:	4b79      	ldr	r3, [pc, #484]	; (8006258 <HAL_RCC_GetSysClockFreq+0x200>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 030c 	and.w	r3, r3, #12
 8006078:	2b08      	cmp	r3, #8
 800607a:	d00d      	beq.n	8006098 <HAL_RCC_GetSysClockFreq+0x40>
 800607c:	2b08      	cmp	r3, #8
 800607e:	f200 80e1 	bhi.w	8006244 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <HAL_RCC_GetSysClockFreq+0x34>
 8006086:	2b04      	cmp	r3, #4
 8006088:	d003      	beq.n	8006092 <HAL_RCC_GetSysClockFreq+0x3a>
 800608a:	e0db      	b.n	8006244 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800608c:	4b73      	ldr	r3, [pc, #460]	; (800625c <HAL_RCC_GetSysClockFreq+0x204>)
 800608e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006090:	e0db      	b.n	800624a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006092:	4b73      	ldr	r3, [pc, #460]	; (8006260 <HAL_RCC_GetSysClockFreq+0x208>)
 8006094:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006096:	e0d8      	b.n	800624a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006098:	4b6f      	ldr	r3, [pc, #444]	; (8006258 <HAL_RCC_GetSysClockFreq+0x200>)
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060a2:	4b6d      	ldr	r3, [pc, #436]	; (8006258 <HAL_RCC_GetSysClockFreq+0x200>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d063      	beq.n	8006176 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060ae:	4b6a      	ldr	r3, [pc, #424]	; (8006258 <HAL_RCC_GetSysClockFreq+0x200>)
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	099b      	lsrs	r3, r3, #6
 80060b4:	2200      	movs	r2, #0
 80060b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80060b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80060ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c0:	633b      	str	r3, [r7, #48]	; 0x30
 80060c2:	2300      	movs	r3, #0
 80060c4:	637b      	str	r3, [r7, #52]	; 0x34
 80060c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80060ca:	4622      	mov	r2, r4
 80060cc:	462b      	mov	r3, r5
 80060ce:	f04f 0000 	mov.w	r0, #0
 80060d2:	f04f 0100 	mov.w	r1, #0
 80060d6:	0159      	lsls	r1, r3, #5
 80060d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060dc:	0150      	lsls	r0, r2, #5
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	4621      	mov	r1, r4
 80060e4:	1a51      	subs	r1, r2, r1
 80060e6:	6139      	str	r1, [r7, #16]
 80060e8:	4629      	mov	r1, r5
 80060ea:	eb63 0301 	sbc.w	r3, r3, r1
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	f04f 0300 	mov.w	r3, #0
 80060f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060fc:	4659      	mov	r1, fp
 80060fe:	018b      	lsls	r3, r1, #6
 8006100:	4651      	mov	r1, sl
 8006102:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006106:	4651      	mov	r1, sl
 8006108:	018a      	lsls	r2, r1, #6
 800610a:	4651      	mov	r1, sl
 800610c:	ebb2 0801 	subs.w	r8, r2, r1
 8006110:	4659      	mov	r1, fp
 8006112:	eb63 0901 	sbc.w	r9, r3, r1
 8006116:	f04f 0200 	mov.w	r2, #0
 800611a:	f04f 0300 	mov.w	r3, #0
 800611e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800612a:	4690      	mov	r8, r2
 800612c:	4699      	mov	r9, r3
 800612e:	4623      	mov	r3, r4
 8006130:	eb18 0303 	adds.w	r3, r8, r3
 8006134:	60bb      	str	r3, [r7, #8]
 8006136:	462b      	mov	r3, r5
 8006138:	eb49 0303 	adc.w	r3, r9, r3
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800614a:	4629      	mov	r1, r5
 800614c:	024b      	lsls	r3, r1, #9
 800614e:	4621      	mov	r1, r4
 8006150:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006154:	4621      	mov	r1, r4
 8006156:	024a      	lsls	r2, r1, #9
 8006158:	4610      	mov	r0, r2
 800615a:	4619      	mov	r1, r3
 800615c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800615e:	2200      	movs	r2, #0
 8006160:	62bb      	str	r3, [r7, #40]	; 0x28
 8006162:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006164:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006168:	f7fa faf6 	bl	8000758 <__aeabi_uldivmod>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4613      	mov	r3, r2
 8006172:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006174:	e058      	b.n	8006228 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006176:	4b38      	ldr	r3, [pc, #224]	; (8006258 <HAL_RCC_GetSysClockFreq+0x200>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	099b      	lsrs	r3, r3, #6
 800617c:	2200      	movs	r2, #0
 800617e:	4618      	mov	r0, r3
 8006180:	4611      	mov	r1, r2
 8006182:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006186:	623b      	str	r3, [r7, #32]
 8006188:	2300      	movs	r3, #0
 800618a:	627b      	str	r3, [r7, #36]	; 0x24
 800618c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006190:	4642      	mov	r2, r8
 8006192:	464b      	mov	r3, r9
 8006194:	f04f 0000 	mov.w	r0, #0
 8006198:	f04f 0100 	mov.w	r1, #0
 800619c:	0159      	lsls	r1, r3, #5
 800619e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061a2:	0150      	lsls	r0, r2, #5
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	4641      	mov	r1, r8
 80061aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80061ae:	4649      	mov	r1, r9
 80061b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80061b4:	f04f 0200 	mov.w	r2, #0
 80061b8:	f04f 0300 	mov.w	r3, #0
 80061bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80061c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80061c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80061c8:	ebb2 040a 	subs.w	r4, r2, sl
 80061cc:	eb63 050b 	sbc.w	r5, r3, fp
 80061d0:	f04f 0200 	mov.w	r2, #0
 80061d4:	f04f 0300 	mov.w	r3, #0
 80061d8:	00eb      	lsls	r3, r5, #3
 80061da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061de:	00e2      	lsls	r2, r4, #3
 80061e0:	4614      	mov	r4, r2
 80061e2:	461d      	mov	r5, r3
 80061e4:	4643      	mov	r3, r8
 80061e6:	18e3      	adds	r3, r4, r3
 80061e8:	603b      	str	r3, [r7, #0]
 80061ea:	464b      	mov	r3, r9
 80061ec:	eb45 0303 	adc.w	r3, r5, r3
 80061f0:	607b      	str	r3, [r7, #4]
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	f04f 0300 	mov.w	r3, #0
 80061fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061fe:	4629      	mov	r1, r5
 8006200:	028b      	lsls	r3, r1, #10
 8006202:	4621      	mov	r1, r4
 8006204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006208:	4621      	mov	r1, r4
 800620a:	028a      	lsls	r2, r1, #10
 800620c:	4610      	mov	r0, r2
 800620e:	4619      	mov	r1, r3
 8006210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006212:	2200      	movs	r2, #0
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	61fa      	str	r2, [r7, #28]
 8006218:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800621c:	f7fa fa9c 	bl	8000758 <__aeabi_uldivmod>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	4613      	mov	r3, r2
 8006226:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006228:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <HAL_RCC_GetSysClockFreq+0x200>)
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	0c1b      	lsrs	r3, r3, #16
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	3301      	adds	r3, #1
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006238:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800623a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800623c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006240:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006242:	e002      	b.n	800624a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006244:	4b05      	ldr	r3, [pc, #20]	; (800625c <HAL_RCC_GetSysClockFreq+0x204>)
 8006246:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800624a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800624c:	4618      	mov	r0, r3
 800624e:	3750      	adds	r7, #80	; 0x50
 8006250:	46bd      	mov	sp, r7
 8006252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006256:	bf00      	nop
 8006258:	40023800 	.word	0x40023800
 800625c:	00f42400 	.word	0x00f42400
 8006260:	007a1200 	.word	0x007a1200

08006264 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006264:	b480      	push	{r7}
 8006266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006268:	4b03      	ldr	r3, [pc, #12]	; (8006278 <HAL_RCC_GetHCLKFreq+0x14>)
 800626a:	681b      	ldr	r3, [r3, #0]
}
 800626c:	4618      	mov	r0, r3
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	20000004 	.word	0x20000004

0800627c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006280:	f7ff fff0 	bl	8006264 <HAL_RCC_GetHCLKFreq>
 8006284:	4602      	mov	r2, r0
 8006286:	4b05      	ldr	r3, [pc, #20]	; (800629c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	0a9b      	lsrs	r3, r3, #10
 800628c:	f003 0307 	and.w	r3, r3, #7
 8006290:	4903      	ldr	r1, [pc, #12]	; (80062a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006292:	5ccb      	ldrb	r3, [r1, r3]
 8006294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006298:	4618      	mov	r0, r3
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40023800 	.word	0x40023800
 80062a0:	0801bef8 	.word	0x0801bef8

080062a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80062a8:	f7ff ffdc 	bl	8006264 <HAL_RCC_GetHCLKFreq>
 80062ac:	4602      	mov	r2, r0
 80062ae:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	0b5b      	lsrs	r3, r3, #13
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	4903      	ldr	r1, [pc, #12]	; (80062c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062ba:	5ccb      	ldrb	r3, [r1, r3]
 80062bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	40023800 	.word	0x40023800
 80062c8:	0801bef8 	.word	0x0801bef8

080062cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	220f      	movs	r2, #15
 80062da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80062dc:	4b12      	ldr	r3, [pc, #72]	; (8006328 <HAL_RCC_GetClockConfig+0x5c>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 0203 	and.w	r2, r3, #3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80062e8:	4b0f      	ldr	r3, [pc, #60]	; (8006328 <HAL_RCC_GetClockConfig+0x5c>)
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80062f4:	4b0c      	ldr	r3, [pc, #48]	; (8006328 <HAL_RCC_GetClockConfig+0x5c>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006300:	4b09      	ldr	r3, [pc, #36]	; (8006328 <HAL_RCC_GetClockConfig+0x5c>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	08db      	lsrs	r3, r3, #3
 8006306:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800630e:	4b07      	ldr	r3, [pc, #28]	; (800632c <HAL_RCC_GetClockConfig+0x60>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0207 	and.w	r2, r3, #7
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	601a      	str	r2, [r3, #0]
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	40023800 	.word	0x40023800
 800632c:	40023c00 	.word	0x40023c00

08006330 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e01c      	b.n	800637c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	795b      	ldrb	r3, [r3, #5]
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	d105      	bne.n	8006358 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7fb fe04 	bl	8001f60 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f042 0204 	orr.w	r2, r2, #4
 800636c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e07b      	b.n	800648e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639a:	2b00      	cmp	r3, #0
 800639c:	d108      	bne.n	80063b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063a6:	d009      	beq.n	80063bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	61da      	str	r2, [r3, #28]
 80063ae:	e005      	b.n	80063bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d106      	bne.n	80063dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fb fe1a 	bl	8002010 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	f003 0302 	and.w	r3, r3, #2
 8006418:	431a      	orrs	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800642c:	431a      	orrs	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006436:	431a      	orrs	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006440:	ea42 0103 	orr.w	r1, r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006448:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	0c1b      	lsrs	r3, r3, #16
 800645a:	f003 0104 	and.w	r1, r3, #4
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006462:	f003 0210 	and.w	r2, r3, #16
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	430a      	orrs	r2, r1
 800646c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800647c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b082      	sub	sp, #8
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e041      	b.n	800652c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d106      	bne.n	80064c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7fc fae7 	bl	8002a90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2202      	movs	r2, #2
 80064c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3304      	adds	r3, #4
 80064d2:	4619      	mov	r1, r3
 80064d4:	4610      	mov	r0, r2
 80064d6:	f000 fded 	bl	80070b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3708      	adds	r7, #8
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b01      	cmp	r3, #1
 8006546:	d001      	beq.n	800654c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e04e      	b.n	80065ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0201 	orr.w	r2, r2, #1
 8006562:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a23      	ldr	r2, [pc, #140]	; (80065f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d022      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006576:	d01d      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a1f      	ldr	r2, [pc, #124]	; (80065fc <HAL_TIM_Base_Start_IT+0xc8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d018      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1e      	ldr	r2, [pc, #120]	; (8006600 <HAL_TIM_Base_Start_IT+0xcc>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d013      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a1c      	ldr	r2, [pc, #112]	; (8006604 <HAL_TIM_Base_Start_IT+0xd0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00e      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a1b      	ldr	r2, [pc, #108]	; (8006608 <HAL_TIM_Base_Start_IT+0xd4>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d009      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a19      	ldr	r2, [pc, #100]	; (800660c <HAL_TIM_Base_Start_IT+0xd8>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d004      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a18      	ldr	r2, [pc, #96]	; (8006610 <HAL_TIM_Base_Start_IT+0xdc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d111      	bne.n	80065d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f003 0307 	and.w	r3, r3, #7
 80065be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b06      	cmp	r3, #6
 80065c4:	d010      	beq.n	80065e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f042 0201 	orr.w	r2, r2, #1
 80065d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d6:	e007      	b.n	80065e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0201 	orr.w	r2, r2, #1
 80065e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	40010000 	.word	0x40010000
 80065fc:	40000400 	.word	0x40000400
 8006600:	40000800 	.word	0x40000800
 8006604:	40000c00 	.word	0x40000c00
 8006608:	40010400 	.word	0x40010400
 800660c:	40014000 	.word	0x40014000
 8006610:	40001800 	.word	0x40001800

08006614 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e041      	b.n	80066aa <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fc fa06 	bl	8002a4c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3304      	adds	r3, #4
 8006650:	4619      	mov	r1, r3
 8006652:	4610      	mov	r0, r2
 8006654:	f000 fd2e 	bl	80070b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b082      	sub	sp, #8
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d101      	bne.n	80066c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e041      	b.n	8006748 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d106      	bne.n	80066de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7fc f96f 	bl	80029bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2202      	movs	r2, #2
 80066e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3304      	adds	r3, #4
 80066ee:	4619      	mov	r1, r3
 80066f0:	4610      	mov	r0, r2
 80066f2:	f000 fcdf 	bl	80070b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3708      	adds	r7, #8
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e041      	b.n	80067e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 f839 	bl	80067ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3304      	adds	r3, #4
 800678c:	4619      	mov	r1, r3
 800678e:	4610      	mov	r0, r2
 8006790:	f000 fc90 	bl	80070b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b086      	sub	sp, #24
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e097      	b.n	8006946 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d106      	bne.n	8006830 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fc f844 	bl	80028b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	6812      	ldr	r2, [r2, #0]
 8006842:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006846:	f023 0307 	bic.w	r3, r3, #7
 800684a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	3304      	adds	r3, #4
 8006854:	4619      	mov	r1, r3
 8006856:	4610      	mov	r0, r2
 8006858:	f000 fc2c 	bl	80070b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006884:	f023 0303 	bic.w	r3, r3, #3
 8006888:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	689a      	ldr	r2, [r3, #8]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	021b      	lsls	r3, r3, #8
 8006894:	4313      	orrs	r3, r2
 8006896:	693a      	ldr	r2, [r7, #16]
 8006898:	4313      	orrs	r3, r2
 800689a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80068a2:	f023 030c 	bic.w	r3, r3, #12
 80068a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	4313      	orrs	r3, r2
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	011a      	lsls	r2, r3, #4
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	031b      	lsls	r3, r3, #12
 80068d2:	4313      	orrs	r3, r2
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80068e0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80068e8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	4313      	orrs	r3, r2
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b082      	sub	sp, #8
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	2b02      	cmp	r3, #2
 8006962:	d122      	bne.n	80069aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b02      	cmp	r3, #2
 8006970:	d11b      	bne.n	80069aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f06f 0202 	mvn.w	r2, #2
 800697a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	f003 0303 	and.w	r3, r3, #3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d003      	beq.n	8006998 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fb70 	bl	8007076 <HAL_TIM_IC_CaptureCallback>
 8006996:	e005      	b.n	80069a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fb62 	bl	8007062 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fb73 	bl	800708a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d122      	bne.n	80069fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f003 0304 	and.w	r3, r3, #4
 80069c2:	2b04      	cmp	r3, #4
 80069c4:	d11b      	bne.n	80069fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f06f 0204 	mvn.w	r2, #4
 80069ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fb46 	bl	8007076 <HAL_TIM_IC_CaptureCallback>
 80069ea:	e005      	b.n	80069f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fb38 	bl	8007062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fb49 	bl	800708a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f003 0308 	and.w	r3, r3, #8
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d122      	bne.n	8006a52 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f003 0308 	and.w	r3, r3, #8
 8006a16:	2b08      	cmp	r3, #8
 8006a18:	d11b      	bne.n	8006a52 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f06f 0208 	mvn.w	r2, #8
 8006a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2204      	movs	r2, #4
 8006a28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	f003 0303 	and.w	r3, r3, #3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fb1c 	bl	8007076 <HAL_TIM_IC_CaptureCallback>
 8006a3e:	e005      	b.n	8006a4c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fb0e 	bl	8007062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fb1f 	bl	800708a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	f003 0310 	and.w	r3, r3, #16
 8006a5c:	2b10      	cmp	r3, #16
 8006a5e:	d122      	bne.n	8006aa6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	f003 0310 	and.w	r3, r3, #16
 8006a6a:	2b10      	cmp	r3, #16
 8006a6c:	d11b      	bne.n	8006aa6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f06f 0210 	mvn.w	r2, #16
 8006a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2208      	movs	r2, #8
 8006a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 faf2 	bl	8007076 <HAL_TIM_IC_CaptureCallback>
 8006a92:	e005      	b.n	8006aa0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fae4 	bl	8007062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 faf5 	bl	800708a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d10e      	bne.n	8006ad2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d107      	bne.n	8006ad2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f06f 0201 	mvn.w	r2, #1
 8006aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7fb f8b7 	bl	8001c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006adc:	2b80      	cmp	r3, #128	; 0x80
 8006ade:	d10e      	bne.n	8006afe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aea:	2b80      	cmp	r3, #128	; 0x80
 8006aec:	d107      	bne.n	8006afe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 ffc7 	bl	8007a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b08:	2b40      	cmp	r3, #64	; 0x40
 8006b0a:	d10e      	bne.n	8006b2a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b16:	2b40      	cmp	r3, #64	; 0x40
 8006b18:	d107      	bne.n	8006b2a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 faba 	bl	800709e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	f003 0320 	and.w	r3, r3, #32
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d10e      	bne.n	8006b56 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b20      	cmp	r3, #32
 8006b44:	d107      	bne.n	8006b56 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f06f 0220 	mvn.w	r2, #32
 8006b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 ff91 	bl	8007a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d101      	bne.n	8006b7e <HAL_TIM_OC_ConfigChannel+0x1e>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e048      	b.n	8006c10 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b0c      	cmp	r3, #12
 8006b8a:	d839      	bhi.n	8006c00 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006b8c:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b92:	bf00      	nop
 8006b94:	08006bc9 	.word	0x08006bc9
 8006b98:	08006c01 	.word	0x08006c01
 8006b9c:	08006c01 	.word	0x08006c01
 8006ba0:	08006c01 	.word	0x08006c01
 8006ba4:	08006bd7 	.word	0x08006bd7
 8006ba8:	08006c01 	.word	0x08006c01
 8006bac:	08006c01 	.word	0x08006c01
 8006bb0:	08006c01 	.word	0x08006c01
 8006bb4:	08006be5 	.word	0x08006be5
 8006bb8:	08006c01 	.word	0x08006c01
 8006bbc:	08006c01 	.word	0x08006c01
 8006bc0:	08006c01 	.word	0x08006c01
 8006bc4:	08006bf3 	.word	0x08006bf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68b9      	ldr	r1, [r7, #8]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 fb10 	bl	80071f4 <TIM_OC1_SetConfig>
      break;
 8006bd4:	e017      	b.n	8006c06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68b9      	ldr	r1, [r7, #8]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fb79 	bl	80072d4 <TIM_OC2_SetConfig>
      break;
 8006be2:	e010      	b.n	8006c06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68b9      	ldr	r1, [r7, #8]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fbe8 	bl	80073c0 <TIM_OC3_SetConfig>
      break;
 8006bf0:	e009      	b.n	8006c06 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68b9      	ldr	r1, [r7, #8]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f000 fc55 	bl	80074a8 <TIM_OC4_SetConfig>
      break;
 8006bfe:	e002      	b.n	8006c06 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	75fb      	strb	r3, [r7, #23]
      break;
 8006c04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c24:	2300      	movs	r3, #0
 8006c26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e088      	b.n	8006d48 <HAL_TIM_IC_ConfigChannel+0x130>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d11b      	bne.n	8006c7c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6818      	ldr	r0, [r3, #0]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	6819      	ldr	r1, [r3, #0]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f000 fc7e 	bl	8007554 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	699a      	ldr	r2, [r3, #24]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 020c 	bic.w	r2, r2, #12
 8006c66:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6999      	ldr	r1, [r3, #24]
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	689a      	ldr	r2, [r3, #8]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	619a      	str	r2, [r3, #24]
 8006c7a:	e060      	b.n	8006d3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2b04      	cmp	r3, #4
 8006c80:	d11c      	bne.n	8006cbc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6818      	ldr	r0, [r3, #0]
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6819      	ldr	r1, [r3, #0]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	685a      	ldr	r2, [r3, #4]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	f000 fd02 	bl	800769a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	699a      	ldr	r2, [r3, #24]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006ca4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6999      	ldr	r1, [r3, #24]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	021a      	lsls	r2, r3, #8
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	619a      	str	r2, [r3, #24]
 8006cba:	e040      	b.n	8006d3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b08      	cmp	r3, #8
 8006cc0:	d11b      	bne.n	8006cfa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6818      	ldr	r0, [r3, #0]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	6819      	ldr	r1, [r3, #0]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f000 fd4f 	bl	8007774 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69da      	ldr	r2, [r3, #28]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 020c 	bic.w	r2, r2, #12
 8006ce4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	69d9      	ldr	r1, [r3, #28]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	689a      	ldr	r2, [r3, #8]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	61da      	str	r2, [r3, #28]
 8006cf8:	e021      	b.n	8006d3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b0c      	cmp	r3, #12
 8006cfe:	d11c      	bne.n	8006d3a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6818      	ldr	r0, [r3, #0]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	6819      	ldr	r1, [r3, #0]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f000 fd6c 	bl	80077ec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	69da      	ldr	r2, [r3, #28]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006d22:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	69d9      	ldr	r1, [r3, #28]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	021a      	lsls	r2, r3, #8
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	61da      	str	r2, [r3, #28]
 8006d38:	e001      	b.n	8006d3e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3718      	adds	r7, #24
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d101      	bne.n	8006d6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	e0ae      	b.n	8006ecc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b0c      	cmp	r3, #12
 8006d7a:	f200 809f 	bhi.w	8006ebc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d7e:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d84:	08006db9 	.word	0x08006db9
 8006d88:	08006ebd 	.word	0x08006ebd
 8006d8c:	08006ebd 	.word	0x08006ebd
 8006d90:	08006ebd 	.word	0x08006ebd
 8006d94:	08006df9 	.word	0x08006df9
 8006d98:	08006ebd 	.word	0x08006ebd
 8006d9c:	08006ebd 	.word	0x08006ebd
 8006da0:	08006ebd 	.word	0x08006ebd
 8006da4:	08006e3b 	.word	0x08006e3b
 8006da8:	08006ebd 	.word	0x08006ebd
 8006dac:	08006ebd 	.word	0x08006ebd
 8006db0:	08006ebd 	.word	0x08006ebd
 8006db4:	08006e7b 	.word	0x08006e7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68b9      	ldr	r1, [r7, #8]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fa18 	bl	80071f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	699a      	ldr	r2, [r3, #24]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0208 	orr.w	r2, r2, #8
 8006dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	699a      	ldr	r2, [r3, #24]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0204 	bic.w	r2, r2, #4
 8006de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6999      	ldr	r1, [r3, #24]
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	691a      	ldr	r2, [r3, #16]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	619a      	str	r2, [r3, #24]
      break;
 8006df6:	e064      	b.n	8006ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68b9      	ldr	r1, [r7, #8]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 fa68 	bl	80072d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	699a      	ldr	r2, [r3, #24]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699a      	ldr	r2, [r3, #24]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6999      	ldr	r1, [r3, #24]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	021a      	lsls	r2, r3, #8
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	619a      	str	r2, [r3, #24]
      break;
 8006e38:	e043      	b.n	8006ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68b9      	ldr	r1, [r7, #8]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 fabd 	bl	80073c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69da      	ldr	r2, [r3, #28]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f042 0208 	orr.w	r2, r2, #8
 8006e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69da      	ldr	r2, [r3, #28]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f022 0204 	bic.w	r2, r2, #4
 8006e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	69d9      	ldr	r1, [r3, #28]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	691a      	ldr	r2, [r3, #16]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	430a      	orrs	r2, r1
 8006e76:	61da      	str	r2, [r3, #28]
      break;
 8006e78:	e023      	b.n	8006ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68b9      	ldr	r1, [r7, #8]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 fb11 	bl	80074a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	69da      	ldr	r2, [r3, #28]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69da      	ldr	r2, [r3, #28]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69d9      	ldr	r1, [r3, #28]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	021a      	lsls	r2, r3, #8
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	430a      	orrs	r2, r1
 8006eb8:	61da      	str	r2, [r3, #28]
      break;
 8006eba:	e002      	b.n	8006ec2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8006ec0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3718      	adds	r7, #24
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d101      	bne.n	8006ef0 <HAL_TIM_ConfigClockSource+0x1c>
 8006eec:	2302      	movs	r3, #2
 8006eee:	e0b4      	b.n	800705a <HAL_TIM_ConfigClockSource+0x186>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f28:	d03e      	beq.n	8006fa8 <HAL_TIM_ConfigClockSource+0xd4>
 8006f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f2e:	f200 8087 	bhi.w	8007040 <HAL_TIM_ConfigClockSource+0x16c>
 8006f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f36:	f000 8086 	beq.w	8007046 <HAL_TIM_ConfigClockSource+0x172>
 8006f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f3e:	d87f      	bhi.n	8007040 <HAL_TIM_ConfigClockSource+0x16c>
 8006f40:	2b70      	cmp	r3, #112	; 0x70
 8006f42:	d01a      	beq.n	8006f7a <HAL_TIM_ConfigClockSource+0xa6>
 8006f44:	2b70      	cmp	r3, #112	; 0x70
 8006f46:	d87b      	bhi.n	8007040 <HAL_TIM_ConfigClockSource+0x16c>
 8006f48:	2b60      	cmp	r3, #96	; 0x60
 8006f4a:	d050      	beq.n	8006fee <HAL_TIM_ConfigClockSource+0x11a>
 8006f4c:	2b60      	cmp	r3, #96	; 0x60
 8006f4e:	d877      	bhi.n	8007040 <HAL_TIM_ConfigClockSource+0x16c>
 8006f50:	2b50      	cmp	r3, #80	; 0x50
 8006f52:	d03c      	beq.n	8006fce <HAL_TIM_ConfigClockSource+0xfa>
 8006f54:	2b50      	cmp	r3, #80	; 0x50
 8006f56:	d873      	bhi.n	8007040 <HAL_TIM_ConfigClockSource+0x16c>
 8006f58:	2b40      	cmp	r3, #64	; 0x40
 8006f5a:	d058      	beq.n	800700e <HAL_TIM_ConfigClockSource+0x13a>
 8006f5c:	2b40      	cmp	r3, #64	; 0x40
 8006f5e:	d86f      	bhi.n	8007040 <HAL_TIM_ConfigClockSource+0x16c>
 8006f60:	2b30      	cmp	r3, #48	; 0x30
 8006f62:	d064      	beq.n	800702e <HAL_TIM_ConfigClockSource+0x15a>
 8006f64:	2b30      	cmp	r3, #48	; 0x30
 8006f66:	d86b      	bhi.n	8007040 <HAL_TIM_ConfigClockSource+0x16c>
 8006f68:	2b20      	cmp	r3, #32
 8006f6a:	d060      	beq.n	800702e <HAL_TIM_ConfigClockSource+0x15a>
 8006f6c:	2b20      	cmp	r3, #32
 8006f6e:	d867      	bhi.n	8007040 <HAL_TIM_ConfigClockSource+0x16c>
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d05c      	beq.n	800702e <HAL_TIM_ConfigClockSource+0x15a>
 8006f74:	2b10      	cmp	r3, #16
 8006f76:	d05a      	beq.n	800702e <HAL_TIM_ConfigClockSource+0x15a>
 8006f78:	e062      	b.n	8007040 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6818      	ldr	r0, [r3, #0]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	6899      	ldr	r1, [r3, #8]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	f000 fc87 	bl	800789c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	609a      	str	r2, [r3, #8]
      break;
 8006fa6:	e04f      	b.n	8007048 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6818      	ldr	r0, [r3, #0]
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	6899      	ldr	r1, [r3, #8]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	f000 fc70 	bl	800789c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689a      	ldr	r2, [r3, #8]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fca:	609a      	str	r2, [r3, #8]
      break;
 8006fcc:	e03c      	b.n	8007048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6818      	ldr	r0, [r3, #0]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	6859      	ldr	r1, [r3, #4]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f000 fb2e 	bl	800763c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2150      	movs	r1, #80	; 0x50
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 fc3d 	bl	8007866 <TIM_ITRx_SetConfig>
      break;
 8006fec:	e02c      	b.n	8007048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	6859      	ldr	r1, [r3, #4]
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f000 fb8a 	bl	8007714 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2160      	movs	r1, #96	; 0x60
 8007006:	4618      	mov	r0, r3
 8007008:	f000 fc2d 	bl	8007866 <TIM_ITRx_SetConfig>
      break;
 800700c:	e01c      	b.n	8007048 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	6859      	ldr	r1, [r3, #4]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	461a      	mov	r2, r3
 800701c:	f000 fb0e 	bl	800763c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2140      	movs	r1, #64	; 0x40
 8007026:	4618      	mov	r0, r3
 8007028:	f000 fc1d 	bl	8007866 <TIM_ITRx_SetConfig>
      break;
 800702c:	e00c      	b.n	8007048 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4619      	mov	r1, r3
 8007038:	4610      	mov	r0, r2
 800703a:	f000 fc14 	bl	8007866 <TIM_ITRx_SetConfig>
      break;
 800703e:	e003      	b.n	8007048 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	73fb      	strb	r3, [r7, #15]
      break;
 8007044:	e000      	b.n	8007048 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007062:	b480      	push	{r7}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800706a:	bf00      	nop
 800706c:	370c      	adds	r7, #12
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007076:	b480      	push	{r7}
 8007078:	b083      	sub	sp, #12
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007092:	bf00      	nop
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
	...

080070b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a40      	ldr	r2, [pc, #256]	; (80071c8 <TIM_Base_SetConfig+0x114>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d013      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d2:	d00f      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a3d      	ldr	r2, [pc, #244]	; (80071cc <TIM_Base_SetConfig+0x118>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d00b      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a3c      	ldr	r2, [pc, #240]	; (80071d0 <TIM_Base_SetConfig+0x11c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d007      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a3b      	ldr	r2, [pc, #236]	; (80071d4 <TIM_Base_SetConfig+0x120>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d003      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a3a      	ldr	r2, [pc, #232]	; (80071d8 <TIM_Base_SetConfig+0x124>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d108      	bne.n	8007106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a2f      	ldr	r2, [pc, #188]	; (80071c8 <TIM_Base_SetConfig+0x114>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d02b      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007114:	d027      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a2c      	ldr	r2, [pc, #176]	; (80071cc <TIM_Base_SetConfig+0x118>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d023      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a2b      	ldr	r2, [pc, #172]	; (80071d0 <TIM_Base_SetConfig+0x11c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d01f      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a2a      	ldr	r2, [pc, #168]	; (80071d4 <TIM_Base_SetConfig+0x120>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d01b      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a29      	ldr	r2, [pc, #164]	; (80071d8 <TIM_Base_SetConfig+0x124>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d017      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a28      	ldr	r2, [pc, #160]	; (80071dc <TIM_Base_SetConfig+0x128>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d013      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a27      	ldr	r2, [pc, #156]	; (80071e0 <TIM_Base_SetConfig+0x12c>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00f      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a26      	ldr	r2, [pc, #152]	; (80071e4 <TIM_Base_SetConfig+0x130>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d00b      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a25      	ldr	r2, [pc, #148]	; (80071e8 <TIM_Base_SetConfig+0x134>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d007      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a24      	ldr	r2, [pc, #144]	; (80071ec <TIM_Base_SetConfig+0x138>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d003      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a23      	ldr	r2, [pc, #140]	; (80071f0 <TIM_Base_SetConfig+0x13c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d108      	bne.n	8007178 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800716c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	4313      	orrs	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a0a      	ldr	r2, [pc, #40]	; (80071c8 <TIM_Base_SetConfig+0x114>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d003      	beq.n	80071ac <TIM_Base_SetConfig+0xf8>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a0c      	ldr	r2, [pc, #48]	; (80071d8 <TIM_Base_SetConfig+0x124>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d103      	bne.n	80071b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	691a      	ldr	r2, [r3, #16]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	615a      	str	r2, [r3, #20]
}
 80071ba:	bf00      	nop
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	40010000 	.word	0x40010000
 80071cc:	40000400 	.word	0x40000400
 80071d0:	40000800 	.word	0x40000800
 80071d4:	40000c00 	.word	0x40000c00
 80071d8:	40010400 	.word	0x40010400
 80071dc:	40014000 	.word	0x40014000
 80071e0:	40014400 	.word	0x40014400
 80071e4:	40014800 	.word	0x40014800
 80071e8:	40001800 	.word	0x40001800
 80071ec:	40001c00 	.word	0x40001c00
 80071f0:	40002000 	.word	0x40002000

080071f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	f023 0201 	bic.w	r2, r3, #1
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 0303 	bic.w	r3, r3, #3
 800722a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f023 0302 	bic.w	r3, r3, #2
 800723c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	4313      	orrs	r3, r2
 8007246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a20      	ldr	r2, [pc, #128]	; (80072cc <TIM_OC1_SetConfig+0xd8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d003      	beq.n	8007258 <TIM_OC1_SetConfig+0x64>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a1f      	ldr	r2, [pc, #124]	; (80072d0 <TIM_OC1_SetConfig+0xdc>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d10c      	bne.n	8007272 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f023 0308 	bic.w	r3, r3, #8
 800725e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	4313      	orrs	r3, r2
 8007268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f023 0304 	bic.w	r3, r3, #4
 8007270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a15      	ldr	r2, [pc, #84]	; (80072cc <TIM_OC1_SetConfig+0xd8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d003      	beq.n	8007282 <TIM_OC1_SetConfig+0x8e>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a14      	ldr	r2, [pc, #80]	; (80072d0 <TIM_OC1_SetConfig+0xdc>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d111      	bne.n	80072a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	4313      	orrs	r3, r2
 800729a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	621a      	str	r2, [r3, #32]
}
 80072c0:	bf00      	nop
 80072c2:	371c      	adds	r7, #28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	40010000 	.word	0x40010000
 80072d0:	40010400 	.word	0x40010400

080072d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	f023 0210 	bic.w	r2, r3, #16
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800730a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	021b      	lsls	r3, r3, #8
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f023 0320 	bic.w	r3, r3, #32
 800731e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	4313      	orrs	r3, r2
 800732a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a22      	ldr	r2, [pc, #136]	; (80073b8 <TIM_OC2_SetConfig+0xe4>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d003      	beq.n	800733c <TIM_OC2_SetConfig+0x68>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a21      	ldr	r2, [pc, #132]	; (80073bc <TIM_OC2_SetConfig+0xe8>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d10d      	bne.n	8007358 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	011b      	lsls	r3, r3, #4
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	4313      	orrs	r3, r2
 800734e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007356:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a17      	ldr	r2, [pc, #92]	; (80073b8 <TIM_OC2_SetConfig+0xe4>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d003      	beq.n	8007368 <TIM_OC2_SetConfig+0x94>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a16      	ldr	r2, [pc, #88]	; (80073bc <TIM_OC2_SetConfig+0xe8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d113      	bne.n	8007390 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800736e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007376:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	4313      	orrs	r3, r2
 800738e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	621a      	str	r2, [r3, #32]
}
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40010000 	.word	0x40010000
 80073bc:	40010400 	.word	0x40010400

080073c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 0303 	bic.w	r3, r3, #3
 80073f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	021b      	lsls	r3, r3, #8
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	4313      	orrs	r3, r2
 8007414:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a21      	ldr	r2, [pc, #132]	; (80074a0 <TIM_OC3_SetConfig+0xe0>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d003      	beq.n	8007426 <TIM_OC3_SetConfig+0x66>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a20      	ldr	r2, [pc, #128]	; (80074a4 <TIM_OC3_SetConfig+0xe4>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d10d      	bne.n	8007442 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800742c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	021b      	lsls	r3, r3, #8
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	4313      	orrs	r3, r2
 8007438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a16      	ldr	r2, [pc, #88]	; (80074a0 <TIM_OC3_SetConfig+0xe0>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d003      	beq.n	8007452 <TIM_OC3_SetConfig+0x92>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a15      	ldr	r2, [pc, #84]	; (80074a4 <TIM_OC3_SetConfig+0xe4>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d113      	bne.n	800747a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	4313      	orrs	r3, r2
 800746c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	011b      	lsls	r3, r3, #4
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	4313      	orrs	r3, r2
 8007478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	621a      	str	r2, [r3, #32]
}
 8007494:	bf00      	nop
 8007496:	371c      	adds	r7, #28
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	40010000 	.word	0x40010000
 80074a4:	40010400 	.word	0x40010400

080074a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	021b      	lsls	r3, r3, #8
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	031b      	lsls	r3, r3, #12
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a12      	ldr	r2, [pc, #72]	; (800754c <TIM_OC4_SetConfig+0xa4>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d003      	beq.n	8007510 <TIM_OC4_SetConfig+0x68>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a11      	ldr	r2, [pc, #68]	; (8007550 <TIM_OC4_SetConfig+0xa8>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d109      	bne.n	8007524 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007516:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	019b      	lsls	r3, r3, #6
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	4313      	orrs	r3, r2
 8007522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	621a      	str	r2, [r3, #32]
}
 800753e:	bf00      	nop
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	40010000 	.word	0x40010000
 8007550:	40010400 	.word	0x40010400

08007554 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	f023 0201 	bic.w	r2, r3, #1
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	4a28      	ldr	r2, [pc, #160]	; (8007620 <TIM_TI1_SetConfig+0xcc>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d01b      	beq.n	80075ba <TIM_TI1_SetConfig+0x66>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007588:	d017      	beq.n	80075ba <TIM_TI1_SetConfig+0x66>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	4a25      	ldr	r2, [pc, #148]	; (8007624 <TIM_TI1_SetConfig+0xd0>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d013      	beq.n	80075ba <TIM_TI1_SetConfig+0x66>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	4a24      	ldr	r2, [pc, #144]	; (8007628 <TIM_TI1_SetConfig+0xd4>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d00f      	beq.n	80075ba <TIM_TI1_SetConfig+0x66>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4a23      	ldr	r2, [pc, #140]	; (800762c <TIM_TI1_SetConfig+0xd8>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d00b      	beq.n	80075ba <TIM_TI1_SetConfig+0x66>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	4a22      	ldr	r2, [pc, #136]	; (8007630 <TIM_TI1_SetConfig+0xdc>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d007      	beq.n	80075ba <TIM_TI1_SetConfig+0x66>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	4a21      	ldr	r2, [pc, #132]	; (8007634 <TIM_TI1_SetConfig+0xe0>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d003      	beq.n	80075ba <TIM_TI1_SetConfig+0x66>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	4a20      	ldr	r2, [pc, #128]	; (8007638 <TIM_TI1_SetConfig+0xe4>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d101      	bne.n	80075be <TIM_TI1_SetConfig+0x6a>
 80075ba:	2301      	movs	r3, #1
 80075bc:	e000      	b.n	80075c0 <TIM_TI1_SetConfig+0x6c>
 80075be:	2300      	movs	r3, #0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d008      	beq.n	80075d6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	f023 0303 	bic.w	r3, r3, #3
 80075ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	617b      	str	r3, [r7, #20]
 80075d4:	e003      	b.n	80075de <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f043 0301 	orr.w	r3, r3, #1
 80075dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	011b      	lsls	r3, r3, #4
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f023 030a 	bic.w	r3, r3, #10
 80075f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	f003 030a 	and.w	r3, r3, #10
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	4313      	orrs	r3, r2
 8007604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	621a      	str	r2, [r3, #32]
}
 8007612:	bf00      	nop
 8007614:	371c      	adds	r7, #28
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	40010000 	.word	0x40010000
 8007624:	40000400 	.word	0x40000400
 8007628:	40000800 	.word	0x40000800
 800762c:	40000c00 	.word	0x40000c00
 8007630:	40010400 	.word	0x40010400
 8007634:	40014000 	.word	0x40014000
 8007638:	40001800 	.word	0x40001800

0800763c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6a1b      	ldr	r3, [r3, #32]
 800764c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	f023 0201 	bic.w	r2, r3, #1
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	011b      	lsls	r3, r3, #4
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	4313      	orrs	r3, r2
 8007670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f023 030a 	bic.w	r3, r3, #10
 8007678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4313      	orrs	r3, r2
 8007680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	621a      	str	r2, [r3, #32]
}
 800768e:	bf00      	nop
 8007690:	371c      	adds	r7, #28
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800769a:	b480      	push	{r7}
 800769c:	b087      	sub	sp, #28
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	607a      	str	r2, [r7, #4]
 80076a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a1b      	ldr	r3, [r3, #32]
 80076ac:	f023 0210 	bic.w	r2, r3, #16
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	021b      	lsls	r3, r3, #8
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	031b      	lsls	r3, r3, #12
 80076de:	b29b      	uxth	r3, r3
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	011b      	lsls	r3, r3, #4
 80076f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	697a      	ldr	r2, [r7, #20]
 8007700:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	621a      	str	r2, [r3, #32]
}
 8007708:	bf00      	nop
 800770a:	371c      	adds	r7, #28
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007714:	b480      	push	{r7}
 8007716:	b087      	sub	sp, #28
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6a1b      	ldr	r3, [r3, #32]
 8007724:	f023 0210 	bic.w	r2, r3, #16
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	699b      	ldr	r3, [r3, #24]
 8007730:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800773e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	031b      	lsls	r3, r3, #12
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	4313      	orrs	r3, r2
 8007748:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007750:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	011b      	lsls	r3, r3, #4
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	697a      	ldr	r2, [r7, #20]
 8007760:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	621a      	str	r2, [r3, #32]
}
 8007768:	bf00      	nop
 800776a:	371c      	adds	r7, #28
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007774:	b480      	push	{r7}
 8007776:	b087      	sub	sp, #28
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6a1b      	ldr	r3, [r3, #32]
 8007786:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	6a1b      	ldr	r3, [r3, #32]
 8007798:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	f023 0303 	bic.w	r3, r3, #3
 80077a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	011b      	lsls	r3, r3, #4
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80077c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	021b      	lsls	r3, r3, #8
 80077ca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	621a      	str	r2, [r3, #32]
}
 80077e0:	bf00      	nop
 80077e2:	371c      	adds	r7, #28
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b087      	sub	sp, #28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007818:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	021b      	lsls	r3, r3, #8
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	4313      	orrs	r3, r2
 8007822:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800782a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	031b      	lsls	r3, r3, #12
 8007830:	b29b      	uxth	r3, r3
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	4313      	orrs	r3, r2
 8007836:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800783e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	031b      	lsls	r3, r3, #12
 8007844:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	4313      	orrs	r3, r2
 800784c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	621a      	str	r2, [r3, #32]
}
 800785a:	bf00      	nop
 800785c:	371c      	adds	r7, #28
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007866:	b480      	push	{r7}
 8007868:	b085      	sub	sp, #20
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800787c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4313      	orrs	r3, r2
 8007884:	f043 0307 	orr.w	r3, r3, #7
 8007888:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	609a      	str	r2, [r3, #8]
}
 8007890:	bf00      	nop
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	021a      	lsls	r2, r3, #8
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	431a      	orrs	r2, r3
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	697a      	ldr	r2, [r7, #20]
 80078ce:	609a      	str	r2, [r3, #8]
}
 80078d0:	bf00      	nop
 80078d2:	371c      	adds	r7, #28
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d101      	bne.n	80078f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078f0:	2302      	movs	r3, #2
 80078f2:	e05a      	b.n	80079aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2202      	movs	r2, #2
 8007900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800791a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	4313      	orrs	r3, r2
 8007924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a21      	ldr	r2, [pc, #132]	; (80079b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d022      	beq.n	800797e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007940:	d01d      	beq.n	800797e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a1d      	ldr	r2, [pc, #116]	; (80079bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d018      	beq.n	800797e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a1b      	ldr	r2, [pc, #108]	; (80079c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d013      	beq.n	800797e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a1a      	ldr	r2, [pc, #104]	; (80079c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d00e      	beq.n	800797e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a18      	ldr	r2, [pc, #96]	; (80079c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d009      	beq.n	800797e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a17      	ldr	r2, [pc, #92]	; (80079cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d004      	beq.n	800797e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a15      	ldr	r2, [pc, #84]	; (80079d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d10c      	bne.n	8007998 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	4313      	orrs	r3, r2
 800798e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	40010000 	.word	0x40010000
 80079bc:	40000400 	.word	0x40000400
 80079c0:	40000800 	.word	0x40000800
 80079c4:	40000c00 	.word	0x40000c00
 80079c8:	40010400 	.word	0x40010400
 80079cc:	40014000 	.word	0x40014000
 80079d0:	40001800 	.word	0x40001800

080079d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80079de:	2300      	movs	r3, #0
 80079e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d101      	bne.n	80079f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80079ec:	2302      	movs	r3, #2
 80079ee:	e03d      	b.n	8007a6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	695b      	ldr	r3, [r3, #20]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68fa      	ldr	r2, [r7, #12]
 8007a60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e03f      	b.n	8007b32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d106      	bne.n	8007acc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f7fb f8f0 	bl	8002cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2224      	movs	r2, #36	; 0x24
 8007ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ae2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 ffd7 	bl	8008a98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	691a      	ldr	r2, [r3, #16]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007af8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	695a      	ldr	r2, [r3, #20]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68da      	ldr	r2, [r3, #12]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2220      	movs	r2, #32
 8007b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
	...

08007b3c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08c      	sub	sp, #48	; 0x30
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	4613      	mov	r3, r2
 8007b48:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b20      	cmp	r3, #32
 8007b54:	d165      	bne.n	8007c22 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d002      	beq.n	8007b62 <HAL_UART_Transmit_DMA+0x26>
 8007b5c:	88fb      	ldrh	r3, [r7, #6]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e05e      	b.n	8007c24 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d101      	bne.n	8007b74 <HAL_UART_Transmit_DMA+0x38>
 8007b70:	2302      	movs	r3, #2
 8007b72:	e057      	b.n	8007c24 <HAL_UART_Transmit_DMA+0xe8>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	88fa      	ldrh	r2, [r7, #6]
 8007b86:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	88fa      	ldrh	r2, [r7, #6]
 8007b8c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2221      	movs	r2, #33	; 0x21
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba0:	4a22      	ldr	r2, [pc, #136]	; (8007c2c <HAL_UART_Transmit_DMA+0xf0>)
 8007ba2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba8:	4a21      	ldr	r2, [pc, #132]	; (8007c30 <HAL_UART_Transmit_DMA+0xf4>)
 8007baa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb0:	4a20      	ldr	r2, [pc, #128]	; (8007c34 <HAL_UART_Transmit_DMA+0xf8>)
 8007bb2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb8:	2200      	movs	r2, #0
 8007bba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007bbc:	f107 0308 	add.w	r3, r7, #8
 8007bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	6819      	ldr	r1, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	f7fb fe16 	bl	8003804 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007be0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3314      	adds	r3, #20
 8007bf0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	e853 3f00 	ldrex	r3, [r3]
 8007bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3314      	adds	r3, #20
 8007c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c0a:	627a      	str	r2, [r7, #36]	; 0x24
 8007c0c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0e:	6a39      	ldr	r1, [r7, #32]
 8007c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c12:	e841 2300 	strex	r3, r2, [r1]
 8007c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1e5      	bne.n	8007bea <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	e000      	b.n	8007c24 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007c22:	2302      	movs	r3, #2
  }
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3730      	adds	r7, #48	; 0x30
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	08008331 	.word	0x08008331
 8007c30:	080083cb 	.word	0x080083cb
 8007c34:	08008543 	.word	0x08008543

08007c38 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4613      	mov	r3, r2
 8007c44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b20      	cmp	r3, #32
 8007c50:	d11d      	bne.n	8007c8e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <HAL_UART_Receive_DMA+0x26>
 8007c58:	88fb      	ldrh	r3, [r7, #6]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e016      	b.n	8007c90 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d101      	bne.n	8007c70 <HAL_UART_Receive_DMA+0x38>
 8007c6c:	2302      	movs	r3, #2
 8007c6e:	e00f      	b.n	8007c90 <HAL_UART_Receive_DMA+0x58>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007c7e:	88fb      	ldrh	r3, [r7, #6]
 8007c80:	461a      	mov	r2, r3
 8007c82:	68b9      	ldr	r1, [r7, #8]
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 fca7 	bl	80085d8 <UART_Start_Receive_DMA>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	e000      	b.n	8007c90 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007c8e:	2302      	movs	r3, #2
  }
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b090      	sub	sp, #64	; 0x40
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cae:	2b80      	cmp	r3, #128	; 0x80
 8007cb0:	bf0c      	ite	eq
 8007cb2:	2301      	moveq	r3, #1
 8007cb4:	2300      	movne	r3, #0
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b21      	cmp	r3, #33	; 0x21
 8007cc4:	d128      	bne.n	8007d18 <HAL_UART_DMAStop+0x80>
 8007cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d025      	beq.n	8007d18 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3314      	adds	r3, #20
 8007cd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	623b      	str	r3, [r7, #32]
   return(result);
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ce2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3314      	adds	r3, #20
 8007cea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cec:	633a      	str	r2, [r7, #48]	; 0x30
 8007cee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e5      	bne.n	8007ccc <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d004      	beq.n	8007d12 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7fb fdd1 	bl	80038b4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fcfe 	bl	8008714 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d22:	2b40      	cmp	r3, #64	; 0x40
 8007d24:	bf0c      	ite	eq
 8007d26:	2301      	moveq	r3, #1
 8007d28:	2300      	movne	r3, #0
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b22      	cmp	r3, #34	; 0x22
 8007d38:	d128      	bne.n	8007d8c <HAL_UART_DMAStop+0xf4>
 8007d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d025      	beq.n	8007d8c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3314      	adds	r3, #20
 8007d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	e853 3f00 	ldrex	r3, [r3]
 8007d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d56:	637b      	str	r3, [r7, #52]	; 0x34
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3314      	adds	r3, #20
 8007d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d60:	61fa      	str	r2, [r7, #28]
 8007d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d64:	69b9      	ldr	r1, [r7, #24]
 8007d66:	69fa      	ldr	r2, [r7, #28]
 8007d68:	e841 2300 	strex	r3, r2, [r1]
 8007d6c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1e5      	bne.n	8007d40 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d004      	beq.n	8007d86 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d80:	4618      	mov	r0, r3
 8007d82:	f7fb fd97 	bl	80038b4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fcec 	bl	8008764 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3740      	adds	r7, #64	; 0x40
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
	...

08007d98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b0ba      	sub	sp, #232	; 0xe8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dce:	f003 030f 	and.w	r3, r3, #15
 8007dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d10f      	bne.n	8007dfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de2:	f003 0320 	and.w	r3, r3, #32
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d009      	beq.n	8007dfe <HAL_UART_IRQHandler+0x66>
 8007dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dee:	f003 0320 	and.w	r3, r3, #32
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d003      	beq.n	8007dfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fd93 	bl	8008922 <UART_Receive_IT>
      return;
 8007dfc:	e256      	b.n	80082ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f000 80de 	beq.w	8007fc4 <HAL_UART_IRQHandler+0x22c>
 8007e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e0c:	f003 0301 	and.w	r3, r3, #1
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d106      	bne.n	8007e22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 80d1 	beq.w	8007fc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00b      	beq.n	8007e46 <HAL_UART_IRQHandler+0xae>
 8007e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d005      	beq.n	8007e46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3e:	f043 0201 	orr.w	r2, r3, #1
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e4a:	f003 0304 	and.w	r3, r3, #4
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00b      	beq.n	8007e6a <HAL_UART_IRQHandler+0xd2>
 8007e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d005      	beq.n	8007e6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e62:	f043 0202 	orr.w	r2, r3, #2
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e6e:	f003 0302 	and.w	r3, r3, #2
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00b      	beq.n	8007e8e <HAL_UART_IRQHandler+0xf6>
 8007e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d005      	beq.n	8007e8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e86:	f043 0204 	orr.w	r2, r3, #4
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e92:	f003 0308 	and.w	r3, r3, #8
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d011      	beq.n	8007ebe <HAL_UART_IRQHandler+0x126>
 8007e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e9e:	f003 0320 	and.w	r3, r3, #32
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d105      	bne.n	8007eb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eaa:	f003 0301 	and.w	r3, r3, #1
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d005      	beq.n	8007ebe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	f043 0208 	orr.w	r2, r3, #8
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 81ed 	beq.w	80082a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ecc:	f003 0320 	and.w	r3, r3, #32
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d008      	beq.n	8007ee6 <HAL_UART_IRQHandler+0x14e>
 8007ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed8:	f003 0320 	and.w	r3, r3, #32
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d002      	beq.n	8007ee6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fd1e 	bl	8008922 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	695b      	ldr	r3, [r3, #20]
 8007eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef0:	2b40      	cmp	r3, #64	; 0x40
 8007ef2:	bf0c      	ite	eq
 8007ef4:	2301      	moveq	r3, #1
 8007ef6:	2300      	movne	r3, #0
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	f003 0308 	and.w	r3, r3, #8
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d103      	bne.n	8007f12 <HAL_UART_IRQHandler+0x17a>
 8007f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d04f      	beq.n	8007fb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fc26 	bl	8008764 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f22:	2b40      	cmp	r3, #64	; 0x40
 8007f24:	d141      	bne.n	8007faa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3314      	adds	r3, #20
 8007f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f34:	e853 3f00 	ldrex	r3, [r3]
 8007f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3314      	adds	r3, #20
 8007f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f62:	e841 2300 	strex	r3, r2, [r1]
 8007f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1d9      	bne.n	8007f26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d013      	beq.n	8007fa2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7e:	4a7d      	ldr	r2, [pc, #500]	; (8008174 <HAL_UART_IRQHandler+0x3dc>)
 8007f80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fb fd04 	bl	8003994 <HAL_DMA_Abort_IT>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d016      	beq.n	8007fc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fa0:	e00e      	b.n	8007fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f9ae 	bl	8008304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fa8:	e00a      	b.n	8007fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f9aa 	bl	8008304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fb0:	e006      	b.n	8007fc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f9a6 	bl	8008304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007fbe:	e170      	b.n	80082a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fc0:	bf00      	nop
    return;
 8007fc2:	e16e      	b.n	80082a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	f040 814a 	bne.w	8008262 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd2:	f003 0310 	and.w	r3, r3, #16
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f000 8143 	beq.w	8008262 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fe0:	f003 0310 	and.w	r3, r3, #16
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 813c 	beq.w	8008262 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007fea:	2300      	movs	r3, #0
 8007fec:	60bb      	str	r3, [r7, #8]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	60bb      	str	r3, [r7, #8]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	60bb      	str	r3, [r7, #8]
 8007ffe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800a:	2b40      	cmp	r3, #64	; 0x40
 800800c:	f040 80b4 	bne.w	8008178 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800801c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 8140 	beq.w	80082a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800802a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800802e:	429a      	cmp	r2, r3
 8008030:	f080 8139 	bcs.w	80082a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800803a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008040:	69db      	ldr	r3, [r3, #28]
 8008042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008046:	f000 8088 	beq.w	800815a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	330c      	adds	r3, #12
 8008050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008058:	e853 3f00 	ldrex	r3, [r3]
 800805c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008060:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008068:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	330c      	adds	r3, #12
 8008072:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008076:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800807a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008082:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008086:	e841 2300 	strex	r3, r2, [r1]
 800808a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800808e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1d9      	bne.n	800804a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3314      	adds	r3, #20
 800809c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080a0:	e853 3f00 	ldrex	r3, [r3]
 80080a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80080a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080a8:	f023 0301 	bic.w	r3, r3, #1
 80080ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	3314      	adds	r3, #20
 80080b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80080ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80080be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80080c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80080cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1e1      	bne.n	8008096 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3314      	adds	r3, #20
 80080d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080dc:	e853 3f00 	ldrex	r3, [r3]
 80080e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80080e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3314      	adds	r3, #20
 80080f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80080f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80080f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80080fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80080fe:	e841 2300 	strex	r3, r2, [r1]
 8008102:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1e3      	bne.n	80080d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2220      	movs	r2, #32
 800810e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	330c      	adds	r3, #12
 800811e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008122:	e853 3f00 	ldrex	r3, [r3]
 8008126:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800812a:	f023 0310 	bic.w	r3, r3, #16
 800812e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	330c      	adds	r3, #12
 8008138:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800813c:	65ba      	str	r2, [r7, #88]	; 0x58
 800813e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008140:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008142:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008144:	e841 2300 	strex	r3, r2, [r1]
 8008148:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800814a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e3      	bne.n	8008118 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008154:	4618      	mov	r0, r3
 8008156:	f7fb fbad 	bl	80038b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008162:	b29b      	uxth	r3, r3
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	b29b      	uxth	r3, r3
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f8d4 	bl	8008318 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008170:	e099      	b.n	80082a6 <HAL_UART_IRQHandler+0x50e>
 8008172:	bf00      	nop
 8008174:	0800882b 	.word	0x0800882b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008180:	b29b      	uxth	r3, r3
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800818c:	b29b      	uxth	r3, r3
 800818e:	2b00      	cmp	r3, #0
 8008190:	f000 808b 	beq.w	80082aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008194:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008198:	2b00      	cmp	r3, #0
 800819a:	f000 8086 	beq.w	80082aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	330c      	adds	r3, #12
 80081a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a8:	e853 3f00 	ldrex	r3, [r3]
 80081ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	330c      	adds	r3, #12
 80081be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80081c2:	647a      	str	r2, [r7, #68]	; 0x44
 80081c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081ca:	e841 2300 	strex	r3, r2, [r1]
 80081ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1e3      	bne.n	800819e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3314      	adds	r3, #20
 80081dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	e853 3f00 	ldrex	r3, [r3]
 80081e4:	623b      	str	r3, [r7, #32]
   return(result);
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	f023 0301 	bic.w	r3, r3, #1
 80081ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3314      	adds	r3, #20
 80081f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80081fa:	633a      	str	r2, [r7, #48]	; 0x30
 80081fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008202:	e841 2300 	strex	r3, r2, [r1]
 8008206:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1e3      	bne.n	80081d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2220      	movs	r2, #32
 8008212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	330c      	adds	r3, #12
 8008222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	e853 3f00 	ldrex	r3, [r3]
 800822a:	60fb      	str	r3, [r7, #12]
   return(result);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f023 0310 	bic.w	r3, r3, #16
 8008232:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	330c      	adds	r3, #12
 800823c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008240:	61fa      	str	r2, [r7, #28]
 8008242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008244:	69b9      	ldr	r1, [r7, #24]
 8008246:	69fa      	ldr	r2, [r7, #28]
 8008248:	e841 2300 	strex	r3, r2, [r1]
 800824c:	617b      	str	r3, [r7, #20]
   return(result);
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1e3      	bne.n	800821c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008254:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008258:	4619      	mov	r1, r3
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f85c 	bl	8008318 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008260:	e023      	b.n	80082aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800826a:	2b00      	cmp	r3, #0
 800826c:	d009      	beq.n	8008282 <HAL_UART_IRQHandler+0x4ea>
 800826e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008276:	2b00      	cmp	r3, #0
 8008278:	d003      	beq.n	8008282 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fae9 	bl	8008852 <UART_Transmit_IT>
    return;
 8008280:	e014      	b.n	80082ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00e      	beq.n	80082ac <HAL_UART_IRQHandler+0x514>
 800828e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008296:	2b00      	cmp	r3, #0
 8008298:	d008      	beq.n	80082ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fb29 	bl	80088f2 <UART_EndTransmit_IT>
    return;
 80082a0:	e004      	b.n	80082ac <HAL_UART_IRQHandler+0x514>
    return;
 80082a2:	bf00      	nop
 80082a4:	e002      	b.n	80082ac <HAL_UART_IRQHandler+0x514>
      return;
 80082a6:	bf00      	nop
 80082a8:	e000      	b.n	80082ac <HAL_UART_IRQHandler+0x514>
      return;
 80082aa:	bf00      	nop
  }
}
 80082ac:	37e8      	adds	r7, #232	; 0xe8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop

080082b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b090      	sub	sp, #64	; 0x40
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008348:	2b00      	cmp	r3, #0
 800834a:	d137      	bne.n	80083bc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800834c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834e:	2200      	movs	r2, #0
 8008350:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3314      	adds	r3, #20
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	623b      	str	r3, [r7, #32]
   return(result);
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008368:	63bb      	str	r3, [r7, #56]	; 0x38
 800836a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3314      	adds	r3, #20
 8008370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008372:	633a      	str	r2, [r7, #48]	; 0x30
 8008374:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800837a:	e841 2300 	strex	r3, r2, [r1]
 800837e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e5      	bne.n	8008352 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	330c      	adds	r3, #12
 800838c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	e853 3f00 	ldrex	r3, [r3]
 8008394:	60fb      	str	r3, [r7, #12]
   return(result);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800839c:	637b      	str	r3, [r7, #52]	; 0x34
 800839e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	330c      	adds	r3, #12
 80083a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083a6:	61fa      	str	r2, [r7, #28]
 80083a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083aa:	69b9      	ldr	r1, [r7, #24]
 80083ac:	69fa      	ldr	r2, [r7, #28]
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	617b      	str	r3, [r7, #20]
   return(result);
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e5      	bne.n	8008386 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083ba:	e002      	b.n	80083c2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80083bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80083be:	f7ff ff79 	bl	80082b4 <HAL_UART_TxCpltCallback>
}
 80083c2:	bf00      	nop
 80083c4:	3740      	adds	r7, #64	; 0x40
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b084      	sub	sp, #16
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f7ff ff75 	bl	80082c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083de:	bf00      	nop
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b09c      	sub	sp, #112	; 0x70
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d172      	bne.n	80084e8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008404:	2200      	movs	r2, #0
 8008406:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	330c      	adds	r3, #12
 800840e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008412:	e853 3f00 	ldrex	r3, [r3]
 8008416:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800841a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800841e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	330c      	adds	r3, #12
 8008426:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008428:	65ba      	str	r2, [r7, #88]	; 0x58
 800842a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800842e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008430:	e841 2300 	strex	r3, r2, [r1]
 8008434:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1e5      	bne.n	8008408 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800843c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3314      	adds	r3, #20
 8008442:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008446:	e853 3f00 	ldrex	r3, [r3]
 800844a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800844c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844e:	f023 0301 	bic.w	r3, r3, #1
 8008452:	667b      	str	r3, [r7, #100]	; 0x64
 8008454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	3314      	adds	r3, #20
 800845a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800845c:	647a      	str	r2, [r7, #68]	; 0x44
 800845e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008460:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008462:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008464:	e841 2300 	strex	r3, r2, [r1]
 8008468:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800846a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1e5      	bne.n	800843c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3314      	adds	r3, #20
 8008476:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	e853 3f00 	ldrex	r3, [r3]
 800847e:	623b      	str	r3, [r7, #32]
   return(result);
 8008480:	6a3b      	ldr	r3, [r7, #32]
 8008482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008486:	663b      	str	r3, [r7, #96]	; 0x60
 8008488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3314      	adds	r3, #20
 800848e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008490:	633a      	str	r2, [r7, #48]	; 0x30
 8008492:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008494:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008498:	e841 2300 	strex	r3, r2, [r1]
 800849c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800849e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e5      	bne.n	8008470 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80084a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084a6:	2220      	movs	r2, #32
 80084a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d119      	bne.n	80084e8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	330c      	adds	r3, #12
 80084ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f023 0310 	bic.w	r3, r3, #16
 80084ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	330c      	adds	r3, #12
 80084d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084d4:	61fa      	str	r2, [r7, #28]
 80084d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	69b9      	ldr	r1, [r7, #24]
 80084da:	69fa      	ldr	r2, [r7, #28]
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	617b      	str	r3, [r7, #20]
   return(result);
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e5      	bne.n	80084b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d106      	bne.n	80084fe <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084f4:	4619      	mov	r1, r3
 80084f6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80084f8:	f7ff ff0e 	bl	8008318 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084fc:	e002      	b.n	8008504 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80084fe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008500:	f7ff feec 	bl	80082dc <HAL_UART_RxCpltCallback>
}
 8008504:	bf00      	nop
 8008506:	3770      	adds	r7, #112	; 0x70
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800851e:	2b01      	cmp	r3, #1
 8008520:	d108      	bne.n	8008534 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008526:	085b      	lsrs	r3, r3, #1
 8008528:	b29b      	uxth	r3, r3
 800852a:	4619      	mov	r1, r3
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f7ff fef3 	bl	8008318 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008532:	e002      	b.n	800853a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f7ff fedb 	bl	80082f0 <HAL_UART_RxHalfCpltCallback>
}
 800853a:	bf00      	nop
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b084      	sub	sp, #16
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800854a:	2300      	movs	r3, #0
 800854c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008552:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800855e:	2b80      	cmp	r3, #128	; 0x80
 8008560:	bf0c      	ite	eq
 8008562:	2301      	moveq	r3, #1
 8008564:	2300      	movne	r3, #0
 8008566:	b2db      	uxtb	r3, r3
 8008568:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b21      	cmp	r3, #33	; 0x21
 8008574:	d108      	bne.n	8008588 <UART_DMAError+0x46>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d005      	beq.n	8008588 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	2200      	movs	r2, #0
 8008580:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008582:	68b8      	ldr	r0, [r7, #8]
 8008584:	f000 f8c6 	bl	8008714 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008592:	2b40      	cmp	r3, #64	; 0x40
 8008594:	bf0c      	ite	eq
 8008596:	2301      	moveq	r3, #1
 8008598:	2300      	movne	r3, #0
 800859a:	b2db      	uxtb	r3, r3
 800859c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b22      	cmp	r3, #34	; 0x22
 80085a8:	d108      	bne.n	80085bc <UART_DMAError+0x7a>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d005      	beq.n	80085bc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	2200      	movs	r2, #0
 80085b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80085b6:	68b8      	ldr	r0, [r7, #8]
 80085b8:	f000 f8d4 	bl	8008764 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c0:	f043 0210 	orr.w	r2, r3, #16
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085c8:	68b8      	ldr	r0, [r7, #8]
 80085ca:	f7ff fe9b 	bl	8008304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085ce:	bf00      	nop
 80085d0:	3710      	adds	r7, #16
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
	...

080085d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b098      	sub	sp, #96	; 0x60
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	4613      	mov	r3, r2
 80085e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	88fa      	ldrh	r2, [r7, #6]
 80085f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2222      	movs	r2, #34	; 0x22
 80085fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008604:	4a40      	ldr	r2, [pc, #256]	; (8008708 <UART_Start_Receive_DMA+0x130>)
 8008606:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860c:	4a3f      	ldr	r2, [pc, #252]	; (800870c <UART_Start_Receive_DMA+0x134>)
 800860e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008614:	4a3e      	ldr	r2, [pc, #248]	; (8008710 <UART_Start_Receive_DMA+0x138>)
 8008616:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861c:	2200      	movs	r2, #0
 800861e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008620:	f107 0308 	add.w	r3, r7, #8
 8008624:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3304      	adds	r3, #4
 8008630:	4619      	mov	r1, r3
 8008632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	88fb      	ldrh	r3, [r7, #6]
 8008638:	f7fb f8e4 	bl	8003804 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800863c:	2300      	movs	r3, #0
 800863e:	613b      	str	r3, [r7, #16]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	613b      	str	r3, [r7, #16]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	613b      	str	r3, [r7, #16]
 8008650:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d019      	beq.n	8008696 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	330c      	adds	r3, #12
 8008668:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800866c:	e853 3f00 	ldrex	r3, [r3]
 8008670:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008678:	65bb      	str	r3, [r7, #88]	; 0x58
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	330c      	adds	r3, #12
 8008680:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008682:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008684:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008686:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008688:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800868a:	e841 2300 	strex	r3, r2, [r1]
 800868e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1e5      	bne.n	8008662 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	3314      	adds	r3, #20
 800869c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a0:	e853 3f00 	ldrex	r3, [r3]
 80086a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a8:	f043 0301 	orr.w	r3, r3, #1
 80086ac:	657b      	str	r3, [r7, #84]	; 0x54
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	3314      	adds	r3, #20
 80086b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80086b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80086b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80086bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086be:	e841 2300 	strex	r3, r2, [r1]
 80086c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d1e5      	bne.n	8008696 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3314      	adds	r3, #20
 80086d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	e853 3f00 	ldrex	r3, [r3]
 80086d8:	617b      	str	r3, [r7, #20]
   return(result);
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086e0:	653b      	str	r3, [r7, #80]	; 0x50
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	3314      	adds	r3, #20
 80086e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086ea:	627a      	str	r2, [r7, #36]	; 0x24
 80086ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	6a39      	ldr	r1, [r7, #32]
 80086f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f2:	e841 2300 	strex	r3, r2, [r1]
 80086f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1e5      	bne.n	80086ca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3760      	adds	r7, #96	; 0x60
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	080083e7 	.word	0x080083e7
 800870c:	0800850d 	.word	0x0800850d
 8008710:	08008543 	.word	0x08008543

08008714 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008714:	b480      	push	{r7}
 8008716:	b089      	sub	sp, #36	; 0x24
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	330c      	adds	r3, #12
 8008722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	e853 3f00 	ldrex	r3, [r3]
 800872a:	60bb      	str	r3, [r7, #8]
   return(result);
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008732:	61fb      	str	r3, [r7, #28]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	330c      	adds	r3, #12
 800873a:	69fa      	ldr	r2, [r7, #28]
 800873c:	61ba      	str	r2, [r7, #24]
 800873e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008740:	6979      	ldr	r1, [r7, #20]
 8008742:	69ba      	ldr	r2, [r7, #24]
 8008744:	e841 2300 	strex	r3, r2, [r1]
 8008748:	613b      	str	r3, [r7, #16]
   return(result);
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e5      	bne.n	800871c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2220      	movs	r2, #32
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008758:	bf00      	nop
 800875a:	3724      	adds	r7, #36	; 0x24
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008764:	b480      	push	{r7}
 8008766:	b095      	sub	sp, #84	; 0x54
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	330c      	adds	r3, #12
 8008772:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008776:	e853 3f00 	ldrex	r3, [r3]
 800877a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800877c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008782:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	330c      	adds	r3, #12
 800878a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800878c:	643a      	str	r2, [r7, #64]	; 0x40
 800878e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008790:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008792:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008794:	e841 2300 	strex	r3, r2, [r1]
 8008798:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800879a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1e5      	bne.n	800876c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3314      	adds	r3, #20
 80087a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a8:	6a3b      	ldr	r3, [r7, #32]
 80087aa:	e853 3f00 	ldrex	r3, [r3]
 80087ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	f023 0301 	bic.w	r3, r3, #1
 80087b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3314      	adds	r3, #20
 80087be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087c8:	e841 2300 	strex	r3, r2, [r1]
 80087cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e5      	bne.n	80087a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d119      	bne.n	8008810 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	330c      	adds	r3, #12
 80087e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	e853 3f00 	ldrex	r3, [r3]
 80087ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	f023 0310 	bic.w	r3, r3, #16
 80087f2:	647b      	str	r3, [r7, #68]	; 0x44
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	330c      	adds	r3, #12
 80087fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087fc:	61ba      	str	r2, [r7, #24]
 80087fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008800:	6979      	ldr	r1, [r7, #20]
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	e841 2300 	strex	r3, r2, [r1]
 8008808:	613b      	str	r3, [r7, #16]
   return(result);
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e5      	bne.n	80087dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2220      	movs	r2, #32
 8008814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800881e:	bf00      	nop
 8008820:	3754      	adds	r7, #84	; 0x54
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b084      	sub	sp, #16
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008836:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f7ff fd5d 	bl	8008304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800884a:	bf00      	nop
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008852:	b480      	push	{r7}
 8008854:	b085      	sub	sp, #20
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008860:	b2db      	uxtb	r3, r3
 8008862:	2b21      	cmp	r3, #33	; 0x21
 8008864:	d13e      	bne.n	80088e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800886e:	d114      	bne.n	800889a <UART_Transmit_IT+0x48>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d110      	bne.n	800889a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a1b      	ldr	r3, [r3, #32]
 800887c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	881b      	ldrh	r3, [r3, #0]
 8008882:	461a      	mov	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800888c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	1c9a      	adds	r2, r3, #2
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	621a      	str	r2, [r3, #32]
 8008898:	e008      	b.n	80088ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	1c59      	adds	r1, r3, #1
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	6211      	str	r1, [r2, #32]
 80088a4:	781a      	ldrb	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	3b01      	subs	r3, #1
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	4619      	mov	r1, r3
 80088ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10f      	bne.n	80088e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68da      	ldr	r2, [r3, #12]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68da      	ldr	r2, [r3, #12]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80088e0:	2300      	movs	r3, #0
 80088e2:	e000      	b.n	80088e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80088e4:	2302      	movs	r3, #2
  }
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3714      	adds	r7, #20
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b082      	sub	sp, #8
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68da      	ldr	r2, [r3, #12]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008908:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2220      	movs	r2, #32
 800890e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7ff fcce 	bl	80082b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b08c      	sub	sp, #48	; 0x30
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b22      	cmp	r3, #34	; 0x22
 8008934:	f040 80ab 	bne.w	8008a8e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008940:	d117      	bne.n	8008972 <UART_Receive_IT+0x50>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d113      	bne.n	8008972 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800894a:	2300      	movs	r3, #0
 800894c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008952:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	b29b      	uxth	r3, r3
 800895c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008960:	b29a      	uxth	r2, r3
 8008962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008964:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896a:	1c9a      	adds	r2, r3, #2
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	629a      	str	r2, [r3, #40]	; 0x28
 8008970:	e026      	b.n	80089c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008976:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008978:	2300      	movs	r3, #0
 800897a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008984:	d007      	beq.n	8008996 <UART_Receive_IT+0x74>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10a      	bne.n	80089a4 <UART_Receive_IT+0x82>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d106      	bne.n	80089a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	b2da      	uxtb	r2, r3
 800899e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a0:	701a      	strb	r2, [r3, #0]
 80089a2:	e008      	b.n	80089b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b0:	b2da      	uxtb	r2, r3
 80089b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ba:	1c5a      	adds	r2, r3, #1
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	3b01      	subs	r3, #1
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	4619      	mov	r1, r3
 80089ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d15a      	bne.n	8008a8a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68da      	ldr	r2, [r3, #12]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f022 0220 	bic.w	r2, r2, #32
 80089e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68da      	ldr	r2, [r3, #12]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	695a      	ldr	r2, [r3, #20]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f022 0201 	bic.w	r2, r2, #1
 8008a02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2220      	movs	r2, #32
 8008a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d135      	bne.n	8008a80 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	330c      	adds	r3, #12
 8008a20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	e853 3f00 	ldrex	r3, [r3]
 8008a28:	613b      	str	r3, [r7, #16]
   return(result);
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	f023 0310 	bic.w	r3, r3, #16
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	330c      	adds	r3, #12
 8008a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a3a:	623a      	str	r2, [r7, #32]
 8008a3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3e:	69f9      	ldr	r1, [r7, #28]
 8008a40:	6a3a      	ldr	r2, [r7, #32]
 8008a42:	e841 2300 	strex	r3, r2, [r1]
 8008a46:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1e5      	bne.n	8008a1a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0310 	and.w	r3, r3, #16
 8008a58:	2b10      	cmp	r3, #16
 8008a5a:	d10a      	bne.n	8008a72 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	60fb      	str	r3, [r7, #12]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	60fb      	str	r3, [r7, #12]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f7ff fc4d 	bl	8008318 <HAL_UARTEx_RxEventCallback>
 8008a7e:	e002      	b.n	8008a86 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f7ff fc2b 	bl	80082dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	e002      	b.n	8008a90 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	e000      	b.n	8008a90 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a8e:	2302      	movs	r3, #2
  }
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3730      	adds	r7, #48	; 0x30
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a9c:	b0c0      	sub	sp, #256	; 0x100
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab4:	68d9      	ldr	r1, [r3, #12]
 8008ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	ea40 0301 	orr.w	r3, r0, r1
 8008ac0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac6:	689a      	ldr	r2, [r3, #8]
 8008ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	431a      	orrs	r2, r3
 8008ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008adc:	69db      	ldr	r3, [r3, #28]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008af0:	f021 010c 	bic.w	r1, r1, #12
 8008af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008afe:	430b      	orrs	r3, r1
 8008b00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b12:	6999      	ldr	r1, [r3, #24]
 8008b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	ea40 0301 	orr.w	r3, r0, r1
 8008b1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	4b8f      	ldr	r3, [pc, #572]	; (8008d64 <UART_SetConfig+0x2cc>)
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d005      	beq.n	8008b38 <UART_SetConfig+0xa0>
 8008b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	4b8d      	ldr	r3, [pc, #564]	; (8008d68 <UART_SetConfig+0x2d0>)
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d104      	bne.n	8008b42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b38:	f7fd fbb4 	bl	80062a4 <HAL_RCC_GetPCLK2Freq>
 8008b3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008b40:	e003      	b.n	8008b4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b42:	f7fd fb9b 	bl	800627c <HAL_RCC_GetPCLK1Freq>
 8008b46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b54:	f040 810c 	bne.w	8008d70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008b66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b6a:	4622      	mov	r2, r4
 8008b6c:	462b      	mov	r3, r5
 8008b6e:	1891      	adds	r1, r2, r2
 8008b70:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b72:	415b      	adcs	r3, r3
 8008b74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	eb12 0801 	adds.w	r8, r2, r1
 8008b80:	4629      	mov	r1, r5
 8008b82:	eb43 0901 	adc.w	r9, r3, r1
 8008b86:	f04f 0200 	mov.w	r2, #0
 8008b8a:	f04f 0300 	mov.w	r3, #0
 8008b8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b9a:	4690      	mov	r8, r2
 8008b9c:	4699      	mov	r9, r3
 8008b9e:	4623      	mov	r3, r4
 8008ba0:	eb18 0303 	adds.w	r3, r8, r3
 8008ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ba8:	462b      	mov	r3, r5
 8008baa:	eb49 0303 	adc.w	r3, r9, r3
 8008bae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008bc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	18db      	adds	r3, r3, r3
 8008bca:	653b      	str	r3, [r7, #80]	; 0x50
 8008bcc:	4613      	mov	r3, r2
 8008bce:	eb42 0303 	adc.w	r3, r2, r3
 8008bd2:	657b      	str	r3, [r7, #84]	; 0x54
 8008bd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008bd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008bdc:	f7f7 fdbc 	bl	8000758 <__aeabi_uldivmod>
 8008be0:	4602      	mov	r2, r0
 8008be2:	460b      	mov	r3, r1
 8008be4:	4b61      	ldr	r3, [pc, #388]	; (8008d6c <UART_SetConfig+0x2d4>)
 8008be6:	fba3 2302 	umull	r2, r3, r3, r2
 8008bea:	095b      	lsrs	r3, r3, #5
 8008bec:	011c      	lsls	r4, r3, #4
 8008bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008bf8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008bfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c00:	4642      	mov	r2, r8
 8008c02:	464b      	mov	r3, r9
 8008c04:	1891      	adds	r1, r2, r2
 8008c06:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c08:	415b      	adcs	r3, r3
 8008c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c10:	4641      	mov	r1, r8
 8008c12:	eb12 0a01 	adds.w	sl, r2, r1
 8008c16:	4649      	mov	r1, r9
 8008c18:	eb43 0b01 	adc.w	fp, r3, r1
 8008c1c:	f04f 0200 	mov.w	r2, #0
 8008c20:	f04f 0300 	mov.w	r3, #0
 8008c24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c30:	4692      	mov	sl, r2
 8008c32:	469b      	mov	fp, r3
 8008c34:	4643      	mov	r3, r8
 8008c36:	eb1a 0303 	adds.w	r3, sl, r3
 8008c3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c3e:	464b      	mov	r3, r9
 8008c40:	eb4b 0303 	adc.w	r3, fp, r3
 8008c44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008c58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	18db      	adds	r3, r3, r3
 8008c60:	643b      	str	r3, [r7, #64]	; 0x40
 8008c62:	4613      	mov	r3, r2
 8008c64:	eb42 0303 	adc.w	r3, r2, r3
 8008c68:	647b      	str	r3, [r7, #68]	; 0x44
 8008c6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c72:	f7f7 fd71 	bl	8000758 <__aeabi_uldivmod>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4611      	mov	r1, r2
 8008c7c:	4b3b      	ldr	r3, [pc, #236]	; (8008d6c <UART_SetConfig+0x2d4>)
 8008c7e:	fba3 2301 	umull	r2, r3, r3, r1
 8008c82:	095b      	lsrs	r3, r3, #5
 8008c84:	2264      	movs	r2, #100	; 0x64
 8008c86:	fb02 f303 	mul.w	r3, r2, r3
 8008c8a:	1acb      	subs	r3, r1, r3
 8008c8c:	00db      	lsls	r3, r3, #3
 8008c8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008c92:	4b36      	ldr	r3, [pc, #216]	; (8008d6c <UART_SetConfig+0x2d4>)
 8008c94:	fba3 2302 	umull	r2, r3, r3, r2
 8008c98:	095b      	lsrs	r3, r3, #5
 8008c9a:	005b      	lsls	r3, r3, #1
 8008c9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ca0:	441c      	add	r4, r3
 8008ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008cb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008cb4:	4642      	mov	r2, r8
 8008cb6:	464b      	mov	r3, r9
 8008cb8:	1891      	adds	r1, r2, r2
 8008cba:	63b9      	str	r1, [r7, #56]	; 0x38
 8008cbc:	415b      	adcs	r3, r3
 8008cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008cc4:	4641      	mov	r1, r8
 8008cc6:	1851      	adds	r1, r2, r1
 8008cc8:	6339      	str	r1, [r7, #48]	; 0x30
 8008cca:	4649      	mov	r1, r9
 8008ccc:	414b      	adcs	r3, r1
 8008cce:	637b      	str	r3, [r7, #52]	; 0x34
 8008cd0:	f04f 0200 	mov.w	r2, #0
 8008cd4:	f04f 0300 	mov.w	r3, #0
 8008cd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008cdc:	4659      	mov	r1, fp
 8008cde:	00cb      	lsls	r3, r1, #3
 8008ce0:	4651      	mov	r1, sl
 8008ce2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ce6:	4651      	mov	r1, sl
 8008ce8:	00ca      	lsls	r2, r1, #3
 8008cea:	4610      	mov	r0, r2
 8008cec:	4619      	mov	r1, r3
 8008cee:	4603      	mov	r3, r0
 8008cf0:	4642      	mov	r2, r8
 8008cf2:	189b      	adds	r3, r3, r2
 8008cf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008cf8:	464b      	mov	r3, r9
 8008cfa:	460a      	mov	r2, r1
 8008cfc:	eb42 0303 	adc.w	r3, r2, r3
 8008d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d18:	460b      	mov	r3, r1
 8008d1a:	18db      	adds	r3, r3, r3
 8008d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d1e:	4613      	mov	r3, r2
 8008d20:	eb42 0303 	adc.w	r3, r2, r3
 8008d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d2e:	f7f7 fd13 	bl	8000758 <__aeabi_uldivmod>
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	4b0d      	ldr	r3, [pc, #52]	; (8008d6c <UART_SetConfig+0x2d4>)
 8008d38:	fba3 1302 	umull	r1, r3, r3, r2
 8008d3c:	095b      	lsrs	r3, r3, #5
 8008d3e:	2164      	movs	r1, #100	; 0x64
 8008d40:	fb01 f303 	mul.w	r3, r1, r3
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	00db      	lsls	r3, r3, #3
 8008d48:	3332      	adds	r3, #50	; 0x32
 8008d4a:	4a08      	ldr	r2, [pc, #32]	; (8008d6c <UART_SetConfig+0x2d4>)
 8008d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d50:	095b      	lsrs	r3, r3, #5
 8008d52:	f003 0207 	and.w	r2, r3, #7
 8008d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4422      	add	r2, r4
 8008d5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d60:	e105      	b.n	8008f6e <UART_SetConfig+0x4d6>
 8008d62:	bf00      	nop
 8008d64:	40011000 	.word	0x40011000
 8008d68:	40011400 	.word	0x40011400
 8008d6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d74:	2200      	movs	r2, #0
 8008d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d82:	4642      	mov	r2, r8
 8008d84:	464b      	mov	r3, r9
 8008d86:	1891      	adds	r1, r2, r2
 8008d88:	6239      	str	r1, [r7, #32]
 8008d8a:	415b      	adcs	r3, r3
 8008d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d92:	4641      	mov	r1, r8
 8008d94:	1854      	adds	r4, r2, r1
 8008d96:	4649      	mov	r1, r9
 8008d98:	eb43 0501 	adc.w	r5, r3, r1
 8008d9c:	f04f 0200 	mov.w	r2, #0
 8008da0:	f04f 0300 	mov.w	r3, #0
 8008da4:	00eb      	lsls	r3, r5, #3
 8008da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008daa:	00e2      	lsls	r2, r4, #3
 8008dac:	4614      	mov	r4, r2
 8008dae:	461d      	mov	r5, r3
 8008db0:	4643      	mov	r3, r8
 8008db2:	18e3      	adds	r3, r4, r3
 8008db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008db8:	464b      	mov	r3, r9
 8008dba:	eb45 0303 	adc.w	r3, r5, r3
 8008dbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008dd2:	f04f 0200 	mov.w	r2, #0
 8008dd6:	f04f 0300 	mov.w	r3, #0
 8008dda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008dde:	4629      	mov	r1, r5
 8008de0:	008b      	lsls	r3, r1, #2
 8008de2:	4621      	mov	r1, r4
 8008de4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008de8:	4621      	mov	r1, r4
 8008dea:	008a      	lsls	r2, r1, #2
 8008dec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008df0:	f7f7 fcb2 	bl	8000758 <__aeabi_uldivmod>
 8008df4:	4602      	mov	r2, r0
 8008df6:	460b      	mov	r3, r1
 8008df8:	4b60      	ldr	r3, [pc, #384]	; (8008f7c <UART_SetConfig+0x4e4>)
 8008dfa:	fba3 2302 	umull	r2, r3, r3, r2
 8008dfe:	095b      	lsrs	r3, r3, #5
 8008e00:	011c      	lsls	r4, r3, #4
 8008e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e14:	4642      	mov	r2, r8
 8008e16:	464b      	mov	r3, r9
 8008e18:	1891      	adds	r1, r2, r2
 8008e1a:	61b9      	str	r1, [r7, #24]
 8008e1c:	415b      	adcs	r3, r3
 8008e1e:	61fb      	str	r3, [r7, #28]
 8008e20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e24:	4641      	mov	r1, r8
 8008e26:	1851      	adds	r1, r2, r1
 8008e28:	6139      	str	r1, [r7, #16]
 8008e2a:	4649      	mov	r1, r9
 8008e2c:	414b      	adcs	r3, r1
 8008e2e:	617b      	str	r3, [r7, #20]
 8008e30:	f04f 0200 	mov.w	r2, #0
 8008e34:	f04f 0300 	mov.w	r3, #0
 8008e38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e3c:	4659      	mov	r1, fp
 8008e3e:	00cb      	lsls	r3, r1, #3
 8008e40:	4651      	mov	r1, sl
 8008e42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e46:	4651      	mov	r1, sl
 8008e48:	00ca      	lsls	r2, r1, #3
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	4603      	mov	r3, r0
 8008e50:	4642      	mov	r2, r8
 8008e52:	189b      	adds	r3, r3, r2
 8008e54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e58:	464b      	mov	r3, r9
 8008e5a:	460a      	mov	r2, r1
 8008e5c:	eb42 0303 	adc.w	r3, r2, r3
 8008e60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008e70:	f04f 0200 	mov.w	r2, #0
 8008e74:	f04f 0300 	mov.w	r3, #0
 8008e78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e7c:	4649      	mov	r1, r9
 8008e7e:	008b      	lsls	r3, r1, #2
 8008e80:	4641      	mov	r1, r8
 8008e82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e86:	4641      	mov	r1, r8
 8008e88:	008a      	lsls	r2, r1, #2
 8008e8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e8e:	f7f7 fc63 	bl	8000758 <__aeabi_uldivmod>
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	4b39      	ldr	r3, [pc, #228]	; (8008f7c <UART_SetConfig+0x4e4>)
 8008e98:	fba3 1302 	umull	r1, r3, r3, r2
 8008e9c:	095b      	lsrs	r3, r3, #5
 8008e9e:	2164      	movs	r1, #100	; 0x64
 8008ea0:	fb01 f303 	mul.w	r3, r1, r3
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	011b      	lsls	r3, r3, #4
 8008ea8:	3332      	adds	r3, #50	; 0x32
 8008eaa:	4a34      	ldr	r2, [pc, #208]	; (8008f7c <UART_SetConfig+0x4e4>)
 8008eac:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb0:	095b      	lsrs	r3, r3, #5
 8008eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008eb6:	441c      	add	r4, r3
 8008eb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	673b      	str	r3, [r7, #112]	; 0x70
 8008ec0:	677a      	str	r2, [r7, #116]	; 0x74
 8008ec2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008ec6:	4642      	mov	r2, r8
 8008ec8:	464b      	mov	r3, r9
 8008eca:	1891      	adds	r1, r2, r2
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	415b      	adcs	r3, r3
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ed6:	4641      	mov	r1, r8
 8008ed8:	1851      	adds	r1, r2, r1
 8008eda:	6039      	str	r1, [r7, #0]
 8008edc:	4649      	mov	r1, r9
 8008ede:	414b      	adcs	r3, r1
 8008ee0:	607b      	str	r3, [r7, #4]
 8008ee2:	f04f 0200 	mov.w	r2, #0
 8008ee6:	f04f 0300 	mov.w	r3, #0
 8008eea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008eee:	4659      	mov	r1, fp
 8008ef0:	00cb      	lsls	r3, r1, #3
 8008ef2:	4651      	mov	r1, sl
 8008ef4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ef8:	4651      	mov	r1, sl
 8008efa:	00ca      	lsls	r2, r1, #3
 8008efc:	4610      	mov	r0, r2
 8008efe:	4619      	mov	r1, r3
 8008f00:	4603      	mov	r3, r0
 8008f02:	4642      	mov	r2, r8
 8008f04:	189b      	adds	r3, r3, r2
 8008f06:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f08:	464b      	mov	r3, r9
 8008f0a:	460a      	mov	r2, r1
 8008f0c:	eb42 0303 	adc.w	r3, r2, r3
 8008f10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	663b      	str	r3, [r7, #96]	; 0x60
 8008f1c:	667a      	str	r2, [r7, #100]	; 0x64
 8008f1e:	f04f 0200 	mov.w	r2, #0
 8008f22:	f04f 0300 	mov.w	r3, #0
 8008f26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f2a:	4649      	mov	r1, r9
 8008f2c:	008b      	lsls	r3, r1, #2
 8008f2e:	4641      	mov	r1, r8
 8008f30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f34:	4641      	mov	r1, r8
 8008f36:	008a      	lsls	r2, r1, #2
 8008f38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008f3c:	f7f7 fc0c 	bl	8000758 <__aeabi_uldivmod>
 8008f40:	4602      	mov	r2, r0
 8008f42:	460b      	mov	r3, r1
 8008f44:	4b0d      	ldr	r3, [pc, #52]	; (8008f7c <UART_SetConfig+0x4e4>)
 8008f46:	fba3 1302 	umull	r1, r3, r3, r2
 8008f4a:	095b      	lsrs	r3, r3, #5
 8008f4c:	2164      	movs	r1, #100	; 0x64
 8008f4e:	fb01 f303 	mul.w	r3, r1, r3
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	011b      	lsls	r3, r3, #4
 8008f56:	3332      	adds	r3, #50	; 0x32
 8008f58:	4a08      	ldr	r2, [pc, #32]	; (8008f7c <UART_SetConfig+0x4e4>)
 8008f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f5e:	095b      	lsrs	r3, r3, #5
 8008f60:	f003 020f 	and.w	r2, r3, #15
 8008f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4422      	add	r2, r4
 8008f6c:	609a      	str	r2, [r3, #8]
}
 8008f6e:	bf00      	nop
 8008f70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f74:	46bd      	mov	sp, r7
 8008f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f7a:	bf00      	nop
 8008f7c:	51eb851f 	.word	0x51eb851f

08008f80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f80:	b084      	sub	sp, #16
 8008f82:	b580      	push	{r7, lr}
 8008f84:	b084      	sub	sp, #16
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	f107 001c 	add.w	r0, r7, #28
 8008f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d122      	bne.n	8008fde <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d105      	bne.n	8008fd2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f001 fbee 	bl	800a7b4 <USB_CoreReset>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	73fb      	strb	r3, [r7, #15]
 8008fdc:	e01a      	b.n	8009014 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f001 fbe2 	bl	800a7b4 <USB_CoreReset>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d106      	bne.n	8009008 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	639a      	str	r2, [r3, #56]	; 0x38
 8009006:	e005      	b.n	8009014 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009016:	2b01      	cmp	r3, #1
 8009018:	d10b      	bne.n	8009032 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	f043 0206 	orr.w	r2, r3, #6
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f043 0220 	orr.w	r2, r3, #32
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009032:	7bfb      	ldrb	r3, [r7, #15]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800903e:	b004      	add	sp, #16
 8009040:	4770      	bx	lr
	...

08009044 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009044:	b480      	push	{r7}
 8009046:	b087      	sub	sp, #28
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	4613      	mov	r3, r2
 8009050:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009052:	79fb      	ldrb	r3, [r7, #7]
 8009054:	2b02      	cmp	r3, #2
 8009056:	d165      	bne.n	8009124 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	4a41      	ldr	r2, [pc, #260]	; (8009160 <USB_SetTurnaroundTime+0x11c>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d906      	bls.n	800906e <USB_SetTurnaroundTime+0x2a>
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	4a40      	ldr	r2, [pc, #256]	; (8009164 <USB_SetTurnaroundTime+0x120>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d202      	bcs.n	800906e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009068:	230f      	movs	r3, #15
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	e062      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	4a3c      	ldr	r2, [pc, #240]	; (8009164 <USB_SetTurnaroundTime+0x120>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d306      	bcc.n	8009084 <USB_SetTurnaroundTime+0x40>
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	4a3b      	ldr	r2, [pc, #236]	; (8009168 <USB_SetTurnaroundTime+0x124>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d202      	bcs.n	8009084 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800907e:	230e      	movs	r3, #14
 8009080:	617b      	str	r3, [r7, #20]
 8009082:	e057      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	4a38      	ldr	r2, [pc, #224]	; (8009168 <USB_SetTurnaroundTime+0x124>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d306      	bcc.n	800909a <USB_SetTurnaroundTime+0x56>
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	4a37      	ldr	r2, [pc, #220]	; (800916c <USB_SetTurnaroundTime+0x128>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d202      	bcs.n	800909a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009094:	230d      	movs	r3, #13
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	e04c      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	4a33      	ldr	r2, [pc, #204]	; (800916c <USB_SetTurnaroundTime+0x128>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d306      	bcc.n	80090b0 <USB_SetTurnaroundTime+0x6c>
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	4a32      	ldr	r2, [pc, #200]	; (8009170 <USB_SetTurnaroundTime+0x12c>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d802      	bhi.n	80090b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80090aa:	230c      	movs	r3, #12
 80090ac:	617b      	str	r3, [r7, #20]
 80090ae:	e041      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	4a2f      	ldr	r2, [pc, #188]	; (8009170 <USB_SetTurnaroundTime+0x12c>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d906      	bls.n	80090c6 <USB_SetTurnaroundTime+0x82>
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	4a2e      	ldr	r2, [pc, #184]	; (8009174 <USB_SetTurnaroundTime+0x130>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d802      	bhi.n	80090c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80090c0:	230b      	movs	r3, #11
 80090c2:	617b      	str	r3, [r7, #20]
 80090c4:	e036      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	4a2a      	ldr	r2, [pc, #168]	; (8009174 <USB_SetTurnaroundTime+0x130>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d906      	bls.n	80090dc <USB_SetTurnaroundTime+0x98>
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	4a29      	ldr	r2, [pc, #164]	; (8009178 <USB_SetTurnaroundTime+0x134>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d802      	bhi.n	80090dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80090d6:	230a      	movs	r3, #10
 80090d8:	617b      	str	r3, [r7, #20]
 80090da:	e02b      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	4a26      	ldr	r2, [pc, #152]	; (8009178 <USB_SetTurnaroundTime+0x134>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d906      	bls.n	80090f2 <USB_SetTurnaroundTime+0xae>
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	4a25      	ldr	r2, [pc, #148]	; (800917c <USB_SetTurnaroundTime+0x138>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d202      	bcs.n	80090f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80090ec:	2309      	movs	r3, #9
 80090ee:	617b      	str	r3, [r7, #20]
 80090f0:	e020      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	4a21      	ldr	r2, [pc, #132]	; (800917c <USB_SetTurnaroundTime+0x138>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d306      	bcc.n	8009108 <USB_SetTurnaroundTime+0xc4>
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	4a20      	ldr	r2, [pc, #128]	; (8009180 <USB_SetTurnaroundTime+0x13c>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d802      	bhi.n	8009108 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009102:	2308      	movs	r3, #8
 8009104:	617b      	str	r3, [r7, #20]
 8009106:	e015      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	4a1d      	ldr	r2, [pc, #116]	; (8009180 <USB_SetTurnaroundTime+0x13c>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d906      	bls.n	800911e <USB_SetTurnaroundTime+0xda>
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	4a1c      	ldr	r2, [pc, #112]	; (8009184 <USB_SetTurnaroundTime+0x140>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d202      	bcs.n	800911e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009118:	2307      	movs	r3, #7
 800911a:	617b      	str	r3, [r7, #20]
 800911c:	e00a      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800911e:	2306      	movs	r3, #6
 8009120:	617b      	str	r3, [r7, #20]
 8009122:	e007      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d102      	bne.n	8009130 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800912a:	2309      	movs	r3, #9
 800912c:	617b      	str	r3, [r7, #20]
 800912e:	e001      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009130:	2309      	movs	r3, #9
 8009132:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	68da      	ldr	r2, [r3, #12]
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	029b      	lsls	r3, r3, #10
 8009148:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800914c:	431a      	orrs	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	371c      	adds	r7, #28
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	00d8acbf 	.word	0x00d8acbf
 8009164:	00e4e1c0 	.word	0x00e4e1c0
 8009168:	00f42400 	.word	0x00f42400
 800916c:	01067380 	.word	0x01067380
 8009170:	011a499f 	.word	0x011a499f
 8009174:	01312cff 	.word	0x01312cff
 8009178:	014ca43f 	.word	0x014ca43f
 800917c:	016e3600 	.word	0x016e3600
 8009180:	01a6ab1f 	.word	0x01a6ab1f
 8009184:	01e84800 	.word	0x01e84800

08009188 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	f043 0201 	orr.w	r2, r3, #1
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b083      	sub	sp, #12
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	f023 0201 	bic.w	r2, r3, #1
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	460b      	mov	r3, r1
 80091d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091e8:	78fb      	ldrb	r3, [r7, #3]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d115      	bne.n	800921a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80091fa:	2001      	movs	r0, #1
 80091fc:	f7f9 fed0 	bl	8002fa0 <HAL_Delay>
      ms++;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	3301      	adds	r3, #1
 8009204:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f001 fa45 	bl	800a696 <USB_GetMode>
 800920c:	4603      	mov	r3, r0
 800920e:	2b01      	cmp	r3, #1
 8009210:	d01e      	beq.n	8009250 <USB_SetCurrentMode+0x84>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b31      	cmp	r3, #49	; 0x31
 8009216:	d9f0      	bls.n	80091fa <USB_SetCurrentMode+0x2e>
 8009218:	e01a      	b.n	8009250 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800921a:	78fb      	ldrb	r3, [r7, #3]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d115      	bne.n	800924c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800922c:	2001      	movs	r0, #1
 800922e:	f7f9 feb7 	bl	8002fa0 <HAL_Delay>
      ms++;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	3301      	adds	r3, #1
 8009236:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f001 fa2c 	bl	800a696 <USB_GetMode>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d005      	beq.n	8009250 <USB_SetCurrentMode+0x84>
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	2b31      	cmp	r3, #49	; 0x31
 8009248:	d9f0      	bls.n	800922c <USB_SetCurrentMode+0x60>
 800924a:	e001      	b.n	8009250 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	e005      	b.n	800925c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2b32      	cmp	r3, #50	; 0x32
 8009254:	d101      	bne.n	800925a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e000      	b.n	800925c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3710      	adds	r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009264:	b084      	sub	sp, #16
 8009266:	b580      	push	{r7, lr}
 8009268:	b086      	sub	sp, #24
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009272:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009276:	2300      	movs	r3, #0
 8009278:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800927e:	2300      	movs	r3, #0
 8009280:	613b      	str	r3, [r7, #16]
 8009282:	e009      	b.n	8009298 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	3340      	adds	r3, #64	; 0x40
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4413      	add	r3, r2
 800928e:	2200      	movs	r2, #0
 8009290:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	3301      	adds	r3, #1
 8009296:	613b      	str	r3, [r7, #16]
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	2b0e      	cmp	r3, #14
 800929c:	d9f2      	bls.n	8009284 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800929e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d11c      	bne.n	80092de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	68fa      	ldr	r2, [r7, #12]
 80092ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092b2:	f043 0302 	orr.w	r3, r3, #2
 80092b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	639a      	str	r2, [r3, #56]	; 0x38
 80092dc:	e00b      	b.n	80092f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092fc:	461a      	mov	r2, r3
 80092fe:	2300      	movs	r3, #0
 8009300:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009308:	4619      	mov	r1, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009310:	461a      	mov	r2, r3
 8009312:	680b      	ldr	r3, [r1, #0]
 8009314:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009318:	2b01      	cmp	r3, #1
 800931a:	d10c      	bne.n	8009336 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800931c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931e:	2b00      	cmp	r3, #0
 8009320:	d104      	bne.n	800932c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009322:	2100      	movs	r1, #0
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 f965 	bl	80095f4 <USB_SetDevSpeed>
 800932a:	e008      	b.n	800933e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800932c:	2101      	movs	r1, #1
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f960 	bl	80095f4 <USB_SetDevSpeed>
 8009334:	e003      	b.n	800933e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009336:	2103      	movs	r1, #3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f95b 	bl	80095f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800933e:	2110      	movs	r1, #16
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 f8f3 	bl	800952c <USB_FlushTxFifo>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f91f 	bl	8009594 <USB_FlushRxFifo>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d001      	beq.n	8009360 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009366:	461a      	mov	r2, r3
 8009368:	2300      	movs	r3, #0
 800936a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009372:	461a      	mov	r2, r3
 8009374:	2300      	movs	r3, #0
 8009376:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800937e:	461a      	mov	r2, r3
 8009380:	2300      	movs	r3, #0
 8009382:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009384:	2300      	movs	r3, #0
 8009386:	613b      	str	r3, [r7, #16]
 8009388:	e043      	b.n	8009412 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	4413      	add	r3, r2
 8009392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800939c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093a0:	d118      	bne.n	80093d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10a      	bne.n	80093be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	015a      	lsls	r2, r3, #5
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	4413      	add	r3, r2
 80093b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b4:	461a      	mov	r2, r3
 80093b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80093ba:	6013      	str	r3, [r2, #0]
 80093bc:	e013      	b.n	80093e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	015a      	lsls	r2, r3, #5
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ca:	461a      	mov	r2, r3
 80093cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	e008      	b.n	80093e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e0:	461a      	mov	r2, r3
 80093e2:	2300      	movs	r3, #0
 80093e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	015a      	lsls	r2, r3, #5
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	4413      	add	r3, r2
 80093ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f2:	461a      	mov	r2, r3
 80093f4:	2300      	movs	r3, #0
 80093f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009404:	461a      	mov	r2, r3
 8009406:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800940a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	3301      	adds	r3, #1
 8009410:	613b      	str	r3, [r7, #16]
 8009412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	429a      	cmp	r2, r3
 8009418:	d3b7      	bcc.n	800938a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800941a:	2300      	movs	r3, #0
 800941c:	613b      	str	r3, [r7, #16]
 800941e:	e043      	b.n	80094a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	015a      	lsls	r2, r3, #5
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	4413      	add	r3, r2
 8009428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009436:	d118      	bne.n	800946a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10a      	bne.n	8009454 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	015a      	lsls	r2, r3, #5
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	4413      	add	r3, r2
 8009446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800944a:	461a      	mov	r2, r3
 800944c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009450:	6013      	str	r3, [r2, #0]
 8009452:	e013      	b.n	800947c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	015a      	lsls	r2, r3, #5
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	4413      	add	r3, r2
 800945c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009460:	461a      	mov	r2, r3
 8009462:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009466:	6013      	str	r3, [r2, #0]
 8009468:	e008      	b.n	800947c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	4413      	add	r3, r2
 8009472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009476:	461a      	mov	r2, r3
 8009478:	2300      	movs	r3, #0
 800947a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	015a      	lsls	r2, r3, #5
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	4413      	add	r3, r2
 8009484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009488:	461a      	mov	r2, r3
 800948a:	2300      	movs	r3, #0
 800948c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	015a      	lsls	r2, r3, #5
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	4413      	add	r3, r2
 8009496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800949a:	461a      	mov	r2, r3
 800949c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80094a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	3301      	adds	r3, #1
 80094a6:	613b      	str	r3, [r7, #16]
 80094a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d3b7      	bcc.n	8009420 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b6:	691b      	ldr	r3, [r3, #16]
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80094d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80094d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d105      	bne.n	80094e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	f043 0210 	orr.w	r2, r3, #16
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	699a      	ldr	r2, [r3, #24]
 80094e8:	4b0f      	ldr	r3, [pc, #60]	; (8009528 <USB_DevInit+0x2c4>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80094f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d005      	beq.n	8009502 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	699b      	ldr	r3, [r3, #24]
 80094fa:	f043 0208 	orr.w	r2, r3, #8
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009504:	2b01      	cmp	r3, #1
 8009506:	d107      	bne.n	8009518 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009510:	f043 0304 	orr.w	r3, r3, #4
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009518:	7dfb      	ldrb	r3, [r7, #23]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009524:	b004      	add	sp, #16
 8009526:	4770      	bx	lr
 8009528:	803c3800 	.word	0x803c3800

0800952c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009536:	2300      	movs	r3, #0
 8009538:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	3301      	adds	r3, #1
 800953e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4a13      	ldr	r2, [pc, #76]	; (8009590 <USB_FlushTxFifo+0x64>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d901      	bls.n	800954c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009548:	2303      	movs	r3, #3
 800954a:	e01b      	b.n	8009584 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	2b00      	cmp	r3, #0
 8009552:	daf2      	bge.n	800953a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009554:	2300      	movs	r3, #0
 8009556:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	019b      	lsls	r3, r3, #6
 800955c:	f043 0220 	orr.w	r2, r3, #32
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	3301      	adds	r3, #1
 8009568:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	4a08      	ldr	r2, [pc, #32]	; (8009590 <USB_FlushTxFifo+0x64>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d901      	bls.n	8009576 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009572:	2303      	movs	r3, #3
 8009574:	e006      	b.n	8009584 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	f003 0320 	and.w	r3, r3, #32
 800957e:	2b20      	cmp	r3, #32
 8009580:	d0f0      	beq.n	8009564 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	00030d40 	.word	0x00030d40

08009594 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800959c:	2300      	movs	r3, #0
 800959e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	3301      	adds	r3, #1
 80095a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	4a11      	ldr	r2, [pc, #68]	; (80095f0 <USB_FlushRxFifo+0x5c>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d901      	bls.n	80095b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80095ae:	2303      	movs	r3, #3
 80095b0:	e018      	b.n	80095e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	691b      	ldr	r3, [r3, #16]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	daf2      	bge.n	80095a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80095ba:	2300      	movs	r3, #0
 80095bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2210      	movs	r2, #16
 80095c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	3301      	adds	r3, #1
 80095c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	4a08      	ldr	r2, [pc, #32]	; (80095f0 <USB_FlushRxFifo+0x5c>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d901      	bls.n	80095d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e006      	b.n	80095e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	f003 0310 	and.w	r3, r3, #16
 80095de:	2b10      	cmp	r3, #16
 80095e0:	d0f0      	beq.n	80095c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3714      	adds	r7, #20
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr
 80095f0:	00030d40 	.word	0x00030d40

080095f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	460b      	mov	r3, r1
 80095fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	78fb      	ldrb	r3, [r7, #3]
 800960e:	68f9      	ldr	r1, [r7, #12]
 8009610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009614:	4313      	orrs	r3, r2
 8009616:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3714      	adds	r7, #20
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009626:	b480      	push	{r7}
 8009628:	b087      	sub	sp, #28
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f003 0306 	and.w	r3, r3, #6
 800963e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d102      	bne.n	800964c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009646:	2300      	movs	r3, #0
 8009648:	75fb      	strb	r3, [r7, #23]
 800964a:	e00a      	b.n	8009662 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2b02      	cmp	r3, #2
 8009650:	d002      	beq.n	8009658 <USB_GetDevSpeed+0x32>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2b06      	cmp	r3, #6
 8009656:	d102      	bne.n	800965e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009658:	2302      	movs	r3, #2
 800965a:	75fb      	strb	r3, [r7, #23]
 800965c:	e001      	b.n	8009662 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800965e:	230f      	movs	r3, #15
 8009660:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009662:	7dfb      	ldrb	r3, [r7, #23]
}
 8009664:	4618      	mov	r0, r3
 8009666:	371c      	adds	r7, #28
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr

08009670 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009670:	b480      	push	{r7}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	785b      	ldrb	r3, [r3, #1]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d13a      	bne.n	8009702 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009692:	69da      	ldr	r2, [r3, #28]
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	f003 030f 	and.w	r3, r3, #15
 800969c:	2101      	movs	r1, #1
 800969e:	fa01 f303 	lsl.w	r3, r1, r3
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	68f9      	ldr	r1, [r7, #12]
 80096a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096aa:	4313      	orrs	r3, r2
 80096ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	015a      	lsls	r2, r3, #5
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	4413      	add	r3, r2
 80096b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d155      	bne.n	8009770 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	015a      	lsls	r2, r3, #5
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	4413      	add	r3, r2
 80096cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	791b      	ldrb	r3, [r3, #4]
 80096de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	059b      	lsls	r3, r3, #22
 80096e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096e8:	4313      	orrs	r3, r2
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	0151      	lsls	r1, r2, #5
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	440a      	add	r2, r1
 80096f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096fe:	6013      	str	r3, [r2, #0]
 8009700:	e036      	b.n	8009770 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009708:	69da      	ldr	r2, [r3, #28]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	f003 030f 	and.w	r3, r3, #15
 8009712:	2101      	movs	r1, #1
 8009714:	fa01 f303 	lsl.w	r3, r1, r3
 8009718:	041b      	lsls	r3, r3, #16
 800971a:	68f9      	ldr	r1, [r7, #12]
 800971c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009720:	4313      	orrs	r3, r2
 8009722:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	015a      	lsls	r2, r3, #5
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	4413      	add	r3, r2
 800972c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009736:	2b00      	cmp	r3, #0
 8009738:	d11a      	bne.n	8009770 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	015a      	lsls	r2, r3, #5
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	4413      	add	r3, r2
 8009742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	791b      	ldrb	r3, [r3, #4]
 8009754:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009756:	430b      	orrs	r3, r1
 8009758:	4313      	orrs	r3, r2
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	0151      	lsls	r1, r2, #5
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	440a      	add	r2, r1
 8009762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800976a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800976e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3714      	adds	r7, #20
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
	...

08009780 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	785b      	ldrb	r3, [r3, #1]
 8009798:	2b01      	cmp	r3, #1
 800979a:	d161      	bne.n	8009860 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097b2:	d11f      	bne.n	80097f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	0151      	lsls	r1, r2, #5
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	440a      	add	r2, r1
 80097ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	015a      	lsls	r2, r3, #5
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	4413      	add	r3, r2
 80097dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	0151      	lsls	r1, r2, #5
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	440a      	add	r2, r1
 80097ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	f003 030f 	and.w	r3, r3, #15
 8009804:	2101      	movs	r1, #1
 8009806:	fa01 f303 	lsl.w	r3, r1, r3
 800980a:	b29b      	uxth	r3, r3
 800980c:	43db      	mvns	r3, r3
 800980e:	68f9      	ldr	r1, [r7, #12]
 8009810:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009814:	4013      	ands	r3, r2
 8009816:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800981e:	69da      	ldr	r2, [r3, #28]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	f003 030f 	and.w	r3, r3, #15
 8009828:	2101      	movs	r1, #1
 800982a:	fa01 f303 	lsl.w	r3, r1, r3
 800982e:	b29b      	uxth	r3, r3
 8009830:	43db      	mvns	r3, r3
 8009832:	68f9      	ldr	r1, [r7, #12]
 8009834:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009838:	4013      	ands	r3, r2
 800983a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	015a      	lsls	r2, r3, #5
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	4413      	add	r3, r2
 8009844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	0159      	lsls	r1, r3, #5
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	440b      	add	r3, r1
 8009852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009856:	4619      	mov	r1, r3
 8009858:	4b35      	ldr	r3, [pc, #212]	; (8009930 <USB_DeactivateEndpoint+0x1b0>)
 800985a:	4013      	ands	r3, r2
 800985c:	600b      	str	r3, [r1, #0]
 800985e:	e060      	b.n	8009922 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	015a      	lsls	r2, r3, #5
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	4413      	add	r3, r2
 8009868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009876:	d11f      	bne.n	80098b8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	015a      	lsls	r2, r3, #5
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	4413      	add	r3, r2
 8009880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	0151      	lsls	r1, r2, #5
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	440a      	add	r2, r1
 800988e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009892:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009896:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	015a      	lsls	r2, r3, #5
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	4413      	add	r3, r2
 80098a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68ba      	ldr	r2, [r7, #8]
 80098a8:	0151      	lsls	r1, r2, #5
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	440a      	add	r2, r1
 80098ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	f003 030f 	and.w	r3, r3, #15
 80098c8:	2101      	movs	r1, #1
 80098ca:	fa01 f303 	lsl.w	r3, r1, r3
 80098ce:	041b      	lsls	r3, r3, #16
 80098d0:	43db      	mvns	r3, r3
 80098d2:	68f9      	ldr	r1, [r7, #12]
 80098d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098d8:	4013      	ands	r3, r2
 80098da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e2:	69da      	ldr	r2, [r3, #28]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	f003 030f 	and.w	r3, r3, #15
 80098ec:	2101      	movs	r1, #1
 80098ee:	fa01 f303 	lsl.w	r3, r1, r3
 80098f2:	041b      	lsls	r3, r3, #16
 80098f4:	43db      	mvns	r3, r3
 80098f6:	68f9      	ldr	r1, [r7, #12]
 80098f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098fc:	4013      	ands	r3, r2
 80098fe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	015a      	lsls	r2, r3, #5
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	4413      	add	r3, r2
 8009908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	0159      	lsls	r1, r3, #5
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	440b      	add	r3, r1
 8009916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800991a:	4619      	mov	r1, r3
 800991c:	4b05      	ldr	r3, [pc, #20]	; (8009934 <USB_DeactivateEndpoint+0x1b4>)
 800991e:	4013      	ands	r3, r2
 8009920:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	ec337800 	.word	0xec337800
 8009934:	eff37800 	.word	0xeff37800

08009938 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b08a      	sub	sp, #40	; 0x28
 800993c:	af02      	add	r7, sp, #8
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	4613      	mov	r3, r2
 8009944:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	785b      	ldrb	r3, [r3, #1]
 8009954:	2b01      	cmp	r3, #1
 8009956:	f040 815c 	bne.w	8009c12 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	699b      	ldr	r3, [r3, #24]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d132      	bne.n	80099c8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	4413      	add	r3, r2
 800996a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800996e:	691b      	ldr	r3, [r3, #16]
 8009970:	69ba      	ldr	r2, [r7, #24]
 8009972:	0151      	lsls	r1, r2, #5
 8009974:	69fa      	ldr	r2, [r7, #28]
 8009976:	440a      	add	r2, r1
 8009978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800997c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009980:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009984:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009986:	69bb      	ldr	r3, [r7, #24]
 8009988:	015a      	lsls	r2, r3, #5
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	4413      	add	r3, r2
 800998e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009992:	691b      	ldr	r3, [r3, #16]
 8009994:	69ba      	ldr	r2, [r7, #24]
 8009996:	0151      	lsls	r1, r2, #5
 8009998:	69fa      	ldr	r2, [r7, #28]
 800999a:	440a      	add	r2, r1
 800999c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80099a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	69ba      	ldr	r2, [r7, #24]
 80099b6:	0151      	lsls	r1, r2, #5
 80099b8:	69fa      	ldr	r2, [r7, #28]
 80099ba:	440a      	add	r2, r1
 80099bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099c0:	0cdb      	lsrs	r3, r3, #19
 80099c2:	04db      	lsls	r3, r3, #19
 80099c4:	6113      	str	r3, [r2, #16]
 80099c6:	e074      	b.n	8009ab2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	69ba      	ldr	r2, [r7, #24]
 80099d8:	0151      	lsls	r1, r2, #5
 80099da:	69fa      	ldr	r2, [r7, #28]
 80099dc:	440a      	add	r2, r1
 80099de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099e2:	0cdb      	lsrs	r3, r3, #19
 80099e4:	04db      	lsls	r3, r3, #19
 80099e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	015a      	lsls	r2, r3, #5
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	4413      	add	r3, r2
 80099f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	69ba      	ldr	r2, [r7, #24]
 80099f8:	0151      	lsls	r1, r2, #5
 80099fa:	69fa      	ldr	r2, [r7, #28]
 80099fc:	440a      	add	r2, r1
 80099fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009a06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009a0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	015a      	lsls	r2, r3, #5
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	4413      	add	r3, r2
 8009a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a18:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	6999      	ldr	r1, [r3, #24]
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	440b      	add	r3, r1
 8009a24:	1e59      	subs	r1, r3, #1
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	68db      	ldr	r3, [r3, #12]
 8009a2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a2e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009a30:	4b9d      	ldr	r3, [pc, #628]	; (8009ca8 <USB_EPStartXfer+0x370>)
 8009a32:	400b      	ands	r3, r1
 8009a34:	69b9      	ldr	r1, [r7, #24]
 8009a36:	0148      	lsls	r0, r1, #5
 8009a38:	69f9      	ldr	r1, [r7, #28]
 8009a3a:	4401      	add	r1, r0
 8009a3c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a40:	4313      	orrs	r3, r2
 8009a42:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	015a      	lsls	r2, r3, #5
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a50:	691a      	ldr	r2, [r3, #16]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	699b      	ldr	r3, [r3, #24]
 8009a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a5a:	69b9      	ldr	r1, [r7, #24]
 8009a5c:	0148      	lsls	r0, r1, #5
 8009a5e:	69f9      	ldr	r1, [r7, #28]
 8009a60:	4401      	add	r1, r0
 8009a62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a66:	4313      	orrs	r3, r2
 8009a68:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	791b      	ldrb	r3, [r3, #4]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d11f      	bne.n	8009ab2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009a72:	69bb      	ldr	r3, [r7, #24]
 8009a74:	015a      	lsls	r2, r3, #5
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	69ba      	ldr	r2, [r7, #24]
 8009a82:	0151      	lsls	r1, r2, #5
 8009a84:	69fa      	ldr	r2, [r7, #28]
 8009a86:	440a      	add	r2, r1
 8009a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a8c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009a90:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	015a      	lsls	r2, r3, #5
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	4413      	add	r3, r2
 8009a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	69ba      	ldr	r2, [r7, #24]
 8009aa2:	0151      	lsls	r1, r2, #5
 8009aa4:	69fa      	ldr	r2, [r7, #28]
 8009aa6:	440a      	add	r2, r1
 8009aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009aac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ab0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009ab2:	79fb      	ldrb	r3, [r7, #7]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d14b      	bne.n	8009b50 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d009      	beq.n	8009ad4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009acc:	461a      	mov	r2, r3
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	695b      	ldr	r3, [r3, #20]
 8009ad2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	791b      	ldrb	r3, [r3, #4]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d128      	bne.n	8009b2e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009adc:	69fb      	ldr	r3, [r7, #28]
 8009ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d110      	bne.n	8009b0e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	015a      	lsls	r2, r3, #5
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	4413      	add	r3, r2
 8009af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	69ba      	ldr	r2, [r7, #24]
 8009afc:	0151      	lsls	r1, r2, #5
 8009afe:	69fa      	ldr	r2, [r7, #28]
 8009b00:	440a      	add	r2, r1
 8009b02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009b0a:	6013      	str	r3, [r2, #0]
 8009b0c:	e00f      	b.n	8009b2e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	015a      	lsls	r2, r3, #5
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	4413      	add	r3, r2
 8009b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	69ba      	ldr	r2, [r7, #24]
 8009b1e:	0151      	lsls	r1, r2, #5
 8009b20:	69fa      	ldr	r2, [r7, #28]
 8009b22:	440a      	add	r2, r1
 8009b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b2c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	015a      	lsls	r2, r3, #5
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	4413      	add	r3, r2
 8009b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	69ba      	ldr	r2, [r7, #24]
 8009b3e:	0151      	lsls	r1, r2, #5
 8009b40:	69fa      	ldr	r2, [r7, #28]
 8009b42:	440a      	add	r2, r1
 8009b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b4c:	6013      	str	r3, [r2, #0]
 8009b4e:	e133      	b.n	8009db8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b50:	69bb      	ldr	r3, [r7, #24]
 8009b52:	015a      	lsls	r2, r3, #5
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	4413      	add	r3, r2
 8009b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	69ba      	ldr	r2, [r7, #24]
 8009b60:	0151      	lsls	r1, r2, #5
 8009b62:	69fa      	ldr	r2, [r7, #28]
 8009b64:	440a      	add	r2, r1
 8009b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b6e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	791b      	ldrb	r3, [r3, #4]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d015      	beq.n	8009ba4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	699b      	ldr	r3, [r3, #24]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f000 811b 	beq.w	8009db8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009b82:	69fb      	ldr	r3, [r7, #28]
 8009b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	f003 030f 	and.w	r3, r3, #15
 8009b92:	2101      	movs	r1, #1
 8009b94:	fa01 f303 	lsl.w	r3, r1, r3
 8009b98:	69f9      	ldr	r1, [r7, #28]
 8009b9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	634b      	str	r3, [r1, #52]	; 0x34
 8009ba2:	e109      	b.n	8009db8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d110      	bne.n	8009bd6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	015a      	lsls	r2, r3, #5
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	4413      	add	r3, r2
 8009bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	69ba      	ldr	r2, [r7, #24]
 8009bc4:	0151      	lsls	r1, r2, #5
 8009bc6:	69fa      	ldr	r2, [r7, #28]
 8009bc8:	440a      	add	r2, r1
 8009bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009bd2:	6013      	str	r3, [r2, #0]
 8009bd4:	e00f      	b.n	8009bf6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	015a      	lsls	r2, r3, #5
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	69ba      	ldr	r2, [r7, #24]
 8009be6:	0151      	lsls	r1, r2, #5
 8009be8:	69fa      	ldr	r2, [r7, #28]
 8009bea:	440a      	add	r2, r1
 8009bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bf4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	6919      	ldr	r1, [r3, #16]
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	781a      	ldrb	r2, [r3, #0]
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	b298      	uxth	r0, r3
 8009c04:	79fb      	ldrb	r3, [r7, #7]
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	4603      	mov	r3, r0
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f000 fade 	bl	800a1cc <USB_WritePacket>
 8009c10:	e0d2      	b.n	8009db8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	015a      	lsls	r2, r3, #5
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	69ba      	ldr	r2, [r7, #24]
 8009c22:	0151      	lsls	r1, r2, #5
 8009c24:	69fa      	ldr	r2, [r7, #28]
 8009c26:	440a      	add	r2, r1
 8009c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c2c:	0cdb      	lsrs	r3, r3, #19
 8009c2e:	04db      	lsls	r3, r3, #19
 8009c30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	015a      	lsls	r2, r3, #5
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	4413      	add	r3, r2
 8009c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3e:	691b      	ldr	r3, [r3, #16]
 8009c40:	69ba      	ldr	r2, [r7, #24]
 8009c42:	0151      	lsls	r1, r2, #5
 8009c44:	69fa      	ldr	r2, [r7, #28]
 8009c46:	440a      	add	r2, r1
 8009c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d126      	bne.n	8009cac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	015a      	lsls	r2, r3, #5
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	4413      	add	r3, r2
 8009c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6a:	691a      	ldr	r2, [r3, #16]
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c74:	69b9      	ldr	r1, [r7, #24]
 8009c76:	0148      	lsls	r0, r1, #5
 8009c78:	69f9      	ldr	r1, [r7, #28]
 8009c7a:	4401      	add	r1, r0
 8009c7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c80:	4313      	orrs	r3, r2
 8009c82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	015a      	lsls	r2, r3, #5
 8009c88:	69fb      	ldr	r3, [r7, #28]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	69ba      	ldr	r2, [r7, #24]
 8009c94:	0151      	lsls	r1, r2, #5
 8009c96:	69fa      	ldr	r2, [r7, #28]
 8009c98:	440a      	add	r2, r1
 8009c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ca2:	6113      	str	r3, [r2, #16]
 8009ca4:	e03a      	b.n	8009d1c <USB_EPStartXfer+0x3e4>
 8009ca6:	bf00      	nop
 8009ca8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	699a      	ldr	r2, [r3, #24]
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	1e5a      	subs	r2, r3, #1
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	8afa      	ldrh	r2, [r7, #22]
 8009cc8:	fb03 f202 	mul.w	r2, r3, r2
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	015a      	lsls	r2, r3, #5
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cdc:	691a      	ldr	r2, [r3, #16]
 8009cde:	8afb      	ldrh	r3, [r7, #22]
 8009ce0:	04d9      	lsls	r1, r3, #19
 8009ce2:	4b38      	ldr	r3, [pc, #224]	; (8009dc4 <USB_EPStartXfer+0x48c>)
 8009ce4:	400b      	ands	r3, r1
 8009ce6:	69b9      	ldr	r1, [r7, #24]
 8009ce8:	0148      	lsls	r0, r1, #5
 8009cea:	69f9      	ldr	r1, [r7, #28]
 8009cec:	4401      	add	r1, r0
 8009cee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	015a      	lsls	r2, r3, #5
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d02:	691a      	ldr	r2, [r3, #16]
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d0c:	69b9      	ldr	r1, [r7, #24]
 8009d0e:	0148      	lsls	r0, r1, #5
 8009d10:	69f9      	ldr	r1, [r7, #28]
 8009d12:	4401      	add	r1, r0
 8009d14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009d1c:	79fb      	ldrb	r3, [r7, #7]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d10d      	bne.n	8009d3e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d009      	beq.n	8009d3e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	6919      	ldr	r1, [r3, #16]
 8009d2e:	69bb      	ldr	r3, [r7, #24]
 8009d30:	015a      	lsls	r2, r3, #5
 8009d32:	69fb      	ldr	r3, [r7, #28]
 8009d34:	4413      	add	r3, r2
 8009d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d3a:	460a      	mov	r2, r1
 8009d3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	791b      	ldrb	r3, [r3, #4]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d128      	bne.n	8009d98 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d46:	69fb      	ldr	r3, [r7, #28]
 8009d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d110      	bne.n	8009d78 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	015a      	lsls	r2, r3, #5
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	69ba      	ldr	r2, [r7, #24]
 8009d66:	0151      	lsls	r1, r2, #5
 8009d68:	69fa      	ldr	r2, [r7, #28]
 8009d6a:	440a      	add	r2, r1
 8009d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d74:	6013      	str	r3, [r2, #0]
 8009d76:	e00f      	b.n	8009d98 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	015a      	lsls	r2, r3, #5
 8009d7c:	69fb      	ldr	r3, [r7, #28]
 8009d7e:	4413      	add	r3, r2
 8009d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	69ba      	ldr	r2, [r7, #24]
 8009d88:	0151      	lsls	r1, r2, #5
 8009d8a:	69fa      	ldr	r2, [r7, #28]
 8009d8c:	440a      	add	r2, r1
 8009d8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	015a      	lsls	r2, r3, #5
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	4413      	add	r3, r2
 8009da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	69ba      	ldr	r2, [r7, #24]
 8009da8:	0151      	lsls	r1, r2, #5
 8009daa:	69fa      	ldr	r2, [r7, #28]
 8009dac:	440a      	add	r2, r1
 8009dae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009db2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009db6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009db8:	2300      	movs	r3, #0
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3720      	adds	r7, #32
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	1ff80000 	.word	0x1ff80000

08009dc8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b087      	sub	sp, #28
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	785b      	ldrb	r3, [r3, #1]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	f040 80ce 	bne.w	8009f86 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d132      	bne.n	8009e58 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	015a      	lsls	r2, r3, #5
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	0151      	lsls	r1, r2, #5
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	440a      	add	r2, r1
 8009e08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	015a      	lsls	r2, r3, #5
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	4413      	add	r3, r2
 8009e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	0151      	lsls	r1, r2, #5
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	440a      	add	r2, r1
 8009e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	015a      	lsls	r2, r3, #5
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	0151      	lsls	r1, r2, #5
 8009e48:	697a      	ldr	r2, [r7, #20]
 8009e4a:	440a      	add	r2, r1
 8009e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e50:	0cdb      	lsrs	r3, r3, #19
 8009e52:	04db      	lsls	r3, r3, #19
 8009e54:	6113      	str	r3, [r2, #16]
 8009e56:	e04e      	b.n	8009ef6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	015a      	lsls	r2, r3, #5
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	4413      	add	r3, r2
 8009e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e64:	691b      	ldr	r3, [r3, #16]
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	0151      	lsls	r1, r2, #5
 8009e6a:	697a      	ldr	r2, [r7, #20]
 8009e6c:	440a      	add	r2, r1
 8009e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e72:	0cdb      	lsrs	r3, r3, #19
 8009e74:	04db      	lsls	r3, r3, #19
 8009e76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	015a      	lsls	r2, r3, #5
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	4413      	add	r3, r2
 8009e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	0151      	lsls	r1, r2, #5
 8009e8a:	697a      	ldr	r2, [r7, #20]
 8009e8c:	440a      	add	r2, r1
 8009e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e92:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e96:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e9a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	699a      	ldr	r2, [r3, #24]
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d903      	bls.n	8009eb0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	68da      	ldr	r2, [r3, #12]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	015a      	lsls	r2, r3, #5
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	693a      	ldr	r2, [r7, #16]
 8009ec0:	0151      	lsls	r1, r2, #5
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	440a      	add	r2, r1
 8009ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ece:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009edc:	691a      	ldr	r2, [r3, #16]
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ee6:	6939      	ldr	r1, [r7, #16]
 8009ee8:	0148      	lsls	r0, r1, #5
 8009eea:	6979      	ldr	r1, [r7, #20]
 8009eec:	4401      	add	r1, r0
 8009eee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009ef6:	79fb      	ldrb	r3, [r7, #7]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d11e      	bne.n	8009f3a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d009      	beq.n	8009f18 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	015a      	lsls	r2, r3, #5
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f10:	461a      	mov	r2, r3
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	0151      	lsls	r1, r2, #5
 8009f2a:	697a      	ldr	r2, [r7, #20]
 8009f2c:	440a      	add	r2, r1
 8009f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f36:	6013      	str	r3, [r2, #0]
 8009f38:	e097      	b.n	800a06a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	015a      	lsls	r2, r3, #5
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	4413      	add	r3, r2
 8009f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	0151      	lsls	r1, r2, #5
 8009f4c:	697a      	ldr	r2, [r7, #20]
 8009f4e:	440a      	add	r2, r1
 8009f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f58:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	699b      	ldr	r3, [r3, #24]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f000 8083 	beq.w	800a06a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009f64:	697b      	ldr	r3, [r7, #20]
 8009f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	f003 030f 	and.w	r3, r3, #15
 8009f74:	2101      	movs	r1, #1
 8009f76:	fa01 f303 	lsl.w	r3, r1, r3
 8009f7a:	6979      	ldr	r1, [r7, #20]
 8009f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f80:	4313      	orrs	r3, r2
 8009f82:	634b      	str	r3, [r1, #52]	; 0x34
 8009f84:	e071      	b.n	800a06a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	015a      	lsls	r2, r3, #5
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	693a      	ldr	r2, [r7, #16]
 8009f96:	0151      	lsls	r1, r2, #5
 8009f98:	697a      	ldr	r2, [r7, #20]
 8009f9a:	440a      	add	r2, r1
 8009f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fa0:	0cdb      	lsrs	r3, r3, #19
 8009fa2:	04db      	lsls	r3, r3, #19
 8009fa4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	015a      	lsls	r2, r3, #5
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	4413      	add	r3, r2
 8009fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb2:	691b      	ldr	r3, [r3, #16]
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	0151      	lsls	r1, r2, #5
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	440a      	add	r2, r1
 8009fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009fc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009fc8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	699b      	ldr	r3, [r3, #24]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	68da      	ldr	r2, [r3, #12]
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	68da      	ldr	r2, [r3, #12]
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	015a      	lsls	r2, r3, #5
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	4413      	add	r3, r2
 8009fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	0151      	lsls	r1, r2, #5
 8009ff4:	697a      	ldr	r2, [r7, #20]
 8009ff6:	440a      	add	r2, r1
 8009ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ffc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a000:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	015a      	lsls	r2, r3, #5
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	4413      	add	r3, r2
 800a00a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a00e:	691a      	ldr	r2, [r3, #16]
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	69db      	ldr	r3, [r3, #28]
 800a014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a018:	6939      	ldr	r1, [r7, #16]
 800a01a:	0148      	lsls	r0, r1, #5
 800a01c:	6979      	ldr	r1, [r7, #20]
 800a01e:	4401      	add	r1, r0
 800a020:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a024:	4313      	orrs	r3, r2
 800a026:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a028:	79fb      	ldrb	r3, [r7, #7]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d10d      	bne.n	800a04a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	691b      	ldr	r3, [r3, #16]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d009      	beq.n	800a04a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	6919      	ldr	r1, [r3, #16]
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	015a      	lsls	r2, r3, #5
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	4413      	add	r3, r2
 800a042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a046:	460a      	mov	r2, r1
 800a048:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	015a      	lsls	r2, r3, #5
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	4413      	add	r3, r2
 800a052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	693a      	ldr	r2, [r7, #16]
 800a05a:	0151      	lsls	r1, r2, #5
 800a05c:	697a      	ldr	r2, [r7, #20]
 800a05e:	440a      	add	r2, r1
 800a060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a064:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a068:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a06a:	2300      	movs	r3, #0
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	371c      	adds	r7, #28
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a078:	b480      	push	{r7}
 800a07a:	b087      	sub	sp, #28
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a082:	2300      	movs	r3, #0
 800a084:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a086:	2300      	movs	r3, #0
 800a088:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	785b      	ldrb	r3, [r3, #1]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d14a      	bne.n	800a12c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	015a      	lsls	r2, r3, #5
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0ae:	f040 8086 	bne.w	800a1be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	781b      	ldrb	r3, [r3, #0]
 800a0b6:	015a      	lsls	r2, r3, #5
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	7812      	ldrb	r2, [r2, #0]
 800a0c6:	0151      	lsls	r1, r2, #5
 800a0c8:	693a      	ldr	r2, [r7, #16]
 800a0ca:	440a      	add	r2, r1
 800a0cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	015a      	lsls	r2, r3, #5
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	4413      	add	r3, r2
 800a0e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	683a      	ldr	r2, [r7, #0]
 800a0e8:	7812      	ldrb	r2, [r2, #0]
 800a0ea:	0151      	lsls	r1, r2, #5
 800a0ec:	693a      	ldr	r2, [r7, #16]
 800a0ee:	440a      	add	r2, r1
 800a0f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f242 7210 	movw	r2, #10000	; 0x2710
 800a106:	4293      	cmp	r3, r2
 800a108:	d902      	bls.n	800a110 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	75fb      	strb	r3, [r7, #23]
          break;
 800a10e:	e056      	b.n	800a1be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	015a      	lsls	r2, r3, #5
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	4413      	add	r3, r2
 800a11a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a124:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a128:	d0e7      	beq.n	800a0fa <USB_EPStopXfer+0x82>
 800a12a:	e048      	b.n	800a1be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	015a      	lsls	r2, r3, #5
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	4413      	add	r3, r2
 800a136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a144:	d13b      	bne.n	800a1be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	015a      	lsls	r2, r3, #5
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	4413      	add	r3, r2
 800a150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	7812      	ldrb	r2, [r2, #0]
 800a15a:	0151      	lsls	r1, r2, #5
 800a15c:	693a      	ldr	r2, [r7, #16]
 800a15e:	440a      	add	r2, r1
 800a160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a164:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a168:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	015a      	lsls	r2, r3, #5
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	4413      	add	r3, r2
 800a174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	7812      	ldrb	r2, [r2, #0]
 800a17e:	0151      	lsls	r1, r2, #5
 800a180:	693a      	ldr	r2, [r7, #16]
 800a182:	440a      	add	r2, r1
 800a184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a188:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a18c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	3301      	adds	r3, #1
 800a192:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f242 7210 	movw	r2, #10000	; 0x2710
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d902      	bls.n	800a1a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	75fb      	strb	r3, [r7, #23]
          break;
 800a1a2:	e00c      	b.n	800a1be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	015a      	lsls	r2, r3, #5
 800a1aa:	693b      	ldr	r3, [r7, #16]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a1bc:	d0e7      	beq.n	800a18e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a1be:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	371c      	adds	r7, #28
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b089      	sub	sp, #36	; 0x24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	4611      	mov	r1, r2
 800a1d8:	461a      	mov	r2, r3
 800a1da:	460b      	mov	r3, r1
 800a1dc:	71fb      	strb	r3, [r7, #7]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a1ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d123      	bne.n	800a23a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a1f2:	88bb      	ldrh	r3, [r7, #4]
 800a1f4:	3303      	adds	r3, #3
 800a1f6:	089b      	lsrs	r3, r3, #2
 800a1f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	61bb      	str	r3, [r7, #24]
 800a1fe:	e018      	b.n	800a232 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a200:	79fb      	ldrb	r3, [r7, #7]
 800a202:	031a      	lsls	r2, r3, #12
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	4413      	add	r3, r2
 800a208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a20c:	461a      	mov	r2, r3
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	3301      	adds	r3, #1
 800a218:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a21a:	69fb      	ldr	r3, [r7, #28]
 800a21c:	3301      	adds	r3, #1
 800a21e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	3301      	adds	r3, #1
 800a224:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	3301      	adds	r3, #1
 800a22a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	3301      	adds	r3, #1
 800a230:	61bb      	str	r3, [r7, #24]
 800a232:	69ba      	ldr	r2, [r7, #24]
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	429a      	cmp	r2, r3
 800a238:	d3e2      	bcc.n	800a200 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a23a:	2300      	movs	r3, #0
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3724      	adds	r7, #36	; 0x24
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a248:	b480      	push	{r7}
 800a24a:	b08b      	sub	sp, #44	; 0x2c
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	4613      	mov	r3, r2
 800a254:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a25e:	88fb      	ldrh	r3, [r7, #6]
 800a260:	089b      	lsrs	r3, r3, #2
 800a262:	b29b      	uxth	r3, r3
 800a264:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a266:	88fb      	ldrh	r3, [r7, #6]
 800a268:	f003 0303 	and.w	r3, r3, #3
 800a26c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a26e:	2300      	movs	r3, #0
 800a270:	623b      	str	r3, [r7, #32]
 800a272:	e014      	b.n	800a29e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	3301      	adds	r3, #1
 800a284:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a288:	3301      	adds	r3, #1
 800a28a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28e:	3301      	adds	r3, #1
 800a290:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	3301      	adds	r3, #1
 800a296:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a298:	6a3b      	ldr	r3, [r7, #32]
 800a29a:	3301      	adds	r3, #1
 800a29c:	623b      	str	r3, [r7, #32]
 800a29e:	6a3a      	ldr	r2, [r7, #32]
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d3e6      	bcc.n	800a274 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a2a6:	8bfb      	ldrh	r3, [r7, #30]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d01e      	beq.n	800a2ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	f107 0310 	add.w	r3, r7, #16
 800a2bc:	6812      	ldr	r2, [r2, #0]
 800a2be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a2c0:	693a      	ldr	r2, [r7, #16]
 800a2c2:	6a3b      	ldr	r3, [r7, #32]
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	00db      	lsls	r3, r3, #3
 800a2c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a2cc:	b2da      	uxtb	r2, r3
 800a2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d0:	701a      	strb	r2, [r3, #0]
      i++;
 800a2d2:	6a3b      	ldr	r3, [r7, #32]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2da:	3301      	adds	r3, #1
 800a2dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a2de:	8bfb      	ldrh	r3, [r7, #30]
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a2e4:	8bfb      	ldrh	r3, [r7, #30]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1ea      	bne.n	800a2c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	372c      	adds	r7, #44	; 0x2c
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	785b      	ldrb	r3, [r3, #1]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d12c      	bne.n	800a36e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	015a      	lsls	r2, r3, #5
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	4413      	add	r3, r2
 800a31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	db12      	blt.n	800a34c <USB_EPSetStall+0x54>
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00f      	beq.n	800a34c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	015a      	lsls	r2, r3, #5
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	4413      	add	r3, r2
 800a334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	0151      	lsls	r1, r2, #5
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	440a      	add	r2, r1
 800a342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a346:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a34a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	015a      	lsls	r2, r3, #5
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	4413      	add	r3, r2
 800a354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	0151      	lsls	r1, r2, #5
 800a35e:	68fa      	ldr	r2, [r7, #12]
 800a360:	440a      	add	r2, r1
 800a362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a366:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a36a:	6013      	str	r3, [r2, #0]
 800a36c:	e02b      	b.n	800a3c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	015a      	lsls	r2, r3, #5
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	4413      	add	r3, r2
 800a376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	db12      	blt.n	800a3a6 <USB_EPSetStall+0xae>
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00f      	beq.n	800a3a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	015a      	lsls	r2, r3, #5
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	4413      	add	r3, r2
 800a38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	0151      	lsls	r1, r2, #5
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	440a      	add	r2, r1
 800a39c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a3a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	015a      	lsls	r2, r3, #5
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	68ba      	ldr	r2, [r7, #8]
 800a3b6:	0151      	lsls	r1, r2, #5
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	440a      	add	r2, r1
 800a3bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a3c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	785b      	ldrb	r3, [r3, #1]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d128      	bne.n	800a442 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	015a      	lsls	r2, r3, #5
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	0151      	lsls	r1, r2, #5
 800a402:	68fa      	ldr	r2, [r7, #12]
 800a404:	440a      	add	r2, r1
 800a406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a40a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a40e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	791b      	ldrb	r3, [r3, #4]
 800a414:	2b03      	cmp	r3, #3
 800a416:	d003      	beq.n	800a420 <USB_EPClearStall+0x4c>
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	791b      	ldrb	r3, [r3, #4]
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d138      	bne.n	800a492 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	015a      	lsls	r2, r3, #5
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	4413      	add	r3, r2
 800a428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	0151      	lsls	r1, r2, #5
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	440a      	add	r2, r1
 800a436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a43a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a43e:	6013      	str	r3, [r2, #0]
 800a440:	e027      	b.n	800a492 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	015a      	lsls	r2, r3, #5
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	4413      	add	r3, r2
 800a44a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68ba      	ldr	r2, [r7, #8]
 800a452:	0151      	lsls	r1, r2, #5
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	440a      	add	r2, r1
 800a458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a45c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a460:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	791b      	ldrb	r3, [r3, #4]
 800a466:	2b03      	cmp	r3, #3
 800a468:	d003      	beq.n	800a472 <USB_EPClearStall+0x9e>
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	791b      	ldrb	r3, [r3, #4]
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d10f      	bne.n	800a492 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	015a      	lsls	r2, r3, #5
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	4413      	add	r3, r2
 800a47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	0151      	lsls	r1, r2, #5
 800a484:	68fa      	ldr	r2, [r7, #12]
 800a486:	440a      	add	r2, r1
 800a488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a48c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a490:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3714      	adds	r7, #20
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b085      	sub	sp, #20
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a4c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	78fb      	ldrb	r3, [r7, #3]
 800a4ce:	011b      	lsls	r3, r3, #4
 800a4d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a4d4:	68f9      	ldr	r1, [r7, #12]
 800a4d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3714      	adds	r7, #20
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a506:	f023 0303 	bic.w	r3, r3, #3
 800a50a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a51a:	f023 0302 	bic.w	r3, r3, #2
 800a51e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3714      	adds	r7, #20
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a52e:	b480      	push	{r7}
 800a530:	b085      	sub	sp, #20
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a548:	f023 0303 	bic.w	r3, r3, #3
 800a54c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a55c:	f043 0302 	orr.w	r3, r3, #2
 800a560:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3714      	adds	r7, #20
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	695b      	ldr	r3, [r3, #20]
 800a57c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	699b      	ldr	r3, [r3, #24]
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	4013      	ands	r3, r2
 800a586:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a588:	68fb      	ldr	r3, [r7, #12]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a596:	b480      	push	{r7}
 800a598:	b085      	sub	sp, #20
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5b2:	69db      	ldr	r3, [r3, #28]
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	0c1b      	lsrs	r3, r3, #16
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3714      	adds	r7, #20
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b085      	sub	sp, #20
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5dc:	699b      	ldr	r3, [r3, #24]
 800a5de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5e6:	69db      	ldr	r3, [r3, #28]
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	4013      	ands	r3, r2
 800a5ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	b29b      	uxth	r3, r3
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3714      	adds	r7, #20
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fc:	4770      	bx	lr

0800a5fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a5fe:	b480      	push	{r7}
 800a600:	b085      	sub	sp, #20
 800a602:	af00      	add	r7, sp, #0
 800a604:	6078      	str	r0, [r7, #4]
 800a606:	460b      	mov	r3, r1
 800a608:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a60e:	78fb      	ldrb	r3, [r7, #3]
 800a610:	015a      	lsls	r2, r3, #5
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	4413      	add	r3, r2
 800a616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a624:	695b      	ldr	r3, [r3, #20]
 800a626:	68ba      	ldr	r2, [r7, #8]
 800a628:	4013      	ands	r3, r2
 800a62a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a62c:	68bb      	ldr	r3, [r7, #8]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3714      	adds	r7, #20
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a63a:	b480      	push	{r7}
 800a63c:	b087      	sub	sp, #28
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
 800a642:	460b      	mov	r3, r1
 800a644:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a65a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a65c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a65e:	78fb      	ldrb	r3, [r7, #3]
 800a660:	f003 030f 	and.w	r3, r3, #15
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	fa22 f303 	lsr.w	r3, r2, r3
 800a66a:	01db      	lsls	r3, r3, #7
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	693a      	ldr	r2, [r7, #16]
 800a670:	4313      	orrs	r3, r2
 800a672:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a674:	78fb      	ldrb	r3, [r7, #3]
 800a676:	015a      	lsls	r2, r3, #5
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	4413      	add	r3, r2
 800a67c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	693a      	ldr	r2, [r7, #16]
 800a684:	4013      	ands	r3, r2
 800a686:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a688:	68bb      	ldr	r3, [r7, #8]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	371c      	adds	r7, #28
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr

0800a696 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a696:	b480      	push	{r7}
 800a698:	b083      	sub	sp, #12
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	695b      	ldr	r3, [r3, #20]
 800a6a2:	f003 0301 	and.w	r3, r3, #1
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr

0800a6b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a6b2:	b480      	push	{r7}
 800a6b4:	b085      	sub	sp, #20
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a6d0:	f023 0307 	bic.w	r3, r3, #7
 800a6d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	68fa      	ldr	r2, [r7, #12]
 800a6e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3714      	adds	r7, #20
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b087      	sub	sp, #28
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	460b      	mov	r3, r1
 800a702:	607a      	str	r2, [r7, #4]
 800a704:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	333c      	adds	r3, #60	; 0x3c
 800a70e:	3304      	adds	r3, #4
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	4a26      	ldr	r2, [pc, #152]	; (800a7b0 <USB_EP0_OutStart+0xb8>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d90a      	bls.n	800a732 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a728:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a72c:	d101      	bne.n	800a732 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a72e:	2300      	movs	r3, #0
 800a730:	e037      	b.n	800a7a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a738:	461a      	mov	r2, r3
 800a73a:	2300      	movs	r3, #0
 800a73c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	697a      	ldr	r2, [r7, #20]
 800a748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a74c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a750:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	697a      	ldr	r2, [r7, #20]
 800a75c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a760:	f043 0318 	orr.w	r3, r3, #24
 800a764:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	697a      	ldr	r2, [r7, #20]
 800a770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a774:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a778:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a77a:	7afb      	ldrb	r3, [r7, #11]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	d10f      	bne.n	800a7a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a786:	461a      	mov	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	697a      	ldr	r2, [r7, #20]
 800a796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a79a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a79e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	371c      	adds	r7, #28
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop
 800a7b0:	4f54300a 	.word	0x4f54300a

0800a7b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	4a13      	ldr	r2, [pc, #76]	; (800a818 <USB_CoreReset+0x64>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d901      	bls.n	800a7d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e01b      	b.n	800a80a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	daf2      	bge.n	800a7c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	f043 0201 	orr.w	r2, r3, #1
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	4a09      	ldr	r2, [pc, #36]	; (800a818 <USB_CoreReset+0x64>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d901      	bls.n	800a7fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a7f8:	2303      	movs	r3, #3
 800a7fa:	e006      	b.n	800a80a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	f003 0301 	and.w	r3, r3, #1
 800a804:	2b01      	cmp	r3, #1
 800a806:	d0f0      	beq.n	800a7ea <USB_CoreReset+0x36>

  return HAL_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3714      	adds	r7, #20
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop
 800a818:	00030d40 	.word	0x00030d40

0800a81c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	460b      	mov	r3, r1
 800a826:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a828:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a82c:	f005 fa0e 	bl	800fc4c <USBD_static_malloc>
 800a830:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d109      	bne.n	800a84c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	32b0      	adds	r2, #176	; 0xb0
 800a842:	2100      	movs	r1, #0
 800a844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a848:	2302      	movs	r3, #2
 800a84a:	e0d4      	b.n	800a9f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a84c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a850:	2100      	movs	r1, #0
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f00f ffb6 	bl	801a7c4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	32b0      	adds	r2, #176	; 0xb0
 800a862:	68f9      	ldr	r1, [r7, #12]
 800a864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	32b0      	adds	r2, #176	; 0xb0
 800a872:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	7c1b      	ldrb	r3, [r3, #16]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d138      	bne.n	800a8f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a884:	4b5e      	ldr	r3, [pc, #376]	; (800aa00 <USBD_CDC_Init+0x1e4>)
 800a886:	7819      	ldrb	r1, [r3, #0]
 800a888:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a88c:	2202      	movs	r2, #2
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f005 f8b9 	bl	800fa06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a894:	4b5a      	ldr	r3, [pc, #360]	; (800aa00 <USBD_CDC_Init+0x1e4>)
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	f003 020f 	and.w	r2, r3, #15
 800a89c:	6879      	ldr	r1, [r7, #4]
 800a89e:	4613      	mov	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	4413      	add	r3, r2
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	440b      	add	r3, r1
 800a8a8:	3324      	adds	r3, #36	; 0x24
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a8ae:	4b55      	ldr	r3, [pc, #340]	; (800aa04 <USBD_CDC_Init+0x1e8>)
 800a8b0:	7819      	ldrb	r1, [r3, #0]
 800a8b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f005 f8a4 	bl	800fa06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a8be:	4b51      	ldr	r3, [pc, #324]	; (800aa04 <USBD_CDC_Init+0x1e8>)
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	f003 020f 	and.w	r2, r3, #15
 800a8c6:	6879      	ldr	r1, [r7, #4]
 800a8c8:	4613      	mov	r3, r2
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	4413      	add	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	440b      	add	r3, r1
 800a8d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a8da:	4b4b      	ldr	r3, [pc, #300]	; (800aa08 <USBD_CDC_Init+0x1ec>)
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	f003 020f 	and.w	r2, r3, #15
 800a8e2:	6879      	ldr	r1, [r7, #4]
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	4413      	add	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	440b      	add	r3, r1
 800a8ee:	3326      	adds	r3, #38	; 0x26
 800a8f0:	2210      	movs	r2, #16
 800a8f2:	801a      	strh	r2, [r3, #0]
 800a8f4:	e035      	b.n	800a962 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a8f6:	4b42      	ldr	r3, [pc, #264]	; (800aa00 <USBD_CDC_Init+0x1e4>)
 800a8f8:	7819      	ldrb	r1, [r3, #0]
 800a8fa:	2340      	movs	r3, #64	; 0x40
 800a8fc:	2202      	movs	r2, #2
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f005 f881 	bl	800fa06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a904:	4b3e      	ldr	r3, [pc, #248]	; (800aa00 <USBD_CDC_Init+0x1e4>)
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	f003 020f 	and.w	r2, r3, #15
 800a90c:	6879      	ldr	r1, [r7, #4]
 800a90e:	4613      	mov	r3, r2
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	4413      	add	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	440b      	add	r3, r1
 800a918:	3324      	adds	r3, #36	; 0x24
 800a91a:	2201      	movs	r2, #1
 800a91c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a91e:	4b39      	ldr	r3, [pc, #228]	; (800aa04 <USBD_CDC_Init+0x1e8>)
 800a920:	7819      	ldrb	r1, [r3, #0]
 800a922:	2340      	movs	r3, #64	; 0x40
 800a924:	2202      	movs	r2, #2
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f005 f86d 	bl	800fa06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a92c:	4b35      	ldr	r3, [pc, #212]	; (800aa04 <USBD_CDC_Init+0x1e8>)
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	f003 020f 	and.w	r2, r3, #15
 800a934:	6879      	ldr	r1, [r7, #4]
 800a936:	4613      	mov	r3, r2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4413      	add	r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	440b      	add	r3, r1
 800a940:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a944:	2201      	movs	r2, #1
 800a946:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a948:	4b2f      	ldr	r3, [pc, #188]	; (800aa08 <USBD_CDC_Init+0x1ec>)
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	f003 020f 	and.w	r2, r3, #15
 800a950:	6879      	ldr	r1, [r7, #4]
 800a952:	4613      	mov	r3, r2
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	4413      	add	r3, r2
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	440b      	add	r3, r1
 800a95c:	3326      	adds	r3, #38	; 0x26
 800a95e:	2210      	movs	r2, #16
 800a960:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a962:	4b29      	ldr	r3, [pc, #164]	; (800aa08 <USBD_CDC_Init+0x1ec>)
 800a964:	7819      	ldrb	r1, [r3, #0]
 800a966:	2308      	movs	r3, #8
 800a968:	2203      	movs	r2, #3
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f005 f84b 	bl	800fa06 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a970:	4b25      	ldr	r3, [pc, #148]	; (800aa08 <USBD_CDC_Init+0x1ec>)
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	f003 020f 	and.w	r2, r3, #15
 800a978:	6879      	ldr	r1, [r7, #4]
 800a97a:	4613      	mov	r3, r2
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4413      	add	r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	440b      	add	r3, r1
 800a984:	3324      	adds	r3, #36	; 0x24
 800a986:	2201      	movs	r2, #1
 800a988:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	33b0      	adds	r3, #176	; 0xb0
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	4413      	add	r3, r2
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d101      	bne.n	800a9c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a9c0:	2302      	movs	r3, #2
 800a9c2:	e018      	b.n	800a9f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	7c1b      	ldrb	r3, [r3, #16]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d10a      	bne.n	800a9e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9cc:	4b0d      	ldr	r3, [pc, #52]	; (800aa04 <USBD_CDC_Init+0x1e8>)
 800a9ce:	7819      	ldrb	r1, [r3, #0]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f005 f902 	bl	800fbe4 <USBD_LL_PrepareReceive>
 800a9e0:	e008      	b.n	800a9f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a9e2:	4b08      	ldr	r3, [pc, #32]	; (800aa04 <USBD_CDC_Init+0x1e8>)
 800a9e4:	7819      	ldrb	r1, [r3, #0]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a9ec:	2340      	movs	r3, #64	; 0x40
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f005 f8f8 	bl	800fbe4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	20000097 	.word	0x20000097
 800aa04:	20000098 	.word	0x20000098
 800aa08:	20000099 	.word	0x20000099

0800aa0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	460b      	mov	r3, r1
 800aa16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800aa18:	4b3a      	ldr	r3, [pc, #232]	; (800ab04 <USBD_CDC_DeInit+0xf8>)
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f005 f817 	bl	800fa52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800aa24:	4b37      	ldr	r3, [pc, #220]	; (800ab04 <USBD_CDC_DeInit+0xf8>)
 800aa26:	781b      	ldrb	r3, [r3, #0]
 800aa28:	f003 020f 	and.w	r2, r3, #15
 800aa2c:	6879      	ldr	r1, [r7, #4]
 800aa2e:	4613      	mov	r3, r2
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	4413      	add	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	440b      	add	r3, r1
 800aa38:	3324      	adds	r3, #36	; 0x24
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aa3e:	4b32      	ldr	r3, [pc, #200]	; (800ab08 <USBD_CDC_DeInit+0xfc>)
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	4619      	mov	r1, r3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f005 f804 	bl	800fa52 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aa4a:	4b2f      	ldr	r3, [pc, #188]	; (800ab08 <USBD_CDC_DeInit+0xfc>)
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	f003 020f 	and.w	r2, r3, #15
 800aa52:	6879      	ldr	r1, [r7, #4]
 800aa54:	4613      	mov	r3, r2
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	4413      	add	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	440b      	add	r3, r1
 800aa5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aa62:	2200      	movs	r2, #0
 800aa64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800aa66:	4b29      	ldr	r3, [pc, #164]	; (800ab0c <USBD_CDC_DeInit+0x100>)
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f004 fff0 	bl	800fa52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800aa72:	4b26      	ldr	r3, [pc, #152]	; (800ab0c <USBD_CDC_DeInit+0x100>)
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	f003 020f 	and.w	r2, r3, #15
 800aa7a:	6879      	ldr	r1, [r7, #4]
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	4413      	add	r3, r2
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	440b      	add	r3, r1
 800aa86:	3324      	adds	r3, #36	; 0x24
 800aa88:	2200      	movs	r2, #0
 800aa8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800aa8c:	4b1f      	ldr	r3, [pc, #124]	; (800ab0c <USBD_CDC_DeInit+0x100>)
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	f003 020f 	and.w	r2, r3, #15
 800aa94:	6879      	ldr	r1, [r7, #4]
 800aa96:	4613      	mov	r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	4413      	add	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	440b      	add	r3, r1
 800aaa0:	3326      	adds	r3, #38	; 0x26
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	32b0      	adds	r2, #176	; 0xb0
 800aab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d01f      	beq.n	800aaf8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	33b0      	adds	r3, #176	; 0xb0
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4413      	add	r3, r2
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	32b0      	adds	r2, #176	; 0xb0
 800aad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aada:	4618      	mov	r0, r3
 800aadc:	f005 f8c4 	bl	800fc68 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	32b0      	adds	r2, #176	; 0xb0
 800aaea:	2100      	movs	r1, #0
 800aaec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	20000097 	.word	0x20000097
 800ab08:	20000098 	.word	0x20000098
 800ab0c:	20000099 	.word	0x20000099

0800ab10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	32b0      	adds	r2, #176	; 0xb0
 800ab24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab32:	2300      	movs	r3, #0
 800ab34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d101      	bne.n	800ab40 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ab3c:	2303      	movs	r3, #3
 800ab3e:	e0bf      	b.n	800acc0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d050      	beq.n	800abee <USBD_CDC_Setup+0xde>
 800ab4c:	2b20      	cmp	r3, #32
 800ab4e:	f040 80af 	bne.w	800acb0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	88db      	ldrh	r3, [r3, #6]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d03a      	beq.n	800abd0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	b25b      	sxtb	r3, r3
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	da1b      	bge.n	800ab9c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	33b0      	adds	r3, #176	; 0xb0
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	4413      	add	r3, r2
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	683a      	ldr	r2, [r7, #0]
 800ab78:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ab7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	88d2      	ldrh	r2, [r2, #6]
 800ab80:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	88db      	ldrh	r3, [r3, #6]
 800ab86:	2b07      	cmp	r3, #7
 800ab88:	bf28      	it	cs
 800ab8a:	2307      	movcs	r3, #7
 800ab8c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	89fa      	ldrh	r2, [r7, #14]
 800ab92:	4619      	mov	r1, r3
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f001 fd43 	bl	800c620 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ab9a:	e090      	b.n	800acbe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	785a      	ldrb	r2, [r3, #1]
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	88db      	ldrh	r3, [r3, #6]
 800abaa:	2b3f      	cmp	r3, #63	; 0x3f
 800abac:	d803      	bhi.n	800abb6 <USBD_CDC_Setup+0xa6>
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	88db      	ldrh	r3, [r3, #6]
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	e000      	b.n	800abb8 <USBD_CDC_Setup+0xa8>
 800abb6:	2240      	movs	r2, #64	; 0x40
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800abbe:	6939      	ldr	r1, [r7, #16]
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800abc6:	461a      	mov	r2, r3
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f001 fd55 	bl	800c678 <USBD_CtlPrepareRx>
      break;
 800abce:	e076      	b.n	800acbe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	33b0      	adds	r3, #176	; 0xb0
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	4413      	add	r3, r2
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	7850      	ldrb	r0, [r2, #1]
 800abe6:	2200      	movs	r2, #0
 800abe8:	6839      	ldr	r1, [r7, #0]
 800abea:	4798      	blx	r3
      break;
 800abec:	e067      	b.n	800acbe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	785b      	ldrb	r3, [r3, #1]
 800abf2:	2b0b      	cmp	r3, #11
 800abf4:	d851      	bhi.n	800ac9a <USBD_CDC_Setup+0x18a>
 800abf6:	a201      	add	r2, pc, #4	; (adr r2, 800abfc <USBD_CDC_Setup+0xec>)
 800abf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfc:	0800ac2d 	.word	0x0800ac2d
 800ac00:	0800aca9 	.word	0x0800aca9
 800ac04:	0800ac9b 	.word	0x0800ac9b
 800ac08:	0800ac9b 	.word	0x0800ac9b
 800ac0c:	0800ac9b 	.word	0x0800ac9b
 800ac10:	0800ac9b 	.word	0x0800ac9b
 800ac14:	0800ac9b 	.word	0x0800ac9b
 800ac18:	0800ac9b 	.word	0x0800ac9b
 800ac1c:	0800ac9b 	.word	0x0800ac9b
 800ac20:	0800ac9b 	.word	0x0800ac9b
 800ac24:	0800ac57 	.word	0x0800ac57
 800ac28:	0800ac81 	.word	0x0800ac81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	2b03      	cmp	r3, #3
 800ac36:	d107      	bne.n	800ac48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ac38:	f107 030a 	add.w	r3, r7, #10
 800ac3c:	2202      	movs	r2, #2
 800ac3e:	4619      	mov	r1, r3
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f001 fced 	bl	800c620 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac46:	e032      	b.n	800acae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f001 fc77 	bl	800c53e <USBD_CtlError>
            ret = USBD_FAIL;
 800ac50:	2303      	movs	r3, #3
 800ac52:	75fb      	strb	r3, [r7, #23]
          break;
 800ac54:	e02b      	b.n	800acae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	2b03      	cmp	r3, #3
 800ac60:	d107      	bne.n	800ac72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ac62:	f107 030d 	add.w	r3, r7, #13
 800ac66:	2201      	movs	r2, #1
 800ac68:	4619      	mov	r1, r3
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f001 fcd8 	bl	800c620 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac70:	e01d      	b.n	800acae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ac72:	6839      	ldr	r1, [r7, #0]
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f001 fc62 	bl	800c53e <USBD_CtlError>
            ret = USBD_FAIL;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	75fb      	strb	r3, [r7, #23]
          break;
 800ac7e:	e016      	b.n	800acae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	2b03      	cmp	r3, #3
 800ac8a:	d00f      	beq.n	800acac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ac8c:	6839      	ldr	r1, [r7, #0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f001 fc55 	bl	800c53e <USBD_CtlError>
            ret = USBD_FAIL;
 800ac94:	2303      	movs	r3, #3
 800ac96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ac98:	e008      	b.n	800acac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f001 fc4e 	bl	800c53e <USBD_CtlError>
          ret = USBD_FAIL;
 800aca2:	2303      	movs	r3, #3
 800aca4:	75fb      	strb	r3, [r7, #23]
          break;
 800aca6:	e002      	b.n	800acae <USBD_CDC_Setup+0x19e>
          break;
 800aca8:	bf00      	nop
 800acaa:	e008      	b.n	800acbe <USBD_CDC_Setup+0x1ae>
          break;
 800acac:	bf00      	nop
      }
      break;
 800acae:	e006      	b.n	800acbe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800acb0:	6839      	ldr	r1, [r7, #0]
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f001 fc43 	bl	800c53e <USBD_CtlError>
      ret = USBD_FAIL;
 800acb8:	2303      	movs	r3, #3
 800acba:	75fb      	strb	r3, [r7, #23]
      break;
 800acbc:	bf00      	nop
  }

  return (uint8_t)ret;
 800acbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3718      	adds	r7, #24
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	460b      	mov	r3, r1
 800acd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	32b0      	adds	r2, #176	; 0xb0
 800ace6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d101      	bne.n	800acf2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800acee:	2303      	movs	r3, #3
 800acf0:	e065      	b.n	800adbe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	32b0      	adds	r2, #176	; 0xb0
 800acfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ad02:	78fb      	ldrb	r3, [r7, #3]
 800ad04:	f003 020f 	and.w	r2, r3, #15
 800ad08:	6879      	ldr	r1, [r7, #4]
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	4413      	add	r3, r2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	440b      	add	r3, r1
 800ad14:	3318      	adds	r3, #24
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d02f      	beq.n	800ad7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ad1c:	78fb      	ldrb	r3, [r7, #3]
 800ad1e:	f003 020f 	and.w	r2, r3, #15
 800ad22:	6879      	ldr	r1, [r7, #4]
 800ad24:	4613      	mov	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4413      	add	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	440b      	add	r3, r1
 800ad2e:	3318      	adds	r3, #24
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	78fb      	ldrb	r3, [r7, #3]
 800ad34:	f003 010f 	and.w	r1, r3, #15
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	00db      	lsls	r3, r3, #3
 800ad3e:	440b      	add	r3, r1
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4403      	add	r3, r0
 800ad44:	3348      	adds	r3, #72	; 0x48
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad4c:	fb01 f303 	mul.w	r3, r1, r3
 800ad50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d112      	bne.n	800ad7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ad56:	78fb      	ldrb	r3, [r7, #3]
 800ad58:	f003 020f 	and.w	r2, r3, #15
 800ad5c:	6879      	ldr	r1, [r7, #4]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	4413      	add	r3, r2
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	440b      	add	r3, r1
 800ad68:	3318      	adds	r3, #24
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ad6e:	78f9      	ldrb	r1, [r7, #3]
 800ad70:	2300      	movs	r3, #0
 800ad72:	2200      	movs	r2, #0
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f004 ff14 	bl	800fba2 <USBD_LL_Transmit>
 800ad7a:	e01f      	b.n	800adbc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	33b0      	adds	r3, #176	; 0xb0
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	4413      	add	r3, r2
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	691b      	ldr	r3, [r3, #16]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d010      	beq.n	800adbc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	33b0      	adds	r3, #176	; 0xb0
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	4413      	add	r3, r2
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	691b      	ldr	r3, [r3, #16]
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800adb2:	68ba      	ldr	r2, [r7, #8]
 800adb4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800adb8:	78fa      	ldrb	r2, [r7, #3]
 800adba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}

0800adc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b084      	sub	sp, #16
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
 800adce:	460b      	mov	r3, r1
 800add0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	32b0      	adds	r2, #176	; 0xb0
 800addc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	32b0      	adds	r2, #176	; 0xb0
 800adec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d101      	bne.n	800adf8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800adf4:	2303      	movs	r3, #3
 800adf6:	e01a      	b.n	800ae2e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800adf8:	78fb      	ldrb	r3, [r7, #3]
 800adfa:	4619      	mov	r1, r3
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f004 ff12 	bl	800fc26 <USBD_LL_GetRxDataSize>
 800ae02:	4602      	mov	r2, r0
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	33b0      	adds	r3, #176	; 0xb0
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	4413      	add	r3, r2
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	68db      	ldr	r3, [r3, #12]
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ae28:	4611      	mov	r1, r2
 800ae2a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b084      	sub	sp, #16
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	32b0      	adds	r2, #176	; 0xb0
 800ae48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ae54:	2303      	movs	r3, #3
 800ae56:	e025      	b.n	800aea4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	33b0      	adds	r3, #176	; 0xb0
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	4413      	add	r3, r2
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d01a      	beq.n	800aea2 <USBD_CDC_EP0_RxReady+0x6c>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ae72:	2bff      	cmp	r3, #255	; 0xff
 800ae74:	d015      	beq.n	800aea2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	33b0      	adds	r3, #176	; 0xb0
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	4413      	add	r3, r2
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800ae8e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ae96:	b292      	uxth	r2, r2
 800ae98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	22ff      	movs	r2, #255	; 0xff
 800ae9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3710      	adds	r7, #16
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b086      	sub	sp, #24
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aeb4:	2182      	movs	r1, #130	; 0x82
 800aeb6:	4818      	ldr	r0, [pc, #96]	; (800af18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aeb8:	f000 fd09 	bl	800b8ce <USBD_GetEpDesc>
 800aebc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aebe:	2101      	movs	r1, #1
 800aec0:	4815      	ldr	r0, [pc, #84]	; (800af18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aec2:	f000 fd04 	bl	800b8ce <USBD_GetEpDesc>
 800aec6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aec8:	2181      	movs	r1, #129	; 0x81
 800aeca:	4813      	ldr	r0, [pc, #76]	; (800af18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aecc:	f000 fcff 	bl	800b8ce <USBD_GetEpDesc>
 800aed0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d002      	beq.n	800aede <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	2210      	movs	r2, #16
 800aedc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d006      	beq.n	800aef2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aeec:	711a      	strb	r2, [r3, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d006      	beq.n	800af06 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	2200      	movs	r2, #0
 800aefc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af00:	711a      	strb	r2, [r3, #4]
 800af02:	2200      	movs	r2, #0
 800af04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2243      	movs	r2, #67	; 0x43
 800af0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af0c:	4b02      	ldr	r3, [pc, #8]	; (800af18 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3718      	adds	r7, #24
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	20000054 	.word	0x20000054

0800af1c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af24:	2182      	movs	r1, #130	; 0x82
 800af26:	4818      	ldr	r0, [pc, #96]	; (800af88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af28:	f000 fcd1 	bl	800b8ce <USBD_GetEpDesc>
 800af2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af2e:	2101      	movs	r1, #1
 800af30:	4815      	ldr	r0, [pc, #84]	; (800af88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af32:	f000 fccc 	bl	800b8ce <USBD_GetEpDesc>
 800af36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af38:	2181      	movs	r1, #129	; 0x81
 800af3a:	4813      	ldr	r0, [pc, #76]	; (800af88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af3c:	f000 fcc7 	bl	800b8ce <USBD_GetEpDesc>
 800af40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d002      	beq.n	800af4e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	2210      	movs	r2, #16
 800af4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d006      	beq.n	800af62 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	2200      	movs	r2, #0
 800af58:	711a      	strb	r2, [r3, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f042 0202 	orr.w	r2, r2, #2
 800af60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d006      	beq.n	800af76 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	711a      	strb	r2, [r3, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	f042 0202 	orr.w	r2, r2, #2
 800af74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2243      	movs	r2, #67	; 0x43
 800af7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af7c:	4b02      	ldr	r3, [pc, #8]	; (800af88 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3718      	adds	r7, #24
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}
 800af86:	bf00      	nop
 800af88:	20000054 	.word	0x20000054

0800af8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b086      	sub	sp, #24
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af94:	2182      	movs	r1, #130	; 0x82
 800af96:	4818      	ldr	r0, [pc, #96]	; (800aff8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800af98:	f000 fc99 	bl	800b8ce <USBD_GetEpDesc>
 800af9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af9e:	2101      	movs	r1, #1
 800afa0:	4815      	ldr	r0, [pc, #84]	; (800aff8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800afa2:	f000 fc94 	bl	800b8ce <USBD_GetEpDesc>
 800afa6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800afa8:	2181      	movs	r1, #129	; 0x81
 800afaa:	4813      	ldr	r0, [pc, #76]	; (800aff8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800afac:	f000 fc8f 	bl	800b8ce <USBD_GetEpDesc>
 800afb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d002      	beq.n	800afbe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	2210      	movs	r2, #16
 800afbc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d006      	beq.n	800afd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afcc:	711a      	strb	r2, [r3, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d006      	beq.n	800afe6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2200      	movs	r2, #0
 800afdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800afe0:	711a      	strb	r2, [r3, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2243      	movs	r2, #67	; 0x43
 800afea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800afec:	4b02      	ldr	r3, [pc, #8]	; (800aff8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3718      	adds	r7, #24
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	20000054 	.word	0x20000054

0800affc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	220a      	movs	r2, #10
 800b008:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b00a:	4b03      	ldr	r3, [pc, #12]	; (800b018 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr
 800b018:	20000010 	.word	0x20000010

0800b01c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d101      	bne.n	800b030 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b02c:	2303      	movs	r3, #3
 800b02e:	e009      	b.n	800b044 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	33b0      	adds	r3, #176	; 0xb0
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	4413      	add	r3, r2
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b050:	b480      	push	{r7}
 800b052:	b087      	sub	sp, #28
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	32b0      	adds	r2, #176	; 0xb0
 800b066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d101      	bne.n	800b076 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b072:	2303      	movs	r3, #3
 800b074:	e008      	b.n	800b088 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	68ba      	ldr	r2, [r7, #8]
 800b07a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	687a      	ldr	r2, [r7, #4]
 800b082:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	371c      	adds	r7, #28
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b094:	b480      	push	{r7}
 800b096:	b085      	sub	sp, #20
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	32b0      	adds	r2, #176	; 0xb0
 800b0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d101      	bne.n	800b0b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b0b4:	2303      	movs	r3, #3
 800b0b6:	e004      	b.n	800b0c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	683a      	ldr	r2, [r7, #0]
 800b0bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3714      	adds	r7, #20
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0cc:	4770      	bx	lr
	...

0800b0d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	32b0      	adds	r2, #176	; 0xb0
 800b0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	32b0      	adds	r2, #176	; 0xb0
 800b0f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d101      	bne.n	800b0fe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	e018      	b.n	800b130 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	7c1b      	ldrb	r3, [r3, #16]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d10a      	bne.n	800b11c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b106:	4b0c      	ldr	r3, [pc, #48]	; (800b138 <USBD_CDC_ReceivePacket+0x68>)
 800b108:	7819      	ldrb	r1, [r3, #0]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b110:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f004 fd65 	bl	800fbe4 <USBD_LL_PrepareReceive>
 800b11a:	e008      	b.n	800b12e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b11c:	4b06      	ldr	r3, [pc, #24]	; (800b138 <USBD_CDC_ReceivePacket+0x68>)
 800b11e:	7819      	ldrb	r1, [r3, #0]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b126:	2340      	movs	r3, #64	; 0x40
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f004 fd5b 	bl	800fbe4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b12e:	2300      	movs	r3, #0
}
 800b130:	4618      	mov	r0, r3
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	20000098 	.word	0x20000098

0800b13c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b086      	sub	sp, #24
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	4613      	mov	r3, r2
 800b148:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d101      	bne.n	800b154 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b150:	2303      	movs	r3, #3
 800b152:	e01f      	b.n	800b194 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2200      	movs	r2, #0
 800b168:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d003      	beq.n	800b17a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2201      	movs	r2, #1
 800b17e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	79fa      	ldrb	r2, [r7, #7]
 800b186:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	f004 fbd5 	bl	800f938 <USBD_LL_Init>
 800b18e:	4603      	mov	r3, r0
 800b190:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b192:	7dfb      	ldrb	r3, [r7, #23]
}
 800b194:	4618      	mov	r0, r3
 800b196:	3718      	adds	r7, #24
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d101      	bne.n	800b1b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	e025      	b.n	800b200 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	683a      	ldr	r2, [r7, #0]
 800b1b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	32ae      	adds	r2, #174	; 0xae
 800b1c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00f      	beq.n	800b1f0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	32ae      	adds	r2, #174	; 0xae
 800b1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e0:	f107 020e 	add.w	r2, r7, #14
 800b1e4:	4610      	mov	r0, r2
 800b1e6:	4798      	blx	r3
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b1f6:	1c5a      	adds	r2, r3, #1
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f004 fbdd 	bl	800f9d0 <USBD_LL_Start>
 800b216:	4603      	mov	r3, r0
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b228:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	370c      	adds	r7, #12
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b084      	sub	sp, #16
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
 800b23e:	460b      	mov	r3, r1
 800b240:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b242:	2300      	movs	r3, #0
 800b244:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d009      	beq.n	800b264 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	78fa      	ldrb	r2, [r7, #3]
 800b25a:	4611      	mov	r1, r2
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	4798      	blx	r3
 800b260:	4603      	mov	r3, r0
 800b262:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b264:	7bfb      	ldrb	r3, [r7, #15]
}
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b084      	sub	sp, #16
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
 800b276:	460b      	mov	r3, r1
 800b278:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b27a:	2300      	movs	r3, #0
 800b27c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	78fa      	ldrb	r2, [r7, #3]
 800b288:	4611      	mov	r1, r2
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	4798      	blx	r3
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d001      	beq.n	800b298 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b294:	2303      	movs	r3, #3
 800b296:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b298:	7bfb      	ldrb	r3, [r7, #15]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b084      	sub	sp, #16
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
 800b2aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b2b2:	6839      	ldr	r1, [r7, #0]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f001 f908 	bl	800c4ca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b2d6:	f003 031f 	and.w	r3, r3, #31
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d01a      	beq.n	800b314 <USBD_LL_SetupStage+0x72>
 800b2de:	2b02      	cmp	r3, #2
 800b2e0:	d822      	bhi.n	800b328 <USBD_LL_SetupStage+0x86>
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d002      	beq.n	800b2ec <USBD_LL_SetupStage+0x4a>
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d00a      	beq.n	800b300 <USBD_LL_SetupStage+0x5e>
 800b2ea:	e01d      	b.n	800b328 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b2f2:	4619      	mov	r1, r3
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 fb5f 	bl	800b9b8 <USBD_StdDevReq>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	73fb      	strb	r3, [r7, #15]
      break;
 800b2fe:	e020      	b.n	800b342 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b306:	4619      	mov	r1, r3
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 fbc7 	bl	800ba9c <USBD_StdItfReq>
 800b30e:	4603      	mov	r3, r0
 800b310:	73fb      	strb	r3, [r7, #15]
      break;
 800b312:	e016      	b.n	800b342 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b31a:	4619      	mov	r1, r3
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 fc29 	bl	800bb74 <USBD_StdEPReq>
 800b322:	4603      	mov	r3, r0
 800b324:	73fb      	strb	r3, [r7, #15]
      break;
 800b326:	e00c      	b.n	800b342 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b32e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b332:	b2db      	uxtb	r3, r3
 800b334:	4619      	mov	r1, r3
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f004 fbaa 	bl	800fa90 <USBD_LL_StallEP>
 800b33c:	4603      	mov	r3, r0
 800b33e:	73fb      	strb	r3, [r7, #15]
      break;
 800b340:	bf00      	nop
  }

  return ret;
 800b342:	7bfb      	ldrb	r3, [r7, #15]
}
 800b344:	4618      	mov	r0, r3
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b086      	sub	sp, #24
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	460b      	mov	r3, r1
 800b356:	607a      	str	r2, [r7, #4]
 800b358:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b35a:	2300      	movs	r3, #0
 800b35c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b35e:	7afb      	ldrb	r3, [r7, #11]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d16e      	bne.n	800b442 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b36a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b372:	2b03      	cmp	r3, #3
 800b374:	f040 8098 	bne.w	800b4a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	689a      	ldr	r2, [r3, #8]
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	429a      	cmp	r2, r3
 800b382:	d913      	bls.n	800b3ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	689a      	ldr	r2, [r3, #8]
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	1ad2      	subs	r2, r2, r3
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	68da      	ldr	r2, [r3, #12]
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	4293      	cmp	r3, r2
 800b39c:	bf28      	it	cs
 800b39e:	4613      	movcs	r3, r2
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	6879      	ldr	r1, [r7, #4]
 800b3a4:	68f8      	ldr	r0, [r7, #12]
 800b3a6:	f001 f984 	bl	800c6b2 <USBD_CtlContinueRx>
 800b3aa:	e07d      	b.n	800b4a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b3b2:	f003 031f 	and.w	r3, r3, #31
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	d014      	beq.n	800b3e4 <USBD_LL_DataOutStage+0x98>
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	d81d      	bhi.n	800b3fa <USBD_LL_DataOutStage+0xae>
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d002      	beq.n	800b3c8 <USBD_LL_DataOutStage+0x7c>
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d003      	beq.n	800b3ce <USBD_LL_DataOutStage+0x82>
 800b3c6:	e018      	b.n	800b3fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	75bb      	strb	r3, [r7, #22]
            break;
 800b3cc:	e018      	b.n	800b400 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	68f8      	ldr	r0, [r7, #12]
 800b3da:	f000 fa5e 	bl	800b89a <USBD_CoreFindIF>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	75bb      	strb	r3, [r7, #22]
            break;
 800b3e2:	e00d      	b.n	800b400 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f000 fa60 	bl	800b8b4 <USBD_CoreFindEP>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	75bb      	strb	r3, [r7, #22]
            break;
 800b3f8:	e002      	b.n	800b400 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	75bb      	strb	r3, [r7, #22]
            break;
 800b3fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b400:	7dbb      	ldrb	r3, [r7, #22]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d119      	bne.n	800b43a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	2b03      	cmp	r3, #3
 800b410:	d113      	bne.n	800b43a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b412:	7dba      	ldrb	r2, [r7, #22]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	32ae      	adds	r2, #174	; 0xae
 800b418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b41c:	691b      	ldr	r3, [r3, #16]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00b      	beq.n	800b43a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b422:	7dba      	ldrb	r2, [r7, #22]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b42a:	7dba      	ldrb	r2, [r7, #22]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	32ae      	adds	r2, #174	; 0xae
 800b430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b434:	691b      	ldr	r3, [r3, #16]
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b43a:	68f8      	ldr	r0, [r7, #12]
 800b43c:	f001 f94a 	bl	800c6d4 <USBD_CtlSendStatus>
 800b440:	e032      	b.n	800b4a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b442:	7afb      	ldrb	r3, [r7, #11]
 800b444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	4619      	mov	r1, r3
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f000 fa31 	bl	800b8b4 <USBD_CoreFindEP>
 800b452:	4603      	mov	r3, r0
 800b454:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b456:	7dbb      	ldrb	r3, [r7, #22]
 800b458:	2bff      	cmp	r3, #255	; 0xff
 800b45a:	d025      	beq.n	800b4a8 <USBD_LL_DataOutStage+0x15c>
 800b45c:	7dbb      	ldrb	r3, [r7, #22]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d122      	bne.n	800b4a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	2b03      	cmp	r3, #3
 800b46c:	d117      	bne.n	800b49e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b46e:	7dba      	ldrb	r2, [r7, #22]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	32ae      	adds	r2, #174	; 0xae
 800b474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b478:	699b      	ldr	r3, [r3, #24]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00f      	beq.n	800b49e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b47e:	7dba      	ldrb	r2, [r7, #22]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b486:	7dba      	ldrb	r2, [r7, #22]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	32ae      	adds	r2, #174	; 0xae
 800b48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	7afa      	ldrb	r2, [r7, #11]
 800b494:	4611      	mov	r1, r2
 800b496:	68f8      	ldr	r0, [r7, #12]
 800b498:	4798      	blx	r3
 800b49a:	4603      	mov	r3, r0
 800b49c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d001      	beq.n	800b4a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b4a4:	7dfb      	ldrb	r3, [r7, #23]
 800b4a6:	e000      	b.n	800b4aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3718      	adds	r7, #24
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b086      	sub	sp, #24
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	60f8      	str	r0, [r7, #12]
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	607a      	str	r2, [r7, #4]
 800b4be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b4c0:	7afb      	ldrb	r3, [r7, #11]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d16f      	bne.n	800b5a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	3314      	adds	r3, #20
 800b4ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b4d2:	2b02      	cmp	r3, #2
 800b4d4:	d15a      	bne.n	800b58c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	689a      	ldr	r2, [r3, #8]
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d914      	bls.n	800b50c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	689a      	ldr	r2, [r3, #8]
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	1ad2      	subs	r2, r2, r3
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	6879      	ldr	r1, [r7, #4]
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f001 f8ac 	bl	800c656 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4fe:	2300      	movs	r3, #0
 800b500:	2200      	movs	r2, #0
 800b502:	2100      	movs	r1, #0
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f004 fb6d 	bl	800fbe4 <USBD_LL_PrepareReceive>
 800b50a:	e03f      	b.n	800b58c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	68da      	ldr	r2, [r3, #12]
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	429a      	cmp	r2, r3
 800b516:	d11c      	bne.n	800b552 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	685a      	ldr	r2, [r3, #4]
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b520:	429a      	cmp	r2, r3
 800b522:	d316      	bcc.n	800b552 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	685a      	ldr	r2, [r3, #4]
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b52e:	429a      	cmp	r2, r3
 800b530:	d20f      	bcs.n	800b552 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b532:	2200      	movs	r2, #0
 800b534:	2100      	movs	r1, #0
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f001 f88d 	bl	800c656 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2200      	movs	r2, #0
 800b540:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b544:	2300      	movs	r3, #0
 800b546:	2200      	movs	r2, #0
 800b548:	2100      	movs	r1, #0
 800b54a:	68f8      	ldr	r0, [r7, #12]
 800b54c:	f004 fb4a 	bl	800fbe4 <USBD_LL_PrepareReceive>
 800b550:	e01c      	b.n	800b58c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b03      	cmp	r3, #3
 800b55c:	d10f      	bne.n	800b57e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d009      	beq.n	800b57e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2200      	movs	r2, #0
 800b56e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b57e:	2180      	movs	r1, #128	; 0x80
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f004 fa85 	bl	800fa90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f001 f8b7 	bl	800c6fa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d03a      	beq.n	800b60c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f7ff fe42 	bl	800b220 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b5a4:	e032      	b.n	800b60c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b5a6:	7afb      	ldrb	r3, [r7, #11]
 800b5a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	4619      	mov	r1, r3
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f000 f97f 	bl	800b8b4 <USBD_CoreFindEP>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b5ba:	7dfb      	ldrb	r3, [r7, #23]
 800b5bc:	2bff      	cmp	r3, #255	; 0xff
 800b5be:	d025      	beq.n	800b60c <USBD_LL_DataInStage+0x15a>
 800b5c0:	7dfb      	ldrb	r3, [r7, #23]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d122      	bne.n	800b60c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	2b03      	cmp	r3, #3
 800b5d0:	d11c      	bne.n	800b60c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b5d2:	7dfa      	ldrb	r2, [r7, #23]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	32ae      	adds	r2, #174	; 0xae
 800b5d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5dc:	695b      	ldr	r3, [r3, #20]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d014      	beq.n	800b60c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b5e2:	7dfa      	ldrb	r2, [r7, #23]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b5ea:	7dfa      	ldrb	r2, [r7, #23]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	32ae      	adds	r2, #174	; 0xae
 800b5f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f4:	695b      	ldr	r3, [r3, #20]
 800b5f6:	7afa      	ldrb	r2, [r7, #11]
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	4798      	blx	r3
 800b5fe:	4603      	mov	r3, r0
 800b600:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b602:	7dbb      	ldrb	r3, [r7, #22]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d001      	beq.n	800b60c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b608:	7dbb      	ldrb	r3, [r7, #22]
 800b60a:	e000      	b.n	800b60e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3718      	adds	r7, #24
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b084      	sub	sp, #16
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b61e:	2300      	movs	r3, #0
 800b620:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2201      	movs	r2, #1
 800b626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2200      	movs	r2, #0
 800b63c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d014      	beq.n	800b67c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d00e      	beq.n	800b67c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	6852      	ldr	r2, [r2, #4]
 800b66a:	b2d2      	uxtb	r2, r2
 800b66c:	4611      	mov	r1, r2
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	4798      	blx	r3
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d001      	beq.n	800b67c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b678:	2303      	movs	r3, #3
 800b67a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b67c:	2340      	movs	r3, #64	; 0x40
 800b67e:	2200      	movs	r2, #0
 800b680:	2100      	movs	r1, #0
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f004 f9bf 	bl	800fa06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2240      	movs	r2, #64	; 0x40
 800b694:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b698:	2340      	movs	r3, #64	; 0x40
 800b69a:	2200      	movs	r2, #0
 800b69c:	2180      	movs	r1, #128	; 0x80
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f004 f9b1 	bl	800fa06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2240      	movs	r2, #64	; 0x40
 800b6ae:	621a      	str	r2, [r3, #32]

  return ret;
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b083      	sub	sp, #12
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	78fa      	ldrb	r2, [r7, #3]
 800b6ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	370c      	adds	r7, #12
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr

0800b6da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b6da:	b480      	push	{r7}
 800b6dc:	b083      	sub	sp, #12
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6e8:	b2da      	uxtb	r2, r3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2204      	movs	r2, #4
 800b6f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b6f8:	2300      	movs	r3, #0
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	370c      	adds	r7, #12
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr

0800b706 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b706:	b480      	push	{r7}
 800b708:	b083      	sub	sp, #12
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b714:	b2db      	uxtb	r3, r3
 800b716:	2b04      	cmp	r3, #4
 800b718:	d106      	bne.n	800b728 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b720:	b2da      	uxtb	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b728:	2300      	movs	r3, #0
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	370c      	adds	r7, #12
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b082      	sub	sp, #8
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b744:	b2db      	uxtb	r3, r3
 800b746:	2b03      	cmp	r3, #3
 800b748:	d110      	bne.n	800b76c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00b      	beq.n	800b76c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b75a:	69db      	ldr	r3, [r3, #28]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d005      	beq.n	800b76c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b766:	69db      	ldr	r3, [r3, #28]
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b76c:	2300      	movs	r3, #0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3708      	adds	r7, #8
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b776:	b580      	push	{r7, lr}
 800b778:	b082      	sub	sp, #8
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
 800b77e:	460b      	mov	r3, r1
 800b780:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	32ae      	adds	r2, #174	; 0xae
 800b78c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b794:	2303      	movs	r3, #3
 800b796:	e01c      	b.n	800b7d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	2b03      	cmp	r3, #3
 800b7a2:	d115      	bne.n	800b7d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	32ae      	adds	r2, #174	; 0xae
 800b7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b2:	6a1b      	ldr	r3, [r3, #32]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00b      	beq.n	800b7d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	32ae      	adds	r2, #174	; 0xae
 800b7c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c6:	6a1b      	ldr	r3, [r3, #32]
 800b7c8:	78fa      	ldrb	r2, [r7, #3]
 800b7ca:	4611      	mov	r1, r2
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}

0800b7da <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b7da:	b580      	push	{r7, lr}
 800b7dc:	b082      	sub	sp, #8
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	32ae      	adds	r2, #174	; 0xae
 800b7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d101      	bne.n	800b7fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b7f8:	2303      	movs	r3, #3
 800b7fa:	e01c      	b.n	800b836 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b802:	b2db      	uxtb	r3, r3
 800b804:	2b03      	cmp	r3, #3
 800b806:	d115      	bne.n	800b834 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	32ae      	adds	r2, #174	; 0xae
 800b812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00b      	beq.n	800b834 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	32ae      	adds	r2, #174	; 0xae
 800b826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82c:	78fa      	ldrb	r2, [r7, #3]
 800b82e:	4611      	mov	r1, r2
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b83e:	b480      	push	{r7}
 800b840:	b083      	sub	sp, #12
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b85c:	2300      	movs	r3, #0
 800b85e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00e      	beq.n	800b890 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b878:	685b      	ldr	r3, [r3, #4]
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	6852      	ldr	r2, [r2, #4]
 800b87e:	b2d2      	uxtb	r2, r2
 800b880:	4611      	mov	r1, r2
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	4798      	blx	r3
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d001      	beq.n	800b890 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b88c:	2303      	movs	r3, #3
 800b88e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b890:	7bfb      	ldrb	r3, [r7, #15]
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b89a:	b480      	push	{r7}
 800b89c:	b083      	sub	sp, #12
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b8a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	370c      	adds	r7, #12
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	460b      	mov	r3, r1
 800b8be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b8c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	370c      	adds	r7, #12
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr

0800b8ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b8ce:	b580      	push	{r7, lr}
 800b8d0:	b086      	sub	sp, #24
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	885b      	ldrh	r3, [r3, #2]
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d920      	bls.n	800b938 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	b29b      	uxth	r3, r3
 800b8fc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b8fe:	e013      	b.n	800b928 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b900:	f107 030a 	add.w	r3, r7, #10
 800b904:	4619      	mov	r1, r3
 800b906:	6978      	ldr	r0, [r7, #20]
 800b908:	f000 f81b 	bl	800b942 <USBD_GetNextDesc>
 800b90c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	785b      	ldrb	r3, [r3, #1]
 800b912:	2b05      	cmp	r3, #5
 800b914:	d108      	bne.n	800b928 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b916:	697b      	ldr	r3, [r7, #20]
 800b918:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	789b      	ldrb	r3, [r3, #2]
 800b91e:	78fa      	ldrb	r2, [r7, #3]
 800b920:	429a      	cmp	r2, r3
 800b922:	d008      	beq.n	800b936 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b924:	2300      	movs	r3, #0
 800b926:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	885b      	ldrh	r3, [r3, #2]
 800b92c:	b29a      	uxth	r2, r3
 800b92e:	897b      	ldrh	r3, [r7, #10]
 800b930:	429a      	cmp	r2, r3
 800b932:	d8e5      	bhi.n	800b900 <USBD_GetEpDesc+0x32>
 800b934:	e000      	b.n	800b938 <USBD_GetEpDesc+0x6a>
          break;
 800b936:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b938:	693b      	ldr	r3, [r7, #16]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3718      	adds	r7, #24
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}

0800b942 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b942:	b480      	push	{r7}
 800b944:	b085      	sub	sp, #20
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
 800b94a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	881a      	ldrh	r2, [r3, #0]
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	781b      	ldrb	r3, [r3, #0]
 800b958:	b29b      	uxth	r3, r3
 800b95a:	4413      	add	r3, r2
 800b95c:	b29a      	uxth	r2, r3
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	461a      	mov	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4413      	add	r3, r2
 800b96c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b96e:	68fb      	ldr	r3, [r7, #12]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3714      	adds	r7, #20
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b087      	sub	sp, #28
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	3301      	adds	r3, #1
 800b992:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b99a:	8a3b      	ldrh	r3, [r7, #16]
 800b99c:	021b      	lsls	r3, r3, #8
 800b99e:	b21a      	sxth	r2, r3
 800b9a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	b21b      	sxth	r3, r3
 800b9a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b9aa:	89fb      	ldrh	r3, [r7, #14]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	371c      	adds	r7, #28
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9ce:	2b40      	cmp	r3, #64	; 0x40
 800b9d0:	d005      	beq.n	800b9de <USBD_StdDevReq+0x26>
 800b9d2:	2b40      	cmp	r3, #64	; 0x40
 800b9d4:	d857      	bhi.n	800ba86 <USBD_StdDevReq+0xce>
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00f      	beq.n	800b9fa <USBD_StdDevReq+0x42>
 800b9da:	2b20      	cmp	r3, #32
 800b9dc:	d153      	bne.n	800ba86 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	32ae      	adds	r2, #174	; 0xae
 800b9e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ec:	689b      	ldr	r3, [r3, #8]
 800b9ee:	6839      	ldr	r1, [r7, #0]
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	4798      	blx	r3
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b9f8:	e04a      	b.n	800ba90 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	785b      	ldrb	r3, [r3, #1]
 800b9fe:	2b09      	cmp	r3, #9
 800ba00:	d83b      	bhi.n	800ba7a <USBD_StdDevReq+0xc2>
 800ba02:	a201      	add	r2, pc, #4	; (adr r2, 800ba08 <USBD_StdDevReq+0x50>)
 800ba04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba08:	0800ba5d 	.word	0x0800ba5d
 800ba0c:	0800ba71 	.word	0x0800ba71
 800ba10:	0800ba7b 	.word	0x0800ba7b
 800ba14:	0800ba67 	.word	0x0800ba67
 800ba18:	0800ba7b 	.word	0x0800ba7b
 800ba1c:	0800ba3b 	.word	0x0800ba3b
 800ba20:	0800ba31 	.word	0x0800ba31
 800ba24:	0800ba7b 	.word	0x0800ba7b
 800ba28:	0800ba53 	.word	0x0800ba53
 800ba2c:	0800ba45 	.word	0x0800ba45
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ba30:	6839      	ldr	r1, [r7, #0]
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 fa3c 	bl	800beb0 <USBD_GetDescriptor>
          break;
 800ba38:	e024      	b.n	800ba84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ba3a:	6839      	ldr	r1, [r7, #0]
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f000 fba1 	bl	800c184 <USBD_SetAddress>
          break;
 800ba42:	e01f      	b.n	800ba84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ba44:	6839      	ldr	r1, [r7, #0]
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 fbe0 	bl	800c20c <USBD_SetConfig>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	73fb      	strb	r3, [r7, #15]
          break;
 800ba50:	e018      	b.n	800ba84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ba52:	6839      	ldr	r1, [r7, #0]
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 fc83 	bl	800c360 <USBD_GetConfig>
          break;
 800ba5a:	e013      	b.n	800ba84 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ba5c:	6839      	ldr	r1, [r7, #0]
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 fcb4 	bl	800c3cc <USBD_GetStatus>
          break;
 800ba64:	e00e      	b.n	800ba84 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ba66:	6839      	ldr	r1, [r7, #0]
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 fce3 	bl	800c434 <USBD_SetFeature>
          break;
 800ba6e:	e009      	b.n	800ba84 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ba70:	6839      	ldr	r1, [r7, #0]
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fd07 	bl	800c486 <USBD_ClrFeature>
          break;
 800ba78:	e004      	b.n	800ba84 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ba7a:	6839      	ldr	r1, [r7, #0]
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 fd5e 	bl	800c53e <USBD_CtlError>
          break;
 800ba82:	bf00      	nop
      }
      break;
 800ba84:	e004      	b.n	800ba90 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ba86:	6839      	ldr	r1, [r7, #0]
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 fd58 	bl	800c53e <USBD_CtlError>
      break;
 800ba8e:	bf00      	nop
  }

  return ret;
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop

0800ba9c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800baa6:	2300      	movs	r3, #0
 800baa8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bab2:	2b40      	cmp	r3, #64	; 0x40
 800bab4:	d005      	beq.n	800bac2 <USBD_StdItfReq+0x26>
 800bab6:	2b40      	cmp	r3, #64	; 0x40
 800bab8:	d852      	bhi.n	800bb60 <USBD_StdItfReq+0xc4>
 800baba:	2b00      	cmp	r3, #0
 800babc:	d001      	beq.n	800bac2 <USBD_StdItfReq+0x26>
 800babe:	2b20      	cmp	r3, #32
 800bac0:	d14e      	bne.n	800bb60 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	3b01      	subs	r3, #1
 800bacc:	2b02      	cmp	r3, #2
 800bace:	d840      	bhi.n	800bb52 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	889b      	ldrh	r3, [r3, #4]
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	2b01      	cmp	r3, #1
 800bad8:	d836      	bhi.n	800bb48 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	889b      	ldrh	r3, [r3, #4]
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	4619      	mov	r1, r3
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f7ff fed9 	bl	800b89a <USBD_CoreFindIF>
 800bae8:	4603      	mov	r3, r0
 800baea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800baec:	7bbb      	ldrb	r3, [r7, #14]
 800baee:	2bff      	cmp	r3, #255	; 0xff
 800baf0:	d01d      	beq.n	800bb2e <USBD_StdItfReq+0x92>
 800baf2:	7bbb      	ldrb	r3, [r7, #14]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d11a      	bne.n	800bb2e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800baf8:	7bba      	ldrb	r2, [r7, #14]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	32ae      	adds	r2, #174	; 0xae
 800bafe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d00f      	beq.n	800bb28 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bb08:	7bba      	ldrb	r2, [r7, #14]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bb10:	7bba      	ldrb	r2, [r7, #14]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	32ae      	adds	r2, #174	; 0xae
 800bb16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	6839      	ldr	r1, [r7, #0]
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	4798      	blx	r3
 800bb22:	4603      	mov	r3, r0
 800bb24:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bb26:	e004      	b.n	800bb32 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bb28:	2303      	movs	r3, #3
 800bb2a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bb2c:	e001      	b.n	800bb32 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bb2e:	2303      	movs	r3, #3
 800bb30:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	88db      	ldrh	r3, [r3, #6]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d110      	bne.n	800bb5c <USBD_StdItfReq+0xc0>
 800bb3a:	7bfb      	ldrb	r3, [r7, #15]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10d      	bne.n	800bb5c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 fdc7 	bl	800c6d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bb46:	e009      	b.n	800bb5c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bb48:	6839      	ldr	r1, [r7, #0]
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 fcf7 	bl	800c53e <USBD_CtlError>
          break;
 800bb50:	e004      	b.n	800bb5c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bb52:	6839      	ldr	r1, [r7, #0]
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 fcf2 	bl	800c53e <USBD_CtlError>
          break;
 800bb5a:	e000      	b.n	800bb5e <USBD_StdItfReq+0xc2>
          break;
 800bb5c:	bf00      	nop
      }
      break;
 800bb5e:	e004      	b.n	800bb6a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bb60:	6839      	ldr	r1, [r7, #0]
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 fceb 	bl	800c53e <USBD_CtlError>
      break;
 800bb68:	bf00      	nop
  }

  return ret;
 800bb6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	889b      	ldrh	r3, [r3, #4]
 800bb86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb90:	2b40      	cmp	r3, #64	; 0x40
 800bb92:	d007      	beq.n	800bba4 <USBD_StdEPReq+0x30>
 800bb94:	2b40      	cmp	r3, #64	; 0x40
 800bb96:	f200 817f 	bhi.w	800be98 <USBD_StdEPReq+0x324>
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d02a      	beq.n	800bbf4 <USBD_StdEPReq+0x80>
 800bb9e:	2b20      	cmp	r3, #32
 800bba0:	f040 817a 	bne.w	800be98 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bba4:	7bbb      	ldrb	r3, [r7, #14]
 800bba6:	4619      	mov	r1, r3
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f7ff fe83 	bl	800b8b4 <USBD_CoreFindEP>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bbb2:	7b7b      	ldrb	r3, [r7, #13]
 800bbb4:	2bff      	cmp	r3, #255	; 0xff
 800bbb6:	f000 8174 	beq.w	800bea2 <USBD_StdEPReq+0x32e>
 800bbba:	7b7b      	ldrb	r3, [r7, #13]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f040 8170 	bne.w	800bea2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bbc2:	7b7a      	ldrb	r2, [r7, #13]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bbca:	7b7a      	ldrb	r2, [r7, #13]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	32ae      	adds	r2, #174	; 0xae
 800bbd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	f000 8163 	beq.w	800bea2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bbdc:	7b7a      	ldrb	r2, [r7, #13]
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	32ae      	adds	r2, #174	; 0xae
 800bbe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbe6:	689b      	ldr	r3, [r3, #8]
 800bbe8:	6839      	ldr	r1, [r7, #0]
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	4798      	blx	r3
 800bbee:	4603      	mov	r3, r0
 800bbf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bbf2:	e156      	b.n	800bea2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	785b      	ldrb	r3, [r3, #1]
 800bbf8:	2b03      	cmp	r3, #3
 800bbfa:	d008      	beq.n	800bc0e <USBD_StdEPReq+0x9a>
 800bbfc:	2b03      	cmp	r3, #3
 800bbfe:	f300 8145 	bgt.w	800be8c <USBD_StdEPReq+0x318>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f000 809b 	beq.w	800bd3e <USBD_StdEPReq+0x1ca>
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d03c      	beq.n	800bc86 <USBD_StdEPReq+0x112>
 800bc0c:	e13e      	b.n	800be8c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	2b02      	cmp	r3, #2
 800bc18:	d002      	beq.n	800bc20 <USBD_StdEPReq+0xac>
 800bc1a:	2b03      	cmp	r3, #3
 800bc1c:	d016      	beq.n	800bc4c <USBD_StdEPReq+0xd8>
 800bc1e:	e02c      	b.n	800bc7a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc20:	7bbb      	ldrb	r3, [r7, #14]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00d      	beq.n	800bc42 <USBD_StdEPReq+0xce>
 800bc26:	7bbb      	ldrb	r3, [r7, #14]
 800bc28:	2b80      	cmp	r3, #128	; 0x80
 800bc2a:	d00a      	beq.n	800bc42 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc2c:	7bbb      	ldrb	r3, [r7, #14]
 800bc2e:	4619      	mov	r1, r3
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f003 ff2d 	bl	800fa90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc36:	2180      	movs	r1, #128	; 0x80
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f003 ff29 	bl	800fa90 <USBD_LL_StallEP>
 800bc3e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc40:	e020      	b.n	800bc84 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bc42:	6839      	ldr	r1, [r7, #0]
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 fc7a 	bl	800c53e <USBD_CtlError>
              break;
 800bc4a:	e01b      	b.n	800bc84 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	885b      	ldrh	r3, [r3, #2]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10e      	bne.n	800bc72 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bc54:	7bbb      	ldrb	r3, [r7, #14]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d00b      	beq.n	800bc72 <USBD_StdEPReq+0xfe>
 800bc5a:	7bbb      	ldrb	r3, [r7, #14]
 800bc5c:	2b80      	cmp	r3, #128	; 0x80
 800bc5e:	d008      	beq.n	800bc72 <USBD_StdEPReq+0xfe>
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	88db      	ldrh	r3, [r3, #6]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d104      	bne.n	800bc72 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc68:	7bbb      	ldrb	r3, [r7, #14]
 800bc6a:	4619      	mov	r1, r3
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f003 ff0f 	bl	800fa90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 fd2e 	bl	800c6d4 <USBD_CtlSendStatus>

              break;
 800bc78:	e004      	b.n	800bc84 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 fc5e 	bl	800c53e <USBD_CtlError>
              break;
 800bc82:	bf00      	nop
          }
          break;
 800bc84:	e107      	b.n	800be96 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	2b02      	cmp	r3, #2
 800bc90:	d002      	beq.n	800bc98 <USBD_StdEPReq+0x124>
 800bc92:	2b03      	cmp	r3, #3
 800bc94:	d016      	beq.n	800bcc4 <USBD_StdEPReq+0x150>
 800bc96:	e04b      	b.n	800bd30 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc98:	7bbb      	ldrb	r3, [r7, #14]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00d      	beq.n	800bcba <USBD_StdEPReq+0x146>
 800bc9e:	7bbb      	ldrb	r3, [r7, #14]
 800bca0:	2b80      	cmp	r3, #128	; 0x80
 800bca2:	d00a      	beq.n	800bcba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bca4:	7bbb      	ldrb	r3, [r7, #14]
 800bca6:	4619      	mov	r1, r3
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f003 fef1 	bl	800fa90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bcae:	2180      	movs	r1, #128	; 0x80
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f003 feed 	bl	800fa90 <USBD_LL_StallEP>
 800bcb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bcb8:	e040      	b.n	800bd3c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bcba:	6839      	ldr	r1, [r7, #0]
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 fc3e 	bl	800c53e <USBD_CtlError>
              break;
 800bcc2:	e03b      	b.n	800bd3c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	885b      	ldrh	r3, [r3, #2]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d136      	bne.n	800bd3a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bccc:	7bbb      	ldrb	r3, [r7, #14]
 800bcce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d004      	beq.n	800bce0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bcd6:	7bbb      	ldrb	r3, [r7, #14]
 800bcd8:	4619      	mov	r1, r3
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f003 fef7 	bl	800face <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 fcf7 	bl	800c6d4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bce6:	7bbb      	ldrb	r3, [r7, #14]
 800bce8:	4619      	mov	r1, r3
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7ff fde2 	bl	800b8b4 <USBD_CoreFindEP>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcf4:	7b7b      	ldrb	r3, [r7, #13]
 800bcf6:	2bff      	cmp	r3, #255	; 0xff
 800bcf8:	d01f      	beq.n	800bd3a <USBD_StdEPReq+0x1c6>
 800bcfa:	7b7b      	ldrb	r3, [r7, #13]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d11c      	bne.n	800bd3a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bd00:	7b7a      	ldrb	r2, [r7, #13]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bd08:	7b7a      	ldrb	r2, [r7, #13]
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	32ae      	adds	r2, #174	; 0xae
 800bd0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd12:	689b      	ldr	r3, [r3, #8]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d010      	beq.n	800bd3a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bd18:	7b7a      	ldrb	r2, [r7, #13]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	32ae      	adds	r2, #174	; 0xae
 800bd1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	6839      	ldr	r1, [r7, #0]
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	4798      	blx	r3
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bd2e:	e004      	b.n	800bd3a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bd30:	6839      	ldr	r1, [r7, #0]
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 fc03 	bl	800c53e <USBD_CtlError>
              break;
 800bd38:	e000      	b.n	800bd3c <USBD_StdEPReq+0x1c8>
              break;
 800bd3a:	bf00      	nop
          }
          break;
 800bd3c:	e0ab      	b.n	800be96 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd44:	b2db      	uxtb	r3, r3
 800bd46:	2b02      	cmp	r3, #2
 800bd48:	d002      	beq.n	800bd50 <USBD_StdEPReq+0x1dc>
 800bd4a:	2b03      	cmp	r3, #3
 800bd4c:	d032      	beq.n	800bdb4 <USBD_StdEPReq+0x240>
 800bd4e:	e097      	b.n	800be80 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd50:	7bbb      	ldrb	r3, [r7, #14]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d007      	beq.n	800bd66 <USBD_StdEPReq+0x1f2>
 800bd56:	7bbb      	ldrb	r3, [r7, #14]
 800bd58:	2b80      	cmp	r3, #128	; 0x80
 800bd5a:	d004      	beq.n	800bd66 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bd5c:	6839      	ldr	r1, [r7, #0]
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 fbed 	bl	800c53e <USBD_CtlError>
                break;
 800bd64:	e091      	b.n	800be8a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	da0b      	bge.n	800bd86 <USBD_StdEPReq+0x212>
 800bd6e:	7bbb      	ldrb	r3, [r7, #14]
 800bd70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd74:	4613      	mov	r3, r2
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	4413      	add	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	3310      	adds	r3, #16
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	4413      	add	r3, r2
 800bd82:	3304      	adds	r3, #4
 800bd84:	e00b      	b.n	800bd9e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd86:	7bbb      	ldrb	r3, [r7, #14]
 800bd88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd8c:	4613      	mov	r3, r2
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	4413      	add	r3, r2
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	2200      	movs	r2, #0
 800bda4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	2202      	movs	r2, #2
 800bdaa:	4619      	mov	r1, r3
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 fc37 	bl	800c620 <USBD_CtlSendData>
              break;
 800bdb2:	e06a      	b.n	800be8a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bdb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	da11      	bge.n	800bde0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bdbc:	7bbb      	ldrb	r3, [r7, #14]
 800bdbe:	f003 020f 	and.w	r2, r3, #15
 800bdc2:	6879      	ldr	r1, [r7, #4]
 800bdc4:	4613      	mov	r3, r2
 800bdc6:	009b      	lsls	r3, r3, #2
 800bdc8:	4413      	add	r3, r2
 800bdca:	009b      	lsls	r3, r3, #2
 800bdcc:	440b      	add	r3, r1
 800bdce:	3324      	adds	r3, #36	; 0x24
 800bdd0:	881b      	ldrh	r3, [r3, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d117      	bne.n	800be06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bdd6:	6839      	ldr	r1, [r7, #0]
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 fbb0 	bl	800c53e <USBD_CtlError>
                  break;
 800bdde:	e054      	b.n	800be8a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bde0:	7bbb      	ldrb	r3, [r7, #14]
 800bde2:	f003 020f 	and.w	r2, r3, #15
 800bde6:	6879      	ldr	r1, [r7, #4]
 800bde8:	4613      	mov	r3, r2
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	4413      	add	r3, r2
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	440b      	add	r3, r1
 800bdf2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bdf6:	881b      	ldrh	r3, [r3, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d104      	bne.n	800be06 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bdfc:	6839      	ldr	r1, [r7, #0]
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f000 fb9d 	bl	800c53e <USBD_CtlError>
                  break;
 800be04:	e041      	b.n	800be8a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	da0b      	bge.n	800be26 <USBD_StdEPReq+0x2b2>
 800be0e:	7bbb      	ldrb	r3, [r7, #14]
 800be10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be14:	4613      	mov	r3, r2
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	4413      	add	r3, r2
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	3310      	adds	r3, #16
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	4413      	add	r3, r2
 800be22:	3304      	adds	r3, #4
 800be24:	e00b      	b.n	800be3e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be26:	7bbb      	ldrb	r3, [r7, #14]
 800be28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be2c:	4613      	mov	r3, r2
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	4413      	add	r3, r2
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	4413      	add	r3, r2
 800be3c:	3304      	adds	r3, #4
 800be3e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800be40:	7bbb      	ldrb	r3, [r7, #14]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d002      	beq.n	800be4c <USBD_StdEPReq+0x2d8>
 800be46:	7bbb      	ldrb	r3, [r7, #14]
 800be48:	2b80      	cmp	r3, #128	; 0x80
 800be4a:	d103      	bne.n	800be54 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	2200      	movs	r2, #0
 800be50:	601a      	str	r2, [r3, #0]
 800be52:	e00e      	b.n	800be72 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800be54:	7bbb      	ldrb	r3, [r7, #14]
 800be56:	4619      	mov	r1, r3
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f003 fe57 	bl	800fb0c <USBD_LL_IsStallEP>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d003      	beq.n	800be6c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	2201      	movs	r2, #1
 800be68:	601a      	str	r2, [r3, #0]
 800be6a:	e002      	b.n	800be72 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	2200      	movs	r2, #0
 800be70:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	2202      	movs	r2, #2
 800be76:	4619      	mov	r1, r3
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 fbd1 	bl	800c620 <USBD_CtlSendData>
              break;
 800be7e:	e004      	b.n	800be8a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800be80:	6839      	ldr	r1, [r7, #0]
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fb5b 	bl	800c53e <USBD_CtlError>
              break;
 800be88:	bf00      	nop
          }
          break;
 800be8a:	e004      	b.n	800be96 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800be8c:	6839      	ldr	r1, [r7, #0]
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 fb55 	bl	800c53e <USBD_CtlError>
          break;
 800be94:	bf00      	nop
      }
      break;
 800be96:	e005      	b.n	800bea4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800be98:	6839      	ldr	r1, [r7, #0]
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 fb4f 	bl	800c53e <USBD_CtlError>
      break;
 800bea0:	e000      	b.n	800bea4 <USBD_StdEPReq+0x330>
      break;
 800bea2:	bf00      	nop
  }

  return ret;
 800bea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
	...

0800beb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800beba:	2300      	movs	r3, #0
 800bebc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bebe:	2300      	movs	r3, #0
 800bec0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bec2:	2300      	movs	r3, #0
 800bec4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	885b      	ldrh	r3, [r3, #2]
 800beca:	0a1b      	lsrs	r3, r3, #8
 800becc:	b29b      	uxth	r3, r3
 800bece:	3b01      	subs	r3, #1
 800bed0:	2b06      	cmp	r3, #6
 800bed2:	f200 8128 	bhi.w	800c126 <USBD_GetDescriptor+0x276>
 800bed6:	a201      	add	r2, pc, #4	; (adr r2, 800bedc <USBD_GetDescriptor+0x2c>)
 800bed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bedc:	0800bef9 	.word	0x0800bef9
 800bee0:	0800bf11 	.word	0x0800bf11
 800bee4:	0800bf51 	.word	0x0800bf51
 800bee8:	0800c127 	.word	0x0800c127
 800beec:	0800c127 	.word	0x0800c127
 800bef0:	0800c0c7 	.word	0x0800c0c7
 800bef4:	0800c0f3 	.word	0x0800c0f3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	7c12      	ldrb	r2, [r2, #16]
 800bf04:	f107 0108 	add.w	r1, r7, #8
 800bf08:	4610      	mov	r0, r2
 800bf0a:	4798      	blx	r3
 800bf0c:	60f8      	str	r0, [r7, #12]
      break;
 800bf0e:	e112      	b.n	800c136 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	7c1b      	ldrb	r3, [r3, #16]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d10d      	bne.n	800bf34 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf20:	f107 0208 	add.w	r2, r7, #8
 800bf24:	4610      	mov	r0, r2
 800bf26:	4798      	blx	r3
 800bf28:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	2202      	movs	r2, #2
 800bf30:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bf32:	e100      	b.n	800c136 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3c:	f107 0208 	add.w	r2, r7, #8
 800bf40:	4610      	mov	r0, r2
 800bf42:	4798      	blx	r3
 800bf44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	701a      	strb	r2, [r3, #0]
      break;
 800bf4e:	e0f2      	b.n	800c136 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	885b      	ldrh	r3, [r3, #2]
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	2b05      	cmp	r3, #5
 800bf58:	f200 80ac 	bhi.w	800c0b4 <USBD_GetDescriptor+0x204>
 800bf5c:	a201      	add	r2, pc, #4	; (adr r2, 800bf64 <USBD_GetDescriptor+0xb4>)
 800bf5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf62:	bf00      	nop
 800bf64:	0800bf7d 	.word	0x0800bf7d
 800bf68:	0800bfb1 	.word	0x0800bfb1
 800bf6c:	0800bfe5 	.word	0x0800bfe5
 800bf70:	0800c019 	.word	0x0800c019
 800bf74:	0800c04d 	.word	0x0800c04d
 800bf78:	0800c081 	.word	0x0800c081
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d00b      	beq.n	800bfa0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	7c12      	ldrb	r2, [r2, #16]
 800bf94:	f107 0108 	add.w	r1, r7, #8
 800bf98:	4610      	mov	r0, r2
 800bf9a:	4798      	blx	r3
 800bf9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf9e:	e091      	b.n	800c0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfa0:	6839      	ldr	r1, [r7, #0]
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f000 facb 	bl	800c53e <USBD_CtlError>
            err++;
 800bfa8:	7afb      	ldrb	r3, [r7, #11]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	72fb      	strb	r3, [r7, #11]
          break;
 800bfae:	e089      	b.n	800c0c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00b      	beq.n	800bfd4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	7c12      	ldrb	r2, [r2, #16]
 800bfc8:	f107 0108 	add.w	r1, r7, #8
 800bfcc:	4610      	mov	r0, r2
 800bfce:	4798      	blx	r3
 800bfd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfd2:	e077      	b.n	800c0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfd4:	6839      	ldr	r1, [r7, #0]
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 fab1 	bl	800c53e <USBD_CtlError>
            err++;
 800bfdc:	7afb      	ldrb	r3, [r7, #11]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	72fb      	strb	r3, [r7, #11]
          break;
 800bfe2:	e06f      	b.n	800c0c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d00b      	beq.n	800c008 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	7c12      	ldrb	r2, [r2, #16]
 800bffc:	f107 0108 	add.w	r1, r7, #8
 800c000:	4610      	mov	r0, r2
 800c002:	4798      	blx	r3
 800c004:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c006:	e05d      	b.n	800c0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c008:	6839      	ldr	r1, [r7, #0]
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 fa97 	bl	800c53e <USBD_CtlError>
            err++;
 800c010:	7afb      	ldrb	r3, [r7, #11]
 800c012:	3301      	adds	r3, #1
 800c014:	72fb      	strb	r3, [r7, #11]
          break;
 800c016:	e055      	b.n	800c0c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c01e:	691b      	ldr	r3, [r3, #16]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00b      	beq.n	800c03c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c02a:	691b      	ldr	r3, [r3, #16]
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	7c12      	ldrb	r2, [r2, #16]
 800c030:	f107 0108 	add.w	r1, r7, #8
 800c034:	4610      	mov	r0, r2
 800c036:	4798      	blx	r3
 800c038:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c03a:	e043      	b.n	800c0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c03c:	6839      	ldr	r1, [r7, #0]
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 fa7d 	bl	800c53e <USBD_CtlError>
            err++;
 800c044:	7afb      	ldrb	r3, [r7, #11]
 800c046:	3301      	adds	r3, #1
 800c048:	72fb      	strb	r3, [r7, #11]
          break;
 800c04a:	e03b      	b.n	800c0c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c052:	695b      	ldr	r3, [r3, #20]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d00b      	beq.n	800c070 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c05e:	695b      	ldr	r3, [r3, #20]
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	7c12      	ldrb	r2, [r2, #16]
 800c064:	f107 0108 	add.w	r1, r7, #8
 800c068:	4610      	mov	r0, r2
 800c06a:	4798      	blx	r3
 800c06c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c06e:	e029      	b.n	800c0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c070:	6839      	ldr	r1, [r7, #0]
 800c072:	6878      	ldr	r0, [r7, #4]
 800c074:	f000 fa63 	bl	800c53e <USBD_CtlError>
            err++;
 800c078:	7afb      	ldrb	r3, [r7, #11]
 800c07a:	3301      	adds	r3, #1
 800c07c:	72fb      	strb	r3, [r7, #11]
          break;
 800c07e:	e021      	b.n	800c0c4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c086:	699b      	ldr	r3, [r3, #24]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00b      	beq.n	800c0a4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c092:	699b      	ldr	r3, [r3, #24]
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	7c12      	ldrb	r2, [r2, #16]
 800c098:	f107 0108 	add.w	r1, r7, #8
 800c09c:	4610      	mov	r0, r2
 800c09e:	4798      	blx	r3
 800c0a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0a2:	e00f      	b.n	800c0c4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0a4:	6839      	ldr	r1, [r7, #0]
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 fa49 	bl	800c53e <USBD_CtlError>
            err++;
 800c0ac:	7afb      	ldrb	r3, [r7, #11]
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c0b2:	e007      	b.n	800c0c4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c0b4:	6839      	ldr	r1, [r7, #0]
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fa41 	bl	800c53e <USBD_CtlError>
          err++;
 800c0bc:	7afb      	ldrb	r3, [r7, #11]
 800c0be:	3301      	adds	r3, #1
 800c0c0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c0c2:	bf00      	nop
      }
      break;
 800c0c4:	e037      	b.n	800c136 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	7c1b      	ldrb	r3, [r3, #16]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d109      	bne.n	800c0e2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0d6:	f107 0208 	add.w	r2, r7, #8
 800c0da:	4610      	mov	r0, r2
 800c0dc:	4798      	blx	r3
 800c0de:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0e0:	e029      	b.n	800c136 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c0e2:	6839      	ldr	r1, [r7, #0]
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 fa2a 	bl	800c53e <USBD_CtlError>
        err++;
 800c0ea:	7afb      	ldrb	r3, [r7, #11]
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	72fb      	strb	r3, [r7, #11]
      break;
 800c0f0:	e021      	b.n	800c136 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	7c1b      	ldrb	r3, [r3, #16]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10d      	bne.n	800c116 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c102:	f107 0208 	add.w	r2, r7, #8
 800c106:	4610      	mov	r0, r2
 800c108:	4798      	blx	r3
 800c10a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	3301      	adds	r3, #1
 800c110:	2207      	movs	r2, #7
 800c112:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c114:	e00f      	b.n	800c136 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c116:	6839      	ldr	r1, [r7, #0]
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 fa10 	bl	800c53e <USBD_CtlError>
        err++;
 800c11e:	7afb      	ldrb	r3, [r7, #11]
 800c120:	3301      	adds	r3, #1
 800c122:	72fb      	strb	r3, [r7, #11]
      break;
 800c124:	e007      	b.n	800c136 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c126:	6839      	ldr	r1, [r7, #0]
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 fa08 	bl	800c53e <USBD_CtlError>
      err++;
 800c12e:	7afb      	ldrb	r3, [r7, #11]
 800c130:	3301      	adds	r3, #1
 800c132:	72fb      	strb	r3, [r7, #11]
      break;
 800c134:	bf00      	nop
  }

  if (err != 0U)
 800c136:	7afb      	ldrb	r3, [r7, #11]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d11e      	bne.n	800c17a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	88db      	ldrh	r3, [r3, #6]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d016      	beq.n	800c172 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c144:	893b      	ldrh	r3, [r7, #8]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00e      	beq.n	800c168 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	88da      	ldrh	r2, [r3, #6]
 800c14e:	893b      	ldrh	r3, [r7, #8]
 800c150:	4293      	cmp	r3, r2
 800c152:	bf28      	it	cs
 800c154:	4613      	movcs	r3, r2
 800c156:	b29b      	uxth	r3, r3
 800c158:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c15a:	893b      	ldrh	r3, [r7, #8]
 800c15c:	461a      	mov	r2, r3
 800c15e:	68f9      	ldr	r1, [r7, #12]
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 fa5d 	bl	800c620 <USBD_CtlSendData>
 800c166:	e009      	b.n	800c17c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c168:	6839      	ldr	r1, [r7, #0]
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 f9e7 	bl	800c53e <USBD_CtlError>
 800c170:	e004      	b.n	800c17c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 faae 	bl	800c6d4 <USBD_CtlSendStatus>
 800c178:	e000      	b.n	800c17c <USBD_GetDescriptor+0x2cc>
    return;
 800c17a:	bf00      	nop
  }
}
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop

0800c184 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b084      	sub	sp, #16
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	889b      	ldrh	r3, [r3, #4]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d131      	bne.n	800c1fa <USBD_SetAddress+0x76>
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	88db      	ldrh	r3, [r3, #6]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d12d      	bne.n	800c1fa <USBD_SetAddress+0x76>
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	885b      	ldrh	r3, [r3, #2]
 800c1a2:	2b7f      	cmp	r3, #127	; 0x7f
 800c1a4:	d829      	bhi.n	800c1fa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	885b      	ldrh	r3, [r3, #2]
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b03      	cmp	r3, #3
 800c1bc:	d104      	bne.n	800c1c8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c1be:	6839      	ldr	r1, [r7, #0]
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 f9bc 	bl	800c53e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1c6:	e01d      	b.n	800c204 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	7bfa      	ldrb	r2, [r7, #15]
 800c1cc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f003 fcc5 	bl	800fb64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fa7a 	bl	800c6d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d004      	beq.n	800c1f0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2202      	movs	r2, #2
 800c1ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1ee:	e009      	b.n	800c204 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1f8:	e004      	b.n	800c204 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c1fa:	6839      	ldr	r1, [r7, #0]
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f000 f99e 	bl	800c53e <USBD_CtlError>
  }
}
 800c202:	bf00      	nop
 800c204:	bf00      	nop
 800c206:	3710      	adds	r7, #16
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c216:	2300      	movs	r3, #0
 800c218:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	885b      	ldrh	r3, [r3, #2]
 800c21e:	b2da      	uxtb	r2, r3
 800c220:	4b4e      	ldr	r3, [pc, #312]	; (800c35c <USBD_SetConfig+0x150>)
 800c222:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c224:	4b4d      	ldr	r3, [pc, #308]	; (800c35c <USBD_SetConfig+0x150>)
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d905      	bls.n	800c238 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c22c:	6839      	ldr	r1, [r7, #0]
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 f985 	bl	800c53e <USBD_CtlError>
    return USBD_FAIL;
 800c234:	2303      	movs	r3, #3
 800c236:	e08c      	b.n	800c352 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	2b02      	cmp	r3, #2
 800c242:	d002      	beq.n	800c24a <USBD_SetConfig+0x3e>
 800c244:	2b03      	cmp	r3, #3
 800c246:	d029      	beq.n	800c29c <USBD_SetConfig+0x90>
 800c248:	e075      	b.n	800c336 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c24a:	4b44      	ldr	r3, [pc, #272]	; (800c35c <USBD_SetConfig+0x150>)
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d020      	beq.n	800c294 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c252:	4b42      	ldr	r3, [pc, #264]	; (800c35c <USBD_SetConfig+0x150>)
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	461a      	mov	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c25c:	4b3f      	ldr	r3, [pc, #252]	; (800c35c <USBD_SetConfig+0x150>)
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	4619      	mov	r1, r3
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f7fe ffe7 	bl	800b236 <USBD_SetClassConfig>
 800c268:	4603      	mov	r3, r0
 800c26a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c26c:	7bfb      	ldrb	r3, [r7, #15]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d008      	beq.n	800c284 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c272:	6839      	ldr	r1, [r7, #0]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 f962 	bl	800c53e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2202      	movs	r2, #2
 800c27e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c282:	e065      	b.n	800c350 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 fa25 	bl	800c6d4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2203      	movs	r2, #3
 800c28e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c292:	e05d      	b.n	800c350 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 fa1d 	bl	800c6d4 <USBD_CtlSendStatus>
      break;
 800c29a:	e059      	b.n	800c350 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c29c:	4b2f      	ldr	r3, [pc, #188]	; (800c35c <USBD_SetConfig+0x150>)
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d112      	bne.n	800c2ca <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c2ac:	4b2b      	ldr	r3, [pc, #172]	; (800c35c <USBD_SetConfig+0x150>)
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c2b6:	4b29      	ldr	r3, [pc, #164]	; (800c35c <USBD_SetConfig+0x150>)
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f7fe ffd6 	bl	800b26e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fa06 	bl	800c6d4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c2c8:	e042      	b.n	800c350 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c2ca:	4b24      	ldr	r3, [pc, #144]	; (800c35c <USBD_SetConfig+0x150>)
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d02a      	beq.n	800c32e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	4619      	mov	r1, r3
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f7fe ffc4 	bl	800b26e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c2e6:	4b1d      	ldr	r3, [pc, #116]	; (800c35c <USBD_SetConfig+0x150>)
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c2f0:	4b1a      	ldr	r3, [pc, #104]	; (800c35c <USBD_SetConfig+0x150>)
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f7fe ff9d 	bl	800b236 <USBD_SetClassConfig>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c300:	7bfb      	ldrb	r3, [r7, #15]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00f      	beq.n	800c326 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c306:	6839      	ldr	r1, [r7, #0]
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 f918 	bl	800c53e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	b2db      	uxtb	r3, r3
 800c314:	4619      	mov	r1, r3
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f7fe ffa9 	bl	800b26e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2202      	movs	r2, #2
 800c320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c324:	e014      	b.n	800c350 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f9d4 	bl	800c6d4 <USBD_CtlSendStatus>
      break;
 800c32c:	e010      	b.n	800c350 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 f9d0 	bl	800c6d4 <USBD_CtlSendStatus>
      break;
 800c334:	e00c      	b.n	800c350 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c336:	6839      	ldr	r1, [r7, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 f900 	bl	800c53e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c33e:	4b07      	ldr	r3, [pc, #28]	; (800c35c <USBD_SetConfig+0x150>)
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	4619      	mov	r1, r3
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7fe ff92 	bl	800b26e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c34a:	2303      	movs	r3, #3
 800c34c:	73fb      	strb	r3, [r7, #15]
      break;
 800c34e:	bf00      	nop
  }

  return ret;
 800c350:	7bfb      	ldrb	r3, [r7, #15]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	2000abd0 	.word	0x2000abd0

0800c360 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	88db      	ldrh	r3, [r3, #6]
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d004      	beq.n	800c37c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c372:	6839      	ldr	r1, [r7, #0]
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 f8e2 	bl	800c53e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c37a:	e023      	b.n	800c3c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c382:	b2db      	uxtb	r3, r3
 800c384:	2b02      	cmp	r3, #2
 800c386:	dc02      	bgt.n	800c38e <USBD_GetConfig+0x2e>
 800c388:	2b00      	cmp	r3, #0
 800c38a:	dc03      	bgt.n	800c394 <USBD_GetConfig+0x34>
 800c38c:	e015      	b.n	800c3ba <USBD_GetConfig+0x5a>
 800c38e:	2b03      	cmp	r3, #3
 800c390:	d00b      	beq.n	800c3aa <USBD_GetConfig+0x4a>
 800c392:	e012      	b.n	800c3ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	3308      	adds	r3, #8
 800c39e:	2201      	movs	r2, #1
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f93c 	bl	800c620 <USBD_CtlSendData>
        break;
 800c3a8:	e00c      	b.n	800c3c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	3304      	adds	r3, #4
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 f934 	bl	800c620 <USBD_CtlSendData>
        break;
 800c3b8:	e004      	b.n	800c3c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c3ba:	6839      	ldr	r1, [r7, #0]
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 f8be 	bl	800c53e <USBD_CtlError>
        break;
 800c3c2:	bf00      	nop
}
 800c3c4:	bf00      	nop
 800c3c6:	3708      	adds	r7, #8
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d81e      	bhi.n	800c422 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	88db      	ldrh	r3, [r3, #6]
 800c3e8:	2b02      	cmp	r3, #2
 800c3ea:	d004      	beq.n	800c3f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c3ec:	6839      	ldr	r1, [r7, #0]
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 f8a5 	bl	800c53e <USBD_CtlError>
        break;
 800c3f4:	e01a      	b.n	800c42c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c402:	2b00      	cmp	r3, #0
 800c404:	d005      	beq.n	800c412 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	f043 0202 	orr.w	r2, r3, #2
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	330c      	adds	r3, #12
 800c416:	2202      	movs	r2, #2
 800c418:	4619      	mov	r1, r3
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 f900 	bl	800c620 <USBD_CtlSendData>
      break;
 800c420:	e004      	b.n	800c42c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c422:	6839      	ldr	r1, [r7, #0]
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 f88a 	bl	800c53e <USBD_CtlError>
      break;
 800c42a:	bf00      	nop
  }
}
 800c42c:	bf00      	nop
 800c42e:	3708      	adds	r7, #8
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	885b      	ldrh	r3, [r3, #2]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d107      	bne.n	800c456 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2201      	movs	r2, #1
 800c44a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 f940 	bl	800c6d4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c454:	e013      	b.n	800c47e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	885b      	ldrh	r3, [r3, #2]
 800c45a:	2b02      	cmp	r3, #2
 800c45c:	d10b      	bne.n	800c476 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	889b      	ldrh	r3, [r3, #4]
 800c462:	0a1b      	lsrs	r3, r3, #8
 800c464:	b29b      	uxth	r3, r3
 800c466:	b2da      	uxtb	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 f930 	bl	800c6d4 <USBD_CtlSendStatus>
}
 800c474:	e003      	b.n	800c47e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c476:	6839      	ldr	r1, [r7, #0]
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 f860 	bl	800c53e <USBD_CtlError>
}
 800c47e:	bf00      	nop
 800c480:	3708      	adds	r7, #8
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b082      	sub	sp, #8
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	6078      	str	r0, [r7, #4]
 800c48e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c496:	b2db      	uxtb	r3, r3
 800c498:	3b01      	subs	r3, #1
 800c49a:	2b02      	cmp	r3, #2
 800c49c:	d80b      	bhi.n	800c4b6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	885b      	ldrh	r3, [r3, #2]
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d10c      	bne.n	800c4c0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 f910 	bl	800c6d4 <USBD_CtlSendStatus>
      }
      break;
 800c4b4:	e004      	b.n	800c4c0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c4b6:	6839      	ldr	r1, [r7, #0]
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 f840 	bl	800c53e <USBD_CtlError>
      break;
 800c4be:	e000      	b.n	800c4c2 <USBD_ClrFeature+0x3c>
      break;
 800c4c0:	bf00      	nop
  }
}
 800c4c2:	bf00      	nop
 800c4c4:	3708      	adds	r7, #8
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}

0800c4ca <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c4ca:	b580      	push	{r7, lr}
 800c4cc:	b084      	sub	sp, #16
 800c4ce:	af00      	add	r7, sp, #0
 800c4d0:	6078      	str	r0, [r7, #4]
 800c4d2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	781a      	ldrb	r2, [r3, #0]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	781a      	ldrb	r2, [r3, #0]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f7ff fa41 	bl	800b97c <SWAPBYTE>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	3301      	adds	r3, #1
 800c506:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	3301      	adds	r3, #1
 800c50c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c50e:	68f8      	ldr	r0, [r7, #12]
 800c510:	f7ff fa34 	bl	800b97c <SWAPBYTE>
 800c514:	4603      	mov	r3, r0
 800c516:	461a      	mov	r2, r3
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	3301      	adds	r3, #1
 800c520:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	3301      	adds	r3, #1
 800c526:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	f7ff fa27 	bl	800b97c <SWAPBYTE>
 800c52e:	4603      	mov	r3, r0
 800c530:	461a      	mov	r2, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	80da      	strh	r2, [r3, #6]
}
 800c536:	bf00      	nop
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b082      	sub	sp, #8
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
 800c546:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c548:	2180      	movs	r1, #128	; 0x80
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f003 faa0 	bl	800fa90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c550:	2100      	movs	r1, #0
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f003 fa9c 	bl	800fa90 <USBD_LL_StallEP>
}
 800c558:	bf00      	nop
 800c55a:	3708      	adds	r7, #8
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b086      	sub	sp, #24
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c56c:	2300      	movs	r3, #0
 800c56e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d036      	beq.n	800c5e4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c57a:	6938      	ldr	r0, [r7, #16]
 800c57c:	f000 f836 	bl	800c5ec <USBD_GetLen>
 800c580:	4603      	mov	r3, r0
 800c582:	3301      	adds	r3, #1
 800c584:	b29b      	uxth	r3, r3
 800c586:	005b      	lsls	r3, r3, #1
 800c588:	b29a      	uxth	r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c58e:	7dfb      	ldrb	r3, [r7, #23]
 800c590:	68ba      	ldr	r2, [r7, #8]
 800c592:	4413      	add	r3, r2
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	7812      	ldrb	r2, [r2, #0]
 800c598:	701a      	strb	r2, [r3, #0]
  idx++;
 800c59a:	7dfb      	ldrb	r3, [r7, #23]
 800c59c:	3301      	adds	r3, #1
 800c59e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c5a0:	7dfb      	ldrb	r3, [r7, #23]
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	2203      	movs	r2, #3
 800c5a8:	701a      	strb	r2, [r3, #0]
  idx++;
 800c5aa:	7dfb      	ldrb	r3, [r7, #23]
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c5b0:	e013      	b.n	800c5da <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c5b2:	7dfb      	ldrb	r3, [r7, #23]
 800c5b4:	68ba      	ldr	r2, [r7, #8]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	693a      	ldr	r2, [r7, #16]
 800c5ba:	7812      	ldrb	r2, [r2, #0]
 800c5bc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	613b      	str	r3, [r7, #16]
    idx++;
 800c5c4:	7dfb      	ldrb	r3, [r7, #23]
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c5ca:	7dfb      	ldrb	r3, [r7, #23]
 800c5cc:	68ba      	ldr	r2, [r7, #8]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	701a      	strb	r2, [r3, #0]
    idx++;
 800c5d4:	7dfb      	ldrb	r3, [r7, #23]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1e7      	bne.n	800c5b2 <USBD_GetString+0x52>
 800c5e2:	e000      	b.n	800c5e6 <USBD_GetString+0x86>
    return;
 800c5e4:	bf00      	nop
  }
}
 800c5e6:	3718      	adds	r7, #24
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b085      	sub	sp, #20
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c5fc:	e005      	b.n	800c60a <USBD_GetLen+0x1e>
  {
    len++;
 800c5fe:	7bfb      	ldrb	r3, [r7, #15]
 800c600:	3301      	adds	r3, #1
 800c602:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	3301      	adds	r3, #1
 800c608:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d1f5      	bne.n	800c5fe <USBD_GetLen+0x12>
  }

  return len;
 800c612:	7bfb      	ldrb	r3, [r7, #15]
}
 800c614:	4618      	mov	r0, r3
 800c616:	3714      	adds	r7, #20
 800c618:	46bd      	mov	sp, r7
 800c61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61e:	4770      	bx	lr

0800c620 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2202      	movs	r2, #2
 800c630:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	687a      	ldr	r2, [r7, #4]
 800c638:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	68ba      	ldr	r2, [r7, #8]
 800c644:	2100      	movs	r1, #0
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f003 faab 	bl	800fba2 <USBD_LL_Transmit>

  return USBD_OK;
 800c64c:	2300      	movs	r3, #0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3710      	adds	r7, #16
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}

0800c656 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b084      	sub	sp, #16
 800c65a:	af00      	add	r7, sp, #0
 800c65c:	60f8      	str	r0, [r7, #12]
 800c65e:	60b9      	str	r1, [r7, #8]
 800c660:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	68ba      	ldr	r2, [r7, #8]
 800c666:	2100      	movs	r1, #0
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f003 fa9a 	bl	800fba2 <USBD_LL_Transmit>

  return USBD_OK;
 800c66e:	2300      	movs	r3, #0
}
 800c670:	4618      	mov	r0, r3
 800c672:	3710      	adds	r7, #16
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	60b9      	str	r1, [r7, #8]
 800c682:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2203      	movs	r2, #3
 800c688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	68ba      	ldr	r2, [r7, #8]
 800c6a0:	2100      	movs	r1, #0
 800c6a2:	68f8      	ldr	r0, [r7, #12]
 800c6a4:	f003 fa9e 	bl	800fbe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6a8:	2300      	movs	r3, #0
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3710      	adds	r7, #16
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}

0800c6b2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c6b2:	b580      	push	{r7, lr}
 800c6b4:	b084      	sub	sp, #16
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	60f8      	str	r0, [r7, #12]
 800c6ba:	60b9      	str	r1, [r7, #8]
 800c6bc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	68ba      	ldr	r2, [r7, #8]
 800c6c2:	2100      	movs	r1, #0
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	f003 fa8d 	bl	800fbe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6ca:	2300      	movs	r3, #0
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3710      	adds	r7, #16
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}

0800c6d4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2204      	movs	r2, #4
 800c6e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f003 fa59 	bl	800fba2 <USBD_LL_Transmit>

  return USBD_OK;
 800c6f0:	2300      	movs	r3, #0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}

0800c6fa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c6fa:	b580      	push	{r7, lr}
 800c6fc:	b082      	sub	sp, #8
 800c6fe:	af00      	add	r7, sp, #0
 800c700:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2205      	movs	r2, #5
 800c706:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c70a:	2300      	movs	r3, #0
 800c70c:	2200      	movs	r2, #0
 800c70e:	2100      	movs	r1, #0
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f003 fa67 	bl	800fbe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c716:	2300      	movs	r3, #0
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3708      	adds	r7, #8
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <__NVIC_SetPriority>:
{
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	4603      	mov	r3, r0
 800c728:	6039      	str	r1, [r7, #0]
 800c72a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c72c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c730:	2b00      	cmp	r3, #0
 800c732:	db0a      	blt.n	800c74a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	b2da      	uxtb	r2, r3
 800c738:	490c      	ldr	r1, [pc, #48]	; (800c76c <__NVIC_SetPriority+0x4c>)
 800c73a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c73e:	0112      	lsls	r2, r2, #4
 800c740:	b2d2      	uxtb	r2, r2
 800c742:	440b      	add	r3, r1
 800c744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c748:	e00a      	b.n	800c760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	b2da      	uxtb	r2, r3
 800c74e:	4908      	ldr	r1, [pc, #32]	; (800c770 <__NVIC_SetPriority+0x50>)
 800c750:	79fb      	ldrb	r3, [r7, #7]
 800c752:	f003 030f 	and.w	r3, r3, #15
 800c756:	3b04      	subs	r3, #4
 800c758:	0112      	lsls	r2, r2, #4
 800c75a:	b2d2      	uxtb	r2, r2
 800c75c:	440b      	add	r3, r1
 800c75e:	761a      	strb	r2, [r3, #24]
}
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr
 800c76c:	e000e100 	.word	0xe000e100
 800c770:	e000ed00 	.word	0xe000ed00

0800c774 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c774:	b580      	push	{r7, lr}
 800c776:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c778:	4b05      	ldr	r3, [pc, #20]	; (800c790 <SysTick_Handler+0x1c>)
 800c77a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c77c:	f001 fd4e 	bl	800e21c <xTaskGetSchedulerState>
 800c780:	4603      	mov	r3, r0
 800c782:	2b01      	cmp	r3, #1
 800c784:	d001      	beq.n	800c78a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c786:	f002 fb37 	bl	800edf8 <xPortSysTickHandler>
  }
}
 800c78a:	bf00      	nop
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	e000e010 	.word	0xe000e010

0800c794 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c794:	b580      	push	{r7, lr}
 800c796:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c798:	2100      	movs	r1, #0
 800c79a:	f06f 0004 	mvn.w	r0, #4
 800c79e:	f7ff ffbf 	bl	800c720 <__NVIC_SetPriority>
#endif
}
 800c7a2:	bf00      	nop
 800c7a4:	bd80      	pop	{r7, pc}
	...

0800c7a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7ae:	f3ef 8305 	mrs	r3, IPSR
 800c7b2:	603b      	str	r3, [r7, #0]
  return(result);
 800c7b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d003      	beq.n	800c7c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c7ba:	f06f 0305 	mvn.w	r3, #5
 800c7be:	607b      	str	r3, [r7, #4]
 800c7c0:	e00c      	b.n	800c7dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c7c2:	4b0a      	ldr	r3, [pc, #40]	; (800c7ec <osKernelInitialize+0x44>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d105      	bne.n	800c7d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c7ca:	4b08      	ldr	r3, [pc, #32]	; (800c7ec <osKernelInitialize+0x44>)
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	607b      	str	r3, [r7, #4]
 800c7d4:	e002      	b.n	800c7dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c7d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c7dc:	687b      	ldr	r3, [r7, #4]
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop
 800c7ec:	2000abd4 	.word	0x2000abd4

0800c7f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7f6:	f3ef 8305 	mrs	r3, IPSR
 800c7fa:	603b      	str	r3, [r7, #0]
  return(result);
 800c7fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d003      	beq.n	800c80a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c802:	f06f 0305 	mvn.w	r3, #5
 800c806:	607b      	str	r3, [r7, #4]
 800c808:	e010      	b.n	800c82c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c80a:	4b0b      	ldr	r3, [pc, #44]	; (800c838 <osKernelStart+0x48>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d109      	bne.n	800c826 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c812:	f7ff ffbf 	bl	800c794 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c816:	4b08      	ldr	r3, [pc, #32]	; (800c838 <osKernelStart+0x48>)
 800c818:	2202      	movs	r2, #2
 800c81a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c81c:	f001 f87c 	bl	800d918 <vTaskStartScheduler>
      stat = osOK;
 800c820:	2300      	movs	r3, #0
 800c822:	607b      	str	r3, [r7, #4]
 800c824:	e002      	b.n	800c82c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c82a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c82c:	687b      	ldr	r3, [r7, #4]
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	2000abd4 	.word	0x2000abd4

0800c83c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08e      	sub	sp, #56	; 0x38
 800c840:	af04      	add	r7, sp, #16
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c848:	2300      	movs	r3, #0
 800c84a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c84c:	f3ef 8305 	mrs	r3, IPSR
 800c850:	617b      	str	r3, [r7, #20]
  return(result);
 800c852:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c854:	2b00      	cmp	r3, #0
 800c856:	d17e      	bne.n	800c956 <osThreadNew+0x11a>
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d07b      	beq.n	800c956 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c85e:	2380      	movs	r3, #128	; 0x80
 800c860:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c862:	2318      	movs	r3, #24
 800c864:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c866:	2300      	movs	r3, #0
 800c868:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c86a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c86e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d045      	beq.n	800c902 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d002      	beq.n	800c884 <osThreadNew+0x48>
        name = attr->name;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	699b      	ldr	r3, [r3, #24]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d002      	beq.n	800c892 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	699b      	ldr	r3, [r3, #24]
 800c890:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d008      	beq.n	800c8aa <osThreadNew+0x6e>
 800c898:	69fb      	ldr	r3, [r7, #28]
 800c89a:	2b38      	cmp	r3, #56	; 0x38
 800c89c:	d805      	bhi.n	800c8aa <osThreadNew+0x6e>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	f003 0301 	and.w	r3, r3, #1
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d001      	beq.n	800c8ae <osThreadNew+0x72>
        return (NULL);
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	e054      	b.n	800c958 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	695b      	ldr	r3, [r3, #20]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d003      	beq.n	800c8be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	695b      	ldr	r3, [r3, #20]
 800c8ba:	089b      	lsrs	r3, r3, #2
 800c8bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d00e      	beq.n	800c8e4 <osThreadNew+0xa8>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	2bbb      	cmp	r3, #187	; 0xbb
 800c8cc:	d90a      	bls.n	800c8e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d006      	beq.n	800c8e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	695b      	ldr	r3, [r3, #20]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d002      	beq.n	800c8e4 <osThreadNew+0xa8>
        mem = 1;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	61bb      	str	r3, [r7, #24]
 800c8e2:	e010      	b.n	800c906 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d10c      	bne.n	800c906 <osThreadNew+0xca>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d108      	bne.n	800c906 <osThreadNew+0xca>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	691b      	ldr	r3, [r3, #16]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d104      	bne.n	800c906 <osThreadNew+0xca>
          mem = 0;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	61bb      	str	r3, [r7, #24]
 800c900:	e001      	b.n	800c906 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c902:	2300      	movs	r3, #0
 800c904:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d110      	bne.n	800c92e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c914:	9202      	str	r2, [sp, #8]
 800c916:	9301      	str	r3, [sp, #4]
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	9300      	str	r3, [sp, #0]
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	6a3a      	ldr	r2, [r7, #32]
 800c920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c922:	68f8      	ldr	r0, [r7, #12]
 800c924:	f000 fe0c 	bl	800d540 <xTaskCreateStatic>
 800c928:	4603      	mov	r3, r0
 800c92a:	613b      	str	r3, [r7, #16]
 800c92c:	e013      	b.n	800c956 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c92e:	69bb      	ldr	r3, [r7, #24]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d110      	bne.n	800c956 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c934:	6a3b      	ldr	r3, [r7, #32]
 800c936:	b29a      	uxth	r2, r3
 800c938:	f107 0310 	add.w	r3, r7, #16
 800c93c:	9301      	str	r3, [sp, #4]
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c946:	68f8      	ldr	r0, [r7, #12]
 800c948:	f000 fe57 	bl	800d5fa <xTaskCreate>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d001      	beq.n	800c956 <osThreadNew+0x11a>
            hTask = NULL;
 800c952:	2300      	movs	r3, #0
 800c954:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c956:	693b      	ldr	r3, [r7, #16]
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3728      	adds	r7, #40	; 0x28
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c968:	f3ef 8305 	mrs	r3, IPSR
 800c96c:	60bb      	str	r3, [r7, #8]
  return(result);
 800c96e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c970:	2b00      	cmp	r3, #0
 800c972:	d003      	beq.n	800c97c <osDelay+0x1c>
    stat = osErrorISR;
 800c974:	f06f 0305 	mvn.w	r3, #5
 800c978:	60fb      	str	r3, [r7, #12]
 800c97a:	e007      	b.n	800c98c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c97c:	2300      	movs	r3, #0
 800c97e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d002      	beq.n	800c98c <osDelay+0x2c>
      vTaskDelay(ticks);
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 ff92 	bl	800d8b0 <vTaskDelay>
    }
  }

  return (stat);
 800c98c:	68fb      	ldr	r3, [r7, #12]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3710      	adds	r7, #16
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
	...

0800c998 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c998:	b480      	push	{r7}
 800c99a:	b085      	sub	sp, #20
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	4a07      	ldr	r2, [pc, #28]	; (800c9c4 <vApplicationGetIdleTaskMemory+0x2c>)
 800c9a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	4a06      	ldr	r2, [pc, #24]	; (800c9c8 <vApplicationGetIdleTaskMemory+0x30>)
 800c9ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2280      	movs	r2, #128	; 0x80
 800c9b4:	601a      	str	r2, [r3, #0]
}
 800c9b6:	bf00      	nop
 800c9b8:	3714      	adds	r7, #20
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr
 800c9c2:	bf00      	nop
 800c9c4:	2000abd8 	.word	0x2000abd8
 800c9c8:	2000ac94 	.word	0x2000ac94

0800c9cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c9cc:	b480      	push	{r7}
 800c9ce:	b085      	sub	sp, #20
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	60b9      	str	r1, [r7, #8]
 800c9d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	4a07      	ldr	r2, [pc, #28]	; (800c9f8 <vApplicationGetTimerTaskMemory+0x2c>)
 800c9dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	4a06      	ldr	r2, [pc, #24]	; (800c9fc <vApplicationGetTimerTaskMemory+0x30>)
 800c9e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c9ea:	601a      	str	r2, [r3, #0]
}
 800c9ec:	bf00      	nop
 800c9ee:	3714      	adds	r7, #20
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr
 800c9f8:	2000ae94 	.word	0x2000ae94
 800c9fc:	2000af50 	.word	0x2000af50

0800ca00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ca00:	b480      	push	{r7}
 800ca02:	b083      	sub	sp, #12
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f103 0208 	add.w	r2, r3, #8
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f103 0208 	add.w	r2, r3, #8
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f103 0208 	add.w	r2, r3, #8
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2200      	movs	r2, #0
 800ca32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ca34:	bf00      	nop
 800ca36:	370c      	adds	r7, #12
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ca4e:	bf00      	nop
 800ca50:	370c      	adds	r7, #12
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr

0800ca5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ca5a:	b480      	push	{r7}
 800ca5c:	b085      	sub	sp, #20
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
 800ca62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	689a      	ldr	r2, [r3, #8]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	683a      	ldr	r2, [r7, #0]
 800ca84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	1c5a      	adds	r2, r3, #1
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	601a      	str	r2, [r3, #0]
}
 800ca96:	bf00      	nop
 800ca98:	3714      	adds	r7, #20
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr

0800caa2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800caa2:	b480      	push	{r7}
 800caa4:	b085      	sub	sp, #20
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
 800caaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cab8:	d103      	bne.n	800cac2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	691b      	ldr	r3, [r3, #16]
 800cabe:	60fb      	str	r3, [r7, #12]
 800cac0:	e00c      	b.n	800cadc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	3308      	adds	r3, #8
 800cac6:	60fb      	str	r3, [r7, #12]
 800cac8:	e002      	b.n	800cad0 <vListInsert+0x2e>
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	60fb      	str	r3, [r7, #12]
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	685b      	ldr	r3, [r3, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68ba      	ldr	r2, [r7, #8]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d2f6      	bcs.n	800caca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	685a      	ldr	r2, [r3, #4]
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	685b      	ldr	r3, [r3, #4]
 800cae8:	683a      	ldr	r2, [r7, #0]
 800caea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	68fa      	ldr	r2, [r7, #12]
 800caf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	683a      	ldr	r2, [r7, #0]
 800caf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	1c5a      	adds	r2, r3, #1
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	601a      	str	r2, [r3, #0]
}
 800cb08:	bf00      	nop
 800cb0a:	3714      	adds	r7, #20
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr

0800cb14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cb14:	b480      	push	{r7}
 800cb16:	b085      	sub	sp, #20
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	691b      	ldr	r3, [r3, #16]
 800cb20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	6892      	ldr	r2, [r2, #8]
 800cb2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	6852      	ldr	r2, [r2, #4]
 800cb34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	d103      	bne.n	800cb48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	689a      	ldr	r2, [r3, #8]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	1e5a      	subs	r2, r3, #1
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3714      	adds	r7, #20
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d10a      	bne.n	800cb92 <xQueueGenericReset+0x2a>
	__asm volatile
 800cb7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb80:	f383 8811 	msr	BASEPRI, r3
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	f3bf 8f4f 	dsb	sy
 800cb8c:	60bb      	str	r3, [r7, #8]
}
 800cb8e:	bf00      	nop
 800cb90:	e7fe      	b.n	800cb90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cb92:	f002 f89f 	bl	800ecd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb9e:	68f9      	ldr	r1, [r7, #12]
 800cba0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cba2:	fb01 f303 	mul.w	r3, r1, r3
 800cba6:	441a      	add	r2, r3
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbc2:	3b01      	subs	r3, #1
 800cbc4:	68f9      	ldr	r1, [r7, #12]
 800cbc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cbc8:	fb01 f303 	mul.w	r3, r1, r3
 800cbcc:	441a      	add	r2, r3
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	22ff      	movs	r2, #255	; 0xff
 800cbd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	22ff      	movs	r2, #255	; 0xff
 800cbde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d114      	bne.n	800cc12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	691b      	ldr	r3, [r3, #16]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d01a      	beq.n	800cc26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	3310      	adds	r3, #16
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f001 f929 	bl	800de4c <xTaskRemoveFromEventList>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d012      	beq.n	800cc26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cc00:	4b0c      	ldr	r3, [pc, #48]	; (800cc34 <xQueueGenericReset+0xcc>)
 800cc02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc06:	601a      	str	r2, [r3, #0]
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	f3bf 8f6f 	isb	sy
 800cc10:	e009      	b.n	800cc26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	3310      	adds	r3, #16
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff fef2 	bl	800ca00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	3324      	adds	r3, #36	; 0x24
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7ff feed 	bl	800ca00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cc26:	f002 f885 	bl	800ed34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cc2a:	2301      	movs	r3, #1
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3710      	adds	r7, #16
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	e000ed04 	.word	0xe000ed04

0800cc38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b08e      	sub	sp, #56	; 0x38
 800cc3c:	af02      	add	r7, sp, #8
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
 800cc44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d10a      	bne.n	800cc62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc50:	f383 8811 	msr	BASEPRI, r3
 800cc54:	f3bf 8f6f 	isb	sy
 800cc58:	f3bf 8f4f 	dsb	sy
 800cc5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cc5e:	bf00      	nop
 800cc60:	e7fe      	b.n	800cc60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d10a      	bne.n	800cc7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc6c:	f383 8811 	msr	BASEPRI, r3
 800cc70:	f3bf 8f6f 	isb	sy
 800cc74:	f3bf 8f4f 	dsb	sy
 800cc78:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc7a:	bf00      	nop
 800cc7c:	e7fe      	b.n	800cc7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d002      	beq.n	800cc8a <xQueueGenericCreateStatic+0x52>
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d001      	beq.n	800cc8e <xQueueGenericCreateStatic+0x56>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	e000      	b.n	800cc90 <xQueueGenericCreateStatic+0x58>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10a      	bne.n	800ccaa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cc94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc98:	f383 8811 	msr	BASEPRI, r3
 800cc9c:	f3bf 8f6f 	isb	sy
 800cca0:	f3bf 8f4f 	dsb	sy
 800cca4:	623b      	str	r3, [r7, #32]
}
 800cca6:	bf00      	nop
 800cca8:	e7fe      	b.n	800cca8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d102      	bne.n	800ccb6 <xQueueGenericCreateStatic+0x7e>
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d101      	bne.n	800ccba <xQueueGenericCreateStatic+0x82>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e000      	b.n	800ccbc <xQueueGenericCreateStatic+0x84>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d10a      	bne.n	800ccd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ccc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc4:	f383 8811 	msr	BASEPRI, r3
 800ccc8:	f3bf 8f6f 	isb	sy
 800cccc:	f3bf 8f4f 	dsb	sy
 800ccd0:	61fb      	str	r3, [r7, #28]
}
 800ccd2:	bf00      	nop
 800ccd4:	e7fe      	b.n	800ccd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ccd6:	2350      	movs	r3, #80	; 0x50
 800ccd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	2b50      	cmp	r3, #80	; 0x50
 800ccde:	d00a      	beq.n	800ccf6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce4:	f383 8811 	msr	BASEPRI, r3
 800cce8:	f3bf 8f6f 	isb	sy
 800ccec:	f3bf 8f4f 	dsb	sy
 800ccf0:	61bb      	str	r3, [r7, #24]
}
 800ccf2:	bf00      	nop
 800ccf4:	e7fe      	b.n	800ccf4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ccf6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ccfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d00d      	beq.n	800cd1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd04:	2201      	movs	r2, #1
 800cd06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cd0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800cd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd10:	9300      	str	r3, [sp, #0]
 800cd12:	4613      	mov	r3, r2
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	68b9      	ldr	r1, [r7, #8]
 800cd18:	68f8      	ldr	r0, [r7, #12]
 800cd1a:	f000 f805 	bl	800cd28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3730      	adds	r7, #48	; 0x30
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
 800cd34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d103      	bne.n	800cd44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cd3c:	69bb      	ldr	r3, [r7, #24]
 800cd3e:	69ba      	ldr	r2, [r7, #24]
 800cd40:	601a      	str	r2, [r3, #0]
 800cd42:	e002      	b.n	800cd4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cd44:	69bb      	ldr	r3, [r7, #24]
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	68fa      	ldr	r2, [r7, #12]
 800cd4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cd50:	69bb      	ldr	r3, [r7, #24]
 800cd52:	68ba      	ldr	r2, [r7, #8]
 800cd54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cd56:	2101      	movs	r1, #1
 800cd58:	69b8      	ldr	r0, [r7, #24]
 800cd5a:	f7ff ff05 	bl	800cb68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	78fa      	ldrb	r2, [r7, #3]
 800cd62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cd66:	bf00      	nop
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
	...

0800cd70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b08e      	sub	sp, #56	; 0x38
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	607a      	str	r2, [r7, #4]
 800cd7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d10a      	bne.n	800cda2 <xQueueGenericSend+0x32>
	__asm volatile
 800cd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd90:	f383 8811 	msr	BASEPRI, r3
 800cd94:	f3bf 8f6f 	isb	sy
 800cd98:	f3bf 8f4f 	dsb	sy
 800cd9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd9e:	bf00      	nop
 800cda0:	e7fe      	b.n	800cda0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d103      	bne.n	800cdb0 <xQueueGenericSend+0x40>
 800cda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d101      	bne.n	800cdb4 <xQueueGenericSend+0x44>
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e000      	b.n	800cdb6 <xQueueGenericSend+0x46>
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d10a      	bne.n	800cdd0 <xQueueGenericSend+0x60>
	__asm volatile
 800cdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdbe:	f383 8811 	msr	BASEPRI, r3
 800cdc2:	f3bf 8f6f 	isb	sy
 800cdc6:	f3bf 8f4f 	dsb	sy
 800cdca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cdcc:	bf00      	nop
 800cdce:	e7fe      	b.n	800cdce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	2b02      	cmp	r3, #2
 800cdd4:	d103      	bne.n	800cdde <xQueueGenericSend+0x6e>
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d101      	bne.n	800cde2 <xQueueGenericSend+0x72>
 800cdde:	2301      	movs	r3, #1
 800cde0:	e000      	b.n	800cde4 <xQueueGenericSend+0x74>
 800cde2:	2300      	movs	r3, #0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d10a      	bne.n	800cdfe <xQueueGenericSend+0x8e>
	__asm volatile
 800cde8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdec:	f383 8811 	msr	BASEPRI, r3
 800cdf0:	f3bf 8f6f 	isb	sy
 800cdf4:	f3bf 8f4f 	dsb	sy
 800cdf8:	623b      	str	r3, [r7, #32]
}
 800cdfa:	bf00      	nop
 800cdfc:	e7fe      	b.n	800cdfc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cdfe:	f001 fa0d 	bl	800e21c <xTaskGetSchedulerState>
 800ce02:	4603      	mov	r3, r0
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d102      	bne.n	800ce0e <xQueueGenericSend+0x9e>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d101      	bne.n	800ce12 <xQueueGenericSend+0xa2>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	e000      	b.n	800ce14 <xQueueGenericSend+0xa4>
 800ce12:	2300      	movs	r3, #0
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d10a      	bne.n	800ce2e <xQueueGenericSend+0xbe>
	__asm volatile
 800ce18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce1c:	f383 8811 	msr	BASEPRI, r3
 800ce20:	f3bf 8f6f 	isb	sy
 800ce24:	f3bf 8f4f 	dsb	sy
 800ce28:	61fb      	str	r3, [r7, #28]
}
 800ce2a:	bf00      	nop
 800ce2c:	e7fe      	b.n	800ce2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce2e:	f001 ff51 	bl	800ecd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ce32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce3a:	429a      	cmp	r2, r3
 800ce3c:	d302      	bcc.n	800ce44 <xQueueGenericSend+0xd4>
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	2b02      	cmp	r3, #2
 800ce42:	d129      	bne.n	800ce98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ce44:	683a      	ldr	r2, [r7, #0]
 800ce46:	68b9      	ldr	r1, [r7, #8]
 800ce48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ce4a:	f000 fa0b 	bl	800d264 <prvCopyDataToQueue>
 800ce4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d010      	beq.n	800ce7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce5a:	3324      	adds	r3, #36	; 0x24
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f000 fff5 	bl	800de4c <xTaskRemoveFromEventList>
 800ce62:	4603      	mov	r3, r0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d013      	beq.n	800ce90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ce68:	4b3f      	ldr	r3, [pc, #252]	; (800cf68 <xQueueGenericSend+0x1f8>)
 800ce6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce6e:	601a      	str	r2, [r3, #0]
 800ce70:	f3bf 8f4f 	dsb	sy
 800ce74:	f3bf 8f6f 	isb	sy
 800ce78:	e00a      	b.n	800ce90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ce7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d007      	beq.n	800ce90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ce80:	4b39      	ldr	r3, [pc, #228]	; (800cf68 <xQueueGenericSend+0x1f8>)
 800ce82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce86:	601a      	str	r2, [r3, #0]
 800ce88:	f3bf 8f4f 	dsb	sy
 800ce8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ce90:	f001 ff50 	bl	800ed34 <vPortExitCritical>
				return pdPASS;
 800ce94:	2301      	movs	r3, #1
 800ce96:	e063      	b.n	800cf60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d103      	bne.n	800cea6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ce9e:	f001 ff49 	bl	800ed34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cea2:	2300      	movs	r3, #0
 800cea4:	e05c      	b.n	800cf60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d106      	bne.n	800ceba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ceac:	f107 0314 	add.w	r3, r7, #20
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f001 f855 	bl	800df60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ceba:	f001 ff3b 	bl	800ed34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cebe:	f000 fd9b 	bl	800d9f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cec2:	f001 ff07 	bl	800ecd4 <vPortEnterCritical>
 800cec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cecc:	b25b      	sxtb	r3, r3
 800cece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ced2:	d103      	bne.n	800cedc <xQueueGenericSend+0x16c>
 800ced4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced6:	2200      	movs	r2, #0
 800ced8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cede:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cee2:	b25b      	sxtb	r3, r3
 800cee4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cee8:	d103      	bne.n	800cef2 <xQueueGenericSend+0x182>
 800ceea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceec:	2200      	movs	r2, #0
 800ceee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cef2:	f001 ff1f 	bl	800ed34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cef6:	1d3a      	adds	r2, r7, #4
 800cef8:	f107 0314 	add.w	r3, r7, #20
 800cefc:	4611      	mov	r1, r2
 800cefe:	4618      	mov	r0, r3
 800cf00:	f001 f844 	bl	800df8c <xTaskCheckForTimeOut>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d124      	bne.n	800cf54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cf0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf0c:	f000 faa2 	bl	800d454 <prvIsQueueFull>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d018      	beq.n	800cf48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf18:	3310      	adds	r3, #16
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	4611      	mov	r1, r2
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f000 ff44 	bl	800ddac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cf24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf26:	f000 fa2d 	bl	800d384 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cf2a:	f000 fd73 	bl	800da14 <xTaskResumeAll>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	f47f af7c 	bne.w	800ce2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cf36:	4b0c      	ldr	r3, [pc, #48]	; (800cf68 <xQueueGenericSend+0x1f8>)
 800cf38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf3c:	601a      	str	r2, [r3, #0]
 800cf3e:	f3bf 8f4f 	dsb	sy
 800cf42:	f3bf 8f6f 	isb	sy
 800cf46:	e772      	b.n	800ce2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cf48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf4a:	f000 fa1b 	bl	800d384 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf4e:	f000 fd61 	bl	800da14 <xTaskResumeAll>
 800cf52:	e76c      	b.n	800ce2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cf54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf56:	f000 fa15 	bl	800d384 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf5a:	f000 fd5b 	bl	800da14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cf5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3738      	adds	r7, #56	; 0x38
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	e000ed04 	.word	0xe000ed04

0800cf6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b090      	sub	sp, #64	; 0x40
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	60b9      	str	r1, [r7, #8]
 800cf76:	607a      	str	r2, [r7, #4]
 800cf78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cf7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d10a      	bne.n	800cf9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cf84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf88:	f383 8811 	msr	BASEPRI, r3
 800cf8c:	f3bf 8f6f 	isb	sy
 800cf90:	f3bf 8f4f 	dsb	sy
 800cf94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cf96:	bf00      	nop
 800cf98:	e7fe      	b.n	800cf98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d103      	bne.n	800cfa8 <xQueueGenericSendFromISR+0x3c>
 800cfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d101      	bne.n	800cfac <xQueueGenericSendFromISR+0x40>
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	e000      	b.n	800cfae <xQueueGenericSendFromISR+0x42>
 800cfac:	2300      	movs	r3, #0
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d10a      	bne.n	800cfc8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cfb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb6:	f383 8811 	msr	BASEPRI, r3
 800cfba:	f3bf 8f6f 	isb	sy
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cfc4:	bf00      	nop
 800cfc6:	e7fe      	b.n	800cfc6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	2b02      	cmp	r3, #2
 800cfcc:	d103      	bne.n	800cfd6 <xQueueGenericSendFromISR+0x6a>
 800cfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d101      	bne.n	800cfda <xQueueGenericSendFromISR+0x6e>
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	e000      	b.n	800cfdc <xQueueGenericSendFromISR+0x70>
 800cfda:	2300      	movs	r3, #0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d10a      	bne.n	800cff6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe4:	f383 8811 	msr	BASEPRI, r3
 800cfe8:	f3bf 8f6f 	isb	sy
 800cfec:	f3bf 8f4f 	dsb	sy
 800cff0:	623b      	str	r3, [r7, #32]
}
 800cff2:	bf00      	nop
 800cff4:	e7fe      	b.n	800cff4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cff6:	f001 ff4f 	bl	800ee98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cffa:	f3ef 8211 	mrs	r2, BASEPRI
 800cffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d002:	f383 8811 	msr	BASEPRI, r3
 800d006:	f3bf 8f6f 	isb	sy
 800d00a:	f3bf 8f4f 	dsb	sy
 800d00e:	61fa      	str	r2, [r7, #28]
 800d010:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d012:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d014:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d01e:	429a      	cmp	r2, r3
 800d020:	d302      	bcc.n	800d028 <xQueueGenericSendFromISR+0xbc>
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	2b02      	cmp	r3, #2
 800d026:	d12f      	bne.n	800d088 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d036:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d038:	683a      	ldr	r2, [r7, #0]
 800d03a:	68b9      	ldr	r1, [r7, #8]
 800d03c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d03e:	f000 f911 	bl	800d264 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d042:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d046:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d04a:	d112      	bne.n	800d072 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d050:	2b00      	cmp	r3, #0
 800d052:	d016      	beq.n	800d082 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d056:	3324      	adds	r3, #36	; 0x24
 800d058:	4618      	mov	r0, r3
 800d05a:	f000 fef7 	bl	800de4c <xTaskRemoveFromEventList>
 800d05e:	4603      	mov	r3, r0
 800d060:	2b00      	cmp	r3, #0
 800d062:	d00e      	beq.n	800d082 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00b      	beq.n	800d082 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2201      	movs	r2, #1
 800d06e:	601a      	str	r2, [r3, #0]
 800d070:	e007      	b.n	800d082 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d072:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d076:	3301      	adds	r3, #1
 800d078:	b2db      	uxtb	r3, r3
 800d07a:	b25a      	sxtb	r2, r3
 800d07c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d082:	2301      	movs	r3, #1
 800d084:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d086:	e001      	b.n	800d08c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d088:	2300      	movs	r3, #0
 800d08a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d08e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d096:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3740      	adds	r7, #64	; 0x40
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
	...

0800d0a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b08c      	sub	sp, #48	; 0x30
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d10a      	bne.n	800d0d4 <xQueueReceive+0x30>
	__asm volatile
 800d0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c2:	f383 8811 	msr	BASEPRI, r3
 800d0c6:	f3bf 8f6f 	isb	sy
 800d0ca:	f3bf 8f4f 	dsb	sy
 800d0ce:	623b      	str	r3, [r7, #32]
}
 800d0d0:	bf00      	nop
 800d0d2:	e7fe      	b.n	800d0d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d103      	bne.n	800d0e2 <xQueueReceive+0x3e>
 800d0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d101      	bne.n	800d0e6 <xQueueReceive+0x42>
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e000      	b.n	800d0e8 <xQueueReceive+0x44>
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d10a      	bne.n	800d102 <xQueueReceive+0x5e>
	__asm volatile
 800d0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f0:	f383 8811 	msr	BASEPRI, r3
 800d0f4:	f3bf 8f6f 	isb	sy
 800d0f8:	f3bf 8f4f 	dsb	sy
 800d0fc:	61fb      	str	r3, [r7, #28]
}
 800d0fe:	bf00      	nop
 800d100:	e7fe      	b.n	800d100 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d102:	f001 f88b 	bl	800e21c <xTaskGetSchedulerState>
 800d106:	4603      	mov	r3, r0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d102      	bne.n	800d112 <xQueueReceive+0x6e>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d101      	bne.n	800d116 <xQueueReceive+0x72>
 800d112:	2301      	movs	r3, #1
 800d114:	e000      	b.n	800d118 <xQueueReceive+0x74>
 800d116:	2300      	movs	r3, #0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d10a      	bne.n	800d132 <xQueueReceive+0x8e>
	__asm volatile
 800d11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d120:	f383 8811 	msr	BASEPRI, r3
 800d124:	f3bf 8f6f 	isb	sy
 800d128:	f3bf 8f4f 	dsb	sy
 800d12c:	61bb      	str	r3, [r7, #24]
}
 800d12e:	bf00      	nop
 800d130:	e7fe      	b.n	800d130 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d132:	f001 fdcf 	bl	800ecd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d13a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d01f      	beq.n	800d182 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d142:	68b9      	ldr	r1, [r7, #8]
 800d144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d146:	f000 f8f7 	bl	800d338 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14c:	1e5a      	subs	r2, r3, #1
 800d14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d150:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d154:	691b      	ldr	r3, [r3, #16]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d00f      	beq.n	800d17a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d15c:	3310      	adds	r3, #16
 800d15e:	4618      	mov	r0, r3
 800d160:	f000 fe74 	bl	800de4c <xTaskRemoveFromEventList>
 800d164:	4603      	mov	r3, r0
 800d166:	2b00      	cmp	r3, #0
 800d168:	d007      	beq.n	800d17a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d16a:	4b3d      	ldr	r3, [pc, #244]	; (800d260 <xQueueReceive+0x1bc>)
 800d16c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d170:	601a      	str	r2, [r3, #0]
 800d172:	f3bf 8f4f 	dsb	sy
 800d176:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d17a:	f001 fddb 	bl	800ed34 <vPortExitCritical>
				return pdPASS;
 800d17e:	2301      	movs	r3, #1
 800d180:	e069      	b.n	800d256 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d103      	bne.n	800d190 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d188:	f001 fdd4 	bl	800ed34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d18c:	2300      	movs	r3, #0
 800d18e:	e062      	b.n	800d256 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d192:	2b00      	cmp	r3, #0
 800d194:	d106      	bne.n	800d1a4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d196:	f107 0310 	add.w	r3, r7, #16
 800d19a:	4618      	mov	r0, r3
 800d19c:	f000 fee0 	bl	800df60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d1a4:	f001 fdc6 	bl	800ed34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d1a8:	f000 fc26 	bl	800d9f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d1ac:	f001 fd92 	bl	800ecd4 <vPortEnterCritical>
 800d1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1b6:	b25b      	sxtb	r3, r3
 800d1b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1bc:	d103      	bne.n	800d1c6 <xQueueReceive+0x122>
 800d1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d1cc:	b25b      	sxtb	r3, r3
 800d1ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1d2:	d103      	bne.n	800d1dc <xQueueReceive+0x138>
 800d1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d1dc:	f001 fdaa 	bl	800ed34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d1e0:	1d3a      	adds	r2, r7, #4
 800d1e2:	f107 0310 	add.w	r3, r7, #16
 800d1e6:	4611      	mov	r1, r2
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f000 fecf 	bl	800df8c <xTaskCheckForTimeOut>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d123      	bne.n	800d23c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d1f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1f6:	f000 f917 	bl	800d428 <prvIsQueueEmpty>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d017      	beq.n	800d230 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d202:	3324      	adds	r3, #36	; 0x24
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	4611      	mov	r1, r2
 800d208:	4618      	mov	r0, r3
 800d20a:	f000 fdcf 	bl	800ddac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d20e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d210:	f000 f8b8 	bl	800d384 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d214:	f000 fbfe 	bl	800da14 <xTaskResumeAll>
 800d218:	4603      	mov	r3, r0
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d189      	bne.n	800d132 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d21e:	4b10      	ldr	r3, [pc, #64]	; (800d260 <xQueueReceive+0x1bc>)
 800d220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d224:	601a      	str	r2, [r3, #0]
 800d226:	f3bf 8f4f 	dsb	sy
 800d22a:	f3bf 8f6f 	isb	sy
 800d22e:	e780      	b.n	800d132 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d232:	f000 f8a7 	bl	800d384 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d236:	f000 fbed 	bl	800da14 <xTaskResumeAll>
 800d23a:	e77a      	b.n	800d132 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d23c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d23e:	f000 f8a1 	bl	800d384 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d242:	f000 fbe7 	bl	800da14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d248:	f000 f8ee 	bl	800d428 <prvIsQueueEmpty>
 800d24c:	4603      	mov	r3, r0
 800d24e:	2b00      	cmp	r3, #0
 800d250:	f43f af6f 	beq.w	800d132 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d254:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d256:	4618      	mov	r0, r3
 800d258:	3730      	adds	r7, #48	; 0x30
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	e000ed04 	.word	0xe000ed04

0800d264 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af00      	add	r7, sp, #0
 800d26a:	60f8      	str	r0, [r7, #12]
 800d26c:	60b9      	str	r1, [r7, #8]
 800d26e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d270:	2300      	movs	r3, #0
 800d272:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d278:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d10d      	bne.n	800d29e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d14d      	bne.n	800d326 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	689b      	ldr	r3, [r3, #8]
 800d28e:	4618      	mov	r0, r3
 800d290:	f000 ffe2 	bl	800e258 <xTaskPriorityDisinherit>
 800d294:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2200      	movs	r2, #0
 800d29a:	609a      	str	r2, [r3, #8]
 800d29c:	e043      	b.n	800d326 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d119      	bne.n	800d2d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	6858      	ldr	r0, [r3, #4]
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	68b9      	ldr	r1, [r7, #8]
 800d2b0:	f00d fa7a 	bl	801a7a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	685a      	ldr	r2, [r3, #4]
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2bc:	441a      	add	r2, r3
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	685a      	ldr	r2, [r3, #4]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	429a      	cmp	r2, r3
 800d2cc:	d32b      	bcc.n	800d326 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	605a      	str	r2, [r3, #4]
 800d2d6:	e026      	b.n	800d326 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	68d8      	ldr	r0, [r3, #12]
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2e0:	461a      	mov	r2, r3
 800d2e2:	68b9      	ldr	r1, [r7, #8]
 800d2e4:	f00d fa60 	bl	801a7a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	68da      	ldr	r2, [r3, #12]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2f0:	425b      	negs	r3, r3
 800d2f2:	441a      	add	r2, r3
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	68da      	ldr	r2, [r3, #12]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	429a      	cmp	r2, r3
 800d302:	d207      	bcs.n	800d314 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	689a      	ldr	r2, [r3, #8]
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d30c:	425b      	negs	r3, r3
 800d30e:	441a      	add	r2, r3
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2b02      	cmp	r3, #2
 800d318:	d105      	bne.n	800d326 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d002      	beq.n	800d326 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	3b01      	subs	r3, #1
 800d324:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	1c5a      	adds	r2, r3, #1
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d32e:	697b      	ldr	r3, [r7, #20]
}
 800d330:	4618      	mov	r0, r3
 800d332:	3718      	adds	r7, #24
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d346:	2b00      	cmp	r3, #0
 800d348:	d018      	beq.n	800d37c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	68da      	ldr	r2, [r3, #12]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d352:	441a      	add	r2, r3
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	68da      	ldr	r2, [r3, #12]
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	429a      	cmp	r2, r3
 800d362:	d303      	bcc.n	800d36c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	68d9      	ldr	r1, [r3, #12]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d374:	461a      	mov	r2, r3
 800d376:	6838      	ldr	r0, [r7, #0]
 800d378:	f00d fa16 	bl	801a7a8 <memcpy>
	}
}
 800d37c:	bf00      	nop
 800d37e:	3708      	adds	r7, #8
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b084      	sub	sp, #16
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d38c:	f001 fca2 	bl	800ecd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d396:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d398:	e011      	b.n	800d3be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d012      	beq.n	800d3c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	3324      	adds	r3, #36	; 0x24
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f000 fd50 	bl	800de4c <xTaskRemoveFromEventList>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d001      	beq.n	800d3b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d3b2:	f000 fe4d 	bl	800e050 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d3b6:	7bfb      	ldrb	r3, [r7, #15]
 800d3b8:	3b01      	subs	r3, #1
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d3be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	dce9      	bgt.n	800d39a <prvUnlockQueue+0x16>
 800d3c6:	e000      	b.n	800d3ca <prvUnlockQueue+0x46>
					break;
 800d3c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	22ff      	movs	r2, #255	; 0xff
 800d3ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d3d2:	f001 fcaf 	bl	800ed34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d3d6:	f001 fc7d 	bl	800ecd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d3e2:	e011      	b.n	800d408 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	691b      	ldr	r3, [r3, #16]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d012      	beq.n	800d412 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	3310      	adds	r3, #16
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f000 fd2b 	bl	800de4c <xTaskRemoveFromEventList>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d001      	beq.n	800d400 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d3fc:	f000 fe28 	bl	800e050 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d400:	7bbb      	ldrb	r3, [r7, #14]
 800d402:	3b01      	subs	r3, #1
 800d404:	b2db      	uxtb	r3, r3
 800d406:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d408:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	dce9      	bgt.n	800d3e4 <prvUnlockQueue+0x60>
 800d410:	e000      	b.n	800d414 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d412:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	22ff      	movs	r2, #255	; 0xff
 800d418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d41c:	f001 fc8a 	bl	800ed34 <vPortExitCritical>
}
 800d420:	bf00      	nop
 800d422:	3710      	adds	r7, #16
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d430:	f001 fc50 	bl	800ecd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d102      	bne.n	800d442 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d43c:	2301      	movs	r3, #1
 800d43e:	60fb      	str	r3, [r7, #12]
 800d440:	e001      	b.n	800d446 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d442:	2300      	movs	r3, #0
 800d444:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d446:	f001 fc75 	bl	800ed34 <vPortExitCritical>

	return xReturn;
 800d44a:	68fb      	ldr	r3, [r7, #12]
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3710      	adds	r7, #16
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d45c:	f001 fc3a 	bl	800ecd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d468:	429a      	cmp	r2, r3
 800d46a:	d102      	bne.n	800d472 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d46c:	2301      	movs	r3, #1
 800d46e:	60fb      	str	r3, [r7, #12]
 800d470:	e001      	b.n	800d476 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d472:	2300      	movs	r3, #0
 800d474:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d476:	f001 fc5d 	bl	800ed34 <vPortExitCritical>

	return xReturn;
 800d47a:	68fb      	ldr	r3, [r7, #12]
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3710      	adds	r7, #16
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d484:	b480      	push	{r7}
 800d486:	b085      	sub	sp, #20
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d48e:	2300      	movs	r3, #0
 800d490:	60fb      	str	r3, [r7, #12]
 800d492:	e014      	b.n	800d4be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d494:	4a0f      	ldr	r2, [pc, #60]	; (800d4d4 <vQueueAddToRegistry+0x50>)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10b      	bne.n	800d4b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d4a0:	490c      	ldr	r1, [pc, #48]	; (800d4d4 <vQueueAddToRegistry+0x50>)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	683a      	ldr	r2, [r7, #0]
 800d4a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d4aa:	4a0a      	ldr	r2, [pc, #40]	; (800d4d4 <vQueueAddToRegistry+0x50>)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	00db      	lsls	r3, r3, #3
 800d4b0:	4413      	add	r3, r2
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d4b6:	e006      	b.n	800d4c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	60fb      	str	r3, [r7, #12]
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2b07      	cmp	r3, #7
 800d4c2:	d9e7      	bls.n	800d494 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d4c4:	bf00      	nop
 800d4c6:	bf00      	nop
 800d4c8:	3714      	adds	r7, #20
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr
 800d4d2:	bf00      	nop
 800d4d4:	2000b350 	.word	0x2000b350

0800d4d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b086      	sub	sp, #24
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d4e8:	f001 fbf4 	bl	800ecd4 <vPortEnterCritical>
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4f2:	b25b      	sxtb	r3, r3
 800d4f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d4f8:	d103      	bne.n	800d502 <vQueueWaitForMessageRestricted+0x2a>
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d508:	b25b      	sxtb	r3, r3
 800d50a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d50e:	d103      	bne.n	800d518 <vQueueWaitForMessageRestricted+0x40>
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	2200      	movs	r2, #0
 800d514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d518:	f001 fc0c 	bl	800ed34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d520:	2b00      	cmp	r3, #0
 800d522:	d106      	bne.n	800d532 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	3324      	adds	r3, #36	; 0x24
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	68b9      	ldr	r1, [r7, #8]
 800d52c:	4618      	mov	r0, r3
 800d52e:	f000 fc61 	bl	800ddf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d532:	6978      	ldr	r0, [r7, #20]
 800d534:	f7ff ff26 	bl	800d384 <prvUnlockQueue>
	}
 800d538:	bf00      	nop
 800d53a:	3718      	adds	r7, #24
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}

0800d540 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d540:	b580      	push	{r7, lr}
 800d542:	b08e      	sub	sp, #56	; 0x38
 800d544:	af04      	add	r7, sp, #16
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	60b9      	str	r1, [r7, #8]
 800d54a:	607a      	str	r2, [r7, #4]
 800d54c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d550:	2b00      	cmp	r3, #0
 800d552:	d10a      	bne.n	800d56a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d558:	f383 8811 	msr	BASEPRI, r3
 800d55c:	f3bf 8f6f 	isb	sy
 800d560:	f3bf 8f4f 	dsb	sy
 800d564:	623b      	str	r3, [r7, #32]
}
 800d566:	bf00      	nop
 800d568:	e7fe      	b.n	800d568 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d10a      	bne.n	800d586 <xTaskCreateStatic+0x46>
	__asm volatile
 800d570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d574:	f383 8811 	msr	BASEPRI, r3
 800d578:	f3bf 8f6f 	isb	sy
 800d57c:	f3bf 8f4f 	dsb	sy
 800d580:	61fb      	str	r3, [r7, #28]
}
 800d582:	bf00      	nop
 800d584:	e7fe      	b.n	800d584 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d586:	23bc      	movs	r3, #188	; 0xbc
 800d588:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	2bbc      	cmp	r3, #188	; 0xbc
 800d58e:	d00a      	beq.n	800d5a6 <xTaskCreateStatic+0x66>
	__asm volatile
 800d590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d594:	f383 8811 	msr	BASEPRI, r3
 800d598:	f3bf 8f6f 	isb	sy
 800d59c:	f3bf 8f4f 	dsb	sy
 800d5a0:	61bb      	str	r3, [r7, #24]
}
 800d5a2:	bf00      	nop
 800d5a4:	e7fe      	b.n	800d5a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d5a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d01e      	beq.n	800d5ec <xTaskCreateStatic+0xac>
 800d5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d01b      	beq.n	800d5ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c0:	2202      	movs	r2, #2
 800d5c2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	9303      	str	r3, [sp, #12]
 800d5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5cc:	9302      	str	r3, [sp, #8]
 800d5ce:	f107 0314 	add.w	r3, r7, #20
 800d5d2:	9301      	str	r3, [sp, #4]
 800d5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d6:	9300      	str	r3, [sp, #0]
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	687a      	ldr	r2, [r7, #4]
 800d5dc:	68b9      	ldr	r1, [r7, #8]
 800d5de:	68f8      	ldr	r0, [r7, #12]
 800d5e0:	f000 f850 	bl	800d684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d5e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5e6:	f000 f8f3 	bl	800d7d0 <prvAddNewTaskToReadyList>
 800d5ea:	e001      	b.n	800d5f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d5f0:	697b      	ldr	r3, [r7, #20]
	}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3728      	adds	r7, #40	; 0x28
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}

0800d5fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d5fa:	b580      	push	{r7, lr}
 800d5fc:	b08c      	sub	sp, #48	; 0x30
 800d5fe:	af04      	add	r7, sp, #16
 800d600:	60f8      	str	r0, [r7, #12]
 800d602:	60b9      	str	r1, [r7, #8]
 800d604:	603b      	str	r3, [r7, #0]
 800d606:	4613      	mov	r3, r2
 800d608:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d60a:	88fb      	ldrh	r3, [r7, #6]
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	4618      	mov	r0, r3
 800d610:	f001 fc82 	bl	800ef18 <pvPortMalloc>
 800d614:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d00e      	beq.n	800d63a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d61c:	20bc      	movs	r0, #188	; 0xbc
 800d61e:	f001 fc7b 	bl	800ef18 <pvPortMalloc>
 800d622:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d624:	69fb      	ldr	r3, [r7, #28]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d003      	beq.n	800d632 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d62a:	69fb      	ldr	r3, [r7, #28]
 800d62c:	697a      	ldr	r2, [r7, #20]
 800d62e:	631a      	str	r2, [r3, #48]	; 0x30
 800d630:	e005      	b.n	800d63e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d632:	6978      	ldr	r0, [r7, #20]
 800d634:	f001 fd3c 	bl	800f0b0 <vPortFree>
 800d638:	e001      	b.n	800d63e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d63a:	2300      	movs	r3, #0
 800d63c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d63e:	69fb      	ldr	r3, [r7, #28]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d017      	beq.n	800d674 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d644:	69fb      	ldr	r3, [r7, #28]
 800d646:	2200      	movs	r2, #0
 800d648:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d64c:	88fa      	ldrh	r2, [r7, #6]
 800d64e:	2300      	movs	r3, #0
 800d650:	9303      	str	r3, [sp, #12]
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	9302      	str	r3, [sp, #8]
 800d656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d658:	9301      	str	r3, [sp, #4]
 800d65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65c:	9300      	str	r3, [sp, #0]
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	68b9      	ldr	r1, [r7, #8]
 800d662:	68f8      	ldr	r0, [r7, #12]
 800d664:	f000 f80e 	bl	800d684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d668:	69f8      	ldr	r0, [r7, #28]
 800d66a:	f000 f8b1 	bl	800d7d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d66e:	2301      	movs	r3, #1
 800d670:	61bb      	str	r3, [r7, #24]
 800d672:	e002      	b.n	800d67a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d678:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d67a:	69bb      	ldr	r3, [r7, #24]
	}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3720      	adds	r7, #32
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b088      	sub	sp, #32
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
 800d690:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d694:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	461a      	mov	r2, r3
 800d69c:	21a5      	movs	r1, #165	; 0xa5
 800d69e:	f00d f891 	bl	801a7c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d6ac:	3b01      	subs	r3, #1
 800d6ae:	009b      	lsls	r3, r3, #2
 800d6b0:	4413      	add	r3, r2
 800d6b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d6b4:	69bb      	ldr	r3, [r7, #24]
 800d6b6:	f023 0307 	bic.w	r3, r3, #7
 800d6ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d6bc:	69bb      	ldr	r3, [r7, #24]
 800d6be:	f003 0307 	and.w	r3, r3, #7
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d00a      	beq.n	800d6dc <prvInitialiseNewTask+0x58>
	__asm volatile
 800d6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ca:	f383 8811 	msr	BASEPRI, r3
 800d6ce:	f3bf 8f6f 	isb	sy
 800d6d2:	f3bf 8f4f 	dsb	sy
 800d6d6:	617b      	str	r3, [r7, #20]
}
 800d6d8:	bf00      	nop
 800d6da:	e7fe      	b.n	800d6da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d01f      	beq.n	800d722 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	61fb      	str	r3, [r7, #28]
 800d6e6:	e012      	b.n	800d70e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d6e8:	68ba      	ldr	r2, [r7, #8]
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	7819      	ldrb	r1, [r3, #0]
 800d6f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	3334      	adds	r3, #52	; 0x34
 800d6f8:	460a      	mov	r2, r1
 800d6fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d6fc:	68ba      	ldr	r2, [r7, #8]
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	4413      	add	r3, r2
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d006      	beq.n	800d716 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d708:	69fb      	ldr	r3, [r7, #28]
 800d70a:	3301      	adds	r3, #1
 800d70c:	61fb      	str	r3, [r7, #28]
 800d70e:	69fb      	ldr	r3, [r7, #28]
 800d710:	2b0f      	cmp	r3, #15
 800d712:	d9e9      	bls.n	800d6e8 <prvInitialiseNewTask+0x64>
 800d714:	e000      	b.n	800d718 <prvInitialiseNewTask+0x94>
			{
				break;
 800d716:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71a:	2200      	movs	r2, #0
 800d71c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d720:	e003      	b.n	800d72a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d724:	2200      	movs	r2, #0
 800d726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d72c:	2b37      	cmp	r3, #55	; 0x37
 800d72e:	d901      	bls.n	800d734 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d730:	2337      	movs	r3, #55	; 0x37
 800d732:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d738:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d73e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d742:	2200      	movs	r2, #0
 800d744:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d748:	3304      	adds	r3, #4
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7ff f978 	bl	800ca40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d752:	3318      	adds	r3, #24
 800d754:	4618      	mov	r0, r3
 800d756:	f7ff f973 	bl	800ca40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d75e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d762:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d768:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d76e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d772:	2200      	movs	r2, #0
 800d774:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d77a:	2200      	movs	r2, #0
 800d77c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d782:	3354      	adds	r3, #84	; 0x54
 800d784:	2260      	movs	r2, #96	; 0x60
 800d786:	2100      	movs	r1, #0
 800d788:	4618      	mov	r0, r3
 800d78a:	f00d f81b 	bl	801a7c4 <memset>
 800d78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d790:	4a0c      	ldr	r2, [pc, #48]	; (800d7c4 <prvInitialiseNewTask+0x140>)
 800d792:	659a      	str	r2, [r3, #88]	; 0x58
 800d794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d796:	4a0c      	ldr	r2, [pc, #48]	; (800d7c8 <prvInitialiseNewTask+0x144>)
 800d798:	65da      	str	r2, [r3, #92]	; 0x5c
 800d79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79c:	4a0b      	ldr	r2, [pc, #44]	; (800d7cc <prvInitialiseNewTask+0x148>)
 800d79e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d7a0:	683a      	ldr	r2, [r7, #0]
 800d7a2:	68f9      	ldr	r1, [r7, #12]
 800d7a4:	69b8      	ldr	r0, [r7, #24]
 800d7a6:	f001 f967 	bl	800ea78 <pxPortInitialiseStack>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d002      	beq.n	800d7bc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7bc:	bf00      	nop
 800d7be:	3720      	adds	r7, #32
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	0801d028 	.word	0x0801d028
 800d7c8:	0801d048 	.word	0x0801d048
 800d7cc:	0801d008 	.word	0x0801d008

0800d7d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d7d8:	f001 fa7c 	bl	800ecd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d7dc:	4b2d      	ldr	r3, [pc, #180]	; (800d894 <prvAddNewTaskToReadyList+0xc4>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	3301      	adds	r3, #1
 800d7e2:	4a2c      	ldr	r2, [pc, #176]	; (800d894 <prvAddNewTaskToReadyList+0xc4>)
 800d7e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d7e6:	4b2c      	ldr	r3, [pc, #176]	; (800d898 <prvAddNewTaskToReadyList+0xc8>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d109      	bne.n	800d802 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d7ee:	4a2a      	ldr	r2, [pc, #168]	; (800d898 <prvAddNewTaskToReadyList+0xc8>)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d7f4:	4b27      	ldr	r3, [pc, #156]	; (800d894 <prvAddNewTaskToReadyList+0xc4>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	d110      	bne.n	800d81e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d7fc:	f000 fc4c 	bl	800e098 <prvInitialiseTaskLists>
 800d800:	e00d      	b.n	800d81e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d802:	4b26      	ldr	r3, [pc, #152]	; (800d89c <prvAddNewTaskToReadyList+0xcc>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d109      	bne.n	800d81e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d80a:	4b23      	ldr	r3, [pc, #140]	; (800d898 <prvAddNewTaskToReadyList+0xc8>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d814:	429a      	cmp	r2, r3
 800d816:	d802      	bhi.n	800d81e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d818:	4a1f      	ldr	r2, [pc, #124]	; (800d898 <prvAddNewTaskToReadyList+0xc8>)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d81e:	4b20      	ldr	r3, [pc, #128]	; (800d8a0 <prvAddNewTaskToReadyList+0xd0>)
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	3301      	adds	r3, #1
 800d824:	4a1e      	ldr	r2, [pc, #120]	; (800d8a0 <prvAddNewTaskToReadyList+0xd0>)
 800d826:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d828:	4b1d      	ldr	r3, [pc, #116]	; (800d8a0 <prvAddNewTaskToReadyList+0xd0>)
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d834:	4b1b      	ldr	r3, [pc, #108]	; (800d8a4 <prvAddNewTaskToReadyList+0xd4>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d903      	bls.n	800d844 <prvAddNewTaskToReadyList+0x74>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d840:	4a18      	ldr	r2, [pc, #96]	; (800d8a4 <prvAddNewTaskToReadyList+0xd4>)
 800d842:	6013      	str	r3, [r2, #0]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d848:	4613      	mov	r3, r2
 800d84a:	009b      	lsls	r3, r3, #2
 800d84c:	4413      	add	r3, r2
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	4a15      	ldr	r2, [pc, #84]	; (800d8a8 <prvAddNewTaskToReadyList+0xd8>)
 800d852:	441a      	add	r2, r3
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	3304      	adds	r3, #4
 800d858:	4619      	mov	r1, r3
 800d85a:	4610      	mov	r0, r2
 800d85c:	f7ff f8fd 	bl	800ca5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d860:	f001 fa68 	bl	800ed34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d864:	4b0d      	ldr	r3, [pc, #52]	; (800d89c <prvAddNewTaskToReadyList+0xcc>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d00e      	beq.n	800d88a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d86c:	4b0a      	ldr	r3, [pc, #40]	; (800d898 <prvAddNewTaskToReadyList+0xc8>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d876:	429a      	cmp	r2, r3
 800d878:	d207      	bcs.n	800d88a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d87a:	4b0c      	ldr	r3, [pc, #48]	; (800d8ac <prvAddNewTaskToReadyList+0xdc>)
 800d87c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d880:	601a      	str	r2, [r3, #0]
 800d882:	f3bf 8f4f 	dsb	sy
 800d886:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d88a:	bf00      	nop
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	2000b864 	.word	0x2000b864
 800d898:	2000b390 	.word	0x2000b390
 800d89c:	2000b870 	.word	0x2000b870
 800d8a0:	2000b880 	.word	0x2000b880
 800d8a4:	2000b86c 	.word	0x2000b86c
 800d8a8:	2000b394 	.word	0x2000b394
 800d8ac:	e000ed04 	.word	0xe000ed04

0800d8b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d017      	beq.n	800d8f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d8c2:	4b13      	ldr	r3, [pc, #76]	; (800d910 <vTaskDelay+0x60>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d00a      	beq.n	800d8e0 <vTaskDelay+0x30>
	__asm volatile
 800d8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ce:	f383 8811 	msr	BASEPRI, r3
 800d8d2:	f3bf 8f6f 	isb	sy
 800d8d6:	f3bf 8f4f 	dsb	sy
 800d8da:	60bb      	str	r3, [r7, #8]
}
 800d8dc:	bf00      	nop
 800d8de:	e7fe      	b.n	800d8de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d8e0:	f000 f88a 	bl	800d9f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d8e4:	2100      	movs	r1, #0
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f000 fd24 	bl	800e334 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d8ec:	f000 f892 	bl	800da14 <xTaskResumeAll>
 800d8f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d107      	bne.n	800d908 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d8f8:	4b06      	ldr	r3, [pc, #24]	; (800d914 <vTaskDelay+0x64>)
 800d8fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8fe:	601a      	str	r2, [r3, #0]
 800d900:	f3bf 8f4f 	dsb	sy
 800d904:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d908:	bf00      	nop
 800d90a:	3710      	adds	r7, #16
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}
 800d910:	2000b88c 	.word	0x2000b88c
 800d914:	e000ed04 	.word	0xe000ed04

0800d918 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b08a      	sub	sp, #40	; 0x28
 800d91c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d91e:	2300      	movs	r3, #0
 800d920:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d922:	2300      	movs	r3, #0
 800d924:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d926:	463a      	mov	r2, r7
 800d928:	1d39      	adds	r1, r7, #4
 800d92a:	f107 0308 	add.w	r3, r7, #8
 800d92e:	4618      	mov	r0, r3
 800d930:	f7ff f832 	bl	800c998 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d934:	6839      	ldr	r1, [r7, #0]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	68ba      	ldr	r2, [r7, #8]
 800d93a:	9202      	str	r2, [sp, #8]
 800d93c:	9301      	str	r3, [sp, #4]
 800d93e:	2300      	movs	r3, #0
 800d940:	9300      	str	r3, [sp, #0]
 800d942:	2300      	movs	r3, #0
 800d944:	460a      	mov	r2, r1
 800d946:	4924      	ldr	r1, [pc, #144]	; (800d9d8 <vTaskStartScheduler+0xc0>)
 800d948:	4824      	ldr	r0, [pc, #144]	; (800d9dc <vTaskStartScheduler+0xc4>)
 800d94a:	f7ff fdf9 	bl	800d540 <xTaskCreateStatic>
 800d94e:	4603      	mov	r3, r0
 800d950:	4a23      	ldr	r2, [pc, #140]	; (800d9e0 <vTaskStartScheduler+0xc8>)
 800d952:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d954:	4b22      	ldr	r3, [pc, #136]	; (800d9e0 <vTaskStartScheduler+0xc8>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d002      	beq.n	800d962 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d95c:	2301      	movs	r3, #1
 800d95e:	617b      	str	r3, [r7, #20]
 800d960:	e001      	b.n	800d966 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d962:	2300      	movs	r3, #0
 800d964:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d102      	bne.n	800d972 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d96c:	f000 fd36 	bl	800e3dc <xTimerCreateTimerTask>
 800d970:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	2b01      	cmp	r3, #1
 800d976:	d11b      	bne.n	800d9b0 <vTaskStartScheduler+0x98>
	__asm volatile
 800d978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97c:	f383 8811 	msr	BASEPRI, r3
 800d980:	f3bf 8f6f 	isb	sy
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	613b      	str	r3, [r7, #16]
}
 800d98a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d98c:	4b15      	ldr	r3, [pc, #84]	; (800d9e4 <vTaskStartScheduler+0xcc>)
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	3354      	adds	r3, #84	; 0x54
 800d992:	4a15      	ldr	r2, [pc, #84]	; (800d9e8 <vTaskStartScheduler+0xd0>)
 800d994:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d996:	4b15      	ldr	r3, [pc, #84]	; (800d9ec <vTaskStartScheduler+0xd4>)
 800d998:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d99c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d99e:	4b14      	ldr	r3, [pc, #80]	; (800d9f0 <vTaskStartScheduler+0xd8>)
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d9a4:	4b13      	ldr	r3, [pc, #76]	; (800d9f4 <vTaskStartScheduler+0xdc>)
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d9aa:	f001 f8f1 	bl	800eb90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d9ae:	e00e      	b.n	800d9ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9b6:	d10a      	bne.n	800d9ce <vTaskStartScheduler+0xb6>
	__asm volatile
 800d9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9bc:	f383 8811 	msr	BASEPRI, r3
 800d9c0:	f3bf 8f6f 	isb	sy
 800d9c4:	f3bf 8f4f 	dsb	sy
 800d9c8:	60fb      	str	r3, [r7, #12]
}
 800d9ca:	bf00      	nop
 800d9cc:	e7fe      	b.n	800d9cc <vTaskStartScheduler+0xb4>
}
 800d9ce:	bf00      	nop
 800d9d0:	3718      	adds	r7, #24
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	0801be4c 	.word	0x0801be4c
 800d9dc:	0800e069 	.word	0x0800e069
 800d9e0:	2000b888 	.word	0x2000b888
 800d9e4:	2000b390 	.word	0x2000b390
 800d9e8:	200009bc 	.word	0x200009bc
 800d9ec:	2000b884 	.word	0x2000b884
 800d9f0:	2000b870 	.word	0x2000b870
 800d9f4:	2000b868 	.word	0x2000b868

0800d9f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d9fc:	4b04      	ldr	r3, [pc, #16]	; (800da10 <vTaskSuspendAll+0x18>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	3301      	adds	r3, #1
 800da02:	4a03      	ldr	r2, [pc, #12]	; (800da10 <vTaskSuspendAll+0x18>)
 800da04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800da06:	bf00      	nop
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr
 800da10:	2000b88c 	.word	0x2000b88c

0800da14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b084      	sub	sp, #16
 800da18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800da1a:	2300      	movs	r3, #0
 800da1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800da1e:	2300      	movs	r3, #0
 800da20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800da22:	4b42      	ldr	r3, [pc, #264]	; (800db2c <xTaskResumeAll+0x118>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d10a      	bne.n	800da40 <xTaskResumeAll+0x2c>
	__asm volatile
 800da2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da2e:	f383 8811 	msr	BASEPRI, r3
 800da32:	f3bf 8f6f 	isb	sy
 800da36:	f3bf 8f4f 	dsb	sy
 800da3a:	603b      	str	r3, [r7, #0]
}
 800da3c:	bf00      	nop
 800da3e:	e7fe      	b.n	800da3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800da40:	f001 f948 	bl	800ecd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800da44:	4b39      	ldr	r3, [pc, #228]	; (800db2c <xTaskResumeAll+0x118>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	3b01      	subs	r3, #1
 800da4a:	4a38      	ldr	r2, [pc, #224]	; (800db2c <xTaskResumeAll+0x118>)
 800da4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da4e:	4b37      	ldr	r3, [pc, #220]	; (800db2c <xTaskResumeAll+0x118>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d162      	bne.n	800db1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800da56:	4b36      	ldr	r3, [pc, #216]	; (800db30 <xTaskResumeAll+0x11c>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d05e      	beq.n	800db1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800da5e:	e02f      	b.n	800dac0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da60:	4b34      	ldr	r3, [pc, #208]	; (800db34 <xTaskResumeAll+0x120>)
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	68db      	ldr	r3, [r3, #12]
 800da66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	3318      	adds	r3, #24
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7ff f851 	bl	800cb14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	3304      	adds	r3, #4
 800da76:	4618      	mov	r0, r3
 800da78:	f7ff f84c 	bl	800cb14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da80:	4b2d      	ldr	r3, [pc, #180]	; (800db38 <xTaskResumeAll+0x124>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	429a      	cmp	r2, r3
 800da86:	d903      	bls.n	800da90 <xTaskResumeAll+0x7c>
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da8c:	4a2a      	ldr	r2, [pc, #168]	; (800db38 <xTaskResumeAll+0x124>)
 800da8e:	6013      	str	r3, [r2, #0]
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da94:	4613      	mov	r3, r2
 800da96:	009b      	lsls	r3, r3, #2
 800da98:	4413      	add	r3, r2
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	4a27      	ldr	r2, [pc, #156]	; (800db3c <xTaskResumeAll+0x128>)
 800da9e:	441a      	add	r2, r3
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	3304      	adds	r3, #4
 800daa4:	4619      	mov	r1, r3
 800daa6:	4610      	mov	r0, r2
 800daa8:	f7fe ffd7 	bl	800ca5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dab0:	4b23      	ldr	r3, [pc, #140]	; (800db40 <xTaskResumeAll+0x12c>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d302      	bcc.n	800dac0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800daba:	4b22      	ldr	r3, [pc, #136]	; (800db44 <xTaskResumeAll+0x130>)
 800dabc:	2201      	movs	r2, #1
 800dabe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dac0:	4b1c      	ldr	r3, [pc, #112]	; (800db34 <xTaskResumeAll+0x120>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d1cb      	bne.n	800da60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d001      	beq.n	800dad2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dace:	f000 fb85 	bl	800e1dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dad2:	4b1d      	ldr	r3, [pc, #116]	; (800db48 <xTaskResumeAll+0x134>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d010      	beq.n	800db00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dade:	f000 f847 	bl	800db70 <xTaskIncrementTick>
 800dae2:	4603      	mov	r3, r0
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d002      	beq.n	800daee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dae8:	4b16      	ldr	r3, [pc, #88]	; (800db44 <xTaskResumeAll+0x130>)
 800daea:	2201      	movs	r2, #1
 800daec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	3b01      	subs	r3, #1
 800daf2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d1f1      	bne.n	800dade <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dafa:	4b13      	ldr	r3, [pc, #76]	; (800db48 <xTaskResumeAll+0x134>)
 800dafc:	2200      	movs	r2, #0
 800dafe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800db00:	4b10      	ldr	r3, [pc, #64]	; (800db44 <xTaskResumeAll+0x130>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d009      	beq.n	800db1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800db08:	2301      	movs	r3, #1
 800db0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800db0c:	4b0f      	ldr	r3, [pc, #60]	; (800db4c <xTaskResumeAll+0x138>)
 800db0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db12:	601a      	str	r2, [r3, #0]
 800db14:	f3bf 8f4f 	dsb	sy
 800db18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800db1c:	f001 f90a 	bl	800ed34 <vPortExitCritical>

	return xAlreadyYielded;
 800db20:	68bb      	ldr	r3, [r7, #8]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	2000b88c 	.word	0x2000b88c
 800db30:	2000b864 	.word	0x2000b864
 800db34:	2000b824 	.word	0x2000b824
 800db38:	2000b86c 	.word	0x2000b86c
 800db3c:	2000b394 	.word	0x2000b394
 800db40:	2000b390 	.word	0x2000b390
 800db44:	2000b878 	.word	0x2000b878
 800db48:	2000b874 	.word	0x2000b874
 800db4c:	e000ed04 	.word	0xe000ed04

0800db50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800db50:	b480      	push	{r7}
 800db52:	b083      	sub	sp, #12
 800db54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800db56:	4b05      	ldr	r3, [pc, #20]	; (800db6c <xTaskGetTickCount+0x1c>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800db5c:	687b      	ldr	r3, [r7, #4]
}
 800db5e:	4618      	mov	r0, r3
 800db60:	370c      	adds	r7, #12
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr
 800db6a:	bf00      	nop
 800db6c:	2000b868 	.word	0x2000b868

0800db70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800db76:	2300      	movs	r3, #0
 800db78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db7a:	4b4f      	ldr	r3, [pc, #316]	; (800dcb8 <xTaskIncrementTick+0x148>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	f040 808f 	bne.w	800dca2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800db84:	4b4d      	ldr	r3, [pc, #308]	; (800dcbc <xTaskIncrementTick+0x14c>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	3301      	adds	r3, #1
 800db8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800db8c:	4a4b      	ldr	r2, [pc, #300]	; (800dcbc <xTaskIncrementTick+0x14c>)
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d120      	bne.n	800dbda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800db98:	4b49      	ldr	r3, [pc, #292]	; (800dcc0 <xTaskIncrementTick+0x150>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d00a      	beq.n	800dbb8 <xTaskIncrementTick+0x48>
	__asm volatile
 800dba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba6:	f383 8811 	msr	BASEPRI, r3
 800dbaa:	f3bf 8f6f 	isb	sy
 800dbae:	f3bf 8f4f 	dsb	sy
 800dbb2:	603b      	str	r3, [r7, #0]
}
 800dbb4:	bf00      	nop
 800dbb6:	e7fe      	b.n	800dbb6 <xTaskIncrementTick+0x46>
 800dbb8:	4b41      	ldr	r3, [pc, #260]	; (800dcc0 <xTaskIncrementTick+0x150>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	60fb      	str	r3, [r7, #12]
 800dbbe:	4b41      	ldr	r3, [pc, #260]	; (800dcc4 <xTaskIncrementTick+0x154>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	4a3f      	ldr	r2, [pc, #252]	; (800dcc0 <xTaskIncrementTick+0x150>)
 800dbc4:	6013      	str	r3, [r2, #0]
 800dbc6:	4a3f      	ldr	r2, [pc, #252]	; (800dcc4 <xTaskIncrementTick+0x154>)
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	6013      	str	r3, [r2, #0]
 800dbcc:	4b3e      	ldr	r3, [pc, #248]	; (800dcc8 <xTaskIncrementTick+0x158>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	4a3d      	ldr	r2, [pc, #244]	; (800dcc8 <xTaskIncrementTick+0x158>)
 800dbd4:	6013      	str	r3, [r2, #0]
 800dbd6:	f000 fb01 	bl	800e1dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dbda:	4b3c      	ldr	r3, [pc, #240]	; (800dccc <xTaskIncrementTick+0x15c>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	693a      	ldr	r2, [r7, #16]
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d349      	bcc.n	800dc78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dbe4:	4b36      	ldr	r3, [pc, #216]	; (800dcc0 <xTaskIncrementTick+0x150>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d104      	bne.n	800dbf8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbee:	4b37      	ldr	r3, [pc, #220]	; (800dccc <xTaskIncrementTick+0x15c>)
 800dbf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dbf4:	601a      	str	r2, [r3, #0]
					break;
 800dbf6:	e03f      	b.n	800dc78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbf8:	4b31      	ldr	r3, [pc, #196]	; (800dcc0 <xTaskIncrementTick+0x150>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	68db      	ldr	r3, [r3, #12]
 800dbfe:	68db      	ldr	r3, [r3, #12]
 800dc00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dc08:	693a      	ldr	r2, [r7, #16]
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	429a      	cmp	r2, r3
 800dc0e:	d203      	bcs.n	800dc18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dc10:	4a2e      	ldr	r2, [pc, #184]	; (800dccc <xTaskIncrementTick+0x15c>)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dc16:	e02f      	b.n	800dc78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	3304      	adds	r3, #4
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7fe ff79 	bl	800cb14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d004      	beq.n	800dc34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	3318      	adds	r3, #24
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7fe ff70 	bl	800cb14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc38:	4b25      	ldr	r3, [pc, #148]	; (800dcd0 <xTaskIncrementTick+0x160>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d903      	bls.n	800dc48 <xTaskIncrementTick+0xd8>
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc44:	4a22      	ldr	r2, [pc, #136]	; (800dcd0 <xTaskIncrementTick+0x160>)
 800dc46:	6013      	str	r3, [r2, #0]
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	4413      	add	r3, r2
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	4a1f      	ldr	r2, [pc, #124]	; (800dcd4 <xTaskIncrementTick+0x164>)
 800dc56:	441a      	add	r2, r3
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	3304      	adds	r3, #4
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	4610      	mov	r0, r2
 800dc60:	f7fe fefb 	bl	800ca5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc68:	4b1b      	ldr	r3, [pc, #108]	; (800dcd8 <xTaskIncrementTick+0x168>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d3b8      	bcc.n	800dbe4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800dc72:	2301      	movs	r3, #1
 800dc74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dc76:	e7b5      	b.n	800dbe4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800dc78:	4b17      	ldr	r3, [pc, #92]	; (800dcd8 <xTaskIncrementTick+0x168>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc7e:	4915      	ldr	r1, [pc, #84]	; (800dcd4 <xTaskIncrementTick+0x164>)
 800dc80:	4613      	mov	r3, r2
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	4413      	add	r3, r2
 800dc86:	009b      	lsls	r3, r3, #2
 800dc88:	440b      	add	r3, r1
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d901      	bls.n	800dc94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dc90:	2301      	movs	r3, #1
 800dc92:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dc94:	4b11      	ldr	r3, [pc, #68]	; (800dcdc <xTaskIncrementTick+0x16c>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d007      	beq.n	800dcac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	617b      	str	r3, [r7, #20]
 800dca0:	e004      	b.n	800dcac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800dca2:	4b0f      	ldr	r3, [pc, #60]	; (800dce0 <xTaskIncrementTick+0x170>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	3301      	adds	r3, #1
 800dca8:	4a0d      	ldr	r2, [pc, #52]	; (800dce0 <xTaskIncrementTick+0x170>)
 800dcaa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800dcac:	697b      	ldr	r3, [r7, #20]
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3718      	adds	r7, #24
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	2000b88c 	.word	0x2000b88c
 800dcbc:	2000b868 	.word	0x2000b868
 800dcc0:	2000b81c 	.word	0x2000b81c
 800dcc4:	2000b820 	.word	0x2000b820
 800dcc8:	2000b87c 	.word	0x2000b87c
 800dccc:	2000b884 	.word	0x2000b884
 800dcd0:	2000b86c 	.word	0x2000b86c
 800dcd4:	2000b394 	.word	0x2000b394
 800dcd8:	2000b390 	.word	0x2000b390
 800dcdc:	2000b878 	.word	0x2000b878
 800dce0:	2000b874 	.word	0x2000b874

0800dce4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dce4:	b480      	push	{r7}
 800dce6:	b085      	sub	sp, #20
 800dce8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dcea:	4b2a      	ldr	r3, [pc, #168]	; (800dd94 <vTaskSwitchContext+0xb0>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d003      	beq.n	800dcfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dcf2:	4b29      	ldr	r3, [pc, #164]	; (800dd98 <vTaskSwitchContext+0xb4>)
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dcf8:	e046      	b.n	800dd88 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800dcfa:	4b27      	ldr	r3, [pc, #156]	; (800dd98 <vTaskSwitchContext+0xb4>)
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd00:	4b26      	ldr	r3, [pc, #152]	; (800dd9c <vTaskSwitchContext+0xb8>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	60fb      	str	r3, [r7, #12]
 800dd06:	e010      	b.n	800dd2a <vTaskSwitchContext+0x46>
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d10a      	bne.n	800dd24 <vTaskSwitchContext+0x40>
	__asm volatile
 800dd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd12:	f383 8811 	msr	BASEPRI, r3
 800dd16:	f3bf 8f6f 	isb	sy
 800dd1a:	f3bf 8f4f 	dsb	sy
 800dd1e:	607b      	str	r3, [r7, #4]
}
 800dd20:	bf00      	nop
 800dd22:	e7fe      	b.n	800dd22 <vTaskSwitchContext+0x3e>
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	3b01      	subs	r3, #1
 800dd28:	60fb      	str	r3, [r7, #12]
 800dd2a:	491d      	ldr	r1, [pc, #116]	; (800dda0 <vTaskSwitchContext+0xbc>)
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	4613      	mov	r3, r2
 800dd30:	009b      	lsls	r3, r3, #2
 800dd32:	4413      	add	r3, r2
 800dd34:	009b      	lsls	r3, r3, #2
 800dd36:	440b      	add	r3, r1
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d0e4      	beq.n	800dd08 <vTaskSwitchContext+0x24>
 800dd3e:	68fa      	ldr	r2, [r7, #12]
 800dd40:	4613      	mov	r3, r2
 800dd42:	009b      	lsls	r3, r3, #2
 800dd44:	4413      	add	r3, r2
 800dd46:	009b      	lsls	r3, r3, #2
 800dd48:	4a15      	ldr	r2, [pc, #84]	; (800dda0 <vTaskSwitchContext+0xbc>)
 800dd4a:	4413      	add	r3, r2
 800dd4c:	60bb      	str	r3, [r7, #8]
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	685b      	ldr	r3, [r3, #4]
 800dd52:	685a      	ldr	r2, [r3, #4]
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	605a      	str	r2, [r3, #4]
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	685a      	ldr	r2, [r3, #4]
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	3308      	adds	r3, #8
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d104      	bne.n	800dd6e <vTaskSwitchContext+0x8a>
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	685b      	ldr	r3, [r3, #4]
 800dd68:	685a      	ldr	r2, [r3, #4]
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	605a      	str	r2, [r3, #4]
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	68db      	ldr	r3, [r3, #12]
 800dd74:	4a0b      	ldr	r2, [pc, #44]	; (800dda4 <vTaskSwitchContext+0xc0>)
 800dd76:	6013      	str	r3, [r2, #0]
 800dd78:	4a08      	ldr	r2, [pc, #32]	; (800dd9c <vTaskSwitchContext+0xb8>)
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dd7e:	4b09      	ldr	r3, [pc, #36]	; (800dda4 <vTaskSwitchContext+0xc0>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	3354      	adds	r3, #84	; 0x54
 800dd84:	4a08      	ldr	r2, [pc, #32]	; (800dda8 <vTaskSwitchContext+0xc4>)
 800dd86:	6013      	str	r3, [r2, #0]
}
 800dd88:	bf00      	nop
 800dd8a:	3714      	adds	r7, #20
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr
 800dd94:	2000b88c 	.word	0x2000b88c
 800dd98:	2000b878 	.word	0x2000b878
 800dd9c:	2000b86c 	.word	0x2000b86c
 800dda0:	2000b394 	.word	0x2000b394
 800dda4:	2000b390 	.word	0x2000b390
 800dda8:	200009bc 	.word	0x200009bc

0800ddac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b084      	sub	sp, #16
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d10a      	bne.n	800ddd2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ddbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc0:	f383 8811 	msr	BASEPRI, r3
 800ddc4:	f3bf 8f6f 	isb	sy
 800ddc8:	f3bf 8f4f 	dsb	sy
 800ddcc:	60fb      	str	r3, [r7, #12]
}
 800ddce:	bf00      	nop
 800ddd0:	e7fe      	b.n	800ddd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ddd2:	4b07      	ldr	r3, [pc, #28]	; (800ddf0 <vTaskPlaceOnEventList+0x44>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	3318      	adds	r3, #24
 800ddd8:	4619      	mov	r1, r3
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f7fe fe61 	bl	800caa2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dde0:	2101      	movs	r1, #1
 800dde2:	6838      	ldr	r0, [r7, #0]
 800dde4:	f000 faa6 	bl	800e334 <prvAddCurrentTaskToDelayedList>
}
 800dde8:	bf00      	nop
 800ddea:	3710      	adds	r7, #16
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	2000b390 	.word	0x2000b390

0800ddf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b086      	sub	sp, #24
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	60f8      	str	r0, [r7, #12]
 800ddfc:	60b9      	str	r1, [r7, #8]
 800ddfe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d10a      	bne.n	800de1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800de06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0a:	f383 8811 	msr	BASEPRI, r3
 800de0e:	f3bf 8f6f 	isb	sy
 800de12:	f3bf 8f4f 	dsb	sy
 800de16:	617b      	str	r3, [r7, #20]
}
 800de18:	bf00      	nop
 800de1a:	e7fe      	b.n	800de1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800de1c:	4b0a      	ldr	r3, [pc, #40]	; (800de48 <vTaskPlaceOnEventListRestricted+0x54>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	3318      	adds	r3, #24
 800de22:	4619      	mov	r1, r3
 800de24:	68f8      	ldr	r0, [r7, #12]
 800de26:	f7fe fe18 	bl	800ca5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d002      	beq.n	800de36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800de30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800de36:	6879      	ldr	r1, [r7, #4]
 800de38:	68b8      	ldr	r0, [r7, #8]
 800de3a:	f000 fa7b 	bl	800e334 <prvAddCurrentTaskToDelayedList>
	}
 800de3e:	bf00      	nop
 800de40:	3718      	adds	r7, #24
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
 800de46:	bf00      	nop
 800de48:	2000b390 	.word	0x2000b390

0800de4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b086      	sub	sp, #24
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	68db      	ldr	r3, [r3, #12]
 800de58:	68db      	ldr	r3, [r3, #12]
 800de5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d10a      	bne.n	800de78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800de62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de66:	f383 8811 	msr	BASEPRI, r3
 800de6a:	f3bf 8f6f 	isb	sy
 800de6e:	f3bf 8f4f 	dsb	sy
 800de72:	60fb      	str	r3, [r7, #12]
}
 800de74:	bf00      	nop
 800de76:	e7fe      	b.n	800de76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800de78:	693b      	ldr	r3, [r7, #16]
 800de7a:	3318      	adds	r3, #24
 800de7c:	4618      	mov	r0, r3
 800de7e:	f7fe fe49 	bl	800cb14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de82:	4b1e      	ldr	r3, [pc, #120]	; (800defc <xTaskRemoveFromEventList+0xb0>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d11d      	bne.n	800dec6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	3304      	adds	r3, #4
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fe fe40 	bl	800cb14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de98:	4b19      	ldr	r3, [pc, #100]	; (800df00 <xTaskRemoveFromEventList+0xb4>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d903      	bls.n	800dea8 <xTaskRemoveFromEventList+0x5c>
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea4:	4a16      	ldr	r2, [pc, #88]	; (800df00 <xTaskRemoveFromEventList+0xb4>)
 800dea6:	6013      	str	r3, [r2, #0]
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deac:	4613      	mov	r3, r2
 800deae:	009b      	lsls	r3, r3, #2
 800deb0:	4413      	add	r3, r2
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	4a13      	ldr	r2, [pc, #76]	; (800df04 <xTaskRemoveFromEventList+0xb8>)
 800deb6:	441a      	add	r2, r3
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	3304      	adds	r3, #4
 800debc:	4619      	mov	r1, r3
 800debe:	4610      	mov	r0, r2
 800dec0:	f7fe fdcb 	bl	800ca5a <vListInsertEnd>
 800dec4:	e005      	b.n	800ded2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	3318      	adds	r3, #24
 800deca:	4619      	mov	r1, r3
 800decc:	480e      	ldr	r0, [pc, #56]	; (800df08 <xTaskRemoveFromEventList+0xbc>)
 800dece:	f7fe fdc4 	bl	800ca5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ded6:	4b0d      	ldr	r3, [pc, #52]	; (800df0c <xTaskRemoveFromEventList+0xc0>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dedc:	429a      	cmp	r2, r3
 800dede:	d905      	bls.n	800deec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dee0:	2301      	movs	r3, #1
 800dee2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dee4:	4b0a      	ldr	r3, [pc, #40]	; (800df10 <xTaskRemoveFromEventList+0xc4>)
 800dee6:	2201      	movs	r2, #1
 800dee8:	601a      	str	r2, [r3, #0]
 800deea:	e001      	b.n	800def0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800deec:	2300      	movs	r3, #0
 800deee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800def0:	697b      	ldr	r3, [r7, #20]
}
 800def2:	4618      	mov	r0, r3
 800def4:	3718      	adds	r7, #24
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	2000b88c 	.word	0x2000b88c
 800df00:	2000b86c 	.word	0x2000b86c
 800df04:	2000b394 	.word	0x2000b394
 800df08:	2000b824 	.word	0x2000b824
 800df0c:	2000b390 	.word	0x2000b390
 800df10:	2000b878 	.word	0x2000b878

0800df14 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b084      	sub	sp, #16
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d10a      	bne.n	800df38 <vTaskSetTimeOutState+0x24>
	__asm volatile
 800df22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df26:	f383 8811 	msr	BASEPRI, r3
 800df2a:	f3bf 8f6f 	isb	sy
 800df2e:	f3bf 8f4f 	dsb	sy
 800df32:	60fb      	str	r3, [r7, #12]
}
 800df34:	bf00      	nop
 800df36:	e7fe      	b.n	800df36 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800df38:	f000 fecc 	bl	800ecd4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800df3c:	4b06      	ldr	r3, [pc, #24]	; (800df58 <vTaskSetTimeOutState+0x44>)
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800df44:	4b05      	ldr	r3, [pc, #20]	; (800df5c <vTaskSetTimeOutState+0x48>)
 800df46:	681a      	ldr	r2, [r3, #0]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800df4c:	f000 fef2 	bl	800ed34 <vPortExitCritical>
}
 800df50:	bf00      	nop
 800df52:	3710      	adds	r7, #16
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}
 800df58:	2000b87c 	.word	0x2000b87c
 800df5c:	2000b868 	.word	0x2000b868

0800df60 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800df60:	b480      	push	{r7}
 800df62:	b083      	sub	sp, #12
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800df68:	4b06      	ldr	r3, [pc, #24]	; (800df84 <vTaskInternalSetTimeOutState+0x24>)
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800df70:	4b05      	ldr	r3, [pc, #20]	; (800df88 <vTaskInternalSetTimeOutState+0x28>)
 800df72:	681a      	ldr	r2, [r3, #0]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	605a      	str	r2, [r3, #4]
}
 800df78:	bf00      	nop
 800df7a:	370c      	adds	r7, #12
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr
 800df84:	2000b87c 	.word	0x2000b87c
 800df88:	2000b868 	.word	0x2000b868

0800df8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b088      	sub	sp, #32
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d10a      	bne.n	800dfb2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800df9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfa0:	f383 8811 	msr	BASEPRI, r3
 800dfa4:	f3bf 8f6f 	isb	sy
 800dfa8:	f3bf 8f4f 	dsb	sy
 800dfac:	613b      	str	r3, [r7, #16]
}
 800dfae:	bf00      	nop
 800dfb0:	e7fe      	b.n	800dfb0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d10a      	bne.n	800dfce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dfb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfbc:	f383 8811 	msr	BASEPRI, r3
 800dfc0:	f3bf 8f6f 	isb	sy
 800dfc4:	f3bf 8f4f 	dsb	sy
 800dfc8:	60fb      	str	r3, [r7, #12]
}
 800dfca:	bf00      	nop
 800dfcc:	e7fe      	b.n	800dfcc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dfce:	f000 fe81 	bl	800ecd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dfd2:	4b1d      	ldr	r3, [pc, #116]	; (800e048 <xTaskCheckForTimeOut+0xbc>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	685b      	ldr	r3, [r3, #4]
 800dfdc:	69ba      	ldr	r2, [r7, #24]
 800dfde:	1ad3      	subs	r3, r2, r3
 800dfe0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfea:	d102      	bne.n	800dff2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dfec:	2300      	movs	r3, #0
 800dfee:	61fb      	str	r3, [r7, #28]
 800dff0:	e023      	b.n	800e03a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681a      	ldr	r2, [r3, #0]
 800dff6:	4b15      	ldr	r3, [pc, #84]	; (800e04c <xTaskCheckForTimeOut+0xc0>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d007      	beq.n	800e00e <xTaskCheckForTimeOut+0x82>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	685b      	ldr	r3, [r3, #4]
 800e002:	69ba      	ldr	r2, [r7, #24]
 800e004:	429a      	cmp	r2, r3
 800e006:	d302      	bcc.n	800e00e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e008:	2301      	movs	r3, #1
 800e00a:	61fb      	str	r3, [r7, #28]
 800e00c:	e015      	b.n	800e03a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	697a      	ldr	r2, [r7, #20]
 800e014:	429a      	cmp	r2, r3
 800e016:	d20b      	bcs.n	800e030 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	681a      	ldr	r2, [r3, #0]
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	1ad2      	subs	r2, r2, r3
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f7ff ff9b 	bl	800df60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e02a:	2300      	movs	r3, #0
 800e02c:	61fb      	str	r3, [r7, #28]
 800e02e:	e004      	b.n	800e03a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	2200      	movs	r2, #0
 800e034:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e036:	2301      	movs	r3, #1
 800e038:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e03a:	f000 fe7b 	bl	800ed34 <vPortExitCritical>

	return xReturn;
 800e03e:	69fb      	ldr	r3, [r7, #28]
}
 800e040:	4618      	mov	r0, r3
 800e042:	3720      	adds	r7, #32
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	2000b868 	.word	0x2000b868
 800e04c:	2000b87c 	.word	0x2000b87c

0800e050 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e050:	b480      	push	{r7}
 800e052:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e054:	4b03      	ldr	r3, [pc, #12]	; (800e064 <vTaskMissedYield+0x14>)
 800e056:	2201      	movs	r2, #1
 800e058:	601a      	str	r2, [r3, #0]
}
 800e05a:	bf00      	nop
 800e05c:	46bd      	mov	sp, r7
 800e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e062:	4770      	bx	lr
 800e064:	2000b878 	.word	0x2000b878

0800e068 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e070:	f000 f852 	bl	800e118 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e074:	4b06      	ldr	r3, [pc, #24]	; (800e090 <prvIdleTask+0x28>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d9f9      	bls.n	800e070 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e07c:	4b05      	ldr	r3, [pc, #20]	; (800e094 <prvIdleTask+0x2c>)
 800e07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e082:	601a      	str	r2, [r3, #0]
 800e084:	f3bf 8f4f 	dsb	sy
 800e088:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e08c:	e7f0      	b.n	800e070 <prvIdleTask+0x8>
 800e08e:	bf00      	nop
 800e090:	2000b394 	.word	0x2000b394
 800e094:	e000ed04 	.word	0xe000ed04

0800e098 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e09e:	2300      	movs	r3, #0
 800e0a0:	607b      	str	r3, [r7, #4]
 800e0a2:	e00c      	b.n	800e0be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	4613      	mov	r3, r2
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	4413      	add	r3, r2
 800e0ac:	009b      	lsls	r3, r3, #2
 800e0ae:	4a12      	ldr	r2, [pc, #72]	; (800e0f8 <prvInitialiseTaskLists+0x60>)
 800e0b0:	4413      	add	r3, r2
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f7fe fca4 	bl	800ca00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	607b      	str	r3, [r7, #4]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2b37      	cmp	r3, #55	; 0x37
 800e0c2:	d9ef      	bls.n	800e0a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e0c4:	480d      	ldr	r0, [pc, #52]	; (800e0fc <prvInitialiseTaskLists+0x64>)
 800e0c6:	f7fe fc9b 	bl	800ca00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e0ca:	480d      	ldr	r0, [pc, #52]	; (800e100 <prvInitialiseTaskLists+0x68>)
 800e0cc:	f7fe fc98 	bl	800ca00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e0d0:	480c      	ldr	r0, [pc, #48]	; (800e104 <prvInitialiseTaskLists+0x6c>)
 800e0d2:	f7fe fc95 	bl	800ca00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e0d6:	480c      	ldr	r0, [pc, #48]	; (800e108 <prvInitialiseTaskLists+0x70>)
 800e0d8:	f7fe fc92 	bl	800ca00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e0dc:	480b      	ldr	r0, [pc, #44]	; (800e10c <prvInitialiseTaskLists+0x74>)
 800e0de:	f7fe fc8f 	bl	800ca00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e0e2:	4b0b      	ldr	r3, [pc, #44]	; (800e110 <prvInitialiseTaskLists+0x78>)
 800e0e4:	4a05      	ldr	r2, [pc, #20]	; (800e0fc <prvInitialiseTaskLists+0x64>)
 800e0e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e0e8:	4b0a      	ldr	r3, [pc, #40]	; (800e114 <prvInitialiseTaskLists+0x7c>)
 800e0ea:	4a05      	ldr	r2, [pc, #20]	; (800e100 <prvInitialiseTaskLists+0x68>)
 800e0ec:	601a      	str	r2, [r3, #0]
}
 800e0ee:	bf00      	nop
 800e0f0:	3708      	adds	r7, #8
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	2000b394 	.word	0x2000b394
 800e0fc:	2000b7f4 	.word	0x2000b7f4
 800e100:	2000b808 	.word	0x2000b808
 800e104:	2000b824 	.word	0x2000b824
 800e108:	2000b838 	.word	0x2000b838
 800e10c:	2000b850 	.word	0x2000b850
 800e110:	2000b81c 	.word	0x2000b81c
 800e114:	2000b820 	.word	0x2000b820

0800e118 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e11e:	e019      	b.n	800e154 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e120:	f000 fdd8 	bl	800ecd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e124:	4b10      	ldr	r3, [pc, #64]	; (800e168 <prvCheckTasksWaitingTermination+0x50>)
 800e126:	68db      	ldr	r3, [r3, #12]
 800e128:	68db      	ldr	r3, [r3, #12]
 800e12a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	3304      	adds	r3, #4
 800e130:	4618      	mov	r0, r3
 800e132:	f7fe fcef 	bl	800cb14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e136:	4b0d      	ldr	r3, [pc, #52]	; (800e16c <prvCheckTasksWaitingTermination+0x54>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	3b01      	subs	r3, #1
 800e13c:	4a0b      	ldr	r2, [pc, #44]	; (800e16c <prvCheckTasksWaitingTermination+0x54>)
 800e13e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e140:	4b0b      	ldr	r3, [pc, #44]	; (800e170 <prvCheckTasksWaitingTermination+0x58>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	3b01      	subs	r3, #1
 800e146:	4a0a      	ldr	r2, [pc, #40]	; (800e170 <prvCheckTasksWaitingTermination+0x58>)
 800e148:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e14a:	f000 fdf3 	bl	800ed34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f000 f810 	bl	800e174 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e154:	4b06      	ldr	r3, [pc, #24]	; (800e170 <prvCheckTasksWaitingTermination+0x58>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d1e1      	bne.n	800e120 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e15c:	bf00      	nop
 800e15e:	bf00      	nop
 800e160:	3708      	adds	r7, #8
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	2000b838 	.word	0x2000b838
 800e16c:	2000b864 	.word	0x2000b864
 800e170:	2000b84c 	.word	0x2000b84c

0800e174 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e174:	b580      	push	{r7, lr}
 800e176:	b084      	sub	sp, #16
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	3354      	adds	r3, #84	; 0x54
 800e180:	4618      	mov	r0, r3
 800e182:	f00c fcb7 	bl	801aaf4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d108      	bne.n	800e1a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e194:	4618      	mov	r0, r3
 800e196:	f000 ff8b 	bl	800f0b0 <vPortFree>
				vPortFree( pxTCB );
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f000 ff88 	bl	800f0b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e1a0:	e018      	b.n	800e1d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d103      	bne.n	800e1b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f000 ff7f 	bl	800f0b0 <vPortFree>
	}
 800e1b2:	e00f      	b.n	800e1d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e1ba:	2b02      	cmp	r3, #2
 800e1bc:	d00a      	beq.n	800e1d4 <prvDeleteTCB+0x60>
	__asm volatile
 800e1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c2:	f383 8811 	msr	BASEPRI, r3
 800e1c6:	f3bf 8f6f 	isb	sy
 800e1ca:	f3bf 8f4f 	dsb	sy
 800e1ce:	60fb      	str	r3, [r7, #12]
}
 800e1d0:	bf00      	nop
 800e1d2:	e7fe      	b.n	800e1d2 <prvDeleteTCB+0x5e>
	}
 800e1d4:	bf00      	nop
 800e1d6:	3710      	adds	r7, #16
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b083      	sub	sp, #12
 800e1e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1e2:	4b0c      	ldr	r3, [pc, #48]	; (800e214 <prvResetNextTaskUnblockTime+0x38>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d104      	bne.n	800e1f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e1ec:	4b0a      	ldr	r3, [pc, #40]	; (800e218 <prvResetNextTaskUnblockTime+0x3c>)
 800e1ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e1f4:	e008      	b.n	800e208 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e1f6:	4b07      	ldr	r3, [pc, #28]	; (800e214 <prvResetNextTaskUnblockTime+0x38>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	68db      	ldr	r3, [r3, #12]
 800e1fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	4a04      	ldr	r2, [pc, #16]	; (800e218 <prvResetNextTaskUnblockTime+0x3c>)
 800e206:	6013      	str	r3, [r2, #0]
}
 800e208:	bf00      	nop
 800e20a:	370c      	adds	r7, #12
 800e20c:	46bd      	mov	sp, r7
 800e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e212:	4770      	bx	lr
 800e214:	2000b81c 	.word	0x2000b81c
 800e218:	2000b884 	.word	0x2000b884

0800e21c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e21c:	b480      	push	{r7}
 800e21e:	b083      	sub	sp, #12
 800e220:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e222:	4b0b      	ldr	r3, [pc, #44]	; (800e250 <xTaskGetSchedulerState+0x34>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d102      	bne.n	800e230 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e22a:	2301      	movs	r3, #1
 800e22c:	607b      	str	r3, [r7, #4]
 800e22e:	e008      	b.n	800e242 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e230:	4b08      	ldr	r3, [pc, #32]	; (800e254 <xTaskGetSchedulerState+0x38>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d102      	bne.n	800e23e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e238:	2302      	movs	r3, #2
 800e23a:	607b      	str	r3, [r7, #4]
 800e23c:	e001      	b.n	800e242 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e23e:	2300      	movs	r3, #0
 800e240:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e242:	687b      	ldr	r3, [r7, #4]
	}
 800e244:	4618      	mov	r0, r3
 800e246:	370c      	adds	r7, #12
 800e248:	46bd      	mov	sp, r7
 800e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24e:	4770      	bx	lr
 800e250:	2000b870 	.word	0x2000b870
 800e254:	2000b88c 	.word	0x2000b88c

0800e258 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b086      	sub	sp, #24
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e264:	2300      	movs	r3, #0
 800e266:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d056      	beq.n	800e31c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e26e:	4b2e      	ldr	r3, [pc, #184]	; (800e328 <xTaskPriorityDisinherit+0xd0>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	693a      	ldr	r2, [r7, #16]
 800e274:	429a      	cmp	r2, r3
 800e276:	d00a      	beq.n	800e28e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27c:	f383 8811 	msr	BASEPRI, r3
 800e280:	f3bf 8f6f 	isb	sy
 800e284:	f3bf 8f4f 	dsb	sy
 800e288:	60fb      	str	r3, [r7, #12]
}
 800e28a:	bf00      	nop
 800e28c:	e7fe      	b.n	800e28c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e28e:	693b      	ldr	r3, [r7, #16]
 800e290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e292:	2b00      	cmp	r3, #0
 800e294:	d10a      	bne.n	800e2ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e29a:	f383 8811 	msr	BASEPRI, r3
 800e29e:	f3bf 8f6f 	isb	sy
 800e2a2:	f3bf 8f4f 	dsb	sy
 800e2a6:	60bb      	str	r3, [r7, #8]
}
 800e2a8:	bf00      	nop
 800e2aa:	e7fe      	b.n	800e2aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2b0:	1e5a      	subs	r2, r3, #1
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d02c      	beq.n	800e31c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d128      	bne.n	800e31c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	3304      	adds	r3, #4
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7fe fc20 	bl	800cb14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e2d8:	693b      	ldr	r3, [r7, #16]
 800e2da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2dc:	693b      	ldr	r3, [r7, #16]
 800e2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2ec:	4b0f      	ldr	r3, [pc, #60]	; (800e32c <xTaskPriorityDisinherit+0xd4>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d903      	bls.n	800e2fc <xTaskPriorityDisinherit+0xa4>
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2f8:	4a0c      	ldr	r2, [pc, #48]	; (800e32c <xTaskPriorityDisinherit+0xd4>)
 800e2fa:	6013      	str	r3, [r2, #0]
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e300:	4613      	mov	r3, r2
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	4413      	add	r3, r2
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	4a09      	ldr	r2, [pc, #36]	; (800e330 <xTaskPriorityDisinherit+0xd8>)
 800e30a:	441a      	add	r2, r3
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	3304      	adds	r3, #4
 800e310:	4619      	mov	r1, r3
 800e312:	4610      	mov	r0, r2
 800e314:	f7fe fba1 	bl	800ca5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e318:	2301      	movs	r3, #1
 800e31a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e31c:	697b      	ldr	r3, [r7, #20]
	}
 800e31e:	4618      	mov	r0, r3
 800e320:	3718      	adds	r7, #24
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	2000b390 	.word	0x2000b390
 800e32c:	2000b86c 	.word	0x2000b86c
 800e330:	2000b394 	.word	0x2000b394

0800e334 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
 800e33c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e33e:	4b21      	ldr	r3, [pc, #132]	; (800e3c4 <prvAddCurrentTaskToDelayedList+0x90>)
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e344:	4b20      	ldr	r3, [pc, #128]	; (800e3c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	3304      	adds	r3, #4
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fe fbe2 	bl	800cb14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e356:	d10a      	bne.n	800e36e <prvAddCurrentTaskToDelayedList+0x3a>
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d007      	beq.n	800e36e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e35e:	4b1a      	ldr	r3, [pc, #104]	; (800e3c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	3304      	adds	r3, #4
 800e364:	4619      	mov	r1, r3
 800e366:	4819      	ldr	r0, [pc, #100]	; (800e3cc <prvAddCurrentTaskToDelayedList+0x98>)
 800e368:	f7fe fb77 	bl	800ca5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e36c:	e026      	b.n	800e3bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e36e:	68fa      	ldr	r2, [r7, #12]
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	4413      	add	r3, r2
 800e374:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e376:	4b14      	ldr	r3, [pc, #80]	; (800e3c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	68ba      	ldr	r2, [r7, #8]
 800e37c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e37e:	68ba      	ldr	r2, [r7, #8]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	429a      	cmp	r2, r3
 800e384:	d209      	bcs.n	800e39a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e386:	4b12      	ldr	r3, [pc, #72]	; (800e3d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	4b0f      	ldr	r3, [pc, #60]	; (800e3c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	3304      	adds	r3, #4
 800e390:	4619      	mov	r1, r3
 800e392:	4610      	mov	r0, r2
 800e394:	f7fe fb85 	bl	800caa2 <vListInsert>
}
 800e398:	e010      	b.n	800e3bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e39a:	4b0e      	ldr	r3, [pc, #56]	; (800e3d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e39c:	681a      	ldr	r2, [r3, #0]
 800e39e:	4b0a      	ldr	r3, [pc, #40]	; (800e3c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	3304      	adds	r3, #4
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	4610      	mov	r0, r2
 800e3a8:	f7fe fb7b 	bl	800caa2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e3ac:	4b0a      	ldr	r3, [pc, #40]	; (800e3d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	68ba      	ldr	r2, [r7, #8]
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d202      	bcs.n	800e3bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e3b6:	4a08      	ldr	r2, [pc, #32]	; (800e3d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	6013      	str	r3, [r2, #0]
}
 800e3bc:	bf00      	nop
 800e3be:	3710      	adds	r7, #16
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	2000b868 	.word	0x2000b868
 800e3c8:	2000b390 	.word	0x2000b390
 800e3cc:	2000b850 	.word	0x2000b850
 800e3d0:	2000b820 	.word	0x2000b820
 800e3d4:	2000b81c 	.word	0x2000b81c
 800e3d8:	2000b884 	.word	0x2000b884

0800e3dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b08a      	sub	sp, #40	; 0x28
 800e3e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e3e6:	f000 fb07 	bl	800e9f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e3ea:	4b1c      	ldr	r3, [pc, #112]	; (800e45c <xTimerCreateTimerTask+0x80>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d021      	beq.n	800e436 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e3fa:	1d3a      	adds	r2, r7, #4
 800e3fc:	f107 0108 	add.w	r1, r7, #8
 800e400:	f107 030c 	add.w	r3, r7, #12
 800e404:	4618      	mov	r0, r3
 800e406:	f7fe fae1 	bl	800c9cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e40a:	6879      	ldr	r1, [r7, #4]
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	68fa      	ldr	r2, [r7, #12]
 800e410:	9202      	str	r2, [sp, #8]
 800e412:	9301      	str	r3, [sp, #4]
 800e414:	2302      	movs	r3, #2
 800e416:	9300      	str	r3, [sp, #0]
 800e418:	2300      	movs	r3, #0
 800e41a:	460a      	mov	r2, r1
 800e41c:	4910      	ldr	r1, [pc, #64]	; (800e460 <xTimerCreateTimerTask+0x84>)
 800e41e:	4811      	ldr	r0, [pc, #68]	; (800e464 <xTimerCreateTimerTask+0x88>)
 800e420:	f7ff f88e 	bl	800d540 <xTaskCreateStatic>
 800e424:	4603      	mov	r3, r0
 800e426:	4a10      	ldr	r2, [pc, #64]	; (800e468 <xTimerCreateTimerTask+0x8c>)
 800e428:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e42a:	4b0f      	ldr	r3, [pc, #60]	; (800e468 <xTimerCreateTimerTask+0x8c>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d001      	beq.n	800e436 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e432:	2301      	movs	r3, #1
 800e434:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e436:	697b      	ldr	r3, [r7, #20]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d10a      	bne.n	800e452 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e440:	f383 8811 	msr	BASEPRI, r3
 800e444:	f3bf 8f6f 	isb	sy
 800e448:	f3bf 8f4f 	dsb	sy
 800e44c:	613b      	str	r3, [r7, #16]
}
 800e44e:	bf00      	nop
 800e450:	e7fe      	b.n	800e450 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e452:	697b      	ldr	r3, [r7, #20]
}
 800e454:	4618      	mov	r0, r3
 800e456:	3718      	adds	r7, #24
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}
 800e45c:	2000b8c0 	.word	0x2000b8c0
 800e460:	0801be54 	.word	0x0801be54
 800e464:	0800e5a1 	.word	0x0800e5a1
 800e468:	2000b8c4 	.word	0x2000b8c4

0800e46c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b08a      	sub	sp, #40	; 0x28
 800e470:	af00      	add	r7, sp, #0
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	607a      	str	r2, [r7, #4]
 800e478:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e47a:	2300      	movs	r3, #0
 800e47c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d10a      	bne.n	800e49a <xTimerGenericCommand+0x2e>
	__asm volatile
 800e484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e488:	f383 8811 	msr	BASEPRI, r3
 800e48c:	f3bf 8f6f 	isb	sy
 800e490:	f3bf 8f4f 	dsb	sy
 800e494:	623b      	str	r3, [r7, #32]
}
 800e496:	bf00      	nop
 800e498:	e7fe      	b.n	800e498 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e49a:	4b1a      	ldr	r3, [pc, #104]	; (800e504 <xTimerGenericCommand+0x98>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d02a      	beq.n	800e4f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	2b05      	cmp	r3, #5
 800e4b2:	dc18      	bgt.n	800e4e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e4b4:	f7ff feb2 	bl	800e21c <xTaskGetSchedulerState>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	2b02      	cmp	r3, #2
 800e4bc:	d109      	bne.n	800e4d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e4be:	4b11      	ldr	r3, [pc, #68]	; (800e504 <xTimerGenericCommand+0x98>)
 800e4c0:	6818      	ldr	r0, [r3, #0]
 800e4c2:	f107 0110 	add.w	r1, r7, #16
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4ca:	f7fe fc51 	bl	800cd70 <xQueueGenericSend>
 800e4ce:	6278      	str	r0, [r7, #36]	; 0x24
 800e4d0:	e012      	b.n	800e4f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e4d2:	4b0c      	ldr	r3, [pc, #48]	; (800e504 <xTimerGenericCommand+0x98>)
 800e4d4:	6818      	ldr	r0, [r3, #0]
 800e4d6:	f107 0110 	add.w	r1, r7, #16
 800e4da:	2300      	movs	r3, #0
 800e4dc:	2200      	movs	r2, #0
 800e4de:	f7fe fc47 	bl	800cd70 <xQueueGenericSend>
 800e4e2:	6278      	str	r0, [r7, #36]	; 0x24
 800e4e4:	e008      	b.n	800e4f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e4e6:	4b07      	ldr	r3, [pc, #28]	; (800e504 <xTimerGenericCommand+0x98>)
 800e4e8:	6818      	ldr	r0, [r3, #0]
 800e4ea:	f107 0110 	add.w	r1, r7, #16
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	683a      	ldr	r2, [r7, #0]
 800e4f2:	f7fe fd3b 	bl	800cf6c <xQueueGenericSendFromISR>
 800e4f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	3728      	adds	r7, #40	; 0x28
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	2000b8c0 	.word	0x2000b8c0

0800e508 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b088      	sub	sp, #32
 800e50c:	af02      	add	r7, sp, #8
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e512:	4b22      	ldr	r3, [pc, #136]	; (800e59c <prvProcessExpiredTimer+0x94>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	68db      	ldr	r3, [r3, #12]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e51c:	697b      	ldr	r3, [r7, #20]
 800e51e:	3304      	adds	r3, #4
 800e520:	4618      	mov	r0, r3
 800e522:	f7fe faf7 	bl	800cb14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e52c:	f003 0304 	and.w	r3, r3, #4
 800e530:	2b00      	cmp	r3, #0
 800e532:	d022      	beq.n	800e57a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	699a      	ldr	r2, [r3, #24]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	18d1      	adds	r1, r2, r3
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	683a      	ldr	r2, [r7, #0]
 800e540:	6978      	ldr	r0, [r7, #20]
 800e542:	f000 f8d1 	bl	800e6e8 <prvInsertTimerInActiveList>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d01f      	beq.n	800e58c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e54c:	2300      	movs	r3, #0
 800e54e:	9300      	str	r3, [sp, #0]
 800e550:	2300      	movs	r3, #0
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	2100      	movs	r1, #0
 800e556:	6978      	ldr	r0, [r7, #20]
 800e558:	f7ff ff88 	bl	800e46c <xTimerGenericCommand>
 800e55c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d113      	bne.n	800e58c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e568:	f383 8811 	msr	BASEPRI, r3
 800e56c:	f3bf 8f6f 	isb	sy
 800e570:	f3bf 8f4f 	dsb	sy
 800e574:	60fb      	str	r3, [r7, #12]
}
 800e576:	bf00      	nop
 800e578:	e7fe      	b.n	800e578 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e580:	f023 0301 	bic.w	r3, r3, #1
 800e584:	b2da      	uxtb	r2, r3
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	6a1b      	ldr	r3, [r3, #32]
 800e590:	6978      	ldr	r0, [r7, #20]
 800e592:	4798      	blx	r3
}
 800e594:	bf00      	nop
 800e596:	3718      	adds	r7, #24
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd80      	pop	{r7, pc}
 800e59c:	2000b8b8 	.word	0x2000b8b8

0800e5a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b084      	sub	sp, #16
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e5a8:	f107 0308 	add.w	r3, r7, #8
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f000 f857 	bl	800e660 <prvGetNextExpireTime>
 800e5b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	68f8      	ldr	r0, [r7, #12]
 800e5ba:	f000 f803 	bl	800e5c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e5be:	f000 f8d5 	bl	800e76c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e5c2:	e7f1      	b.n	800e5a8 <prvTimerTask+0x8>

0800e5c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e5ce:	f7ff fa13 	bl	800d9f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e5d2:	f107 0308 	add.w	r3, r7, #8
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f000 f866 	bl	800e6a8 <prvSampleTimeNow>
 800e5dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d130      	bne.n	800e646 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d10a      	bne.n	800e600 <prvProcessTimerOrBlockTask+0x3c>
 800e5ea:	687a      	ldr	r2, [r7, #4]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d806      	bhi.n	800e600 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e5f2:	f7ff fa0f 	bl	800da14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e5f6:	68f9      	ldr	r1, [r7, #12]
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f7ff ff85 	bl	800e508 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e5fe:	e024      	b.n	800e64a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d008      	beq.n	800e618 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e606:	4b13      	ldr	r3, [pc, #76]	; (800e654 <prvProcessTimerOrBlockTask+0x90>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d101      	bne.n	800e614 <prvProcessTimerOrBlockTask+0x50>
 800e610:	2301      	movs	r3, #1
 800e612:	e000      	b.n	800e616 <prvProcessTimerOrBlockTask+0x52>
 800e614:	2300      	movs	r3, #0
 800e616:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e618:	4b0f      	ldr	r3, [pc, #60]	; (800e658 <prvProcessTimerOrBlockTask+0x94>)
 800e61a:	6818      	ldr	r0, [r3, #0]
 800e61c:	687a      	ldr	r2, [r7, #4]
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	1ad3      	subs	r3, r2, r3
 800e622:	683a      	ldr	r2, [r7, #0]
 800e624:	4619      	mov	r1, r3
 800e626:	f7fe ff57 	bl	800d4d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e62a:	f7ff f9f3 	bl	800da14 <xTaskResumeAll>
 800e62e:	4603      	mov	r3, r0
 800e630:	2b00      	cmp	r3, #0
 800e632:	d10a      	bne.n	800e64a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e634:	4b09      	ldr	r3, [pc, #36]	; (800e65c <prvProcessTimerOrBlockTask+0x98>)
 800e636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e63a:	601a      	str	r2, [r3, #0]
 800e63c:	f3bf 8f4f 	dsb	sy
 800e640:	f3bf 8f6f 	isb	sy
}
 800e644:	e001      	b.n	800e64a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e646:	f7ff f9e5 	bl	800da14 <xTaskResumeAll>
}
 800e64a:	bf00      	nop
 800e64c:	3710      	adds	r7, #16
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	2000b8bc 	.word	0x2000b8bc
 800e658:	2000b8c0 	.word	0x2000b8c0
 800e65c:	e000ed04 	.word	0xe000ed04

0800e660 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e660:	b480      	push	{r7}
 800e662:	b085      	sub	sp, #20
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e668:	4b0e      	ldr	r3, [pc, #56]	; (800e6a4 <prvGetNextExpireTime+0x44>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d101      	bne.n	800e676 <prvGetNextExpireTime+0x16>
 800e672:	2201      	movs	r2, #1
 800e674:	e000      	b.n	800e678 <prvGetNextExpireTime+0x18>
 800e676:	2200      	movs	r2, #0
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d105      	bne.n	800e690 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e684:	4b07      	ldr	r3, [pc, #28]	; (800e6a4 <prvGetNextExpireTime+0x44>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	68db      	ldr	r3, [r3, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	60fb      	str	r3, [r7, #12]
 800e68e:	e001      	b.n	800e694 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e690:	2300      	movs	r3, #0
 800e692:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e694:	68fb      	ldr	r3, [r7, #12]
}
 800e696:	4618      	mov	r0, r3
 800e698:	3714      	adds	r7, #20
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	2000b8b8 	.word	0x2000b8b8

0800e6a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b084      	sub	sp, #16
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e6b0:	f7ff fa4e 	bl	800db50 <xTaskGetTickCount>
 800e6b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e6b6:	4b0b      	ldr	r3, [pc, #44]	; (800e6e4 <prvSampleTimeNow+0x3c>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	68fa      	ldr	r2, [r7, #12]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d205      	bcs.n	800e6cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e6c0:	f000 f936 	bl	800e930 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	601a      	str	r2, [r3, #0]
 800e6ca:	e002      	b.n	800e6d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e6d2:	4a04      	ldr	r2, [pc, #16]	; (800e6e4 <prvSampleTimeNow+0x3c>)
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	3710      	adds	r7, #16
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
 800e6e2:	bf00      	nop
 800e6e4:	2000b8c8 	.word	0x2000b8c8

0800e6e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b086      	sub	sp, #24
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	60f8      	str	r0, [r7, #12]
 800e6f0:	60b9      	str	r1, [r7, #8]
 800e6f2:	607a      	str	r2, [r7, #4]
 800e6f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	68ba      	ldr	r2, [r7, #8]
 800e6fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	68fa      	ldr	r2, [r7, #12]
 800e704:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e706:	68ba      	ldr	r2, [r7, #8]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d812      	bhi.n	800e734 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e70e:	687a      	ldr	r2, [r7, #4]
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	1ad2      	subs	r2, r2, r3
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	699b      	ldr	r3, [r3, #24]
 800e718:	429a      	cmp	r2, r3
 800e71a:	d302      	bcc.n	800e722 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e71c:	2301      	movs	r3, #1
 800e71e:	617b      	str	r3, [r7, #20]
 800e720:	e01b      	b.n	800e75a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e722:	4b10      	ldr	r3, [pc, #64]	; (800e764 <prvInsertTimerInActiveList+0x7c>)
 800e724:	681a      	ldr	r2, [r3, #0]
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	3304      	adds	r3, #4
 800e72a:	4619      	mov	r1, r3
 800e72c:	4610      	mov	r0, r2
 800e72e:	f7fe f9b8 	bl	800caa2 <vListInsert>
 800e732:	e012      	b.n	800e75a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e734:	687a      	ldr	r2, [r7, #4]
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d206      	bcs.n	800e74a <prvInsertTimerInActiveList+0x62>
 800e73c:	68ba      	ldr	r2, [r7, #8]
 800e73e:	683b      	ldr	r3, [r7, #0]
 800e740:	429a      	cmp	r2, r3
 800e742:	d302      	bcc.n	800e74a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e744:	2301      	movs	r3, #1
 800e746:	617b      	str	r3, [r7, #20]
 800e748:	e007      	b.n	800e75a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e74a:	4b07      	ldr	r3, [pc, #28]	; (800e768 <prvInsertTimerInActiveList+0x80>)
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	3304      	adds	r3, #4
 800e752:	4619      	mov	r1, r3
 800e754:	4610      	mov	r0, r2
 800e756:	f7fe f9a4 	bl	800caa2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e75a:	697b      	ldr	r3, [r7, #20]
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3718      	adds	r7, #24
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}
 800e764:	2000b8bc 	.word	0x2000b8bc
 800e768:	2000b8b8 	.word	0x2000b8b8

0800e76c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	b08e      	sub	sp, #56	; 0x38
 800e770:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e772:	e0ca      	b.n	800e90a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	2b00      	cmp	r3, #0
 800e778:	da18      	bge.n	800e7ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e77a:	1d3b      	adds	r3, r7, #4
 800e77c:	3304      	adds	r3, #4
 800e77e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e782:	2b00      	cmp	r3, #0
 800e784:	d10a      	bne.n	800e79c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e78a:	f383 8811 	msr	BASEPRI, r3
 800e78e:	f3bf 8f6f 	isb	sy
 800e792:	f3bf 8f4f 	dsb	sy
 800e796:	61fb      	str	r3, [r7, #28]
}
 800e798:	bf00      	nop
 800e79a:	e7fe      	b.n	800e79a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7a2:	6850      	ldr	r0, [r2, #4]
 800e7a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7a6:	6892      	ldr	r2, [r2, #8]
 800e7a8:	4611      	mov	r1, r2
 800e7aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	f2c0 80aa 	blt.w	800e908 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ba:	695b      	ldr	r3, [r3, #20]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d004      	beq.n	800e7ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c2:	3304      	adds	r3, #4
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7fe f9a5 	bl	800cb14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e7ca:	463b      	mov	r3, r7
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7ff ff6b 	bl	800e6a8 <prvSampleTimeNow>
 800e7d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2b09      	cmp	r3, #9
 800e7d8:	f200 8097 	bhi.w	800e90a <prvProcessReceivedCommands+0x19e>
 800e7dc:	a201      	add	r2, pc, #4	; (adr r2, 800e7e4 <prvProcessReceivedCommands+0x78>)
 800e7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7e2:	bf00      	nop
 800e7e4:	0800e80d 	.word	0x0800e80d
 800e7e8:	0800e80d 	.word	0x0800e80d
 800e7ec:	0800e80d 	.word	0x0800e80d
 800e7f0:	0800e881 	.word	0x0800e881
 800e7f4:	0800e895 	.word	0x0800e895
 800e7f8:	0800e8df 	.word	0x0800e8df
 800e7fc:	0800e80d 	.word	0x0800e80d
 800e800:	0800e80d 	.word	0x0800e80d
 800e804:	0800e881 	.word	0x0800e881
 800e808:	0800e895 	.word	0x0800e895
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e80e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e812:	f043 0301 	orr.w	r3, r3, #1
 800e816:	b2da      	uxtb	r2, r3
 800e818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e81e:	68ba      	ldr	r2, [r7, #8]
 800e820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e822:	699b      	ldr	r3, [r3, #24]
 800e824:	18d1      	adds	r1, r2, r3
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e82a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e82c:	f7ff ff5c 	bl	800e6e8 <prvInsertTimerInActiveList>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d069      	beq.n	800e90a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e838:	6a1b      	ldr	r3, [r3, #32]
 800e83a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e83c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e844:	f003 0304 	and.w	r3, r3, #4
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d05e      	beq.n	800e90a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e84c:	68ba      	ldr	r2, [r7, #8]
 800e84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e850:	699b      	ldr	r3, [r3, #24]
 800e852:	441a      	add	r2, r3
 800e854:	2300      	movs	r3, #0
 800e856:	9300      	str	r3, [sp, #0]
 800e858:	2300      	movs	r3, #0
 800e85a:	2100      	movs	r1, #0
 800e85c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e85e:	f7ff fe05 	bl	800e46c <xTimerGenericCommand>
 800e862:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e864:	6a3b      	ldr	r3, [r7, #32]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d14f      	bne.n	800e90a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e86a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e86e:	f383 8811 	msr	BASEPRI, r3
 800e872:	f3bf 8f6f 	isb	sy
 800e876:	f3bf 8f4f 	dsb	sy
 800e87a:	61bb      	str	r3, [r7, #24]
}
 800e87c:	bf00      	nop
 800e87e:	e7fe      	b.n	800e87e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e882:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e886:	f023 0301 	bic.w	r3, r3, #1
 800e88a:	b2da      	uxtb	r2, r3
 800e88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e892:	e03a      	b.n	800e90a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e896:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e89a:	f043 0301 	orr.w	r3, r3, #1
 800e89e:	b2da      	uxtb	r2, r3
 800e8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e8a6:	68ba      	ldr	r2, [r7, #8]
 800e8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ae:	699b      	ldr	r3, [r3, #24]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d10a      	bne.n	800e8ca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b8:	f383 8811 	msr	BASEPRI, r3
 800e8bc:	f3bf 8f6f 	isb	sy
 800e8c0:	f3bf 8f4f 	dsb	sy
 800e8c4:	617b      	str	r3, [r7, #20]
}
 800e8c6:	bf00      	nop
 800e8c8:	e7fe      	b.n	800e8c8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8cc:	699a      	ldr	r2, [r3, #24]
 800e8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d0:	18d1      	adds	r1, r2, r3
 800e8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8d8:	f7ff ff06 	bl	800e6e8 <prvInsertTimerInActiveList>
					break;
 800e8dc:	e015      	b.n	800e90a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8e4:	f003 0302 	and.w	r3, r3, #2
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d103      	bne.n	800e8f4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e8ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e8ee:	f000 fbdf 	bl	800f0b0 <vPortFree>
 800e8f2:	e00a      	b.n	800e90a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8fa:	f023 0301 	bic.w	r3, r3, #1
 800e8fe:	b2da      	uxtb	r2, r3
 800e900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e906:	e000      	b.n	800e90a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e908:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e90a:	4b08      	ldr	r3, [pc, #32]	; (800e92c <prvProcessReceivedCommands+0x1c0>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	1d39      	adds	r1, r7, #4
 800e910:	2200      	movs	r2, #0
 800e912:	4618      	mov	r0, r3
 800e914:	f7fe fbc6 	bl	800d0a4 <xQueueReceive>
 800e918:	4603      	mov	r3, r0
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	f47f af2a 	bne.w	800e774 <prvProcessReceivedCommands+0x8>
	}
}
 800e920:	bf00      	nop
 800e922:	bf00      	nop
 800e924:	3730      	adds	r7, #48	; 0x30
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop
 800e92c:	2000b8c0 	.word	0x2000b8c0

0800e930 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b088      	sub	sp, #32
 800e934:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e936:	e048      	b.n	800e9ca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e938:	4b2d      	ldr	r3, [pc, #180]	; (800e9f0 <prvSwitchTimerLists+0xc0>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	68db      	ldr	r3, [r3, #12]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e942:	4b2b      	ldr	r3, [pc, #172]	; (800e9f0 <prvSwitchTimerLists+0xc0>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	3304      	adds	r3, #4
 800e950:	4618      	mov	r0, r3
 800e952:	f7fe f8df 	bl	800cb14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	6a1b      	ldr	r3, [r3, #32]
 800e95a:	68f8      	ldr	r0, [r7, #12]
 800e95c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e964:	f003 0304 	and.w	r3, r3, #4
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d02e      	beq.n	800e9ca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	699b      	ldr	r3, [r3, #24]
 800e970:	693a      	ldr	r2, [r7, #16]
 800e972:	4413      	add	r3, r2
 800e974:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e976:	68ba      	ldr	r2, [r7, #8]
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d90e      	bls.n	800e99c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	68ba      	ldr	r2, [r7, #8]
 800e982:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	68fa      	ldr	r2, [r7, #12]
 800e988:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e98a:	4b19      	ldr	r3, [pc, #100]	; (800e9f0 <prvSwitchTimerLists+0xc0>)
 800e98c:	681a      	ldr	r2, [r3, #0]
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	3304      	adds	r3, #4
 800e992:	4619      	mov	r1, r3
 800e994:	4610      	mov	r0, r2
 800e996:	f7fe f884 	bl	800caa2 <vListInsert>
 800e99a:	e016      	b.n	800e9ca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e99c:	2300      	movs	r3, #0
 800e99e:	9300      	str	r3, [sp, #0]
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	693a      	ldr	r2, [r7, #16]
 800e9a4:	2100      	movs	r1, #0
 800e9a6:	68f8      	ldr	r0, [r7, #12]
 800e9a8:	f7ff fd60 	bl	800e46c <xTimerGenericCommand>
 800e9ac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d10a      	bne.n	800e9ca <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b8:	f383 8811 	msr	BASEPRI, r3
 800e9bc:	f3bf 8f6f 	isb	sy
 800e9c0:	f3bf 8f4f 	dsb	sy
 800e9c4:	603b      	str	r3, [r7, #0]
}
 800e9c6:	bf00      	nop
 800e9c8:	e7fe      	b.n	800e9c8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e9ca:	4b09      	ldr	r3, [pc, #36]	; (800e9f0 <prvSwitchTimerLists+0xc0>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d1b1      	bne.n	800e938 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e9d4:	4b06      	ldr	r3, [pc, #24]	; (800e9f0 <prvSwitchTimerLists+0xc0>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e9da:	4b06      	ldr	r3, [pc, #24]	; (800e9f4 <prvSwitchTimerLists+0xc4>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	4a04      	ldr	r2, [pc, #16]	; (800e9f0 <prvSwitchTimerLists+0xc0>)
 800e9e0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e9e2:	4a04      	ldr	r2, [pc, #16]	; (800e9f4 <prvSwitchTimerLists+0xc4>)
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	6013      	str	r3, [r2, #0]
}
 800e9e8:	bf00      	nop
 800e9ea:	3718      	adds	r7, #24
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	2000b8b8 	.word	0x2000b8b8
 800e9f4:	2000b8bc 	.word	0x2000b8bc

0800e9f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e9fe:	f000 f969 	bl	800ecd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ea02:	4b15      	ldr	r3, [pc, #84]	; (800ea58 <prvCheckForValidListAndQueue+0x60>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d120      	bne.n	800ea4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ea0a:	4814      	ldr	r0, [pc, #80]	; (800ea5c <prvCheckForValidListAndQueue+0x64>)
 800ea0c:	f7fd fff8 	bl	800ca00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ea10:	4813      	ldr	r0, [pc, #76]	; (800ea60 <prvCheckForValidListAndQueue+0x68>)
 800ea12:	f7fd fff5 	bl	800ca00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ea16:	4b13      	ldr	r3, [pc, #76]	; (800ea64 <prvCheckForValidListAndQueue+0x6c>)
 800ea18:	4a10      	ldr	r2, [pc, #64]	; (800ea5c <prvCheckForValidListAndQueue+0x64>)
 800ea1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ea1c:	4b12      	ldr	r3, [pc, #72]	; (800ea68 <prvCheckForValidListAndQueue+0x70>)
 800ea1e:	4a10      	ldr	r2, [pc, #64]	; (800ea60 <prvCheckForValidListAndQueue+0x68>)
 800ea20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ea22:	2300      	movs	r3, #0
 800ea24:	9300      	str	r3, [sp, #0]
 800ea26:	4b11      	ldr	r3, [pc, #68]	; (800ea6c <prvCheckForValidListAndQueue+0x74>)
 800ea28:	4a11      	ldr	r2, [pc, #68]	; (800ea70 <prvCheckForValidListAndQueue+0x78>)
 800ea2a:	2110      	movs	r1, #16
 800ea2c:	200a      	movs	r0, #10
 800ea2e:	f7fe f903 	bl	800cc38 <xQueueGenericCreateStatic>
 800ea32:	4603      	mov	r3, r0
 800ea34:	4a08      	ldr	r2, [pc, #32]	; (800ea58 <prvCheckForValidListAndQueue+0x60>)
 800ea36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ea38:	4b07      	ldr	r3, [pc, #28]	; (800ea58 <prvCheckForValidListAndQueue+0x60>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d005      	beq.n	800ea4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ea40:	4b05      	ldr	r3, [pc, #20]	; (800ea58 <prvCheckForValidListAndQueue+0x60>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	490b      	ldr	r1, [pc, #44]	; (800ea74 <prvCheckForValidListAndQueue+0x7c>)
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7fe fd1c 	bl	800d484 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ea4c:	f000 f972 	bl	800ed34 <vPortExitCritical>
}
 800ea50:	bf00      	nop
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
 800ea56:	bf00      	nop
 800ea58:	2000b8c0 	.word	0x2000b8c0
 800ea5c:	2000b890 	.word	0x2000b890
 800ea60:	2000b8a4 	.word	0x2000b8a4
 800ea64:	2000b8b8 	.word	0x2000b8b8
 800ea68:	2000b8bc 	.word	0x2000b8bc
 800ea6c:	2000b96c 	.word	0x2000b96c
 800ea70:	2000b8cc 	.word	0x2000b8cc
 800ea74:	0801be5c 	.word	0x0801be5c

0800ea78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b085      	sub	sp, #20
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	60f8      	str	r0, [r7, #12]
 800ea80:	60b9      	str	r1, [r7, #8]
 800ea82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	3b04      	subs	r3, #4
 800ea88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ea90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	3b04      	subs	r3, #4
 800ea96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	f023 0201 	bic.w	r2, r3, #1
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	3b04      	subs	r3, #4
 800eaa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800eaa8:	4a0c      	ldr	r2, [pc, #48]	; (800eadc <pxPortInitialiseStack+0x64>)
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	3b14      	subs	r3, #20
 800eab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800eab4:	687a      	ldr	r2, [r7, #4]
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	3b04      	subs	r3, #4
 800eabe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f06f 0202 	mvn.w	r2, #2
 800eac6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	3b20      	subs	r3, #32
 800eacc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800eace:	68fb      	ldr	r3, [r7, #12]
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3714      	adds	r7, #20
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr
 800eadc:	0800eae1 	.word	0x0800eae1

0800eae0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800eae0:	b480      	push	{r7}
 800eae2:	b085      	sub	sp, #20
 800eae4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800eae6:	2300      	movs	r3, #0
 800eae8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800eaea:	4b12      	ldr	r3, [pc, #72]	; (800eb34 <prvTaskExitError+0x54>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eaf2:	d00a      	beq.n	800eb0a <prvTaskExitError+0x2a>
	__asm volatile
 800eaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf8:	f383 8811 	msr	BASEPRI, r3
 800eafc:	f3bf 8f6f 	isb	sy
 800eb00:	f3bf 8f4f 	dsb	sy
 800eb04:	60fb      	str	r3, [r7, #12]
}
 800eb06:	bf00      	nop
 800eb08:	e7fe      	b.n	800eb08 <prvTaskExitError+0x28>
	__asm volatile
 800eb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb0e:	f383 8811 	msr	BASEPRI, r3
 800eb12:	f3bf 8f6f 	isb	sy
 800eb16:	f3bf 8f4f 	dsb	sy
 800eb1a:	60bb      	str	r3, [r7, #8]
}
 800eb1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800eb1e:	bf00      	nop
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d0fc      	beq.n	800eb20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800eb26:	bf00      	nop
 800eb28:	bf00      	nop
 800eb2a:	3714      	adds	r7, #20
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr
 800eb34:	2000009c 	.word	0x2000009c
	...

0800eb40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eb40:	4b07      	ldr	r3, [pc, #28]	; (800eb60 <pxCurrentTCBConst2>)
 800eb42:	6819      	ldr	r1, [r3, #0]
 800eb44:	6808      	ldr	r0, [r1, #0]
 800eb46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb4a:	f380 8809 	msr	PSP, r0
 800eb4e:	f3bf 8f6f 	isb	sy
 800eb52:	f04f 0000 	mov.w	r0, #0
 800eb56:	f380 8811 	msr	BASEPRI, r0
 800eb5a:	4770      	bx	lr
 800eb5c:	f3af 8000 	nop.w

0800eb60 <pxCurrentTCBConst2>:
 800eb60:	2000b390 	.word	0x2000b390
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eb64:	bf00      	nop
 800eb66:	bf00      	nop

0800eb68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eb68:	4808      	ldr	r0, [pc, #32]	; (800eb8c <prvPortStartFirstTask+0x24>)
 800eb6a:	6800      	ldr	r0, [r0, #0]
 800eb6c:	6800      	ldr	r0, [r0, #0]
 800eb6e:	f380 8808 	msr	MSP, r0
 800eb72:	f04f 0000 	mov.w	r0, #0
 800eb76:	f380 8814 	msr	CONTROL, r0
 800eb7a:	b662      	cpsie	i
 800eb7c:	b661      	cpsie	f
 800eb7e:	f3bf 8f4f 	dsb	sy
 800eb82:	f3bf 8f6f 	isb	sy
 800eb86:	df00      	svc	0
 800eb88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eb8a:	bf00      	nop
 800eb8c:	e000ed08 	.word	0xe000ed08

0800eb90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b086      	sub	sp, #24
 800eb94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eb96:	4b46      	ldr	r3, [pc, #280]	; (800ecb0 <xPortStartScheduler+0x120>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	4a46      	ldr	r2, [pc, #280]	; (800ecb4 <xPortStartScheduler+0x124>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d10a      	bne.n	800ebb6 <xPortStartScheduler+0x26>
	__asm volatile
 800eba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba4:	f383 8811 	msr	BASEPRI, r3
 800eba8:	f3bf 8f6f 	isb	sy
 800ebac:	f3bf 8f4f 	dsb	sy
 800ebb0:	613b      	str	r3, [r7, #16]
}
 800ebb2:	bf00      	nop
 800ebb4:	e7fe      	b.n	800ebb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ebb6:	4b3e      	ldr	r3, [pc, #248]	; (800ecb0 <xPortStartScheduler+0x120>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	4a3f      	ldr	r2, [pc, #252]	; (800ecb8 <xPortStartScheduler+0x128>)
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	d10a      	bne.n	800ebd6 <xPortStartScheduler+0x46>
	__asm volatile
 800ebc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebc4:	f383 8811 	msr	BASEPRI, r3
 800ebc8:	f3bf 8f6f 	isb	sy
 800ebcc:	f3bf 8f4f 	dsb	sy
 800ebd0:	60fb      	str	r3, [r7, #12]
}
 800ebd2:	bf00      	nop
 800ebd4:	e7fe      	b.n	800ebd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ebd6:	4b39      	ldr	r3, [pc, #228]	; (800ecbc <xPortStartScheduler+0x12c>)
 800ebd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	b2db      	uxtb	r3, r3
 800ebe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ebe2:	697b      	ldr	r3, [r7, #20]
 800ebe4:	22ff      	movs	r2, #255	; 0xff
 800ebe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ebe8:	697b      	ldr	r3, [r7, #20]
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ebf0:	78fb      	ldrb	r3, [r7, #3]
 800ebf2:	b2db      	uxtb	r3, r3
 800ebf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ebf8:	b2da      	uxtb	r2, r3
 800ebfa:	4b31      	ldr	r3, [pc, #196]	; (800ecc0 <xPortStartScheduler+0x130>)
 800ebfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ebfe:	4b31      	ldr	r3, [pc, #196]	; (800ecc4 <xPortStartScheduler+0x134>)
 800ec00:	2207      	movs	r2, #7
 800ec02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec04:	e009      	b.n	800ec1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ec06:	4b2f      	ldr	r3, [pc, #188]	; (800ecc4 <xPortStartScheduler+0x134>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	3b01      	subs	r3, #1
 800ec0c:	4a2d      	ldr	r2, [pc, #180]	; (800ecc4 <xPortStartScheduler+0x134>)
 800ec0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ec10:	78fb      	ldrb	r3, [r7, #3]
 800ec12:	b2db      	uxtb	r3, r3
 800ec14:	005b      	lsls	r3, r3, #1
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ec1a:	78fb      	ldrb	r3, [r7, #3]
 800ec1c:	b2db      	uxtb	r3, r3
 800ec1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec22:	2b80      	cmp	r3, #128	; 0x80
 800ec24:	d0ef      	beq.n	800ec06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ec26:	4b27      	ldr	r3, [pc, #156]	; (800ecc4 <xPortStartScheduler+0x134>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f1c3 0307 	rsb	r3, r3, #7
 800ec2e:	2b04      	cmp	r3, #4
 800ec30:	d00a      	beq.n	800ec48 <xPortStartScheduler+0xb8>
	__asm volatile
 800ec32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec36:	f383 8811 	msr	BASEPRI, r3
 800ec3a:	f3bf 8f6f 	isb	sy
 800ec3e:	f3bf 8f4f 	dsb	sy
 800ec42:	60bb      	str	r3, [r7, #8]
}
 800ec44:	bf00      	nop
 800ec46:	e7fe      	b.n	800ec46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ec48:	4b1e      	ldr	r3, [pc, #120]	; (800ecc4 <xPortStartScheduler+0x134>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	021b      	lsls	r3, r3, #8
 800ec4e:	4a1d      	ldr	r2, [pc, #116]	; (800ecc4 <xPortStartScheduler+0x134>)
 800ec50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ec52:	4b1c      	ldr	r3, [pc, #112]	; (800ecc4 <xPortStartScheduler+0x134>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ec5a:	4a1a      	ldr	r2, [pc, #104]	; (800ecc4 <xPortStartScheduler+0x134>)
 800ec5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	b2da      	uxtb	r2, r3
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ec66:	4b18      	ldr	r3, [pc, #96]	; (800ecc8 <xPortStartScheduler+0x138>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4a17      	ldr	r2, [pc, #92]	; (800ecc8 <xPortStartScheduler+0x138>)
 800ec6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ec70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ec72:	4b15      	ldr	r3, [pc, #84]	; (800ecc8 <xPortStartScheduler+0x138>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	4a14      	ldr	r2, [pc, #80]	; (800ecc8 <xPortStartScheduler+0x138>)
 800ec78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ec7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ec7e:	f000 f8dd 	bl	800ee3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ec82:	4b12      	ldr	r3, [pc, #72]	; (800eccc <xPortStartScheduler+0x13c>)
 800ec84:	2200      	movs	r2, #0
 800ec86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ec88:	f000 f8fc 	bl	800ee84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ec8c:	4b10      	ldr	r3, [pc, #64]	; (800ecd0 <xPortStartScheduler+0x140>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	4a0f      	ldr	r2, [pc, #60]	; (800ecd0 <xPortStartScheduler+0x140>)
 800ec92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ec96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ec98:	f7ff ff66 	bl	800eb68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ec9c:	f7ff f822 	bl	800dce4 <vTaskSwitchContext>
	prvTaskExitError();
 800eca0:	f7ff ff1e 	bl	800eae0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eca4:	2300      	movs	r3, #0
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3718      	adds	r7, #24
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop
 800ecb0:	e000ed00 	.word	0xe000ed00
 800ecb4:	410fc271 	.word	0x410fc271
 800ecb8:	410fc270 	.word	0x410fc270
 800ecbc:	e000e400 	.word	0xe000e400
 800ecc0:	2000b9bc 	.word	0x2000b9bc
 800ecc4:	2000b9c0 	.word	0x2000b9c0
 800ecc8:	e000ed20 	.word	0xe000ed20
 800eccc:	2000009c 	.word	0x2000009c
 800ecd0:	e000ef34 	.word	0xe000ef34

0800ecd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ecd4:	b480      	push	{r7}
 800ecd6:	b083      	sub	sp, #12
 800ecd8:	af00      	add	r7, sp, #0
	__asm volatile
 800ecda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecde:	f383 8811 	msr	BASEPRI, r3
 800ece2:	f3bf 8f6f 	isb	sy
 800ece6:	f3bf 8f4f 	dsb	sy
 800ecea:	607b      	str	r3, [r7, #4]
}
 800ecec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ecee:	4b0f      	ldr	r3, [pc, #60]	; (800ed2c <vPortEnterCritical+0x58>)
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	4a0d      	ldr	r2, [pc, #52]	; (800ed2c <vPortEnterCritical+0x58>)
 800ecf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ecf8:	4b0c      	ldr	r3, [pc, #48]	; (800ed2c <vPortEnterCritical+0x58>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	2b01      	cmp	r3, #1
 800ecfe:	d10f      	bne.n	800ed20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ed00:	4b0b      	ldr	r3, [pc, #44]	; (800ed30 <vPortEnterCritical+0x5c>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d00a      	beq.n	800ed20 <vPortEnterCritical+0x4c>
	__asm volatile
 800ed0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed0e:	f383 8811 	msr	BASEPRI, r3
 800ed12:	f3bf 8f6f 	isb	sy
 800ed16:	f3bf 8f4f 	dsb	sy
 800ed1a:	603b      	str	r3, [r7, #0]
}
 800ed1c:	bf00      	nop
 800ed1e:	e7fe      	b.n	800ed1e <vPortEnterCritical+0x4a>
	}
}
 800ed20:	bf00      	nop
 800ed22:	370c      	adds	r7, #12
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr
 800ed2c:	2000009c 	.word	0x2000009c
 800ed30:	e000ed04 	.word	0xe000ed04

0800ed34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ed34:	b480      	push	{r7}
 800ed36:	b083      	sub	sp, #12
 800ed38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ed3a:	4b12      	ldr	r3, [pc, #72]	; (800ed84 <vPortExitCritical+0x50>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d10a      	bne.n	800ed58 <vPortExitCritical+0x24>
	__asm volatile
 800ed42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed46:	f383 8811 	msr	BASEPRI, r3
 800ed4a:	f3bf 8f6f 	isb	sy
 800ed4e:	f3bf 8f4f 	dsb	sy
 800ed52:	607b      	str	r3, [r7, #4]
}
 800ed54:	bf00      	nop
 800ed56:	e7fe      	b.n	800ed56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ed58:	4b0a      	ldr	r3, [pc, #40]	; (800ed84 <vPortExitCritical+0x50>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	3b01      	subs	r3, #1
 800ed5e:	4a09      	ldr	r2, [pc, #36]	; (800ed84 <vPortExitCritical+0x50>)
 800ed60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ed62:	4b08      	ldr	r3, [pc, #32]	; (800ed84 <vPortExitCritical+0x50>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d105      	bne.n	800ed76 <vPortExitCritical+0x42>
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	f383 8811 	msr	BASEPRI, r3
}
 800ed74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ed76:	bf00      	nop
 800ed78:	370c      	adds	r7, #12
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed80:	4770      	bx	lr
 800ed82:	bf00      	nop
 800ed84:	2000009c 	.word	0x2000009c
	...

0800ed90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ed90:	f3ef 8009 	mrs	r0, PSP
 800ed94:	f3bf 8f6f 	isb	sy
 800ed98:	4b15      	ldr	r3, [pc, #84]	; (800edf0 <pxCurrentTCBConst>)
 800ed9a:	681a      	ldr	r2, [r3, #0]
 800ed9c:	f01e 0f10 	tst.w	lr, #16
 800eda0:	bf08      	it	eq
 800eda2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eda6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edaa:	6010      	str	r0, [r2, #0]
 800edac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800edb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800edb4:	f380 8811 	msr	BASEPRI, r0
 800edb8:	f3bf 8f4f 	dsb	sy
 800edbc:	f3bf 8f6f 	isb	sy
 800edc0:	f7fe ff90 	bl	800dce4 <vTaskSwitchContext>
 800edc4:	f04f 0000 	mov.w	r0, #0
 800edc8:	f380 8811 	msr	BASEPRI, r0
 800edcc:	bc09      	pop	{r0, r3}
 800edce:	6819      	ldr	r1, [r3, #0]
 800edd0:	6808      	ldr	r0, [r1, #0]
 800edd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edd6:	f01e 0f10 	tst.w	lr, #16
 800edda:	bf08      	it	eq
 800eddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ede0:	f380 8809 	msr	PSP, r0
 800ede4:	f3bf 8f6f 	isb	sy
 800ede8:	4770      	bx	lr
 800edea:	bf00      	nop
 800edec:	f3af 8000 	nop.w

0800edf0 <pxCurrentTCBConst>:
 800edf0:	2000b390 	.word	0x2000b390
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800edf4:	bf00      	nop
 800edf6:	bf00      	nop

0800edf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b082      	sub	sp, #8
 800edfc:	af00      	add	r7, sp, #0
	__asm volatile
 800edfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee02:	f383 8811 	msr	BASEPRI, r3
 800ee06:	f3bf 8f6f 	isb	sy
 800ee0a:	f3bf 8f4f 	dsb	sy
 800ee0e:	607b      	str	r3, [r7, #4]
}
 800ee10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ee12:	f7fe fead 	bl	800db70 <xTaskIncrementTick>
 800ee16:	4603      	mov	r3, r0
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d003      	beq.n	800ee24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ee1c:	4b06      	ldr	r3, [pc, #24]	; (800ee38 <xPortSysTickHandler+0x40>)
 800ee1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee22:	601a      	str	r2, [r3, #0]
 800ee24:	2300      	movs	r3, #0
 800ee26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	f383 8811 	msr	BASEPRI, r3
}
 800ee2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ee30:	bf00      	nop
 800ee32:	3708      	adds	r7, #8
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}
 800ee38:	e000ed04 	.word	0xe000ed04

0800ee3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ee40:	4b0b      	ldr	r3, [pc, #44]	; (800ee70 <vPortSetupTimerInterrupt+0x34>)
 800ee42:	2200      	movs	r2, #0
 800ee44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ee46:	4b0b      	ldr	r3, [pc, #44]	; (800ee74 <vPortSetupTimerInterrupt+0x38>)
 800ee48:	2200      	movs	r2, #0
 800ee4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ee4c:	4b0a      	ldr	r3, [pc, #40]	; (800ee78 <vPortSetupTimerInterrupt+0x3c>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	4a0a      	ldr	r2, [pc, #40]	; (800ee7c <vPortSetupTimerInterrupt+0x40>)
 800ee52:	fba2 2303 	umull	r2, r3, r2, r3
 800ee56:	099b      	lsrs	r3, r3, #6
 800ee58:	4a09      	ldr	r2, [pc, #36]	; (800ee80 <vPortSetupTimerInterrupt+0x44>)
 800ee5a:	3b01      	subs	r3, #1
 800ee5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ee5e:	4b04      	ldr	r3, [pc, #16]	; (800ee70 <vPortSetupTimerInterrupt+0x34>)
 800ee60:	2207      	movs	r2, #7
 800ee62:	601a      	str	r2, [r3, #0]
}
 800ee64:	bf00      	nop
 800ee66:	46bd      	mov	sp, r7
 800ee68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6c:	4770      	bx	lr
 800ee6e:	bf00      	nop
 800ee70:	e000e010 	.word	0xe000e010
 800ee74:	e000e018 	.word	0xe000e018
 800ee78:	20000004 	.word	0x20000004
 800ee7c:	10624dd3 	.word	0x10624dd3
 800ee80:	e000e014 	.word	0xe000e014

0800ee84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ee84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ee94 <vPortEnableVFP+0x10>
 800ee88:	6801      	ldr	r1, [r0, #0]
 800ee8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ee8e:	6001      	str	r1, [r0, #0]
 800ee90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ee92:	bf00      	nop
 800ee94:	e000ed88 	.word	0xe000ed88

0800ee98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ee98:	b480      	push	{r7}
 800ee9a:	b085      	sub	sp, #20
 800ee9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ee9e:	f3ef 8305 	mrs	r3, IPSR
 800eea2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	2b0f      	cmp	r3, #15
 800eea8:	d914      	bls.n	800eed4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800eeaa:	4a17      	ldr	r2, [pc, #92]	; (800ef08 <vPortValidateInterruptPriority+0x70>)
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	4413      	add	r3, r2
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eeb4:	4b15      	ldr	r3, [pc, #84]	; (800ef0c <vPortValidateInterruptPriority+0x74>)
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	7afa      	ldrb	r2, [r7, #11]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d20a      	bcs.n	800eed4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800eebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec2:	f383 8811 	msr	BASEPRI, r3
 800eec6:	f3bf 8f6f 	isb	sy
 800eeca:	f3bf 8f4f 	dsb	sy
 800eece:	607b      	str	r3, [r7, #4]
}
 800eed0:	bf00      	nop
 800eed2:	e7fe      	b.n	800eed2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eed4:	4b0e      	ldr	r3, [pc, #56]	; (800ef10 <vPortValidateInterruptPriority+0x78>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800eedc:	4b0d      	ldr	r3, [pc, #52]	; (800ef14 <vPortValidateInterruptPriority+0x7c>)
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d90a      	bls.n	800eefa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800eee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eee8:	f383 8811 	msr	BASEPRI, r3
 800eeec:	f3bf 8f6f 	isb	sy
 800eef0:	f3bf 8f4f 	dsb	sy
 800eef4:	603b      	str	r3, [r7, #0]
}
 800eef6:	bf00      	nop
 800eef8:	e7fe      	b.n	800eef8 <vPortValidateInterruptPriority+0x60>
	}
 800eefa:	bf00      	nop
 800eefc:	3714      	adds	r7, #20
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr
 800ef06:	bf00      	nop
 800ef08:	e000e3f0 	.word	0xe000e3f0
 800ef0c:	2000b9bc 	.word	0x2000b9bc
 800ef10:	e000ed0c 	.word	0xe000ed0c
 800ef14:	2000b9c0 	.word	0x2000b9c0

0800ef18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b08a      	sub	sp, #40	; 0x28
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ef20:	2300      	movs	r3, #0
 800ef22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ef24:	f7fe fd68 	bl	800d9f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ef28:	4b5b      	ldr	r3, [pc, #364]	; (800f098 <pvPortMalloc+0x180>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d101      	bne.n	800ef34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ef30:	f000 f920 	bl	800f174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ef34:	4b59      	ldr	r3, [pc, #356]	; (800f09c <pvPortMalloc+0x184>)
 800ef36:	681a      	ldr	r2, [r3, #0]
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	4013      	ands	r3, r2
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	f040 8093 	bne.w	800f068 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d01d      	beq.n	800ef84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ef48:	2208      	movs	r2, #8
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f003 0307 	and.w	r3, r3, #7
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d014      	beq.n	800ef84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f023 0307 	bic.w	r3, r3, #7
 800ef60:	3308      	adds	r3, #8
 800ef62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f003 0307 	and.w	r3, r3, #7
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d00a      	beq.n	800ef84 <pvPortMalloc+0x6c>
	__asm volatile
 800ef6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef72:	f383 8811 	msr	BASEPRI, r3
 800ef76:	f3bf 8f6f 	isb	sy
 800ef7a:	f3bf 8f4f 	dsb	sy
 800ef7e:	617b      	str	r3, [r7, #20]
}
 800ef80:	bf00      	nop
 800ef82:	e7fe      	b.n	800ef82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d06e      	beq.n	800f068 <pvPortMalloc+0x150>
 800ef8a:	4b45      	ldr	r3, [pc, #276]	; (800f0a0 <pvPortMalloc+0x188>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d869      	bhi.n	800f068 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ef94:	4b43      	ldr	r3, [pc, #268]	; (800f0a4 <pvPortMalloc+0x18c>)
 800ef96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ef98:	4b42      	ldr	r3, [pc, #264]	; (800f0a4 <pvPortMalloc+0x18c>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ef9e:	e004      	b.n	800efaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800efa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800efa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800efaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efac:	685b      	ldr	r3, [r3, #4]
 800efae:	687a      	ldr	r2, [r7, #4]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d903      	bls.n	800efbc <pvPortMalloc+0xa4>
 800efb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d1f1      	bne.n	800efa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800efbc:	4b36      	ldr	r3, [pc, #216]	; (800f098 <pvPortMalloc+0x180>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d050      	beq.n	800f068 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800efc6:	6a3b      	ldr	r3, [r7, #32]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	2208      	movs	r2, #8
 800efcc:	4413      	add	r3, r2
 800efce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800efd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd2:	681a      	ldr	r2, [r3, #0]
 800efd4:	6a3b      	ldr	r3, [r7, #32]
 800efd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800efd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efda:	685a      	ldr	r2, [r3, #4]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	1ad2      	subs	r2, r2, r3
 800efe0:	2308      	movs	r3, #8
 800efe2:	005b      	lsls	r3, r3, #1
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d91f      	bls.n	800f028 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800efe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	4413      	add	r3, r2
 800efee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eff0:	69bb      	ldr	r3, [r7, #24]
 800eff2:	f003 0307 	and.w	r3, r3, #7
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d00a      	beq.n	800f010 <pvPortMalloc+0xf8>
	__asm volatile
 800effa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800effe:	f383 8811 	msr	BASEPRI, r3
 800f002:	f3bf 8f6f 	isb	sy
 800f006:	f3bf 8f4f 	dsb	sy
 800f00a:	613b      	str	r3, [r7, #16]
}
 800f00c:	bf00      	nop
 800f00e:	e7fe      	b.n	800f00e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f012:	685a      	ldr	r2, [r3, #4]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	1ad2      	subs	r2, r2, r3
 800f018:	69bb      	ldr	r3, [r7, #24]
 800f01a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f022:	69b8      	ldr	r0, [r7, #24]
 800f024:	f000 f908 	bl	800f238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f028:	4b1d      	ldr	r3, [pc, #116]	; (800f0a0 <pvPortMalloc+0x188>)
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	1ad3      	subs	r3, r2, r3
 800f032:	4a1b      	ldr	r2, [pc, #108]	; (800f0a0 <pvPortMalloc+0x188>)
 800f034:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f036:	4b1a      	ldr	r3, [pc, #104]	; (800f0a0 <pvPortMalloc+0x188>)
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	4b1b      	ldr	r3, [pc, #108]	; (800f0a8 <pvPortMalloc+0x190>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	429a      	cmp	r2, r3
 800f040:	d203      	bcs.n	800f04a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f042:	4b17      	ldr	r3, [pc, #92]	; (800f0a0 <pvPortMalloc+0x188>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4a18      	ldr	r2, [pc, #96]	; (800f0a8 <pvPortMalloc+0x190>)
 800f048:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04c:	685a      	ldr	r2, [r3, #4]
 800f04e:	4b13      	ldr	r3, [pc, #76]	; (800f09c <pvPortMalloc+0x184>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	431a      	orrs	r2, r3
 800f054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f056:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05a:	2200      	movs	r2, #0
 800f05c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f05e:	4b13      	ldr	r3, [pc, #76]	; (800f0ac <pvPortMalloc+0x194>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	3301      	adds	r3, #1
 800f064:	4a11      	ldr	r2, [pc, #68]	; (800f0ac <pvPortMalloc+0x194>)
 800f066:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f068:	f7fe fcd4 	bl	800da14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f06c:	69fb      	ldr	r3, [r7, #28]
 800f06e:	f003 0307 	and.w	r3, r3, #7
 800f072:	2b00      	cmp	r3, #0
 800f074:	d00a      	beq.n	800f08c <pvPortMalloc+0x174>
	__asm volatile
 800f076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f07a:	f383 8811 	msr	BASEPRI, r3
 800f07e:	f3bf 8f6f 	isb	sy
 800f082:	f3bf 8f4f 	dsb	sy
 800f086:	60fb      	str	r3, [r7, #12]
}
 800f088:	bf00      	nop
 800f08a:	e7fe      	b.n	800f08a <pvPortMalloc+0x172>
	return pvReturn;
 800f08c:	69fb      	ldr	r3, [r7, #28]
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3728      	adds	r7, #40	; 0x28
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	2000f5cc 	.word	0x2000f5cc
 800f09c:	2000f5e0 	.word	0x2000f5e0
 800f0a0:	2000f5d0 	.word	0x2000f5d0
 800f0a4:	2000f5c4 	.word	0x2000f5c4
 800f0a8:	2000f5d4 	.word	0x2000f5d4
 800f0ac:	2000f5d8 	.word	0x2000f5d8

0800f0b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b086      	sub	sp, #24
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d04d      	beq.n	800f15e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f0c2:	2308      	movs	r3, #8
 800f0c4:	425b      	negs	r3, r3
 800f0c6:	697a      	ldr	r2, [r7, #20]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	685a      	ldr	r2, [r3, #4]
 800f0d4:	4b24      	ldr	r3, [pc, #144]	; (800f168 <vPortFree+0xb8>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	4013      	ands	r3, r2
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d10a      	bne.n	800f0f4 <vPortFree+0x44>
	__asm volatile
 800f0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0e2:	f383 8811 	msr	BASEPRI, r3
 800f0e6:	f3bf 8f6f 	isb	sy
 800f0ea:	f3bf 8f4f 	dsb	sy
 800f0ee:	60fb      	str	r3, [r7, #12]
}
 800f0f0:	bf00      	nop
 800f0f2:	e7fe      	b.n	800f0f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d00a      	beq.n	800f112 <vPortFree+0x62>
	__asm volatile
 800f0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f100:	f383 8811 	msr	BASEPRI, r3
 800f104:	f3bf 8f6f 	isb	sy
 800f108:	f3bf 8f4f 	dsb	sy
 800f10c:	60bb      	str	r3, [r7, #8]
}
 800f10e:	bf00      	nop
 800f110:	e7fe      	b.n	800f110 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	685a      	ldr	r2, [r3, #4]
 800f116:	4b14      	ldr	r3, [pc, #80]	; (800f168 <vPortFree+0xb8>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	4013      	ands	r3, r2
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d01e      	beq.n	800f15e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f120:	693b      	ldr	r3, [r7, #16]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d11a      	bne.n	800f15e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f128:	693b      	ldr	r3, [r7, #16]
 800f12a:	685a      	ldr	r2, [r3, #4]
 800f12c:	4b0e      	ldr	r3, [pc, #56]	; (800f168 <vPortFree+0xb8>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	43db      	mvns	r3, r3
 800f132:	401a      	ands	r2, r3
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f138:	f7fe fc5e 	bl	800d9f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	685a      	ldr	r2, [r3, #4]
 800f140:	4b0a      	ldr	r3, [pc, #40]	; (800f16c <vPortFree+0xbc>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	4413      	add	r3, r2
 800f146:	4a09      	ldr	r2, [pc, #36]	; (800f16c <vPortFree+0xbc>)
 800f148:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f14a:	6938      	ldr	r0, [r7, #16]
 800f14c:	f000 f874 	bl	800f238 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f150:	4b07      	ldr	r3, [pc, #28]	; (800f170 <vPortFree+0xc0>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	3301      	adds	r3, #1
 800f156:	4a06      	ldr	r2, [pc, #24]	; (800f170 <vPortFree+0xc0>)
 800f158:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f15a:	f7fe fc5b 	bl	800da14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f15e:	bf00      	nop
 800f160:	3718      	adds	r7, #24
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}
 800f166:	bf00      	nop
 800f168:	2000f5e0 	.word	0x2000f5e0
 800f16c:	2000f5d0 	.word	0x2000f5d0
 800f170:	2000f5dc 	.word	0x2000f5dc

0800f174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f174:	b480      	push	{r7}
 800f176:	b085      	sub	sp, #20
 800f178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f17a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f17e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f180:	4b27      	ldr	r3, [pc, #156]	; (800f220 <prvHeapInit+0xac>)
 800f182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f003 0307 	and.w	r3, r3, #7
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d00c      	beq.n	800f1a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	3307      	adds	r3, #7
 800f192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	f023 0307 	bic.w	r3, r3, #7
 800f19a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f19c:	68ba      	ldr	r2, [r7, #8]
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	1ad3      	subs	r3, r2, r3
 800f1a2:	4a1f      	ldr	r2, [pc, #124]	; (800f220 <prvHeapInit+0xac>)
 800f1a4:	4413      	add	r3, r2
 800f1a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f1ac:	4a1d      	ldr	r2, [pc, #116]	; (800f224 <prvHeapInit+0xb0>)
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f1b2:	4b1c      	ldr	r3, [pc, #112]	; (800f224 <prvHeapInit+0xb0>)
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	68ba      	ldr	r2, [r7, #8]
 800f1bc:	4413      	add	r3, r2
 800f1be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f1c0:	2208      	movs	r2, #8
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	1a9b      	subs	r3, r3, r2
 800f1c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f023 0307 	bic.w	r3, r3, #7
 800f1ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	4a15      	ldr	r2, [pc, #84]	; (800f228 <prvHeapInit+0xb4>)
 800f1d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f1d6:	4b14      	ldr	r3, [pc, #80]	; (800f228 <prvHeapInit+0xb4>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f1de:	4b12      	ldr	r3, [pc, #72]	; (800f228 <prvHeapInit+0xb4>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	68fa      	ldr	r2, [r7, #12]
 800f1ee:	1ad2      	subs	r2, r2, r3
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f1f4:	4b0c      	ldr	r3, [pc, #48]	; (800f228 <prvHeapInit+0xb4>)
 800f1f6:	681a      	ldr	r2, [r3, #0]
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	685b      	ldr	r3, [r3, #4]
 800f200:	4a0a      	ldr	r2, [pc, #40]	; (800f22c <prvHeapInit+0xb8>)
 800f202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	4a09      	ldr	r2, [pc, #36]	; (800f230 <prvHeapInit+0xbc>)
 800f20a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f20c:	4b09      	ldr	r3, [pc, #36]	; (800f234 <prvHeapInit+0xc0>)
 800f20e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f212:	601a      	str	r2, [r3, #0]
}
 800f214:	bf00      	nop
 800f216:	3714      	adds	r7, #20
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr
 800f220:	2000b9c4 	.word	0x2000b9c4
 800f224:	2000f5c4 	.word	0x2000f5c4
 800f228:	2000f5cc 	.word	0x2000f5cc
 800f22c:	2000f5d4 	.word	0x2000f5d4
 800f230:	2000f5d0 	.word	0x2000f5d0
 800f234:	2000f5e0 	.word	0x2000f5e0

0800f238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f238:	b480      	push	{r7}
 800f23a:	b085      	sub	sp, #20
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f240:	4b28      	ldr	r3, [pc, #160]	; (800f2e4 <prvInsertBlockIntoFreeList+0xac>)
 800f242:	60fb      	str	r3, [r7, #12]
 800f244:	e002      	b.n	800f24c <prvInsertBlockIntoFreeList+0x14>
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	60fb      	str	r3, [r7, #12]
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	687a      	ldr	r2, [r7, #4]
 800f252:	429a      	cmp	r2, r3
 800f254:	d8f7      	bhi.n	800f246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	685b      	ldr	r3, [r3, #4]
 800f25e:	68ba      	ldr	r2, [r7, #8]
 800f260:	4413      	add	r3, r2
 800f262:	687a      	ldr	r2, [r7, #4]
 800f264:	429a      	cmp	r2, r3
 800f266:	d108      	bne.n	800f27a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	685a      	ldr	r2, [r3, #4]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	441a      	add	r2, r3
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	685b      	ldr	r3, [r3, #4]
 800f282:	68ba      	ldr	r2, [r7, #8]
 800f284:	441a      	add	r2, r3
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d118      	bne.n	800f2c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	681a      	ldr	r2, [r3, #0]
 800f292:	4b15      	ldr	r3, [pc, #84]	; (800f2e8 <prvInsertBlockIntoFreeList+0xb0>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	429a      	cmp	r2, r3
 800f298:	d00d      	beq.n	800f2b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	685a      	ldr	r2, [r3, #4]
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	685b      	ldr	r3, [r3, #4]
 800f2a4:	441a      	add	r2, r3
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	601a      	str	r2, [r3, #0]
 800f2b4:	e008      	b.n	800f2c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f2b6:	4b0c      	ldr	r3, [pc, #48]	; (800f2e8 <prvInsertBlockIntoFreeList+0xb0>)
 800f2b8:	681a      	ldr	r2, [r3, #0]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	601a      	str	r2, [r3, #0]
 800f2be:	e003      	b.n	800f2c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	681a      	ldr	r2, [r3, #0]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f2c8:	68fa      	ldr	r2, [r7, #12]
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	429a      	cmp	r2, r3
 800f2ce:	d002      	beq.n	800f2d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f2d6:	bf00      	nop
 800f2d8:	3714      	adds	r7, #20
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e0:	4770      	bx	lr
 800f2e2:	bf00      	nop
 800f2e4:	2000f5c4 	.word	0x2000f5c4
 800f2e8:	2000f5cc 	.word	0x2000f5cc

0800f2ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	4912      	ldr	r1, [pc, #72]	; (800f33c <MX_USB_DEVICE_Init+0x50>)
 800f2f4:	4812      	ldr	r0, [pc, #72]	; (800f340 <MX_USB_DEVICE_Init+0x54>)
 800f2f6:	f7fb ff21 	bl	800b13c <USBD_Init>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d001      	beq.n	800f304 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f300:	f7f2 fcb0 	bl	8001c64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f304:	490f      	ldr	r1, [pc, #60]	; (800f344 <MX_USB_DEVICE_Init+0x58>)
 800f306:	480e      	ldr	r0, [pc, #56]	; (800f340 <MX_USB_DEVICE_Init+0x54>)
 800f308:	f7fb ff48 	bl	800b19c <USBD_RegisterClass>
 800f30c:	4603      	mov	r3, r0
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d001      	beq.n	800f316 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f312:	f7f2 fca7 	bl	8001c64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f316:	490c      	ldr	r1, [pc, #48]	; (800f348 <MX_USB_DEVICE_Init+0x5c>)
 800f318:	4809      	ldr	r0, [pc, #36]	; (800f340 <MX_USB_DEVICE_Init+0x54>)
 800f31a:	f7fb fe7f 	bl	800b01c <USBD_CDC_RegisterInterface>
 800f31e:	4603      	mov	r3, r0
 800f320:	2b00      	cmp	r3, #0
 800f322:	d001      	beq.n	800f328 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f324:	f7f2 fc9e 	bl	8001c64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f328:	4805      	ldr	r0, [pc, #20]	; (800f340 <MX_USB_DEVICE_Init+0x54>)
 800f32a:	f7fb ff6d 	bl	800b208 <USBD_Start>
 800f32e:	4603      	mov	r3, r0
 800f330:	2b00      	cmp	r3, #0
 800f332:	d001      	beq.n	800f338 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f334:	f7f2 fc96 	bl	8001c64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f338:	bf00      	nop
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	200000b4 	.word	0x200000b4
 800f340:	2000f5e4 	.word	0x2000f5e4
 800f344:	2000001c 	.word	0x2000001c
 800f348:	200000a0 	.word	0x200000a0

0800f34c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f350:	2200      	movs	r2, #0
 800f352:	4905      	ldr	r1, [pc, #20]	; (800f368 <CDC_Init_FS+0x1c>)
 800f354:	4805      	ldr	r0, [pc, #20]	; (800f36c <CDC_Init_FS+0x20>)
 800f356:	f7fb fe7b 	bl	800b050 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f35a:	4905      	ldr	r1, [pc, #20]	; (800f370 <CDC_Init_FS+0x24>)
 800f35c:	4803      	ldr	r0, [pc, #12]	; (800f36c <CDC_Init_FS+0x20>)
 800f35e:	f7fb fe99 	bl	800b094 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f362:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f364:	4618      	mov	r0, r3
 800f366:	bd80      	pop	{r7, pc}
 800f368:	200100c0 	.word	0x200100c0
 800f36c:	2000f5e4 	.word	0x2000f5e4
 800f370:	2000f8c0 	.word	0x2000f8c0

0800f374 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f374:	b480      	push	{r7}
 800f376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f378:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr

0800f384 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f384:	b480      	push	{r7}
 800f386:	b083      	sub	sp, #12
 800f388:	af00      	add	r7, sp, #0
 800f38a:	4603      	mov	r3, r0
 800f38c:	6039      	str	r1, [r7, #0]
 800f38e:	71fb      	strb	r3, [r7, #7]
 800f390:	4613      	mov	r3, r2
 800f392:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f394:	79fb      	ldrb	r3, [r7, #7]
 800f396:	2b23      	cmp	r3, #35	; 0x23
 800f398:	d84a      	bhi.n	800f430 <CDC_Control_FS+0xac>
 800f39a:	a201      	add	r2, pc, #4	; (adr r2, 800f3a0 <CDC_Control_FS+0x1c>)
 800f39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3a0:	0800f431 	.word	0x0800f431
 800f3a4:	0800f431 	.word	0x0800f431
 800f3a8:	0800f431 	.word	0x0800f431
 800f3ac:	0800f431 	.word	0x0800f431
 800f3b0:	0800f431 	.word	0x0800f431
 800f3b4:	0800f431 	.word	0x0800f431
 800f3b8:	0800f431 	.word	0x0800f431
 800f3bc:	0800f431 	.word	0x0800f431
 800f3c0:	0800f431 	.word	0x0800f431
 800f3c4:	0800f431 	.word	0x0800f431
 800f3c8:	0800f431 	.word	0x0800f431
 800f3cc:	0800f431 	.word	0x0800f431
 800f3d0:	0800f431 	.word	0x0800f431
 800f3d4:	0800f431 	.word	0x0800f431
 800f3d8:	0800f431 	.word	0x0800f431
 800f3dc:	0800f431 	.word	0x0800f431
 800f3e0:	0800f431 	.word	0x0800f431
 800f3e4:	0800f431 	.word	0x0800f431
 800f3e8:	0800f431 	.word	0x0800f431
 800f3ec:	0800f431 	.word	0x0800f431
 800f3f0:	0800f431 	.word	0x0800f431
 800f3f4:	0800f431 	.word	0x0800f431
 800f3f8:	0800f431 	.word	0x0800f431
 800f3fc:	0800f431 	.word	0x0800f431
 800f400:	0800f431 	.word	0x0800f431
 800f404:	0800f431 	.word	0x0800f431
 800f408:	0800f431 	.word	0x0800f431
 800f40c:	0800f431 	.word	0x0800f431
 800f410:	0800f431 	.word	0x0800f431
 800f414:	0800f431 	.word	0x0800f431
 800f418:	0800f431 	.word	0x0800f431
 800f41c:	0800f431 	.word	0x0800f431
 800f420:	0800f431 	.word	0x0800f431
 800f424:	0800f431 	.word	0x0800f431
 800f428:	0800f431 	.word	0x0800f431
 800f42c:	0800f431 	.word	0x0800f431
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f430:	bf00      	nop
  }

  return (USBD_OK);
 800f432:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f434:	4618      	mov	r0, r3
 800f436:	370c      	adds	r7, #12
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr

0800f440 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b082      	sub	sp, #8
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
 800f448:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f44a:	6879      	ldr	r1, [r7, #4]
 800f44c:	4805      	ldr	r0, [pc, #20]	; (800f464 <CDC_Receive_FS+0x24>)
 800f44e:	f7fb fe21 	bl	800b094 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f452:	4804      	ldr	r0, [pc, #16]	; (800f464 <CDC_Receive_FS+0x24>)
 800f454:	f7fb fe3c 	bl	800b0d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f458:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3708      	adds	r7, #8
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}
 800f462:	bf00      	nop
 800f464:	2000f5e4 	.word	0x2000f5e4

0800f468 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f468:	b480      	push	{r7}
 800f46a:	b087      	sub	sp, #28
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	4613      	mov	r3, r2
 800f474:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f476:	2300      	movs	r3, #0
 800f478:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f47a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f47e:	4618      	mov	r0, r3
 800f480:	371c      	adds	r7, #28
 800f482:	46bd      	mov	sp, r7
 800f484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f488:	4770      	bx	lr
	...

0800f48c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b083      	sub	sp, #12
 800f490:	af00      	add	r7, sp, #0
 800f492:	4603      	mov	r3, r0
 800f494:	6039      	str	r1, [r7, #0]
 800f496:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	2212      	movs	r2, #18
 800f49c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f49e:	4b03      	ldr	r3, [pc, #12]	; (800f4ac <USBD_FS_DeviceDescriptor+0x20>)
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	370c      	adds	r7, #12
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr
 800f4ac:	200000d0 	.word	0x200000d0

0800f4b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b083      	sub	sp, #12
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	6039      	str	r1, [r7, #0]
 800f4ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	2204      	movs	r2, #4
 800f4c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f4c2:	4b03      	ldr	r3, [pc, #12]	; (800f4d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	370c      	adds	r7, #12
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ce:	4770      	bx	lr
 800f4d0:	200000e4 	.word	0x200000e4

0800f4d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	4603      	mov	r3, r0
 800f4dc:	6039      	str	r1, [r7, #0]
 800f4de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f4e0:	79fb      	ldrb	r3, [r7, #7]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d105      	bne.n	800f4f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f4e6:	683a      	ldr	r2, [r7, #0]
 800f4e8:	4907      	ldr	r1, [pc, #28]	; (800f508 <USBD_FS_ProductStrDescriptor+0x34>)
 800f4ea:	4808      	ldr	r0, [pc, #32]	; (800f50c <USBD_FS_ProductStrDescriptor+0x38>)
 800f4ec:	f7fd f838 	bl	800c560 <USBD_GetString>
 800f4f0:	e004      	b.n	800f4fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f4f2:	683a      	ldr	r2, [r7, #0]
 800f4f4:	4904      	ldr	r1, [pc, #16]	; (800f508 <USBD_FS_ProductStrDescriptor+0x34>)
 800f4f6:	4805      	ldr	r0, [pc, #20]	; (800f50c <USBD_FS_ProductStrDescriptor+0x38>)
 800f4f8:	f7fd f832 	bl	800c560 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f4fc:	4b02      	ldr	r3, [pc, #8]	; (800f508 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3708      	adds	r7, #8
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	200108c0 	.word	0x200108c0
 800f50c:	0801be64 	.word	0x0801be64

0800f510 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	af00      	add	r7, sp, #0
 800f516:	4603      	mov	r3, r0
 800f518:	6039      	str	r1, [r7, #0]
 800f51a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f51c:	683a      	ldr	r2, [r7, #0]
 800f51e:	4904      	ldr	r1, [pc, #16]	; (800f530 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f520:	4804      	ldr	r0, [pc, #16]	; (800f534 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f522:	f7fd f81d 	bl	800c560 <USBD_GetString>
  return USBD_StrDesc;
 800f526:	4b02      	ldr	r3, [pc, #8]	; (800f530 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3708      	adds	r7, #8
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	200108c0 	.word	0x200108c0
 800f534:	0801be70 	.word	0x0801be70

0800f538 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b082      	sub	sp, #8
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	4603      	mov	r3, r0
 800f540:	6039      	str	r1, [r7, #0]
 800f542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	221a      	movs	r2, #26
 800f548:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f54a:	f000 f843 	bl	800f5d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f54e:	4b02      	ldr	r3, [pc, #8]	; (800f558 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f550:	4618      	mov	r0, r3
 800f552:	3708      	adds	r7, #8
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}
 800f558:	200000e8 	.word	0x200000e8

0800f55c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	4603      	mov	r3, r0
 800f564:	6039      	str	r1, [r7, #0]
 800f566:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f568:	79fb      	ldrb	r3, [r7, #7]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d105      	bne.n	800f57a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f56e:	683a      	ldr	r2, [r7, #0]
 800f570:	4907      	ldr	r1, [pc, #28]	; (800f590 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f572:	4808      	ldr	r0, [pc, #32]	; (800f594 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f574:	f7fc fff4 	bl	800c560 <USBD_GetString>
 800f578:	e004      	b.n	800f584 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f57a:	683a      	ldr	r2, [r7, #0]
 800f57c:	4904      	ldr	r1, [pc, #16]	; (800f590 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f57e:	4805      	ldr	r0, [pc, #20]	; (800f594 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f580:	f7fc ffee 	bl	800c560 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f584:	4b02      	ldr	r3, [pc, #8]	; (800f590 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f586:	4618      	mov	r0, r3
 800f588:	3708      	adds	r7, #8
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	200108c0 	.word	0x200108c0
 800f594:	0801be78 	.word	0x0801be78

0800f598 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b082      	sub	sp, #8
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	4603      	mov	r3, r0
 800f5a0:	6039      	str	r1, [r7, #0]
 800f5a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f5a4:	79fb      	ldrb	r3, [r7, #7]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d105      	bne.n	800f5b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f5aa:	683a      	ldr	r2, [r7, #0]
 800f5ac:	4907      	ldr	r1, [pc, #28]	; (800f5cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f5ae:	4808      	ldr	r0, [pc, #32]	; (800f5d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f5b0:	f7fc ffd6 	bl	800c560 <USBD_GetString>
 800f5b4:	e004      	b.n	800f5c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f5b6:	683a      	ldr	r2, [r7, #0]
 800f5b8:	4904      	ldr	r1, [pc, #16]	; (800f5cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f5ba:	4805      	ldr	r0, [pc, #20]	; (800f5d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f5bc:	f7fc ffd0 	bl	800c560 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f5c0:	4b02      	ldr	r3, [pc, #8]	; (800f5cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3708      	adds	r7, #8
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
 800f5ca:	bf00      	nop
 800f5cc:	200108c0 	.word	0x200108c0
 800f5d0:	0801be84 	.word	0x0801be84

0800f5d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b084      	sub	sp, #16
 800f5d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f5da:	4b0f      	ldr	r3, [pc, #60]	; (800f618 <Get_SerialNum+0x44>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f5e0:	4b0e      	ldr	r3, [pc, #56]	; (800f61c <Get_SerialNum+0x48>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f5e6:	4b0e      	ldr	r3, [pc, #56]	; (800f620 <Get_SerialNum+0x4c>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f5ec:	68fa      	ldr	r2, [r7, #12]
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	4413      	add	r3, r2
 800f5f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d009      	beq.n	800f60e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f5fa:	2208      	movs	r2, #8
 800f5fc:	4909      	ldr	r1, [pc, #36]	; (800f624 <Get_SerialNum+0x50>)
 800f5fe:	68f8      	ldr	r0, [r7, #12]
 800f600:	f000 f814 	bl	800f62c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f604:	2204      	movs	r2, #4
 800f606:	4908      	ldr	r1, [pc, #32]	; (800f628 <Get_SerialNum+0x54>)
 800f608:	68b8      	ldr	r0, [r7, #8]
 800f60a:	f000 f80f 	bl	800f62c <IntToUnicode>
  }
}
 800f60e:	bf00      	nop
 800f610:	3710      	adds	r7, #16
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	1fff7a10 	.word	0x1fff7a10
 800f61c:	1fff7a14 	.word	0x1fff7a14
 800f620:	1fff7a18 	.word	0x1fff7a18
 800f624:	200000ea 	.word	0x200000ea
 800f628:	200000fa 	.word	0x200000fa

0800f62c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f62c:	b480      	push	{r7}
 800f62e:	b087      	sub	sp, #28
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	4613      	mov	r3, r2
 800f638:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f63a:	2300      	movs	r3, #0
 800f63c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f63e:	2300      	movs	r3, #0
 800f640:	75fb      	strb	r3, [r7, #23]
 800f642:	e027      	b.n	800f694 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	0f1b      	lsrs	r3, r3, #28
 800f648:	2b09      	cmp	r3, #9
 800f64a:	d80b      	bhi.n	800f664 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	0f1b      	lsrs	r3, r3, #28
 800f650:	b2da      	uxtb	r2, r3
 800f652:	7dfb      	ldrb	r3, [r7, #23]
 800f654:	005b      	lsls	r3, r3, #1
 800f656:	4619      	mov	r1, r3
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	440b      	add	r3, r1
 800f65c:	3230      	adds	r2, #48	; 0x30
 800f65e:	b2d2      	uxtb	r2, r2
 800f660:	701a      	strb	r2, [r3, #0]
 800f662:	e00a      	b.n	800f67a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	0f1b      	lsrs	r3, r3, #28
 800f668:	b2da      	uxtb	r2, r3
 800f66a:	7dfb      	ldrb	r3, [r7, #23]
 800f66c:	005b      	lsls	r3, r3, #1
 800f66e:	4619      	mov	r1, r3
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	440b      	add	r3, r1
 800f674:	3237      	adds	r2, #55	; 0x37
 800f676:	b2d2      	uxtb	r2, r2
 800f678:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	011b      	lsls	r3, r3, #4
 800f67e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f680:	7dfb      	ldrb	r3, [r7, #23]
 800f682:	005b      	lsls	r3, r3, #1
 800f684:	3301      	adds	r3, #1
 800f686:	68ba      	ldr	r2, [r7, #8]
 800f688:	4413      	add	r3, r2
 800f68a:	2200      	movs	r2, #0
 800f68c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f68e:	7dfb      	ldrb	r3, [r7, #23]
 800f690:	3301      	adds	r3, #1
 800f692:	75fb      	strb	r3, [r7, #23]
 800f694:	7dfa      	ldrb	r2, [r7, #23]
 800f696:	79fb      	ldrb	r3, [r7, #7]
 800f698:	429a      	cmp	r2, r3
 800f69a:	d3d3      	bcc.n	800f644 <IntToUnicode+0x18>
  }
}
 800f69c:	bf00      	nop
 800f69e:	bf00      	nop
 800f6a0:	371c      	adds	r7, #28
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr
	...

0800f6ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b08a      	sub	sp, #40	; 0x28
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f6b4:	f107 0314 	add.w	r3, r7, #20
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	601a      	str	r2, [r3, #0]
 800f6bc:	605a      	str	r2, [r3, #4]
 800f6be:	609a      	str	r2, [r3, #8]
 800f6c0:	60da      	str	r2, [r3, #12]
 800f6c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f6cc:	d13a      	bne.n	800f744 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	613b      	str	r3, [r7, #16]
 800f6d2:	4b1e      	ldr	r3, [pc, #120]	; (800f74c <HAL_PCD_MspInit+0xa0>)
 800f6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6d6:	4a1d      	ldr	r2, [pc, #116]	; (800f74c <HAL_PCD_MspInit+0xa0>)
 800f6d8:	f043 0301 	orr.w	r3, r3, #1
 800f6dc:	6313      	str	r3, [r2, #48]	; 0x30
 800f6de:	4b1b      	ldr	r3, [pc, #108]	; (800f74c <HAL_PCD_MspInit+0xa0>)
 800f6e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6e2:	f003 0301 	and.w	r3, r3, #1
 800f6e6:	613b      	str	r3, [r7, #16]
 800f6e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f6ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f6ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6f0:	2302      	movs	r3, #2
 800f6f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f6f8:	2303      	movs	r3, #3
 800f6fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f6fc:	230a      	movs	r3, #10
 800f6fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f700:	f107 0314 	add.w	r3, r7, #20
 800f704:	4619      	mov	r1, r3
 800f706:	4812      	ldr	r0, [pc, #72]	; (800f750 <HAL_PCD_MspInit+0xa4>)
 800f708:	f7f4 fbd0 	bl	8003eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f70c:	4b0f      	ldr	r3, [pc, #60]	; (800f74c <HAL_PCD_MspInit+0xa0>)
 800f70e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f710:	4a0e      	ldr	r2, [pc, #56]	; (800f74c <HAL_PCD_MspInit+0xa0>)
 800f712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f716:	6353      	str	r3, [r2, #52]	; 0x34
 800f718:	2300      	movs	r3, #0
 800f71a:	60fb      	str	r3, [r7, #12]
 800f71c:	4b0b      	ldr	r3, [pc, #44]	; (800f74c <HAL_PCD_MspInit+0xa0>)
 800f71e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f720:	4a0a      	ldr	r2, [pc, #40]	; (800f74c <HAL_PCD_MspInit+0xa0>)
 800f722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f726:	6453      	str	r3, [r2, #68]	; 0x44
 800f728:	4b08      	ldr	r3, [pc, #32]	; (800f74c <HAL_PCD_MspInit+0xa0>)
 800f72a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f72c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f730:	60fb      	str	r3, [r7, #12]
 800f732:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f734:	2200      	movs	r2, #0
 800f736:	2105      	movs	r1, #5
 800f738:	2043      	movs	r0, #67	; 0x43
 800f73a:	f7f3 ff6f 	bl	800361c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f73e:	2043      	movs	r0, #67	; 0x43
 800f740:	f7f3 ff88 	bl	8003654 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f744:	bf00      	nop
 800f746:	3728      	adds	r7, #40	; 0x28
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}
 800f74c:	40023800 	.word	0x40023800
 800f750:	40020000 	.word	0x40020000

0800f754 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b082      	sub	sp, #8
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f768:	4619      	mov	r1, r3
 800f76a:	4610      	mov	r0, r2
 800f76c:	f7fb fd99 	bl	800b2a2 <USBD_LL_SetupStage>
}
 800f770:	bf00      	nop
 800f772:	3708      	adds	r7, #8
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}

0800f778 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b082      	sub	sp, #8
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
 800f780:	460b      	mov	r3, r1
 800f782:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f78a:	78fa      	ldrb	r2, [r7, #3]
 800f78c:	6879      	ldr	r1, [r7, #4]
 800f78e:	4613      	mov	r3, r2
 800f790:	00db      	lsls	r3, r3, #3
 800f792:	4413      	add	r3, r2
 800f794:	009b      	lsls	r3, r3, #2
 800f796:	440b      	add	r3, r1
 800f798:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	78fb      	ldrb	r3, [r7, #3]
 800f7a0:	4619      	mov	r1, r3
 800f7a2:	f7fb fdd3 	bl	800b34c <USBD_LL_DataOutStage>
}
 800f7a6:	bf00      	nop
 800f7a8:	3708      	adds	r7, #8
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}

0800f7ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7ae:	b580      	push	{r7, lr}
 800f7b0:	b082      	sub	sp, #8
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
 800f7b6:	460b      	mov	r3, r1
 800f7b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f7c0:	78fa      	ldrb	r2, [r7, #3]
 800f7c2:	6879      	ldr	r1, [r7, #4]
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	00db      	lsls	r3, r3, #3
 800f7c8:	4413      	add	r3, r2
 800f7ca:	009b      	lsls	r3, r3, #2
 800f7cc:	440b      	add	r3, r1
 800f7ce:	334c      	adds	r3, #76	; 0x4c
 800f7d0:	681a      	ldr	r2, [r3, #0]
 800f7d2:	78fb      	ldrb	r3, [r7, #3]
 800f7d4:	4619      	mov	r1, r3
 800f7d6:	f7fb fe6c 	bl	800b4b2 <USBD_LL_DataInStage>
}
 800f7da:	bf00      	nop
 800f7dc:	3708      	adds	r7, #8
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}

0800f7e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7e2:	b580      	push	{r7, lr}
 800f7e4:	b082      	sub	sp, #8
 800f7e6:	af00      	add	r7, sp, #0
 800f7e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7fb ffa0 	bl	800b736 <USBD_LL_SOF>
}
 800f7f6:	bf00      	nop
 800f7f8:	3708      	adds	r7, #8
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}

0800f7fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7fe:	b580      	push	{r7, lr}
 800f800:	b084      	sub	sp, #16
 800f802:	af00      	add	r7, sp, #0
 800f804:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f806:	2301      	movs	r3, #1
 800f808:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	68db      	ldr	r3, [r3, #12]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d102      	bne.n	800f818 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f812:	2300      	movs	r3, #0
 800f814:	73fb      	strb	r3, [r7, #15]
 800f816:	e008      	b.n	800f82a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	68db      	ldr	r3, [r3, #12]
 800f81c:	2b02      	cmp	r3, #2
 800f81e:	d102      	bne.n	800f826 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f820:	2301      	movs	r3, #1
 800f822:	73fb      	strb	r3, [r7, #15]
 800f824:	e001      	b.n	800f82a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f826:	f7f2 fa1d 	bl	8001c64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f830:	7bfa      	ldrb	r2, [r7, #15]
 800f832:	4611      	mov	r1, r2
 800f834:	4618      	mov	r0, r3
 800f836:	f7fb ff40 	bl	800b6ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f840:	4618      	mov	r0, r3
 800f842:	f7fb fee8 	bl	800b616 <USBD_LL_Reset>
}
 800f846:	bf00      	nop
 800f848:	3710      	adds	r7, #16
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
	...

0800f850 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f85e:	4618      	mov	r0, r3
 800f860:	f7fb ff3b 	bl	800b6da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	687a      	ldr	r2, [r7, #4]
 800f870:	6812      	ldr	r2, [r2, #0]
 800f872:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f876:	f043 0301 	orr.w	r3, r3, #1
 800f87a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6a1b      	ldr	r3, [r3, #32]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d005      	beq.n	800f890 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f884:	4b04      	ldr	r3, [pc, #16]	; (800f898 <HAL_PCD_SuspendCallback+0x48>)
 800f886:	691b      	ldr	r3, [r3, #16]
 800f888:	4a03      	ldr	r2, [pc, #12]	; (800f898 <HAL_PCD_SuspendCallback+0x48>)
 800f88a:	f043 0306 	orr.w	r3, r3, #6
 800f88e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f890:	bf00      	nop
 800f892:	3708      	adds	r7, #8
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}
 800f898:	e000ed00 	.word	0xe000ed00

0800f89c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7fb ff2b 	bl	800b706 <USBD_LL_Resume>
}
 800f8b0:	bf00      	nop
 800f8b2:	3708      	adds	r7, #8
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}

0800f8b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	460b      	mov	r3, r1
 800f8c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8ca:	78fa      	ldrb	r2, [r7, #3]
 800f8cc:	4611      	mov	r1, r2
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7fb ff83 	bl	800b7da <USBD_LL_IsoOUTIncomplete>
}
 800f8d4:	bf00      	nop
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b082      	sub	sp, #8
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
 800f8e4:	460b      	mov	r3, r1
 800f8e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f8ee:	78fa      	ldrb	r2, [r7, #3]
 800f8f0:	4611      	mov	r1, r2
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7fb ff3f 	bl	800b776 <USBD_LL_IsoINIncomplete>
}
 800f8f8:	bf00      	nop
 800f8fa:	3708      	adds	r7, #8
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f90e:	4618      	mov	r0, r3
 800f910:	f7fb ff95 	bl	800b83e <USBD_LL_DevConnected>
}
 800f914:	bf00      	nop
 800f916:	3708      	adds	r7, #8
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f92a:	4618      	mov	r0, r3
 800f92c:	f7fb ff92 	bl	800b854 <USBD_LL_DevDisconnected>
}
 800f930:	bf00      	nop
 800f932:	3708      	adds	r7, #8
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d13c      	bne.n	800f9c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f948:	4a20      	ldr	r2, [pc, #128]	; (800f9cc <USBD_LL_Init+0x94>)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	4a1e      	ldr	r2, [pc, #120]	; (800f9cc <USBD_LL_Init+0x94>)
 800f954:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f958:	4b1c      	ldr	r3, [pc, #112]	; (800f9cc <USBD_LL_Init+0x94>)
 800f95a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f95e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f960:	4b1a      	ldr	r3, [pc, #104]	; (800f9cc <USBD_LL_Init+0x94>)
 800f962:	2204      	movs	r2, #4
 800f964:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f966:	4b19      	ldr	r3, [pc, #100]	; (800f9cc <USBD_LL_Init+0x94>)
 800f968:	2202      	movs	r2, #2
 800f96a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f96c:	4b17      	ldr	r3, [pc, #92]	; (800f9cc <USBD_LL_Init+0x94>)
 800f96e:	2200      	movs	r2, #0
 800f970:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f972:	4b16      	ldr	r3, [pc, #88]	; (800f9cc <USBD_LL_Init+0x94>)
 800f974:	2202      	movs	r2, #2
 800f976:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f978:	4b14      	ldr	r3, [pc, #80]	; (800f9cc <USBD_LL_Init+0x94>)
 800f97a:	2200      	movs	r2, #0
 800f97c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f97e:	4b13      	ldr	r3, [pc, #76]	; (800f9cc <USBD_LL_Init+0x94>)
 800f980:	2200      	movs	r2, #0
 800f982:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f984:	4b11      	ldr	r3, [pc, #68]	; (800f9cc <USBD_LL_Init+0x94>)
 800f986:	2200      	movs	r2, #0
 800f988:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f98a:	4b10      	ldr	r3, [pc, #64]	; (800f9cc <USBD_LL_Init+0x94>)
 800f98c:	2200      	movs	r2, #0
 800f98e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f990:	4b0e      	ldr	r3, [pc, #56]	; (800f9cc <USBD_LL_Init+0x94>)
 800f992:	2200      	movs	r2, #0
 800f994:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f996:	480d      	ldr	r0, [pc, #52]	; (800f9cc <USBD_LL_Init+0x94>)
 800f998:	f7f4 fd82 	bl	80044a0 <HAL_PCD_Init>
 800f99c:	4603      	mov	r3, r0
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d001      	beq.n	800f9a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f9a2:	f7f2 f95f 	bl	8001c64 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f9a6:	2180      	movs	r1, #128	; 0x80
 800f9a8:	4808      	ldr	r0, [pc, #32]	; (800f9cc <USBD_LL_Init+0x94>)
 800f9aa:	f7f5 ffda 	bl	8005962 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f9ae:	2240      	movs	r2, #64	; 0x40
 800f9b0:	2100      	movs	r1, #0
 800f9b2:	4806      	ldr	r0, [pc, #24]	; (800f9cc <USBD_LL_Init+0x94>)
 800f9b4:	f7f5 ff8e 	bl	80058d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f9b8:	2280      	movs	r2, #128	; 0x80
 800f9ba:	2101      	movs	r1, #1
 800f9bc:	4803      	ldr	r0, [pc, #12]	; (800f9cc <USBD_LL_Init+0x94>)
 800f9be:	f7f5 ff89 	bl	80058d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f9c2:	2300      	movs	r3, #0
}
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	3708      	adds	r7, #8
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}
 800f9cc:	20010ac0 	.word	0x20010ac0

0800f9d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b084      	sub	sp, #16
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9dc:	2300      	movs	r3, #0
 800f9de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7f4 fe77 	bl	80046da <HAL_PCD_Start>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9f0:	7bfb      	ldrb	r3, [r7, #15]
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f000 f942 	bl	800fc7c <USBD_Get_USB_Status>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3710      	adds	r7, #16
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}

0800fa06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fa06:	b580      	push	{r7, lr}
 800fa08:	b084      	sub	sp, #16
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	6078      	str	r0, [r7, #4]
 800fa0e:	4608      	mov	r0, r1
 800fa10:	4611      	mov	r1, r2
 800fa12:	461a      	mov	r2, r3
 800fa14:	4603      	mov	r3, r0
 800fa16:	70fb      	strb	r3, [r7, #3]
 800fa18:	460b      	mov	r3, r1
 800fa1a:	70bb      	strb	r3, [r7, #2]
 800fa1c:	4613      	mov	r3, r2
 800fa1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa20:	2300      	movs	r3, #0
 800fa22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa24:	2300      	movs	r3, #0
 800fa26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fa2e:	78bb      	ldrb	r3, [r7, #2]
 800fa30:	883a      	ldrh	r2, [r7, #0]
 800fa32:	78f9      	ldrb	r1, [r7, #3]
 800fa34:	f7f5 fb48 	bl	80050c8 <HAL_PCD_EP_Open>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa3c:	7bfb      	ldrb	r3, [r7, #15]
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f000 f91c 	bl	800fc7c <USBD_Get_USB_Status>
 800fa44:	4603      	mov	r3, r0
 800fa46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa48:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3710      	adds	r7, #16
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}

0800fa52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa52:	b580      	push	{r7, lr}
 800fa54:	b084      	sub	sp, #16
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	6078      	str	r0, [r7, #4]
 800fa5a:	460b      	mov	r3, r1
 800fa5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa62:	2300      	movs	r3, #0
 800fa64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa6c:	78fa      	ldrb	r2, [r7, #3]
 800fa6e:	4611      	mov	r1, r2
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7f5 fb91 	bl	8005198 <HAL_PCD_EP_Close>
 800fa76:	4603      	mov	r3, r0
 800fa78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa7a:	7bfb      	ldrb	r3, [r7, #15]
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f000 f8fd 	bl	800fc7c <USBD_Get_USB_Status>
 800fa82:	4603      	mov	r3, r0
 800fa84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa86:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3710      	adds	r7, #16
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}

0800fa90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b084      	sub	sp, #16
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	460b      	mov	r3, r1
 800fa9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800faa0:	2300      	movs	r3, #0
 800faa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800faaa:	78fa      	ldrb	r2, [r7, #3]
 800faac:	4611      	mov	r1, r2
 800faae:	4618      	mov	r0, r3
 800fab0:	f7f5 fc69 	bl	8005386 <HAL_PCD_EP_SetStall>
 800fab4:	4603      	mov	r3, r0
 800fab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fab8:	7bfb      	ldrb	r3, [r7, #15]
 800faba:	4618      	mov	r0, r3
 800fabc:	f000 f8de 	bl	800fc7c <USBD_Get_USB_Status>
 800fac0:	4603      	mov	r3, r0
 800fac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fac4:	7bbb      	ldrb	r3, [r7, #14]
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	3710      	adds	r7, #16
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}

0800face <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800face:	b580      	push	{r7, lr}
 800fad0:	b084      	sub	sp, #16
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]
 800fad6:	460b      	mov	r3, r1
 800fad8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fada:	2300      	movs	r3, #0
 800fadc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fade:	2300      	movs	r3, #0
 800fae0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fae8:	78fa      	ldrb	r2, [r7, #3]
 800faea:	4611      	mov	r1, r2
 800faec:	4618      	mov	r0, r3
 800faee:	f7f5 fcae 	bl	800544e <HAL_PCD_EP_ClrStall>
 800faf2:	4603      	mov	r3, r0
 800faf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800faf6:	7bfb      	ldrb	r3, [r7, #15]
 800faf8:	4618      	mov	r0, r3
 800fafa:	f000 f8bf 	bl	800fc7c <USBD_Get_USB_Status>
 800fafe:	4603      	mov	r3, r0
 800fb00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb02:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3710      	adds	r7, #16
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b085      	sub	sp, #20
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	460b      	mov	r3, r1
 800fb16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fb20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	da0b      	bge.n	800fb40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fb28:	78fb      	ldrb	r3, [r7, #3]
 800fb2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb2e:	68f9      	ldr	r1, [r7, #12]
 800fb30:	4613      	mov	r3, r2
 800fb32:	00db      	lsls	r3, r3, #3
 800fb34:	4413      	add	r3, r2
 800fb36:	009b      	lsls	r3, r3, #2
 800fb38:	440b      	add	r3, r1
 800fb3a:	333e      	adds	r3, #62	; 0x3e
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	e00b      	b.n	800fb58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fb40:	78fb      	ldrb	r3, [r7, #3]
 800fb42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb46:	68f9      	ldr	r1, [r7, #12]
 800fb48:	4613      	mov	r3, r2
 800fb4a:	00db      	lsls	r3, r3, #3
 800fb4c:	4413      	add	r3, r2
 800fb4e:	009b      	lsls	r3, r3, #2
 800fb50:	440b      	add	r3, r1
 800fb52:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fb56:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3714      	adds	r7, #20
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb62:	4770      	bx	lr

0800fb64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b084      	sub	sp, #16
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	460b      	mov	r3, r1
 800fb6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb70:	2300      	movs	r3, #0
 800fb72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb74:	2300      	movs	r3, #0
 800fb76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb7e:	78fa      	ldrb	r2, [r7, #3]
 800fb80:	4611      	mov	r1, r2
 800fb82:	4618      	mov	r0, r3
 800fb84:	f7f5 fa7b 	bl	800507e <HAL_PCD_SetAddress>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb8c:	7bfb      	ldrb	r3, [r7, #15]
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f000 f874 	bl	800fc7c <USBD_Get_USB_Status>
 800fb94:	4603      	mov	r3, r0
 800fb96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fb98:	7bbb      	ldrb	r3, [r7, #14]
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3710      	adds	r7, #16
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}

0800fba2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fba2:	b580      	push	{r7, lr}
 800fba4:	b086      	sub	sp, #24
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	60f8      	str	r0, [r7, #12]
 800fbaa:	607a      	str	r2, [r7, #4]
 800fbac:	603b      	str	r3, [r7, #0]
 800fbae:	460b      	mov	r3, r1
 800fbb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fbc0:	7af9      	ldrb	r1, [r7, #11]
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	687a      	ldr	r2, [r7, #4]
 800fbc6:	f7f5 fb94 	bl	80052f2 <HAL_PCD_EP_Transmit>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fbce:	7dfb      	ldrb	r3, [r7, #23]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f000 f853 	bl	800fc7c <USBD_Get_USB_Status>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fbda:	7dbb      	ldrb	r3, [r7, #22]
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3718      	adds	r7, #24
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}

0800fbe4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b086      	sub	sp, #24
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	60f8      	str	r0, [r7, #12]
 800fbec:	607a      	str	r2, [r7, #4]
 800fbee:	603b      	str	r3, [r7, #0]
 800fbf0:	460b      	mov	r3, r1
 800fbf2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fc02:	7af9      	ldrb	r1, [r7, #11]
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	687a      	ldr	r2, [r7, #4]
 800fc08:	f7f5 fb10 	bl	800522c <HAL_PCD_EP_Receive>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fc10:	7dfb      	ldrb	r3, [r7, #23]
 800fc12:	4618      	mov	r0, r3
 800fc14:	f000 f832 	bl	800fc7c <USBD_Get_USB_Status>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fc1c:	7dbb      	ldrb	r3, [r7, #22]
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3718      	adds	r7, #24
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}

0800fc26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fc26:	b580      	push	{r7, lr}
 800fc28:	b082      	sub	sp, #8
 800fc2a:	af00      	add	r7, sp, #0
 800fc2c:	6078      	str	r0, [r7, #4]
 800fc2e:	460b      	mov	r3, r1
 800fc30:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fc38:	78fa      	ldrb	r2, [r7, #3]
 800fc3a:	4611      	mov	r1, r2
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f7f5 fb40 	bl	80052c2 <HAL_PCD_EP_GetRxCount>
 800fc42:	4603      	mov	r3, r0
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3708      	adds	r7, #8
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}

0800fc4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b083      	sub	sp, #12
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fc54:	4b03      	ldr	r3, [pc, #12]	; (800fc64 <USBD_static_malloc+0x18>)
}
 800fc56:	4618      	mov	r0, r3
 800fc58:	370c      	adds	r7, #12
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc60:	4770      	bx	lr
 800fc62:	bf00      	nop
 800fc64:	20010fcc 	.word	0x20010fcc

0800fc68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b083      	sub	sp, #12
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]

}
 800fc70:	bf00      	nop
 800fc72:	370c      	adds	r7, #12
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b085      	sub	sp, #20
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	4603      	mov	r3, r0
 800fc84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc86:	2300      	movs	r3, #0
 800fc88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fc8a:	79fb      	ldrb	r3, [r7, #7]
 800fc8c:	2b03      	cmp	r3, #3
 800fc8e:	d817      	bhi.n	800fcc0 <USBD_Get_USB_Status+0x44>
 800fc90:	a201      	add	r2, pc, #4	; (adr r2, 800fc98 <USBD_Get_USB_Status+0x1c>)
 800fc92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc96:	bf00      	nop
 800fc98:	0800fca9 	.word	0x0800fca9
 800fc9c:	0800fcaf 	.word	0x0800fcaf
 800fca0:	0800fcb5 	.word	0x0800fcb5
 800fca4:	0800fcbb 	.word	0x0800fcbb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	73fb      	strb	r3, [r7, #15]
    break;
 800fcac:	e00b      	b.n	800fcc6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fcae:	2303      	movs	r3, #3
 800fcb0:	73fb      	strb	r3, [r7, #15]
    break;
 800fcb2:	e008      	b.n	800fcc6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fcb4:	2301      	movs	r3, #1
 800fcb6:	73fb      	strb	r3, [r7, #15]
    break;
 800fcb8:	e005      	b.n	800fcc6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fcba:	2303      	movs	r3, #3
 800fcbc:	73fb      	strb	r3, [r7, #15]
    break;
 800fcbe:	e002      	b.n	800fcc6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fcc0:	2303      	movs	r3, #3
 800fcc2:	73fb      	strb	r3, [r7, #15]
    break;
 800fcc4:	bf00      	nop
  }
  return usb_status;
 800fcc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3714      	adds	r7, #20
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <rcl_get_zero_initialized_publisher>:
 800fcd4:	4b01      	ldr	r3, [pc, #4]	; (800fcdc <rcl_get_zero_initialized_publisher+0x8>)
 800fcd6:	6818      	ldr	r0, [r3, #0]
 800fcd8:	4770      	bx	lr
 800fcda:	bf00      	nop
 800fcdc:	0801bf08 	.word	0x0801bf08

0800fce0 <rcl_publisher_init>:
 800fce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fce4:	b088      	sub	sp, #32
 800fce6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800fce8:	2d00      	cmp	r5, #0
 800fcea:	d069      	beq.n	800fdc0 <rcl_publisher_init+0xe0>
 800fcec:	f105 0950 	add.w	r9, r5, #80	; 0x50
 800fcf0:	4604      	mov	r4, r0
 800fcf2:	4648      	mov	r0, r9
 800fcf4:	460e      	mov	r6, r1
 800fcf6:	4690      	mov	r8, r2
 800fcf8:	461f      	mov	r7, r3
 800fcfa:	f000 f9d5 	bl	80100a8 <rcutils_allocator_is_valid>
 800fcfe:	2800      	cmp	r0, #0
 800fd00:	d05e      	beq.n	800fdc0 <rcl_publisher_init+0xe0>
 800fd02:	2c00      	cmp	r4, #0
 800fd04:	d05c      	beq.n	800fdc0 <rcl_publisher_init+0xe0>
 800fd06:	f8d4 a000 	ldr.w	sl, [r4]
 800fd0a:	f1ba 0f00 	cmp.w	sl, #0
 800fd0e:	d004      	beq.n	800fd1a <rcl_publisher_init+0x3a>
 800fd10:	2764      	movs	r7, #100	; 0x64
 800fd12:	4638      	mov	r0, r7
 800fd14:	b008      	add	sp, #32
 800fd16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd1a:	4630      	mov	r0, r6
 800fd1c:	f006 fb34 	bl	8016388 <rcl_node_is_valid>
 800fd20:	2800      	cmp	r0, #0
 800fd22:	d052      	beq.n	800fdca <rcl_publisher_init+0xea>
 800fd24:	f1b8 0f00 	cmp.w	r8, #0
 800fd28:	d04a      	beq.n	800fdc0 <rcl_publisher_init+0xe0>
 800fd2a:	2f00      	cmp	r7, #0
 800fd2c:	d048      	beq.n	800fdc0 <rcl_publisher_init+0xe0>
 800fd2e:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800fd32:	aa07      	add	r2, sp, #28
 800fd34:	9205      	str	r2, [sp, #20]
 800fd36:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800fd3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fd3e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fd42:	f8cd a01c 	str.w	sl, [sp, #28]
 800fd46:	4639      	mov	r1, r7
 800fd48:	e899 000c 	ldmia.w	r9, {r2, r3}
 800fd4c:	4630      	mov	r0, r6
 800fd4e:	f006 fb6f 	bl	8016430 <rcl_node_resolve_name>
 800fd52:	4607      	mov	r7, r0
 800fd54:	2800      	cmp	r0, #0
 800fd56:	d14f      	bne.n	800fdf8 <rcl_publisher_init+0x118>
 800fd58:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800fd5a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800fd5c:	20c8      	movs	r0, #200	; 0xc8
 800fd5e:	4798      	blx	r3
 800fd60:	6020      	str	r0, [r4, #0]
 800fd62:	2800      	cmp	r0, #0
 800fd64:	d04e      	beq.n	800fe04 <rcl_publisher_init+0x124>
 800fd66:	4630      	mov	r0, r6
 800fd68:	f006 fb30 	bl	80163cc <rcl_node_get_rmw_handle>
 800fd6c:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800fd70:	9300      	str	r3, [sp, #0]
 800fd72:	9a07      	ldr	r2, [sp, #28]
 800fd74:	6827      	ldr	r7, [r4, #0]
 800fd76:	462b      	mov	r3, r5
 800fd78:	4641      	mov	r1, r8
 800fd7a:	f000 fa53 	bl	8010224 <rmw_create_publisher>
 800fd7e:	6823      	ldr	r3, [r4, #0]
 800fd80:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800fd84:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800fd88:	b370      	cbz	r0, 800fde8 <rcl_publisher_init+0x108>
 800fd8a:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800fd8e:	f000 fb29 	bl	80103e4 <rmw_publisher_get_actual_qos>
 800fd92:	6823      	ldr	r3, [r4, #0]
 800fd94:	4607      	mov	r7, r0
 800fd96:	b9d0      	cbnz	r0, 800fdce <rcl_publisher_init+0xee>
 800fd98:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 800fd9c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800fda0:	4629      	mov	r1, r5
 800fda2:	2270      	movs	r2, #112	; 0x70
 800fda4:	4618      	mov	r0, r3
 800fda6:	f00a fcff 	bl	801a7a8 <memcpy>
 800fdaa:	6832      	ldr	r2, [r6, #0]
 800fdac:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800fdb0:	9807      	ldr	r0, [sp, #28]
 800fdb2:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800fdb4:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800fdb6:	4798      	blx	r3
 800fdb8:	4638      	mov	r0, r7
 800fdba:	b008      	add	sp, #32
 800fdbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdc0:	270b      	movs	r7, #11
 800fdc2:	4638      	mov	r0, r7
 800fdc4:	b008      	add	sp, #32
 800fdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdca:	27c8      	movs	r7, #200	; 0xc8
 800fdcc:	e7a1      	b.n	800fd12 <rcl_publisher_init+0x32>
 800fdce:	b18b      	cbz	r3, 800fdf4 <rcl_publisher_init+0x114>
 800fdd0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800fdd4:	b142      	cbz	r2, 800fde8 <rcl_publisher_init+0x108>
 800fdd6:	4630      	mov	r0, r6
 800fdd8:	f006 faf8 	bl	80163cc <rcl_node_get_rmw_handle>
 800fddc:	6823      	ldr	r3, [r4, #0]
 800fdde:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800fde2:	f000 fb01 	bl	80103e8 <rmw_destroy_publisher>
 800fde6:	6823      	ldr	r3, [r4, #0]
 800fde8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800fdea:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800fdec:	4618      	mov	r0, r3
 800fdee:	4790      	blx	r2
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	6023      	str	r3, [r4, #0]
 800fdf4:	2701      	movs	r7, #1
 800fdf6:	e7db      	b.n	800fdb0 <rcl_publisher_init+0xd0>
 800fdf8:	2867      	cmp	r0, #103	; 0x67
 800fdfa:	d0d9      	beq.n	800fdb0 <rcl_publisher_init+0xd0>
 800fdfc:	2869      	cmp	r0, #105	; 0x69
 800fdfe:	d003      	beq.n	800fe08 <rcl_publisher_init+0x128>
 800fe00:	280a      	cmp	r0, #10
 800fe02:	d1f7      	bne.n	800fdf4 <rcl_publisher_init+0x114>
 800fe04:	270a      	movs	r7, #10
 800fe06:	e7d3      	b.n	800fdb0 <rcl_publisher_init+0xd0>
 800fe08:	2767      	movs	r7, #103	; 0x67
 800fe0a:	e7d1      	b.n	800fdb0 <rcl_publisher_init+0xd0>

0800fe0c <rcl_publisher_get_default_options>:
 800fe0c:	b570      	push	{r4, r5, r6, lr}
 800fe0e:	4d14      	ldr	r5, [pc, #80]	; (800fe60 <rcl_publisher_get_default_options+0x54>)
 800fe10:	4914      	ldr	r1, [pc, #80]	; (800fe64 <rcl_publisher_get_default_options+0x58>)
 800fe12:	b088      	sub	sp, #32
 800fe14:	4604      	mov	r4, r0
 800fe16:	2250      	movs	r2, #80	; 0x50
 800fe18:	4628      	mov	r0, r5
 800fe1a:	f00a fcc5 	bl	801a7a8 <memcpy>
 800fe1e:	a802      	add	r0, sp, #8
 800fe20:	f000 f934 	bl	801008c <rcutils_get_default_allocator>
 800fe24:	f10d 0c08 	add.w	ip, sp, #8
 800fe28:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fe2c:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800fe30:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fe34:	466e      	mov	r6, sp
 800fe36:	f8dc 3000 	ldr.w	r3, [ip]
 800fe3a:	f8ce 3000 	str.w	r3, [lr]
 800fe3e:	4630      	mov	r0, r6
 800fe40:	f000 f972 	bl	8010128 <rmw_get_default_publisher_options>
 800fe44:	e896 0003 	ldmia.w	r6, {r0, r1}
 800fe48:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800fe4c:	e883 0003 	stmia.w	r3, {r0, r1}
 800fe50:	2270      	movs	r2, #112	; 0x70
 800fe52:	4629      	mov	r1, r5
 800fe54:	4620      	mov	r0, r4
 800fe56:	f00a fca7 	bl	801a7a8 <memcpy>
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	b008      	add	sp, #32
 800fe5e:	bd70      	pop	{r4, r5, r6, pc}
 800fe60:	200111f0 	.word	0x200111f0
 800fe64:	0801bf10 	.word	0x0801bf10

0800fe68 <rcl_publish>:
 800fe68:	b1f8      	cbz	r0, 800feaa <rcl_publish+0x42>
 800fe6a:	6803      	ldr	r3, [r0, #0]
 800fe6c:	b570      	push	{r4, r5, r6, lr}
 800fe6e:	4604      	mov	r4, r0
 800fe70:	b1b3      	cbz	r3, 800fea0 <rcl_publish+0x38>
 800fe72:	4616      	mov	r6, r2
 800fe74:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800fe78:	b192      	cbz	r2, 800fea0 <rcl_publish+0x38>
 800fe7a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800fe7e:	460d      	mov	r5, r1
 800fe80:	f005 fea8 	bl	8015bd4 <rcl_context_is_valid>
 800fe84:	b160      	cbz	r0, 800fea0 <rcl_publish+0x38>
 800fe86:	6823      	ldr	r3, [r4, #0]
 800fe88:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800fe8c:	b140      	cbz	r0, 800fea0 <rcl_publish+0x38>
 800fe8e:	b155      	cbz	r5, 800fea6 <rcl_publish+0x3e>
 800fe90:	4632      	mov	r2, r6
 800fe92:	4629      	mov	r1, r5
 800fe94:	f000 f966 	bl	8010164 <rmw_publish>
 800fe98:	3800      	subs	r0, #0
 800fe9a:	bf18      	it	ne
 800fe9c:	2001      	movne	r0, #1
 800fe9e:	bd70      	pop	{r4, r5, r6, pc}
 800fea0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800fea4:	bd70      	pop	{r4, r5, r6, pc}
 800fea6:	200b      	movs	r0, #11
 800fea8:	bd70      	pop	{r4, r5, r6, pc}
 800feaa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800feae:	4770      	bx	lr

0800feb0 <rclc_support_init>:
 800feb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feb4:	b086      	sub	sp, #24
 800feb6:	b3b8      	cbz	r0, 800ff28 <rclc_support_init+0x78>
 800feb8:	461c      	mov	r4, r3
 800feba:	b3ab      	cbz	r3, 800ff28 <rclc_support_init+0x78>
 800febc:	460f      	mov	r7, r1
 800febe:	4690      	mov	r8, r2
 800fec0:	4606      	mov	r6, r0
 800fec2:	f005 fff1 	bl	8015ea8 <rcl_get_zero_initialized_init_options>
 800fec6:	f104 030c 	add.w	r3, r4, #12
 800feca:	9005      	str	r0, [sp, #20]
 800fecc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fed0:	e88d 0003 	stmia.w	sp, {r0, r1}
 800fed4:	a805      	add	r0, sp, #20
 800fed6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800feda:	f005 ffe7 	bl	8015eac <rcl_init_options_init>
 800fede:	4605      	mov	r5, r0
 800fee0:	b9e0      	cbnz	r0, 800ff1c <rclc_support_init+0x6c>
 800fee2:	ad02      	add	r5, sp, #8
 800fee4:	4628      	mov	r0, r5
 800fee6:	f005 fe6b 	bl	8015bc0 <rcl_get_zero_initialized_context>
 800feea:	e895 0003 	ldmia.w	r5, {r0, r1}
 800feee:	4633      	mov	r3, r6
 800fef0:	e886 0003 	stmia.w	r6, {r0, r1}
 800fef4:	aa05      	add	r2, sp, #20
 800fef6:	4641      	mov	r1, r8
 800fef8:	4638      	mov	r0, r7
 800fefa:	f005 fed1 	bl	8015ca0 <rcl_init>
 800fefe:	4605      	mov	r5, r0
 800ff00:	b9b8      	cbnz	r0, 800ff32 <rclc_support_init+0x82>
 800ff02:	60b4      	str	r4, [r6, #8]
 800ff04:	4622      	mov	r2, r4
 800ff06:	f106 010c 	add.w	r1, r6, #12
 800ff0a:	2003      	movs	r0, #3
 800ff0c:	f006 fc4c 	bl	80167a8 <rcl_clock_init>
 800ff10:	4605      	mov	r5, r0
 800ff12:	b970      	cbnz	r0, 800ff32 <rclc_support_init+0x82>
 800ff14:	a805      	add	r0, sp, #20
 800ff16:	f006 f82f 	bl	8015f78 <rcl_init_options_fini>
 800ff1a:	b108      	cbz	r0, 800ff20 <rclc_support_init+0x70>
 800ff1c:	f000 f8e8 	bl	80100f0 <rcutils_reset_error>
 800ff20:	4628      	mov	r0, r5
 800ff22:	b006      	add	sp, #24
 800ff24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff28:	250b      	movs	r5, #11
 800ff2a:	4628      	mov	r0, r5
 800ff2c:	b006      	add	sp, #24
 800ff2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff32:	f000 f8dd 	bl	80100f0 <rcutils_reset_error>
 800ff36:	a805      	add	r0, sp, #20
 800ff38:	f006 f81e 	bl	8015f78 <rcl_init_options_fini>
 800ff3c:	2800      	cmp	r0, #0
 800ff3e:	d0ef      	beq.n	800ff20 <rclc_support_init+0x70>
 800ff40:	e7ec      	b.n	800ff1c <rclc_support_init+0x6c>
 800ff42:	bf00      	nop

0800ff44 <rclc_node_init_default>:
 800ff44:	b3b8      	cbz	r0, 800ffb6 <rclc_node_init_default+0x72>
 800ff46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff4a:	460d      	mov	r5, r1
 800ff4c:	b0a1      	sub	sp, #132	; 0x84
 800ff4e:	b329      	cbz	r1, 800ff9c <rclc_node_init_default+0x58>
 800ff50:	4616      	mov	r6, r2
 800ff52:	b31a      	cbz	r2, 800ff9c <rclc_node_init_default+0x58>
 800ff54:	461f      	mov	r7, r3
 800ff56:	b30b      	cbz	r3, 800ff9c <rclc_node_init_default+0x58>
 800ff58:	f10d 0810 	add.w	r8, sp, #16
 800ff5c:	4604      	mov	r4, r0
 800ff5e:	4640      	mov	r0, r8
 800ff60:	f006 f8c2 	bl	80160e8 <rcl_get_zero_initialized_node>
 800ff64:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ff68:	f10d 0918 	add.w	r9, sp, #24
 800ff6c:	e884 0003 	stmia.w	r4, {r0, r1}
 800ff70:	4648      	mov	r0, r9
 800ff72:	f006 fa31 	bl	80163d8 <rcl_node_get_default_options>
 800ff76:	4640      	mov	r0, r8
 800ff78:	f006 f8b6 	bl	80160e8 <rcl_get_zero_initialized_node>
 800ff7c:	f8cd 9000 	str.w	r9, [sp]
 800ff80:	e898 0003 	ldmia.w	r8, {r0, r1}
 800ff84:	463b      	mov	r3, r7
 800ff86:	e884 0003 	stmia.w	r4, {r0, r1}
 800ff8a:	4632      	mov	r2, r6
 800ff8c:	4629      	mov	r1, r5
 800ff8e:	4620      	mov	r0, r4
 800ff90:	f006 f8b4 	bl	80160fc <rcl_node_init>
 800ff94:	b930      	cbnz	r0, 800ffa4 <rclc_node_init_default+0x60>
 800ff96:	b021      	add	sp, #132	; 0x84
 800ff98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff9c:	200b      	movs	r0, #11
 800ff9e:	b021      	add	sp, #132	; 0x84
 800ffa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffa4:	9003      	str	r0, [sp, #12]
 800ffa6:	f000 f8a3 	bl	80100f0 <rcutils_reset_error>
 800ffaa:	f000 f8a1 	bl	80100f0 <rcutils_reset_error>
 800ffae:	9803      	ldr	r0, [sp, #12]
 800ffb0:	b021      	add	sp, #132	; 0x84
 800ffb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffb6:	200b      	movs	r0, #11
 800ffb8:	4770      	bx	lr
 800ffba:	bf00      	nop

0800ffbc <rclc_publisher_init_default>:
 800ffbc:	b368      	cbz	r0, 801001a <rclc_publisher_init_default+0x5e>
 800ffbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffc2:	460d      	mov	r5, r1
 800ffc4:	b0a0      	sub	sp, #128	; 0x80
 800ffc6:	b321      	cbz	r1, 8010012 <rclc_publisher_init_default+0x56>
 800ffc8:	4616      	mov	r6, r2
 800ffca:	b312      	cbz	r2, 8010012 <rclc_publisher_init_default+0x56>
 800ffcc:	461f      	mov	r7, r3
 800ffce:	b303      	cbz	r3, 8010012 <rclc_publisher_init_default+0x56>
 800ffd0:	4604      	mov	r4, r0
 800ffd2:	f7ff fe7f 	bl	800fcd4 <rcl_get_zero_initialized_publisher>
 800ffd6:	f10d 0810 	add.w	r8, sp, #16
 800ffda:	6020      	str	r0, [r4, #0]
 800ffdc:	4640      	mov	r0, r8
 800ffde:	f7ff ff15 	bl	800fe0c <rcl_publisher_get_default_options>
 800ffe2:	490f      	ldr	r1, [pc, #60]	; (8010020 <rclc_publisher_init_default+0x64>)
 800ffe4:	2250      	movs	r2, #80	; 0x50
 800ffe6:	4640      	mov	r0, r8
 800ffe8:	f00a fbde 	bl	801a7a8 <memcpy>
 800ffec:	f8cd 8000 	str.w	r8, [sp]
 800fff0:	463b      	mov	r3, r7
 800fff2:	4632      	mov	r2, r6
 800fff4:	4629      	mov	r1, r5
 800fff6:	4620      	mov	r0, r4
 800fff8:	f7ff fe72 	bl	800fce0 <rcl_publisher_init>
 800fffc:	b910      	cbnz	r0, 8010004 <rclc_publisher_init_default+0x48>
 800fffe:	b020      	add	sp, #128	; 0x80
 8010000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010004:	9003      	str	r0, [sp, #12]
 8010006:	f000 f873 	bl	80100f0 <rcutils_reset_error>
 801000a:	9803      	ldr	r0, [sp, #12]
 801000c:	b020      	add	sp, #128	; 0x80
 801000e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010012:	200b      	movs	r0, #11
 8010014:	b020      	add	sp, #128	; 0x80
 8010016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801001a:	200b      	movs	r0, #11
 801001c:	4770      	bx	lr
 801001e:	bf00      	nop
 8010020:	0801bf60 	.word	0x0801bf60

08010024 <__default_zero_allocate>:
 8010024:	f00a b9ba 	b.w	801a39c <calloc>

08010028 <__default_reallocate>:
 8010028:	f00a bd4e 	b.w	801aac8 <realloc>

0801002c <__default_deallocate>:
 801002c:	f00a bbb4 	b.w	801a798 <free>

08010030 <__default_allocate>:
 8010030:	f00a bbaa 	b.w	801a788 <malloc>

08010034 <rcutils_get_zero_initialized_allocator>:
 8010034:	b510      	push	{r4, lr}
 8010036:	4c05      	ldr	r4, [pc, #20]	; (801004c <rcutils_get_zero_initialized_allocator+0x18>)
 8010038:	4686      	mov	lr, r0
 801003a:	4684      	mov	ip, r0
 801003c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801003e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010042:	6823      	ldr	r3, [r4, #0]
 8010044:	f8cc 3000 	str.w	r3, [ip]
 8010048:	4670      	mov	r0, lr
 801004a:	bd10      	pop	{r4, pc}
 801004c:	0801bfb0 	.word	0x0801bfb0

08010050 <rcutils_set_default_allocator>:
 8010050:	b1a8      	cbz	r0, 801007e <rcutils_set_default_allocator+0x2e>
 8010052:	6802      	ldr	r2, [r0, #0]
 8010054:	b1a2      	cbz	r2, 8010080 <rcutils_set_default_allocator+0x30>
 8010056:	6841      	ldr	r1, [r0, #4]
 8010058:	b1a1      	cbz	r1, 8010084 <rcutils_set_default_allocator+0x34>
 801005a:	b410      	push	{r4}
 801005c:	68c4      	ldr	r4, [r0, #12]
 801005e:	b164      	cbz	r4, 801007a <rcutils_set_default_allocator+0x2a>
 8010060:	6880      	ldr	r0, [r0, #8]
 8010062:	b138      	cbz	r0, 8010074 <rcutils_set_default_allocator+0x24>
 8010064:	4b08      	ldr	r3, [pc, #32]	; (8010088 <rcutils_set_default_allocator+0x38>)
 8010066:	601a      	str	r2, [r3, #0]
 8010068:	2200      	movs	r2, #0
 801006a:	e9c3 4203 	strd	r4, r2, [r3, #12]
 801006e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8010072:	2001      	movs	r0, #1
 8010074:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010078:	4770      	bx	lr
 801007a:	4620      	mov	r0, r4
 801007c:	e7fa      	b.n	8010074 <rcutils_set_default_allocator+0x24>
 801007e:	4770      	bx	lr
 8010080:	4610      	mov	r0, r2
 8010082:	4770      	bx	lr
 8010084:	4608      	mov	r0, r1
 8010086:	4770      	bx	lr
 8010088:	20000104 	.word	0x20000104

0801008c <rcutils_get_default_allocator>:
 801008c:	b510      	push	{r4, lr}
 801008e:	4c05      	ldr	r4, [pc, #20]	; (80100a4 <rcutils_get_default_allocator+0x18>)
 8010090:	4686      	mov	lr, r0
 8010092:	4684      	mov	ip, r0
 8010094:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010096:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801009a:	6823      	ldr	r3, [r4, #0]
 801009c:	f8cc 3000 	str.w	r3, [ip]
 80100a0:	4670      	mov	r0, lr
 80100a2:	bd10      	pop	{r4, pc}
 80100a4:	20000104 	.word	0x20000104

080100a8 <rcutils_allocator_is_valid>:
 80100a8:	b158      	cbz	r0, 80100c2 <rcutils_allocator_is_valid+0x1a>
 80100aa:	6803      	ldr	r3, [r0, #0]
 80100ac:	b143      	cbz	r3, 80100c0 <rcutils_allocator_is_valid+0x18>
 80100ae:	6843      	ldr	r3, [r0, #4]
 80100b0:	b133      	cbz	r3, 80100c0 <rcutils_allocator_is_valid+0x18>
 80100b2:	68c3      	ldr	r3, [r0, #12]
 80100b4:	b123      	cbz	r3, 80100c0 <rcutils_allocator_is_valid+0x18>
 80100b6:	6880      	ldr	r0, [r0, #8]
 80100b8:	3800      	subs	r0, #0
 80100ba:	bf18      	it	ne
 80100bc:	2001      	movne	r0, #1
 80100be:	4770      	bx	lr
 80100c0:	4618      	mov	r0, r3
 80100c2:	4770      	bx	lr

080100c4 <rcutils_get_error_string>:
 80100c4:	4b06      	ldr	r3, [pc, #24]	; (80100e0 <rcutils_get_error_string+0x1c>)
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	b13b      	cbz	r3, 80100da <rcutils_get_error_string+0x16>
 80100ca:	4b06      	ldr	r3, [pc, #24]	; (80100e4 <rcutils_get_error_string+0x20>)
 80100cc:	781a      	ldrb	r2, [r3, #0]
 80100ce:	b90a      	cbnz	r2, 80100d4 <rcutils_get_error_string+0x10>
 80100d0:	2201      	movs	r2, #1
 80100d2:	701a      	strb	r2, [r3, #0]
 80100d4:	4b04      	ldr	r3, [pc, #16]	; (80100e8 <rcutils_get_error_string+0x24>)
 80100d6:	7818      	ldrb	r0, [r3, #0]
 80100d8:	4770      	bx	lr
 80100da:	4b04      	ldr	r3, [pc, #16]	; (80100ec <rcutils_get_error_string+0x28>)
 80100dc:	7818      	ldrb	r0, [r3, #0]
 80100de:	4770      	bx	lr
 80100e0:	20011260 	.word	0x20011260
 80100e4:	20011279 	.word	0x20011279
 80100e8:	20011278 	.word	0x20011278
 80100ec:	0801c1f0 	.word	0x0801c1f0

080100f0 <rcutils_reset_error>:
 80100f0:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8010110 <rcutils_reset_error+0x20>
 80100f4:	4a08      	ldr	r2, [pc, #32]	; (8010118 <rcutils_reset_error+0x28>)
 80100f6:	4809      	ldr	r0, [pc, #36]	; (801011c <rcutils_reset_error+0x2c>)
 80100f8:	4909      	ldr	r1, [pc, #36]	; (8010120 <rcutils_reset_error+0x30>)
 80100fa:	2300      	movs	r3, #0
 80100fc:	8013      	strh	r3, [r2, #0]
 80100fe:	ed82 7b02 	vstr	d7, [r2, #8]
 8010102:	4a08      	ldr	r2, [pc, #32]	; (8010124 <rcutils_reset_error+0x34>)
 8010104:	7003      	strb	r3, [r0, #0]
 8010106:	700b      	strb	r3, [r1, #0]
 8010108:	7013      	strb	r3, [r2, #0]
 801010a:	4770      	bx	lr
 801010c:	f3af 8000 	nop.w
	...
 8010118:	20011268 	.word	0x20011268
 801011c:	20011279 	.word	0x20011279
 8010120:	20011278 	.word	0x20011278
 8010124:	20011260 	.word	0x20011260

08010128 <rmw_get_default_publisher_options>:
 8010128:	2200      	movs	r2, #0
 801012a:	6002      	str	r2, [r0, #0]
 801012c:	7102      	strb	r2, [r0, #4]
 801012e:	4770      	bx	lr

08010130 <rmw_uros_set_custom_transport>:
 8010130:	b470      	push	{r4, r5, r6}
 8010132:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8010136:	b162      	cbz	r2, 8010152 <rmw_uros_set_custom_transport+0x22>
 8010138:	b15b      	cbz	r3, 8010152 <rmw_uros_set_custom_transport+0x22>
 801013a:	b155      	cbz	r5, 8010152 <rmw_uros_set_custom_transport+0x22>
 801013c:	b14e      	cbz	r6, 8010152 <rmw_uros_set_custom_transport+0x22>
 801013e:	4c06      	ldr	r4, [pc, #24]	; (8010158 <rmw_uros_set_custom_transport+0x28>)
 8010140:	7020      	strb	r0, [r4, #0]
 8010142:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8010146:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801014a:	6166      	str	r6, [r4, #20]
 801014c:	2000      	movs	r0, #0
 801014e:	bc70      	pop	{r4, r5, r6}
 8010150:	4770      	bx	lr
 8010152:	200b      	movs	r0, #11
 8010154:	bc70      	pop	{r4, r5, r6}
 8010156:	4770      	bx	lr
 8010158:	2001127c 	.word	0x2001127c

0801015c <flush_session>:
 801015c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 801015e:	f003 beb9 	b.w	8013ed4 <uxr_run_session_until_confirm_delivery>
 8010162:	bf00      	nop

08010164 <rmw_publish>:
 8010164:	2800      	cmp	r0, #0
 8010166:	d053      	beq.n	8010210 <rmw_publish+0xac>
 8010168:	b570      	push	{r4, r5, r6, lr}
 801016a:	460d      	mov	r5, r1
 801016c:	b08e      	sub	sp, #56	; 0x38
 801016e:	2900      	cmp	r1, #0
 8010170:	d04b      	beq.n	801020a <rmw_publish+0xa6>
 8010172:	4604      	mov	r4, r0
 8010174:	6800      	ldr	r0, [r0, #0]
 8010176:	f000 fc3b 	bl	80109f0 <is_uxrce_rmw_identifier_valid>
 801017a:	2800      	cmp	r0, #0
 801017c:	d045      	beq.n	801020a <rmw_publish+0xa6>
 801017e:	6866      	ldr	r6, [r4, #4]
 8010180:	2e00      	cmp	r6, #0
 8010182:	d042      	beq.n	801020a <rmw_publish+0xa6>
 8010184:	69b4      	ldr	r4, [r6, #24]
 8010186:	4628      	mov	r0, r5
 8010188:	6923      	ldr	r3, [r4, #16]
 801018a:	4798      	blx	r3
 801018c:	69f3      	ldr	r3, [r6, #28]
 801018e:	9005      	str	r0, [sp, #20]
 8010190:	b113      	cbz	r3, 8010198 <rmw_publish+0x34>
 8010192:	a805      	add	r0, sp, #20
 8010194:	4798      	blx	r3
 8010196:	9805      	ldr	r0, [sp, #20]
 8010198:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801019c:	691b      	ldr	r3, [r3, #16]
 801019e:	9000      	str	r0, [sp, #0]
 80101a0:	6972      	ldr	r2, [r6, #20]
 80101a2:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80101a4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80101a8:	ab06      	add	r3, sp, #24
 80101aa:	f004 fc7f 	bl	8014aac <uxr_prepare_output_stream>
 80101ae:	b1d8      	cbz	r0, 80101e8 <rmw_publish+0x84>
 80101b0:	68a3      	ldr	r3, [r4, #8]
 80101b2:	a906      	add	r1, sp, #24
 80101b4:	4628      	mov	r0, r5
 80101b6:	4798      	blx	r3
 80101b8:	6a33      	ldr	r3, [r6, #32]
 80101ba:	4604      	mov	r4, r0
 80101bc:	b10b      	cbz	r3, 80101c2 <rmw_publish+0x5e>
 80101be:	a806      	add	r0, sp, #24
 80101c0:	4798      	blx	r3
 80101c2:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 80101c6:	2b01      	cmp	r3, #1
 80101c8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80101cc:	d022      	beq.n	8010214 <rmw_publish+0xb0>
 80101ce:	6918      	ldr	r0, [r3, #16]
 80101d0:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 80101d2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80101d6:	f003 fe7d 	bl	8013ed4 <uxr_run_session_until_confirm_delivery>
 80101da:	4020      	ands	r0, r4
 80101dc:	b2c4      	uxtb	r4, r0
 80101de:	f084 0001 	eor.w	r0, r4, #1
 80101e2:	b2c0      	uxtb	r0, r0
 80101e4:	b00e      	add	sp, #56	; 0x38
 80101e6:	bd70      	pop	{r4, r5, r6, pc}
 80101e8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80101ec:	6918      	ldr	r0, [r3, #16]
 80101ee:	9b05      	ldr	r3, [sp, #20]
 80101f0:	9300      	str	r3, [sp, #0]
 80101f2:	4b0b      	ldr	r3, [pc, #44]	; (8010220 <rmw_publish+0xbc>)
 80101f4:	9301      	str	r3, [sp, #4]
 80101f6:	9602      	str	r6, [sp, #8]
 80101f8:	6972      	ldr	r2, [r6, #20]
 80101fa:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80101fc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010200:	ab06      	add	r3, sp, #24
 8010202:	f004 fc83 	bl	8014b0c <uxr_prepare_output_stream_fragmented>
 8010206:	2800      	cmp	r0, #0
 8010208:	d1d2      	bne.n	80101b0 <rmw_publish+0x4c>
 801020a:	2001      	movs	r0, #1
 801020c:	b00e      	add	sp, #56	; 0x38
 801020e:	bd70      	pop	{r4, r5, r6, pc}
 8010210:	2001      	movs	r0, #1
 8010212:	4770      	bx	lr
 8010214:	6918      	ldr	r0, [r3, #16]
 8010216:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801021a:	f003 fad5 	bl	80137c8 <uxr_flash_output_streams>
 801021e:	e7de      	b.n	80101de <rmw_publish+0x7a>
 8010220:	0801015d 	.word	0x0801015d

08010224 <rmw_create_publisher>:
 8010224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010228:	b087      	sub	sp, #28
 801022a:	2800      	cmp	r0, #0
 801022c:	f000 80cf 	beq.w	80103ce <rmw_create_publisher+0x1aa>
 8010230:	460e      	mov	r6, r1
 8010232:	2900      	cmp	r1, #0
 8010234:	f000 80cb 	beq.w	80103ce <rmw_create_publisher+0x1aa>
 8010238:	4604      	mov	r4, r0
 801023a:	6800      	ldr	r0, [r0, #0]
 801023c:	4615      	mov	r5, r2
 801023e:	4698      	mov	r8, r3
 8010240:	f000 fbd6 	bl	80109f0 <is_uxrce_rmw_identifier_valid>
 8010244:	2800      	cmp	r0, #0
 8010246:	f000 80c2 	beq.w	80103ce <rmw_create_publisher+0x1aa>
 801024a:	2d00      	cmp	r5, #0
 801024c:	f000 80bf 	beq.w	80103ce <rmw_create_publisher+0x1aa>
 8010250:	782b      	ldrb	r3, [r5, #0]
 8010252:	2b00      	cmp	r3, #0
 8010254:	f000 80bb 	beq.w	80103ce <rmw_create_publisher+0x1aa>
 8010258:	f1b8 0f00 	cmp.w	r8, #0
 801025c:	f000 80b7 	beq.w	80103ce <rmw_create_publisher+0x1aa>
 8010260:	485d      	ldr	r0, [pc, #372]	; (80103d8 <rmw_create_publisher+0x1b4>)
 8010262:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8010266:	f007 f817 	bl	8017298 <get_memory>
 801026a:	2800      	cmp	r0, #0
 801026c:	f000 80af 	beq.w	80103ce <rmw_create_publisher+0x1aa>
 8010270:	6884      	ldr	r4, [r0, #8]
 8010272:	2300      	movs	r3, #0
 8010274:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8010278:	f007 f832 	bl	80172e0 <rmw_get_implementation_identifier>
 801027c:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8010280:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8010284:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8010288:	4628      	mov	r0, r5
 801028a:	f7ef ffab 	bl	80001e4 <strlen>
 801028e:	3001      	adds	r0, #1
 8010290:	283c      	cmp	r0, #60	; 0x3c
 8010292:	f104 0784 	add.w	r7, r4, #132	; 0x84
 8010296:	f200 8097 	bhi.w	80103c8 <rmw_create_publisher+0x1a4>
 801029a:	4a50      	ldr	r2, [pc, #320]	; (80103dc <rmw_create_publisher+0x1b8>)
 801029c:	462b      	mov	r3, r5
 801029e:	213c      	movs	r1, #60	; 0x3c
 80102a0:	4650      	mov	r0, sl
 80102a2:	f00a fc93 	bl	801abcc <sniprintf>
 80102a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80102aa:	67e3      	str	r3, [r4, #124]	; 0x7c
 80102ac:	4641      	mov	r1, r8
 80102ae:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 80102b2:	2250      	movs	r2, #80	; 0x50
 80102b4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80102b8:	f00a fa76 	bl	801a7a8 <memcpy>
 80102bc:	f898 3008 	ldrb.w	r3, [r8, #8]
 80102c0:	4947      	ldr	r1, [pc, #284]	; (80103e0 <rmw_create_publisher+0x1bc>)
 80102c2:	2b02      	cmp	r3, #2
 80102c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80102c8:	bf0c      	ite	eq
 80102ca:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 80102ce:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 80102d2:	67a3      	str	r3, [r4, #120]	; 0x78
 80102d4:	2300      	movs	r3, #0
 80102d6:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80102da:	4630      	mov	r0, r6
 80102dc:	f000 fb96 	bl	8010a0c <get_message_typesupport_handle>
 80102e0:	2800      	cmp	r0, #0
 80102e2:	d071      	beq.n	80103c8 <rmw_create_publisher+0x1a4>
 80102e4:	6842      	ldr	r2, [r0, #4]
 80102e6:	61a2      	str	r2, [r4, #24]
 80102e8:	2a00      	cmp	r2, #0
 80102ea:	d06d      	beq.n	80103c8 <rmw_create_publisher+0x1a4>
 80102ec:	4629      	mov	r1, r5
 80102ee:	4643      	mov	r3, r8
 80102f0:	4648      	mov	r0, r9
 80102f2:	f007 fa5b 	bl	80177ac <create_topic>
 80102f6:	6260      	str	r0, [r4, #36]	; 0x24
 80102f8:	2800      	cmp	r0, #0
 80102fa:	d065      	beq.n	80103c8 <rmw_create_publisher+0x1a4>
 80102fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010304:	2103      	movs	r1, #3
 8010306:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 801030a:	1c42      	adds	r2, r0, #1
 801030c:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 8010310:	f003 f90c 	bl	801352c <uxr_object_id>
 8010314:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8010318:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801031c:	6120      	str	r0, [r4, #16]
 801031e:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 8010322:	6910      	ldr	r0, [r2, #16]
 8010324:	2506      	movs	r5, #6
 8010326:	9500      	str	r5, [sp, #0]
 8010328:	6819      	ldr	r1, [r3, #0]
 801032a:	6922      	ldr	r2, [r4, #16]
 801032c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8010330:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010334:	f003 f854 	bl	80133e0 <uxr_buffer_create_publisher_bin>
 8010338:	4602      	mov	r2, r0
 801033a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801033e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8010342:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8010346:	f000 fad3 	bl	80108f0 <run_xrce_session>
 801034a:	b3c8      	cbz	r0, 80103c0 <rmw_create_publisher+0x19c>
 801034c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010350:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8010354:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010358:	2105      	movs	r1, #5
 801035a:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 801035e:	1c42      	adds	r2, r0, #1
 8010360:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8010364:	f003 f8e2 	bl	801352c <uxr_object_id>
 8010368:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801036c:	6160      	str	r0, [r4, #20]
 801036e:	691e      	ldr	r6, [r3, #16]
 8010370:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010374:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8010378:	f10d 0a10 	add.w	sl, sp, #16
 801037c:	4641      	mov	r1, r8
 801037e:	4650      	mov	r0, sl
 8010380:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 8010384:	f000 fad0 	bl	8010928 <convert_qos_profile>
 8010388:	9503      	str	r5, [sp, #12]
 801038a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801038e:	9001      	str	r0, [sp, #4]
 8010390:	f8ad 1008 	strh.w	r1, [sp, #8]
 8010394:	f8db 3010 	ldr.w	r3, [fp, #16]
 8010398:	9300      	str	r3, [sp, #0]
 801039a:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 801039e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80103a2:	f8d8 1000 	ldr.w	r1, [r8]
 80103a6:	4630      	mov	r0, r6
 80103a8:	f003 f84a 	bl	8013440 <uxr_buffer_create_datawriter_bin>
 80103ac:	4602      	mov	r2, r0
 80103ae:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80103b2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80103b6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80103ba:	f000 fa99 	bl	80108f0 <run_xrce_session>
 80103be:	b938      	cbnz	r0, 80103d0 <rmw_create_publisher+0x1ac>
 80103c0:	4805      	ldr	r0, [pc, #20]	; (80103d8 <rmw_create_publisher+0x1b4>)
 80103c2:	4621      	mov	r1, r4
 80103c4:	f006 ff78 	bl	80172b8 <put_memory>
 80103c8:	4638      	mov	r0, r7
 80103ca:	f000 f9dd 	bl	8010788 <rmw_uxrce_fini_publisher_memory>
 80103ce:	2700      	movs	r7, #0
 80103d0:	4638      	mov	r0, r7
 80103d2:	b007      	add	sp, #28
 80103d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103d8:	20015b74 	.word	0x20015b74
 80103dc:	0801bff8 	.word	0x0801bff8
 80103e0:	0801bfc4 	.word	0x0801bfc4

080103e4 <rmw_publisher_get_actual_qos>:
 80103e4:	2000      	movs	r0, #0
 80103e6:	4770      	bx	lr

080103e8 <rmw_destroy_publisher>:
 80103e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ea:	b128      	cbz	r0, 80103f8 <rmw_destroy_publisher+0x10>
 80103ec:	4604      	mov	r4, r0
 80103ee:	6800      	ldr	r0, [r0, #0]
 80103f0:	460d      	mov	r5, r1
 80103f2:	f000 fafd 	bl	80109f0 <is_uxrce_rmw_identifier_valid>
 80103f6:	b910      	cbnz	r0, 80103fe <rmw_destroy_publisher+0x16>
 80103f8:	2401      	movs	r4, #1
 80103fa:	4620      	mov	r0, r4
 80103fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103fe:	6863      	ldr	r3, [r4, #4]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d0f9      	beq.n	80103f8 <rmw_destroy_publisher+0x10>
 8010404:	2d00      	cmp	r5, #0
 8010406:	d0f7      	beq.n	80103f8 <rmw_destroy_publisher+0x10>
 8010408:	6828      	ldr	r0, [r5, #0]
 801040a:	f000 faf1 	bl	80109f0 <is_uxrce_rmw_identifier_valid>
 801040e:	2800      	cmp	r0, #0
 8010410:	d0f2      	beq.n	80103f8 <rmw_destroy_publisher+0x10>
 8010412:	686c      	ldr	r4, [r5, #4]
 8010414:	2c00      	cmp	r4, #0
 8010416:	d0ef      	beq.n	80103f8 <rmw_destroy_publisher+0x10>
 8010418:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801041a:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 801041e:	f007 fa29 	bl	8017874 <destroy_topic>
 8010422:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010426:	6962      	ldr	r2, [r4, #20]
 8010428:	6918      	ldr	r0, [r3, #16]
 801042a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801042e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010432:	6819      	ldr	r1, [r3, #0]
 8010434:	f002 ff20 	bl	8013278 <uxr_buffer_delete_entity>
 8010438:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801043c:	6922      	ldr	r2, [r4, #16]
 801043e:	691b      	ldr	r3, [r3, #16]
 8010440:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8010444:	4604      	mov	r4, r0
 8010446:	6809      	ldr	r1, [r1, #0]
 8010448:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801044c:	f002 ff14 	bl	8013278 <uxr_buffer_delete_entity>
 8010450:	693e      	ldr	r6, [r7, #16]
 8010452:	4622      	mov	r2, r4
 8010454:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8010458:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 801045c:	4604      	mov	r4, r0
 801045e:	4630      	mov	r0, r6
 8010460:	f000 fa46 	bl	80108f0 <run_xrce_session>
 8010464:	693e      	ldr	r6, [r7, #16]
 8010466:	4622      	mov	r2, r4
 8010468:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 801046c:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8010470:	4604      	mov	r4, r0
 8010472:	4630      	mov	r0, r6
 8010474:	f000 fa3c 	bl	80108f0 <run_xrce_session>
 8010478:	b12c      	cbz	r4, 8010486 <rmw_destroy_publisher+0x9e>
 801047a:	b120      	cbz	r0, 8010486 <rmw_destroy_publisher+0x9e>
 801047c:	2400      	movs	r4, #0
 801047e:	4628      	mov	r0, r5
 8010480:	f000 f982 	bl	8010788 <rmw_uxrce_fini_publisher_memory>
 8010484:	e7b9      	b.n	80103fa <rmw_destroy_publisher+0x12>
 8010486:	2402      	movs	r4, #2
 8010488:	e7f9      	b.n	801047e <rmw_destroy_publisher+0x96>
 801048a:	bf00      	nop

0801048c <rmw_uxrce_init_service_memory>:
 801048c:	b1e2      	cbz	r2, 80104c8 <rmw_uxrce_init_service_memory+0x3c>
 801048e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010492:	7b05      	ldrb	r5, [r0, #12]
 8010494:	4606      	mov	r6, r0
 8010496:	b9ad      	cbnz	r5, 80104c4 <rmw_uxrce_init_service_memory+0x38>
 8010498:	23c8      	movs	r3, #200	; 0xc8
 801049a:	e9c0 5500 	strd	r5, r5, [r0]
 801049e:	6083      	str	r3, [r0, #8]
 80104a0:	f240 1301 	movw	r3, #257	; 0x101
 80104a4:	4617      	mov	r7, r2
 80104a6:	8183      	strh	r3, [r0, #12]
 80104a8:	460c      	mov	r4, r1
 80104aa:	46a8      	mov	r8, r5
 80104ac:	4621      	mov	r1, r4
 80104ae:	4630      	mov	r0, r6
 80104b0:	3501      	adds	r5, #1
 80104b2:	f006 ff01 	bl	80172b8 <put_memory>
 80104b6:	42af      	cmp	r7, r5
 80104b8:	60a4      	str	r4, [r4, #8]
 80104ba:	f884 800c 	strb.w	r8, [r4, #12]
 80104be:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 80104c2:	d1f3      	bne.n	80104ac <rmw_uxrce_init_service_memory+0x20>
 80104c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104c8:	4770      	bx	lr
 80104ca:	bf00      	nop

080104cc <rmw_uxrce_init_client_memory>:
 80104cc:	b1e2      	cbz	r2, 8010508 <rmw_uxrce_init_client_memory+0x3c>
 80104ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104d2:	7b05      	ldrb	r5, [r0, #12]
 80104d4:	4606      	mov	r6, r0
 80104d6:	b9ad      	cbnz	r5, 8010504 <rmw_uxrce_init_client_memory+0x38>
 80104d8:	23c8      	movs	r3, #200	; 0xc8
 80104da:	e9c0 5500 	strd	r5, r5, [r0]
 80104de:	6083      	str	r3, [r0, #8]
 80104e0:	f240 1301 	movw	r3, #257	; 0x101
 80104e4:	4617      	mov	r7, r2
 80104e6:	8183      	strh	r3, [r0, #12]
 80104e8:	460c      	mov	r4, r1
 80104ea:	46a8      	mov	r8, r5
 80104ec:	4621      	mov	r1, r4
 80104ee:	4630      	mov	r0, r6
 80104f0:	3501      	adds	r5, #1
 80104f2:	f006 fee1 	bl	80172b8 <put_memory>
 80104f6:	42af      	cmp	r7, r5
 80104f8:	60a4      	str	r4, [r4, #8]
 80104fa:	f884 800c 	strb.w	r8, [r4, #12]
 80104fe:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8010502:	d1f3      	bne.n	80104ec <rmw_uxrce_init_client_memory+0x20>
 8010504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010508:	4770      	bx	lr
 801050a:	bf00      	nop

0801050c <rmw_uxrce_init_publisher_memory>:
 801050c:	b1e2      	cbz	r2, 8010548 <rmw_uxrce_init_publisher_memory+0x3c>
 801050e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010512:	7b05      	ldrb	r5, [r0, #12]
 8010514:	4606      	mov	r6, r0
 8010516:	b9ad      	cbnz	r5, 8010544 <rmw_uxrce_init_publisher_memory+0x38>
 8010518:	23d8      	movs	r3, #216	; 0xd8
 801051a:	e9c0 5500 	strd	r5, r5, [r0]
 801051e:	6083      	str	r3, [r0, #8]
 8010520:	f240 1301 	movw	r3, #257	; 0x101
 8010524:	4617      	mov	r7, r2
 8010526:	8183      	strh	r3, [r0, #12]
 8010528:	460c      	mov	r4, r1
 801052a:	46a8      	mov	r8, r5
 801052c:	4621      	mov	r1, r4
 801052e:	4630      	mov	r0, r6
 8010530:	3501      	adds	r5, #1
 8010532:	f006 fec1 	bl	80172b8 <put_memory>
 8010536:	42af      	cmp	r7, r5
 8010538:	60a4      	str	r4, [r4, #8]
 801053a:	f884 800c 	strb.w	r8, [r4, #12]
 801053e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8010542:	d1f3      	bne.n	801052c <rmw_uxrce_init_publisher_memory+0x20>
 8010544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010548:	4770      	bx	lr
 801054a:	bf00      	nop

0801054c <rmw_uxrce_init_subscription_memory>:
 801054c:	b1e2      	cbz	r2, 8010588 <rmw_uxrce_init_subscription_memory+0x3c>
 801054e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010552:	7b05      	ldrb	r5, [r0, #12]
 8010554:	4606      	mov	r6, r0
 8010556:	b9ad      	cbnz	r5, 8010584 <rmw_uxrce_init_subscription_memory+0x38>
 8010558:	23d8      	movs	r3, #216	; 0xd8
 801055a:	e9c0 5500 	strd	r5, r5, [r0]
 801055e:	6083      	str	r3, [r0, #8]
 8010560:	f240 1301 	movw	r3, #257	; 0x101
 8010564:	4617      	mov	r7, r2
 8010566:	8183      	strh	r3, [r0, #12]
 8010568:	460c      	mov	r4, r1
 801056a:	46a8      	mov	r8, r5
 801056c:	4621      	mov	r1, r4
 801056e:	4630      	mov	r0, r6
 8010570:	3501      	adds	r5, #1
 8010572:	f006 fea1 	bl	80172b8 <put_memory>
 8010576:	42af      	cmp	r7, r5
 8010578:	60a4      	str	r4, [r4, #8]
 801057a:	f884 800c 	strb.w	r8, [r4, #12]
 801057e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8010582:	d1f3      	bne.n	801056c <rmw_uxrce_init_subscription_memory+0x20>
 8010584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010588:	4770      	bx	lr
 801058a:	bf00      	nop

0801058c <rmw_uxrce_init_node_memory>:
 801058c:	b1e2      	cbz	r2, 80105c8 <rmw_uxrce_init_node_memory+0x3c>
 801058e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010592:	7b05      	ldrb	r5, [r0, #12]
 8010594:	4606      	mov	r6, r0
 8010596:	b9ad      	cbnz	r5, 80105c4 <rmw_uxrce_init_node_memory+0x38>
 8010598:	23a4      	movs	r3, #164	; 0xa4
 801059a:	e9c0 5500 	strd	r5, r5, [r0]
 801059e:	6083      	str	r3, [r0, #8]
 80105a0:	f240 1301 	movw	r3, #257	; 0x101
 80105a4:	4617      	mov	r7, r2
 80105a6:	8183      	strh	r3, [r0, #12]
 80105a8:	460c      	mov	r4, r1
 80105aa:	46a8      	mov	r8, r5
 80105ac:	4621      	mov	r1, r4
 80105ae:	4630      	mov	r0, r6
 80105b0:	3501      	adds	r5, #1
 80105b2:	f006 fe81 	bl	80172b8 <put_memory>
 80105b6:	42af      	cmp	r7, r5
 80105b8:	60a4      	str	r4, [r4, #8]
 80105ba:	f884 800c 	strb.w	r8, [r4, #12]
 80105be:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 80105c2:	d1f3      	bne.n	80105ac <rmw_uxrce_init_node_memory+0x20>
 80105c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105c8:	4770      	bx	lr
 80105ca:	bf00      	nop

080105cc <rmw_uxrce_init_session_memory>:
 80105cc:	b1ea      	cbz	r2, 801060a <rmw_uxrce_init_session_memory+0x3e>
 80105ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105d2:	7b05      	ldrb	r5, [r0, #12]
 80105d4:	4606      	mov	r6, r0
 80105d6:	b9b5      	cbnz	r5, 8010606 <rmw_uxrce_init_session_memory+0x3a>
 80105d8:	e9c0 5500 	strd	r5, r5, [r0]
 80105dc:	f241 58a8 	movw	r8, #5544	; 0x15a8
 80105e0:	f240 1301 	movw	r3, #257	; 0x101
 80105e4:	4617      	mov	r7, r2
 80105e6:	f8c0 8008 	str.w	r8, [r0, #8]
 80105ea:	460c      	mov	r4, r1
 80105ec:	8183      	strh	r3, [r0, #12]
 80105ee:	46a9      	mov	r9, r5
 80105f0:	4621      	mov	r1, r4
 80105f2:	4630      	mov	r0, r6
 80105f4:	3501      	adds	r5, #1
 80105f6:	f006 fe5f 	bl	80172b8 <put_memory>
 80105fa:	42af      	cmp	r7, r5
 80105fc:	60a4      	str	r4, [r4, #8]
 80105fe:	f884 900c 	strb.w	r9, [r4, #12]
 8010602:	4444      	add	r4, r8
 8010604:	d1f4      	bne.n	80105f0 <rmw_uxrce_init_session_memory+0x24>
 8010606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801060a:	4770      	bx	lr

0801060c <rmw_uxrce_init_topic_memory>:
 801060c:	b1e2      	cbz	r2, 8010648 <rmw_uxrce_init_topic_memory+0x3c>
 801060e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010612:	7b05      	ldrb	r5, [r0, #12]
 8010614:	4606      	mov	r6, r0
 8010616:	b9ad      	cbnz	r5, 8010644 <rmw_uxrce_init_topic_memory+0x38>
 8010618:	231c      	movs	r3, #28
 801061a:	e9c0 5500 	strd	r5, r5, [r0]
 801061e:	6083      	str	r3, [r0, #8]
 8010620:	f240 1301 	movw	r3, #257	; 0x101
 8010624:	4617      	mov	r7, r2
 8010626:	8183      	strh	r3, [r0, #12]
 8010628:	460c      	mov	r4, r1
 801062a:	46a8      	mov	r8, r5
 801062c:	4621      	mov	r1, r4
 801062e:	4630      	mov	r0, r6
 8010630:	3501      	adds	r5, #1
 8010632:	f006 fe41 	bl	80172b8 <put_memory>
 8010636:	42af      	cmp	r7, r5
 8010638:	60a4      	str	r4, [r4, #8]
 801063a:	f884 800c 	strb.w	r8, [r4, #12]
 801063e:	f104 041c 	add.w	r4, r4, #28
 8010642:	d1f3      	bne.n	801062c <rmw_uxrce_init_topic_memory+0x20>
 8010644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010648:	4770      	bx	lr
 801064a:	bf00      	nop

0801064c <rmw_uxrce_init_static_input_buffer_memory>:
 801064c:	b1ea      	cbz	r2, 801068a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 801064e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010652:	7b05      	ldrb	r5, [r0, #12]
 8010654:	4606      	mov	r6, r0
 8010656:	b9b5      	cbnz	r5, 8010686 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8010658:	f44f 6304 	mov.w	r3, #2112	; 0x840
 801065c:	e9c0 5500 	strd	r5, r5, [r0]
 8010660:	6083      	str	r3, [r0, #8]
 8010662:	f240 1301 	movw	r3, #257	; 0x101
 8010666:	4617      	mov	r7, r2
 8010668:	8183      	strh	r3, [r0, #12]
 801066a:	460c      	mov	r4, r1
 801066c:	46a8      	mov	r8, r5
 801066e:	4621      	mov	r1, r4
 8010670:	4630      	mov	r0, r6
 8010672:	3501      	adds	r5, #1
 8010674:	f006 fe20 	bl	80172b8 <put_memory>
 8010678:	42af      	cmp	r7, r5
 801067a:	60a4      	str	r4, [r4, #8]
 801067c:	f884 800c 	strb.w	r8, [r4, #12]
 8010680:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8010684:	d1f3      	bne.n	801066e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8010686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801068a:	4770      	bx	lr

0801068c <rmw_uxrce_init_init_options_impl_memory>:
 801068c:	b1e2      	cbz	r2, 80106c8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801068e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010692:	7b05      	ldrb	r5, [r0, #12]
 8010694:	4606      	mov	r6, r0
 8010696:	b9ad      	cbnz	r5, 80106c4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8010698:	232c      	movs	r3, #44	; 0x2c
 801069a:	e9c0 5500 	strd	r5, r5, [r0]
 801069e:	6083      	str	r3, [r0, #8]
 80106a0:	f240 1301 	movw	r3, #257	; 0x101
 80106a4:	4617      	mov	r7, r2
 80106a6:	8183      	strh	r3, [r0, #12]
 80106a8:	460c      	mov	r4, r1
 80106aa:	46a8      	mov	r8, r5
 80106ac:	4621      	mov	r1, r4
 80106ae:	4630      	mov	r0, r6
 80106b0:	3501      	adds	r5, #1
 80106b2:	f006 fe01 	bl	80172b8 <put_memory>
 80106b6:	42af      	cmp	r7, r5
 80106b8:	60a4      	str	r4, [r4, #8]
 80106ba:	f884 800c 	strb.w	r8, [r4, #12]
 80106be:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 80106c2:	d1f3      	bne.n	80106ac <rmw_uxrce_init_init_options_impl_memory+0x20>
 80106c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106c8:	4770      	bx	lr
 80106ca:	bf00      	nop

080106cc <rmw_uxrce_init_wait_set_memory>:
 80106cc:	b1e2      	cbz	r2, 8010708 <rmw_uxrce_init_wait_set_memory+0x3c>
 80106ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106d2:	7b05      	ldrb	r5, [r0, #12]
 80106d4:	4606      	mov	r6, r0
 80106d6:	b9ad      	cbnz	r5, 8010704 <rmw_uxrce_init_wait_set_memory+0x38>
 80106d8:	231c      	movs	r3, #28
 80106da:	e9c0 5500 	strd	r5, r5, [r0]
 80106de:	6083      	str	r3, [r0, #8]
 80106e0:	f240 1301 	movw	r3, #257	; 0x101
 80106e4:	4617      	mov	r7, r2
 80106e6:	8183      	strh	r3, [r0, #12]
 80106e8:	460c      	mov	r4, r1
 80106ea:	46a8      	mov	r8, r5
 80106ec:	4621      	mov	r1, r4
 80106ee:	4630      	mov	r0, r6
 80106f0:	3501      	adds	r5, #1
 80106f2:	f006 fde1 	bl	80172b8 <put_memory>
 80106f6:	42af      	cmp	r7, r5
 80106f8:	60a4      	str	r4, [r4, #8]
 80106fa:	f884 800c 	strb.w	r8, [r4, #12]
 80106fe:	f104 041c 	add.w	r4, r4, #28
 8010702:	d1f3      	bne.n	80106ec <rmw_uxrce_init_wait_set_memory+0x20>
 8010704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010708:	4770      	bx	lr
 801070a:	bf00      	nop

0801070c <rmw_uxrce_init_guard_condition_memory>:
 801070c:	b1e2      	cbz	r2, 8010748 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801070e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010712:	7b05      	ldrb	r5, [r0, #12]
 8010714:	4606      	mov	r6, r0
 8010716:	b9ad      	cbnz	r5, 8010744 <rmw_uxrce_init_guard_condition_memory+0x38>
 8010718:	2320      	movs	r3, #32
 801071a:	e9c0 5500 	strd	r5, r5, [r0]
 801071e:	6083      	str	r3, [r0, #8]
 8010720:	f240 1301 	movw	r3, #257	; 0x101
 8010724:	4617      	mov	r7, r2
 8010726:	8183      	strh	r3, [r0, #12]
 8010728:	460c      	mov	r4, r1
 801072a:	46a8      	mov	r8, r5
 801072c:	4621      	mov	r1, r4
 801072e:	4630      	mov	r0, r6
 8010730:	3501      	adds	r5, #1
 8010732:	f006 fdc1 	bl	80172b8 <put_memory>
 8010736:	42af      	cmp	r7, r5
 8010738:	60a4      	str	r4, [r4, #8]
 801073a:	f884 800c 	strb.w	r8, [r4, #12]
 801073e:	f104 0420 	add.w	r4, r4, #32
 8010742:	d1f3      	bne.n	801072c <rmw_uxrce_init_guard_condition_memory+0x20>
 8010744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010748:	4770      	bx	lr
 801074a:	bf00      	nop

0801074c <rmw_uxrce_fini_session_memory>:
 801074c:	4601      	mov	r1, r0
 801074e:	4801      	ldr	r0, [pc, #4]	; (8010754 <rmw_uxrce_fini_session_memory+0x8>)
 8010750:	f006 bdb2 	b.w	80172b8 <put_memory>
 8010754:	20015b94 	.word	0x20015b94

08010758 <rmw_uxrce_fini_node_memory>:
 8010758:	b538      	push	{r3, r4, r5, lr}
 801075a:	4604      	mov	r4, r0
 801075c:	6800      	ldr	r0, [r0, #0]
 801075e:	b128      	cbz	r0, 801076c <rmw_uxrce_fini_node_memory+0x14>
 8010760:	4b07      	ldr	r3, [pc, #28]	; (8010780 <rmw_uxrce_fini_node_memory+0x28>)
 8010762:	6819      	ldr	r1, [r3, #0]
 8010764:	f7ef fd34 	bl	80001d0 <strcmp>
 8010768:	b940      	cbnz	r0, 801077c <rmw_uxrce_fini_node_memory+0x24>
 801076a:	6020      	str	r0, [r4, #0]
 801076c:	6861      	ldr	r1, [r4, #4]
 801076e:	b129      	cbz	r1, 801077c <rmw_uxrce_fini_node_memory+0x24>
 8010770:	2500      	movs	r5, #0
 8010772:	4804      	ldr	r0, [pc, #16]	; (8010784 <rmw_uxrce_fini_node_memory+0x2c>)
 8010774:	610d      	str	r5, [r1, #16]
 8010776:	f006 fd9f 	bl	80172b8 <put_memory>
 801077a:	6065      	str	r5, [r4, #4]
 801077c:	bd38      	pop	{r3, r4, r5, pc}
 801077e:	bf00      	nop
 8010780:	0801cbbc 	.word	0x0801cbbc
 8010784:	20015b64 	.word	0x20015b64

08010788 <rmw_uxrce_fini_publisher_memory>:
 8010788:	b510      	push	{r4, lr}
 801078a:	4604      	mov	r4, r0
 801078c:	6800      	ldr	r0, [r0, #0]
 801078e:	b128      	cbz	r0, 801079c <rmw_uxrce_fini_publisher_memory+0x14>
 8010790:	4b06      	ldr	r3, [pc, #24]	; (80107ac <rmw_uxrce_fini_publisher_memory+0x24>)
 8010792:	6819      	ldr	r1, [r3, #0]
 8010794:	f7ef fd1c 	bl	80001d0 <strcmp>
 8010798:	b938      	cbnz	r0, 80107aa <rmw_uxrce_fini_publisher_memory+0x22>
 801079a:	6020      	str	r0, [r4, #0]
 801079c:	6861      	ldr	r1, [r4, #4]
 801079e:	b121      	cbz	r1, 80107aa <rmw_uxrce_fini_publisher_memory+0x22>
 80107a0:	4803      	ldr	r0, [pc, #12]	; (80107b0 <rmw_uxrce_fini_publisher_memory+0x28>)
 80107a2:	f006 fd89 	bl	80172b8 <put_memory>
 80107a6:	2300      	movs	r3, #0
 80107a8:	6063      	str	r3, [r4, #4]
 80107aa:	bd10      	pop	{r4, pc}
 80107ac:	0801cbbc 	.word	0x0801cbbc
 80107b0:	20015b74 	.word	0x20015b74

080107b4 <rmw_uxrce_fini_subscription_memory>:
 80107b4:	b510      	push	{r4, lr}
 80107b6:	4604      	mov	r4, r0
 80107b8:	6800      	ldr	r0, [r0, #0]
 80107ba:	b128      	cbz	r0, 80107c8 <rmw_uxrce_fini_subscription_memory+0x14>
 80107bc:	4b06      	ldr	r3, [pc, #24]	; (80107d8 <rmw_uxrce_fini_subscription_memory+0x24>)
 80107be:	6819      	ldr	r1, [r3, #0]
 80107c0:	f7ef fd06 	bl	80001d0 <strcmp>
 80107c4:	b938      	cbnz	r0, 80107d6 <rmw_uxrce_fini_subscription_memory+0x22>
 80107c6:	6020      	str	r0, [r4, #0]
 80107c8:	6861      	ldr	r1, [r4, #4]
 80107ca:	b121      	cbz	r1, 80107d6 <rmw_uxrce_fini_subscription_memory+0x22>
 80107cc:	4803      	ldr	r0, [pc, #12]	; (80107dc <rmw_uxrce_fini_subscription_memory+0x28>)
 80107ce:	f006 fd73 	bl	80172b8 <put_memory>
 80107d2:	2300      	movs	r3, #0
 80107d4:	6063      	str	r3, [r4, #4]
 80107d6:	bd10      	pop	{r4, pc}
 80107d8:	0801cbbc 	.word	0x0801cbbc
 80107dc:	20015bb4 	.word	0x20015bb4

080107e0 <rmw_uxrce_fini_service_memory>:
 80107e0:	b510      	push	{r4, lr}
 80107e2:	4604      	mov	r4, r0
 80107e4:	6800      	ldr	r0, [r0, #0]
 80107e6:	b128      	cbz	r0, 80107f4 <rmw_uxrce_fini_service_memory+0x14>
 80107e8:	4b06      	ldr	r3, [pc, #24]	; (8010804 <rmw_uxrce_fini_service_memory+0x24>)
 80107ea:	6819      	ldr	r1, [r3, #0]
 80107ec:	f7ef fcf0 	bl	80001d0 <strcmp>
 80107f0:	b938      	cbnz	r0, 8010802 <rmw_uxrce_fini_service_memory+0x22>
 80107f2:	6020      	str	r0, [r4, #0]
 80107f4:	6861      	ldr	r1, [r4, #4]
 80107f6:	b121      	cbz	r1, 8010802 <rmw_uxrce_fini_service_memory+0x22>
 80107f8:	4803      	ldr	r0, [pc, #12]	; (8010808 <rmw_uxrce_fini_service_memory+0x28>)
 80107fa:	f006 fd5d 	bl	80172b8 <put_memory>
 80107fe:	2300      	movs	r3, #0
 8010800:	6063      	str	r3, [r4, #4]
 8010802:	bd10      	pop	{r4, pc}
 8010804:	0801cbbc 	.word	0x0801cbbc
 8010808:	20015b84 	.word	0x20015b84

0801080c <rmw_uxrce_fini_client_memory>:
 801080c:	b510      	push	{r4, lr}
 801080e:	4604      	mov	r4, r0
 8010810:	6800      	ldr	r0, [r0, #0]
 8010812:	b128      	cbz	r0, 8010820 <rmw_uxrce_fini_client_memory+0x14>
 8010814:	4b06      	ldr	r3, [pc, #24]	; (8010830 <rmw_uxrce_fini_client_memory+0x24>)
 8010816:	6819      	ldr	r1, [r3, #0]
 8010818:	f7ef fcda 	bl	80001d0 <strcmp>
 801081c:	b938      	cbnz	r0, 801082e <rmw_uxrce_fini_client_memory+0x22>
 801081e:	6020      	str	r0, [r4, #0]
 8010820:	6861      	ldr	r1, [r4, #4]
 8010822:	b121      	cbz	r1, 801082e <rmw_uxrce_fini_client_memory+0x22>
 8010824:	4803      	ldr	r0, [pc, #12]	; (8010834 <rmw_uxrce_fini_client_memory+0x28>)
 8010826:	f006 fd47 	bl	80172b8 <put_memory>
 801082a:	2300      	movs	r3, #0
 801082c:	6063      	str	r3, [r4, #4]
 801082e:	bd10      	pop	{r4, pc}
 8010830:	0801cbbc 	.word	0x0801cbbc
 8010834:	20011298 	.word	0x20011298

08010838 <rmw_uxrce_fini_topic_memory>:
 8010838:	b510      	push	{r4, lr}
 801083a:	4604      	mov	r4, r0
 801083c:	4621      	mov	r1, r4
 801083e:	4803      	ldr	r0, [pc, #12]	; (801084c <rmw_uxrce_fini_topic_memory+0x14>)
 8010840:	f006 fd3a 	bl	80172b8 <put_memory>
 8010844:	2300      	movs	r3, #0
 8010846:	61a3      	str	r3, [r4, #24]
 8010848:	bd10      	pop	{r4, pc}
 801084a:	bf00      	nop
 801084c:	20015bc4 	.word	0x20015bc4

08010850 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8010850:	b082      	sub	sp, #8
 8010852:	b530      	push	{r4, r5, lr}
 8010854:	4925      	ldr	r1, [pc, #148]	; (80108ec <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 8010856:	680d      	ldr	r5, [r1, #0]
 8010858:	ac03      	add	r4, sp, #12
 801085a:	e884 000c 	stmia.w	r4, {r2, r3}
 801085e:	461c      	mov	r4, r3
 8010860:	2d00      	cmp	r5, #0
 8010862:	d041      	beq.n	80108e8 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 8010864:	462b      	mov	r3, r5
 8010866:	2100      	movs	r1, #0
 8010868:	689a      	ldr	r2, [r3, #8]
 801086a:	685b      	ldr	r3, [r3, #4]
 801086c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8010870:	4290      	cmp	r0, r2
 8010872:	bf08      	it	eq
 8010874:	3101      	addeq	r1, #1
 8010876:	2b00      	cmp	r3, #0
 8010878:	d1f6      	bne.n	8010868 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 801087a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801087e:	2b02      	cmp	r3, #2
 8010880:	d029      	beq.n	80108d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8010882:	d907      	bls.n	8010894 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8010884:	2b03      	cmp	r3, #3
 8010886:	d005      	beq.n	8010894 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 8010888:	2100      	movs	r1, #0
 801088a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801088e:	4608      	mov	r0, r1
 8010890:	b002      	add	sp, #8
 8010892:	4770      	bx	lr
 8010894:	b314      	cbz	r4, 80108dc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 8010896:	428c      	cmp	r4, r1
 8010898:	d820      	bhi.n	80108dc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 801089a:	2d00      	cmp	r5, #0
 801089c:	d0f4      	beq.n	8010888 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 801089e:	2100      	movs	r1, #0
 80108a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80108a4:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80108a8:	e002      	b.n	80108b0 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 80108aa:	686d      	ldr	r5, [r5, #4]
 80108ac:	2d00      	cmp	r5, #0
 80108ae:	d0ec      	beq.n	801088a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 80108b0:	68ab      	ldr	r3, [r5, #8]
 80108b2:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 80108b6:	4290      	cmp	r0, r2
 80108b8:	d1f7      	bne.n	80108aa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80108ba:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 80108be:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80108c2:	4562      	cmp	r2, ip
 80108c4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80108c8:	eb73 0e04 	sbcs.w	lr, r3, r4
 80108cc:	daed      	bge.n	80108aa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80108ce:	4694      	mov	ip, r2
 80108d0:	461c      	mov	r4, r3
 80108d2:	4629      	mov	r1, r5
 80108d4:	e7e9      	b.n	80108aa <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 80108d6:	b10c      	cbz	r4, 80108dc <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 80108d8:	428c      	cmp	r4, r1
 80108da:	d9d5      	bls.n	8010888 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 80108dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80108e0:	4802      	ldr	r0, [pc, #8]	; (80108ec <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 80108e2:	b002      	add	sp, #8
 80108e4:	f006 bcd8 	b.w	8017298 <get_memory>
 80108e8:	4629      	mov	r1, r5
 80108ea:	e7c6      	b.n	801087a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80108ec:	20015ba4 	.word	0x20015ba4

080108f0 <run_xrce_session>:
 80108f0:	b510      	push	{r4, lr}
 80108f2:	788c      	ldrb	r4, [r1, #2]
 80108f4:	b086      	sub	sp, #24
 80108f6:	2c01      	cmp	r4, #1
 80108f8:	f8ad 200e 	strh.w	r2, [sp, #14]
 80108fc:	d00c      	beq.n	8010918 <run_xrce_session+0x28>
 80108fe:	4619      	mov	r1, r3
 8010900:	2301      	movs	r3, #1
 8010902:	9300      	str	r3, [sp, #0]
 8010904:	f10d 020e 	add.w	r2, sp, #14
 8010908:	f10d 0317 	add.w	r3, sp, #23
 801090c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010910:	f003 fb06 	bl	8013f20 <uxr_run_session_until_all_status>
 8010914:	b006      	add	sp, #24
 8010916:	bd10      	pop	{r4, pc}
 8010918:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801091c:	f002 ff54 	bl	80137c8 <uxr_flash_output_streams>
 8010920:	4620      	mov	r0, r4
 8010922:	b006      	add	sp, #24
 8010924:	bd10      	pop	{r4, pc}
 8010926:	bf00      	nop

08010928 <convert_qos_profile>:
 8010928:	7a4a      	ldrb	r2, [r1, #9]
 801092a:	f891 c008 	ldrb.w	ip, [r1, #8]
 801092e:	2a02      	cmp	r2, #2
 8010930:	bf18      	it	ne
 8010932:	2200      	movne	r2, #0
 8010934:	7002      	strb	r2, [r0, #0]
 8010936:	780a      	ldrb	r2, [r1, #0]
 8010938:	8889      	ldrh	r1, [r1, #4]
 801093a:	8081      	strh	r1, [r0, #4]
 801093c:	f1ac 0c02 	sub.w	ip, ip, #2
 8010940:	f1a2 0202 	sub.w	r2, r2, #2
 8010944:	fabc fc8c 	clz	ip, ip
 8010948:	fab2 f282 	clz	r2, r2
 801094c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8010950:	0952      	lsrs	r2, r2, #5
 8010952:	f880 c001 	strb.w	ip, [r0, #1]
 8010956:	7082      	strb	r2, [r0, #2]
 8010958:	4770      	bx	lr
 801095a:	bf00      	nop

0801095c <generate_type_name>:
 801095c:	b530      	push	{r4, r5, lr}
 801095e:	2300      	movs	r3, #0
 8010960:	700b      	strb	r3, [r1, #0]
 8010962:	6803      	ldr	r3, [r0, #0]
 8010964:	b087      	sub	sp, #28
 8010966:	4614      	mov	r4, r2
 8010968:	b1d3      	cbz	r3, 80109a0 <generate_type_name+0x44>
 801096a:	4a0f      	ldr	r2, [pc, #60]	; (80109a8 <generate_type_name+0x4c>)
 801096c:	4615      	mov	r5, r2
 801096e:	9203      	str	r2, [sp, #12]
 8010970:	9500      	str	r5, [sp, #0]
 8010972:	6842      	ldr	r2, [r0, #4]
 8010974:	480d      	ldr	r0, [pc, #52]	; (80109ac <generate_type_name+0x50>)
 8010976:	9001      	str	r0, [sp, #4]
 8010978:	4608      	mov	r0, r1
 801097a:	490d      	ldr	r1, [pc, #52]	; (80109b0 <generate_type_name+0x54>)
 801097c:	9204      	str	r2, [sp, #16]
 801097e:	9105      	str	r1, [sp, #20]
 8010980:	9102      	str	r1, [sp, #8]
 8010982:	4a0c      	ldr	r2, [pc, #48]	; (80109b4 <generate_type_name+0x58>)
 8010984:	4621      	mov	r1, r4
 8010986:	f00a f921 	bl	801abcc <sniprintf>
 801098a:	2800      	cmp	r0, #0
 801098c:	db05      	blt.n	801099a <generate_type_name+0x3e>
 801098e:	4284      	cmp	r4, r0
 8010990:	bfd4      	ite	le
 8010992:	2000      	movle	r0, #0
 8010994:	2001      	movgt	r0, #1
 8010996:	b007      	add	sp, #28
 8010998:	bd30      	pop	{r4, r5, pc}
 801099a:	2000      	movs	r0, #0
 801099c:	b007      	add	sp, #28
 801099e:	bd30      	pop	{r4, r5, pc}
 80109a0:	4b05      	ldr	r3, [pc, #20]	; (80109b8 <generate_type_name+0x5c>)
 80109a2:	4a01      	ldr	r2, [pc, #4]	; (80109a8 <generate_type_name+0x4c>)
 80109a4:	461d      	mov	r5, r3
 80109a6:	e7e2      	b.n	801096e <generate_type_name+0x12>
 80109a8:	0801bfe8 	.word	0x0801bfe8
 80109ac:	0801c000 	.word	0x0801c000
 80109b0:	0801bffc 	.word	0x0801bffc
 80109b4:	0801bfec 	.word	0x0801bfec
 80109b8:	0801ce60 	.word	0x0801ce60

080109bc <generate_topic_name>:
 80109bc:	b510      	push	{r4, lr}
 80109be:	b082      	sub	sp, #8
 80109c0:	4614      	mov	r4, r2
 80109c2:	9000      	str	r0, [sp, #0]
 80109c4:	4b08      	ldr	r3, [pc, #32]	; (80109e8 <generate_topic_name+0x2c>)
 80109c6:	4a09      	ldr	r2, [pc, #36]	; (80109ec <generate_topic_name+0x30>)
 80109c8:	4608      	mov	r0, r1
 80109ca:	4621      	mov	r1, r4
 80109cc:	f00a f8fe 	bl	801abcc <sniprintf>
 80109d0:	2800      	cmp	r0, #0
 80109d2:	db05      	blt.n	80109e0 <generate_topic_name+0x24>
 80109d4:	4284      	cmp	r4, r0
 80109d6:	bfd4      	ite	le
 80109d8:	2000      	movle	r0, #0
 80109da:	2001      	movgt	r0, #1
 80109dc:	b002      	add	sp, #8
 80109de:	bd10      	pop	{r4, pc}
 80109e0:	2000      	movs	r0, #0
 80109e2:	b002      	add	sp, #8
 80109e4:	bd10      	pop	{r4, pc}
 80109e6:	bf00      	nop
 80109e8:	0801c00c 	.word	0x0801c00c
 80109ec:	0801c004 	.word	0x0801c004

080109f0 <is_uxrce_rmw_identifier_valid>:
 80109f0:	b510      	push	{r4, lr}
 80109f2:	4604      	mov	r4, r0
 80109f4:	b140      	cbz	r0, 8010a08 <is_uxrce_rmw_identifier_valid+0x18>
 80109f6:	f006 fc73 	bl	80172e0 <rmw_get_implementation_identifier>
 80109fa:	4601      	mov	r1, r0
 80109fc:	4620      	mov	r0, r4
 80109fe:	f7ef fbe7 	bl	80001d0 <strcmp>
 8010a02:	fab0 f080 	clz	r0, r0
 8010a06:	0940      	lsrs	r0, r0, #5
 8010a08:	bd10      	pop	{r4, pc}
 8010a0a:	bf00      	nop

08010a0c <get_message_typesupport_handle>:
 8010a0c:	6883      	ldr	r3, [r0, #8]
 8010a0e:	4718      	bx	r3

08010a10 <get_message_typesupport_handle_function>:
 8010a10:	b510      	push	{r4, lr}
 8010a12:	4604      	mov	r4, r0
 8010a14:	6800      	ldr	r0, [r0, #0]
 8010a16:	f7ef fbdb 	bl	80001d0 <strcmp>
 8010a1a:	2800      	cmp	r0, #0
 8010a1c:	bf0c      	ite	eq
 8010a1e:	4620      	moveq	r0, r4
 8010a20:	2000      	movne	r0, #0
 8010a22:	bd10      	pop	{r4, pc}

08010a24 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 8010a24:	4b04      	ldr	r3, [pc, #16]	; (8010a38 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>)
 8010a26:	681a      	ldr	r2, [r3, #0]
 8010a28:	b10a      	cbz	r2, 8010a2e <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0xa>
 8010a2a:	4803      	ldr	r0, [pc, #12]	; (8010a38 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>)
 8010a2c:	4770      	bx	lr
 8010a2e:	4a03      	ldr	r2, [pc, #12]	; (8010a3c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x18>)
 8010a30:	4801      	ldr	r0, [pc, #4]	; (8010a38 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>)
 8010a32:	6812      	ldr	r2, [r2, #0]
 8010a34:	601a      	str	r2, [r3, #0]
 8010a36:	4770      	bx	lr
 8010a38:	20000120 	.word	0x20000120
 8010a3c:	200009b4 	.word	0x200009b4

08010a40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 8010a40:	4a02      	ldr	r2, [pc, #8]	; (8010a4c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0xc>)
 8010a42:	4b03      	ldr	r3, [pc, #12]	; (8010a50 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x10>)
 8010a44:	6812      	ldr	r2, [r2, #0]
 8010a46:	601a      	str	r2, [r3, #0]
 8010a48:	4770      	bx	lr
 8010a4a:	bf00      	nop
 8010a4c:	200009b4 	.word	0x200009b4
 8010a50:	20000120 	.word	0x20000120

08010a54 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 8010a54:	4b04      	ldr	r3, [pc, #16]	; (8010a68 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 8010a56:	681a      	ldr	r2, [r3, #0]
 8010a58:	b10a      	cbz	r2, 8010a5e <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0xa>
 8010a5a:	4803      	ldr	r0, [pc, #12]	; (8010a68 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 8010a5c:	4770      	bx	lr
 8010a5e:	4a03      	ldr	r2, [pc, #12]	; (8010a6c <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x18>)
 8010a60:	4801      	ldr	r0, [pc, #4]	; (8010a68 <rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>)
 8010a62:	6812      	ldr	r2, [r2, #0]
 8010a64:	601a      	str	r2, [r3, #0]
 8010a66:	4770      	bx	lr
 8010a68:	20000134 	.word	0x20000134
 8010a6c:	200009b4 	.word	0x200009b4

08010a70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 8010a70:	4a02      	ldr	r2, [pc, #8]	; (8010a7c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0xc>)
 8010a72:	4b03      	ldr	r3, [pc, #12]	; (8010a80 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x10>)
 8010a74:	6812      	ldr	r2, [r2, #0]
 8010a76:	601a      	str	r2, [r3, #0]
 8010a78:	4770      	bx	lr
 8010a7a:	bf00      	nop
 8010a7c:	200009b4 	.word	0x200009b4
 8010a80:	20000134 	.word	0x20000134

08010a84 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__size_function__BatteryState__cell_voltage>:
 8010a84:	6840      	ldr	r0, [r0, #4]
 8010a86:	4770      	bx	lr

08010a88 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_const_function__BatteryState__cell_voltage>:
 8010a88:	6800      	ldr	r0, [r0, #0]
 8010a8a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010a8e:	4770      	bx	lr

08010a90 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__fetch_function__BatteryState__cell_voltage>:
 8010a90:	6803      	ldr	r3, [r0, #0]
 8010a92:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010a96:	680b      	ldr	r3, [r1, #0]
 8010a98:	6013      	str	r3, [r2, #0]
 8010a9a:	4770      	bx	lr

08010a9c <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__assign_function__BatteryState__cell_voltage>:
 8010a9c:	6803      	ldr	r3, [r0, #0]
 8010a9e:	6812      	ldr	r2, [r2, #0]
 8010aa0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010aa4:	600a      	str	r2, [r1, #0]
 8010aa6:	4770      	bx	lr

08010aa8 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__BatteryState_init_function>:
 8010aa8:	f007 b93c 	b.w	8017d24 <sensor_msgs__msg__BatteryState__init>

08010aac <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__BatteryState_fini_function>:
 8010aac:	f007 b9aa 	b.w	8017e04 <sensor_msgs__msg__BatteryState__fini>

08010ab0 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__resize_function__BatteryState__cell_voltage>:
 8010ab0:	b510      	push	{r4, lr}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	4604      	mov	r4, r0
 8010ab6:	9101      	str	r1, [sp, #4]
 8010ab8:	f007 f8f2 	bl	8017ca0 <rosidl_runtime_c__float__Sequence__fini>
 8010abc:	9901      	ldr	r1, [sp, #4]
 8010abe:	4620      	mov	r0, r4
 8010ac0:	b002      	add	sp, #8
 8010ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ac6:	f007 b8d3 	b.w	8017c70 <rosidl_runtime_c__float__Sequence__init>
 8010aca:	bf00      	nop

08010acc <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__size_function__BatteryState__cell_temperature>:
 8010acc:	6840      	ldr	r0, [r0, #4]
 8010ace:	4770      	bx	lr

08010ad0 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_const_function__BatteryState__cell_temperature>:
 8010ad0:	6800      	ldr	r0, [r0, #0]
 8010ad2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010ad6:	4770      	bx	lr

08010ad8 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_function__BatteryState__cell_temperature>:
 8010ad8:	6800      	ldr	r0, [r0, #0]
 8010ada:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010ade:	4770      	bx	lr

08010ae0 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__get_function__BatteryState__cell_voltage>:
 8010ae0:	6800      	ldr	r0, [r0, #0]
 8010ae2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010ae6:	4770      	bx	lr

08010ae8 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__fetch_function__BatteryState__cell_temperature>:
 8010ae8:	6803      	ldr	r3, [r0, #0]
 8010aea:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010aee:	680b      	ldr	r3, [r1, #0]
 8010af0:	6013      	str	r3, [r2, #0]
 8010af2:	4770      	bx	lr

08010af4 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__assign_function__BatteryState__cell_temperature>:
 8010af4:	6803      	ldr	r3, [r0, #0]
 8010af6:	6812      	ldr	r2, [r2, #0]
 8010af8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010afc:	600a      	str	r2, [r1, #0]
 8010afe:	4770      	bx	lr

08010b00 <sensor_msgs__msg__BatteryState__rosidl_typesupport_introspection_c__resize_function__BatteryState__cell_temperature>:
 8010b00:	b510      	push	{r4, lr}
 8010b02:	b082      	sub	sp, #8
 8010b04:	4604      	mov	r4, r0
 8010b06:	9101      	str	r1, [sp, #4]
 8010b08:	f007 f8ca 	bl	8017ca0 <rosidl_runtime_c__float__Sequence__fini>
 8010b0c:	9901      	ldr	r1, [sp, #4]
 8010b0e:	4620      	mov	r0, r4
 8010b10:	b002      	add	sp, #8
 8010b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b16:	f007 b8ab 	b.w	8017c70 <rosidl_runtime_c__float__Sequence__init>
 8010b1a:	bf00      	nop

08010b1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 8010b1c:	b508      	push	{r3, lr}
 8010b1e:	f000 fb27 	bl	8011170 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010b22:	4b06      	ldr	r3, [pc, #24]	; (8010b3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x20>)
 8010b24:	4906      	ldr	r1, [pc, #24]	; (8010b40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x24>)
 8010b26:	681a      	ldr	r2, [r3, #0]
 8010b28:	60c8      	str	r0, [r1, #12]
 8010b2a:	b10a      	cbz	r2, 8010b30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x14>
 8010b2c:	4803      	ldr	r0, [pc, #12]	; (8010b3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x20>)
 8010b2e:	bd08      	pop	{r3, pc}
 8010b30:	4a04      	ldr	r2, [pc, #16]	; (8010b44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x28>)
 8010b32:	4802      	ldr	r0, [pc, #8]	; (8010b3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x20>)
 8010b34:	6812      	ldr	r2, [r2, #0]
 8010b36:	601a      	str	r2, [r3, #0]
 8010b38:	bd08      	pop	{r3, pc}
 8010b3a:	bf00      	nop
 8010b3c:	20000500 	.word	0x20000500
 8010b40:	20000140 	.word	0x20000140
 8010b44:	200009b8 	.word	0x200009b8

08010b48 <sensor_msgs__msg__Temperature__rosidl_typesupport_introspection_c__Temperature_init_function>:
 8010b48:	f007 b974 	b.w	8017e34 <sensor_msgs__msg__Temperature__init>

08010b4c <sensor_msgs__msg__Temperature__rosidl_typesupport_introspection_c__Temperature_fini_function>:
 8010b4c:	f007 b984 	b.w	8017e58 <sensor_msgs__msg__Temperature__fini>

08010b50 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 8010b50:	b508      	push	{r3, lr}
 8010b52:	f000 fb0d 	bl	8011170 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010b56:	4b06      	ldr	r3, [pc, #24]	; (8010b70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 8010b58:	4906      	ldr	r1, [pc, #24]	; (8010b74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x24>)
 8010b5a:	681a      	ldr	r2, [r3, #0]
 8010b5c:	60c8      	str	r0, [r1, #12]
 8010b5e:	b10a      	cbz	r2, 8010b64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x14>
 8010b60:	4803      	ldr	r0, [pc, #12]	; (8010b70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 8010b62:	bd08      	pop	{r3, pc}
 8010b64:	4a04      	ldr	r2, [pc, #16]	; (8010b78 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x28>)
 8010b66:	4802      	ldr	r0, [pc, #8]	; (8010b70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x20>)
 8010b68:	6812      	ldr	r2, [r2, #0]
 8010b6a:	601a      	str	r2, [r3, #0]
 8010b6c:	bd08      	pop	{r3, pc}
 8010b6e:	bf00      	nop
 8010b70:	200005c0 	.word	0x200005c0
 8010b74:	2000050c 	.word	0x2000050c
 8010b78:	200009b8 	.word	0x200009b8

08010b7c <get_serialized_size_sensor_msgs__msg__BatteryState.part.0>:
 8010b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b80:	460e      	mov	r6, r1
 8010b82:	4607      	mov	r7, r0
 8010b84:	f000 fbca 	bl	801131c <get_serialized_size_std_msgs__msg__Header>
 8010b88:	1835      	adds	r5, r6, r0
 8010b8a:	2104      	movs	r1, #4
 8010b8c:	4628      	mov	r0, r5
 8010b8e:	f002 fa83 	bl	8013098 <ucdr_alignment>
 8010b92:	1d04      	adds	r4, r0, #4
 8010b94:	442c      	add	r4, r5
 8010b96:	2104      	movs	r1, #4
 8010b98:	4620      	mov	r0, r4
 8010b9a:	f002 fa7d 	bl	8013098 <ucdr_alignment>
 8010b9e:	1d05      	adds	r5, r0, #4
 8010ba0:	442c      	add	r4, r5
 8010ba2:	2104      	movs	r1, #4
 8010ba4:	4620      	mov	r0, r4
 8010ba6:	f002 fa77 	bl	8013098 <ucdr_alignment>
 8010baa:	1d05      	adds	r5, r0, #4
 8010bac:	4425      	add	r5, r4
 8010bae:	2104      	movs	r1, #4
 8010bb0:	4628      	mov	r0, r5
 8010bb2:	f002 fa71 	bl	8013098 <ucdr_alignment>
 8010bb6:	3004      	adds	r0, #4
 8010bb8:	4405      	add	r5, r0
 8010bba:	2104      	movs	r1, #4
 8010bbc:	4628      	mov	r0, r5
 8010bbe:	f002 fa6b 	bl	8013098 <ucdr_alignment>
 8010bc2:	3004      	adds	r0, #4
 8010bc4:	1944      	adds	r4, r0, r5
 8010bc6:	2104      	movs	r1, #4
 8010bc8:	4620      	mov	r0, r4
 8010bca:	f002 fa65 	bl	8013098 <ucdr_alignment>
 8010bce:	1d05      	adds	r5, r0, #4
 8010bd0:	4425      	add	r5, r4
 8010bd2:	2104      	movs	r1, #4
 8010bd4:	4628      	mov	r0, r5
 8010bd6:	f002 fa5f 	bl	8013098 <ucdr_alignment>
 8010bda:	3004      	adds	r0, #4
 8010bdc:	4405      	add	r5, r0
 8010bde:	2101      	movs	r1, #1
 8010be0:	4628      	mov	r0, r5
 8010be2:	f002 fa59 	bl	8013098 <ucdr_alignment>
 8010be6:	3001      	adds	r0, #1
 8010be8:	1944      	adds	r4, r0, r5
 8010bea:	2101      	movs	r1, #1
 8010bec:	4620      	mov	r0, r4
 8010bee:	f002 fa53 	bl	8013098 <ucdr_alignment>
 8010bf2:	1c45      	adds	r5, r0, #1
 8010bf4:	4425      	add	r5, r4
 8010bf6:	2101      	movs	r1, #1
 8010bf8:	4628      	mov	r0, r5
 8010bfa:	f002 fa4d 	bl	8013098 <ucdr_alignment>
 8010bfe:	3001      	adds	r0, #1
 8010c00:	4405      	add	r5, r0
 8010c02:	2101      	movs	r1, #1
 8010c04:	4628      	mov	r0, r5
 8010c06:	f002 fa47 	bl	8013098 <ucdr_alignment>
 8010c0a:	3001      	adds	r0, #1
 8010c0c:	1944      	adds	r4, r0, r5
 8010c0e:	4620      	mov	r0, r4
 8010c10:	2104      	movs	r1, #4
 8010c12:	f8d7 8038 	ldr.w	r8, [r7, #56]	; 0x38
 8010c16:	f002 fa3f 	bl	8013098 <ucdr_alignment>
 8010c1a:	1d05      	adds	r5, r0, #4
 8010c1c:	442c      	add	r4, r5
 8010c1e:	f1b8 0f00 	cmp.w	r8, #0
 8010c22:	d11e      	bne.n	8010c62 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xe6>
 8010c24:	4620      	mov	r0, r4
 8010c26:	2104      	movs	r1, #4
 8010c28:	f8d7 8044 	ldr.w	r8, [r7, #68]	; 0x44
 8010c2c:	f002 fa34 	bl	8013098 <ucdr_alignment>
 8010c30:	4404      	add	r4, r0
 8010c32:	3404      	adds	r4, #4
 8010c34:	f1b8 0f00 	cmp.w	r8, #0
 8010c38:	d11b      	bne.n	8010c72 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xf6>
 8010c3a:	2104      	movs	r1, #4
 8010c3c:	4620      	mov	r0, r4
 8010c3e:	f002 fa2b 	bl	8013098 <ucdr_alignment>
 8010c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c44:	3305      	adds	r3, #5
 8010c46:	441c      	add	r4, r3
 8010c48:	4404      	add	r4, r0
 8010c4a:	2104      	movs	r1, #4
 8010c4c:	4620      	mov	r0, r4
 8010c4e:	f002 fa23 	bl	8013098 <ucdr_alignment>
 8010c52:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8010c54:	f1c6 0605 	rsb	r6, r6, #5
 8010c58:	440e      	add	r6, r1
 8010c5a:	4430      	add	r0, r6
 8010c5c:	4420      	add	r0, r4
 8010c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c62:	4620      	mov	r0, r4
 8010c64:	2104      	movs	r1, #4
 8010c66:	f002 fa17 	bl	8013098 <ucdr_alignment>
 8010c6a:	eb04 0588 	add.w	r5, r4, r8, lsl #2
 8010c6e:	1944      	adds	r4, r0, r5
 8010c70:	e7d8      	b.n	8010c24 <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xa8>
 8010c72:	4620      	mov	r0, r4
 8010c74:	2104      	movs	r1, #4
 8010c76:	f002 fa0f 	bl	8013098 <ucdr_alignment>
 8010c7a:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8010c7e:	4404      	add	r4, r0
 8010c80:	e7db      	b.n	8010c3a <get_serialized_size_sensor_msgs__msg__BatteryState.part.0+0xbe>
 8010c82:	bf00      	nop

08010c84 <get_serialized_size_sensor_msgs__msg__BatteryState>:
 8010c84:	b108      	cbz	r0, 8010c8a <get_serialized_size_sensor_msgs__msg__BatteryState+0x6>
 8010c86:	f7ff bf79 	b.w	8010b7c <get_serialized_size_sensor_msgs__msg__BatteryState.part.0>
 8010c8a:	4770      	bx	lr

08010c8c <_BatteryState__get_serialized_size>:
 8010c8c:	b110      	cbz	r0, 8010c94 <_BatteryState__get_serialized_size+0x8>
 8010c8e:	2100      	movs	r1, #0
 8010c90:	f7ff bf74 	b.w	8010b7c <get_serialized_size_sensor_msgs__msg__BatteryState.part.0>
 8010c94:	4770      	bx	lr
 8010c96:	bf00      	nop

08010c98 <_BatteryState__cdr_deserialize>:
 8010c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c9a:	460c      	mov	r4, r1
 8010c9c:	b083      	sub	sp, #12
 8010c9e:	2900      	cmp	r1, #0
 8010ca0:	f000 80a1 	beq.w	8010de6 <_BatteryState__cdr_deserialize+0x14e>
 8010ca4:	4605      	mov	r5, r0
 8010ca6:	f000 fbbb 	bl	8011420 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010caa:	6843      	ldr	r3, [r0, #4]
 8010cac:	4621      	mov	r1, r4
 8010cae:	68db      	ldr	r3, [r3, #12]
 8010cb0:	4628      	mov	r0, r5
 8010cb2:	4798      	blx	r3
 8010cb4:	f104 0114 	add.w	r1, r4, #20
 8010cb8:	4628      	mov	r0, r5
 8010cba:	f001 fed9 	bl	8012a70 <ucdr_deserialize_float>
 8010cbe:	f104 0118 	add.w	r1, r4, #24
 8010cc2:	4628      	mov	r0, r5
 8010cc4:	f001 fed4 	bl	8012a70 <ucdr_deserialize_float>
 8010cc8:	f104 011c 	add.w	r1, r4, #28
 8010ccc:	4628      	mov	r0, r5
 8010cce:	f001 fecf 	bl	8012a70 <ucdr_deserialize_float>
 8010cd2:	f104 0120 	add.w	r1, r4, #32
 8010cd6:	4628      	mov	r0, r5
 8010cd8:	f001 feca 	bl	8012a70 <ucdr_deserialize_float>
 8010cdc:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8010ce0:	4628      	mov	r0, r5
 8010ce2:	f001 fec5 	bl	8012a70 <ucdr_deserialize_float>
 8010ce6:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8010cea:	4628      	mov	r0, r5
 8010cec:	f001 fec0 	bl	8012a70 <ucdr_deserialize_float>
 8010cf0:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8010cf4:	4628      	mov	r0, r5
 8010cf6:	f001 febb 	bl	8012a70 <ucdr_deserialize_float>
 8010cfa:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8010cfe:	4628      	mov	r0, r5
 8010d00:	f000 fcac 	bl	801165c <ucdr_deserialize_uint8_t>
 8010d04:	f104 0131 	add.w	r1, r4, #49	; 0x31
 8010d08:	4628      	mov	r0, r5
 8010d0a:	f000 fca7 	bl	801165c <ucdr_deserialize_uint8_t>
 8010d0e:	f104 0132 	add.w	r1, r4, #50	; 0x32
 8010d12:	4628      	mov	r0, r5
 8010d14:	f000 fca2 	bl	801165c <ucdr_deserialize_uint8_t>
 8010d18:	f104 0133 	add.w	r1, r4, #51	; 0x33
 8010d1c:	4628      	mov	r0, r5
 8010d1e:	f000 fc6f 	bl	8011600 <ucdr_deserialize_bool>
 8010d22:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8010d24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d26:	ab01      	add	r3, sp, #4
 8010d28:	4632      	mov	r2, r6
 8010d2a:	4628      	mov	r0, r5
 8010d2c:	f002 fa8a 	bl	8013244 <ucdr_deserialize_sequence_float>
 8010d30:	9b01      	ldr	r3, [sp, #4]
 8010d32:	bb40      	cbnz	r0, 8010d86 <_BatteryState__cdr_deserialize+0xee>
 8010d34:	429e      	cmp	r6, r3
 8010d36:	d35e      	bcc.n	8010df6 <_BatteryState__cdr_deserialize+0x15e>
 8010d38:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 8010d3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010d3c:	ab01      	add	r3, sp, #4
 8010d3e:	4632      	mov	r2, r6
 8010d40:	4628      	mov	r0, r5
 8010d42:	f002 fa7f 	bl	8013244 <ucdr_deserialize_sequence_float>
 8010d46:	9b01      	ldr	r3, [sp, #4]
 8010d48:	2800      	cmp	r0, #0
 8010d4a:	d03c      	beq.n	8010dc6 <_BatteryState__cdr_deserialize+0x12e>
 8010d4c:	6463      	str	r3, [r4, #68]	; 0x44
 8010d4e:	6d66      	ldr	r6, [r4, #84]	; 0x54
 8010d50:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8010d52:	ab01      	add	r3, sp, #4
 8010d54:	4632      	mov	r2, r6
 8010d56:	4628      	mov	r0, r5
 8010d58:	f002 fa1c 	bl	8013194 <ucdr_deserialize_sequence_char>
 8010d5c:	9b01      	ldr	r3, [sp, #4]
 8010d5e:	b320      	cbz	r0, 8010daa <_BatteryState__cdr_deserialize+0x112>
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d146      	bne.n	8010df2 <_BatteryState__cdr_deserialize+0x15a>
 8010d64:	6523      	str	r3, [r4, #80]	; 0x50
 8010d66:	6e27      	ldr	r7, [r4, #96]	; 0x60
 8010d68:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010d6a:	ab01      	add	r3, sp, #4
 8010d6c:	463a      	mov	r2, r7
 8010d6e:	4628      	mov	r0, r5
 8010d70:	f002 fa10 	bl	8013194 <ucdr_deserialize_sequence_char>
 8010d74:	9b01      	ldr	r3, [sp, #4]
 8010d76:	4606      	mov	r6, r0
 8010d78:	b138      	cbz	r0, 8010d8a <_BatteryState__cdr_deserialize+0xf2>
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d137      	bne.n	8010dee <_BatteryState__cdr_deserialize+0x156>
 8010d7e:	65e3      	str	r3, [r4, #92]	; 0x5c
 8010d80:	4630      	mov	r0, r6
 8010d82:	b003      	add	sp, #12
 8010d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d86:	63a3      	str	r3, [r4, #56]	; 0x38
 8010d88:	e7d6      	b.n	8010d38 <_BatteryState__cdr_deserialize+0xa0>
 8010d8a:	429f      	cmp	r7, r3
 8010d8c:	d2f8      	bcs.n	8010d80 <_BatteryState__cdr_deserialize+0xe8>
 8010d8e:	2101      	movs	r1, #1
 8010d90:	75a8      	strb	r0, [r5, #22]
 8010d92:	7569      	strb	r1, [r5, #21]
 8010d94:	4628      	mov	r0, r5
 8010d96:	65e6      	str	r6, [r4, #92]	; 0x5c
 8010d98:	f002 f994 	bl	80130c4 <ucdr_align_to>
 8010d9c:	4628      	mov	r0, r5
 8010d9e:	9901      	ldr	r1, [sp, #4]
 8010da0:	f002 f9c6 	bl	8013130 <ucdr_advance_buffer>
 8010da4:	4630      	mov	r0, r6
 8010da6:	b003      	add	sp, #12
 8010da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010daa:	429e      	cmp	r6, r3
 8010dac:	d2db      	bcs.n	8010d66 <_BatteryState__cdr_deserialize+0xce>
 8010dae:	2101      	movs	r1, #1
 8010db0:	75a8      	strb	r0, [r5, #22]
 8010db2:	7569      	strb	r1, [r5, #21]
 8010db4:	6520      	str	r0, [r4, #80]	; 0x50
 8010db6:	4628      	mov	r0, r5
 8010db8:	f002 f984 	bl	80130c4 <ucdr_align_to>
 8010dbc:	9901      	ldr	r1, [sp, #4]
 8010dbe:	4628      	mov	r0, r5
 8010dc0:	f002 f9b6 	bl	8013130 <ucdr_advance_buffer>
 8010dc4:	e7cf      	b.n	8010d66 <_BatteryState__cdr_deserialize+0xce>
 8010dc6:	429e      	cmp	r6, r3
 8010dc8:	d2c1      	bcs.n	8010d4e <_BatteryState__cdr_deserialize+0xb6>
 8010dca:	2301      	movs	r3, #1
 8010dcc:	75a8      	strb	r0, [r5, #22]
 8010dce:	756b      	strb	r3, [r5, #21]
 8010dd0:	2104      	movs	r1, #4
 8010dd2:	6460      	str	r0, [r4, #68]	; 0x44
 8010dd4:	4628      	mov	r0, r5
 8010dd6:	f002 f975 	bl	80130c4 <ucdr_align_to>
 8010dda:	9901      	ldr	r1, [sp, #4]
 8010ddc:	4628      	mov	r0, r5
 8010dde:	0089      	lsls	r1, r1, #2
 8010de0:	f002 f9a6 	bl	8013130 <ucdr_advance_buffer>
 8010de4:	e7b3      	b.n	8010d4e <_BatteryState__cdr_deserialize+0xb6>
 8010de6:	460e      	mov	r6, r1
 8010de8:	4630      	mov	r0, r6
 8010dea:	b003      	add	sp, #12
 8010dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dee:	3b01      	subs	r3, #1
 8010df0:	e7c5      	b.n	8010d7e <_BatteryState__cdr_deserialize+0xe6>
 8010df2:	3b01      	subs	r3, #1
 8010df4:	e7b6      	b.n	8010d64 <_BatteryState__cdr_deserialize+0xcc>
 8010df6:	2301      	movs	r3, #1
 8010df8:	75a8      	strb	r0, [r5, #22]
 8010dfa:	756b      	strb	r3, [r5, #21]
 8010dfc:	2104      	movs	r1, #4
 8010dfe:	63a0      	str	r0, [r4, #56]	; 0x38
 8010e00:	4628      	mov	r0, r5
 8010e02:	f002 f95f 	bl	80130c4 <ucdr_align_to>
 8010e06:	9901      	ldr	r1, [sp, #4]
 8010e08:	4628      	mov	r0, r5
 8010e0a:	0089      	lsls	r1, r1, #2
 8010e0c:	f002 f990 	bl	8013130 <ucdr_advance_buffer>
 8010e10:	e792      	b.n	8010d38 <_BatteryState__cdr_deserialize+0xa0>
 8010e12:	bf00      	nop

08010e14 <_BatteryState__cdr_serialize>:
 8010e14:	2800      	cmp	r0, #0
 8010e16:	d065      	beq.n	8010ee4 <_BatteryState__cdr_serialize+0xd0>
 8010e18:	b570      	push	{r4, r5, r6, lr}
 8010e1a:	4604      	mov	r4, r0
 8010e1c:	460d      	mov	r5, r1
 8010e1e:	f000 faff 	bl	8011420 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010e22:	6843      	ldr	r3, [r0, #4]
 8010e24:	4629      	mov	r1, r5
 8010e26:	689b      	ldr	r3, [r3, #8]
 8010e28:	4620      	mov	r0, r4
 8010e2a:	4798      	blx	r3
 8010e2c:	ed94 0a05 	vldr	s0, [r4, #20]
 8010e30:	4628      	mov	r0, r5
 8010e32:	f001 fceb 	bl	801280c <ucdr_serialize_float>
 8010e36:	ed94 0a06 	vldr	s0, [r4, #24]
 8010e3a:	4628      	mov	r0, r5
 8010e3c:	f001 fce6 	bl	801280c <ucdr_serialize_float>
 8010e40:	ed94 0a07 	vldr	s0, [r4, #28]
 8010e44:	4628      	mov	r0, r5
 8010e46:	f001 fce1 	bl	801280c <ucdr_serialize_float>
 8010e4a:	ed94 0a08 	vldr	s0, [r4, #32]
 8010e4e:	4628      	mov	r0, r5
 8010e50:	f001 fcdc 	bl	801280c <ucdr_serialize_float>
 8010e54:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
 8010e58:	4628      	mov	r0, r5
 8010e5a:	f001 fcd7 	bl	801280c <ucdr_serialize_float>
 8010e5e:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8010e62:	4628      	mov	r0, r5
 8010e64:	f001 fcd2 	bl	801280c <ucdr_serialize_float>
 8010e68:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8010e6c:	4628      	mov	r0, r5
 8010e6e:	f001 fccd 	bl	801280c <ucdr_serialize_float>
 8010e72:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8010e76:	4628      	mov	r0, r5
 8010e78:	f000 fbda 	bl	8011630 <ucdr_serialize_uint8_t>
 8010e7c:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 8010e80:	4628      	mov	r0, r5
 8010e82:	f000 fbd5 	bl	8011630 <ucdr_serialize_uint8_t>
 8010e86:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
 8010e8a:	4628      	mov	r0, r5
 8010e8c:	f000 fbd0 	bl	8011630 <ucdr_serialize_uint8_t>
 8010e90:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
 8010e94:	4628      	mov	r0, r5
 8010e96:	f000 fb9d 	bl	80115d4 <ucdr_serialize_bool>
 8010e9a:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	; 0x34
 8010e9e:	4628      	mov	r0, r5
 8010ea0:	f002 f9be 	bl	8013220 <ucdr_serialize_sequence_float>
 8010ea4:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	; 0x40
 8010ea8:	4628      	mov	r0, r5
 8010eaa:	f002 f9b9 	bl	8013220 <ucdr_serialize_sequence_float>
 8010eae:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8010eb0:	b1ae      	cbz	r6, 8010ede <_BatteryState__cdr_serialize+0xca>
 8010eb2:	4630      	mov	r0, r6
 8010eb4:	f7ef f996 	bl	80001e4 <strlen>
 8010eb8:	1c42      	adds	r2, r0, #1
 8010eba:	6520      	str	r0, [r4, #80]	; 0x50
 8010ebc:	4631      	mov	r1, r6
 8010ebe:	4628      	mov	r0, r5
 8010ec0:	f002 f956 	bl	8013170 <ucdr_serialize_sequence_char>
 8010ec4:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8010ec6:	b176      	cbz	r6, 8010ee6 <_BatteryState__cdr_serialize+0xd2>
 8010ec8:	4630      	mov	r0, r6
 8010eca:	f7ef f98b 	bl	80001e4 <strlen>
 8010ece:	4631      	mov	r1, r6
 8010ed0:	65e0      	str	r0, [r4, #92]	; 0x5c
 8010ed2:	1c42      	adds	r2, r0, #1
 8010ed4:	4628      	mov	r0, r5
 8010ed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010eda:	f002 b949 	b.w	8013170 <ucdr_serialize_sequence_char>
 8010ede:	4632      	mov	r2, r6
 8010ee0:	4630      	mov	r0, r6
 8010ee2:	e7ea      	b.n	8010eba <_BatteryState__cdr_serialize+0xa6>
 8010ee4:	4770      	bx	lr
 8010ee6:	4630      	mov	r0, r6
 8010ee8:	65e0      	str	r0, [r4, #92]	; 0x5c
 8010eea:	4632      	mov	r2, r6
 8010eec:	4631      	mov	r1, r6
 8010eee:	4628      	mov	r0, r5
 8010ef0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ef4:	f002 b93c 	b.w	8013170 <ucdr_serialize_sequence_char>

08010ef8 <max_serialized_size_sensor_msgs__msg__BatteryState>:
 8010ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010efc:	f04f 0801 	mov.w	r8, #1
 8010f00:	f880 8000 	strb.w	r8, [r0]
 8010f04:	460c      	mov	r4, r1
 8010f06:	4607      	mov	r7, r0
 8010f08:	f000 fa80 	bl	801140c <max_serialized_size_std_msgs__msg__Header>
 8010f0c:	1825      	adds	r5, r4, r0
 8010f0e:	2104      	movs	r1, #4
 8010f10:	4628      	mov	r0, r5
 8010f12:	f002 f8c1 	bl	8013098 <ucdr_alignment>
 8010f16:	1d06      	adds	r6, r0, #4
 8010f18:	4435      	add	r5, r6
 8010f1a:	2104      	movs	r1, #4
 8010f1c:	4628      	mov	r0, r5
 8010f1e:	f002 f8bb 	bl	8013098 <ucdr_alignment>
 8010f22:	1d06      	adds	r6, r0, #4
 8010f24:	442e      	add	r6, r5
 8010f26:	2104      	movs	r1, #4
 8010f28:	4630      	mov	r0, r6
 8010f2a:	f002 f8b5 	bl	8013098 <ucdr_alignment>
 8010f2e:	3004      	adds	r0, #4
 8010f30:	4406      	add	r6, r0
 8010f32:	2104      	movs	r1, #4
 8010f34:	4630      	mov	r0, r6
 8010f36:	f002 f8af 	bl	8013098 <ucdr_alignment>
 8010f3a:	3004      	adds	r0, #4
 8010f3c:	1985      	adds	r5, r0, r6
 8010f3e:	2104      	movs	r1, #4
 8010f40:	4628      	mov	r0, r5
 8010f42:	f002 f8a9 	bl	8013098 <ucdr_alignment>
 8010f46:	1d06      	adds	r6, r0, #4
 8010f48:	442e      	add	r6, r5
 8010f4a:	2104      	movs	r1, #4
 8010f4c:	4630      	mov	r0, r6
 8010f4e:	f002 f8a3 	bl	8013098 <ucdr_alignment>
 8010f52:	3004      	adds	r0, #4
 8010f54:	4406      	add	r6, r0
 8010f56:	2104      	movs	r1, #4
 8010f58:	4630      	mov	r0, r6
 8010f5a:	f002 f89d 	bl	8013098 <ucdr_alignment>
 8010f5e:	3004      	adds	r0, #4
 8010f60:	1985      	adds	r5, r0, r6
 8010f62:	4641      	mov	r1, r8
 8010f64:	4628      	mov	r0, r5
 8010f66:	f002 f897 	bl	8013098 <ucdr_alignment>
 8010f6a:	eb00 0608 	add.w	r6, r0, r8
 8010f6e:	442e      	add	r6, r5
 8010f70:	4641      	mov	r1, r8
 8010f72:	4630      	mov	r0, r6
 8010f74:	f002 f890 	bl	8013098 <ucdr_alignment>
 8010f78:	eb00 0508 	add.w	r5, r0, r8
 8010f7c:	442e      	add	r6, r5
 8010f7e:	4641      	mov	r1, r8
 8010f80:	4630      	mov	r0, r6
 8010f82:	f002 f889 	bl	8013098 <ucdr_alignment>
 8010f86:	eb00 0508 	add.w	r5, r0, r8
 8010f8a:	4435      	add	r5, r6
 8010f8c:	4641      	mov	r1, r8
 8010f8e:	4628      	mov	r0, r5
 8010f90:	f002 f882 	bl	8013098 <ucdr_alignment>
 8010f94:	eba8 0404 	sub.w	r4, r8, r4
 8010f98:	2300      	movs	r3, #0
 8010f9a:	4420      	add	r0, r4
 8010f9c:	703b      	strb	r3, [r7, #0]
 8010f9e:	4428      	add	r0, r5
 8010fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010fa4 <_BatteryState__max_serialized_size>:
 8010fa4:	b500      	push	{lr}
 8010fa6:	b083      	sub	sp, #12
 8010fa8:	2100      	movs	r1, #0
 8010faa:	f10d 0007 	add.w	r0, sp, #7
 8010fae:	f7ff ffa3 	bl	8010ef8 <max_serialized_size_sensor_msgs__msg__BatteryState>
 8010fb2:	b003      	add	sp, #12
 8010fb4:	f85d fb04 	ldr.w	pc, [sp], #4

08010fb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState>:
 8010fb8:	4800      	ldr	r0, [pc, #0]	; (8010fbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__BatteryState+0x4>)
 8010fba:	4770      	bx	lr
 8010fbc:	200005cc 	.word	0x200005cc

08010fc0 <get_serialized_size_sensor_msgs__msg__Temperature>:
 8010fc0:	b538      	push	{r3, r4, r5, lr}
 8010fc2:	b188      	cbz	r0, 8010fe8 <get_serialized_size_sensor_msgs__msg__Temperature+0x28>
 8010fc4:	460d      	mov	r5, r1
 8010fc6:	f000 f9a9 	bl	801131c <get_serialized_size_std_msgs__msg__Header>
 8010fca:	182c      	adds	r4, r5, r0
 8010fcc:	2108      	movs	r1, #8
 8010fce:	4620      	mov	r0, r4
 8010fd0:	f002 f862 	bl	8013098 <ucdr_alignment>
 8010fd4:	3008      	adds	r0, #8
 8010fd6:	4404      	add	r4, r0
 8010fd8:	2108      	movs	r1, #8
 8010fda:	4620      	mov	r0, r4
 8010fdc:	f002 f85c 	bl	8013098 <ucdr_alignment>
 8010fe0:	f1c5 0508 	rsb	r5, r5, #8
 8010fe4:	4428      	add	r0, r5
 8010fe6:	4420      	add	r0, r4
 8010fe8:	bd38      	pop	{r3, r4, r5, pc}
 8010fea:	bf00      	nop

08010fec <_Temperature__cdr_deserialize>:
 8010fec:	b538      	push	{r3, r4, r5, lr}
 8010fee:	460c      	mov	r4, r1
 8010ff0:	b199      	cbz	r1, 801101a <_Temperature__cdr_deserialize+0x2e>
 8010ff2:	4605      	mov	r5, r0
 8010ff4:	f000 fa14 	bl	8011420 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 8010ff8:	6843      	ldr	r3, [r0, #4]
 8010ffa:	4621      	mov	r1, r4
 8010ffc:	68db      	ldr	r3, [r3, #12]
 8010ffe:	4628      	mov	r0, r5
 8011000:	4798      	blx	r3
 8011002:	f104 0118 	add.w	r1, r4, #24
 8011006:	4628      	mov	r0, r5
 8011008:	f001 ff28 	bl	8012e5c <ucdr_deserialize_double>
 801100c:	f104 0120 	add.w	r1, r4, #32
 8011010:	4628      	mov	r0, r5
 8011012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011016:	f001 bf21 	b.w	8012e5c <ucdr_deserialize_double>
 801101a:	4608      	mov	r0, r1
 801101c:	bd38      	pop	{r3, r4, r5, pc}
 801101e:	bf00      	nop

08011020 <_Temperature__cdr_serialize>:
 8011020:	b1a8      	cbz	r0, 801104e <_Temperature__cdr_serialize+0x2e>
 8011022:	b538      	push	{r3, r4, r5, lr}
 8011024:	460d      	mov	r5, r1
 8011026:	4604      	mov	r4, r0
 8011028:	f000 f9fa 	bl	8011420 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>
 801102c:	6843      	ldr	r3, [r0, #4]
 801102e:	4629      	mov	r1, r5
 8011030:	689b      	ldr	r3, [r3, #8]
 8011032:	4620      	mov	r0, r4
 8011034:	4798      	blx	r3
 8011036:	ed94 0b06 	vldr	d0, [r4, #24]
 801103a:	4628      	mov	r0, r5
 801103c:	f001 fe3e 	bl	8012cbc <ucdr_serialize_double>
 8011040:	ed94 0b08 	vldr	d0, [r4, #32]
 8011044:	4628      	mov	r0, r5
 8011046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801104a:	f001 be37 	b.w	8012cbc <ucdr_serialize_double>
 801104e:	4770      	bx	lr

08011050 <_Temperature__get_serialized_size>:
 8011050:	b188      	cbz	r0, 8011076 <_Temperature__get_serialized_size+0x26>
 8011052:	b510      	push	{r4, lr}
 8011054:	2100      	movs	r1, #0
 8011056:	f000 f961 	bl	801131c <get_serialized_size_std_msgs__msg__Header>
 801105a:	2108      	movs	r1, #8
 801105c:	4604      	mov	r4, r0
 801105e:	f002 f81b 	bl	8013098 <ucdr_alignment>
 8011062:	4420      	add	r0, r4
 8011064:	f100 0408 	add.w	r4, r0, #8
 8011068:	2108      	movs	r1, #8
 801106a:	4620      	mov	r0, r4
 801106c:	f002 f814 	bl	8013098 <ucdr_alignment>
 8011070:	3008      	adds	r0, #8
 8011072:	4420      	add	r0, r4
 8011074:	bd10      	pop	{r4, pc}
 8011076:	4770      	bx	lr

08011078 <_Temperature__max_serialized_size>:
 8011078:	b510      	push	{r4, lr}
 801107a:	b082      	sub	sp, #8
 801107c:	2301      	movs	r3, #1
 801107e:	2100      	movs	r1, #0
 8011080:	f10d 0007 	add.w	r0, sp, #7
 8011084:	f88d 3007 	strb.w	r3, [sp, #7]
 8011088:	f000 f9c0 	bl	801140c <max_serialized_size_std_msgs__msg__Header>
 801108c:	2108      	movs	r1, #8
 801108e:	4604      	mov	r4, r0
 8011090:	f002 f802 	bl	8013098 <ucdr_alignment>
 8011094:	4420      	add	r0, r4
 8011096:	f100 0408 	add.w	r4, r0, #8
 801109a:	2108      	movs	r1, #8
 801109c:	4620      	mov	r0, r4
 801109e:	f001 fffb 	bl	8013098 <ucdr_alignment>
 80110a2:	3008      	adds	r0, #8
 80110a4:	4420      	add	r0, r4
 80110a6:	b002      	add	sp, #8
 80110a8:	bd10      	pop	{r4, pc}
 80110aa:	bf00      	nop

080110ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Temperature>:
 80110ac:	4800      	ldr	r0, [pc, #0]	; (80110b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__sensor_msgs__msg__Temperature+0x4>)
 80110ae:	4770      	bx	lr
 80110b0:	200005f4 	.word	0x200005f4

080110b4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 80110b4:	4b04      	ldr	r3, [pc, #16]	; (80110c8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 80110b6:	681a      	ldr	r2, [r3, #0]
 80110b8:	b10a      	cbz	r2, 80110be <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0xa>
 80110ba:	4803      	ldr	r0, [pc, #12]	; (80110c8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 80110bc:	4770      	bx	lr
 80110be:	4a03      	ldr	r2, [pc, #12]	; (80110cc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x18>)
 80110c0:	4801      	ldr	r0, [pc, #4]	; (80110c8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 80110c2:	6812      	ldr	r2, [r2, #0]
 80110c4:	601a      	str	r2, [r3, #0]
 80110c6:	4770      	bx	lr
 80110c8:	20000624 	.word	0x20000624
 80110cc:	200009b4 	.word	0x200009b4

080110d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 80110d0:	4a02      	ldr	r2, [pc, #8]	; (80110dc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0xc>)
 80110d2:	4b03      	ldr	r3, [pc, #12]	; (80110e0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x10>)
 80110d4:	6812      	ldr	r2, [r2, #0]
 80110d6:	601a      	str	r2, [r3, #0]
 80110d8:	4770      	bx	lr
 80110da:	bf00      	nop
 80110dc:	200009b4 	.word	0x200009b4
 80110e0:	20000624 	.word	0x20000624

080110e4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80110e4:	4b04      	ldr	r3, [pc, #16]	; (80110f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80110e6:	681a      	ldr	r2, [r3, #0]
 80110e8:	b10a      	cbz	r2, 80110ee <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 80110ea:	4803      	ldr	r0, [pc, #12]	; (80110f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80110ec:	4770      	bx	lr
 80110ee:	4a03      	ldr	r2, [pc, #12]	; (80110fc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 80110f0:	4801      	ldr	r0, [pc, #4]	; (80110f8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80110f2:	6812      	ldr	r2, [r2, #0]
 80110f4:	601a      	str	r2, [r3, #0]
 80110f6:	4770      	bx	lr
 80110f8:	20000638 	.word	0x20000638
 80110fc:	200009b4 	.word	0x200009b4

08011100 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 8011100:	4a02      	ldr	r2, [pc, #8]	; (801110c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 8011102:	4b03      	ldr	r3, [pc, #12]	; (8011110 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 8011104:	6812      	ldr	r2, [r2, #0]
 8011106:	601a      	str	r2, [r3, #0]
 8011108:	4770      	bx	lr
 801110a:	bf00      	nop
 801110c:	200009b4 	.word	0x200009b4
 8011110:	20000638 	.word	0x20000638

08011114 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 8011114:	4b04      	ldr	r3, [pc, #16]	; (8011128 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8011116:	681a      	ldr	r2, [r3, #0]
 8011118:	b10a      	cbz	r2, 801111e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0xa>
 801111a:	4803      	ldr	r0, [pc, #12]	; (8011128 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 801111c:	4770      	bx	lr
 801111e:	4a03      	ldr	r2, [pc, #12]	; (801112c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x18>)
 8011120:	4801      	ldr	r0, [pc, #4]	; (8011128 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 8011122:	6812      	ldr	r2, [r2, #0]
 8011124:	601a      	str	r2, [r3, #0]
 8011126:	4770      	bx	lr
 8011128:	2000064c 	.word	0x2000064c
 801112c:	200009b4 	.word	0x200009b4

08011130 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 8011130:	4a02      	ldr	r2, [pc, #8]	; (801113c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0xc>)
 8011132:	4b03      	ldr	r3, [pc, #12]	; (8011140 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int64+0x10>)
 8011134:	6812      	ldr	r2, [r2, #0]
 8011136:	601a      	str	r2, [r3, #0]
 8011138:	4770      	bx	lr
 801113a:	bf00      	nop
 801113c:	200009b4 	.word	0x200009b4
 8011140:	2000064c 	.word	0x2000064c

08011144 <std_msgs__msg__ColorRGBA__rosidl_typesupport_introspection_c__ColorRGBA_init_function>:
 8011144:	f006 be8c 	b.w	8017e60 <std_msgs__msg__ColorRGBA__init>

08011148 <std_msgs__msg__ColorRGBA__rosidl_typesupport_introspection_c__ColorRGBA_fini_function>:
 8011148:	f006 be8e 	b.w	8017e68 <std_msgs__msg__ColorRGBA__fini>

0801114c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 801114c:	4b04      	ldr	r3, [pc, #16]	; (8011160 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 801114e:	681a      	ldr	r2, [r3, #0]
 8011150:	b10a      	cbz	r2, 8011156 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0xa>
 8011152:	4803      	ldr	r0, [pc, #12]	; (8011160 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 8011154:	4770      	bx	lr
 8011156:	4a03      	ldr	r2, [pc, #12]	; (8011164 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x18>)
 8011158:	4801      	ldr	r0, [pc, #4]	; (8011160 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x14>)
 801115a:	6812      	ldr	r2, [r2, #0]
 801115c:	601a      	str	r2, [r3, #0]
 801115e:	4770      	bx	lr
 8011160:	20000748 	.word	0x20000748
 8011164:	200009b8 	.word	0x200009b8

08011168 <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_init_function>:
 8011168:	f006 be80 	b.w	8017e6c <std_msgs__msg__Header__init>

0801116c <std_msgs__msg__Header__rosidl_typesupport_introspection_c__Header_fini_function>:
 801116c:	f006 bea2 	b.w	8017eb4 <std_msgs__msg__Header__fini>

08011170 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011170:	b508      	push	{r3, lr}
 8011172:	f000 f9b9 	bl	80114e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 8011176:	4b06      	ldr	r3, [pc, #24]	; (8011190 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011178:	4906      	ldr	r1, [pc, #24]	; (8011194 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x24>)
 801117a:	681a      	ldr	r2, [r3, #0]
 801117c:	60c8      	str	r0, [r1, #12]
 801117e:	b10a      	cbz	r2, 8011184 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x14>
 8011180:	4803      	ldr	r0, [pc, #12]	; (8011190 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011182:	bd08      	pop	{r3, pc}
 8011184:	4a04      	ldr	r2, [pc, #16]	; (8011198 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x28>)
 8011186:	4802      	ldr	r0, [pc, #8]	; (8011190 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Header+0x20>)
 8011188:	6812      	ldr	r2, [r2, #0]
 801118a:	601a      	str	r2, [r3, #0]
 801118c:	bd08      	pop	{r3, pc}
 801118e:	bf00      	nop
 8011190:	200007cc 	.word	0x200007cc
 8011194:	20000754 	.word	0x20000754
 8011198:	200009b8 	.word	0x200009b8

0801119c <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 801119c:	f006 be96 	b.w	8017ecc <std_msgs__msg__Int32__init>

080111a0 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 80111a0:	f006 be98 	b.w	8017ed4 <std_msgs__msg__Int32__fini>

080111a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 80111a4:	4b04      	ldr	r3, [pc, #16]	; (80111b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80111a6:	681a      	ldr	r2, [r3, #0]
 80111a8:	b10a      	cbz	r2, 80111ae <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 80111aa:	4803      	ldr	r0, [pc, #12]	; (80111b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80111ac:	4770      	bx	lr
 80111ae:	4a03      	ldr	r2, [pc, #12]	; (80111bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 80111b0:	4801      	ldr	r0, [pc, #4]	; (80111b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 80111b2:	6812      	ldr	r2, [r2, #0]
 80111b4:	601a      	str	r2, [r3, #0]
 80111b6:	4770      	bx	lr
 80111b8:	20000814 	.word	0x20000814
 80111bc:	200009b8 	.word	0x200009b8

080111c0 <std_msgs__msg__Int64__rosidl_typesupport_introspection_c__Int64_init_function>:
 80111c0:	f006 be8a 	b.w	8017ed8 <std_msgs__msg__Int64__init>

080111c4 <std_msgs__msg__Int64__rosidl_typesupport_introspection_c__Int64_fini_function>:
 80111c4:	f006 be8c 	b.w	8017ee0 <std_msgs__msg__Int64__fini>

080111c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 80111c8:	4b04      	ldr	r3, [pc, #16]	; (80111dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 80111ca:	681a      	ldr	r2, [r3, #0]
 80111cc:	b10a      	cbz	r2, 80111d2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0xa>
 80111ce:	4803      	ldr	r0, [pc, #12]	; (80111dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 80111d0:	4770      	bx	lr
 80111d2:	4a03      	ldr	r2, [pc, #12]	; (80111e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x18>)
 80111d4:	4801      	ldr	r0, [pc, #4]	; (80111dc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int64+0x14>)
 80111d6:	6812      	ldr	r2, [r2, #0]
 80111d8:	601a      	str	r2, [r3, #0]
 80111da:	4770      	bx	lr
 80111dc:	2000085c 	.word	0x2000085c
 80111e0:	200009b8 	.word	0x200009b8

080111e4 <get_serialized_size_std_msgs__msg__ColorRGBA>:
 80111e4:	b1e0      	cbz	r0, 8011220 <get_serialized_size_std_msgs__msg__ColorRGBA+0x3c>
 80111e6:	b570      	push	{r4, r5, r6, lr}
 80111e8:	460d      	mov	r5, r1
 80111ea:	4628      	mov	r0, r5
 80111ec:	2104      	movs	r1, #4
 80111ee:	f001 ff53 	bl	8013098 <ucdr_alignment>
 80111f2:	1d2b      	adds	r3, r5, #4
 80111f4:	181e      	adds	r6, r3, r0
 80111f6:	2104      	movs	r1, #4
 80111f8:	4630      	mov	r0, r6
 80111fa:	f001 ff4d 	bl	8013098 <ucdr_alignment>
 80111fe:	1d04      	adds	r4, r0, #4
 8011200:	4434      	add	r4, r6
 8011202:	2104      	movs	r1, #4
 8011204:	4620      	mov	r0, r4
 8011206:	f001 ff47 	bl	8013098 <ucdr_alignment>
 801120a:	3004      	adds	r0, #4
 801120c:	4404      	add	r4, r0
 801120e:	2104      	movs	r1, #4
 8011210:	4620      	mov	r0, r4
 8011212:	f001 ff41 	bl	8013098 <ucdr_alignment>
 8011216:	f1c5 0504 	rsb	r5, r5, #4
 801121a:	4428      	add	r0, r5
 801121c:	4420      	add	r0, r4
 801121e:	bd70      	pop	{r4, r5, r6, pc}
 8011220:	4770      	bx	lr
 8011222:	bf00      	nop

08011224 <_ColorRGBA__cdr_deserialize>:
 8011224:	b538      	push	{r3, r4, r5, lr}
 8011226:	460c      	mov	r4, r1
 8011228:	b191      	cbz	r1, 8011250 <_ColorRGBA__cdr_deserialize+0x2c>
 801122a:	4605      	mov	r5, r0
 801122c:	f001 fc20 	bl	8012a70 <ucdr_deserialize_float>
 8011230:	1d21      	adds	r1, r4, #4
 8011232:	4628      	mov	r0, r5
 8011234:	f001 fc1c 	bl	8012a70 <ucdr_deserialize_float>
 8011238:	f104 0108 	add.w	r1, r4, #8
 801123c:	4628      	mov	r0, r5
 801123e:	f001 fc17 	bl	8012a70 <ucdr_deserialize_float>
 8011242:	f104 010c 	add.w	r1, r4, #12
 8011246:	4628      	mov	r0, r5
 8011248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801124c:	f001 bc10 	b.w	8012a70 <ucdr_deserialize_float>
 8011250:	4608      	mov	r0, r1
 8011252:	bd38      	pop	{r3, r4, r5, pc}

08011254 <_ColorRGBA__cdr_serialize>:
 8011254:	b1c0      	cbz	r0, 8011288 <_ColorRGBA__cdr_serialize+0x34>
 8011256:	b538      	push	{r3, r4, r5, lr}
 8011258:	ed90 0a00 	vldr	s0, [r0]
 801125c:	460d      	mov	r5, r1
 801125e:	4604      	mov	r4, r0
 8011260:	4608      	mov	r0, r1
 8011262:	f001 fad3 	bl	801280c <ucdr_serialize_float>
 8011266:	ed94 0a01 	vldr	s0, [r4, #4]
 801126a:	4628      	mov	r0, r5
 801126c:	f001 face 	bl	801280c <ucdr_serialize_float>
 8011270:	ed94 0a02 	vldr	s0, [r4, #8]
 8011274:	4628      	mov	r0, r5
 8011276:	f001 fac9 	bl	801280c <ucdr_serialize_float>
 801127a:	ed94 0a03 	vldr	s0, [r4, #12]
 801127e:	4628      	mov	r0, r5
 8011280:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011284:	f001 bac2 	b.w	801280c <ucdr_serialize_float>
 8011288:	4770      	bx	lr
 801128a:	bf00      	nop

0801128c <_ColorRGBA__get_serialized_size>:
 801128c:	b1c0      	cbz	r0, 80112c0 <_ColorRGBA__get_serialized_size+0x34>
 801128e:	b538      	push	{r3, r4, r5, lr}
 8011290:	2104      	movs	r1, #4
 8011292:	2000      	movs	r0, #0
 8011294:	f001 ff00 	bl	8013098 <ucdr_alignment>
 8011298:	1d05      	adds	r5, r0, #4
 801129a:	2104      	movs	r1, #4
 801129c:	4628      	mov	r0, r5
 801129e:	f001 fefb 	bl	8013098 <ucdr_alignment>
 80112a2:	1d04      	adds	r4, r0, #4
 80112a4:	442c      	add	r4, r5
 80112a6:	2104      	movs	r1, #4
 80112a8:	4620      	mov	r0, r4
 80112aa:	f001 fef5 	bl	8013098 <ucdr_alignment>
 80112ae:	3004      	adds	r0, #4
 80112b0:	4404      	add	r4, r0
 80112b2:	2104      	movs	r1, #4
 80112b4:	4620      	mov	r0, r4
 80112b6:	f001 feef 	bl	8013098 <ucdr_alignment>
 80112ba:	3004      	adds	r0, #4
 80112bc:	4420      	add	r0, r4
 80112be:	bd38      	pop	{r3, r4, r5, pc}
 80112c0:	4770      	bx	lr
 80112c2:	bf00      	nop

080112c4 <_ColorRGBA__max_serialized_size>:
 80112c4:	b538      	push	{r3, r4, r5, lr}
 80112c6:	2104      	movs	r1, #4
 80112c8:	2000      	movs	r0, #0
 80112ca:	f001 fee5 	bl	8013098 <ucdr_alignment>
 80112ce:	1d05      	adds	r5, r0, #4
 80112d0:	2104      	movs	r1, #4
 80112d2:	4628      	mov	r0, r5
 80112d4:	f001 fee0 	bl	8013098 <ucdr_alignment>
 80112d8:	1d04      	adds	r4, r0, #4
 80112da:	442c      	add	r4, r5
 80112dc:	2104      	movs	r1, #4
 80112de:	4620      	mov	r0, r4
 80112e0:	f001 feda 	bl	8013098 <ucdr_alignment>
 80112e4:	3004      	adds	r0, #4
 80112e6:	4404      	add	r4, r0
 80112e8:	2104      	movs	r1, #4
 80112ea:	4620      	mov	r0, r4
 80112ec:	f001 fed4 	bl	8013098 <ucdr_alignment>
 80112f0:	3004      	adds	r0, #4
 80112f2:	4420      	add	r0, r4
 80112f4:	bd38      	pop	{r3, r4, r5, pc}
 80112f6:	bf00      	nop

080112f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA>:
 80112f8:	4800      	ldr	r0, [pc, #0]	; (80112fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__ColorRGBA+0x4>)
 80112fa:	4770      	bx	lr
 80112fc:	20000868 	.word	0x20000868

08011300 <_Header__max_serialized_size>:
 8011300:	b500      	push	{lr}
 8011302:	b083      	sub	sp, #12
 8011304:	2301      	movs	r3, #1
 8011306:	2100      	movs	r1, #0
 8011308:	f10d 0007 	add.w	r0, sp, #7
 801130c:	f88d 3007 	strb.w	r3, [sp, #7]
 8011310:	f000 f948 	bl	80115a4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011314:	b003      	add	sp, #12
 8011316:	f85d fb04 	ldr.w	pc, [sp], #4
 801131a:	bf00      	nop

0801131c <get_serialized_size_std_msgs__msg__Header>:
 801131c:	b570      	push	{r4, r5, r6, lr}
 801131e:	4605      	mov	r5, r0
 8011320:	b168      	cbz	r0, 801133e <get_serialized_size_std_msgs__msg__Header+0x22>
 8011322:	460c      	mov	r4, r1
 8011324:	f000 f8ee 	bl	8011504 <get_serialized_size_builtin_interfaces__msg__Time>
 8011328:	1826      	adds	r6, r4, r0
 801132a:	2104      	movs	r1, #4
 801132c:	4630      	mov	r0, r6
 801132e:	f001 feb3 	bl	8013098 <ucdr_alignment>
 8011332:	68e9      	ldr	r1, [r5, #12]
 8011334:	f1c4 0405 	rsb	r4, r4, #5
 8011338:	440c      	add	r4, r1
 801133a:	4404      	add	r4, r0
 801133c:	19a0      	adds	r0, r4, r6
 801133e:	bd70      	pop	{r4, r5, r6, pc}

08011340 <_Header__cdr_deserialize>:
 8011340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011342:	460c      	mov	r4, r1
 8011344:	b083      	sub	sp, #12
 8011346:	b1e1      	cbz	r1, 8011382 <_Header__cdr_deserialize+0x42>
 8011348:	4606      	mov	r6, r0
 801134a:	f000 f93f 	bl	80115cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 801134e:	6843      	ldr	r3, [r0, #4]
 8011350:	4621      	mov	r1, r4
 8011352:	68db      	ldr	r3, [r3, #12]
 8011354:	4630      	mov	r0, r6
 8011356:	4798      	blx	r3
 8011358:	6927      	ldr	r7, [r4, #16]
 801135a:	68a1      	ldr	r1, [r4, #8]
 801135c:	ab01      	add	r3, sp, #4
 801135e:	463a      	mov	r2, r7
 8011360:	4630      	mov	r0, r6
 8011362:	f001 ff17 	bl	8013194 <ucdr_deserialize_sequence_char>
 8011366:	9b01      	ldr	r3, [sp, #4]
 8011368:	4605      	mov	r5, r0
 801136a:	b920      	cbnz	r0, 8011376 <_Header__cdr_deserialize+0x36>
 801136c:	429f      	cmp	r7, r3
 801136e:	d30c      	bcc.n	801138a <_Header__cdr_deserialize+0x4a>
 8011370:	4628      	mov	r0, r5
 8011372:	b003      	add	sp, #12
 8011374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011376:	b103      	cbz	r3, 801137a <_Header__cdr_deserialize+0x3a>
 8011378:	3b01      	subs	r3, #1
 801137a:	4628      	mov	r0, r5
 801137c:	60e3      	str	r3, [r4, #12]
 801137e:	b003      	add	sp, #12
 8011380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011382:	460d      	mov	r5, r1
 8011384:	4628      	mov	r0, r5
 8011386:	b003      	add	sp, #12
 8011388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801138a:	2101      	movs	r1, #1
 801138c:	75b0      	strb	r0, [r6, #22]
 801138e:	7571      	strb	r1, [r6, #21]
 8011390:	4630      	mov	r0, r6
 8011392:	60e5      	str	r5, [r4, #12]
 8011394:	f001 fe96 	bl	80130c4 <ucdr_align_to>
 8011398:	4630      	mov	r0, r6
 801139a:	9901      	ldr	r1, [sp, #4]
 801139c:	f001 fec8 	bl	8013130 <ucdr_advance_buffer>
 80113a0:	4628      	mov	r0, r5
 80113a2:	b003      	add	sp, #12
 80113a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113a6:	bf00      	nop

080113a8 <_Header__cdr_serialize>:
 80113a8:	b1f8      	cbz	r0, 80113ea <_Header__cdr_serialize+0x42>
 80113aa:	b570      	push	{r4, r5, r6, lr}
 80113ac:	4604      	mov	r4, r0
 80113ae:	460d      	mov	r5, r1
 80113b0:	f000 f90c 	bl	80115cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 80113b4:	6843      	ldr	r3, [r0, #4]
 80113b6:	4629      	mov	r1, r5
 80113b8:	689b      	ldr	r3, [r3, #8]
 80113ba:	4620      	mov	r0, r4
 80113bc:	4798      	blx	r3
 80113be:	68a6      	ldr	r6, [r4, #8]
 80113c0:	b156      	cbz	r6, 80113d8 <_Header__cdr_serialize+0x30>
 80113c2:	4630      	mov	r0, r6
 80113c4:	f7ee ff0e 	bl	80001e4 <strlen>
 80113c8:	4631      	mov	r1, r6
 80113ca:	60e0      	str	r0, [r4, #12]
 80113cc:	1c42      	adds	r2, r0, #1
 80113ce:	4628      	mov	r0, r5
 80113d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113d4:	f001 becc 	b.w	8013170 <ucdr_serialize_sequence_char>
 80113d8:	4630      	mov	r0, r6
 80113da:	60e0      	str	r0, [r4, #12]
 80113dc:	4632      	mov	r2, r6
 80113de:	4631      	mov	r1, r6
 80113e0:	4628      	mov	r0, r5
 80113e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80113e6:	f001 bec3 	b.w	8013170 <ucdr_serialize_sequence_char>
 80113ea:	4770      	bx	lr

080113ec <_Header__get_serialized_size>:
 80113ec:	b538      	push	{r3, r4, r5, lr}
 80113ee:	4604      	mov	r4, r0
 80113f0:	b150      	cbz	r0, 8011408 <_Header__get_serialized_size+0x1c>
 80113f2:	2100      	movs	r1, #0
 80113f4:	f000 f886 	bl	8011504 <get_serialized_size_builtin_interfaces__msg__Time>
 80113f8:	2104      	movs	r1, #4
 80113fa:	4605      	mov	r5, r0
 80113fc:	f001 fe4c 	bl	8013098 <ucdr_alignment>
 8011400:	68e2      	ldr	r2, [r4, #12]
 8011402:	3205      	adds	r2, #5
 8011404:	1953      	adds	r3, r2, r5
 8011406:	4418      	add	r0, r3
 8011408:	bd38      	pop	{r3, r4, r5, pc}
 801140a:	bf00      	nop

0801140c <max_serialized_size_std_msgs__msg__Header>:
 801140c:	b510      	push	{r4, lr}
 801140e:	2301      	movs	r3, #1
 8011410:	4604      	mov	r4, r0
 8011412:	7003      	strb	r3, [r0, #0]
 8011414:	f000 f8c6 	bl	80115a4 <max_serialized_size_builtin_interfaces__msg__Time>
 8011418:	2300      	movs	r3, #0
 801141a:	7023      	strb	r3, [r4, #0]
 801141c:	bd10      	pop	{r4, pc}
 801141e:	bf00      	nop

08011420 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header>:
 8011420:	4800      	ldr	r0, [pc, #0]	; (8011424 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Header+0x4>)
 8011422:	4770      	bx	lr
 8011424:	20000890 	.word	0x20000890

08011428 <_Int32__max_serialized_size>:
 8011428:	b508      	push	{r3, lr}
 801142a:	2104      	movs	r1, #4
 801142c:	2000      	movs	r0, #0
 801142e:	f001 fe33 	bl	8013098 <ucdr_alignment>
 8011432:	3004      	adds	r0, #4
 8011434:	bd08      	pop	{r3, pc}
 8011436:	bf00      	nop

08011438 <_Int32__cdr_deserialize>:
 8011438:	b109      	cbz	r1, 801143e <_Int32__cdr_deserialize+0x6>
 801143a:	f000 bfc1 	b.w	80123c0 <ucdr_deserialize_int32_t>
 801143e:	4608      	mov	r0, r1
 8011440:	4770      	bx	lr
 8011442:	bf00      	nop

08011444 <get_serialized_size_std_msgs__msg__Int32>:
 8011444:	b138      	cbz	r0, 8011456 <get_serialized_size_std_msgs__msg__Int32+0x12>
 8011446:	b508      	push	{r3, lr}
 8011448:	460b      	mov	r3, r1
 801144a:	4618      	mov	r0, r3
 801144c:	2104      	movs	r1, #4
 801144e:	f001 fe23 	bl	8013098 <ucdr_alignment>
 8011452:	3004      	adds	r0, #4
 8011454:	bd08      	pop	{r3, pc}
 8011456:	4770      	bx	lr

08011458 <_Int32__cdr_serialize>:
 8011458:	460a      	mov	r2, r1
 801145a:	b118      	cbz	r0, 8011464 <_Int32__cdr_serialize+0xc>
 801145c:	6801      	ldr	r1, [r0, #0]
 801145e:	4610      	mov	r0, r2
 8011460:	f000 bf16 	b.w	8012290 <ucdr_serialize_int32_t>
 8011464:	4770      	bx	lr
 8011466:	bf00      	nop

08011468 <_Int32__get_serialized_size>:
 8011468:	b130      	cbz	r0, 8011478 <_Int32__get_serialized_size+0x10>
 801146a:	b508      	push	{r3, lr}
 801146c:	2104      	movs	r1, #4
 801146e:	2000      	movs	r0, #0
 8011470:	f001 fe12 	bl	8013098 <ucdr_alignment>
 8011474:	3004      	adds	r0, #4
 8011476:	bd08      	pop	{r3, pc}
 8011478:	4770      	bx	lr
 801147a:	bf00      	nop

0801147c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 801147c:	4800      	ldr	r0, [pc, #0]	; (8011480 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 801147e:	4770      	bx	lr
 8011480:	200008b8 	.word	0x200008b8

08011484 <_Int64__max_serialized_size>:
 8011484:	b508      	push	{r3, lr}
 8011486:	2108      	movs	r1, #8
 8011488:	2000      	movs	r0, #0
 801148a:	f001 fe05 	bl	8013098 <ucdr_alignment>
 801148e:	3008      	adds	r0, #8
 8011490:	bd08      	pop	{r3, pc}
 8011492:	bf00      	nop

08011494 <_Int64__cdr_deserialize>:
 8011494:	b109      	cbz	r1, 801149a <_Int64__cdr_deserialize+0x6>
 8011496:	f001 b8f3 	b.w	8012680 <ucdr_deserialize_int64_t>
 801149a:	4608      	mov	r0, r1
 801149c:	4770      	bx	lr
 801149e:	bf00      	nop

080114a0 <_Int64__get_serialized_size>:
 80114a0:	b130      	cbz	r0, 80114b0 <_Int64__get_serialized_size+0x10>
 80114a2:	b508      	push	{r3, lr}
 80114a4:	2108      	movs	r1, #8
 80114a6:	2000      	movs	r0, #0
 80114a8:	f001 fdf6 	bl	8013098 <ucdr_alignment>
 80114ac:	3008      	adds	r0, #8
 80114ae:	bd08      	pop	{r3, pc}
 80114b0:	4770      	bx	lr
 80114b2:	bf00      	nop

080114b4 <_Int64__cdr_serialize>:
 80114b4:	b120      	cbz	r0, 80114c0 <_Int64__cdr_serialize+0xc>
 80114b6:	e9d0 2300 	ldrd	r2, r3, [r0]
 80114ba:	4608      	mov	r0, r1
 80114bc:	f001 b810 	b.w	80124e0 <ucdr_serialize_int64_t>
 80114c0:	4770      	bx	lr
 80114c2:	bf00      	nop

080114c4 <get_serialized_size_std_msgs__msg__Int64>:
 80114c4:	b138      	cbz	r0, 80114d6 <get_serialized_size_std_msgs__msg__Int64+0x12>
 80114c6:	b508      	push	{r3, lr}
 80114c8:	460b      	mov	r3, r1
 80114ca:	4618      	mov	r0, r3
 80114cc:	2108      	movs	r1, #8
 80114ce:	f001 fde3 	bl	8013098 <ucdr_alignment>
 80114d2:	3008      	adds	r0, #8
 80114d4:	bd08      	pop	{r3, pc}
 80114d6:	4770      	bx	lr

080114d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int64>:
 80114d8:	4800      	ldr	r0, [pc, #0]	; (80114dc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int64+0x4>)
 80114da:	4770      	bx	lr
 80114dc:	200008e0 	.word	0x200008e0

080114e0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 80114e0:	f006 bd00 	b.w	8017ee4 <builtin_interfaces__msg__Time__init>

080114e4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 80114e4:	f006 bd02 	b.w	8017eec <builtin_interfaces__msg__Time__fini>

080114e8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80114e8:	4b04      	ldr	r3, [pc, #16]	; (80114fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80114ea:	681a      	ldr	r2, [r3, #0]
 80114ec:	b10a      	cbz	r2, 80114f2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 80114ee:	4803      	ldr	r0, [pc, #12]	; (80114fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80114f0:	4770      	bx	lr
 80114f2:	4a03      	ldr	r2, [pc, #12]	; (8011500 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 80114f4:	4801      	ldr	r0, [pc, #4]	; (80114fc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 80114f6:	6812      	ldr	r2, [r2, #0]
 80114f8:	601a      	str	r2, [r3, #0]
 80114fa:	4770      	bx	lr
 80114fc:	20000980 	.word	0x20000980
 8011500:	200009b8 	.word	0x200009b8

08011504 <get_serialized_size_builtin_interfaces__msg__Time>:
 8011504:	b180      	cbz	r0, 8011528 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 8011506:	b538      	push	{r3, r4, r5, lr}
 8011508:	460d      	mov	r5, r1
 801150a:	4628      	mov	r0, r5
 801150c:	2104      	movs	r1, #4
 801150e:	f001 fdc3 	bl	8013098 <ucdr_alignment>
 8011512:	1d2b      	adds	r3, r5, #4
 8011514:	181c      	adds	r4, r3, r0
 8011516:	2104      	movs	r1, #4
 8011518:	4620      	mov	r0, r4
 801151a:	f001 fdbd 	bl	8013098 <ucdr_alignment>
 801151e:	f1c5 0504 	rsb	r5, r5, #4
 8011522:	4428      	add	r0, r5
 8011524:	4420      	add	r0, r4
 8011526:	bd38      	pop	{r3, r4, r5, pc}
 8011528:	4770      	bx	lr
 801152a:	bf00      	nop

0801152c <_Time__cdr_deserialize>:
 801152c:	b538      	push	{r3, r4, r5, lr}
 801152e:	460c      	mov	r4, r1
 8011530:	b141      	cbz	r1, 8011544 <_Time__cdr_deserialize+0x18>
 8011532:	4605      	mov	r5, r0
 8011534:	f000 ff44 	bl	80123c0 <ucdr_deserialize_int32_t>
 8011538:	1d21      	adds	r1, r4, #4
 801153a:	4628      	mov	r0, r5
 801153c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011540:	f000 bbbc 	b.w	8011cbc <ucdr_deserialize_uint32_t>
 8011544:	4608      	mov	r0, r1
 8011546:	bd38      	pop	{r3, r4, r5, pc}

08011548 <_Time__cdr_serialize>:
 8011548:	b160      	cbz	r0, 8011564 <_Time__cdr_serialize+0x1c>
 801154a:	b538      	push	{r3, r4, r5, lr}
 801154c:	460d      	mov	r5, r1
 801154e:	4604      	mov	r4, r0
 8011550:	6801      	ldr	r1, [r0, #0]
 8011552:	4628      	mov	r0, r5
 8011554:	f000 fe9c 	bl	8012290 <ucdr_serialize_int32_t>
 8011558:	6861      	ldr	r1, [r4, #4]
 801155a:	4628      	mov	r0, r5
 801155c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011560:	f000 ba7c 	b.w	8011a5c <ucdr_serialize_uint32_t>
 8011564:	4770      	bx	lr
 8011566:	bf00      	nop

08011568 <_Time__get_serialized_size>:
 8011568:	b160      	cbz	r0, 8011584 <_Time__get_serialized_size+0x1c>
 801156a:	b510      	push	{r4, lr}
 801156c:	2104      	movs	r1, #4
 801156e:	2000      	movs	r0, #0
 8011570:	f001 fd92 	bl	8013098 <ucdr_alignment>
 8011574:	1d04      	adds	r4, r0, #4
 8011576:	2104      	movs	r1, #4
 8011578:	4620      	mov	r0, r4
 801157a:	f001 fd8d 	bl	8013098 <ucdr_alignment>
 801157e:	3004      	adds	r0, #4
 8011580:	4420      	add	r0, r4
 8011582:	bd10      	pop	{r4, pc}
 8011584:	4770      	bx	lr
 8011586:	bf00      	nop

08011588 <_Time__max_serialized_size>:
 8011588:	b510      	push	{r4, lr}
 801158a:	2104      	movs	r1, #4
 801158c:	2000      	movs	r0, #0
 801158e:	f001 fd83 	bl	8013098 <ucdr_alignment>
 8011592:	1d04      	adds	r4, r0, #4
 8011594:	2104      	movs	r1, #4
 8011596:	4620      	mov	r0, r4
 8011598:	f001 fd7e 	bl	8013098 <ucdr_alignment>
 801159c:	3004      	adds	r0, #4
 801159e:	4420      	add	r0, r4
 80115a0:	bd10      	pop	{r4, pc}
 80115a2:	bf00      	nop

080115a4 <max_serialized_size_builtin_interfaces__msg__Time>:
 80115a4:	b538      	push	{r3, r4, r5, lr}
 80115a6:	460c      	mov	r4, r1
 80115a8:	2301      	movs	r3, #1
 80115aa:	7003      	strb	r3, [r0, #0]
 80115ac:	2104      	movs	r1, #4
 80115ae:	4620      	mov	r0, r4
 80115b0:	f001 fd72 	bl	8013098 <ucdr_alignment>
 80115b4:	1d25      	adds	r5, r4, #4
 80115b6:	4405      	add	r5, r0
 80115b8:	2104      	movs	r1, #4
 80115ba:	4628      	mov	r0, r5
 80115bc:	f001 fd6c 	bl	8013098 <ucdr_alignment>
 80115c0:	f1c4 0404 	rsb	r4, r4, #4
 80115c4:	4420      	add	r0, r4
 80115c6:	4428      	add	r0, r5
 80115c8:	bd38      	pop	{r3, r4, r5, pc}
 80115ca:	bf00      	nop

080115cc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 80115cc:	4800      	ldr	r0, [pc, #0]	; (80115d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 80115ce:	4770      	bx	lr
 80115d0:	2000098c 	.word	0x2000098c

080115d4 <ucdr_serialize_bool>:
 80115d4:	b538      	push	{r3, r4, r5, lr}
 80115d6:	460d      	mov	r5, r1
 80115d8:	2101      	movs	r1, #1
 80115da:	4604      	mov	r4, r0
 80115dc:	f001 fd10 	bl	8013000 <ucdr_check_final_buffer_behavior>
 80115e0:	b148      	cbz	r0, 80115f6 <ucdr_serialize_bool+0x22>
 80115e2:	68a3      	ldr	r3, [r4, #8]
 80115e4:	701d      	strb	r5, [r3, #0]
 80115e6:	68a2      	ldr	r2, [r4, #8]
 80115e8:	6923      	ldr	r3, [r4, #16]
 80115ea:	2101      	movs	r1, #1
 80115ec:	440a      	add	r2, r1
 80115ee:	440b      	add	r3, r1
 80115f0:	60a2      	str	r2, [r4, #8]
 80115f2:	6123      	str	r3, [r4, #16]
 80115f4:	7561      	strb	r1, [r4, #21]
 80115f6:	7da0      	ldrb	r0, [r4, #22]
 80115f8:	f080 0001 	eor.w	r0, r0, #1
 80115fc:	bd38      	pop	{r3, r4, r5, pc}
 80115fe:	bf00      	nop

08011600 <ucdr_deserialize_bool>:
 8011600:	b538      	push	{r3, r4, r5, lr}
 8011602:	460d      	mov	r5, r1
 8011604:	2101      	movs	r1, #1
 8011606:	4604      	mov	r4, r0
 8011608:	f001 fcfa 	bl	8013000 <ucdr_check_final_buffer_behavior>
 801160c:	b160      	cbz	r0, 8011628 <ucdr_deserialize_bool+0x28>
 801160e:	68a2      	ldr	r2, [r4, #8]
 8011610:	6923      	ldr	r3, [r4, #16]
 8011612:	f812 1b01 	ldrb.w	r1, [r2], #1
 8011616:	3900      	subs	r1, #0
 8011618:	bf18      	it	ne
 801161a:	2101      	movne	r1, #1
 801161c:	7029      	strb	r1, [r5, #0]
 801161e:	3301      	adds	r3, #1
 8011620:	2101      	movs	r1, #1
 8011622:	60a2      	str	r2, [r4, #8]
 8011624:	6123      	str	r3, [r4, #16]
 8011626:	7561      	strb	r1, [r4, #21]
 8011628:	7da0      	ldrb	r0, [r4, #22]
 801162a:	f080 0001 	eor.w	r0, r0, #1
 801162e:	bd38      	pop	{r3, r4, r5, pc}

08011630 <ucdr_serialize_uint8_t>:
 8011630:	b538      	push	{r3, r4, r5, lr}
 8011632:	460d      	mov	r5, r1
 8011634:	2101      	movs	r1, #1
 8011636:	4604      	mov	r4, r0
 8011638:	f001 fce2 	bl	8013000 <ucdr_check_final_buffer_behavior>
 801163c:	b148      	cbz	r0, 8011652 <ucdr_serialize_uint8_t+0x22>
 801163e:	68a3      	ldr	r3, [r4, #8]
 8011640:	701d      	strb	r5, [r3, #0]
 8011642:	68a2      	ldr	r2, [r4, #8]
 8011644:	6923      	ldr	r3, [r4, #16]
 8011646:	2101      	movs	r1, #1
 8011648:	440a      	add	r2, r1
 801164a:	440b      	add	r3, r1
 801164c:	60a2      	str	r2, [r4, #8]
 801164e:	6123      	str	r3, [r4, #16]
 8011650:	7561      	strb	r1, [r4, #21]
 8011652:	7da0      	ldrb	r0, [r4, #22]
 8011654:	f080 0001 	eor.w	r0, r0, #1
 8011658:	bd38      	pop	{r3, r4, r5, pc}
 801165a:	bf00      	nop

0801165c <ucdr_deserialize_uint8_t>:
 801165c:	b538      	push	{r3, r4, r5, lr}
 801165e:	460d      	mov	r5, r1
 8011660:	2101      	movs	r1, #1
 8011662:	4604      	mov	r4, r0
 8011664:	f001 fccc 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8011668:	b150      	cbz	r0, 8011680 <ucdr_deserialize_uint8_t+0x24>
 801166a:	68a3      	ldr	r3, [r4, #8]
 801166c:	781b      	ldrb	r3, [r3, #0]
 801166e:	702b      	strb	r3, [r5, #0]
 8011670:	68a2      	ldr	r2, [r4, #8]
 8011672:	6923      	ldr	r3, [r4, #16]
 8011674:	2101      	movs	r1, #1
 8011676:	440a      	add	r2, r1
 8011678:	440b      	add	r3, r1
 801167a:	60a2      	str	r2, [r4, #8]
 801167c:	6123      	str	r3, [r4, #16]
 801167e:	7561      	strb	r1, [r4, #21]
 8011680:	7da0      	ldrb	r0, [r4, #22]
 8011682:	f080 0001 	eor.w	r0, r0, #1
 8011686:	bd38      	pop	{r3, r4, r5, pc}

08011688 <ucdr_serialize_uint16_t>:
 8011688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801168c:	b082      	sub	sp, #8
 801168e:	460b      	mov	r3, r1
 8011690:	2102      	movs	r1, #2
 8011692:	4604      	mov	r4, r0
 8011694:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011698:	f001 fd06 	bl	80130a8 <ucdr_buffer_alignment>
 801169c:	4601      	mov	r1, r0
 801169e:	4620      	mov	r0, r4
 80116a0:	7d67      	ldrb	r7, [r4, #21]
 80116a2:	f001 fd45 	bl	8013130 <ucdr_advance_buffer>
 80116a6:	2102      	movs	r1, #2
 80116a8:	4620      	mov	r0, r4
 80116aa:	f001 fc9d 	bl	8012fe8 <ucdr_check_buffer_available_for>
 80116ae:	bb78      	cbnz	r0, 8011710 <ucdr_serialize_uint16_t+0x88>
 80116b0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80116b4:	42ab      	cmp	r3, r5
 80116b6:	d926      	bls.n	8011706 <ucdr_serialize_uint16_t+0x7e>
 80116b8:	1b5e      	subs	r6, r3, r5
 80116ba:	60a3      	str	r3, [r4, #8]
 80116bc:	6923      	ldr	r3, [r4, #16]
 80116be:	f1c6 0802 	rsb	r8, r6, #2
 80116c2:	4433      	add	r3, r6
 80116c4:	6123      	str	r3, [r4, #16]
 80116c6:	4641      	mov	r1, r8
 80116c8:	4620      	mov	r0, r4
 80116ca:	f001 fc99 	bl	8013000 <ucdr_check_final_buffer_behavior>
 80116ce:	2800      	cmp	r0, #0
 80116d0:	d03b      	beq.n	801174a <ucdr_serialize_uint16_t+0xc2>
 80116d2:	7d23      	ldrb	r3, [r4, #20]
 80116d4:	2b01      	cmp	r3, #1
 80116d6:	d04a      	beq.n	801176e <ucdr_serialize_uint16_t+0xe6>
 80116d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80116dc:	702b      	strb	r3, [r5, #0]
 80116de:	2e00      	cmp	r6, #0
 80116e0:	d040      	beq.n	8011764 <ucdr_serialize_uint16_t+0xdc>
 80116e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80116e6:	706b      	strb	r3, [r5, #1]
 80116e8:	6923      	ldr	r3, [r4, #16]
 80116ea:	68a2      	ldr	r2, [r4, #8]
 80116ec:	7da0      	ldrb	r0, [r4, #22]
 80116ee:	3302      	adds	r3, #2
 80116f0:	1b9e      	subs	r6, r3, r6
 80116f2:	4442      	add	r2, r8
 80116f4:	2302      	movs	r3, #2
 80116f6:	f080 0001 	eor.w	r0, r0, #1
 80116fa:	60a2      	str	r2, [r4, #8]
 80116fc:	6126      	str	r6, [r4, #16]
 80116fe:	7563      	strb	r3, [r4, #21]
 8011700:	b002      	add	sp, #8
 8011702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011706:	2102      	movs	r1, #2
 8011708:	4620      	mov	r0, r4
 801170a:	f001 fc79 	bl	8013000 <ucdr_check_final_buffer_behavior>
 801170e:	b190      	cbz	r0, 8011736 <ucdr_serialize_uint16_t+0xae>
 8011710:	7d23      	ldrb	r3, [r4, #20]
 8011712:	2b01      	cmp	r3, #1
 8011714:	68a3      	ldr	r3, [r4, #8]
 8011716:	d014      	beq.n	8011742 <ucdr_serialize_uint16_t+0xba>
 8011718:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801171c:	701a      	strb	r2, [r3, #0]
 801171e:	68a3      	ldr	r3, [r4, #8]
 8011720:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011724:	705a      	strb	r2, [r3, #1]
 8011726:	68a2      	ldr	r2, [r4, #8]
 8011728:	6923      	ldr	r3, [r4, #16]
 801172a:	3202      	adds	r2, #2
 801172c:	3302      	adds	r3, #2
 801172e:	2102      	movs	r1, #2
 8011730:	60a2      	str	r2, [r4, #8]
 8011732:	6123      	str	r3, [r4, #16]
 8011734:	7561      	strb	r1, [r4, #21]
 8011736:	7da0      	ldrb	r0, [r4, #22]
 8011738:	f080 0001 	eor.w	r0, r0, #1
 801173c:	b002      	add	sp, #8
 801173e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011742:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011746:	801a      	strh	r2, [r3, #0]
 8011748:	e7ed      	b.n	8011726 <ucdr_serialize_uint16_t+0x9e>
 801174a:	68a2      	ldr	r2, [r4, #8]
 801174c:	6923      	ldr	r3, [r4, #16]
 801174e:	7da0      	ldrb	r0, [r4, #22]
 8011750:	7567      	strb	r7, [r4, #21]
 8011752:	1b92      	subs	r2, r2, r6
 8011754:	1b9b      	subs	r3, r3, r6
 8011756:	f080 0001 	eor.w	r0, r0, #1
 801175a:	60a2      	str	r2, [r4, #8]
 801175c:	6123      	str	r3, [r4, #16]
 801175e:	b002      	add	sp, #8
 8011760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011764:	68a3      	ldr	r3, [r4, #8]
 8011766:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801176a:	701a      	strb	r2, [r3, #0]
 801176c:	e7bc      	b.n	80116e8 <ucdr_serialize_uint16_t+0x60>
 801176e:	4628      	mov	r0, r5
 8011770:	f10d 0506 	add.w	r5, sp, #6
 8011774:	4629      	mov	r1, r5
 8011776:	4632      	mov	r2, r6
 8011778:	f009 f816 	bl	801a7a8 <memcpy>
 801177c:	68a0      	ldr	r0, [r4, #8]
 801177e:	4642      	mov	r2, r8
 8011780:	19a9      	adds	r1, r5, r6
 8011782:	f009 f811 	bl	801a7a8 <memcpy>
 8011786:	e7af      	b.n	80116e8 <ucdr_serialize_uint16_t+0x60>

08011788 <ucdr_serialize_endian_uint16_t>:
 8011788:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801178c:	b083      	sub	sp, #12
 801178e:	460d      	mov	r5, r1
 8011790:	2102      	movs	r1, #2
 8011792:	4604      	mov	r4, r0
 8011794:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011798:	f001 fc86 	bl	80130a8 <ucdr_buffer_alignment>
 801179c:	4601      	mov	r1, r0
 801179e:	4620      	mov	r0, r4
 80117a0:	f894 8015 	ldrb.w	r8, [r4, #21]
 80117a4:	f001 fcc4 	bl	8013130 <ucdr_advance_buffer>
 80117a8:	2102      	movs	r1, #2
 80117aa:	4620      	mov	r0, r4
 80117ac:	f001 fc1c 	bl	8012fe8 <ucdr_check_buffer_available_for>
 80117b0:	bb70      	cbnz	r0, 8011810 <ucdr_serialize_endian_uint16_t+0x88>
 80117b2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80117b6:	42be      	cmp	r6, r7
 80117b8:	d925      	bls.n	8011806 <ucdr_serialize_endian_uint16_t+0x7e>
 80117ba:	6923      	ldr	r3, [r4, #16]
 80117bc:	60a6      	str	r6, [r4, #8]
 80117be:	1bf6      	subs	r6, r6, r7
 80117c0:	4433      	add	r3, r6
 80117c2:	f1c6 0902 	rsb	r9, r6, #2
 80117c6:	6123      	str	r3, [r4, #16]
 80117c8:	4649      	mov	r1, r9
 80117ca:	4620      	mov	r0, r4
 80117cc:	f001 fc18 	bl	8013000 <ucdr_check_final_buffer_behavior>
 80117d0:	2800      	cmp	r0, #0
 80117d2:	d039      	beq.n	8011848 <ucdr_serialize_endian_uint16_t+0xc0>
 80117d4:	2d01      	cmp	r5, #1
 80117d6:	d04a      	beq.n	801186e <ucdr_serialize_endian_uint16_t+0xe6>
 80117d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80117dc:	703b      	strb	r3, [r7, #0]
 80117de:	2e00      	cmp	r6, #0
 80117e0:	d040      	beq.n	8011864 <ucdr_serialize_endian_uint16_t+0xdc>
 80117e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80117e6:	707b      	strb	r3, [r7, #1]
 80117e8:	6923      	ldr	r3, [r4, #16]
 80117ea:	68a2      	ldr	r2, [r4, #8]
 80117ec:	7da0      	ldrb	r0, [r4, #22]
 80117ee:	3302      	adds	r3, #2
 80117f0:	444a      	add	r2, r9
 80117f2:	1b9b      	subs	r3, r3, r6
 80117f4:	2102      	movs	r1, #2
 80117f6:	f080 0001 	eor.w	r0, r0, #1
 80117fa:	60a2      	str	r2, [r4, #8]
 80117fc:	6123      	str	r3, [r4, #16]
 80117fe:	7561      	strb	r1, [r4, #21]
 8011800:	b003      	add	sp, #12
 8011802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011806:	2102      	movs	r1, #2
 8011808:	4620      	mov	r0, r4
 801180a:	f001 fbf9 	bl	8013000 <ucdr_check_final_buffer_behavior>
 801180e:	b188      	cbz	r0, 8011834 <ucdr_serialize_endian_uint16_t+0xac>
 8011810:	2d01      	cmp	r5, #1
 8011812:	68a3      	ldr	r3, [r4, #8]
 8011814:	d014      	beq.n	8011840 <ucdr_serialize_endian_uint16_t+0xb8>
 8011816:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801181a:	701a      	strb	r2, [r3, #0]
 801181c:	68a3      	ldr	r3, [r4, #8]
 801181e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011822:	705a      	strb	r2, [r3, #1]
 8011824:	68a2      	ldr	r2, [r4, #8]
 8011826:	6923      	ldr	r3, [r4, #16]
 8011828:	3202      	adds	r2, #2
 801182a:	3302      	adds	r3, #2
 801182c:	2102      	movs	r1, #2
 801182e:	60a2      	str	r2, [r4, #8]
 8011830:	6123      	str	r3, [r4, #16]
 8011832:	7561      	strb	r1, [r4, #21]
 8011834:	7da0      	ldrb	r0, [r4, #22]
 8011836:	f080 0001 	eor.w	r0, r0, #1
 801183a:	b003      	add	sp, #12
 801183c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011840:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011844:	801a      	strh	r2, [r3, #0]
 8011846:	e7ed      	b.n	8011824 <ucdr_serialize_endian_uint16_t+0x9c>
 8011848:	68a2      	ldr	r2, [r4, #8]
 801184a:	6923      	ldr	r3, [r4, #16]
 801184c:	7da0      	ldrb	r0, [r4, #22]
 801184e:	f884 8015 	strb.w	r8, [r4, #21]
 8011852:	1b92      	subs	r2, r2, r6
 8011854:	1b9b      	subs	r3, r3, r6
 8011856:	f080 0001 	eor.w	r0, r0, #1
 801185a:	60a2      	str	r2, [r4, #8]
 801185c:	6123      	str	r3, [r4, #16]
 801185e:	b003      	add	sp, #12
 8011860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011864:	68a3      	ldr	r3, [r4, #8]
 8011866:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801186a:	701a      	strb	r2, [r3, #0]
 801186c:	e7bc      	b.n	80117e8 <ucdr_serialize_endian_uint16_t+0x60>
 801186e:	f10d 0506 	add.w	r5, sp, #6
 8011872:	4629      	mov	r1, r5
 8011874:	4632      	mov	r2, r6
 8011876:	4638      	mov	r0, r7
 8011878:	f008 ff96 	bl	801a7a8 <memcpy>
 801187c:	68a0      	ldr	r0, [r4, #8]
 801187e:	464a      	mov	r2, r9
 8011880:	19a9      	adds	r1, r5, r6
 8011882:	f008 ff91 	bl	801a7a8 <memcpy>
 8011886:	e7af      	b.n	80117e8 <ucdr_serialize_endian_uint16_t+0x60>

08011888 <ucdr_deserialize_uint16_t>:
 8011888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801188c:	460d      	mov	r5, r1
 801188e:	2102      	movs	r1, #2
 8011890:	4604      	mov	r4, r0
 8011892:	f001 fc09 	bl	80130a8 <ucdr_buffer_alignment>
 8011896:	4601      	mov	r1, r0
 8011898:	4620      	mov	r0, r4
 801189a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801189e:	f001 fc47 	bl	8013130 <ucdr_advance_buffer>
 80118a2:	2102      	movs	r1, #2
 80118a4:	4620      	mov	r0, r4
 80118a6:	f001 fb9f 	bl	8012fe8 <ucdr_check_buffer_available_for>
 80118aa:	bb60      	cbnz	r0, 8011906 <ucdr_deserialize_uint16_t+0x7e>
 80118ac:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80118b0:	42be      	cmp	r6, r7
 80118b2:	d923      	bls.n	80118fc <ucdr_deserialize_uint16_t+0x74>
 80118b4:	6923      	ldr	r3, [r4, #16]
 80118b6:	60a6      	str	r6, [r4, #8]
 80118b8:	1bf6      	subs	r6, r6, r7
 80118ba:	4433      	add	r3, r6
 80118bc:	f1c6 0902 	rsb	r9, r6, #2
 80118c0:	6123      	str	r3, [r4, #16]
 80118c2:	4649      	mov	r1, r9
 80118c4:	4620      	mov	r0, r4
 80118c6:	f001 fb9b 	bl	8013000 <ucdr_check_final_buffer_behavior>
 80118ca:	2800      	cmp	r0, #0
 80118cc:	d034      	beq.n	8011938 <ucdr_deserialize_uint16_t+0xb0>
 80118ce:	7d23      	ldrb	r3, [r4, #20]
 80118d0:	2b01      	cmp	r3, #1
 80118d2:	d042      	beq.n	801195a <ucdr_deserialize_uint16_t+0xd2>
 80118d4:	787b      	ldrb	r3, [r7, #1]
 80118d6:	702b      	strb	r3, [r5, #0]
 80118d8:	2e00      	cmp	r6, #0
 80118da:	d03a      	beq.n	8011952 <ucdr_deserialize_uint16_t+0xca>
 80118dc:	783b      	ldrb	r3, [r7, #0]
 80118de:	706b      	strb	r3, [r5, #1]
 80118e0:	6923      	ldr	r3, [r4, #16]
 80118e2:	68a2      	ldr	r2, [r4, #8]
 80118e4:	7da0      	ldrb	r0, [r4, #22]
 80118e6:	2102      	movs	r1, #2
 80118e8:	3302      	adds	r3, #2
 80118ea:	444a      	add	r2, r9
 80118ec:	1b9b      	subs	r3, r3, r6
 80118ee:	7561      	strb	r1, [r4, #21]
 80118f0:	60a2      	str	r2, [r4, #8]
 80118f2:	6123      	str	r3, [r4, #16]
 80118f4:	f080 0001 	eor.w	r0, r0, #1
 80118f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118fc:	2102      	movs	r1, #2
 80118fe:	4620      	mov	r0, r4
 8011900:	f001 fb7e 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8011904:	b180      	cbz	r0, 8011928 <ucdr_deserialize_uint16_t+0xa0>
 8011906:	7d23      	ldrb	r3, [r4, #20]
 8011908:	2b01      	cmp	r3, #1
 801190a:	68a3      	ldr	r3, [r4, #8]
 801190c:	d011      	beq.n	8011932 <ucdr_deserialize_uint16_t+0xaa>
 801190e:	785b      	ldrb	r3, [r3, #1]
 8011910:	702b      	strb	r3, [r5, #0]
 8011912:	68a3      	ldr	r3, [r4, #8]
 8011914:	781b      	ldrb	r3, [r3, #0]
 8011916:	706b      	strb	r3, [r5, #1]
 8011918:	68a2      	ldr	r2, [r4, #8]
 801191a:	6923      	ldr	r3, [r4, #16]
 801191c:	3202      	adds	r2, #2
 801191e:	3302      	adds	r3, #2
 8011920:	2102      	movs	r1, #2
 8011922:	60a2      	str	r2, [r4, #8]
 8011924:	6123      	str	r3, [r4, #16]
 8011926:	7561      	strb	r1, [r4, #21]
 8011928:	7da0      	ldrb	r0, [r4, #22]
 801192a:	f080 0001 	eor.w	r0, r0, #1
 801192e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011932:	881b      	ldrh	r3, [r3, #0]
 8011934:	802b      	strh	r3, [r5, #0]
 8011936:	e7ef      	b.n	8011918 <ucdr_deserialize_uint16_t+0x90>
 8011938:	68a2      	ldr	r2, [r4, #8]
 801193a:	6923      	ldr	r3, [r4, #16]
 801193c:	7da0      	ldrb	r0, [r4, #22]
 801193e:	f884 8015 	strb.w	r8, [r4, #21]
 8011942:	1b92      	subs	r2, r2, r6
 8011944:	1b9b      	subs	r3, r3, r6
 8011946:	60a2      	str	r2, [r4, #8]
 8011948:	6123      	str	r3, [r4, #16]
 801194a:	f080 0001 	eor.w	r0, r0, #1
 801194e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011952:	68a3      	ldr	r3, [r4, #8]
 8011954:	781b      	ldrb	r3, [r3, #0]
 8011956:	706b      	strb	r3, [r5, #1]
 8011958:	e7c2      	b.n	80118e0 <ucdr_deserialize_uint16_t+0x58>
 801195a:	4639      	mov	r1, r7
 801195c:	4632      	mov	r2, r6
 801195e:	4628      	mov	r0, r5
 8011960:	f008 ff22 	bl	801a7a8 <memcpy>
 8011964:	68a1      	ldr	r1, [r4, #8]
 8011966:	464a      	mov	r2, r9
 8011968:	19a8      	adds	r0, r5, r6
 801196a:	f008 ff1d 	bl	801a7a8 <memcpy>
 801196e:	e7b7      	b.n	80118e0 <ucdr_deserialize_uint16_t+0x58>

08011970 <ucdr_deserialize_endian_uint16_t>:
 8011970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011974:	460e      	mov	r6, r1
 8011976:	2102      	movs	r1, #2
 8011978:	4604      	mov	r4, r0
 801197a:	4615      	mov	r5, r2
 801197c:	f001 fb94 	bl	80130a8 <ucdr_buffer_alignment>
 8011980:	4601      	mov	r1, r0
 8011982:	4620      	mov	r0, r4
 8011984:	f894 9015 	ldrb.w	r9, [r4, #21]
 8011988:	f001 fbd2 	bl	8013130 <ucdr_advance_buffer>
 801198c:	2102      	movs	r1, #2
 801198e:	4620      	mov	r0, r4
 8011990:	f001 fb2a 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8011994:	bb70      	cbnz	r0, 80119f4 <ucdr_deserialize_endian_uint16_t+0x84>
 8011996:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 801199a:	4547      	cmp	r7, r8
 801199c:	d925      	bls.n	80119ea <ucdr_deserialize_endian_uint16_t+0x7a>
 801199e:	6923      	ldr	r3, [r4, #16]
 80119a0:	60a7      	str	r7, [r4, #8]
 80119a2:	eba7 0708 	sub.w	r7, r7, r8
 80119a6:	443b      	add	r3, r7
 80119a8:	f1c7 0a02 	rsb	sl, r7, #2
 80119ac:	6123      	str	r3, [r4, #16]
 80119ae:	4651      	mov	r1, sl
 80119b0:	4620      	mov	r0, r4
 80119b2:	f001 fb25 	bl	8013000 <ucdr_check_final_buffer_behavior>
 80119b6:	2800      	cmp	r0, #0
 80119b8:	d034      	beq.n	8011a24 <ucdr_deserialize_endian_uint16_t+0xb4>
 80119ba:	2e01      	cmp	r6, #1
 80119bc:	d043      	beq.n	8011a46 <ucdr_deserialize_endian_uint16_t+0xd6>
 80119be:	f898 3001 	ldrb.w	r3, [r8, #1]
 80119c2:	702b      	strb	r3, [r5, #0]
 80119c4:	2f00      	cmp	r7, #0
 80119c6:	d03a      	beq.n	8011a3e <ucdr_deserialize_endian_uint16_t+0xce>
 80119c8:	f898 3000 	ldrb.w	r3, [r8]
 80119cc:	706b      	strb	r3, [r5, #1]
 80119ce:	6923      	ldr	r3, [r4, #16]
 80119d0:	68a2      	ldr	r2, [r4, #8]
 80119d2:	7da0      	ldrb	r0, [r4, #22]
 80119d4:	2102      	movs	r1, #2
 80119d6:	3302      	adds	r3, #2
 80119d8:	4452      	add	r2, sl
 80119da:	1bdb      	subs	r3, r3, r7
 80119dc:	7561      	strb	r1, [r4, #21]
 80119de:	60a2      	str	r2, [r4, #8]
 80119e0:	6123      	str	r3, [r4, #16]
 80119e2:	f080 0001 	eor.w	r0, r0, #1
 80119e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119ea:	2102      	movs	r1, #2
 80119ec:	4620      	mov	r0, r4
 80119ee:	f001 fb07 	bl	8013000 <ucdr_check_final_buffer_behavior>
 80119f2:	b178      	cbz	r0, 8011a14 <ucdr_deserialize_endian_uint16_t+0xa4>
 80119f4:	2e01      	cmp	r6, #1
 80119f6:	68a3      	ldr	r3, [r4, #8]
 80119f8:	d011      	beq.n	8011a1e <ucdr_deserialize_endian_uint16_t+0xae>
 80119fa:	785b      	ldrb	r3, [r3, #1]
 80119fc:	702b      	strb	r3, [r5, #0]
 80119fe:	68a3      	ldr	r3, [r4, #8]
 8011a00:	781b      	ldrb	r3, [r3, #0]
 8011a02:	706b      	strb	r3, [r5, #1]
 8011a04:	68a2      	ldr	r2, [r4, #8]
 8011a06:	6923      	ldr	r3, [r4, #16]
 8011a08:	3202      	adds	r2, #2
 8011a0a:	3302      	adds	r3, #2
 8011a0c:	2102      	movs	r1, #2
 8011a0e:	60a2      	str	r2, [r4, #8]
 8011a10:	6123      	str	r3, [r4, #16]
 8011a12:	7561      	strb	r1, [r4, #21]
 8011a14:	7da0      	ldrb	r0, [r4, #22]
 8011a16:	f080 0001 	eor.w	r0, r0, #1
 8011a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a1e:	881b      	ldrh	r3, [r3, #0]
 8011a20:	802b      	strh	r3, [r5, #0]
 8011a22:	e7ef      	b.n	8011a04 <ucdr_deserialize_endian_uint16_t+0x94>
 8011a24:	68a2      	ldr	r2, [r4, #8]
 8011a26:	6923      	ldr	r3, [r4, #16]
 8011a28:	7da0      	ldrb	r0, [r4, #22]
 8011a2a:	f884 9015 	strb.w	r9, [r4, #21]
 8011a2e:	1bd2      	subs	r2, r2, r7
 8011a30:	1bdb      	subs	r3, r3, r7
 8011a32:	60a2      	str	r2, [r4, #8]
 8011a34:	6123      	str	r3, [r4, #16]
 8011a36:	f080 0001 	eor.w	r0, r0, #1
 8011a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a3e:	68a3      	ldr	r3, [r4, #8]
 8011a40:	781b      	ldrb	r3, [r3, #0]
 8011a42:	706b      	strb	r3, [r5, #1]
 8011a44:	e7c3      	b.n	80119ce <ucdr_deserialize_endian_uint16_t+0x5e>
 8011a46:	4641      	mov	r1, r8
 8011a48:	463a      	mov	r2, r7
 8011a4a:	4628      	mov	r0, r5
 8011a4c:	f008 feac 	bl	801a7a8 <memcpy>
 8011a50:	68a1      	ldr	r1, [r4, #8]
 8011a52:	4652      	mov	r2, sl
 8011a54:	19e8      	adds	r0, r5, r7
 8011a56:	f008 fea7 	bl	801a7a8 <memcpy>
 8011a5a:	e7b8      	b.n	80119ce <ucdr_deserialize_endian_uint16_t+0x5e>

08011a5c <ucdr_serialize_uint32_t>:
 8011a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a60:	b082      	sub	sp, #8
 8011a62:	4604      	mov	r4, r0
 8011a64:	9101      	str	r1, [sp, #4]
 8011a66:	2104      	movs	r1, #4
 8011a68:	f001 fb1e 	bl	80130a8 <ucdr_buffer_alignment>
 8011a6c:	4601      	mov	r1, r0
 8011a6e:	4620      	mov	r0, r4
 8011a70:	7d67      	ldrb	r7, [r4, #21]
 8011a72:	f001 fb5d 	bl	8013130 <ucdr_advance_buffer>
 8011a76:	2104      	movs	r1, #4
 8011a78:	4620      	mov	r0, r4
 8011a7a:	f001 fab5 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8011a7e:	2800      	cmp	r0, #0
 8011a80:	d139      	bne.n	8011af6 <ucdr_serialize_uint32_t+0x9a>
 8011a82:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011a86:	42ab      	cmp	r3, r5
 8011a88:	d930      	bls.n	8011aec <ucdr_serialize_uint32_t+0x90>
 8011a8a:	1b5e      	subs	r6, r3, r5
 8011a8c:	60a3      	str	r3, [r4, #8]
 8011a8e:	6923      	ldr	r3, [r4, #16]
 8011a90:	f1c6 0804 	rsb	r8, r6, #4
 8011a94:	4433      	add	r3, r6
 8011a96:	6123      	str	r3, [r4, #16]
 8011a98:	4641      	mov	r1, r8
 8011a9a:	4620      	mov	r0, r4
 8011a9c:	f001 fab0 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8011aa0:	2800      	cmp	r0, #0
 8011aa2:	d04c      	beq.n	8011b3e <ucdr_serialize_uint32_t+0xe2>
 8011aa4:	7d23      	ldrb	r3, [r4, #20]
 8011aa6:	2b01      	cmp	r3, #1
 8011aa8:	d063      	beq.n	8011b72 <ucdr_serialize_uint32_t+0x116>
 8011aaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011aae:	702b      	strb	r3, [r5, #0]
 8011ab0:	2e00      	cmp	r6, #0
 8011ab2:	d051      	beq.n	8011b58 <ucdr_serialize_uint32_t+0xfc>
 8011ab4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011ab8:	706b      	strb	r3, [r5, #1]
 8011aba:	2e01      	cmp	r6, #1
 8011abc:	d050      	beq.n	8011b60 <ucdr_serialize_uint32_t+0x104>
 8011abe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011ac2:	70ab      	strb	r3, [r5, #2]
 8011ac4:	2e02      	cmp	r6, #2
 8011ac6:	d04f      	beq.n	8011b68 <ucdr_serialize_uint32_t+0x10c>
 8011ac8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011acc:	70eb      	strb	r3, [r5, #3]
 8011ace:	6923      	ldr	r3, [r4, #16]
 8011ad0:	68a2      	ldr	r2, [r4, #8]
 8011ad2:	7da0      	ldrb	r0, [r4, #22]
 8011ad4:	3304      	adds	r3, #4
 8011ad6:	1b9e      	subs	r6, r3, r6
 8011ad8:	4442      	add	r2, r8
 8011ada:	2304      	movs	r3, #4
 8011adc:	f080 0001 	eor.w	r0, r0, #1
 8011ae0:	60a2      	str	r2, [r4, #8]
 8011ae2:	6126      	str	r6, [r4, #16]
 8011ae4:	7563      	strb	r3, [r4, #21]
 8011ae6:	b002      	add	sp, #8
 8011ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aec:	2104      	movs	r1, #4
 8011aee:	4620      	mov	r0, r4
 8011af0:	f001 fa86 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8011af4:	b1d0      	cbz	r0, 8011b2c <ucdr_serialize_uint32_t+0xd0>
 8011af6:	7d23      	ldrb	r3, [r4, #20]
 8011af8:	2b01      	cmp	r3, #1
 8011afa:	68a3      	ldr	r3, [r4, #8]
 8011afc:	d01c      	beq.n	8011b38 <ucdr_serialize_uint32_t+0xdc>
 8011afe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011b02:	701a      	strb	r2, [r3, #0]
 8011b04:	68a3      	ldr	r3, [r4, #8]
 8011b06:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011b0a:	705a      	strb	r2, [r3, #1]
 8011b0c:	68a3      	ldr	r3, [r4, #8]
 8011b0e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011b12:	709a      	strb	r2, [r3, #2]
 8011b14:	68a3      	ldr	r3, [r4, #8]
 8011b16:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011b1a:	70da      	strb	r2, [r3, #3]
 8011b1c:	68a2      	ldr	r2, [r4, #8]
 8011b1e:	6923      	ldr	r3, [r4, #16]
 8011b20:	3204      	adds	r2, #4
 8011b22:	3304      	adds	r3, #4
 8011b24:	2104      	movs	r1, #4
 8011b26:	60a2      	str	r2, [r4, #8]
 8011b28:	6123      	str	r3, [r4, #16]
 8011b2a:	7561      	strb	r1, [r4, #21]
 8011b2c:	7da0      	ldrb	r0, [r4, #22]
 8011b2e:	f080 0001 	eor.w	r0, r0, #1
 8011b32:	b002      	add	sp, #8
 8011b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b38:	9a01      	ldr	r2, [sp, #4]
 8011b3a:	601a      	str	r2, [r3, #0]
 8011b3c:	e7ee      	b.n	8011b1c <ucdr_serialize_uint32_t+0xc0>
 8011b3e:	68a2      	ldr	r2, [r4, #8]
 8011b40:	6923      	ldr	r3, [r4, #16]
 8011b42:	7da0      	ldrb	r0, [r4, #22]
 8011b44:	7567      	strb	r7, [r4, #21]
 8011b46:	1b92      	subs	r2, r2, r6
 8011b48:	1b9b      	subs	r3, r3, r6
 8011b4a:	f080 0001 	eor.w	r0, r0, #1
 8011b4e:	60a2      	str	r2, [r4, #8]
 8011b50:	6123      	str	r3, [r4, #16]
 8011b52:	b002      	add	sp, #8
 8011b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b58:	68a3      	ldr	r3, [r4, #8]
 8011b5a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011b5e:	701a      	strb	r2, [r3, #0]
 8011b60:	68a3      	ldr	r3, [r4, #8]
 8011b62:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011b66:	701a      	strb	r2, [r3, #0]
 8011b68:	68a3      	ldr	r3, [r4, #8]
 8011b6a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011b6e:	701a      	strb	r2, [r3, #0]
 8011b70:	e7ad      	b.n	8011ace <ucdr_serialize_uint32_t+0x72>
 8011b72:	4628      	mov	r0, r5
 8011b74:	ad01      	add	r5, sp, #4
 8011b76:	4629      	mov	r1, r5
 8011b78:	4632      	mov	r2, r6
 8011b7a:	f008 fe15 	bl	801a7a8 <memcpy>
 8011b7e:	68a0      	ldr	r0, [r4, #8]
 8011b80:	4642      	mov	r2, r8
 8011b82:	19a9      	adds	r1, r5, r6
 8011b84:	f008 fe10 	bl	801a7a8 <memcpy>
 8011b88:	e7a1      	b.n	8011ace <ucdr_serialize_uint32_t+0x72>
 8011b8a:	bf00      	nop

08011b8c <ucdr_serialize_endian_uint32_t>:
 8011b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b90:	b083      	sub	sp, #12
 8011b92:	460d      	mov	r5, r1
 8011b94:	2104      	movs	r1, #4
 8011b96:	4604      	mov	r4, r0
 8011b98:	9201      	str	r2, [sp, #4]
 8011b9a:	f001 fa85 	bl	80130a8 <ucdr_buffer_alignment>
 8011b9e:	4601      	mov	r1, r0
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011ba6:	f001 fac3 	bl	8013130 <ucdr_advance_buffer>
 8011baa:	2104      	movs	r1, #4
 8011bac:	4620      	mov	r0, r4
 8011bae:	f001 fa1b 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8011bb2:	2800      	cmp	r0, #0
 8011bb4:	d138      	bne.n	8011c28 <ucdr_serialize_endian_uint32_t+0x9c>
 8011bb6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011bba:	42b7      	cmp	r7, r6
 8011bbc:	d92f      	bls.n	8011c1e <ucdr_serialize_endian_uint32_t+0x92>
 8011bbe:	6923      	ldr	r3, [r4, #16]
 8011bc0:	60a7      	str	r7, [r4, #8]
 8011bc2:	1bbf      	subs	r7, r7, r6
 8011bc4:	443b      	add	r3, r7
 8011bc6:	f1c7 0904 	rsb	r9, r7, #4
 8011bca:	6123      	str	r3, [r4, #16]
 8011bcc:	4649      	mov	r1, r9
 8011bce:	4620      	mov	r0, r4
 8011bd0:	f001 fa16 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8011bd4:	2800      	cmp	r0, #0
 8011bd6:	d04a      	beq.n	8011c6e <ucdr_serialize_endian_uint32_t+0xe2>
 8011bd8:	2d01      	cmp	r5, #1
 8011bda:	d063      	beq.n	8011ca4 <ucdr_serialize_endian_uint32_t+0x118>
 8011bdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011be0:	7033      	strb	r3, [r6, #0]
 8011be2:	2f00      	cmp	r7, #0
 8011be4:	d051      	beq.n	8011c8a <ucdr_serialize_endian_uint32_t+0xfe>
 8011be6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011bea:	7073      	strb	r3, [r6, #1]
 8011bec:	2f01      	cmp	r7, #1
 8011bee:	d050      	beq.n	8011c92 <ucdr_serialize_endian_uint32_t+0x106>
 8011bf0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011bf4:	70b3      	strb	r3, [r6, #2]
 8011bf6:	2f02      	cmp	r7, #2
 8011bf8:	d04f      	beq.n	8011c9a <ucdr_serialize_endian_uint32_t+0x10e>
 8011bfa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011bfe:	70f3      	strb	r3, [r6, #3]
 8011c00:	6923      	ldr	r3, [r4, #16]
 8011c02:	68a2      	ldr	r2, [r4, #8]
 8011c04:	7da0      	ldrb	r0, [r4, #22]
 8011c06:	3304      	adds	r3, #4
 8011c08:	444a      	add	r2, r9
 8011c0a:	1bdb      	subs	r3, r3, r7
 8011c0c:	2104      	movs	r1, #4
 8011c0e:	f080 0001 	eor.w	r0, r0, #1
 8011c12:	60a2      	str	r2, [r4, #8]
 8011c14:	6123      	str	r3, [r4, #16]
 8011c16:	7561      	strb	r1, [r4, #21]
 8011c18:	b003      	add	sp, #12
 8011c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c1e:	2104      	movs	r1, #4
 8011c20:	4620      	mov	r0, r4
 8011c22:	f001 f9ed 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8011c26:	b1c8      	cbz	r0, 8011c5c <ucdr_serialize_endian_uint32_t+0xd0>
 8011c28:	2d01      	cmp	r5, #1
 8011c2a:	68a3      	ldr	r3, [r4, #8]
 8011c2c:	d01c      	beq.n	8011c68 <ucdr_serialize_endian_uint32_t+0xdc>
 8011c2e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011c32:	701a      	strb	r2, [r3, #0]
 8011c34:	68a3      	ldr	r3, [r4, #8]
 8011c36:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011c3a:	705a      	strb	r2, [r3, #1]
 8011c3c:	68a3      	ldr	r3, [r4, #8]
 8011c3e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011c42:	709a      	strb	r2, [r3, #2]
 8011c44:	68a3      	ldr	r3, [r4, #8]
 8011c46:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011c4a:	70da      	strb	r2, [r3, #3]
 8011c4c:	68a2      	ldr	r2, [r4, #8]
 8011c4e:	6923      	ldr	r3, [r4, #16]
 8011c50:	3204      	adds	r2, #4
 8011c52:	3304      	adds	r3, #4
 8011c54:	2104      	movs	r1, #4
 8011c56:	60a2      	str	r2, [r4, #8]
 8011c58:	6123      	str	r3, [r4, #16]
 8011c5a:	7561      	strb	r1, [r4, #21]
 8011c5c:	7da0      	ldrb	r0, [r4, #22]
 8011c5e:	f080 0001 	eor.w	r0, r0, #1
 8011c62:	b003      	add	sp, #12
 8011c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c68:	9a01      	ldr	r2, [sp, #4]
 8011c6a:	601a      	str	r2, [r3, #0]
 8011c6c:	e7ee      	b.n	8011c4c <ucdr_serialize_endian_uint32_t+0xc0>
 8011c6e:	68a2      	ldr	r2, [r4, #8]
 8011c70:	6923      	ldr	r3, [r4, #16]
 8011c72:	7da0      	ldrb	r0, [r4, #22]
 8011c74:	f884 8015 	strb.w	r8, [r4, #21]
 8011c78:	1bd2      	subs	r2, r2, r7
 8011c7a:	1bdb      	subs	r3, r3, r7
 8011c7c:	f080 0001 	eor.w	r0, r0, #1
 8011c80:	60a2      	str	r2, [r4, #8]
 8011c82:	6123      	str	r3, [r4, #16]
 8011c84:	b003      	add	sp, #12
 8011c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c8a:	68a3      	ldr	r3, [r4, #8]
 8011c8c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011c90:	701a      	strb	r2, [r3, #0]
 8011c92:	68a3      	ldr	r3, [r4, #8]
 8011c94:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011c98:	701a      	strb	r2, [r3, #0]
 8011c9a:	68a3      	ldr	r3, [r4, #8]
 8011c9c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011ca0:	701a      	strb	r2, [r3, #0]
 8011ca2:	e7ad      	b.n	8011c00 <ucdr_serialize_endian_uint32_t+0x74>
 8011ca4:	ad01      	add	r5, sp, #4
 8011ca6:	4629      	mov	r1, r5
 8011ca8:	463a      	mov	r2, r7
 8011caa:	4630      	mov	r0, r6
 8011cac:	f008 fd7c 	bl	801a7a8 <memcpy>
 8011cb0:	68a0      	ldr	r0, [r4, #8]
 8011cb2:	464a      	mov	r2, r9
 8011cb4:	19e9      	adds	r1, r5, r7
 8011cb6:	f008 fd77 	bl	801a7a8 <memcpy>
 8011cba:	e7a1      	b.n	8011c00 <ucdr_serialize_endian_uint32_t+0x74>

08011cbc <ucdr_deserialize_uint32_t>:
 8011cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cc0:	460d      	mov	r5, r1
 8011cc2:	2104      	movs	r1, #4
 8011cc4:	4604      	mov	r4, r0
 8011cc6:	f001 f9ef 	bl	80130a8 <ucdr_buffer_alignment>
 8011cca:	4601      	mov	r1, r0
 8011ccc:	4620      	mov	r0, r4
 8011cce:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011cd2:	f001 fa2d 	bl	8013130 <ucdr_advance_buffer>
 8011cd6:	2104      	movs	r1, #4
 8011cd8:	4620      	mov	r0, r4
 8011cda:	f001 f985 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8011cde:	2800      	cmp	r0, #0
 8011ce0:	d138      	bne.n	8011d54 <ucdr_deserialize_uint32_t+0x98>
 8011ce2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011ce6:	42b7      	cmp	r7, r6
 8011ce8:	d92f      	bls.n	8011d4a <ucdr_deserialize_uint32_t+0x8e>
 8011cea:	6923      	ldr	r3, [r4, #16]
 8011cec:	60a7      	str	r7, [r4, #8]
 8011cee:	1bbf      	subs	r7, r7, r6
 8011cf0:	443b      	add	r3, r7
 8011cf2:	f1c7 0904 	rsb	r9, r7, #4
 8011cf6:	6123      	str	r3, [r4, #16]
 8011cf8:	4649      	mov	r1, r9
 8011cfa:	4620      	mov	r0, r4
 8011cfc:	f001 f980 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8011d00:	2800      	cmp	r0, #0
 8011d02:	d046      	beq.n	8011d92 <ucdr_deserialize_uint32_t+0xd6>
 8011d04:	7d23      	ldrb	r3, [r4, #20]
 8011d06:	2b01      	cmp	r3, #1
 8011d08:	d05c      	beq.n	8011dc4 <ucdr_deserialize_uint32_t+0x108>
 8011d0a:	78f3      	ldrb	r3, [r6, #3]
 8011d0c:	702b      	strb	r3, [r5, #0]
 8011d0e:	2f00      	cmp	r7, #0
 8011d10:	d04c      	beq.n	8011dac <ucdr_deserialize_uint32_t+0xf0>
 8011d12:	78b3      	ldrb	r3, [r6, #2]
 8011d14:	706b      	strb	r3, [r5, #1]
 8011d16:	2f01      	cmp	r7, #1
 8011d18:	f105 0302 	add.w	r3, r5, #2
 8011d1c:	d04a      	beq.n	8011db4 <ucdr_deserialize_uint32_t+0xf8>
 8011d1e:	7873      	ldrb	r3, [r6, #1]
 8011d20:	70ab      	strb	r3, [r5, #2]
 8011d22:	2f02      	cmp	r7, #2
 8011d24:	f105 0303 	add.w	r3, r5, #3
 8011d28:	d048      	beq.n	8011dbc <ucdr_deserialize_uint32_t+0x100>
 8011d2a:	7833      	ldrb	r3, [r6, #0]
 8011d2c:	70eb      	strb	r3, [r5, #3]
 8011d2e:	6923      	ldr	r3, [r4, #16]
 8011d30:	68a2      	ldr	r2, [r4, #8]
 8011d32:	7da0      	ldrb	r0, [r4, #22]
 8011d34:	2104      	movs	r1, #4
 8011d36:	3304      	adds	r3, #4
 8011d38:	444a      	add	r2, r9
 8011d3a:	1bdb      	subs	r3, r3, r7
 8011d3c:	7561      	strb	r1, [r4, #21]
 8011d3e:	60a2      	str	r2, [r4, #8]
 8011d40:	6123      	str	r3, [r4, #16]
 8011d42:	f080 0001 	eor.w	r0, r0, #1
 8011d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d4a:	2104      	movs	r1, #4
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	f001 f957 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8011d52:	b1b0      	cbz	r0, 8011d82 <ucdr_deserialize_uint32_t+0xc6>
 8011d54:	7d23      	ldrb	r3, [r4, #20]
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	68a3      	ldr	r3, [r4, #8]
 8011d5a:	d017      	beq.n	8011d8c <ucdr_deserialize_uint32_t+0xd0>
 8011d5c:	78db      	ldrb	r3, [r3, #3]
 8011d5e:	702b      	strb	r3, [r5, #0]
 8011d60:	68a3      	ldr	r3, [r4, #8]
 8011d62:	789b      	ldrb	r3, [r3, #2]
 8011d64:	706b      	strb	r3, [r5, #1]
 8011d66:	68a3      	ldr	r3, [r4, #8]
 8011d68:	785b      	ldrb	r3, [r3, #1]
 8011d6a:	70ab      	strb	r3, [r5, #2]
 8011d6c:	68a3      	ldr	r3, [r4, #8]
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	70eb      	strb	r3, [r5, #3]
 8011d72:	68a2      	ldr	r2, [r4, #8]
 8011d74:	6923      	ldr	r3, [r4, #16]
 8011d76:	3204      	adds	r2, #4
 8011d78:	3304      	adds	r3, #4
 8011d7a:	2104      	movs	r1, #4
 8011d7c:	60a2      	str	r2, [r4, #8]
 8011d7e:	6123      	str	r3, [r4, #16]
 8011d80:	7561      	strb	r1, [r4, #21]
 8011d82:	7da0      	ldrb	r0, [r4, #22]
 8011d84:	f080 0001 	eor.w	r0, r0, #1
 8011d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	602b      	str	r3, [r5, #0]
 8011d90:	e7ef      	b.n	8011d72 <ucdr_deserialize_uint32_t+0xb6>
 8011d92:	68a2      	ldr	r2, [r4, #8]
 8011d94:	6923      	ldr	r3, [r4, #16]
 8011d96:	7da0      	ldrb	r0, [r4, #22]
 8011d98:	f884 8015 	strb.w	r8, [r4, #21]
 8011d9c:	1bd2      	subs	r2, r2, r7
 8011d9e:	1bdb      	subs	r3, r3, r7
 8011da0:	60a2      	str	r2, [r4, #8]
 8011da2:	6123      	str	r3, [r4, #16]
 8011da4:	f080 0001 	eor.w	r0, r0, #1
 8011da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011dac:	68a3      	ldr	r3, [r4, #8]
 8011dae:	789b      	ldrb	r3, [r3, #2]
 8011db0:	706b      	strb	r3, [r5, #1]
 8011db2:	1cab      	adds	r3, r5, #2
 8011db4:	68a2      	ldr	r2, [r4, #8]
 8011db6:	7852      	ldrb	r2, [r2, #1]
 8011db8:	f803 2b01 	strb.w	r2, [r3], #1
 8011dbc:	68a2      	ldr	r2, [r4, #8]
 8011dbe:	7812      	ldrb	r2, [r2, #0]
 8011dc0:	701a      	strb	r2, [r3, #0]
 8011dc2:	e7b4      	b.n	8011d2e <ucdr_deserialize_uint32_t+0x72>
 8011dc4:	4631      	mov	r1, r6
 8011dc6:	463a      	mov	r2, r7
 8011dc8:	4628      	mov	r0, r5
 8011dca:	f008 fced 	bl	801a7a8 <memcpy>
 8011dce:	68a1      	ldr	r1, [r4, #8]
 8011dd0:	464a      	mov	r2, r9
 8011dd2:	19e8      	adds	r0, r5, r7
 8011dd4:	f008 fce8 	bl	801a7a8 <memcpy>
 8011dd8:	e7a9      	b.n	8011d2e <ucdr_deserialize_uint32_t+0x72>
 8011dda:	bf00      	nop

08011ddc <ucdr_deserialize_endian_uint32_t>:
 8011ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011de0:	460e      	mov	r6, r1
 8011de2:	2104      	movs	r1, #4
 8011de4:	4604      	mov	r4, r0
 8011de6:	4615      	mov	r5, r2
 8011de8:	f001 f95e 	bl	80130a8 <ucdr_buffer_alignment>
 8011dec:	4601      	mov	r1, r0
 8011dee:	4620      	mov	r0, r4
 8011df0:	f894 9015 	ldrb.w	r9, [r4, #21]
 8011df4:	f001 f99c 	bl	8013130 <ucdr_advance_buffer>
 8011df8:	2104      	movs	r1, #4
 8011dfa:	4620      	mov	r0, r4
 8011dfc:	f001 f8f4 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8011e00:	2800      	cmp	r0, #0
 8011e02:	d13c      	bne.n	8011e7e <ucdr_deserialize_endian_uint32_t+0xa2>
 8011e04:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8011e08:	42bb      	cmp	r3, r7
 8011e0a:	d933      	bls.n	8011e74 <ucdr_deserialize_endian_uint32_t+0x98>
 8011e0c:	eba3 0807 	sub.w	r8, r3, r7
 8011e10:	60a3      	str	r3, [r4, #8]
 8011e12:	6923      	ldr	r3, [r4, #16]
 8011e14:	f1c8 0a04 	rsb	sl, r8, #4
 8011e18:	4443      	add	r3, r8
 8011e1a:	6123      	str	r3, [r4, #16]
 8011e1c:	4651      	mov	r1, sl
 8011e1e:	4620      	mov	r0, r4
 8011e20:	f001 f8ee 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8011e24:	2800      	cmp	r0, #0
 8011e26:	d048      	beq.n	8011eba <ucdr_deserialize_endian_uint32_t+0xde>
 8011e28:	2e01      	cmp	r6, #1
 8011e2a:	d061      	beq.n	8011ef0 <ucdr_deserialize_endian_uint32_t+0x114>
 8011e2c:	78fb      	ldrb	r3, [r7, #3]
 8011e2e:	702b      	strb	r3, [r5, #0]
 8011e30:	f1b8 0f00 	cmp.w	r8, #0
 8011e34:	d050      	beq.n	8011ed8 <ucdr_deserialize_endian_uint32_t+0xfc>
 8011e36:	78bb      	ldrb	r3, [r7, #2]
 8011e38:	706b      	strb	r3, [r5, #1]
 8011e3a:	f1b8 0f01 	cmp.w	r8, #1
 8011e3e:	f105 0302 	add.w	r3, r5, #2
 8011e42:	d04d      	beq.n	8011ee0 <ucdr_deserialize_endian_uint32_t+0x104>
 8011e44:	787b      	ldrb	r3, [r7, #1]
 8011e46:	70ab      	strb	r3, [r5, #2]
 8011e48:	f1b8 0f02 	cmp.w	r8, #2
 8011e4c:	f105 0303 	add.w	r3, r5, #3
 8011e50:	d04a      	beq.n	8011ee8 <ucdr_deserialize_endian_uint32_t+0x10c>
 8011e52:	783b      	ldrb	r3, [r7, #0]
 8011e54:	70eb      	strb	r3, [r5, #3]
 8011e56:	6923      	ldr	r3, [r4, #16]
 8011e58:	68a2      	ldr	r2, [r4, #8]
 8011e5a:	7da0      	ldrb	r0, [r4, #22]
 8011e5c:	2104      	movs	r1, #4
 8011e5e:	3304      	adds	r3, #4
 8011e60:	4452      	add	r2, sl
 8011e62:	eba3 0308 	sub.w	r3, r3, r8
 8011e66:	7561      	strb	r1, [r4, #21]
 8011e68:	60a2      	str	r2, [r4, #8]
 8011e6a:	6123      	str	r3, [r4, #16]
 8011e6c:	f080 0001 	eor.w	r0, r0, #1
 8011e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e74:	2104      	movs	r1, #4
 8011e76:	4620      	mov	r0, r4
 8011e78:	f001 f8c2 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8011e7c:	b1a8      	cbz	r0, 8011eaa <ucdr_deserialize_endian_uint32_t+0xce>
 8011e7e:	2e01      	cmp	r6, #1
 8011e80:	68a3      	ldr	r3, [r4, #8]
 8011e82:	d017      	beq.n	8011eb4 <ucdr_deserialize_endian_uint32_t+0xd8>
 8011e84:	78db      	ldrb	r3, [r3, #3]
 8011e86:	702b      	strb	r3, [r5, #0]
 8011e88:	68a3      	ldr	r3, [r4, #8]
 8011e8a:	789b      	ldrb	r3, [r3, #2]
 8011e8c:	706b      	strb	r3, [r5, #1]
 8011e8e:	68a3      	ldr	r3, [r4, #8]
 8011e90:	785b      	ldrb	r3, [r3, #1]
 8011e92:	70ab      	strb	r3, [r5, #2]
 8011e94:	68a3      	ldr	r3, [r4, #8]
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	70eb      	strb	r3, [r5, #3]
 8011e9a:	68a2      	ldr	r2, [r4, #8]
 8011e9c:	6923      	ldr	r3, [r4, #16]
 8011e9e:	3204      	adds	r2, #4
 8011ea0:	3304      	adds	r3, #4
 8011ea2:	2104      	movs	r1, #4
 8011ea4:	60a2      	str	r2, [r4, #8]
 8011ea6:	6123      	str	r3, [r4, #16]
 8011ea8:	7561      	strb	r1, [r4, #21]
 8011eaa:	7da0      	ldrb	r0, [r4, #22]
 8011eac:	f080 0001 	eor.w	r0, r0, #1
 8011eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	602b      	str	r3, [r5, #0]
 8011eb8:	e7ef      	b.n	8011e9a <ucdr_deserialize_endian_uint32_t+0xbe>
 8011eba:	68a2      	ldr	r2, [r4, #8]
 8011ebc:	6923      	ldr	r3, [r4, #16]
 8011ebe:	7da0      	ldrb	r0, [r4, #22]
 8011ec0:	f884 9015 	strb.w	r9, [r4, #21]
 8011ec4:	eba2 0208 	sub.w	r2, r2, r8
 8011ec8:	eba3 0308 	sub.w	r3, r3, r8
 8011ecc:	60a2      	str	r2, [r4, #8]
 8011ece:	6123      	str	r3, [r4, #16]
 8011ed0:	f080 0001 	eor.w	r0, r0, #1
 8011ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ed8:	68a3      	ldr	r3, [r4, #8]
 8011eda:	789b      	ldrb	r3, [r3, #2]
 8011edc:	706b      	strb	r3, [r5, #1]
 8011ede:	1cab      	adds	r3, r5, #2
 8011ee0:	68a2      	ldr	r2, [r4, #8]
 8011ee2:	7852      	ldrb	r2, [r2, #1]
 8011ee4:	f803 2b01 	strb.w	r2, [r3], #1
 8011ee8:	68a2      	ldr	r2, [r4, #8]
 8011eea:	7812      	ldrb	r2, [r2, #0]
 8011eec:	701a      	strb	r2, [r3, #0]
 8011eee:	e7b2      	b.n	8011e56 <ucdr_deserialize_endian_uint32_t+0x7a>
 8011ef0:	4639      	mov	r1, r7
 8011ef2:	4642      	mov	r2, r8
 8011ef4:	4628      	mov	r0, r5
 8011ef6:	f008 fc57 	bl	801a7a8 <memcpy>
 8011efa:	68a1      	ldr	r1, [r4, #8]
 8011efc:	4652      	mov	r2, sl
 8011efe:	eb05 0008 	add.w	r0, r5, r8
 8011f02:	f008 fc51 	bl	801a7a8 <memcpy>
 8011f06:	e7a6      	b.n	8011e56 <ucdr_deserialize_endian_uint32_t+0x7a>

08011f08 <ucdr_serialize_uint64_t>:
 8011f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f0c:	2108      	movs	r1, #8
 8011f0e:	b082      	sub	sp, #8
 8011f10:	4604      	mov	r4, r0
 8011f12:	e9cd 2300 	strd	r2, r3, [sp]
 8011f16:	f001 f8c7 	bl	80130a8 <ucdr_buffer_alignment>
 8011f1a:	4601      	mov	r1, r0
 8011f1c:	4620      	mov	r0, r4
 8011f1e:	7d67      	ldrb	r7, [r4, #21]
 8011f20:	f001 f906 	bl	8013130 <ucdr_advance_buffer>
 8011f24:	2108      	movs	r1, #8
 8011f26:	4620      	mov	r0, r4
 8011f28:	f001 f85e 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	d14e      	bne.n	8011fce <ucdr_serialize_uint64_t+0xc6>
 8011f30:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011f34:	42ab      	cmp	r3, r5
 8011f36:	d945      	bls.n	8011fc4 <ucdr_serialize_uint64_t+0xbc>
 8011f38:	1b5e      	subs	r6, r3, r5
 8011f3a:	60a3      	str	r3, [r4, #8]
 8011f3c:	6923      	ldr	r3, [r4, #16]
 8011f3e:	f1c6 0808 	rsb	r8, r6, #8
 8011f42:	4433      	add	r3, r6
 8011f44:	6123      	str	r3, [r4, #16]
 8011f46:	4641      	mov	r1, r8
 8011f48:	4620      	mov	r0, r4
 8011f4a:	f001 f859 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8011f4e:	2800      	cmp	r0, #0
 8011f50:	d074      	beq.n	801203c <ucdr_serialize_uint64_t+0x134>
 8011f52:	7d23      	ldrb	r3, [r4, #20]
 8011f54:	2b01      	cmp	r3, #1
 8011f56:	f000 809b 	beq.w	8012090 <ucdr_serialize_uint64_t+0x188>
 8011f5a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011f5e:	702b      	strb	r3, [r5, #0]
 8011f60:	2e00      	cmp	r6, #0
 8011f62:	d078      	beq.n	8012056 <ucdr_serialize_uint64_t+0x14e>
 8011f64:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011f68:	706b      	strb	r3, [r5, #1]
 8011f6a:	2e01      	cmp	r6, #1
 8011f6c:	d077      	beq.n	801205e <ucdr_serialize_uint64_t+0x156>
 8011f6e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011f72:	70ab      	strb	r3, [r5, #2]
 8011f74:	2e02      	cmp	r6, #2
 8011f76:	d076      	beq.n	8012066 <ucdr_serialize_uint64_t+0x15e>
 8011f78:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011f7c:	70eb      	strb	r3, [r5, #3]
 8011f7e:	2e03      	cmp	r6, #3
 8011f80:	d075      	beq.n	801206e <ucdr_serialize_uint64_t+0x166>
 8011f82:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8011f86:	712b      	strb	r3, [r5, #4]
 8011f88:	2e04      	cmp	r6, #4
 8011f8a:	d074      	beq.n	8012076 <ucdr_serialize_uint64_t+0x16e>
 8011f8c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8011f90:	716b      	strb	r3, [r5, #5]
 8011f92:	2e05      	cmp	r6, #5
 8011f94:	d073      	beq.n	801207e <ucdr_serialize_uint64_t+0x176>
 8011f96:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8011f9a:	71ab      	strb	r3, [r5, #6]
 8011f9c:	2e06      	cmp	r6, #6
 8011f9e:	d072      	beq.n	8012086 <ucdr_serialize_uint64_t+0x17e>
 8011fa0:	f89d 3000 	ldrb.w	r3, [sp]
 8011fa4:	71eb      	strb	r3, [r5, #7]
 8011fa6:	6923      	ldr	r3, [r4, #16]
 8011fa8:	68a2      	ldr	r2, [r4, #8]
 8011faa:	7da0      	ldrb	r0, [r4, #22]
 8011fac:	3308      	adds	r3, #8
 8011fae:	1b9e      	subs	r6, r3, r6
 8011fb0:	4442      	add	r2, r8
 8011fb2:	2308      	movs	r3, #8
 8011fb4:	f080 0001 	eor.w	r0, r0, #1
 8011fb8:	60a2      	str	r2, [r4, #8]
 8011fba:	6126      	str	r6, [r4, #16]
 8011fbc:	7563      	strb	r3, [r4, #21]
 8011fbe:	b002      	add	sp, #8
 8011fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fc4:	2108      	movs	r1, #8
 8011fc6:	4620      	mov	r0, r4
 8011fc8:	f001 f81a 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8011fcc:	b350      	cbz	r0, 8012024 <ucdr_serialize_uint64_t+0x11c>
 8011fce:	7d23      	ldrb	r3, [r4, #20]
 8011fd0:	2b01      	cmp	r3, #1
 8011fd2:	d02d      	beq.n	8012030 <ucdr_serialize_uint64_t+0x128>
 8011fd4:	68a3      	ldr	r3, [r4, #8]
 8011fd6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011fda:	701a      	strb	r2, [r3, #0]
 8011fdc:	68a3      	ldr	r3, [r4, #8]
 8011fde:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011fe2:	705a      	strb	r2, [r3, #1]
 8011fe4:	68a3      	ldr	r3, [r4, #8]
 8011fe6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011fea:	709a      	strb	r2, [r3, #2]
 8011fec:	68a3      	ldr	r3, [r4, #8]
 8011fee:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011ff2:	70da      	strb	r2, [r3, #3]
 8011ff4:	68a3      	ldr	r3, [r4, #8]
 8011ff6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8011ffa:	711a      	strb	r2, [r3, #4]
 8011ffc:	68a3      	ldr	r3, [r4, #8]
 8011ffe:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012002:	715a      	strb	r2, [r3, #5]
 8012004:	68a3      	ldr	r3, [r4, #8]
 8012006:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801200a:	719a      	strb	r2, [r3, #6]
 801200c:	68a3      	ldr	r3, [r4, #8]
 801200e:	f89d 2000 	ldrb.w	r2, [sp]
 8012012:	71da      	strb	r2, [r3, #7]
 8012014:	68a2      	ldr	r2, [r4, #8]
 8012016:	6923      	ldr	r3, [r4, #16]
 8012018:	3208      	adds	r2, #8
 801201a:	3308      	adds	r3, #8
 801201c:	2108      	movs	r1, #8
 801201e:	60a2      	str	r2, [r4, #8]
 8012020:	6123      	str	r3, [r4, #16]
 8012022:	7561      	strb	r1, [r4, #21]
 8012024:	7da0      	ldrb	r0, [r4, #22]
 8012026:	f080 0001 	eor.w	r0, r0, #1
 801202a:	b002      	add	sp, #8
 801202c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012030:	466b      	mov	r3, sp
 8012032:	cb03      	ldmia	r3!, {r0, r1}
 8012034:	68a3      	ldr	r3, [r4, #8]
 8012036:	6018      	str	r0, [r3, #0]
 8012038:	6059      	str	r1, [r3, #4]
 801203a:	e7eb      	b.n	8012014 <ucdr_serialize_uint64_t+0x10c>
 801203c:	68a2      	ldr	r2, [r4, #8]
 801203e:	6923      	ldr	r3, [r4, #16]
 8012040:	7da0      	ldrb	r0, [r4, #22]
 8012042:	7567      	strb	r7, [r4, #21]
 8012044:	1b92      	subs	r2, r2, r6
 8012046:	1b9b      	subs	r3, r3, r6
 8012048:	f080 0001 	eor.w	r0, r0, #1
 801204c:	60a2      	str	r2, [r4, #8]
 801204e:	6123      	str	r3, [r4, #16]
 8012050:	b002      	add	sp, #8
 8012052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012056:	68a3      	ldr	r3, [r4, #8]
 8012058:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801205c:	701a      	strb	r2, [r3, #0]
 801205e:	68a3      	ldr	r3, [r4, #8]
 8012060:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012064:	701a      	strb	r2, [r3, #0]
 8012066:	68a3      	ldr	r3, [r4, #8]
 8012068:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801206c:	701a      	strb	r2, [r3, #0]
 801206e:	68a3      	ldr	r3, [r4, #8]
 8012070:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012074:	701a      	strb	r2, [r3, #0]
 8012076:	68a3      	ldr	r3, [r4, #8]
 8012078:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801207c:	701a      	strb	r2, [r3, #0]
 801207e:	68a3      	ldr	r3, [r4, #8]
 8012080:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012084:	701a      	strb	r2, [r3, #0]
 8012086:	68a3      	ldr	r3, [r4, #8]
 8012088:	f89d 2000 	ldrb.w	r2, [sp]
 801208c:	701a      	strb	r2, [r3, #0]
 801208e:	e78a      	b.n	8011fa6 <ucdr_serialize_uint64_t+0x9e>
 8012090:	4628      	mov	r0, r5
 8012092:	466d      	mov	r5, sp
 8012094:	4629      	mov	r1, r5
 8012096:	4632      	mov	r2, r6
 8012098:	f008 fb86 	bl	801a7a8 <memcpy>
 801209c:	68a0      	ldr	r0, [r4, #8]
 801209e:	4642      	mov	r2, r8
 80120a0:	19a9      	adds	r1, r5, r6
 80120a2:	f008 fb81 	bl	801a7a8 <memcpy>
 80120a6:	e77e      	b.n	8011fa6 <ucdr_serialize_uint64_t+0x9e>

080120a8 <ucdr_serialize_int16_t>:
 80120a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120ac:	b082      	sub	sp, #8
 80120ae:	460b      	mov	r3, r1
 80120b0:	2102      	movs	r1, #2
 80120b2:	4604      	mov	r4, r0
 80120b4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80120b8:	f000 fff6 	bl	80130a8 <ucdr_buffer_alignment>
 80120bc:	4601      	mov	r1, r0
 80120be:	4620      	mov	r0, r4
 80120c0:	7d67      	ldrb	r7, [r4, #21]
 80120c2:	f001 f835 	bl	8013130 <ucdr_advance_buffer>
 80120c6:	2102      	movs	r1, #2
 80120c8:	4620      	mov	r0, r4
 80120ca:	f000 ff8d 	bl	8012fe8 <ucdr_check_buffer_available_for>
 80120ce:	bb78      	cbnz	r0, 8012130 <ucdr_serialize_int16_t+0x88>
 80120d0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80120d4:	42ab      	cmp	r3, r5
 80120d6:	d926      	bls.n	8012126 <ucdr_serialize_int16_t+0x7e>
 80120d8:	1b5e      	subs	r6, r3, r5
 80120da:	60a3      	str	r3, [r4, #8]
 80120dc:	6923      	ldr	r3, [r4, #16]
 80120de:	f1c6 0802 	rsb	r8, r6, #2
 80120e2:	4433      	add	r3, r6
 80120e4:	6123      	str	r3, [r4, #16]
 80120e6:	4641      	mov	r1, r8
 80120e8:	4620      	mov	r0, r4
 80120ea:	f000 ff89 	bl	8013000 <ucdr_check_final_buffer_behavior>
 80120ee:	2800      	cmp	r0, #0
 80120f0:	d03b      	beq.n	801216a <ucdr_serialize_int16_t+0xc2>
 80120f2:	7d23      	ldrb	r3, [r4, #20]
 80120f4:	2b01      	cmp	r3, #1
 80120f6:	d04a      	beq.n	801218e <ucdr_serialize_int16_t+0xe6>
 80120f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80120fc:	702b      	strb	r3, [r5, #0]
 80120fe:	2e00      	cmp	r6, #0
 8012100:	d040      	beq.n	8012184 <ucdr_serialize_int16_t+0xdc>
 8012102:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012106:	706b      	strb	r3, [r5, #1]
 8012108:	6923      	ldr	r3, [r4, #16]
 801210a:	68a2      	ldr	r2, [r4, #8]
 801210c:	7da0      	ldrb	r0, [r4, #22]
 801210e:	3302      	adds	r3, #2
 8012110:	1b9e      	subs	r6, r3, r6
 8012112:	4442      	add	r2, r8
 8012114:	2302      	movs	r3, #2
 8012116:	f080 0001 	eor.w	r0, r0, #1
 801211a:	60a2      	str	r2, [r4, #8]
 801211c:	6126      	str	r6, [r4, #16]
 801211e:	7563      	strb	r3, [r4, #21]
 8012120:	b002      	add	sp, #8
 8012122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012126:	2102      	movs	r1, #2
 8012128:	4620      	mov	r0, r4
 801212a:	f000 ff69 	bl	8013000 <ucdr_check_final_buffer_behavior>
 801212e:	b190      	cbz	r0, 8012156 <ucdr_serialize_int16_t+0xae>
 8012130:	7d23      	ldrb	r3, [r4, #20]
 8012132:	2b01      	cmp	r3, #1
 8012134:	68a3      	ldr	r3, [r4, #8]
 8012136:	d014      	beq.n	8012162 <ucdr_serialize_int16_t+0xba>
 8012138:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801213c:	701a      	strb	r2, [r3, #0]
 801213e:	68a3      	ldr	r3, [r4, #8]
 8012140:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012144:	705a      	strb	r2, [r3, #1]
 8012146:	68a2      	ldr	r2, [r4, #8]
 8012148:	6923      	ldr	r3, [r4, #16]
 801214a:	3202      	adds	r2, #2
 801214c:	3302      	adds	r3, #2
 801214e:	2102      	movs	r1, #2
 8012150:	60a2      	str	r2, [r4, #8]
 8012152:	6123      	str	r3, [r4, #16]
 8012154:	7561      	strb	r1, [r4, #21]
 8012156:	7da0      	ldrb	r0, [r4, #22]
 8012158:	f080 0001 	eor.w	r0, r0, #1
 801215c:	b002      	add	sp, #8
 801215e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012162:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012166:	801a      	strh	r2, [r3, #0]
 8012168:	e7ed      	b.n	8012146 <ucdr_serialize_int16_t+0x9e>
 801216a:	68a2      	ldr	r2, [r4, #8]
 801216c:	6923      	ldr	r3, [r4, #16]
 801216e:	7da0      	ldrb	r0, [r4, #22]
 8012170:	7567      	strb	r7, [r4, #21]
 8012172:	1b92      	subs	r2, r2, r6
 8012174:	1b9b      	subs	r3, r3, r6
 8012176:	f080 0001 	eor.w	r0, r0, #1
 801217a:	60a2      	str	r2, [r4, #8]
 801217c:	6123      	str	r3, [r4, #16]
 801217e:	b002      	add	sp, #8
 8012180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012184:	68a3      	ldr	r3, [r4, #8]
 8012186:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801218a:	701a      	strb	r2, [r3, #0]
 801218c:	e7bc      	b.n	8012108 <ucdr_serialize_int16_t+0x60>
 801218e:	4628      	mov	r0, r5
 8012190:	f10d 0506 	add.w	r5, sp, #6
 8012194:	4629      	mov	r1, r5
 8012196:	4632      	mov	r2, r6
 8012198:	f008 fb06 	bl	801a7a8 <memcpy>
 801219c:	68a0      	ldr	r0, [r4, #8]
 801219e:	4642      	mov	r2, r8
 80121a0:	19a9      	adds	r1, r5, r6
 80121a2:	f008 fb01 	bl	801a7a8 <memcpy>
 80121a6:	e7af      	b.n	8012108 <ucdr_serialize_int16_t+0x60>

080121a8 <ucdr_deserialize_int16_t>:
 80121a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80121ac:	460d      	mov	r5, r1
 80121ae:	2102      	movs	r1, #2
 80121b0:	4604      	mov	r4, r0
 80121b2:	f000 ff79 	bl	80130a8 <ucdr_buffer_alignment>
 80121b6:	4601      	mov	r1, r0
 80121b8:	4620      	mov	r0, r4
 80121ba:	f894 8015 	ldrb.w	r8, [r4, #21]
 80121be:	f000 ffb7 	bl	8013130 <ucdr_advance_buffer>
 80121c2:	2102      	movs	r1, #2
 80121c4:	4620      	mov	r0, r4
 80121c6:	f000 ff0f 	bl	8012fe8 <ucdr_check_buffer_available_for>
 80121ca:	bb60      	cbnz	r0, 8012226 <ucdr_deserialize_int16_t+0x7e>
 80121cc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80121d0:	42be      	cmp	r6, r7
 80121d2:	d923      	bls.n	801221c <ucdr_deserialize_int16_t+0x74>
 80121d4:	6923      	ldr	r3, [r4, #16]
 80121d6:	60a6      	str	r6, [r4, #8]
 80121d8:	1bf6      	subs	r6, r6, r7
 80121da:	4433      	add	r3, r6
 80121dc:	f1c6 0902 	rsb	r9, r6, #2
 80121e0:	6123      	str	r3, [r4, #16]
 80121e2:	4649      	mov	r1, r9
 80121e4:	4620      	mov	r0, r4
 80121e6:	f000 ff0b 	bl	8013000 <ucdr_check_final_buffer_behavior>
 80121ea:	2800      	cmp	r0, #0
 80121ec:	d034      	beq.n	8012258 <ucdr_deserialize_int16_t+0xb0>
 80121ee:	7d23      	ldrb	r3, [r4, #20]
 80121f0:	2b01      	cmp	r3, #1
 80121f2:	d042      	beq.n	801227a <ucdr_deserialize_int16_t+0xd2>
 80121f4:	787b      	ldrb	r3, [r7, #1]
 80121f6:	702b      	strb	r3, [r5, #0]
 80121f8:	2e00      	cmp	r6, #0
 80121fa:	d03a      	beq.n	8012272 <ucdr_deserialize_int16_t+0xca>
 80121fc:	783b      	ldrb	r3, [r7, #0]
 80121fe:	706b      	strb	r3, [r5, #1]
 8012200:	6923      	ldr	r3, [r4, #16]
 8012202:	68a2      	ldr	r2, [r4, #8]
 8012204:	7da0      	ldrb	r0, [r4, #22]
 8012206:	2102      	movs	r1, #2
 8012208:	3302      	adds	r3, #2
 801220a:	444a      	add	r2, r9
 801220c:	1b9b      	subs	r3, r3, r6
 801220e:	7561      	strb	r1, [r4, #21]
 8012210:	60a2      	str	r2, [r4, #8]
 8012212:	6123      	str	r3, [r4, #16]
 8012214:	f080 0001 	eor.w	r0, r0, #1
 8012218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801221c:	2102      	movs	r1, #2
 801221e:	4620      	mov	r0, r4
 8012220:	f000 feee 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8012224:	b180      	cbz	r0, 8012248 <ucdr_deserialize_int16_t+0xa0>
 8012226:	7d23      	ldrb	r3, [r4, #20]
 8012228:	2b01      	cmp	r3, #1
 801222a:	68a3      	ldr	r3, [r4, #8]
 801222c:	d011      	beq.n	8012252 <ucdr_deserialize_int16_t+0xaa>
 801222e:	785b      	ldrb	r3, [r3, #1]
 8012230:	702b      	strb	r3, [r5, #0]
 8012232:	68a3      	ldr	r3, [r4, #8]
 8012234:	781b      	ldrb	r3, [r3, #0]
 8012236:	706b      	strb	r3, [r5, #1]
 8012238:	68a2      	ldr	r2, [r4, #8]
 801223a:	6923      	ldr	r3, [r4, #16]
 801223c:	3202      	adds	r2, #2
 801223e:	3302      	adds	r3, #2
 8012240:	2102      	movs	r1, #2
 8012242:	60a2      	str	r2, [r4, #8]
 8012244:	6123      	str	r3, [r4, #16]
 8012246:	7561      	strb	r1, [r4, #21]
 8012248:	7da0      	ldrb	r0, [r4, #22]
 801224a:	f080 0001 	eor.w	r0, r0, #1
 801224e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012252:	881b      	ldrh	r3, [r3, #0]
 8012254:	802b      	strh	r3, [r5, #0]
 8012256:	e7ef      	b.n	8012238 <ucdr_deserialize_int16_t+0x90>
 8012258:	68a2      	ldr	r2, [r4, #8]
 801225a:	6923      	ldr	r3, [r4, #16]
 801225c:	7da0      	ldrb	r0, [r4, #22]
 801225e:	f884 8015 	strb.w	r8, [r4, #21]
 8012262:	1b92      	subs	r2, r2, r6
 8012264:	1b9b      	subs	r3, r3, r6
 8012266:	60a2      	str	r2, [r4, #8]
 8012268:	6123      	str	r3, [r4, #16]
 801226a:	f080 0001 	eor.w	r0, r0, #1
 801226e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012272:	68a3      	ldr	r3, [r4, #8]
 8012274:	781b      	ldrb	r3, [r3, #0]
 8012276:	706b      	strb	r3, [r5, #1]
 8012278:	e7c2      	b.n	8012200 <ucdr_deserialize_int16_t+0x58>
 801227a:	4639      	mov	r1, r7
 801227c:	4632      	mov	r2, r6
 801227e:	4628      	mov	r0, r5
 8012280:	f008 fa92 	bl	801a7a8 <memcpy>
 8012284:	68a1      	ldr	r1, [r4, #8]
 8012286:	464a      	mov	r2, r9
 8012288:	19a8      	adds	r0, r5, r6
 801228a:	f008 fa8d 	bl	801a7a8 <memcpy>
 801228e:	e7b7      	b.n	8012200 <ucdr_deserialize_int16_t+0x58>

08012290 <ucdr_serialize_int32_t>:
 8012290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012294:	b082      	sub	sp, #8
 8012296:	4604      	mov	r4, r0
 8012298:	9101      	str	r1, [sp, #4]
 801229a:	2104      	movs	r1, #4
 801229c:	f000 ff04 	bl	80130a8 <ucdr_buffer_alignment>
 80122a0:	4601      	mov	r1, r0
 80122a2:	4620      	mov	r0, r4
 80122a4:	7d67      	ldrb	r7, [r4, #21]
 80122a6:	f000 ff43 	bl	8013130 <ucdr_advance_buffer>
 80122aa:	2104      	movs	r1, #4
 80122ac:	4620      	mov	r0, r4
 80122ae:	f000 fe9b 	bl	8012fe8 <ucdr_check_buffer_available_for>
 80122b2:	2800      	cmp	r0, #0
 80122b4:	d139      	bne.n	801232a <ucdr_serialize_int32_t+0x9a>
 80122b6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80122ba:	42ab      	cmp	r3, r5
 80122bc:	d930      	bls.n	8012320 <ucdr_serialize_int32_t+0x90>
 80122be:	1b5e      	subs	r6, r3, r5
 80122c0:	60a3      	str	r3, [r4, #8]
 80122c2:	6923      	ldr	r3, [r4, #16]
 80122c4:	f1c6 0804 	rsb	r8, r6, #4
 80122c8:	4433      	add	r3, r6
 80122ca:	6123      	str	r3, [r4, #16]
 80122cc:	4641      	mov	r1, r8
 80122ce:	4620      	mov	r0, r4
 80122d0:	f000 fe96 	bl	8013000 <ucdr_check_final_buffer_behavior>
 80122d4:	2800      	cmp	r0, #0
 80122d6:	d04c      	beq.n	8012372 <ucdr_serialize_int32_t+0xe2>
 80122d8:	7d23      	ldrb	r3, [r4, #20]
 80122da:	2b01      	cmp	r3, #1
 80122dc:	d063      	beq.n	80123a6 <ucdr_serialize_int32_t+0x116>
 80122de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80122e2:	702b      	strb	r3, [r5, #0]
 80122e4:	2e00      	cmp	r6, #0
 80122e6:	d051      	beq.n	801238c <ucdr_serialize_int32_t+0xfc>
 80122e8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80122ec:	706b      	strb	r3, [r5, #1]
 80122ee:	2e01      	cmp	r6, #1
 80122f0:	d050      	beq.n	8012394 <ucdr_serialize_int32_t+0x104>
 80122f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80122f6:	70ab      	strb	r3, [r5, #2]
 80122f8:	2e02      	cmp	r6, #2
 80122fa:	d04f      	beq.n	801239c <ucdr_serialize_int32_t+0x10c>
 80122fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012300:	70eb      	strb	r3, [r5, #3]
 8012302:	6923      	ldr	r3, [r4, #16]
 8012304:	68a2      	ldr	r2, [r4, #8]
 8012306:	7da0      	ldrb	r0, [r4, #22]
 8012308:	3304      	adds	r3, #4
 801230a:	1b9e      	subs	r6, r3, r6
 801230c:	4442      	add	r2, r8
 801230e:	2304      	movs	r3, #4
 8012310:	f080 0001 	eor.w	r0, r0, #1
 8012314:	60a2      	str	r2, [r4, #8]
 8012316:	6126      	str	r6, [r4, #16]
 8012318:	7563      	strb	r3, [r4, #21]
 801231a:	b002      	add	sp, #8
 801231c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012320:	2104      	movs	r1, #4
 8012322:	4620      	mov	r0, r4
 8012324:	f000 fe6c 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8012328:	b1d0      	cbz	r0, 8012360 <ucdr_serialize_int32_t+0xd0>
 801232a:	7d23      	ldrb	r3, [r4, #20]
 801232c:	2b01      	cmp	r3, #1
 801232e:	68a3      	ldr	r3, [r4, #8]
 8012330:	d01c      	beq.n	801236c <ucdr_serialize_int32_t+0xdc>
 8012332:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012336:	701a      	strb	r2, [r3, #0]
 8012338:	68a3      	ldr	r3, [r4, #8]
 801233a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801233e:	705a      	strb	r2, [r3, #1]
 8012340:	68a3      	ldr	r3, [r4, #8]
 8012342:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012346:	709a      	strb	r2, [r3, #2]
 8012348:	68a3      	ldr	r3, [r4, #8]
 801234a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801234e:	70da      	strb	r2, [r3, #3]
 8012350:	68a2      	ldr	r2, [r4, #8]
 8012352:	6923      	ldr	r3, [r4, #16]
 8012354:	3204      	adds	r2, #4
 8012356:	3304      	adds	r3, #4
 8012358:	2104      	movs	r1, #4
 801235a:	60a2      	str	r2, [r4, #8]
 801235c:	6123      	str	r3, [r4, #16]
 801235e:	7561      	strb	r1, [r4, #21]
 8012360:	7da0      	ldrb	r0, [r4, #22]
 8012362:	f080 0001 	eor.w	r0, r0, #1
 8012366:	b002      	add	sp, #8
 8012368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801236c:	9a01      	ldr	r2, [sp, #4]
 801236e:	601a      	str	r2, [r3, #0]
 8012370:	e7ee      	b.n	8012350 <ucdr_serialize_int32_t+0xc0>
 8012372:	68a2      	ldr	r2, [r4, #8]
 8012374:	6923      	ldr	r3, [r4, #16]
 8012376:	7da0      	ldrb	r0, [r4, #22]
 8012378:	7567      	strb	r7, [r4, #21]
 801237a:	1b92      	subs	r2, r2, r6
 801237c:	1b9b      	subs	r3, r3, r6
 801237e:	f080 0001 	eor.w	r0, r0, #1
 8012382:	60a2      	str	r2, [r4, #8]
 8012384:	6123      	str	r3, [r4, #16]
 8012386:	b002      	add	sp, #8
 8012388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801238c:	68a3      	ldr	r3, [r4, #8]
 801238e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012392:	701a      	strb	r2, [r3, #0]
 8012394:	68a3      	ldr	r3, [r4, #8]
 8012396:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801239a:	701a      	strb	r2, [r3, #0]
 801239c:	68a3      	ldr	r3, [r4, #8]
 801239e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80123a2:	701a      	strb	r2, [r3, #0]
 80123a4:	e7ad      	b.n	8012302 <ucdr_serialize_int32_t+0x72>
 80123a6:	4628      	mov	r0, r5
 80123a8:	ad01      	add	r5, sp, #4
 80123aa:	4629      	mov	r1, r5
 80123ac:	4632      	mov	r2, r6
 80123ae:	f008 f9fb 	bl	801a7a8 <memcpy>
 80123b2:	68a0      	ldr	r0, [r4, #8]
 80123b4:	4642      	mov	r2, r8
 80123b6:	19a9      	adds	r1, r5, r6
 80123b8:	f008 f9f6 	bl	801a7a8 <memcpy>
 80123bc:	e7a1      	b.n	8012302 <ucdr_serialize_int32_t+0x72>
 80123be:	bf00      	nop

080123c0 <ucdr_deserialize_int32_t>:
 80123c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123c4:	460d      	mov	r5, r1
 80123c6:	2104      	movs	r1, #4
 80123c8:	4604      	mov	r4, r0
 80123ca:	f000 fe6d 	bl	80130a8 <ucdr_buffer_alignment>
 80123ce:	4601      	mov	r1, r0
 80123d0:	4620      	mov	r0, r4
 80123d2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80123d6:	f000 feab 	bl	8013130 <ucdr_advance_buffer>
 80123da:	2104      	movs	r1, #4
 80123dc:	4620      	mov	r0, r4
 80123de:	f000 fe03 	bl	8012fe8 <ucdr_check_buffer_available_for>
 80123e2:	2800      	cmp	r0, #0
 80123e4:	d138      	bne.n	8012458 <ucdr_deserialize_int32_t+0x98>
 80123e6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80123ea:	42b7      	cmp	r7, r6
 80123ec:	d92f      	bls.n	801244e <ucdr_deserialize_int32_t+0x8e>
 80123ee:	6923      	ldr	r3, [r4, #16]
 80123f0:	60a7      	str	r7, [r4, #8]
 80123f2:	1bbf      	subs	r7, r7, r6
 80123f4:	443b      	add	r3, r7
 80123f6:	f1c7 0904 	rsb	r9, r7, #4
 80123fa:	6123      	str	r3, [r4, #16]
 80123fc:	4649      	mov	r1, r9
 80123fe:	4620      	mov	r0, r4
 8012400:	f000 fdfe 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8012404:	2800      	cmp	r0, #0
 8012406:	d046      	beq.n	8012496 <ucdr_deserialize_int32_t+0xd6>
 8012408:	7d23      	ldrb	r3, [r4, #20]
 801240a:	2b01      	cmp	r3, #1
 801240c:	d05c      	beq.n	80124c8 <ucdr_deserialize_int32_t+0x108>
 801240e:	78f3      	ldrb	r3, [r6, #3]
 8012410:	702b      	strb	r3, [r5, #0]
 8012412:	2f00      	cmp	r7, #0
 8012414:	d04c      	beq.n	80124b0 <ucdr_deserialize_int32_t+0xf0>
 8012416:	78b3      	ldrb	r3, [r6, #2]
 8012418:	706b      	strb	r3, [r5, #1]
 801241a:	2f01      	cmp	r7, #1
 801241c:	f105 0302 	add.w	r3, r5, #2
 8012420:	d04a      	beq.n	80124b8 <ucdr_deserialize_int32_t+0xf8>
 8012422:	7873      	ldrb	r3, [r6, #1]
 8012424:	70ab      	strb	r3, [r5, #2]
 8012426:	2f02      	cmp	r7, #2
 8012428:	f105 0303 	add.w	r3, r5, #3
 801242c:	d048      	beq.n	80124c0 <ucdr_deserialize_int32_t+0x100>
 801242e:	7833      	ldrb	r3, [r6, #0]
 8012430:	70eb      	strb	r3, [r5, #3]
 8012432:	6923      	ldr	r3, [r4, #16]
 8012434:	68a2      	ldr	r2, [r4, #8]
 8012436:	7da0      	ldrb	r0, [r4, #22]
 8012438:	2104      	movs	r1, #4
 801243a:	3304      	adds	r3, #4
 801243c:	444a      	add	r2, r9
 801243e:	1bdb      	subs	r3, r3, r7
 8012440:	7561      	strb	r1, [r4, #21]
 8012442:	60a2      	str	r2, [r4, #8]
 8012444:	6123      	str	r3, [r4, #16]
 8012446:	f080 0001 	eor.w	r0, r0, #1
 801244a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801244e:	2104      	movs	r1, #4
 8012450:	4620      	mov	r0, r4
 8012452:	f000 fdd5 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8012456:	b1b0      	cbz	r0, 8012486 <ucdr_deserialize_int32_t+0xc6>
 8012458:	7d23      	ldrb	r3, [r4, #20]
 801245a:	2b01      	cmp	r3, #1
 801245c:	68a3      	ldr	r3, [r4, #8]
 801245e:	d017      	beq.n	8012490 <ucdr_deserialize_int32_t+0xd0>
 8012460:	78db      	ldrb	r3, [r3, #3]
 8012462:	702b      	strb	r3, [r5, #0]
 8012464:	68a3      	ldr	r3, [r4, #8]
 8012466:	789b      	ldrb	r3, [r3, #2]
 8012468:	706b      	strb	r3, [r5, #1]
 801246a:	68a3      	ldr	r3, [r4, #8]
 801246c:	785b      	ldrb	r3, [r3, #1]
 801246e:	70ab      	strb	r3, [r5, #2]
 8012470:	68a3      	ldr	r3, [r4, #8]
 8012472:	781b      	ldrb	r3, [r3, #0]
 8012474:	70eb      	strb	r3, [r5, #3]
 8012476:	68a2      	ldr	r2, [r4, #8]
 8012478:	6923      	ldr	r3, [r4, #16]
 801247a:	3204      	adds	r2, #4
 801247c:	3304      	adds	r3, #4
 801247e:	2104      	movs	r1, #4
 8012480:	60a2      	str	r2, [r4, #8]
 8012482:	6123      	str	r3, [r4, #16]
 8012484:	7561      	strb	r1, [r4, #21]
 8012486:	7da0      	ldrb	r0, [r4, #22]
 8012488:	f080 0001 	eor.w	r0, r0, #1
 801248c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	602b      	str	r3, [r5, #0]
 8012494:	e7ef      	b.n	8012476 <ucdr_deserialize_int32_t+0xb6>
 8012496:	68a2      	ldr	r2, [r4, #8]
 8012498:	6923      	ldr	r3, [r4, #16]
 801249a:	7da0      	ldrb	r0, [r4, #22]
 801249c:	f884 8015 	strb.w	r8, [r4, #21]
 80124a0:	1bd2      	subs	r2, r2, r7
 80124a2:	1bdb      	subs	r3, r3, r7
 80124a4:	60a2      	str	r2, [r4, #8]
 80124a6:	6123      	str	r3, [r4, #16]
 80124a8:	f080 0001 	eor.w	r0, r0, #1
 80124ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124b0:	68a3      	ldr	r3, [r4, #8]
 80124b2:	789b      	ldrb	r3, [r3, #2]
 80124b4:	706b      	strb	r3, [r5, #1]
 80124b6:	1cab      	adds	r3, r5, #2
 80124b8:	68a2      	ldr	r2, [r4, #8]
 80124ba:	7852      	ldrb	r2, [r2, #1]
 80124bc:	f803 2b01 	strb.w	r2, [r3], #1
 80124c0:	68a2      	ldr	r2, [r4, #8]
 80124c2:	7812      	ldrb	r2, [r2, #0]
 80124c4:	701a      	strb	r2, [r3, #0]
 80124c6:	e7b4      	b.n	8012432 <ucdr_deserialize_int32_t+0x72>
 80124c8:	4631      	mov	r1, r6
 80124ca:	463a      	mov	r2, r7
 80124cc:	4628      	mov	r0, r5
 80124ce:	f008 f96b 	bl	801a7a8 <memcpy>
 80124d2:	68a1      	ldr	r1, [r4, #8]
 80124d4:	464a      	mov	r2, r9
 80124d6:	19e8      	adds	r0, r5, r7
 80124d8:	f008 f966 	bl	801a7a8 <memcpy>
 80124dc:	e7a9      	b.n	8012432 <ucdr_deserialize_int32_t+0x72>
 80124de:	bf00      	nop

080124e0 <ucdr_serialize_int64_t>:
 80124e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124e4:	2108      	movs	r1, #8
 80124e6:	b082      	sub	sp, #8
 80124e8:	4604      	mov	r4, r0
 80124ea:	e9cd 2300 	strd	r2, r3, [sp]
 80124ee:	f000 fddb 	bl	80130a8 <ucdr_buffer_alignment>
 80124f2:	4601      	mov	r1, r0
 80124f4:	4620      	mov	r0, r4
 80124f6:	7d67      	ldrb	r7, [r4, #21]
 80124f8:	f000 fe1a 	bl	8013130 <ucdr_advance_buffer>
 80124fc:	2108      	movs	r1, #8
 80124fe:	4620      	mov	r0, r4
 8012500:	f000 fd72 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8012504:	2800      	cmp	r0, #0
 8012506:	d14e      	bne.n	80125a6 <ucdr_serialize_int64_t+0xc6>
 8012508:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801250c:	42ab      	cmp	r3, r5
 801250e:	d945      	bls.n	801259c <ucdr_serialize_int64_t+0xbc>
 8012510:	1b5e      	subs	r6, r3, r5
 8012512:	60a3      	str	r3, [r4, #8]
 8012514:	6923      	ldr	r3, [r4, #16]
 8012516:	f1c6 0808 	rsb	r8, r6, #8
 801251a:	4433      	add	r3, r6
 801251c:	6123      	str	r3, [r4, #16]
 801251e:	4641      	mov	r1, r8
 8012520:	4620      	mov	r0, r4
 8012522:	f000 fd6d 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8012526:	2800      	cmp	r0, #0
 8012528:	d074      	beq.n	8012614 <ucdr_serialize_int64_t+0x134>
 801252a:	7d23      	ldrb	r3, [r4, #20]
 801252c:	2b01      	cmp	r3, #1
 801252e:	f000 809b 	beq.w	8012668 <ucdr_serialize_int64_t+0x188>
 8012532:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012536:	702b      	strb	r3, [r5, #0]
 8012538:	2e00      	cmp	r6, #0
 801253a:	d078      	beq.n	801262e <ucdr_serialize_int64_t+0x14e>
 801253c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012540:	706b      	strb	r3, [r5, #1]
 8012542:	2e01      	cmp	r6, #1
 8012544:	d077      	beq.n	8012636 <ucdr_serialize_int64_t+0x156>
 8012546:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801254a:	70ab      	strb	r3, [r5, #2]
 801254c:	2e02      	cmp	r6, #2
 801254e:	d076      	beq.n	801263e <ucdr_serialize_int64_t+0x15e>
 8012550:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012554:	70eb      	strb	r3, [r5, #3]
 8012556:	2e03      	cmp	r6, #3
 8012558:	d075      	beq.n	8012646 <ucdr_serialize_int64_t+0x166>
 801255a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801255e:	712b      	strb	r3, [r5, #4]
 8012560:	2e04      	cmp	r6, #4
 8012562:	d074      	beq.n	801264e <ucdr_serialize_int64_t+0x16e>
 8012564:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012568:	716b      	strb	r3, [r5, #5]
 801256a:	2e05      	cmp	r6, #5
 801256c:	d073      	beq.n	8012656 <ucdr_serialize_int64_t+0x176>
 801256e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012572:	71ab      	strb	r3, [r5, #6]
 8012574:	2e06      	cmp	r6, #6
 8012576:	d072      	beq.n	801265e <ucdr_serialize_int64_t+0x17e>
 8012578:	f89d 3000 	ldrb.w	r3, [sp]
 801257c:	71eb      	strb	r3, [r5, #7]
 801257e:	6923      	ldr	r3, [r4, #16]
 8012580:	68a2      	ldr	r2, [r4, #8]
 8012582:	7da0      	ldrb	r0, [r4, #22]
 8012584:	3308      	adds	r3, #8
 8012586:	1b9e      	subs	r6, r3, r6
 8012588:	4442      	add	r2, r8
 801258a:	2308      	movs	r3, #8
 801258c:	f080 0001 	eor.w	r0, r0, #1
 8012590:	60a2      	str	r2, [r4, #8]
 8012592:	6126      	str	r6, [r4, #16]
 8012594:	7563      	strb	r3, [r4, #21]
 8012596:	b002      	add	sp, #8
 8012598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801259c:	2108      	movs	r1, #8
 801259e:	4620      	mov	r0, r4
 80125a0:	f000 fd2e 	bl	8013000 <ucdr_check_final_buffer_behavior>
 80125a4:	b350      	cbz	r0, 80125fc <ucdr_serialize_int64_t+0x11c>
 80125a6:	7d23      	ldrb	r3, [r4, #20]
 80125a8:	2b01      	cmp	r3, #1
 80125aa:	d02d      	beq.n	8012608 <ucdr_serialize_int64_t+0x128>
 80125ac:	68a3      	ldr	r3, [r4, #8]
 80125ae:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80125b2:	701a      	strb	r2, [r3, #0]
 80125b4:	68a3      	ldr	r3, [r4, #8]
 80125b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80125ba:	705a      	strb	r2, [r3, #1]
 80125bc:	68a3      	ldr	r3, [r4, #8]
 80125be:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80125c2:	709a      	strb	r2, [r3, #2]
 80125c4:	68a3      	ldr	r3, [r4, #8]
 80125c6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80125ca:	70da      	strb	r2, [r3, #3]
 80125cc:	68a3      	ldr	r3, [r4, #8]
 80125ce:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80125d2:	711a      	strb	r2, [r3, #4]
 80125d4:	68a3      	ldr	r3, [r4, #8]
 80125d6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80125da:	715a      	strb	r2, [r3, #5]
 80125dc:	68a3      	ldr	r3, [r4, #8]
 80125de:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80125e2:	719a      	strb	r2, [r3, #6]
 80125e4:	68a3      	ldr	r3, [r4, #8]
 80125e6:	f89d 2000 	ldrb.w	r2, [sp]
 80125ea:	71da      	strb	r2, [r3, #7]
 80125ec:	68a2      	ldr	r2, [r4, #8]
 80125ee:	6923      	ldr	r3, [r4, #16]
 80125f0:	3208      	adds	r2, #8
 80125f2:	3308      	adds	r3, #8
 80125f4:	2108      	movs	r1, #8
 80125f6:	60a2      	str	r2, [r4, #8]
 80125f8:	6123      	str	r3, [r4, #16]
 80125fa:	7561      	strb	r1, [r4, #21]
 80125fc:	7da0      	ldrb	r0, [r4, #22]
 80125fe:	f080 0001 	eor.w	r0, r0, #1
 8012602:	b002      	add	sp, #8
 8012604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012608:	466b      	mov	r3, sp
 801260a:	cb03      	ldmia	r3!, {r0, r1}
 801260c:	68a3      	ldr	r3, [r4, #8]
 801260e:	6018      	str	r0, [r3, #0]
 8012610:	6059      	str	r1, [r3, #4]
 8012612:	e7eb      	b.n	80125ec <ucdr_serialize_int64_t+0x10c>
 8012614:	68a2      	ldr	r2, [r4, #8]
 8012616:	6923      	ldr	r3, [r4, #16]
 8012618:	7da0      	ldrb	r0, [r4, #22]
 801261a:	7567      	strb	r7, [r4, #21]
 801261c:	1b92      	subs	r2, r2, r6
 801261e:	1b9b      	subs	r3, r3, r6
 8012620:	f080 0001 	eor.w	r0, r0, #1
 8012624:	60a2      	str	r2, [r4, #8]
 8012626:	6123      	str	r3, [r4, #16]
 8012628:	b002      	add	sp, #8
 801262a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801262e:	68a3      	ldr	r3, [r4, #8]
 8012630:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012634:	701a      	strb	r2, [r3, #0]
 8012636:	68a3      	ldr	r3, [r4, #8]
 8012638:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801263c:	701a      	strb	r2, [r3, #0]
 801263e:	68a3      	ldr	r3, [r4, #8]
 8012640:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012644:	701a      	strb	r2, [r3, #0]
 8012646:	68a3      	ldr	r3, [r4, #8]
 8012648:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801264c:	701a      	strb	r2, [r3, #0]
 801264e:	68a3      	ldr	r3, [r4, #8]
 8012650:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012654:	701a      	strb	r2, [r3, #0]
 8012656:	68a3      	ldr	r3, [r4, #8]
 8012658:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801265c:	701a      	strb	r2, [r3, #0]
 801265e:	68a3      	ldr	r3, [r4, #8]
 8012660:	f89d 2000 	ldrb.w	r2, [sp]
 8012664:	701a      	strb	r2, [r3, #0]
 8012666:	e78a      	b.n	801257e <ucdr_serialize_int64_t+0x9e>
 8012668:	4628      	mov	r0, r5
 801266a:	466d      	mov	r5, sp
 801266c:	4629      	mov	r1, r5
 801266e:	4632      	mov	r2, r6
 8012670:	f008 f89a 	bl	801a7a8 <memcpy>
 8012674:	68a0      	ldr	r0, [r4, #8]
 8012676:	4642      	mov	r2, r8
 8012678:	19a9      	adds	r1, r5, r6
 801267a:	f008 f895 	bl	801a7a8 <memcpy>
 801267e:	e77e      	b.n	801257e <ucdr_serialize_int64_t+0x9e>

08012680 <ucdr_deserialize_int64_t>:
 8012680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012684:	460d      	mov	r5, r1
 8012686:	2108      	movs	r1, #8
 8012688:	4604      	mov	r4, r0
 801268a:	f000 fd0d 	bl	80130a8 <ucdr_buffer_alignment>
 801268e:	4601      	mov	r1, r0
 8012690:	4620      	mov	r0, r4
 8012692:	f894 9015 	ldrb.w	r9, [r4, #21]
 8012696:	f000 fd4b 	bl	8013130 <ucdr_advance_buffer>
 801269a:	2108      	movs	r1, #8
 801269c:	4620      	mov	r0, r4
 801269e:	f000 fca3 	bl	8012fe8 <ucdr_check_buffer_available_for>
 80126a2:	2800      	cmp	r0, #0
 80126a4:	d151      	bne.n	801274a <ucdr_deserialize_int64_t+0xca>
 80126a6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80126aa:	42be      	cmp	r6, r7
 80126ac:	d948      	bls.n	8012740 <ucdr_deserialize_int64_t+0xc0>
 80126ae:	6923      	ldr	r3, [r4, #16]
 80126b0:	60a6      	str	r6, [r4, #8]
 80126b2:	1bf6      	subs	r6, r6, r7
 80126b4:	4433      	add	r3, r6
 80126b6:	f1c6 0808 	rsb	r8, r6, #8
 80126ba:	6123      	str	r3, [r4, #16]
 80126bc:	4641      	mov	r1, r8
 80126be:	4620      	mov	r0, r4
 80126c0:	f000 fc9e 	bl	8013000 <ucdr_check_final_buffer_behavior>
 80126c4:	2800      	cmp	r0, #0
 80126c6:	d06d      	beq.n	80127a4 <ucdr_deserialize_int64_t+0x124>
 80126c8:	7d23      	ldrb	r3, [r4, #20]
 80126ca:	2b01      	cmp	r3, #1
 80126cc:	f000 8093 	beq.w	80127f6 <ucdr_deserialize_int64_t+0x176>
 80126d0:	79fb      	ldrb	r3, [r7, #7]
 80126d2:	702b      	strb	r3, [r5, #0]
 80126d4:	2e00      	cmp	r6, #0
 80126d6:	d072      	beq.n	80127be <ucdr_deserialize_int64_t+0x13e>
 80126d8:	79bb      	ldrb	r3, [r7, #6]
 80126da:	706b      	strb	r3, [r5, #1]
 80126dc:	2e01      	cmp	r6, #1
 80126de:	f105 0302 	add.w	r3, r5, #2
 80126e2:	d070      	beq.n	80127c6 <ucdr_deserialize_int64_t+0x146>
 80126e4:	797b      	ldrb	r3, [r7, #5]
 80126e6:	70ab      	strb	r3, [r5, #2]
 80126e8:	2e02      	cmp	r6, #2
 80126ea:	f105 0303 	add.w	r3, r5, #3
 80126ee:	d06e      	beq.n	80127ce <ucdr_deserialize_int64_t+0x14e>
 80126f0:	793b      	ldrb	r3, [r7, #4]
 80126f2:	70eb      	strb	r3, [r5, #3]
 80126f4:	2e03      	cmp	r6, #3
 80126f6:	f105 0304 	add.w	r3, r5, #4
 80126fa:	d06c      	beq.n	80127d6 <ucdr_deserialize_int64_t+0x156>
 80126fc:	78fb      	ldrb	r3, [r7, #3]
 80126fe:	712b      	strb	r3, [r5, #4]
 8012700:	2e04      	cmp	r6, #4
 8012702:	f105 0305 	add.w	r3, r5, #5
 8012706:	d06a      	beq.n	80127de <ucdr_deserialize_int64_t+0x15e>
 8012708:	78bb      	ldrb	r3, [r7, #2]
 801270a:	716b      	strb	r3, [r5, #5]
 801270c:	2e05      	cmp	r6, #5
 801270e:	f105 0306 	add.w	r3, r5, #6
 8012712:	d068      	beq.n	80127e6 <ucdr_deserialize_int64_t+0x166>
 8012714:	787b      	ldrb	r3, [r7, #1]
 8012716:	71ab      	strb	r3, [r5, #6]
 8012718:	2e06      	cmp	r6, #6
 801271a:	f105 0307 	add.w	r3, r5, #7
 801271e:	d066      	beq.n	80127ee <ucdr_deserialize_int64_t+0x16e>
 8012720:	783b      	ldrb	r3, [r7, #0]
 8012722:	71eb      	strb	r3, [r5, #7]
 8012724:	6923      	ldr	r3, [r4, #16]
 8012726:	68a2      	ldr	r2, [r4, #8]
 8012728:	7da0      	ldrb	r0, [r4, #22]
 801272a:	3308      	adds	r3, #8
 801272c:	1b9e      	subs	r6, r3, r6
 801272e:	2308      	movs	r3, #8
 8012730:	4442      	add	r2, r8
 8012732:	7563      	strb	r3, [r4, #21]
 8012734:	60a2      	str	r2, [r4, #8]
 8012736:	6126      	str	r6, [r4, #16]
 8012738:	f080 0001 	eor.w	r0, r0, #1
 801273c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012740:	2108      	movs	r1, #8
 8012742:	4620      	mov	r0, r4
 8012744:	f000 fc5c 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8012748:	b310      	cbz	r0, 8012790 <ucdr_deserialize_int64_t+0x110>
 801274a:	7d23      	ldrb	r3, [r4, #20]
 801274c:	2b01      	cmp	r3, #1
 801274e:	68a3      	ldr	r3, [r4, #8]
 8012750:	d023      	beq.n	801279a <ucdr_deserialize_int64_t+0x11a>
 8012752:	79db      	ldrb	r3, [r3, #7]
 8012754:	702b      	strb	r3, [r5, #0]
 8012756:	68a3      	ldr	r3, [r4, #8]
 8012758:	799b      	ldrb	r3, [r3, #6]
 801275a:	706b      	strb	r3, [r5, #1]
 801275c:	68a3      	ldr	r3, [r4, #8]
 801275e:	795b      	ldrb	r3, [r3, #5]
 8012760:	70ab      	strb	r3, [r5, #2]
 8012762:	68a3      	ldr	r3, [r4, #8]
 8012764:	791b      	ldrb	r3, [r3, #4]
 8012766:	70eb      	strb	r3, [r5, #3]
 8012768:	68a3      	ldr	r3, [r4, #8]
 801276a:	78db      	ldrb	r3, [r3, #3]
 801276c:	712b      	strb	r3, [r5, #4]
 801276e:	68a3      	ldr	r3, [r4, #8]
 8012770:	789b      	ldrb	r3, [r3, #2]
 8012772:	716b      	strb	r3, [r5, #5]
 8012774:	68a3      	ldr	r3, [r4, #8]
 8012776:	785b      	ldrb	r3, [r3, #1]
 8012778:	71ab      	strb	r3, [r5, #6]
 801277a:	68a3      	ldr	r3, [r4, #8]
 801277c:	781b      	ldrb	r3, [r3, #0]
 801277e:	71eb      	strb	r3, [r5, #7]
 8012780:	68a2      	ldr	r2, [r4, #8]
 8012782:	6923      	ldr	r3, [r4, #16]
 8012784:	3208      	adds	r2, #8
 8012786:	3308      	adds	r3, #8
 8012788:	2108      	movs	r1, #8
 801278a:	60a2      	str	r2, [r4, #8]
 801278c:	6123      	str	r3, [r4, #16]
 801278e:	7561      	strb	r1, [r4, #21]
 8012790:	7da0      	ldrb	r0, [r4, #22]
 8012792:	f080 0001 	eor.w	r0, r0, #1
 8012796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801279a:	681a      	ldr	r2, [r3, #0]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	606b      	str	r3, [r5, #4]
 80127a0:	602a      	str	r2, [r5, #0]
 80127a2:	e7ed      	b.n	8012780 <ucdr_deserialize_int64_t+0x100>
 80127a4:	68a2      	ldr	r2, [r4, #8]
 80127a6:	6923      	ldr	r3, [r4, #16]
 80127a8:	7da0      	ldrb	r0, [r4, #22]
 80127aa:	f884 9015 	strb.w	r9, [r4, #21]
 80127ae:	1b92      	subs	r2, r2, r6
 80127b0:	1b9b      	subs	r3, r3, r6
 80127b2:	60a2      	str	r2, [r4, #8]
 80127b4:	6123      	str	r3, [r4, #16]
 80127b6:	f080 0001 	eor.w	r0, r0, #1
 80127ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127be:	68a3      	ldr	r3, [r4, #8]
 80127c0:	799b      	ldrb	r3, [r3, #6]
 80127c2:	706b      	strb	r3, [r5, #1]
 80127c4:	1cab      	adds	r3, r5, #2
 80127c6:	68a2      	ldr	r2, [r4, #8]
 80127c8:	7952      	ldrb	r2, [r2, #5]
 80127ca:	f803 2b01 	strb.w	r2, [r3], #1
 80127ce:	68a2      	ldr	r2, [r4, #8]
 80127d0:	7912      	ldrb	r2, [r2, #4]
 80127d2:	f803 2b01 	strb.w	r2, [r3], #1
 80127d6:	68a2      	ldr	r2, [r4, #8]
 80127d8:	78d2      	ldrb	r2, [r2, #3]
 80127da:	f803 2b01 	strb.w	r2, [r3], #1
 80127de:	68a2      	ldr	r2, [r4, #8]
 80127e0:	7892      	ldrb	r2, [r2, #2]
 80127e2:	f803 2b01 	strb.w	r2, [r3], #1
 80127e6:	68a2      	ldr	r2, [r4, #8]
 80127e8:	7852      	ldrb	r2, [r2, #1]
 80127ea:	f803 2b01 	strb.w	r2, [r3], #1
 80127ee:	68a2      	ldr	r2, [r4, #8]
 80127f0:	7812      	ldrb	r2, [r2, #0]
 80127f2:	701a      	strb	r2, [r3, #0]
 80127f4:	e796      	b.n	8012724 <ucdr_deserialize_int64_t+0xa4>
 80127f6:	4639      	mov	r1, r7
 80127f8:	4632      	mov	r2, r6
 80127fa:	4628      	mov	r0, r5
 80127fc:	f007 ffd4 	bl	801a7a8 <memcpy>
 8012800:	68a1      	ldr	r1, [r4, #8]
 8012802:	4642      	mov	r2, r8
 8012804:	19a8      	adds	r0, r5, r6
 8012806:	f007 ffcf 	bl	801a7a8 <memcpy>
 801280a:	e78b      	b.n	8012724 <ucdr_deserialize_int64_t+0xa4>

0801280c <ucdr_serialize_float>:
 801280c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012810:	2104      	movs	r1, #4
 8012812:	b082      	sub	sp, #8
 8012814:	4604      	mov	r4, r0
 8012816:	ed8d 0a01 	vstr	s0, [sp, #4]
 801281a:	f000 fc45 	bl	80130a8 <ucdr_buffer_alignment>
 801281e:	4601      	mov	r1, r0
 8012820:	4620      	mov	r0, r4
 8012822:	7d67      	ldrb	r7, [r4, #21]
 8012824:	f000 fc84 	bl	8013130 <ucdr_advance_buffer>
 8012828:	2104      	movs	r1, #4
 801282a:	4620      	mov	r0, r4
 801282c:	f000 fbdc 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8012830:	2800      	cmp	r0, #0
 8012832:	d139      	bne.n	80128a8 <ucdr_serialize_float+0x9c>
 8012834:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012838:	42ab      	cmp	r3, r5
 801283a:	d930      	bls.n	801289e <ucdr_serialize_float+0x92>
 801283c:	1b5e      	subs	r6, r3, r5
 801283e:	60a3      	str	r3, [r4, #8]
 8012840:	6923      	ldr	r3, [r4, #16]
 8012842:	f1c6 0804 	rsb	r8, r6, #4
 8012846:	4433      	add	r3, r6
 8012848:	6123      	str	r3, [r4, #16]
 801284a:	4641      	mov	r1, r8
 801284c:	4620      	mov	r0, r4
 801284e:	f000 fbd7 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8012852:	2800      	cmp	r0, #0
 8012854:	d04c      	beq.n	80128f0 <ucdr_serialize_float+0xe4>
 8012856:	7d23      	ldrb	r3, [r4, #20]
 8012858:	2b01      	cmp	r3, #1
 801285a:	d063      	beq.n	8012924 <ucdr_serialize_float+0x118>
 801285c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012860:	702b      	strb	r3, [r5, #0]
 8012862:	2e00      	cmp	r6, #0
 8012864:	d051      	beq.n	801290a <ucdr_serialize_float+0xfe>
 8012866:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801286a:	706b      	strb	r3, [r5, #1]
 801286c:	2e01      	cmp	r6, #1
 801286e:	d050      	beq.n	8012912 <ucdr_serialize_float+0x106>
 8012870:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012874:	70ab      	strb	r3, [r5, #2]
 8012876:	2e02      	cmp	r6, #2
 8012878:	d04f      	beq.n	801291a <ucdr_serialize_float+0x10e>
 801287a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801287e:	70eb      	strb	r3, [r5, #3]
 8012880:	6923      	ldr	r3, [r4, #16]
 8012882:	68a2      	ldr	r2, [r4, #8]
 8012884:	7da0      	ldrb	r0, [r4, #22]
 8012886:	3304      	adds	r3, #4
 8012888:	1b9e      	subs	r6, r3, r6
 801288a:	4442      	add	r2, r8
 801288c:	2304      	movs	r3, #4
 801288e:	f080 0001 	eor.w	r0, r0, #1
 8012892:	60a2      	str	r2, [r4, #8]
 8012894:	6126      	str	r6, [r4, #16]
 8012896:	7563      	strb	r3, [r4, #21]
 8012898:	b002      	add	sp, #8
 801289a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801289e:	2104      	movs	r1, #4
 80128a0:	4620      	mov	r0, r4
 80128a2:	f000 fbad 	bl	8013000 <ucdr_check_final_buffer_behavior>
 80128a6:	b1d0      	cbz	r0, 80128de <ucdr_serialize_float+0xd2>
 80128a8:	7d23      	ldrb	r3, [r4, #20]
 80128aa:	2b01      	cmp	r3, #1
 80128ac:	68a3      	ldr	r3, [r4, #8]
 80128ae:	d01c      	beq.n	80128ea <ucdr_serialize_float+0xde>
 80128b0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80128b4:	701a      	strb	r2, [r3, #0]
 80128b6:	68a3      	ldr	r3, [r4, #8]
 80128b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80128bc:	705a      	strb	r2, [r3, #1]
 80128be:	68a3      	ldr	r3, [r4, #8]
 80128c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80128c4:	709a      	strb	r2, [r3, #2]
 80128c6:	68a3      	ldr	r3, [r4, #8]
 80128c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80128cc:	70da      	strb	r2, [r3, #3]
 80128ce:	68a2      	ldr	r2, [r4, #8]
 80128d0:	6923      	ldr	r3, [r4, #16]
 80128d2:	3204      	adds	r2, #4
 80128d4:	3304      	adds	r3, #4
 80128d6:	2104      	movs	r1, #4
 80128d8:	60a2      	str	r2, [r4, #8]
 80128da:	6123      	str	r3, [r4, #16]
 80128dc:	7561      	strb	r1, [r4, #21]
 80128de:	7da0      	ldrb	r0, [r4, #22]
 80128e0:	f080 0001 	eor.w	r0, r0, #1
 80128e4:	b002      	add	sp, #8
 80128e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128ea:	9a01      	ldr	r2, [sp, #4]
 80128ec:	601a      	str	r2, [r3, #0]
 80128ee:	e7ee      	b.n	80128ce <ucdr_serialize_float+0xc2>
 80128f0:	68a2      	ldr	r2, [r4, #8]
 80128f2:	6923      	ldr	r3, [r4, #16]
 80128f4:	7da0      	ldrb	r0, [r4, #22]
 80128f6:	7567      	strb	r7, [r4, #21]
 80128f8:	1b92      	subs	r2, r2, r6
 80128fa:	1b9b      	subs	r3, r3, r6
 80128fc:	f080 0001 	eor.w	r0, r0, #1
 8012900:	60a2      	str	r2, [r4, #8]
 8012902:	6123      	str	r3, [r4, #16]
 8012904:	b002      	add	sp, #8
 8012906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801290a:	68a3      	ldr	r3, [r4, #8]
 801290c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012910:	701a      	strb	r2, [r3, #0]
 8012912:	68a3      	ldr	r3, [r4, #8]
 8012914:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012918:	701a      	strb	r2, [r3, #0]
 801291a:	68a3      	ldr	r3, [r4, #8]
 801291c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012920:	701a      	strb	r2, [r3, #0]
 8012922:	e7ad      	b.n	8012880 <ucdr_serialize_float+0x74>
 8012924:	4628      	mov	r0, r5
 8012926:	ad01      	add	r5, sp, #4
 8012928:	4629      	mov	r1, r5
 801292a:	4632      	mov	r2, r6
 801292c:	f007 ff3c 	bl	801a7a8 <memcpy>
 8012930:	68a0      	ldr	r0, [r4, #8]
 8012932:	4642      	mov	r2, r8
 8012934:	19a9      	adds	r1, r5, r6
 8012936:	f007 ff37 	bl	801a7a8 <memcpy>
 801293a:	e7a1      	b.n	8012880 <ucdr_serialize_float+0x74>

0801293c <ucdr_serialize_endian_float>:
 801293c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012940:	460d      	mov	r5, r1
 8012942:	b083      	sub	sp, #12
 8012944:	2104      	movs	r1, #4
 8012946:	4604      	mov	r4, r0
 8012948:	ed8d 0a01 	vstr	s0, [sp, #4]
 801294c:	f000 fbac 	bl	80130a8 <ucdr_buffer_alignment>
 8012950:	4601      	mov	r1, r0
 8012952:	4620      	mov	r0, r4
 8012954:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012958:	f000 fbea 	bl	8013130 <ucdr_advance_buffer>
 801295c:	2104      	movs	r1, #4
 801295e:	4620      	mov	r0, r4
 8012960:	f000 fb42 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8012964:	2800      	cmp	r0, #0
 8012966:	d138      	bne.n	80129da <ucdr_serialize_endian_float+0x9e>
 8012968:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801296c:	42b7      	cmp	r7, r6
 801296e:	d92f      	bls.n	80129d0 <ucdr_serialize_endian_float+0x94>
 8012970:	6923      	ldr	r3, [r4, #16]
 8012972:	60a7      	str	r7, [r4, #8]
 8012974:	1bbf      	subs	r7, r7, r6
 8012976:	443b      	add	r3, r7
 8012978:	f1c7 0904 	rsb	r9, r7, #4
 801297c:	6123      	str	r3, [r4, #16]
 801297e:	4649      	mov	r1, r9
 8012980:	4620      	mov	r0, r4
 8012982:	f000 fb3d 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8012986:	2800      	cmp	r0, #0
 8012988:	d04a      	beq.n	8012a20 <ucdr_serialize_endian_float+0xe4>
 801298a:	2d01      	cmp	r5, #1
 801298c:	d063      	beq.n	8012a56 <ucdr_serialize_endian_float+0x11a>
 801298e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012992:	7033      	strb	r3, [r6, #0]
 8012994:	2f00      	cmp	r7, #0
 8012996:	d051      	beq.n	8012a3c <ucdr_serialize_endian_float+0x100>
 8012998:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801299c:	7073      	strb	r3, [r6, #1]
 801299e:	2f01      	cmp	r7, #1
 80129a0:	d050      	beq.n	8012a44 <ucdr_serialize_endian_float+0x108>
 80129a2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80129a6:	70b3      	strb	r3, [r6, #2]
 80129a8:	2f02      	cmp	r7, #2
 80129aa:	d04f      	beq.n	8012a4c <ucdr_serialize_endian_float+0x110>
 80129ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80129b0:	70f3      	strb	r3, [r6, #3]
 80129b2:	6923      	ldr	r3, [r4, #16]
 80129b4:	68a2      	ldr	r2, [r4, #8]
 80129b6:	7da0      	ldrb	r0, [r4, #22]
 80129b8:	3304      	adds	r3, #4
 80129ba:	444a      	add	r2, r9
 80129bc:	1bdb      	subs	r3, r3, r7
 80129be:	2104      	movs	r1, #4
 80129c0:	f080 0001 	eor.w	r0, r0, #1
 80129c4:	60a2      	str	r2, [r4, #8]
 80129c6:	6123      	str	r3, [r4, #16]
 80129c8:	7561      	strb	r1, [r4, #21]
 80129ca:	b003      	add	sp, #12
 80129cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129d0:	2104      	movs	r1, #4
 80129d2:	4620      	mov	r0, r4
 80129d4:	f000 fb14 	bl	8013000 <ucdr_check_final_buffer_behavior>
 80129d8:	b1c8      	cbz	r0, 8012a0e <ucdr_serialize_endian_float+0xd2>
 80129da:	2d01      	cmp	r5, #1
 80129dc:	68a3      	ldr	r3, [r4, #8]
 80129de:	d01c      	beq.n	8012a1a <ucdr_serialize_endian_float+0xde>
 80129e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80129e4:	701a      	strb	r2, [r3, #0]
 80129e6:	68a3      	ldr	r3, [r4, #8]
 80129e8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80129ec:	705a      	strb	r2, [r3, #1]
 80129ee:	68a3      	ldr	r3, [r4, #8]
 80129f0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80129f4:	709a      	strb	r2, [r3, #2]
 80129f6:	68a3      	ldr	r3, [r4, #8]
 80129f8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80129fc:	70da      	strb	r2, [r3, #3]
 80129fe:	68a2      	ldr	r2, [r4, #8]
 8012a00:	6923      	ldr	r3, [r4, #16]
 8012a02:	3204      	adds	r2, #4
 8012a04:	3304      	adds	r3, #4
 8012a06:	2104      	movs	r1, #4
 8012a08:	60a2      	str	r2, [r4, #8]
 8012a0a:	6123      	str	r3, [r4, #16]
 8012a0c:	7561      	strb	r1, [r4, #21]
 8012a0e:	7da0      	ldrb	r0, [r4, #22]
 8012a10:	f080 0001 	eor.w	r0, r0, #1
 8012a14:	b003      	add	sp, #12
 8012a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a1a:	9a01      	ldr	r2, [sp, #4]
 8012a1c:	601a      	str	r2, [r3, #0]
 8012a1e:	e7ee      	b.n	80129fe <ucdr_serialize_endian_float+0xc2>
 8012a20:	68a2      	ldr	r2, [r4, #8]
 8012a22:	6923      	ldr	r3, [r4, #16]
 8012a24:	7da0      	ldrb	r0, [r4, #22]
 8012a26:	f884 8015 	strb.w	r8, [r4, #21]
 8012a2a:	1bd2      	subs	r2, r2, r7
 8012a2c:	1bdb      	subs	r3, r3, r7
 8012a2e:	f080 0001 	eor.w	r0, r0, #1
 8012a32:	60a2      	str	r2, [r4, #8]
 8012a34:	6123      	str	r3, [r4, #16]
 8012a36:	b003      	add	sp, #12
 8012a38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a3c:	68a3      	ldr	r3, [r4, #8]
 8012a3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012a42:	701a      	strb	r2, [r3, #0]
 8012a44:	68a3      	ldr	r3, [r4, #8]
 8012a46:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012a4a:	701a      	strb	r2, [r3, #0]
 8012a4c:	68a3      	ldr	r3, [r4, #8]
 8012a4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012a52:	701a      	strb	r2, [r3, #0]
 8012a54:	e7ad      	b.n	80129b2 <ucdr_serialize_endian_float+0x76>
 8012a56:	ad01      	add	r5, sp, #4
 8012a58:	4629      	mov	r1, r5
 8012a5a:	463a      	mov	r2, r7
 8012a5c:	4630      	mov	r0, r6
 8012a5e:	f007 fea3 	bl	801a7a8 <memcpy>
 8012a62:	68a0      	ldr	r0, [r4, #8]
 8012a64:	464a      	mov	r2, r9
 8012a66:	19e9      	adds	r1, r5, r7
 8012a68:	f007 fe9e 	bl	801a7a8 <memcpy>
 8012a6c:	e7a1      	b.n	80129b2 <ucdr_serialize_endian_float+0x76>
 8012a6e:	bf00      	nop

08012a70 <ucdr_deserialize_float>:
 8012a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a74:	460d      	mov	r5, r1
 8012a76:	2104      	movs	r1, #4
 8012a78:	4604      	mov	r4, r0
 8012a7a:	f000 fb15 	bl	80130a8 <ucdr_buffer_alignment>
 8012a7e:	4601      	mov	r1, r0
 8012a80:	4620      	mov	r0, r4
 8012a82:	f894 8015 	ldrb.w	r8, [r4, #21]
 8012a86:	f000 fb53 	bl	8013130 <ucdr_advance_buffer>
 8012a8a:	2104      	movs	r1, #4
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	f000 faab 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8012a92:	2800      	cmp	r0, #0
 8012a94:	d138      	bne.n	8012b08 <ucdr_deserialize_float+0x98>
 8012a96:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8012a9a:	42b7      	cmp	r7, r6
 8012a9c:	d92f      	bls.n	8012afe <ucdr_deserialize_float+0x8e>
 8012a9e:	6923      	ldr	r3, [r4, #16]
 8012aa0:	60a7      	str	r7, [r4, #8]
 8012aa2:	1bbf      	subs	r7, r7, r6
 8012aa4:	443b      	add	r3, r7
 8012aa6:	f1c7 0904 	rsb	r9, r7, #4
 8012aaa:	6123      	str	r3, [r4, #16]
 8012aac:	4649      	mov	r1, r9
 8012aae:	4620      	mov	r0, r4
 8012ab0:	f000 faa6 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8012ab4:	2800      	cmp	r0, #0
 8012ab6:	d046      	beq.n	8012b46 <ucdr_deserialize_float+0xd6>
 8012ab8:	7d23      	ldrb	r3, [r4, #20]
 8012aba:	2b01      	cmp	r3, #1
 8012abc:	d05c      	beq.n	8012b78 <ucdr_deserialize_float+0x108>
 8012abe:	78f3      	ldrb	r3, [r6, #3]
 8012ac0:	702b      	strb	r3, [r5, #0]
 8012ac2:	2f00      	cmp	r7, #0
 8012ac4:	d04c      	beq.n	8012b60 <ucdr_deserialize_float+0xf0>
 8012ac6:	78b3      	ldrb	r3, [r6, #2]
 8012ac8:	706b      	strb	r3, [r5, #1]
 8012aca:	2f01      	cmp	r7, #1
 8012acc:	f105 0302 	add.w	r3, r5, #2
 8012ad0:	d04a      	beq.n	8012b68 <ucdr_deserialize_float+0xf8>
 8012ad2:	7873      	ldrb	r3, [r6, #1]
 8012ad4:	70ab      	strb	r3, [r5, #2]
 8012ad6:	2f02      	cmp	r7, #2
 8012ad8:	f105 0303 	add.w	r3, r5, #3
 8012adc:	d048      	beq.n	8012b70 <ucdr_deserialize_float+0x100>
 8012ade:	7833      	ldrb	r3, [r6, #0]
 8012ae0:	70eb      	strb	r3, [r5, #3]
 8012ae2:	6923      	ldr	r3, [r4, #16]
 8012ae4:	68a2      	ldr	r2, [r4, #8]
 8012ae6:	7da0      	ldrb	r0, [r4, #22]
 8012ae8:	2104      	movs	r1, #4
 8012aea:	3304      	adds	r3, #4
 8012aec:	444a      	add	r2, r9
 8012aee:	1bdb      	subs	r3, r3, r7
 8012af0:	7561      	strb	r1, [r4, #21]
 8012af2:	60a2      	str	r2, [r4, #8]
 8012af4:	6123      	str	r3, [r4, #16]
 8012af6:	f080 0001 	eor.w	r0, r0, #1
 8012afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012afe:	2104      	movs	r1, #4
 8012b00:	4620      	mov	r0, r4
 8012b02:	f000 fa7d 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8012b06:	b1b0      	cbz	r0, 8012b36 <ucdr_deserialize_float+0xc6>
 8012b08:	7d23      	ldrb	r3, [r4, #20]
 8012b0a:	2b01      	cmp	r3, #1
 8012b0c:	68a3      	ldr	r3, [r4, #8]
 8012b0e:	d017      	beq.n	8012b40 <ucdr_deserialize_float+0xd0>
 8012b10:	78db      	ldrb	r3, [r3, #3]
 8012b12:	702b      	strb	r3, [r5, #0]
 8012b14:	68a3      	ldr	r3, [r4, #8]
 8012b16:	789b      	ldrb	r3, [r3, #2]
 8012b18:	706b      	strb	r3, [r5, #1]
 8012b1a:	68a3      	ldr	r3, [r4, #8]
 8012b1c:	785b      	ldrb	r3, [r3, #1]
 8012b1e:	70ab      	strb	r3, [r5, #2]
 8012b20:	68a3      	ldr	r3, [r4, #8]
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	70eb      	strb	r3, [r5, #3]
 8012b26:	68a2      	ldr	r2, [r4, #8]
 8012b28:	6923      	ldr	r3, [r4, #16]
 8012b2a:	3204      	adds	r2, #4
 8012b2c:	3304      	adds	r3, #4
 8012b2e:	2104      	movs	r1, #4
 8012b30:	60a2      	str	r2, [r4, #8]
 8012b32:	6123      	str	r3, [r4, #16]
 8012b34:	7561      	strb	r1, [r4, #21]
 8012b36:	7da0      	ldrb	r0, [r4, #22]
 8012b38:	f080 0001 	eor.w	r0, r0, #1
 8012b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	602b      	str	r3, [r5, #0]
 8012b44:	e7ef      	b.n	8012b26 <ucdr_deserialize_float+0xb6>
 8012b46:	68a2      	ldr	r2, [r4, #8]
 8012b48:	6923      	ldr	r3, [r4, #16]
 8012b4a:	7da0      	ldrb	r0, [r4, #22]
 8012b4c:	f884 8015 	strb.w	r8, [r4, #21]
 8012b50:	1bd2      	subs	r2, r2, r7
 8012b52:	1bdb      	subs	r3, r3, r7
 8012b54:	60a2      	str	r2, [r4, #8]
 8012b56:	6123      	str	r3, [r4, #16]
 8012b58:	f080 0001 	eor.w	r0, r0, #1
 8012b5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b60:	68a3      	ldr	r3, [r4, #8]
 8012b62:	789b      	ldrb	r3, [r3, #2]
 8012b64:	706b      	strb	r3, [r5, #1]
 8012b66:	1cab      	adds	r3, r5, #2
 8012b68:	68a2      	ldr	r2, [r4, #8]
 8012b6a:	7852      	ldrb	r2, [r2, #1]
 8012b6c:	f803 2b01 	strb.w	r2, [r3], #1
 8012b70:	68a2      	ldr	r2, [r4, #8]
 8012b72:	7812      	ldrb	r2, [r2, #0]
 8012b74:	701a      	strb	r2, [r3, #0]
 8012b76:	e7b4      	b.n	8012ae2 <ucdr_deserialize_float+0x72>
 8012b78:	4631      	mov	r1, r6
 8012b7a:	463a      	mov	r2, r7
 8012b7c:	4628      	mov	r0, r5
 8012b7e:	f007 fe13 	bl	801a7a8 <memcpy>
 8012b82:	68a1      	ldr	r1, [r4, #8]
 8012b84:	464a      	mov	r2, r9
 8012b86:	19e8      	adds	r0, r5, r7
 8012b88:	f007 fe0e 	bl	801a7a8 <memcpy>
 8012b8c:	e7a9      	b.n	8012ae2 <ucdr_deserialize_float+0x72>
 8012b8e:	bf00      	nop

08012b90 <ucdr_deserialize_endian_float>:
 8012b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b94:	460e      	mov	r6, r1
 8012b96:	2104      	movs	r1, #4
 8012b98:	4604      	mov	r4, r0
 8012b9a:	4615      	mov	r5, r2
 8012b9c:	f000 fa84 	bl	80130a8 <ucdr_buffer_alignment>
 8012ba0:	4601      	mov	r1, r0
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	f894 9015 	ldrb.w	r9, [r4, #21]
 8012ba8:	f000 fac2 	bl	8013130 <ucdr_advance_buffer>
 8012bac:	2104      	movs	r1, #4
 8012bae:	4620      	mov	r0, r4
 8012bb0:	f000 fa1a 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8012bb4:	2800      	cmp	r0, #0
 8012bb6:	d13c      	bne.n	8012c32 <ucdr_deserialize_endian_float+0xa2>
 8012bb8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8012bbc:	42bb      	cmp	r3, r7
 8012bbe:	d933      	bls.n	8012c28 <ucdr_deserialize_endian_float+0x98>
 8012bc0:	eba3 0807 	sub.w	r8, r3, r7
 8012bc4:	60a3      	str	r3, [r4, #8]
 8012bc6:	6923      	ldr	r3, [r4, #16]
 8012bc8:	f1c8 0a04 	rsb	sl, r8, #4
 8012bcc:	4443      	add	r3, r8
 8012bce:	6123      	str	r3, [r4, #16]
 8012bd0:	4651      	mov	r1, sl
 8012bd2:	4620      	mov	r0, r4
 8012bd4:	f000 fa14 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8012bd8:	2800      	cmp	r0, #0
 8012bda:	d048      	beq.n	8012c6e <ucdr_deserialize_endian_float+0xde>
 8012bdc:	2e01      	cmp	r6, #1
 8012bde:	d061      	beq.n	8012ca4 <ucdr_deserialize_endian_float+0x114>
 8012be0:	78fb      	ldrb	r3, [r7, #3]
 8012be2:	702b      	strb	r3, [r5, #0]
 8012be4:	f1b8 0f00 	cmp.w	r8, #0
 8012be8:	d050      	beq.n	8012c8c <ucdr_deserialize_endian_float+0xfc>
 8012bea:	78bb      	ldrb	r3, [r7, #2]
 8012bec:	706b      	strb	r3, [r5, #1]
 8012bee:	f1b8 0f01 	cmp.w	r8, #1
 8012bf2:	f105 0302 	add.w	r3, r5, #2
 8012bf6:	d04d      	beq.n	8012c94 <ucdr_deserialize_endian_float+0x104>
 8012bf8:	787b      	ldrb	r3, [r7, #1]
 8012bfa:	70ab      	strb	r3, [r5, #2]
 8012bfc:	f1b8 0f02 	cmp.w	r8, #2
 8012c00:	f105 0303 	add.w	r3, r5, #3
 8012c04:	d04a      	beq.n	8012c9c <ucdr_deserialize_endian_float+0x10c>
 8012c06:	783b      	ldrb	r3, [r7, #0]
 8012c08:	70eb      	strb	r3, [r5, #3]
 8012c0a:	6923      	ldr	r3, [r4, #16]
 8012c0c:	68a2      	ldr	r2, [r4, #8]
 8012c0e:	7da0      	ldrb	r0, [r4, #22]
 8012c10:	2104      	movs	r1, #4
 8012c12:	3304      	adds	r3, #4
 8012c14:	4452      	add	r2, sl
 8012c16:	eba3 0308 	sub.w	r3, r3, r8
 8012c1a:	7561      	strb	r1, [r4, #21]
 8012c1c:	60a2      	str	r2, [r4, #8]
 8012c1e:	6123      	str	r3, [r4, #16]
 8012c20:	f080 0001 	eor.w	r0, r0, #1
 8012c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c28:	2104      	movs	r1, #4
 8012c2a:	4620      	mov	r0, r4
 8012c2c:	f000 f9e8 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8012c30:	b1a8      	cbz	r0, 8012c5e <ucdr_deserialize_endian_float+0xce>
 8012c32:	2e01      	cmp	r6, #1
 8012c34:	68a3      	ldr	r3, [r4, #8]
 8012c36:	d017      	beq.n	8012c68 <ucdr_deserialize_endian_float+0xd8>
 8012c38:	78db      	ldrb	r3, [r3, #3]
 8012c3a:	702b      	strb	r3, [r5, #0]
 8012c3c:	68a3      	ldr	r3, [r4, #8]
 8012c3e:	789b      	ldrb	r3, [r3, #2]
 8012c40:	706b      	strb	r3, [r5, #1]
 8012c42:	68a3      	ldr	r3, [r4, #8]
 8012c44:	785b      	ldrb	r3, [r3, #1]
 8012c46:	70ab      	strb	r3, [r5, #2]
 8012c48:	68a3      	ldr	r3, [r4, #8]
 8012c4a:	781b      	ldrb	r3, [r3, #0]
 8012c4c:	70eb      	strb	r3, [r5, #3]
 8012c4e:	68a2      	ldr	r2, [r4, #8]
 8012c50:	6923      	ldr	r3, [r4, #16]
 8012c52:	3204      	adds	r2, #4
 8012c54:	3304      	adds	r3, #4
 8012c56:	2104      	movs	r1, #4
 8012c58:	60a2      	str	r2, [r4, #8]
 8012c5a:	6123      	str	r3, [r4, #16]
 8012c5c:	7561      	strb	r1, [r4, #21]
 8012c5e:	7da0      	ldrb	r0, [r4, #22]
 8012c60:	f080 0001 	eor.w	r0, r0, #1
 8012c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	602b      	str	r3, [r5, #0]
 8012c6c:	e7ef      	b.n	8012c4e <ucdr_deserialize_endian_float+0xbe>
 8012c6e:	68a2      	ldr	r2, [r4, #8]
 8012c70:	6923      	ldr	r3, [r4, #16]
 8012c72:	7da0      	ldrb	r0, [r4, #22]
 8012c74:	f884 9015 	strb.w	r9, [r4, #21]
 8012c78:	eba2 0208 	sub.w	r2, r2, r8
 8012c7c:	eba3 0308 	sub.w	r3, r3, r8
 8012c80:	60a2      	str	r2, [r4, #8]
 8012c82:	6123      	str	r3, [r4, #16]
 8012c84:	f080 0001 	eor.w	r0, r0, #1
 8012c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c8c:	68a3      	ldr	r3, [r4, #8]
 8012c8e:	789b      	ldrb	r3, [r3, #2]
 8012c90:	706b      	strb	r3, [r5, #1]
 8012c92:	1cab      	adds	r3, r5, #2
 8012c94:	68a2      	ldr	r2, [r4, #8]
 8012c96:	7852      	ldrb	r2, [r2, #1]
 8012c98:	f803 2b01 	strb.w	r2, [r3], #1
 8012c9c:	68a2      	ldr	r2, [r4, #8]
 8012c9e:	7812      	ldrb	r2, [r2, #0]
 8012ca0:	701a      	strb	r2, [r3, #0]
 8012ca2:	e7b2      	b.n	8012c0a <ucdr_deserialize_endian_float+0x7a>
 8012ca4:	4639      	mov	r1, r7
 8012ca6:	4642      	mov	r2, r8
 8012ca8:	4628      	mov	r0, r5
 8012caa:	f007 fd7d 	bl	801a7a8 <memcpy>
 8012cae:	68a1      	ldr	r1, [r4, #8]
 8012cb0:	4652      	mov	r2, sl
 8012cb2:	eb05 0008 	add.w	r0, r5, r8
 8012cb6:	f007 fd77 	bl	801a7a8 <memcpy>
 8012cba:	e7a6      	b.n	8012c0a <ucdr_deserialize_endian_float+0x7a>

08012cbc <ucdr_serialize_double>:
 8012cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cc0:	2108      	movs	r1, #8
 8012cc2:	b082      	sub	sp, #8
 8012cc4:	4604      	mov	r4, r0
 8012cc6:	ed8d 0b00 	vstr	d0, [sp]
 8012cca:	f000 f9ed 	bl	80130a8 <ucdr_buffer_alignment>
 8012cce:	4601      	mov	r1, r0
 8012cd0:	4620      	mov	r0, r4
 8012cd2:	7d67      	ldrb	r7, [r4, #21]
 8012cd4:	f000 fa2c 	bl	8013130 <ucdr_advance_buffer>
 8012cd8:	2108      	movs	r1, #8
 8012cda:	4620      	mov	r0, r4
 8012cdc:	f000 f984 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8012ce0:	2800      	cmp	r0, #0
 8012ce2:	d14e      	bne.n	8012d82 <ucdr_serialize_double+0xc6>
 8012ce4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8012ce8:	42ab      	cmp	r3, r5
 8012cea:	d945      	bls.n	8012d78 <ucdr_serialize_double+0xbc>
 8012cec:	1b5e      	subs	r6, r3, r5
 8012cee:	60a3      	str	r3, [r4, #8]
 8012cf0:	6923      	ldr	r3, [r4, #16]
 8012cf2:	f1c6 0808 	rsb	r8, r6, #8
 8012cf6:	4433      	add	r3, r6
 8012cf8:	6123      	str	r3, [r4, #16]
 8012cfa:	4641      	mov	r1, r8
 8012cfc:	4620      	mov	r0, r4
 8012cfe:	f000 f97f 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8012d02:	2800      	cmp	r0, #0
 8012d04:	d074      	beq.n	8012df0 <ucdr_serialize_double+0x134>
 8012d06:	7d23      	ldrb	r3, [r4, #20]
 8012d08:	2b01      	cmp	r3, #1
 8012d0a:	f000 809b 	beq.w	8012e44 <ucdr_serialize_double+0x188>
 8012d0e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012d12:	702b      	strb	r3, [r5, #0]
 8012d14:	2e00      	cmp	r6, #0
 8012d16:	d078      	beq.n	8012e0a <ucdr_serialize_double+0x14e>
 8012d18:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012d1c:	706b      	strb	r3, [r5, #1]
 8012d1e:	2e01      	cmp	r6, #1
 8012d20:	d077      	beq.n	8012e12 <ucdr_serialize_double+0x156>
 8012d22:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012d26:	70ab      	strb	r3, [r5, #2]
 8012d28:	2e02      	cmp	r6, #2
 8012d2a:	d076      	beq.n	8012e1a <ucdr_serialize_double+0x15e>
 8012d2c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012d30:	70eb      	strb	r3, [r5, #3]
 8012d32:	2e03      	cmp	r6, #3
 8012d34:	d075      	beq.n	8012e22 <ucdr_serialize_double+0x166>
 8012d36:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8012d3a:	712b      	strb	r3, [r5, #4]
 8012d3c:	2e04      	cmp	r6, #4
 8012d3e:	d074      	beq.n	8012e2a <ucdr_serialize_double+0x16e>
 8012d40:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8012d44:	716b      	strb	r3, [r5, #5]
 8012d46:	2e05      	cmp	r6, #5
 8012d48:	d073      	beq.n	8012e32 <ucdr_serialize_double+0x176>
 8012d4a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8012d4e:	71ab      	strb	r3, [r5, #6]
 8012d50:	2e06      	cmp	r6, #6
 8012d52:	d072      	beq.n	8012e3a <ucdr_serialize_double+0x17e>
 8012d54:	f89d 3000 	ldrb.w	r3, [sp]
 8012d58:	71eb      	strb	r3, [r5, #7]
 8012d5a:	6923      	ldr	r3, [r4, #16]
 8012d5c:	68a2      	ldr	r2, [r4, #8]
 8012d5e:	7da0      	ldrb	r0, [r4, #22]
 8012d60:	3308      	adds	r3, #8
 8012d62:	1b9e      	subs	r6, r3, r6
 8012d64:	4442      	add	r2, r8
 8012d66:	2308      	movs	r3, #8
 8012d68:	f080 0001 	eor.w	r0, r0, #1
 8012d6c:	60a2      	str	r2, [r4, #8]
 8012d6e:	6126      	str	r6, [r4, #16]
 8012d70:	7563      	strb	r3, [r4, #21]
 8012d72:	b002      	add	sp, #8
 8012d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d78:	2108      	movs	r1, #8
 8012d7a:	4620      	mov	r0, r4
 8012d7c:	f000 f940 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8012d80:	b350      	cbz	r0, 8012dd8 <ucdr_serialize_double+0x11c>
 8012d82:	7d23      	ldrb	r3, [r4, #20]
 8012d84:	2b01      	cmp	r3, #1
 8012d86:	d02d      	beq.n	8012de4 <ucdr_serialize_double+0x128>
 8012d88:	68a3      	ldr	r3, [r4, #8]
 8012d8a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012d8e:	701a      	strb	r2, [r3, #0]
 8012d90:	68a3      	ldr	r3, [r4, #8]
 8012d92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012d96:	705a      	strb	r2, [r3, #1]
 8012d98:	68a3      	ldr	r3, [r4, #8]
 8012d9a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012d9e:	709a      	strb	r2, [r3, #2]
 8012da0:	68a3      	ldr	r3, [r4, #8]
 8012da2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012da6:	70da      	strb	r2, [r3, #3]
 8012da8:	68a3      	ldr	r3, [r4, #8]
 8012daa:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012dae:	711a      	strb	r2, [r3, #4]
 8012db0:	68a3      	ldr	r3, [r4, #8]
 8012db2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012db6:	715a      	strb	r2, [r3, #5]
 8012db8:	68a3      	ldr	r3, [r4, #8]
 8012dba:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012dbe:	719a      	strb	r2, [r3, #6]
 8012dc0:	68a3      	ldr	r3, [r4, #8]
 8012dc2:	f89d 2000 	ldrb.w	r2, [sp]
 8012dc6:	71da      	strb	r2, [r3, #7]
 8012dc8:	68a2      	ldr	r2, [r4, #8]
 8012dca:	6923      	ldr	r3, [r4, #16]
 8012dcc:	3208      	adds	r2, #8
 8012dce:	3308      	adds	r3, #8
 8012dd0:	2108      	movs	r1, #8
 8012dd2:	60a2      	str	r2, [r4, #8]
 8012dd4:	6123      	str	r3, [r4, #16]
 8012dd6:	7561      	strb	r1, [r4, #21]
 8012dd8:	7da0      	ldrb	r0, [r4, #22]
 8012dda:	f080 0001 	eor.w	r0, r0, #1
 8012dde:	b002      	add	sp, #8
 8012de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012de4:	466b      	mov	r3, sp
 8012de6:	cb03      	ldmia	r3!, {r0, r1}
 8012de8:	68a3      	ldr	r3, [r4, #8]
 8012dea:	6018      	str	r0, [r3, #0]
 8012dec:	6059      	str	r1, [r3, #4]
 8012dee:	e7eb      	b.n	8012dc8 <ucdr_serialize_double+0x10c>
 8012df0:	68a2      	ldr	r2, [r4, #8]
 8012df2:	6923      	ldr	r3, [r4, #16]
 8012df4:	7da0      	ldrb	r0, [r4, #22]
 8012df6:	7567      	strb	r7, [r4, #21]
 8012df8:	1b92      	subs	r2, r2, r6
 8012dfa:	1b9b      	subs	r3, r3, r6
 8012dfc:	f080 0001 	eor.w	r0, r0, #1
 8012e00:	60a2      	str	r2, [r4, #8]
 8012e02:	6123      	str	r3, [r4, #16]
 8012e04:	b002      	add	sp, #8
 8012e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e0a:	68a3      	ldr	r3, [r4, #8]
 8012e0c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8012e10:	701a      	strb	r2, [r3, #0]
 8012e12:	68a3      	ldr	r3, [r4, #8]
 8012e14:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012e18:	701a      	strb	r2, [r3, #0]
 8012e1a:	68a3      	ldr	r3, [r4, #8]
 8012e1c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8012e20:	701a      	strb	r2, [r3, #0]
 8012e22:	68a3      	ldr	r3, [r4, #8]
 8012e24:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8012e28:	701a      	strb	r2, [r3, #0]
 8012e2a:	68a3      	ldr	r3, [r4, #8]
 8012e2c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8012e30:	701a      	strb	r2, [r3, #0]
 8012e32:	68a3      	ldr	r3, [r4, #8]
 8012e34:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8012e38:	701a      	strb	r2, [r3, #0]
 8012e3a:	68a3      	ldr	r3, [r4, #8]
 8012e3c:	f89d 2000 	ldrb.w	r2, [sp]
 8012e40:	701a      	strb	r2, [r3, #0]
 8012e42:	e78a      	b.n	8012d5a <ucdr_serialize_double+0x9e>
 8012e44:	4628      	mov	r0, r5
 8012e46:	466d      	mov	r5, sp
 8012e48:	4629      	mov	r1, r5
 8012e4a:	4632      	mov	r2, r6
 8012e4c:	f007 fcac 	bl	801a7a8 <memcpy>
 8012e50:	68a0      	ldr	r0, [r4, #8]
 8012e52:	4642      	mov	r2, r8
 8012e54:	19a9      	adds	r1, r5, r6
 8012e56:	f007 fca7 	bl	801a7a8 <memcpy>
 8012e5a:	e77e      	b.n	8012d5a <ucdr_serialize_double+0x9e>

08012e5c <ucdr_deserialize_double>:
 8012e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e60:	460d      	mov	r5, r1
 8012e62:	2108      	movs	r1, #8
 8012e64:	4604      	mov	r4, r0
 8012e66:	f000 f91f 	bl	80130a8 <ucdr_buffer_alignment>
 8012e6a:	4601      	mov	r1, r0
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	f894 9015 	ldrb.w	r9, [r4, #21]
 8012e72:	f000 f95d 	bl	8013130 <ucdr_advance_buffer>
 8012e76:	2108      	movs	r1, #8
 8012e78:	4620      	mov	r0, r4
 8012e7a:	f000 f8b5 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8012e7e:	2800      	cmp	r0, #0
 8012e80:	d151      	bne.n	8012f26 <ucdr_deserialize_double+0xca>
 8012e82:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8012e86:	42be      	cmp	r6, r7
 8012e88:	d948      	bls.n	8012f1c <ucdr_deserialize_double+0xc0>
 8012e8a:	6923      	ldr	r3, [r4, #16]
 8012e8c:	60a6      	str	r6, [r4, #8]
 8012e8e:	1bf6      	subs	r6, r6, r7
 8012e90:	4433      	add	r3, r6
 8012e92:	f1c6 0808 	rsb	r8, r6, #8
 8012e96:	6123      	str	r3, [r4, #16]
 8012e98:	4641      	mov	r1, r8
 8012e9a:	4620      	mov	r0, r4
 8012e9c:	f000 f8b0 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8012ea0:	2800      	cmp	r0, #0
 8012ea2:	d06d      	beq.n	8012f80 <ucdr_deserialize_double+0x124>
 8012ea4:	7d23      	ldrb	r3, [r4, #20]
 8012ea6:	2b01      	cmp	r3, #1
 8012ea8:	f000 8093 	beq.w	8012fd2 <ucdr_deserialize_double+0x176>
 8012eac:	79fb      	ldrb	r3, [r7, #7]
 8012eae:	702b      	strb	r3, [r5, #0]
 8012eb0:	2e00      	cmp	r6, #0
 8012eb2:	d072      	beq.n	8012f9a <ucdr_deserialize_double+0x13e>
 8012eb4:	79bb      	ldrb	r3, [r7, #6]
 8012eb6:	706b      	strb	r3, [r5, #1]
 8012eb8:	2e01      	cmp	r6, #1
 8012eba:	f105 0302 	add.w	r3, r5, #2
 8012ebe:	d070      	beq.n	8012fa2 <ucdr_deserialize_double+0x146>
 8012ec0:	797b      	ldrb	r3, [r7, #5]
 8012ec2:	70ab      	strb	r3, [r5, #2]
 8012ec4:	2e02      	cmp	r6, #2
 8012ec6:	f105 0303 	add.w	r3, r5, #3
 8012eca:	d06e      	beq.n	8012faa <ucdr_deserialize_double+0x14e>
 8012ecc:	793b      	ldrb	r3, [r7, #4]
 8012ece:	70eb      	strb	r3, [r5, #3]
 8012ed0:	2e03      	cmp	r6, #3
 8012ed2:	f105 0304 	add.w	r3, r5, #4
 8012ed6:	d06c      	beq.n	8012fb2 <ucdr_deserialize_double+0x156>
 8012ed8:	78fb      	ldrb	r3, [r7, #3]
 8012eda:	712b      	strb	r3, [r5, #4]
 8012edc:	2e04      	cmp	r6, #4
 8012ede:	f105 0305 	add.w	r3, r5, #5
 8012ee2:	d06a      	beq.n	8012fba <ucdr_deserialize_double+0x15e>
 8012ee4:	78bb      	ldrb	r3, [r7, #2]
 8012ee6:	716b      	strb	r3, [r5, #5]
 8012ee8:	2e05      	cmp	r6, #5
 8012eea:	f105 0306 	add.w	r3, r5, #6
 8012eee:	d068      	beq.n	8012fc2 <ucdr_deserialize_double+0x166>
 8012ef0:	787b      	ldrb	r3, [r7, #1]
 8012ef2:	71ab      	strb	r3, [r5, #6]
 8012ef4:	2e06      	cmp	r6, #6
 8012ef6:	f105 0307 	add.w	r3, r5, #7
 8012efa:	d066      	beq.n	8012fca <ucdr_deserialize_double+0x16e>
 8012efc:	783b      	ldrb	r3, [r7, #0]
 8012efe:	71eb      	strb	r3, [r5, #7]
 8012f00:	6923      	ldr	r3, [r4, #16]
 8012f02:	68a2      	ldr	r2, [r4, #8]
 8012f04:	7da0      	ldrb	r0, [r4, #22]
 8012f06:	3308      	adds	r3, #8
 8012f08:	1b9e      	subs	r6, r3, r6
 8012f0a:	2308      	movs	r3, #8
 8012f0c:	4442      	add	r2, r8
 8012f0e:	7563      	strb	r3, [r4, #21]
 8012f10:	60a2      	str	r2, [r4, #8]
 8012f12:	6126      	str	r6, [r4, #16]
 8012f14:	f080 0001 	eor.w	r0, r0, #1
 8012f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f1c:	2108      	movs	r1, #8
 8012f1e:	4620      	mov	r0, r4
 8012f20:	f000 f86e 	bl	8013000 <ucdr_check_final_buffer_behavior>
 8012f24:	b310      	cbz	r0, 8012f6c <ucdr_deserialize_double+0x110>
 8012f26:	7d23      	ldrb	r3, [r4, #20]
 8012f28:	2b01      	cmp	r3, #1
 8012f2a:	68a3      	ldr	r3, [r4, #8]
 8012f2c:	d023      	beq.n	8012f76 <ucdr_deserialize_double+0x11a>
 8012f2e:	79db      	ldrb	r3, [r3, #7]
 8012f30:	702b      	strb	r3, [r5, #0]
 8012f32:	68a3      	ldr	r3, [r4, #8]
 8012f34:	799b      	ldrb	r3, [r3, #6]
 8012f36:	706b      	strb	r3, [r5, #1]
 8012f38:	68a3      	ldr	r3, [r4, #8]
 8012f3a:	795b      	ldrb	r3, [r3, #5]
 8012f3c:	70ab      	strb	r3, [r5, #2]
 8012f3e:	68a3      	ldr	r3, [r4, #8]
 8012f40:	791b      	ldrb	r3, [r3, #4]
 8012f42:	70eb      	strb	r3, [r5, #3]
 8012f44:	68a3      	ldr	r3, [r4, #8]
 8012f46:	78db      	ldrb	r3, [r3, #3]
 8012f48:	712b      	strb	r3, [r5, #4]
 8012f4a:	68a3      	ldr	r3, [r4, #8]
 8012f4c:	789b      	ldrb	r3, [r3, #2]
 8012f4e:	716b      	strb	r3, [r5, #5]
 8012f50:	68a3      	ldr	r3, [r4, #8]
 8012f52:	785b      	ldrb	r3, [r3, #1]
 8012f54:	71ab      	strb	r3, [r5, #6]
 8012f56:	68a3      	ldr	r3, [r4, #8]
 8012f58:	781b      	ldrb	r3, [r3, #0]
 8012f5a:	71eb      	strb	r3, [r5, #7]
 8012f5c:	68a2      	ldr	r2, [r4, #8]
 8012f5e:	6923      	ldr	r3, [r4, #16]
 8012f60:	3208      	adds	r2, #8
 8012f62:	3308      	adds	r3, #8
 8012f64:	2108      	movs	r1, #8
 8012f66:	60a2      	str	r2, [r4, #8]
 8012f68:	6123      	str	r3, [r4, #16]
 8012f6a:	7561      	strb	r1, [r4, #21]
 8012f6c:	7da0      	ldrb	r0, [r4, #22]
 8012f6e:	f080 0001 	eor.w	r0, r0, #1
 8012f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f76:	681a      	ldr	r2, [r3, #0]
 8012f78:	685b      	ldr	r3, [r3, #4]
 8012f7a:	606b      	str	r3, [r5, #4]
 8012f7c:	602a      	str	r2, [r5, #0]
 8012f7e:	e7ed      	b.n	8012f5c <ucdr_deserialize_double+0x100>
 8012f80:	68a2      	ldr	r2, [r4, #8]
 8012f82:	6923      	ldr	r3, [r4, #16]
 8012f84:	7da0      	ldrb	r0, [r4, #22]
 8012f86:	f884 9015 	strb.w	r9, [r4, #21]
 8012f8a:	1b92      	subs	r2, r2, r6
 8012f8c:	1b9b      	subs	r3, r3, r6
 8012f8e:	60a2      	str	r2, [r4, #8]
 8012f90:	6123      	str	r3, [r4, #16]
 8012f92:	f080 0001 	eor.w	r0, r0, #1
 8012f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f9a:	68a3      	ldr	r3, [r4, #8]
 8012f9c:	799b      	ldrb	r3, [r3, #6]
 8012f9e:	706b      	strb	r3, [r5, #1]
 8012fa0:	1cab      	adds	r3, r5, #2
 8012fa2:	68a2      	ldr	r2, [r4, #8]
 8012fa4:	7952      	ldrb	r2, [r2, #5]
 8012fa6:	f803 2b01 	strb.w	r2, [r3], #1
 8012faa:	68a2      	ldr	r2, [r4, #8]
 8012fac:	7912      	ldrb	r2, [r2, #4]
 8012fae:	f803 2b01 	strb.w	r2, [r3], #1
 8012fb2:	68a2      	ldr	r2, [r4, #8]
 8012fb4:	78d2      	ldrb	r2, [r2, #3]
 8012fb6:	f803 2b01 	strb.w	r2, [r3], #1
 8012fba:	68a2      	ldr	r2, [r4, #8]
 8012fbc:	7892      	ldrb	r2, [r2, #2]
 8012fbe:	f803 2b01 	strb.w	r2, [r3], #1
 8012fc2:	68a2      	ldr	r2, [r4, #8]
 8012fc4:	7852      	ldrb	r2, [r2, #1]
 8012fc6:	f803 2b01 	strb.w	r2, [r3], #1
 8012fca:	68a2      	ldr	r2, [r4, #8]
 8012fcc:	7812      	ldrb	r2, [r2, #0]
 8012fce:	701a      	strb	r2, [r3, #0]
 8012fd0:	e796      	b.n	8012f00 <ucdr_deserialize_double+0xa4>
 8012fd2:	4639      	mov	r1, r7
 8012fd4:	4632      	mov	r2, r6
 8012fd6:	4628      	mov	r0, r5
 8012fd8:	f007 fbe6 	bl	801a7a8 <memcpy>
 8012fdc:	68a1      	ldr	r1, [r4, #8]
 8012fde:	4642      	mov	r2, r8
 8012fe0:	19a8      	adds	r0, r5, r6
 8012fe2:	f007 fbe1 	bl	801a7a8 <memcpy>
 8012fe6:	e78b      	b.n	8012f00 <ucdr_deserialize_double+0xa4>

08012fe8 <ucdr_check_buffer_available_for>:
 8012fe8:	7d83      	ldrb	r3, [r0, #22]
 8012fea:	b93b      	cbnz	r3, 8012ffc <ucdr_check_buffer_available_for+0x14>
 8012fec:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8012ff0:	4419      	add	r1, r3
 8012ff2:	4288      	cmp	r0, r1
 8012ff4:	bf34      	ite	cc
 8012ff6:	2000      	movcc	r0, #0
 8012ff8:	2001      	movcs	r0, #1
 8012ffa:	4770      	bx	lr
 8012ffc:	2000      	movs	r0, #0
 8012ffe:	4770      	bx	lr

08013000 <ucdr_check_final_buffer_behavior>:
 8013000:	7d83      	ldrb	r3, [r0, #22]
 8013002:	b943      	cbnz	r3, 8013016 <ucdr_check_final_buffer_behavior+0x16>
 8013004:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8013008:	4291      	cmp	r1, r2
 801300a:	b510      	push	{r4, lr}
 801300c:	4604      	mov	r4, r0
 801300e:	d205      	bcs.n	801301c <ucdr_check_final_buffer_behavior+0x1c>
 8013010:	2301      	movs	r3, #1
 8013012:	4618      	mov	r0, r3
 8013014:	bd10      	pop	{r4, pc}
 8013016:	2300      	movs	r3, #0
 8013018:	4618      	mov	r0, r3
 801301a:	4770      	bx	lr
 801301c:	6982      	ldr	r2, [r0, #24]
 801301e:	b13a      	cbz	r2, 8013030 <ucdr_check_final_buffer_behavior+0x30>
 8013020:	69c1      	ldr	r1, [r0, #28]
 8013022:	4790      	blx	r2
 8013024:	f080 0301 	eor.w	r3, r0, #1
 8013028:	b2db      	uxtb	r3, r3
 801302a:	75a0      	strb	r0, [r4, #22]
 801302c:	4618      	mov	r0, r3
 801302e:	bd10      	pop	{r4, pc}
 8013030:	2001      	movs	r0, #1
 8013032:	75a0      	strb	r0, [r4, #22]
 8013034:	e7fa      	b.n	801302c <ucdr_check_final_buffer_behavior+0x2c>
 8013036:	bf00      	nop

08013038 <ucdr_set_on_full_buffer_callback>:
 8013038:	e9c0 1206 	strd	r1, r2, [r0, #24]
 801303c:	4770      	bx	lr
 801303e:	bf00      	nop

08013040 <ucdr_init_buffer_origin_offset_endian>:
 8013040:	b410      	push	{r4}
 8013042:	9c01      	ldr	r4, [sp, #4]
 8013044:	6001      	str	r1, [r0, #0]
 8013046:	440a      	add	r2, r1
 8013048:	6042      	str	r2, [r0, #4]
 801304a:	190a      	adds	r2, r1, r4
 801304c:	441c      	add	r4, r3
 801304e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8013052:	6082      	str	r2, [r0, #8]
 8013054:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013058:	7503      	strb	r3, [r0, #20]
 801305a:	2200      	movs	r2, #0
 801305c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8013060:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013064:	7542      	strb	r2, [r0, #21]
 8013066:	7582      	strb	r2, [r0, #22]
 8013068:	4770      	bx	lr
 801306a:	bf00      	nop

0801306c <ucdr_init_buffer_origin_offset>:
 801306c:	b510      	push	{r4, lr}
 801306e:	b082      	sub	sp, #8
 8013070:	9c04      	ldr	r4, [sp, #16]
 8013072:	9400      	str	r4, [sp, #0]
 8013074:	2401      	movs	r4, #1
 8013076:	9401      	str	r4, [sp, #4]
 8013078:	f7ff ffe2 	bl	8013040 <ucdr_init_buffer_origin_offset_endian>
 801307c:	b002      	add	sp, #8
 801307e:	bd10      	pop	{r4, pc}

08013080 <ucdr_init_buffer_origin>:
 8013080:	b510      	push	{r4, lr}
 8013082:	b082      	sub	sp, #8
 8013084:	2400      	movs	r4, #0
 8013086:	9400      	str	r4, [sp, #0]
 8013088:	f7ff fff0 	bl	801306c <ucdr_init_buffer_origin_offset>
 801308c:	b002      	add	sp, #8
 801308e:	bd10      	pop	{r4, pc}

08013090 <ucdr_init_buffer>:
 8013090:	2300      	movs	r3, #0
 8013092:	f7ff bff5 	b.w	8013080 <ucdr_init_buffer_origin>
 8013096:	bf00      	nop

08013098 <ucdr_alignment>:
 8013098:	fbb0 f3f1 	udiv	r3, r0, r1
 801309c:	fb03 0011 	mls	r0, r3, r1, r0
 80130a0:	1a08      	subs	r0, r1, r0
 80130a2:	3901      	subs	r1, #1
 80130a4:	4008      	ands	r0, r1
 80130a6:	4770      	bx	lr

080130a8 <ucdr_buffer_alignment>:
 80130a8:	7d43      	ldrb	r3, [r0, #21]
 80130aa:	428b      	cmp	r3, r1
 80130ac:	d208      	bcs.n	80130c0 <ucdr_buffer_alignment+0x18>
 80130ae:	6900      	ldr	r0, [r0, #16]
 80130b0:	fbb0 f3f1 	udiv	r3, r0, r1
 80130b4:	fb01 0013 	mls	r0, r1, r3, r0
 80130b8:	1a08      	subs	r0, r1, r0
 80130ba:	3901      	subs	r1, #1
 80130bc:	4008      	ands	r0, r1
 80130be:	4770      	bx	lr
 80130c0:	2000      	movs	r0, #0
 80130c2:	4770      	bx	lr

080130c4 <ucdr_align_to>:
 80130c4:	b538      	push	{r3, r4, r5, lr}
 80130c6:	4604      	mov	r4, r0
 80130c8:	460d      	mov	r5, r1
 80130ca:	f7ff ffed 	bl	80130a8 <ucdr_buffer_alignment>
 80130ce:	68a3      	ldr	r3, [r4, #8]
 80130d0:	6921      	ldr	r1, [r4, #16]
 80130d2:	7565      	strb	r5, [r4, #21]
 80130d4:	181a      	adds	r2, r3, r0
 80130d6:	6863      	ldr	r3, [r4, #4]
 80130d8:	4293      	cmp	r3, r2
 80130da:	4408      	add	r0, r1
 80130dc:	bf28      	it	cs
 80130de:	4613      	movcs	r3, r2
 80130e0:	6120      	str	r0, [r4, #16]
 80130e2:	60a3      	str	r3, [r4, #8]
 80130e4:	bd38      	pop	{r3, r4, r5, pc}
 80130e6:	bf00      	nop

080130e8 <ucdr_buffer_length>:
 80130e8:	6882      	ldr	r2, [r0, #8]
 80130ea:	6800      	ldr	r0, [r0, #0]
 80130ec:	1a10      	subs	r0, r2, r0
 80130ee:	4770      	bx	lr

080130f0 <ucdr_buffer_remaining>:
 80130f0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80130f4:	1a10      	subs	r0, r2, r0
 80130f6:	4770      	bx	lr

080130f8 <ucdr_check_final_buffer_behavior_array>:
 80130f8:	b538      	push	{r3, r4, r5, lr}
 80130fa:	7d83      	ldrb	r3, [r0, #22]
 80130fc:	b963      	cbnz	r3, 8013118 <ucdr_check_final_buffer_behavior_array+0x20>
 80130fe:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8013102:	429a      	cmp	r2, r3
 8013104:	4604      	mov	r4, r0
 8013106:	460d      	mov	r5, r1
 8013108:	d308      	bcc.n	801311c <ucdr_check_final_buffer_behavior_array+0x24>
 801310a:	b139      	cbz	r1, 801311c <ucdr_check_final_buffer_behavior_array+0x24>
 801310c:	6983      	ldr	r3, [r0, #24]
 801310e:	b163      	cbz	r3, 801312a <ucdr_check_final_buffer_behavior_array+0x32>
 8013110:	69c1      	ldr	r1, [r0, #28]
 8013112:	4798      	blx	r3
 8013114:	75a0      	strb	r0, [r4, #22]
 8013116:	b108      	cbz	r0, 801311c <ucdr_check_final_buffer_behavior_array+0x24>
 8013118:	2000      	movs	r0, #0
 801311a:	bd38      	pop	{r3, r4, r5, pc}
 801311c:	4620      	mov	r0, r4
 801311e:	f7ff ffe7 	bl	80130f0 <ucdr_buffer_remaining>
 8013122:	42a8      	cmp	r0, r5
 8013124:	bf28      	it	cs
 8013126:	4628      	movcs	r0, r5
 8013128:	bd38      	pop	{r3, r4, r5, pc}
 801312a:	2301      	movs	r3, #1
 801312c:	7583      	strb	r3, [r0, #22]
 801312e:	e7f3      	b.n	8013118 <ucdr_check_final_buffer_behavior_array+0x20>

08013130 <ucdr_advance_buffer>:
 8013130:	b538      	push	{r3, r4, r5, lr}
 8013132:	4604      	mov	r4, r0
 8013134:	460d      	mov	r5, r1
 8013136:	f7ff ff57 	bl	8012fe8 <ucdr_check_buffer_available_for>
 801313a:	b178      	cbz	r0, 801315c <ucdr_advance_buffer+0x2c>
 801313c:	6923      	ldr	r3, [r4, #16]
 801313e:	68a2      	ldr	r2, [r4, #8]
 8013140:	442b      	add	r3, r5
 8013142:	6123      	str	r3, [r4, #16]
 8013144:	2301      	movs	r3, #1
 8013146:	442a      	add	r2, r5
 8013148:	7563      	strb	r3, [r4, #21]
 801314a:	60a2      	str	r2, [r4, #8]
 801314c:	bd38      	pop	{r3, r4, r5, pc}
 801314e:	68a2      	ldr	r2, [r4, #8]
 8013150:	6923      	ldr	r3, [r4, #16]
 8013152:	4402      	add	r2, r0
 8013154:	4403      	add	r3, r0
 8013156:	1a2d      	subs	r5, r5, r0
 8013158:	60a2      	str	r2, [r4, #8]
 801315a:	6123      	str	r3, [r4, #16]
 801315c:	4629      	mov	r1, r5
 801315e:	2201      	movs	r2, #1
 8013160:	4620      	mov	r0, r4
 8013162:	f7ff ffc9 	bl	80130f8 <ucdr_check_final_buffer_behavior_array>
 8013166:	2800      	cmp	r0, #0
 8013168:	d1f1      	bne.n	801314e <ucdr_advance_buffer+0x1e>
 801316a:	2301      	movs	r3, #1
 801316c:	7563      	strb	r3, [r4, #21]
 801316e:	bd38      	pop	{r3, r4, r5, pc}

08013170 <ucdr_serialize_sequence_char>:
 8013170:	b570      	push	{r4, r5, r6, lr}
 8013172:	4615      	mov	r5, r2
 8013174:	460e      	mov	r6, r1
 8013176:	7d01      	ldrb	r1, [r0, #20]
 8013178:	4604      	mov	r4, r0
 801317a:	f7fe fd07 	bl	8011b8c <ucdr_serialize_endian_uint32_t>
 801317e:	b90d      	cbnz	r5, 8013184 <ucdr_serialize_sequence_char+0x14>
 8013180:	2001      	movs	r0, #1
 8013182:	bd70      	pop	{r4, r5, r6, pc}
 8013184:	7d21      	ldrb	r1, [r4, #20]
 8013186:	462b      	mov	r3, r5
 8013188:	4632      	mov	r2, r6
 801318a:	4620      	mov	r0, r4
 801318c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013190:	f004 beae 	b.w	8017ef0 <ucdr_serialize_endian_array_char>

08013194 <ucdr_deserialize_sequence_char>:
 8013194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013198:	461d      	mov	r5, r3
 801319a:	4616      	mov	r6, r2
 801319c:	460f      	mov	r7, r1
 801319e:	461a      	mov	r2, r3
 80131a0:	7d01      	ldrb	r1, [r0, #20]
 80131a2:	4604      	mov	r4, r0
 80131a4:	f7fe fe1a 	bl	8011ddc <ucdr_deserialize_endian_uint32_t>
 80131a8:	682b      	ldr	r3, [r5, #0]
 80131aa:	429e      	cmp	r6, r3
 80131ac:	bf3c      	itt	cc
 80131ae:	2201      	movcc	r2, #1
 80131b0:	75a2      	strbcc	r2, [r4, #22]
 80131b2:	b913      	cbnz	r3, 80131ba <ucdr_deserialize_sequence_char+0x26>
 80131b4:	2001      	movs	r0, #1
 80131b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131ba:	7d21      	ldrb	r1, [r4, #20]
 80131bc:	463a      	mov	r2, r7
 80131be:	4620      	mov	r0, r4
 80131c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131c4:	f004 bec6 	b.w	8017f54 <ucdr_deserialize_endian_array_char>

080131c8 <ucdr_serialize_sequence_uint8_t>:
 80131c8:	b570      	push	{r4, r5, r6, lr}
 80131ca:	4615      	mov	r5, r2
 80131cc:	460e      	mov	r6, r1
 80131ce:	7d01      	ldrb	r1, [r0, #20]
 80131d0:	4604      	mov	r4, r0
 80131d2:	f7fe fcdb 	bl	8011b8c <ucdr_serialize_endian_uint32_t>
 80131d6:	b90d      	cbnz	r5, 80131dc <ucdr_serialize_sequence_uint8_t+0x14>
 80131d8:	2001      	movs	r0, #1
 80131da:	bd70      	pop	{r4, r5, r6, pc}
 80131dc:	7d21      	ldrb	r1, [r4, #20]
 80131de:	462b      	mov	r3, r5
 80131e0:	4632      	mov	r2, r6
 80131e2:	4620      	mov	r0, r4
 80131e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80131e8:	f004 bf18 	b.w	801801c <ucdr_serialize_endian_array_uint8_t>

080131ec <ucdr_deserialize_sequence_uint8_t>:
 80131ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131f0:	461d      	mov	r5, r3
 80131f2:	4616      	mov	r6, r2
 80131f4:	460f      	mov	r7, r1
 80131f6:	461a      	mov	r2, r3
 80131f8:	7d01      	ldrb	r1, [r0, #20]
 80131fa:	4604      	mov	r4, r0
 80131fc:	f7fe fdee 	bl	8011ddc <ucdr_deserialize_endian_uint32_t>
 8013200:	682b      	ldr	r3, [r5, #0]
 8013202:	429e      	cmp	r6, r3
 8013204:	bf3c      	itt	cc
 8013206:	2201      	movcc	r2, #1
 8013208:	75a2      	strbcc	r2, [r4, #22]
 801320a:	b913      	cbnz	r3, 8013212 <ucdr_deserialize_sequence_uint8_t+0x26>
 801320c:	2001      	movs	r0, #1
 801320e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013212:	7d21      	ldrb	r1, [r4, #20]
 8013214:	463a      	mov	r2, r7
 8013216:	4620      	mov	r0, r4
 8013218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801321c:	f004 bf62 	b.w	80180e4 <ucdr_deserialize_endian_array_uint8_t>

08013220 <ucdr_serialize_sequence_float>:
 8013220:	b570      	push	{r4, r5, r6, lr}
 8013222:	4615      	mov	r5, r2
 8013224:	460e      	mov	r6, r1
 8013226:	7d01      	ldrb	r1, [r0, #20]
 8013228:	4604      	mov	r4, r0
 801322a:	f7fe fcaf 	bl	8011b8c <ucdr_serialize_endian_uint32_t>
 801322e:	b90d      	cbnz	r5, 8013234 <ucdr_serialize_sequence_float+0x14>
 8013230:	2001      	movs	r0, #1
 8013232:	bd70      	pop	{r4, r5, r6, pc}
 8013234:	7d21      	ldrb	r1, [r4, #20]
 8013236:	462b      	mov	r3, r5
 8013238:	4632      	mov	r2, r6
 801323a:	4620      	mov	r0, r4
 801323c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013240:	f004 bf82 	b.w	8018148 <ucdr_serialize_endian_array_float>

08013244 <ucdr_deserialize_sequence_float>:
 8013244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013248:	461d      	mov	r5, r3
 801324a:	4616      	mov	r6, r2
 801324c:	460f      	mov	r7, r1
 801324e:	461a      	mov	r2, r3
 8013250:	7d01      	ldrb	r1, [r0, #20]
 8013252:	4604      	mov	r4, r0
 8013254:	f7fe fdc2 	bl	8011ddc <ucdr_deserialize_endian_uint32_t>
 8013258:	682b      	ldr	r3, [r5, #0]
 801325a:	429e      	cmp	r6, r3
 801325c:	bf3c      	itt	cc
 801325e:	2201      	movcc	r2, #1
 8013260:	75a2      	strbcc	r2, [r4, #22]
 8013262:	b913      	cbnz	r3, 801326a <ucdr_deserialize_sequence_float+0x26>
 8013264:	2001      	movs	r0, #1
 8013266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801326a:	7d21      	ldrb	r1, [r4, #20]
 801326c:	463a      	mov	r2, r7
 801326e:	4620      	mov	r0, r4
 8013270:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013274:	f004 bfbc 	b.w	80181f0 <ucdr_deserialize_endian_array_float>

08013278 <uxr_buffer_delete_entity>:
 8013278:	b510      	push	{r4, lr}
 801327a:	2300      	movs	r3, #0
 801327c:	b08e      	sub	sp, #56	; 0x38
 801327e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8013282:	2303      	movs	r3, #3
 8013284:	9300      	str	r3, [sp, #0]
 8013286:	2204      	movs	r2, #4
 8013288:	ab06      	add	r3, sp, #24
 801328a:	4604      	mov	r4, r0
 801328c:	9103      	str	r1, [sp, #12]
 801328e:	f001 f86f 	bl	8014370 <uxr_prepare_stream_to_write_submessage>
 8013292:	b918      	cbnz	r0, 801329c <uxr_buffer_delete_entity+0x24>
 8013294:	4604      	mov	r4, r0
 8013296:	4620      	mov	r0, r4
 8013298:	b00e      	add	sp, #56	; 0x38
 801329a:	bd10      	pop	{r4, pc}
 801329c:	9902      	ldr	r1, [sp, #8]
 801329e:	aa05      	add	r2, sp, #20
 80132a0:	4620      	mov	r0, r4
 80132a2:	f001 f99b 	bl	80145dc <uxr_init_base_object_request>
 80132a6:	a905      	add	r1, sp, #20
 80132a8:	4604      	mov	r4, r0
 80132aa:	a806      	add	r0, sp, #24
 80132ac:	f002 fb00 	bl	80158b0 <uxr_serialize_DELETE_Payload>
 80132b0:	4620      	mov	r0, r4
 80132b2:	b00e      	add	sp, #56	; 0x38
 80132b4:	bd10      	pop	{r4, pc}
 80132b6:	bf00      	nop

080132b8 <uxr_common_create_entity>:
 80132b8:	b510      	push	{r4, lr}
 80132ba:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80132be:	b08c      	sub	sp, #48	; 0x30
 80132c0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80132c4:	f1bc 0f01 	cmp.w	ip, #1
 80132c8:	bf0c      	ite	eq
 80132ca:	f003 0201 	andeq.w	r2, r3, #1
 80132ce:	2200      	movne	r2, #0
 80132d0:	330e      	adds	r3, #14
 80132d2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 80132d6:	9101      	str	r1, [sp, #4]
 80132d8:	441a      	add	r2, r3
 80132da:	2301      	movs	r3, #1
 80132dc:	9300      	str	r3, [sp, #0]
 80132de:	9903      	ldr	r1, [sp, #12]
 80132e0:	ab04      	add	r3, sp, #16
 80132e2:	b292      	uxth	r2, r2
 80132e4:	4604      	mov	r4, r0
 80132e6:	f001 f843 	bl	8014370 <uxr_prepare_stream_to_write_submessage>
 80132ea:	b918      	cbnz	r0, 80132f4 <uxr_common_create_entity+0x3c>
 80132ec:	4604      	mov	r4, r0
 80132ee:	4620      	mov	r0, r4
 80132f0:	b00c      	add	sp, #48	; 0x30
 80132f2:	bd10      	pop	{r4, pc}
 80132f4:	9902      	ldr	r1, [sp, #8]
 80132f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80132f8:	4620      	mov	r0, r4
 80132fa:	f001 f96f 	bl	80145dc <uxr_init_base_object_request>
 80132fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013300:	4604      	mov	r4, r0
 8013302:	a804      	add	r0, sp, #16
 8013304:	f002 fa30 	bl	8015768 <uxr_serialize_CREATE_Payload>
 8013308:	4620      	mov	r0, r4
 801330a:	b00c      	add	sp, #48	; 0x30
 801330c:	bd10      	pop	{r4, pc}
 801330e:	bf00      	nop

08013310 <uxr_buffer_create_participant_bin>:
 8013310:	b570      	push	{r4, r5, r6, lr}
 8013312:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8013316:	ac11      	add	r4, sp, #68	; 0x44
 8013318:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 801331c:	2303      	movs	r3, #3
 801331e:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013322:	7223      	strb	r3, [r4, #8]
 8013324:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8013326:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 801332a:	2201      	movs	r2, #1
 801332c:	2100      	movs	r1, #0
 801332e:	4605      	mov	r5, r0
 8013330:	7122      	strb	r2, [r4, #4]
 8013332:	f88d 1014 	strb.w	r1, [sp, #20]
 8013336:	b1cb      	cbz	r3, 801336c <uxr_buffer_create_participant_bin+0x5c>
 8013338:	f88d 201c 	strb.w	r2, [sp, #28]
 801333c:	9308      	str	r3, [sp, #32]
 801333e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013342:	a915      	add	r1, sp, #84	; 0x54
 8013344:	a809      	add	r0, sp, #36	; 0x24
 8013346:	f7ff fea3 	bl	8013090 <ucdr_init_buffer>
 801334a:	a905      	add	r1, sp, #20
 801334c:	a809      	add	r0, sp, #36	; 0x24
 801334e:	f001 fed9 	bl	8015104 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8013352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013354:	9600      	str	r6, [sp, #0]
 8013356:	9401      	str	r4, [sp, #4]
 8013358:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801335c:	60e3      	str	r3, [r4, #12]
 801335e:	4628      	mov	r0, r5
 8013360:	b29b      	uxth	r3, r3
 8013362:	f7ff ffa9 	bl	80132b8 <uxr_common_create_entity>
 8013366:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 801336a:	bd70      	pop	{r4, r5, r6, pc}
 801336c:	f88d 301c 	strb.w	r3, [sp, #28]
 8013370:	e7e5      	b.n	801333e <uxr_buffer_create_participant_bin+0x2e>
 8013372:	bf00      	nop

08013374 <uxr_buffer_create_topic_bin>:
 8013374:	b570      	push	{r4, r5, r6, lr}
 8013376:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 801337a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801337e:	9105      	str	r1, [sp, #20]
 8013380:	4605      	mov	r5, r0
 8013382:	a997      	add	r1, sp, #604	; 0x25c
 8013384:	4618      	mov	r0, r3
 8013386:	2302      	movs	r3, #2
 8013388:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 801338c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8013390:	f000 f8ee 	bl	8013570 <uxr_object_id_to_raw>
 8013394:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8013396:	9306      	str	r3, [sp, #24]
 8013398:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 801339a:	930a      	str	r3, [sp, #40]	; 0x28
 801339c:	2303      	movs	r3, #3
 801339e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80133a2:	2301      	movs	r3, #1
 80133a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80133a8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80133ac:	a917      	add	r1, sp, #92	; 0x5c
 80133ae:	2300      	movs	r3, #0
 80133b0:	a80b      	add	r0, sp, #44	; 0x2c
 80133b2:	f88d 301c 	strb.w	r3, [sp, #28]
 80133b6:	f7ff fe6b 	bl	8013090 <ucdr_init_buffer>
 80133ba:	a906      	add	r1, sp, #24
 80133bc:	a80b      	add	r0, sp, #44	; 0x2c
 80133be:	f001 fec3 	bl	8015148 <uxr_serialize_OBJK_Topic_Binary>
 80133c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80133c4:	9316      	str	r3, [sp, #88]	; 0x58
 80133c6:	ac13      	add	r4, sp, #76	; 0x4c
 80133c8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80133cc:	9600      	str	r6, [sp, #0]
 80133ce:	9401      	str	r4, [sp, #4]
 80133d0:	b29b      	uxth	r3, r3
 80133d2:	4628      	mov	r0, r5
 80133d4:	f7ff ff70 	bl	80132b8 <uxr_common_create_entity>
 80133d8:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 80133dc:	bd70      	pop	{r4, r5, r6, pc}
 80133de:	bf00      	nop

080133e0 <uxr_buffer_create_publisher_bin>:
 80133e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80133e2:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 80133e6:	4605      	mov	r5, r0
 80133e8:	9105      	str	r1, [sp, #20]
 80133ea:	4618      	mov	r0, r3
 80133ec:	2603      	movs	r6, #3
 80133ee:	a992      	add	r1, sp, #584	; 0x248
 80133f0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80133f4:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 80133f8:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 80133fc:	f000 f8b8 	bl	8013570 <uxr_object_id_to_raw>
 8013400:	2300      	movs	r3, #0
 8013402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013406:	a912      	add	r1, sp, #72	; 0x48
 8013408:	a806      	add	r0, sp, #24
 801340a:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 801340e:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8013412:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8013416:	f7ff fe3b 	bl	8013090 <ucdr_init_buffer>
 801341a:	a993      	add	r1, sp, #588	; 0x24c
 801341c:	a806      	add	r0, sp, #24
 801341e:	f001 ff47 	bl	80152b0 <uxr_serialize_OBJK_Publisher_Binary>
 8013422:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013424:	9311      	str	r3, [sp, #68]	; 0x44
 8013426:	ac0e      	add	r4, sp, #56	; 0x38
 8013428:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801342c:	9700      	str	r7, [sp, #0]
 801342e:	9401      	str	r4, [sp, #4]
 8013430:	b29b      	uxth	r3, r3
 8013432:	4628      	mov	r0, r5
 8013434:	f7ff ff40 	bl	80132b8 <uxr_common_create_entity>
 8013438:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 801343c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801343e:	bf00      	nop

08013440 <uxr_buffer_create_datawriter_bin>:
 8013440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013444:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8013448:	ac1d      	add	r4, sp, #116	; 0x74
 801344a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801344e:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8013452:	9105      	str	r1, [sp, #20]
 8013454:	4606      	mov	r6, r0
 8013456:	a9a1      	add	r1, sp, #644	; 0x284
 8013458:	4618      	mov	r0, r3
 801345a:	2305      	movs	r3, #5
 801345c:	7123      	strb	r3, [r4, #4]
 801345e:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8013462:	2703      	movs	r7, #3
 8013464:	f000 f884 	bl	8013570 <uxr_object_id_to_raw>
 8013468:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 801346a:	7227      	strb	r7, [r4, #8]
 801346c:	a90e      	add	r1, sp, #56	; 0x38
 801346e:	f000 f87f 	bl	8013570 <uxr_object_id_to_raw>
 8013472:	2300      	movs	r3, #0
 8013474:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8013478:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 801347c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8013480:	3d00      	subs	r5, #0
 8013482:	bf18      	it	ne
 8013484:	2501      	movne	r5, #1
 8013486:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 801348a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 801348e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8013492:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8013496:	2301      	movs	r3, #1
 8013498:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 801349c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80134a0:	bb8a      	cbnz	r2, 8013506 <uxr_buffer_create_datawriter_bin+0xc6>
 80134a2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80134a6:	f04f 0e23 	mov.w	lr, #35	; 0x23
 80134aa:	f04f 0c13 	mov.w	ip, #19
 80134ae:	250b      	movs	r5, #11
 80134b0:	2221      	movs	r2, #33	; 0x21
 80134b2:	2111      	movs	r1, #17
 80134b4:	2009      	movs	r0, #9
 80134b6:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 80134ba:	b923      	cbnz	r3, 80134c6 <uxr_buffer_create_datawriter_bin+0x86>
 80134bc:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 80134c0:	4672      	mov	r2, lr
 80134c2:	4661      	mov	r1, ip
 80134c4:	4628      	mov	r0, r5
 80134c6:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 80134ca:	2b01      	cmp	r3, #1
 80134cc:	d025      	beq.n	801351a <uxr_buffer_create_datawriter_bin+0xda>
 80134ce:	2b03      	cmp	r3, #3
 80134d0:	d029      	beq.n	8013526 <uxr_buffer_create_datawriter_bin+0xe6>
 80134d2:	b32b      	cbz	r3, 8013520 <uxr_buffer_create_datawriter_bin+0xe0>
 80134d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80134d8:	a921      	add	r1, sp, #132	; 0x84
 80134da:	a806      	add	r0, sp, #24
 80134dc:	f7ff fdd8 	bl	8013090 <ucdr_init_buffer>
 80134e0:	a90e      	add	r1, sp, #56	; 0x38
 80134e2:	a806      	add	r0, sp, #24
 80134e4:	f001 ff5a 	bl	801539c <uxr_serialize_OBJK_DataWriter_Binary>
 80134e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134ea:	f8cd 8000 	str.w	r8, [sp]
 80134ee:	9401      	str	r4, [sp, #4]
 80134f0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80134f4:	60e3      	str	r3, [r4, #12]
 80134f6:	4630      	mov	r0, r6
 80134f8:	b29b      	uxth	r3, r3
 80134fa:	f7ff fedd 	bl	80132b8 <uxr_common_create_entity>
 80134fe:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8013502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013506:	f04f 0e22 	mov.w	lr, #34	; 0x22
 801350a:	f04f 0c12 	mov.w	ip, #18
 801350e:	250a      	movs	r5, #10
 8013510:	2220      	movs	r2, #32
 8013512:	2110      	movs	r1, #16
 8013514:	2008      	movs	r0, #8
 8013516:	2702      	movs	r7, #2
 8013518:	e7cd      	b.n	80134b6 <uxr_buffer_create_datawriter_bin+0x76>
 801351a:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 801351e:	e7d9      	b.n	80134d4 <uxr_buffer_create_datawriter_bin+0x94>
 8013520:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8013524:	e7d6      	b.n	80134d4 <uxr_buffer_create_datawriter_bin+0x94>
 8013526:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801352a:	e7d3      	b.n	80134d4 <uxr_buffer_create_datawriter_bin+0x94>

0801352c <uxr_object_id>:
 801352c:	b082      	sub	sp, #8
 801352e:	2300      	movs	r3, #0
 8013530:	f88d 1006 	strb.w	r1, [sp, #6]
 8013534:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8013538:	f360 030f 	bfi	r3, r0, #0, #16
 801353c:	f362 431f 	bfi	r3, r2, #16, #16
 8013540:	4618      	mov	r0, r3
 8013542:	b002      	add	sp, #8
 8013544:	4770      	bx	lr
 8013546:	bf00      	nop

08013548 <uxr_object_id_from_raw>:
 8013548:	7843      	ldrb	r3, [r0, #1]
 801354a:	7801      	ldrb	r1, [r0, #0]
 801354c:	b082      	sub	sp, #8
 801354e:	f003 020f 	and.w	r2, r3, #15
 8013552:	f88d 2006 	strb.w	r2, [sp, #6]
 8013556:	091b      	lsrs	r3, r3, #4
 8013558:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801355c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8013560:	2000      	movs	r0, #0
 8013562:	f363 000f 	bfi	r0, r3, #0, #16
 8013566:	f362 401f 	bfi	r0, r2, #16, #16
 801356a:	b002      	add	sp, #8
 801356c:	4770      	bx	lr
 801356e:	bf00      	nop

08013570 <uxr_object_id_to_raw>:
 8013570:	4602      	mov	r2, r0
 8013572:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8013576:	b082      	sub	sp, #8
 8013578:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 801357c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8013580:	f881 c000 	strb.w	ip, [r1]
 8013584:	7048      	strb	r0, [r1, #1]
 8013586:	b002      	add	sp, #8
 8013588:	4770      	bx	lr
 801358a:	bf00      	nop

0801358c <on_get_fragmentation_info>:
 801358c:	b500      	push	{lr}
 801358e:	b08b      	sub	sp, #44	; 0x2c
 8013590:	4601      	mov	r1, r0
 8013592:	2204      	movs	r2, #4
 8013594:	a802      	add	r0, sp, #8
 8013596:	f7ff fd7b 	bl	8013090 <ucdr_init_buffer>
 801359a:	f10d 0305 	add.w	r3, sp, #5
 801359e:	f10d 0206 	add.w	r2, sp, #6
 80135a2:	a901      	add	r1, sp, #4
 80135a4:	a802      	add	r0, sp, #8
 80135a6:	f001 f99b 	bl	80148e0 <uxr_read_submessage_header>
 80135aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80135ae:	2b0d      	cmp	r3, #13
 80135b0:	d003      	beq.n	80135ba <on_get_fragmentation_info+0x2e>
 80135b2:	2000      	movs	r0, #0
 80135b4:	b00b      	add	sp, #44	; 0x2c
 80135b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80135ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80135be:	f013 0f02 	tst.w	r3, #2
 80135c2:	bf14      	ite	ne
 80135c4:	2002      	movne	r0, #2
 80135c6:	2001      	moveq	r0, #1
 80135c8:	b00b      	add	sp, #44	; 0x2c
 80135ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80135ce:	bf00      	nop

080135d0 <read_submessage_get_info>:
 80135d0:	b570      	push	{r4, r5, r6, lr}
 80135d2:	2500      	movs	r5, #0
 80135d4:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 80135d8:	4604      	mov	r4, r0
 80135da:	f44f 7224 	mov.w	r2, #656	; 0x290
 80135de:	460e      	mov	r6, r1
 80135e0:	a810      	add	r0, sp, #64	; 0x40
 80135e2:	4629      	mov	r1, r5
 80135e4:	e9cd 5503 	strd	r5, r5, [sp, #12]
 80135e8:	f007 f8ec 	bl	801a7c4 <memset>
 80135ec:	a903      	add	r1, sp, #12
 80135ee:	4630      	mov	r0, r6
 80135f0:	f002 f94a 	bl	8015888 <uxr_deserialize_GET_INFO_Payload>
 80135f4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80135f8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80135fc:	4620      	mov	r0, r4
 80135fe:	f000 ffe5 	bl	80145cc <uxr_session_header_offset>
 8013602:	462b      	mov	r3, r5
 8013604:	9000      	str	r0, [sp, #0]
 8013606:	220c      	movs	r2, #12
 8013608:	a905      	add	r1, sp, #20
 801360a:	a808      	add	r0, sp, #32
 801360c:	f7ff fd2e 	bl	801306c <ucdr_init_buffer_origin_offset>
 8013610:	a910      	add	r1, sp, #64	; 0x40
 8013612:	a808      	add	r0, sp, #32
 8013614:	f002 f9aa 	bl	801596c <uxr_serialize_INFO_Payload>
 8013618:	9b08      	ldr	r3, [sp, #32]
 801361a:	462a      	mov	r2, r5
 801361c:	4629      	mov	r1, r5
 801361e:	4620      	mov	r0, r4
 8013620:	f000 ff7e 	bl	8014520 <uxr_stamp_session_header>
 8013624:	a808      	add	r0, sp, #32
 8013626:	f7ff fd5f 	bl	80130e8 <ucdr_buffer_length>
 801362a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801362c:	4602      	mov	r2, r0
 801362e:	a905      	add	r1, sp, #20
 8013630:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013634:	47a0      	blx	r4
 8013636:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 801363a:	bd70      	pop	{r4, r5, r6, pc}

0801363c <write_submessage_acknack.isra.0>:
 801363c:	b570      	push	{r4, r5, r6, lr}
 801363e:	b092      	sub	sp, #72	; 0x48
 8013640:	4605      	mov	r5, r0
 8013642:	460e      	mov	r6, r1
 8013644:	4614      	mov	r4, r2
 8013646:	f000 ffc1 	bl	80145cc <uxr_session_header_offset>
 801364a:	a905      	add	r1, sp, #20
 801364c:	9000      	str	r0, [sp, #0]
 801364e:	2300      	movs	r3, #0
 8013650:	a80a      	add	r0, sp, #40	; 0x28
 8013652:	2211      	movs	r2, #17
 8013654:	f7ff fd0a 	bl	801306c <ucdr_init_buffer_origin_offset>
 8013658:	2218      	movs	r2, #24
 801365a:	fb02 5404 	mla	r4, r2, r4, r5
 801365e:	2300      	movs	r3, #0
 8013660:	2205      	movs	r2, #5
 8013662:	3450      	adds	r4, #80	; 0x50
 8013664:	210a      	movs	r1, #10
 8013666:	a80a      	add	r0, sp, #40	; 0x28
 8013668:	f001 f920 	bl	80148ac <uxr_buffer_submessage_header>
 801366c:	a903      	add	r1, sp, #12
 801366e:	4620      	mov	r0, r4
 8013670:	f005 f890 	bl	8018794 <uxr_compute_acknack>
 8013674:	ba40      	rev16	r0, r0
 8013676:	f8ad 000e 	strh.w	r0, [sp, #14]
 801367a:	a903      	add	r1, sp, #12
 801367c:	a80a      	add	r0, sp, #40	; 0x28
 801367e:	f88d 6010 	strb.w	r6, [sp, #16]
 8013682:	f002 f9e3 	bl	8015a4c <uxr_serialize_ACKNACK_Payload>
 8013686:	2200      	movs	r2, #0
 8013688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801368a:	4611      	mov	r1, r2
 801368c:	4628      	mov	r0, r5
 801368e:	f000 ff47 	bl	8014520 <uxr_stamp_session_header>
 8013692:	a80a      	add	r0, sp, #40	; 0x28
 8013694:	f7ff fd28 	bl	80130e8 <ucdr_buffer_length>
 8013698:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801369a:	4602      	mov	r2, r0
 801369c:	a905      	add	r1, sp, #20
 801369e:	e9d3 0400 	ldrd	r0, r4, [r3]
 80136a2:	47a0      	blx	r4
 80136a4:	b012      	add	sp, #72	; 0x48
 80136a6:	bd70      	pop	{r4, r5, r6, pc}

080136a8 <uxr_init_session>:
 80136a8:	b510      	push	{r4, lr}
 80136aa:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80136e0 <uxr_init_session+0x38>
 80136ae:	2300      	movs	r3, #0
 80136b0:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 80136b4:	4604      	mov	r4, r0
 80136b6:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 80136ba:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 80136be:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 80136c2:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 80136c6:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 80136ca:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 80136ce:	2181      	movs	r1, #129	; 0x81
 80136d0:	f000 fe92 	bl	80143f8 <uxr_init_session_info>
 80136d4:	f104 0008 	add.w	r0, r4, #8
 80136d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80136dc:	f001 b802 	b.w	80146e4 <uxr_init_stream_storage>
	...

080136e8 <uxr_set_status_callback>:
 80136e8:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 80136ec:	4770      	bx	lr
 80136ee:	bf00      	nop

080136f0 <uxr_set_topic_callback>:
 80136f0:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 80136f4:	4770      	bx	lr
 80136f6:	bf00      	nop

080136f8 <uxr_set_request_callback>:
 80136f8:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 80136fc:	4770      	bx	lr
 80136fe:	bf00      	nop

08013700 <uxr_set_reply_callback>:
 8013700:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8013704:	4770      	bx	lr
 8013706:	bf00      	nop

08013708 <uxr_create_output_best_effort_stream>:
 8013708:	b510      	push	{r4, lr}
 801370a:	b084      	sub	sp, #16
 801370c:	e9cd 2100 	strd	r2, r1, [sp]
 8013710:	4604      	mov	r4, r0
 8013712:	f000 ff5b 	bl	80145cc <uxr_session_header_offset>
 8013716:	e9dd 2100 	ldrd	r2, r1, [sp]
 801371a:	4603      	mov	r3, r0
 801371c:	f104 0008 	add.w	r0, r4, #8
 8013720:	b004      	add	sp, #16
 8013722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013726:	f001 b827 	b.w	8014778 <uxr_add_output_best_effort_buffer>
 801372a:	bf00      	nop

0801372c <uxr_create_output_reliable_stream>:
 801372c:	b510      	push	{r4, lr}
 801372e:	b088      	sub	sp, #32
 8013730:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013734:	4604      	mov	r4, r0
 8013736:	9303      	str	r3, [sp, #12]
 8013738:	f000 ff48 	bl	80145cc <uxr_session_header_offset>
 801373c:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8013740:	9000      	str	r0, [sp, #0]
 8013742:	9905      	ldr	r1, [sp, #20]
 8013744:	f104 0008 	add.w	r0, r4, #8
 8013748:	f001 f82a 	bl	80147a0 <uxr_add_output_reliable_buffer>
 801374c:	2200      	movs	r2, #0
 801374e:	b2c3      	uxtb	r3, r0
 8013750:	f363 0207 	bfi	r2, r3, #0, #8
 8013754:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013758:	f363 220f 	bfi	r2, r3, #8, #8
 801375c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8013760:	f363 4217 	bfi	r2, r3, #16, #8
 8013764:	0e03      	lsrs	r3, r0, #24
 8013766:	f363 621f 	bfi	r2, r3, #24, #8
 801376a:	4610      	mov	r0, r2
 801376c:	b008      	add	sp, #32
 801376e:	bd10      	pop	{r4, pc}

08013770 <uxr_create_input_best_effort_stream>:
 8013770:	b082      	sub	sp, #8
 8013772:	3008      	adds	r0, #8
 8013774:	b002      	add	sp, #8
 8013776:	f001 b82d 	b.w	80147d4 <uxr_add_input_best_effort_buffer>
 801377a:	bf00      	nop

0801377c <uxr_create_input_reliable_stream>:
 801377c:	b510      	push	{r4, lr}
 801377e:	b084      	sub	sp, #16
 8013780:	4c0b      	ldr	r4, [pc, #44]	; (80137b0 <uxr_create_input_reliable_stream+0x34>)
 8013782:	9400      	str	r4, [sp, #0]
 8013784:	3008      	adds	r0, #8
 8013786:	f001 f83b 	bl	8014800 <uxr_add_input_reliable_buffer>
 801378a:	2200      	movs	r2, #0
 801378c:	b2c3      	uxtb	r3, r0
 801378e:	f363 0207 	bfi	r2, r3, #0, #8
 8013792:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8013796:	f363 220f 	bfi	r2, r3, #8, #8
 801379a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801379e:	f363 4217 	bfi	r2, r3, #16, #8
 80137a2:	0e03      	lsrs	r3, r0, #24
 80137a4:	f363 621f 	bfi	r2, r3, #24, #8
 80137a8:	4610      	mov	r0, r2
 80137aa:	b004      	add	sp, #16
 80137ac:	bd10      	pop	{r4, pc}
 80137ae:	bf00      	nop
 80137b0:	0801358d 	.word	0x0801358d

080137b4 <uxr_epoch_nanos>:
 80137b4:	b510      	push	{r4, lr}
 80137b6:	4604      	mov	r4, r0
 80137b8:	f001 f8d8 	bl	801496c <uxr_nanos>
 80137bc:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 80137c0:	1ac0      	subs	r0, r0, r3
 80137c2:	eb61 0102 	sbc.w	r1, r1, r2
 80137c6:	bd10      	pop	{r4, pc}

080137c8 <uxr_flash_output_streams>:
 80137c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137cc:	7e03      	ldrb	r3, [r0, #24]
 80137ce:	b084      	sub	sp, #16
 80137d0:	4604      	mov	r4, r0
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d035      	beq.n	8013842 <uxr_flash_output_streams+0x7a>
 80137d6:	f04f 0900 	mov.w	r9, #0
 80137da:	4648      	mov	r0, r9
 80137dc:	f10d 0802 	add.w	r8, sp, #2
 80137e0:	af03      	add	r7, sp, #12
 80137e2:	ae02      	add	r6, sp, #8
 80137e4:	e006      	b.n	80137f4 <uxr_flash_output_streams+0x2c>
 80137e6:	7e23      	ldrb	r3, [r4, #24]
 80137e8:	f109 0901 	add.w	r9, r9, #1
 80137ec:	fa5f f089 	uxtb.w	r0, r9
 80137f0:	4283      	cmp	r3, r0
 80137f2:	d926      	bls.n	8013842 <uxr_flash_output_streams+0x7a>
 80137f4:	2201      	movs	r2, #1
 80137f6:	4611      	mov	r1, r2
 80137f8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80137fc:	f000 ff1e 	bl	801463c <uxr_stream_id>
 8013800:	3508      	adds	r5, #8
 8013802:	4684      	mov	ip, r0
 8013804:	4643      	mov	r3, r8
 8013806:	463a      	mov	r2, r7
 8013808:	4631      	mov	r1, r6
 801380a:	4628      	mov	r0, r5
 801380c:	f8cd c004 	str.w	ip, [sp, #4]
 8013810:	f005 f846 	bl	80188a0 <uxr_prepare_best_effort_buffer_to_send>
 8013814:	2800      	cmp	r0, #0
 8013816:	d0e6      	beq.n	80137e6 <uxr_flash_output_streams+0x1e>
 8013818:	9b02      	ldr	r3, [sp, #8]
 801381a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801381e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013822:	4620      	mov	r0, r4
 8013824:	f000 fe7c 	bl	8014520 <uxr_stamp_session_header>
 8013828:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801382a:	9a03      	ldr	r2, [sp, #12]
 801382c:	685d      	ldr	r5, [r3, #4]
 801382e:	6818      	ldr	r0, [r3, #0]
 8013830:	9902      	ldr	r1, [sp, #8]
 8013832:	47a8      	blx	r5
 8013834:	f109 0901 	add.w	r9, r9, #1
 8013838:	7e23      	ldrb	r3, [r4, #24]
 801383a:	fa5f f089 	uxtb.w	r0, r9
 801383e:	4283      	cmp	r3, r0
 8013840:	d8d8      	bhi.n	80137f4 <uxr_flash_output_streams+0x2c>
 8013842:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8013846:	b38b      	cbz	r3, 80138ac <uxr_flash_output_streams+0xe4>
 8013848:	f04f 0900 	mov.w	r9, #0
 801384c:	f10d 0802 	add.w	r8, sp, #2
 8013850:	af03      	add	r7, sp, #12
 8013852:	ae02      	add	r6, sp, #8
 8013854:	4648      	mov	r0, r9
 8013856:	2201      	movs	r2, #1
 8013858:	2102      	movs	r1, #2
 801385a:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 801385e:	f000 feed 	bl	801463c <uxr_stream_id>
 8013862:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8013866:	3520      	adds	r5, #32
 8013868:	9001      	str	r0, [sp, #4]
 801386a:	e00d      	b.n	8013888 <uxr_flash_output_streams+0xc0>
 801386c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013870:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013874:	9b02      	ldr	r3, [sp, #8]
 8013876:	f000 fe53 	bl	8014520 <uxr_stamp_session_header>
 801387a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801387c:	9a03      	ldr	r2, [sp, #12]
 801387e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8013882:	9902      	ldr	r1, [sp, #8]
 8013884:	6818      	ldr	r0, [r3, #0]
 8013886:	47d0      	blx	sl
 8013888:	4643      	mov	r3, r8
 801388a:	463a      	mov	r2, r7
 801388c:	4631      	mov	r1, r6
 801388e:	4628      	mov	r0, r5
 8013890:	f005 fa12 	bl	8018cb8 <uxr_prepare_next_reliable_buffer_to_send>
 8013894:	4603      	mov	r3, r0
 8013896:	4620      	mov	r0, r4
 8013898:	2b00      	cmp	r3, #0
 801389a:	d1e7      	bne.n	801386c <uxr_flash_output_streams+0xa4>
 801389c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80138a0:	f109 0901 	add.w	r9, r9, #1
 80138a4:	fa5f f089 	uxtb.w	r0, r9
 80138a8:	4283      	cmp	r3, r0
 80138aa:	d8d4      	bhi.n	8013856 <uxr_flash_output_streams+0x8e>
 80138ac:	b004      	add	sp, #16
 80138ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138b2:	bf00      	nop

080138b4 <read_submessage_info>:
 80138b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138b8:	460d      	mov	r5, r1
 80138ba:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 80138be:	4669      	mov	r1, sp
 80138c0:	4607      	mov	r7, r0
 80138c2:	4628      	mov	r0, r5
 80138c4:	f001 feee 	bl	80156a4 <uxr_deserialize_BaseObjectReply>
 80138c8:	a902      	add	r1, sp, #8
 80138ca:	4604      	mov	r4, r0
 80138cc:	4628      	mov	r0, r5
 80138ce:	f89d 8005 	ldrb.w	r8, [sp, #5]
 80138d2:	f7fd fe95 	bl	8011600 <ucdr_deserialize_bool>
 80138d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80138da:	4004      	ands	r4, r0
 80138dc:	b2e4      	uxtb	r4, r4
 80138de:	b95b      	cbnz	r3, 80138f8 <read_submessage_info+0x44>
 80138e0:	a987      	add	r1, sp, #540	; 0x21c
 80138e2:	4628      	mov	r0, r5
 80138e4:	f7fd fe8c 	bl	8011600 <ucdr_deserialize_bool>
 80138e8:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 80138ec:	4606      	mov	r6, r0
 80138ee:	b94b      	cbnz	r3, 8013904 <read_submessage_info+0x50>
 80138f0:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80138f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138f8:	a903      	add	r1, sp, #12
 80138fa:	4628      	mov	r0, r5
 80138fc:	f001 fd7a 	bl	80153f4 <uxr_deserialize_ObjectVariant>
 8013900:	4004      	ands	r4, r0
 8013902:	e7ed      	b.n	80138e0 <read_submessage_info+0x2c>
 8013904:	a988      	add	r1, sp, #544	; 0x220
 8013906:	4628      	mov	r0, r5
 8013908:	f7fd fea8 	bl	801165c <ucdr_deserialize_uint8_t>
 801390c:	4234      	tst	r4, r6
 801390e:	d0ef      	beq.n	80138f0 <read_submessage_info+0x3c>
 8013910:	2800      	cmp	r0, #0
 8013912:	d0ed      	beq.n	80138f0 <read_submessage_info+0x3c>
 8013914:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8013918:	2b0d      	cmp	r3, #13
 801391a:	d1e9      	bne.n	80138f0 <read_submessage_info+0x3c>
 801391c:	a98a      	add	r1, sp, #552	; 0x228
 801391e:	4628      	mov	r0, r5
 8013920:	f7fe fc42 	bl	80121a8 <ucdr_deserialize_int16_t>
 8013924:	b140      	cbz	r0, 8013938 <read_submessage_info+0x84>
 8013926:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 801392a:	2b00      	cmp	r3, #0
 801392c:	dd07      	ble.n	801393e <read_submessage_info+0x8a>
 801392e:	f1b8 0f00 	cmp.w	r8, #0
 8013932:	bf14      	ite	ne
 8013934:	2001      	movne	r0, #1
 8013936:	2002      	moveq	r0, #2
 8013938:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 801393c:	e7d8      	b.n	80138f0 <read_submessage_info+0x3c>
 801393e:	2000      	movs	r0, #0
 8013940:	e7fa      	b.n	8013938 <read_submessage_info+0x84>
 8013942:	bf00      	nop

08013944 <read_submessage_list>:
 8013944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013948:	b097      	sub	sp, #92	; 0x5c
 801394a:	4ec1      	ldr	r6, [pc, #772]	; (8013c50 <read_submessage_list+0x30c>)
 801394c:	9209      	str	r2, [sp, #36]	; 0x24
 801394e:	4604      	mov	r4, r0
 8013950:	460d      	mov	r5, r1
 8013952:	f04f 0801 	mov.w	r8, #1
 8013956:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801395a:	aa0c      	add	r2, sp, #48	; 0x30
 801395c:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8013960:	4628      	mov	r0, r5
 8013962:	f000 ffbd 	bl	80148e0 <uxr_read_submessage_header>
 8013966:	2800      	cmp	r0, #0
 8013968:	f000 813e 	beq.w	8013be8 <read_submessage_list+0x2a4>
 801396c:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8013970:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8013974:	3b02      	subs	r3, #2
 8013976:	2b0d      	cmp	r3, #13
 8013978:	d8ed      	bhi.n	8013956 <read_submessage_list+0x12>
 801397a:	a101      	add	r1, pc, #4	; (adr r1, 8013980 <read_submessage_list+0x3c>)
 801397c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013980:	08013bdf 	.word	0x08013bdf
 8013984:	08013957 	.word	0x08013957
 8013988:	08013bcf 	.word	0x08013bcf
 801398c:	08013b6d 	.word	0x08013b6d
 8013990:	08013b63 	.word	0x08013b63
 8013994:	08013957 	.word	0x08013957
 8013998:	08013957 	.word	0x08013957
 801399c:	08013ac3 	.word	0x08013ac3
 80139a0:	08013a53 	.word	0x08013a53
 80139a4:	08013a13 	.word	0x08013a13
 80139a8:	08013957 	.word	0x08013957
 80139ac:	08013957 	.word	0x08013957
 80139b0:	08013957 	.word	0x08013957
 80139b4:	080139b9 	.word	0x080139b9
 80139b8:	a910      	add	r1, sp, #64	; 0x40
 80139ba:	4628      	mov	r0, r5
 80139bc:	f002 f896 	bl	8015aec <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80139c0:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 80139c4:	f1b9 0f00 	cmp.w	r9, #0
 80139c8:	f000 8116 	beq.w	8013bf8 <read_submessage_list+0x2b4>
 80139cc:	f000 ffce 	bl	801496c <uxr_nanos>
 80139d0:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80139d2:	4602      	mov	r2, r0
 80139d4:	460b      	mov	r3, r1
 80139d6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80139d8:	2100      	movs	r1, #0
 80139da:	468c      	mov	ip, r1
 80139dc:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80139e0:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 80139e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80139e6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80139e8:	468c      	mov	ip, r1
 80139ea:	fbc0 7c06 	smlal	r7, ip, r0, r6
 80139ee:	46e2      	mov	sl, ip
 80139f0:	46bc      	mov	ip, r7
 80139f2:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 80139f6:	fbc0 7106 	smlal	r7, r1, r0, r6
 80139fa:	e9cd ca02 	strd	ip, sl, [sp, #8]
 80139fe:	e9cd 7100 	strd	r7, r1, [sp]
 8013a02:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8013a06:	9106      	str	r1, [sp, #24]
 8013a08:	4620      	mov	r0, r4
 8013a0a:	47c8      	blx	r9
 8013a0c:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 8013a10:	e7a1      	b.n	8013956 <read_submessage_list+0x12>
 8013a12:	a910      	add	r1, sp, #64	; 0x40
 8013a14:	4628      	mov	r0, r5
 8013a16:	f002 f857 	bl	8015ac8 <uxr_deserialize_HEARTBEAT_Payload>
 8013a1a:	2100      	movs	r1, #0
 8013a1c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8013a20:	f000 fe36 	bl	8014690 <uxr_stream_id_from_raw>
 8013a24:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8013a28:	900f      	str	r0, [sp, #60]	; 0x3c
 8013a2a:	4639      	mov	r1, r7
 8013a2c:	f104 0008 	add.w	r0, r4, #8
 8013a30:	f000 ff1c 	bl	801486c <uxr_get_input_reliable_stream>
 8013a34:	2800      	cmp	r0, #0
 8013a36:	d08e      	beq.n	8013956 <read_submessage_list+0x12>
 8013a38:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8013a3c:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8013a40:	f004 fe9c 	bl	801877c <uxr_process_heartbeat>
 8013a44:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8013a48:	463a      	mov	r2, r7
 8013a4a:	4620      	mov	r0, r4
 8013a4c:	f7ff fdf6 	bl	801363c <write_submessage_acknack.isra.0>
 8013a50:	e781      	b.n	8013956 <read_submessage_list+0x12>
 8013a52:	a910      	add	r1, sp, #64	; 0x40
 8013a54:	4628      	mov	r0, r5
 8013a56:	f002 f80f 	bl	8015a78 <uxr_deserialize_ACKNACK_Payload>
 8013a5a:	2100      	movs	r1, #0
 8013a5c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8013a60:	f000 fe16 	bl	8014690 <uxr_stream_id_from_raw>
 8013a64:	900d      	str	r0, [sp, #52]	; 0x34
 8013a66:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8013a6a:	f104 0008 	add.w	r0, r4, #8
 8013a6e:	f000 fee9 	bl	8014844 <uxr_get_output_reliable_stream>
 8013a72:	4607      	mov	r7, r0
 8013a74:	2800      	cmp	r0, #0
 8013a76:	f43f af6e 	beq.w	8013956 <read_submessage_list+0x12>
 8013a7a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8013a7e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 8013a82:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8013a86:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8013a8a:	b289      	uxth	r1, r1
 8013a8c:	f005 f9be 	bl	8018e0c <uxr_process_acknack>
 8013a90:	4638      	mov	r0, r7
 8013a92:	f005 f97b 	bl	8018d8c <uxr_begin_output_nack_buffer_it>
 8013a96:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8013a9a:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8013a9e:	e006      	b.n	8013aae <read_submessage_list+0x16a>
 8013aa0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013aa2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013aa4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8013aa8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013aaa:	6818      	ldr	r0, [r3, #0]
 8013aac:	47c8      	blx	r9
 8013aae:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8013ab2:	aa0f      	add	r2, sp, #60	; 0x3c
 8013ab4:	4651      	mov	r1, sl
 8013ab6:	4638      	mov	r0, r7
 8013ab8:	f005 f96a 	bl	8018d90 <uxr_next_reliable_nack_buffer_to_send>
 8013abc:	2800      	cmp	r0, #0
 8013abe:	d1ef      	bne.n	8013aa0 <read_submessage_list+0x15c>
 8013ac0:	e749      	b.n	8013956 <read_submessage_list+0x12>
 8013ac2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8013ac6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8013aca:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8013ace:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8013ad2:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8013ad6:	4651      	mov	r1, sl
 8013ad8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8013adc:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 8013ae0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8013ae4:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8013ae8:	4628      	mov	r0, r5
 8013aea:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8013aee:	f001 fd23 	bl	8015538 <uxr_deserialize_BaseObjectRequest>
 8013af2:	4650      	mov	r0, sl
 8013af4:	a90f      	add	r1, sp, #60	; 0x3c
 8013af6:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8013afa:	f000 fd8d 	bl	8014618 <uxr_parse_base_object_request>
 8013afe:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8013b02:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013b04:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8013b08:	9110      	str	r1, [sp, #64]	; 0x40
 8013b0a:	3f04      	subs	r7, #4
 8013b0c:	f009 090e 	and.w	r9, r9, #14
 8013b10:	b2bf      	uxth	r7, r7
 8013b12:	f1bb 0f00 	cmp.w	fp, #0
 8013b16:	d006      	beq.n	8013b26 <read_submessage_list+0x1e2>
 8013b18:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8013b1c:	9300      	str	r3, [sp, #0]
 8013b1e:	4652      	mov	r2, sl
 8013b20:	2300      	movs	r3, #0
 8013b22:	4620      	mov	r0, r4
 8013b24:	47d8      	blx	fp
 8013b26:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8013b28:	b16a      	cbz	r2, 8013b46 <read_submessage_list+0x202>
 8013b2a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8013b2c:	2100      	movs	r1, #0
 8013b2e:	3802      	subs	r0, #2
 8013b30:	e002      	b.n	8013b38 <read_submessage_list+0x1f4>
 8013b32:	3101      	adds	r1, #1
 8013b34:	4291      	cmp	r1, r2
 8013b36:	d006      	beq.n	8013b46 <read_submessage_list+0x202>
 8013b38:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8013b3c:	4553      	cmp	r3, sl
 8013b3e:	d1f8      	bne.n	8013b32 <read_submessage_list+0x1ee>
 8013b40:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8013b42:	2200      	movs	r2, #0
 8013b44:	545a      	strb	r2, [r3, r1]
 8013b46:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8013b4a:	9102      	str	r1, [sp, #8]
 8013b4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013b4e:	9101      	str	r1, [sp, #4]
 8013b50:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013b52:	9100      	str	r1, [sp, #0]
 8013b54:	464b      	mov	r3, r9
 8013b56:	463a      	mov	r2, r7
 8013b58:	4629      	mov	r1, r5
 8013b5a:	4620      	mov	r0, r4
 8013b5c:	f005 f9da 	bl	8018f14 <read_submessage_format>
 8013b60:	e6f9      	b.n	8013956 <read_submessage_list+0x12>
 8013b62:	4629      	mov	r1, r5
 8013b64:	4620      	mov	r0, r4
 8013b66:	f7ff fea5 	bl	80138b4 <read_submessage_info>
 8013b6a:	e6f4      	b.n	8013956 <read_submessage_list+0x12>
 8013b6c:	2a00      	cmp	r2, #0
 8013b6e:	d03e      	beq.n	8013bee <read_submessage_list+0x2aa>
 8013b70:	a910      	add	r1, sp, #64	; 0x40
 8013b72:	4628      	mov	r0, r5
 8013b74:	f001 fedc 	bl	8015930 <uxr_deserialize_STATUS_Payload>
 8013b78:	a90e      	add	r1, sp, #56	; 0x38
 8013b7a:	aa0d      	add	r2, sp, #52	; 0x34
 8013b7c:	a810      	add	r0, sp, #64	; 0x40
 8013b7e:	f000 fd4b 	bl	8014618 <uxr_parse_base_object_request>
 8013b82:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8013b86:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013b88:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8013b8c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 8013b90:	910f      	str	r1, [sp, #60]	; 0x3c
 8013b92:	f1ba 0f00 	cmp.w	sl, #0
 8013b96:	d006      	beq.n	8013ba6 <read_submessage_list+0x262>
 8013b98:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8013b9c:	9300      	str	r3, [sp, #0]
 8013b9e:	463a      	mov	r2, r7
 8013ba0:	464b      	mov	r3, r9
 8013ba2:	4620      	mov	r0, r4
 8013ba4:	47d0      	blx	sl
 8013ba6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8013ba8:	2a00      	cmp	r2, #0
 8013baa:	f43f aed4 	beq.w	8013956 <read_submessage_list+0x12>
 8013bae:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8013bb0:	2100      	movs	r1, #0
 8013bb2:	3802      	subs	r0, #2
 8013bb4:	e003      	b.n	8013bbe <read_submessage_list+0x27a>
 8013bb6:	3101      	adds	r1, #1
 8013bb8:	4291      	cmp	r1, r2
 8013bba:	f43f aecc 	beq.w	8013956 <read_submessage_list+0x12>
 8013bbe:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8013bc2:	42bb      	cmp	r3, r7
 8013bc4:	d1f7      	bne.n	8013bb6 <read_submessage_list+0x272>
 8013bc6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8013bc8:	f803 9001 	strb.w	r9, [r3, r1]
 8013bcc:	e6c3      	b.n	8013956 <read_submessage_list+0x12>
 8013bce:	2a00      	cmp	r2, #0
 8013bd0:	f47f aec1 	bne.w	8013956 <read_submessage_list+0x12>
 8013bd4:	4629      	mov	r1, r5
 8013bd6:	4620      	mov	r0, r4
 8013bd8:	f000 fc64 	bl	80144a4 <uxr_read_create_session_status>
 8013bdc:	e6bb      	b.n	8013956 <read_submessage_list+0x12>
 8013bde:	4629      	mov	r1, r5
 8013be0:	4620      	mov	r0, r4
 8013be2:	f7ff fcf5 	bl	80135d0 <read_submessage_get_info>
 8013be6:	e6b6      	b.n	8013956 <read_submessage_list+0x12>
 8013be8:	b017      	add	sp, #92	; 0x5c
 8013bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bee:	4629      	mov	r1, r5
 8013bf0:	4620      	mov	r0, r4
 8013bf2:	f000 fc63 	bl	80144bc <uxr_read_delete_session_status>
 8013bf6:	e6ae      	b.n	8013956 <read_submessage_list+0x12>
 8013bf8:	f000 feb8 	bl	801496c <uxr_nanos>
 8013bfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013bfe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013c00:	464f      	mov	r7, r9
 8013c02:	fbc3 2706 	smlal	r2, r7, r3, r6
 8013c06:	1812      	adds	r2, r2, r0
 8013c08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013c0a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8013c0c:	eb47 0101 	adc.w	r1, r7, r1
 8013c10:	464f      	mov	r7, r9
 8013c12:	fbc3 0706 	smlal	r0, r7, r3, r6
 8013c16:	463b      	mov	r3, r7
 8013c18:	4684      	mov	ip, r0
 8013c1a:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 8013c1e:	fbc7 0906 	smlal	r0, r9, r7, r6
 8013c22:	eb1c 0c00 	adds.w	ip, ip, r0
 8013c26:	464f      	mov	r7, r9
 8013c28:	eb43 0307 	adc.w	r3, r3, r7
 8013c2c:	ebb2 0c0c 	subs.w	ip, r2, ip
 8013c30:	eb61 0303 	sbc.w	r3, r1, r3
 8013c34:	0fda      	lsrs	r2, r3, #31
 8013c36:	eb12 020c 	adds.w	r2, r2, ip
 8013c3a:	f143 0300 	adc.w	r3, r3, #0
 8013c3e:	0852      	lsrs	r2, r2, #1
 8013c40:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8013c44:	105b      	asrs	r3, r3, #1
 8013c46:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 8013c4a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 8013c4e:	e6dd      	b.n	8013a0c <read_submessage_list+0xc8>
 8013c50:	3b9aca00 	.word	0x3b9aca00

08013c54 <listen_message_reliably>:
 8013c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c58:	1e0b      	subs	r3, r1, #0
 8013c5a:	b09d      	sub	sp, #116	; 0x74
 8013c5c:	bfb8      	it	lt
 8013c5e:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8013c62:	4680      	mov	r8, r0
 8013c64:	9305      	str	r3, [sp, #20]
 8013c66:	f000 fe67 	bl	8014938 <uxr_millis>
 8013c6a:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8013c6e:	4681      	mov	r9, r0
 8013c70:	2a00      	cmp	r2, #0
 8013c72:	f000 80a1 	beq.w	8013db8 <listen_message_reliably+0x164>
 8013c76:	2600      	movs	r6, #0
 8013c78:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013c7c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8013c80:	9303      	str	r3, [sp, #12]
 8013c82:	4630      	mov	r0, r6
 8013c84:	460f      	mov	r7, r1
 8013c86:	e00f      	b.n	8013ca8 <listen_message_reliably+0x54>
 8013c88:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8013c8c:	9903      	ldr	r1, [sp, #12]
 8013c8e:	455a      	cmp	r2, fp
 8013c90:	f106 0601 	add.w	r6, r6, #1
 8013c94:	eb73 0101 	sbcs.w	r1, r3, r1
 8013c98:	b2f0      	uxtb	r0, r6
 8013c9a:	da01      	bge.n	8013ca0 <listen_message_reliably+0x4c>
 8013c9c:	4693      	mov	fp, r2
 8013c9e:	9303      	str	r3, [sp, #12]
 8013ca0:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8013ca4:	4283      	cmp	r3, r0
 8013ca6:	d960      	bls.n	8013d6a <listen_message_reliably+0x116>
 8013ca8:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8013cac:	2102      	movs	r1, #2
 8013cae:	2201      	movs	r2, #1
 8013cb0:	f000 fcc4 	bl	801463c <uxr_stream_id>
 8013cb4:	00e4      	lsls	r4, r4, #3
 8013cb6:	f104 0520 	add.w	r5, r4, #32
 8013cba:	4445      	add	r5, r8
 8013cbc:	4601      	mov	r1, r0
 8013cbe:	463b      	mov	r3, r7
 8013cc0:	464a      	mov	r2, r9
 8013cc2:	4628      	mov	r0, r5
 8013cc4:	9109      	str	r1, [sp, #36]	; 0x24
 8013cc6:	f005 f837 	bl	8018d38 <uxr_update_output_stream_heartbeat_timestamp>
 8013cca:	eb08 0304 	add.w	r3, r8, r4
 8013cce:	2800      	cmp	r0, #0
 8013cd0:	d0da      	beq.n	8013c88 <listen_message_reliably+0x34>
 8013cd2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8013cd6:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8013cda:	9304      	str	r3, [sp, #16]
 8013cdc:	4640      	mov	r0, r8
 8013cde:	f000 fc75 	bl	80145cc <uxr_session_header_offset>
 8013ce2:	3501      	adds	r5, #1
 8013ce4:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8013ce8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8013cec:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	2211      	movs	r2, #17
 8013cf4:	9000      	str	r0, [sp, #0]
 8013cf6:	a90c      	add	r1, sp, #48	; 0x30
 8013cf8:	4650      	mov	r0, sl
 8013cfa:	f7ff f9b7 	bl	801306c <ucdr_init_buffer_origin_offset>
 8013cfe:	2300      	movs	r3, #0
 8013d00:	2205      	movs	r2, #5
 8013d02:	210b      	movs	r1, #11
 8013d04:	4650      	mov	r0, sl
 8013d06:	f000 fdd1 	bl	80148ac <uxr_buffer_submessage_header>
 8013d0a:	8968      	ldrh	r0, [r5, #10]
 8013d0c:	2101      	movs	r1, #1
 8013d0e:	f005 f9cb 	bl	80190a8 <uxr_seq_num_add>
 8013d12:	892b      	ldrh	r3, [r5, #8]
 8013d14:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8013d18:	4602      	mov	r2, r0
 8013d1a:	9b04      	ldr	r3, [sp, #16]
 8013d1c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8013d20:	a90a      	add	r1, sp, #40	; 0x28
 8013d22:	4650      	mov	r0, sl
 8013d24:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8013d28:	f001 feba 	bl	8015aa0 <uxr_serialize_HEARTBEAT_Payload>
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	4611      	mov	r1, r2
 8013d30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013d32:	4640      	mov	r0, r8
 8013d34:	f000 fbf4 	bl	8014520 <uxr_stamp_session_header>
 8013d38:	4650      	mov	r0, sl
 8013d3a:	f7ff f9d5 	bl	80130e8 <ucdr_buffer_length>
 8013d3e:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8013d42:	4602      	mov	r2, r0
 8013d44:	a90c      	add	r1, sp, #48	; 0x30
 8013d46:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013d4a:	4444      	add	r4, r8
 8013d4c:	47a8      	blx	r5
 8013d4e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8013d52:	9903      	ldr	r1, [sp, #12]
 8013d54:	455a      	cmp	r2, fp
 8013d56:	f106 0601 	add.w	r6, r6, #1
 8013d5a:	eb73 0101 	sbcs.w	r1, r3, r1
 8013d5e:	b2f0      	uxtb	r0, r6
 8013d60:	db9c      	blt.n	8013c9c <listen_message_reliably+0x48>
 8013d62:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8013d66:	4283      	cmp	r3, r0
 8013d68:	d89e      	bhi.n	8013ca8 <listen_message_reliably+0x54>
 8013d6a:	9a03      	ldr	r2, [sp, #12]
 8013d6c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013d70:	429a      	cmp	r2, r3
 8013d72:	bf08      	it	eq
 8013d74:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8013d78:	d01e      	beq.n	8013db8 <listen_message_reliably+0x164>
 8013d7a:	ebab 0309 	sub.w	r3, fp, r9
 8013d7e:	9905      	ldr	r1, [sp, #20]
 8013d80:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	bf08      	it	eq
 8013d88:	2301      	moveq	r3, #1
 8013d8a:	4299      	cmp	r1, r3
 8013d8c:	bfa8      	it	ge
 8013d8e:	4619      	movge	r1, r3
 8013d90:	6894      	ldr	r4, [r2, #8]
 8013d92:	6810      	ldr	r0, [r2, #0]
 8013d94:	4689      	mov	r9, r1
 8013d96:	460b      	mov	r3, r1
 8013d98:	aa08      	add	r2, sp, #32
 8013d9a:	a907      	add	r1, sp, #28
 8013d9c:	47a0      	blx	r4
 8013d9e:	b968      	cbnz	r0, 8013dbc <listen_message_reliably+0x168>
 8013da0:	9b05      	ldr	r3, [sp, #20]
 8013da2:	eba3 0309 	sub.w	r3, r3, r9
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	9305      	str	r3, [sp, #20]
 8013daa:	f73f af5c 	bgt.w	8013c66 <listen_message_reliably+0x12>
 8013dae:	4604      	mov	r4, r0
 8013db0:	4620      	mov	r0, r4
 8013db2:	b01d      	add	sp, #116	; 0x74
 8013db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013db8:	9b05      	ldr	r3, [sp, #20]
 8013dba:	e7e0      	b.n	8013d7e <listen_message_reliably+0x12a>
 8013dbc:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8013dc0:	4604      	mov	r4, r0
 8013dc2:	a80c      	add	r0, sp, #48	; 0x30
 8013dc4:	f7ff f964 	bl	8013090 <ucdr_init_buffer>
 8013dc8:	2500      	movs	r5, #0
 8013dca:	f10d 031a 	add.w	r3, sp, #26
 8013dce:	aa06      	add	r2, sp, #24
 8013dd0:	a90c      	add	r1, sp, #48	; 0x30
 8013dd2:	4640      	mov	r0, r8
 8013dd4:	f88d 5018 	strb.w	r5, [sp, #24]
 8013dd8:	f000 fbb6 	bl	8014548 <uxr_read_session_header>
 8013ddc:	b918      	cbnz	r0, 8013de6 <listen_message_reliably+0x192>
 8013dde:	4620      	mov	r0, r4
 8013de0:	b01d      	add	sp, #116	; 0x74
 8013de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013de6:	4629      	mov	r1, r5
 8013de8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013dec:	f000 fc50 	bl	8014690 <uxr_stream_id_from_raw>
 8013df0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8013df4:	2d01      	cmp	r5, #1
 8013df6:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8013dfa:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8013dfe:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8013e02:	d04b      	beq.n	8013e9c <listen_message_reliably+0x248>
 8013e04:	2d02      	cmp	r5, #2
 8013e06:	d00f      	beq.n	8013e28 <listen_message_reliably+0x1d4>
 8013e08:	2d00      	cmp	r5, #0
 8013e0a:	d1e8      	bne.n	8013dde <listen_message_reliably+0x18a>
 8013e0c:	4629      	mov	r1, r5
 8013e0e:	4628      	mov	r0, r5
 8013e10:	f000 fc3e 	bl	8014690 <uxr_stream_id_from_raw>
 8013e14:	a90c      	add	r1, sp, #48	; 0x30
 8013e16:	4602      	mov	r2, r0
 8013e18:	4640      	mov	r0, r8
 8013e1a:	920a      	str	r2, [sp, #40]	; 0x28
 8013e1c:	f7ff fd92 	bl	8013944 <read_submessage_list>
 8013e20:	4620      	mov	r0, r4
 8013e22:	b01d      	add	sp, #116	; 0x74
 8013e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e28:	4631      	mov	r1, r6
 8013e2a:	f108 0008 	add.w	r0, r8, #8
 8013e2e:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8013e32:	f000 fd1b 	bl	801486c <uxr_get_input_reliable_stream>
 8013e36:	4607      	mov	r7, r0
 8013e38:	b338      	cbz	r0, 8013e8a <listen_message_reliably+0x236>
 8013e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013e3c:	9203      	str	r2, [sp, #12]
 8013e3e:	a80c      	add	r0, sp, #48	; 0x30
 8013e40:	f7ff f956 	bl	80130f0 <ucdr_buffer_remaining>
 8013e44:	4603      	mov	r3, r0
 8013e46:	f10d 0019 	add.w	r0, sp, #25
 8013e4a:	9000      	str	r0, [sp, #0]
 8013e4c:	9a03      	ldr	r2, [sp, #12]
 8013e4e:	4651      	mov	r1, sl
 8013e50:	4638      	mov	r0, r7
 8013e52:	f004 fb99 	bl	8018588 <uxr_receive_reliable_message>
 8013e56:	b1c0      	cbz	r0, 8013e8a <listen_message_reliably+0x236>
 8013e58:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013e5c:	b393      	cbz	r3, 8013ec4 <listen_message_reliably+0x270>
 8013e5e:	ad14      	add	r5, sp, #80	; 0x50
 8013e60:	f04f 0a02 	mov.w	sl, #2
 8013e64:	e00a      	b.n	8013e7c <listen_message_reliably+0x228>
 8013e66:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8013e6a:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 8013e6e:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8013e72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e74:	4629      	mov	r1, r5
 8013e76:	4640      	mov	r0, r8
 8013e78:	f7ff fd64 	bl	8013944 <read_submessage_list>
 8013e7c:	2204      	movs	r2, #4
 8013e7e:	4629      	mov	r1, r5
 8013e80:	4638      	mov	r0, r7
 8013e82:	f004 fc01 	bl	8018688 <uxr_next_input_reliable_buffer_available>
 8013e86:	2800      	cmp	r0, #0
 8013e88:	d1ed      	bne.n	8013e66 <listen_message_reliably+0x212>
 8013e8a:	4640      	mov	r0, r8
 8013e8c:	4632      	mov	r2, r6
 8013e8e:	4649      	mov	r1, r9
 8013e90:	f7ff fbd4 	bl	801363c <write_submessage_acknack.isra.0>
 8013e94:	4620      	mov	r0, r4
 8013e96:	b01d      	add	sp, #116	; 0x74
 8013e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e9c:	4631      	mov	r1, r6
 8013e9e:	f108 0008 	add.w	r0, r8, #8
 8013ea2:	f000 fcd9 	bl	8014858 <uxr_get_input_best_effort_stream>
 8013ea6:	2800      	cmp	r0, #0
 8013ea8:	d099      	beq.n	8013dde <listen_message_reliably+0x18a>
 8013eaa:	4651      	mov	r1, sl
 8013eac:	f004 fad8 	bl	8018460 <uxr_receive_best_effort_message>
 8013eb0:	2800      	cmp	r0, #0
 8013eb2:	d094      	beq.n	8013dde <listen_message_reliably+0x18a>
 8013eb4:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8013eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013eba:	a90c      	add	r1, sp, #48	; 0x30
 8013ebc:	4640      	mov	r0, r8
 8013ebe:	f7ff fd41 	bl	8013944 <read_submessage_list>
 8013ec2:	e78c      	b.n	8013dde <listen_message_reliably+0x18a>
 8013ec4:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 8013ec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013eca:	a90c      	add	r1, sp, #48	; 0x30
 8013ecc:	4640      	mov	r0, r8
 8013ece:	f7ff fd39 	bl	8013944 <read_submessage_list>
 8013ed2:	e7c4      	b.n	8013e5e <listen_message_reliably+0x20a>

08013ed4 <uxr_run_session_until_confirm_delivery>:
 8013ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ed8:	4606      	mov	r6, r0
 8013eda:	460d      	mov	r5, r1
 8013edc:	f000 fd2c 	bl	8014938 <uxr_millis>
 8013ee0:	4607      	mov	r7, r0
 8013ee2:	4630      	mov	r0, r6
 8013ee4:	f7ff fc70 	bl	80137c8 <uxr_flash_output_streams>
 8013ee8:	2d00      	cmp	r5, #0
 8013eea:	f106 0808 	add.w	r8, r6, #8
 8013eee:	bfa8      	it	ge
 8013ef0:	462c      	movge	r4, r5
 8013ef2:	da07      	bge.n	8013f04 <uxr_run_session_until_confirm_delivery+0x30>
 8013ef4:	e00e      	b.n	8013f14 <uxr_run_session_until_confirm_delivery+0x40>
 8013ef6:	f7ff fead 	bl	8013c54 <listen_message_reliably>
 8013efa:	f000 fd1d 	bl	8014938 <uxr_millis>
 8013efe:	1bc3      	subs	r3, r0, r7
 8013f00:	1aec      	subs	r4, r5, r3
 8013f02:	d407      	bmi.n	8013f14 <uxr_run_session_until_confirm_delivery+0x40>
 8013f04:	4640      	mov	r0, r8
 8013f06:	f000 fcbb 	bl	8014880 <uxr_output_streams_confirmed>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	4621      	mov	r1, r4
 8013f0e:	4630      	mov	r0, r6
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d0f0      	beq.n	8013ef6 <uxr_run_session_until_confirm_delivery+0x22>
 8013f14:	4640      	mov	r0, r8
 8013f16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f1a:	f000 bcb1 	b.w	8014880 <uxr_output_streams_confirmed>
 8013f1e:	bf00      	nop

08013f20 <uxr_run_session_until_all_status>:
 8013f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f24:	9c08      	ldr	r4, [sp, #32]
 8013f26:	4606      	mov	r6, r0
 8013f28:	460f      	mov	r7, r1
 8013f2a:	4691      	mov	r9, r2
 8013f2c:	461d      	mov	r5, r3
 8013f2e:	f7ff fc4b 	bl	80137c8 <uxr_flash_output_streams>
 8013f32:	b124      	cbz	r4, 8013f3e <uxr_run_session_until_all_status+0x1e>
 8013f34:	4622      	mov	r2, r4
 8013f36:	21ff      	movs	r1, #255	; 0xff
 8013f38:	4628      	mov	r0, r5
 8013f3a:	f006 fc43 	bl	801a7c4 <memset>
 8013f3e:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 8013f42:	67f4      	str	r4, [r6, #124]	; 0x7c
 8013f44:	f000 fcf8 	bl	8014938 <uxr_millis>
 8013f48:	3d01      	subs	r5, #1
 8013f4a:	f1a9 0902 	sub.w	r9, r9, #2
 8013f4e:	4680      	mov	r8, r0
 8013f50:	4639      	mov	r1, r7
 8013f52:	4630      	mov	r0, r6
 8013f54:	f7ff fe7e 	bl	8013c54 <listen_message_reliably>
 8013f58:	f000 fcee 	bl	8014938 <uxr_millis>
 8013f5c:	eba0 0008 	sub.w	r0, r0, r8
 8013f60:	1a39      	subs	r1, r7, r0
 8013f62:	b344      	cbz	r4, 8013fb6 <uxr_run_session_until_all_status+0x96>
 8013f64:	4628      	mov	r0, r5
 8013f66:	46ac      	mov	ip, r5
 8013f68:	2301      	movs	r3, #1
 8013f6a:	e002      	b.n	8013f72 <uxr_run_session_until_all_status+0x52>
 8013f6c:	42a3      	cmp	r3, r4
 8013f6e:	d20d      	bcs.n	8013f8c <uxr_run_session_until_all_status+0x6c>
 8013f70:	3301      	adds	r3, #1
 8013f72:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8013f76:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8013f7a:	d1f7      	bne.n	8013f6c <uxr_run_session_until_all_status+0x4c>
 8013f7c:	42a3      	cmp	r3, r4
 8013f7e:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8013f82:	d213      	bcs.n	8013fac <uxr_run_session_until_all_status+0x8c>
 8013f84:	2a00      	cmp	r2, #0
 8013f86:	d0f3      	beq.n	8013f70 <uxr_run_session_until_all_status+0x50>
 8013f88:	2900      	cmp	r1, #0
 8013f8a:	dce2      	bgt.n	8013f52 <uxr_run_session_until_all_status+0x32>
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	67f3      	str	r3, [r6, #124]	; 0x7c
 8013f90:	442c      	add	r4, r5
 8013f92:	e001      	b.n	8013f98 <uxr_run_session_until_all_status+0x78>
 8013f94:	2b01      	cmp	r3, #1
 8013f96:	d812      	bhi.n	8013fbe <uxr_run_session_until_all_status+0x9e>
 8013f98:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8013f9c:	4284      	cmp	r4, r0
 8013f9e:	d1f9      	bne.n	8013f94 <uxr_run_session_until_all_status+0x74>
 8013fa0:	2b01      	cmp	r3, #1
 8013fa2:	bf8c      	ite	hi
 8013fa4:	2000      	movhi	r0, #0
 8013fa6:	2001      	movls	r0, #1
 8013fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fac:	2900      	cmp	r1, #0
 8013fae:	dded      	ble.n	8013f8c <uxr_run_session_until_all_status+0x6c>
 8013fb0:	2a00      	cmp	r2, #0
 8013fb2:	d1ce      	bne.n	8013f52 <uxr_run_session_until_all_status+0x32>
 8013fb4:	e7ea      	b.n	8013f8c <uxr_run_session_until_all_status+0x6c>
 8013fb6:	67f4      	str	r4, [r6, #124]	; 0x7c
 8013fb8:	2001      	movs	r0, #1
 8013fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013fbe:	2000      	movs	r0, #0
 8013fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013fc4 <wait_session_status>:
 8013fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fc8:	4604      	mov	r4, r0
 8013fca:	b09d      	sub	sp, #116	; 0x74
 8013fcc:	20ff      	movs	r0, #255	; 0xff
 8013fce:	7160      	strb	r0, [r4, #5]
 8013fd0:	9303      	str	r3, [sp, #12]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	f000 80b6 	beq.w	8014144 <wait_session_status+0x180>
 8013fd8:	468a      	mov	sl, r1
 8013fda:	4691      	mov	r9, r2
 8013fdc:	f04f 0b00 	mov.w	fp, #0
 8013fe0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013fe2:	464a      	mov	r2, r9
 8013fe4:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013fe8:	4651      	mov	r1, sl
 8013fea:	47a8      	blx	r5
 8013fec:	f000 fca4 	bl	8014938 <uxr_millis>
 8013ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013ff4:	4605      	mov	r5, r0
 8013ff6:	e009      	b.n	801400c <wait_session_status+0x48>
 8013ff8:	f000 fc9e 	bl	8014938 <uxr_millis>
 8013ffc:	1b40      	subs	r0, r0, r5
 8013ffe:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8014002:	2b00      	cmp	r3, #0
 8014004:	dd40      	ble.n	8014088 <wait_session_status+0xc4>
 8014006:	7960      	ldrb	r0, [r4, #5]
 8014008:	28ff      	cmp	r0, #255	; 0xff
 801400a:	d145      	bne.n	8014098 <wait_session_status+0xd4>
 801400c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801400e:	a908      	add	r1, sp, #32
 8014010:	6896      	ldr	r6, [r2, #8]
 8014012:	6810      	ldr	r0, [r2, #0]
 8014014:	aa09      	add	r2, sp, #36	; 0x24
 8014016:	47b0      	blx	r6
 8014018:	2800      	cmp	r0, #0
 801401a:	d0ed      	beq.n	8013ff8 <wait_session_status+0x34>
 801401c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8014020:	a80c      	add	r0, sp, #48	; 0x30
 8014022:	f7ff f835 	bl	8013090 <ucdr_init_buffer>
 8014026:	2600      	movs	r6, #0
 8014028:	f10d 031e 	add.w	r3, sp, #30
 801402c:	aa07      	add	r2, sp, #28
 801402e:	a90c      	add	r1, sp, #48	; 0x30
 8014030:	4620      	mov	r0, r4
 8014032:	f88d 601c 	strb.w	r6, [sp, #28]
 8014036:	f000 fa87 	bl	8014548 <uxr_read_session_header>
 801403a:	2800      	cmp	r0, #0
 801403c:	d0dc      	beq.n	8013ff8 <wait_session_status+0x34>
 801403e:	4631      	mov	r1, r6
 8014040:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8014044:	f000 fb24 	bl	8014690 <uxr_stream_id_from_raw>
 8014048:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801404c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8014050:	9302      	str	r3, [sp, #8]
 8014052:	2f01      	cmp	r7, #1
 8014054:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8014058:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801405c:	d05c      	beq.n	8014118 <wait_session_status+0x154>
 801405e:	2f02      	cmp	r7, #2
 8014060:	d020      	beq.n	80140a4 <wait_session_status+0xe0>
 8014062:	2f00      	cmp	r7, #0
 8014064:	d1c8      	bne.n	8013ff8 <wait_session_status+0x34>
 8014066:	4639      	mov	r1, r7
 8014068:	4638      	mov	r0, r7
 801406a:	f000 fb11 	bl	8014690 <uxr_stream_id_from_raw>
 801406e:	a90c      	add	r1, sp, #48	; 0x30
 8014070:	4602      	mov	r2, r0
 8014072:	900b      	str	r0, [sp, #44]	; 0x2c
 8014074:	4620      	mov	r0, r4
 8014076:	f7ff fc65 	bl	8013944 <read_submessage_list>
 801407a:	f000 fc5d 	bl	8014938 <uxr_millis>
 801407e:	1b40      	subs	r0, r0, r5
 8014080:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8014084:	2b00      	cmp	r3, #0
 8014086:	dcbe      	bgt.n	8014006 <wait_session_status+0x42>
 8014088:	9b03      	ldr	r3, [sp, #12]
 801408a:	7960      	ldrb	r0, [r4, #5]
 801408c:	f10b 0b01 	add.w	fp, fp, #1
 8014090:	455b      	cmp	r3, fp
 8014092:	d001      	beq.n	8014098 <wait_session_status+0xd4>
 8014094:	28ff      	cmp	r0, #255	; 0xff
 8014096:	d0a3      	beq.n	8013fe0 <wait_session_status+0x1c>
 8014098:	38ff      	subs	r0, #255	; 0xff
 801409a:	bf18      	it	ne
 801409c:	2001      	movne	r0, #1
 801409e:	b01d      	add	sp, #116	; 0x74
 80140a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140a4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80140a8:	9304      	str	r3, [sp, #16]
 80140aa:	4631      	mov	r1, r6
 80140ac:	f104 0008 	add.w	r0, r4, #8
 80140b0:	f000 fbdc 	bl	801486c <uxr_get_input_reliable_stream>
 80140b4:	4680      	mov	r8, r0
 80140b6:	b348      	cbz	r0, 801410c <wait_session_status+0x148>
 80140b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80140ba:	9205      	str	r2, [sp, #20]
 80140bc:	a80c      	add	r0, sp, #48	; 0x30
 80140be:	f7ff f817 	bl	80130f0 <ucdr_buffer_remaining>
 80140c2:	4603      	mov	r3, r0
 80140c4:	f10d 001d 	add.w	r0, sp, #29
 80140c8:	9000      	str	r0, [sp, #0]
 80140ca:	9a05      	ldr	r2, [sp, #20]
 80140cc:	9902      	ldr	r1, [sp, #8]
 80140ce:	4640      	mov	r0, r8
 80140d0:	f004 fa5a 	bl	8018588 <uxr_receive_reliable_message>
 80140d4:	b1d0      	cbz	r0, 801410c <wait_session_status+0x148>
 80140d6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d03a      	beq.n	8014154 <wait_session_status+0x190>
 80140de:	9f04      	ldr	r7, [sp, #16]
 80140e0:	e00a      	b.n	80140f8 <wait_session_status+0x134>
 80140e2:	f04f 0302 	mov.w	r3, #2
 80140e6:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 80140ea:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 80140ee:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 80140f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80140f4:	f7ff fc26 	bl	8013944 <read_submessage_list>
 80140f8:	a914      	add	r1, sp, #80	; 0x50
 80140fa:	2204      	movs	r2, #4
 80140fc:	4640      	mov	r0, r8
 80140fe:	f004 fac3 	bl	8018688 <uxr_next_input_reliable_buffer_available>
 8014102:	4603      	mov	r3, r0
 8014104:	a914      	add	r1, sp, #80	; 0x50
 8014106:	4620      	mov	r0, r4
 8014108:	2b00      	cmp	r3, #0
 801410a:	d1ea      	bne.n	80140e2 <wait_session_status+0x11e>
 801410c:	9904      	ldr	r1, [sp, #16]
 801410e:	4632      	mov	r2, r6
 8014110:	4620      	mov	r0, r4
 8014112:	f7ff fa93 	bl	801363c <write_submessage_acknack.isra.0>
 8014116:	e76f      	b.n	8013ff8 <wait_session_status+0x34>
 8014118:	4631      	mov	r1, r6
 801411a:	f104 0008 	add.w	r0, r4, #8
 801411e:	f000 fb9b 	bl	8014858 <uxr_get_input_best_effort_stream>
 8014122:	2800      	cmp	r0, #0
 8014124:	f43f af68 	beq.w	8013ff8 <wait_session_status+0x34>
 8014128:	9902      	ldr	r1, [sp, #8]
 801412a:	f004 f999 	bl	8018460 <uxr_receive_best_effort_message>
 801412e:	2800      	cmp	r0, #0
 8014130:	f43f af62 	beq.w	8013ff8 <wait_session_status+0x34>
 8014134:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8014138:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801413a:	a90c      	add	r1, sp, #48	; 0x30
 801413c:	4620      	mov	r0, r4
 801413e:	f7ff fc01 	bl	8013944 <read_submessage_list>
 8014142:	e759      	b.n	8013ff8 <wait_session_status+0x34>
 8014144:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014146:	e9d3 0400 	ldrd	r0, r4, [r3]
 801414a:	47a0      	blx	r4
 801414c:	2001      	movs	r0, #1
 801414e:	b01d      	add	sp, #116	; 0x74
 8014150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014154:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8014158:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801415a:	a90c      	add	r1, sp, #48	; 0x30
 801415c:	4620      	mov	r0, r4
 801415e:	f7ff fbf1 	bl	8013944 <read_submessage_list>
 8014162:	e7bc      	b.n	80140de <wait_session_status+0x11a>

08014164 <uxr_delete_session_retries>:
 8014164:	b530      	push	{r4, r5, lr}
 8014166:	b08f      	sub	sp, #60	; 0x3c
 8014168:	4604      	mov	r4, r0
 801416a:	460d      	mov	r5, r1
 801416c:	f000 fa2e 	bl	80145cc <uxr_session_header_offset>
 8014170:	2300      	movs	r3, #0
 8014172:	2210      	movs	r2, #16
 8014174:	9000      	str	r0, [sp, #0]
 8014176:	a902      	add	r1, sp, #8
 8014178:	a806      	add	r0, sp, #24
 801417a:	f7fe ff77 	bl	801306c <ucdr_init_buffer_origin_offset>
 801417e:	a906      	add	r1, sp, #24
 8014180:	4620      	mov	r0, r4
 8014182:	f000 f973 	bl	801446c <uxr_buffer_delete_session>
 8014186:	2200      	movs	r2, #0
 8014188:	4611      	mov	r1, r2
 801418a:	9b06      	ldr	r3, [sp, #24]
 801418c:	4620      	mov	r0, r4
 801418e:	f000 f9c7 	bl	8014520 <uxr_stamp_session_header>
 8014192:	a806      	add	r0, sp, #24
 8014194:	f7fe ffa8 	bl	80130e8 <ucdr_buffer_length>
 8014198:	462b      	mov	r3, r5
 801419a:	4602      	mov	r2, r0
 801419c:	a902      	add	r1, sp, #8
 801419e:	4620      	mov	r0, r4
 80141a0:	f7ff ff10 	bl	8013fc4 <wait_session_status>
 80141a4:	b118      	cbz	r0, 80141ae <uxr_delete_session_retries+0x4a>
 80141a6:	7960      	ldrb	r0, [r4, #5]
 80141a8:	fab0 f080 	clz	r0, r0
 80141ac:	0940      	lsrs	r0, r0, #5
 80141ae:	b00f      	add	sp, #60	; 0x3c
 80141b0:	bd30      	pop	{r4, r5, pc}
 80141b2:	bf00      	nop

080141b4 <uxr_create_session>:
 80141b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141b8:	f100 0b08 	add.w	fp, r0, #8
 80141bc:	b0ab      	sub	sp, #172	; 0xac
 80141be:	4604      	mov	r4, r0
 80141c0:	4658      	mov	r0, fp
 80141c2:	f000 fa99 	bl	80146f8 <uxr_reset_stream_storage>
 80141c6:	4620      	mov	r0, r4
 80141c8:	f000 fa00 	bl	80145cc <uxr_session_header_offset>
 80141cc:	2300      	movs	r3, #0
 80141ce:	9000      	str	r0, [sp, #0]
 80141d0:	221c      	movs	r2, #28
 80141d2:	a90b      	add	r1, sp, #44	; 0x2c
 80141d4:	a812      	add	r0, sp, #72	; 0x48
 80141d6:	f7fe ff49 	bl	801306c <ucdr_init_buffer_origin_offset>
 80141da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80141dc:	8a1a      	ldrh	r2, [r3, #16]
 80141de:	3a04      	subs	r2, #4
 80141e0:	b292      	uxth	r2, r2
 80141e2:	a912      	add	r1, sp, #72	; 0x48
 80141e4:	4620      	mov	r0, r4
 80141e6:	f000 f917 	bl	8014418 <uxr_buffer_create_session>
 80141ea:	9912      	ldr	r1, [sp, #72]	; 0x48
 80141ec:	4620      	mov	r0, r4
 80141ee:	f000 f983 	bl	80144f8 <uxr_stamp_create_session_header>
 80141f2:	a812      	add	r0, sp, #72	; 0x48
 80141f4:	f7fe ff78 	bl	80130e8 <ucdr_buffer_length>
 80141f8:	23ff      	movs	r3, #255	; 0xff
 80141fa:	7163      	strb	r3, [r4, #5]
 80141fc:	230a      	movs	r3, #10
 80141fe:	46da      	mov	sl, fp
 8014200:	9303      	str	r3, [sp, #12]
 8014202:	4683      	mov	fp, r0
 8014204:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014206:	465a      	mov	r2, fp
 8014208:	e9d3 0500 	ldrd	r0, r5, [r3]
 801420c:	a90b      	add	r1, sp, #44	; 0x2c
 801420e:	47a8      	blx	r5
 8014210:	f000 fb92 	bl	8014938 <uxr_millis>
 8014214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014218:	4605      	mov	r5, r0
 801421a:	e009      	b.n	8014230 <uxr_create_session+0x7c>
 801421c:	f000 fb8c 	bl	8014938 <uxr_millis>
 8014220:	1b40      	subs	r0, r0, r5
 8014222:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8014226:	2b00      	cmp	r3, #0
 8014228:	7962      	ldrb	r2, [r4, #5]
 801422a:	dd38      	ble.n	801429e <uxr_create_session+0xea>
 801422c:	2aff      	cmp	r2, #255	; 0xff
 801422e:	d13c      	bne.n	80142aa <uxr_create_session+0xf6>
 8014230:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8014232:	a907      	add	r1, sp, #28
 8014234:	6896      	ldr	r6, [r2, #8]
 8014236:	6810      	ldr	r0, [r2, #0]
 8014238:	aa08      	add	r2, sp, #32
 801423a:	47b0      	blx	r6
 801423c:	2800      	cmp	r0, #0
 801423e:	d0ed      	beq.n	801421c <uxr_create_session+0x68>
 8014240:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8014244:	a81a      	add	r0, sp, #104	; 0x68
 8014246:	f7fe ff23 	bl	8013090 <ucdr_init_buffer>
 801424a:	2600      	movs	r6, #0
 801424c:	f10d 031a 	add.w	r3, sp, #26
 8014250:	aa06      	add	r2, sp, #24
 8014252:	a91a      	add	r1, sp, #104	; 0x68
 8014254:	4620      	mov	r0, r4
 8014256:	f88d 6018 	strb.w	r6, [sp, #24]
 801425a:	f000 f975 	bl	8014548 <uxr_read_session_header>
 801425e:	2800      	cmp	r0, #0
 8014260:	d0dc      	beq.n	801421c <uxr_create_session+0x68>
 8014262:	4631      	mov	r1, r6
 8014264:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014268:	f000 fa12 	bl	8014690 <uxr_stream_id_from_raw>
 801426c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8014270:	2e01      	cmp	r6, #1
 8014272:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8014276:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 801427a:	f3c0 2707 	ubfx	r7, r0, #8, #8
 801427e:	d053      	beq.n	8014328 <uxr_create_session+0x174>
 8014280:	2e02      	cmp	r6, #2
 8014282:	d018      	beq.n	80142b6 <uxr_create_session+0x102>
 8014284:	2e00      	cmp	r6, #0
 8014286:	d1c9      	bne.n	801421c <uxr_create_session+0x68>
 8014288:	4631      	mov	r1, r6
 801428a:	4630      	mov	r0, r6
 801428c:	f000 fa00 	bl	8014690 <uxr_stream_id_from_raw>
 8014290:	a91a      	add	r1, sp, #104	; 0x68
 8014292:	4602      	mov	r2, r0
 8014294:	900a      	str	r0, [sp, #40]	; 0x28
 8014296:	4620      	mov	r0, r4
 8014298:	f7ff fb54 	bl	8013944 <read_submessage_list>
 801429c:	e7be      	b.n	801421c <uxr_create_session+0x68>
 801429e:	9b03      	ldr	r3, [sp, #12]
 80142a0:	3b01      	subs	r3, #1
 80142a2:	9303      	str	r3, [sp, #12]
 80142a4:	d001      	beq.n	80142aa <uxr_create_session+0xf6>
 80142a6:	2aff      	cmp	r2, #255	; 0xff
 80142a8:	d0ac      	beq.n	8014204 <uxr_create_session+0x50>
 80142aa:	2a00      	cmp	r2, #0
 80142ac:	d051      	beq.n	8014352 <uxr_create_session+0x19e>
 80142ae:	2000      	movs	r0, #0
 80142b0:	b02b      	add	sp, #172	; 0xac
 80142b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142b6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80142ba:	9304      	str	r3, [sp, #16]
 80142bc:	4639      	mov	r1, r7
 80142be:	4650      	mov	r0, sl
 80142c0:	f000 fad4 	bl	801486c <uxr_get_input_reliable_stream>
 80142c4:	4680      	mov	r8, r0
 80142c6:	b348      	cbz	r0, 801431c <uxr_create_session+0x168>
 80142c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80142ca:	9205      	str	r2, [sp, #20]
 80142cc:	a81a      	add	r0, sp, #104	; 0x68
 80142ce:	f7fe ff0f 	bl	80130f0 <ucdr_buffer_remaining>
 80142d2:	4603      	mov	r3, r0
 80142d4:	f10d 0019 	add.w	r0, sp, #25
 80142d8:	9000      	str	r0, [sp, #0]
 80142da:	9a05      	ldr	r2, [sp, #20]
 80142dc:	4649      	mov	r1, r9
 80142de:	4640      	mov	r0, r8
 80142e0:	f004 f952 	bl	8018588 <uxr_receive_reliable_message>
 80142e4:	b1d0      	cbz	r0, 801431c <uxr_create_session+0x168>
 80142e6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80142ea:	2b00      	cmp	r3, #0
 80142ec:	d038      	beq.n	8014360 <uxr_create_session+0x1ac>
 80142ee:	9e04      	ldr	r6, [sp, #16]
 80142f0:	e00a      	b.n	8014308 <uxr_create_session+0x154>
 80142f2:	f04f 0302 	mov.w	r3, #2
 80142f6:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 80142fa:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 80142fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014302:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014304:	f7ff fb1e 	bl	8013944 <read_submessage_list>
 8014308:	a922      	add	r1, sp, #136	; 0x88
 801430a:	2204      	movs	r2, #4
 801430c:	4640      	mov	r0, r8
 801430e:	f004 f9bb 	bl	8018688 <uxr_next_input_reliable_buffer_available>
 8014312:	4603      	mov	r3, r0
 8014314:	a922      	add	r1, sp, #136	; 0x88
 8014316:	4620      	mov	r0, r4
 8014318:	2b00      	cmp	r3, #0
 801431a:	d1ea      	bne.n	80142f2 <uxr_create_session+0x13e>
 801431c:	9904      	ldr	r1, [sp, #16]
 801431e:	463a      	mov	r2, r7
 8014320:	4620      	mov	r0, r4
 8014322:	f7ff f98b 	bl	801363c <write_submessage_acknack.isra.0>
 8014326:	e779      	b.n	801421c <uxr_create_session+0x68>
 8014328:	4639      	mov	r1, r7
 801432a:	4650      	mov	r0, sl
 801432c:	f000 fa94 	bl	8014858 <uxr_get_input_best_effort_stream>
 8014330:	2800      	cmp	r0, #0
 8014332:	f43f af73 	beq.w	801421c <uxr_create_session+0x68>
 8014336:	4649      	mov	r1, r9
 8014338:	f004 f892 	bl	8018460 <uxr_receive_best_effort_message>
 801433c:	2800      	cmp	r0, #0
 801433e:	f43f af6d 	beq.w	801421c <uxr_create_session+0x68>
 8014342:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8014346:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014348:	a91a      	add	r1, sp, #104	; 0x68
 801434a:	4620      	mov	r0, r4
 801434c:	f7ff fafa 	bl	8013944 <read_submessage_list>
 8014350:	e764      	b.n	801421c <uxr_create_session+0x68>
 8014352:	4650      	mov	r0, sl
 8014354:	f000 f9d0 	bl	80146f8 <uxr_reset_stream_storage>
 8014358:	2001      	movs	r0, #1
 801435a:	b02b      	add	sp, #172	; 0xac
 801435c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014360:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8014364:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014366:	a91a      	add	r1, sp, #104	; 0x68
 8014368:	4620      	mov	r0, r4
 801436a:	f7ff faeb 	bl	8013944 <read_submessage_list>
 801436e:	e7be      	b.n	80142ee <uxr_create_session+0x13a>

08014370 <uxr_prepare_stream_to_write_submessage>:
 8014370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014374:	b082      	sub	sp, #8
 8014376:	4682      	mov	sl, r0
 8014378:	4610      	mov	r0, r2
 801437a:	4615      	mov	r5, r2
 801437c:	461e      	mov	r6, r3
 801437e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8014382:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8014386:	9101      	str	r1, [sp, #4]
 8014388:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801438c:	f000 face 	bl	801492c <uxr_submessage_padding>
 8014390:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014394:	f105 0904 	add.w	r9, r5, #4
 8014398:	2b01      	cmp	r3, #1
 801439a:	4481      	add	r9, r0
 801439c:	d01d      	beq.n	80143da <uxr_prepare_stream_to_write_submessage+0x6a>
 801439e:	2b02      	cmp	r3, #2
 80143a0:	d116      	bne.n	80143d0 <uxr_prepare_stream_to_write_submessage+0x60>
 80143a2:	4621      	mov	r1, r4
 80143a4:	f10a 0008 	add.w	r0, sl, #8
 80143a8:	f000 fa4c 	bl	8014844 <uxr_get_output_reliable_stream>
 80143ac:	4604      	mov	r4, r0
 80143ae:	b158      	cbz	r0, 80143c8 <uxr_prepare_stream_to_write_submessage+0x58>
 80143b0:	4649      	mov	r1, r9
 80143b2:	4632      	mov	r2, r6
 80143b4:	f004 fb24 	bl	8018a00 <uxr_prepare_reliable_buffer_to_write>
 80143b8:	4604      	mov	r4, r0
 80143ba:	b12c      	cbz	r4, 80143c8 <uxr_prepare_stream_to_write_submessage+0x58>
 80143bc:	4643      	mov	r3, r8
 80143be:	b2aa      	uxth	r2, r5
 80143c0:	4639      	mov	r1, r7
 80143c2:	4630      	mov	r0, r6
 80143c4:	f000 fa72 	bl	80148ac <uxr_buffer_submessage_header>
 80143c8:	4620      	mov	r0, r4
 80143ca:	b002      	add	sp, #8
 80143cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143d0:	2400      	movs	r4, #0
 80143d2:	4620      	mov	r0, r4
 80143d4:	b002      	add	sp, #8
 80143d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143da:	4621      	mov	r1, r4
 80143dc:	f10a 0008 	add.w	r0, sl, #8
 80143e0:	f000 fa28 	bl	8014834 <uxr_get_output_best_effort_stream>
 80143e4:	4604      	mov	r4, r0
 80143e6:	2800      	cmp	r0, #0
 80143e8:	d0ee      	beq.n	80143c8 <uxr_prepare_stream_to_write_submessage+0x58>
 80143ea:	4649      	mov	r1, r9
 80143ec:	4632      	mov	r2, r6
 80143ee:	f004 fa37 	bl	8018860 <uxr_prepare_best_effort_buffer_to_write>
 80143f2:	4604      	mov	r4, r0
 80143f4:	e7e1      	b.n	80143ba <uxr_prepare_stream_to_write_submessage+0x4a>
 80143f6:	bf00      	nop

080143f8 <uxr_init_session_info>:
 80143f8:	0e13      	lsrs	r3, r2, #24
 80143fa:	7043      	strb	r3, [r0, #1]
 80143fc:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8014400:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014404:	7001      	strb	r1, [r0, #0]
 8014406:	70c3      	strb	r3, [r0, #3]
 8014408:	2109      	movs	r1, #9
 801440a:	23ff      	movs	r3, #255	; 0xff
 801440c:	f880 c002 	strb.w	ip, [r0, #2]
 8014410:	7102      	strb	r2, [r0, #4]
 8014412:	80c1      	strh	r1, [r0, #6]
 8014414:	7143      	strb	r3, [r0, #5]
 8014416:	4770      	bx	lr

08014418 <uxr_buffer_create_session>:
 8014418:	b530      	push	{r4, r5, lr}
 801441a:	b089      	sub	sp, #36	; 0x24
 801441c:	2300      	movs	r3, #0
 801441e:	4d12      	ldr	r5, [pc, #72]	; (8014468 <uxr_buffer_create_session+0x50>)
 8014420:	9307      	str	r3, [sp, #28]
 8014422:	f8ad 201c 	strh.w	r2, [sp, #28]
 8014426:	2201      	movs	r2, #1
 8014428:	9301      	str	r3, [sp, #4]
 801442a:	80c2      	strh	r2, [r0, #6]
 801442c:	f88d 2004 	strb.w	r2, [sp, #4]
 8014430:	682a      	ldr	r2, [r5, #0]
 8014432:	9200      	str	r2, [sp, #0]
 8014434:	88aa      	ldrh	r2, [r5, #4]
 8014436:	f8ad 2006 	strh.w	r2, [sp, #6]
 801443a:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801443e:	9202      	str	r2, [sp, #8]
 8014440:	460c      	mov	r4, r1
 8014442:	7802      	ldrb	r2, [r0, #0]
 8014444:	9303      	str	r3, [sp, #12]
 8014446:	4619      	mov	r1, r3
 8014448:	f88d 200c 	strb.w	r2, [sp, #12]
 801444c:	4620      	mov	r0, r4
 801444e:	2210      	movs	r2, #16
 8014450:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8014454:	9306      	str	r3, [sp, #24]
 8014456:	f000 fa29 	bl	80148ac <uxr_buffer_submessage_header>
 801445a:	4669      	mov	r1, sp
 801445c:	4620      	mov	r0, r4
 801445e:	f001 f981 	bl	8015764 <uxr_serialize_CREATE_CLIENT_Payload>
 8014462:	b009      	add	sp, #36	; 0x24
 8014464:	bd30      	pop	{r4, r5, pc}
 8014466:	bf00      	nop
 8014468:	0801be94 	.word	0x0801be94

0801446c <uxr_buffer_delete_session>:
 801446c:	b510      	push	{r4, lr}
 801446e:	4b0c      	ldr	r3, [pc, #48]	; (80144a0 <uxr_buffer_delete_session+0x34>)
 8014470:	b082      	sub	sp, #8
 8014472:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 8014476:	f8ad c006 	strh.w	ip, [sp, #6]
 801447a:	460c      	mov	r4, r1
 801447c:	2202      	movs	r2, #2
 801447e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014482:	80c2      	strh	r2, [r0, #6]
 8014484:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014488:	2204      	movs	r2, #4
 801448a:	2300      	movs	r3, #0
 801448c:	2103      	movs	r1, #3
 801448e:	4620      	mov	r0, r4
 8014490:	f000 fa0c 	bl	80148ac <uxr_buffer_submessage_header>
 8014494:	a901      	add	r1, sp, #4
 8014496:	4620      	mov	r0, r4
 8014498:	f001 fa0a 	bl	80158b0 <uxr_serialize_DELETE_Payload>
 801449c:	b002      	add	sp, #8
 801449e:	bd10      	pop	{r4, pc}
 80144a0:	0801be94 	.word	0x0801be94

080144a4 <uxr_read_create_session_status>:
 80144a4:	b510      	push	{r4, lr}
 80144a6:	b088      	sub	sp, #32
 80144a8:	4604      	mov	r4, r0
 80144aa:	4608      	mov	r0, r1
 80144ac:	a901      	add	r1, sp, #4
 80144ae:	f001 fa0f 	bl	80158d0 <uxr_deserialize_STATUS_AGENT_Payload>
 80144b2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80144b6:	7163      	strb	r3, [r4, #5]
 80144b8:	b008      	add	sp, #32
 80144ba:	bd10      	pop	{r4, pc}

080144bc <uxr_read_delete_session_status>:
 80144bc:	b510      	push	{r4, lr}
 80144be:	4604      	mov	r4, r0
 80144c0:	b084      	sub	sp, #16
 80144c2:	4608      	mov	r0, r1
 80144c4:	a902      	add	r1, sp, #8
 80144c6:	f001 fa33 	bl	8015930 <uxr_deserialize_STATUS_Payload>
 80144ca:	88e3      	ldrh	r3, [r4, #6]
 80144cc:	2b02      	cmp	r3, #2
 80144ce:	d001      	beq.n	80144d4 <uxr_read_delete_session_status+0x18>
 80144d0:	b004      	add	sp, #16
 80144d2:	bd10      	pop	{r4, pc}
 80144d4:	f10d 000a 	add.w	r0, sp, #10
 80144d8:	f7ff f836 	bl	8013548 <uxr_object_id_from_raw>
 80144dc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80144e0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80144e4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80144e8:	b29b      	uxth	r3, r3
 80144ea:	2b02      	cmp	r3, #2
 80144ec:	bf04      	itt	eq
 80144ee:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 80144f2:	7163      	strbeq	r3, [r4, #5]
 80144f4:	b004      	add	sp, #16
 80144f6:	bd10      	pop	{r4, pc}

080144f8 <uxr_stamp_create_session_header>:
 80144f8:	b510      	push	{r4, lr}
 80144fa:	2208      	movs	r2, #8
 80144fc:	b08a      	sub	sp, #40	; 0x28
 80144fe:	4604      	mov	r4, r0
 8014500:	eb0d 0002 	add.w	r0, sp, r2
 8014504:	f7fe fdc4 	bl	8013090 <ucdr_init_buffer>
 8014508:	f814 1b01 	ldrb.w	r1, [r4], #1
 801450c:	9400      	str	r4, [sp, #0]
 801450e:	2300      	movs	r3, #0
 8014510:	461a      	mov	r2, r3
 8014512:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8014516:	a802      	add	r0, sp, #8
 8014518:	f000 fbc2 	bl	8014ca0 <uxr_serialize_message_header>
 801451c:	b00a      	add	sp, #40	; 0x28
 801451e:	bd10      	pop	{r4, pc}

08014520 <uxr_stamp_session_header>:
 8014520:	b530      	push	{r4, r5, lr}
 8014522:	b08d      	sub	sp, #52	; 0x34
 8014524:	4604      	mov	r4, r0
 8014526:	460d      	mov	r5, r1
 8014528:	9203      	str	r2, [sp, #12]
 801452a:	4619      	mov	r1, r3
 801452c:	a804      	add	r0, sp, #16
 801452e:	2208      	movs	r2, #8
 8014530:	f7fe fdae 	bl	8013090 <ucdr_init_buffer>
 8014534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014538:	9b03      	ldr	r3, [sp, #12]
 801453a:	9400      	str	r4, [sp, #0]
 801453c:	462a      	mov	r2, r5
 801453e:	a804      	add	r0, sp, #16
 8014540:	f000 fbae 	bl	8014ca0 <uxr_serialize_message_header>
 8014544:	b00d      	add	sp, #52	; 0x34
 8014546:	bd30      	pop	{r4, r5, pc}

08014548 <uxr_read_session_header>:
 8014548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801454c:	4607      	mov	r7, r0
 801454e:	b084      	sub	sp, #16
 8014550:	4608      	mov	r0, r1
 8014552:	460c      	mov	r4, r1
 8014554:	4615      	mov	r5, r2
 8014556:	461e      	mov	r6, r3
 8014558:	f7fe fdca 	bl	80130f0 <ucdr_buffer_remaining>
 801455c:	2808      	cmp	r0, #8
 801455e:	d803      	bhi.n	8014568 <uxr_read_session_header+0x20>
 8014560:	2000      	movs	r0, #0
 8014562:	b004      	add	sp, #16
 8014564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014568:	f10d 080c 	add.w	r8, sp, #12
 801456c:	4633      	mov	r3, r6
 801456e:	462a      	mov	r2, r5
 8014570:	f8cd 8000 	str.w	r8, [sp]
 8014574:	4620      	mov	r0, r4
 8014576:	f10d 010b 	add.w	r1, sp, #11
 801457a:	f000 fbaf 	bl	8014cdc <uxr_deserialize_message_header>
 801457e:	783a      	ldrb	r2, [r7, #0]
 8014580:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8014584:	4293      	cmp	r3, r2
 8014586:	d1eb      	bne.n	8014560 <uxr_read_session_header+0x18>
 8014588:	061b      	lsls	r3, r3, #24
 801458a:	d41c      	bmi.n	80145c6 <uxr_read_session_header+0x7e>
 801458c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8014590:	787b      	ldrb	r3, [r7, #1]
 8014592:	429a      	cmp	r2, r3
 8014594:	d003      	beq.n	801459e <uxr_read_session_header+0x56>
 8014596:	2001      	movs	r0, #1
 8014598:	f080 0001 	eor.w	r0, r0, #1
 801459c:	e7e1      	b.n	8014562 <uxr_read_session_header+0x1a>
 801459e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80145a2:	78bb      	ldrb	r3, [r7, #2]
 80145a4:	429a      	cmp	r2, r3
 80145a6:	f107 0102 	add.w	r1, r7, #2
 80145aa:	d1f4      	bne.n	8014596 <uxr_read_session_header+0x4e>
 80145ac:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80145b0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d1ee      	bne.n	8014596 <uxr_read_session_header+0x4e>
 80145b8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80145bc:	784b      	ldrb	r3, [r1, #1]
 80145be:	429a      	cmp	r2, r3
 80145c0:	d1e9      	bne.n	8014596 <uxr_read_session_header+0x4e>
 80145c2:	2000      	movs	r0, #0
 80145c4:	e7e8      	b.n	8014598 <uxr_read_session_header+0x50>
 80145c6:	2001      	movs	r0, #1
 80145c8:	e7cb      	b.n	8014562 <uxr_read_session_header+0x1a>
 80145ca:	bf00      	nop

080145cc <uxr_session_header_offset>:
 80145cc:	f990 3000 	ldrsb.w	r3, [r0]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	bfac      	ite	ge
 80145d4:	2008      	movge	r0, #8
 80145d6:	2004      	movlt	r0, #4
 80145d8:	4770      	bx	lr
 80145da:	bf00      	nop

080145dc <uxr_init_base_object_request>:
 80145dc:	b510      	push	{r4, lr}
 80145de:	88c3      	ldrh	r3, [r0, #6]
 80145e0:	b082      	sub	sp, #8
 80145e2:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 80145e6:	9101      	str	r1, [sp, #4]
 80145e8:	f1a3 010a 	sub.w	r1, r3, #10
 80145ec:	b289      	uxth	r1, r1
 80145ee:	42a1      	cmp	r1, r4
 80145f0:	d80e      	bhi.n	8014610 <uxr_init_base_object_request+0x34>
 80145f2:	3301      	adds	r3, #1
 80145f4:	b29c      	uxth	r4, r3
 80145f6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80145fa:	b2db      	uxtb	r3, r3
 80145fc:	80c4      	strh	r4, [r0, #6]
 80145fe:	9801      	ldr	r0, [sp, #4]
 8014600:	7011      	strb	r1, [r2, #0]
 8014602:	7053      	strb	r3, [r2, #1]
 8014604:	1c91      	adds	r1, r2, #2
 8014606:	f7fe ffb3 	bl	8013570 <uxr_object_id_to_raw>
 801460a:	4620      	mov	r0, r4
 801460c:	b002      	add	sp, #8
 801460e:	bd10      	pop	{r4, pc}
 8014610:	230a      	movs	r3, #10
 8014612:	2100      	movs	r1, #0
 8014614:	461c      	mov	r4, r3
 8014616:	e7f1      	b.n	80145fc <uxr_init_base_object_request+0x20>

08014618 <uxr_parse_base_object_request>:
 8014618:	b570      	push	{r4, r5, r6, lr}
 801461a:	4604      	mov	r4, r0
 801461c:	3002      	adds	r0, #2
 801461e:	460d      	mov	r5, r1
 8014620:	4616      	mov	r6, r2
 8014622:	f7fe ff91 	bl	8013548 <uxr_object_id_from_raw>
 8014626:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801462a:	8028      	strh	r0, [r5, #0]
 801462c:	806b      	strh	r3, [r5, #2]
 801462e:	7822      	ldrb	r2, [r4, #0]
 8014630:	7863      	ldrb	r3, [r4, #1]
 8014632:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014636:	8033      	strh	r3, [r6, #0]
 8014638:	bd70      	pop	{r4, r5, r6, pc}
 801463a:	bf00      	nop

0801463c <uxr_stream_id>:
 801463c:	2901      	cmp	r1, #1
 801463e:	b082      	sub	sp, #8
 8014640:	d01d      	beq.n	801467e <uxr_stream_id+0x42>
 8014642:	2902      	cmp	r1, #2
 8014644:	f04f 0c00 	mov.w	ip, #0
 8014648:	d01e      	beq.n	8014688 <uxr_stream_id+0x4c>
 801464a:	2300      	movs	r3, #0
 801464c:	f36c 0307 	bfi	r3, ip, #0, #8
 8014650:	f360 230f 	bfi	r3, r0, #8, #8
 8014654:	f361 4317 	bfi	r3, r1, #16, #8
 8014658:	f362 631f 	bfi	r3, r2, #24, #8
 801465c:	b2da      	uxtb	r2, r3
 801465e:	2000      	movs	r0, #0
 8014660:	f362 0007 	bfi	r0, r2, #0, #8
 8014664:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8014668:	f362 200f 	bfi	r0, r2, #8, #8
 801466c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014670:	f362 4017 	bfi	r0, r2, #16, #8
 8014674:	0e1b      	lsrs	r3, r3, #24
 8014676:	f363 601f 	bfi	r0, r3, #24, #8
 801467a:	b002      	add	sp, #8
 801467c:	4770      	bx	lr
 801467e:	f100 0c01 	add.w	ip, r0, #1
 8014682:	fa5f fc8c 	uxtb.w	ip, ip
 8014686:	e7e0      	b.n	801464a <uxr_stream_id+0xe>
 8014688:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 801468c:	e7dd      	b.n	801464a <uxr_stream_id+0xe>
 801468e:	bf00      	nop

08014690 <uxr_stream_id_from_raw>:
 8014690:	b082      	sub	sp, #8
 8014692:	b130      	cbz	r0, 80146a2 <uxr_stream_id_from_raw+0x12>
 8014694:	0603      	lsls	r3, r0, #24
 8014696:	d420      	bmi.n	80146da <uxr_stream_id_from_raw+0x4a>
 8014698:	1e42      	subs	r2, r0, #1
 801469a:	b2d2      	uxtb	r2, r2
 801469c:	f04f 0c01 	mov.w	ip, #1
 80146a0:	e001      	b.n	80146a6 <uxr_stream_id_from_raw+0x16>
 80146a2:	4684      	mov	ip, r0
 80146a4:	4602      	mov	r2, r0
 80146a6:	2300      	movs	r3, #0
 80146a8:	f360 0307 	bfi	r3, r0, #0, #8
 80146ac:	f362 230f 	bfi	r3, r2, #8, #8
 80146b0:	f36c 4317 	bfi	r3, ip, #16, #8
 80146b4:	f361 631f 	bfi	r3, r1, #24, #8
 80146b8:	b2da      	uxtb	r2, r3
 80146ba:	2000      	movs	r0, #0
 80146bc:	f362 0007 	bfi	r0, r2, #0, #8
 80146c0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80146c4:	f362 200f 	bfi	r0, r2, #8, #8
 80146c8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80146cc:	f362 4017 	bfi	r0, r2, #16, #8
 80146d0:	0e1b      	lsrs	r3, r3, #24
 80146d2:	f363 601f 	bfi	r0, r3, #24, #8
 80146d6:	b002      	add	sp, #8
 80146d8:	4770      	bx	lr
 80146da:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 80146de:	f04f 0c02 	mov.w	ip, #2
 80146e2:	e7e0      	b.n	80146a6 <uxr_stream_id_from_raw+0x16>

080146e4 <uxr_init_stream_storage>:
 80146e4:	2300      	movs	r3, #0
 80146e6:	7403      	strb	r3, [r0, #16]
 80146e8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80146ec:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80146f0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 80146f4:	4770      	bx	lr
 80146f6:	bf00      	nop

080146f8 <uxr_reset_stream_storage>:
 80146f8:	b570      	push	{r4, r5, r6, lr}
 80146fa:	7c03      	ldrb	r3, [r0, #16]
 80146fc:	4604      	mov	r4, r0
 80146fe:	b153      	cbz	r3, 8014716 <uxr_reset_stream_storage+0x1e>
 8014700:	4606      	mov	r6, r0
 8014702:	2500      	movs	r5, #0
 8014704:	4630      	mov	r0, r6
 8014706:	f004 f8a5 	bl	8018854 <uxr_reset_output_best_effort_stream>
 801470a:	7c23      	ldrb	r3, [r4, #16]
 801470c:	3501      	adds	r5, #1
 801470e:	42ab      	cmp	r3, r5
 8014710:	f106 0610 	add.w	r6, r6, #16
 8014714:	d8f6      	bhi.n	8014704 <uxr_reset_stream_storage+0xc>
 8014716:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801471a:	b163      	cbz	r3, 8014736 <uxr_reset_stream_storage+0x3e>
 801471c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014720:	2500      	movs	r5, #0
 8014722:	4630      	mov	r0, r6
 8014724:	f003 fe98 	bl	8018458 <uxr_reset_input_best_effort_stream>
 8014728:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801472c:	3501      	adds	r5, #1
 801472e:	42ab      	cmp	r3, r5
 8014730:	f106 0602 	add.w	r6, r6, #2
 8014734:	d8f5      	bhi.n	8014722 <uxr_reset_stream_storage+0x2a>
 8014736:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801473a:	b163      	cbz	r3, 8014756 <uxr_reset_stream_storage+0x5e>
 801473c:	f104 0618 	add.w	r6, r4, #24
 8014740:	2500      	movs	r5, #0
 8014742:	4630      	mov	r0, r6
 8014744:	f004 f932 	bl	80189ac <uxr_reset_output_reliable_stream>
 8014748:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801474c:	3501      	adds	r5, #1
 801474e:	42ab      	cmp	r3, r5
 8014750:	f106 0628 	add.w	r6, r6, #40	; 0x28
 8014754:	d8f5      	bhi.n	8014742 <uxr_reset_stream_storage+0x4a>
 8014756:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801475a:	b163      	cbz	r3, 8014776 <uxr_reset_stream_storage+0x7e>
 801475c:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8014760:	2500      	movs	r5, #0
 8014762:	4630      	mov	r0, r6
 8014764:	f003 feec 	bl	8018540 <uxr_reset_input_reliable_stream>
 8014768:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801476c:	3501      	adds	r5, #1
 801476e:	42ab      	cmp	r3, r5
 8014770:	f106 0618 	add.w	r6, r6, #24
 8014774:	d8f5      	bhi.n	8014762 <uxr_reset_stream_storage+0x6a>
 8014776:	bd70      	pop	{r4, r5, r6, pc}

08014778 <uxr_add_output_best_effort_buffer>:
 8014778:	b510      	push	{r4, lr}
 801477a:	7c04      	ldrb	r4, [r0, #16]
 801477c:	f104 0c01 	add.w	ip, r4, #1
 8014780:	b082      	sub	sp, #8
 8014782:	f880 c010 	strb.w	ip, [r0, #16]
 8014786:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801478a:	f004 f859 	bl	8018840 <uxr_init_output_best_effort_stream>
 801478e:	2201      	movs	r2, #1
 8014790:	4611      	mov	r1, r2
 8014792:	4620      	mov	r0, r4
 8014794:	b002      	add	sp, #8
 8014796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801479a:	f7ff bf4f 	b.w	801463c <uxr_stream_id>
 801479e:	bf00      	nop

080147a0 <uxr_add_output_reliable_buffer>:
 80147a0:	b510      	push	{r4, lr}
 80147a2:	b084      	sub	sp, #16
 80147a4:	4684      	mov	ip, r0
 80147a6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80147aa:	9000      	str	r0, [sp, #0]
 80147ac:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 80147b0:	2028      	movs	r0, #40	; 0x28
 80147b2:	fb00 c004 	mla	r0, r0, r4, ip
 80147b6:	f104 0e01 	add.w	lr, r4, #1
 80147ba:	3018      	adds	r0, #24
 80147bc:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 80147c0:	f004 f8bc 	bl	801893c <uxr_init_output_reliable_stream>
 80147c4:	2201      	movs	r2, #1
 80147c6:	2102      	movs	r1, #2
 80147c8:	4620      	mov	r0, r4
 80147ca:	b004      	add	sp, #16
 80147cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147d0:	f7ff bf34 	b.w	801463c <uxr_stream_id>

080147d4 <uxr_add_input_best_effort_buffer>:
 80147d4:	b510      	push	{r4, lr}
 80147d6:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 80147da:	4603      	mov	r3, r0
 80147dc:	1c62      	adds	r2, r4, #1
 80147de:	f104 0021 	add.w	r0, r4, #33	; 0x21
 80147e2:	b082      	sub	sp, #8
 80147e4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80147e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80147ec:	f003 fe30 	bl	8018450 <uxr_init_input_best_effort_stream>
 80147f0:	2200      	movs	r2, #0
 80147f2:	2101      	movs	r1, #1
 80147f4:	4620      	mov	r0, r4
 80147f6:	b002      	add	sp, #8
 80147f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147fc:	f7ff bf1e 	b.w	801463c <uxr_stream_id>

08014800 <uxr_add_input_reliable_buffer>:
 8014800:	b510      	push	{r4, lr}
 8014802:	b084      	sub	sp, #16
 8014804:	4684      	mov	ip, r0
 8014806:	9806      	ldr	r0, [sp, #24]
 8014808:	9000      	str	r0, [sp, #0]
 801480a:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 801480e:	2018      	movs	r0, #24
 8014810:	fb00 c004 	mla	r0, r0, r4, ip
 8014814:	f104 0e01 	add.w	lr, r4, #1
 8014818:	3048      	adds	r0, #72	; 0x48
 801481a:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 801481e:	f003 fe63 	bl	80184e8 <uxr_init_input_reliable_stream>
 8014822:	2200      	movs	r2, #0
 8014824:	2102      	movs	r1, #2
 8014826:	4620      	mov	r0, r4
 8014828:	b004      	add	sp, #16
 801482a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801482e:	f7ff bf05 	b.w	801463c <uxr_stream_id>
 8014832:	bf00      	nop

08014834 <uxr_get_output_best_effort_stream>:
 8014834:	7c03      	ldrb	r3, [r0, #16]
 8014836:	428b      	cmp	r3, r1
 8014838:	bf8c      	ite	hi
 801483a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801483e:	2000      	movls	r0, #0
 8014840:	4770      	bx	lr
 8014842:	bf00      	nop

08014844 <uxr_get_output_reliable_stream>:
 8014844:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8014848:	428b      	cmp	r3, r1
 801484a:	bf83      	ittte	hi
 801484c:	2328      	movhi	r3, #40	; 0x28
 801484e:	fb03 0001 	mlahi	r0, r3, r1, r0
 8014852:	3018      	addhi	r0, #24
 8014854:	2000      	movls	r0, #0
 8014856:	4770      	bx	lr

08014858 <uxr_get_input_best_effort_stream>:
 8014858:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801485c:	428b      	cmp	r3, r1
 801485e:	bf86      	itte	hi
 8014860:	3121      	addhi	r1, #33	; 0x21
 8014862:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8014866:	2000      	movls	r0, #0
 8014868:	4770      	bx	lr
 801486a:	bf00      	nop

0801486c <uxr_get_input_reliable_stream>:
 801486c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8014870:	428b      	cmp	r3, r1
 8014872:	bf83      	ittte	hi
 8014874:	2318      	movhi	r3, #24
 8014876:	fb03 0001 	mlahi	r0, r3, r1, r0
 801487a:	3048      	addhi	r0, #72	; 0x48
 801487c:	2000      	movls	r0, #0
 801487e:	4770      	bx	lr

08014880 <uxr_output_streams_confirmed>:
 8014880:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8014884:	b183      	cbz	r3, 80148a8 <uxr_output_streams_confirmed+0x28>
 8014886:	b570      	push	{r4, r5, r6, lr}
 8014888:	4606      	mov	r6, r0
 801488a:	f100 0518 	add.w	r5, r0, #24
 801488e:	2400      	movs	r4, #0
 8014890:	e001      	b.n	8014896 <uxr_output_streams_confirmed+0x16>
 8014892:	3528      	adds	r5, #40	; 0x28
 8014894:	b138      	cbz	r0, 80148a6 <uxr_output_streams_confirmed+0x26>
 8014896:	4628      	mov	r0, r5
 8014898:	f004 fae6 	bl	8018e68 <uxr_is_output_up_to_date>
 801489c:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80148a0:	3401      	adds	r4, #1
 80148a2:	42a3      	cmp	r3, r4
 80148a4:	d8f5      	bhi.n	8014892 <uxr_output_streams_confirmed+0x12>
 80148a6:	bd70      	pop	{r4, r5, r6, pc}
 80148a8:	2001      	movs	r0, #1
 80148aa:	4770      	bx	lr

080148ac <uxr_buffer_submessage_header>:
 80148ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148ae:	4604      	mov	r4, r0
 80148b0:	460e      	mov	r6, r1
 80148b2:	2104      	movs	r1, #4
 80148b4:	4615      	mov	r5, r2
 80148b6:	461f      	mov	r7, r3
 80148b8:	f7fe fc04 	bl	80130c4 <ucdr_align_to>
 80148bc:	2301      	movs	r3, #1
 80148be:	ea47 0203 	orr.w	r2, r7, r3
 80148c2:	4631      	mov	r1, r6
 80148c4:	7523      	strb	r3, [r4, #20]
 80148c6:	4620      	mov	r0, r4
 80148c8:	462b      	mov	r3, r5
 80148ca:	f000 fa27 	bl	8014d1c <uxr_serialize_submessage_header>
 80148ce:	4620      	mov	r0, r4
 80148d0:	f7fe fc0e 	bl	80130f0 <ucdr_buffer_remaining>
 80148d4:	42a8      	cmp	r0, r5
 80148d6:	bf34      	ite	cc
 80148d8:	2000      	movcc	r0, #0
 80148da:	2001      	movcs	r0, #1
 80148dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80148de:	bf00      	nop

080148e0 <uxr_read_submessage_header>:
 80148e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148e4:	4604      	mov	r4, r0
 80148e6:	460d      	mov	r5, r1
 80148e8:	2104      	movs	r1, #4
 80148ea:	4616      	mov	r6, r2
 80148ec:	4698      	mov	r8, r3
 80148ee:	f7fe fbe9 	bl	80130c4 <ucdr_align_to>
 80148f2:	4620      	mov	r0, r4
 80148f4:	f7fe fbfc 	bl	80130f0 <ucdr_buffer_remaining>
 80148f8:	2803      	cmp	r0, #3
 80148fa:	bf8c      	ite	hi
 80148fc:	2701      	movhi	r7, #1
 80148fe:	2700      	movls	r7, #0
 8014900:	d802      	bhi.n	8014908 <uxr_read_submessage_header+0x28>
 8014902:	4638      	mov	r0, r7
 8014904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014908:	4633      	mov	r3, r6
 801490a:	4642      	mov	r2, r8
 801490c:	4620      	mov	r0, r4
 801490e:	4629      	mov	r1, r5
 8014910:	f000 fa18 	bl	8014d44 <uxr_deserialize_submessage_header>
 8014914:	f898 3000 	ldrb.w	r3, [r8]
 8014918:	f003 0201 	and.w	r2, r3, #1
 801491c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8014920:	f888 3000 	strb.w	r3, [r8]
 8014924:	7522      	strb	r2, [r4, #20]
 8014926:	4638      	mov	r0, r7
 8014928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801492c <uxr_submessage_padding>:
 801492c:	f010 0003 	ands.w	r0, r0, #3
 8014930:	bf18      	it	ne
 8014932:	f1c0 0004 	rsbne	r0, r0, #4
 8014936:	4770      	bx	lr

08014938 <uxr_millis>:
 8014938:	b510      	push	{r4, lr}
 801493a:	b084      	sub	sp, #16
 801493c:	4669      	mov	r1, sp
 801493e:	2001      	movs	r0, #1
 8014940:	f7ed fa82 	bl	8001e48 <clock_gettime>
 8014944:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8014948:	4906      	ldr	r1, [pc, #24]	; (8014964 <uxr_millis+0x2c>)
 801494a:	fba0 0301 	umull	r0, r3, r0, r1
 801494e:	1900      	adds	r0, r0, r4
 8014950:	fb01 3102 	mla	r1, r1, r2, r3
 8014954:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8014958:	4a03      	ldr	r2, [pc, #12]	; (8014968 <uxr_millis+0x30>)
 801495a:	2300      	movs	r3, #0
 801495c:	f7eb feac 	bl	80006b8 <__aeabi_ldivmod>
 8014960:	b004      	add	sp, #16
 8014962:	bd10      	pop	{r4, pc}
 8014964:	3b9aca00 	.word	0x3b9aca00
 8014968:	000f4240 	.word	0x000f4240

0801496c <uxr_nanos>:
 801496c:	b510      	push	{r4, lr}
 801496e:	b084      	sub	sp, #16
 8014970:	4669      	mov	r1, sp
 8014972:	2001      	movs	r0, #1
 8014974:	f7ed fa68 	bl	8001e48 <clock_gettime>
 8014978:	4a06      	ldr	r2, [pc, #24]	; (8014994 <uxr_nanos+0x28>)
 801497a:	9800      	ldr	r0, [sp, #0]
 801497c:	9902      	ldr	r1, [sp, #8]
 801497e:	9c01      	ldr	r4, [sp, #4]
 8014980:	fba0 0302 	umull	r0, r3, r0, r2
 8014984:	1840      	adds	r0, r0, r1
 8014986:	fb02 3304 	mla	r3, r2, r4, r3
 801498a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801498e:	b004      	add	sp, #16
 8014990:	bd10      	pop	{r4, pc}
 8014992:	bf00      	nop
 8014994:	3b9aca00 	.word	0x3b9aca00

08014998 <on_full_output_buffer_fragmented>:
 8014998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801499c:	460c      	mov	r4, r1
 801499e:	b08a      	sub	sp, #40	; 0x28
 80149a0:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 80149a4:	4606      	mov	r6, r0
 80149a6:	f104 0008 	add.w	r0, r4, #8
 80149aa:	f7ff ff4b 	bl	8014844 <uxr_get_output_reliable_stream>
 80149ae:	4605      	mov	r5, r0
 80149b0:	f004 fa64 	bl	8018e7c <get_available_free_slots>
 80149b4:	b968      	cbnz	r0, 80149d2 <on_full_output_buffer_fragmented+0x3a>
 80149b6:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 80149ba:	4620      	mov	r0, r4
 80149bc:	4798      	blx	r3
 80149be:	b918      	cbnz	r0, 80149c8 <on_full_output_buffer_fragmented+0x30>
 80149c0:	2001      	movs	r0, #1
 80149c2:	b00a      	add	sp, #40	; 0x28
 80149c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149c8:	4628      	mov	r0, r5
 80149ca:	f004 fa57 	bl	8018e7c <get_available_free_slots>
 80149ce:	2800      	cmp	r0, #0
 80149d0:	d0f6      	beq.n	80149c0 <on_full_output_buffer_fragmented+0x28>
 80149d2:	8929      	ldrh	r1, [r5, #8]
 80149d4:	89eb      	ldrh	r3, [r5, #14]
 80149d6:	7b28      	ldrb	r0, [r5, #12]
 80149d8:	686a      	ldr	r2, [r5, #4]
 80149da:	fbb2 f8f1 	udiv	r8, r2, r1
 80149de:	fbb3 f2f1 	udiv	r2, r3, r1
 80149e2:	fb01 3112 	mls	r1, r1, r2, r3
 80149e6:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 80149ea:	b289      	uxth	r1, r1
 80149ec:	fb08 f101 	mul.w	r1, r8, r1
 80149f0:	30fc      	adds	r0, #252	; 0xfc
 80149f2:	f1a8 0804 	sub.w	r8, r8, #4
 80149f6:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80149fa:	4440      	add	r0, r8
 80149fc:	b287      	uxth	r7, r0
 80149fe:	1bdb      	subs	r3, r3, r7
 8014a00:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8014a04:	682b      	ldr	r3, [r5, #0]
 8014a06:	3104      	adds	r1, #4
 8014a08:	4419      	add	r1, r3
 8014a0a:	4642      	mov	r2, r8
 8014a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014a10:	9300      	str	r3, [sp, #0]
 8014a12:	a802      	add	r0, sp, #8
 8014a14:	2300      	movs	r3, #0
 8014a16:	f7fe fb29 	bl	801306c <ucdr_init_buffer_origin_offset>
 8014a1a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8014a1e:	f102 0308 	add.w	r3, r2, #8
 8014a22:	4543      	cmp	r3, r8
 8014a24:	d928      	bls.n	8014a78 <on_full_output_buffer_fragmented+0xe0>
 8014a26:	463a      	mov	r2, r7
 8014a28:	2300      	movs	r3, #0
 8014a2a:	210d      	movs	r1, #13
 8014a2c:	a802      	add	r0, sp, #8
 8014a2e:	f7ff ff3d 	bl	80148ac <uxr_buffer_submessage_header>
 8014a32:	8929      	ldrh	r1, [r5, #8]
 8014a34:	89eb      	ldrh	r3, [r5, #14]
 8014a36:	fbb3 f2f1 	udiv	r2, r3, r1
 8014a3a:	fb01 3312 	mls	r3, r1, r2, r3
 8014a3e:	b29b      	uxth	r3, r3
 8014a40:	686a      	ldr	r2, [r5, #4]
 8014a42:	fbb2 f2f1 	udiv	r2, r2, r1
 8014a46:	fb02 f303 	mul.w	r3, r2, r3
 8014a4a:	682a      	ldr	r2, [r5, #0]
 8014a4c:	f842 8003 	str.w	r8, [r2, r3]
 8014a50:	89e8      	ldrh	r0, [r5, #14]
 8014a52:	2101      	movs	r1, #1
 8014a54:	f004 fb28 	bl	80190a8 <uxr_seq_num_add>
 8014a58:	9904      	ldr	r1, [sp, #16]
 8014a5a:	9a03      	ldr	r2, [sp, #12]
 8014a5c:	81e8      	strh	r0, [r5, #14]
 8014a5e:	1a52      	subs	r2, r2, r1
 8014a60:	4630      	mov	r0, r6
 8014a62:	f7fe fb15 	bl	8013090 <ucdr_init_buffer>
 8014a66:	4630      	mov	r0, r6
 8014a68:	490f      	ldr	r1, [pc, #60]	; (8014aa8 <on_full_output_buffer_fragmented+0x110>)
 8014a6a:	4622      	mov	r2, r4
 8014a6c:	f7fe fae4 	bl	8013038 <ucdr_set_on_full_buffer_callback>
 8014a70:	2000      	movs	r0, #0
 8014a72:	b00a      	add	sp, #40	; 0x28
 8014a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a78:	b292      	uxth	r2, r2
 8014a7a:	2302      	movs	r3, #2
 8014a7c:	210d      	movs	r1, #13
 8014a7e:	a802      	add	r0, sp, #8
 8014a80:	f7ff ff14 	bl	80148ac <uxr_buffer_submessage_header>
 8014a84:	8928      	ldrh	r0, [r5, #8]
 8014a86:	89eb      	ldrh	r3, [r5, #14]
 8014a88:	fbb3 f1f0 	udiv	r1, r3, r0
 8014a8c:	fb00 3311 	mls	r3, r0, r1, r3
 8014a90:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8014a94:	6869      	ldr	r1, [r5, #4]
 8014a96:	fbb1 f1f0 	udiv	r1, r1, r0
 8014a9a:	b29b      	uxth	r3, r3
 8014a9c:	fb01 f303 	mul.w	r3, r1, r3
 8014aa0:	6829      	ldr	r1, [r5, #0]
 8014aa2:	3208      	adds	r2, #8
 8014aa4:	50ca      	str	r2, [r1, r3]
 8014aa6:	e7d3      	b.n	8014a50 <on_full_output_buffer_fragmented+0xb8>
 8014aa8:	08014999 	.word	0x08014999

08014aac <uxr_prepare_output_stream>:
 8014aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014aae:	b087      	sub	sp, #28
 8014ab0:	2707      	movs	r7, #7
 8014ab2:	9202      	str	r2, [sp, #8]
 8014ab4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014ab6:	9103      	str	r1, [sp, #12]
 8014ab8:	2500      	movs	r5, #0
 8014aba:	3204      	adds	r2, #4
 8014abc:	e9cd 7500 	strd	r7, r5, [sp]
 8014ac0:	461c      	mov	r4, r3
 8014ac2:	4606      	mov	r6, r0
 8014ac4:	f7ff fc54 	bl	8014370 <uxr_prepare_stream_to_write_submessage>
 8014ac8:	f080 0201 	eor.w	r2, r0, #1
 8014acc:	b2d2      	uxtb	r2, r2
 8014ace:	75a2      	strb	r2, [r4, #22]
 8014ad0:	b112      	cbz	r2, 8014ad8 <uxr_prepare_output_stream+0x2c>
 8014ad2:	4628      	mov	r0, r5
 8014ad4:	b007      	add	sp, #28
 8014ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ad8:	aa05      	add	r2, sp, #20
 8014ada:	9902      	ldr	r1, [sp, #8]
 8014adc:	4630      	mov	r0, r6
 8014ade:	f7ff fd7d 	bl	80145dc <uxr_init_base_object_request>
 8014ae2:	a905      	add	r1, sp, #20
 8014ae4:	4605      	mov	r5, r0
 8014ae6:	4620      	mov	r0, r4
 8014ae8:	f000 ffa0 	bl	8015a2c <uxr_serialize_WRITE_DATA_Payload_Data>
 8014aec:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8014af0:	69a6      	ldr	r6, [r4, #24]
 8014af2:	69e7      	ldr	r7, [r4, #28]
 8014af4:	1a52      	subs	r2, r2, r1
 8014af6:	4620      	mov	r0, r4
 8014af8:	f7fe faca 	bl	8013090 <ucdr_init_buffer>
 8014afc:	4620      	mov	r0, r4
 8014afe:	463a      	mov	r2, r7
 8014b00:	4631      	mov	r1, r6
 8014b02:	f7fe fa99 	bl	8013038 <ucdr_set_on_full_buffer_callback>
 8014b06:	4628      	mov	r0, r5
 8014b08:	b007      	add	sp, #28
 8014b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014b0c <uxr_prepare_output_stream_fragmented>:
 8014b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b10:	b091      	sub	sp, #68	; 0x44
 8014b12:	4605      	mov	r5, r0
 8014b14:	9105      	str	r1, [sp, #20]
 8014b16:	3008      	adds	r0, #8
 8014b18:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8014b1c:	461e      	mov	r6, r3
 8014b1e:	9204      	str	r2, [sp, #16]
 8014b20:	f7ff fe90 	bl	8014844 <uxr_get_output_reliable_stream>
 8014b24:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8014b28:	2b01      	cmp	r3, #1
 8014b2a:	f000 8091 	beq.w	8014c50 <uxr_prepare_output_stream_fragmented+0x144>
 8014b2e:	4604      	mov	r4, r0
 8014b30:	2800      	cmp	r0, #0
 8014b32:	f000 808d 	beq.w	8014c50 <uxr_prepare_output_stream_fragmented+0x144>
 8014b36:	f004 f9a1 	bl	8018e7c <get_available_free_slots>
 8014b3a:	2800      	cmp	r0, #0
 8014b3c:	f000 8083 	beq.w	8014c46 <uxr_prepare_output_stream_fragmented+0x13a>
 8014b40:	8922      	ldrh	r2, [r4, #8]
 8014b42:	89e7      	ldrh	r7, [r4, #14]
 8014b44:	fbb7 f9f2 	udiv	r9, r7, r2
 8014b48:	fb02 7919 	mls	r9, r2, r9, r7
 8014b4c:	fa1f f989 	uxth.w	r9, r9
 8014b50:	6863      	ldr	r3, [r4, #4]
 8014b52:	fbb3 f2f2 	udiv	r2, r3, r2
 8014b56:	6823      	ldr	r3, [r4, #0]
 8014b58:	9203      	str	r2, [sp, #12]
 8014b5a:	fb02 f909 	mul.w	r9, r2, r9
 8014b5e:	f109 0904 	add.w	r9, r9, #4
 8014b62:	4499      	add	r9, r3
 8014b64:	7b23      	ldrb	r3, [r4, #12]
 8014b66:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8014b6a:	4543      	cmp	r3, r8
 8014b6c:	f1a2 0b04 	sub.w	fp, r2, #4
 8014b70:	d37a      	bcc.n	8014c68 <uxr_prepare_output_stream_fragmented+0x15c>
 8014b72:	f1ab 0a04 	sub.w	sl, fp, #4
 8014b76:	ebaa 0a03 	sub.w	sl, sl, r3
 8014b7a:	465a      	mov	r2, fp
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	4649      	mov	r1, r9
 8014b80:	a808      	add	r0, sp, #32
 8014b82:	f8cd 8000 	str.w	r8, [sp]
 8014b86:	f7fe fa71 	bl	801306c <ucdr_init_buffer_origin_offset>
 8014b8a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014b8c:	fa1f fa8a 	uxth.w	sl, sl
 8014b90:	4652      	mov	r2, sl
 8014b92:	f103 0a08 	add.w	sl, r3, #8
 8014b96:	45da      	cmp	sl, fp
 8014b98:	bf34      	ite	cc
 8014b9a:	2302      	movcc	r3, #2
 8014b9c:	2300      	movcs	r3, #0
 8014b9e:	210d      	movs	r1, #13
 8014ba0:	a808      	add	r0, sp, #32
 8014ba2:	f7ff fe83 	bl	80148ac <uxr_buffer_submessage_header>
 8014ba6:	8921      	ldrh	r1, [r4, #8]
 8014ba8:	fbb7 f2f1 	udiv	r2, r7, r1
 8014bac:	fb01 7212 	mls	r2, r1, r2, r7
 8014bb0:	b292      	uxth	r2, r2
 8014bb2:	6863      	ldr	r3, [r4, #4]
 8014bb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8014bb8:	fb02 f303 	mul.w	r3, r2, r3
 8014bbc:	6822      	ldr	r2, [r4, #0]
 8014bbe:	4638      	mov	r0, r7
 8014bc0:	f842 b003 	str.w	fp, [r2, r3]
 8014bc4:	2101      	movs	r1, #1
 8014bc6:	f004 fa6f 	bl	80190a8 <uxr_seq_num_add>
 8014bca:	9b03      	ldr	r3, [sp, #12]
 8014bcc:	f108 0104 	add.w	r1, r8, #4
 8014bd0:	f1a3 0208 	sub.w	r2, r3, #8
 8014bd4:	eba2 0208 	sub.w	r2, r2, r8
 8014bd8:	4449      	add	r1, r9
 8014bda:	4607      	mov	r7, r0
 8014bdc:	4630      	mov	r0, r6
 8014bde:	f7fe fa57 	bl	8013090 <ucdr_init_buffer>
 8014be2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8014be4:	81e7      	strh	r7, [r4, #14]
 8014be6:	1d1a      	adds	r2, r3, #4
 8014be8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8014bec:	bf28      	it	cs
 8014bee:	2200      	movcs	r2, #0
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	b292      	uxth	r2, r2
 8014bf4:	2107      	movs	r1, #7
 8014bf6:	4630      	mov	r0, r6
 8014bf8:	f7ff fe58 	bl	80148ac <uxr_buffer_submessage_header>
 8014bfc:	9904      	ldr	r1, [sp, #16]
 8014bfe:	aa07      	add	r2, sp, #28
 8014c00:	4628      	mov	r0, r5
 8014c02:	f7ff fceb 	bl	80145dc <uxr_init_base_object_request>
 8014c06:	4604      	mov	r4, r0
 8014c08:	b318      	cbz	r0, 8014c52 <uxr_prepare_output_stream_fragmented+0x146>
 8014c0a:	a907      	add	r1, sp, #28
 8014c0c:	4630      	mov	r0, r6
 8014c0e:	f000 ff0d 	bl	8015a2c <uxr_serialize_WRITE_DATA_Payload_Data>
 8014c12:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8014c16:	4630      	mov	r0, r6
 8014c18:	1a52      	subs	r2, r2, r1
 8014c1a:	f7fe fa39 	bl	8013090 <ucdr_init_buffer>
 8014c1e:	9b05      	ldr	r3, [sp, #20]
 8014c20:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8014c24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014c26:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 8014c2a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8014c2c:	491b      	ldr	r1, [pc, #108]	; (8014c9c <uxr_prepare_output_stream_fragmented+0x190>)
 8014c2e:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 8014c32:	4630      	mov	r0, r6
 8014c34:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8014c38:	462a      	mov	r2, r5
 8014c3a:	f7fe f9fd 	bl	8013038 <ucdr_set_on_full_buffer_callback>
 8014c3e:	4620      	mov	r0, r4
 8014c40:	b011      	add	sp, #68	; 0x44
 8014c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c46:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014c48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014c4a:	4628      	mov	r0, r5
 8014c4c:	4798      	blx	r3
 8014c4e:	b920      	cbnz	r0, 8014c5a <uxr_prepare_output_stream_fragmented+0x14e>
 8014c50:	2400      	movs	r4, #0
 8014c52:	4620      	mov	r0, r4
 8014c54:	b011      	add	sp, #68	; 0x44
 8014c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c5a:	4620      	mov	r0, r4
 8014c5c:	f004 f90e 	bl	8018e7c <get_available_free_slots>
 8014c60:	2800      	cmp	r0, #0
 8014c62:	f47f af6d 	bne.w	8014b40 <uxr_prepare_output_stream_fragmented+0x34>
 8014c66:	e7f3      	b.n	8014c50 <uxr_prepare_output_stream_fragmented+0x144>
 8014c68:	4638      	mov	r0, r7
 8014c6a:	2101      	movs	r1, #1
 8014c6c:	f004 fa1c 	bl	80190a8 <uxr_seq_num_add>
 8014c70:	8921      	ldrh	r1, [r4, #8]
 8014c72:	fbb0 f2f1 	udiv	r2, r0, r1
 8014c76:	fb01 0912 	mls	r9, r1, r2, r0
 8014c7a:	fa1f f289 	uxth.w	r2, r9
 8014c7e:	6863      	ldr	r3, [r4, #4]
 8014c80:	fbb3 f9f1 	udiv	r9, r3, r1
 8014c84:	6823      	ldr	r3, [r4, #0]
 8014c86:	fb02 f909 	mul.w	r9, r2, r9
 8014c8a:	f109 0904 	add.w	r9, r9, #4
 8014c8e:	4499      	add	r9, r3
 8014c90:	4607      	mov	r7, r0
 8014c92:	7b23      	ldrb	r3, [r4, #12]
 8014c94:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8014c98:	e76b      	b.n	8014b72 <uxr_prepare_output_stream_fragmented+0x66>
 8014c9a:	bf00      	nop
 8014c9c:	08014999 	.word	0x08014999

08014ca0 <uxr_serialize_message_header>:
 8014ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ca2:	b083      	sub	sp, #12
 8014ca4:	4616      	mov	r6, r2
 8014ca6:	4604      	mov	r4, r0
 8014ca8:	9301      	str	r3, [sp, #4]
 8014caa:	460d      	mov	r5, r1
 8014cac:	9f08      	ldr	r7, [sp, #32]
 8014cae:	f7fc fcbf 	bl	8011630 <ucdr_serialize_uint8_t>
 8014cb2:	4631      	mov	r1, r6
 8014cb4:	4620      	mov	r0, r4
 8014cb6:	f7fc fcbb 	bl	8011630 <ucdr_serialize_uint8_t>
 8014cba:	9a01      	ldr	r2, [sp, #4]
 8014cbc:	2101      	movs	r1, #1
 8014cbe:	4620      	mov	r0, r4
 8014cc0:	f7fc fd62 	bl	8011788 <ucdr_serialize_endian_uint16_t>
 8014cc4:	062b      	lsls	r3, r5, #24
 8014cc6:	d501      	bpl.n	8014ccc <uxr_serialize_message_header+0x2c>
 8014cc8:	b003      	add	sp, #12
 8014cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ccc:	2204      	movs	r2, #4
 8014cce:	4639      	mov	r1, r7
 8014cd0:	4620      	mov	r0, r4
 8014cd2:	b003      	add	sp, #12
 8014cd4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014cd8:	f003 b96e 	b.w	8017fb8 <ucdr_serialize_array_uint8_t>

08014cdc <uxr_deserialize_message_header>:
 8014cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cde:	b083      	sub	sp, #12
 8014ce0:	4616      	mov	r6, r2
 8014ce2:	4604      	mov	r4, r0
 8014ce4:	9301      	str	r3, [sp, #4]
 8014ce6:	460d      	mov	r5, r1
 8014ce8:	9f08      	ldr	r7, [sp, #32]
 8014cea:	f7fc fcb7 	bl	801165c <ucdr_deserialize_uint8_t>
 8014cee:	4631      	mov	r1, r6
 8014cf0:	4620      	mov	r0, r4
 8014cf2:	f7fc fcb3 	bl	801165c <ucdr_deserialize_uint8_t>
 8014cf6:	9a01      	ldr	r2, [sp, #4]
 8014cf8:	2101      	movs	r1, #1
 8014cfa:	4620      	mov	r0, r4
 8014cfc:	f7fc fe38 	bl	8011970 <ucdr_deserialize_endian_uint16_t>
 8014d00:	f995 3000 	ldrsb.w	r3, [r5]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	da01      	bge.n	8014d0c <uxr_deserialize_message_header+0x30>
 8014d08:	b003      	add	sp, #12
 8014d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d0c:	2204      	movs	r2, #4
 8014d0e:	4639      	mov	r1, r7
 8014d10:	4620      	mov	r0, r4
 8014d12:	b003      	add	sp, #12
 8014d14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014d18:	f003 b9b2 	b.w	8018080 <ucdr_deserialize_array_uint8_t>

08014d1c <uxr_serialize_submessage_header>:
 8014d1c:	b530      	push	{r4, r5, lr}
 8014d1e:	b083      	sub	sp, #12
 8014d20:	4615      	mov	r5, r2
 8014d22:	4604      	mov	r4, r0
 8014d24:	9301      	str	r3, [sp, #4]
 8014d26:	f7fc fc83 	bl	8011630 <ucdr_serialize_uint8_t>
 8014d2a:	4629      	mov	r1, r5
 8014d2c:	4620      	mov	r0, r4
 8014d2e:	f7fc fc7f 	bl	8011630 <ucdr_serialize_uint8_t>
 8014d32:	9a01      	ldr	r2, [sp, #4]
 8014d34:	2101      	movs	r1, #1
 8014d36:	4620      	mov	r0, r4
 8014d38:	b003      	add	sp, #12
 8014d3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d3e:	f7fc bd23 	b.w	8011788 <ucdr_serialize_endian_uint16_t>
 8014d42:	bf00      	nop

08014d44 <uxr_deserialize_submessage_header>:
 8014d44:	b530      	push	{r4, r5, lr}
 8014d46:	b083      	sub	sp, #12
 8014d48:	4615      	mov	r5, r2
 8014d4a:	4604      	mov	r4, r0
 8014d4c:	9301      	str	r3, [sp, #4]
 8014d4e:	f7fc fc85 	bl	801165c <ucdr_deserialize_uint8_t>
 8014d52:	4629      	mov	r1, r5
 8014d54:	4620      	mov	r0, r4
 8014d56:	f7fc fc81 	bl	801165c <ucdr_deserialize_uint8_t>
 8014d5a:	9a01      	ldr	r2, [sp, #4]
 8014d5c:	2101      	movs	r1, #1
 8014d5e:	4620      	mov	r0, r4
 8014d60:	b003      	add	sp, #12
 8014d62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d66:	f7fc be03 	b.w	8011970 <ucdr_deserialize_endian_uint16_t>
 8014d6a:	bf00      	nop

08014d6c <uxr_serialize_CLIENT_Representation>:
 8014d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d70:	2204      	movs	r2, #4
 8014d72:	460e      	mov	r6, r1
 8014d74:	4605      	mov	r5, r0
 8014d76:	f003 f91f 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8014d7a:	2202      	movs	r2, #2
 8014d7c:	4607      	mov	r7, r0
 8014d7e:	1d31      	adds	r1, r6, #4
 8014d80:	4628      	mov	r0, r5
 8014d82:	f003 f919 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8014d86:	4038      	ands	r0, r7
 8014d88:	2202      	movs	r2, #2
 8014d8a:	1db1      	adds	r1, r6, #6
 8014d8c:	b2c7      	uxtb	r7, r0
 8014d8e:	4628      	mov	r0, r5
 8014d90:	f003 f912 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8014d94:	2204      	movs	r2, #4
 8014d96:	4007      	ands	r7, r0
 8014d98:	f106 0108 	add.w	r1, r6, #8
 8014d9c:	4628      	mov	r0, r5
 8014d9e:	f003 f90b 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8014da2:	7b31      	ldrb	r1, [r6, #12]
 8014da4:	4007      	ands	r7, r0
 8014da6:	4628      	mov	r0, r5
 8014da8:	f7fc fc42 	bl	8011630 <ucdr_serialize_uint8_t>
 8014dac:	7b71      	ldrb	r1, [r6, #13]
 8014dae:	4007      	ands	r7, r0
 8014db0:	4628      	mov	r0, r5
 8014db2:	f7fc fc0f 	bl	80115d4 <ucdr_serialize_bool>
 8014db6:	7b73      	ldrb	r3, [r6, #13]
 8014db8:	ea07 0800 	and.w	r8, r7, r0
 8014dbc:	b93b      	cbnz	r3, 8014dce <uxr_serialize_CLIENT_Representation+0x62>
 8014dbe:	8bb1      	ldrh	r1, [r6, #28]
 8014dc0:	4628      	mov	r0, r5
 8014dc2:	f7fc fc61 	bl	8011688 <ucdr_serialize_uint16_t>
 8014dc6:	ea08 0000 	and.w	r0, r8, r0
 8014dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014dce:	6931      	ldr	r1, [r6, #16]
 8014dd0:	4628      	mov	r0, r5
 8014dd2:	f7fc fe43 	bl	8011a5c <ucdr_serialize_uint32_t>
 8014dd6:	6933      	ldr	r3, [r6, #16]
 8014dd8:	b1e3      	cbz	r3, 8014e14 <uxr_serialize_CLIENT_Representation+0xa8>
 8014dda:	b1c0      	cbz	r0, 8014e0e <uxr_serialize_CLIENT_Representation+0xa2>
 8014ddc:	4637      	mov	r7, r6
 8014dde:	f04f 0900 	mov.w	r9, #0
 8014de2:	e001      	b.n	8014de8 <uxr_serialize_CLIENT_Representation+0x7c>
 8014de4:	3708      	adds	r7, #8
 8014de6:	b194      	cbz	r4, 8014e0e <uxr_serialize_CLIENT_Representation+0xa2>
 8014de8:	6979      	ldr	r1, [r7, #20]
 8014dea:	4628      	mov	r0, r5
 8014dec:	f003 fa56 	bl	801829c <ucdr_serialize_string>
 8014df0:	69b9      	ldr	r1, [r7, #24]
 8014df2:	4604      	mov	r4, r0
 8014df4:	4628      	mov	r0, r5
 8014df6:	f003 fa51 	bl	801829c <ucdr_serialize_string>
 8014dfa:	6933      	ldr	r3, [r6, #16]
 8014dfc:	f109 0901 	add.w	r9, r9, #1
 8014e00:	4004      	ands	r4, r0
 8014e02:	4599      	cmp	r9, r3
 8014e04:	b2e4      	uxtb	r4, r4
 8014e06:	d3ed      	bcc.n	8014de4 <uxr_serialize_CLIENT_Representation+0x78>
 8014e08:	ea08 0804 	and.w	r8, r8, r4
 8014e0c:	e7d7      	b.n	8014dbe <uxr_serialize_CLIENT_Representation+0x52>
 8014e0e:	f04f 0800 	mov.w	r8, #0
 8014e12:	e7d4      	b.n	8014dbe <uxr_serialize_CLIENT_Representation+0x52>
 8014e14:	ea08 0800 	and.w	r8, r8, r0
 8014e18:	e7d1      	b.n	8014dbe <uxr_serialize_CLIENT_Representation+0x52>
 8014e1a:	bf00      	nop

08014e1c <uxr_deserialize_CLIENT_Representation>:
 8014e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e20:	2204      	movs	r2, #4
 8014e22:	460c      	mov	r4, r1
 8014e24:	4605      	mov	r5, r0
 8014e26:	f003 f92b 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 8014e2a:	2202      	movs	r2, #2
 8014e2c:	4607      	mov	r7, r0
 8014e2e:	1d21      	adds	r1, r4, #4
 8014e30:	4628      	mov	r0, r5
 8014e32:	f003 f925 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 8014e36:	4038      	ands	r0, r7
 8014e38:	2202      	movs	r2, #2
 8014e3a:	1da1      	adds	r1, r4, #6
 8014e3c:	b2c6      	uxtb	r6, r0
 8014e3e:	4628      	mov	r0, r5
 8014e40:	f003 f91e 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 8014e44:	2204      	movs	r2, #4
 8014e46:	4006      	ands	r6, r0
 8014e48:	f104 0108 	add.w	r1, r4, #8
 8014e4c:	4628      	mov	r0, r5
 8014e4e:	f003 f917 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 8014e52:	f104 010c 	add.w	r1, r4, #12
 8014e56:	4006      	ands	r6, r0
 8014e58:	4628      	mov	r0, r5
 8014e5a:	f7fc fbff 	bl	801165c <ucdr_deserialize_uint8_t>
 8014e5e:	f104 010d 	add.w	r1, r4, #13
 8014e62:	ea06 0700 	and.w	r7, r6, r0
 8014e66:	4628      	mov	r0, r5
 8014e68:	f7fc fbca 	bl	8011600 <ucdr_deserialize_bool>
 8014e6c:	7b63      	ldrb	r3, [r4, #13]
 8014e6e:	4007      	ands	r7, r0
 8014e70:	b93b      	cbnz	r3, 8014e82 <uxr_deserialize_CLIENT_Representation+0x66>
 8014e72:	f104 011c 	add.w	r1, r4, #28
 8014e76:	4628      	mov	r0, r5
 8014e78:	f7fc fd06 	bl	8011888 <ucdr_deserialize_uint16_t>
 8014e7c:	4038      	ands	r0, r7
 8014e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e82:	f104 0110 	add.w	r1, r4, #16
 8014e86:	4628      	mov	r0, r5
 8014e88:	f7fc ff18 	bl	8011cbc <ucdr_deserialize_uint32_t>
 8014e8c:	6923      	ldr	r3, [r4, #16]
 8014e8e:	2b01      	cmp	r3, #1
 8014e90:	d903      	bls.n	8014e9a <uxr_deserialize_CLIENT_Representation+0x7e>
 8014e92:	2301      	movs	r3, #1
 8014e94:	75ab      	strb	r3, [r5, #22]
 8014e96:	2700      	movs	r7, #0
 8014e98:	e7eb      	b.n	8014e72 <uxr_deserialize_CLIENT_Representation+0x56>
 8014e9a:	b30b      	cbz	r3, 8014ee0 <uxr_deserialize_CLIENT_Representation+0xc4>
 8014e9c:	2800      	cmp	r0, #0
 8014e9e:	d0fa      	beq.n	8014e96 <uxr_deserialize_CLIENT_Representation+0x7a>
 8014ea0:	46a0      	mov	r8, r4
 8014ea2:	f04f 0900 	mov.w	r9, #0
 8014ea6:	e001      	b.n	8014eac <uxr_deserialize_CLIENT_Representation+0x90>
 8014ea8:	2e00      	cmp	r6, #0
 8014eaa:	d0f4      	beq.n	8014e96 <uxr_deserialize_CLIENT_Representation+0x7a>
 8014eac:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014eb4:	4628      	mov	r0, r5
 8014eb6:	f003 fa01 	bl	80182bc <ucdr_deserialize_string>
 8014eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014ebe:	4606      	mov	r6, r0
 8014ec0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8014ec4:	4628      	mov	r0, r5
 8014ec6:	f003 f9f9 	bl	80182bc <ucdr_deserialize_string>
 8014eca:	6923      	ldr	r3, [r4, #16]
 8014ecc:	f109 0901 	add.w	r9, r9, #1
 8014ed0:	4006      	ands	r6, r0
 8014ed2:	4599      	cmp	r9, r3
 8014ed4:	f108 0808 	add.w	r8, r8, #8
 8014ed8:	b2f6      	uxtb	r6, r6
 8014eda:	d3e5      	bcc.n	8014ea8 <uxr_deserialize_CLIENT_Representation+0x8c>
 8014edc:	4037      	ands	r7, r6
 8014ede:	e7c8      	b.n	8014e72 <uxr_deserialize_CLIENT_Representation+0x56>
 8014ee0:	4007      	ands	r7, r0
 8014ee2:	e7c6      	b.n	8014e72 <uxr_deserialize_CLIENT_Representation+0x56>

08014ee4 <uxr_serialize_AGENT_Representation>:
 8014ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ee8:	2204      	movs	r2, #4
 8014eea:	460f      	mov	r7, r1
 8014eec:	4605      	mov	r5, r0
 8014eee:	f003 f863 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8014ef2:	2202      	movs	r2, #2
 8014ef4:	4604      	mov	r4, r0
 8014ef6:	1d39      	adds	r1, r7, #4
 8014ef8:	4628      	mov	r0, r5
 8014efa:	f003 f85d 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8014efe:	4020      	ands	r0, r4
 8014f00:	2202      	movs	r2, #2
 8014f02:	1db9      	adds	r1, r7, #6
 8014f04:	b2c4      	uxtb	r4, r0
 8014f06:	4628      	mov	r0, r5
 8014f08:	f003 f856 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8014f0c:	7a39      	ldrb	r1, [r7, #8]
 8014f0e:	4004      	ands	r4, r0
 8014f10:	4628      	mov	r0, r5
 8014f12:	f7fc fb5f 	bl	80115d4 <ucdr_serialize_bool>
 8014f16:	7a3b      	ldrb	r3, [r7, #8]
 8014f18:	ea00 0804 	and.w	r8, r0, r4
 8014f1c:	b913      	cbnz	r3, 8014f24 <uxr_serialize_AGENT_Representation+0x40>
 8014f1e:	4640      	mov	r0, r8
 8014f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f24:	68f9      	ldr	r1, [r7, #12]
 8014f26:	4628      	mov	r0, r5
 8014f28:	f7fc fd98 	bl	8011a5c <ucdr_serialize_uint32_t>
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	b303      	cbz	r3, 8014f72 <uxr_serialize_AGENT_Representation+0x8e>
 8014f30:	b1d0      	cbz	r0, 8014f68 <uxr_serialize_AGENT_Representation+0x84>
 8014f32:	463e      	mov	r6, r7
 8014f34:	f04f 0900 	mov.w	r9, #0
 8014f38:	e001      	b.n	8014f3e <uxr_serialize_AGENT_Representation+0x5a>
 8014f3a:	3608      	adds	r6, #8
 8014f3c:	b1a4      	cbz	r4, 8014f68 <uxr_serialize_AGENT_Representation+0x84>
 8014f3e:	6931      	ldr	r1, [r6, #16]
 8014f40:	4628      	mov	r0, r5
 8014f42:	f003 f9ab 	bl	801829c <ucdr_serialize_string>
 8014f46:	6971      	ldr	r1, [r6, #20]
 8014f48:	4604      	mov	r4, r0
 8014f4a:	4628      	mov	r0, r5
 8014f4c:	f003 f9a6 	bl	801829c <ucdr_serialize_string>
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	f109 0901 	add.w	r9, r9, #1
 8014f56:	4004      	ands	r4, r0
 8014f58:	4599      	cmp	r9, r3
 8014f5a:	b2e4      	uxtb	r4, r4
 8014f5c:	d3ed      	bcc.n	8014f3a <uxr_serialize_AGENT_Representation+0x56>
 8014f5e:	ea08 0804 	and.w	r8, r8, r4
 8014f62:	4640      	mov	r0, r8
 8014f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f68:	f04f 0800 	mov.w	r8, #0
 8014f6c:	4640      	mov	r0, r8
 8014f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f72:	ea08 0800 	and.w	r8, r8, r0
 8014f76:	e7d2      	b.n	8014f1e <uxr_serialize_AGENT_Representation+0x3a>

08014f78 <uxr_serialize_DATAWRITER_Representation>:
 8014f78:	b570      	push	{r4, r5, r6, lr}
 8014f7a:	460d      	mov	r5, r1
 8014f7c:	7809      	ldrb	r1, [r1, #0]
 8014f7e:	4606      	mov	r6, r0
 8014f80:	f7fc fb56 	bl	8011630 <ucdr_serialize_uint8_t>
 8014f84:	4604      	mov	r4, r0
 8014f86:	b130      	cbz	r0, 8014f96 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014f88:	782b      	ldrb	r3, [r5, #0]
 8014f8a:	2b02      	cmp	r3, #2
 8014f8c:	d00c      	beq.n	8014fa8 <uxr_serialize_DATAWRITER_Representation+0x30>
 8014f8e:	2b03      	cmp	r3, #3
 8014f90:	d010      	beq.n	8014fb4 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8014f92:	2b01      	cmp	r3, #1
 8014f94:	d008      	beq.n	8014fa8 <uxr_serialize_DATAWRITER_Representation+0x30>
 8014f96:	2202      	movs	r2, #2
 8014f98:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8014f9c:	4630      	mov	r0, r6
 8014f9e:	f003 f80b 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8014fa2:	4020      	ands	r0, r4
 8014fa4:	b2c0      	uxtb	r0, r0
 8014fa6:	bd70      	pop	{r4, r5, r6, pc}
 8014fa8:	6869      	ldr	r1, [r5, #4]
 8014faa:	4630      	mov	r0, r6
 8014fac:	f003 f976 	bl	801829c <ucdr_serialize_string>
 8014fb0:	4604      	mov	r4, r0
 8014fb2:	e7f0      	b.n	8014f96 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014fb4:	4629      	mov	r1, r5
 8014fb6:	4630      	mov	r0, r6
 8014fb8:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8014fbc:	3104      	adds	r1, #4
 8014fbe:	f7fe f903 	bl	80131c8 <ucdr_serialize_sequence_uint8_t>
 8014fc2:	4604      	mov	r4, r0
 8014fc4:	e7e7      	b.n	8014f96 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014fc6:	bf00      	nop

08014fc8 <uxr_serialize_ObjectVariant.part.0>:
 8014fc8:	b570      	push	{r4, r5, r6, lr}
 8014fca:	780b      	ldrb	r3, [r1, #0]
 8014fcc:	3b01      	subs	r3, #1
 8014fce:	460c      	mov	r4, r1
 8014fd0:	4605      	mov	r5, r0
 8014fd2:	2b0d      	cmp	r3, #13
 8014fd4:	d854      	bhi.n	8015080 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014fd6:	e8df f003 	tbb	[pc, r3]
 8014fda:	0730      	.short	0x0730
 8014fdc:	07071b1b 	.word	0x07071b1b
 8014fe0:	0c530707 	.word	0x0c530707
 8014fe4:	494e0c0c 	.word	0x494e0c0c
 8014fe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014fec:	3104      	adds	r1, #4
 8014fee:	f7ff bfc3 	b.w	8014f78 <uxr_serialize_DATAWRITER_Representation>
 8014ff2:	7909      	ldrb	r1, [r1, #4]
 8014ff4:	f7fc fb1c 	bl	8011630 <ucdr_serialize_uint8_t>
 8014ff8:	b1e8      	cbz	r0, 8015036 <uxr_serialize_ObjectVariant.part.0+0x6e>
 8014ffa:	7923      	ldrb	r3, [r4, #4]
 8014ffc:	2b01      	cmp	r3, #1
 8014ffe:	d001      	beq.n	8015004 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8015000:	2b02      	cmp	r3, #2
 8015002:	d13d      	bne.n	8015080 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8015004:	68a1      	ldr	r1, [r4, #8]
 8015006:	4628      	mov	r0, r5
 8015008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801500c:	f003 b946 	b.w	801829c <ucdr_serialize_string>
 8015010:	7909      	ldrb	r1, [r1, #4]
 8015012:	f7fc fb0d 	bl	8011630 <ucdr_serialize_uint8_t>
 8015016:	4606      	mov	r6, r0
 8015018:	b120      	cbz	r0, 8015024 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801501a:	7923      	ldrb	r3, [r4, #4]
 801501c:	2b02      	cmp	r3, #2
 801501e:	d039      	beq.n	8015094 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8015020:	2b03      	cmp	r3, #3
 8015022:	d02f      	beq.n	8015084 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8015024:	2202      	movs	r2, #2
 8015026:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801502a:	4628      	mov	r0, r5
 801502c:	f002 ffc4 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8015030:	4030      	ands	r0, r6
 8015032:	b2c0      	uxtb	r0, r0
 8015034:	bd70      	pop	{r4, r5, r6, pc}
 8015036:	2000      	movs	r0, #0
 8015038:	bd70      	pop	{r4, r5, r6, pc}
 801503a:	7909      	ldrb	r1, [r1, #4]
 801503c:	f7fc faf8 	bl	8011630 <ucdr_serialize_uint8_t>
 8015040:	4606      	mov	r6, r0
 8015042:	b158      	cbz	r0, 801505c <uxr_serialize_ObjectVariant.part.0+0x94>
 8015044:	7923      	ldrb	r3, [r4, #4]
 8015046:	2b02      	cmp	r3, #2
 8015048:	d003      	beq.n	8015052 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801504a:	2b03      	cmp	r3, #3
 801504c:	d028      	beq.n	80150a0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801504e:	2b01      	cmp	r3, #1
 8015050:	d104      	bne.n	801505c <uxr_serialize_ObjectVariant.part.0+0x94>
 8015052:	68a1      	ldr	r1, [r4, #8]
 8015054:	4628      	mov	r0, r5
 8015056:	f003 f921 	bl	801829c <ucdr_serialize_string>
 801505a:	4606      	mov	r6, r0
 801505c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8015060:	4628      	mov	r0, r5
 8015062:	f7fd f821 	bl	80120a8 <ucdr_serialize_int16_t>
 8015066:	4030      	ands	r0, r6
 8015068:	b2c0      	uxtb	r0, r0
 801506a:	bd70      	pop	{r4, r5, r6, pc}
 801506c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015070:	3104      	adds	r1, #4
 8015072:	f7ff be7b 	b.w	8014d6c <uxr_serialize_CLIENT_Representation>
 8015076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801507a:	3104      	adds	r1, #4
 801507c:	f7ff bf32 	b.w	8014ee4 <uxr_serialize_AGENT_Representation>
 8015080:	2001      	movs	r0, #1
 8015082:	bd70      	pop	{r4, r5, r6, pc}
 8015084:	68a2      	ldr	r2, [r4, #8]
 8015086:	f104 010c 	add.w	r1, r4, #12
 801508a:	4628      	mov	r0, r5
 801508c:	f7fe f89c 	bl	80131c8 <ucdr_serialize_sequence_uint8_t>
 8015090:	4606      	mov	r6, r0
 8015092:	e7c7      	b.n	8015024 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015094:	68a1      	ldr	r1, [r4, #8]
 8015096:	4628      	mov	r0, r5
 8015098:	f003 f900 	bl	801829c <ucdr_serialize_string>
 801509c:	4606      	mov	r6, r0
 801509e:	e7c1      	b.n	8015024 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80150a0:	68a2      	ldr	r2, [r4, #8]
 80150a2:	f104 010c 	add.w	r1, r4, #12
 80150a6:	4628      	mov	r0, r5
 80150a8:	f7fe f88e 	bl	80131c8 <ucdr_serialize_sequence_uint8_t>
 80150ac:	4606      	mov	r6, r0
 80150ae:	e7d5      	b.n	801505c <uxr_serialize_ObjectVariant.part.0+0x94>

080150b0 <uxr_deserialize_DATAWRITER_Representation>:
 80150b0:	b570      	push	{r4, r5, r6, lr}
 80150b2:	4606      	mov	r6, r0
 80150b4:	460d      	mov	r5, r1
 80150b6:	f7fc fad1 	bl	801165c <ucdr_deserialize_uint8_t>
 80150ba:	4604      	mov	r4, r0
 80150bc:	b130      	cbz	r0, 80150cc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80150be:	782b      	ldrb	r3, [r5, #0]
 80150c0:	2b02      	cmp	r3, #2
 80150c2:	d00c      	beq.n	80150de <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80150c4:	2b03      	cmp	r3, #3
 80150c6:	d012      	beq.n	80150ee <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80150c8:	2b01      	cmp	r3, #1
 80150ca:	d008      	beq.n	80150de <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80150cc:	2202      	movs	r2, #2
 80150ce:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80150d2:	4630      	mov	r0, r6
 80150d4:	f002 ffd4 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 80150d8:	4020      	ands	r0, r4
 80150da:	b2c0      	uxtb	r0, r0
 80150dc:	bd70      	pop	{r4, r5, r6, pc}
 80150de:	6869      	ldr	r1, [r5, #4]
 80150e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80150e4:	4630      	mov	r0, r6
 80150e6:	f003 f8e9 	bl	80182bc <ucdr_deserialize_string>
 80150ea:	4604      	mov	r4, r0
 80150ec:	e7ee      	b.n	80150cc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80150ee:	1d2b      	adds	r3, r5, #4
 80150f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80150f4:	f105 0108 	add.w	r1, r5, #8
 80150f8:	4630      	mov	r0, r6
 80150fa:	f7fe f877 	bl	80131ec <ucdr_deserialize_sequence_uint8_t>
 80150fe:	4604      	mov	r4, r0
 8015100:	e7e4      	b.n	80150cc <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015102:	bf00      	nop

08015104 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8015104:	b570      	push	{r4, r5, r6, lr}
 8015106:	460d      	mov	r5, r1
 8015108:	7809      	ldrb	r1, [r1, #0]
 801510a:	4606      	mov	r6, r0
 801510c:	f7fc fa62 	bl	80115d4 <ucdr_serialize_bool>
 8015110:	782b      	ldrb	r3, [r5, #0]
 8015112:	4604      	mov	r4, r0
 8015114:	b94b      	cbnz	r3, 801512a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8015116:	7a29      	ldrb	r1, [r5, #8]
 8015118:	4630      	mov	r0, r6
 801511a:	f7fc fa5b 	bl	80115d4 <ucdr_serialize_bool>
 801511e:	7a2b      	ldrb	r3, [r5, #8]
 8015120:	4004      	ands	r4, r0
 8015122:	b2e4      	uxtb	r4, r4
 8015124:	b943      	cbnz	r3, 8015138 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8015126:	4620      	mov	r0, r4
 8015128:	bd70      	pop	{r4, r5, r6, pc}
 801512a:	6869      	ldr	r1, [r5, #4]
 801512c:	4630      	mov	r0, r6
 801512e:	f003 f8b5 	bl	801829c <ucdr_serialize_string>
 8015132:	4004      	ands	r4, r0
 8015134:	b2e4      	uxtb	r4, r4
 8015136:	e7ee      	b.n	8015116 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8015138:	68e9      	ldr	r1, [r5, #12]
 801513a:	4630      	mov	r0, r6
 801513c:	f003 f8ae 	bl	801829c <ucdr_serialize_string>
 8015140:	4004      	ands	r4, r0
 8015142:	4620      	mov	r0, r4
 8015144:	bd70      	pop	{r4, r5, r6, pc}
 8015146:	bf00      	nop

08015148 <uxr_serialize_OBJK_Topic_Binary>:
 8015148:	b570      	push	{r4, r5, r6, lr}
 801514a:	460d      	mov	r5, r1
 801514c:	6809      	ldr	r1, [r1, #0]
 801514e:	4606      	mov	r6, r0
 8015150:	f003 f8a4 	bl	801829c <ucdr_serialize_string>
 8015154:	7929      	ldrb	r1, [r5, #4]
 8015156:	4604      	mov	r4, r0
 8015158:	4630      	mov	r0, r6
 801515a:	f7fc fa3b 	bl	80115d4 <ucdr_serialize_bool>
 801515e:	792b      	ldrb	r3, [r5, #4]
 8015160:	4004      	ands	r4, r0
 8015162:	b2e4      	uxtb	r4, r4
 8015164:	b943      	cbnz	r3, 8015178 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8015166:	7b29      	ldrb	r1, [r5, #12]
 8015168:	4630      	mov	r0, r6
 801516a:	f7fc fa33 	bl	80115d4 <ucdr_serialize_bool>
 801516e:	7b2b      	ldrb	r3, [r5, #12]
 8015170:	4004      	ands	r4, r0
 8015172:	b93b      	cbnz	r3, 8015184 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8015174:	4620      	mov	r0, r4
 8015176:	bd70      	pop	{r4, r5, r6, pc}
 8015178:	68a9      	ldr	r1, [r5, #8]
 801517a:	4630      	mov	r0, r6
 801517c:	f003 f88e 	bl	801829c <ucdr_serialize_string>
 8015180:	4004      	ands	r4, r0
 8015182:	e7f0      	b.n	8015166 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8015184:	6929      	ldr	r1, [r5, #16]
 8015186:	4630      	mov	r0, r6
 8015188:	f003 f888 	bl	801829c <ucdr_serialize_string>
 801518c:	4004      	ands	r4, r0
 801518e:	b2e4      	uxtb	r4, r4
 8015190:	4620      	mov	r0, r4
 8015192:	bd70      	pop	{r4, r5, r6, pc}

08015194 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8015194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015198:	460c      	mov	r4, r1
 801519a:	7809      	ldrb	r1, [r1, #0]
 801519c:	4606      	mov	r6, r0
 801519e:	f7fc fa19 	bl	80115d4 <ucdr_serialize_bool>
 80151a2:	7823      	ldrb	r3, [r4, #0]
 80151a4:	4605      	mov	r5, r0
 80151a6:	b96b      	cbnz	r3, 80151c4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80151a8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80151ac:	4630      	mov	r0, r6
 80151ae:	f7fc fa11 	bl	80115d4 <ucdr_serialize_bool>
 80151b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80151b6:	4005      	ands	r5, r0
 80151b8:	b2ed      	uxtb	r5, r5
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d169      	bne.n	8015292 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 80151be:	4628      	mov	r0, r5
 80151c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151c4:	6861      	ldr	r1, [r4, #4]
 80151c6:	4630      	mov	r0, r6
 80151c8:	f7fc fc48 	bl	8011a5c <ucdr_serialize_uint32_t>
 80151cc:	6863      	ldr	r3, [r4, #4]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d06b      	beq.n	80152aa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80151d2:	2800      	cmp	r0, #0
 80151d4:	d067      	beq.n	80152a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80151d6:	68a1      	ldr	r1, [r4, #8]
 80151d8:	4630      	mov	r0, r6
 80151da:	f003 f85f 	bl	801829c <ucdr_serialize_string>
 80151de:	6863      	ldr	r3, [r4, #4]
 80151e0:	2b01      	cmp	r3, #1
 80151e2:	d953      	bls.n	801528c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80151e4:	2800      	cmp	r0, #0
 80151e6:	d05e      	beq.n	80152a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80151e8:	68e1      	ldr	r1, [r4, #12]
 80151ea:	4630      	mov	r0, r6
 80151ec:	f003 f856 	bl	801829c <ucdr_serialize_string>
 80151f0:	6863      	ldr	r3, [r4, #4]
 80151f2:	2b02      	cmp	r3, #2
 80151f4:	d94a      	bls.n	801528c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80151f6:	2800      	cmp	r0, #0
 80151f8:	d055      	beq.n	80152a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80151fa:	6921      	ldr	r1, [r4, #16]
 80151fc:	4630      	mov	r0, r6
 80151fe:	f003 f84d 	bl	801829c <ucdr_serialize_string>
 8015202:	6863      	ldr	r3, [r4, #4]
 8015204:	2b03      	cmp	r3, #3
 8015206:	d941      	bls.n	801528c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015208:	2800      	cmp	r0, #0
 801520a:	d04c      	beq.n	80152a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801520c:	6961      	ldr	r1, [r4, #20]
 801520e:	4630      	mov	r0, r6
 8015210:	f003 f844 	bl	801829c <ucdr_serialize_string>
 8015214:	6863      	ldr	r3, [r4, #4]
 8015216:	2b04      	cmp	r3, #4
 8015218:	d938      	bls.n	801528c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801521a:	2800      	cmp	r0, #0
 801521c:	d043      	beq.n	80152a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801521e:	69a1      	ldr	r1, [r4, #24]
 8015220:	4630      	mov	r0, r6
 8015222:	f003 f83b 	bl	801829c <ucdr_serialize_string>
 8015226:	6863      	ldr	r3, [r4, #4]
 8015228:	2b05      	cmp	r3, #5
 801522a:	d92f      	bls.n	801528c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801522c:	2800      	cmp	r0, #0
 801522e:	d03a      	beq.n	80152a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015230:	69e1      	ldr	r1, [r4, #28]
 8015232:	4630      	mov	r0, r6
 8015234:	f003 f832 	bl	801829c <ucdr_serialize_string>
 8015238:	6863      	ldr	r3, [r4, #4]
 801523a:	2b06      	cmp	r3, #6
 801523c:	d926      	bls.n	801528c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801523e:	b390      	cbz	r0, 80152a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015240:	6a21      	ldr	r1, [r4, #32]
 8015242:	4630      	mov	r0, r6
 8015244:	f003 f82a 	bl	801829c <ucdr_serialize_string>
 8015248:	6863      	ldr	r3, [r4, #4]
 801524a:	2b07      	cmp	r3, #7
 801524c:	d91e      	bls.n	801528c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801524e:	b350      	cbz	r0, 80152a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015250:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015252:	4630      	mov	r0, r6
 8015254:	f003 f822 	bl	801829c <ucdr_serialize_string>
 8015258:	6863      	ldr	r3, [r4, #4]
 801525a:	2b08      	cmp	r3, #8
 801525c:	d916      	bls.n	801528c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801525e:	b310      	cbz	r0, 80152a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015260:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015262:	4630      	mov	r0, r6
 8015264:	f003 f81a 	bl	801829c <ucdr_serialize_string>
 8015268:	6863      	ldr	r3, [r4, #4]
 801526a:	2b09      	cmp	r3, #9
 801526c:	d90e      	bls.n	801528c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801526e:	b1d0      	cbz	r0, 80152a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015270:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8015274:	2709      	movs	r7, #9
 8015276:	e000      	b.n	801527a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8015278:	b1a8      	cbz	r0, 80152a6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801527a:	f858 1b04 	ldr.w	r1, [r8], #4
 801527e:	4630      	mov	r0, r6
 8015280:	f003 f80c 	bl	801829c <ucdr_serialize_string>
 8015284:	6862      	ldr	r2, [r4, #4]
 8015286:	3701      	adds	r7, #1
 8015288:	4297      	cmp	r7, r2
 801528a:	d3f5      	bcc.n	8015278 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 801528c:	4005      	ands	r5, r0
 801528e:	b2ed      	uxtb	r5, r5
 8015290:	e78a      	b.n	80151a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015292:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015294:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8015298:	4630      	mov	r0, r6
 801529a:	f7fd ff95 	bl	80131c8 <ucdr_serialize_sequence_uint8_t>
 801529e:	4005      	ands	r5, r0
 80152a0:	4628      	mov	r0, r5
 80152a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152a6:	2500      	movs	r5, #0
 80152a8:	e77e      	b.n	80151a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80152aa:	4028      	ands	r0, r5
 80152ac:	b2c5      	uxtb	r5, r0
 80152ae:	e77b      	b.n	80151a8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

080152b0 <uxr_serialize_OBJK_Publisher_Binary>:
 80152b0:	b570      	push	{r4, r5, r6, lr}
 80152b2:	460d      	mov	r5, r1
 80152b4:	7809      	ldrb	r1, [r1, #0]
 80152b6:	4606      	mov	r6, r0
 80152b8:	f7fc f98c 	bl	80115d4 <ucdr_serialize_bool>
 80152bc:	782b      	ldrb	r3, [r5, #0]
 80152be:	4604      	mov	r4, r0
 80152c0:	b94b      	cbnz	r3, 80152d6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 80152c2:	7a29      	ldrb	r1, [r5, #8]
 80152c4:	4630      	mov	r0, r6
 80152c6:	f7fc f985 	bl	80115d4 <ucdr_serialize_bool>
 80152ca:	7a2b      	ldrb	r3, [r5, #8]
 80152cc:	4004      	ands	r4, r0
 80152ce:	b2e4      	uxtb	r4, r4
 80152d0:	b943      	cbnz	r3, 80152e4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 80152d2:	4620      	mov	r0, r4
 80152d4:	bd70      	pop	{r4, r5, r6, pc}
 80152d6:	6869      	ldr	r1, [r5, #4]
 80152d8:	4630      	mov	r0, r6
 80152da:	f002 ffdf 	bl	801829c <ucdr_serialize_string>
 80152de:	4004      	ands	r4, r0
 80152e0:	b2e4      	uxtb	r4, r4
 80152e2:	e7ee      	b.n	80152c2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 80152e4:	f105 010c 	add.w	r1, r5, #12
 80152e8:	4630      	mov	r0, r6
 80152ea:	f7ff ff53 	bl	8015194 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 80152ee:	4004      	ands	r4, r0
 80152f0:	4620      	mov	r0, r4
 80152f2:	bd70      	pop	{r4, r5, r6, pc}

080152f4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 80152f4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 80152f8:	4688      	mov	r8, r1
 80152fa:	8809      	ldrh	r1, [r1, #0]
 80152fc:	4681      	mov	r9, r0
 80152fe:	f7fc f9c3 	bl	8011688 <ucdr_serialize_uint16_t>
 8015302:	f898 1002 	ldrb.w	r1, [r8, #2]
 8015306:	4606      	mov	r6, r0
 8015308:	4648      	mov	r0, r9
 801530a:	f7fc f963 	bl	80115d4 <ucdr_serialize_bool>
 801530e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8015312:	4006      	ands	r6, r0
 8015314:	b2f5      	uxtb	r5, r6
 8015316:	b9eb      	cbnz	r3, 8015354 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8015318:	f898 1006 	ldrb.w	r1, [r8, #6]
 801531c:	4648      	mov	r0, r9
 801531e:	f7fc f959 	bl	80115d4 <ucdr_serialize_bool>
 8015322:	f898 3006 	ldrb.w	r3, [r8, #6]
 8015326:	4005      	ands	r5, r0
 8015328:	bb7b      	cbnz	r3, 801538a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801532a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801532e:	4648      	mov	r0, r9
 8015330:	f7fc f950 	bl	80115d4 <ucdr_serialize_bool>
 8015334:	f898 300c 	ldrb.w	r3, [r8, #12]
 8015338:	4005      	ands	r5, r0
 801533a:	b9f3      	cbnz	r3, 801537a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801533c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8015340:	4648      	mov	r0, r9
 8015342:	f7fc f947 	bl	80115d4 <ucdr_serialize_bool>
 8015346:	f898 3014 	ldrb.w	r3, [r8, #20]
 801534a:	4005      	ands	r5, r0
 801534c:	b94b      	cbnz	r3, 8015362 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 801534e:	4628      	mov	r0, r5
 8015350:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8015354:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8015358:	4648      	mov	r0, r9
 801535a:	f7fc f995 	bl	8011688 <ucdr_serialize_uint16_t>
 801535e:	4005      	ands	r5, r0
 8015360:	e7da      	b.n	8015318 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8015362:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8015366:	f108 011c 	add.w	r1, r8, #28
 801536a:	4648      	mov	r0, r9
 801536c:	f7fd ff2c 	bl	80131c8 <ucdr_serialize_sequence_uint8_t>
 8015370:	4028      	ands	r0, r5
 8015372:	b2c5      	uxtb	r5, r0
 8015374:	4628      	mov	r0, r5
 8015376:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801537a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801537e:	4648      	mov	r0, r9
 8015380:	f7fc fb6c 	bl	8011a5c <ucdr_serialize_uint32_t>
 8015384:	4028      	ands	r0, r5
 8015386:	b2c5      	uxtb	r5, r0
 8015388:	e7d8      	b.n	801533c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 801538a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801538e:	4648      	mov	r0, r9
 8015390:	f7fc fb64 	bl	8011a5c <ucdr_serialize_uint32_t>
 8015394:	4028      	ands	r0, r5
 8015396:	b2c5      	uxtb	r5, r0
 8015398:	e7c7      	b.n	801532a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 801539a:	bf00      	nop

0801539c <uxr_serialize_OBJK_DataWriter_Binary>:
 801539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801539e:	2202      	movs	r2, #2
 80153a0:	460d      	mov	r5, r1
 80153a2:	4606      	mov	r6, r0
 80153a4:	f002 fe08 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 80153a8:	78a9      	ldrb	r1, [r5, #2]
 80153aa:	4604      	mov	r4, r0
 80153ac:	4630      	mov	r0, r6
 80153ae:	f7fc f911 	bl	80115d4 <ucdr_serialize_bool>
 80153b2:	78ab      	ldrb	r3, [r5, #2]
 80153b4:	4004      	ands	r4, r0
 80153b6:	b2e4      	uxtb	r4, r4
 80153b8:	b90b      	cbnz	r3, 80153be <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80153ba:	4620      	mov	r0, r4
 80153bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153be:	f105 0108 	add.w	r1, r5, #8
 80153c2:	4630      	mov	r0, r6
 80153c4:	f7ff ff96 	bl	80152f4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 80153c8:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 80153cc:	4607      	mov	r7, r0
 80153ce:	4630      	mov	r0, r6
 80153d0:	f7fc f900 	bl	80115d4 <ucdr_serialize_bool>
 80153d4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80153d8:	4038      	ands	r0, r7
 80153da:	b2c7      	uxtb	r7, r0
 80153dc:	b913      	cbnz	r3, 80153e4 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 80153de:	403c      	ands	r4, r7
 80153e0:	4620      	mov	r0, r4
 80153e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153e4:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 80153e8:	4630      	mov	r0, r6
 80153ea:	f7fc fd8d 	bl	8011f08 <ucdr_serialize_uint64_t>
 80153ee:	4007      	ands	r7, r0
 80153f0:	e7f5      	b.n	80153de <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 80153f2:	bf00      	nop

080153f4 <uxr_deserialize_ObjectVariant>:
 80153f4:	b570      	push	{r4, r5, r6, lr}
 80153f6:	4605      	mov	r5, r0
 80153f8:	460e      	mov	r6, r1
 80153fa:	f7fc f92f 	bl	801165c <ucdr_deserialize_uint8_t>
 80153fe:	b168      	cbz	r0, 801541c <uxr_deserialize_ObjectVariant+0x28>
 8015400:	7833      	ldrb	r3, [r6, #0]
 8015402:	3b01      	subs	r3, #1
 8015404:	4604      	mov	r4, r0
 8015406:	2b0d      	cmp	r3, #13
 8015408:	d809      	bhi.n	801541e <uxr_deserialize_ObjectVariant+0x2a>
 801540a:	e8df f003 	tbb	[pc, r3]
 801540e:	0a41      	.short	0x0a41
 8015410:	0a0a2323 	.word	0x0a0a2323
 8015414:	10080a0a 	.word	0x10080a0a
 8015418:	565c1010 	.word	0x565c1010
 801541c:	2400      	movs	r4, #0
 801541e:	4620      	mov	r0, r4
 8015420:	bd70      	pop	{r4, r5, r6, pc}
 8015422:	1d31      	adds	r1, r6, #4
 8015424:	4628      	mov	r0, r5
 8015426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801542a:	f7ff be41 	b.w	80150b0 <uxr_deserialize_DATAWRITER_Representation>
 801542e:	1d31      	adds	r1, r6, #4
 8015430:	4628      	mov	r0, r5
 8015432:	f7fc f913 	bl	801165c <ucdr_deserialize_uint8_t>
 8015436:	2800      	cmp	r0, #0
 8015438:	d0f0      	beq.n	801541c <uxr_deserialize_ObjectVariant+0x28>
 801543a:	7933      	ldrb	r3, [r6, #4]
 801543c:	2b01      	cmp	r3, #1
 801543e:	d001      	beq.n	8015444 <uxr_deserialize_ObjectVariant+0x50>
 8015440:	2b02      	cmp	r3, #2
 8015442:	d1ec      	bne.n	801541e <uxr_deserialize_ObjectVariant+0x2a>
 8015444:	68b1      	ldr	r1, [r6, #8]
 8015446:	4628      	mov	r0, r5
 8015448:	f44f 7200 	mov.w	r2, #512	; 0x200
 801544c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015450:	f002 bf34 	b.w	80182bc <ucdr_deserialize_string>
 8015454:	1d31      	adds	r1, r6, #4
 8015456:	4628      	mov	r0, r5
 8015458:	f7fc f900 	bl	801165c <ucdr_deserialize_uint8_t>
 801545c:	4604      	mov	r4, r0
 801545e:	b170      	cbz	r0, 801547e <uxr_deserialize_ObjectVariant+0x8a>
 8015460:	7933      	ldrb	r3, [r6, #4]
 8015462:	2b02      	cmp	r3, #2
 8015464:	d04c      	beq.n	8015500 <uxr_deserialize_ObjectVariant+0x10c>
 8015466:	2b03      	cmp	r3, #3
 8015468:	d109      	bne.n	801547e <uxr_deserialize_ObjectVariant+0x8a>
 801546a:	f106 0308 	add.w	r3, r6, #8
 801546e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015472:	f106 010c 	add.w	r1, r6, #12
 8015476:	4628      	mov	r0, r5
 8015478:	f7fd feb8 	bl	80131ec <ucdr_deserialize_sequence_uint8_t>
 801547c:	4604      	mov	r4, r0
 801547e:	2202      	movs	r2, #2
 8015480:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8015484:	4628      	mov	r0, r5
 8015486:	f002 fdfb 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 801548a:	4020      	ands	r0, r4
 801548c:	b2c4      	uxtb	r4, r0
 801548e:	e7c6      	b.n	801541e <uxr_deserialize_ObjectVariant+0x2a>
 8015490:	1d31      	adds	r1, r6, #4
 8015492:	4628      	mov	r0, r5
 8015494:	f7fc f8e2 	bl	801165c <ucdr_deserialize_uint8_t>
 8015498:	4604      	mov	r4, r0
 801549a:	b130      	cbz	r0, 80154aa <uxr_deserialize_ObjectVariant+0xb6>
 801549c:	7933      	ldrb	r3, [r6, #4]
 801549e:	2b02      	cmp	r3, #2
 80154a0:	d036      	beq.n	8015510 <uxr_deserialize_ObjectVariant+0x11c>
 80154a2:	2b03      	cmp	r3, #3
 80154a4:	d03c      	beq.n	8015520 <uxr_deserialize_ObjectVariant+0x12c>
 80154a6:	2b01      	cmp	r3, #1
 80154a8:	d032      	beq.n	8015510 <uxr_deserialize_ObjectVariant+0x11c>
 80154aa:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80154ae:	4628      	mov	r0, r5
 80154b0:	f7fc fe7a 	bl	80121a8 <ucdr_deserialize_int16_t>
 80154b4:	4020      	ands	r0, r4
 80154b6:	b2c4      	uxtb	r4, r0
 80154b8:	e7b1      	b.n	801541e <uxr_deserialize_ObjectVariant+0x2a>
 80154ba:	1d31      	adds	r1, r6, #4
 80154bc:	4628      	mov	r0, r5
 80154be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80154c2:	f7ff bcab 	b.w	8014e1c <uxr_deserialize_CLIENT_Representation>
 80154c6:	2204      	movs	r2, #4
 80154c8:	18b1      	adds	r1, r6, r2
 80154ca:	4628      	mov	r0, r5
 80154cc:	f002 fdd8 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 80154d0:	2202      	movs	r2, #2
 80154d2:	f106 0108 	add.w	r1, r6, #8
 80154d6:	4604      	mov	r4, r0
 80154d8:	4628      	mov	r0, r5
 80154da:	f002 fdd1 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 80154de:	2202      	movs	r2, #2
 80154e0:	4004      	ands	r4, r0
 80154e2:	f106 010a 	add.w	r1, r6, #10
 80154e6:	4628      	mov	r0, r5
 80154e8:	f002 fdca 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 80154ec:	b2e4      	uxtb	r4, r4
 80154ee:	4603      	mov	r3, r0
 80154f0:	f106 010c 	add.w	r1, r6, #12
 80154f4:	4628      	mov	r0, r5
 80154f6:	401c      	ands	r4, r3
 80154f8:	f7fc f882 	bl	8011600 <ucdr_deserialize_bool>
 80154fc:	4004      	ands	r4, r0
 80154fe:	e78e      	b.n	801541e <uxr_deserialize_ObjectVariant+0x2a>
 8015500:	68b1      	ldr	r1, [r6, #8]
 8015502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015506:	4628      	mov	r0, r5
 8015508:	f002 fed8 	bl	80182bc <ucdr_deserialize_string>
 801550c:	4604      	mov	r4, r0
 801550e:	e7b6      	b.n	801547e <uxr_deserialize_ObjectVariant+0x8a>
 8015510:	68b1      	ldr	r1, [r6, #8]
 8015512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015516:	4628      	mov	r0, r5
 8015518:	f002 fed0 	bl	80182bc <ucdr_deserialize_string>
 801551c:	4604      	mov	r4, r0
 801551e:	e7c4      	b.n	80154aa <uxr_deserialize_ObjectVariant+0xb6>
 8015520:	f106 0308 	add.w	r3, r6, #8
 8015524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015528:	f106 010c 	add.w	r1, r6, #12
 801552c:	4628      	mov	r0, r5
 801552e:	f7fd fe5d 	bl	80131ec <ucdr_deserialize_sequence_uint8_t>
 8015532:	4604      	mov	r4, r0
 8015534:	e7b9      	b.n	80154aa <uxr_deserialize_ObjectVariant+0xb6>
 8015536:	bf00      	nop

08015538 <uxr_deserialize_BaseObjectRequest>:
 8015538:	b570      	push	{r4, r5, r6, lr}
 801553a:	2202      	movs	r2, #2
 801553c:	4605      	mov	r5, r0
 801553e:	460e      	mov	r6, r1
 8015540:	f002 fd9e 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 8015544:	2202      	movs	r2, #2
 8015546:	4604      	mov	r4, r0
 8015548:	18b1      	adds	r1, r6, r2
 801554a:	4628      	mov	r0, r5
 801554c:	f002 fd98 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 8015550:	4020      	ands	r0, r4
 8015552:	b2c0      	uxtb	r0, r0
 8015554:	bd70      	pop	{r4, r5, r6, pc}
 8015556:	bf00      	nop

08015558 <uxr_serialize_ActivityInfoVariant>:
 8015558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801555c:	460d      	mov	r5, r1
 801555e:	7809      	ldrb	r1, [r1, #0]
 8015560:	4607      	mov	r7, r0
 8015562:	f7fc f865 	bl	8011630 <ucdr_serialize_uint8_t>
 8015566:	4681      	mov	r9, r0
 8015568:	b138      	cbz	r0, 801557a <uxr_serialize_ActivityInfoVariant+0x22>
 801556a:	782b      	ldrb	r3, [r5, #0]
 801556c:	2b06      	cmp	r3, #6
 801556e:	f000 8082 	beq.w	8015676 <uxr_serialize_ActivityInfoVariant+0x11e>
 8015572:	2b0d      	cmp	r3, #13
 8015574:	d016      	beq.n	80155a4 <uxr_serialize_ActivityInfoVariant+0x4c>
 8015576:	2b05      	cmp	r3, #5
 8015578:	d002      	beq.n	8015580 <uxr_serialize_ActivityInfoVariant+0x28>
 801557a:	4648      	mov	r0, r9
 801557c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015580:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8015584:	4638      	mov	r0, r7
 8015586:	f7fc fd8f 	bl	80120a8 <ucdr_serialize_int16_t>
 801558a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 801558e:	4681      	mov	r9, r0
 8015590:	4638      	mov	r0, r7
 8015592:	f7fc fcb9 	bl	8011f08 <ucdr_serialize_uint64_t>
 8015596:	ea09 0000 	and.w	r0, r9, r0
 801559a:	fa5f f980 	uxtb.w	r9, r0
 801559e:	4648      	mov	r0, r9
 80155a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155a4:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80155a8:	4638      	mov	r0, r7
 80155aa:	f7fc fd7d 	bl	80120a8 <ucdr_serialize_int16_t>
 80155ae:	68e9      	ldr	r1, [r5, #12]
 80155b0:	4681      	mov	r9, r0
 80155b2:	4638      	mov	r0, r7
 80155b4:	f7fc fa52 	bl	8011a5c <ucdr_serialize_uint32_t>
 80155b8:	68eb      	ldr	r3, [r5, #12]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d0eb      	beq.n	8015596 <uxr_serialize_ActivityInfoVariant+0x3e>
 80155be:	b320      	cbz	r0, 801560a <uxr_serialize_ActivityInfoVariant+0xb2>
 80155c0:	f105 080c 	add.w	r8, r5, #12
 80155c4:	2600      	movs	r6, #0
 80155c6:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 80155ca:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 80155ce:	f89a 1010 	ldrb.w	r1, [sl, #16]
 80155d2:	4638      	mov	r0, r7
 80155d4:	f7fc f82c 	bl	8011630 <ucdr_serialize_uint8_t>
 80155d8:	2800      	cmp	r0, #0
 80155da:	d053      	beq.n	8015684 <uxr_serialize_ActivityInfoVariant+0x12c>
 80155dc:	f89a 3010 	ldrb.w	r3, [sl, #16]
 80155e0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80155e4:	0074      	lsls	r4, r6, #1
 80155e6:	00c9      	lsls	r1, r1, #3
 80155e8:	2b03      	cmp	r3, #3
 80155ea:	d854      	bhi.n	8015696 <uxr_serialize_ActivityInfoVariant+0x13e>
 80155ec:	e8df f003 	tbb	[pc, r3]
 80155f0:	02102132 	.word	0x02102132
 80155f4:	4441      	add	r1, r8
 80155f6:	4638      	mov	r0, r7
 80155f8:	6889      	ldr	r1, [r1, #8]
 80155fa:	f002 fe4f 	bl	801829c <ucdr_serialize_string>
 80155fe:	68ea      	ldr	r2, [r5, #12]
 8015600:	3601      	adds	r6, #1
 8015602:	4296      	cmp	r6, r2
 8015604:	d242      	bcs.n	801568c <uxr_serialize_ActivityInfoVariant+0x134>
 8015606:	2800      	cmp	r0, #0
 8015608:	d1dd      	bne.n	80155c6 <uxr_serialize_ActivityInfoVariant+0x6e>
 801560a:	f04f 0900 	mov.w	r9, #0
 801560e:	e7b4      	b.n	801557a <uxr_serialize_ActivityInfoVariant+0x22>
 8015610:	3108      	adds	r1, #8
 8015612:	4441      	add	r1, r8
 8015614:	2210      	movs	r2, #16
 8015616:	4638      	mov	r0, r7
 8015618:	f002 fcce 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 801561c:	4434      	add	r4, r6
 801561e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015622:	4604      	mov	r4, r0
 8015624:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8015626:	4638      	mov	r0, r7
 8015628:	f7fc fa18 	bl	8011a5c <ucdr_serialize_uint32_t>
 801562c:	4020      	ands	r0, r4
 801562e:	b2c0      	uxtb	r0, r0
 8015630:	e7e5      	b.n	80155fe <uxr_serialize_ActivityInfoVariant+0xa6>
 8015632:	3108      	adds	r1, #8
 8015634:	4441      	add	r1, r8
 8015636:	2204      	movs	r2, #4
 8015638:	4638      	mov	r0, r7
 801563a:	f002 fcbd 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 801563e:	4434      	add	r4, r6
 8015640:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015644:	4604      	mov	r4, r0
 8015646:	8b19      	ldrh	r1, [r3, #24]
 8015648:	4638      	mov	r0, r7
 801564a:	f7fc f81d 	bl	8011688 <ucdr_serialize_uint16_t>
 801564e:	4020      	ands	r0, r4
 8015650:	b2c0      	uxtb	r0, r0
 8015652:	e7d4      	b.n	80155fe <uxr_serialize_ActivityInfoVariant+0xa6>
 8015654:	3108      	adds	r1, #8
 8015656:	4441      	add	r1, r8
 8015658:	2202      	movs	r2, #2
 801565a:	4638      	mov	r0, r7
 801565c:	f002 fcac 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8015660:	4434      	add	r4, r6
 8015662:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8015666:	4604      	mov	r4, r0
 8015668:	7d99      	ldrb	r1, [r3, #22]
 801566a:	4638      	mov	r0, r7
 801566c:	f7fb ffe0 	bl	8011630 <ucdr_serialize_uint8_t>
 8015670:	4020      	ands	r0, r4
 8015672:	b2c0      	uxtb	r0, r0
 8015674:	e7c3      	b.n	80155fe <uxr_serialize_ActivityInfoVariant+0xa6>
 8015676:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801567a:	4638      	mov	r0, r7
 801567c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015680:	f7fc bd12 	b.w	80120a8 <ucdr_serialize_int16_t>
 8015684:	68ea      	ldr	r2, [r5, #12]
 8015686:	3601      	adds	r6, #1
 8015688:	42b2      	cmp	r2, r6
 801568a:	d8be      	bhi.n	801560a <uxr_serialize_ActivityInfoVariant+0xb2>
 801568c:	ea09 0900 	and.w	r9, r9, r0
 8015690:	fa5f f989 	uxtb.w	r9, r9
 8015694:	e771      	b.n	801557a <uxr_serialize_ActivityInfoVariant+0x22>
 8015696:	68eb      	ldr	r3, [r5, #12]
 8015698:	3601      	adds	r6, #1
 801569a:	429e      	cmp	r6, r3
 801569c:	f10a 0a18 	add.w	sl, sl, #24
 80156a0:	d395      	bcc.n	80155ce <uxr_serialize_ActivityInfoVariant+0x76>
 80156a2:	e76a      	b.n	801557a <uxr_serialize_ActivityInfoVariant+0x22>

080156a4 <uxr_deserialize_BaseObjectReply>:
 80156a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156a8:	2202      	movs	r2, #2
 80156aa:	4606      	mov	r6, r0
 80156ac:	460f      	mov	r7, r1
 80156ae:	f002 fce7 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 80156b2:	2202      	movs	r2, #2
 80156b4:	18b9      	adds	r1, r7, r2
 80156b6:	4605      	mov	r5, r0
 80156b8:	4630      	mov	r0, r6
 80156ba:	f002 fce1 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 80156be:	1d39      	adds	r1, r7, #4
 80156c0:	4680      	mov	r8, r0
 80156c2:	4630      	mov	r0, r6
 80156c4:	f7fb ffca 	bl	801165c <ucdr_deserialize_uint8_t>
 80156c8:	1d79      	adds	r1, r7, #5
 80156ca:	4604      	mov	r4, r0
 80156cc:	4630      	mov	r0, r6
 80156ce:	f7fb ffc5 	bl	801165c <ucdr_deserialize_uint8_t>
 80156d2:	ea05 0508 	and.w	r5, r5, r8
 80156d6:	402c      	ands	r4, r5
 80156d8:	4020      	ands	r0, r4
 80156da:	b2c0      	uxtb	r0, r0
 80156dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080156e0 <uxr_serialize_ReadSpecification>:
 80156e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156e4:	460e      	mov	r6, r1
 80156e6:	7809      	ldrb	r1, [r1, #0]
 80156e8:	4607      	mov	r7, r0
 80156ea:	f7fb ffa1 	bl	8011630 <ucdr_serialize_uint8_t>
 80156ee:	7871      	ldrb	r1, [r6, #1]
 80156f0:	4604      	mov	r4, r0
 80156f2:	4638      	mov	r0, r7
 80156f4:	f7fb ff9c 	bl	8011630 <ucdr_serialize_uint8_t>
 80156f8:	78b1      	ldrb	r1, [r6, #2]
 80156fa:	4004      	ands	r4, r0
 80156fc:	4638      	mov	r0, r7
 80156fe:	f7fb ff69 	bl	80115d4 <ucdr_serialize_bool>
 8015702:	78b3      	ldrb	r3, [r6, #2]
 8015704:	b2e4      	uxtb	r4, r4
 8015706:	4004      	ands	r4, r0
 8015708:	b94b      	cbnz	r3, 801571e <uxr_serialize_ReadSpecification+0x3e>
 801570a:	7a31      	ldrb	r1, [r6, #8]
 801570c:	4638      	mov	r0, r7
 801570e:	f7fb ff61 	bl	80115d4 <ucdr_serialize_bool>
 8015712:	7a33      	ldrb	r3, [r6, #8]
 8015714:	4004      	ands	r4, r0
 8015716:	b943      	cbnz	r3, 801572a <uxr_serialize_ReadSpecification+0x4a>
 8015718:	4620      	mov	r0, r4
 801571a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801571e:	6871      	ldr	r1, [r6, #4]
 8015720:	4638      	mov	r0, r7
 8015722:	f002 fdbb 	bl	801829c <ucdr_serialize_string>
 8015726:	4004      	ands	r4, r0
 8015728:	e7ef      	b.n	801570a <uxr_serialize_ReadSpecification+0x2a>
 801572a:	8971      	ldrh	r1, [r6, #10]
 801572c:	4638      	mov	r0, r7
 801572e:	f7fb ffab 	bl	8011688 <ucdr_serialize_uint16_t>
 8015732:	89b1      	ldrh	r1, [r6, #12]
 8015734:	4605      	mov	r5, r0
 8015736:	4638      	mov	r0, r7
 8015738:	f7fb ffa6 	bl	8011688 <ucdr_serialize_uint16_t>
 801573c:	89f1      	ldrh	r1, [r6, #14]
 801573e:	4005      	ands	r5, r0
 8015740:	4638      	mov	r0, r7
 8015742:	f7fb ffa1 	bl	8011688 <ucdr_serialize_uint16_t>
 8015746:	8a31      	ldrh	r1, [r6, #16]
 8015748:	4680      	mov	r8, r0
 801574a:	4638      	mov	r0, r7
 801574c:	f7fb ff9c 	bl	8011688 <ucdr_serialize_uint16_t>
 8015750:	b2ed      	uxtb	r5, r5
 8015752:	4025      	ands	r5, r4
 8015754:	ea08 0505 	and.w	r5, r8, r5
 8015758:	ea00 0405 	and.w	r4, r0, r5
 801575c:	4620      	mov	r0, r4
 801575e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015762:	bf00      	nop

08015764 <uxr_serialize_CREATE_CLIENT_Payload>:
 8015764:	f7ff bb02 	b.w	8014d6c <uxr_serialize_CLIENT_Representation>

08015768 <uxr_serialize_CREATE_Payload>:
 8015768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801576a:	2202      	movs	r2, #2
 801576c:	4607      	mov	r7, r0
 801576e:	460e      	mov	r6, r1
 8015770:	f002 fc22 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8015774:	2202      	movs	r2, #2
 8015776:	18b1      	adds	r1, r6, r2
 8015778:	4605      	mov	r5, r0
 801577a:	4638      	mov	r0, r7
 801577c:	f002 fc1c 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8015780:	7931      	ldrb	r1, [r6, #4]
 8015782:	4604      	mov	r4, r0
 8015784:	4638      	mov	r0, r7
 8015786:	f7fb ff53 	bl	8011630 <ucdr_serialize_uint8_t>
 801578a:	b170      	cbz	r0, 80157aa <uxr_serialize_CREATE_Payload+0x42>
 801578c:	7933      	ldrb	r3, [r6, #4]
 801578e:	402c      	ands	r4, r5
 8015790:	3b01      	subs	r3, #1
 8015792:	b2e4      	uxtb	r4, r4
 8015794:	2b0d      	cmp	r3, #13
 8015796:	d809      	bhi.n	80157ac <uxr_serialize_CREATE_Payload+0x44>
 8015798:	e8df f003 	tbb	[pc, r3]
 801579c:	23230a4c 	.word	0x23230a4c
 80157a0:	0a0a0a0a 	.word	0x0a0a0a0a
 80157a4:	12121208 	.word	0x12121208
 80157a8:	3e45      	.short	0x3e45
 80157aa:	2400      	movs	r4, #0
 80157ac:	4620      	mov	r0, r4
 80157ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157b0:	f106 0108 	add.w	r1, r6, #8
 80157b4:	4638      	mov	r0, r7
 80157b6:	f7ff fbdf 	bl	8014f78 <uxr_serialize_DATAWRITER_Representation>
 80157ba:	4004      	ands	r4, r0
 80157bc:	4620      	mov	r0, r4
 80157be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157c0:	7a31      	ldrb	r1, [r6, #8]
 80157c2:	4638      	mov	r0, r7
 80157c4:	f7fb ff34 	bl	8011630 <ucdr_serialize_uint8_t>
 80157c8:	2800      	cmp	r0, #0
 80157ca:	d0ee      	beq.n	80157aa <uxr_serialize_CREATE_Payload+0x42>
 80157cc:	7a33      	ldrb	r3, [r6, #8]
 80157ce:	2b01      	cmp	r3, #1
 80157d0:	d001      	beq.n	80157d6 <uxr_serialize_CREATE_Payload+0x6e>
 80157d2:	2b02      	cmp	r3, #2
 80157d4:	d1ea      	bne.n	80157ac <uxr_serialize_CREATE_Payload+0x44>
 80157d6:	68f1      	ldr	r1, [r6, #12]
 80157d8:	4638      	mov	r0, r7
 80157da:	f002 fd5f 	bl	801829c <ucdr_serialize_string>
 80157de:	4004      	ands	r4, r0
 80157e0:	e7e4      	b.n	80157ac <uxr_serialize_CREATE_Payload+0x44>
 80157e2:	7a31      	ldrb	r1, [r6, #8]
 80157e4:	4638      	mov	r0, r7
 80157e6:	f7fb ff23 	bl	8011630 <ucdr_serialize_uint8_t>
 80157ea:	4605      	mov	r5, r0
 80157ec:	b158      	cbz	r0, 8015806 <uxr_serialize_CREATE_Payload+0x9e>
 80157ee:	7a33      	ldrb	r3, [r6, #8]
 80157f0:	2b02      	cmp	r3, #2
 80157f2:	d034      	beq.n	801585e <uxr_serialize_CREATE_Payload+0xf6>
 80157f4:	2b03      	cmp	r3, #3
 80157f6:	d106      	bne.n	8015806 <uxr_serialize_CREATE_Payload+0x9e>
 80157f8:	68f2      	ldr	r2, [r6, #12]
 80157fa:	f106 0110 	add.w	r1, r6, #16
 80157fe:	4638      	mov	r0, r7
 8015800:	f7fd fce2 	bl	80131c8 <ucdr_serialize_sequence_uint8_t>
 8015804:	4605      	mov	r5, r0
 8015806:	2202      	movs	r2, #2
 8015808:	f506 7104 	add.w	r1, r6, #528	; 0x210
 801580c:	4638      	mov	r0, r7
 801580e:	f002 fbd3 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8015812:	4028      	ands	r0, r5
 8015814:	4004      	ands	r4, r0
 8015816:	e7c9      	b.n	80157ac <uxr_serialize_CREATE_Payload+0x44>
 8015818:	f106 0108 	add.w	r1, r6, #8
 801581c:	4638      	mov	r0, r7
 801581e:	f7ff faa5 	bl	8014d6c <uxr_serialize_CLIENT_Representation>
 8015822:	4004      	ands	r4, r0
 8015824:	e7c2      	b.n	80157ac <uxr_serialize_CREATE_Payload+0x44>
 8015826:	f106 0108 	add.w	r1, r6, #8
 801582a:	4638      	mov	r0, r7
 801582c:	f7ff fb5a 	bl	8014ee4 <uxr_serialize_AGENT_Representation>
 8015830:	4004      	ands	r4, r0
 8015832:	e7bb      	b.n	80157ac <uxr_serialize_CREATE_Payload+0x44>
 8015834:	7a31      	ldrb	r1, [r6, #8]
 8015836:	4638      	mov	r0, r7
 8015838:	f7fb fefa 	bl	8011630 <ucdr_serialize_uint8_t>
 801583c:	4605      	mov	r5, r0
 801583e:	b130      	cbz	r0, 801584e <uxr_serialize_CREATE_Payload+0xe6>
 8015840:	7a33      	ldrb	r3, [r6, #8]
 8015842:	2b02      	cmp	r3, #2
 8015844:	d011      	beq.n	801586a <uxr_serialize_CREATE_Payload+0x102>
 8015846:	2b03      	cmp	r3, #3
 8015848:	d015      	beq.n	8015876 <uxr_serialize_CREATE_Payload+0x10e>
 801584a:	2b01      	cmp	r3, #1
 801584c:	d00d      	beq.n	801586a <uxr_serialize_CREATE_Payload+0x102>
 801584e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 8015852:	4638      	mov	r0, r7
 8015854:	f7fc fc28 	bl	80120a8 <ucdr_serialize_int16_t>
 8015858:	4028      	ands	r0, r5
 801585a:	4004      	ands	r4, r0
 801585c:	e7a6      	b.n	80157ac <uxr_serialize_CREATE_Payload+0x44>
 801585e:	68f1      	ldr	r1, [r6, #12]
 8015860:	4638      	mov	r0, r7
 8015862:	f002 fd1b 	bl	801829c <ucdr_serialize_string>
 8015866:	4605      	mov	r5, r0
 8015868:	e7cd      	b.n	8015806 <uxr_serialize_CREATE_Payload+0x9e>
 801586a:	68f1      	ldr	r1, [r6, #12]
 801586c:	4638      	mov	r0, r7
 801586e:	f002 fd15 	bl	801829c <ucdr_serialize_string>
 8015872:	4605      	mov	r5, r0
 8015874:	e7eb      	b.n	801584e <uxr_serialize_CREATE_Payload+0xe6>
 8015876:	68f2      	ldr	r2, [r6, #12]
 8015878:	f106 0110 	add.w	r1, r6, #16
 801587c:	4638      	mov	r0, r7
 801587e:	f7fd fca3 	bl	80131c8 <ucdr_serialize_sequence_uint8_t>
 8015882:	4605      	mov	r5, r0
 8015884:	e7e3      	b.n	801584e <uxr_serialize_CREATE_Payload+0xe6>
 8015886:	bf00      	nop

08015888 <uxr_deserialize_GET_INFO_Payload>:
 8015888:	b570      	push	{r4, r5, r6, lr}
 801588a:	2202      	movs	r2, #2
 801588c:	4605      	mov	r5, r0
 801588e:	460e      	mov	r6, r1
 8015890:	f002 fbf6 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 8015894:	2202      	movs	r2, #2
 8015896:	18b1      	adds	r1, r6, r2
 8015898:	4604      	mov	r4, r0
 801589a:	4628      	mov	r0, r5
 801589c:	f002 fbf0 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 80158a0:	1d31      	adds	r1, r6, #4
 80158a2:	4004      	ands	r4, r0
 80158a4:	4628      	mov	r0, r5
 80158a6:	f7fc fa09 	bl	8011cbc <ucdr_deserialize_uint32_t>
 80158aa:	b2e4      	uxtb	r4, r4
 80158ac:	4020      	ands	r0, r4
 80158ae:	bd70      	pop	{r4, r5, r6, pc}

080158b0 <uxr_serialize_DELETE_Payload>:
 80158b0:	b570      	push	{r4, r5, r6, lr}
 80158b2:	2202      	movs	r2, #2
 80158b4:	4605      	mov	r5, r0
 80158b6:	460e      	mov	r6, r1
 80158b8:	f002 fb7e 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 80158bc:	2202      	movs	r2, #2
 80158be:	4604      	mov	r4, r0
 80158c0:	18b1      	adds	r1, r6, r2
 80158c2:	4628      	mov	r0, r5
 80158c4:	f002 fb78 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 80158c8:	4020      	ands	r0, r4
 80158ca:	b2c0      	uxtb	r0, r0
 80158cc:	bd70      	pop	{r4, r5, r6, pc}
 80158ce:	bf00      	nop

080158d0 <uxr_deserialize_STATUS_AGENT_Payload>:
 80158d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158d4:	4605      	mov	r5, r0
 80158d6:	460e      	mov	r6, r1
 80158d8:	f7fb fec0 	bl	801165c <ucdr_deserialize_uint8_t>
 80158dc:	1c71      	adds	r1, r6, #1
 80158de:	4604      	mov	r4, r0
 80158e0:	4628      	mov	r0, r5
 80158e2:	f7fb febb 	bl	801165c <ucdr_deserialize_uint8_t>
 80158e6:	2204      	movs	r2, #4
 80158e8:	18b1      	adds	r1, r6, r2
 80158ea:	4680      	mov	r8, r0
 80158ec:	4628      	mov	r0, r5
 80158ee:	f002 fbc7 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 80158f2:	f106 0108 	add.w	r1, r6, #8
 80158f6:	4607      	mov	r7, r0
 80158f8:	2202      	movs	r2, #2
 80158fa:	4628      	mov	r0, r5
 80158fc:	f002 fbc0 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 8015900:	ea04 0308 	and.w	r3, r4, r8
 8015904:	b2db      	uxtb	r3, r3
 8015906:	ea03 0407 	and.w	r4, r3, r7
 801590a:	2202      	movs	r2, #2
 801590c:	4607      	mov	r7, r0
 801590e:	f106 010a 	add.w	r1, r6, #10
 8015912:	4628      	mov	r0, r5
 8015914:	f002 fbb4 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 8015918:	f106 010c 	add.w	r1, r6, #12
 801591c:	4603      	mov	r3, r0
 801591e:	4628      	mov	r0, r5
 8015920:	461d      	mov	r5, r3
 8015922:	f7fb fe6d 	bl	8011600 <ucdr_deserialize_bool>
 8015926:	403c      	ands	r4, r7
 8015928:	4025      	ands	r5, r4
 801592a:	4028      	ands	r0, r5
 801592c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015930 <uxr_deserialize_STATUS_Payload>:
 8015930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015934:	2202      	movs	r2, #2
 8015936:	4606      	mov	r6, r0
 8015938:	460f      	mov	r7, r1
 801593a:	f002 fba1 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 801593e:	2202      	movs	r2, #2
 8015940:	18b9      	adds	r1, r7, r2
 8015942:	4605      	mov	r5, r0
 8015944:	4630      	mov	r0, r6
 8015946:	f002 fb9b 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 801594a:	1d39      	adds	r1, r7, #4
 801594c:	4680      	mov	r8, r0
 801594e:	4630      	mov	r0, r6
 8015950:	f7fb fe84 	bl	801165c <ucdr_deserialize_uint8_t>
 8015954:	1d79      	adds	r1, r7, #5
 8015956:	4604      	mov	r4, r0
 8015958:	4630      	mov	r0, r6
 801595a:	f7fb fe7f 	bl	801165c <ucdr_deserialize_uint8_t>
 801595e:	ea05 0508 	and.w	r5, r5, r8
 8015962:	402c      	ands	r4, r5
 8015964:	4020      	ands	r0, r4
 8015966:	b2c0      	uxtb	r0, r0
 8015968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801596c <uxr_serialize_INFO_Payload>:
 801596c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015970:	2202      	movs	r2, #2
 8015972:	460c      	mov	r4, r1
 8015974:	4605      	mov	r5, r0
 8015976:	f002 fb1f 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 801597a:	2202      	movs	r2, #2
 801597c:	18a1      	adds	r1, r4, r2
 801597e:	4680      	mov	r8, r0
 8015980:	4628      	mov	r0, r5
 8015982:	f002 fb19 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8015986:	7921      	ldrb	r1, [r4, #4]
 8015988:	4607      	mov	r7, r0
 801598a:	4628      	mov	r0, r5
 801598c:	f7fb fe50 	bl	8011630 <ucdr_serialize_uint8_t>
 8015990:	7961      	ldrb	r1, [r4, #5]
 8015992:	4606      	mov	r6, r0
 8015994:	4628      	mov	r0, r5
 8015996:	f7fb fe4b 	bl	8011630 <ucdr_serialize_uint8_t>
 801599a:	ea08 0807 	and.w	r8, r8, r7
 801599e:	ea06 0608 	and.w	r6, r6, r8
 80159a2:	4006      	ands	r6, r0
 80159a4:	7a21      	ldrb	r1, [r4, #8]
 80159a6:	4628      	mov	r0, r5
 80159a8:	f7fb fe14 	bl	80115d4 <ucdr_serialize_bool>
 80159ac:	7a23      	ldrb	r3, [r4, #8]
 80159ae:	b2f7      	uxtb	r7, r6
 80159b0:	4606      	mov	r6, r0
 80159b2:	b96b      	cbnz	r3, 80159d0 <uxr_serialize_INFO_Payload+0x64>
 80159b4:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 80159b8:	4628      	mov	r0, r5
 80159ba:	f7fb fe0b 	bl	80115d4 <ucdr_serialize_bool>
 80159be:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80159c2:	4030      	ands	r0, r6
 80159c4:	b2c6      	uxtb	r6, r0
 80159c6:	b983      	cbnz	r3, 80159ea <uxr_serialize_INFO_Payload+0x7e>
 80159c8:	ea06 0007 	and.w	r0, r6, r7
 80159cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159d0:	7b21      	ldrb	r1, [r4, #12]
 80159d2:	4628      	mov	r0, r5
 80159d4:	f7fb fe2c 	bl	8011630 <ucdr_serialize_uint8_t>
 80159d8:	b188      	cbz	r0, 80159fe <uxr_serialize_INFO_Payload+0x92>
 80159da:	f104 010c 	add.w	r1, r4, #12
 80159de:	4628      	mov	r0, r5
 80159e0:	f7ff faf2 	bl	8014fc8 <uxr_serialize_ObjectVariant.part.0>
 80159e4:	4030      	ands	r0, r6
 80159e6:	b2c6      	uxtb	r6, r0
 80159e8:	e7e4      	b.n	80159b4 <uxr_serialize_INFO_Payload+0x48>
 80159ea:	f504 7108 	add.w	r1, r4, #544	; 0x220
 80159ee:	4628      	mov	r0, r5
 80159f0:	f7ff fdb2 	bl	8015558 <uxr_serialize_ActivityInfoVariant>
 80159f4:	4006      	ands	r6, r0
 80159f6:	ea06 0007 	and.w	r0, r6, r7
 80159fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159fe:	4606      	mov	r6, r0
 8015a00:	e7d8      	b.n	80159b4 <uxr_serialize_INFO_Payload+0x48>
 8015a02:	bf00      	nop

08015a04 <uxr_serialize_READ_DATA_Payload>:
 8015a04:	b570      	push	{r4, r5, r6, lr}
 8015a06:	2202      	movs	r2, #2
 8015a08:	4605      	mov	r5, r0
 8015a0a:	460e      	mov	r6, r1
 8015a0c:	f002 fad4 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8015a10:	2202      	movs	r2, #2
 8015a12:	18b1      	adds	r1, r6, r2
 8015a14:	4604      	mov	r4, r0
 8015a16:	4628      	mov	r0, r5
 8015a18:	f002 face 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8015a1c:	1d31      	adds	r1, r6, #4
 8015a1e:	4004      	ands	r4, r0
 8015a20:	4628      	mov	r0, r5
 8015a22:	f7ff fe5d 	bl	80156e0 <uxr_serialize_ReadSpecification>
 8015a26:	b2e4      	uxtb	r4, r4
 8015a28:	4020      	ands	r0, r4
 8015a2a:	bd70      	pop	{r4, r5, r6, pc}

08015a2c <uxr_serialize_WRITE_DATA_Payload_Data>:
 8015a2c:	b570      	push	{r4, r5, r6, lr}
 8015a2e:	2202      	movs	r2, #2
 8015a30:	4605      	mov	r5, r0
 8015a32:	460e      	mov	r6, r1
 8015a34:	f002 fac0 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8015a38:	2202      	movs	r2, #2
 8015a3a:	4604      	mov	r4, r0
 8015a3c:	18b1      	adds	r1, r6, r2
 8015a3e:	4628      	mov	r0, r5
 8015a40:	f002 faba 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8015a44:	4020      	ands	r0, r4
 8015a46:	b2c0      	uxtb	r0, r0
 8015a48:	bd70      	pop	{r4, r5, r6, pc}
 8015a4a:	bf00      	nop

08015a4c <uxr_serialize_ACKNACK_Payload>:
 8015a4c:	b570      	push	{r4, r5, r6, lr}
 8015a4e:	460c      	mov	r4, r1
 8015a50:	460e      	mov	r6, r1
 8015a52:	f834 1b02 	ldrh.w	r1, [r4], #2
 8015a56:	4605      	mov	r5, r0
 8015a58:	f7fb fe16 	bl	8011688 <ucdr_serialize_uint16_t>
 8015a5c:	2202      	movs	r2, #2
 8015a5e:	4621      	mov	r1, r4
 8015a60:	4604      	mov	r4, r0
 8015a62:	4628      	mov	r0, r5
 8015a64:	f002 faa8 	bl	8017fb8 <ucdr_serialize_array_uint8_t>
 8015a68:	7931      	ldrb	r1, [r6, #4]
 8015a6a:	4004      	ands	r4, r0
 8015a6c:	4628      	mov	r0, r5
 8015a6e:	f7fb fddf 	bl	8011630 <ucdr_serialize_uint8_t>
 8015a72:	b2e4      	uxtb	r4, r4
 8015a74:	4020      	ands	r0, r4
 8015a76:	bd70      	pop	{r4, r5, r6, pc}

08015a78 <uxr_deserialize_ACKNACK_Payload>:
 8015a78:	b570      	push	{r4, r5, r6, lr}
 8015a7a:	4605      	mov	r5, r0
 8015a7c:	460e      	mov	r6, r1
 8015a7e:	f7fb ff03 	bl	8011888 <ucdr_deserialize_uint16_t>
 8015a82:	2202      	movs	r2, #2
 8015a84:	18b1      	adds	r1, r6, r2
 8015a86:	4604      	mov	r4, r0
 8015a88:	4628      	mov	r0, r5
 8015a8a:	f002 faf9 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 8015a8e:	1d31      	adds	r1, r6, #4
 8015a90:	4004      	ands	r4, r0
 8015a92:	4628      	mov	r0, r5
 8015a94:	f7fb fde2 	bl	801165c <ucdr_deserialize_uint8_t>
 8015a98:	b2e4      	uxtb	r4, r4
 8015a9a:	4020      	ands	r0, r4
 8015a9c:	bd70      	pop	{r4, r5, r6, pc}
 8015a9e:	bf00      	nop

08015aa0 <uxr_serialize_HEARTBEAT_Payload>:
 8015aa0:	b570      	push	{r4, r5, r6, lr}
 8015aa2:	460d      	mov	r5, r1
 8015aa4:	8809      	ldrh	r1, [r1, #0]
 8015aa6:	4606      	mov	r6, r0
 8015aa8:	f7fb fdee 	bl	8011688 <ucdr_serialize_uint16_t>
 8015aac:	8869      	ldrh	r1, [r5, #2]
 8015aae:	4604      	mov	r4, r0
 8015ab0:	4630      	mov	r0, r6
 8015ab2:	f7fb fde9 	bl	8011688 <ucdr_serialize_uint16_t>
 8015ab6:	7929      	ldrb	r1, [r5, #4]
 8015ab8:	4004      	ands	r4, r0
 8015aba:	4630      	mov	r0, r6
 8015abc:	f7fb fdb8 	bl	8011630 <ucdr_serialize_uint8_t>
 8015ac0:	b2e4      	uxtb	r4, r4
 8015ac2:	4020      	ands	r0, r4
 8015ac4:	bd70      	pop	{r4, r5, r6, pc}
 8015ac6:	bf00      	nop

08015ac8 <uxr_deserialize_HEARTBEAT_Payload>:
 8015ac8:	b570      	push	{r4, r5, r6, lr}
 8015aca:	4605      	mov	r5, r0
 8015acc:	460e      	mov	r6, r1
 8015ace:	f7fb fedb 	bl	8011888 <ucdr_deserialize_uint16_t>
 8015ad2:	1cb1      	adds	r1, r6, #2
 8015ad4:	4604      	mov	r4, r0
 8015ad6:	4628      	mov	r0, r5
 8015ad8:	f7fb fed6 	bl	8011888 <ucdr_deserialize_uint16_t>
 8015adc:	1d31      	adds	r1, r6, #4
 8015ade:	4004      	ands	r4, r0
 8015ae0:	4628      	mov	r0, r5
 8015ae2:	f7fb fdbb 	bl	801165c <ucdr_deserialize_uint8_t>
 8015ae6:	b2e4      	uxtb	r4, r4
 8015ae8:	4020      	ands	r0, r4
 8015aea:	bd70      	pop	{r4, r5, r6, pc}

08015aec <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8015aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015af0:	4605      	mov	r5, r0
 8015af2:	460e      	mov	r6, r1
 8015af4:	f7fc fc64 	bl	80123c0 <ucdr_deserialize_int32_t>
 8015af8:	1d31      	adds	r1, r6, #4
 8015afa:	4607      	mov	r7, r0
 8015afc:	4628      	mov	r0, r5
 8015afe:	f7fc f8dd 	bl	8011cbc <ucdr_deserialize_uint32_t>
 8015b02:	f106 0108 	add.w	r1, r6, #8
 8015b06:	4680      	mov	r8, r0
 8015b08:	4628      	mov	r0, r5
 8015b0a:	f7fc fc59 	bl	80123c0 <ucdr_deserialize_int32_t>
 8015b0e:	f106 010c 	add.w	r1, r6, #12
 8015b12:	4604      	mov	r4, r0
 8015b14:	4628      	mov	r0, r5
 8015b16:	f7fc f8d1 	bl	8011cbc <ucdr_deserialize_uint32_t>
 8015b1a:	ea07 0708 	and.w	r7, r7, r8
 8015b1e:	403c      	ands	r4, r7
 8015b20:	f106 0110 	add.w	r1, r6, #16
 8015b24:	4004      	ands	r4, r0
 8015b26:	4628      	mov	r0, r5
 8015b28:	f7fc fc4a 	bl	80123c0 <ucdr_deserialize_int32_t>
 8015b2c:	f106 0114 	add.w	r1, r6, #20
 8015b30:	4607      	mov	r7, r0
 8015b32:	4628      	mov	r0, r5
 8015b34:	f7fc f8c2 	bl	8011cbc <ucdr_deserialize_uint32_t>
 8015b38:	b2e4      	uxtb	r4, r4
 8015b3a:	403c      	ands	r4, r7
 8015b3c:	4020      	ands	r0, r4
 8015b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b42:	bf00      	nop

08015b44 <uxr_deserialize_SampleIdentity>:
 8015b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b48:	220c      	movs	r2, #12
 8015b4a:	4604      	mov	r4, r0
 8015b4c:	460d      	mov	r5, r1
 8015b4e:	f002 fa97 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 8015b52:	2203      	movs	r2, #3
 8015b54:	f105 010c 	add.w	r1, r5, #12
 8015b58:	4607      	mov	r7, r0
 8015b5a:	4620      	mov	r0, r4
 8015b5c:	f002 fa90 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 8015b60:	f105 010f 	add.w	r1, r5, #15
 8015b64:	4680      	mov	r8, r0
 8015b66:	4620      	mov	r0, r4
 8015b68:	f7fb fd78 	bl	801165c <ucdr_deserialize_uint8_t>
 8015b6c:	f105 0110 	add.w	r1, r5, #16
 8015b70:	4606      	mov	r6, r0
 8015b72:	4620      	mov	r0, r4
 8015b74:	f7fc fc24 	bl	80123c0 <ucdr_deserialize_int32_t>
 8015b78:	f105 0114 	add.w	r1, r5, #20
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	4620      	mov	r0, r4
 8015b80:	ea07 0708 	and.w	r7, r7, r8
 8015b84:	461c      	mov	r4, r3
 8015b86:	f7fc f899 	bl	8011cbc <ucdr_deserialize_uint32_t>
 8015b8a:	403e      	ands	r6, r7
 8015b8c:	4034      	ands	r4, r6
 8015b8e:	4020      	ands	r0, r4
 8015b90:	b2c0      	uxtb	r0, r0
 8015b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b96:	bf00      	nop

08015b98 <rcl_convert_rmw_ret_to_rcl_ret>:
 8015b98:	280b      	cmp	r0, #11
 8015b9a:	dc0d      	bgt.n	8015bb8 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8015b9c:	2800      	cmp	r0, #0
 8015b9e:	db09      	blt.n	8015bb4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015ba0:	280b      	cmp	r0, #11
 8015ba2:	d807      	bhi.n	8015bb4 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015ba4:	e8df f000 	tbb	[pc, r0]
 8015ba8:	07060607 	.word	0x07060607
 8015bac:	06060606 	.word	0x06060606
 8015bb0:	07070606 	.word	0x07070606
 8015bb4:	2001      	movs	r0, #1
 8015bb6:	4770      	bx	lr
 8015bb8:	28cb      	cmp	r0, #203	; 0xcb
 8015bba:	bf18      	it	ne
 8015bbc:	2001      	movne	r0, #1
 8015bbe:	4770      	bx	lr

08015bc0 <rcl_get_zero_initialized_context>:
 8015bc0:	4a03      	ldr	r2, [pc, #12]	; (8015bd0 <rcl_get_zero_initialized_context+0x10>)
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015bc8:	e883 0003 	stmia.w	r3, {r0, r1}
 8015bcc:	4618      	mov	r0, r3
 8015bce:	4770      	bx	lr
 8015bd0:	0801c73c 	.word	0x0801c73c

08015bd4 <rcl_context_is_valid>:
 8015bd4:	b118      	cbz	r0, 8015bde <rcl_context_is_valid+0xa>
 8015bd6:	6840      	ldr	r0, [r0, #4]
 8015bd8:	3800      	subs	r0, #0
 8015bda:	bf18      	it	ne
 8015bdc:	2001      	movne	r0, #1
 8015bde:	4770      	bx	lr

08015be0 <__cleanup_context>:
 8015be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015be4:	4606      	mov	r6, r0
 8015be6:	6800      	ldr	r0, [r0, #0]
 8015be8:	2300      	movs	r3, #0
 8015bea:	6073      	str	r3, [r6, #4]
 8015bec:	2800      	cmp	r0, #0
 8015bee:	d049      	beq.n	8015c84 <__cleanup_context+0xa4>
 8015bf0:	6947      	ldr	r7, [r0, #20]
 8015bf2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015bf6:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8015bfa:	b137      	cbz	r7, 8015c0a <__cleanup_context+0x2a>
 8015bfc:	3014      	adds	r0, #20
 8015bfe:	f000 f9bb 	bl	8015f78 <rcl_init_options_fini>
 8015c02:	4607      	mov	r7, r0
 8015c04:	2800      	cmp	r0, #0
 8015c06:	d144      	bne.n	8015c92 <__cleanup_context+0xb2>
 8015c08:	6830      	ldr	r0, [r6, #0]
 8015c0a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8015c0c:	b143      	cbz	r3, 8015c20 <__cleanup_context+0x40>
 8015c0e:	3028      	adds	r0, #40	; 0x28
 8015c10:	f001 fd9a 	bl	8017748 <rmw_context_fini>
 8015c14:	b118      	cbz	r0, 8015c1e <__cleanup_context+0x3e>
 8015c16:	2f00      	cmp	r7, #0
 8015c18:	d03e      	beq.n	8015c98 <__cleanup_context+0xb8>
 8015c1a:	f7fa fa69 	bl	80100f0 <rcutils_reset_error>
 8015c1e:	6830      	ldr	r0, [r6, #0]
 8015c20:	6a03      	ldr	r3, [r0, #32]
 8015c22:	b1db      	cbz	r3, 8015c5c <__cleanup_context+0x7c>
 8015c24:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8015c28:	2a01      	cmp	r2, #1
 8015c2a:	f17c 0100 	sbcs.w	r1, ip, #0
 8015c2e:	db11      	blt.n	8015c54 <__cleanup_context+0x74>
 8015c30:	2400      	movs	r4, #0
 8015c32:	4625      	mov	r5, r4
 8015c34:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015c38:	4649      	mov	r1, r9
 8015c3a:	b1b8      	cbz	r0, 8015c6c <__cleanup_context+0x8c>
 8015c3c:	47c0      	blx	r8
 8015c3e:	6833      	ldr	r3, [r6, #0]
 8015c40:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8015c44:	3401      	adds	r4, #1
 8015c46:	f145 0500 	adc.w	r5, r5, #0
 8015c4a:	4294      	cmp	r4, r2
 8015c4c:	eb75 010c 	sbcs.w	r1, r5, ip
 8015c50:	6a1b      	ldr	r3, [r3, #32]
 8015c52:	dbef      	blt.n	8015c34 <__cleanup_context+0x54>
 8015c54:	4618      	mov	r0, r3
 8015c56:	4649      	mov	r1, r9
 8015c58:	47c0      	blx	r8
 8015c5a:	6830      	ldr	r0, [r6, #0]
 8015c5c:	4649      	mov	r1, r9
 8015c5e:	47c0      	blx	r8
 8015c60:	2300      	movs	r3, #0
 8015c62:	e9c6 3300 	strd	r3, r3, [r6]
 8015c66:	4638      	mov	r0, r7
 8015c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c6c:	3401      	adds	r4, #1
 8015c6e:	f145 0500 	adc.w	r5, r5, #0
 8015c72:	4294      	cmp	r4, r2
 8015c74:	eb75 010c 	sbcs.w	r1, r5, ip
 8015c78:	dbdc      	blt.n	8015c34 <__cleanup_context+0x54>
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	4649      	mov	r1, r9
 8015c7e:	47c0      	blx	r8
 8015c80:	6830      	ldr	r0, [r6, #0]
 8015c82:	e7eb      	b.n	8015c5c <__cleanup_context+0x7c>
 8015c84:	4607      	mov	r7, r0
 8015c86:	2300      	movs	r3, #0
 8015c88:	e9c6 3300 	strd	r3, r3, [r6]
 8015c8c:	4638      	mov	r0, r7
 8015c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c92:	f7fa fa2d 	bl	80100f0 <rcutils_reset_error>
 8015c96:	e7b7      	b.n	8015c08 <__cleanup_context+0x28>
 8015c98:	f7ff ff7e 	bl	8015b98 <rcl_convert_rmw_ret_to_rcl_ret>
 8015c9c:	4607      	mov	r7, r0
 8015c9e:	e7bc      	b.n	8015c1a <__cleanup_context+0x3a>

08015ca0 <rcl_init>:
 8015ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ca4:	1e05      	subs	r5, r0, #0
 8015ca6:	b09e      	sub	sp, #120	; 0x78
 8015ca8:	460e      	mov	r6, r1
 8015caa:	4690      	mov	r8, r2
 8015cac:	461f      	mov	r7, r3
 8015cae:	f340 809c 	ble.w	8015dea <rcl_init+0x14a>
 8015cb2:	2900      	cmp	r1, #0
 8015cb4:	f000 809c 	beq.w	8015df0 <rcl_init+0x150>
 8015cb8:	f1a1 0e04 	sub.w	lr, r1, #4
 8015cbc:	f04f 0c00 	mov.w	ip, #0
 8015cc0:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8015cc4:	f10c 0c01 	add.w	ip, ip, #1
 8015cc8:	2c00      	cmp	r4, #0
 8015cca:	f000 8091 	beq.w	8015df0 <rcl_init+0x150>
 8015cce:	4565      	cmp	r5, ip
 8015cd0:	d1f6      	bne.n	8015cc0 <rcl_init+0x20>
 8015cd2:	f1b8 0f00 	cmp.w	r8, #0
 8015cd6:	f000 808b 	beq.w	8015df0 <rcl_init+0x150>
 8015cda:	f8d8 4000 	ldr.w	r4, [r8]
 8015cde:	2c00      	cmp	r4, #0
 8015ce0:	f000 8086 	beq.w	8015df0 <rcl_init+0x150>
 8015ce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015ce6:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8015cea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015cee:	6823      	ldr	r3, [r4, #0]
 8015cf0:	f8cc 3000 	str.w	r3, [ip]
 8015cf4:	a819      	add	r0, sp, #100	; 0x64
 8015cf6:	f7fa f9d7 	bl	80100a8 <rcutils_allocator_is_valid>
 8015cfa:	2800      	cmp	r0, #0
 8015cfc:	d078      	beq.n	8015df0 <rcl_init+0x150>
 8015cfe:	2f00      	cmp	r7, #0
 8015d00:	d076      	beq.n	8015df0 <rcl_init+0x150>
 8015d02:	683b      	ldr	r3, [r7, #0]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d178      	bne.n	8015dfa <rcl_init+0x15a>
 8015d08:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8015d0c:	2178      	movs	r1, #120	; 0x78
 8015d0e:	2001      	movs	r0, #1
 8015d10:	4798      	blx	r3
 8015d12:	4604      	mov	r4, r0
 8015d14:	6038      	str	r0, [r7, #0]
 8015d16:	2800      	cmp	r0, #0
 8015d18:	f000 80b6 	beq.w	8015e88 <rcl_init+0x1e8>
 8015d1c:	a802      	add	r0, sp, #8
 8015d1e:	f001 f957 	bl	8016fd0 <rmw_get_zero_initialized_context>
 8015d22:	a902      	add	r1, sp, #8
 8015d24:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015d28:	2250      	movs	r2, #80	; 0x50
 8015d2a:	ac19      	add	r4, sp, #100	; 0x64
 8015d2c:	f004 fd3c 	bl	801a7a8 <memcpy>
 8015d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015d32:	f8d7 e000 	ldr.w	lr, [r7]
 8015d36:	46f4      	mov	ip, lr
 8015d38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015d3c:	6823      	ldr	r3, [r4, #0]
 8015d3e:	f8cc 3000 	str.w	r3, [ip]
 8015d42:	f10e 0114 	add.w	r1, lr, #20
 8015d46:	4640      	mov	r0, r8
 8015d48:	f000 f940 	bl	8015fcc <rcl_init_options_copy>
 8015d4c:	4604      	mov	r4, r0
 8015d4e:	2800      	cmp	r0, #0
 8015d50:	d144      	bne.n	8015ddc <rcl_init+0x13c>
 8015d52:	f8d7 9000 	ldr.w	r9, [r7]
 8015d56:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8015d5a:	f8c9 0020 	str.w	r0, [r9, #32]
 8015d5e:	f8c9 5018 	str.w	r5, [r9, #24]
 8015d62:	f8c9 801c 	str.w	r8, [r9, #28]
 8015d66:	2d00      	cmp	r5, #0
 8015d68:	d04e      	beq.n	8015e08 <rcl_init+0x168>
 8015d6a:	2e00      	cmp	r6, #0
 8015d6c:	d04c      	beq.n	8015e08 <rcl_init+0x168>
 8015d6e:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8015d72:	2104      	movs	r1, #4
 8015d74:	4628      	mov	r0, r5
 8015d76:	4798      	blx	r3
 8015d78:	f8c9 0020 	str.w	r0, [r9, #32]
 8015d7c:	f8d7 9000 	ldr.w	r9, [r7]
 8015d80:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8015d84:	46ca      	mov	sl, r9
 8015d86:	b343      	cbz	r3, 8015dda <rcl_init+0x13a>
 8015d88:	2d01      	cmp	r5, #1
 8015d8a:	f178 0300 	sbcs.w	r3, r8, #0
 8015d8e:	db3b      	blt.n	8015e08 <rcl_init+0x168>
 8015d90:	2400      	movs	r4, #0
 8015d92:	3e04      	subs	r6, #4
 8015d94:	46a1      	mov	r9, r4
 8015d96:	e00b      	b.n	8015db0 <rcl_init+0x110>
 8015d98:	6831      	ldr	r1, [r6, #0]
 8015d9a:	f004 fd05 	bl	801a7a8 <memcpy>
 8015d9e:	3401      	adds	r4, #1
 8015da0:	f149 0900 	adc.w	r9, r9, #0
 8015da4:	45c8      	cmp	r8, r9
 8015da6:	bf08      	it	eq
 8015da8:	42a5      	cmpeq	r5, r4
 8015daa:	d02b      	beq.n	8015e04 <rcl_init+0x164>
 8015dac:	f8d7 a000 	ldr.w	sl, [r7]
 8015db0:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8015db4:	f7ea fa16 	bl	80001e4 <strlen>
 8015db8:	1c42      	adds	r2, r0, #1
 8015dba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015dbc:	991d      	ldr	r1, [sp, #116]	; 0x74
 8015dbe:	f8da a020 	ldr.w	sl, [sl, #32]
 8015dc2:	9201      	str	r2, [sp, #4]
 8015dc4:	4610      	mov	r0, r2
 8015dc6:	4798      	blx	r3
 8015dc8:	683b      	ldr	r3, [r7, #0]
 8015dca:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8015dce:	6a1b      	ldr	r3, [r3, #32]
 8015dd0:	9a01      	ldr	r2, [sp, #4]
 8015dd2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015dd6:	2800      	cmp	r0, #0
 8015dd8:	d1de      	bne.n	8015d98 <rcl_init+0xf8>
 8015dda:	240a      	movs	r4, #10
 8015ddc:	4638      	mov	r0, r7
 8015dde:	f7ff feff 	bl	8015be0 <__cleanup_context>
 8015de2:	4620      	mov	r0, r4
 8015de4:	b01e      	add	sp, #120	; 0x78
 8015de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dea:	2900      	cmp	r1, #0
 8015dec:	f43f af71 	beq.w	8015cd2 <rcl_init+0x32>
 8015df0:	240b      	movs	r4, #11
 8015df2:	4620      	mov	r0, r4
 8015df4:	b01e      	add	sp, #120	; 0x78
 8015df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dfa:	2464      	movs	r4, #100	; 0x64
 8015dfc:	4620      	mov	r0, r4
 8015dfe:	b01e      	add	sp, #120	; 0x78
 8015e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e04:	f8d7 9000 	ldr.w	r9, [r7]
 8015e08:	4926      	ldr	r1, [pc, #152]	; (8015ea4 <rcl_init+0x204>)
 8015e0a:	680b      	ldr	r3, [r1, #0]
 8015e0c:	3301      	adds	r3, #1
 8015e0e:	d036      	beq.n	8015e7e <rcl_init+0x1de>
 8015e10:	600b      	str	r3, [r1, #0]
 8015e12:	461a      	mov	r2, r3
 8015e14:	2400      	movs	r4, #0
 8015e16:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015e1a:	607b      	str	r3, [r7, #4]
 8015e1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8015e1e:	3301      	adds	r3, #1
 8015e20:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8015e24:	d034      	beq.n	8015e90 <rcl_init+0x1f0>
 8015e26:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8015e2a:	b93b      	cbnz	r3, 8015e3c <rcl_init+0x19c>
 8015e2c:	3030      	adds	r0, #48	; 0x30
 8015e2e:	f000 f939 	bl	80160a4 <rcl_get_localhost_only>
 8015e32:	4604      	mov	r4, r0
 8015e34:	2800      	cmp	r0, #0
 8015e36:	d1d1      	bne.n	8015ddc <rcl_init+0x13c>
 8015e38:	683b      	ldr	r3, [r7, #0]
 8015e3a:	6958      	ldr	r0, [r3, #20]
 8015e3c:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8015e3e:	aa18      	add	r2, sp, #96	; 0x60
 8015e40:	a917      	add	r1, sp, #92	; 0x5c
 8015e42:	f000 fd81 	bl	8016948 <rcl_validate_enclave_name>
 8015e46:	4604      	mov	r4, r0
 8015e48:	2800      	cmp	r0, #0
 8015e4a:	d1c7      	bne.n	8015ddc <rcl_init+0x13c>
 8015e4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e4e:	b9eb      	cbnz	r3, 8015e8c <rcl_init+0x1ec>
 8015e50:	6839      	ldr	r1, [r7, #0]
 8015e52:	694b      	ldr	r3, [r1, #20]
 8015e54:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015e56:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8015e5a:	f000 fc3d 	bl	80166d8 <rcl_get_security_options_from_environment>
 8015e5e:	4604      	mov	r4, r0
 8015e60:	2800      	cmp	r0, #0
 8015e62:	d1bb      	bne.n	8015ddc <rcl_init+0x13c>
 8015e64:	6839      	ldr	r1, [r7, #0]
 8015e66:	6948      	ldr	r0, [r1, #20]
 8015e68:	3128      	adds	r1, #40	; 0x28
 8015e6a:	3018      	adds	r0, #24
 8015e6c:	f001 fb36 	bl	80174dc <rmw_init>
 8015e70:	4604      	mov	r4, r0
 8015e72:	2800      	cmp	r0, #0
 8015e74:	d0bd      	beq.n	8015df2 <rcl_init+0x152>
 8015e76:	f7ff fe8f 	bl	8015b98 <rcl_convert_rmw_ret_to_rcl_ret>
 8015e7a:	4604      	mov	r4, r0
 8015e7c:	e7ae      	b.n	8015ddc <rcl_init+0x13c>
 8015e7e:	2201      	movs	r2, #1
 8015e80:	461c      	mov	r4, r3
 8015e82:	600a      	str	r2, [r1, #0]
 8015e84:	4613      	mov	r3, r2
 8015e86:	e7c6      	b.n	8015e16 <rcl_init+0x176>
 8015e88:	240a      	movs	r4, #10
 8015e8a:	e7b2      	b.n	8015df2 <rcl_init+0x152>
 8015e8c:	2401      	movs	r4, #1
 8015e8e:	e7a5      	b.n	8015ddc <rcl_init+0x13c>
 8015e90:	3024      	adds	r0, #36	; 0x24
 8015e92:	f003 fdbb 	bl	8019a0c <rcl_get_default_domain_id>
 8015e96:	4604      	mov	r4, r0
 8015e98:	2800      	cmp	r0, #0
 8015e9a:	d19f      	bne.n	8015ddc <rcl_init+0x13c>
 8015e9c:	683b      	ldr	r3, [r7, #0]
 8015e9e:	6958      	ldr	r0, [r3, #20]
 8015ea0:	e7c1      	b.n	8015e26 <rcl_init+0x186>
 8015ea2:	bf00      	nop
 8015ea4:	20015be4 	.word	0x20015be4

08015ea8 <rcl_get_zero_initialized_init_options>:
 8015ea8:	2000      	movs	r0, #0
 8015eaa:	4770      	bx	lr

08015eac <rcl_init_options_init>:
 8015eac:	b084      	sub	sp, #16
 8015eae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015eb0:	b097      	sub	sp, #92	; 0x5c
 8015eb2:	ae1d      	add	r6, sp, #116	; 0x74
 8015eb4:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 8015eb8:	2800      	cmp	r0, #0
 8015eba:	d058      	beq.n	8015f6e <rcl_init_options_init+0xc2>
 8015ebc:	6803      	ldr	r3, [r0, #0]
 8015ebe:	4605      	mov	r5, r0
 8015ec0:	b133      	cbz	r3, 8015ed0 <rcl_init_options_init+0x24>
 8015ec2:	2464      	movs	r4, #100	; 0x64
 8015ec4:	4620      	mov	r0, r4
 8015ec6:	b017      	add	sp, #92	; 0x5c
 8015ec8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015ecc:	b004      	add	sp, #16
 8015ece:	4770      	bx	lr
 8015ed0:	4630      	mov	r0, r6
 8015ed2:	f7fa f8e9 	bl	80100a8 <rcutils_allocator_is_valid>
 8015ed6:	2800      	cmp	r0, #0
 8015ed8:	d049      	beq.n	8015f6e <rcl_init_options_init+0xc2>
 8015eda:	46b4      	mov	ip, r6
 8015edc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015ee0:	ac11      	add	r4, sp, #68	; 0x44
 8015ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015ee4:	f8dc 3000 	ldr.w	r3, [ip]
 8015ee8:	6023      	str	r3, [r4, #0]
 8015eea:	9921      	ldr	r1, [sp, #132]	; 0x84
 8015eec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015eee:	2050      	movs	r0, #80	; 0x50
 8015ef0:	4798      	blx	r3
 8015ef2:	4604      	mov	r4, r0
 8015ef4:	6028      	str	r0, [r5, #0]
 8015ef6:	2800      	cmp	r0, #0
 8015ef8:	d03b      	beq.n	8015f72 <rcl_init_options_init+0xc6>
 8015efa:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8015efe:	4686      	mov	lr, r0
 8015f00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015f04:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015f08:	f8dc 3000 	ldr.w	r3, [ip]
 8015f0c:	f8ce 3000 	str.w	r3, [lr]
 8015f10:	a802      	add	r0, sp, #8
 8015f12:	f001 f86d 	bl	8016ff0 <rmw_get_zero_initialized_init_options>
 8015f16:	f10d 0e08 	add.w	lr, sp, #8
 8015f1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015f1e:	f104 0c18 	add.w	ip, r4, #24
 8015f22:	682f      	ldr	r7, [r5, #0]
 8015f24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015f2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015f34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015f38:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015f3c:	ac20      	add	r4, sp, #128	; 0x80
 8015f3e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015f42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8015f46:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015f4a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8015f4e:	f107 0018 	add.w	r0, r7, #24
 8015f52:	f001 f9cb 	bl	80172ec <rmw_init_options_init>
 8015f56:	4604      	mov	r4, r0
 8015f58:	2800      	cmp	r0, #0
 8015f5a:	d0b3      	beq.n	8015ec4 <rcl_init_options_init+0x18>
 8015f5c:	9921      	ldr	r1, [sp, #132]	; 0x84
 8015f5e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015f60:	6828      	ldr	r0, [r5, #0]
 8015f62:	4798      	blx	r3
 8015f64:	4620      	mov	r0, r4
 8015f66:	f7ff fe17 	bl	8015b98 <rcl_convert_rmw_ret_to_rcl_ret>
 8015f6a:	4604      	mov	r4, r0
 8015f6c:	e7aa      	b.n	8015ec4 <rcl_init_options_init+0x18>
 8015f6e:	240b      	movs	r4, #11
 8015f70:	e7a8      	b.n	8015ec4 <rcl_init_options_init+0x18>
 8015f72:	240a      	movs	r4, #10
 8015f74:	e7a6      	b.n	8015ec4 <rcl_init_options_init+0x18>
 8015f76:	bf00      	nop

08015f78 <rcl_init_options_fini>:
 8015f78:	b530      	push	{r4, r5, lr}
 8015f7a:	b087      	sub	sp, #28
 8015f7c:	b1f0      	cbz	r0, 8015fbc <rcl_init_options_fini+0x44>
 8015f7e:	6803      	ldr	r3, [r0, #0]
 8015f80:	4604      	mov	r4, r0
 8015f82:	b1db      	cbz	r3, 8015fbc <rcl_init_options_fini+0x44>
 8015f84:	469c      	mov	ip, r3
 8015f86:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015f8a:	f10d 0e04 	add.w	lr, sp, #4
 8015f8e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015f92:	f8dc 3000 	ldr.w	r3, [ip]
 8015f96:	f8ce 3000 	str.w	r3, [lr]
 8015f9a:	a801      	add	r0, sp, #4
 8015f9c:	f7fa f884 	bl	80100a8 <rcutils_allocator_is_valid>
 8015fa0:	b160      	cbz	r0, 8015fbc <rcl_init_options_fini+0x44>
 8015fa2:	6820      	ldr	r0, [r4, #0]
 8015fa4:	3018      	adds	r0, #24
 8015fa6:	f001 fa51 	bl	801744c <rmw_init_options_fini>
 8015faa:	4605      	mov	r5, r0
 8015fac:	b950      	cbnz	r0, 8015fc4 <rcl_init_options_fini+0x4c>
 8015fae:	6820      	ldr	r0, [r4, #0]
 8015fb0:	9b02      	ldr	r3, [sp, #8]
 8015fb2:	9905      	ldr	r1, [sp, #20]
 8015fb4:	4798      	blx	r3
 8015fb6:	4628      	mov	r0, r5
 8015fb8:	b007      	add	sp, #28
 8015fba:	bd30      	pop	{r4, r5, pc}
 8015fbc:	250b      	movs	r5, #11
 8015fbe:	4628      	mov	r0, r5
 8015fc0:	b007      	add	sp, #28
 8015fc2:	bd30      	pop	{r4, r5, pc}
 8015fc4:	f7ff fde8 	bl	8015b98 <rcl_convert_rmw_ret_to_rcl_ret>
 8015fc8:	4605      	mov	r5, r0
 8015fca:	e7f8      	b.n	8015fbe <rcl_init_options_fini+0x46>

08015fcc <rcl_init_options_copy>:
 8015fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fd0:	b094      	sub	sp, #80	; 0x50
 8015fd2:	2800      	cmp	r0, #0
 8015fd4:	d058      	beq.n	8016088 <rcl_init_options_copy+0xbc>
 8015fd6:	4604      	mov	r4, r0
 8015fd8:	6800      	ldr	r0, [r0, #0]
 8015fda:	2800      	cmp	r0, #0
 8015fdc:	d054      	beq.n	8016088 <rcl_init_options_copy+0xbc>
 8015fde:	460e      	mov	r6, r1
 8015fe0:	f7fa f862 	bl	80100a8 <rcutils_allocator_is_valid>
 8015fe4:	2800      	cmp	r0, #0
 8015fe6:	d04f      	beq.n	8016088 <rcl_init_options_copy+0xbc>
 8015fe8:	2e00      	cmp	r6, #0
 8015fea:	d04d      	beq.n	8016088 <rcl_init_options_copy+0xbc>
 8015fec:	6833      	ldr	r3, [r6, #0]
 8015fee:	b123      	cbz	r3, 8015ffa <rcl_init_options_copy+0x2e>
 8015ff0:	2464      	movs	r4, #100	; 0x64
 8015ff2:	4620      	mov	r0, r4
 8015ff4:	b014      	add	sp, #80	; 0x50
 8015ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ffa:	6827      	ldr	r7, [r4, #0]
 8015ffc:	46bc      	mov	ip, r7
 8015ffe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016002:	ad0f      	add	r5, sp, #60	; 0x3c
 8016004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016006:	f8dc 3000 	ldr.w	r3, [ip]
 801600a:	f8d7 8000 	ldr.w	r8, [r7]
 801600e:	602b      	str	r3, [r5, #0]
 8016010:	4619      	mov	r1, r3
 8016012:	2050      	movs	r0, #80	; 0x50
 8016014:	47c0      	blx	r8
 8016016:	4605      	mov	r5, r0
 8016018:	6030      	str	r0, [r6, #0]
 801601a:	b3d0      	cbz	r0, 8016092 <rcl_init_options_copy+0xc6>
 801601c:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 8016020:	4686      	mov	lr, r0
 8016022:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016026:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801602a:	f8dc 3000 	ldr.w	r3, [ip]
 801602e:	f8ce 3000 	str.w	r3, [lr]
 8016032:	4668      	mov	r0, sp
 8016034:	f000 ffdc 	bl	8016ff0 <rmw_get_zero_initialized_init_options>
 8016038:	46ee      	mov	lr, sp
 801603a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801603e:	f105 0c18 	add.w	ip, r5, #24
 8016042:	6824      	ldr	r4, [r4, #0]
 8016044:	6835      	ldr	r5, [r6, #0]
 8016046:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801604a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801604e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016052:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016056:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801605a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801605e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016062:	f104 0018 	add.w	r0, r4, #24
 8016066:	f105 0118 	add.w	r1, r5, #24
 801606a:	f001 f9a7 	bl	80173bc <rmw_init_options_copy>
 801606e:	4604      	mov	r4, r0
 8016070:	2800      	cmp	r0, #0
 8016072:	d0be      	beq.n	8015ff2 <rcl_init_options_copy+0x26>
 8016074:	f7fa f826 	bl	80100c4 <rcutils_get_error_string>
 8016078:	f7fa f83a 	bl	80100f0 <rcutils_reset_error>
 801607c:	4630      	mov	r0, r6
 801607e:	f7ff ff7b 	bl	8015f78 <rcl_init_options_fini>
 8016082:	b140      	cbz	r0, 8016096 <rcl_init_options_copy+0xca>
 8016084:	4604      	mov	r4, r0
 8016086:	e7b4      	b.n	8015ff2 <rcl_init_options_copy+0x26>
 8016088:	240b      	movs	r4, #11
 801608a:	4620      	mov	r0, r4
 801608c:	b014      	add	sp, #80	; 0x50
 801608e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016092:	240a      	movs	r4, #10
 8016094:	e7ad      	b.n	8015ff2 <rcl_init_options_copy+0x26>
 8016096:	4620      	mov	r0, r4
 8016098:	b014      	add	sp, #80	; 0x50
 801609a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801609e:	f7ff bd7b 	b.w	8015b98 <rcl_convert_rmw_ret_to_rcl_ret>
 80160a2:	bf00      	nop

080160a4 <rcl_get_localhost_only>:
 80160a4:	b510      	push	{r4, lr}
 80160a6:	b082      	sub	sp, #8
 80160a8:	2300      	movs	r3, #0
 80160aa:	9301      	str	r3, [sp, #4]
 80160ac:	b1b8      	cbz	r0, 80160de <rcl_get_localhost_only+0x3a>
 80160ae:	4604      	mov	r4, r0
 80160b0:	a901      	add	r1, sp, #4
 80160b2:	480c      	ldr	r0, [pc, #48]	; (80160e4 <rcl_get_localhost_only+0x40>)
 80160b4:	f000 fc90 	bl	80169d8 <rcutils_get_env>
 80160b8:	b110      	cbz	r0, 80160c0 <rcl_get_localhost_only+0x1c>
 80160ba:	2001      	movs	r0, #1
 80160bc:	b002      	add	sp, #8
 80160be:	bd10      	pop	{r4, pc}
 80160c0:	9b01      	ldr	r3, [sp, #4]
 80160c2:	b113      	cbz	r3, 80160ca <rcl_get_localhost_only+0x26>
 80160c4:	781a      	ldrb	r2, [r3, #0]
 80160c6:	2a31      	cmp	r2, #49	; 0x31
 80160c8:	d004      	beq.n	80160d4 <rcl_get_localhost_only+0x30>
 80160ca:	2302      	movs	r3, #2
 80160cc:	2000      	movs	r0, #0
 80160ce:	7023      	strb	r3, [r4, #0]
 80160d0:	b002      	add	sp, #8
 80160d2:	bd10      	pop	{r4, pc}
 80160d4:	785b      	ldrb	r3, [r3, #1]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d1f7      	bne.n	80160ca <rcl_get_localhost_only+0x26>
 80160da:	2301      	movs	r3, #1
 80160dc:	e7f6      	b.n	80160cc <rcl_get_localhost_only+0x28>
 80160de:	200b      	movs	r0, #11
 80160e0:	b002      	add	sp, #8
 80160e2:	bd10      	pop	{r4, pc}
 80160e4:	0801c744 	.word	0x0801c744

080160e8 <rcl_get_zero_initialized_node>:
 80160e8:	4a03      	ldr	r2, [pc, #12]	; (80160f8 <rcl_get_zero_initialized_node+0x10>)
 80160ea:	4603      	mov	r3, r0
 80160ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80160f0:	e883 0003 	stmia.w	r3, {r0, r1}
 80160f4:	4618      	mov	r0, r3
 80160f6:	4770      	bx	lr
 80160f8:	0801c76c 	.word	0x0801c76c

080160fc <rcl_node_init>:
 80160fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016100:	b0a9      	sub	sp, #164	; 0xa4
 8016102:	4604      	mov	r4, r0
 8016104:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 8016108:	a823      	add	r0, sp, #140	; 0x8c
 801610a:	460e      	mov	r6, r1
 801610c:	4615      	mov	r5, r2
 801610e:	461f      	mov	r7, r3
 8016110:	f003 fea4 	bl	8019e5c <rcl_guard_condition_get_default_options>
 8016114:	f1b8 0f00 	cmp.w	r8, #0
 8016118:	f000 80e6 	beq.w	80162e8 <rcl_node_init+0x1ec>
 801611c:	4640      	mov	r0, r8
 801611e:	f7f9 ffc3 	bl	80100a8 <rcutils_allocator_is_valid>
 8016122:	2800      	cmp	r0, #0
 8016124:	f000 80e0 	beq.w	80162e8 <rcl_node_init+0x1ec>
 8016128:	2e00      	cmp	r6, #0
 801612a:	f000 80dd 	beq.w	80162e8 <rcl_node_init+0x1ec>
 801612e:	2d00      	cmp	r5, #0
 8016130:	f000 80da 	beq.w	80162e8 <rcl_node_init+0x1ec>
 8016134:	2c00      	cmp	r4, #0
 8016136:	f000 80d7 	beq.w	80162e8 <rcl_node_init+0x1ec>
 801613a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801613e:	f1b9 0f00 	cmp.w	r9, #0
 8016142:	f040 80fd 	bne.w	8016340 <rcl_node_init+0x244>
 8016146:	2f00      	cmp	r7, #0
 8016148:	f000 80ce 	beq.w	80162e8 <rcl_node_init+0x1ec>
 801614c:	4638      	mov	r0, r7
 801614e:	f7ff fd41 	bl	8015bd4 <rcl_context_is_valid>
 8016152:	4682      	mov	sl, r0
 8016154:	2800      	cmp	r0, #0
 8016156:	f000 80cd 	beq.w	80162f4 <rcl_node_init+0x1f8>
 801615a:	464a      	mov	r2, r9
 801615c:	a922      	add	r1, sp, #136	; 0x88
 801615e:	4630      	mov	r0, r6
 8016160:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8016164:	f001 f83a 	bl	80171dc <rmw_validate_node_name>
 8016168:	4681      	mov	r9, r0
 801616a:	2800      	cmp	r0, #0
 801616c:	f040 80be 	bne.w	80162ec <rcl_node_init+0x1f0>
 8016170:	9822      	ldr	r0, [sp, #136]	; 0x88
 8016172:	2800      	cmp	r0, #0
 8016174:	f040 80f0 	bne.w	8016358 <rcl_node_init+0x25c>
 8016178:	4628      	mov	r0, r5
 801617a:	f7ea f833 	bl	80001e4 <strlen>
 801617e:	2800      	cmp	r0, #0
 8016180:	f040 80bb 	bne.w	80162fa <rcl_node_init+0x1fe>
 8016184:	4d7c      	ldr	r5, [pc, #496]	; (8016378 <rcl_node_init+0x27c>)
 8016186:	a922      	add	r1, sp, #136	; 0x88
 8016188:	2200      	movs	r2, #0
 801618a:	4628      	mov	r0, r5
 801618c:	f001 f808 	bl	80171a0 <rmw_validate_namespace>
 8016190:	4681      	mov	r9, r0
 8016192:	2800      	cmp	r0, #0
 8016194:	f040 80aa 	bne.w	80162ec <rcl_node_init+0x1f0>
 8016198:	4682      	mov	sl, r0
 801619a:	9822      	ldr	r0, [sp, #136]	; 0x88
 801619c:	2800      	cmp	r0, #0
 801619e:	f040 80e0 	bne.w	8016362 <rcl_node_init+0x266>
 80161a2:	f8d8 3000 	ldr.w	r3, [r8]
 80161a6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80161aa:	2078      	movs	r0, #120	; 0x78
 80161ac:	4798      	blx	r3
 80161ae:	4681      	mov	r9, r0
 80161b0:	6060      	str	r0, [r4, #4]
 80161b2:	2800      	cmp	r0, #0
 80161b4:	f000 80ca 	beq.w	801634c <rcl_node_init+0x250>
 80161b8:	2200      	movs	r2, #0
 80161ba:	2300      	movs	r3, #0
 80161bc:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 80161c0:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 80161c4:	a808      	add	r0, sp, #32
 80161c6:	f000 f907 	bl	80163d8 <rcl_node_get_default_options>
 80161ca:	a908      	add	r1, sp, #32
 80161cc:	4648      	mov	r0, r9
 80161ce:	2268      	movs	r2, #104	; 0x68
 80161d0:	f004 faea 	bl	801a7a8 <memcpy>
 80161d4:	6861      	ldr	r1, [r4, #4]
 80161d6:	6027      	str	r7, [r4, #0]
 80161d8:	4640      	mov	r0, r8
 80161da:	f000 f90b 	bl	80163f4 <rcl_node_options_copy>
 80161de:	2800      	cmp	r0, #0
 80161e0:	d158      	bne.n	8016294 <rcl_node_init+0x198>
 80161e2:	4628      	mov	r0, r5
 80161e4:	f7e9 fffe 	bl	80001e4 <strlen>
 80161e8:	4428      	add	r0, r5
 80161ea:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80161ee:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80161f2:	2b2f      	cmp	r3, #47	; 0x2f
 80161f4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80161f8:	9300      	str	r3, [sp, #0]
 80161fa:	bf0c      	ite	eq
 80161fc:	4b5f      	ldreq	r3, [pc, #380]	; (801637c <rcl_node_init+0x280>)
 80161fe:	4b60      	ldrne	r3, [pc, #384]	; (8016380 <rcl_node_init+0x284>)
 8016200:	9302      	str	r3, [sp, #8]
 8016202:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016206:	9301      	str	r3, [sp, #4]
 8016208:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 801620c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8016210:	f000 fc0a 	bl	8016a28 <rcutils_format_string_limit>
 8016214:	6823      	ldr	r3, [r4, #0]
 8016216:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 801621a:	6818      	ldr	r0, [r3, #0]
 801621c:	4631      	mov	r1, r6
 801621e:	3028      	adds	r0, #40	; 0x28
 8016220:	462a      	mov	r2, r5
 8016222:	6866      	ldr	r6, [r4, #4]
 8016224:	f001 fbc2 	bl	80179ac <rmw_create_node>
 8016228:	6863      	ldr	r3, [r4, #4]
 801622a:	66b0      	str	r0, [r6, #104]	; 0x68
 801622c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 801622e:	2800      	cmp	r0, #0
 8016230:	d032      	beq.n	8016298 <rcl_node_init+0x19c>
 8016232:	f001 fc4d 	bl	8017ad0 <rmw_node_get_graph_guard_condition>
 8016236:	4681      	mov	r9, r0
 8016238:	b360      	cbz	r0, 8016294 <rcl_node_init+0x198>
 801623a:	f8d8 3000 	ldr.w	r3, [r8]
 801623e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016242:	6866      	ldr	r6, [r4, #4]
 8016244:	2008      	movs	r0, #8
 8016246:	4798      	blx	r3
 8016248:	6863      	ldr	r3, [r4, #4]
 801624a:	66f0      	str	r0, [r6, #108]	; 0x6c
 801624c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 8016250:	f1bb 0f00 	cmp.w	fp, #0
 8016254:	d020      	beq.n	8016298 <rcl_node_init+0x19c>
 8016256:	a806      	add	r0, sp, #24
 8016258:	f003 fd70 	bl	8019d3c <rcl_get_zero_initialized_guard_condition>
 801625c:	a806      	add	r0, sp, #24
 801625e:	c803      	ldmia	r0, {r0, r1}
 8016260:	6863      	ldr	r3, [r4, #4]
 8016262:	46c4      	mov	ip, r8
 8016264:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 8016268:	e88b 0003 	stmia.w	fp, {r0, r1}
 801626c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016270:	ae23      	add	r6, sp, #140	; 0x8c
 8016272:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016274:	f8dc 3000 	ldr.w	r3, [ip]
 8016278:	6033      	str	r3, [r6, #0]
 801627a:	ab28      	add	r3, sp, #160	; 0xa0
 801627c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8016280:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016284:	4649      	mov	r1, r9
 8016286:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016288:	463a      	mov	r2, r7
 801628a:	4670      	mov	r0, lr
 801628c:	f003 fd60 	bl	8019d50 <rcl_guard_condition_init_from_rmw>
 8016290:	4681      	mov	r9, r0
 8016292:	b328      	cbz	r0, 80162e0 <rcl_node_init+0x1e4>
 8016294:	6863      	ldr	r3, [r4, #4]
 8016296:	b1f3      	cbz	r3, 80162d6 <rcl_node_init+0x1da>
 8016298:	6f58      	ldr	r0, [r3, #116]	; 0x74
 801629a:	b128      	cbz	r0, 80162a8 <rcl_node_init+0x1ac>
 801629c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80162a0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80162a4:	4798      	blx	r3
 80162a6:	6863      	ldr	r3, [r4, #4]
 80162a8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80162aa:	b110      	cbz	r0, 80162b2 <rcl_node_init+0x1b6>
 80162ac:	f001 fb96 	bl	80179dc <rmw_destroy_node>
 80162b0:	6863      	ldr	r3, [r4, #4]
 80162b2:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80162b4:	b148      	cbz	r0, 80162ca <rcl_node_init+0x1ce>
 80162b6:	f003 fdab 	bl	8019e10 <rcl_guard_condition_fini>
 80162ba:	6863      	ldr	r3, [r4, #4]
 80162bc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80162c0:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80162c2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80162c6:	4798      	blx	r3
 80162c8:	6863      	ldr	r3, [r4, #4]
 80162ca:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80162ce:	4618      	mov	r0, r3
 80162d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80162d4:	4798      	blx	r3
 80162d6:	2300      	movs	r3, #0
 80162d8:	e9c4 3300 	strd	r3, r3, [r4]
 80162dc:	f04f 0901 	mov.w	r9, #1
 80162e0:	f1ba 0f00 	cmp.w	sl, #0
 80162e4:	d125      	bne.n	8016332 <rcl_node_init+0x236>
 80162e6:	e001      	b.n	80162ec <rcl_node_init+0x1f0>
 80162e8:	f04f 090b 	mov.w	r9, #11
 80162ec:	4648      	mov	r0, r9
 80162ee:	b029      	add	sp, #164	; 0xa4
 80162f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162f4:	f04f 0965 	mov.w	r9, #101	; 0x65
 80162f8:	e7f8      	b.n	80162ec <rcl_node_init+0x1f0>
 80162fa:	782b      	ldrb	r3, [r5, #0]
 80162fc:	2b2f      	cmp	r3, #47	; 0x2f
 80162fe:	f43f af42 	beq.w	8016186 <rcl_node_init+0x8a>
 8016302:	9503      	str	r5, [sp, #12]
 8016304:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8016308:	9300      	str	r3, [sp, #0]
 801630a:	4b1e      	ldr	r3, [pc, #120]	; (8016384 <rcl_node_init+0x288>)
 801630c:	9302      	str	r3, [sp, #8]
 801630e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016312:	9301      	str	r3, [sp, #4]
 8016314:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8016318:	f000 fb86 	bl	8016a28 <rcutils_format_string_limit>
 801631c:	4605      	mov	r5, r0
 801631e:	b340      	cbz	r0, 8016372 <rcl_node_init+0x276>
 8016320:	2200      	movs	r2, #0
 8016322:	a922      	add	r1, sp, #136	; 0x88
 8016324:	9222      	str	r2, [sp, #136]	; 0x88
 8016326:	f000 ff3b 	bl	80171a0 <rmw_validate_namespace>
 801632a:	4681      	mov	r9, r0
 801632c:	2800      	cmp	r0, #0
 801632e:	f43f af34 	beq.w	801619a <rcl_node_init+0x9e>
 8016332:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016336:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801633a:	4628      	mov	r0, r5
 801633c:	4798      	blx	r3
 801633e:	e7d5      	b.n	80162ec <rcl_node_init+0x1f0>
 8016340:	f04f 0964 	mov.w	r9, #100	; 0x64
 8016344:	4648      	mov	r0, r9
 8016346:	b029      	add	sp, #164	; 0xa4
 8016348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801634c:	f04f 090a 	mov.w	r9, #10
 8016350:	f1ba 0f00 	cmp.w	sl, #0
 8016354:	d1ed      	bne.n	8016332 <rcl_node_init+0x236>
 8016356:	e7c9      	b.n	80162ec <rcl_node_init+0x1f0>
 8016358:	f000 ff92 	bl	8017280 <rmw_node_name_validation_result_string>
 801635c:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 8016360:	e7c4      	b.n	80162ec <rcl_node_init+0x1f0>
 8016362:	f000 ff2f 	bl	80171c4 <rmw_namespace_validation_result_string>
 8016366:	f04f 09ca 	mov.w	r9, #202	; 0xca
 801636a:	f1ba 0f00 	cmp.w	sl, #0
 801636e:	d1e0      	bne.n	8016332 <rcl_node_init+0x236>
 8016370:	e7bc      	b.n	80162ec <rcl_node_init+0x1f0>
 8016372:	f04f 090a 	mov.w	r9, #10
 8016376:	e7b9      	b.n	80162ec <rcl_node_init+0x1f0>
 8016378:	0801c75c 	.word	0x0801c75c
 801637c:	0801c004 	.word	0x0801c004
 8016380:	0801c764 	.word	0x0801c764
 8016384:	0801c760 	.word	0x0801c760

08016388 <rcl_node_is_valid>:
 8016388:	b130      	cbz	r0, 8016398 <rcl_node_is_valid+0x10>
 801638a:	6843      	ldr	r3, [r0, #4]
 801638c:	b123      	cbz	r3, 8016398 <rcl_node_is_valid+0x10>
 801638e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016390:	b113      	cbz	r3, 8016398 <rcl_node_is_valid+0x10>
 8016392:	6800      	ldr	r0, [r0, #0]
 8016394:	f7ff bc1e 	b.w	8015bd4 <rcl_context_is_valid>
 8016398:	2000      	movs	r0, #0
 801639a:	4770      	bx	lr

0801639c <rcl_node_get_name>:
 801639c:	b120      	cbz	r0, 80163a8 <rcl_node_get_name+0xc>
 801639e:	6840      	ldr	r0, [r0, #4]
 80163a0:	b110      	cbz	r0, 80163a8 <rcl_node_get_name+0xc>
 80163a2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80163a4:	b100      	cbz	r0, 80163a8 <rcl_node_get_name+0xc>
 80163a6:	6880      	ldr	r0, [r0, #8]
 80163a8:	4770      	bx	lr
 80163aa:	bf00      	nop

080163ac <rcl_node_get_namespace>:
 80163ac:	b120      	cbz	r0, 80163b8 <rcl_node_get_namespace+0xc>
 80163ae:	6840      	ldr	r0, [r0, #4]
 80163b0:	b110      	cbz	r0, 80163b8 <rcl_node_get_namespace+0xc>
 80163b2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80163b4:	b100      	cbz	r0, 80163b8 <rcl_node_get_namespace+0xc>
 80163b6:	68c0      	ldr	r0, [r0, #12]
 80163b8:	4770      	bx	lr
 80163ba:	bf00      	nop

080163bc <rcl_node_get_options>:
 80163bc:	b128      	cbz	r0, 80163ca <rcl_node_get_options+0xe>
 80163be:	6840      	ldr	r0, [r0, #4]
 80163c0:	b118      	cbz	r0, 80163ca <rcl_node_get_options+0xe>
 80163c2:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	bf08      	it	eq
 80163c8:	2000      	moveq	r0, #0
 80163ca:	4770      	bx	lr

080163cc <rcl_node_get_rmw_handle>:
 80163cc:	b110      	cbz	r0, 80163d4 <rcl_node_get_rmw_handle+0x8>
 80163ce:	6840      	ldr	r0, [r0, #4]
 80163d0:	b100      	cbz	r0, 80163d4 <rcl_node_get_rmw_handle+0x8>
 80163d2:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80163d4:	4770      	bx	lr
 80163d6:	bf00      	nop

080163d8 <rcl_node_get_default_options>:
 80163d8:	b510      	push	{r4, lr}
 80163da:	2268      	movs	r2, #104	; 0x68
 80163dc:	4604      	mov	r4, r0
 80163de:	2100      	movs	r1, #0
 80163e0:	f004 f9f0 	bl	801a7c4 <memset>
 80163e4:	4620      	mov	r0, r4
 80163e6:	f7f9 fe51 	bl	801008c <rcutils_get_default_allocator>
 80163ea:	2301      	movs	r3, #1
 80163ec:	7523      	strb	r3, [r4, #20]
 80163ee:	4620      	mov	r0, r4
 80163f0:	bd10      	pop	{r4, pc}
 80163f2:	bf00      	nop

080163f4 <rcl_node_options_copy>:
 80163f4:	b1d0      	cbz	r0, 801642c <rcl_node_options_copy+0x38>
 80163f6:	b570      	push	{r4, r5, r6, lr}
 80163f8:	460c      	mov	r4, r1
 80163fa:	b1a9      	cbz	r1, 8016428 <rcl_node_options_copy+0x34>
 80163fc:	4288      	cmp	r0, r1
 80163fe:	4684      	mov	ip, r0
 8016400:	d012      	beq.n	8016428 <rcl_node_options_copy+0x34>
 8016402:	4605      	mov	r5, r0
 8016404:	8a86      	ldrh	r6, [r0, #20]
 8016406:	468e      	mov	lr, r1
 8016408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801640a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801640e:	682b      	ldr	r3, [r5, #0]
 8016410:	f8ce 3000 	str.w	r3, [lr]
 8016414:	f10c 0118 	add.w	r1, ip, #24
 8016418:	2250      	movs	r2, #80	; 0x50
 801641a:	82a6      	strh	r6, [r4, #20]
 801641c:	f104 0018 	add.w	r0, r4, #24
 8016420:	f004 f9c2 	bl	801a7a8 <memcpy>
 8016424:	2000      	movs	r0, #0
 8016426:	bd70      	pop	{r4, r5, r6, pc}
 8016428:	200b      	movs	r0, #11
 801642a:	bd70      	pop	{r4, r5, r6, pc}
 801642c:	200b      	movs	r0, #11
 801642e:	4770      	bx	lr

08016430 <rcl_node_resolve_name>:
 8016430:	b082      	sub	sp, #8
 8016432:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016436:	b091      	sub	sp, #68	; 0x44
 8016438:	ac1a      	add	r4, sp, #104	; 0x68
 801643a:	e884 000c 	stmia.w	r4, {r2, r3}
 801643e:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 8016442:	2800      	cmp	r0, #0
 8016444:	d03b      	beq.n	80164be <rcl_node_resolve_name+0x8e>
 8016446:	460c      	mov	r4, r1
 8016448:	4605      	mov	r5, r0
 801644a:	f7ff ffb7 	bl	80163bc <rcl_node_get_options>
 801644e:	2800      	cmp	r0, #0
 8016450:	d037      	beq.n	80164c2 <rcl_node_resolve_name+0x92>
 8016452:	4628      	mov	r0, r5
 8016454:	f7ff ffa2 	bl	801639c <rcl_node_get_name>
 8016458:	4606      	mov	r6, r0
 801645a:	4628      	mov	r0, r5
 801645c:	f7ff ffa6 	bl	80163ac <rcl_node_get_namespace>
 8016460:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8016464:	4681      	mov	r9, r0
 8016466:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801646a:	ad0b      	add	r5, sp, #44	; 0x2c
 801646c:	46ac      	mov	ip, r5
 801646e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016472:	f8de 3000 	ldr.w	r3, [lr]
 8016476:	f8cc 3000 	str.w	r3, [ip]
 801647a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801647c:	b1fb      	cbz	r3, 80164be <rcl_node_resolve_name+0x8e>
 801647e:	468a      	mov	sl, r1
 8016480:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8016484:	f000 fc28 	bl	8016cd8 <rcutils_get_zero_initialized_string_map>
 8016488:	ab10      	add	r3, sp, #64	; 0x40
 801648a:	9008      	str	r0, [sp, #32]
 801648c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8016490:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016494:	2100      	movs	r1, #0
 8016496:	e895 000c 	ldmia.w	r5, {r2, r3}
 801649a:	a808      	add	r0, sp, #32
 801649c:	f000 fc94 	bl	8016dc8 <rcutils_string_map_init>
 80164a0:	4607      	mov	r7, r0
 80164a2:	b180      	cbz	r0, 80164c6 <rcl_node_resolve_name+0x96>
 80164a4:	f7f9 fe0e 	bl	80100c4 <rcutils_get_error_string>
 80164a8:	f7f9 fe22 	bl	80100f0 <rcutils_reset_error>
 80164ac:	2f0a      	cmp	r7, #10
 80164ae:	bf18      	it	ne
 80164b0:	2701      	movne	r7, #1
 80164b2:	4638      	mov	r0, r7
 80164b4:	b011      	add	sp, #68	; 0x44
 80164b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164ba:	b002      	add	sp, #8
 80164bc:	4770      	bx	lr
 80164be:	270b      	movs	r7, #11
 80164c0:	e7f7      	b.n	80164b2 <rcl_node_resolve_name+0x82>
 80164c2:	2701      	movs	r7, #1
 80164c4:	e7f5      	b.n	80164b2 <rcl_node_resolve_name+0x82>
 80164c6:	9009      	str	r0, [sp, #36]	; 0x24
 80164c8:	9007      	str	r0, [sp, #28]
 80164ca:	a808      	add	r0, sp, #32
 80164cc:	f003 fc30 	bl	8019d30 <rcl_get_default_topic_name_substitutions>
 80164d0:	4607      	mov	r7, r0
 80164d2:	b1a8      	cbz	r0, 8016500 <rcl_node_resolve_name+0xd0>
 80164d4:	280a      	cmp	r0, #10
 80164d6:	9c07      	ldr	r4, [sp, #28]
 80164d8:	d000      	beq.n	80164dc <rcl_node_resolve_name+0xac>
 80164da:	2701      	movs	r7, #1
 80164dc:	a808      	add	r0, sp, #32
 80164de:	f000 fcb3 	bl	8016e48 <rcutils_string_map_fini>
 80164e2:	2800      	cmp	r0, #0
 80164e4:	d13d      	bne.n	8016562 <rcl_node_resolve_name+0x132>
 80164e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80164e8:	4659      	mov	r1, fp
 80164ea:	47d0      	blx	sl
 80164ec:	4659      	mov	r1, fp
 80164ee:	4620      	mov	r0, r4
 80164f0:	47d0      	blx	sl
 80164f2:	f1b8 0f00 	cmp.w	r8, #0
 80164f6:	d0dc      	beq.n	80164b2 <rcl_node_resolve_name+0x82>
 80164f8:	2f67      	cmp	r7, #103	; 0x67
 80164fa:	bf08      	it	eq
 80164fc:	2768      	moveq	r7, #104	; 0x68
 80164fe:	e7d8      	b.n	80164b2 <rcl_node_resolve_name+0x82>
 8016500:	ab09      	add	r3, sp, #36	; 0x24
 8016502:	9305      	str	r3, [sp, #20]
 8016504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016506:	46ec      	mov	ip, sp
 8016508:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801650c:	682b      	ldr	r3, [r5, #0]
 801650e:	f8cc 3000 	str.w	r3, [ip]
 8016512:	464a      	mov	r2, r9
 8016514:	4631      	mov	r1, r6
 8016516:	4620      	mov	r0, r4
 8016518:	ab08      	add	r3, sp, #32
 801651a:	f003 faab 	bl	8019a74 <rcl_expand_topic_name>
 801651e:	4607      	mov	r7, r0
 8016520:	b9b8      	cbnz	r0, 8016552 <rcl_node_resolve_name+0x122>
 8016522:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016524:	9009      	str	r0, [sp, #36]	; 0x24
 8016526:	4602      	mov	r2, r0
 8016528:	a90a      	add	r1, sp, #40	; 0x28
 801652a:	4620      	mov	r0, r4
 801652c:	f000 fd74 	bl	8017018 <rmw_validate_full_topic_name>
 8016530:	b988      	cbnz	r0, 8016556 <rcl_node_resolve_name+0x126>
 8016532:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016534:	b9d5      	cbnz	r5, 801656c <rcl_node_resolve_name+0x13c>
 8016536:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016538:	a808      	add	r0, sp, #32
 801653a:	601c      	str	r4, [r3, #0]
 801653c:	f000 fc84 	bl	8016e48 <rcutils_string_map_fini>
 8016540:	4607      	mov	r7, r0
 8016542:	b1a8      	cbz	r0, 8016570 <rcl_node_resolve_name+0x140>
 8016544:	f7f9 fdbe 	bl	80100c4 <rcutils_get_error_string>
 8016548:	462c      	mov	r4, r5
 801654a:	f7f9 fdd1 	bl	80100f0 <rcutils_reset_error>
 801654e:	2701      	movs	r7, #1
 8016550:	e7c9      	b.n	80164e6 <rcl_node_resolve_name+0xb6>
 8016552:	9c07      	ldr	r4, [sp, #28]
 8016554:	e7c2      	b.n	80164dc <rcl_node_resolve_name+0xac>
 8016556:	f7f9 fdb5 	bl	80100c4 <rcutils_get_error_string>
 801655a:	2701      	movs	r7, #1
 801655c:	f7f9 fdc8 	bl	80100f0 <rcutils_reset_error>
 8016560:	e7bc      	b.n	80164dc <rcl_node_resolve_name+0xac>
 8016562:	f7f9 fdaf 	bl	80100c4 <rcutils_get_error_string>
 8016566:	f7f9 fdc3 	bl	80100f0 <rcutils_reset_error>
 801656a:	e7bc      	b.n	80164e6 <rcl_node_resolve_name+0xb6>
 801656c:	2767      	movs	r7, #103	; 0x67
 801656e:	e7b5      	b.n	80164dc <rcl_node_resolve_name+0xac>
 8016570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016572:	4659      	mov	r1, fp
 8016574:	47d0      	blx	sl
 8016576:	4659      	mov	r1, fp
 8016578:	4638      	mov	r0, r7
 801657a:	47d0      	blx	sl
 801657c:	e799      	b.n	80164b2 <rcl_node_resolve_name+0x82>
 801657e:	bf00      	nop

08016580 <exact_match_lookup>:
 8016580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016582:	f102 0708 	add.w	r7, r2, #8
 8016586:	460b      	mov	r3, r1
 8016588:	4614      	mov	r4, r2
 801658a:	4606      	mov	r6, r0
 801658c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016590:	b085      	sub	sp, #20
 8016592:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016596:	4618      	mov	r0, r3
 8016598:	4919      	ldr	r1, [pc, #100]	; (8016600 <exact_match_lookup+0x80>)
 801659a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801659e:	f000 fa35 	bl	8016a0c <rcutils_join_path>
 80165a2:	7833      	ldrb	r3, [r6, #0]
 80165a4:	2b2f      	cmp	r3, #47	; 0x2f
 80165a6:	4605      	mov	r5, r0
 80165a8:	d023      	beq.n	80165f2 <exact_match_lookup+0x72>
 80165aa:	f104 030c 	add.w	r3, r4, #12
 80165ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80165b2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80165b6:	1c70      	adds	r0, r6, #1
 80165b8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80165bc:	f000 fa2c 	bl	8016a18 <rcutils_to_native_path>
 80165c0:	4606      	mov	r6, r0
 80165c2:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80165c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80165ca:	4631      	mov	r1, r6
 80165cc:	e894 000c 	ldmia.w	r4, {r2, r3}
 80165d0:	4628      	mov	r0, r5
 80165d2:	f000 fa1b 	bl	8016a0c <rcutils_join_path>
 80165d6:	6862      	ldr	r2, [r4, #4]
 80165d8:	6921      	ldr	r1, [r4, #16]
 80165da:	4603      	mov	r3, r0
 80165dc:	4630      	mov	r0, r6
 80165de:	461e      	mov	r6, r3
 80165e0:	4790      	blx	r2
 80165e2:	4628      	mov	r0, r5
 80165e4:	6863      	ldr	r3, [r4, #4]
 80165e6:	6921      	ldr	r1, [r4, #16]
 80165e8:	4798      	blx	r3
 80165ea:	4635      	mov	r5, r6
 80165ec:	4628      	mov	r0, r5
 80165ee:	b005      	add	sp, #20
 80165f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165f2:	7873      	ldrb	r3, [r6, #1]
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d1d8      	bne.n	80165aa <exact_match_lookup+0x2a>
 80165f8:	4628      	mov	r0, r5
 80165fa:	b005      	add	sp, #20
 80165fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165fe:	bf00      	nop
 8016600:	0801c7b0 	.word	0x0801c7b0

08016604 <rcl_get_secure_root>:
 8016604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016608:	b085      	sub	sp, #20
 801660a:	b168      	cbz	r0, 8016628 <rcl_get_secure_root+0x24>
 801660c:	4607      	mov	r7, r0
 801660e:	4608      	mov	r0, r1
 8016610:	460c      	mov	r4, r1
 8016612:	f7f9 fd49 	bl	80100a8 <rcutils_allocator_is_valid>
 8016616:	b138      	cbz	r0, 8016628 <rcl_get_secure_root+0x24>
 8016618:	2300      	movs	r3, #0
 801661a:	482d      	ldr	r0, [pc, #180]	; (80166d0 <rcl_get_secure_root+0xcc>)
 801661c:	9303      	str	r3, [sp, #12]
 801661e:	a903      	add	r1, sp, #12
 8016620:	f000 f9da 	bl	80169d8 <rcutils_get_env>
 8016624:	4605      	mov	r5, r0
 8016626:	b120      	cbz	r0, 8016632 <rcl_get_secure_root+0x2e>
 8016628:	2500      	movs	r5, #0
 801662a:	4628      	mov	r0, r5
 801662c:	b005      	add	sp, #20
 801662e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016632:	9b03      	ldr	r3, [sp, #12]
 8016634:	781a      	ldrb	r2, [r3, #0]
 8016636:	2a00      	cmp	r2, #0
 8016638:	d0f6      	beq.n	8016628 <rcl_get_secure_root+0x24>
 801663a:	f104 090c 	add.w	r9, r4, #12
 801663e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016642:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016646:	4618      	mov	r0, r3
 8016648:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801664c:	f000 fb06 	bl	8016c5c <rcutils_strdup>
 8016650:	4680      	mov	r8, r0
 8016652:	2800      	cmp	r0, #0
 8016654:	d0e8      	beq.n	8016628 <rcl_get_secure_root+0x24>
 8016656:	481f      	ldr	r0, [pc, #124]	; (80166d4 <rcl_get_secure_root+0xd0>)
 8016658:	9503      	str	r5, [sp, #12]
 801665a:	a903      	add	r1, sp, #12
 801665c:	f000 f9bc 	bl	80169d8 <rcutils_get_env>
 8016660:	b160      	cbz	r0, 801667c <rcl_get_secure_root+0x78>
 8016662:	2600      	movs	r6, #0
 8016664:	6863      	ldr	r3, [r4, #4]
 8016666:	6921      	ldr	r1, [r4, #16]
 8016668:	4630      	mov	r0, r6
 801666a:	4798      	blx	r3
 801666c:	4640      	mov	r0, r8
 801666e:	6863      	ldr	r3, [r4, #4]
 8016670:	6921      	ldr	r1, [r4, #16]
 8016672:	4798      	blx	r3
 8016674:	4628      	mov	r0, r5
 8016676:	b005      	add	sp, #20
 8016678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801667c:	9b03      	ldr	r3, [sp, #12]
 801667e:	781e      	ldrb	r6, [r3, #0]
 8016680:	b1f6      	cbz	r6, 80166c0 <rcl_get_secure_root+0xbc>
 8016682:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016686:	e88d 0003 	stmia.w	sp, {r0, r1}
 801668a:	4618      	mov	r0, r3
 801668c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016690:	f000 fae4 	bl	8016c5c <rcutils_strdup>
 8016694:	4606      	mov	r6, r0
 8016696:	2800      	cmp	r0, #0
 8016698:	d0e3      	beq.n	8016662 <rcl_get_secure_root+0x5e>
 801669a:	4622      	mov	r2, r4
 801669c:	4641      	mov	r1, r8
 801669e:	f7ff ff6f 	bl	8016580 <exact_match_lookup>
 80166a2:	4605      	mov	r5, r0
 80166a4:	2d00      	cmp	r5, #0
 80166a6:	d0dd      	beq.n	8016664 <rcl_get_secure_root+0x60>
 80166a8:	4628      	mov	r0, r5
 80166aa:	f000 f9ad 	bl	8016a08 <rcutils_is_directory>
 80166ae:	4603      	mov	r3, r0
 80166b0:	2800      	cmp	r0, #0
 80166b2:	d1d7      	bne.n	8016664 <rcl_get_secure_root+0x60>
 80166b4:	4628      	mov	r0, r5
 80166b6:	6921      	ldr	r1, [r4, #16]
 80166b8:	461d      	mov	r5, r3
 80166ba:	6863      	ldr	r3, [r4, #4]
 80166bc:	4798      	blx	r3
 80166be:	e7d1      	b.n	8016664 <rcl_get_secure_root+0x60>
 80166c0:	4622      	mov	r2, r4
 80166c2:	4638      	mov	r0, r7
 80166c4:	4641      	mov	r1, r8
 80166c6:	f7ff ff5b 	bl	8016580 <exact_match_lookup>
 80166ca:	4605      	mov	r5, r0
 80166cc:	e7ea      	b.n	80166a4 <rcl_get_secure_root+0xa0>
 80166ce:	bf00      	nop
 80166d0:	0801c7bc 	.word	0x0801c7bc
 80166d4:	0801c7d4 	.word	0x0801c7d4

080166d8 <rcl_get_security_options_from_environment>:
 80166d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166dc:	b082      	sub	sp, #8
 80166de:	2300      	movs	r3, #0
 80166e0:	4606      	mov	r6, r0
 80166e2:	460f      	mov	r7, r1
 80166e4:	4820      	ldr	r0, [pc, #128]	; (8016768 <rcl_get_security_options_from_environment+0x90>)
 80166e6:	9301      	str	r3, [sp, #4]
 80166e8:	a901      	add	r1, sp, #4
 80166ea:	4690      	mov	r8, r2
 80166ec:	f000 f974 	bl	80169d8 <rcutils_get_env>
 80166f0:	b120      	cbz	r0, 80166fc <rcl_get_security_options_from_environment+0x24>
 80166f2:	2501      	movs	r5, #1
 80166f4:	4628      	mov	r0, r5
 80166f6:	b002      	add	sp, #8
 80166f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166fc:	491b      	ldr	r1, [pc, #108]	; (801676c <rcl_get_security_options_from_environment+0x94>)
 80166fe:	4604      	mov	r4, r0
 8016700:	9801      	ldr	r0, [sp, #4]
 8016702:	f7e9 fd65 	bl	80001d0 <strcmp>
 8016706:	4605      	mov	r5, r0
 8016708:	b9e8      	cbnz	r0, 8016746 <rcl_get_security_options_from_environment+0x6e>
 801670a:	9001      	str	r0, [sp, #4]
 801670c:	f1b8 0f00 	cmp.w	r8, #0
 8016710:	d020      	beq.n	8016754 <rcl_get_security_options_from_environment+0x7c>
 8016712:	4817      	ldr	r0, [pc, #92]	; (8016770 <rcl_get_security_options_from_environment+0x98>)
 8016714:	a901      	add	r1, sp, #4
 8016716:	f000 f95f 	bl	80169d8 <rcutils_get_env>
 801671a:	2800      	cmp	r0, #0
 801671c:	d1e9      	bne.n	80166f2 <rcl_get_security_options_from_environment+0x1a>
 801671e:	4915      	ldr	r1, [pc, #84]	; (8016774 <rcl_get_security_options_from_environment+0x9c>)
 8016720:	9801      	ldr	r0, [sp, #4]
 8016722:	f7e9 fd55 	bl	80001d0 <strcmp>
 8016726:	fab0 f080 	clz	r0, r0
 801672a:	0940      	lsrs	r0, r0, #5
 801672c:	f888 0000 	strb.w	r0, [r8]
 8016730:	4639      	mov	r1, r7
 8016732:	4630      	mov	r0, r6
 8016734:	f7ff ff66 	bl	8016604 <rcl_get_secure_root>
 8016738:	b170      	cbz	r0, 8016758 <rcl_get_security_options_from_environment+0x80>
 801673a:	f8c8 0004 	str.w	r0, [r8, #4]
 801673e:	4628      	mov	r0, r5
 8016740:	b002      	add	sp, #8
 8016742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016746:	4625      	mov	r5, r4
 8016748:	4628      	mov	r0, r5
 801674a:	f888 4000 	strb.w	r4, [r8]
 801674e:	b002      	add	sp, #8
 8016750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016754:	250b      	movs	r5, #11
 8016756:	e7cd      	b.n	80166f4 <rcl_get_security_options_from_environment+0x1c>
 8016758:	f898 5000 	ldrb.w	r5, [r8]
 801675c:	f1a5 0501 	sub.w	r5, r5, #1
 8016760:	fab5 f585 	clz	r5, r5
 8016764:	096d      	lsrs	r5, r5, #5
 8016766:	e7c5      	b.n	80166f4 <rcl_get_security_options_from_environment+0x1c>
 8016768:	0801c774 	.word	0x0801c774
 801676c:	0801c788 	.word	0x0801c788
 8016770:	0801c790 	.word	0x0801c790
 8016774:	0801c7a8 	.word	0x0801c7a8

08016778 <rcl_get_system_time>:
 8016778:	4608      	mov	r0, r1
 801677a:	f000 bbd9 	b.w	8016f30 <rcutils_system_time_now>
 801677e:	bf00      	nop

08016780 <rcl_get_steady_time>:
 8016780:	4608      	mov	r0, r1
 8016782:	f000 bbfd 	b.w	8016f80 <rcutils_steady_time_now>
 8016786:	bf00      	nop

08016788 <rcl_get_ros_time>:
 8016788:	7a03      	ldrb	r3, [r0, #8]
 801678a:	b510      	push	{r4, lr}
 801678c:	460c      	mov	r4, r1
 801678e:	b133      	cbz	r3, 801679e <rcl_get_ros_time+0x16>
 8016790:	2105      	movs	r1, #5
 8016792:	f000 f8eb 	bl	801696c <__atomic_load_8>
 8016796:	e9c4 0100 	strd	r0, r1, [r4]
 801679a:	2000      	movs	r0, #0
 801679c:	bd10      	pop	{r4, pc}
 801679e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167a2:	4608      	mov	r0, r1
 80167a4:	f000 bbc4 	b.w	8016f30 <rcutils_system_time_now>

080167a8 <rcl_clock_init>:
 80167a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167aa:	4605      	mov	r5, r0
 80167ac:	4610      	mov	r0, r2
 80167ae:	4614      	mov	r4, r2
 80167b0:	460e      	mov	r6, r1
 80167b2:	f7f9 fc79 	bl	80100a8 <rcutils_allocator_is_valid>
 80167b6:	b128      	cbz	r0, 80167c4 <rcl_clock_init+0x1c>
 80167b8:	2d03      	cmp	r5, #3
 80167ba:	d803      	bhi.n	80167c4 <rcl_clock_init+0x1c>
 80167bc:	e8df f005 	tbb	[pc, r5]
 80167c0:	06532e1d 	.word	0x06532e1d
 80167c4:	f04f 0c0b 	mov.w	ip, #11
 80167c8:	4660      	mov	r0, ip
 80167ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167cc:	2e00      	cmp	r6, #0
 80167ce:	d0f9      	beq.n	80167c4 <rcl_clock_init+0x1c>
 80167d0:	2c00      	cmp	r4, #0
 80167d2:	d0f7      	beq.n	80167c4 <rcl_clock_init+0x1c>
 80167d4:	2300      	movs	r3, #0
 80167d6:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80167da:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 8016890 <rcl_clock_init+0xe8>
 80167de:	6133      	str	r3, [r6, #16]
 80167e0:	f106 0514 	add.w	r5, r6, #20
 80167e4:	469c      	mov	ip, r3
 80167e6:	2703      	movs	r7, #3
 80167e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80167ec:	6823      	ldr	r3, [r4, #0]
 80167ee:	602b      	str	r3, [r5, #0]
 80167f0:	7037      	strb	r7, [r6, #0]
 80167f2:	f8c6 e00c 	str.w	lr, [r6, #12]
 80167f6:	4660      	mov	r0, ip
 80167f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167fa:	2e00      	cmp	r6, #0
 80167fc:	d0e2      	beq.n	80167c4 <rcl_clock_init+0x1c>
 80167fe:	2300      	movs	r3, #0
 8016800:	7033      	strb	r3, [r6, #0]
 8016802:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016806:	e9c6 3303 	strd	r3, r3, [r6, #12]
 801680a:	469c      	mov	ip, r3
 801680c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801680e:	f106 0514 	add.w	r5, r6, #20
 8016812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016814:	6823      	ldr	r3, [r4, #0]
 8016816:	602b      	str	r3, [r5, #0]
 8016818:	4660      	mov	r0, ip
 801681a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801681c:	2e00      	cmp	r6, #0
 801681e:	d0d1      	beq.n	80167c4 <rcl_clock_init+0x1c>
 8016820:	2c00      	cmp	r4, #0
 8016822:	d0cf      	beq.n	80167c4 <rcl_clock_init+0x1c>
 8016824:	2700      	movs	r7, #0
 8016826:	7037      	strb	r7, [r6, #0]
 8016828:	46a4      	mov	ip, r4
 801682a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801682e:	f106 0514 	add.w	r5, r6, #20
 8016832:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8016836:	e9c6 7703 	strd	r7, r7, [r6, #12]
 801683a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801683c:	f8dc 3000 	ldr.w	r3, [ip]
 8016840:	602b      	str	r3, [r5, #0]
 8016842:	6921      	ldr	r1, [r4, #16]
 8016844:	6823      	ldr	r3, [r4, #0]
 8016846:	2010      	movs	r0, #16
 8016848:	4798      	blx	r3
 801684a:	6130      	str	r0, [r6, #16]
 801684c:	b1d0      	cbz	r0, 8016884 <rcl_clock_init+0xdc>
 801684e:	2200      	movs	r2, #0
 8016850:	2300      	movs	r3, #0
 8016852:	e9c0 2300 	strd	r2, r3, [r0]
 8016856:	2301      	movs	r3, #1
 8016858:	7207      	strb	r7, [r0, #8]
 801685a:	4a0c      	ldr	r2, [pc, #48]	; (801688c <rcl_clock_init+0xe4>)
 801685c:	7033      	strb	r3, [r6, #0]
 801685e:	46bc      	mov	ip, r7
 8016860:	60f2      	str	r2, [r6, #12]
 8016862:	4660      	mov	r0, ip
 8016864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016866:	2e00      	cmp	r6, #0
 8016868:	d0ac      	beq.n	80167c4 <rcl_clock_init+0x1c>
 801686a:	2c00      	cmp	r4, #0
 801686c:	d0aa      	beq.n	80167c4 <rcl_clock_init+0x1c>
 801686e:	2300      	movs	r3, #0
 8016870:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016874:	f8df e01c 	ldr.w	lr, [pc, #28]	; 8016894 <rcl_clock_init+0xec>
 8016878:	6133      	str	r3, [r6, #16]
 801687a:	f106 0514 	add.w	r5, r6, #20
 801687e:	469c      	mov	ip, r3
 8016880:	2702      	movs	r7, #2
 8016882:	e7b1      	b.n	80167e8 <rcl_clock_init+0x40>
 8016884:	f04f 0c0a 	mov.w	ip, #10
 8016888:	e79e      	b.n	80167c8 <rcl_clock_init+0x20>
 801688a:	bf00      	nop
 801688c:	08016789 	.word	0x08016789
 8016890:	08016781 	.word	0x08016781
 8016894:	08016779 	.word	0x08016779

08016898 <rcl_validate_enclave_name_with_size>:
 8016898:	b378      	cbz	r0, 80168fa <rcl_validate_enclave_name_with_size+0x62>
 801689a:	b570      	push	{r4, r5, r6, lr}
 801689c:	4615      	mov	r5, r2
 801689e:	b0c2      	sub	sp, #264	; 0x108
 80168a0:	b302      	cbz	r2, 80168e4 <rcl_validate_enclave_name_with_size+0x4c>
 80168a2:	461e      	mov	r6, r3
 80168a4:	466a      	mov	r2, sp
 80168a6:	ab01      	add	r3, sp, #4
 80168a8:	460c      	mov	r4, r1
 80168aa:	f000 fc2b 	bl	8017104 <rmw_validate_namespace_with_size>
 80168ae:	4684      	mov	ip, r0
 80168b0:	b9e8      	cbnz	r0, 80168ee <rcl_validate_enclave_name_with_size+0x56>
 80168b2:	9b00      	ldr	r3, [sp, #0]
 80168b4:	b923      	cbnz	r3, 80168c0 <rcl_validate_enclave_name_with_size+0x28>
 80168b6:	2300      	movs	r3, #0
 80168b8:	602b      	str	r3, [r5, #0]
 80168ba:	4660      	mov	r0, ip
 80168bc:	b042      	add	sp, #264	; 0x108
 80168be:	bd70      	pop	{r4, r5, r6, pc}
 80168c0:	2b07      	cmp	r3, #7
 80168c2:	d007      	beq.n	80168d4 <rcl_validate_enclave_name_with_size+0x3c>
 80168c4:	1e5a      	subs	r2, r3, #1
 80168c6:	2a05      	cmp	r2, #5
 80168c8:	d833      	bhi.n	8016932 <rcl_validate_enclave_name_with_size+0x9a>
 80168ca:	e8df f002 	tbb	[pc, r2]
 80168ce:	2c2f      	.short	0x2c2f
 80168d0:	1a232629 	.word	0x1a232629
 80168d4:	2cff      	cmp	r4, #255	; 0xff
 80168d6:	d9ee      	bls.n	80168b6 <rcl_validate_enclave_name_with_size+0x1e>
 80168d8:	602b      	str	r3, [r5, #0]
 80168da:	2e00      	cmp	r6, #0
 80168dc:	d0ed      	beq.n	80168ba <rcl_validate_enclave_name_with_size+0x22>
 80168de:	23fe      	movs	r3, #254	; 0xfe
 80168e0:	6033      	str	r3, [r6, #0]
 80168e2:	e7ea      	b.n	80168ba <rcl_validate_enclave_name_with_size+0x22>
 80168e4:	f04f 0c0b 	mov.w	ip, #11
 80168e8:	4660      	mov	r0, ip
 80168ea:	b042      	add	sp, #264	; 0x108
 80168ec:	bd70      	pop	{r4, r5, r6, pc}
 80168ee:	f7ff f953 	bl	8015b98 <rcl_convert_rmw_ret_to_rcl_ret>
 80168f2:	4684      	mov	ip, r0
 80168f4:	4660      	mov	r0, ip
 80168f6:	b042      	add	sp, #264	; 0x108
 80168f8:	bd70      	pop	{r4, r5, r6, pc}
 80168fa:	f04f 0c0b 	mov.w	ip, #11
 80168fe:	4660      	mov	r0, ip
 8016900:	4770      	bx	lr
 8016902:	2306      	movs	r3, #6
 8016904:	602b      	str	r3, [r5, #0]
 8016906:	2e00      	cmp	r6, #0
 8016908:	d0d7      	beq.n	80168ba <rcl_validate_enclave_name_with_size+0x22>
 801690a:	9b01      	ldr	r3, [sp, #4]
 801690c:	6033      	str	r3, [r6, #0]
 801690e:	4660      	mov	r0, ip
 8016910:	b042      	add	sp, #264	; 0x108
 8016912:	bd70      	pop	{r4, r5, r6, pc}
 8016914:	2305      	movs	r3, #5
 8016916:	602b      	str	r3, [r5, #0]
 8016918:	e7f5      	b.n	8016906 <rcl_validate_enclave_name_with_size+0x6e>
 801691a:	2304      	movs	r3, #4
 801691c:	602b      	str	r3, [r5, #0]
 801691e:	e7f2      	b.n	8016906 <rcl_validate_enclave_name_with_size+0x6e>
 8016920:	2303      	movs	r3, #3
 8016922:	602b      	str	r3, [r5, #0]
 8016924:	e7ef      	b.n	8016906 <rcl_validate_enclave_name_with_size+0x6e>
 8016926:	2302      	movs	r3, #2
 8016928:	602b      	str	r3, [r5, #0]
 801692a:	e7ec      	b.n	8016906 <rcl_validate_enclave_name_with_size+0x6e>
 801692c:	2301      	movs	r3, #1
 801692e:	602b      	str	r3, [r5, #0]
 8016930:	e7e9      	b.n	8016906 <rcl_validate_enclave_name_with_size+0x6e>
 8016932:	4a04      	ldr	r2, [pc, #16]	; (8016944 <rcl_validate_enclave_name_with_size+0xac>)
 8016934:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016938:	a802      	add	r0, sp, #8
 801693a:	f000 f963 	bl	8016c04 <rcutils_snprintf>
 801693e:	f04f 0c01 	mov.w	ip, #1
 8016942:	e7ba      	b.n	80168ba <rcl_validate_enclave_name_with_size+0x22>
 8016944:	0801c7f4 	.word	0x0801c7f4

08016948 <rcl_validate_enclave_name>:
 8016948:	b168      	cbz	r0, 8016966 <rcl_validate_enclave_name+0x1e>
 801694a:	b570      	push	{r4, r5, r6, lr}
 801694c:	460d      	mov	r5, r1
 801694e:	4616      	mov	r6, r2
 8016950:	4604      	mov	r4, r0
 8016952:	f7e9 fc47 	bl	80001e4 <strlen>
 8016956:	4633      	mov	r3, r6
 8016958:	4601      	mov	r1, r0
 801695a:	462a      	mov	r2, r5
 801695c:	4620      	mov	r0, r4
 801695e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016962:	f7ff bf99 	b.w	8016898 <rcl_validate_enclave_name_with_size>
 8016966:	200b      	movs	r0, #11
 8016968:	4770      	bx	lr
 801696a:	bf00      	nop

0801696c <__atomic_load_8>:
 801696c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016970:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8016974:	4a15      	ldr	r2, [pc, #84]	; (80169cc <__atomic_load_8+0x60>)
 8016976:	4b16      	ldr	r3, [pc, #88]	; (80169d0 <__atomic_load_8+0x64>)
 8016978:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801697c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8016980:	fb02 f101 	mul.w	r1, r2, r1
 8016984:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016988:	fba3 2301 	umull	r2, r3, r3, r1
 801698c:	091b      	lsrs	r3, r3, #4
 801698e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8016992:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8016996:	b4d0      	push	{r4, r6, r7}
 8016998:	4c0e      	ldr	r4, [pc, #56]	; (80169d4 <__atomic_load_8+0x68>)
 801699a:	1ac9      	subs	r1, r1, r3
 801699c:	1862      	adds	r2, r4, r1
 801699e:	f04f 0c01 	mov.w	ip, #1
 80169a2:	e8d2 3f4f 	ldrexb	r3, [r2]
 80169a6:	e8c2 cf46 	strexb	r6, ip, [r2]
 80169aa:	2e00      	cmp	r6, #0
 80169ac:	d1f9      	bne.n	80169a2 <__atomic_load_8+0x36>
 80169ae:	f3bf 8f5b 	dmb	ish
 80169b2:	b2db      	uxtb	r3, r3
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d1f4      	bne.n	80169a2 <__atomic_load_8+0x36>
 80169b8:	e9d0 6700 	ldrd	r6, r7, [r0]
 80169bc:	f3bf 8f5b 	dmb	ish
 80169c0:	5463      	strb	r3, [r4, r1]
 80169c2:	4630      	mov	r0, r6
 80169c4:	4639      	mov	r1, r7
 80169c6:	bcd0      	pop	{r4, r6, r7}
 80169c8:	4770      	bx	lr
 80169ca:	bf00      	nop
 80169cc:	27d4eb2d 	.word	0x27d4eb2d
 80169d0:	b21642c9 	.word	0xb21642c9
 80169d4:	20015be8 	.word	0x20015be8

080169d8 <rcutils_get_env>:
 80169d8:	b168      	cbz	r0, 80169f6 <rcutils_get_env+0x1e>
 80169da:	b510      	push	{r4, lr}
 80169dc:	460c      	mov	r4, r1
 80169de:	b129      	cbz	r1, 80169ec <rcutils_get_env+0x14>
 80169e0:	f003 fe62 	bl	801a6a8 <getenv>
 80169e4:	b120      	cbz	r0, 80169f0 <rcutils_get_env+0x18>
 80169e6:	6020      	str	r0, [r4, #0]
 80169e8:	2000      	movs	r0, #0
 80169ea:	bd10      	pop	{r4, pc}
 80169ec:	4803      	ldr	r0, [pc, #12]	; (80169fc <rcutils_get_env+0x24>)
 80169ee:	bd10      	pop	{r4, pc}
 80169f0:	4b03      	ldr	r3, [pc, #12]	; (8016a00 <rcutils_get_env+0x28>)
 80169f2:	6023      	str	r3, [r4, #0]
 80169f4:	bd10      	pop	{r4, pc}
 80169f6:	4803      	ldr	r0, [pc, #12]	; (8016a04 <rcutils_get_env+0x2c>)
 80169f8:	4770      	bx	lr
 80169fa:	bf00      	nop
 80169fc:	0801c870 	.word	0x0801c870
 8016a00:	0801ce60 	.word	0x0801ce60
 8016a04:	0801c854 	.word	0x0801c854

08016a08 <rcutils_is_directory>:
 8016a08:	2000      	movs	r0, #0
 8016a0a:	4770      	bx	lr

08016a0c <rcutils_join_path>:
 8016a0c:	b082      	sub	sp, #8
 8016a0e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8016a12:	2000      	movs	r0, #0
 8016a14:	b002      	add	sp, #8
 8016a16:	4770      	bx	lr

08016a18 <rcutils_to_native_path>:
 8016a18:	b084      	sub	sp, #16
 8016a1a:	a801      	add	r0, sp, #4
 8016a1c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016a20:	b004      	add	sp, #16
 8016a22:	2000      	movs	r0, #0
 8016a24:	4770      	bx	lr
 8016a26:	bf00      	nop

08016a28 <rcutils_format_string_limit>:
 8016a28:	b40f      	push	{r0, r1, r2, r3}
 8016a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a2c:	b083      	sub	sp, #12
 8016a2e:	ac08      	add	r4, sp, #32
 8016a30:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8016a32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016a36:	b34e      	cbz	r6, 8016a8c <rcutils_format_string_limit+0x64>
 8016a38:	a808      	add	r0, sp, #32
 8016a3a:	f7f9 fb35 	bl	80100a8 <rcutils_allocator_is_valid>
 8016a3e:	b328      	cbz	r0, 8016a8c <rcutils_format_string_limit+0x64>
 8016a40:	2100      	movs	r1, #0
 8016a42:	ab0f      	add	r3, sp, #60	; 0x3c
 8016a44:	4632      	mov	r2, r6
 8016a46:	4608      	mov	r0, r1
 8016a48:	e9cd 3300 	strd	r3, r3, [sp]
 8016a4c:	f000 f8f4 	bl	8016c38 <rcutils_vsnprintf>
 8016a50:	1c43      	adds	r3, r0, #1
 8016a52:	4605      	mov	r5, r0
 8016a54:	d01a      	beq.n	8016a8c <rcutils_format_string_limit+0x64>
 8016a56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a58:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016a5a:	1c47      	adds	r7, r0, #1
 8016a5c:	429f      	cmp	r7, r3
 8016a5e:	bf84      	itt	hi
 8016a60:	461f      	movhi	r7, r3
 8016a62:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 8016a66:	4638      	mov	r0, r7
 8016a68:	9b08      	ldr	r3, [sp, #32]
 8016a6a:	4798      	blx	r3
 8016a6c:	4604      	mov	r4, r0
 8016a6e:	b168      	cbz	r0, 8016a8c <rcutils_format_string_limit+0x64>
 8016a70:	9b01      	ldr	r3, [sp, #4]
 8016a72:	4632      	mov	r2, r6
 8016a74:	4639      	mov	r1, r7
 8016a76:	f000 f8df 	bl	8016c38 <rcutils_vsnprintf>
 8016a7a:	2800      	cmp	r0, #0
 8016a7c:	db02      	blt.n	8016a84 <rcutils_format_string_limit+0x5c>
 8016a7e:	2300      	movs	r3, #0
 8016a80:	5563      	strb	r3, [r4, r5]
 8016a82:	e004      	b.n	8016a8e <rcutils_format_string_limit+0x66>
 8016a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016a88:	4620      	mov	r0, r4
 8016a8a:	4798      	blx	r3
 8016a8c:	2400      	movs	r4, #0
 8016a8e:	4620      	mov	r0, r4
 8016a90:	b003      	add	sp, #12
 8016a92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016a96:	b004      	add	sp, #16
 8016a98:	4770      	bx	lr
 8016a9a:	bf00      	nop

08016a9c <rcutils_repl_str>:
 8016a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aa0:	ed2d 8b02 	vpush	{d8}
 8016aa4:	b087      	sub	sp, #28
 8016aa6:	4680      	mov	r8, r0
 8016aa8:	4608      	mov	r0, r1
 8016aaa:	f8cd 8004 	str.w	r8, [sp, #4]
 8016aae:	ee08 2a10 	vmov	s16, r2
 8016ab2:	468a      	mov	sl, r1
 8016ab4:	4699      	mov	r9, r3
 8016ab6:	f7e9 fb95 	bl	80001e4 <strlen>
 8016aba:	2600      	movs	r6, #0
 8016abc:	4647      	mov	r7, r8
 8016abe:	9002      	str	r0, [sp, #8]
 8016ac0:	46b3      	mov	fp, r6
 8016ac2:	2510      	movs	r5, #16
 8016ac4:	46b0      	mov	r8, r6
 8016ac6:	e01d      	b.n	8016b04 <rcutils_repl_str+0x68>
 8016ac8:	f10b 0b01 	add.w	fp, fp, #1
 8016acc:	455e      	cmp	r6, fp
 8016ace:	d211      	bcs.n	8016af4 <rcutils_repl_str+0x58>
 8016ad0:	442e      	add	r6, r5
 8016ad2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016ad6:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016ada:	00b1      	lsls	r1, r6, #2
 8016adc:	4798      	blx	r3
 8016ade:	2800      	cmp	r0, #0
 8016ae0:	f000 8088 	beq.w	8016bf4 <rcutils_repl_str+0x158>
 8016ae4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016ae8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8016aec:	4680      	mov	r8, r0
 8016aee:	bf28      	it	cs
 8016af0:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8016af4:	9a01      	ldr	r2, [sp, #4]
 8016af6:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8016afa:	1aa2      	subs	r2, r4, r2
 8016afc:	f843 2c04 	str.w	r2, [r3, #-4]
 8016b00:	9b02      	ldr	r3, [sp, #8]
 8016b02:	18e7      	adds	r7, r4, r3
 8016b04:	4651      	mov	r1, sl
 8016b06:	4638      	mov	r0, r7
 8016b08:	f004 f900 	bl	801ad0c <strstr>
 8016b0c:	4604      	mov	r4, r0
 8016b0e:	4640      	mov	r0, r8
 8016b10:	2c00      	cmp	r4, #0
 8016b12:	d1d9      	bne.n	8016ac8 <rcutils_repl_str+0x2c>
 8016b14:	46b8      	mov	r8, r7
 8016b16:	4607      	mov	r7, r0
 8016b18:	4640      	mov	r0, r8
 8016b1a:	f7e9 fb63 	bl	80001e4 <strlen>
 8016b1e:	9b01      	ldr	r3, [sp, #4]
 8016b20:	eba8 0303 	sub.w	r3, r8, r3
 8016b24:	181c      	adds	r4, r3, r0
 8016b26:	9404      	str	r4, [sp, #16]
 8016b28:	f1bb 0f00 	cmp.w	fp, #0
 8016b2c:	d04a      	beq.n	8016bc4 <rcutils_repl_str+0x128>
 8016b2e:	ee18 0a10 	vmov	r0, s16
 8016b32:	f7e9 fb57 	bl	80001e4 <strlen>
 8016b36:	9b02      	ldr	r3, [sp, #8]
 8016b38:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016b3c:	1ac3      	subs	r3, r0, r3
 8016b3e:	fb0b 4303 	mla	r3, fp, r3, r4
 8016b42:	461a      	mov	r2, r3
 8016b44:	9305      	str	r3, [sp, #20]
 8016b46:	4606      	mov	r6, r0
 8016b48:	f8d9 3000 	ldr.w	r3, [r9]
 8016b4c:	1c50      	adds	r0, r2, #1
 8016b4e:	4798      	blx	r3
 8016b50:	9003      	str	r0, [sp, #12]
 8016b52:	2800      	cmp	r0, #0
 8016b54:	d04f      	beq.n	8016bf6 <rcutils_repl_str+0x15a>
 8016b56:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016b5a:	683a      	ldr	r2, [r7, #0]
 8016b5c:	4641      	mov	r1, r8
 8016b5e:	f003 fe23 	bl	801a7a8 <memcpy>
 8016b62:	683d      	ldr	r5, [r7, #0]
 8016b64:	9b03      	ldr	r3, [sp, #12]
 8016b66:	9701      	str	r7, [sp, #4]
 8016b68:	46ba      	mov	sl, r7
 8016b6a:	441d      	add	r5, r3
 8016b6c:	9f02      	ldr	r7, [sp, #8]
 8016b6e:	f8cd 9008 	str.w	r9, [sp, #8]
 8016b72:	2401      	movs	r4, #1
 8016b74:	46d1      	mov	r9, sl
 8016b76:	ee18 aa10 	vmov	sl, s16
 8016b7a:	e00a      	b.n	8016b92 <rcutils_repl_str+0xf6>
 8016b7c:	f8d9 5000 	ldr.w	r5, [r9]
 8016b80:	1aaa      	subs	r2, r5, r2
 8016b82:	1885      	adds	r5, r0, r2
 8016b84:	f003 fe10 	bl	801a7a8 <memcpy>
 8016b88:	45a3      	cmp	fp, r4
 8016b8a:	f104 0201 	add.w	r2, r4, #1
 8016b8e:	d935      	bls.n	8016bfc <rcutils_repl_str+0x160>
 8016b90:	4614      	mov	r4, r2
 8016b92:	4632      	mov	r2, r6
 8016b94:	4651      	mov	r1, sl
 8016b96:	4628      	mov	r0, r5
 8016b98:	f003 fe06 	bl	801a7a8 <memcpy>
 8016b9c:	f859 2b04 	ldr.w	r2, [r9], #4
 8016ba0:	45a3      	cmp	fp, r4
 8016ba2:	443a      	add	r2, r7
 8016ba4:	eb05 0006 	add.w	r0, r5, r6
 8016ba8:	eb08 0102 	add.w	r1, r8, r2
 8016bac:	d1e6      	bne.n	8016b7c <rcutils_repl_str+0xe0>
 8016bae:	9b04      	ldr	r3, [sp, #16]
 8016bb0:	1a9a      	subs	r2, r3, r2
 8016bb2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8016bb6:	f003 fdf7 	bl	801a7a8 <memcpy>
 8016bba:	9a03      	ldr	r2, [sp, #12]
 8016bbc:	9905      	ldr	r1, [sp, #20]
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	5453      	strb	r3, [r2, r1]
 8016bc2:	e00b      	b.n	8016bdc <rcutils_repl_str+0x140>
 8016bc4:	4620      	mov	r0, r4
 8016bc6:	f8d9 3000 	ldr.w	r3, [r9]
 8016bca:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016bce:	3001      	adds	r0, #1
 8016bd0:	4798      	blx	r3
 8016bd2:	9003      	str	r0, [sp, #12]
 8016bd4:	b110      	cbz	r0, 8016bdc <rcutils_repl_str+0x140>
 8016bd6:	9901      	ldr	r1, [sp, #4]
 8016bd8:	f004 f87c 	bl	801acd4 <strcpy>
 8016bdc:	4638      	mov	r0, r7
 8016bde:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8016be2:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016be6:	4798      	blx	r3
 8016be8:	9803      	ldr	r0, [sp, #12]
 8016bea:	b007      	add	sp, #28
 8016bec:	ecbd 8b02 	vpop	{d8}
 8016bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bf4:	4647      	mov	r7, r8
 8016bf6:	2300      	movs	r3, #0
 8016bf8:	9303      	str	r3, [sp, #12]
 8016bfa:	e7ef      	b.n	8016bdc <rcutils_repl_str+0x140>
 8016bfc:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8016c00:	e7db      	b.n	8016bba <rcutils_repl_str+0x11e>
 8016c02:	bf00      	nop

08016c04 <rcutils_snprintf>:
 8016c04:	b40c      	push	{r2, r3}
 8016c06:	b530      	push	{r4, r5, lr}
 8016c08:	b083      	sub	sp, #12
 8016c0a:	ab06      	add	r3, sp, #24
 8016c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c10:	9301      	str	r3, [sp, #4]
 8016c12:	b152      	cbz	r2, 8016c2a <rcutils_snprintf+0x26>
 8016c14:	b138      	cbz	r0, 8016c26 <rcutils_snprintf+0x22>
 8016c16:	b141      	cbz	r1, 8016c2a <rcutils_snprintf+0x26>
 8016c18:	f004 f936 	bl	801ae88 <vsniprintf>
 8016c1c:	b003      	add	sp, #12
 8016c1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016c22:	b002      	add	sp, #8
 8016c24:	4770      	bx	lr
 8016c26:	2900      	cmp	r1, #0
 8016c28:	d0f6      	beq.n	8016c18 <rcutils_snprintf+0x14>
 8016c2a:	f003 fbbf 	bl	801a3ac <__errno>
 8016c2e:	2316      	movs	r3, #22
 8016c30:	6003      	str	r3, [r0, #0]
 8016c32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c36:	e7f1      	b.n	8016c1c <rcutils_snprintf+0x18>

08016c38 <rcutils_vsnprintf>:
 8016c38:	b570      	push	{r4, r5, r6, lr}
 8016c3a:	b13a      	cbz	r2, 8016c4c <rcutils_vsnprintf+0x14>
 8016c3c:	b120      	cbz	r0, 8016c48 <rcutils_vsnprintf+0x10>
 8016c3e:	b129      	cbz	r1, 8016c4c <rcutils_vsnprintf+0x14>
 8016c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c44:	f004 b920 	b.w	801ae88 <vsniprintf>
 8016c48:	2900      	cmp	r1, #0
 8016c4a:	d0f9      	beq.n	8016c40 <rcutils_vsnprintf+0x8>
 8016c4c:	f003 fbae 	bl	801a3ac <__errno>
 8016c50:	2316      	movs	r3, #22
 8016c52:	6003      	str	r3, [r0, #0]
 8016c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c58:	bd70      	pop	{r4, r5, r6, pc}
 8016c5a:	bf00      	nop

08016c5c <rcutils_strdup>:
 8016c5c:	b084      	sub	sp, #16
 8016c5e:	b570      	push	{r4, r5, r6, lr}
 8016c60:	b082      	sub	sp, #8
 8016c62:	ac07      	add	r4, sp, #28
 8016c64:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8016c68:	4605      	mov	r5, r0
 8016c6a:	b1b0      	cbz	r0, 8016c9a <rcutils_strdup+0x3e>
 8016c6c:	f7e9 faba 	bl	80001e4 <strlen>
 8016c70:	1c42      	adds	r2, r0, #1
 8016c72:	9b07      	ldr	r3, [sp, #28]
 8016c74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c76:	9201      	str	r2, [sp, #4]
 8016c78:	4606      	mov	r6, r0
 8016c7a:	4610      	mov	r0, r2
 8016c7c:	4798      	blx	r3
 8016c7e:	4604      	mov	r4, r0
 8016c80:	b128      	cbz	r0, 8016c8e <rcutils_strdup+0x32>
 8016c82:	9a01      	ldr	r2, [sp, #4]
 8016c84:	4629      	mov	r1, r5
 8016c86:	f003 fd8f 	bl	801a7a8 <memcpy>
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	55a3      	strb	r3, [r4, r6]
 8016c8e:	4620      	mov	r0, r4
 8016c90:	b002      	add	sp, #8
 8016c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c96:	b004      	add	sp, #16
 8016c98:	4770      	bx	lr
 8016c9a:	4604      	mov	r4, r0
 8016c9c:	e7f7      	b.n	8016c8e <rcutils_strdup+0x32>
 8016c9e:	bf00      	nop

08016ca0 <rcutils_strndup>:
 8016ca0:	b082      	sub	sp, #8
 8016ca2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ca4:	ac06      	add	r4, sp, #24
 8016ca6:	e884 000c 	stmia.w	r4, {r2, r3}
 8016caa:	4605      	mov	r5, r0
 8016cac:	b188      	cbz	r0, 8016cd2 <rcutils_strndup+0x32>
 8016cae:	1c4f      	adds	r7, r1, #1
 8016cb0:	460e      	mov	r6, r1
 8016cb2:	4638      	mov	r0, r7
 8016cb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016cb6:	4790      	blx	r2
 8016cb8:	4604      	mov	r4, r0
 8016cba:	b128      	cbz	r0, 8016cc8 <rcutils_strndup+0x28>
 8016cbc:	463a      	mov	r2, r7
 8016cbe:	4629      	mov	r1, r5
 8016cc0:	f003 fd72 	bl	801a7a8 <memcpy>
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	55a3      	strb	r3, [r4, r6]
 8016cc8:	4620      	mov	r0, r4
 8016cca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016cce:	b002      	add	sp, #8
 8016cd0:	4770      	bx	lr
 8016cd2:	4604      	mov	r4, r0
 8016cd4:	e7f8      	b.n	8016cc8 <rcutils_strndup+0x28>
 8016cd6:	bf00      	nop

08016cd8 <rcutils_get_zero_initialized_string_map>:
 8016cd8:	4b01      	ldr	r3, [pc, #4]	; (8016ce0 <rcutils_get_zero_initialized_string_map+0x8>)
 8016cda:	2000      	movs	r0, #0
 8016cdc:	6018      	str	r0, [r3, #0]
 8016cde:	4770      	bx	lr
 8016ce0:	20015c00 	.word	0x20015c00

08016ce4 <rcutils_string_map_reserve>:
 8016ce4:	2800      	cmp	r0, #0
 8016ce6:	d05f      	beq.n	8016da8 <rcutils_string_map_reserve+0xc4>
 8016ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cec:	460c      	mov	r4, r1
 8016cee:	6801      	ldr	r1, [r0, #0]
 8016cf0:	b082      	sub	sp, #8
 8016cf2:	4605      	mov	r5, r0
 8016cf4:	b129      	cbz	r1, 8016d02 <rcutils_string_map_reserve+0x1e>
 8016cf6:	68cb      	ldr	r3, [r1, #12]
 8016cf8:	42a3      	cmp	r3, r4
 8016cfa:	d906      	bls.n	8016d0a <rcutils_string_map_reserve+0x26>
 8016cfc:	461c      	mov	r4, r3
 8016cfe:	2900      	cmp	r1, #0
 8016d00:	d1f9      	bne.n	8016cf6 <rcutils_string_map_reserve+0x12>
 8016d02:	201f      	movs	r0, #31
 8016d04:	b002      	add	sp, #8
 8016d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d0a:	688b      	ldr	r3, [r1, #8]
 8016d0c:	42a3      	cmp	r3, r4
 8016d0e:	d047      	beq.n	8016da0 <rcutils_string_map_reserve+0xbc>
 8016d10:	6a0e      	ldr	r6, [r1, #32]
 8016d12:	2c00      	cmp	r4, #0
 8016d14:	d034      	beq.n	8016d80 <rcutils_string_map_reserve+0x9c>
 8016d16:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8016d1a:	d243      	bcs.n	8016da4 <rcutils_string_map_reserve+0xc0>
 8016d1c:	00a7      	lsls	r7, r4, #2
 8016d1e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8016d22:	6808      	ldr	r0, [r1, #0]
 8016d24:	4632      	mov	r2, r6
 8016d26:	4639      	mov	r1, r7
 8016d28:	47c0      	blx	r8
 8016d2a:	2800      	cmp	r0, #0
 8016d2c:	d03a      	beq.n	8016da4 <rcutils_string_map_reserve+0xc0>
 8016d2e:	682b      	ldr	r3, [r5, #0]
 8016d30:	4632      	mov	r2, r6
 8016d32:	6018      	str	r0, [r3, #0]
 8016d34:	4639      	mov	r1, r7
 8016d36:	6858      	ldr	r0, [r3, #4]
 8016d38:	47c0      	blx	r8
 8016d3a:	2800      	cmp	r0, #0
 8016d3c:	d032      	beq.n	8016da4 <rcutils_string_map_reserve+0xc0>
 8016d3e:	682d      	ldr	r5, [r5, #0]
 8016d40:	68ab      	ldr	r3, [r5, #8]
 8016d42:	6068      	str	r0, [r5, #4]
 8016d44:	42a3      	cmp	r3, r4
 8016d46:	d226      	bcs.n	8016d96 <rcutils_string_map_reserve+0xb2>
 8016d48:	682a      	ldr	r2, [r5, #0]
 8016d4a:	eb00 0c07 	add.w	ip, r0, r7
 8016d4e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8016d52:	45e6      	cmp	lr, ip
 8016d54:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8016d58:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8016d5c:	d203      	bcs.n	8016d66 <rcutils_string_map_reserve+0x82>
 8016d5e:	eb02 0c07 	add.w	ip, r2, r7
 8016d62:	4566      	cmp	r6, ip
 8016d64:	d322      	bcc.n	8016dac <rcutils_string_map_reserve+0xc8>
 8016d66:	1ae3      	subs	r3, r4, r3
 8016d68:	009a      	lsls	r2, r3, #2
 8016d6a:	4670      	mov	r0, lr
 8016d6c:	2100      	movs	r1, #0
 8016d6e:	9201      	str	r2, [sp, #4]
 8016d70:	f003 fd28 	bl	801a7c4 <memset>
 8016d74:	9a01      	ldr	r2, [sp, #4]
 8016d76:	2100      	movs	r1, #0
 8016d78:	4630      	mov	r0, r6
 8016d7a:	f003 fd23 	bl	801a7c4 <memset>
 8016d7e:	e00a      	b.n	8016d96 <rcutils_string_map_reserve+0xb2>
 8016d80:	694f      	ldr	r7, [r1, #20]
 8016d82:	6808      	ldr	r0, [r1, #0]
 8016d84:	4631      	mov	r1, r6
 8016d86:	47b8      	blx	r7
 8016d88:	682b      	ldr	r3, [r5, #0]
 8016d8a:	4631      	mov	r1, r6
 8016d8c:	6858      	ldr	r0, [r3, #4]
 8016d8e:	601c      	str	r4, [r3, #0]
 8016d90:	47b8      	blx	r7
 8016d92:	682d      	ldr	r5, [r5, #0]
 8016d94:	606c      	str	r4, [r5, #4]
 8016d96:	2000      	movs	r0, #0
 8016d98:	60ac      	str	r4, [r5, #8]
 8016d9a:	b002      	add	sp, #8
 8016d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016da0:	2000      	movs	r0, #0
 8016da2:	e7af      	b.n	8016d04 <rcutils_string_map_reserve+0x20>
 8016da4:	200a      	movs	r0, #10
 8016da6:	e7ad      	b.n	8016d04 <rcutils_string_map_reserve+0x20>
 8016da8:	200b      	movs	r0, #11
 8016daa:	4770      	bx	lr
 8016dac:	1f0b      	subs	r3, r1, #4
 8016dae:	4418      	add	r0, r3
 8016db0:	4413      	add	r3, r2
 8016db2:	3a04      	subs	r2, #4
 8016db4:	4417      	add	r7, r2
 8016db6:	2200      	movs	r2, #0
 8016db8:	f843 2f04 	str.w	r2, [r3, #4]!
 8016dbc:	42bb      	cmp	r3, r7
 8016dbe:	f840 2f04 	str.w	r2, [r0, #4]!
 8016dc2:	d1f9      	bne.n	8016db8 <rcutils_string_map_reserve+0xd4>
 8016dc4:	e7e7      	b.n	8016d96 <rcutils_string_map_reserve+0xb2>
 8016dc6:	bf00      	nop

08016dc8 <rcutils_string_map_init>:
 8016dc8:	b082      	sub	sp, #8
 8016dca:	b570      	push	{r4, r5, r6, lr}
 8016dcc:	ac04      	add	r4, sp, #16
 8016dce:	e884 000c 	stmia.w	r4, {r2, r3}
 8016dd2:	b380      	cbz	r0, 8016e36 <rcutils_string_map_init+0x6e>
 8016dd4:	6806      	ldr	r6, [r0, #0]
 8016dd6:	4604      	mov	r4, r0
 8016dd8:	b12e      	cbz	r6, 8016de6 <rcutils_string_map_init+0x1e>
 8016dda:	251e      	movs	r5, #30
 8016ddc:	4628      	mov	r0, r5
 8016dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016de2:	b002      	add	sp, #8
 8016de4:	4770      	bx	lr
 8016de6:	a804      	add	r0, sp, #16
 8016de8:	460d      	mov	r5, r1
 8016dea:	f7f9 f95d 	bl	80100a8 <rcutils_allocator_is_valid>
 8016dee:	b310      	cbz	r0, 8016e36 <rcutils_string_map_init+0x6e>
 8016df0:	9b04      	ldr	r3, [sp, #16]
 8016df2:	9908      	ldr	r1, [sp, #32]
 8016df4:	2024      	movs	r0, #36	; 0x24
 8016df6:	4798      	blx	r3
 8016df8:	6020      	str	r0, [r4, #0]
 8016dfa:	b310      	cbz	r0, 8016e42 <rcutils_string_map_init+0x7a>
 8016dfc:	f10d 0e10 	add.w	lr, sp, #16
 8016e00:	e9c0 6600 	strd	r6, r6, [r0]
 8016e04:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8016e08:	f100 0c10 	add.w	ip, r0, #16
 8016e0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016e10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e14:	f8de 3000 	ldr.w	r3, [lr]
 8016e18:	f8cc 3000 	str.w	r3, [ip]
 8016e1c:	4629      	mov	r1, r5
 8016e1e:	4620      	mov	r0, r4
 8016e20:	f7ff ff60 	bl	8016ce4 <rcutils_string_map_reserve>
 8016e24:	4605      	mov	r5, r0
 8016e26:	2800      	cmp	r0, #0
 8016e28:	d0d8      	beq.n	8016ddc <rcutils_string_map_init+0x14>
 8016e2a:	9b05      	ldr	r3, [sp, #20]
 8016e2c:	9908      	ldr	r1, [sp, #32]
 8016e2e:	6820      	ldr	r0, [r4, #0]
 8016e30:	4798      	blx	r3
 8016e32:	6026      	str	r6, [r4, #0]
 8016e34:	e7d2      	b.n	8016ddc <rcutils_string_map_init+0x14>
 8016e36:	250b      	movs	r5, #11
 8016e38:	4628      	mov	r0, r5
 8016e3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016e3e:	b002      	add	sp, #8
 8016e40:	4770      	bx	lr
 8016e42:	250a      	movs	r5, #10
 8016e44:	e7ca      	b.n	8016ddc <rcutils_string_map_init+0x14>
 8016e46:	bf00      	nop

08016e48 <rcutils_string_map_fini>:
 8016e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e4c:	b082      	sub	sp, #8
 8016e4e:	2800      	cmp	r0, #0
 8016e50:	d03a      	beq.n	8016ec8 <rcutils_string_map_fini+0x80>
 8016e52:	6804      	ldr	r4, [r0, #0]
 8016e54:	4606      	mov	r6, r0
 8016e56:	2c00      	cmp	r4, #0
 8016e58:	d032      	beq.n	8016ec0 <rcutils_string_map_fini+0x78>
 8016e5a:	68a3      	ldr	r3, [r4, #8]
 8016e5c:	b32b      	cbz	r3, 8016eaa <rcutils_string_map_fini+0x62>
 8016e5e:	2500      	movs	r5, #0
 8016e60:	6822      	ldr	r2, [r4, #0]
 8016e62:	462f      	mov	r7, r5
 8016e64:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016e68:	b1e0      	cbz	r0, 8016ea4 <rcutils_string_map_fini+0x5c>
 8016e6a:	6a21      	ldr	r1, [r4, #32]
 8016e6c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8016e70:	9101      	str	r1, [sp, #4]
 8016e72:	47c0      	blx	r8
 8016e74:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016e78:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016e7c:	9901      	ldr	r1, [sp, #4]
 8016e7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016e82:	47c0      	blx	r8
 8016e84:	68e3      	ldr	r3, [r4, #12]
 8016e86:	6862      	ldr	r2, [r4, #4]
 8016e88:	3b01      	subs	r3, #1
 8016e8a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8016e8e:	60e3      	str	r3, [r4, #12]
 8016e90:	6834      	ldr	r4, [r6, #0]
 8016e92:	68a3      	ldr	r3, [r4, #8]
 8016e94:	3501      	adds	r5, #1
 8016e96:	429d      	cmp	r5, r3
 8016e98:	d207      	bcs.n	8016eaa <rcutils_string_map_fini+0x62>
 8016e9a:	6822      	ldr	r2, [r4, #0]
 8016e9c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8016ea0:	2800      	cmp	r0, #0
 8016ea2:	d1e2      	bne.n	8016e6a <rcutils_string_map_fini+0x22>
 8016ea4:	3501      	adds	r5, #1
 8016ea6:	429d      	cmp	r5, r3
 8016ea8:	d3dc      	bcc.n	8016e64 <rcutils_string_map_fini+0x1c>
 8016eaa:	2100      	movs	r1, #0
 8016eac:	4630      	mov	r0, r6
 8016eae:	f7ff ff19 	bl	8016ce4 <rcutils_string_map_reserve>
 8016eb2:	4604      	mov	r4, r0
 8016eb4:	b920      	cbnz	r0, 8016ec0 <rcutils_string_map_fini+0x78>
 8016eb6:	6830      	ldr	r0, [r6, #0]
 8016eb8:	6943      	ldr	r3, [r0, #20]
 8016eba:	6a01      	ldr	r1, [r0, #32]
 8016ebc:	4798      	blx	r3
 8016ebe:	6034      	str	r4, [r6, #0]
 8016ec0:	4620      	mov	r0, r4
 8016ec2:	b002      	add	sp, #8
 8016ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ec8:	240b      	movs	r4, #11
 8016eca:	4620      	mov	r0, r4
 8016ecc:	b002      	add	sp, #8
 8016ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ed2:	bf00      	nop

08016ed4 <rcutils_string_map_getn>:
 8016ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ed8:	b300      	cbz	r0, 8016f1c <rcutils_string_map_getn+0x48>
 8016eda:	6807      	ldr	r7, [r0, #0]
 8016edc:	b1ff      	cbz	r7, 8016f1e <rcutils_string_map_getn+0x4a>
 8016ede:	4688      	mov	r8, r1
 8016ee0:	b1e1      	cbz	r1, 8016f1c <rcutils_string_map_getn+0x48>
 8016ee2:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8016ee6:	683e      	ldr	r6, [r7, #0]
 8016ee8:	f1ba 0f00 	cmp.w	sl, #0
 8016eec:	d016      	beq.n	8016f1c <rcutils_string_map_getn+0x48>
 8016eee:	4691      	mov	r9, r2
 8016ef0:	3e04      	subs	r6, #4
 8016ef2:	2400      	movs	r4, #0
 8016ef4:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8016ef8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016efc:	4628      	mov	r0, r5
 8016efe:	3401      	adds	r4, #1
 8016f00:	b155      	cbz	r5, 8016f18 <rcutils_string_map_getn+0x44>
 8016f02:	f7e9 f96f 	bl	80001e4 <strlen>
 8016f06:	4548      	cmp	r0, r9
 8016f08:	4602      	mov	r2, r0
 8016f0a:	4629      	mov	r1, r5
 8016f0c:	bf38      	it	cc
 8016f0e:	464a      	movcc	r2, r9
 8016f10:	4640      	mov	r0, r8
 8016f12:	f003 fee7 	bl	801ace4 <strncmp>
 8016f16:	b128      	cbz	r0, 8016f24 <rcutils_string_map_getn+0x50>
 8016f18:	45a2      	cmp	sl, r4
 8016f1a:	d1eb      	bne.n	8016ef4 <rcutils_string_map_getn+0x20>
 8016f1c:	2700      	movs	r7, #0
 8016f1e:	4638      	mov	r0, r7
 8016f20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	f853 700b 	ldr.w	r7, [r3, fp]
 8016f2a:	4638      	mov	r0, r7
 8016f2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016f30 <rcutils_system_time_now>:
 8016f30:	b308      	cbz	r0, 8016f76 <rcutils_system_time_now+0x46>
 8016f32:	b570      	push	{r4, r5, r6, lr}
 8016f34:	b084      	sub	sp, #16
 8016f36:	4604      	mov	r4, r0
 8016f38:	4669      	mov	r1, sp
 8016f3a:	2001      	movs	r0, #1
 8016f3c:	f7ea ff84 	bl	8001e48 <clock_gettime>
 8016f40:	e9dd 3500 	ldrd	r3, r5, [sp]
 8016f44:	2d00      	cmp	r5, #0
 8016f46:	db13      	blt.n	8016f70 <rcutils_system_time_now+0x40>
 8016f48:	9902      	ldr	r1, [sp, #8]
 8016f4a:	2900      	cmp	r1, #0
 8016f4c:	db0d      	blt.n	8016f6a <rcutils_system_time_now+0x3a>
 8016f4e:	4e0b      	ldr	r6, [pc, #44]	; (8016f7c <rcutils_system_time_now+0x4c>)
 8016f50:	fba3 3206 	umull	r3, r2, r3, r6
 8016f54:	185b      	adds	r3, r3, r1
 8016f56:	fb06 2205 	mla	r2, r6, r5, r2
 8016f5a:	f04f 0000 	mov.w	r0, #0
 8016f5e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8016f62:	e9c4 3200 	strd	r3, r2, [r4]
 8016f66:	b004      	add	sp, #16
 8016f68:	bd70      	pop	{r4, r5, r6, pc}
 8016f6a:	ea53 0205 	orrs.w	r2, r3, r5
 8016f6e:	d1ee      	bne.n	8016f4e <rcutils_system_time_now+0x1e>
 8016f70:	2002      	movs	r0, #2
 8016f72:	b004      	add	sp, #16
 8016f74:	bd70      	pop	{r4, r5, r6, pc}
 8016f76:	200b      	movs	r0, #11
 8016f78:	4770      	bx	lr
 8016f7a:	bf00      	nop
 8016f7c:	3b9aca00 	.word	0x3b9aca00

08016f80 <rcutils_steady_time_now>:
 8016f80:	b308      	cbz	r0, 8016fc6 <rcutils_steady_time_now+0x46>
 8016f82:	b570      	push	{r4, r5, r6, lr}
 8016f84:	b084      	sub	sp, #16
 8016f86:	4604      	mov	r4, r0
 8016f88:	4669      	mov	r1, sp
 8016f8a:	2000      	movs	r0, #0
 8016f8c:	f7ea ff5c 	bl	8001e48 <clock_gettime>
 8016f90:	e9dd 3500 	ldrd	r3, r5, [sp]
 8016f94:	2d00      	cmp	r5, #0
 8016f96:	db13      	blt.n	8016fc0 <rcutils_steady_time_now+0x40>
 8016f98:	9902      	ldr	r1, [sp, #8]
 8016f9a:	2900      	cmp	r1, #0
 8016f9c:	db0d      	blt.n	8016fba <rcutils_steady_time_now+0x3a>
 8016f9e:	4e0b      	ldr	r6, [pc, #44]	; (8016fcc <rcutils_steady_time_now+0x4c>)
 8016fa0:	fba3 3206 	umull	r3, r2, r3, r6
 8016fa4:	185b      	adds	r3, r3, r1
 8016fa6:	fb06 2205 	mla	r2, r6, r5, r2
 8016faa:	f04f 0000 	mov.w	r0, #0
 8016fae:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 8016fb2:	e9c4 3200 	strd	r3, r2, [r4]
 8016fb6:	b004      	add	sp, #16
 8016fb8:	bd70      	pop	{r4, r5, r6, pc}
 8016fba:	ea53 0205 	orrs.w	r2, r3, r5
 8016fbe:	d1ee      	bne.n	8016f9e <rcutils_steady_time_now+0x1e>
 8016fc0:	2002      	movs	r0, #2
 8016fc2:	b004      	add	sp, #16
 8016fc4:	bd70      	pop	{r4, r5, r6, pc}
 8016fc6:	200b      	movs	r0, #11
 8016fc8:	4770      	bx	lr
 8016fca:	bf00      	nop
 8016fcc:	3b9aca00 	.word	0x3b9aca00

08016fd0 <rmw_get_zero_initialized_context>:
 8016fd0:	b510      	push	{r4, lr}
 8016fd2:	4604      	mov	r4, r0
 8016fd4:	3010      	adds	r0, #16
 8016fd6:	f000 f80b 	bl	8016ff0 <rmw_get_zero_initialized_init_options>
 8016fda:	2300      	movs	r3, #0
 8016fdc:	2000      	movs	r0, #0
 8016fde:	2100      	movs	r1, #0
 8016fe0:	e9c4 0100 	strd	r0, r1, [r4]
 8016fe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016fe8:	60a3      	str	r3, [r4, #8]
 8016fea:	4620      	mov	r0, r4
 8016fec:	bd10      	pop	{r4, pc}
 8016fee:	bf00      	nop

08016ff0 <rmw_get_zero_initialized_init_options>:
 8016ff0:	b510      	push	{r4, lr}
 8016ff2:	2238      	movs	r2, #56	; 0x38
 8016ff4:	4604      	mov	r4, r0
 8016ff6:	2100      	movs	r1, #0
 8016ff8:	f003 fbe4 	bl	801a7c4 <memset>
 8016ffc:	f104 0010 	add.w	r0, r4, #16
 8017000:	f000 f806 	bl	8017010 <rmw_get_default_security_options>
 8017004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017008:	60e3      	str	r3, [r4, #12]
 801700a:	4620      	mov	r0, r4
 801700c:	bd10      	pop	{r4, pc}
 801700e:	bf00      	nop

08017010 <rmw_get_default_security_options>:
 8017010:	2200      	movs	r2, #0
 8017012:	7002      	strb	r2, [r0, #0]
 8017014:	6042      	str	r2, [r0, #4]
 8017016:	4770      	bx	lr

08017018 <rmw_validate_full_topic_name>:
 8017018:	2800      	cmp	r0, #0
 801701a:	d057      	beq.n	80170cc <rmw_validate_full_topic_name+0xb4>
 801701c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017020:	460d      	mov	r5, r1
 8017022:	2900      	cmp	r1, #0
 8017024:	d054      	beq.n	80170d0 <rmw_validate_full_topic_name+0xb8>
 8017026:	4616      	mov	r6, r2
 8017028:	4604      	mov	r4, r0
 801702a:	f7e9 f8db 	bl	80001e4 <strlen>
 801702e:	b148      	cbz	r0, 8017044 <rmw_validate_full_topic_name+0x2c>
 8017030:	7823      	ldrb	r3, [r4, #0]
 8017032:	2b2f      	cmp	r3, #47	; 0x2f
 8017034:	d00d      	beq.n	8017052 <rmw_validate_full_topic_name+0x3a>
 8017036:	2302      	movs	r3, #2
 8017038:	602b      	str	r3, [r5, #0]
 801703a:	b13e      	cbz	r6, 801704c <rmw_validate_full_topic_name+0x34>
 801703c:	2000      	movs	r0, #0
 801703e:	6030      	str	r0, [r6, #0]
 8017040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017044:	2301      	movs	r3, #1
 8017046:	602b      	str	r3, [r5, #0]
 8017048:	2e00      	cmp	r6, #0
 801704a:	d1f7      	bne.n	801703c <rmw_validate_full_topic_name+0x24>
 801704c:	2000      	movs	r0, #0
 801704e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017052:	1e43      	subs	r3, r0, #1
 8017054:	5ce2      	ldrb	r2, [r4, r3]
 8017056:	2a2f      	cmp	r2, #47	; 0x2f
 8017058:	d03c      	beq.n	80170d4 <rmw_validate_full_topic_name+0xbc>
 801705a:	1e63      	subs	r3, r4, #1
 801705c:	eb03 0800 	add.w	r8, r3, r0
 8017060:	f1c4 0e01 	rsb	lr, r4, #1
 8017064:	eb0e 0703 	add.w	r7, lr, r3
 8017068:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 801706c:	f021 0220 	bic.w	r2, r1, #32
 8017070:	3a41      	subs	r2, #65	; 0x41
 8017072:	2a19      	cmp	r2, #25
 8017074:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 8017078:	d90b      	bls.n	8017092 <rmw_validate_full_topic_name+0x7a>
 801707a:	295f      	cmp	r1, #95	; 0x5f
 801707c:	d009      	beq.n	8017092 <rmw_validate_full_topic_name+0x7a>
 801707e:	f1bc 0f0a 	cmp.w	ip, #10
 8017082:	d906      	bls.n	8017092 <rmw_validate_full_topic_name+0x7a>
 8017084:	2304      	movs	r3, #4
 8017086:	602b      	str	r3, [r5, #0]
 8017088:	2e00      	cmp	r6, #0
 801708a:	d0df      	beq.n	801704c <rmw_validate_full_topic_name+0x34>
 801708c:	6037      	str	r7, [r6, #0]
 801708e:	2000      	movs	r0, #0
 8017090:	e7d6      	b.n	8017040 <rmw_validate_full_topic_name+0x28>
 8017092:	4543      	cmp	r3, r8
 8017094:	d1e6      	bne.n	8017064 <rmw_validate_full_topic_name+0x4c>
 8017096:	4f1a      	ldr	r7, [pc, #104]	; (8017100 <rmw_validate_full_topic_name+0xe8>)
 8017098:	2301      	movs	r3, #1
 801709a:	e004      	b.n	80170a6 <rmw_validate_full_topic_name+0x8e>
 801709c:	4298      	cmp	r0, r3
 801709e:	f104 0401 	add.w	r4, r4, #1
 80170a2:	d91c      	bls.n	80170de <rmw_validate_full_topic_name+0xc6>
 80170a4:	4613      	mov	r3, r2
 80170a6:	4298      	cmp	r0, r3
 80170a8:	f103 0201 	add.w	r2, r3, #1
 80170ac:	d0f6      	beq.n	801709c <rmw_validate_full_topic_name+0x84>
 80170ae:	7821      	ldrb	r1, [r4, #0]
 80170b0:	292f      	cmp	r1, #47	; 0x2f
 80170b2:	d1f3      	bne.n	801709c <rmw_validate_full_topic_name+0x84>
 80170b4:	7861      	ldrb	r1, [r4, #1]
 80170b6:	292f      	cmp	r1, #47	; 0x2f
 80170b8:	d01c      	beq.n	80170f4 <rmw_validate_full_topic_name+0xdc>
 80170ba:	5dc9      	ldrb	r1, [r1, r7]
 80170bc:	0749      	lsls	r1, r1, #29
 80170be:	d5ed      	bpl.n	801709c <rmw_validate_full_topic_name+0x84>
 80170c0:	2206      	movs	r2, #6
 80170c2:	602a      	str	r2, [r5, #0]
 80170c4:	2e00      	cmp	r6, #0
 80170c6:	d0c1      	beq.n	801704c <rmw_validate_full_topic_name+0x34>
 80170c8:	6033      	str	r3, [r6, #0]
 80170ca:	e7bf      	b.n	801704c <rmw_validate_full_topic_name+0x34>
 80170cc:	200b      	movs	r0, #11
 80170ce:	4770      	bx	lr
 80170d0:	200b      	movs	r0, #11
 80170d2:	e7b5      	b.n	8017040 <rmw_validate_full_topic_name+0x28>
 80170d4:	2203      	movs	r2, #3
 80170d6:	602a      	str	r2, [r5, #0]
 80170d8:	2e00      	cmp	r6, #0
 80170da:	d1f5      	bne.n	80170c8 <rmw_validate_full_topic_name+0xb0>
 80170dc:	e7b6      	b.n	801704c <rmw_validate_full_topic_name+0x34>
 80170de:	28f7      	cmp	r0, #247	; 0xf7
 80170e0:	d802      	bhi.n	80170e8 <rmw_validate_full_topic_name+0xd0>
 80170e2:	2000      	movs	r0, #0
 80170e4:	6028      	str	r0, [r5, #0]
 80170e6:	e7ab      	b.n	8017040 <rmw_validate_full_topic_name+0x28>
 80170e8:	2307      	movs	r3, #7
 80170ea:	602b      	str	r3, [r5, #0]
 80170ec:	2e00      	cmp	r6, #0
 80170ee:	d0ad      	beq.n	801704c <rmw_validate_full_topic_name+0x34>
 80170f0:	23f6      	movs	r3, #246	; 0xf6
 80170f2:	e7e9      	b.n	80170c8 <rmw_validate_full_topic_name+0xb0>
 80170f4:	2205      	movs	r2, #5
 80170f6:	602a      	str	r2, [r5, #0]
 80170f8:	2e00      	cmp	r6, #0
 80170fa:	d1e5      	bne.n	80170c8 <rmw_validate_full_topic_name+0xb0>
 80170fc:	e7a6      	b.n	801704c <rmw_validate_full_topic_name+0x34>
 80170fe:	bf00      	nop
 8017100:	0801cf07 	.word	0x0801cf07

08017104 <rmw_validate_namespace_with_size>:
 8017104:	b340      	cbz	r0, 8017158 <rmw_validate_namespace_with_size+0x54>
 8017106:	b570      	push	{r4, r5, r6, lr}
 8017108:	4614      	mov	r4, r2
 801710a:	b0c2      	sub	sp, #264	; 0x108
 801710c:	b332      	cbz	r2, 801715c <rmw_validate_namespace_with_size+0x58>
 801710e:	2901      	cmp	r1, #1
 8017110:	460d      	mov	r5, r1
 8017112:	461e      	mov	r6, r3
 8017114:	d102      	bne.n	801711c <rmw_validate_namespace_with_size+0x18>
 8017116:	7803      	ldrb	r3, [r0, #0]
 8017118:	2b2f      	cmp	r3, #47	; 0x2f
 801711a:	d012      	beq.n	8017142 <rmw_validate_namespace_with_size+0x3e>
 801711c:	aa01      	add	r2, sp, #4
 801711e:	4669      	mov	r1, sp
 8017120:	f7ff ff7a 	bl	8017018 <rmw_validate_full_topic_name>
 8017124:	b978      	cbnz	r0, 8017146 <rmw_validate_namespace_with_size+0x42>
 8017126:	9b00      	ldr	r3, [sp, #0]
 8017128:	b14b      	cbz	r3, 801713e <rmw_validate_namespace_with_size+0x3a>
 801712a:	2b07      	cmp	r3, #7
 801712c:	d007      	beq.n	801713e <rmw_validate_namespace_with_size+0x3a>
 801712e:	1e5a      	subs	r2, r3, #1
 8017130:	2a05      	cmp	r2, #5
 8017132:	d82b      	bhi.n	801718c <rmw_validate_namespace_with_size+0x88>
 8017134:	e8df f002 	tbb	[pc, r2]
 8017138:	1e212427 	.word	0x1e212427
 801713c:	141b      	.short	0x141b
 801713e:	2df5      	cmp	r5, #245	; 0xf5
 8017140:	d803      	bhi.n	801714a <rmw_validate_namespace_with_size+0x46>
 8017142:	2000      	movs	r0, #0
 8017144:	6020      	str	r0, [r4, #0]
 8017146:	b042      	add	sp, #264	; 0x108
 8017148:	bd70      	pop	{r4, r5, r6, pc}
 801714a:	2307      	movs	r3, #7
 801714c:	6023      	str	r3, [r4, #0]
 801714e:	2e00      	cmp	r6, #0
 8017150:	d0f9      	beq.n	8017146 <rmw_validate_namespace_with_size+0x42>
 8017152:	23f4      	movs	r3, #244	; 0xf4
 8017154:	6033      	str	r3, [r6, #0]
 8017156:	e7f6      	b.n	8017146 <rmw_validate_namespace_with_size+0x42>
 8017158:	200b      	movs	r0, #11
 801715a:	4770      	bx	lr
 801715c:	200b      	movs	r0, #11
 801715e:	e7f2      	b.n	8017146 <rmw_validate_namespace_with_size+0x42>
 8017160:	2306      	movs	r3, #6
 8017162:	6023      	str	r3, [r4, #0]
 8017164:	2e00      	cmp	r6, #0
 8017166:	d0ee      	beq.n	8017146 <rmw_validate_namespace_with_size+0x42>
 8017168:	9b01      	ldr	r3, [sp, #4]
 801716a:	6033      	str	r3, [r6, #0]
 801716c:	e7eb      	b.n	8017146 <rmw_validate_namespace_with_size+0x42>
 801716e:	2305      	movs	r3, #5
 8017170:	6023      	str	r3, [r4, #0]
 8017172:	e7f7      	b.n	8017164 <rmw_validate_namespace_with_size+0x60>
 8017174:	2304      	movs	r3, #4
 8017176:	6023      	str	r3, [r4, #0]
 8017178:	e7f4      	b.n	8017164 <rmw_validate_namespace_with_size+0x60>
 801717a:	2303      	movs	r3, #3
 801717c:	6023      	str	r3, [r4, #0]
 801717e:	e7f1      	b.n	8017164 <rmw_validate_namespace_with_size+0x60>
 8017180:	2302      	movs	r3, #2
 8017182:	6023      	str	r3, [r4, #0]
 8017184:	e7ee      	b.n	8017164 <rmw_validate_namespace_with_size+0x60>
 8017186:	2301      	movs	r3, #1
 8017188:	6023      	str	r3, [r4, #0]
 801718a:	e7eb      	b.n	8017164 <rmw_validate_namespace_with_size+0x60>
 801718c:	4a03      	ldr	r2, [pc, #12]	; (801719c <rmw_validate_namespace_with_size+0x98>)
 801718e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017192:	a802      	add	r0, sp, #8
 8017194:	f7ff fd36 	bl	8016c04 <rcutils_snprintf>
 8017198:	2001      	movs	r0, #1
 801719a:	e7d4      	b.n	8017146 <rmw_validate_namespace_with_size+0x42>
 801719c:	0801c88c 	.word	0x0801c88c

080171a0 <rmw_validate_namespace>:
 80171a0:	b168      	cbz	r0, 80171be <rmw_validate_namespace+0x1e>
 80171a2:	b570      	push	{r4, r5, r6, lr}
 80171a4:	460d      	mov	r5, r1
 80171a6:	4616      	mov	r6, r2
 80171a8:	4604      	mov	r4, r0
 80171aa:	f7e9 f81b 	bl	80001e4 <strlen>
 80171ae:	4633      	mov	r3, r6
 80171b0:	4601      	mov	r1, r0
 80171b2:	462a      	mov	r2, r5
 80171b4:	4620      	mov	r0, r4
 80171b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80171ba:	f7ff bfa3 	b.w	8017104 <rmw_validate_namespace_with_size>
 80171be:	200b      	movs	r0, #11
 80171c0:	4770      	bx	lr
 80171c2:	bf00      	nop

080171c4 <rmw_namespace_validation_result_string>:
 80171c4:	2807      	cmp	r0, #7
 80171c6:	bf9a      	itte	ls
 80171c8:	4b02      	ldrls	r3, [pc, #8]	; (80171d4 <rmw_namespace_validation_result_string+0x10>)
 80171ca:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80171ce:	4802      	ldrhi	r0, [pc, #8]	; (80171d8 <rmw_namespace_validation_result_string+0x14>)
 80171d0:	4770      	bx	lr
 80171d2:	bf00      	nop
 80171d4:	0801ca84 	.word	0x0801ca84
 80171d8:	0801c8dc 	.word	0x0801c8dc

080171dc <rmw_validate_node_name>:
 80171dc:	2800      	cmp	r0, #0
 80171de:	d03b      	beq.n	8017258 <rmw_validate_node_name+0x7c>
 80171e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171e4:	460d      	mov	r5, r1
 80171e6:	2900      	cmp	r1, #0
 80171e8:	d038      	beq.n	801725c <rmw_validate_node_name+0x80>
 80171ea:	4616      	mov	r6, r2
 80171ec:	4604      	mov	r4, r0
 80171ee:	f7e8 fff9 	bl	80001e4 <strlen>
 80171f2:	b1e0      	cbz	r0, 801722e <rmw_validate_node_name+0x52>
 80171f4:	1e63      	subs	r3, r4, #1
 80171f6:	eb03 0800 	add.w	r8, r3, r0
 80171fa:	f1c4 0101 	rsb	r1, r4, #1
 80171fe:	18cf      	adds	r7, r1, r3
 8017200:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8017204:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8017208:	f02e 0c20 	bic.w	ip, lr, #32
 801720c:	2a09      	cmp	r2, #9
 801720e:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8017212:	d914      	bls.n	801723e <rmw_validate_node_name+0x62>
 8017214:	f1bc 0f19 	cmp.w	ip, #25
 8017218:	d911      	bls.n	801723e <rmw_validate_node_name+0x62>
 801721a:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 801721e:	d00e      	beq.n	801723e <rmw_validate_node_name+0x62>
 8017220:	2302      	movs	r3, #2
 8017222:	602b      	str	r3, [r5, #0]
 8017224:	b106      	cbz	r6, 8017228 <rmw_validate_node_name+0x4c>
 8017226:	6037      	str	r7, [r6, #0]
 8017228:	2000      	movs	r0, #0
 801722a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801722e:	2301      	movs	r3, #1
 8017230:	602b      	str	r3, [r5, #0]
 8017232:	2e00      	cmp	r6, #0
 8017234:	d0f8      	beq.n	8017228 <rmw_validate_node_name+0x4c>
 8017236:	2000      	movs	r0, #0
 8017238:	6030      	str	r0, [r6, #0]
 801723a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801723e:	4543      	cmp	r3, r8
 8017240:	d1dd      	bne.n	80171fe <rmw_validate_node_name+0x22>
 8017242:	7822      	ldrb	r2, [r4, #0]
 8017244:	4b0d      	ldr	r3, [pc, #52]	; (801727c <rmw_validate_node_name+0xa0>)
 8017246:	5cd3      	ldrb	r3, [r2, r3]
 8017248:	f013 0304 	ands.w	r3, r3, #4
 801724c:	d110      	bne.n	8017270 <rmw_validate_node_name+0x94>
 801724e:	28ff      	cmp	r0, #255	; 0xff
 8017250:	d806      	bhi.n	8017260 <rmw_validate_node_name+0x84>
 8017252:	602b      	str	r3, [r5, #0]
 8017254:	4618      	mov	r0, r3
 8017256:	e7e8      	b.n	801722a <rmw_validate_node_name+0x4e>
 8017258:	200b      	movs	r0, #11
 801725a:	4770      	bx	lr
 801725c:	200b      	movs	r0, #11
 801725e:	e7e4      	b.n	801722a <rmw_validate_node_name+0x4e>
 8017260:	2204      	movs	r2, #4
 8017262:	602a      	str	r2, [r5, #0]
 8017264:	2e00      	cmp	r6, #0
 8017266:	d0df      	beq.n	8017228 <rmw_validate_node_name+0x4c>
 8017268:	22fe      	movs	r2, #254	; 0xfe
 801726a:	6032      	str	r2, [r6, #0]
 801726c:	4618      	mov	r0, r3
 801726e:	e7dc      	b.n	801722a <rmw_validate_node_name+0x4e>
 8017270:	2303      	movs	r3, #3
 8017272:	602b      	str	r3, [r5, #0]
 8017274:	2e00      	cmp	r6, #0
 8017276:	d1de      	bne.n	8017236 <rmw_validate_node_name+0x5a>
 8017278:	e7d6      	b.n	8017228 <rmw_validate_node_name+0x4c>
 801727a:	bf00      	nop
 801727c:	0801cf07 	.word	0x0801cf07

08017280 <rmw_node_name_validation_result_string>:
 8017280:	2804      	cmp	r0, #4
 8017282:	bf9a      	itte	ls
 8017284:	4b02      	ldrls	r3, [pc, #8]	; (8017290 <rmw_node_name_validation_result_string+0x10>)
 8017286:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801728a:	4802      	ldrhi	r0, [pc, #8]	; (8017294 <rmw_node_name_validation_result_string+0x14>)
 801728c:	4770      	bx	lr
 801728e:	bf00      	nop
 8017290:	0801cb90 	.word	0x0801cb90
 8017294:	0801caa4 	.word	0x0801caa4

08017298 <get_memory>:
 8017298:	4603      	mov	r3, r0
 801729a:	6840      	ldr	r0, [r0, #4]
 801729c:	b158      	cbz	r0, 80172b6 <get_memory+0x1e>
 801729e:	6842      	ldr	r2, [r0, #4]
 80172a0:	605a      	str	r2, [r3, #4]
 80172a2:	b10a      	cbz	r2, 80172a8 <get_memory+0x10>
 80172a4:	2100      	movs	r1, #0
 80172a6:	6011      	str	r1, [r2, #0]
 80172a8:	681a      	ldr	r2, [r3, #0]
 80172aa:	6042      	str	r2, [r0, #4]
 80172ac:	b102      	cbz	r2, 80172b0 <get_memory+0x18>
 80172ae:	6010      	str	r0, [r2, #0]
 80172b0:	2200      	movs	r2, #0
 80172b2:	6002      	str	r2, [r0, #0]
 80172b4:	6018      	str	r0, [r3, #0]
 80172b6:	4770      	bx	lr

080172b8 <put_memory>:
 80172b8:	680b      	ldr	r3, [r1, #0]
 80172ba:	b10b      	cbz	r3, 80172c0 <put_memory+0x8>
 80172bc:	684a      	ldr	r2, [r1, #4]
 80172be:	605a      	str	r2, [r3, #4]
 80172c0:	684a      	ldr	r2, [r1, #4]
 80172c2:	b102      	cbz	r2, 80172c6 <put_memory+0xe>
 80172c4:	6013      	str	r3, [r2, #0]
 80172c6:	6803      	ldr	r3, [r0, #0]
 80172c8:	428b      	cmp	r3, r1
 80172ca:	6843      	ldr	r3, [r0, #4]
 80172cc:	bf08      	it	eq
 80172ce:	6002      	streq	r2, [r0, #0]
 80172d0:	604b      	str	r3, [r1, #4]
 80172d2:	b103      	cbz	r3, 80172d6 <put_memory+0x1e>
 80172d4:	6019      	str	r1, [r3, #0]
 80172d6:	2300      	movs	r3, #0
 80172d8:	600b      	str	r3, [r1, #0]
 80172da:	6041      	str	r1, [r0, #4]
 80172dc:	4770      	bx	lr
 80172de:	bf00      	nop

080172e0 <rmw_get_implementation_identifier>:
 80172e0:	4b01      	ldr	r3, [pc, #4]	; (80172e8 <rmw_get_implementation_identifier+0x8>)
 80172e2:	6818      	ldr	r0, [r3, #0]
 80172e4:	4770      	bx	lr
 80172e6:	bf00      	nop
 80172e8:	0801cbbc 	.word	0x0801cbbc

080172ec <rmw_init_options_init>:
 80172ec:	b084      	sub	sp, #16
 80172ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172f0:	b083      	sub	sp, #12
 80172f2:	ad09      	add	r5, sp, #36	; 0x24
 80172f4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80172f8:	b130      	cbz	r0, 8017308 <rmw_init_options_init+0x1c>
 80172fa:	4604      	mov	r4, r0
 80172fc:	4628      	mov	r0, r5
 80172fe:	f7f8 fed3 	bl	80100a8 <rcutils_allocator_is_valid>
 8017302:	b108      	cbz	r0, 8017308 <rmw_init_options_init+0x1c>
 8017304:	68a6      	ldr	r6, [r4, #8]
 8017306:	b12e      	cbz	r6, 8017314 <rmw_init_options_init+0x28>
 8017308:	200b      	movs	r0, #11
 801730a:	b003      	add	sp, #12
 801730c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017310:	b004      	add	sp, #16
 8017312:	4770      	bx	lr
 8017314:	2200      	movs	r2, #0
 8017316:	2300      	movs	r3, #0
 8017318:	e9c4 2300 	strd	r2, r3, [r4]
 801731c:	4b22      	ldr	r3, [pc, #136]	; (80173a8 <rmw_init_options_init+0xbc>)
 801731e:	f8df e098 	ldr.w	lr, [pc, #152]	; 80173b8 <rmw_init_options_init+0xcc>
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	60a3      	str	r3, [r4, #8]
 8017326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017328:	f104 0c20 	add.w	ip, r4, #32
 801732c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017330:	466f      	mov	r7, sp
 8017332:	682b      	ldr	r3, [r5, #0]
 8017334:	f8cc 3000 	str.w	r3, [ip]
 8017338:	4638      	mov	r0, r7
 801733a:	f8c4 e01c 	str.w	lr, [r4, #28]
 801733e:	60e6      	str	r6, [r4, #12]
 8017340:	f7ff fe66 	bl	8017010 <rmw_get_default_security_options>
 8017344:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017348:	f104 0310 	add.w	r3, r4, #16
 801734c:	e883 0003 	stmia.w	r3, {r0, r1}
 8017350:	2203      	movs	r2, #3
 8017352:	4816      	ldr	r0, [pc, #88]	; (80173ac <rmw_init_options_init+0xc0>)
 8017354:	4916      	ldr	r1, [pc, #88]	; (80173b0 <rmw_init_options_init+0xc4>)
 8017356:	7626      	strb	r6, [r4, #24]
 8017358:	f7f9 f998 	bl	801068c <rmw_uxrce_init_init_options_impl_memory>
 801735c:	4813      	ldr	r0, [pc, #76]	; (80173ac <rmw_init_options_init+0xc0>)
 801735e:	f7ff ff9b 	bl	8017298 <get_memory>
 8017362:	b1f0      	cbz	r0, 80173a2 <rmw_init_options_init+0xb6>
 8017364:	4a13      	ldr	r2, [pc, #76]	; (80173b4 <rmw_init_options_init+0xc8>)
 8017366:	6883      	ldr	r3, [r0, #8]
 8017368:	6851      	ldr	r1, [r2, #4]
 801736a:	7810      	ldrb	r0, [r2, #0]
 801736c:	6363      	str	r3, [r4, #52]	; 0x34
 801736e:	7418      	strb	r0, [r3, #16]
 8017370:	6159      	str	r1, [r3, #20]
 8017372:	68d1      	ldr	r1, [r2, #12]
 8017374:	61d9      	str	r1, [r3, #28]
 8017376:	6911      	ldr	r1, [r2, #16]
 8017378:	6219      	str	r1, [r3, #32]
 801737a:	6951      	ldr	r1, [r2, #20]
 801737c:	6892      	ldr	r2, [r2, #8]
 801737e:	619a      	str	r2, [r3, #24]
 8017380:	6259      	str	r1, [r3, #36]	; 0x24
 8017382:	f7fd faf3 	bl	801496c <uxr_nanos>
 8017386:	f003 fb33 	bl	801a9f0 <srand>
 801738a:	f003 fb5f 	bl	801aa4c <rand>
 801738e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017390:	6298      	str	r0, [r3, #40]	; 0x28
 8017392:	2800      	cmp	r0, #0
 8017394:	d0f9      	beq.n	801738a <rmw_init_options_init+0x9e>
 8017396:	2000      	movs	r0, #0
 8017398:	b003      	add	sp, #12
 801739a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801739e:	b004      	add	sp, #16
 80173a0:	4770      	bx	lr
 80173a2:	2001      	movs	r0, #1
 80173a4:	e7b1      	b.n	801730a <rmw_init_options_init+0x1e>
 80173a6:	bf00      	nop
 80173a8:	0801cbbc 	.word	0x0801cbbc
 80173ac:	20015b54 	.word	0x20015b54
 80173b0:	200113f0 	.word	0x200113f0
 80173b4:	2001127c 	.word	0x2001127c
 80173b8:	0801c75c 	.word	0x0801c75c

080173bc <rmw_init_options_copy>:
 80173bc:	b570      	push	{r4, r5, r6, lr}
 80173be:	b158      	cbz	r0, 80173d8 <rmw_init_options_copy+0x1c>
 80173c0:	460d      	mov	r5, r1
 80173c2:	b149      	cbz	r1, 80173d8 <rmw_init_options_copy+0x1c>
 80173c4:	4604      	mov	r4, r0
 80173c6:	6880      	ldr	r0, [r0, #8]
 80173c8:	b120      	cbz	r0, 80173d4 <rmw_init_options_copy+0x18>
 80173ca:	4b1e      	ldr	r3, [pc, #120]	; (8017444 <rmw_init_options_copy+0x88>)
 80173cc:	6819      	ldr	r1, [r3, #0]
 80173ce:	f7e8 feff 	bl	80001d0 <strcmp>
 80173d2:	bb90      	cbnz	r0, 801743a <rmw_init_options_copy+0x7e>
 80173d4:	68ab      	ldr	r3, [r5, #8]
 80173d6:	b113      	cbz	r3, 80173de <rmw_init_options_copy+0x22>
 80173d8:	250b      	movs	r5, #11
 80173da:	4628      	mov	r0, r5
 80173dc:	bd70      	pop	{r4, r5, r6, pc}
 80173de:	4623      	mov	r3, r4
 80173e0:	462a      	mov	r2, r5
 80173e2:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80173e6:	f8d3 c000 	ldr.w	ip, [r3]
 80173ea:	6858      	ldr	r0, [r3, #4]
 80173ec:	6899      	ldr	r1, [r3, #8]
 80173ee:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80173f2:	f8c2 e00c 	str.w	lr, [r2, #12]
 80173f6:	3310      	adds	r3, #16
 80173f8:	42b3      	cmp	r3, r6
 80173fa:	f8c2 c000 	str.w	ip, [r2]
 80173fe:	6050      	str	r0, [r2, #4]
 8017400:	6091      	str	r1, [r2, #8]
 8017402:	f102 0210 	add.w	r2, r2, #16
 8017406:	d1ee      	bne.n	80173e6 <rmw_init_options_copy+0x2a>
 8017408:	6819      	ldr	r1, [r3, #0]
 801740a:	685b      	ldr	r3, [r3, #4]
 801740c:	480e      	ldr	r0, [pc, #56]	; (8017448 <rmw_init_options_copy+0x8c>)
 801740e:	6053      	str	r3, [r2, #4]
 8017410:	6011      	str	r1, [r2, #0]
 8017412:	f7ff ff41 	bl	8017298 <get_memory>
 8017416:	b198      	cbz	r0, 8017440 <rmw_init_options_copy+0x84>
 8017418:	6883      	ldr	r3, [r0, #8]
 801741a:	636b      	str	r3, [r5, #52]	; 0x34
 801741c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801741e:	f102 0c10 	add.w	ip, r2, #16
 8017422:	f103 0410 	add.w	r4, r3, #16
 8017426:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801742a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801742c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8017430:	2500      	movs	r5, #0
 8017432:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8017436:	4628      	mov	r0, r5
 8017438:	bd70      	pop	{r4, r5, r6, pc}
 801743a:	250c      	movs	r5, #12
 801743c:	4628      	mov	r0, r5
 801743e:	bd70      	pop	{r4, r5, r6, pc}
 8017440:	2501      	movs	r5, #1
 8017442:	e7ca      	b.n	80173da <rmw_init_options_copy+0x1e>
 8017444:	0801cbbc 	.word	0x0801cbbc
 8017448:	20015b54 	.word	0x20015b54

0801744c <rmw_init_options_fini>:
 801744c:	2800      	cmp	r0, #0
 801744e:	d03d      	beq.n	80174cc <rmw_init_options_fini+0x80>
 8017450:	b510      	push	{r4, lr}
 8017452:	4604      	mov	r4, r0
 8017454:	b08e      	sub	sp, #56	; 0x38
 8017456:	3020      	adds	r0, #32
 8017458:	f7f8 fe26 	bl	80100a8 <rcutils_allocator_is_valid>
 801745c:	b360      	cbz	r0, 80174b8 <rmw_init_options_fini+0x6c>
 801745e:	68a0      	ldr	r0, [r4, #8]
 8017460:	b120      	cbz	r0, 801746c <rmw_init_options_fini+0x20>
 8017462:	4b1c      	ldr	r3, [pc, #112]	; (80174d4 <rmw_init_options_fini+0x88>)
 8017464:	6819      	ldr	r1, [r3, #0]
 8017466:	f7e8 feb3 	bl	80001d0 <strcmp>
 801746a:	bb68      	cbnz	r0, 80174c8 <rmw_init_options_fini+0x7c>
 801746c:	4b1a      	ldr	r3, [pc, #104]	; (80174d8 <rmw_init_options_fini+0x8c>)
 801746e:	6819      	ldr	r1, [r3, #0]
 8017470:	b331      	cbz	r1, 80174c0 <rmw_init_options_fini+0x74>
 8017472:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8017474:	e001      	b.n	801747a <rmw_init_options_fini+0x2e>
 8017476:	6849      	ldr	r1, [r1, #4]
 8017478:	b311      	cbz	r1, 80174c0 <rmw_init_options_fini+0x74>
 801747a:	688b      	ldr	r3, [r1, #8]
 801747c:	429a      	cmp	r2, r3
 801747e:	d1fa      	bne.n	8017476 <rmw_init_options_fini+0x2a>
 8017480:	4815      	ldr	r0, [pc, #84]	; (80174d8 <rmw_init_options_fini+0x8c>)
 8017482:	f7ff ff19 	bl	80172b8 <put_memory>
 8017486:	4668      	mov	r0, sp
 8017488:	f7ff fdb2 	bl	8016ff0 <rmw_get_zero_initialized_init_options>
 801748c:	46ee      	mov	lr, sp
 801748e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017492:	46a4      	mov	ip, r4
 8017494:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017498:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801749c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80174a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174a8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80174ac:	e88c 0003 	stmia.w	ip, {r0, r1}
 80174b0:	2300      	movs	r3, #0
 80174b2:	4618      	mov	r0, r3
 80174b4:	b00e      	add	sp, #56	; 0x38
 80174b6:	bd10      	pop	{r4, pc}
 80174b8:	230b      	movs	r3, #11
 80174ba:	4618      	mov	r0, r3
 80174bc:	b00e      	add	sp, #56	; 0x38
 80174be:	bd10      	pop	{r4, pc}
 80174c0:	2301      	movs	r3, #1
 80174c2:	4618      	mov	r0, r3
 80174c4:	b00e      	add	sp, #56	; 0x38
 80174c6:	bd10      	pop	{r4, pc}
 80174c8:	230c      	movs	r3, #12
 80174ca:	e7f2      	b.n	80174b2 <rmw_init_options_fini+0x66>
 80174cc:	230b      	movs	r3, #11
 80174ce:	4618      	mov	r0, r3
 80174d0:	4770      	bx	lr
 80174d2:	bf00      	nop
 80174d4:	0801cbbc 	.word	0x0801cbbc
 80174d8:	20015b54 	.word	0x20015b54

080174dc <rmw_init>:
 80174dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80174e0:	b083      	sub	sp, #12
 80174e2:	2800      	cmp	r0, #0
 80174e4:	f000 80d3 	beq.w	801768e <rmw_init+0x1b2>
 80174e8:	460e      	mov	r6, r1
 80174ea:	2900      	cmp	r1, #0
 80174ec:	f000 80cf 	beq.w	801768e <rmw_init+0x1b2>
 80174f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80174f2:	4605      	mov	r5, r0
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	f000 80ca 	beq.w	801768e <rmw_init+0x1b2>
 80174fa:	4b78      	ldr	r3, [pc, #480]	; (80176dc <rmw_init+0x200>)
 80174fc:	6880      	ldr	r0, [r0, #8]
 80174fe:	681f      	ldr	r7, [r3, #0]
 8017500:	b128      	cbz	r0, 801750e <rmw_init+0x32>
 8017502:	4639      	mov	r1, r7
 8017504:	f7e8 fe64 	bl	80001d0 <strcmp>
 8017508:	2800      	cmp	r0, #0
 801750a:	f040 80ca 	bne.w	80176a2 <rmw_init+0x1c6>
 801750e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017512:	4c73      	ldr	r4, [pc, #460]	; (80176e0 <rmw_init+0x204>)
 8017514:	4973      	ldr	r1, [pc, #460]	; (80176e4 <rmw_init+0x208>)
 8017516:	4874      	ldr	r0, [pc, #464]	; (80176e8 <rmw_init+0x20c>)
 8017518:	60b7      	str	r7, [r6, #8]
 801751a:	e9c6 2300 	strd	r2, r3, [r6]
 801751e:	68eb      	ldr	r3, [r5, #12]
 8017520:	64b3      	str	r3, [r6, #72]	; 0x48
 8017522:	2201      	movs	r2, #1
 8017524:	f7f9 f852 	bl	80105cc <rmw_uxrce_init_session_memory>
 8017528:	4620      	mov	r0, r4
 801752a:	4970      	ldr	r1, [pc, #448]	; (80176ec <rmw_init+0x210>)
 801752c:	2204      	movs	r2, #4
 801752e:	f7f9 f88d 	bl	801064c <rmw_uxrce_init_static_input_buffer_memory>
 8017532:	f04f 0800 	mov.w	r8, #0
 8017536:	486c      	ldr	r0, [pc, #432]	; (80176e8 <rmw_init+0x20c>)
 8017538:	f884 800d 	strb.w	r8, [r4, #13]
 801753c:	f7ff feac 	bl	8017298 <get_memory>
 8017540:	2800      	cmp	r0, #0
 8017542:	f000 80a9 	beq.w	8017698 <rmw_init+0x1bc>
 8017546:	6884      	ldr	r4, [r0, #8]
 8017548:	6b68      	ldr	r0, [r5, #52]	; 0x34
 801754a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 801754c:	f890 c010 	ldrb.w	ip, [r0, #16]
 8017550:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8017554:	9101      	str	r1, [sp, #4]
 8017556:	6a00      	ldr	r0, [r0, #32]
 8017558:	9000      	str	r0, [sp, #0]
 801755a:	f104 0910 	add.w	r9, r4, #16
 801755e:	4661      	mov	r1, ip
 8017560:	4648      	mov	r0, r9
 8017562:	f000 ff2f 	bl	80183c4 <uxr_set_custom_transport_callbacks>
 8017566:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 801756a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801756e:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8017572:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8017576:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 801757a:	495d      	ldr	r1, [pc, #372]	; (80176f0 <rmw_init+0x214>)
 801757c:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8017580:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8017584:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8017588:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 801758c:	4859      	ldr	r0, [pc, #356]	; (80176f4 <rmw_init+0x218>)
 801758e:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8017592:	2201      	movs	r2, #1
 8017594:	64f4      	str	r4, [r6, #76]	; 0x4c
 8017596:	f7f8 fff9 	bl	801058c <rmw_uxrce_init_node_memory>
 801759a:	4957      	ldr	r1, [pc, #348]	; (80176f8 <rmw_init+0x21c>)
 801759c:	4857      	ldr	r0, [pc, #348]	; (80176fc <rmw_init+0x220>)
 801759e:	2205      	movs	r2, #5
 80175a0:	f7f8 ffd4 	bl	801054c <rmw_uxrce_init_subscription_memory>
 80175a4:	4956      	ldr	r1, [pc, #344]	; (8017700 <rmw_init+0x224>)
 80175a6:	4857      	ldr	r0, [pc, #348]	; (8017704 <rmw_init+0x228>)
 80175a8:	220a      	movs	r2, #10
 80175aa:	f7f8 ffaf 	bl	801050c <rmw_uxrce_init_publisher_memory>
 80175ae:	4956      	ldr	r1, [pc, #344]	; (8017708 <rmw_init+0x22c>)
 80175b0:	4856      	ldr	r0, [pc, #344]	; (801770c <rmw_init+0x230>)
 80175b2:	2201      	movs	r2, #1
 80175b4:	f7f8 ff6a 	bl	801048c <rmw_uxrce_init_service_memory>
 80175b8:	4955      	ldr	r1, [pc, #340]	; (8017710 <rmw_init+0x234>)
 80175ba:	4856      	ldr	r0, [pc, #344]	; (8017714 <rmw_init+0x238>)
 80175bc:	2201      	movs	r2, #1
 80175be:	f7f8 ff85 	bl	80104cc <rmw_uxrce_init_client_memory>
 80175c2:	4955      	ldr	r1, [pc, #340]	; (8017718 <rmw_init+0x23c>)
 80175c4:	4855      	ldr	r0, [pc, #340]	; (801771c <rmw_init+0x240>)
 80175c6:	220f      	movs	r2, #15
 80175c8:	f7f9 f820 	bl	801060c <rmw_uxrce_init_topic_memory>
 80175cc:	4954      	ldr	r1, [pc, #336]	; (8017720 <rmw_init+0x244>)
 80175ce:	4855      	ldr	r0, [pc, #340]	; (8017724 <rmw_init+0x248>)
 80175d0:	2203      	movs	r2, #3
 80175d2:	f7f9 f85b 	bl	801068c <rmw_uxrce_init_init_options_impl_memory>
 80175d6:	4954      	ldr	r1, [pc, #336]	; (8017728 <rmw_init+0x24c>)
 80175d8:	4854      	ldr	r0, [pc, #336]	; (801772c <rmw_init+0x250>)
 80175da:	2204      	movs	r2, #4
 80175dc:	f7f9 f876 	bl	80106cc <rmw_uxrce_init_wait_set_memory>
 80175e0:	4953      	ldr	r1, [pc, #332]	; (8017730 <rmw_init+0x254>)
 80175e2:	4854      	ldr	r0, [pc, #336]	; (8017734 <rmw_init+0x258>)
 80175e4:	2204      	movs	r2, #4
 80175e6:	f7f9 f891 	bl	801070c <rmw_uxrce_init_guard_condition_memory>
 80175ea:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80175ec:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 80175ee:	4642      	mov	r2, r8
 80175f0:	f000 fb18 	bl	8017c24 <rmw_uxrce_transport_init>
 80175f4:	4607      	mov	r7, r0
 80175f6:	2800      	cmp	r0, #0
 80175f8:	d158      	bne.n	80176ac <rmw_init+0x1d0>
 80175fa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80175fc:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8017600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017602:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8017606:	4628      	mov	r0, r5
 8017608:	f7fc f84e 	bl	80136a8 <uxr_init_session>
 801760c:	494a      	ldr	r1, [pc, #296]	; (8017738 <rmw_init+0x25c>)
 801760e:	4622      	mov	r2, r4
 8017610:	4628      	mov	r0, r5
 8017612:	f7fc f86d 	bl	80136f0 <uxr_set_topic_callback>
 8017616:	4949      	ldr	r1, [pc, #292]	; (801773c <rmw_init+0x260>)
 8017618:	463a      	mov	r2, r7
 801761a:	4628      	mov	r0, r5
 801761c:	f7fc f864 	bl	80136e8 <uxr_set_status_callback>
 8017620:	4947      	ldr	r1, [pc, #284]	; (8017740 <rmw_init+0x264>)
 8017622:	463a      	mov	r2, r7
 8017624:	4628      	mov	r0, r5
 8017626:	f7fc f867 	bl	80136f8 <uxr_set_request_callback>
 801762a:	4946      	ldr	r1, [pc, #280]	; (8017744 <rmw_init+0x268>)
 801762c:	463a      	mov	r2, r7
 801762e:	4628      	mov	r0, r5
 8017630:	f7fc f866 	bl	8013700 <uxr_set_reply_callback>
 8017634:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8017638:	2304      	movs	r3, #4
 801763a:	0092      	lsls	r2, r2, #2
 801763c:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8017640:	4628      	mov	r0, r5
 8017642:	f7fc f89b 	bl	801377c <uxr_create_input_reliable_stream>
 8017646:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801764a:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 801764e:	0092      	lsls	r2, r2, #2
 8017650:	2304      	movs	r3, #4
 8017652:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8017656:	4628      	mov	r0, r5
 8017658:	f7fc f868 	bl	801372c <uxr_create_output_reliable_stream>
 801765c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8017660:	4628      	mov	r0, r5
 8017662:	f7fc f885 	bl	8013770 <uxr_create_input_best_effort_stream>
 8017666:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 801766a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 801766e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8017672:	3114      	adds	r1, #20
 8017674:	4628      	mov	r0, r5
 8017676:	f7fc f847 	bl	8013708 <uxr_create_output_best_effort_stream>
 801767a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 801767e:	4628      	mov	r0, r5
 8017680:	f7fc fd98 	bl	80141b4 <uxr_create_session>
 8017684:	b1f8      	cbz	r0, 80176c6 <rmw_init+0x1ea>
 8017686:	4638      	mov	r0, r7
 8017688:	b003      	add	sp, #12
 801768a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801768e:	270b      	movs	r7, #11
 8017690:	4638      	mov	r0, r7
 8017692:	b003      	add	sp, #12
 8017694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017698:	2701      	movs	r7, #1
 801769a:	4638      	mov	r0, r7
 801769c:	b003      	add	sp, #12
 801769e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176a2:	270c      	movs	r7, #12
 80176a4:	4638      	mov	r0, r7
 80176a6:	b003      	add	sp, #12
 80176a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176ac:	4648      	mov	r0, r9
 80176ae:	f000 fecb 	bl	8018448 <uxr_close_custom_transport>
 80176b2:	480d      	ldr	r0, [pc, #52]	; (80176e8 <rmw_init+0x20c>)
 80176b4:	4621      	mov	r1, r4
 80176b6:	f7ff fdff 	bl	80172b8 <put_memory>
 80176ba:	4638      	mov	r0, r7
 80176bc:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 80176c0:	b003      	add	sp, #12
 80176c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176c6:	4648      	mov	r0, r9
 80176c8:	f000 febe 	bl	8018448 <uxr_close_custom_transport>
 80176cc:	4806      	ldr	r0, [pc, #24]	; (80176e8 <rmw_init+0x20c>)
 80176ce:	4621      	mov	r1, r4
 80176d0:	f7ff fdf2 	bl	80172b8 <put_memory>
 80176d4:	64f7      	str	r7, [r6, #76]	; 0x4c
 80176d6:	2701      	movs	r7, #1
 80176d8:	e7d5      	b.n	8017686 <rmw_init+0x1aa>
 80176da:	bf00      	nop
 80176dc:	0801cbbc 	.word	0x0801cbbc
 80176e0:	20015ba4 	.word	0x20015ba4
 80176e4:	20011e50 	.word	0x20011e50
 80176e8:	20015b94 	.word	0x20015b94
 80176ec:	200133f8 	.word	0x200133f8
 80176f0:	20011474 	.word	0x20011474
 80176f4:	20015b64 	.word	0x20015b64
 80176f8:	200154f8 	.word	0x200154f8
 80176fc:	20015bb4 	.word	0x20015bb4
 8017700:	20011518 	.word	0x20011518
 8017704:	20015b74 	.word	0x20015b74
 8017708:	20011d88 	.word	0x20011d88
 801770c:	20015b84 	.word	0x20015b84
 8017710:	200112a8 	.word	0x200112a8
 8017714:	20011298 	.word	0x20011298
 8017718:	20015930 	.word	0x20015930
 801771c:	20015bc4 	.word	0x20015bc4
 8017720:	200113f0 	.word	0x200113f0
 8017724:	20015b54 	.word	0x20015b54
 8017728:	20015ad4 	.word	0x20015ad4
 801772c:	20015bd4 	.word	0x20015bd4
 8017730:	20011370 	.word	0x20011370
 8017734:	20015b44 	.word	0x20015b44
 8017738:	0801a041 	.word	0x0801a041
 801773c:	0801a039 	.word	0x0801a039
 8017740:	0801a0d9 	.word	0x0801a0d9
 8017744:	0801a175 	.word	0x0801a175

08017748 <rmw_context_fini>:
 8017748:	4b17      	ldr	r3, [pc, #92]	; (80177a8 <rmw_context_fini+0x60>)
 801774a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801774c:	b570      	push	{r4, r5, r6, lr}
 801774e:	681c      	ldr	r4, [r3, #0]
 8017750:	4605      	mov	r5, r0
 8017752:	b334      	cbz	r4, 80177a2 <rmw_context_fini+0x5a>
 8017754:	2600      	movs	r6, #0
 8017756:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801775a:	6902      	ldr	r2, [r0, #16]
 801775c:	428a      	cmp	r2, r1
 801775e:	d018      	beq.n	8017792 <rmw_context_fini+0x4a>
 8017760:	2c00      	cmp	r4, #0
 8017762:	d1f8      	bne.n	8017756 <rmw_context_fini+0xe>
 8017764:	b189      	cbz	r1, 801778a <rmw_context_fini+0x42>
 8017766:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 801776a:	789b      	ldrb	r3, [r3, #2]
 801776c:	2b01      	cmp	r3, #1
 801776e:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8017772:	bf14      	ite	ne
 8017774:	210a      	movne	r1, #10
 8017776:	2100      	moveq	r1, #0
 8017778:	f7fc fcf4 	bl	8014164 <uxr_delete_session_retries>
 801777c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 801777e:	f7f8 ffe5 	bl	801074c <rmw_uxrce_fini_session_memory>
 8017782:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8017784:	3010      	adds	r0, #16
 8017786:	f000 fe5f 	bl	8018448 <uxr_close_custom_transport>
 801778a:	2300      	movs	r3, #0
 801778c:	64eb      	str	r3, [r5, #76]	; 0x4c
 801778e:	4630      	mov	r0, r6
 8017790:	bd70      	pop	{r4, r5, r6, pc}
 8017792:	3018      	adds	r0, #24
 8017794:	f000 f922 	bl	80179dc <rmw_destroy_node>
 8017798:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 801779a:	4606      	mov	r6, r0
 801779c:	2c00      	cmp	r4, #0
 801779e:	d1da      	bne.n	8017756 <rmw_context_fini+0xe>
 80177a0:	e7e0      	b.n	8017764 <rmw_context_fini+0x1c>
 80177a2:	4626      	mov	r6, r4
 80177a4:	e7de      	b.n	8017764 <rmw_context_fini+0x1c>
 80177a6:	bf00      	nop
 80177a8:	20015b64 	.word	0x20015b64

080177ac <create_topic>:
 80177ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177b0:	4605      	mov	r5, r0
 80177b2:	b084      	sub	sp, #16
 80177b4:	482c      	ldr	r0, [pc, #176]	; (8017868 <create_topic+0xbc>)
 80177b6:	460f      	mov	r7, r1
 80177b8:	4616      	mov	r6, r2
 80177ba:	f7ff fd6d 	bl	8017298 <get_memory>
 80177be:	4604      	mov	r4, r0
 80177c0:	2800      	cmp	r0, #0
 80177c2:	d038      	beq.n	8017836 <create_topic+0x8a>
 80177c4:	692b      	ldr	r3, [r5, #16]
 80177c6:	6884      	ldr	r4, [r0, #8]
 80177c8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8017870 <create_topic+0xc4>
 80177cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80177d0:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80177d4:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 80177d8:	1c42      	adds	r2, r0, #1
 80177da:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 80177de:	2102      	movs	r1, #2
 80177e0:	f7fb fea4 	bl	801352c <uxr_object_id>
 80177e4:	223c      	movs	r2, #60	; 0x3c
 80177e6:	6120      	str	r0, [r4, #16]
 80177e8:	4641      	mov	r1, r8
 80177ea:	4638      	mov	r0, r7
 80177ec:	f7f9 f8e6 	bl	80109bc <generate_topic_name>
 80177f0:	4607      	mov	r7, r0
 80177f2:	b320      	cbz	r0, 801783e <create_topic+0x92>
 80177f4:	4f1d      	ldr	r7, [pc, #116]	; (801786c <create_topic+0xc0>)
 80177f6:	4630      	mov	r0, r6
 80177f8:	2264      	movs	r2, #100	; 0x64
 80177fa:	4639      	mov	r1, r7
 80177fc:	f7f9 f8ae 	bl	801095c <generate_type_name>
 8017800:	4606      	mov	r6, r0
 8017802:	b320      	cbz	r0, 801784e <create_topic+0xa2>
 8017804:	6928      	ldr	r0, [r5, #16]
 8017806:	2306      	movs	r3, #6
 8017808:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801780c:	f8cd 8000 	str.w	r8, [sp]
 8017810:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8017814:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017818:	696b      	ldr	r3, [r5, #20]
 801781a:	6811      	ldr	r1, [r2, #0]
 801781c:	6922      	ldr	r2, [r4, #16]
 801781e:	f7fb fda9 	bl	8013374 <uxr_buffer_create_topic_bin>
 8017822:	4602      	mov	r2, r0
 8017824:	6928      	ldr	r0, [r5, #16]
 8017826:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801782a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801782e:	f7f9 f85f 	bl	80108f0 <run_xrce_session>
 8017832:	4605      	mov	r5, r0
 8017834:	b198      	cbz	r0, 801785e <create_topic+0xb2>
 8017836:	4620      	mov	r0, r4
 8017838:	b004      	add	sp, #16
 801783a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801783e:	4620      	mov	r0, r4
 8017840:	f7f8 fffa 	bl	8010838 <rmw_uxrce_fini_topic_memory>
 8017844:	463c      	mov	r4, r7
 8017846:	4620      	mov	r0, r4
 8017848:	b004      	add	sp, #16
 801784a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801784e:	4620      	mov	r0, r4
 8017850:	f7f8 fff2 	bl	8010838 <rmw_uxrce_fini_topic_memory>
 8017854:	4634      	mov	r4, r6
 8017856:	4620      	mov	r0, r4
 8017858:	b004      	add	sp, #16
 801785a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801785e:	4620      	mov	r0, r4
 8017860:	f7f8 ffea 	bl	8010838 <rmw_uxrce_fini_topic_memory>
 8017864:	462c      	mov	r4, r5
 8017866:	e7e6      	b.n	8017836 <create_topic+0x8a>
 8017868:	20015bc4 	.word	0x20015bc4
 801786c:	20015c40 	.word	0x20015c40
 8017870:	20015c04 	.word	0x20015c04

08017874 <destroy_topic>:
 8017874:	b538      	push	{r3, r4, r5, lr}
 8017876:	6985      	ldr	r5, [r0, #24]
 8017878:	b1d5      	cbz	r5, 80178b0 <destroy_topic+0x3c>
 801787a:	4604      	mov	r4, r0
 801787c:	6928      	ldr	r0, [r5, #16]
 801787e:	6922      	ldr	r2, [r4, #16]
 8017880:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017884:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017888:	6819      	ldr	r1, [r3, #0]
 801788a:	f7fb fcf5 	bl	8013278 <uxr_buffer_delete_entity>
 801788e:	4602      	mov	r2, r0
 8017890:	6928      	ldr	r0, [r5, #16]
 8017892:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017896:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801789a:	f7f9 f829 	bl	80108f0 <run_xrce_session>
 801789e:	2800      	cmp	r0, #0
 80178a0:	4620      	mov	r0, r4
 80178a2:	bf14      	ite	ne
 80178a4:	2400      	movne	r4, #0
 80178a6:	2402      	moveq	r4, #2
 80178a8:	f7f8 ffc6 	bl	8010838 <rmw_uxrce_fini_topic_memory>
 80178ac:	4620      	mov	r0, r4
 80178ae:	bd38      	pop	{r3, r4, r5, pc}
 80178b0:	2401      	movs	r4, #1
 80178b2:	4620      	mov	r0, r4
 80178b4:	bd38      	pop	{r3, r4, r5, pc}
 80178b6:	bf00      	nop

080178b8 <create_node>:
 80178b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178bc:	b083      	sub	sp, #12
 80178be:	2b00      	cmp	r3, #0
 80178c0:	d05f      	beq.n	8017982 <create_node+0xca>
 80178c2:	4606      	mov	r6, r0
 80178c4:	4835      	ldr	r0, [pc, #212]	; (801799c <create_node+0xe4>)
 80178c6:	460f      	mov	r7, r1
 80178c8:	4690      	mov	r8, r2
 80178ca:	461d      	mov	r5, r3
 80178cc:	f7ff fce4 	bl	8017298 <get_memory>
 80178d0:	2800      	cmp	r0, #0
 80178d2:	d056      	beq.n	8017982 <create_node+0xca>
 80178d4:	6884      	ldr	r4, [r0, #8]
 80178d6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80178d8:	6123      	str	r3, [r4, #16]
 80178da:	f7ff fd01 	bl	80172e0 <rmw_get_implementation_identifier>
 80178de:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 80178e2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80178e6:	f8c4 9020 	str.w	r9, [r4, #32]
 80178ea:	4630      	mov	r0, r6
 80178ec:	f7e8 fc7a 	bl	80001e4 <strlen>
 80178f0:	1c42      	adds	r2, r0, #1
 80178f2:	2a3c      	cmp	r2, #60	; 0x3c
 80178f4:	f104 0518 	add.w	r5, r4, #24
 80178f8:	d840      	bhi.n	801797c <create_node+0xc4>
 80178fa:	4648      	mov	r0, r9
 80178fc:	4631      	mov	r1, r6
 80178fe:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8017902:	f002 ff51 	bl	801a7a8 <memcpy>
 8017906:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 801790a:	4638      	mov	r0, r7
 801790c:	f7e8 fc6a 	bl	80001e4 <strlen>
 8017910:	1c42      	adds	r2, r0, #1
 8017912:	2a3c      	cmp	r2, #60	; 0x3c
 8017914:	d832      	bhi.n	801797c <create_node+0xc4>
 8017916:	4639      	mov	r1, r7
 8017918:	4648      	mov	r0, r9
 801791a:	f002 ff45 	bl	801a7a8 <memcpy>
 801791e:	6923      	ldr	r3, [r4, #16]
 8017920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017924:	2101      	movs	r1, #1
 8017926:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 801792a:	1842      	adds	r2, r0, r1
 801792c:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8017930:	f7fb fdfc 	bl	801352c <uxr_object_id>
 8017934:	6160      	str	r0, [r4, #20]
 8017936:	783b      	ldrb	r3, [r7, #0]
 8017938:	2b2f      	cmp	r3, #47	; 0x2f
 801793a:	d127      	bne.n	801798c <create_node+0xd4>
 801793c:	787b      	ldrb	r3, [r7, #1]
 801793e:	bb2b      	cbnz	r3, 801798c <create_node+0xd4>
 8017940:	4a17      	ldr	r2, [pc, #92]	; (80179a0 <create_node+0xe8>)
 8017942:	4818      	ldr	r0, [pc, #96]	; (80179a4 <create_node+0xec>)
 8017944:	4633      	mov	r3, r6
 8017946:	213c      	movs	r1, #60	; 0x3c
 8017948:	f003 f940 	bl	801abcc <sniprintf>
 801794c:	6920      	ldr	r0, [r4, #16]
 801794e:	4915      	ldr	r1, [pc, #84]	; (80179a4 <create_node+0xec>)
 8017950:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8017954:	9100      	str	r1, [sp, #0]
 8017956:	2106      	movs	r1, #6
 8017958:	9101      	str	r1, [sp, #4]
 801795a:	6811      	ldr	r1, [r2, #0]
 801795c:	6962      	ldr	r2, [r4, #20]
 801795e:	fa1f f388 	uxth.w	r3, r8
 8017962:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017966:	f7fb fcd3 	bl	8013310 <uxr_buffer_create_participant_bin>
 801796a:	4602      	mov	r2, r0
 801796c:	6920      	ldr	r0, [r4, #16]
 801796e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8017972:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8017976:	f7f8 ffbb 	bl	80108f0 <run_xrce_session>
 801797a:	b918      	cbnz	r0, 8017984 <create_node+0xcc>
 801797c:	4628      	mov	r0, r5
 801797e:	f7f8 feeb 	bl	8010758 <rmw_uxrce_fini_node_memory>
 8017982:	2500      	movs	r5, #0
 8017984:	4628      	mov	r0, r5
 8017986:	b003      	add	sp, #12
 8017988:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801798c:	4a06      	ldr	r2, [pc, #24]	; (80179a8 <create_node+0xf0>)
 801798e:	9600      	str	r6, [sp, #0]
 8017990:	463b      	mov	r3, r7
 8017992:	213c      	movs	r1, #60	; 0x3c
 8017994:	4803      	ldr	r0, [pc, #12]	; (80179a4 <create_node+0xec>)
 8017996:	f003 f919 	bl	801abcc <sniprintf>
 801799a:	e7d7      	b.n	801794c <create_node+0x94>
 801799c:	20015b64 	.word	0x20015b64
 80179a0:	0801bff8 	.word	0x0801bff8
 80179a4:	20015ca4 	.word	0x20015ca4
 80179a8:	0801c764 	.word	0x0801c764

080179ac <rmw_create_node>:
 80179ac:	b199      	cbz	r1, 80179d6 <rmw_create_node+0x2a>
 80179ae:	780b      	ldrb	r3, [r1, #0]
 80179b0:	468c      	mov	ip, r1
 80179b2:	b183      	cbz	r3, 80179d6 <rmw_create_node+0x2a>
 80179b4:	b410      	push	{r4}
 80179b6:	4614      	mov	r4, r2
 80179b8:	b14a      	cbz	r2, 80179ce <rmw_create_node+0x22>
 80179ba:	7813      	ldrb	r3, [r2, #0]
 80179bc:	b13b      	cbz	r3, 80179ce <rmw_create_node+0x22>
 80179be:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80179c0:	4603      	mov	r3, r0
 80179c2:	4621      	mov	r1, r4
 80179c4:	4660      	mov	r0, ip
 80179c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179ca:	f7ff bf75 	b.w	80178b8 <create_node>
 80179ce:	2000      	movs	r0, #0
 80179d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80179d4:	4770      	bx	lr
 80179d6:	2000      	movs	r0, #0
 80179d8:	4770      	bx	lr
 80179da:	bf00      	nop

080179dc <rmw_destroy_node>:
 80179dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179de:	2800      	cmp	r0, #0
 80179e0:	d066      	beq.n	8017ab0 <rmw_destroy_node+0xd4>
 80179e2:	4607      	mov	r7, r0
 80179e4:	6800      	ldr	r0, [r0, #0]
 80179e6:	b128      	cbz	r0, 80179f4 <rmw_destroy_node+0x18>
 80179e8:	4b34      	ldr	r3, [pc, #208]	; (8017abc <rmw_destroy_node+0xe0>)
 80179ea:	6819      	ldr	r1, [r3, #0]
 80179ec:	f7e8 fbf0 	bl	80001d0 <strcmp>
 80179f0:	2800      	cmp	r0, #0
 80179f2:	d15d      	bne.n	8017ab0 <rmw_destroy_node+0xd4>
 80179f4:	687c      	ldr	r4, [r7, #4]
 80179f6:	2c00      	cmp	r4, #0
 80179f8:	d05a      	beq.n	8017ab0 <rmw_destroy_node+0xd4>
 80179fa:	4b31      	ldr	r3, [pc, #196]	; (8017ac0 <rmw_destroy_node+0xe4>)
 80179fc:	681d      	ldr	r5, [r3, #0]
 80179fe:	2d00      	cmp	r5, #0
 8017a00:	d059      	beq.n	8017ab6 <rmw_destroy_node+0xda>
 8017a02:	2600      	movs	r6, #0
 8017a04:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8017a08:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8017a0c:	429c      	cmp	r4, r3
 8017a0e:	d047      	beq.n	8017aa0 <rmw_destroy_node+0xc4>
 8017a10:	2d00      	cmp	r5, #0
 8017a12:	d1f7      	bne.n	8017a04 <rmw_destroy_node+0x28>
 8017a14:	4b2b      	ldr	r3, [pc, #172]	; (8017ac4 <rmw_destroy_node+0xe8>)
 8017a16:	681d      	ldr	r5, [r3, #0]
 8017a18:	b15d      	cbz	r5, 8017a32 <rmw_destroy_node+0x56>
 8017a1a:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8017a1e:	6a0b      	ldr	r3, [r1, #32]
 8017a20:	429c      	cmp	r4, r3
 8017a22:	d1f9      	bne.n	8017a18 <rmw_destroy_node+0x3c>
 8017a24:	317c      	adds	r1, #124	; 0x7c
 8017a26:	4638      	mov	r0, r7
 8017a28:	f000 f89c 	bl	8017b64 <rmw_destroy_subscription>
 8017a2c:	4606      	mov	r6, r0
 8017a2e:	2d00      	cmp	r5, #0
 8017a30:	d1f3      	bne.n	8017a1a <rmw_destroy_node+0x3e>
 8017a32:	4b25      	ldr	r3, [pc, #148]	; (8017ac8 <rmw_destroy_node+0xec>)
 8017a34:	681d      	ldr	r5, [r3, #0]
 8017a36:	b15d      	cbz	r5, 8017a50 <rmw_destroy_node+0x74>
 8017a38:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8017a3c:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8017a3e:	429c      	cmp	r4, r3
 8017a40:	d1f9      	bne.n	8017a36 <rmw_destroy_node+0x5a>
 8017a42:	317c      	adds	r1, #124	; 0x7c
 8017a44:	4638      	mov	r0, r7
 8017a46:	f000 f849 	bl	8017adc <rmw_destroy_service>
 8017a4a:	4606      	mov	r6, r0
 8017a4c:	2d00      	cmp	r5, #0
 8017a4e:	d1f3      	bne.n	8017a38 <rmw_destroy_node+0x5c>
 8017a50:	4b1e      	ldr	r3, [pc, #120]	; (8017acc <rmw_destroy_node+0xf0>)
 8017a52:	681d      	ldr	r5, [r3, #0]
 8017a54:	b15d      	cbz	r5, 8017a6e <rmw_destroy_node+0x92>
 8017a56:	e9d5 5101 	ldrd	r5, r1, [r5, #4]
 8017a5a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8017a5c:	429c      	cmp	r4, r3
 8017a5e:	d1f9      	bne.n	8017a54 <rmw_destroy_node+0x78>
 8017a60:	317c      	adds	r1, #124	; 0x7c
 8017a62:	4638      	mov	r0, r7
 8017a64:	f002 fbd0 	bl	801a208 <rmw_destroy_client>
 8017a68:	4606      	mov	r6, r0
 8017a6a:	2d00      	cmp	r5, #0
 8017a6c:	d1f3      	bne.n	8017a56 <rmw_destroy_node+0x7a>
 8017a6e:	6920      	ldr	r0, [r4, #16]
 8017a70:	6962      	ldr	r2, [r4, #20]
 8017a72:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017a76:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017a7a:	6819      	ldr	r1, [r3, #0]
 8017a7c:	f7fb fbfc 	bl	8013278 <uxr_buffer_delete_entity>
 8017a80:	4602      	mov	r2, r0
 8017a82:	6920      	ldr	r0, [r4, #16]
 8017a84:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017a88:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017a8c:	f7f8 ff30 	bl	80108f0 <run_xrce_session>
 8017a90:	2800      	cmp	r0, #0
 8017a92:	bf08      	it	eq
 8017a94:	2602      	moveq	r6, #2
 8017a96:	4638      	mov	r0, r7
 8017a98:	f7f8 fe5e 	bl	8010758 <rmw_uxrce_fini_node_memory>
 8017a9c:	4630      	mov	r0, r6
 8017a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017aa0:	3184      	adds	r1, #132	; 0x84
 8017aa2:	4638      	mov	r0, r7
 8017aa4:	f7f8 fca0 	bl	80103e8 <rmw_destroy_publisher>
 8017aa8:	4606      	mov	r6, r0
 8017aaa:	2d00      	cmp	r5, #0
 8017aac:	d1aa      	bne.n	8017a04 <rmw_destroy_node+0x28>
 8017aae:	e7b1      	b.n	8017a14 <rmw_destroy_node+0x38>
 8017ab0:	2601      	movs	r6, #1
 8017ab2:	4630      	mov	r0, r6
 8017ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ab6:	462e      	mov	r6, r5
 8017ab8:	e7ac      	b.n	8017a14 <rmw_destroy_node+0x38>
 8017aba:	bf00      	nop
 8017abc:	0801cbbc 	.word	0x0801cbbc
 8017ac0:	20015b74 	.word	0x20015b74
 8017ac4:	20015bb4 	.word	0x20015bb4
 8017ac8:	20015b84 	.word	0x20015b84
 8017acc:	20011298 	.word	0x20011298

08017ad0 <rmw_node_get_graph_guard_condition>:
 8017ad0:	6843      	ldr	r3, [r0, #4]
 8017ad2:	6918      	ldr	r0, [r3, #16]
 8017ad4:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8017ad8:	4770      	bx	lr
 8017ada:	bf00      	nop

08017adc <rmw_destroy_service>:
 8017adc:	b570      	push	{r4, r5, r6, lr}
 8017ade:	b128      	cbz	r0, 8017aec <rmw_destroy_service+0x10>
 8017ae0:	4604      	mov	r4, r0
 8017ae2:	6800      	ldr	r0, [r0, #0]
 8017ae4:	460d      	mov	r5, r1
 8017ae6:	f7f8 ff83 	bl	80109f0 <is_uxrce_rmw_identifier_valid>
 8017aea:	b910      	cbnz	r0, 8017af2 <rmw_destroy_service+0x16>
 8017aec:	2401      	movs	r4, #1
 8017aee:	4620      	mov	r0, r4
 8017af0:	bd70      	pop	{r4, r5, r6, pc}
 8017af2:	6863      	ldr	r3, [r4, #4]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d0f9      	beq.n	8017aec <rmw_destroy_service+0x10>
 8017af8:	2d00      	cmp	r5, #0
 8017afa:	d0f7      	beq.n	8017aec <rmw_destroy_service+0x10>
 8017afc:	6828      	ldr	r0, [r5, #0]
 8017afe:	f7f8 ff77 	bl	80109f0 <is_uxrce_rmw_identifier_valid>
 8017b02:	2800      	cmp	r0, #0
 8017b04:	d0f2      	beq.n	8017aec <rmw_destroy_service+0x10>
 8017b06:	686e      	ldr	r6, [r5, #4]
 8017b08:	2e00      	cmp	r6, #0
 8017b0a:	d0ef      	beq.n	8017aec <rmw_destroy_service+0x10>
 8017b0c:	6864      	ldr	r4, [r4, #4]
 8017b0e:	6932      	ldr	r2, [r6, #16]
 8017b10:	6920      	ldr	r0, [r4, #16]
 8017b12:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017b16:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017b1a:	6819      	ldr	r1, [r3, #0]
 8017b1c:	f001 f9ce 	bl	8018ebc <uxr_buffer_cancel_data>
 8017b20:	4602      	mov	r2, r0
 8017b22:	6920      	ldr	r0, [r4, #16]
 8017b24:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017b28:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017b2c:	f7f8 fee0 	bl	80108f0 <run_xrce_session>
 8017b30:	6920      	ldr	r0, [r4, #16]
 8017b32:	6932      	ldr	r2, [r6, #16]
 8017b34:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017b38:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017b3c:	6819      	ldr	r1, [r3, #0]
 8017b3e:	f7fb fb9b 	bl	8013278 <uxr_buffer_delete_entity>
 8017b42:	4602      	mov	r2, r0
 8017b44:	6920      	ldr	r0, [r4, #16]
 8017b46:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017b4a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017b4e:	f7f8 fecf 	bl	80108f0 <run_xrce_session>
 8017b52:	2800      	cmp	r0, #0
 8017b54:	4628      	mov	r0, r5
 8017b56:	bf14      	ite	ne
 8017b58:	2400      	movne	r4, #0
 8017b5a:	2402      	moveq	r4, #2
 8017b5c:	f7f8 fe40 	bl	80107e0 <rmw_uxrce_fini_service_memory>
 8017b60:	e7c5      	b.n	8017aee <rmw_destroy_service+0x12>
 8017b62:	bf00      	nop

08017b64 <rmw_destroy_subscription>:
 8017b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b66:	b128      	cbz	r0, 8017b74 <rmw_destroy_subscription+0x10>
 8017b68:	4604      	mov	r4, r0
 8017b6a:	6800      	ldr	r0, [r0, #0]
 8017b6c:	460d      	mov	r5, r1
 8017b6e:	f7f8 ff3f 	bl	80109f0 <is_uxrce_rmw_identifier_valid>
 8017b72:	b910      	cbnz	r0, 8017b7a <rmw_destroy_subscription+0x16>
 8017b74:	2401      	movs	r4, #1
 8017b76:	4620      	mov	r0, r4
 8017b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b7a:	6863      	ldr	r3, [r4, #4]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d0f9      	beq.n	8017b74 <rmw_destroy_subscription+0x10>
 8017b80:	2d00      	cmp	r5, #0
 8017b82:	d0f7      	beq.n	8017b74 <rmw_destroy_subscription+0x10>
 8017b84:	6828      	ldr	r0, [r5, #0]
 8017b86:	f7f8 ff33 	bl	80109f0 <is_uxrce_rmw_identifier_valid>
 8017b8a:	2800      	cmp	r0, #0
 8017b8c:	d0f2      	beq.n	8017b74 <rmw_destroy_subscription+0x10>
 8017b8e:	686c      	ldr	r4, [r5, #4]
 8017b90:	2c00      	cmp	r4, #0
 8017b92:	d0ef      	beq.n	8017b74 <rmw_destroy_subscription+0x10>
 8017b94:	6a26      	ldr	r6, [r4, #32]
 8017b96:	6962      	ldr	r2, [r4, #20]
 8017b98:	6930      	ldr	r0, [r6, #16]
 8017b9a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017b9e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017ba2:	6819      	ldr	r1, [r3, #0]
 8017ba4:	f001 f98a 	bl	8018ebc <uxr_buffer_cancel_data>
 8017ba8:	4602      	mov	r2, r0
 8017baa:	6930      	ldr	r0, [r6, #16]
 8017bac:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8017bb0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8017bb4:	f7f8 fe9c 	bl	80108f0 <run_xrce_session>
 8017bb8:	69e0      	ldr	r0, [r4, #28]
 8017bba:	f7ff fe5b 	bl	8017874 <destroy_topic>
 8017bbe:	6a23      	ldr	r3, [r4, #32]
 8017bc0:	6962      	ldr	r2, [r4, #20]
 8017bc2:	6918      	ldr	r0, [r3, #16]
 8017bc4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8017bc8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017bcc:	6819      	ldr	r1, [r3, #0]
 8017bce:	f7fb fb53 	bl	8013278 <uxr_buffer_delete_entity>
 8017bd2:	6a23      	ldr	r3, [r4, #32]
 8017bd4:	6922      	ldr	r2, [r4, #16]
 8017bd6:	691b      	ldr	r3, [r3, #16]
 8017bd8:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8017bdc:	4604      	mov	r4, r0
 8017bde:	6809      	ldr	r1, [r1, #0]
 8017be0:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8017be4:	f7fb fb48 	bl	8013278 <uxr_buffer_delete_entity>
 8017be8:	6937      	ldr	r7, [r6, #16]
 8017bea:	4622      	mov	r2, r4
 8017bec:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8017bf0:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8017bf4:	4604      	mov	r4, r0
 8017bf6:	4638      	mov	r0, r7
 8017bf8:	f7f8 fe7a 	bl	80108f0 <run_xrce_session>
 8017bfc:	6936      	ldr	r6, [r6, #16]
 8017bfe:	4622      	mov	r2, r4
 8017c00:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8017c04:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8017c08:	4604      	mov	r4, r0
 8017c0a:	4630      	mov	r0, r6
 8017c0c:	f7f8 fe70 	bl	80108f0 <run_xrce_session>
 8017c10:	b12c      	cbz	r4, 8017c1e <rmw_destroy_subscription+0xba>
 8017c12:	b120      	cbz	r0, 8017c1e <rmw_destroy_subscription+0xba>
 8017c14:	2400      	movs	r4, #0
 8017c16:	4628      	mov	r0, r5
 8017c18:	f7f8 fdcc 	bl	80107b4 <rmw_uxrce_fini_subscription_memory>
 8017c1c:	e7ab      	b.n	8017b76 <rmw_destroy_subscription+0x12>
 8017c1e:	2402      	movs	r4, #2
 8017c20:	e7f9      	b.n	8017c16 <rmw_destroy_subscription+0xb2>
 8017c22:	bf00      	nop

08017c24 <rmw_uxrce_transport_init>:
 8017c24:	b508      	push	{r3, lr}
 8017c26:	b108      	cbz	r0, 8017c2c <rmw_uxrce_transport_init+0x8>
 8017c28:	f100 0210 	add.w	r2, r0, #16
 8017c2c:	b139      	cbz	r1, 8017c3e <rmw_uxrce_transport_init+0x1a>
 8017c2e:	6949      	ldr	r1, [r1, #20]
 8017c30:	4610      	mov	r0, r2
 8017c32:	f000 fbd5 	bl	80183e0 <uxr_init_custom_transport>
 8017c36:	f080 0001 	eor.w	r0, r0, #1
 8017c3a:	b2c0      	uxtb	r0, r0
 8017c3c:	bd08      	pop	{r3, pc}
 8017c3e:	4b04      	ldr	r3, [pc, #16]	; (8017c50 <rmw_uxrce_transport_init+0x2c>)
 8017c40:	4610      	mov	r0, r2
 8017c42:	6859      	ldr	r1, [r3, #4]
 8017c44:	f000 fbcc 	bl	80183e0 <uxr_init_custom_transport>
 8017c48:	f080 0001 	eor.w	r0, r0, #1
 8017c4c:	b2c0      	uxtb	r0, r0
 8017c4e:	bd08      	pop	{r3, pc}
 8017c50:	2001127c 	.word	0x2001127c

08017c54 <rmw_uros_epoch_nanos>:
 8017c54:	4b05      	ldr	r3, [pc, #20]	; (8017c6c <rmw_uros_epoch_nanos+0x18>)
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	b123      	cbz	r3, 8017c64 <rmw_uros_epoch_nanos+0x10>
 8017c5a:	6898      	ldr	r0, [r3, #8]
 8017c5c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8017c60:	f7fb bda8 	b.w	80137b4 <uxr_epoch_nanos>
 8017c64:	2000      	movs	r0, #0
 8017c66:	2100      	movs	r1, #0
 8017c68:	4770      	bx	lr
 8017c6a:	bf00      	nop
 8017c6c:	20015b94 	.word	0x20015b94

08017c70 <rosidl_runtime_c__float__Sequence__init>:
 8017c70:	b530      	push	{r4, r5, lr}
 8017c72:	4604      	mov	r4, r0
 8017c74:	b087      	sub	sp, #28
 8017c76:	b130      	cbz	r0, 8017c86 <rosidl_runtime_c__float__Sequence__init+0x16>
 8017c78:	460d      	mov	r5, r1
 8017c7a:	b931      	cbnz	r1, 8017c8a <rosidl_runtime_c__float__Sequence__init+0x1a>
 8017c7c:	4608      	mov	r0, r1
 8017c7e:	e9c4 0500 	strd	r0, r5, [r4]
 8017c82:	60a5      	str	r5, [r4, #8]
 8017c84:	2001      	movs	r0, #1
 8017c86:	b007      	add	sp, #28
 8017c88:	bd30      	pop	{r4, r5, pc}
 8017c8a:	a801      	add	r0, sp, #4
 8017c8c:	f7f8 f9fe 	bl	801008c <rcutils_get_default_allocator>
 8017c90:	9b01      	ldr	r3, [sp, #4]
 8017c92:	9905      	ldr	r1, [sp, #20]
 8017c94:	00a8      	lsls	r0, r5, #2
 8017c96:	4798      	blx	r3
 8017c98:	2800      	cmp	r0, #0
 8017c9a:	d1f0      	bne.n	8017c7e <rosidl_runtime_c__float__Sequence__init+0xe>
 8017c9c:	e7f3      	b.n	8017c86 <rosidl_runtime_c__float__Sequence__init+0x16>
 8017c9e:	bf00      	nop

08017ca0 <rosidl_runtime_c__float__Sequence__fini>:
 8017ca0:	b188      	cbz	r0, 8017cc6 <rosidl_runtime_c__float__Sequence__fini+0x26>
 8017ca2:	b510      	push	{r4, lr}
 8017ca4:	6803      	ldr	r3, [r0, #0]
 8017ca6:	b086      	sub	sp, #24
 8017ca8:	4604      	mov	r4, r0
 8017caa:	b153      	cbz	r3, 8017cc2 <rosidl_runtime_c__float__Sequence__fini+0x22>
 8017cac:	a801      	add	r0, sp, #4
 8017cae:	f7f8 f9ed 	bl	801008c <rcutils_get_default_allocator>
 8017cb2:	9b02      	ldr	r3, [sp, #8]
 8017cb4:	9905      	ldr	r1, [sp, #20]
 8017cb6:	6820      	ldr	r0, [r4, #0]
 8017cb8:	4798      	blx	r3
 8017cba:	2300      	movs	r3, #0
 8017cbc:	e9c4 3300 	strd	r3, r3, [r4]
 8017cc0:	60a3      	str	r3, [r4, #8]
 8017cc2:	b006      	add	sp, #24
 8017cc4:	bd10      	pop	{r4, pc}
 8017cc6:	4770      	bx	lr

08017cc8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8017cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ccc:	6805      	ldr	r5, [r0, #0]
 8017cce:	4604      	mov	r4, r0
 8017cd0:	4628      	mov	r0, r5
 8017cd2:	460e      	mov	r6, r1
 8017cd4:	f7e8 fa7c 	bl	80001d0 <strcmp>
 8017cd8:	b1c8      	cbz	r0, 8017d0e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8017cda:	4b11      	ldr	r3, [pc, #68]	; (8017d20 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8017cdc:	681b      	ldr	r3, [r3, #0]
 8017cde:	429d      	cmp	r5, r3
 8017ce0:	d112      	bne.n	8017d08 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8017ce2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017ce6:	f8d8 4000 	ldr.w	r4, [r8]
 8017cea:	b16c      	cbz	r4, 8017d08 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8017cec:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8017cf0:	2700      	movs	r7, #0
 8017cf2:	3d04      	subs	r5, #4
 8017cf4:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8017cf8:	4631      	mov	r1, r6
 8017cfa:	f7e8 fa69 	bl	80001d0 <strcmp>
 8017cfe:	00bb      	lsls	r3, r7, #2
 8017d00:	b140      	cbz	r0, 8017d14 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8017d02:	3701      	adds	r7, #1
 8017d04:	42bc      	cmp	r4, r7
 8017d06:	d1f5      	bne.n	8017cf4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8017d08:	2000      	movs	r0, #0
 8017d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d0e:	4620      	mov	r0, r4
 8017d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d14:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017d18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d1c:	58d3      	ldr	r3, [r2, r3]
 8017d1e:	4718      	bx	r3
 8017d20:	200009b4 	.word	0x200009b4

08017d24 <sensor_msgs__msg__BatteryState__init>:
 8017d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d28:	4605      	mov	r5, r0
 8017d2a:	2800      	cmp	r0, #0
 8017d2c:	d048      	beq.n	8017dc0 <sensor_msgs__msg__BatteryState__init+0x9c>
 8017d2e:	f000 f89d 	bl	8017e6c <std_msgs__msg__Header__init>
 8017d32:	4604      	mov	r4, r0
 8017d34:	b370      	cbz	r0, 8017d94 <sensor_msgs__msg__BatteryState__init+0x70>
 8017d36:	f105 0634 	add.w	r6, r5, #52	; 0x34
 8017d3a:	2100      	movs	r1, #0
 8017d3c:	4630      	mov	r0, r6
 8017d3e:	f7ff ff97 	bl	8017c70 <rosidl_runtime_c__float__Sequence__init>
 8017d42:	4604      	mov	r4, r0
 8017d44:	2800      	cmp	r0, #0
 8017d46:	d047      	beq.n	8017dd8 <sensor_msgs__msg__BatteryState__init+0xb4>
 8017d48:	f105 0740 	add.w	r7, r5, #64	; 0x40
 8017d4c:	2100      	movs	r1, #0
 8017d4e:	4638      	mov	r0, r7
 8017d50:	f7ff ff8e 	bl	8017c70 <rosidl_runtime_c__float__Sequence__init>
 8017d54:	4604      	mov	r4, r0
 8017d56:	b3b8      	cbz	r0, 8017dc8 <sensor_msgs__msg__BatteryState__init+0xa4>
 8017d58:	f105 084c 	add.w	r8, r5, #76	; 0x4c
 8017d5c:	4640      	mov	r0, r8
 8017d5e:	f002 fabf 	bl	801a2e0 <rosidl_runtime_c__String__init>
 8017d62:	4604      	mov	r4, r0
 8017d64:	b3e8      	cbz	r0, 8017de2 <sensor_msgs__msg__BatteryState__init+0xbe>
 8017d66:	f105 0958 	add.w	r9, r5, #88	; 0x58
 8017d6a:	4648      	mov	r0, r9
 8017d6c:	f002 fab8 	bl	801a2e0 <rosidl_runtime_c__String__init>
 8017d70:	4604      	mov	r4, r0
 8017d72:	bb10      	cbnz	r0, 8017dba <sensor_msgs__msg__BatteryState__init+0x96>
 8017d74:	4628      	mov	r0, r5
 8017d76:	f000 f89d 	bl	8017eb4 <std_msgs__msg__Header__fini>
 8017d7a:	4630      	mov	r0, r6
 8017d7c:	f7ff ff90 	bl	8017ca0 <rosidl_runtime_c__float__Sequence__fini>
 8017d80:	4638      	mov	r0, r7
 8017d82:	f7ff ff8d 	bl	8017ca0 <rosidl_runtime_c__float__Sequence__fini>
 8017d86:	4640      	mov	r0, r8
 8017d88:	f002 fac0 	bl	801a30c <rosidl_runtime_c__String__fini>
 8017d8c:	4648      	mov	r0, r9
 8017d8e:	f002 fabd 	bl	801a30c <rosidl_runtime_c__String__fini>
 8017d92:	e012      	b.n	8017dba <sensor_msgs__msg__BatteryState__init+0x96>
 8017d94:	4628      	mov	r0, r5
 8017d96:	f000 f88d 	bl	8017eb4 <std_msgs__msg__Header__fini>
 8017d9a:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8017d9e:	f7ff ff7f 	bl	8017ca0 <rosidl_runtime_c__float__Sequence__fini>
 8017da2:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8017da6:	f7ff ff7b 	bl	8017ca0 <rosidl_runtime_c__float__Sequence__fini>
 8017daa:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 8017dae:	f002 faad 	bl	801a30c <rosidl_runtime_c__String__fini>
 8017db2:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8017db6:	f002 faa9 	bl	801a30c <rosidl_runtime_c__String__fini>
 8017dba:	4620      	mov	r0, r4
 8017dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017dc0:	4604      	mov	r4, r0
 8017dc2:	4620      	mov	r0, r4
 8017dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017dc8:	4628      	mov	r0, r5
 8017dca:	f000 f873 	bl	8017eb4 <std_msgs__msg__Header__fini>
 8017dce:	4630      	mov	r0, r6
 8017dd0:	f7ff ff66 	bl	8017ca0 <rosidl_runtime_c__float__Sequence__fini>
 8017dd4:	4638      	mov	r0, r7
 8017dd6:	e7e6      	b.n	8017da6 <sensor_msgs__msg__BatteryState__init+0x82>
 8017dd8:	4628      	mov	r0, r5
 8017dda:	f000 f86b 	bl	8017eb4 <std_msgs__msg__Header__fini>
 8017dde:	4630      	mov	r0, r6
 8017de0:	e7dd      	b.n	8017d9e <sensor_msgs__msg__BatteryState__init+0x7a>
 8017de2:	4628      	mov	r0, r5
 8017de4:	f000 f866 	bl	8017eb4 <std_msgs__msg__Header__fini>
 8017de8:	4630      	mov	r0, r6
 8017dea:	f7ff ff59 	bl	8017ca0 <rosidl_runtime_c__float__Sequence__fini>
 8017dee:	4638      	mov	r0, r7
 8017df0:	f7ff ff56 	bl	8017ca0 <rosidl_runtime_c__float__Sequence__fini>
 8017df4:	4640      	mov	r0, r8
 8017df6:	f002 fa89 	bl	801a30c <rosidl_runtime_c__String__fini>
 8017dfa:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8017dfe:	f002 fa85 	bl	801a30c <rosidl_runtime_c__String__fini>
 8017e02:	e7da      	b.n	8017dba <sensor_msgs__msg__BatteryState__init+0x96>

08017e04 <sensor_msgs__msg__BatteryState__fini>:
 8017e04:	b1a8      	cbz	r0, 8017e32 <sensor_msgs__msg__BatteryState__fini+0x2e>
 8017e06:	b510      	push	{r4, lr}
 8017e08:	4604      	mov	r4, r0
 8017e0a:	f000 f853 	bl	8017eb4 <std_msgs__msg__Header__fini>
 8017e0e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8017e12:	f7ff ff45 	bl	8017ca0 <rosidl_runtime_c__float__Sequence__fini>
 8017e16:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8017e1a:	f7ff ff41 	bl	8017ca0 <rosidl_runtime_c__float__Sequence__fini>
 8017e1e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8017e22:	f002 fa73 	bl	801a30c <rosidl_runtime_c__String__fini>
 8017e26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e2e:	f002 ba6d 	b.w	801a30c <rosidl_runtime_c__String__fini>
 8017e32:	4770      	bx	lr

08017e34 <sensor_msgs__msg__Temperature__init>:
 8017e34:	b538      	push	{r3, r4, r5, lr}
 8017e36:	4604      	mov	r4, r0
 8017e38:	b128      	cbz	r0, 8017e46 <sensor_msgs__msg__Temperature__init+0x12>
 8017e3a:	f000 f817 	bl	8017e6c <std_msgs__msg__Header__init>
 8017e3e:	4605      	mov	r5, r0
 8017e40:	b120      	cbz	r0, 8017e4c <sensor_msgs__msg__Temperature__init+0x18>
 8017e42:	4628      	mov	r0, r5
 8017e44:	bd38      	pop	{r3, r4, r5, pc}
 8017e46:	4605      	mov	r5, r0
 8017e48:	4628      	mov	r0, r5
 8017e4a:	bd38      	pop	{r3, r4, r5, pc}
 8017e4c:	4620      	mov	r0, r4
 8017e4e:	f000 f831 	bl	8017eb4 <std_msgs__msg__Header__fini>
 8017e52:	4628      	mov	r0, r5
 8017e54:	bd38      	pop	{r3, r4, r5, pc}
 8017e56:	bf00      	nop

08017e58 <sensor_msgs__msg__Temperature__fini>:
 8017e58:	b108      	cbz	r0, 8017e5e <sensor_msgs__msg__Temperature__fini+0x6>
 8017e5a:	f000 b82b 	b.w	8017eb4 <std_msgs__msg__Header__fini>
 8017e5e:	4770      	bx	lr

08017e60 <std_msgs__msg__ColorRGBA__init>:
 8017e60:	3800      	subs	r0, #0
 8017e62:	bf18      	it	ne
 8017e64:	2001      	movne	r0, #1
 8017e66:	4770      	bx	lr

08017e68 <std_msgs__msg__ColorRGBA__fini>:
 8017e68:	4770      	bx	lr
 8017e6a:	bf00      	nop

08017e6c <std_msgs__msg__Header__init>:
 8017e6c:	b570      	push	{r4, r5, r6, lr}
 8017e6e:	4605      	mov	r5, r0
 8017e70:	b1a8      	cbz	r0, 8017e9e <std_msgs__msg__Header__init+0x32>
 8017e72:	f000 f837 	bl	8017ee4 <builtin_interfaces__msg__Time__init>
 8017e76:	4604      	mov	r4, r0
 8017e78:	b140      	cbz	r0, 8017e8c <std_msgs__msg__Header__init+0x20>
 8017e7a:	f105 0608 	add.w	r6, r5, #8
 8017e7e:	4630      	mov	r0, r6
 8017e80:	f002 fa2e 	bl	801a2e0 <rosidl_runtime_c__String__init>
 8017e84:	4604      	mov	r4, r0
 8017e86:	b168      	cbz	r0, 8017ea4 <std_msgs__msg__Header__init+0x38>
 8017e88:	4620      	mov	r0, r4
 8017e8a:	bd70      	pop	{r4, r5, r6, pc}
 8017e8c:	4628      	mov	r0, r5
 8017e8e:	f000 f82d 	bl	8017eec <builtin_interfaces__msg__Time__fini>
 8017e92:	f105 0008 	add.w	r0, r5, #8
 8017e96:	f002 fa39 	bl	801a30c <rosidl_runtime_c__String__fini>
 8017e9a:	4620      	mov	r0, r4
 8017e9c:	bd70      	pop	{r4, r5, r6, pc}
 8017e9e:	4604      	mov	r4, r0
 8017ea0:	4620      	mov	r0, r4
 8017ea2:	bd70      	pop	{r4, r5, r6, pc}
 8017ea4:	4628      	mov	r0, r5
 8017ea6:	f000 f821 	bl	8017eec <builtin_interfaces__msg__Time__fini>
 8017eaa:	4630      	mov	r0, r6
 8017eac:	f002 fa2e 	bl	801a30c <rosidl_runtime_c__String__fini>
 8017eb0:	e7ea      	b.n	8017e88 <std_msgs__msg__Header__init+0x1c>
 8017eb2:	bf00      	nop

08017eb4 <std_msgs__msg__Header__fini>:
 8017eb4:	b148      	cbz	r0, 8017eca <std_msgs__msg__Header__fini+0x16>
 8017eb6:	b510      	push	{r4, lr}
 8017eb8:	4604      	mov	r4, r0
 8017eba:	f000 f817 	bl	8017eec <builtin_interfaces__msg__Time__fini>
 8017ebe:	f104 0008 	add.w	r0, r4, #8
 8017ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ec6:	f002 ba21 	b.w	801a30c <rosidl_runtime_c__String__fini>
 8017eca:	4770      	bx	lr

08017ecc <std_msgs__msg__Int32__init>:
 8017ecc:	3800      	subs	r0, #0
 8017ece:	bf18      	it	ne
 8017ed0:	2001      	movne	r0, #1
 8017ed2:	4770      	bx	lr

08017ed4 <std_msgs__msg__Int32__fini>:
 8017ed4:	4770      	bx	lr
 8017ed6:	bf00      	nop

08017ed8 <std_msgs__msg__Int64__init>:
 8017ed8:	3800      	subs	r0, #0
 8017eda:	bf18      	it	ne
 8017edc:	2001      	movne	r0, #1
 8017ede:	4770      	bx	lr

08017ee0 <std_msgs__msg__Int64__fini>:
 8017ee0:	4770      	bx	lr
 8017ee2:	bf00      	nop

08017ee4 <builtin_interfaces__msg__Time__init>:
 8017ee4:	3800      	subs	r0, #0
 8017ee6:	bf18      	it	ne
 8017ee8:	2001      	movne	r0, #1
 8017eea:	4770      	bx	lr

08017eec <builtin_interfaces__msg__Time__fini>:
 8017eec:	4770      	bx	lr
 8017eee:	bf00      	nop

08017ef0 <ucdr_serialize_endian_array_char>:
 8017ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ef4:	4619      	mov	r1, r3
 8017ef6:	461f      	mov	r7, r3
 8017ef8:	4605      	mov	r5, r0
 8017efa:	4690      	mov	r8, r2
 8017efc:	f7fb f874 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8017f00:	b9e0      	cbnz	r0, 8017f3c <ucdr_serialize_endian_array_char+0x4c>
 8017f02:	463e      	mov	r6, r7
 8017f04:	e009      	b.n	8017f1a <ucdr_serialize_endian_array_char+0x2a>
 8017f06:	68a8      	ldr	r0, [r5, #8]
 8017f08:	f002 fc4e 	bl	801a7a8 <memcpy>
 8017f0c:	68ab      	ldr	r3, [r5, #8]
 8017f0e:	6928      	ldr	r0, [r5, #16]
 8017f10:	4423      	add	r3, r4
 8017f12:	4420      	add	r0, r4
 8017f14:	1b36      	subs	r6, r6, r4
 8017f16:	60ab      	str	r3, [r5, #8]
 8017f18:	6128      	str	r0, [r5, #16]
 8017f1a:	4631      	mov	r1, r6
 8017f1c:	2201      	movs	r2, #1
 8017f1e:	4628      	mov	r0, r5
 8017f20:	f7fb f8ea 	bl	80130f8 <ucdr_check_final_buffer_behavior_array>
 8017f24:	1bb9      	subs	r1, r7, r6
 8017f26:	4441      	add	r1, r8
 8017f28:	4604      	mov	r4, r0
 8017f2a:	4602      	mov	r2, r0
 8017f2c:	2800      	cmp	r0, #0
 8017f2e:	d1ea      	bne.n	8017f06 <ucdr_serialize_endian_array_char+0x16>
 8017f30:	2301      	movs	r3, #1
 8017f32:	7da8      	ldrb	r0, [r5, #22]
 8017f34:	756b      	strb	r3, [r5, #21]
 8017f36:	4058      	eors	r0, r3
 8017f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f3c:	463a      	mov	r2, r7
 8017f3e:	68a8      	ldr	r0, [r5, #8]
 8017f40:	4641      	mov	r1, r8
 8017f42:	f002 fc31 	bl	801a7a8 <memcpy>
 8017f46:	68aa      	ldr	r2, [r5, #8]
 8017f48:	692b      	ldr	r3, [r5, #16]
 8017f4a:	443a      	add	r2, r7
 8017f4c:	443b      	add	r3, r7
 8017f4e:	60aa      	str	r2, [r5, #8]
 8017f50:	612b      	str	r3, [r5, #16]
 8017f52:	e7ed      	b.n	8017f30 <ucdr_serialize_endian_array_char+0x40>

08017f54 <ucdr_deserialize_endian_array_char>:
 8017f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f58:	4619      	mov	r1, r3
 8017f5a:	461f      	mov	r7, r3
 8017f5c:	4605      	mov	r5, r0
 8017f5e:	4690      	mov	r8, r2
 8017f60:	f7fb f842 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8017f64:	b9e0      	cbnz	r0, 8017fa0 <ucdr_deserialize_endian_array_char+0x4c>
 8017f66:	463e      	mov	r6, r7
 8017f68:	e009      	b.n	8017f7e <ucdr_deserialize_endian_array_char+0x2a>
 8017f6a:	68a9      	ldr	r1, [r5, #8]
 8017f6c:	f002 fc1c 	bl	801a7a8 <memcpy>
 8017f70:	68ab      	ldr	r3, [r5, #8]
 8017f72:	6928      	ldr	r0, [r5, #16]
 8017f74:	4423      	add	r3, r4
 8017f76:	4420      	add	r0, r4
 8017f78:	1b36      	subs	r6, r6, r4
 8017f7a:	60ab      	str	r3, [r5, #8]
 8017f7c:	6128      	str	r0, [r5, #16]
 8017f7e:	2201      	movs	r2, #1
 8017f80:	4631      	mov	r1, r6
 8017f82:	4628      	mov	r0, r5
 8017f84:	f7fb f8b8 	bl	80130f8 <ucdr_check_final_buffer_behavior_array>
 8017f88:	4604      	mov	r4, r0
 8017f8a:	1bb8      	subs	r0, r7, r6
 8017f8c:	4440      	add	r0, r8
 8017f8e:	4622      	mov	r2, r4
 8017f90:	2c00      	cmp	r4, #0
 8017f92:	d1ea      	bne.n	8017f6a <ucdr_deserialize_endian_array_char+0x16>
 8017f94:	2301      	movs	r3, #1
 8017f96:	7da8      	ldrb	r0, [r5, #22]
 8017f98:	756b      	strb	r3, [r5, #21]
 8017f9a:	4058      	eors	r0, r3
 8017f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fa0:	463a      	mov	r2, r7
 8017fa2:	68a9      	ldr	r1, [r5, #8]
 8017fa4:	4640      	mov	r0, r8
 8017fa6:	f002 fbff 	bl	801a7a8 <memcpy>
 8017faa:	68aa      	ldr	r2, [r5, #8]
 8017fac:	692b      	ldr	r3, [r5, #16]
 8017fae:	443a      	add	r2, r7
 8017fb0:	443b      	add	r3, r7
 8017fb2:	60aa      	str	r2, [r5, #8]
 8017fb4:	612b      	str	r3, [r5, #16]
 8017fb6:	e7ed      	b.n	8017f94 <ucdr_deserialize_endian_array_char+0x40>

08017fb8 <ucdr_serialize_array_uint8_t>:
 8017fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fbc:	4688      	mov	r8, r1
 8017fbe:	4611      	mov	r1, r2
 8017fc0:	4617      	mov	r7, r2
 8017fc2:	4605      	mov	r5, r0
 8017fc4:	f7fb f810 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8017fc8:	b9e0      	cbnz	r0, 8018004 <ucdr_serialize_array_uint8_t+0x4c>
 8017fca:	463e      	mov	r6, r7
 8017fcc:	e009      	b.n	8017fe2 <ucdr_serialize_array_uint8_t+0x2a>
 8017fce:	68a8      	ldr	r0, [r5, #8]
 8017fd0:	f002 fbea 	bl	801a7a8 <memcpy>
 8017fd4:	68aa      	ldr	r2, [r5, #8]
 8017fd6:	692b      	ldr	r3, [r5, #16]
 8017fd8:	4422      	add	r2, r4
 8017fda:	4423      	add	r3, r4
 8017fdc:	1b36      	subs	r6, r6, r4
 8017fde:	60aa      	str	r2, [r5, #8]
 8017fe0:	612b      	str	r3, [r5, #16]
 8017fe2:	4631      	mov	r1, r6
 8017fe4:	2201      	movs	r2, #1
 8017fe6:	4628      	mov	r0, r5
 8017fe8:	f7fb f886 	bl	80130f8 <ucdr_check_final_buffer_behavior_array>
 8017fec:	1bb9      	subs	r1, r7, r6
 8017fee:	4441      	add	r1, r8
 8017ff0:	4604      	mov	r4, r0
 8017ff2:	4602      	mov	r2, r0
 8017ff4:	2800      	cmp	r0, #0
 8017ff6:	d1ea      	bne.n	8017fce <ucdr_serialize_array_uint8_t+0x16>
 8017ff8:	2301      	movs	r3, #1
 8017ffa:	7da8      	ldrb	r0, [r5, #22]
 8017ffc:	756b      	strb	r3, [r5, #21]
 8017ffe:	4058      	eors	r0, r3
 8018000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018004:	463a      	mov	r2, r7
 8018006:	68a8      	ldr	r0, [r5, #8]
 8018008:	4641      	mov	r1, r8
 801800a:	f002 fbcd 	bl	801a7a8 <memcpy>
 801800e:	68aa      	ldr	r2, [r5, #8]
 8018010:	692b      	ldr	r3, [r5, #16]
 8018012:	443a      	add	r2, r7
 8018014:	443b      	add	r3, r7
 8018016:	60aa      	str	r2, [r5, #8]
 8018018:	612b      	str	r3, [r5, #16]
 801801a:	e7ed      	b.n	8017ff8 <ucdr_serialize_array_uint8_t+0x40>

0801801c <ucdr_serialize_endian_array_uint8_t>:
 801801c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018020:	4619      	mov	r1, r3
 8018022:	461f      	mov	r7, r3
 8018024:	4605      	mov	r5, r0
 8018026:	4690      	mov	r8, r2
 8018028:	f7fa ffde 	bl	8012fe8 <ucdr_check_buffer_available_for>
 801802c:	b9e0      	cbnz	r0, 8018068 <ucdr_serialize_endian_array_uint8_t+0x4c>
 801802e:	463e      	mov	r6, r7
 8018030:	e009      	b.n	8018046 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8018032:	68a8      	ldr	r0, [r5, #8]
 8018034:	f002 fbb8 	bl	801a7a8 <memcpy>
 8018038:	68ab      	ldr	r3, [r5, #8]
 801803a:	6928      	ldr	r0, [r5, #16]
 801803c:	4423      	add	r3, r4
 801803e:	4420      	add	r0, r4
 8018040:	1b36      	subs	r6, r6, r4
 8018042:	60ab      	str	r3, [r5, #8]
 8018044:	6128      	str	r0, [r5, #16]
 8018046:	4631      	mov	r1, r6
 8018048:	2201      	movs	r2, #1
 801804a:	4628      	mov	r0, r5
 801804c:	f7fb f854 	bl	80130f8 <ucdr_check_final_buffer_behavior_array>
 8018050:	1bb9      	subs	r1, r7, r6
 8018052:	4441      	add	r1, r8
 8018054:	4604      	mov	r4, r0
 8018056:	4602      	mov	r2, r0
 8018058:	2800      	cmp	r0, #0
 801805a:	d1ea      	bne.n	8018032 <ucdr_serialize_endian_array_uint8_t+0x16>
 801805c:	2301      	movs	r3, #1
 801805e:	7da8      	ldrb	r0, [r5, #22]
 8018060:	756b      	strb	r3, [r5, #21]
 8018062:	4058      	eors	r0, r3
 8018064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018068:	463a      	mov	r2, r7
 801806a:	68a8      	ldr	r0, [r5, #8]
 801806c:	4641      	mov	r1, r8
 801806e:	f002 fb9b 	bl	801a7a8 <memcpy>
 8018072:	68aa      	ldr	r2, [r5, #8]
 8018074:	692b      	ldr	r3, [r5, #16]
 8018076:	443a      	add	r2, r7
 8018078:	443b      	add	r3, r7
 801807a:	60aa      	str	r2, [r5, #8]
 801807c:	612b      	str	r3, [r5, #16]
 801807e:	e7ed      	b.n	801805c <ucdr_serialize_endian_array_uint8_t+0x40>

08018080 <ucdr_deserialize_array_uint8_t>:
 8018080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018084:	4688      	mov	r8, r1
 8018086:	4611      	mov	r1, r2
 8018088:	4617      	mov	r7, r2
 801808a:	4605      	mov	r5, r0
 801808c:	f7fa ffac 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8018090:	b9e0      	cbnz	r0, 80180cc <ucdr_deserialize_array_uint8_t+0x4c>
 8018092:	463e      	mov	r6, r7
 8018094:	e009      	b.n	80180aa <ucdr_deserialize_array_uint8_t+0x2a>
 8018096:	68a9      	ldr	r1, [r5, #8]
 8018098:	f002 fb86 	bl	801a7a8 <memcpy>
 801809c:	68aa      	ldr	r2, [r5, #8]
 801809e:	692b      	ldr	r3, [r5, #16]
 80180a0:	4422      	add	r2, r4
 80180a2:	4423      	add	r3, r4
 80180a4:	1b36      	subs	r6, r6, r4
 80180a6:	60aa      	str	r2, [r5, #8]
 80180a8:	612b      	str	r3, [r5, #16]
 80180aa:	2201      	movs	r2, #1
 80180ac:	4631      	mov	r1, r6
 80180ae:	4628      	mov	r0, r5
 80180b0:	f7fb f822 	bl	80130f8 <ucdr_check_final_buffer_behavior_array>
 80180b4:	4604      	mov	r4, r0
 80180b6:	1bb8      	subs	r0, r7, r6
 80180b8:	4440      	add	r0, r8
 80180ba:	4622      	mov	r2, r4
 80180bc:	2c00      	cmp	r4, #0
 80180be:	d1ea      	bne.n	8018096 <ucdr_deserialize_array_uint8_t+0x16>
 80180c0:	2301      	movs	r3, #1
 80180c2:	7da8      	ldrb	r0, [r5, #22]
 80180c4:	756b      	strb	r3, [r5, #21]
 80180c6:	4058      	eors	r0, r3
 80180c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180cc:	463a      	mov	r2, r7
 80180ce:	68a9      	ldr	r1, [r5, #8]
 80180d0:	4640      	mov	r0, r8
 80180d2:	f002 fb69 	bl	801a7a8 <memcpy>
 80180d6:	68aa      	ldr	r2, [r5, #8]
 80180d8:	692b      	ldr	r3, [r5, #16]
 80180da:	443a      	add	r2, r7
 80180dc:	443b      	add	r3, r7
 80180de:	60aa      	str	r2, [r5, #8]
 80180e0:	612b      	str	r3, [r5, #16]
 80180e2:	e7ed      	b.n	80180c0 <ucdr_deserialize_array_uint8_t+0x40>

080180e4 <ucdr_deserialize_endian_array_uint8_t>:
 80180e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180e8:	4619      	mov	r1, r3
 80180ea:	461f      	mov	r7, r3
 80180ec:	4605      	mov	r5, r0
 80180ee:	4690      	mov	r8, r2
 80180f0:	f7fa ff7a 	bl	8012fe8 <ucdr_check_buffer_available_for>
 80180f4:	b9e0      	cbnz	r0, 8018130 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80180f6:	463e      	mov	r6, r7
 80180f8:	e009      	b.n	801810e <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80180fa:	68a9      	ldr	r1, [r5, #8]
 80180fc:	f002 fb54 	bl	801a7a8 <memcpy>
 8018100:	68ab      	ldr	r3, [r5, #8]
 8018102:	6928      	ldr	r0, [r5, #16]
 8018104:	4423      	add	r3, r4
 8018106:	4420      	add	r0, r4
 8018108:	1b36      	subs	r6, r6, r4
 801810a:	60ab      	str	r3, [r5, #8]
 801810c:	6128      	str	r0, [r5, #16]
 801810e:	2201      	movs	r2, #1
 8018110:	4631      	mov	r1, r6
 8018112:	4628      	mov	r0, r5
 8018114:	f7fa fff0 	bl	80130f8 <ucdr_check_final_buffer_behavior_array>
 8018118:	4604      	mov	r4, r0
 801811a:	1bb8      	subs	r0, r7, r6
 801811c:	4440      	add	r0, r8
 801811e:	4622      	mov	r2, r4
 8018120:	2c00      	cmp	r4, #0
 8018122:	d1ea      	bne.n	80180fa <ucdr_deserialize_endian_array_uint8_t+0x16>
 8018124:	2301      	movs	r3, #1
 8018126:	7da8      	ldrb	r0, [r5, #22]
 8018128:	756b      	strb	r3, [r5, #21]
 801812a:	4058      	eors	r0, r3
 801812c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018130:	463a      	mov	r2, r7
 8018132:	68a9      	ldr	r1, [r5, #8]
 8018134:	4640      	mov	r0, r8
 8018136:	f002 fb37 	bl	801a7a8 <memcpy>
 801813a:	68aa      	ldr	r2, [r5, #8]
 801813c:	692b      	ldr	r3, [r5, #16]
 801813e:	443a      	add	r2, r7
 8018140:	443b      	add	r3, r7
 8018142:	60aa      	str	r2, [r5, #8]
 8018144:	612b      	str	r3, [r5, #16]
 8018146:	e7ed      	b.n	8018124 <ucdr_deserialize_endian_array_uint8_t+0x40>

08018148 <ucdr_serialize_endian_array_float>:
 8018148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801814c:	4688      	mov	r8, r1
 801814e:	2104      	movs	r1, #4
 8018150:	4604      	mov	r4, r0
 8018152:	4616      	mov	r6, r2
 8018154:	461f      	mov	r7, r3
 8018156:	f7fa ffa7 	bl	80130a8 <ucdr_buffer_alignment>
 801815a:	4601      	mov	r1, r0
 801815c:	4620      	mov	r0, r4
 801815e:	7d65      	ldrb	r5, [r4, #21]
 8018160:	f7fa ffe6 	bl	8013130 <ucdr_advance_buffer>
 8018164:	f1b8 0f01 	cmp.w	r8, #1
 8018168:	7565      	strb	r5, [r4, #21]
 801816a:	d00f      	beq.n	801818c <ucdr_serialize_endian_array_float+0x44>
 801816c:	2500      	movs	r5, #0
 801816e:	b147      	cbz	r7, 8018182 <ucdr_serialize_endian_array_float+0x3a>
 8018170:	ecb6 0a01 	vldmia	r6!, {s0}
 8018174:	4641      	mov	r1, r8
 8018176:	4620      	mov	r0, r4
 8018178:	3501      	adds	r5, #1
 801817a:	f7fa fbdf 	bl	801293c <ucdr_serialize_endian_float>
 801817e:	42af      	cmp	r7, r5
 8018180:	d1f6      	bne.n	8018170 <ucdr_serialize_endian_array_float+0x28>
 8018182:	7da0      	ldrb	r0, [r4, #22]
 8018184:	f080 0001 	eor.w	r0, r0, #1
 8018188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801818c:	00bf      	lsls	r7, r7, #2
 801818e:	4639      	mov	r1, r7
 8018190:	4620      	mov	r0, r4
 8018192:	f7fa ff29 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8018196:	b9f8      	cbnz	r0, 80181d8 <ucdr_serialize_endian_array_float+0x90>
 8018198:	46b8      	mov	r8, r7
 801819a:	e00a      	b.n	80181b2 <ucdr_serialize_endian_array_float+0x6a>
 801819c:	68a0      	ldr	r0, [r4, #8]
 801819e:	f002 fb03 	bl	801a7a8 <memcpy>
 80181a2:	68a2      	ldr	r2, [r4, #8]
 80181a4:	6923      	ldr	r3, [r4, #16]
 80181a6:	442a      	add	r2, r5
 80181a8:	442b      	add	r3, r5
 80181aa:	eba8 0805 	sub.w	r8, r8, r5
 80181ae:	60a2      	str	r2, [r4, #8]
 80181b0:	6123      	str	r3, [r4, #16]
 80181b2:	4641      	mov	r1, r8
 80181b4:	2204      	movs	r2, #4
 80181b6:	4620      	mov	r0, r4
 80181b8:	f7fa ff9e 	bl	80130f8 <ucdr_check_final_buffer_behavior_array>
 80181bc:	eba7 0108 	sub.w	r1, r7, r8
 80181c0:	4431      	add	r1, r6
 80181c2:	4605      	mov	r5, r0
 80181c4:	4602      	mov	r2, r0
 80181c6:	2800      	cmp	r0, #0
 80181c8:	d1e8      	bne.n	801819c <ucdr_serialize_endian_array_float+0x54>
 80181ca:	7da0      	ldrb	r0, [r4, #22]
 80181cc:	2304      	movs	r3, #4
 80181ce:	7563      	strb	r3, [r4, #21]
 80181d0:	f080 0001 	eor.w	r0, r0, #1
 80181d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181d8:	463a      	mov	r2, r7
 80181da:	68a0      	ldr	r0, [r4, #8]
 80181dc:	4631      	mov	r1, r6
 80181de:	f002 fae3 	bl	801a7a8 <memcpy>
 80181e2:	68a2      	ldr	r2, [r4, #8]
 80181e4:	6923      	ldr	r3, [r4, #16]
 80181e6:	443a      	add	r2, r7
 80181e8:	441f      	add	r7, r3
 80181ea:	60a2      	str	r2, [r4, #8]
 80181ec:	6127      	str	r7, [r4, #16]
 80181ee:	e7ec      	b.n	80181ca <ucdr_serialize_endian_array_float+0x82>

080181f0 <ucdr_deserialize_endian_array_float>:
 80181f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181f4:	4688      	mov	r8, r1
 80181f6:	2104      	movs	r1, #4
 80181f8:	4605      	mov	r5, r0
 80181fa:	4614      	mov	r4, r2
 80181fc:	461f      	mov	r7, r3
 80181fe:	f7fa ff53 	bl	80130a8 <ucdr_buffer_alignment>
 8018202:	4601      	mov	r1, r0
 8018204:	4628      	mov	r0, r5
 8018206:	7d6e      	ldrb	r6, [r5, #21]
 8018208:	f7fa ff92 	bl	8013130 <ucdr_advance_buffer>
 801820c:	f1b8 0f01 	cmp.w	r8, #1
 8018210:	756e      	strb	r6, [r5, #21]
 8018212:	d010      	beq.n	8018236 <ucdr_deserialize_endian_array_float+0x46>
 8018214:	2600      	movs	r6, #0
 8018216:	b14f      	cbz	r7, 801822c <ucdr_deserialize_endian_array_float+0x3c>
 8018218:	4622      	mov	r2, r4
 801821a:	4641      	mov	r1, r8
 801821c:	4628      	mov	r0, r5
 801821e:	3601      	adds	r6, #1
 8018220:	f7fa fcb6 	bl	8012b90 <ucdr_deserialize_endian_float>
 8018224:	42b7      	cmp	r7, r6
 8018226:	f104 0404 	add.w	r4, r4, #4
 801822a:	d1f5      	bne.n	8018218 <ucdr_deserialize_endian_array_float+0x28>
 801822c:	7da8      	ldrb	r0, [r5, #22]
 801822e:	f080 0001 	eor.w	r0, r0, #1
 8018232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018236:	00bf      	lsls	r7, r7, #2
 8018238:	4639      	mov	r1, r7
 801823a:	4628      	mov	r0, r5
 801823c:	f7fa fed4 	bl	8012fe8 <ucdr_check_buffer_available_for>
 8018240:	b9f8      	cbnz	r0, 8018282 <ucdr_deserialize_endian_array_float+0x92>
 8018242:	46b8      	mov	r8, r7
 8018244:	e00a      	b.n	801825c <ucdr_deserialize_endian_array_float+0x6c>
 8018246:	68a9      	ldr	r1, [r5, #8]
 8018248:	f002 faae 	bl	801a7a8 <memcpy>
 801824c:	68aa      	ldr	r2, [r5, #8]
 801824e:	692b      	ldr	r3, [r5, #16]
 8018250:	4432      	add	r2, r6
 8018252:	4433      	add	r3, r6
 8018254:	eba8 0806 	sub.w	r8, r8, r6
 8018258:	60aa      	str	r2, [r5, #8]
 801825a:	612b      	str	r3, [r5, #16]
 801825c:	2204      	movs	r2, #4
 801825e:	4641      	mov	r1, r8
 8018260:	4628      	mov	r0, r5
 8018262:	f7fa ff49 	bl	80130f8 <ucdr_check_final_buffer_behavior_array>
 8018266:	4606      	mov	r6, r0
 8018268:	eba7 0008 	sub.w	r0, r7, r8
 801826c:	4420      	add	r0, r4
 801826e:	4632      	mov	r2, r6
 8018270:	2e00      	cmp	r6, #0
 8018272:	d1e8      	bne.n	8018246 <ucdr_deserialize_endian_array_float+0x56>
 8018274:	7da8      	ldrb	r0, [r5, #22]
 8018276:	2304      	movs	r3, #4
 8018278:	756b      	strb	r3, [r5, #21]
 801827a:	f080 0001 	eor.w	r0, r0, #1
 801827e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018282:	463a      	mov	r2, r7
 8018284:	68a9      	ldr	r1, [r5, #8]
 8018286:	4620      	mov	r0, r4
 8018288:	f002 fa8e 	bl	801a7a8 <memcpy>
 801828c:	68aa      	ldr	r2, [r5, #8]
 801828e:	692b      	ldr	r3, [r5, #16]
 8018290:	443a      	add	r2, r7
 8018292:	441f      	add	r7, r3
 8018294:	60aa      	str	r2, [r5, #8]
 8018296:	612f      	str	r7, [r5, #16]
 8018298:	e7ec      	b.n	8018274 <ucdr_deserialize_endian_array_float+0x84>
 801829a:	bf00      	nop

0801829c <ucdr_serialize_string>:
 801829c:	b510      	push	{r4, lr}
 801829e:	b082      	sub	sp, #8
 80182a0:	4604      	mov	r4, r0
 80182a2:	4608      	mov	r0, r1
 80182a4:	9101      	str	r1, [sp, #4]
 80182a6:	f7e7 ff9d 	bl	80001e4 <strlen>
 80182aa:	9901      	ldr	r1, [sp, #4]
 80182ac:	1c42      	adds	r2, r0, #1
 80182ae:	4620      	mov	r0, r4
 80182b0:	b002      	add	sp, #8
 80182b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182b6:	f7fa bf5b 	b.w	8013170 <ucdr_serialize_sequence_char>
 80182ba:	bf00      	nop

080182bc <ucdr_deserialize_string>:
 80182bc:	b500      	push	{lr}
 80182be:	b083      	sub	sp, #12
 80182c0:	ab01      	add	r3, sp, #4
 80182c2:	f7fa ff67 	bl	8013194 <ucdr_deserialize_sequence_char>
 80182c6:	b003      	add	sp, #12
 80182c8:	f85d fb04 	ldr.w	pc, [sp], #4

080182cc <get_custom_error>:
 80182cc:	4b01      	ldr	r3, [pc, #4]	; (80182d4 <get_custom_error+0x8>)
 80182ce:	7818      	ldrb	r0, [r3, #0]
 80182d0:	4770      	bx	lr
 80182d2:	bf00      	nop
 80182d4:	20015ce0 	.word	0x20015ce0

080182d8 <recv_custom_msg>:
 80182d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182dc:	4693      	mov	fp, r2
 80182de:	b089      	sub	sp, #36	; 0x24
 80182e0:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 80182e4:	9305      	str	r3, [sp, #20]
 80182e6:	468a      	mov	sl, r1
 80182e8:	2100      	movs	r1, #0
 80182ea:	4604      	mov	r4, r0
 80182ec:	f88d 101e 	strb.w	r1, [sp, #30]
 80182f0:	b322      	cbz	r2, 801833c <recv_custom_msg+0x64>
 80182f2:	f200 2902 	addw	r9, r0, #514	; 0x202
 80182f6:	f10d 081f 	add.w	r8, sp, #31
 80182fa:	af05      	add	r7, sp, #20
 80182fc:	f10d 061e 	add.w	r6, sp, #30
 8018300:	f44f 7500 	mov.w	r5, #512	; 0x200
 8018304:	e002      	b.n	801830c <recv_custom_msg+0x34>
 8018306:	9b05      	ldr	r3, [sp, #20]
 8018308:	2b00      	cmp	r3, #0
 801830a:	dd0f      	ble.n	801832c <recv_custom_msg+0x54>
 801830c:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8018310:	4623      	mov	r3, r4
 8018312:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8018316:	e9cd 5600 	strd	r5, r6, [sp]
 801831a:	4622      	mov	r2, r4
 801831c:	4648      	mov	r0, r9
 801831e:	f001 f8e1 	bl	80194e4 <uxr_read_framed_msg>
 8018322:	2800      	cmp	r0, #0
 8018324:	d0ef      	beq.n	8018306 <recv_custom_msg+0x2e>
 8018326:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801832a:	b1b3      	cbz	r3, 801835a <recv_custom_msg+0x82>
 801832c:	4b0f      	ldr	r3, [pc, #60]	; (801836c <recv_custom_msg+0x94>)
 801832e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8018332:	701a      	strb	r2, [r3, #0]
 8018334:	2000      	movs	r0, #0
 8018336:	b009      	add	sp, #36	; 0x24
 8018338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801833c:	f10d 021f 	add.w	r2, sp, #31
 8018340:	9200      	str	r2, [sp, #0]
 8018342:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8018346:	f44f 7200 	mov.w	r2, #512	; 0x200
 801834a:	4601      	mov	r1, r0
 801834c:	47a8      	blx	r5
 801834e:	2800      	cmp	r0, #0
 8018350:	d0ec      	beq.n	801832c <recv_custom_msg+0x54>
 8018352:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8018356:	2b00      	cmp	r3, #0
 8018358:	d1e8      	bne.n	801832c <recv_custom_msg+0x54>
 801835a:	f8cb 0000 	str.w	r0, [fp]
 801835e:	2001      	movs	r0, #1
 8018360:	f8ca 4000 	str.w	r4, [sl]
 8018364:	b009      	add	sp, #36	; 0x24
 8018366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801836a:	bf00      	nop
 801836c:	20015ce0 	.word	0x20015ce0

08018370 <send_custom_msg>:
 8018370:	b530      	push	{r4, r5, lr}
 8018372:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 8018376:	b087      	sub	sp, #28
 8018378:	4615      	mov	r5, r2
 801837a:	b974      	cbnz	r4, 801839a <send_custom_msg+0x2a>
 801837c:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8018380:	f10d 0317 	add.w	r3, sp, #23
 8018384:	47a0      	blx	r4
 8018386:	b108      	cbz	r0, 801838c <send_custom_msg+0x1c>
 8018388:	42a8      	cmp	r0, r5
 801838a:	d015      	beq.n	80183b8 <send_custom_msg+0x48>
 801838c:	4b0c      	ldr	r3, [pc, #48]	; (80183c0 <send_custom_msg+0x50>)
 801838e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8018392:	701a      	strb	r2, [r3, #0]
 8018394:	2000      	movs	r0, #0
 8018396:	b007      	add	sp, #28
 8018398:	bd30      	pop	{r4, r5, pc}
 801839a:	460b      	mov	r3, r1
 801839c:	2200      	movs	r2, #0
 801839e:	f10d 0117 	add.w	r1, sp, #23
 80183a2:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80183a6:	4602      	mov	r2, r0
 80183a8:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 80183ac:	9500      	str	r5, [sp, #0]
 80183ae:	f200 2002 	addw	r0, r0, #514	; 0x202
 80183b2:	f000 fe9f 	bl	80190f4 <uxr_write_framed_msg>
 80183b6:	e7e6      	b.n	8018386 <send_custom_msg+0x16>
 80183b8:	2001      	movs	r0, #1
 80183ba:	b007      	add	sp, #28
 80183bc:	bd30      	pop	{r4, r5, pc}
 80183be:	bf00      	nop
 80183c0:	20015ce0 	.word	0x20015ce0

080183c4 <uxr_set_custom_transport_callbacks>:
 80183c4:	b410      	push	{r4}
 80183c6:	9c01      	ldr	r4, [sp, #4]
 80183c8:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 80183cc:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 80183d0:	9b02      	ldr	r3, [sp, #8]
 80183d2:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 80183d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183da:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 80183de:	4770      	bx	lr

080183e0 <uxr_init_custom_transport>:
 80183e0:	b538      	push	{r3, r4, r5, lr}
 80183e2:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 80183e6:	b303      	cbz	r3, 801842a <uxr_init_custom_transport+0x4a>
 80183e8:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80183ec:	4604      	mov	r4, r0
 80183ee:	b1e2      	cbz	r2, 801842a <uxr_init_custom_transport+0x4a>
 80183f0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80183f4:	b1ca      	cbz	r2, 801842a <uxr_init_custom_transport+0x4a>
 80183f6:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 80183fa:	b1b2      	cbz	r2, 801842a <uxr_init_custom_transport+0x4a>
 80183fc:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8018400:	4798      	blx	r3
 8018402:	4605      	mov	r5, r0
 8018404:	b188      	cbz	r0, 801842a <uxr_init_custom_transport+0x4a>
 8018406:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801840a:	b98b      	cbnz	r3, 8018430 <uxr_init_custom_transport+0x50>
 801840c:	490b      	ldr	r1, [pc, #44]	; (801843c <uxr_init_custom_transport+0x5c>)
 801840e:	4b0c      	ldr	r3, [pc, #48]	; (8018440 <uxr_init_custom_transport+0x60>)
 8018410:	4a0c      	ldr	r2, [pc, #48]	; (8018444 <uxr_init_custom_transport+0x64>)
 8018412:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8018416:	f44f 7300 	mov.w	r3, #512	; 0x200
 801841a:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 801841e:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8018422:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8018426:	4628      	mov	r0, r5
 8018428:	bd38      	pop	{r3, r4, r5, pc}
 801842a:	2500      	movs	r5, #0
 801842c:	4628      	mov	r0, r5
 801842e:	bd38      	pop	{r3, r4, r5, pc}
 8018430:	2100      	movs	r1, #0
 8018432:	f204 2002 	addw	r0, r4, #514	; 0x202
 8018436:	f000 fe57 	bl	80190e8 <uxr_init_framing_io>
 801843a:	e7e7      	b.n	801840c <uxr_init_custom_transport+0x2c>
 801843c:	08018371 	.word	0x08018371
 8018440:	080182d9 	.word	0x080182d9
 8018444:	080182cd 	.word	0x080182cd

08018448 <uxr_close_custom_transport>:
 8018448:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 801844c:	4718      	bx	r3
 801844e:	bf00      	nop

08018450 <uxr_init_input_best_effort_stream>:
 8018450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018454:	8003      	strh	r3, [r0, #0]
 8018456:	4770      	bx	lr

08018458 <uxr_reset_input_best_effort_stream>:
 8018458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801845c:	8003      	strh	r3, [r0, #0]
 801845e:	4770      	bx	lr

08018460 <uxr_receive_best_effort_message>:
 8018460:	b538      	push	{r3, r4, r5, lr}
 8018462:	4604      	mov	r4, r0
 8018464:	8800      	ldrh	r0, [r0, #0]
 8018466:	460d      	mov	r5, r1
 8018468:	f000 fe26 	bl	80190b8 <uxr_seq_num_cmp>
 801846c:	4603      	mov	r3, r0
 801846e:	2b00      	cmp	r3, #0
 8018470:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8018474:	bfb8      	it	lt
 8018476:	8025      	strhlt	r5, [r4, #0]
 8018478:	bd38      	pop	{r3, r4, r5, pc}
 801847a:	bf00      	nop

0801847c <on_full_input_buffer>:
 801847c:	b570      	push	{r4, r5, r6, lr}
 801847e:	4605      	mov	r5, r0
 8018480:	460c      	mov	r4, r1
 8018482:	682b      	ldr	r3, [r5, #0]
 8018484:	6809      	ldr	r1, [r1, #0]
 8018486:	8920      	ldrh	r0, [r4, #8]
 8018488:	6862      	ldr	r2, [r4, #4]
 801848a:	fbb2 f2f0 	udiv	r2, r2, r0
 801848e:	eba3 0c01 	sub.w	ip, r3, r1
 8018492:	fbbc fcf2 	udiv	ip, ip, r2
 8018496:	f10c 0c01 	add.w	ip, ip, #1
 801849a:	fa1f f38c 	uxth.w	r3, ip
 801849e:	fbb3 f6f0 	udiv	r6, r3, r0
 80184a2:	fb00 3316 	mls	r3, r0, r6, r3
 80184a6:	b29b      	uxth	r3, r3
 80184a8:	fb02 f303 	mul.w	r3, r2, r3
 80184ac:	1d18      	adds	r0, r3, #4
 80184ae:	4408      	add	r0, r1
 80184b0:	7d26      	ldrb	r6, [r4, #20]
 80184b2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80184b6:	b116      	cbz	r6, 80184be <on_full_input_buffer+0x42>
 80184b8:	2600      	movs	r6, #0
 80184ba:	f840 6c04 	str.w	r6, [r0, #-4]
 80184be:	2a03      	cmp	r2, #3
 80184c0:	d801      	bhi.n	80184c6 <on_full_input_buffer+0x4a>
 80184c2:	2001      	movs	r0, #1
 80184c4:	bd70      	pop	{r4, r5, r6, pc}
 80184c6:	3308      	adds	r3, #8
 80184c8:	4419      	add	r1, r3
 80184ca:	4628      	mov	r0, r5
 80184cc:	692b      	ldr	r3, [r5, #16]
 80184ce:	3a04      	subs	r2, #4
 80184d0:	f7fa fdd6 	bl	8013080 <ucdr_init_buffer_origin>
 80184d4:	4628      	mov	r0, r5
 80184d6:	4903      	ldr	r1, [pc, #12]	; (80184e4 <on_full_input_buffer+0x68>)
 80184d8:	4622      	mov	r2, r4
 80184da:	f7fa fdad 	bl	8013038 <ucdr_set_on_full_buffer_callback>
 80184de:	2000      	movs	r0, #0
 80184e0:	bd70      	pop	{r4, r5, r6, pc}
 80184e2:	bf00      	nop
 80184e4:	0801847d 	.word	0x0801847d

080184e8 <uxr_init_input_reliable_stream>:
 80184e8:	b500      	push	{lr}
 80184ea:	e9c0 1200 	strd	r1, r2, [r0]
 80184ee:	f04f 0e00 	mov.w	lr, #0
 80184f2:	9a01      	ldr	r2, [sp, #4]
 80184f4:	8103      	strh	r3, [r0, #8]
 80184f6:	6102      	str	r2, [r0, #16]
 80184f8:	f880 e014 	strb.w	lr, [r0, #20]
 80184fc:	b1d3      	cbz	r3, 8018534 <uxr_init_input_reliable_stream+0x4c>
 80184fe:	f8c1 e000 	str.w	lr, [r1]
 8018502:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018506:	f1bc 0f01 	cmp.w	ip, #1
 801850a:	d913      	bls.n	8018534 <uxr_init_input_reliable_stream+0x4c>
 801850c:	2301      	movs	r3, #1
 801850e:	fbb3 f1fc 	udiv	r1, r3, ip
 8018512:	fb0c 3111 	mls	r1, ip, r1, r3
 8018516:	b289      	uxth	r1, r1
 8018518:	6842      	ldr	r2, [r0, #4]
 801851a:	fbb2 f2fc 	udiv	r2, r2, ip
 801851e:	fb01 f202 	mul.w	r2, r1, r2
 8018522:	6801      	ldr	r1, [r0, #0]
 8018524:	f841 e002 	str.w	lr, [r1, r2]
 8018528:	3301      	adds	r3, #1
 801852a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801852e:	b29b      	uxth	r3, r3
 8018530:	459c      	cmp	ip, r3
 8018532:	d8ec      	bhi.n	801850e <uxr_init_input_reliable_stream+0x26>
 8018534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018538:	60c3      	str	r3, [r0, #12]
 801853a:	f85d fb04 	ldr.w	pc, [sp], #4
 801853e:	bf00      	nop

08018540 <uxr_reset_input_reliable_stream>:
 8018540:	8901      	ldrh	r1, [r0, #8]
 8018542:	b1e9      	cbz	r1, 8018580 <uxr_reset_input_reliable_stream+0x40>
 8018544:	f04f 0c00 	mov.w	ip, #0
 8018548:	b500      	push	{lr}
 801854a:	4663      	mov	r3, ip
 801854c:	46e6      	mov	lr, ip
 801854e:	fbb3 f2f1 	udiv	r2, r3, r1
 8018552:	fb01 3312 	mls	r3, r1, r2, r3
 8018556:	b29b      	uxth	r3, r3
 8018558:	6842      	ldr	r2, [r0, #4]
 801855a:	fbb2 f2f1 	udiv	r2, r2, r1
 801855e:	fb02 f303 	mul.w	r3, r2, r3
 8018562:	6802      	ldr	r2, [r0, #0]
 8018564:	f842 e003 	str.w	lr, [r2, r3]
 8018568:	f10c 0c01 	add.w	ip, ip, #1
 801856c:	8901      	ldrh	r1, [r0, #8]
 801856e:	fa1f f38c 	uxth.w	r3, ip
 8018572:	4299      	cmp	r1, r3
 8018574:	d8eb      	bhi.n	801854e <uxr_reset_input_reliable_stream+0xe>
 8018576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801857a:	60c3      	str	r3, [r0, #12]
 801857c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018580:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018584:	60c3      	str	r3, [r0, #12]
 8018586:	4770      	bx	lr

08018588 <uxr_receive_reliable_message>:
 8018588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801858c:	4604      	mov	r4, r0
 801858e:	460d      	mov	r5, r1
 8018590:	8901      	ldrh	r1, [r0, #8]
 8018592:	8980      	ldrh	r0, [r0, #12]
 8018594:	4690      	mov	r8, r2
 8018596:	461f      	mov	r7, r3
 8018598:	f000 fd86 	bl	80190a8 <uxr_seq_num_add>
 801859c:	4629      	mov	r1, r5
 801859e:	4606      	mov	r6, r0
 80185a0:	89a0      	ldrh	r0, [r4, #12]
 80185a2:	f000 fd89 	bl	80190b8 <uxr_seq_num_cmp>
 80185a6:	2800      	cmp	r0, #0
 80185a8:	db0a      	blt.n	80185c0 <uxr_receive_reliable_message+0x38>
 80185aa:	2600      	movs	r6, #0
 80185ac:	89e0      	ldrh	r0, [r4, #14]
 80185ae:	4629      	mov	r1, r5
 80185b0:	f000 fd82 	bl	80190b8 <uxr_seq_num_cmp>
 80185b4:	2800      	cmp	r0, #0
 80185b6:	da00      	bge.n	80185ba <uxr_receive_reliable_message+0x32>
 80185b8:	81e5      	strh	r5, [r4, #14]
 80185ba:	4630      	mov	r0, r6
 80185bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185c0:	4630      	mov	r0, r6
 80185c2:	4629      	mov	r1, r5
 80185c4:	f000 fd78 	bl	80190b8 <uxr_seq_num_cmp>
 80185c8:	2800      	cmp	r0, #0
 80185ca:	dbee      	blt.n	80185aa <uxr_receive_reliable_message+0x22>
 80185cc:	6923      	ldr	r3, [r4, #16]
 80185ce:	4640      	mov	r0, r8
 80185d0:	4798      	blx	r3
 80185d2:	2101      	movs	r1, #1
 80185d4:	4681      	mov	r9, r0
 80185d6:	89a0      	ldrh	r0, [r4, #12]
 80185d8:	f000 fd66 	bl	80190a8 <uxr_seq_num_add>
 80185dc:	f1b9 0f00 	cmp.w	r9, #0
 80185e0:	d101      	bne.n	80185e6 <uxr_receive_reliable_message+0x5e>
 80185e2:	4285      	cmp	r5, r0
 80185e4:	d047      	beq.n	8018676 <uxr_receive_reliable_message+0xee>
 80185e6:	8922      	ldrh	r2, [r4, #8]
 80185e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80185ec:	fb02 5010 	mls	r0, r2, r0, r5
 80185f0:	b280      	uxth	r0, r0
 80185f2:	6863      	ldr	r3, [r4, #4]
 80185f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80185f8:	fb00 f303 	mul.w	r3, r0, r3
 80185fc:	6820      	ldr	r0, [r4, #0]
 80185fe:	3304      	adds	r3, #4
 8018600:	4418      	add	r0, r3
 8018602:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d1cf      	bne.n	80185aa <uxr_receive_reliable_message+0x22>
 801860a:	4641      	mov	r1, r8
 801860c:	463a      	mov	r2, r7
 801860e:	f002 f8cb 	bl	801a7a8 <memcpy>
 8018612:	8921      	ldrh	r1, [r4, #8]
 8018614:	fbb5 f2f1 	udiv	r2, r5, r1
 8018618:	fb01 5212 	mls	r2, r1, r2, r5
 801861c:	b292      	uxth	r2, r2
 801861e:	6863      	ldr	r3, [r4, #4]
 8018620:	fbb3 f3f1 	udiv	r3, r3, r1
 8018624:	fb02 f303 	mul.w	r3, r2, r3
 8018628:	6822      	ldr	r2, [r4, #0]
 801862a:	50d7      	str	r7, [r2, r3]
 801862c:	9a08      	ldr	r2, [sp, #32]
 801862e:	2301      	movs	r3, #1
 8018630:	7013      	strb	r3, [r2, #0]
 8018632:	f1b9 0f00 	cmp.w	r9, #0
 8018636:	d0b8      	beq.n	80185aa <uxr_receive_reliable_message+0x22>
 8018638:	89a6      	ldrh	r6, [r4, #12]
 801863a:	4630      	mov	r0, r6
 801863c:	2101      	movs	r1, #1
 801863e:	f000 fd33 	bl	80190a8 <uxr_seq_num_add>
 8018642:	8922      	ldrh	r2, [r4, #8]
 8018644:	6863      	ldr	r3, [r4, #4]
 8018646:	fbb3 f3f2 	udiv	r3, r3, r2
 801864a:	4606      	mov	r6, r0
 801864c:	fbb0 f0f2 	udiv	r0, r0, r2
 8018650:	fb02 6010 	mls	r0, r2, r0, r6
 8018654:	b280      	uxth	r0, r0
 8018656:	fb00 f303 	mul.w	r3, r0, r3
 801865a:	6820      	ldr	r0, [r4, #0]
 801865c:	3304      	adds	r3, #4
 801865e:	4418      	add	r0, r3
 8018660:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018664:	2b00      	cmp	r3, #0
 8018666:	d0a0      	beq.n	80185aa <uxr_receive_reliable_message+0x22>
 8018668:	6923      	ldr	r3, [r4, #16]
 801866a:	4798      	blx	r3
 801866c:	2802      	cmp	r0, #2
 801866e:	d008      	beq.n	8018682 <uxr_receive_reliable_message+0xfa>
 8018670:	2801      	cmp	r0, #1
 8018672:	d0e2      	beq.n	801863a <uxr_receive_reliable_message+0xb2>
 8018674:	e799      	b.n	80185aa <uxr_receive_reliable_message+0x22>
 8018676:	9b08      	ldr	r3, [sp, #32]
 8018678:	81a5      	strh	r5, [r4, #12]
 801867a:	2601      	movs	r6, #1
 801867c:	f883 9000 	strb.w	r9, [r3]
 8018680:	e794      	b.n	80185ac <uxr_receive_reliable_message+0x24>
 8018682:	2601      	movs	r6, #1
 8018684:	e792      	b.n	80185ac <uxr_receive_reliable_message+0x24>
 8018686:	bf00      	nop

08018688 <uxr_next_input_reliable_buffer_available>:
 8018688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801868c:	4604      	mov	r4, r0
 801868e:	460f      	mov	r7, r1
 8018690:	8980      	ldrh	r0, [r0, #12]
 8018692:	2101      	movs	r1, #1
 8018694:	4690      	mov	r8, r2
 8018696:	f000 fd07 	bl	80190a8 <uxr_seq_num_add>
 801869a:	8922      	ldrh	r2, [r4, #8]
 801869c:	fbb0 f6f2 	udiv	r6, r0, r2
 80186a0:	fb02 0616 	mls	r6, r2, r6, r0
 80186a4:	b2b6      	uxth	r6, r6
 80186a6:	6863      	ldr	r3, [r4, #4]
 80186a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80186ac:	fb06 f303 	mul.w	r3, r6, r3
 80186b0:	6826      	ldr	r6, [r4, #0]
 80186b2:	3304      	adds	r3, #4
 80186b4:	441e      	add	r6, r3
 80186b6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80186ba:	f1b9 0f00 	cmp.w	r9, #0
 80186be:	d023      	beq.n	8018708 <uxr_next_input_reliable_buffer_available+0x80>
 80186c0:	6923      	ldr	r3, [r4, #16]
 80186c2:	4605      	mov	r5, r0
 80186c4:	4630      	mov	r0, r6
 80186c6:	4798      	blx	r3
 80186c8:	4682      	mov	sl, r0
 80186ca:	b300      	cbz	r0, 801870e <uxr_next_input_reliable_buffer_available+0x86>
 80186cc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80186d0:	2101      	movs	r1, #1
 80186d2:	4650      	mov	r0, sl
 80186d4:	f000 fce8 	bl	80190a8 <uxr_seq_num_add>
 80186d8:	8921      	ldrh	r1, [r4, #8]
 80186da:	fbb0 f2f1 	udiv	r2, r0, r1
 80186de:	4682      	mov	sl, r0
 80186e0:	fb01 0212 	mls	r2, r1, r2, r0
 80186e4:	e9d4 0300 	ldrd	r0, r3, [r4]
 80186e8:	b292      	uxth	r2, r2
 80186ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80186ee:	fb02 f303 	mul.w	r3, r2, r3
 80186f2:	3304      	adds	r3, #4
 80186f4:	4418      	add	r0, r3
 80186f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80186fa:	b12b      	cbz	r3, 8018708 <uxr_next_input_reliable_buffer_available+0x80>
 80186fc:	6923      	ldr	r3, [r4, #16]
 80186fe:	4798      	blx	r3
 8018700:	2802      	cmp	r0, #2
 8018702:	d01b      	beq.n	801873c <uxr_next_input_reliable_buffer_available+0xb4>
 8018704:	2801      	cmp	r0, #1
 8018706:	d0e3      	beq.n	80186d0 <uxr_next_input_reliable_buffer_available+0x48>
 8018708:	2000      	movs	r0, #0
 801870a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801870e:	464a      	mov	r2, r9
 8018710:	4631      	mov	r1, r6
 8018712:	4638      	mov	r0, r7
 8018714:	f7fa fcbc 	bl	8013090 <ucdr_init_buffer>
 8018718:	8921      	ldrh	r1, [r4, #8]
 801871a:	fbb5 f2f1 	udiv	r2, r5, r1
 801871e:	fb01 5212 	mls	r2, r1, r2, r5
 8018722:	b292      	uxth	r2, r2
 8018724:	6863      	ldr	r3, [r4, #4]
 8018726:	fbb3 f3f1 	udiv	r3, r3, r1
 801872a:	fb02 f303 	mul.w	r3, r2, r3
 801872e:	6822      	ldr	r2, [r4, #0]
 8018730:	f842 a003 	str.w	sl, [r2, r3]
 8018734:	2001      	movs	r0, #1
 8018736:	81a5      	strh	r5, [r4, #12]
 8018738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801873c:	8920      	ldrh	r0, [r4, #8]
 801873e:	fbb5 f3f0 	udiv	r3, r5, r0
 8018742:	fb00 5513 	mls	r5, r0, r3, r5
 8018746:	b2ad      	uxth	r5, r5
 8018748:	6863      	ldr	r3, [r4, #4]
 801874a:	fbb3 f3f0 	udiv	r3, r3, r0
 801874e:	fb03 f505 	mul.w	r5, r3, r5
 8018752:	6823      	ldr	r3, [r4, #0]
 8018754:	2000      	movs	r0, #0
 8018756:	5158      	str	r0, [r3, r5]
 8018758:	eb06 0108 	add.w	r1, r6, r8
 801875c:	eba9 0208 	sub.w	r2, r9, r8
 8018760:	4638      	mov	r0, r7
 8018762:	f7fa fc95 	bl	8013090 <ucdr_init_buffer>
 8018766:	4638      	mov	r0, r7
 8018768:	4903      	ldr	r1, [pc, #12]	; (8018778 <uxr_next_input_reliable_buffer_available+0xf0>)
 801876a:	4622      	mov	r2, r4
 801876c:	f7fa fc64 	bl	8013038 <ucdr_set_on_full_buffer_callback>
 8018770:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8018774:	2001      	movs	r0, #1
 8018776:	e7c8      	b.n	801870a <uxr_next_input_reliable_buffer_available+0x82>
 8018778:	0801847d 	.word	0x0801847d

0801877c <uxr_process_heartbeat>:
 801877c:	b538      	push	{r3, r4, r5, lr}
 801877e:	4611      	mov	r1, r2
 8018780:	4604      	mov	r4, r0
 8018782:	89c0      	ldrh	r0, [r0, #14]
 8018784:	4615      	mov	r5, r2
 8018786:	f000 fc97 	bl	80190b8 <uxr_seq_num_cmp>
 801878a:	2800      	cmp	r0, #0
 801878c:	bfb8      	it	lt
 801878e:	81e5      	strhlt	r5, [r4, #14]
 8018790:	bd38      	pop	{r3, r4, r5, pc}
 8018792:	bf00      	nop

08018794 <uxr_compute_acknack>:
 8018794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018798:	8903      	ldrh	r3, [r0, #8]
 801879a:	8985      	ldrh	r5, [r0, #12]
 801879c:	4604      	mov	r4, r0
 801879e:	460e      	mov	r6, r1
 80187a0:	b1d3      	cbz	r3, 80187d8 <uxr_compute_acknack+0x44>
 80187a2:	4628      	mov	r0, r5
 80187a4:	2701      	movs	r7, #1
 80187a6:	e003      	b.n	80187b0 <uxr_compute_acknack+0x1c>
 80187a8:	4567      	cmp	r7, ip
 80187aa:	d215      	bcs.n	80187d8 <uxr_compute_acknack+0x44>
 80187ac:	89a0      	ldrh	r0, [r4, #12]
 80187ae:	3701      	adds	r7, #1
 80187b0:	b2b9      	uxth	r1, r7
 80187b2:	f000 fc79 	bl	80190a8 <uxr_seq_num_add>
 80187b6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80187ba:	fbb0 f3fc 	udiv	r3, r0, ip
 80187be:	fb0c 0313 	mls	r3, ip, r3, r0
 80187c2:	b29a      	uxth	r2, r3
 80187c4:	e9d4 1300 	ldrd	r1, r3, [r4]
 80187c8:	fbb3 f3fc 	udiv	r3, r3, ip
 80187cc:	fb02 f303 	mul.w	r3, r2, r3
 80187d0:	58cb      	ldr	r3, [r1, r3]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d1e8      	bne.n	80187a8 <uxr_compute_acknack+0x14>
 80187d6:	4605      	mov	r5, r0
 80187d8:	8035      	strh	r5, [r6, #0]
 80187da:	2101      	movs	r1, #1
 80187dc:	4628      	mov	r0, r5
 80187de:	89e7      	ldrh	r7, [r4, #14]
 80187e0:	f000 fc66 	bl	80190b0 <uxr_seq_num_sub>
 80187e4:	4601      	mov	r1, r0
 80187e6:	4638      	mov	r0, r7
 80187e8:	f000 fc62 	bl	80190b0 <uxr_seq_num_sub>
 80187ec:	4605      	mov	r5, r0
 80187ee:	b318      	cbz	r0, 8018838 <uxr_compute_acknack+0xa4>
 80187f0:	f04f 0900 	mov.w	r9, #0
 80187f4:	464f      	mov	r7, r9
 80187f6:	f04f 0801 	mov.w	r8, #1
 80187fa:	fa1f f189 	uxth.w	r1, r9
 80187fe:	8830      	ldrh	r0, [r6, #0]
 8018800:	f000 fc52 	bl	80190a8 <uxr_seq_num_add>
 8018804:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018808:	fbb0 f3fc 	udiv	r3, r0, ip
 801880c:	e9d4 1200 	ldrd	r1, r2, [r4]
 8018810:	fb03 001c 	mls	r0, r3, ip, r0
 8018814:	b283      	uxth	r3, r0
 8018816:	fbb2 f2fc 	udiv	r2, r2, ip
 801881a:	fb02 f303 	mul.w	r3, r2, r3
 801881e:	fa08 f209 	lsl.w	r2, r8, r9
 8018822:	58cb      	ldr	r3, [r1, r3]
 8018824:	f109 0901 	add.w	r9, r9, #1
 8018828:	b90b      	cbnz	r3, 801882e <uxr_compute_acknack+0x9a>
 801882a:	4317      	orrs	r7, r2
 801882c:	b2bf      	uxth	r7, r7
 801882e:	454d      	cmp	r5, r9
 8018830:	d1e3      	bne.n	80187fa <uxr_compute_acknack+0x66>
 8018832:	4638      	mov	r0, r7
 8018834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018838:	4607      	mov	r7, r0
 801883a:	4638      	mov	r0, r7
 801883c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018840 <uxr_init_output_best_effort_stream>:
 8018840:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8018844:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8018848:	6001      	str	r1, [r0, #0]
 801884a:	7303      	strb	r3, [r0, #12]
 801884c:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018850:	4770      	bx	lr
 8018852:	bf00      	nop

08018854 <uxr_reset_output_best_effort_stream>:
 8018854:	7b02      	ldrb	r2, [r0, #12]
 8018856:	6042      	str	r2, [r0, #4]
 8018858:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801885c:	81c3      	strh	r3, [r0, #14]
 801885e:	4770      	bx	lr

08018860 <uxr_prepare_best_effort_buffer_to_write>:
 8018860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018862:	4604      	mov	r4, r0
 8018864:	b083      	sub	sp, #12
 8018866:	6840      	ldr	r0, [r0, #4]
 8018868:	460d      	mov	r5, r1
 801886a:	4616      	mov	r6, r2
 801886c:	f7fc f85e 	bl	801492c <uxr_submessage_padding>
 8018870:	6863      	ldr	r3, [r4, #4]
 8018872:	4418      	add	r0, r3
 8018874:	68a3      	ldr	r3, [r4, #8]
 8018876:	1942      	adds	r2, r0, r5
 8018878:	4293      	cmp	r3, r2
 801887a:	bf2c      	ite	cs
 801887c:	2701      	movcs	r7, #1
 801887e:	2700      	movcc	r7, #0
 8018880:	d202      	bcs.n	8018888 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8018882:	4638      	mov	r0, r7
 8018884:	b003      	add	sp, #12
 8018886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018888:	9000      	str	r0, [sp, #0]
 801888a:	6821      	ldr	r1, [r4, #0]
 801888c:	4630      	mov	r0, r6
 801888e:	2300      	movs	r3, #0
 8018890:	f7fa fbec 	bl	801306c <ucdr_init_buffer_origin_offset>
 8018894:	6861      	ldr	r1, [r4, #4]
 8018896:	4638      	mov	r0, r7
 8018898:	4429      	add	r1, r5
 801889a:	6061      	str	r1, [r4, #4]
 801889c:	b003      	add	sp, #12
 801889e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080188a0 <uxr_prepare_best_effort_buffer_to_send>:
 80188a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80188a4:	4604      	mov	r4, r0
 80188a6:	461d      	mov	r5, r3
 80188a8:	6840      	ldr	r0, [r0, #4]
 80188aa:	7b23      	ldrb	r3, [r4, #12]
 80188ac:	4298      	cmp	r0, r3
 80188ae:	bf8c      	ite	hi
 80188b0:	2601      	movhi	r6, #1
 80188b2:	2600      	movls	r6, #0
 80188b4:	d802      	bhi.n	80188bc <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80188b6:	4630      	mov	r0, r6
 80188b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188bc:	4688      	mov	r8, r1
 80188be:	89e0      	ldrh	r0, [r4, #14]
 80188c0:	2101      	movs	r1, #1
 80188c2:	4617      	mov	r7, r2
 80188c4:	f000 fbf0 	bl	80190a8 <uxr_seq_num_add>
 80188c8:	6823      	ldr	r3, [r4, #0]
 80188ca:	81e0      	strh	r0, [r4, #14]
 80188cc:	8028      	strh	r0, [r5, #0]
 80188ce:	f8c8 3000 	str.w	r3, [r8]
 80188d2:	6863      	ldr	r3, [r4, #4]
 80188d4:	603b      	str	r3, [r7, #0]
 80188d6:	7b23      	ldrb	r3, [r4, #12]
 80188d8:	6063      	str	r3, [r4, #4]
 80188da:	4630      	mov	r0, r6
 80188dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080188e0 <on_full_output_buffer>:
 80188e0:	b538      	push	{r3, r4, r5, lr}
 80188e2:	6802      	ldr	r2, [r0, #0]
 80188e4:	460c      	mov	r4, r1
 80188e6:	6809      	ldr	r1, [r1, #0]
 80188e8:	8923      	ldrh	r3, [r4, #8]
 80188ea:	eba2 0c01 	sub.w	ip, r2, r1
 80188ee:	6862      	ldr	r2, [r4, #4]
 80188f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80188f4:	fbbc fcf2 	udiv	ip, ip, r2
 80188f8:	f10c 0c01 	add.w	ip, ip, #1
 80188fc:	fa1f fc8c 	uxth.w	ip, ip
 8018900:	fbbc fef3 	udiv	lr, ip, r3
 8018904:	fb03 c31e 	mls	r3, r3, lr, ip
 8018908:	b29b      	uxth	r3, r3
 801890a:	fb02 f303 	mul.w	r3, r2, r3
 801890e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8018912:	58ca      	ldr	r2, [r1, r3]
 8018914:	4463      	add	r3, ip
 8018916:	eba2 020c 	sub.w	r2, r2, ip
 801891a:	3308      	adds	r3, #8
 801891c:	4605      	mov	r5, r0
 801891e:	4419      	add	r1, r3
 8018920:	3a04      	subs	r2, #4
 8018922:	6903      	ldr	r3, [r0, #16]
 8018924:	f7fa fbac 	bl	8013080 <ucdr_init_buffer_origin>
 8018928:	4628      	mov	r0, r5
 801892a:	4903      	ldr	r1, [pc, #12]	; (8018938 <on_full_output_buffer+0x58>)
 801892c:	4622      	mov	r2, r4
 801892e:	f7fa fb83 	bl	8013038 <ucdr_set_on_full_buffer_callback>
 8018932:	2000      	movs	r0, #0
 8018934:	bd38      	pop	{r3, r4, r5, pc}
 8018936:	bf00      	nop
 8018938:	080188e1 	.word	0x080188e1

0801893c <uxr_init_output_reliable_stream>:
 801893c:	b410      	push	{r4}
 801893e:	f89d c004 	ldrb.w	ip, [sp, #4]
 8018942:	8103      	strh	r3, [r0, #8]
 8018944:	e9c0 1200 	strd	r1, r2, [r0]
 8018948:	f880 c00c 	strb.w	ip, [r0, #12]
 801894c:	b1d3      	cbz	r3, 8018984 <uxr_init_output_reliable_stream+0x48>
 801894e:	f8c1 c000 	str.w	ip, [r1]
 8018952:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018956:	f1bc 0f01 	cmp.w	ip, #1
 801895a:	d913      	bls.n	8018984 <uxr_init_output_reliable_stream+0x48>
 801895c:	2301      	movs	r3, #1
 801895e:	fbb3 f1fc 	udiv	r1, r3, ip
 8018962:	fb0c 3111 	mls	r1, ip, r1, r3
 8018966:	b289      	uxth	r1, r1
 8018968:	6842      	ldr	r2, [r0, #4]
 801896a:	6804      	ldr	r4, [r0, #0]
 801896c:	fbb2 f2fc 	udiv	r2, r2, ip
 8018970:	fb01 f202 	mul.w	r2, r1, r2
 8018974:	7b01      	ldrb	r1, [r0, #12]
 8018976:	50a1      	str	r1, [r4, r2]
 8018978:	3301      	adds	r3, #1
 801897a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801897e:	b29b      	uxth	r3, r3
 8018980:	459c      	cmp	ip, r3
 8018982:	d8ec      	bhi.n	801895e <uxr_init_output_reliable_stream+0x22>
 8018984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018988:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801898c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018990:	4905      	ldr	r1, [pc, #20]	; (80189a8 <uxr_init_output_reliable_stream+0x6c>)
 8018992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018996:	f8c0 100e 	str.w	r1, [r0, #14]
 801899a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801899e:	2300      	movs	r3, #0
 80189a0:	8242      	strh	r2, [r0, #18]
 80189a2:	8403      	strh	r3, [r0, #32]
 80189a4:	4770      	bx	lr
 80189a6:	bf00      	nop
 80189a8:	ffff0000 	.word	0xffff0000

080189ac <uxr_reset_output_reliable_stream>:
 80189ac:	8901      	ldrh	r1, [r0, #8]
 80189ae:	b1b1      	cbz	r1, 80189de <uxr_reset_output_reliable_stream+0x32>
 80189b0:	f04f 0c00 	mov.w	ip, #0
 80189b4:	4663      	mov	r3, ip
 80189b6:	fbb3 f2f1 	udiv	r2, r3, r1
 80189ba:	fb01 3312 	mls	r3, r1, r2, r3
 80189be:	b29b      	uxth	r3, r3
 80189c0:	6842      	ldr	r2, [r0, #4]
 80189c2:	fbb2 f2f1 	udiv	r2, r2, r1
 80189c6:	6801      	ldr	r1, [r0, #0]
 80189c8:	fb02 f303 	mul.w	r3, r2, r3
 80189cc:	7b02      	ldrb	r2, [r0, #12]
 80189ce:	50ca      	str	r2, [r1, r3]
 80189d0:	f10c 0c01 	add.w	ip, ip, #1
 80189d4:	8901      	ldrh	r1, [r0, #8]
 80189d6:	fa1f f38c 	uxth.w	r3, ip
 80189da:	4299      	cmp	r1, r3
 80189dc:	d8eb      	bhi.n	80189b6 <uxr_reset_output_reliable_stream+0xa>
 80189de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80189e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80189e6:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80189ea:	4904      	ldr	r1, [pc, #16]	; (80189fc <uxr_reset_output_reliable_stream+0x50>)
 80189ec:	f8c0 100e 	str.w	r1, [r0, #14]
 80189f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80189f4:	2300      	movs	r3, #0
 80189f6:	8242      	strh	r2, [r0, #18]
 80189f8:	8403      	strh	r3, [r0, #32]
 80189fa:	4770      	bx	lr
 80189fc:	ffff0000 	.word	0xffff0000

08018a00 <uxr_prepare_reliable_buffer_to_write>:
 8018a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a04:	4604      	mov	r4, r0
 8018a06:	8900      	ldrh	r0, [r0, #8]
 8018a08:	89e5      	ldrh	r5, [r4, #14]
 8018a0a:	fbb5 f3f0 	udiv	r3, r5, r0
 8018a0e:	b091      	sub	sp, #68	; 0x44
 8018a10:	fb00 5313 	mls	r3, r0, r3, r5
 8018a14:	b29b      	uxth	r3, r3
 8018a16:	9205      	str	r2, [sp, #20]
 8018a18:	6862      	ldr	r2, [r4, #4]
 8018a1a:	fbb2 f0f0 	udiv	r0, r2, r0
 8018a1e:	6822      	ldr	r2, [r4, #0]
 8018a20:	9006      	str	r0, [sp, #24]
 8018a22:	fb00 f303 	mul.w	r3, r0, r3
 8018a26:	3304      	adds	r3, #4
 8018a28:	18d3      	adds	r3, r2, r3
 8018a2a:	4689      	mov	r9, r1
 8018a2c:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8018a30:	9304      	str	r3, [sp, #16]
 8018a32:	f1a0 0804 	sub.w	r8, r0, #4
 8018a36:	2104      	movs	r1, #4
 8018a38:	4630      	mov	r0, r6
 8018a3a:	f7fa fb2d 	bl	8013098 <ucdr_alignment>
 8018a3e:	1833      	adds	r3, r6, r0
 8018a40:	eb03 0609 	add.w	r6, r3, r9
 8018a44:	4546      	cmp	r6, r8
 8018a46:	9303      	str	r3, [sp, #12]
 8018a48:	f240 80d6 	bls.w	8018bf8 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8018a4c:	7b26      	ldrb	r6, [r4, #12]
 8018a4e:	eb06 0309 	add.w	r3, r6, r9
 8018a52:	4543      	cmp	r3, r8
 8018a54:	f240 80bd 	bls.w	8018bd2 <uxr_prepare_reliable_buffer_to_write+0x1d2>
 8018a58:	9b03      	ldr	r3, [sp, #12]
 8018a5a:	3304      	adds	r3, #4
 8018a5c:	4543      	cmp	r3, r8
 8018a5e:	f080 810d 	bcs.w	8018c7c <uxr_prepare_reliable_buffer_to_write+0x27c>
 8018a62:	8920      	ldrh	r0, [r4, #8]
 8018a64:	2800      	cmp	r0, #0
 8018a66:	f000 8122 	beq.w	8018cae <uxr_prepare_reliable_buffer_to_write+0x2ae>
 8018a6a:	2100      	movs	r1, #0
 8018a6c:	6827      	ldr	r7, [r4, #0]
 8018a6e:	6862      	ldr	r2, [r4, #4]
 8018a70:	fbb2 fef0 	udiv	lr, r2, r0
 8018a74:	468c      	mov	ip, r1
 8018a76:	460b      	mov	r3, r1
 8018a78:	fbb3 f2f0 	udiv	r2, r3, r0
 8018a7c:	fb00 3312 	mls	r3, r0, r2, r3
 8018a80:	b29b      	uxth	r3, r3
 8018a82:	fb0e f303 	mul.w	r3, lr, r3
 8018a86:	3101      	adds	r1, #1
 8018a88:	58fa      	ldr	r2, [r7, r3]
 8018a8a:	4296      	cmp	r6, r2
 8018a8c:	bf08      	it	eq
 8018a8e:	f10c 0c01 	addeq.w	ip, ip, #1
 8018a92:	b28b      	uxth	r3, r1
 8018a94:	bf08      	it	eq
 8018a96:	fa1f fc8c 	uxtheq.w	ip, ip
 8018a9a:	4283      	cmp	r3, r0
 8018a9c:	d3ec      	bcc.n	8018a78 <uxr_prepare_reliable_buffer_to_write+0x78>
 8018a9e:	9b03      	ldr	r3, [sp, #12]
 8018aa0:	f1a8 0704 	sub.w	r7, r8, #4
 8018aa4:	b2bf      	uxth	r7, r7
 8018aa6:	1bbe      	subs	r6, r7, r6
 8018aa8:	1aff      	subs	r7, r7, r3
 8018aaa:	b2bf      	uxth	r7, r7
 8018aac:	b2b6      	uxth	r6, r6
 8018aae:	eba9 0907 	sub.w	r9, r9, r7
 8018ab2:	fbb9 faf6 	udiv	sl, r9, r6
 8018ab6:	fb06 911a 	mls	r1, r6, sl, r9
 8018aba:	9607      	str	r6, [sp, #28]
 8018abc:	2900      	cmp	r1, #0
 8018abe:	f040 80bc 	bne.w	8018c3a <uxr_prepare_reliable_buffer_to_write+0x23a>
 8018ac2:	fa1f fa8a 	uxth.w	sl, sl
 8018ac6:	45e2      	cmp	sl, ip
 8018ac8:	f200 8092 	bhi.w	8018bf0 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8018acc:	f10d 0b20 	add.w	fp, sp, #32
 8018ad0:	f1ba 0f00 	cmp.w	sl, #0
 8018ad4:	d03a      	beq.n	8018b4c <uxr_prepare_reliable_buffer_to_write+0x14c>
 8018ad6:	f04f 0900 	mov.w	r9, #0
 8018ada:	f10d 0b20 	add.w	fp, sp, #32
 8018ade:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018ae2:	fbb5 fcf0 	udiv	ip, r5, r0
 8018ae6:	fb00 511c 	mls	r1, r0, ip, r5
 8018aea:	fa1f fc81 	uxth.w	ip, r1
 8018aee:	fbb3 f1f0 	udiv	r1, r3, r0
 8018af2:	fb0c f101 	mul.w	r1, ip, r1
 8018af6:	3104      	adds	r1, #4
 8018af8:	4411      	add	r1, r2
 8018afa:	4658      	mov	r0, fp
 8018afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b00:	9300      	str	r3, [sp, #0]
 8018b02:	4642      	mov	r2, r8
 8018b04:	2300      	movs	r3, #0
 8018b06:	f7fa fab1 	bl	801306c <ucdr_init_buffer_origin_offset>
 8018b0a:	463a      	mov	r2, r7
 8018b0c:	2300      	movs	r3, #0
 8018b0e:	210d      	movs	r1, #13
 8018b10:	4658      	mov	r0, fp
 8018b12:	f7fb fecb 	bl	80148ac <uxr_buffer_submessage_header>
 8018b16:	8921      	ldrh	r1, [r4, #8]
 8018b18:	fbb5 f2f1 	udiv	r2, r5, r1
 8018b1c:	fb01 5212 	mls	r2, r1, r2, r5
 8018b20:	b292      	uxth	r2, r2
 8018b22:	6863      	ldr	r3, [r4, #4]
 8018b24:	fbb3 f3f1 	udiv	r3, r3, r1
 8018b28:	fb02 f303 	mul.w	r3, r2, r3
 8018b2c:	6822      	ldr	r2, [r4, #0]
 8018b2e:	4628      	mov	r0, r5
 8018b30:	f842 8003 	str.w	r8, [r2, r3]
 8018b34:	2101      	movs	r1, #1
 8018b36:	f000 fab7 	bl	80190a8 <uxr_seq_num_add>
 8018b3a:	f109 0901 	add.w	r9, r9, #1
 8018b3e:	fa1f f389 	uxth.w	r3, r9
 8018b42:	459a      	cmp	sl, r3
 8018b44:	4605      	mov	r5, r0
 8018b46:	4637      	mov	r7, r6
 8018b48:	8920      	ldrh	r0, [r4, #8]
 8018b4a:	d8c8      	bhi.n	8018ade <uxr_prepare_reliable_buffer_to_write+0xde>
 8018b4c:	fbb5 f1f0 	udiv	r1, r5, r0
 8018b50:	fb00 5111 	mls	r1, r0, r1, r5
 8018b54:	b28e      	uxth	r6, r1
 8018b56:	6863      	ldr	r3, [r4, #4]
 8018b58:	fbb3 f1f0 	udiv	r1, r3, r0
 8018b5c:	6823      	ldr	r3, [r4, #0]
 8018b5e:	fb06 f101 	mul.w	r1, r6, r1
 8018b62:	3104      	adds	r1, #4
 8018b64:	4419      	add	r1, r3
 8018b66:	4642      	mov	r2, r8
 8018b68:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8018b6c:	9000      	str	r0, [sp, #0]
 8018b6e:	2300      	movs	r3, #0
 8018b70:	4658      	mov	r0, fp
 8018b72:	f7fa fa7b 	bl	801306c <ucdr_init_buffer_origin_offset>
 8018b76:	9e07      	ldr	r6, [sp, #28]
 8018b78:	4658      	mov	r0, fp
 8018b7a:	b2b2      	uxth	r2, r6
 8018b7c:	2302      	movs	r3, #2
 8018b7e:	210d      	movs	r1, #13
 8018b80:	f7fb fe94 	bl	80148ac <uxr_buffer_submessage_header>
 8018b84:	9b06      	ldr	r3, [sp, #24]
 8018b86:	7b20      	ldrb	r0, [r4, #12]
 8018b88:	8927      	ldrh	r7, [r4, #8]
 8018b8a:	f1a3 0208 	sub.w	r2, r3, #8
 8018b8e:	9b03      	ldr	r3, [sp, #12]
 8018b90:	3004      	adds	r0, #4
 8018b92:	1ad2      	subs	r2, r2, r3
 8018b94:	1d19      	adds	r1, r3, #4
 8018b96:	9b04      	ldr	r3, [sp, #16]
 8018b98:	4430      	add	r0, r6
 8018b9a:	fbb5 f6f7 	udiv	r6, r5, r7
 8018b9e:	fb07 5616 	mls	r6, r7, r6, r5
 8018ba2:	440b      	add	r3, r1
 8018ba4:	b2b6      	uxth	r6, r6
 8018ba6:	4619      	mov	r1, r3
 8018ba8:	6863      	ldr	r3, [r4, #4]
 8018baa:	fbb3 f3f7 	udiv	r3, r3, r7
 8018bae:	fb06 f303 	mul.w	r3, r6, r3
 8018bb2:	6826      	ldr	r6, [r4, #0]
 8018bb4:	50f0      	str	r0, [r6, r3]
 8018bb6:	9e05      	ldr	r6, [sp, #20]
 8018bb8:	4630      	mov	r0, r6
 8018bba:	f7fa fa69 	bl	8013090 <ucdr_init_buffer>
 8018bbe:	4630      	mov	r0, r6
 8018bc0:	493c      	ldr	r1, [pc, #240]	; (8018cb4 <uxr_prepare_reliable_buffer_to_write+0x2b4>)
 8018bc2:	4622      	mov	r2, r4
 8018bc4:	f7fa fa38 	bl	8013038 <ucdr_set_on_full_buffer_callback>
 8018bc8:	2001      	movs	r0, #1
 8018bca:	81e5      	strh	r5, [r4, #14]
 8018bcc:	b011      	add	sp, #68	; 0x44
 8018bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bd2:	2101      	movs	r1, #1
 8018bd4:	89e0      	ldrh	r0, [r4, #14]
 8018bd6:	f000 fa67 	bl	80190a8 <uxr_seq_num_add>
 8018bda:	8921      	ldrh	r1, [r4, #8]
 8018bdc:	4605      	mov	r5, r0
 8018bde:	8a60      	ldrh	r0, [r4, #18]
 8018be0:	f000 fa62 	bl	80190a8 <uxr_seq_num_add>
 8018be4:	4601      	mov	r1, r0
 8018be6:	4628      	mov	r0, r5
 8018be8:	f000 fa66 	bl	80190b8 <uxr_seq_num_cmp>
 8018bec:	2800      	cmp	r0, #0
 8018bee:	dd2a      	ble.n	8018c46 <uxr_prepare_reliable_buffer_to_write+0x246>
 8018bf0:	2000      	movs	r0, #0
 8018bf2:	b011      	add	sp, #68	; 0x44
 8018bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bf8:	8921      	ldrh	r1, [r4, #8]
 8018bfa:	8a60      	ldrh	r0, [r4, #18]
 8018bfc:	f000 fa54 	bl	80190a8 <uxr_seq_num_add>
 8018c00:	4601      	mov	r1, r0
 8018c02:	4628      	mov	r0, r5
 8018c04:	f000 fa58 	bl	80190b8 <uxr_seq_num_cmp>
 8018c08:	2800      	cmp	r0, #0
 8018c0a:	dcf1      	bgt.n	8018bf0 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8018c0c:	8927      	ldrh	r7, [r4, #8]
 8018c0e:	fbb5 f2f7 	udiv	r2, r5, r7
 8018c12:	fb07 5512 	mls	r5, r7, r2, r5
 8018c16:	b2ad      	uxth	r5, r5
 8018c18:	6863      	ldr	r3, [r4, #4]
 8018c1a:	6822      	ldr	r2, [r4, #0]
 8018c1c:	fbb3 f3f7 	udiv	r3, r3, r7
 8018c20:	fb05 f303 	mul.w	r3, r5, r3
 8018c24:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
 8018c28:	50d6      	str	r6, [r2, r3]
 8018c2a:	9a03      	ldr	r2, [sp, #12]
 8018c2c:	9200      	str	r2, [sp, #0]
 8018c2e:	2300      	movs	r3, #0
 8018c30:	4632      	mov	r2, r6
 8018c32:	f7fa fa1b 	bl	801306c <ucdr_init_buffer_origin_offset>
 8018c36:	2001      	movs	r0, #1
 8018c38:	e7db      	b.n	8018bf2 <uxr_prepare_reliable_buffer_to_write+0x1f2>
 8018c3a:	f10a 0a01 	add.w	sl, sl, #1
 8018c3e:	fa1f fa8a 	uxth.w	sl, sl
 8018c42:	9107      	str	r1, [sp, #28]
 8018c44:	e73f      	b.n	8018ac6 <uxr_prepare_reliable_buffer_to_write+0xc6>
 8018c46:	8921      	ldrh	r1, [r4, #8]
 8018c48:	fbb5 f3f1 	udiv	r3, r5, r1
 8018c4c:	fb01 5313 	mls	r3, r1, r3, r5
 8018c50:	b29a      	uxth	r2, r3
 8018c52:	6863      	ldr	r3, [r4, #4]
 8018c54:	fbb3 f3f1 	udiv	r3, r3, r1
 8018c58:	6821      	ldr	r1, [r4, #0]
 8018c5a:	9805      	ldr	r0, [sp, #20]
 8018c5c:	fb02 f303 	mul.w	r3, r2, r3
 8018c60:	3304      	adds	r3, #4
 8018c62:	7b22      	ldrb	r2, [r4, #12]
 8018c64:	4419      	add	r1, r3
 8018c66:	444a      	add	r2, r9
 8018c68:	f841 2c04 	str.w	r2, [r1, #-4]
 8018c6c:	7b23      	ldrb	r3, [r4, #12]
 8018c6e:	9300      	str	r3, [sp, #0]
 8018c70:	2300      	movs	r3, #0
 8018c72:	f7fa f9fb 	bl	801306c <ucdr_init_buffer_origin_offset>
 8018c76:	81e5      	strh	r5, [r4, #14]
 8018c78:	2001      	movs	r0, #1
 8018c7a:	e7ba      	b.n	8018bf2 <uxr_prepare_reliable_buffer_to_write+0x1f2>
 8018c7c:	4628      	mov	r0, r5
 8018c7e:	2101      	movs	r1, #1
 8018c80:	f000 fa12 	bl	80190a8 <uxr_seq_num_add>
 8018c84:	4605      	mov	r5, r0
 8018c86:	8920      	ldrh	r0, [r4, #8]
 8018c88:	fbb5 f3f0 	udiv	r3, r5, r0
 8018c8c:	fb00 5313 	mls	r3, r0, r3, r5
 8018c90:	b29a      	uxth	r2, r3
 8018c92:	6863      	ldr	r3, [r4, #4]
 8018c94:	fbb3 f3f0 	udiv	r3, r3, r0
 8018c98:	fb02 f303 	mul.w	r3, r2, r3
 8018c9c:	6822      	ldr	r2, [r4, #0]
 8018c9e:	7b26      	ldrb	r6, [r4, #12]
 8018ca0:	3304      	adds	r3, #4
 8018ca2:	18d3      	adds	r3, r2, r3
 8018ca4:	9304      	str	r3, [sp, #16]
 8018ca6:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018caa:	9303      	str	r3, [sp, #12]
 8018cac:	e6da      	b.n	8018a64 <uxr_prepare_reliable_buffer_to_write+0x64>
 8018cae:	4684      	mov	ip, r0
 8018cb0:	e6f5      	b.n	8018a9e <uxr_prepare_reliable_buffer_to_write+0x9e>
 8018cb2:	bf00      	nop
 8018cb4:	080188e1 	.word	0x080188e1

08018cb8 <uxr_prepare_next_reliable_buffer_to_send>:
 8018cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cba:	4604      	mov	r4, r0
 8018cbc:	460f      	mov	r7, r1
 8018cbe:	8a00      	ldrh	r0, [r0, #16]
 8018cc0:	2101      	movs	r1, #1
 8018cc2:	4616      	mov	r6, r2
 8018cc4:	461d      	mov	r5, r3
 8018cc6:	f000 f9ef 	bl	80190a8 <uxr_seq_num_add>
 8018cca:	8028      	strh	r0, [r5, #0]
 8018ccc:	8922      	ldrh	r2, [r4, #8]
 8018cce:	fbb0 f3f2 	udiv	r3, r0, r2
 8018cd2:	fb02 0c13 	mls	ip, r2, r3, r0
 8018cd6:	fa1f fc8c 	uxth.w	ip, ip
 8018cda:	6863      	ldr	r3, [r4, #4]
 8018cdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8018ce0:	fb0c fc03 	mul.w	ip, ip, r3
 8018ce4:	6823      	ldr	r3, [r4, #0]
 8018ce6:	89e1      	ldrh	r1, [r4, #14]
 8018ce8:	f10c 0c04 	add.w	ip, ip, #4
 8018cec:	4463      	add	r3, ip
 8018cee:	603b      	str	r3, [r7, #0]
 8018cf0:	6823      	ldr	r3, [r4, #0]
 8018cf2:	449c      	add	ip, r3
 8018cf4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8018cf8:	6033      	str	r3, [r6, #0]
 8018cfa:	f000 f9dd 	bl	80190b8 <uxr_seq_num_cmp>
 8018cfe:	2800      	cmp	r0, #0
 8018d00:	dd01      	ble.n	8018d06 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8018d02:	2000      	movs	r0, #0
 8018d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d06:	7b23      	ldrb	r3, [r4, #12]
 8018d08:	6832      	ldr	r2, [r6, #0]
 8018d0a:	429a      	cmp	r2, r3
 8018d0c:	d9f9      	bls.n	8018d02 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018d0e:	8a61      	ldrh	r1, [r4, #18]
 8018d10:	8a20      	ldrh	r0, [r4, #16]
 8018d12:	f000 f9cd 	bl	80190b0 <uxr_seq_num_sub>
 8018d16:	8923      	ldrh	r3, [r4, #8]
 8018d18:	4283      	cmp	r3, r0
 8018d1a:	d0f2      	beq.n	8018d02 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8018d1c:	8828      	ldrh	r0, [r5, #0]
 8018d1e:	89e3      	ldrh	r3, [r4, #14]
 8018d20:	8220      	strh	r0, [r4, #16]
 8018d22:	4298      	cmp	r0, r3
 8018d24:	d001      	beq.n	8018d2a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8018d26:	2001      	movs	r0, #1
 8018d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d2a:	2101      	movs	r1, #1
 8018d2c:	f000 f9bc 	bl	80190a8 <uxr_seq_num_add>
 8018d30:	81e0      	strh	r0, [r4, #14]
 8018d32:	2001      	movs	r0, #1
 8018d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d36:	bf00      	nop

08018d38 <uxr_update_output_stream_heartbeat_timestamp>:
 8018d38:	b570      	push	{r4, r5, r6, lr}
 8018d3a:	8a01      	ldrh	r1, [r0, #16]
 8018d3c:	4604      	mov	r4, r0
 8018d3e:	8a40      	ldrh	r0, [r0, #18]
 8018d40:	4615      	mov	r5, r2
 8018d42:	461e      	mov	r6, r3
 8018d44:	f000 f9b8 	bl	80190b8 <uxr_seq_num_cmp>
 8018d48:	2800      	cmp	r0, #0
 8018d4a:	db07      	blt.n	8018d5c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8018d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018d50:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018d54:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8018d58:	2000      	movs	r0, #0
 8018d5a:	bd70      	pop	{r4, r5, r6, pc}
 8018d5c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8018d60:	b940      	cbnz	r0, 8018d74 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8018d62:	2301      	movs	r3, #1
 8018d64:	f884 3020 	strb.w	r3, [r4, #32]
 8018d68:	3564      	adds	r5, #100	; 0x64
 8018d6a:	f146 0600 	adc.w	r6, r6, #0
 8018d6e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8018d72:	bd70      	pop	{r4, r5, r6, pc}
 8018d74:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8018d78:	4295      	cmp	r5, r2
 8018d7a:	eb76 0303 	sbcs.w	r3, r6, r3
 8018d7e:	bfa5      	ittet	ge
 8018d80:	3001      	addge	r0, #1
 8018d82:	f884 0020 	strbge.w	r0, [r4, #32]
 8018d86:	2000      	movlt	r0, #0
 8018d88:	2001      	movge	r0, #1
 8018d8a:	e7ed      	b.n	8018d68 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08018d8c <uxr_begin_output_nack_buffer_it>:
 8018d8c:	8a40      	ldrh	r0, [r0, #18]
 8018d8e:	4770      	bx	lr

08018d90 <uxr_next_reliable_nack_buffer_to_send>:
 8018d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d94:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 8018d98:	b082      	sub	sp, #8
 8018d9a:	f1b8 0f00 	cmp.w	r8, #0
 8018d9e:	d011      	beq.n	8018dc4 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8018da0:	4604      	mov	r4, r0
 8018da2:	8818      	ldrh	r0, [r3, #0]
 8018da4:	460e      	mov	r6, r1
 8018da6:	4617      	mov	r7, r2
 8018da8:	461d      	mov	r5, r3
 8018daa:	2101      	movs	r1, #1
 8018dac:	f000 f97c 	bl	80190a8 <uxr_seq_num_add>
 8018db0:	8028      	strh	r0, [r5, #0]
 8018db2:	8a21      	ldrh	r1, [r4, #16]
 8018db4:	f000 f980 	bl	80190b8 <uxr_seq_num_cmp>
 8018db8:	2800      	cmp	r0, #0
 8018dba:	dd07      	ble.n	8018dcc <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8018dbc:	f04f 0800 	mov.w	r8, #0
 8018dc0:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 8018dc4:	4640      	mov	r0, r8
 8018dc6:	b002      	add	sp, #8
 8018dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dcc:	8921      	ldrh	r1, [r4, #8]
 8018dce:	8828      	ldrh	r0, [r5, #0]
 8018dd0:	6823      	ldr	r3, [r4, #0]
 8018dd2:	fbb0 f2f1 	udiv	r2, r0, r1
 8018dd6:	fb01 0c12 	mls	ip, r1, r2, r0
 8018dda:	fa1f f28c 	uxth.w	r2, ip
 8018dde:	9301      	str	r3, [sp, #4]
 8018de0:	6863      	ldr	r3, [r4, #4]
 8018de2:	fbb3 fcf1 	udiv	ip, r3, r1
 8018de6:	9b01      	ldr	r3, [sp, #4]
 8018de8:	fb02 fc0c 	mul.w	ip, r2, ip
 8018dec:	f10c 0c04 	add.w	ip, ip, #4
 8018df0:	4463      	add	r3, ip
 8018df2:	6033      	str	r3, [r6, #0]
 8018df4:	6823      	ldr	r3, [r4, #0]
 8018df6:	4463      	add	r3, ip
 8018df8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018dfc:	603b      	str	r3, [r7, #0]
 8018dfe:	7b22      	ldrb	r2, [r4, #12]
 8018e00:	429a      	cmp	r2, r3
 8018e02:	d0d2      	beq.n	8018daa <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8018e04:	4640      	mov	r0, r8
 8018e06:	b002      	add	sp, #8
 8018e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018e0c <uxr_process_acknack>:
 8018e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e0e:	4604      	mov	r4, r0
 8018e10:	460e      	mov	r6, r1
 8018e12:	4610      	mov	r0, r2
 8018e14:	2101      	movs	r1, #1
 8018e16:	f000 f94b 	bl	80190b0 <uxr_seq_num_sub>
 8018e1a:	8a61      	ldrh	r1, [r4, #18]
 8018e1c:	f000 f948 	bl	80190b0 <uxr_seq_num_sub>
 8018e20:	b1c0      	cbz	r0, 8018e54 <uxr_process_acknack+0x48>
 8018e22:	4605      	mov	r5, r0
 8018e24:	2700      	movs	r7, #0
 8018e26:	2101      	movs	r1, #1
 8018e28:	8a60      	ldrh	r0, [r4, #18]
 8018e2a:	f000 f93d 	bl	80190a8 <uxr_seq_num_add>
 8018e2e:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018e32:	fbb0 f1fc 	udiv	r1, r0, ip
 8018e36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018e3a:	fb0c 0111 	mls	r1, ip, r1, r0
 8018e3e:	b289      	uxth	r1, r1
 8018e40:	3701      	adds	r7, #1
 8018e42:	fbb3 f3fc 	udiv	r3, r3, ip
 8018e46:	fb01 f303 	mul.w	r3, r1, r3
 8018e4a:	42bd      	cmp	r5, r7
 8018e4c:	7b21      	ldrb	r1, [r4, #12]
 8018e4e:	8260      	strh	r0, [r4, #18]
 8018e50:	50d1      	str	r1, [r2, r3]
 8018e52:	d1e8      	bne.n	8018e26 <uxr_process_acknack+0x1a>
 8018e54:	3e00      	subs	r6, #0
 8018e56:	f04f 0300 	mov.w	r3, #0
 8018e5a:	bf18      	it	ne
 8018e5c:	2601      	movne	r6, #1
 8018e5e:	f884 3020 	strb.w	r3, [r4, #32]
 8018e62:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8018e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018e68 <uxr_is_output_up_to_date>:
 8018e68:	8a01      	ldrh	r1, [r0, #16]
 8018e6a:	8a40      	ldrh	r0, [r0, #18]
 8018e6c:	b508      	push	{r3, lr}
 8018e6e:	f000 f923 	bl	80190b8 <uxr_seq_num_cmp>
 8018e72:	fab0 f080 	clz	r0, r0
 8018e76:	0940      	lsrs	r0, r0, #5
 8018e78:	bd08      	pop	{r3, pc}
 8018e7a:	bf00      	nop

08018e7c <get_available_free_slots>:
 8018e7c:	8902      	ldrh	r2, [r0, #8]
 8018e7e:	b1da      	cbz	r2, 8018eb8 <get_available_free_slots+0x3c>
 8018e80:	b530      	push	{r4, r5, lr}
 8018e82:	2100      	movs	r1, #0
 8018e84:	6843      	ldr	r3, [r0, #4]
 8018e86:	6805      	ldr	r5, [r0, #0]
 8018e88:	7b04      	ldrb	r4, [r0, #12]
 8018e8a:	fbb3 fef2 	udiv	lr, r3, r2
 8018e8e:	4608      	mov	r0, r1
 8018e90:	460b      	mov	r3, r1
 8018e92:	fbb3 fcf2 	udiv	ip, r3, r2
 8018e96:	fb02 331c 	mls	r3, r2, ip, r3
 8018e9a:	b29b      	uxth	r3, r3
 8018e9c:	fb0e f303 	mul.w	r3, lr, r3
 8018ea0:	3101      	adds	r1, #1
 8018ea2:	f855 c003 	ldr.w	ip, [r5, r3]
 8018ea6:	4564      	cmp	r4, ip
 8018ea8:	bf08      	it	eq
 8018eaa:	3001      	addeq	r0, #1
 8018eac:	b28b      	uxth	r3, r1
 8018eae:	bf08      	it	eq
 8018eb0:	b280      	uxtheq	r0, r0
 8018eb2:	4293      	cmp	r3, r2
 8018eb4:	d3ed      	bcc.n	8018e92 <get_available_free_slots+0x16>
 8018eb6:	bd30      	pop	{r4, r5, pc}
 8018eb8:	4610      	mov	r0, r2
 8018eba:	4770      	bx	lr

08018ebc <uxr_buffer_cancel_data>:
 8018ebc:	b510      	push	{r4, lr}
 8018ebe:	b094      	sub	sp, #80	; 0x50
 8018ec0:	2300      	movs	r3, #0
 8018ec2:	9202      	str	r2, [sp, #8]
 8018ec4:	9205      	str	r2, [sp, #20]
 8018ec6:	9301      	str	r3, [sp, #4]
 8018ec8:	2201      	movs	r2, #1
 8018eca:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018ece:	f88d 301e 	strb.w	r3, [sp, #30]
 8018ed2:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8018ed6:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8018eda:	2308      	movs	r3, #8
 8018edc:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8018ee0:	9300      	str	r3, [sp, #0]
 8018ee2:	2210      	movs	r2, #16
 8018ee4:	ab0c      	add	r3, sp, #48	; 0x30
 8018ee6:	4604      	mov	r4, r0
 8018ee8:	9103      	str	r1, [sp, #12]
 8018eea:	f7fb fa41 	bl	8014370 <uxr_prepare_stream_to_write_submessage>
 8018eee:	b918      	cbnz	r0, 8018ef8 <uxr_buffer_cancel_data+0x3c>
 8018ef0:	4604      	mov	r4, r0
 8018ef2:	4620      	mov	r0, r4
 8018ef4:	b014      	add	sp, #80	; 0x50
 8018ef6:	bd10      	pop	{r4, pc}
 8018ef8:	9905      	ldr	r1, [sp, #20]
 8018efa:	aa06      	add	r2, sp, #24
 8018efc:	4620      	mov	r0, r4
 8018efe:	f7fb fb6d 	bl	80145dc <uxr_init_base_object_request>
 8018f02:	a906      	add	r1, sp, #24
 8018f04:	4604      	mov	r4, r0
 8018f06:	a80c      	add	r0, sp, #48	; 0x30
 8018f08:	f7fc fd7c 	bl	8015a04 <uxr_serialize_READ_DATA_Payload>
 8018f0c:	4620      	mov	r0, r4
 8018f0e:	b014      	add	sp, #80	; 0x50
 8018f10:	bd10      	pop	{r4, pc}
 8018f12:	bf00      	nop

08018f14 <read_submessage_format>:
 8018f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018f18:	b095      	sub	sp, #84	; 0x54
 8018f1a:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 8018f1e:	b113      	cbz	r3, 8018f26 <read_submessage_format+0x12>
 8018f20:	b015      	add	sp, #84	; 0x54
 8018f22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f26:	460c      	mov	r4, r1
 8018f28:	4615      	mov	r5, r2
 8018f2a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8018f2e:	4607      	mov	r7, r0
 8018f30:	981c      	ldr	r0, [sp, #112]	; 0x70
 8018f32:	9004      	str	r0, [sp, #16]
 8018f34:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018f36:	9005      	str	r0, [sp, #20]
 8018f38:	1a52      	subs	r2, r2, r1
 8018f3a:	a80c      	add	r0, sp, #48	; 0x30
 8018f3c:	4699      	mov	r9, r3
 8018f3e:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8018f42:	f7fa f8a5 	bl	8013090 <ucdr_init_buffer>
 8018f46:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8018f4a:	a80c      	add	r0, sp, #48	; 0x30
 8018f4c:	f7fa f874 	bl	8013038 <ucdr_set_on_full_buffer_callback>
 8018f50:	69e2      	ldr	r2, [r4, #28]
 8018f52:	b19a      	cbz	r2, 8018f7c <read_submessage_format+0x68>
 8018f54:	f1b8 0f07 	cmp.w	r8, #7
 8018f58:	f882 9014 	strb.w	r9, [r2, #20]
 8018f5c:	d040      	beq.n	8018fe0 <read_submessage_format+0xcc>
 8018f5e:	f1b8 0f08 	cmp.w	r8, #8
 8018f62:	d02e      	beq.n	8018fc2 <read_submessage_format+0xae>
 8018f64:	f1b8 0f06 	cmp.w	r8, #6
 8018f68:	d011      	beq.n	8018f8e <read_submessage_format+0x7a>
 8018f6a:	2301      	movs	r3, #1
 8018f6c:	7513      	strb	r3, [r2, #20]
 8018f6e:	4629      	mov	r1, r5
 8018f70:	4620      	mov	r0, r4
 8018f72:	f7fa f8dd 	bl	8013130 <ucdr_advance_buffer>
 8018f76:	b015      	add	sp, #84	; 0x54
 8018f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018f7c:	f1b8 0f07 	cmp.w	r8, #7
 8018f80:	d02e      	beq.n	8018fe0 <read_submessage_format+0xcc>
 8018f82:	f1b8 0f08 	cmp.w	r8, #8
 8018f86:	d01c      	beq.n	8018fc2 <read_submessage_format+0xae>
 8018f88:	f1b8 0f06 	cmp.w	r8, #6
 8018f8c:	d1ef      	bne.n	8018f6e <read_submessage_format+0x5a>
 8018f8e:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 8018f92:	f1b8 0f00 	cmp.w	r8, #0
 8018f96:	d011      	beq.n	8018fbc <read_submessage_format+0xa8>
 8018f98:	ab0c      	add	r3, sp, #48	; 0x30
 8018f9a:	e9cd 3500 	strd	r3, r5, [sp]
 8018f9e:	2306      	movs	r3, #6
 8018fa0:	f88d 3016 	strb.w	r3, [sp, #22]
 8018fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018fa8:	9302      	str	r3, [sp, #8]
 8018faa:	4632      	mov	r2, r6
 8018fac:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8018fb0:	4638      	mov	r0, r7
 8018fb2:	47c0      	blx	r8
 8018fb4:	2301      	movs	r3, #1
 8018fb6:	69e2      	ldr	r2, [r4, #28]
 8018fb8:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8018fbc:	2a00      	cmp	r2, #0
 8018fbe:	d1d4      	bne.n	8018f6a <read_submessage_format+0x56>
 8018fc0:	e7d5      	b.n	8018f6e <read_submessage_format+0x5a>
 8018fc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	d0f8      	beq.n	8018fbc <read_submessage_format+0xa8>
 8018fca:	a906      	add	r1, sp, #24
 8018fcc:	a80c      	add	r0, sp, #48	; 0x30
 8018fce:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8018fd2:	f7fc fdb7 	bl	8015b44 <uxr_deserialize_SampleIdentity>
 8018fd6:	b9a0      	cbnz	r0, 8019002 <read_submessage_format+0xee>
 8018fd8:	69e2      	ldr	r2, [r4, #28]
 8018fda:	2a00      	cmp	r2, #0
 8018fdc:	d1c5      	bne.n	8018f6a <read_submessage_format+0x56>
 8018fde:	e7c6      	b.n	8018f6e <read_submessage_format+0x5a>
 8018fe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018fe4:	b13b      	cbz	r3, 8018ff6 <read_submessage_format+0xe2>
 8018fe6:	a906      	add	r1, sp, #24
 8018fe8:	a80c      	add	r0, sp, #48	; 0x30
 8018fea:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8018fee:	f7fc faa3 	bl	8015538 <uxr_deserialize_BaseObjectRequest>
 8018ff2:	bb60      	cbnz	r0, 801904e <read_submessage_format+0x13a>
 8018ff4:	69e2      	ldr	r2, [r4, #28]
 8018ff6:	68a3      	ldr	r3, [r4, #8]
 8018ff8:	442b      	add	r3, r5
 8018ffa:	60a3      	str	r3, [r4, #8]
 8018ffc:	2a00      	cmp	r2, #0
 8018ffe:	d1b4      	bne.n	8018f6a <read_submessage_format+0x56>
 8019000:	e7b5      	b.n	8018f6e <read_submessage_format+0x5a>
 8019002:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8019006:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019008:	1a52      	subs	r2, r2, r1
 801900a:	eba8 0803 	sub.w	r8, r8, r3
 801900e:	a80c      	add	r0, sp, #48	; 0x30
 8019010:	f7fa f83e 	bl	8013090 <ucdr_init_buffer>
 8019014:	44a8      	add	r8, r5
 8019016:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801901a:	a80c      	add	r0, sp, #48	; 0x30
 801901c:	f7fa f80c 	bl	8013038 <ucdr_set_on_full_buffer_callback>
 8019020:	fa1f f888 	uxth.w	r8, r8
 8019024:	ab0c      	add	r3, sp, #48	; 0x30
 8019026:	9300      	str	r3, [sp, #0]
 8019028:	f8cd 8004 	str.w	r8, [sp, #4]
 801902c:	2108      	movs	r1, #8
 801902e:	f88d 1016 	strb.w	r1, [sp, #22]
 8019032:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8019036:	9102      	str	r1, [sp, #8]
 8019038:	ab06      	add	r3, sp, #24
 801903a:	4632      	mov	r2, r6
 801903c:	9905      	ldr	r1, [sp, #20]
 801903e:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 8019042:	4638      	mov	r0, r7
 8019044:	47b0      	blx	r6
 8019046:	2301      	movs	r3, #1
 8019048:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 801904c:	e7c4      	b.n	8018fd8 <read_submessage_format+0xc4>
 801904e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8019052:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019054:	1a52      	subs	r2, r2, r1
 8019056:	a80c      	add	r0, sp, #48	; 0x30
 8019058:	eba8 0803 	sub.w	r8, r8, r3
 801905c:	f7fa f818 	bl	8013090 <ucdr_init_buffer>
 8019060:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8019064:	a80c      	add	r0, sp, #48	; 0x30
 8019066:	f7f9 ffe7 	bl	8013038 <ucdr_set_on_full_buffer_callback>
 801906a:	ab0c      	add	r3, sp, #48	; 0x30
 801906c:	9300      	str	r3, [sp, #0]
 801906e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8019072:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8019076:	44a8      	add	r8, r5
 8019078:	fa1f f888 	uxth.w	r8, r8
 801907c:	f8cd 8004 	str.w	r8, [sp, #4]
 8019080:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8019084:	2107      	movs	r1, #7
 8019086:	f88d 1016 	strb.w	r1, [sp, #22]
 801908a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 801908e:	9102      	str	r1, [sp, #8]
 8019090:	4632      	mov	r2, r6
 8019092:	b29b      	uxth	r3, r3
 8019094:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 8019098:	9905      	ldr	r1, [sp, #20]
 801909a:	4638      	mov	r0, r7
 801909c:	47b0      	blx	r6
 801909e:	2301      	movs	r3, #1
 80190a0:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 80190a4:	e7a6      	b.n	8018ff4 <read_submessage_format+0xe0>
 80190a6:	bf00      	nop

080190a8 <uxr_seq_num_add>:
 80190a8:	4408      	add	r0, r1
 80190aa:	b280      	uxth	r0, r0
 80190ac:	4770      	bx	lr
 80190ae:	bf00      	nop

080190b0 <uxr_seq_num_sub>:
 80190b0:	1a40      	subs	r0, r0, r1
 80190b2:	b280      	uxth	r0, r0
 80190b4:	4770      	bx	lr
 80190b6:	bf00      	nop

080190b8 <uxr_seq_num_cmp>:
 80190b8:	4288      	cmp	r0, r1
 80190ba:	d011      	beq.n	80190e0 <uxr_seq_num_cmp+0x28>
 80190bc:	d309      	bcc.n	80190d2 <uxr_seq_num_cmp+0x1a>
 80190be:	4288      	cmp	r0, r1
 80190c0:	d910      	bls.n	80190e4 <uxr_seq_num_cmp+0x2c>
 80190c2:	1a40      	subs	r0, r0, r1
 80190c4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80190c8:	bfd4      	ite	le
 80190ca:	2001      	movle	r0, #1
 80190cc:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 80190d0:	4770      	bx	lr
 80190d2:	1a0b      	subs	r3, r1, r0
 80190d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80190d8:	daf1      	bge.n	80190be <uxr_seq_num_cmp+0x6>
 80190da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80190de:	4770      	bx	lr
 80190e0:	2000      	movs	r0, #0
 80190e2:	4770      	bx	lr
 80190e4:	2001      	movs	r0, #1
 80190e6:	4770      	bx	lr

080190e8 <uxr_init_framing_io>:
 80190e8:	2300      	movs	r3, #0
 80190ea:	7041      	strb	r1, [r0, #1]
 80190ec:	7003      	strb	r3, [r0, #0]
 80190ee:	8583      	strh	r3, [r0, #44]	; 0x2c
 80190f0:	4770      	bx	lr
 80190f2:	bf00      	nop

080190f4 <uxr_write_framed_msg>:
 80190f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190f8:	4617      	mov	r7, r2
 80190fa:	7842      	ldrb	r2, [r0, #1]
 80190fc:	b083      	sub	sp, #12
 80190fe:	460e      	mov	r6, r1
 8019100:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8019104:	469a      	mov	sl, r3
 8019106:	2901      	cmp	r1, #1
 8019108:	f04f 037e 	mov.w	r3, #126	; 0x7e
 801910c:	4604      	mov	r4, r0
 801910e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8019112:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8019116:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801911a:	f240 8137 	bls.w	801938c <uxr_write_framed_msg+0x298>
 801911e:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8019122:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8019126:	2901      	cmp	r1, #1
 8019128:	f04f 0202 	mov.w	r2, #2
 801912c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019130:	f240 808f 	bls.w	8019252 <uxr_write_framed_msg+0x15e>
 8019134:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019136:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801913a:	b2dd      	uxtb	r5, r3
 801913c:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8019140:	2203      	movs	r2, #3
 8019142:	2901      	cmp	r1, #1
 8019144:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019148:	f240 809a 	bls.w	8019280 <uxr_write_framed_msg+0x18c>
 801914c:	18a1      	adds	r1, r4, r2
 801914e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019150:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 8019154:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019158:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801915c:	3201      	adds	r2, #1
 801915e:	2801      	cmp	r0, #1
 8019160:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019164:	f240 80a0 	bls.w	80192a8 <uxr_write_framed_msg+0x1b4>
 8019168:	18a0      	adds	r0, r4, r2
 801916a:	3201      	adds	r2, #1
 801916c:	b2d2      	uxtb	r2, r2
 801916e:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8019172:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019176:	2b00      	cmp	r3, #0
 8019178:	f000 80a9 	beq.w	80192ce <uxr_write_framed_msg+0x1da>
 801917c:	f04f 0900 	mov.w	r9, #0
 8019180:	46c8      	mov	r8, r9
 8019182:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8019186:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 801918a:	2901      	cmp	r1, #1
 801918c:	f240 80c3 	bls.w	8019316 <uxr_write_framed_msg+0x222>
 8019190:	2a29      	cmp	r2, #41	; 0x29
 8019192:	f200 809f 	bhi.w	80192d4 <uxr_write_framed_msg+0x1e0>
 8019196:	18a1      	adds	r1, r4, r2
 8019198:	3201      	adds	r2, #1
 801919a:	b2d2      	uxtb	r2, r2
 801919c:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 80191a0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80191a4:	ea89 0303 	eor.w	r3, r9, r3
 80191a8:	498c      	ldr	r1, [pc, #560]	; (80193dc <uxr_write_framed_msg+0x2e8>)
 80191aa:	b2db      	uxtb	r3, r3
 80191ac:	f108 0801 	add.w	r8, r8, #1
 80191b0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80191b4:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 80191b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80191ba:	4543      	cmp	r3, r8
 80191bc:	d8e1      	bhi.n	8019182 <uxr_write_framed_msg+0x8e>
 80191be:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80191c2:	fa5f f889 	uxtb.w	r8, r9
 80191c6:	9301      	str	r3, [sp, #4]
 80191c8:	f04f 0900 	mov.w	r9, #0
 80191cc:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 80191d0:	fa5f f18a 	uxtb.w	r1, sl
 80191d4:	2901      	cmp	r1, #1
 80191d6:	d921      	bls.n	801921c <uxr_write_framed_msg+0x128>
 80191d8:	2a29      	cmp	r2, #41	; 0x29
 80191da:	f240 80af 	bls.w	801933c <uxr_write_framed_msg+0x248>
 80191de:	2500      	movs	r5, #0
 80191e0:	e000      	b.n	80191e4 <uxr_write_framed_msg+0xf0>
 80191e2:	b160      	cbz	r0, 80191fe <uxr_write_framed_msg+0x10a>
 80191e4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80191e8:	1b52      	subs	r2, r2, r5
 80191ea:	465b      	mov	r3, fp
 80191ec:	4421      	add	r1, r4
 80191ee:	4638      	mov	r0, r7
 80191f0:	47b0      	blx	r6
 80191f2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80191f6:	4405      	add	r5, r0
 80191f8:	4295      	cmp	r5, r2
 80191fa:	d3f2      	bcc.n	80191e2 <uxr_write_framed_msg+0xee>
 80191fc:	d003      	beq.n	8019206 <uxr_write_framed_msg+0x112>
 80191fe:	2000      	movs	r0, #0
 8019200:	b003      	add	sp, #12
 8019202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019206:	fa5f f18a 	uxtb.w	r1, sl
 801920a:	f04f 0300 	mov.w	r3, #0
 801920e:	2901      	cmp	r1, #1
 8019210:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019214:	f04f 0200 	mov.w	r2, #0
 8019218:	f200 8090 	bhi.w	801933c <uxr_write_framed_msg+0x248>
 801921c:	1c51      	adds	r1, r2, #1
 801921e:	b2c9      	uxtb	r1, r1
 8019220:	2929      	cmp	r1, #41	; 0x29
 8019222:	d8dc      	bhi.n	80191de <uxr_write_framed_msg+0xea>
 8019224:	18a5      	adds	r5, r4, r2
 8019226:	4421      	add	r1, r4
 8019228:	3202      	adds	r2, #2
 801922a:	f088 0820 	eor.w	r8, r8, #32
 801922e:	4648      	mov	r0, r9
 8019230:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8019234:	b2d2      	uxtb	r2, r2
 8019236:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 801923a:	f04f 0901 	mov.w	r9, #1
 801923e:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8019242:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019246:	2800      	cmp	r0, #0
 8019248:	f040 8085 	bne.w	8019356 <uxr_write_framed_msg+0x262>
 801924c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019250:	e7bc      	b.n	80191cc <uxr_write_framed_msg+0xd8>
 8019252:	4611      	mov	r1, r2
 8019254:	f04f 0c03 	mov.w	ip, #3
 8019258:	2204      	movs	r2, #4
 801925a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801925c:	4421      	add	r1, r4
 801925e:	b2dd      	uxtb	r5, r3
 8019260:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8019264:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 8019268:	44a4      	add	ip, r4
 801926a:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 801926e:	f080 0020 	eor.w	r0, r0, #32
 8019272:	2901      	cmp	r1, #1
 8019274:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8019278:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801927c:	f63f af66 	bhi.w	801914c <uxr_write_framed_msg+0x58>
 8019280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019282:	18a0      	adds	r0, r4, r2
 8019284:	f085 0520 	eor.w	r5, r5, #32
 8019288:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 801928c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8019290:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 8019294:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8019298:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801929c:	3202      	adds	r2, #2
 801929e:	2801      	cmp	r0, #1
 80192a0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80192a4:	f63f af60 	bhi.w	8019168 <uxr_write_framed_msg+0x74>
 80192a8:	1c50      	adds	r0, r2, #1
 80192aa:	18a5      	adds	r5, r4, r2
 80192ac:	fa54 f080 	uxtab	r0, r4, r0
 80192b0:	3202      	adds	r2, #2
 80192b2:	f081 0120 	eor.w	r1, r1, #32
 80192b6:	b2d2      	uxtb	r2, r2
 80192b8:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80192bc:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 80192c0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80192c4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	f47f af57 	bne.w	801917c <uxr_write_framed_msg+0x88>
 80192ce:	9301      	str	r3, [sp, #4]
 80192d0:	4698      	mov	r8, r3
 80192d2:	e779      	b.n	80191c8 <uxr_write_framed_msg+0xd4>
 80192d4:	2500      	movs	r5, #0
 80192d6:	e001      	b.n	80192dc <uxr_write_framed_msg+0x1e8>
 80192d8:	2800      	cmp	r0, #0
 80192da:	d090      	beq.n	80191fe <uxr_write_framed_msg+0x10a>
 80192dc:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80192e0:	1b52      	subs	r2, r2, r5
 80192e2:	465b      	mov	r3, fp
 80192e4:	4421      	add	r1, r4
 80192e6:	4638      	mov	r0, r7
 80192e8:	47b0      	blx	r6
 80192ea:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80192ee:	4405      	add	r5, r0
 80192f0:	4295      	cmp	r5, r2
 80192f2:	d3f1      	bcc.n	80192d8 <uxr_write_framed_msg+0x1e4>
 80192f4:	d183      	bne.n	80191fe <uxr_write_framed_msg+0x10a>
 80192f6:	f04f 0300 	mov.w	r3, #0
 80192fa:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80192fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019300:	4543      	cmp	r3, r8
 8019302:	d964      	bls.n	80193ce <uxr_write_framed_msg+0x2da>
 8019304:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8019308:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 801930c:	2901      	cmp	r1, #1
 801930e:	f04f 0200 	mov.w	r2, #0
 8019312:	f63f af3d 	bhi.w	8019190 <uxr_write_framed_msg+0x9c>
 8019316:	1c51      	adds	r1, r2, #1
 8019318:	b2c9      	uxtb	r1, r1
 801931a:	2929      	cmp	r1, #41	; 0x29
 801931c:	d8da      	bhi.n	80192d4 <uxr_write_framed_msg+0x1e0>
 801931e:	18a0      	adds	r0, r4, r2
 8019320:	4421      	add	r1, r4
 8019322:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8019326:	3202      	adds	r2, #2
 8019328:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 801932c:	b2d2      	uxtb	r2, r2
 801932e:	f083 0020 	eor.w	r0, r3, #32
 8019332:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8019336:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801933a:	e733      	b.n	80191a4 <uxr_write_framed_msg+0xb0>
 801933c:	18a1      	adds	r1, r4, r2
 801933e:	3201      	adds	r2, #1
 8019340:	4648      	mov	r0, r9
 8019342:	b2d2      	uxtb	r2, r2
 8019344:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8019348:	f04f 0901 	mov.w	r9, #1
 801934c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8019350:	2800      	cmp	r0, #0
 8019352:	f43f af7b 	beq.w	801924c <uxr_write_framed_msg+0x158>
 8019356:	2500      	movs	r5, #0
 8019358:	e002      	b.n	8019360 <uxr_write_framed_msg+0x26c>
 801935a:	2800      	cmp	r0, #0
 801935c:	f43f af4f 	beq.w	80191fe <uxr_write_framed_msg+0x10a>
 8019360:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8019364:	1b52      	subs	r2, r2, r5
 8019366:	465b      	mov	r3, fp
 8019368:	4421      	add	r1, r4
 801936a:	4638      	mov	r0, r7
 801936c:	47b0      	blx	r6
 801936e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8019372:	4405      	add	r5, r0
 8019374:	4295      	cmp	r5, r2
 8019376:	d3f0      	bcc.n	801935a <uxr_write_framed_msg+0x266>
 8019378:	f47f af41 	bne.w	80191fe <uxr_write_framed_msg+0x10a>
 801937c:	2300      	movs	r3, #0
 801937e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8019382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019384:	b298      	uxth	r0, r3
 8019386:	b003      	add	sp, #12
 8019388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801938c:	217d      	movs	r1, #125	; 0x7d
 801938e:	f082 0220 	eor.w	r2, r2, #32
 8019392:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8019396:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801939a:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 801939e:	2901      	cmp	r1, #1
 80193a0:	f04f 0203 	mov.w	r2, #3
 80193a4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80193a8:	d804      	bhi.n	80193b4 <uxr_write_framed_msg+0x2c0>
 80193aa:	4611      	mov	r1, r2
 80193ac:	f04f 0c04 	mov.w	ip, #4
 80193b0:	2205      	movs	r2, #5
 80193b2:	e752      	b.n	801925a <uxr_write_framed_msg+0x166>
 80193b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80193b6:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80193ba:	b2dd      	uxtb	r5, r3
 80193bc:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 80193c0:	2204      	movs	r2, #4
 80193c2:	2901      	cmp	r1, #1
 80193c4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80193c8:	f63f aec0 	bhi.w	801914c <uxr_write_framed_msg+0x58>
 80193cc:	e758      	b.n	8019280 <uxr_write_framed_msg+0x18c>
 80193ce:	ea4f 2319 	mov.w	r3, r9, lsr #8
 80193d2:	fa5f f889 	uxtb.w	r8, r9
 80193d6:	9301      	str	r3, [sp, #4]
 80193d8:	2200      	movs	r2, #0
 80193da:	e6f5      	b.n	80191c8 <uxr_write_framed_msg+0xd4>
 80193dc:	0801cbd8 	.word	0x0801cbd8

080193e0 <uxr_framing_read_transport>:
 80193e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193e4:	4604      	mov	r4, r0
 80193e6:	b083      	sub	sp, #12
 80193e8:	461f      	mov	r7, r3
 80193ea:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80193ee:	4689      	mov	r9, r1
 80193f0:	4692      	mov	sl, r2
 80193f2:	f7fb faa1 	bl	8014938 <uxr_millis>
 80193f6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80193fa:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 80193fe:	42b3      	cmp	r3, r6
 8019400:	4680      	mov	r8, r0
 8019402:	d061      	beq.n	80194c8 <uxr_framing_read_transport+0xe8>
 8019404:	d81c      	bhi.n	8019440 <uxr_framing_read_transport+0x60>
 8019406:	1e75      	subs	r5, r6, #1
 8019408:	1aed      	subs	r5, r5, r3
 801940a:	b2ed      	uxtb	r5, r5
 801940c:	2600      	movs	r6, #0
 801940e:	455d      	cmp	r5, fp
 8019410:	d81f      	bhi.n	8019452 <uxr_framing_read_transport+0x72>
 8019412:	19ab      	adds	r3, r5, r6
 8019414:	455b      	cmp	r3, fp
 8019416:	bf84      	itt	hi
 8019418:	ebab 0605 	subhi.w	r6, fp, r5
 801941c:	b2f6      	uxtbhi	r6, r6
 801941e:	b9ed      	cbnz	r5, 801945c <uxr_framing_read_transport+0x7c>
 8019420:	f04f 0b00 	mov.w	fp, #0
 8019424:	f7fb fa88 	bl	8014938 <uxr_millis>
 8019428:	683b      	ldr	r3, [r7, #0]
 801942a:	eba0 0808 	sub.w	r8, r0, r8
 801942e:	eba3 0308 	sub.w	r3, r3, r8
 8019432:	4658      	mov	r0, fp
 8019434:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019438:	603b      	str	r3, [r7, #0]
 801943a:	b003      	add	sp, #12
 801943c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019440:	2e00      	cmp	r6, #0
 8019442:	d049      	beq.n	80194d8 <uxr_framing_read_transport+0xf8>
 8019444:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8019448:	b2ed      	uxtb	r5, r5
 801944a:	3e01      	subs	r6, #1
 801944c:	455d      	cmp	r5, fp
 801944e:	b2f6      	uxtb	r6, r6
 8019450:	d9df      	bls.n	8019412 <uxr_framing_read_transport+0x32>
 8019452:	fa5f f58b 	uxtb.w	r5, fp
 8019456:	2600      	movs	r6, #0
 8019458:	2d00      	cmp	r5, #0
 801945a:	d0e1      	beq.n	8019420 <uxr_framing_read_transport+0x40>
 801945c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019460:	3102      	adds	r1, #2
 8019462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019464:	9300      	str	r3, [sp, #0]
 8019466:	683b      	ldr	r3, [r7, #0]
 8019468:	4421      	add	r1, r4
 801946a:	462a      	mov	r2, r5
 801946c:	4650      	mov	r0, sl
 801946e:	47c8      	blx	r9
 8019470:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019474:	4a1a      	ldr	r2, [pc, #104]	; (80194e0 <uxr_framing_read_transport+0x100>)
 8019476:	4403      	add	r3, r0
 8019478:	0859      	lsrs	r1, r3, #1
 801947a:	fba2 2101 	umull	r2, r1, r2, r1
 801947e:	0889      	lsrs	r1, r1, #2
 8019480:	222a      	movs	r2, #42	; 0x2a
 8019482:	fb02 3111 	mls	r1, r2, r1, r3
 8019486:	4683      	mov	fp, r0
 8019488:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801948c:	2800      	cmp	r0, #0
 801948e:	d0c7      	beq.n	8019420 <uxr_framing_read_transport+0x40>
 8019490:	42a8      	cmp	r0, r5
 8019492:	d1c7      	bne.n	8019424 <uxr_framing_read_transport+0x44>
 8019494:	2e00      	cmp	r6, #0
 8019496:	d0c5      	beq.n	8019424 <uxr_framing_read_transport+0x44>
 8019498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801949a:	9300      	str	r3, [sp, #0]
 801949c:	3102      	adds	r1, #2
 801949e:	4632      	mov	r2, r6
 80194a0:	4421      	add	r1, r4
 80194a2:	2300      	movs	r3, #0
 80194a4:	4650      	mov	r0, sl
 80194a6:	47c8      	blx	r9
 80194a8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80194ac:	4a0c      	ldr	r2, [pc, #48]	; (80194e0 <uxr_framing_read_transport+0x100>)
 80194ae:	180b      	adds	r3, r1, r0
 80194b0:	0859      	lsrs	r1, r3, #1
 80194b2:	fba2 1201 	umull	r1, r2, r2, r1
 80194b6:	0892      	lsrs	r2, r2, #2
 80194b8:	212a      	movs	r1, #42	; 0x2a
 80194ba:	fb01 3312 	mls	r3, r1, r2, r3
 80194be:	eb00 0b05 	add.w	fp, r0, r5
 80194c2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80194c6:	e7ad      	b.n	8019424 <uxr_framing_read_transport+0x44>
 80194c8:	2600      	movs	r6, #0
 80194ca:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 80194ce:	85a6      	strh	r6, [r4, #44]	; 0x2c
 80194d0:	d9bf      	bls.n	8019452 <uxr_framing_read_transport+0x72>
 80194d2:	2102      	movs	r1, #2
 80194d4:	2529      	movs	r5, #41	; 0x29
 80194d6:	e7c4      	b.n	8019462 <uxr_framing_read_transport+0x82>
 80194d8:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 80194dc:	b2ed      	uxtb	r5, r5
 80194de:	e796      	b.n	801940e <uxr_framing_read_transport+0x2e>
 80194e0:	30c30c31 	.word	0x30c30c31

080194e4 <uxr_read_framed_msg>:
 80194e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194e8:	461e      	mov	r6, r3
 80194ea:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80194ee:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80194f2:	429d      	cmp	r5, r3
 80194f4:	b083      	sub	sp, #12
 80194f6:	4604      	mov	r4, r0
 80194f8:	4688      	mov	r8, r1
 80194fa:	4691      	mov	r9, r2
 80194fc:	f000 8188 	beq.w	8019810 <uxr_read_framed_msg+0x32c>
 8019500:	7823      	ldrb	r3, [r4, #0]
 8019502:	4dc1      	ldr	r5, [pc, #772]	; (8019808 <uxr_read_framed_msg+0x324>)
 8019504:	4fc1      	ldr	r7, [pc, #772]	; (801980c <uxr_read_framed_msg+0x328>)
 8019506:	2b07      	cmp	r3, #7
 8019508:	d8fd      	bhi.n	8019506 <uxr_read_framed_msg+0x22>
 801950a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801950e:	0115      	.short	0x0115
 8019510:	00d600f6 	.word	0x00d600f6
 8019514:	009000b9 	.word	0x009000b9
 8019518:	0030004d 	.word	0x0030004d
 801951c:	0008      	.short	0x0008
 801951e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019522:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019526:	4299      	cmp	r1, r3
 8019528:	f000 814a 	beq.w	80197c0 <uxr_read_framed_msg+0x2dc>
 801952c:	18e2      	adds	r2, r4, r3
 801952e:	7892      	ldrb	r2, [r2, #2]
 8019530:	2a7d      	cmp	r2, #125	; 0x7d
 8019532:	f000 8199 	beq.w	8019868 <uxr_read_framed_msg+0x384>
 8019536:	3301      	adds	r3, #1
 8019538:	0858      	lsrs	r0, r3, #1
 801953a:	fba5 1000 	umull	r1, r0, r5, r0
 801953e:	0880      	lsrs	r0, r0, #2
 8019540:	212a      	movs	r1, #42	; 0x2a
 8019542:	fb01 3310 	mls	r3, r1, r0, r3
 8019546:	2a7e      	cmp	r2, #126	; 0x7e
 8019548:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801954c:	f000 8252 	beq.w	80199f4 <uxr_read_framed_msg+0x510>
 8019550:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8019552:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8019554:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8019558:	b29b      	uxth	r3, r3
 801955a:	2200      	movs	r2, #0
 801955c:	4299      	cmp	r1, r3
 801955e:	86a3      	strh	r3, [r4, #52]	; 0x34
 8019560:	7022      	strb	r2, [r4, #0]
 8019562:	f000 8179 	beq.w	8019858 <uxr_read_framed_msg+0x374>
 8019566:	2000      	movs	r0, #0
 8019568:	b003      	add	sp, #12
 801956a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801956e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019572:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019576:	4299      	cmp	r1, r3
 8019578:	f000 8131 	beq.w	80197de <uxr_read_framed_msg+0x2fa>
 801957c:	18e2      	adds	r2, r4, r3
 801957e:	7890      	ldrb	r0, [r2, #2]
 8019580:	287d      	cmp	r0, #125	; 0x7d
 8019582:	f000 8190 	beq.w	80198a6 <uxr_read_framed_msg+0x3c2>
 8019586:	3301      	adds	r3, #1
 8019588:	085a      	lsrs	r2, r3, #1
 801958a:	fba5 1202 	umull	r1, r2, r5, r2
 801958e:	0892      	lsrs	r2, r2, #2
 8019590:	212a      	movs	r1, #42	; 0x2a
 8019592:	fb01 3312 	mls	r3, r1, r2, r3
 8019596:	287e      	cmp	r0, #126	; 0x7e
 8019598:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801959c:	f000 821a 	beq.w	80199d4 <uxr_read_framed_msg+0x4f0>
 80195a0:	2307      	movs	r3, #7
 80195a2:	86a0      	strh	r0, [r4, #52]	; 0x34
 80195a4:	7023      	strb	r3, [r4, #0]
 80195a6:	e7ae      	b.n	8019506 <uxr_read_framed_msg+0x22>
 80195a8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80195aa:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80195ae:	459e      	cmp	lr, r3
 80195b0:	d938      	bls.n	8019624 <uxr_read_framed_msg+0x140>
 80195b2:	ee07 8a90 	vmov	s15, r8
 80195b6:	212a      	movs	r1, #42	; 0x2a
 80195b8:	e020      	b.n	80195fc <uxr_read_framed_msg+0x118>
 80195ba:	f89b c002 	ldrb.w	ip, [fp, #2]
 80195be:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 80195c2:	f000 80d4 	beq.w	801976e <uxr_read_framed_msg+0x28a>
 80195c6:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 80195ca:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80195ce:	f000 8219 	beq.w	8019a04 <uxr_read_framed_msg+0x520>
 80195d2:	f806 c003 	strb.w	ip, [r6, r3]
 80195d6:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 80195da:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80195dc:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 80195e0:	ea8a 000c 	eor.w	r0, sl, ip
 80195e4:	b2c0      	uxtb	r0, r0
 80195e6:	3301      	adds	r3, #1
 80195e8:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 80195ec:	b29b      	uxth	r3, r3
 80195ee:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 80195f2:	4573      	cmp	r3, lr
 80195f4:	8663      	strh	r3, [r4, #50]	; 0x32
 80195f6:	86e2      	strh	r2, [r4, #54]	; 0x36
 80195f8:	f080 8120 	bcs.w	801983c <uxr_read_framed_msg+0x358>
 80195fc:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8019600:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8019604:	f100 0c01 	add.w	ip, r0, #1
 8019608:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801960c:	fba5 8202 	umull	r8, r2, r5, r2
 8019610:	0892      	lsrs	r2, r2, #2
 8019612:	4582      	cmp	sl, r0
 8019614:	eb04 0b00 	add.w	fp, r4, r0
 8019618:	fb01 c212 	mls	r2, r1, r2, ip
 801961c:	d1cd      	bne.n	80195ba <uxr_read_framed_msg+0xd6>
 801961e:	ee17 8a90 	vmov	r8, s15
 8019622:	459e      	cmp	lr, r3
 8019624:	f040 8111 	bne.w	801984a <uxr_read_framed_msg+0x366>
 8019628:	2306      	movs	r3, #6
 801962a:	7023      	strb	r3, [r4, #0]
 801962c:	e76b      	b.n	8019506 <uxr_read_framed_msg+0x22>
 801962e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8019632:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019636:	4298      	cmp	r0, r3
 8019638:	f000 80c2 	beq.w	80197c0 <uxr_read_framed_msg+0x2dc>
 801963c:	18e2      	adds	r2, r4, r3
 801963e:	7891      	ldrb	r1, [r2, #2]
 8019640:	297d      	cmp	r1, #125	; 0x7d
 8019642:	f000 814c 	beq.w	80198de <uxr_read_framed_msg+0x3fa>
 8019646:	3301      	adds	r3, #1
 8019648:	085a      	lsrs	r2, r3, #1
 801964a:	fba5 0202 	umull	r0, r2, r5, r2
 801964e:	0892      	lsrs	r2, r2, #2
 8019650:	202a      	movs	r0, #42	; 0x2a
 8019652:	fb00 3312 	mls	r3, r0, r2, r3
 8019656:	297e      	cmp	r1, #126	; 0x7e
 8019658:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801965c:	f000 81ca 	beq.w	80199f4 <uxr_read_framed_msg+0x510>
 8019660:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8019662:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8019666:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019668:	b29b      	uxth	r3, r3
 801966a:	2000      	movs	r0, #0
 801966c:	428b      	cmp	r3, r1
 801966e:	8623      	strh	r3, [r4, #48]	; 0x30
 8019670:	8660      	strh	r0, [r4, #50]	; 0x32
 8019672:	86e0      	strh	r0, [r4, #54]	; 0x36
 8019674:	f240 80df 	bls.w	8019836 <uxr_read_framed_msg+0x352>
 8019678:	7020      	strb	r0, [r4, #0]
 801967a:	b003      	add	sp, #12
 801967c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019680:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8019684:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019688:	4299      	cmp	r1, r3
 801968a:	f000 80a8 	beq.w	80197de <uxr_read_framed_msg+0x2fa>
 801968e:	18e2      	adds	r2, r4, r3
 8019690:	7890      	ldrb	r0, [r2, #2]
 8019692:	287d      	cmp	r0, #125	; 0x7d
 8019694:	f000 8164 	beq.w	8019960 <uxr_read_framed_msg+0x47c>
 8019698:	3301      	adds	r3, #1
 801969a:	085a      	lsrs	r2, r3, #1
 801969c:	fba5 1202 	umull	r1, r2, r5, r2
 80196a0:	0892      	lsrs	r2, r2, #2
 80196a2:	212a      	movs	r1, #42	; 0x2a
 80196a4:	fb01 3312 	mls	r3, r1, r2, r3
 80196a8:	287e      	cmp	r0, #126	; 0x7e
 80196aa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80196ae:	f000 8191 	beq.w	80199d4 <uxr_read_framed_msg+0x4f0>
 80196b2:	2304      	movs	r3, #4
 80196b4:	8620      	strh	r0, [r4, #48]	; 0x30
 80196b6:	7023      	strb	r3, [r4, #0]
 80196b8:	e725      	b.n	8019506 <uxr_read_framed_msg+0x22>
 80196ba:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80196be:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80196c2:	4290      	cmp	r0, r2
 80196c4:	f000 80b3 	beq.w	801982e <uxr_read_framed_msg+0x34a>
 80196c8:	18a3      	adds	r3, r4, r2
 80196ca:	7899      	ldrb	r1, [r3, #2]
 80196cc:	297d      	cmp	r1, #125	; 0x7d
 80196ce:	f000 8164 	beq.w	801999a <uxr_read_framed_msg+0x4b6>
 80196d2:	3201      	adds	r2, #1
 80196d4:	0850      	lsrs	r0, r2, #1
 80196d6:	fba5 3000 	umull	r3, r0, r5, r0
 80196da:	0880      	lsrs	r0, r0, #2
 80196dc:	232a      	movs	r3, #42	; 0x2a
 80196de:	fb03 2210 	mls	r2, r3, r0, r2
 80196e2:	297e      	cmp	r1, #126	; 0x7e
 80196e4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80196e8:	f000 8188 	beq.w	80199fc <uxr_read_framed_msg+0x518>
 80196ec:	7863      	ldrb	r3, [r4, #1]
 80196ee:	428b      	cmp	r3, r1
 80196f0:	bf0c      	ite	eq
 80196f2:	2303      	moveq	r3, #3
 80196f4:	2300      	movne	r3, #0
 80196f6:	7023      	strb	r3, [r4, #0]
 80196f8:	e705      	b.n	8019506 <uxr_read_framed_msg+0x22>
 80196fa:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80196fe:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8019702:	2200      	movs	r2, #0
 8019704:	4299      	cmp	r1, r3
 8019706:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 801970a:	d06c      	beq.n	80197e6 <uxr_read_framed_msg+0x302>
 801970c:	18e2      	adds	r2, r4, r3
 801970e:	7890      	ldrb	r0, [r2, #2]
 8019710:	287d      	cmp	r0, #125	; 0x7d
 8019712:	f000 8101 	beq.w	8019918 <uxr_read_framed_msg+0x434>
 8019716:	3301      	adds	r3, #1
 8019718:	085a      	lsrs	r2, r3, #1
 801971a:	fba5 1202 	umull	r1, r2, r5, r2
 801971e:	0892      	lsrs	r2, r2, #2
 8019720:	212a      	movs	r1, #42	; 0x2a
 8019722:	fb01 3312 	mls	r3, r1, r2, r3
 8019726:	287e      	cmp	r0, #126	; 0x7e
 8019728:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801972c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019730:	d059      	beq.n	80197e6 <uxr_read_framed_msg+0x302>
 8019732:	2302      	movs	r3, #2
 8019734:	7023      	strb	r3, [r4, #0]
 8019736:	e6e6      	b.n	8019506 <uxr_read_framed_msg+0x22>
 8019738:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 801973c:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019740:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8019744:	1c51      	adds	r1, r2, #1
 8019746:	084b      	lsrs	r3, r1, #1
 8019748:	fba5 c303 	umull	ip, r3, r5, r3
 801974c:	089b      	lsrs	r3, r3, #2
 801974e:	fb0e 1313 	mls	r3, lr, r3, r1
 8019752:	4592      	cmp	sl, r2
 8019754:	eb04 0002 	add.w	r0, r4, r2
 8019758:	b2da      	uxtb	r2, r3
 801975a:	f43f af04 	beq.w	8019566 <uxr_read_framed_msg+0x82>
 801975e:	7883      	ldrb	r3, [r0, #2]
 8019760:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8019764:	2b7e      	cmp	r3, #126	; 0x7e
 8019766:	d1ed      	bne.n	8019744 <uxr_read_framed_msg+0x260>
 8019768:	2301      	movs	r3, #1
 801976a:	7023      	strb	r3, [r4, #0]
 801976c:	e6cb      	b.n	8019506 <uxr_read_framed_msg+0x22>
 801976e:	f100 0c01 	add.w	ip, r0, #1
 8019772:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019776:	fba5 8202 	umull	r8, r2, r5, r2
 801977a:	0892      	lsrs	r2, r2, #2
 801977c:	fb01 c212 	mls	r2, r1, r2, ip
 8019780:	eb04 0c02 	add.w	ip, r4, r2
 8019784:	b2d2      	uxtb	r2, r2
 8019786:	4592      	cmp	sl, r2
 8019788:	f100 0002 	add.w	r0, r0, #2
 801978c:	f43f af47 	beq.w	801961e <uxr_read_framed_msg+0x13a>
 8019790:	0842      	lsrs	r2, r0, #1
 8019792:	f89c a002 	ldrb.w	sl, [ip, #2]
 8019796:	fba5 8202 	umull	r8, r2, r5, r2
 801979a:	0892      	lsrs	r2, r2, #2
 801979c:	fb01 0012 	mls	r0, r1, r2, r0
 80197a0:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 80197a4:	f08a 0c20 	eor.w	ip, sl, #32
 80197a8:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 80197ac:	f47f af11 	bne.w	80195d2 <uxr_read_framed_msg+0xee>
 80197b0:	459e      	cmp	lr, r3
 80197b2:	ee17 8a90 	vmov	r8, s15
 80197b6:	f43f af37 	beq.w	8019628 <uxr_read_framed_msg+0x144>
 80197ba:	2301      	movs	r3, #1
 80197bc:	7023      	strb	r3, [r4, #0]
 80197be:	e6a2      	b.n	8019506 <uxr_read_framed_msg+0x22>
 80197c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80197c2:	9300      	str	r3, [sp, #0]
 80197c4:	2301      	movs	r3, #1
 80197c6:	9301      	str	r3, [sp, #4]
 80197c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197ca:	464a      	mov	r2, r9
 80197cc:	4641      	mov	r1, r8
 80197ce:	4620      	mov	r0, r4
 80197d0:	f7ff fe06 	bl	80193e0 <uxr_framing_read_transport>
 80197d4:	2800      	cmp	r0, #0
 80197d6:	f43f aec6 	beq.w	8019566 <uxr_read_framed_msg+0x82>
 80197da:	7823      	ldrb	r3, [r4, #0]
 80197dc:	e693      	b.n	8019506 <uxr_read_framed_msg+0x22>
 80197de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80197e0:	9300      	str	r3, [sp, #0]
 80197e2:	2302      	movs	r3, #2
 80197e4:	e7ef      	b.n	80197c6 <uxr_read_framed_msg+0x2e2>
 80197e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80197e8:	9300      	str	r3, [sp, #0]
 80197ea:	2304      	movs	r3, #4
 80197ec:	9301      	str	r3, [sp, #4]
 80197ee:	464a      	mov	r2, r9
 80197f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197f2:	4641      	mov	r1, r8
 80197f4:	4620      	mov	r0, r4
 80197f6:	f7ff fdf3 	bl	80193e0 <uxr_framing_read_transport>
 80197fa:	2800      	cmp	r0, #0
 80197fc:	d1ed      	bne.n	80197da <uxr_read_framed_msg+0x2f6>
 80197fe:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8019802:	2b7e      	cmp	r3, #126	; 0x7e
 8019804:	d0e9      	beq.n	80197da <uxr_read_framed_msg+0x2f6>
 8019806:	e6ae      	b.n	8019566 <uxr_read_framed_msg+0x82>
 8019808:	30c30c31 	.word	0x30c30c31
 801980c:	0801cbd8 	.word	0x0801cbd8
 8019810:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019812:	9300      	str	r3, [sp, #0]
 8019814:	2305      	movs	r3, #5
 8019816:	9301      	str	r3, [sp, #4]
 8019818:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801981a:	f7ff fde1 	bl	80193e0 <uxr_framing_read_transport>
 801981e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8019822:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8019826:	429a      	cmp	r2, r3
 8019828:	f43f ae9d 	beq.w	8019566 <uxr_read_framed_msg+0x82>
 801982c:	e668      	b.n	8019500 <uxr_read_framed_msg+0x1c>
 801982e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019830:	9300      	str	r3, [sp, #0]
 8019832:	2303      	movs	r3, #3
 8019834:	e7c7      	b.n	80197c6 <uxr_read_framed_msg+0x2e2>
 8019836:	2305      	movs	r3, #5
 8019838:	7023      	strb	r3, [r4, #0]
 801983a:	e664      	b.n	8019506 <uxr_read_framed_msg+0x22>
 801983c:	ee17 8a90 	vmov	r8, s15
 8019840:	f43f aef2 	beq.w	8019628 <uxr_read_framed_msg+0x144>
 8019844:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8019848:	d08e      	beq.n	8019768 <uxr_read_framed_msg+0x284>
 801984a:	ebae 0303 	sub.w	r3, lr, r3
 801984e:	3302      	adds	r3, #2
 8019850:	9301      	str	r3, [sp, #4]
 8019852:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019854:	9300      	str	r3, [sp, #0]
 8019856:	e7b7      	b.n	80197c8 <uxr_read_framed_msg+0x2e4>
 8019858:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801985a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801985e:	7013      	strb	r3, [r2, #0]
 8019860:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8019862:	b003      	add	sp, #12
 8019864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019868:	f103 0c01 	add.w	ip, r3, #1
 801986c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019870:	fba5 0202 	umull	r0, r2, r5, r2
 8019874:	0892      	lsrs	r2, r2, #2
 8019876:	202a      	movs	r0, #42	; 0x2a
 8019878:	fb00 c212 	mls	r2, r0, r2, ip
 801987c:	fa5f fc82 	uxtb.w	ip, r2
 8019880:	4561      	cmp	r1, ip
 8019882:	d09d      	beq.n	80197c0 <uxr_read_framed_msg+0x2dc>
 8019884:	3302      	adds	r3, #2
 8019886:	4422      	add	r2, r4
 8019888:	0859      	lsrs	r1, r3, #1
 801988a:	7892      	ldrb	r2, [r2, #2]
 801988c:	fba5 c101 	umull	ip, r1, r5, r1
 8019890:	0889      	lsrs	r1, r1, #2
 8019892:	fb00 3311 	mls	r3, r0, r1, r3
 8019896:	2a7e      	cmp	r2, #126	; 0x7e
 8019898:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801989c:	f000 80aa 	beq.w	80199f4 <uxr_read_framed_msg+0x510>
 80198a0:	f082 0220 	eor.w	r2, r2, #32
 80198a4:	e654      	b.n	8019550 <uxr_read_framed_msg+0x6c>
 80198a6:	1c58      	adds	r0, r3, #1
 80198a8:	0842      	lsrs	r2, r0, #1
 80198aa:	fba5 c202 	umull	ip, r2, r5, r2
 80198ae:	0892      	lsrs	r2, r2, #2
 80198b0:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80198b4:	fb0c 0212 	mls	r2, ip, r2, r0
 80198b8:	b2d0      	uxtb	r0, r2
 80198ba:	4281      	cmp	r1, r0
 80198bc:	d08f      	beq.n	80197de <uxr_read_framed_msg+0x2fa>
 80198be:	4422      	add	r2, r4
 80198c0:	3302      	adds	r3, #2
 80198c2:	7890      	ldrb	r0, [r2, #2]
 80198c4:	085a      	lsrs	r2, r3, #1
 80198c6:	fba5 1202 	umull	r1, r2, r5, r2
 80198ca:	0892      	lsrs	r2, r2, #2
 80198cc:	fb0c 3312 	mls	r3, ip, r2, r3
 80198d0:	287e      	cmp	r0, #126	; 0x7e
 80198d2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80198d6:	d07d      	beq.n	80199d4 <uxr_read_framed_msg+0x4f0>
 80198d8:	f080 0020 	eor.w	r0, r0, #32
 80198dc:	e660      	b.n	80195a0 <uxr_read_framed_msg+0xbc>
 80198de:	1c59      	adds	r1, r3, #1
 80198e0:	084a      	lsrs	r2, r1, #1
 80198e2:	fba5 c202 	umull	ip, r2, r5, r2
 80198e6:	0892      	lsrs	r2, r2, #2
 80198e8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80198ec:	fb0c 1212 	mls	r2, ip, r2, r1
 80198f0:	b2d1      	uxtb	r1, r2
 80198f2:	4288      	cmp	r0, r1
 80198f4:	f43f af64 	beq.w	80197c0 <uxr_read_framed_msg+0x2dc>
 80198f8:	4422      	add	r2, r4
 80198fa:	3302      	adds	r3, #2
 80198fc:	7891      	ldrb	r1, [r2, #2]
 80198fe:	085a      	lsrs	r2, r3, #1
 8019900:	fba5 0202 	umull	r0, r2, r5, r2
 8019904:	0892      	lsrs	r2, r2, #2
 8019906:	fb0c 3312 	mls	r3, ip, r2, r3
 801990a:	297e      	cmp	r1, #126	; 0x7e
 801990c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019910:	d070      	beq.n	80199f4 <uxr_read_framed_msg+0x510>
 8019912:	f081 0120 	eor.w	r1, r1, #32
 8019916:	e6a3      	b.n	8019660 <uxr_read_framed_msg+0x17c>
 8019918:	f103 0c01 	add.w	ip, r3, #1
 801991c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8019920:	fba5 0202 	umull	r0, r2, r5, r2
 8019924:	0892      	lsrs	r2, r2, #2
 8019926:	202a      	movs	r0, #42	; 0x2a
 8019928:	fb00 c212 	mls	r2, r0, r2, ip
 801992c:	fa5f fc82 	uxtb.w	ip, r2
 8019930:	4561      	cmp	r1, ip
 8019932:	f43f af58 	beq.w	80197e6 <uxr_read_framed_msg+0x302>
 8019936:	4422      	add	r2, r4
 8019938:	3302      	adds	r3, #2
 801993a:	7891      	ldrb	r1, [r2, #2]
 801993c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8019940:	085a      	lsrs	r2, r3, #1
 8019942:	fba5 c202 	umull	ip, r2, r5, r2
 8019946:	0892      	lsrs	r2, r2, #2
 8019948:	fb00 3312 	mls	r3, r0, r2, r3
 801994c:	297e      	cmp	r1, #126	; 0x7e
 801994e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019952:	f43f af48 	beq.w	80197e6 <uxr_read_framed_msg+0x302>
 8019956:	f081 0120 	eor.w	r1, r1, #32
 801995a:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801995e:	e6e8      	b.n	8019732 <uxr_read_framed_msg+0x24e>
 8019960:	1c58      	adds	r0, r3, #1
 8019962:	0842      	lsrs	r2, r0, #1
 8019964:	fba5 c202 	umull	ip, r2, r5, r2
 8019968:	0892      	lsrs	r2, r2, #2
 801996a:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801996e:	fb0c 0212 	mls	r2, ip, r2, r0
 8019972:	b2d0      	uxtb	r0, r2
 8019974:	4281      	cmp	r1, r0
 8019976:	f43f af32 	beq.w	80197de <uxr_read_framed_msg+0x2fa>
 801997a:	4422      	add	r2, r4
 801997c:	3302      	adds	r3, #2
 801997e:	7890      	ldrb	r0, [r2, #2]
 8019980:	085a      	lsrs	r2, r3, #1
 8019982:	fba5 1202 	umull	r1, r2, r5, r2
 8019986:	0892      	lsrs	r2, r2, #2
 8019988:	fb0c 3312 	mls	r3, ip, r2, r3
 801998c:	287e      	cmp	r0, #126	; 0x7e
 801998e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8019992:	d01f      	beq.n	80199d4 <uxr_read_framed_msg+0x4f0>
 8019994:	f080 0020 	eor.w	r0, r0, #32
 8019998:	e68b      	b.n	80196b2 <uxr_read_framed_msg+0x1ce>
 801999a:	1c51      	adds	r1, r2, #1
 801999c:	084b      	lsrs	r3, r1, #1
 801999e:	fba5 c303 	umull	ip, r3, r5, r3
 80199a2:	089b      	lsrs	r3, r3, #2
 80199a4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80199a8:	fb0c 1313 	mls	r3, ip, r3, r1
 80199ac:	b2d9      	uxtb	r1, r3
 80199ae:	4288      	cmp	r0, r1
 80199b0:	f43f af3d 	beq.w	801982e <uxr_read_framed_msg+0x34a>
 80199b4:	3202      	adds	r2, #2
 80199b6:	4423      	add	r3, r4
 80199b8:	0850      	lsrs	r0, r2, #1
 80199ba:	789b      	ldrb	r3, [r3, #2]
 80199bc:	fba5 1000 	umull	r1, r0, r5, r0
 80199c0:	0880      	lsrs	r0, r0, #2
 80199c2:	fb0c 2210 	mls	r2, ip, r0, r2
 80199c6:	2b7e      	cmp	r3, #126	; 0x7e
 80199c8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80199cc:	d016      	beq.n	80199fc <uxr_read_framed_msg+0x518>
 80199ce:	f083 0120 	eor.w	r1, r3, #32
 80199d2:	e68b      	b.n	80196ec <uxr_read_framed_msg+0x208>
 80199d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80199d6:	9300      	str	r3, [sp, #0]
 80199d8:	2302      	movs	r3, #2
 80199da:	9301      	str	r3, [sp, #4]
 80199dc:	464a      	mov	r2, r9
 80199de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80199e0:	4641      	mov	r1, r8
 80199e2:	4620      	mov	r0, r4
 80199e4:	f7ff fcfc 	bl	80193e0 <uxr_framing_read_transport>
 80199e8:	2800      	cmp	r0, #0
 80199ea:	f47f aef6 	bne.w	80197da <uxr_read_framed_msg+0x2f6>
 80199ee:	2301      	movs	r3, #1
 80199f0:	7023      	strb	r3, [r4, #0]
 80199f2:	e588      	b.n	8019506 <uxr_read_framed_msg+0x22>
 80199f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80199f6:	9300      	str	r3, [sp, #0]
 80199f8:	2301      	movs	r3, #1
 80199fa:	e7ee      	b.n	80199da <uxr_read_framed_msg+0x4f6>
 80199fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80199fe:	9300      	str	r3, [sp, #0]
 8019a00:	2303      	movs	r3, #3
 8019a02:	e7ea      	b.n	80199da <uxr_read_framed_msg+0x4f6>
 8019a04:	ee17 8a90 	vmov	r8, s15
 8019a08:	e6ae      	b.n	8019768 <uxr_read_framed_msg+0x284>
 8019a0a:	bf00      	nop

08019a0c <rcl_get_default_domain_id>:
 8019a0c:	b530      	push	{r4, r5, lr}
 8019a0e:	b083      	sub	sp, #12
 8019a10:	2300      	movs	r3, #0
 8019a12:	9300      	str	r3, [sp, #0]
 8019a14:	b1d0      	cbz	r0, 8019a4c <rcl_get_default_domain_id+0x40>
 8019a16:	4604      	mov	r4, r0
 8019a18:	4669      	mov	r1, sp
 8019a1a:	4815      	ldr	r0, [pc, #84]	; (8019a70 <rcl_get_default_domain_id+0x64>)
 8019a1c:	f7fc ffdc 	bl	80169d8 <rcutils_get_env>
 8019a20:	4602      	mov	r2, r0
 8019a22:	b110      	cbz	r0, 8019a2a <rcl_get_default_domain_id+0x1e>
 8019a24:	2001      	movs	r0, #1
 8019a26:	b003      	add	sp, #12
 8019a28:	bd30      	pop	{r4, r5, pc}
 8019a2a:	9b00      	ldr	r3, [sp, #0]
 8019a2c:	b18b      	cbz	r3, 8019a52 <rcl_get_default_domain_id+0x46>
 8019a2e:	7818      	ldrb	r0, [r3, #0]
 8019a30:	2800      	cmp	r0, #0
 8019a32:	d0f8      	beq.n	8019a26 <rcl_get_default_domain_id+0x1a>
 8019a34:	a901      	add	r1, sp, #4
 8019a36:	4618      	mov	r0, r3
 8019a38:	9201      	str	r2, [sp, #4]
 8019a3a:	f001 f9ef 	bl	801ae1c <strtoul>
 8019a3e:	4605      	mov	r5, r0
 8019a40:	b150      	cbz	r0, 8019a58 <rcl_get_default_domain_id+0x4c>
 8019a42:	1c43      	adds	r3, r0, #1
 8019a44:	d00d      	beq.n	8019a62 <rcl_get_default_domain_id+0x56>
 8019a46:	6025      	str	r5, [r4, #0]
 8019a48:	2000      	movs	r0, #0
 8019a4a:	e7ec      	b.n	8019a26 <rcl_get_default_domain_id+0x1a>
 8019a4c:	200b      	movs	r0, #11
 8019a4e:	b003      	add	sp, #12
 8019a50:	bd30      	pop	{r4, r5, pc}
 8019a52:	4618      	mov	r0, r3
 8019a54:	b003      	add	sp, #12
 8019a56:	bd30      	pop	{r4, r5, pc}
 8019a58:	9b01      	ldr	r3, [sp, #4]
 8019a5a:	781b      	ldrb	r3, [r3, #0]
 8019a5c:	2b00      	cmp	r3, #0
 8019a5e:	d0f2      	beq.n	8019a46 <rcl_get_default_domain_id+0x3a>
 8019a60:	e7e0      	b.n	8019a24 <rcl_get_default_domain_id+0x18>
 8019a62:	f000 fca3 	bl	801a3ac <__errno>
 8019a66:	6803      	ldr	r3, [r0, #0]
 8019a68:	2b22      	cmp	r3, #34	; 0x22
 8019a6a:	d1ec      	bne.n	8019a46 <rcl_get_default_domain_id+0x3a>
 8019a6c:	e7da      	b.n	8019a24 <rcl_get_default_domain_id+0x18>
 8019a6e:	bf00      	nop
 8019a70:	0801cdd8 	.word	0x0801cdd8

08019a74 <rcl_expand_topic_name>:
 8019a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a78:	b08b      	sub	sp, #44	; 0x2c
 8019a7a:	9306      	str	r3, [sp, #24]
 8019a7c:	2800      	cmp	r0, #0
 8019a7e:	f000 80ad 	beq.w	8019bdc <rcl_expand_topic_name+0x168>
 8019a82:	460e      	mov	r6, r1
 8019a84:	2900      	cmp	r1, #0
 8019a86:	f000 80a9 	beq.w	8019bdc <rcl_expand_topic_name+0x168>
 8019a8a:	4617      	mov	r7, r2
 8019a8c:	2a00      	cmp	r2, #0
 8019a8e:	f000 80a5 	beq.w	8019bdc <rcl_expand_topic_name+0x168>
 8019a92:	2b00      	cmp	r3, #0
 8019a94:	f000 80a2 	beq.w	8019bdc <rcl_expand_topic_name+0x168>
 8019a98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	f000 809e 	beq.w	8019bdc <rcl_expand_topic_name+0x168>
 8019aa0:	2200      	movs	r2, #0
 8019aa2:	a909      	add	r1, sp, #36	; 0x24
 8019aa4:	4680      	mov	r8, r0
 8019aa6:	f000 f9f5 	bl	8019e94 <rcl_validate_topic_name>
 8019aaa:	4604      	mov	r4, r0
 8019aac:	2800      	cmp	r0, #0
 8019aae:	f040 8096 	bne.w	8019bde <rcl_expand_topic_name+0x16a>
 8019ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	f040 809a 	bne.w	8019bee <rcl_expand_topic_name+0x17a>
 8019aba:	4602      	mov	r2, r0
 8019abc:	a909      	add	r1, sp, #36	; 0x24
 8019abe:	4630      	mov	r0, r6
 8019ac0:	f7fd fb8c 	bl	80171dc <rmw_validate_node_name>
 8019ac4:	2800      	cmp	r0, #0
 8019ac6:	f040 808e 	bne.w	8019be6 <rcl_expand_topic_name+0x172>
 8019aca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019acc:	2a00      	cmp	r2, #0
 8019ace:	f040 8093 	bne.w	8019bf8 <rcl_expand_topic_name+0x184>
 8019ad2:	a909      	add	r1, sp, #36	; 0x24
 8019ad4:	4638      	mov	r0, r7
 8019ad6:	f7fd fb63 	bl	80171a0 <rmw_validate_namespace>
 8019ada:	2800      	cmp	r0, #0
 8019adc:	f040 8083 	bne.w	8019be6 <rcl_expand_topic_name+0x172>
 8019ae0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019ae2:	2c00      	cmp	r4, #0
 8019ae4:	f040 80ed 	bne.w	8019cc2 <rcl_expand_topic_name+0x24e>
 8019ae8:	217b      	movs	r1, #123	; 0x7b
 8019aea:	4640      	mov	r0, r8
 8019aec:	f001 f8e5 	bl	801acba <strchr>
 8019af0:	f898 3000 	ldrb.w	r3, [r8]
 8019af4:	2b2f      	cmp	r3, #47	; 0x2f
 8019af6:	4605      	mov	r5, r0
 8019af8:	f000 809e 	beq.w	8019c38 <rcl_expand_topic_name+0x1c4>
 8019afc:	2b7e      	cmp	r3, #126	; 0x7e
 8019afe:	f040 80a2 	bne.w	8019c46 <rcl_expand_topic_name+0x1d2>
 8019b02:	4638      	mov	r0, r7
 8019b04:	f7e6 fb6e 	bl	80001e4 <strlen>
 8019b08:	4a82      	ldr	r2, [pc, #520]	; (8019d14 <rcl_expand_topic_name+0x2a0>)
 8019b0a:	4b83      	ldr	r3, [pc, #524]	; (8019d18 <rcl_expand_topic_name+0x2a4>)
 8019b0c:	2801      	cmp	r0, #1
 8019b0e:	bf18      	it	ne
 8019b10:	4613      	movne	r3, r2
 8019b12:	9302      	str	r3, [sp, #8]
 8019b14:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019b16:	9300      	str	r3, [sp, #0]
 8019b18:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8019b1c:	f108 0301 	add.w	r3, r8, #1
 8019b20:	9305      	str	r3, [sp, #20]
 8019b22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019b26:	9301      	str	r3, [sp, #4]
 8019b28:	ab14      	add	r3, sp, #80	; 0x50
 8019b2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019b2c:	f7fc ff7c 	bl	8016a28 <rcutils_format_string_limit>
 8019b30:	4682      	mov	sl, r0
 8019b32:	2800      	cmp	r0, #0
 8019b34:	f000 80c7 	beq.w	8019cc6 <rcl_expand_topic_name+0x252>
 8019b38:	2d00      	cmp	r5, #0
 8019b3a:	f000 80a2 	beq.w	8019c82 <rcl_expand_topic_name+0x20e>
 8019b3e:	217b      	movs	r1, #123	; 0x7b
 8019b40:	f001 f8bb 	bl	801acba <strchr>
 8019b44:	46d1      	mov	r9, sl
 8019b46:	4605      	mov	r5, r0
 8019b48:	9407      	str	r4, [sp, #28]
 8019b4a:	46d3      	mov	fp, sl
 8019b4c:	464c      	mov	r4, r9
 8019b4e:	2d00      	cmp	r5, #0
 8019b50:	f000 80be 	beq.w	8019cd0 <rcl_expand_topic_name+0x25c>
 8019b54:	217d      	movs	r1, #125	; 0x7d
 8019b56:	4620      	mov	r0, r4
 8019b58:	f001 f8af 	bl	801acba <strchr>
 8019b5c:	eba0 0905 	sub.w	r9, r0, r5
 8019b60:	f109 0a01 	add.w	sl, r9, #1
 8019b64:	486d      	ldr	r0, [pc, #436]	; (8019d1c <rcl_expand_topic_name+0x2a8>)
 8019b66:	4652      	mov	r2, sl
 8019b68:	4629      	mov	r1, r5
 8019b6a:	f001 f8bb 	bl	801ace4 <strncmp>
 8019b6e:	2800      	cmp	r0, #0
 8019b70:	d067      	beq.n	8019c42 <rcl_expand_topic_name+0x1ce>
 8019b72:	486b      	ldr	r0, [pc, #428]	; (8019d20 <rcl_expand_topic_name+0x2ac>)
 8019b74:	4652      	mov	r2, sl
 8019b76:	4629      	mov	r1, r5
 8019b78:	f001 f8b4 	bl	801ace4 <strncmp>
 8019b7c:	b130      	cbz	r0, 8019b8c <rcl_expand_topic_name+0x118>
 8019b7e:	4869      	ldr	r0, [pc, #420]	; (8019d24 <rcl_expand_topic_name+0x2b0>)
 8019b80:	4652      	mov	r2, sl
 8019b82:	4629      	mov	r1, r5
 8019b84:	f001 f8ae 	bl	801ace4 <strncmp>
 8019b88:	2800      	cmp	r0, #0
 8019b8a:	d137      	bne.n	8019bfc <rcl_expand_topic_name+0x188>
 8019b8c:	46b9      	mov	r9, r7
 8019b8e:	ab16      	add	r3, sp, #88	; 0x58
 8019b90:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019b94:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019b98:	ab14      	add	r3, sp, #80	; 0x50
 8019b9a:	4628      	mov	r0, r5
 8019b9c:	cb0c      	ldmia	r3, {r2, r3}
 8019b9e:	4651      	mov	r1, sl
 8019ba0:	f7fd f87e 	bl	8016ca0 <rcutils_strndup>
 8019ba4:	4605      	mov	r5, r0
 8019ba6:	2800      	cmp	r0, #0
 8019ba8:	f000 809c 	beq.w	8019ce4 <rcl_expand_topic_name+0x270>
 8019bac:	464a      	mov	r2, r9
 8019bae:	4620      	mov	r0, r4
 8019bb0:	ab14      	add	r3, sp, #80	; 0x50
 8019bb2:	4629      	mov	r1, r5
 8019bb4:	f7fc ff72 	bl	8016a9c <rcutils_repl_str>
 8019bb8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019bba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019bbc:	4604      	mov	r4, r0
 8019bbe:	4628      	mov	r0, r5
 8019bc0:	4798      	blx	r3
 8019bc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019bc4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019bc6:	4658      	mov	r0, fp
 8019bc8:	4798      	blx	r3
 8019bca:	2c00      	cmp	r4, #0
 8019bcc:	d07b      	beq.n	8019cc6 <rcl_expand_topic_name+0x252>
 8019bce:	217b      	movs	r1, #123	; 0x7b
 8019bd0:	4620      	mov	r0, r4
 8019bd2:	f001 f872 	bl	801acba <strchr>
 8019bd6:	46a3      	mov	fp, r4
 8019bd8:	4605      	mov	r5, r0
 8019bda:	e7b8      	b.n	8019b4e <rcl_expand_topic_name+0xda>
 8019bdc:	240b      	movs	r4, #11
 8019bde:	4620      	mov	r0, r4
 8019be0:	b00b      	add	sp, #44	; 0x2c
 8019be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019be6:	f7fb ffd7 	bl	8015b98 <rcl_convert_rmw_ret_to_rcl_ret>
 8019bea:	4604      	mov	r4, r0
 8019bec:	e7f7      	b.n	8019bde <rcl_expand_topic_name+0x16a>
 8019bee:	2467      	movs	r4, #103	; 0x67
 8019bf0:	4620      	mov	r0, r4
 8019bf2:	b00b      	add	sp, #44	; 0x2c
 8019bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bf8:	24c9      	movs	r4, #201	; 0xc9
 8019bfa:	e7f0      	b.n	8019bde <rcl_expand_topic_name+0x16a>
 8019bfc:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8019c00:	9806      	ldr	r0, [sp, #24]
 8019c02:	1c69      	adds	r1, r5, #1
 8019c04:	f7fd f966 	bl	8016ed4 <rcutils_string_map_getn>
 8019c08:	4681      	mov	r9, r0
 8019c0a:	2800      	cmp	r0, #0
 8019c0c:	d1bf      	bne.n	8019b8e <rcl_expand_topic_name+0x11a>
 8019c0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019c10:	aa16      	add	r2, sp, #88	; 0x58
 8019c12:	6018      	str	r0, [r3, #0]
 8019c14:	ca07      	ldmia	r2, {r0, r1, r2}
 8019c16:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019c1a:	ab14      	add	r3, sp, #80	; 0x50
 8019c1c:	cb0c      	ldmia	r3, {r2, r3}
 8019c1e:	4651      	mov	r1, sl
 8019c20:	4628      	mov	r0, r5
 8019c22:	f7fd f83d 	bl	8016ca0 <rcutils_strndup>
 8019c26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019c28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019c2a:	4798      	blx	r3
 8019c2c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019c2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019c30:	4658      	mov	r0, fp
 8019c32:	2469      	movs	r4, #105	; 0x69
 8019c34:	4798      	blx	r3
 8019c36:	e7d2      	b.n	8019bde <rcl_expand_topic_name+0x16a>
 8019c38:	2800      	cmp	r0, #0
 8019c3a:	d05b      	beq.n	8019cf4 <rcl_expand_topic_name+0x280>
 8019c3c:	46c1      	mov	r9, r8
 8019c3e:	46a2      	mov	sl, r4
 8019c40:	e782      	b.n	8019b48 <rcl_expand_topic_name+0xd4>
 8019c42:	46b1      	mov	r9, r6
 8019c44:	e7a3      	b.n	8019b8e <rcl_expand_topic_name+0x11a>
 8019c46:	2800      	cmp	r0, #0
 8019c48:	d1f8      	bne.n	8019c3c <rcl_expand_topic_name+0x1c8>
 8019c4a:	4638      	mov	r0, r7
 8019c4c:	f7e6 faca 	bl	80001e4 <strlen>
 8019c50:	4a35      	ldr	r2, [pc, #212]	; (8019d28 <rcl_expand_topic_name+0x2b4>)
 8019c52:	4b36      	ldr	r3, [pc, #216]	; (8019d2c <rcl_expand_topic_name+0x2b8>)
 8019c54:	f8cd 8010 	str.w	r8, [sp, #16]
 8019c58:	2801      	cmp	r0, #1
 8019c5a:	bf18      	it	ne
 8019c5c:	4613      	movne	r3, r2
 8019c5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8019c62:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8019c66:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019c68:	9703      	str	r7, [sp, #12]
 8019c6a:	9200      	str	r2, [sp, #0]
 8019c6c:	ab14      	add	r3, sp, #80	; 0x50
 8019c6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019c70:	f7fc feda 	bl	8016a28 <rcutils_format_string_limit>
 8019c74:	4682      	mov	sl, r0
 8019c76:	4653      	mov	r3, sl
 8019c78:	b32b      	cbz	r3, 8019cc6 <rcl_expand_topic_name+0x252>
 8019c7a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019c7c:	f8c3 a000 	str.w	sl, [r3]
 8019c80:	e7ad      	b.n	8019bde <rcl_expand_topic_name+0x16a>
 8019c82:	f89a 3000 	ldrb.w	r3, [sl]
 8019c86:	2b2f      	cmp	r3, #47	; 0x2f
 8019c88:	d0f7      	beq.n	8019c7a <rcl_expand_topic_name+0x206>
 8019c8a:	4638      	mov	r0, r7
 8019c8c:	f7e6 faaa 	bl	80001e4 <strlen>
 8019c90:	4a25      	ldr	r2, [pc, #148]	; (8019d28 <rcl_expand_topic_name+0x2b4>)
 8019c92:	4b26      	ldr	r3, [pc, #152]	; (8019d2c <rcl_expand_topic_name+0x2b8>)
 8019c94:	f8cd a010 	str.w	sl, [sp, #16]
 8019c98:	2801      	cmp	r0, #1
 8019c9a:	bf18      	it	ne
 8019c9c:	4613      	movne	r3, r2
 8019c9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8019ca2:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8019ca6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019ca8:	9703      	str	r7, [sp, #12]
 8019caa:	9200      	str	r2, [sp, #0]
 8019cac:	ab14      	add	r3, sp, #80	; 0x50
 8019cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019cb0:	f7fc feba 	bl	8016a28 <rcutils_format_string_limit>
 8019cb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019cb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019cb8:	4605      	mov	r5, r0
 8019cba:	4650      	mov	r0, sl
 8019cbc:	4798      	blx	r3
 8019cbe:	46aa      	mov	sl, r5
 8019cc0:	e7d9      	b.n	8019c76 <rcl_expand_topic_name+0x202>
 8019cc2:	24ca      	movs	r4, #202	; 0xca
 8019cc4:	e78b      	b.n	8019bde <rcl_expand_topic_name+0x16a>
 8019cc6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019cc8:	2300      	movs	r3, #0
 8019cca:	6013      	str	r3, [r2, #0]
 8019ccc:	240a      	movs	r4, #10
 8019cce:	e786      	b.n	8019bde <rcl_expand_topic_name+0x16a>
 8019cd0:	465b      	mov	r3, fp
 8019cd2:	9c07      	ldr	r4, [sp, #28]
 8019cd4:	46da      	mov	sl, fp
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d1d3      	bne.n	8019c82 <rcl_expand_topic_name+0x20e>
 8019cda:	f898 3000 	ldrb.w	r3, [r8]
 8019cde:	2b2f      	cmp	r3, #47	; 0x2f
 8019ce0:	d0cb      	beq.n	8019c7a <rcl_expand_topic_name+0x206>
 8019ce2:	e7b2      	b.n	8019c4a <rcl_expand_topic_name+0x1d6>
 8019ce4:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 8019ce8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019cea:	6015      	str	r5, [r2, #0]
 8019cec:	4658      	mov	r0, fp
 8019cee:	4798      	blx	r3
 8019cf0:	240a      	movs	r4, #10
 8019cf2:	e774      	b.n	8019bde <rcl_expand_topic_name+0x16a>
 8019cf4:	ab17      	add	r3, sp, #92	; 0x5c
 8019cf6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019cfa:	e88d 0003 	stmia.w	sp, {r0, r1}
 8019cfe:	ab14      	add	r3, sp, #80	; 0x50
 8019d00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019d02:	4640      	mov	r0, r8
 8019d04:	f7fc ffaa 	bl	8016c5c <rcutils_strdup>
 8019d08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019d0a:	2800      	cmp	r0, #0
 8019d0c:	6018      	str	r0, [r3, #0]
 8019d0e:	bf08      	it	eq
 8019d10:	240a      	moveq	r4, #10
 8019d12:	e764      	b.n	8019bde <rcl_expand_topic_name+0x16a>
 8019d14:	0801cde8 	.word	0x0801cde8
 8019d18:	0801bff4 	.word	0x0801bff4
 8019d1c:	0801cdf0 	.word	0x0801cdf0
 8019d20:	0801cdf8 	.word	0x0801cdf8
 8019d24:	0801ce00 	.word	0x0801ce00
 8019d28:	0801c764 	.word	0x0801c764
 8019d2c:	0801c004 	.word	0x0801c004

08019d30 <rcl_get_default_topic_name_substitutions>:
 8019d30:	2800      	cmp	r0, #0
 8019d32:	bf0c      	ite	eq
 8019d34:	200b      	moveq	r0, #11
 8019d36:	2000      	movne	r0, #0
 8019d38:	4770      	bx	lr
 8019d3a:	bf00      	nop

08019d3c <rcl_get_zero_initialized_guard_condition>:
 8019d3c:	4a03      	ldr	r2, [pc, #12]	; (8019d4c <rcl_get_zero_initialized_guard_condition+0x10>)
 8019d3e:	4603      	mov	r3, r0
 8019d40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019d44:	e883 0003 	stmia.w	r3, {r0, r1}
 8019d48:	4618      	mov	r0, r3
 8019d4a:	4770      	bx	lr
 8019d4c:	0801ce0c 	.word	0x0801ce0c

08019d50 <rcl_guard_condition_init_from_rmw>:
 8019d50:	b082      	sub	sp, #8
 8019d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d56:	b086      	sub	sp, #24
 8019d58:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8019d5c:	4604      	mov	r4, r0
 8019d5e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8019d62:	460e      	mov	r6, r1
 8019d64:	4617      	mov	r7, r2
 8019d66:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019d6a:	f10d 0e04 	add.w	lr, sp, #4
 8019d6e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019d72:	f8dc 3000 	ldr.w	r3, [ip]
 8019d76:	f8ce 3000 	str.w	r3, [lr]
 8019d7a:	a801      	add	r0, sp, #4
 8019d7c:	f7f6 f994 	bl	80100a8 <rcutils_allocator_is_valid>
 8019d80:	b350      	cbz	r0, 8019dd8 <rcl_guard_condition_init_from_rmw+0x88>
 8019d82:	b34c      	cbz	r4, 8019dd8 <rcl_guard_condition_init_from_rmw+0x88>
 8019d84:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8019d88:	f1b8 0f00 	cmp.w	r8, #0
 8019d8c:	d11e      	bne.n	8019dcc <rcl_guard_condition_init_from_rmw+0x7c>
 8019d8e:	b31f      	cbz	r7, 8019dd8 <rcl_guard_condition_init_from_rmw+0x88>
 8019d90:	4638      	mov	r0, r7
 8019d92:	f7fb ff1f 	bl	8015bd4 <rcl_context_is_valid>
 8019d96:	b328      	cbz	r0, 8019de4 <rcl_guard_condition_init_from_rmw+0x94>
 8019d98:	9b01      	ldr	r3, [sp, #4]
 8019d9a:	9905      	ldr	r1, [sp, #20]
 8019d9c:	201c      	movs	r0, #28
 8019d9e:	4798      	blx	r3
 8019da0:	4605      	mov	r5, r0
 8019da2:	6060      	str	r0, [r4, #4]
 8019da4:	b358      	cbz	r0, 8019dfe <rcl_guard_condition_init_from_rmw+0xae>
 8019da6:	b1fe      	cbz	r6, 8019de8 <rcl_guard_condition_init_from_rmw+0x98>
 8019da8:	6006      	str	r6, [r0, #0]
 8019daa:	f880 8004 	strb.w	r8, [r0, #4]
 8019dae:	ac01      	add	r4, sp, #4
 8019db0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019db2:	f105 0c08 	add.w	ip, r5, #8
 8019db6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019dba:	6823      	ldr	r3, [r4, #0]
 8019dbc:	f8cc 3000 	str.w	r3, [ip]
 8019dc0:	2000      	movs	r0, #0
 8019dc2:	b006      	add	sp, #24
 8019dc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019dc8:	b002      	add	sp, #8
 8019dca:	4770      	bx	lr
 8019dcc:	2064      	movs	r0, #100	; 0x64
 8019dce:	b006      	add	sp, #24
 8019dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019dd4:	b002      	add	sp, #8
 8019dd6:	4770      	bx	lr
 8019dd8:	200b      	movs	r0, #11
 8019dda:	b006      	add	sp, #24
 8019ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019de0:	b002      	add	sp, #8
 8019de2:	4770      	bx	lr
 8019de4:	2065      	movs	r0, #101	; 0x65
 8019de6:	e7f2      	b.n	8019dce <rcl_guard_condition_init_from_rmw+0x7e>
 8019de8:	6838      	ldr	r0, [r7, #0]
 8019dea:	3028      	adds	r0, #40	; 0x28
 8019dec:	f000 fa50 	bl	801a290 <rmw_create_guard_condition>
 8019df0:	6028      	str	r0, [r5, #0]
 8019df2:	6865      	ldr	r5, [r4, #4]
 8019df4:	682e      	ldr	r6, [r5, #0]
 8019df6:	b126      	cbz	r6, 8019e02 <rcl_guard_condition_init_from_rmw+0xb2>
 8019df8:	2301      	movs	r3, #1
 8019dfa:	712b      	strb	r3, [r5, #4]
 8019dfc:	e7d7      	b.n	8019dae <rcl_guard_condition_init_from_rmw+0x5e>
 8019dfe:	200a      	movs	r0, #10
 8019e00:	e7e5      	b.n	8019dce <rcl_guard_condition_init_from_rmw+0x7e>
 8019e02:	4628      	mov	r0, r5
 8019e04:	9b02      	ldr	r3, [sp, #8]
 8019e06:	9905      	ldr	r1, [sp, #20]
 8019e08:	4798      	blx	r3
 8019e0a:	6066      	str	r6, [r4, #4]
 8019e0c:	2001      	movs	r0, #1
 8019e0e:	e7de      	b.n	8019dce <rcl_guard_condition_init_from_rmw+0x7e>

08019e10 <rcl_guard_condition_fini>:
 8019e10:	b570      	push	{r4, r5, r6, lr}
 8019e12:	b082      	sub	sp, #8
 8019e14:	b1f0      	cbz	r0, 8019e54 <rcl_guard_condition_fini+0x44>
 8019e16:	6843      	ldr	r3, [r0, #4]
 8019e18:	4604      	mov	r4, r0
 8019e1a:	b163      	cbz	r3, 8019e36 <rcl_guard_condition_fini+0x26>
 8019e1c:	6818      	ldr	r0, [r3, #0]
 8019e1e:	68de      	ldr	r6, [r3, #12]
 8019e20:	6999      	ldr	r1, [r3, #24]
 8019e22:	b160      	cbz	r0, 8019e3e <rcl_guard_condition_fini+0x2e>
 8019e24:	791d      	ldrb	r5, [r3, #4]
 8019e26:	b965      	cbnz	r5, 8019e42 <rcl_guard_condition_fini+0x32>
 8019e28:	4618      	mov	r0, r3
 8019e2a:	47b0      	blx	r6
 8019e2c:	2300      	movs	r3, #0
 8019e2e:	4628      	mov	r0, r5
 8019e30:	6063      	str	r3, [r4, #4]
 8019e32:	b002      	add	sp, #8
 8019e34:	bd70      	pop	{r4, r5, r6, pc}
 8019e36:	461d      	mov	r5, r3
 8019e38:	4628      	mov	r0, r5
 8019e3a:	b002      	add	sp, #8
 8019e3c:	bd70      	pop	{r4, r5, r6, pc}
 8019e3e:	4605      	mov	r5, r0
 8019e40:	e7f2      	b.n	8019e28 <rcl_guard_condition_fini+0x18>
 8019e42:	9101      	str	r1, [sp, #4]
 8019e44:	f000 fa38 	bl	801a2b8 <rmw_destroy_guard_condition>
 8019e48:	1e05      	subs	r5, r0, #0
 8019e4a:	6863      	ldr	r3, [r4, #4]
 8019e4c:	9901      	ldr	r1, [sp, #4]
 8019e4e:	bf18      	it	ne
 8019e50:	2501      	movne	r5, #1
 8019e52:	e7e9      	b.n	8019e28 <rcl_guard_condition_fini+0x18>
 8019e54:	250b      	movs	r5, #11
 8019e56:	4628      	mov	r0, r5
 8019e58:	b002      	add	sp, #8
 8019e5a:	bd70      	pop	{r4, r5, r6, pc}

08019e5c <rcl_guard_condition_get_default_options>:
 8019e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e5e:	b087      	sub	sp, #28
 8019e60:	4606      	mov	r6, r0
 8019e62:	4668      	mov	r0, sp
 8019e64:	f7f6 f912 	bl	801008c <rcutils_get_default_allocator>
 8019e68:	4b09      	ldr	r3, [pc, #36]	; (8019e90 <rcl_guard_condition_get_default_options+0x34>)
 8019e6a:	46ee      	mov	lr, sp
 8019e6c:	469c      	mov	ip, r3
 8019e6e:	461d      	mov	r5, r3
 8019e70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019e74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019e78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019e7a:	4634      	mov	r4, r6
 8019e7c:	f8de 7000 	ldr.w	r7, [lr]
 8019e80:	f8cc 7000 	str.w	r7, [ip]
 8019e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019e86:	4630      	mov	r0, r6
 8019e88:	6027      	str	r7, [r4, #0]
 8019e8a:	b007      	add	sp, #28
 8019e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019e8e:	bf00      	nop
 8019e90:	20015ce4 	.word	0x20015ce4

08019e94 <rcl_validate_topic_name>:
 8019e94:	2800      	cmp	r0, #0
 8019e96:	d07a      	beq.n	8019f8e <rcl_validate_topic_name+0xfa>
 8019e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019e9c:	460e      	mov	r6, r1
 8019e9e:	2900      	cmp	r1, #0
 8019ea0:	d07c      	beq.n	8019f9c <rcl_validate_topic_name+0x108>
 8019ea2:	4617      	mov	r7, r2
 8019ea4:	4605      	mov	r5, r0
 8019ea6:	f7e6 f99d 	bl	80001e4 <strlen>
 8019eaa:	b1b0      	cbz	r0, 8019eda <rcl_validate_topic_name+0x46>
 8019eac:	f895 9000 	ldrb.w	r9, [r5]
 8019eb0:	f8df c180 	ldr.w	ip, [pc, #384]	; 801a034 <rcl_validate_topic_name+0x1a0>
 8019eb4:	f81c 3009 	ldrb.w	r3, [ip, r9]
 8019eb8:	f013 0304 	ands.w	r3, r3, #4
 8019ebc:	d169      	bne.n	8019f92 <rcl_validate_topic_name+0xfe>
 8019ebe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8019ec2:	f815 2008 	ldrb.w	r2, [r5, r8]
 8019ec6:	2a2f      	cmp	r2, #47	; 0x2f
 8019ec8:	d10e      	bne.n	8019ee8 <rcl_validate_topic_name+0x54>
 8019eca:	2202      	movs	r2, #2
 8019ecc:	6032      	str	r2, [r6, #0]
 8019ece:	b36f      	cbz	r7, 8019f2c <rcl_validate_topic_name+0x98>
 8019ed0:	f8c7 8000 	str.w	r8, [r7]
 8019ed4:	4618      	mov	r0, r3
 8019ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019eda:	2301      	movs	r3, #1
 8019edc:	6033      	str	r3, [r6, #0]
 8019ede:	b32f      	cbz	r7, 8019f2c <rcl_validate_topic_name+0x98>
 8019ee0:	2000      	movs	r0, #0
 8019ee2:	6038      	str	r0, [r7, #0]
 8019ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ee8:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 8019eec:	461c      	mov	r4, r3
 8019eee:	4619      	mov	r1, r3
 8019ef0:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8019ef4:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8019ef8:	f1be 0f09 	cmp.w	lr, #9
 8019efc:	d919      	bls.n	8019f32 <rcl_validate_topic_name+0x9e>
 8019efe:	f022 0e20 	bic.w	lr, r2, #32
 8019f02:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 8019f06:	f1be 0f19 	cmp.w	lr, #25
 8019f0a:	d912      	bls.n	8019f32 <rcl_validate_topic_name+0x9e>
 8019f0c:	2a5f      	cmp	r2, #95	; 0x5f
 8019f0e:	d019      	beq.n	8019f44 <rcl_validate_topic_name+0xb0>
 8019f10:	2a2f      	cmp	r2, #47	; 0x2f
 8019f12:	d051      	beq.n	8019fb8 <rcl_validate_topic_name+0x124>
 8019f14:	2a7e      	cmp	r2, #126	; 0x7e
 8019f16:	d048      	beq.n	8019faa <rcl_validate_topic_name+0x116>
 8019f18:	2a7b      	cmp	r2, #123	; 0x7b
 8019f1a:	d054      	beq.n	8019fc6 <rcl_validate_topic_name+0x132>
 8019f1c:	2a7d      	cmp	r2, #125	; 0x7d
 8019f1e:	d161      	bne.n	8019fe4 <rcl_validate_topic_name+0x150>
 8019f20:	2c00      	cmp	r4, #0
 8019f22:	d155      	bne.n	8019fd0 <rcl_validate_topic_name+0x13c>
 8019f24:	2305      	movs	r3, #5
 8019f26:	6033      	str	r3, [r6, #0]
 8019f28:	b107      	cbz	r7, 8019f2c <rcl_validate_topic_name+0x98>
 8019f2a:	6039      	str	r1, [r7, #0]
 8019f2c:	2000      	movs	r0, #0
 8019f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f32:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019f36:	0752      	lsls	r2, r2, #29
 8019f38:	d504      	bpl.n	8019f44 <rcl_validate_topic_name+0xb0>
 8019f3a:	b11c      	cbz	r4, 8019f44 <rcl_validate_topic_name+0xb0>
 8019f3c:	b111      	cbz	r1, 8019f44 <rcl_validate_topic_name+0xb0>
 8019f3e:	1e4a      	subs	r2, r1, #1
 8019f40:	429a      	cmp	r2, r3
 8019f42:	d02d      	beq.n	8019fa0 <rcl_validate_topic_name+0x10c>
 8019f44:	3101      	adds	r1, #1
 8019f46:	4288      	cmp	r0, r1
 8019f48:	d1d2      	bne.n	8019ef0 <rcl_validate_topic_name+0x5c>
 8019f4a:	2c00      	cmp	r4, #0
 8019f4c:	d145      	bne.n	8019fda <rcl_validate_topic_name+0x146>
 8019f4e:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8019f52:	d04f      	beq.n	8019ff4 <rcl_validate_topic_name+0x160>
 8019f54:	4620      	mov	r0, r4
 8019f56:	2301      	movs	r3, #1
 8019f58:	e006      	b.n	8019f68 <rcl_validate_topic_name+0xd4>
 8019f5a:	428b      	cmp	r3, r1
 8019f5c:	f105 0501 	add.w	r5, r5, #1
 8019f60:	f103 0201 	add.w	r2, r3, #1
 8019f64:	d236      	bcs.n	8019fd4 <rcl_validate_topic_name+0x140>
 8019f66:	4613      	mov	r3, r2
 8019f68:	4580      	cmp	r8, r0
 8019f6a:	f100 0001 	add.w	r0, r0, #1
 8019f6e:	d0f4      	beq.n	8019f5a <rcl_validate_topic_name+0xc6>
 8019f70:	782a      	ldrb	r2, [r5, #0]
 8019f72:	2a2f      	cmp	r2, #47	; 0x2f
 8019f74:	d1f1      	bne.n	8019f5a <rcl_validate_topic_name+0xc6>
 8019f76:	786a      	ldrb	r2, [r5, #1]
 8019f78:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019f7c:	0754      	lsls	r4, r2, #29
 8019f7e:	d5ec      	bpl.n	8019f5a <rcl_validate_topic_name+0xc6>
 8019f80:	2204      	movs	r2, #4
 8019f82:	6032      	str	r2, [r6, #0]
 8019f84:	2f00      	cmp	r7, #0
 8019f86:	d0d1      	beq.n	8019f2c <rcl_validate_topic_name+0x98>
 8019f88:	603b      	str	r3, [r7, #0]
 8019f8a:	2000      	movs	r0, #0
 8019f8c:	e7aa      	b.n	8019ee4 <rcl_validate_topic_name+0x50>
 8019f8e:	200b      	movs	r0, #11
 8019f90:	4770      	bx	lr
 8019f92:	2304      	movs	r3, #4
 8019f94:	6033      	str	r3, [r6, #0]
 8019f96:	2f00      	cmp	r7, #0
 8019f98:	d1a2      	bne.n	8019ee0 <rcl_validate_topic_name+0x4c>
 8019f9a:	e7c7      	b.n	8019f2c <rcl_validate_topic_name+0x98>
 8019f9c:	200b      	movs	r0, #11
 8019f9e:	e7a1      	b.n	8019ee4 <rcl_validate_topic_name+0x50>
 8019fa0:	2309      	movs	r3, #9
 8019fa2:	6033      	str	r3, [r6, #0]
 8019fa4:	2f00      	cmp	r7, #0
 8019fa6:	d1c0      	bne.n	8019f2a <rcl_validate_topic_name+0x96>
 8019fa8:	e7c0      	b.n	8019f2c <rcl_validate_topic_name+0x98>
 8019faa:	2900      	cmp	r1, #0
 8019fac:	d0ca      	beq.n	8019f44 <rcl_validate_topic_name+0xb0>
 8019fae:	2306      	movs	r3, #6
 8019fb0:	6033      	str	r3, [r6, #0]
 8019fb2:	2f00      	cmp	r7, #0
 8019fb4:	d1b9      	bne.n	8019f2a <rcl_validate_topic_name+0x96>
 8019fb6:	e7b9      	b.n	8019f2c <rcl_validate_topic_name+0x98>
 8019fb8:	2c00      	cmp	r4, #0
 8019fba:	d0c3      	beq.n	8019f44 <rcl_validate_topic_name+0xb0>
 8019fbc:	2308      	movs	r3, #8
 8019fbe:	6033      	str	r3, [r6, #0]
 8019fc0:	2f00      	cmp	r7, #0
 8019fc2:	d1b2      	bne.n	8019f2a <rcl_validate_topic_name+0x96>
 8019fc4:	e7b2      	b.n	8019f2c <rcl_validate_topic_name+0x98>
 8019fc6:	2c00      	cmp	r4, #0
 8019fc8:	d1f8      	bne.n	8019fbc <rcl_validate_topic_name+0x128>
 8019fca:	460b      	mov	r3, r1
 8019fcc:	2401      	movs	r4, #1
 8019fce:	e7b9      	b.n	8019f44 <rcl_validate_topic_name+0xb0>
 8019fd0:	2400      	movs	r4, #0
 8019fd2:	e7b7      	b.n	8019f44 <rcl_validate_topic_name+0xb0>
 8019fd4:	2000      	movs	r0, #0
 8019fd6:	6030      	str	r0, [r6, #0]
 8019fd8:	e784      	b.n	8019ee4 <rcl_validate_topic_name+0x50>
 8019fda:	2205      	movs	r2, #5
 8019fdc:	6032      	str	r2, [r6, #0]
 8019fde:	2f00      	cmp	r7, #0
 8019fe0:	d1d2      	bne.n	8019f88 <rcl_validate_topic_name+0xf4>
 8019fe2:	e7a3      	b.n	8019f2c <rcl_validate_topic_name+0x98>
 8019fe4:	2c00      	cmp	r4, #0
 8019fe6:	bf14      	ite	ne
 8019fe8:	2308      	movne	r3, #8
 8019fea:	2303      	moveq	r3, #3
 8019fec:	6033      	str	r3, [r6, #0]
 8019fee:	2f00      	cmp	r7, #0
 8019ff0:	d19b      	bne.n	8019f2a <rcl_validate_topic_name+0x96>
 8019ff2:	e79b      	b.n	8019f2c <rcl_validate_topic_name+0x98>
 8019ff4:	2301      	movs	r3, #1
 8019ff6:	e00a      	b.n	801a00e <rcl_validate_topic_name+0x17a>
 8019ff8:	2c01      	cmp	r4, #1
 8019ffa:	d013      	beq.n	801a024 <rcl_validate_topic_name+0x190>
 8019ffc:	4299      	cmp	r1, r3
 8019ffe:	f104 0401 	add.w	r4, r4, #1
 801a002:	f105 0501 	add.w	r5, r5, #1
 801a006:	f103 0201 	add.w	r2, r3, #1
 801a00a:	d9e3      	bls.n	8019fd4 <rcl_validate_topic_name+0x140>
 801a00c:	4613      	mov	r3, r2
 801a00e:	45a0      	cmp	r8, r4
 801a010:	d0f4      	beq.n	8019ffc <rcl_validate_topic_name+0x168>
 801a012:	782a      	ldrb	r2, [r5, #0]
 801a014:	2a2f      	cmp	r2, #47	; 0x2f
 801a016:	d1ef      	bne.n	8019ff8 <rcl_validate_topic_name+0x164>
 801a018:	786a      	ldrb	r2, [r5, #1]
 801a01a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801a01e:	0752      	lsls	r2, r2, #29
 801a020:	d5ec      	bpl.n	8019ffc <rcl_validate_topic_name+0x168>
 801a022:	e7ad      	b.n	8019f80 <rcl_validate_topic_name+0xec>
 801a024:	2307      	movs	r3, #7
 801a026:	6033      	str	r3, [r6, #0]
 801a028:	2f00      	cmp	r7, #0
 801a02a:	f43f af7f 	beq.w	8019f2c <rcl_validate_topic_name+0x98>
 801a02e:	603c      	str	r4, [r7, #0]
 801a030:	2000      	movs	r0, #0
 801a032:	e757      	b.n	8019ee4 <rcl_validate_topic_name+0x50>
 801a034:	0801cf07 	.word	0x0801cf07

0801a038 <on_status>:
 801a038:	b082      	sub	sp, #8
 801a03a:	b002      	add	sp, #8
 801a03c:	4770      	bx	lr
 801a03e:	bf00      	nop

0801a040 <on_topic>:
 801a040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a044:	4a22      	ldr	r2, [pc, #136]	; (801a0d0 <on_topic+0x90>)
 801a046:	b094      	sub	sp, #80	; 0x50
 801a048:	6812      	ldr	r2, [r2, #0]
 801a04a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801a04c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 801a050:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 801a054:	b3c2      	cbz	r2, 801a0c8 <on_topic+0x88>
 801a056:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801a05a:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801a05e:	e001      	b.n	801a064 <on_topic+0x24>
 801a060:	6852      	ldr	r2, [r2, #4]
 801a062:	b38a      	cbz	r2, 801a0c8 <on_topic+0x88>
 801a064:	6894      	ldr	r4, [r2, #8]
 801a066:	8aa3      	ldrh	r3, [r4, #20]
 801a068:	428b      	cmp	r3, r1
 801a06a:	d1f9      	bne.n	801a060 <on_topic+0x20>
 801a06c:	7da3      	ldrb	r3, [r4, #22]
 801a06e:	4283      	cmp	r3, r0
 801a070:	d1f6      	bne.n	801a060 <on_topic+0x20>
 801a072:	2248      	movs	r2, #72	; 0x48
 801a074:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801a078:	4668      	mov	r0, sp
 801a07a:	f000 fb95 	bl	801a7a8 <memcpy>
 801a07e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801a082:	cb0c      	ldmia	r3, {r2, r3}
 801a084:	4620      	mov	r0, r4
 801a086:	f7f6 fbe3 	bl	8010850 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a08a:	4607      	mov	r7, r0
 801a08c:	b1e0      	cbz	r0, 801a0c8 <on_topic+0x88>
 801a08e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801a092:	4632      	mov	r2, r6
 801a094:	4628      	mov	r0, r5
 801a096:	f108 0110 	add.w	r1, r8, #16
 801a09a:	f7fd fff1 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 801a09e:	b930      	cbnz	r0, 801a0ae <on_topic+0x6e>
 801a0a0:	480c      	ldr	r0, [pc, #48]	; (801a0d4 <on_topic+0x94>)
 801a0a2:	4639      	mov	r1, r7
 801a0a4:	b014      	add	sp, #80	; 0x50
 801a0a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a0aa:	f7fd b905 	b.w	80172b8 <put_memory>
 801a0ae:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801a0b2:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 801a0b6:	f7fd fdcd 	bl	8017c54 <rmw_uros_epoch_nanos>
 801a0ba:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801a0be:	2305      	movs	r3, #5
 801a0c0:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a0c4:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801a0c8:	b014      	add	sp, #80	; 0x50
 801a0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0ce:	bf00      	nop
 801a0d0:	20015bb4 	.word	0x20015bb4
 801a0d4:	20015ba4 	.word	0x20015ba4

0801a0d8 <on_request>:
 801a0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0dc:	4823      	ldr	r0, [pc, #140]	; (801a16c <on_request+0x94>)
 801a0de:	b094      	sub	sp, #80	; 0x50
 801a0e0:	6800      	ldr	r0, [r0, #0]
 801a0e2:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801a0e4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 801a0e8:	9113      	str	r1, [sp, #76]	; 0x4c
 801a0ea:	2800      	cmp	r0, #0
 801a0ec:	d03b      	beq.n	801a166 <on_request+0x8e>
 801a0ee:	461d      	mov	r5, r3
 801a0f0:	e001      	b.n	801a0f6 <on_request+0x1e>
 801a0f2:	6840      	ldr	r0, [r0, #4]
 801a0f4:	b3b8      	cbz	r0, 801a166 <on_request+0x8e>
 801a0f6:	6884      	ldr	r4, [r0, #8]
 801a0f8:	8b21      	ldrh	r1, [r4, #24]
 801a0fa:	4291      	cmp	r1, r2
 801a0fc:	d1f9      	bne.n	801a0f2 <on_request+0x1a>
 801a0fe:	2248      	movs	r2, #72	; 0x48
 801a100:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801a104:	4668      	mov	r0, sp
 801a106:	f000 fb4f 	bl	801a7a8 <memcpy>
 801a10a:	f104 0320 	add.w	r3, r4, #32
 801a10e:	cb0c      	ldmia	r3, {r2, r3}
 801a110:	4620      	mov	r0, r4
 801a112:	f7f6 fb9d 	bl	8010850 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a116:	4680      	mov	r8, r0
 801a118:	b328      	cbz	r0, 801a166 <on_request+0x8e>
 801a11a:	4638      	mov	r0, r7
 801a11c:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801a120:	4632      	mov	r2, r6
 801a122:	f107 0110 	add.w	r1, r7, #16
 801a126:	f7fd ffab 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 801a12a:	b930      	cbnz	r0, 801a13a <on_request+0x62>
 801a12c:	4810      	ldr	r0, [pc, #64]	; (801a170 <on_request+0x98>)
 801a12e:	4641      	mov	r1, r8
 801a130:	b014      	add	sp, #80	; 0x50
 801a132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a136:	f7fd b8bf 	b.w	80172b8 <put_memory>
 801a13a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a13c:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 801a140:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 801a144:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 801a148:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a14c:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a150:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a154:	f7fd fd7e 	bl	8017c54 <rmw_uros_epoch_nanos>
 801a158:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801a15c:	2303      	movs	r3, #3
 801a15e:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a162:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 801a166:	b014      	add	sp, #80	; 0x50
 801a168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a16c:	20015b84 	.word	0x20015b84
 801a170:	20015ba4 	.word	0x20015ba4

0801a174 <on_reply>:
 801a174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a178:	4821      	ldr	r0, [pc, #132]	; (801a200 <on_reply+0x8c>)
 801a17a:	b094      	sub	sp, #80	; 0x50
 801a17c:	6800      	ldr	r0, [r0, #0]
 801a17e:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801a180:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 801a184:	9113      	str	r1, [sp, #76]	; 0x4c
 801a186:	b3b8      	cbz	r0, 801a1f8 <on_reply+0x84>
 801a188:	461d      	mov	r5, r3
 801a18a:	e001      	b.n	801a190 <on_reply+0x1c>
 801a18c:	6840      	ldr	r0, [r0, #4]
 801a18e:	b398      	cbz	r0, 801a1f8 <on_reply+0x84>
 801a190:	6884      	ldr	r4, [r0, #8]
 801a192:	8b21      	ldrh	r1, [r4, #24]
 801a194:	4291      	cmp	r1, r2
 801a196:	d1f9      	bne.n	801a18c <on_reply+0x18>
 801a198:	2248      	movs	r2, #72	; 0x48
 801a19a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801a19e:	4668      	mov	r0, sp
 801a1a0:	f000 fb02 	bl	801a7a8 <memcpy>
 801a1a4:	f104 0320 	add.w	r3, r4, #32
 801a1a8:	cb0c      	ldmia	r3, {r2, r3}
 801a1aa:	4620      	mov	r0, r4
 801a1ac:	f7f6 fb50 	bl	8010850 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a1b0:	4680      	mov	r8, r0
 801a1b2:	b308      	cbz	r0, 801a1f8 <on_reply+0x84>
 801a1b4:	4638      	mov	r0, r7
 801a1b6:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801a1ba:	4632      	mov	r2, r6
 801a1bc:	f107 0110 	add.w	r1, r7, #16
 801a1c0:	f7fd ff5e 	bl	8018080 <ucdr_deserialize_array_uint8_t>
 801a1c4:	b930      	cbnz	r0, 801a1d4 <on_reply+0x60>
 801a1c6:	480f      	ldr	r0, [pc, #60]	; (801a204 <on_reply+0x90>)
 801a1c8:	4641      	mov	r1, r8
 801a1ca:	b014      	add	sp, #80	; 0x50
 801a1cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a1d0:	f7fd b872 	b.w	80172b8 <put_memory>
 801a1d4:	2200      	movs	r2, #0
 801a1d6:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 801a1da:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 801a1de:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 801a1e2:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 801a1e6:	f7fd fd35 	bl	8017c54 <rmw_uros_epoch_nanos>
 801a1ea:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 801a1ee:	2304      	movs	r3, #4
 801a1f0:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a1f4:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 801a1f8:	b014      	add	sp, #80	; 0x50
 801a1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a1fe:	bf00      	nop
 801a200:	20011298 	.word	0x20011298
 801a204:	20015ba4 	.word	0x20015ba4

0801a208 <rmw_destroy_client>:
 801a208:	b570      	push	{r4, r5, r6, lr}
 801a20a:	b128      	cbz	r0, 801a218 <rmw_destroy_client+0x10>
 801a20c:	4604      	mov	r4, r0
 801a20e:	6800      	ldr	r0, [r0, #0]
 801a210:	460d      	mov	r5, r1
 801a212:	f7f6 fbed 	bl	80109f0 <is_uxrce_rmw_identifier_valid>
 801a216:	b910      	cbnz	r0, 801a21e <rmw_destroy_client+0x16>
 801a218:	2401      	movs	r4, #1
 801a21a:	4620      	mov	r0, r4
 801a21c:	bd70      	pop	{r4, r5, r6, pc}
 801a21e:	6863      	ldr	r3, [r4, #4]
 801a220:	2b00      	cmp	r3, #0
 801a222:	d0f9      	beq.n	801a218 <rmw_destroy_client+0x10>
 801a224:	2d00      	cmp	r5, #0
 801a226:	d0f7      	beq.n	801a218 <rmw_destroy_client+0x10>
 801a228:	6828      	ldr	r0, [r5, #0]
 801a22a:	f7f6 fbe1 	bl	80109f0 <is_uxrce_rmw_identifier_valid>
 801a22e:	2800      	cmp	r0, #0
 801a230:	d0f2      	beq.n	801a218 <rmw_destroy_client+0x10>
 801a232:	686e      	ldr	r6, [r5, #4]
 801a234:	2e00      	cmp	r6, #0
 801a236:	d0ef      	beq.n	801a218 <rmw_destroy_client+0x10>
 801a238:	6864      	ldr	r4, [r4, #4]
 801a23a:	6932      	ldr	r2, [r6, #16]
 801a23c:	6920      	ldr	r0, [r4, #16]
 801a23e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a242:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a246:	6819      	ldr	r1, [r3, #0]
 801a248:	f7fe fe38 	bl	8018ebc <uxr_buffer_cancel_data>
 801a24c:	4602      	mov	r2, r0
 801a24e:	6920      	ldr	r0, [r4, #16]
 801a250:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a254:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a258:	f7f6 fb4a 	bl	80108f0 <run_xrce_session>
 801a25c:	6920      	ldr	r0, [r4, #16]
 801a25e:	6932      	ldr	r2, [r6, #16]
 801a260:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a264:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a268:	6819      	ldr	r1, [r3, #0]
 801a26a:	f7f9 f805 	bl	8013278 <uxr_buffer_delete_entity>
 801a26e:	4602      	mov	r2, r0
 801a270:	6920      	ldr	r0, [r4, #16]
 801a272:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a276:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a27a:	f7f6 fb39 	bl	80108f0 <run_xrce_session>
 801a27e:	2800      	cmp	r0, #0
 801a280:	4628      	mov	r0, r5
 801a282:	bf14      	ite	ne
 801a284:	2400      	movne	r4, #0
 801a286:	2402      	moveq	r4, #2
 801a288:	f7f6 fac0 	bl	801080c <rmw_uxrce_fini_client_memory>
 801a28c:	e7c5      	b.n	801a21a <rmw_destroy_client+0x12>
 801a28e:	bf00      	nop

0801a290 <rmw_create_guard_condition>:
 801a290:	b538      	push	{r3, r4, r5, lr}
 801a292:	4605      	mov	r5, r0
 801a294:	4807      	ldr	r0, [pc, #28]	; (801a2b4 <rmw_create_guard_condition+0x24>)
 801a296:	f7fc ffff 	bl	8017298 <get_memory>
 801a29a:	b148      	cbz	r0, 801a2b0 <rmw_create_guard_condition+0x20>
 801a29c:	6884      	ldr	r4, [r0, #8]
 801a29e:	2300      	movs	r3, #0
 801a2a0:	7423      	strb	r3, [r4, #16]
 801a2a2:	61e5      	str	r5, [r4, #28]
 801a2a4:	f7fd f81c 	bl	80172e0 <rmw_get_implementation_identifier>
 801a2a8:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801a2ac:	f104 0014 	add.w	r0, r4, #20
 801a2b0:	bd38      	pop	{r3, r4, r5, pc}
 801a2b2:	bf00      	nop
 801a2b4:	20015b44 	.word	0x20015b44

0801a2b8 <rmw_destroy_guard_condition>:
 801a2b8:	b508      	push	{r3, lr}
 801a2ba:	4b08      	ldr	r3, [pc, #32]	; (801a2dc <rmw_destroy_guard_condition+0x24>)
 801a2bc:	6819      	ldr	r1, [r3, #0]
 801a2be:	b911      	cbnz	r1, 801a2c6 <rmw_destroy_guard_condition+0xe>
 801a2c0:	e00a      	b.n	801a2d8 <rmw_destroy_guard_condition+0x20>
 801a2c2:	6849      	ldr	r1, [r1, #4]
 801a2c4:	b141      	cbz	r1, 801a2d8 <rmw_destroy_guard_condition+0x20>
 801a2c6:	688b      	ldr	r3, [r1, #8]
 801a2c8:	3314      	adds	r3, #20
 801a2ca:	4298      	cmp	r0, r3
 801a2cc:	d1f9      	bne.n	801a2c2 <rmw_destroy_guard_condition+0xa>
 801a2ce:	4803      	ldr	r0, [pc, #12]	; (801a2dc <rmw_destroy_guard_condition+0x24>)
 801a2d0:	f7fc fff2 	bl	80172b8 <put_memory>
 801a2d4:	2000      	movs	r0, #0
 801a2d6:	bd08      	pop	{r3, pc}
 801a2d8:	2001      	movs	r0, #1
 801a2da:	bd08      	pop	{r3, pc}
 801a2dc:	20015b44 	.word	0x20015b44

0801a2e0 <rosidl_runtime_c__String__init>:
 801a2e0:	b510      	push	{r4, lr}
 801a2e2:	4604      	mov	r4, r0
 801a2e4:	b086      	sub	sp, #24
 801a2e6:	b170      	cbz	r0, 801a306 <rosidl_runtime_c__String__init+0x26>
 801a2e8:	a801      	add	r0, sp, #4
 801a2ea:	f7f5 fecf 	bl	801008c <rcutils_get_default_allocator>
 801a2ee:	9b01      	ldr	r3, [sp, #4]
 801a2f0:	9905      	ldr	r1, [sp, #20]
 801a2f2:	2001      	movs	r0, #1
 801a2f4:	4798      	blx	r3
 801a2f6:	6020      	str	r0, [r4, #0]
 801a2f8:	b128      	cbz	r0, 801a306 <rosidl_runtime_c__String__init+0x26>
 801a2fa:	2100      	movs	r1, #0
 801a2fc:	2201      	movs	r2, #1
 801a2fe:	7001      	strb	r1, [r0, #0]
 801a300:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801a304:	4610      	mov	r0, r2
 801a306:	b006      	add	sp, #24
 801a308:	bd10      	pop	{r4, pc}
 801a30a:	bf00      	nop

0801a30c <rosidl_runtime_c__String__fini>:
 801a30c:	b320      	cbz	r0, 801a358 <rosidl_runtime_c__String__fini+0x4c>
 801a30e:	b510      	push	{r4, lr}
 801a310:	6803      	ldr	r3, [r0, #0]
 801a312:	b086      	sub	sp, #24
 801a314:	4604      	mov	r4, r0
 801a316:	b173      	cbz	r3, 801a336 <rosidl_runtime_c__String__fini+0x2a>
 801a318:	6883      	ldr	r3, [r0, #8]
 801a31a:	b1f3      	cbz	r3, 801a35a <rosidl_runtime_c__String__fini+0x4e>
 801a31c:	a801      	add	r0, sp, #4
 801a31e:	f7f5 feb5 	bl	801008c <rcutils_get_default_allocator>
 801a322:	9b02      	ldr	r3, [sp, #8]
 801a324:	9905      	ldr	r1, [sp, #20]
 801a326:	6820      	ldr	r0, [r4, #0]
 801a328:	4798      	blx	r3
 801a32a:	2300      	movs	r3, #0
 801a32c:	e9c4 3300 	strd	r3, r3, [r4]
 801a330:	60a3      	str	r3, [r4, #8]
 801a332:	b006      	add	sp, #24
 801a334:	bd10      	pop	{r4, pc}
 801a336:	6843      	ldr	r3, [r0, #4]
 801a338:	b9db      	cbnz	r3, 801a372 <rosidl_runtime_c__String__fini+0x66>
 801a33a:	6883      	ldr	r3, [r0, #8]
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d0f8      	beq.n	801a332 <rosidl_runtime_c__String__fini+0x26>
 801a340:	4b12      	ldr	r3, [pc, #72]	; (801a38c <rosidl_runtime_c__String__fini+0x80>)
 801a342:	4813      	ldr	r0, [pc, #76]	; (801a390 <rosidl_runtime_c__String__fini+0x84>)
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	2251      	movs	r2, #81	; 0x51
 801a348:	68db      	ldr	r3, [r3, #12]
 801a34a:	2101      	movs	r1, #1
 801a34c:	f000 f99e 	bl	801a68c <fwrite>
 801a350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a354:	f000 f830 	bl	801a3b8 <exit>
 801a358:	4770      	bx	lr
 801a35a:	4b0c      	ldr	r3, [pc, #48]	; (801a38c <rosidl_runtime_c__String__fini+0x80>)
 801a35c:	480d      	ldr	r0, [pc, #52]	; (801a394 <rosidl_runtime_c__String__fini+0x88>)
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	224c      	movs	r2, #76	; 0x4c
 801a362:	68db      	ldr	r3, [r3, #12]
 801a364:	2101      	movs	r1, #1
 801a366:	f000 f991 	bl	801a68c <fwrite>
 801a36a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a36e:	f000 f823 	bl	801a3b8 <exit>
 801a372:	4b06      	ldr	r3, [pc, #24]	; (801a38c <rosidl_runtime_c__String__fini+0x80>)
 801a374:	4808      	ldr	r0, [pc, #32]	; (801a398 <rosidl_runtime_c__String__fini+0x8c>)
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	224e      	movs	r2, #78	; 0x4e
 801a37a:	68db      	ldr	r3, [r3, #12]
 801a37c:	2101      	movs	r1, #1
 801a37e:	f000 f985 	bl	801a68c <fwrite>
 801a382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a386:	f000 f817 	bl	801a3b8 <exit>
 801a38a:	bf00      	nop
 801a38c:	200009bc 	.word	0x200009bc
 801a390:	0801ceb4 	.word	0x0801ceb4
 801a394:	0801ce14 	.word	0x0801ce14
 801a398:	0801ce64 	.word	0x0801ce64

0801a39c <calloc>:
 801a39c:	4b02      	ldr	r3, [pc, #8]	; (801a3a8 <calloc+0xc>)
 801a39e:	460a      	mov	r2, r1
 801a3a0:	4601      	mov	r1, r0
 801a3a2:	6818      	ldr	r0, [r3, #0]
 801a3a4:	f000 ba16 	b.w	801a7d4 <_calloc_r>
 801a3a8:	200009bc 	.word	0x200009bc

0801a3ac <__errno>:
 801a3ac:	4b01      	ldr	r3, [pc, #4]	; (801a3b4 <__errno+0x8>)
 801a3ae:	6818      	ldr	r0, [r3, #0]
 801a3b0:	4770      	bx	lr
 801a3b2:	bf00      	nop
 801a3b4:	200009bc 	.word	0x200009bc

0801a3b8 <exit>:
 801a3b8:	b508      	push	{r3, lr}
 801a3ba:	4b07      	ldr	r3, [pc, #28]	; (801a3d8 <exit+0x20>)
 801a3bc:	4604      	mov	r4, r0
 801a3be:	b113      	cbz	r3, 801a3c6 <exit+0xe>
 801a3c0:	2100      	movs	r1, #0
 801a3c2:	f3af 8000 	nop.w
 801a3c6:	4b05      	ldr	r3, [pc, #20]	; (801a3dc <exit+0x24>)
 801a3c8:	6818      	ldr	r0, [r3, #0]
 801a3ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a3cc:	b103      	cbz	r3, 801a3d0 <exit+0x18>
 801a3ce:	4798      	blx	r3
 801a3d0:	4620      	mov	r0, r4
 801a3d2:	f7e7 ff59 	bl	8002288 <_exit>
 801a3d6:	bf00      	nop
 801a3d8:	00000000 	.word	0x00000000
 801a3dc:	0801d068 	.word	0x0801d068

0801a3e0 <std>:
 801a3e0:	2300      	movs	r3, #0
 801a3e2:	b510      	push	{r4, lr}
 801a3e4:	4604      	mov	r4, r0
 801a3e6:	e9c0 3300 	strd	r3, r3, [r0]
 801a3ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a3ee:	6083      	str	r3, [r0, #8]
 801a3f0:	8181      	strh	r1, [r0, #12]
 801a3f2:	6643      	str	r3, [r0, #100]	; 0x64
 801a3f4:	81c2      	strh	r2, [r0, #14]
 801a3f6:	6183      	str	r3, [r0, #24]
 801a3f8:	4619      	mov	r1, r3
 801a3fa:	2208      	movs	r2, #8
 801a3fc:	305c      	adds	r0, #92	; 0x5c
 801a3fe:	f000 f9e1 	bl	801a7c4 <memset>
 801a402:	4b05      	ldr	r3, [pc, #20]	; (801a418 <std+0x38>)
 801a404:	6263      	str	r3, [r4, #36]	; 0x24
 801a406:	4b05      	ldr	r3, [pc, #20]	; (801a41c <std+0x3c>)
 801a408:	62a3      	str	r3, [r4, #40]	; 0x28
 801a40a:	4b05      	ldr	r3, [pc, #20]	; (801a420 <std+0x40>)
 801a40c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a40e:	4b05      	ldr	r3, [pc, #20]	; (801a424 <std+0x44>)
 801a410:	6224      	str	r4, [r4, #32]
 801a412:	6323      	str	r3, [r4, #48]	; 0x30
 801a414:	bd10      	pop	{r4, pc}
 801a416:	bf00      	nop
 801a418:	0801ac35 	.word	0x0801ac35
 801a41c:	0801ac57 	.word	0x0801ac57
 801a420:	0801ac8f 	.word	0x0801ac8f
 801a424:	0801acb3 	.word	0x0801acb3

0801a428 <_cleanup_r>:
 801a428:	4901      	ldr	r1, [pc, #4]	; (801a430 <_cleanup_r+0x8>)
 801a42a:	f000 b8af 	b.w	801a58c <_fwalk_reent>
 801a42e:	bf00      	nop
 801a430:	0801b1c9 	.word	0x0801b1c9

0801a434 <__sfmoreglue>:
 801a434:	b570      	push	{r4, r5, r6, lr}
 801a436:	2268      	movs	r2, #104	; 0x68
 801a438:	1e4d      	subs	r5, r1, #1
 801a43a:	4355      	muls	r5, r2
 801a43c:	460e      	mov	r6, r1
 801a43e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a442:	f000 fa49 	bl	801a8d8 <_malloc_r>
 801a446:	4604      	mov	r4, r0
 801a448:	b140      	cbz	r0, 801a45c <__sfmoreglue+0x28>
 801a44a:	2100      	movs	r1, #0
 801a44c:	e9c0 1600 	strd	r1, r6, [r0]
 801a450:	300c      	adds	r0, #12
 801a452:	60a0      	str	r0, [r4, #8]
 801a454:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a458:	f000 f9b4 	bl	801a7c4 <memset>
 801a45c:	4620      	mov	r0, r4
 801a45e:	bd70      	pop	{r4, r5, r6, pc}

0801a460 <__sfp_lock_acquire>:
 801a460:	4801      	ldr	r0, [pc, #4]	; (801a468 <__sfp_lock_acquire+0x8>)
 801a462:	f000 b98e 	b.w	801a782 <__retarget_lock_acquire_recursive>
 801a466:	bf00      	nop
 801a468:	20015cfa 	.word	0x20015cfa

0801a46c <__sfp_lock_release>:
 801a46c:	4801      	ldr	r0, [pc, #4]	; (801a474 <__sfp_lock_release+0x8>)
 801a46e:	f000 b989 	b.w	801a784 <__retarget_lock_release_recursive>
 801a472:	bf00      	nop
 801a474:	20015cfa 	.word	0x20015cfa

0801a478 <__sinit_lock_acquire>:
 801a478:	4801      	ldr	r0, [pc, #4]	; (801a480 <__sinit_lock_acquire+0x8>)
 801a47a:	f000 b982 	b.w	801a782 <__retarget_lock_acquire_recursive>
 801a47e:	bf00      	nop
 801a480:	20015cfb 	.word	0x20015cfb

0801a484 <__sinit_lock_release>:
 801a484:	4801      	ldr	r0, [pc, #4]	; (801a48c <__sinit_lock_release+0x8>)
 801a486:	f000 b97d 	b.w	801a784 <__retarget_lock_release_recursive>
 801a48a:	bf00      	nop
 801a48c:	20015cfb 	.word	0x20015cfb

0801a490 <__sinit>:
 801a490:	b510      	push	{r4, lr}
 801a492:	4604      	mov	r4, r0
 801a494:	f7ff fff0 	bl	801a478 <__sinit_lock_acquire>
 801a498:	69a3      	ldr	r3, [r4, #24]
 801a49a:	b11b      	cbz	r3, 801a4a4 <__sinit+0x14>
 801a49c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4a0:	f7ff bff0 	b.w	801a484 <__sinit_lock_release>
 801a4a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a4a8:	6523      	str	r3, [r4, #80]	; 0x50
 801a4aa:	4b13      	ldr	r3, [pc, #76]	; (801a4f8 <__sinit+0x68>)
 801a4ac:	4a13      	ldr	r2, [pc, #76]	; (801a4fc <__sinit+0x6c>)
 801a4ae:	681b      	ldr	r3, [r3, #0]
 801a4b0:	62a2      	str	r2, [r4, #40]	; 0x28
 801a4b2:	42a3      	cmp	r3, r4
 801a4b4:	bf04      	itt	eq
 801a4b6:	2301      	moveq	r3, #1
 801a4b8:	61a3      	streq	r3, [r4, #24]
 801a4ba:	4620      	mov	r0, r4
 801a4bc:	f000 f820 	bl	801a500 <__sfp>
 801a4c0:	6060      	str	r0, [r4, #4]
 801a4c2:	4620      	mov	r0, r4
 801a4c4:	f000 f81c 	bl	801a500 <__sfp>
 801a4c8:	60a0      	str	r0, [r4, #8]
 801a4ca:	4620      	mov	r0, r4
 801a4cc:	f000 f818 	bl	801a500 <__sfp>
 801a4d0:	2200      	movs	r2, #0
 801a4d2:	60e0      	str	r0, [r4, #12]
 801a4d4:	2104      	movs	r1, #4
 801a4d6:	6860      	ldr	r0, [r4, #4]
 801a4d8:	f7ff ff82 	bl	801a3e0 <std>
 801a4dc:	68a0      	ldr	r0, [r4, #8]
 801a4de:	2201      	movs	r2, #1
 801a4e0:	2109      	movs	r1, #9
 801a4e2:	f7ff ff7d 	bl	801a3e0 <std>
 801a4e6:	68e0      	ldr	r0, [r4, #12]
 801a4e8:	2202      	movs	r2, #2
 801a4ea:	2112      	movs	r1, #18
 801a4ec:	f7ff ff78 	bl	801a3e0 <std>
 801a4f0:	2301      	movs	r3, #1
 801a4f2:	61a3      	str	r3, [r4, #24]
 801a4f4:	e7d2      	b.n	801a49c <__sinit+0xc>
 801a4f6:	bf00      	nop
 801a4f8:	0801d068 	.word	0x0801d068
 801a4fc:	0801a429 	.word	0x0801a429

0801a500 <__sfp>:
 801a500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a502:	4607      	mov	r7, r0
 801a504:	f7ff ffac 	bl	801a460 <__sfp_lock_acquire>
 801a508:	4b1e      	ldr	r3, [pc, #120]	; (801a584 <__sfp+0x84>)
 801a50a:	681e      	ldr	r6, [r3, #0]
 801a50c:	69b3      	ldr	r3, [r6, #24]
 801a50e:	b913      	cbnz	r3, 801a516 <__sfp+0x16>
 801a510:	4630      	mov	r0, r6
 801a512:	f7ff ffbd 	bl	801a490 <__sinit>
 801a516:	3648      	adds	r6, #72	; 0x48
 801a518:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a51c:	3b01      	subs	r3, #1
 801a51e:	d503      	bpl.n	801a528 <__sfp+0x28>
 801a520:	6833      	ldr	r3, [r6, #0]
 801a522:	b30b      	cbz	r3, 801a568 <__sfp+0x68>
 801a524:	6836      	ldr	r6, [r6, #0]
 801a526:	e7f7      	b.n	801a518 <__sfp+0x18>
 801a528:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a52c:	b9d5      	cbnz	r5, 801a564 <__sfp+0x64>
 801a52e:	4b16      	ldr	r3, [pc, #88]	; (801a588 <__sfp+0x88>)
 801a530:	60e3      	str	r3, [r4, #12]
 801a532:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a536:	6665      	str	r5, [r4, #100]	; 0x64
 801a538:	f000 f922 	bl	801a780 <__retarget_lock_init_recursive>
 801a53c:	f7ff ff96 	bl	801a46c <__sfp_lock_release>
 801a540:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a544:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a548:	6025      	str	r5, [r4, #0]
 801a54a:	61a5      	str	r5, [r4, #24]
 801a54c:	2208      	movs	r2, #8
 801a54e:	4629      	mov	r1, r5
 801a550:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a554:	f000 f936 	bl	801a7c4 <memset>
 801a558:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a55c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a560:	4620      	mov	r0, r4
 801a562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a564:	3468      	adds	r4, #104	; 0x68
 801a566:	e7d9      	b.n	801a51c <__sfp+0x1c>
 801a568:	2104      	movs	r1, #4
 801a56a:	4638      	mov	r0, r7
 801a56c:	f7ff ff62 	bl	801a434 <__sfmoreglue>
 801a570:	4604      	mov	r4, r0
 801a572:	6030      	str	r0, [r6, #0]
 801a574:	2800      	cmp	r0, #0
 801a576:	d1d5      	bne.n	801a524 <__sfp+0x24>
 801a578:	f7ff ff78 	bl	801a46c <__sfp_lock_release>
 801a57c:	230c      	movs	r3, #12
 801a57e:	603b      	str	r3, [r7, #0]
 801a580:	e7ee      	b.n	801a560 <__sfp+0x60>
 801a582:	bf00      	nop
 801a584:	0801d068 	.word	0x0801d068
 801a588:	ffff0001 	.word	0xffff0001

0801a58c <_fwalk_reent>:
 801a58c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a590:	4606      	mov	r6, r0
 801a592:	4688      	mov	r8, r1
 801a594:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a598:	2700      	movs	r7, #0
 801a59a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a59e:	f1b9 0901 	subs.w	r9, r9, #1
 801a5a2:	d505      	bpl.n	801a5b0 <_fwalk_reent+0x24>
 801a5a4:	6824      	ldr	r4, [r4, #0]
 801a5a6:	2c00      	cmp	r4, #0
 801a5a8:	d1f7      	bne.n	801a59a <_fwalk_reent+0xe>
 801a5aa:	4638      	mov	r0, r7
 801a5ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a5b0:	89ab      	ldrh	r3, [r5, #12]
 801a5b2:	2b01      	cmp	r3, #1
 801a5b4:	d907      	bls.n	801a5c6 <_fwalk_reent+0x3a>
 801a5b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a5ba:	3301      	adds	r3, #1
 801a5bc:	d003      	beq.n	801a5c6 <_fwalk_reent+0x3a>
 801a5be:	4629      	mov	r1, r5
 801a5c0:	4630      	mov	r0, r6
 801a5c2:	47c0      	blx	r8
 801a5c4:	4307      	orrs	r7, r0
 801a5c6:	3568      	adds	r5, #104	; 0x68
 801a5c8:	e7e9      	b.n	801a59e <_fwalk_reent+0x12>
	...

0801a5cc <_fwrite_r>:
 801a5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a5d0:	9c08      	ldr	r4, [sp, #32]
 801a5d2:	468a      	mov	sl, r1
 801a5d4:	4690      	mov	r8, r2
 801a5d6:	fb02 f903 	mul.w	r9, r2, r3
 801a5da:	4605      	mov	r5, r0
 801a5dc:	b118      	cbz	r0, 801a5e6 <_fwrite_r+0x1a>
 801a5de:	6983      	ldr	r3, [r0, #24]
 801a5e0:	b90b      	cbnz	r3, 801a5e6 <_fwrite_r+0x1a>
 801a5e2:	f7ff ff55 	bl	801a490 <__sinit>
 801a5e6:	4b26      	ldr	r3, [pc, #152]	; (801a680 <_fwrite_r+0xb4>)
 801a5e8:	429c      	cmp	r4, r3
 801a5ea:	d123      	bne.n	801a634 <_fwrite_r+0x68>
 801a5ec:	686c      	ldr	r4, [r5, #4]
 801a5ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a5f0:	07de      	lsls	r6, r3, #31
 801a5f2:	d405      	bmi.n	801a600 <_fwrite_r+0x34>
 801a5f4:	89a3      	ldrh	r3, [r4, #12]
 801a5f6:	0598      	lsls	r0, r3, #22
 801a5f8:	d402      	bmi.n	801a600 <_fwrite_r+0x34>
 801a5fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a5fc:	f000 f8c1 	bl	801a782 <__retarget_lock_acquire_recursive>
 801a600:	89a3      	ldrh	r3, [r4, #12]
 801a602:	0719      	lsls	r1, r3, #28
 801a604:	d520      	bpl.n	801a648 <_fwrite_r+0x7c>
 801a606:	6923      	ldr	r3, [r4, #16]
 801a608:	b1f3      	cbz	r3, 801a648 <_fwrite_r+0x7c>
 801a60a:	2600      	movs	r6, #0
 801a60c:	454e      	cmp	r6, r9
 801a60e:	d029      	beq.n	801a664 <_fwrite_r+0x98>
 801a610:	68a7      	ldr	r7, [r4, #8]
 801a612:	f81a 1006 	ldrb.w	r1, [sl, r6]
 801a616:	3f01      	subs	r7, #1
 801a618:	2f00      	cmp	r7, #0
 801a61a:	60a7      	str	r7, [r4, #8]
 801a61c:	da04      	bge.n	801a628 <_fwrite_r+0x5c>
 801a61e:	69a3      	ldr	r3, [r4, #24]
 801a620:	429f      	cmp	r7, r3
 801a622:	db19      	blt.n	801a658 <_fwrite_r+0x8c>
 801a624:	290a      	cmp	r1, #10
 801a626:	d017      	beq.n	801a658 <_fwrite_r+0x8c>
 801a628:	6823      	ldr	r3, [r4, #0]
 801a62a:	1c5a      	adds	r2, r3, #1
 801a62c:	6022      	str	r2, [r4, #0]
 801a62e:	7019      	strb	r1, [r3, #0]
 801a630:	3601      	adds	r6, #1
 801a632:	e7eb      	b.n	801a60c <_fwrite_r+0x40>
 801a634:	4b13      	ldr	r3, [pc, #76]	; (801a684 <_fwrite_r+0xb8>)
 801a636:	429c      	cmp	r4, r3
 801a638:	d101      	bne.n	801a63e <_fwrite_r+0x72>
 801a63a:	68ac      	ldr	r4, [r5, #8]
 801a63c:	e7d7      	b.n	801a5ee <_fwrite_r+0x22>
 801a63e:	4b12      	ldr	r3, [pc, #72]	; (801a688 <_fwrite_r+0xbc>)
 801a640:	429c      	cmp	r4, r3
 801a642:	bf08      	it	eq
 801a644:	68ec      	ldreq	r4, [r5, #12]
 801a646:	e7d2      	b.n	801a5ee <_fwrite_r+0x22>
 801a648:	4621      	mov	r1, r4
 801a64a:	4628      	mov	r0, r5
 801a64c:	f000 fc8e 	bl	801af6c <__swsetup_r>
 801a650:	2800      	cmp	r0, #0
 801a652:	d0da      	beq.n	801a60a <_fwrite_r+0x3e>
 801a654:	2600      	movs	r6, #0
 801a656:	e005      	b.n	801a664 <_fwrite_r+0x98>
 801a658:	4622      	mov	r2, r4
 801a65a:	4628      	mov	r0, r5
 801a65c:	f000 fc22 	bl	801aea4 <__swbuf_r>
 801a660:	3001      	adds	r0, #1
 801a662:	d1e5      	bne.n	801a630 <_fwrite_r+0x64>
 801a664:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a666:	07da      	lsls	r2, r3, #31
 801a668:	d405      	bmi.n	801a676 <_fwrite_r+0xaa>
 801a66a:	89a3      	ldrh	r3, [r4, #12]
 801a66c:	059b      	lsls	r3, r3, #22
 801a66e:	d402      	bmi.n	801a676 <_fwrite_r+0xaa>
 801a670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a672:	f000 f887 	bl	801a784 <__retarget_lock_release_recursive>
 801a676:	fbb6 f0f8 	udiv	r0, r6, r8
 801a67a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a67e:	bf00      	nop
 801a680:	0801d028 	.word	0x0801d028
 801a684:	0801d048 	.word	0x0801d048
 801a688:	0801d008 	.word	0x0801d008

0801a68c <fwrite>:
 801a68c:	b507      	push	{r0, r1, r2, lr}
 801a68e:	9300      	str	r3, [sp, #0]
 801a690:	4613      	mov	r3, r2
 801a692:	460a      	mov	r2, r1
 801a694:	4601      	mov	r1, r0
 801a696:	4803      	ldr	r0, [pc, #12]	; (801a6a4 <fwrite+0x18>)
 801a698:	6800      	ldr	r0, [r0, #0]
 801a69a:	f7ff ff97 	bl	801a5cc <_fwrite_r>
 801a69e:	b003      	add	sp, #12
 801a6a0:	f85d fb04 	ldr.w	pc, [sp], #4
 801a6a4:	200009bc 	.word	0x200009bc

0801a6a8 <getenv>:
 801a6a8:	b507      	push	{r0, r1, r2, lr}
 801a6aa:	4b04      	ldr	r3, [pc, #16]	; (801a6bc <getenv+0x14>)
 801a6ac:	4601      	mov	r1, r0
 801a6ae:	aa01      	add	r2, sp, #4
 801a6b0:	6818      	ldr	r0, [r3, #0]
 801a6b2:	f000 f805 	bl	801a6c0 <_findenv_r>
 801a6b6:	b003      	add	sp, #12
 801a6b8:	f85d fb04 	ldr.w	pc, [sp], #4
 801a6bc:	200009bc 	.word	0x200009bc

0801a6c0 <_findenv_r>:
 801a6c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6c4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801a734 <_findenv_r+0x74>
 801a6c8:	4607      	mov	r7, r0
 801a6ca:	4689      	mov	r9, r1
 801a6cc:	4616      	mov	r6, r2
 801a6ce:	f000 fce9 	bl	801b0a4 <__env_lock>
 801a6d2:	f8da 4000 	ldr.w	r4, [sl]
 801a6d6:	b134      	cbz	r4, 801a6e6 <_findenv_r+0x26>
 801a6d8:	464b      	mov	r3, r9
 801a6da:	4698      	mov	r8, r3
 801a6dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a6e0:	b13a      	cbz	r2, 801a6f2 <_findenv_r+0x32>
 801a6e2:	2a3d      	cmp	r2, #61	; 0x3d
 801a6e4:	d1f9      	bne.n	801a6da <_findenv_r+0x1a>
 801a6e6:	4638      	mov	r0, r7
 801a6e8:	f000 fce2 	bl	801b0b0 <__env_unlock>
 801a6ec:	2000      	movs	r0, #0
 801a6ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6f2:	eba8 0809 	sub.w	r8, r8, r9
 801a6f6:	46a3      	mov	fp, r4
 801a6f8:	f854 0b04 	ldr.w	r0, [r4], #4
 801a6fc:	2800      	cmp	r0, #0
 801a6fe:	d0f2      	beq.n	801a6e6 <_findenv_r+0x26>
 801a700:	4642      	mov	r2, r8
 801a702:	4649      	mov	r1, r9
 801a704:	f000 faee 	bl	801ace4 <strncmp>
 801a708:	2800      	cmp	r0, #0
 801a70a:	d1f4      	bne.n	801a6f6 <_findenv_r+0x36>
 801a70c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801a710:	eb03 0508 	add.w	r5, r3, r8
 801a714:	f813 3008 	ldrb.w	r3, [r3, r8]
 801a718:	2b3d      	cmp	r3, #61	; 0x3d
 801a71a:	d1ec      	bne.n	801a6f6 <_findenv_r+0x36>
 801a71c:	f8da 3000 	ldr.w	r3, [sl]
 801a720:	ebab 0303 	sub.w	r3, fp, r3
 801a724:	109b      	asrs	r3, r3, #2
 801a726:	4638      	mov	r0, r7
 801a728:	6033      	str	r3, [r6, #0]
 801a72a:	f000 fcc1 	bl	801b0b0 <__env_unlock>
 801a72e:	1c68      	adds	r0, r5, #1
 801a730:	e7dd      	b.n	801a6ee <_findenv_r+0x2e>
 801a732:	bf00      	nop
 801a734:	20000000 	.word	0x20000000

0801a738 <__libc_init_array>:
 801a738:	b570      	push	{r4, r5, r6, lr}
 801a73a:	4d0d      	ldr	r5, [pc, #52]	; (801a770 <__libc_init_array+0x38>)
 801a73c:	4c0d      	ldr	r4, [pc, #52]	; (801a774 <__libc_init_array+0x3c>)
 801a73e:	1b64      	subs	r4, r4, r5
 801a740:	10a4      	asrs	r4, r4, #2
 801a742:	2600      	movs	r6, #0
 801a744:	42a6      	cmp	r6, r4
 801a746:	d109      	bne.n	801a75c <__libc_init_array+0x24>
 801a748:	4d0b      	ldr	r5, [pc, #44]	; (801a778 <__libc_init_array+0x40>)
 801a74a:	4c0c      	ldr	r4, [pc, #48]	; (801a77c <__libc_init_array+0x44>)
 801a74c:	f001 fb28 	bl	801bda0 <_init>
 801a750:	1b64      	subs	r4, r4, r5
 801a752:	10a4      	asrs	r4, r4, #2
 801a754:	2600      	movs	r6, #0
 801a756:	42a6      	cmp	r6, r4
 801a758:	d105      	bne.n	801a766 <__libc_init_array+0x2e>
 801a75a:	bd70      	pop	{r4, r5, r6, pc}
 801a75c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a760:	4798      	blx	r3
 801a762:	3601      	adds	r6, #1
 801a764:	e7ee      	b.n	801a744 <__libc_init_array+0xc>
 801a766:	f855 3b04 	ldr.w	r3, [r5], #4
 801a76a:	4798      	blx	r3
 801a76c:	3601      	adds	r6, #1
 801a76e:	e7f2      	b.n	801a756 <__libc_init_array+0x1e>
 801a770:	0801d158 	.word	0x0801d158
 801a774:	0801d158 	.word	0x0801d158
 801a778:	0801d158 	.word	0x0801d158
 801a77c:	0801d170 	.word	0x0801d170

0801a780 <__retarget_lock_init_recursive>:
 801a780:	4770      	bx	lr

0801a782 <__retarget_lock_acquire_recursive>:
 801a782:	4770      	bx	lr

0801a784 <__retarget_lock_release_recursive>:
 801a784:	4770      	bx	lr
	...

0801a788 <malloc>:
 801a788:	4b02      	ldr	r3, [pc, #8]	; (801a794 <malloc+0xc>)
 801a78a:	4601      	mov	r1, r0
 801a78c:	6818      	ldr	r0, [r3, #0]
 801a78e:	f000 b8a3 	b.w	801a8d8 <_malloc_r>
 801a792:	bf00      	nop
 801a794:	200009bc 	.word	0x200009bc

0801a798 <free>:
 801a798:	4b02      	ldr	r3, [pc, #8]	; (801a7a4 <free+0xc>)
 801a79a:	4601      	mov	r1, r0
 801a79c:	6818      	ldr	r0, [r3, #0]
 801a79e:	f000 b82f 	b.w	801a800 <_free_r>
 801a7a2:	bf00      	nop
 801a7a4:	200009bc 	.word	0x200009bc

0801a7a8 <memcpy>:
 801a7a8:	440a      	add	r2, r1
 801a7aa:	4291      	cmp	r1, r2
 801a7ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a7b0:	d100      	bne.n	801a7b4 <memcpy+0xc>
 801a7b2:	4770      	bx	lr
 801a7b4:	b510      	push	{r4, lr}
 801a7b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a7ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a7be:	4291      	cmp	r1, r2
 801a7c0:	d1f9      	bne.n	801a7b6 <memcpy+0xe>
 801a7c2:	bd10      	pop	{r4, pc}

0801a7c4 <memset>:
 801a7c4:	4402      	add	r2, r0
 801a7c6:	4603      	mov	r3, r0
 801a7c8:	4293      	cmp	r3, r2
 801a7ca:	d100      	bne.n	801a7ce <memset+0xa>
 801a7cc:	4770      	bx	lr
 801a7ce:	f803 1b01 	strb.w	r1, [r3], #1
 801a7d2:	e7f9      	b.n	801a7c8 <memset+0x4>

0801a7d4 <_calloc_r>:
 801a7d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a7d6:	fba1 2402 	umull	r2, r4, r1, r2
 801a7da:	b94c      	cbnz	r4, 801a7f0 <_calloc_r+0x1c>
 801a7dc:	4611      	mov	r1, r2
 801a7de:	9201      	str	r2, [sp, #4]
 801a7e0:	f000 f87a 	bl	801a8d8 <_malloc_r>
 801a7e4:	9a01      	ldr	r2, [sp, #4]
 801a7e6:	4605      	mov	r5, r0
 801a7e8:	b930      	cbnz	r0, 801a7f8 <_calloc_r+0x24>
 801a7ea:	4628      	mov	r0, r5
 801a7ec:	b003      	add	sp, #12
 801a7ee:	bd30      	pop	{r4, r5, pc}
 801a7f0:	220c      	movs	r2, #12
 801a7f2:	6002      	str	r2, [r0, #0]
 801a7f4:	2500      	movs	r5, #0
 801a7f6:	e7f8      	b.n	801a7ea <_calloc_r+0x16>
 801a7f8:	4621      	mov	r1, r4
 801a7fa:	f7ff ffe3 	bl	801a7c4 <memset>
 801a7fe:	e7f4      	b.n	801a7ea <_calloc_r+0x16>

0801a800 <_free_r>:
 801a800:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a802:	2900      	cmp	r1, #0
 801a804:	d044      	beq.n	801a890 <_free_r+0x90>
 801a806:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a80a:	9001      	str	r0, [sp, #4]
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	f1a1 0404 	sub.w	r4, r1, #4
 801a812:	bfb8      	it	lt
 801a814:	18e4      	addlt	r4, r4, r3
 801a816:	f000 fd9d 	bl	801b354 <__malloc_lock>
 801a81a:	4a1e      	ldr	r2, [pc, #120]	; (801a894 <_free_r+0x94>)
 801a81c:	9801      	ldr	r0, [sp, #4]
 801a81e:	6813      	ldr	r3, [r2, #0]
 801a820:	b933      	cbnz	r3, 801a830 <_free_r+0x30>
 801a822:	6063      	str	r3, [r4, #4]
 801a824:	6014      	str	r4, [r2, #0]
 801a826:	b003      	add	sp, #12
 801a828:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a82c:	f000 bd98 	b.w	801b360 <__malloc_unlock>
 801a830:	42a3      	cmp	r3, r4
 801a832:	d908      	bls.n	801a846 <_free_r+0x46>
 801a834:	6825      	ldr	r5, [r4, #0]
 801a836:	1961      	adds	r1, r4, r5
 801a838:	428b      	cmp	r3, r1
 801a83a:	bf01      	itttt	eq
 801a83c:	6819      	ldreq	r1, [r3, #0]
 801a83e:	685b      	ldreq	r3, [r3, #4]
 801a840:	1949      	addeq	r1, r1, r5
 801a842:	6021      	streq	r1, [r4, #0]
 801a844:	e7ed      	b.n	801a822 <_free_r+0x22>
 801a846:	461a      	mov	r2, r3
 801a848:	685b      	ldr	r3, [r3, #4]
 801a84a:	b10b      	cbz	r3, 801a850 <_free_r+0x50>
 801a84c:	42a3      	cmp	r3, r4
 801a84e:	d9fa      	bls.n	801a846 <_free_r+0x46>
 801a850:	6811      	ldr	r1, [r2, #0]
 801a852:	1855      	adds	r5, r2, r1
 801a854:	42a5      	cmp	r5, r4
 801a856:	d10b      	bne.n	801a870 <_free_r+0x70>
 801a858:	6824      	ldr	r4, [r4, #0]
 801a85a:	4421      	add	r1, r4
 801a85c:	1854      	adds	r4, r2, r1
 801a85e:	42a3      	cmp	r3, r4
 801a860:	6011      	str	r1, [r2, #0]
 801a862:	d1e0      	bne.n	801a826 <_free_r+0x26>
 801a864:	681c      	ldr	r4, [r3, #0]
 801a866:	685b      	ldr	r3, [r3, #4]
 801a868:	6053      	str	r3, [r2, #4]
 801a86a:	4421      	add	r1, r4
 801a86c:	6011      	str	r1, [r2, #0]
 801a86e:	e7da      	b.n	801a826 <_free_r+0x26>
 801a870:	d902      	bls.n	801a878 <_free_r+0x78>
 801a872:	230c      	movs	r3, #12
 801a874:	6003      	str	r3, [r0, #0]
 801a876:	e7d6      	b.n	801a826 <_free_r+0x26>
 801a878:	6825      	ldr	r5, [r4, #0]
 801a87a:	1961      	adds	r1, r4, r5
 801a87c:	428b      	cmp	r3, r1
 801a87e:	bf04      	itt	eq
 801a880:	6819      	ldreq	r1, [r3, #0]
 801a882:	685b      	ldreq	r3, [r3, #4]
 801a884:	6063      	str	r3, [r4, #4]
 801a886:	bf04      	itt	eq
 801a888:	1949      	addeq	r1, r1, r5
 801a88a:	6021      	streq	r1, [r4, #0]
 801a88c:	6054      	str	r4, [r2, #4]
 801a88e:	e7ca      	b.n	801a826 <_free_r+0x26>
 801a890:	b003      	add	sp, #12
 801a892:	bd30      	pop	{r4, r5, pc}
 801a894:	20015cfc 	.word	0x20015cfc

0801a898 <sbrk_aligned>:
 801a898:	b570      	push	{r4, r5, r6, lr}
 801a89a:	4e0e      	ldr	r6, [pc, #56]	; (801a8d4 <sbrk_aligned+0x3c>)
 801a89c:	460c      	mov	r4, r1
 801a89e:	6831      	ldr	r1, [r6, #0]
 801a8a0:	4605      	mov	r5, r0
 801a8a2:	b911      	cbnz	r1, 801a8aa <sbrk_aligned+0x12>
 801a8a4:	f000 f982 	bl	801abac <_sbrk_r>
 801a8a8:	6030      	str	r0, [r6, #0]
 801a8aa:	4621      	mov	r1, r4
 801a8ac:	4628      	mov	r0, r5
 801a8ae:	f000 f97d 	bl	801abac <_sbrk_r>
 801a8b2:	1c43      	adds	r3, r0, #1
 801a8b4:	d00a      	beq.n	801a8cc <sbrk_aligned+0x34>
 801a8b6:	1cc4      	adds	r4, r0, #3
 801a8b8:	f024 0403 	bic.w	r4, r4, #3
 801a8bc:	42a0      	cmp	r0, r4
 801a8be:	d007      	beq.n	801a8d0 <sbrk_aligned+0x38>
 801a8c0:	1a21      	subs	r1, r4, r0
 801a8c2:	4628      	mov	r0, r5
 801a8c4:	f000 f972 	bl	801abac <_sbrk_r>
 801a8c8:	3001      	adds	r0, #1
 801a8ca:	d101      	bne.n	801a8d0 <sbrk_aligned+0x38>
 801a8cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a8d0:	4620      	mov	r0, r4
 801a8d2:	bd70      	pop	{r4, r5, r6, pc}
 801a8d4:	20015d00 	.word	0x20015d00

0801a8d8 <_malloc_r>:
 801a8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8dc:	1ccd      	adds	r5, r1, #3
 801a8de:	f025 0503 	bic.w	r5, r5, #3
 801a8e2:	3508      	adds	r5, #8
 801a8e4:	2d0c      	cmp	r5, #12
 801a8e6:	bf38      	it	cc
 801a8e8:	250c      	movcc	r5, #12
 801a8ea:	2d00      	cmp	r5, #0
 801a8ec:	4607      	mov	r7, r0
 801a8ee:	db01      	blt.n	801a8f4 <_malloc_r+0x1c>
 801a8f0:	42a9      	cmp	r1, r5
 801a8f2:	d905      	bls.n	801a900 <_malloc_r+0x28>
 801a8f4:	230c      	movs	r3, #12
 801a8f6:	603b      	str	r3, [r7, #0]
 801a8f8:	2600      	movs	r6, #0
 801a8fa:	4630      	mov	r0, r6
 801a8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a900:	4e2e      	ldr	r6, [pc, #184]	; (801a9bc <_malloc_r+0xe4>)
 801a902:	f000 fd27 	bl	801b354 <__malloc_lock>
 801a906:	6833      	ldr	r3, [r6, #0]
 801a908:	461c      	mov	r4, r3
 801a90a:	bb34      	cbnz	r4, 801a95a <_malloc_r+0x82>
 801a90c:	4629      	mov	r1, r5
 801a90e:	4638      	mov	r0, r7
 801a910:	f7ff ffc2 	bl	801a898 <sbrk_aligned>
 801a914:	1c43      	adds	r3, r0, #1
 801a916:	4604      	mov	r4, r0
 801a918:	d14d      	bne.n	801a9b6 <_malloc_r+0xde>
 801a91a:	6834      	ldr	r4, [r6, #0]
 801a91c:	4626      	mov	r6, r4
 801a91e:	2e00      	cmp	r6, #0
 801a920:	d140      	bne.n	801a9a4 <_malloc_r+0xcc>
 801a922:	6823      	ldr	r3, [r4, #0]
 801a924:	4631      	mov	r1, r6
 801a926:	4638      	mov	r0, r7
 801a928:	eb04 0803 	add.w	r8, r4, r3
 801a92c:	f000 f93e 	bl	801abac <_sbrk_r>
 801a930:	4580      	cmp	r8, r0
 801a932:	d13a      	bne.n	801a9aa <_malloc_r+0xd2>
 801a934:	6821      	ldr	r1, [r4, #0]
 801a936:	3503      	adds	r5, #3
 801a938:	1a6d      	subs	r5, r5, r1
 801a93a:	f025 0503 	bic.w	r5, r5, #3
 801a93e:	3508      	adds	r5, #8
 801a940:	2d0c      	cmp	r5, #12
 801a942:	bf38      	it	cc
 801a944:	250c      	movcc	r5, #12
 801a946:	4629      	mov	r1, r5
 801a948:	4638      	mov	r0, r7
 801a94a:	f7ff ffa5 	bl	801a898 <sbrk_aligned>
 801a94e:	3001      	adds	r0, #1
 801a950:	d02b      	beq.n	801a9aa <_malloc_r+0xd2>
 801a952:	6823      	ldr	r3, [r4, #0]
 801a954:	442b      	add	r3, r5
 801a956:	6023      	str	r3, [r4, #0]
 801a958:	e00e      	b.n	801a978 <_malloc_r+0xa0>
 801a95a:	6822      	ldr	r2, [r4, #0]
 801a95c:	1b52      	subs	r2, r2, r5
 801a95e:	d41e      	bmi.n	801a99e <_malloc_r+0xc6>
 801a960:	2a0b      	cmp	r2, #11
 801a962:	d916      	bls.n	801a992 <_malloc_r+0xba>
 801a964:	1961      	adds	r1, r4, r5
 801a966:	42a3      	cmp	r3, r4
 801a968:	6025      	str	r5, [r4, #0]
 801a96a:	bf18      	it	ne
 801a96c:	6059      	strne	r1, [r3, #4]
 801a96e:	6863      	ldr	r3, [r4, #4]
 801a970:	bf08      	it	eq
 801a972:	6031      	streq	r1, [r6, #0]
 801a974:	5162      	str	r2, [r4, r5]
 801a976:	604b      	str	r3, [r1, #4]
 801a978:	4638      	mov	r0, r7
 801a97a:	f104 060b 	add.w	r6, r4, #11
 801a97e:	f000 fcef 	bl	801b360 <__malloc_unlock>
 801a982:	f026 0607 	bic.w	r6, r6, #7
 801a986:	1d23      	adds	r3, r4, #4
 801a988:	1af2      	subs	r2, r6, r3
 801a98a:	d0b6      	beq.n	801a8fa <_malloc_r+0x22>
 801a98c:	1b9b      	subs	r3, r3, r6
 801a98e:	50a3      	str	r3, [r4, r2]
 801a990:	e7b3      	b.n	801a8fa <_malloc_r+0x22>
 801a992:	6862      	ldr	r2, [r4, #4]
 801a994:	42a3      	cmp	r3, r4
 801a996:	bf0c      	ite	eq
 801a998:	6032      	streq	r2, [r6, #0]
 801a99a:	605a      	strne	r2, [r3, #4]
 801a99c:	e7ec      	b.n	801a978 <_malloc_r+0xa0>
 801a99e:	4623      	mov	r3, r4
 801a9a0:	6864      	ldr	r4, [r4, #4]
 801a9a2:	e7b2      	b.n	801a90a <_malloc_r+0x32>
 801a9a4:	4634      	mov	r4, r6
 801a9a6:	6876      	ldr	r6, [r6, #4]
 801a9a8:	e7b9      	b.n	801a91e <_malloc_r+0x46>
 801a9aa:	230c      	movs	r3, #12
 801a9ac:	603b      	str	r3, [r7, #0]
 801a9ae:	4638      	mov	r0, r7
 801a9b0:	f000 fcd6 	bl	801b360 <__malloc_unlock>
 801a9b4:	e7a1      	b.n	801a8fa <_malloc_r+0x22>
 801a9b6:	6025      	str	r5, [r4, #0]
 801a9b8:	e7de      	b.n	801a978 <_malloc_r+0xa0>
 801a9ba:	bf00      	nop
 801a9bc:	20015cfc 	.word	0x20015cfc

0801a9c0 <iprintf>:
 801a9c0:	b40f      	push	{r0, r1, r2, r3}
 801a9c2:	4b0a      	ldr	r3, [pc, #40]	; (801a9ec <iprintf+0x2c>)
 801a9c4:	b513      	push	{r0, r1, r4, lr}
 801a9c6:	681c      	ldr	r4, [r3, #0]
 801a9c8:	b124      	cbz	r4, 801a9d4 <iprintf+0x14>
 801a9ca:	69a3      	ldr	r3, [r4, #24]
 801a9cc:	b913      	cbnz	r3, 801a9d4 <iprintf+0x14>
 801a9ce:	4620      	mov	r0, r4
 801a9d0:	f7ff fd5e 	bl	801a490 <__sinit>
 801a9d4:	ab05      	add	r3, sp, #20
 801a9d6:	9a04      	ldr	r2, [sp, #16]
 801a9d8:	68a1      	ldr	r1, [r4, #8]
 801a9da:	9301      	str	r3, [sp, #4]
 801a9dc:	4620      	mov	r0, r4
 801a9de:	f000 fe79 	bl	801b6d4 <_vfiprintf_r>
 801a9e2:	b002      	add	sp, #8
 801a9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a9e8:	b004      	add	sp, #16
 801a9ea:	4770      	bx	lr
 801a9ec:	200009bc 	.word	0x200009bc

0801a9f0 <srand>:
 801a9f0:	b538      	push	{r3, r4, r5, lr}
 801a9f2:	4b10      	ldr	r3, [pc, #64]	; (801aa34 <srand+0x44>)
 801a9f4:	681d      	ldr	r5, [r3, #0]
 801a9f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801a9f8:	4604      	mov	r4, r0
 801a9fa:	b9b3      	cbnz	r3, 801aa2a <srand+0x3a>
 801a9fc:	2018      	movs	r0, #24
 801a9fe:	f7ff fec3 	bl	801a788 <malloc>
 801aa02:	4602      	mov	r2, r0
 801aa04:	63a8      	str	r0, [r5, #56]	; 0x38
 801aa06:	b920      	cbnz	r0, 801aa12 <srand+0x22>
 801aa08:	4b0b      	ldr	r3, [pc, #44]	; (801aa38 <srand+0x48>)
 801aa0a:	480c      	ldr	r0, [pc, #48]	; (801aa3c <srand+0x4c>)
 801aa0c:	2142      	movs	r1, #66	; 0x42
 801aa0e:	f000 fb1b 	bl	801b048 <__assert_func>
 801aa12:	490b      	ldr	r1, [pc, #44]	; (801aa40 <srand+0x50>)
 801aa14:	4b0b      	ldr	r3, [pc, #44]	; (801aa44 <srand+0x54>)
 801aa16:	e9c0 1300 	strd	r1, r3, [r0]
 801aa1a:	4b0b      	ldr	r3, [pc, #44]	; (801aa48 <srand+0x58>)
 801aa1c:	6083      	str	r3, [r0, #8]
 801aa1e:	230b      	movs	r3, #11
 801aa20:	8183      	strh	r3, [r0, #12]
 801aa22:	2100      	movs	r1, #0
 801aa24:	2001      	movs	r0, #1
 801aa26:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801aa2a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801aa2c:	2200      	movs	r2, #0
 801aa2e:	611c      	str	r4, [r3, #16]
 801aa30:	615a      	str	r2, [r3, #20]
 801aa32:	bd38      	pop	{r3, r4, r5, pc}
 801aa34:	200009bc 	.word	0x200009bc
 801aa38:	0801d06c 	.word	0x0801d06c
 801aa3c:	0801d083 	.word	0x0801d083
 801aa40:	abcd330e 	.word	0xabcd330e
 801aa44:	e66d1234 	.word	0xe66d1234
 801aa48:	0005deec 	.word	0x0005deec

0801aa4c <rand>:
 801aa4c:	4b16      	ldr	r3, [pc, #88]	; (801aaa8 <rand+0x5c>)
 801aa4e:	b510      	push	{r4, lr}
 801aa50:	681c      	ldr	r4, [r3, #0]
 801aa52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801aa54:	b9b3      	cbnz	r3, 801aa84 <rand+0x38>
 801aa56:	2018      	movs	r0, #24
 801aa58:	f7ff fe96 	bl	801a788 <malloc>
 801aa5c:	63a0      	str	r0, [r4, #56]	; 0x38
 801aa5e:	b928      	cbnz	r0, 801aa6c <rand+0x20>
 801aa60:	4602      	mov	r2, r0
 801aa62:	4b12      	ldr	r3, [pc, #72]	; (801aaac <rand+0x60>)
 801aa64:	4812      	ldr	r0, [pc, #72]	; (801aab0 <rand+0x64>)
 801aa66:	214e      	movs	r1, #78	; 0x4e
 801aa68:	f000 faee 	bl	801b048 <__assert_func>
 801aa6c:	4a11      	ldr	r2, [pc, #68]	; (801aab4 <rand+0x68>)
 801aa6e:	4b12      	ldr	r3, [pc, #72]	; (801aab8 <rand+0x6c>)
 801aa70:	e9c0 2300 	strd	r2, r3, [r0]
 801aa74:	4b11      	ldr	r3, [pc, #68]	; (801aabc <rand+0x70>)
 801aa76:	6083      	str	r3, [r0, #8]
 801aa78:	230b      	movs	r3, #11
 801aa7a:	8183      	strh	r3, [r0, #12]
 801aa7c:	2201      	movs	r2, #1
 801aa7e:	2300      	movs	r3, #0
 801aa80:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801aa84:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801aa86:	4a0e      	ldr	r2, [pc, #56]	; (801aac0 <rand+0x74>)
 801aa88:	6920      	ldr	r0, [r4, #16]
 801aa8a:	6963      	ldr	r3, [r4, #20]
 801aa8c:	490d      	ldr	r1, [pc, #52]	; (801aac4 <rand+0x78>)
 801aa8e:	4342      	muls	r2, r0
 801aa90:	fb01 2203 	mla	r2, r1, r3, r2
 801aa94:	fba0 0101 	umull	r0, r1, r0, r1
 801aa98:	1c43      	adds	r3, r0, #1
 801aa9a:	eb42 0001 	adc.w	r0, r2, r1
 801aa9e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801aaa2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801aaa6:	bd10      	pop	{r4, pc}
 801aaa8:	200009bc 	.word	0x200009bc
 801aaac:	0801d06c 	.word	0x0801d06c
 801aab0:	0801d083 	.word	0x0801d083
 801aab4:	abcd330e 	.word	0xabcd330e
 801aab8:	e66d1234 	.word	0xe66d1234
 801aabc:	0005deec 	.word	0x0005deec
 801aac0:	5851f42d 	.word	0x5851f42d
 801aac4:	4c957f2d 	.word	0x4c957f2d

0801aac8 <realloc>:
 801aac8:	4b02      	ldr	r3, [pc, #8]	; (801aad4 <realloc+0xc>)
 801aaca:	460a      	mov	r2, r1
 801aacc:	4601      	mov	r1, r0
 801aace:	6818      	ldr	r0, [r3, #0]
 801aad0:	f000 bc4c 	b.w	801b36c <_realloc_r>
 801aad4:	200009bc 	.word	0x200009bc

0801aad8 <cleanup_glue>:
 801aad8:	b538      	push	{r3, r4, r5, lr}
 801aada:	460c      	mov	r4, r1
 801aadc:	6809      	ldr	r1, [r1, #0]
 801aade:	4605      	mov	r5, r0
 801aae0:	b109      	cbz	r1, 801aae6 <cleanup_glue+0xe>
 801aae2:	f7ff fff9 	bl	801aad8 <cleanup_glue>
 801aae6:	4621      	mov	r1, r4
 801aae8:	4628      	mov	r0, r5
 801aaea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801aaee:	f7ff be87 	b.w	801a800 <_free_r>
	...

0801aaf4 <_reclaim_reent>:
 801aaf4:	4b2c      	ldr	r3, [pc, #176]	; (801aba8 <_reclaim_reent+0xb4>)
 801aaf6:	681b      	ldr	r3, [r3, #0]
 801aaf8:	4283      	cmp	r3, r0
 801aafa:	b570      	push	{r4, r5, r6, lr}
 801aafc:	4604      	mov	r4, r0
 801aafe:	d051      	beq.n	801aba4 <_reclaim_reent+0xb0>
 801ab00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ab02:	b143      	cbz	r3, 801ab16 <_reclaim_reent+0x22>
 801ab04:	68db      	ldr	r3, [r3, #12]
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d14a      	bne.n	801aba0 <_reclaim_reent+0xac>
 801ab0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ab0c:	6819      	ldr	r1, [r3, #0]
 801ab0e:	b111      	cbz	r1, 801ab16 <_reclaim_reent+0x22>
 801ab10:	4620      	mov	r0, r4
 801ab12:	f7ff fe75 	bl	801a800 <_free_r>
 801ab16:	6961      	ldr	r1, [r4, #20]
 801ab18:	b111      	cbz	r1, 801ab20 <_reclaim_reent+0x2c>
 801ab1a:	4620      	mov	r0, r4
 801ab1c:	f7ff fe70 	bl	801a800 <_free_r>
 801ab20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ab22:	b111      	cbz	r1, 801ab2a <_reclaim_reent+0x36>
 801ab24:	4620      	mov	r0, r4
 801ab26:	f7ff fe6b 	bl	801a800 <_free_r>
 801ab2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ab2c:	b111      	cbz	r1, 801ab34 <_reclaim_reent+0x40>
 801ab2e:	4620      	mov	r0, r4
 801ab30:	f7ff fe66 	bl	801a800 <_free_r>
 801ab34:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ab36:	b111      	cbz	r1, 801ab3e <_reclaim_reent+0x4a>
 801ab38:	4620      	mov	r0, r4
 801ab3a:	f7ff fe61 	bl	801a800 <_free_r>
 801ab3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ab40:	b111      	cbz	r1, 801ab48 <_reclaim_reent+0x54>
 801ab42:	4620      	mov	r0, r4
 801ab44:	f7ff fe5c 	bl	801a800 <_free_r>
 801ab48:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801ab4a:	b111      	cbz	r1, 801ab52 <_reclaim_reent+0x5e>
 801ab4c:	4620      	mov	r0, r4
 801ab4e:	f7ff fe57 	bl	801a800 <_free_r>
 801ab52:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801ab54:	b111      	cbz	r1, 801ab5c <_reclaim_reent+0x68>
 801ab56:	4620      	mov	r0, r4
 801ab58:	f7ff fe52 	bl	801a800 <_free_r>
 801ab5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ab5e:	b111      	cbz	r1, 801ab66 <_reclaim_reent+0x72>
 801ab60:	4620      	mov	r0, r4
 801ab62:	f7ff fe4d 	bl	801a800 <_free_r>
 801ab66:	69a3      	ldr	r3, [r4, #24]
 801ab68:	b1e3      	cbz	r3, 801aba4 <_reclaim_reent+0xb0>
 801ab6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ab6c:	4620      	mov	r0, r4
 801ab6e:	4798      	blx	r3
 801ab70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ab72:	b1b9      	cbz	r1, 801aba4 <_reclaim_reent+0xb0>
 801ab74:	4620      	mov	r0, r4
 801ab76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ab7a:	f7ff bfad 	b.w	801aad8 <cleanup_glue>
 801ab7e:	5949      	ldr	r1, [r1, r5]
 801ab80:	b941      	cbnz	r1, 801ab94 <_reclaim_reent+0xa0>
 801ab82:	3504      	adds	r5, #4
 801ab84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ab86:	2d80      	cmp	r5, #128	; 0x80
 801ab88:	68d9      	ldr	r1, [r3, #12]
 801ab8a:	d1f8      	bne.n	801ab7e <_reclaim_reent+0x8a>
 801ab8c:	4620      	mov	r0, r4
 801ab8e:	f7ff fe37 	bl	801a800 <_free_r>
 801ab92:	e7ba      	b.n	801ab0a <_reclaim_reent+0x16>
 801ab94:	680e      	ldr	r6, [r1, #0]
 801ab96:	4620      	mov	r0, r4
 801ab98:	f7ff fe32 	bl	801a800 <_free_r>
 801ab9c:	4631      	mov	r1, r6
 801ab9e:	e7ef      	b.n	801ab80 <_reclaim_reent+0x8c>
 801aba0:	2500      	movs	r5, #0
 801aba2:	e7ef      	b.n	801ab84 <_reclaim_reent+0x90>
 801aba4:	bd70      	pop	{r4, r5, r6, pc}
 801aba6:	bf00      	nop
 801aba8:	200009bc 	.word	0x200009bc

0801abac <_sbrk_r>:
 801abac:	b538      	push	{r3, r4, r5, lr}
 801abae:	4d06      	ldr	r5, [pc, #24]	; (801abc8 <_sbrk_r+0x1c>)
 801abb0:	2300      	movs	r3, #0
 801abb2:	4604      	mov	r4, r0
 801abb4:	4608      	mov	r0, r1
 801abb6:	602b      	str	r3, [r5, #0]
 801abb8:	f7e7 fbaa 	bl	8002310 <_sbrk>
 801abbc:	1c43      	adds	r3, r0, #1
 801abbe:	d102      	bne.n	801abc6 <_sbrk_r+0x1a>
 801abc0:	682b      	ldr	r3, [r5, #0]
 801abc2:	b103      	cbz	r3, 801abc6 <_sbrk_r+0x1a>
 801abc4:	6023      	str	r3, [r4, #0]
 801abc6:	bd38      	pop	{r3, r4, r5, pc}
 801abc8:	20015d04 	.word	0x20015d04

0801abcc <sniprintf>:
 801abcc:	b40c      	push	{r2, r3}
 801abce:	b530      	push	{r4, r5, lr}
 801abd0:	4b17      	ldr	r3, [pc, #92]	; (801ac30 <sniprintf+0x64>)
 801abd2:	1e0c      	subs	r4, r1, #0
 801abd4:	681d      	ldr	r5, [r3, #0]
 801abd6:	b09d      	sub	sp, #116	; 0x74
 801abd8:	da08      	bge.n	801abec <sniprintf+0x20>
 801abda:	238b      	movs	r3, #139	; 0x8b
 801abdc:	602b      	str	r3, [r5, #0]
 801abde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801abe2:	b01d      	add	sp, #116	; 0x74
 801abe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801abe8:	b002      	add	sp, #8
 801abea:	4770      	bx	lr
 801abec:	f44f 7302 	mov.w	r3, #520	; 0x208
 801abf0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801abf4:	bf14      	ite	ne
 801abf6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801abfa:	4623      	moveq	r3, r4
 801abfc:	9304      	str	r3, [sp, #16]
 801abfe:	9307      	str	r3, [sp, #28]
 801ac00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ac04:	9002      	str	r0, [sp, #8]
 801ac06:	9006      	str	r0, [sp, #24]
 801ac08:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ac0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ac0e:	ab21      	add	r3, sp, #132	; 0x84
 801ac10:	a902      	add	r1, sp, #8
 801ac12:	4628      	mov	r0, r5
 801ac14:	9301      	str	r3, [sp, #4]
 801ac16:	f000 fc33 	bl	801b480 <_svfiprintf_r>
 801ac1a:	1c43      	adds	r3, r0, #1
 801ac1c:	bfbc      	itt	lt
 801ac1e:	238b      	movlt	r3, #139	; 0x8b
 801ac20:	602b      	strlt	r3, [r5, #0]
 801ac22:	2c00      	cmp	r4, #0
 801ac24:	d0dd      	beq.n	801abe2 <sniprintf+0x16>
 801ac26:	9b02      	ldr	r3, [sp, #8]
 801ac28:	2200      	movs	r2, #0
 801ac2a:	701a      	strb	r2, [r3, #0]
 801ac2c:	e7d9      	b.n	801abe2 <sniprintf+0x16>
 801ac2e:	bf00      	nop
 801ac30:	200009bc 	.word	0x200009bc

0801ac34 <__sread>:
 801ac34:	b510      	push	{r4, lr}
 801ac36:	460c      	mov	r4, r1
 801ac38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac3c:	f001 f80e 	bl	801bc5c <_read_r>
 801ac40:	2800      	cmp	r0, #0
 801ac42:	bfab      	itete	ge
 801ac44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ac46:	89a3      	ldrhlt	r3, [r4, #12]
 801ac48:	181b      	addge	r3, r3, r0
 801ac4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ac4e:	bfac      	ite	ge
 801ac50:	6563      	strge	r3, [r4, #84]	; 0x54
 801ac52:	81a3      	strhlt	r3, [r4, #12]
 801ac54:	bd10      	pop	{r4, pc}

0801ac56 <__swrite>:
 801ac56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac5a:	461f      	mov	r7, r3
 801ac5c:	898b      	ldrh	r3, [r1, #12]
 801ac5e:	05db      	lsls	r3, r3, #23
 801ac60:	4605      	mov	r5, r0
 801ac62:	460c      	mov	r4, r1
 801ac64:	4616      	mov	r6, r2
 801ac66:	d505      	bpl.n	801ac74 <__swrite+0x1e>
 801ac68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac6c:	2302      	movs	r3, #2
 801ac6e:	2200      	movs	r2, #0
 801ac70:	f000 faf8 	bl	801b264 <_lseek_r>
 801ac74:	89a3      	ldrh	r3, [r4, #12]
 801ac76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ac7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ac7e:	81a3      	strh	r3, [r4, #12]
 801ac80:	4632      	mov	r2, r6
 801ac82:	463b      	mov	r3, r7
 801ac84:	4628      	mov	r0, r5
 801ac86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ac8a:	f000 b95d 	b.w	801af48 <_write_r>

0801ac8e <__sseek>:
 801ac8e:	b510      	push	{r4, lr}
 801ac90:	460c      	mov	r4, r1
 801ac92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac96:	f000 fae5 	bl	801b264 <_lseek_r>
 801ac9a:	1c43      	adds	r3, r0, #1
 801ac9c:	89a3      	ldrh	r3, [r4, #12]
 801ac9e:	bf15      	itete	ne
 801aca0:	6560      	strne	r0, [r4, #84]	; 0x54
 801aca2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801aca6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801acaa:	81a3      	strheq	r3, [r4, #12]
 801acac:	bf18      	it	ne
 801acae:	81a3      	strhne	r3, [r4, #12]
 801acb0:	bd10      	pop	{r4, pc}

0801acb2 <__sclose>:
 801acb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801acb6:	f000 b9e5 	b.w	801b084 <_close_r>

0801acba <strchr>:
 801acba:	b2c9      	uxtb	r1, r1
 801acbc:	4603      	mov	r3, r0
 801acbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801acc2:	b11a      	cbz	r2, 801accc <strchr+0x12>
 801acc4:	428a      	cmp	r2, r1
 801acc6:	d1f9      	bne.n	801acbc <strchr+0x2>
 801acc8:	4618      	mov	r0, r3
 801acca:	4770      	bx	lr
 801accc:	2900      	cmp	r1, #0
 801acce:	bf18      	it	ne
 801acd0:	2300      	movne	r3, #0
 801acd2:	e7f9      	b.n	801acc8 <strchr+0xe>

0801acd4 <strcpy>:
 801acd4:	4603      	mov	r3, r0
 801acd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801acda:	f803 2b01 	strb.w	r2, [r3], #1
 801acde:	2a00      	cmp	r2, #0
 801ace0:	d1f9      	bne.n	801acd6 <strcpy+0x2>
 801ace2:	4770      	bx	lr

0801ace4 <strncmp>:
 801ace4:	b510      	push	{r4, lr}
 801ace6:	b17a      	cbz	r2, 801ad08 <strncmp+0x24>
 801ace8:	4603      	mov	r3, r0
 801acea:	3901      	subs	r1, #1
 801acec:	1884      	adds	r4, r0, r2
 801acee:	f813 0b01 	ldrb.w	r0, [r3], #1
 801acf2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801acf6:	4290      	cmp	r0, r2
 801acf8:	d101      	bne.n	801acfe <strncmp+0x1a>
 801acfa:	42a3      	cmp	r3, r4
 801acfc:	d101      	bne.n	801ad02 <strncmp+0x1e>
 801acfe:	1a80      	subs	r0, r0, r2
 801ad00:	bd10      	pop	{r4, pc}
 801ad02:	2800      	cmp	r0, #0
 801ad04:	d1f3      	bne.n	801acee <strncmp+0xa>
 801ad06:	e7fa      	b.n	801acfe <strncmp+0x1a>
 801ad08:	4610      	mov	r0, r2
 801ad0a:	e7f9      	b.n	801ad00 <strncmp+0x1c>

0801ad0c <strstr>:
 801ad0c:	780a      	ldrb	r2, [r1, #0]
 801ad0e:	b570      	push	{r4, r5, r6, lr}
 801ad10:	b96a      	cbnz	r2, 801ad2e <strstr+0x22>
 801ad12:	bd70      	pop	{r4, r5, r6, pc}
 801ad14:	429a      	cmp	r2, r3
 801ad16:	d109      	bne.n	801ad2c <strstr+0x20>
 801ad18:	460c      	mov	r4, r1
 801ad1a:	4605      	mov	r5, r0
 801ad1c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d0f6      	beq.n	801ad12 <strstr+0x6>
 801ad24:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801ad28:	429e      	cmp	r6, r3
 801ad2a:	d0f7      	beq.n	801ad1c <strstr+0x10>
 801ad2c:	3001      	adds	r0, #1
 801ad2e:	7803      	ldrb	r3, [r0, #0]
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d1ef      	bne.n	801ad14 <strstr+0x8>
 801ad34:	4618      	mov	r0, r3
 801ad36:	e7ec      	b.n	801ad12 <strstr+0x6>

0801ad38 <_strtoul_l.constprop.0>:
 801ad38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ad3c:	4f36      	ldr	r7, [pc, #216]	; (801ae18 <_strtoul_l.constprop.0+0xe0>)
 801ad3e:	4686      	mov	lr, r0
 801ad40:	460d      	mov	r5, r1
 801ad42:	4628      	mov	r0, r5
 801ad44:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ad48:	5de6      	ldrb	r6, [r4, r7]
 801ad4a:	f016 0608 	ands.w	r6, r6, #8
 801ad4e:	d1f8      	bne.n	801ad42 <_strtoul_l.constprop.0+0xa>
 801ad50:	2c2d      	cmp	r4, #45	; 0x2d
 801ad52:	d12f      	bne.n	801adb4 <_strtoul_l.constprop.0+0x7c>
 801ad54:	782c      	ldrb	r4, [r5, #0]
 801ad56:	2601      	movs	r6, #1
 801ad58:	1c85      	adds	r5, r0, #2
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d057      	beq.n	801ae0e <_strtoul_l.constprop.0+0xd6>
 801ad5e:	2b10      	cmp	r3, #16
 801ad60:	d109      	bne.n	801ad76 <_strtoul_l.constprop.0+0x3e>
 801ad62:	2c30      	cmp	r4, #48	; 0x30
 801ad64:	d107      	bne.n	801ad76 <_strtoul_l.constprop.0+0x3e>
 801ad66:	7828      	ldrb	r0, [r5, #0]
 801ad68:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801ad6c:	2858      	cmp	r0, #88	; 0x58
 801ad6e:	d149      	bne.n	801ae04 <_strtoul_l.constprop.0+0xcc>
 801ad70:	786c      	ldrb	r4, [r5, #1]
 801ad72:	2310      	movs	r3, #16
 801ad74:	3502      	adds	r5, #2
 801ad76:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801ad7a:	2700      	movs	r7, #0
 801ad7c:	fbb8 f8f3 	udiv	r8, r8, r3
 801ad80:	fb03 f908 	mul.w	r9, r3, r8
 801ad84:	ea6f 0909 	mvn.w	r9, r9
 801ad88:	4638      	mov	r0, r7
 801ad8a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801ad8e:	f1bc 0f09 	cmp.w	ip, #9
 801ad92:	d814      	bhi.n	801adbe <_strtoul_l.constprop.0+0x86>
 801ad94:	4664      	mov	r4, ip
 801ad96:	42a3      	cmp	r3, r4
 801ad98:	dd22      	ble.n	801ade0 <_strtoul_l.constprop.0+0xa8>
 801ad9a:	2f00      	cmp	r7, #0
 801ad9c:	db1d      	blt.n	801adda <_strtoul_l.constprop.0+0xa2>
 801ad9e:	4580      	cmp	r8, r0
 801ada0:	d31b      	bcc.n	801adda <_strtoul_l.constprop.0+0xa2>
 801ada2:	d101      	bne.n	801ada8 <_strtoul_l.constprop.0+0x70>
 801ada4:	45a1      	cmp	r9, r4
 801ada6:	db18      	blt.n	801adda <_strtoul_l.constprop.0+0xa2>
 801ada8:	fb00 4003 	mla	r0, r0, r3, r4
 801adac:	2701      	movs	r7, #1
 801adae:	f815 4b01 	ldrb.w	r4, [r5], #1
 801adb2:	e7ea      	b.n	801ad8a <_strtoul_l.constprop.0+0x52>
 801adb4:	2c2b      	cmp	r4, #43	; 0x2b
 801adb6:	bf04      	itt	eq
 801adb8:	782c      	ldrbeq	r4, [r5, #0]
 801adba:	1c85      	addeq	r5, r0, #2
 801adbc:	e7cd      	b.n	801ad5a <_strtoul_l.constprop.0+0x22>
 801adbe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801adc2:	f1bc 0f19 	cmp.w	ip, #25
 801adc6:	d801      	bhi.n	801adcc <_strtoul_l.constprop.0+0x94>
 801adc8:	3c37      	subs	r4, #55	; 0x37
 801adca:	e7e4      	b.n	801ad96 <_strtoul_l.constprop.0+0x5e>
 801adcc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801add0:	f1bc 0f19 	cmp.w	ip, #25
 801add4:	d804      	bhi.n	801ade0 <_strtoul_l.constprop.0+0xa8>
 801add6:	3c57      	subs	r4, #87	; 0x57
 801add8:	e7dd      	b.n	801ad96 <_strtoul_l.constprop.0+0x5e>
 801adda:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801adde:	e7e6      	b.n	801adae <_strtoul_l.constprop.0+0x76>
 801ade0:	2f00      	cmp	r7, #0
 801ade2:	da07      	bge.n	801adf4 <_strtoul_l.constprop.0+0xbc>
 801ade4:	2322      	movs	r3, #34	; 0x22
 801ade6:	f8ce 3000 	str.w	r3, [lr]
 801adea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801adee:	b932      	cbnz	r2, 801adfe <_strtoul_l.constprop.0+0xc6>
 801adf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801adf4:	b106      	cbz	r6, 801adf8 <_strtoul_l.constprop.0+0xc0>
 801adf6:	4240      	negs	r0, r0
 801adf8:	2a00      	cmp	r2, #0
 801adfa:	d0f9      	beq.n	801adf0 <_strtoul_l.constprop.0+0xb8>
 801adfc:	b107      	cbz	r7, 801ae00 <_strtoul_l.constprop.0+0xc8>
 801adfe:	1e69      	subs	r1, r5, #1
 801ae00:	6011      	str	r1, [r2, #0]
 801ae02:	e7f5      	b.n	801adf0 <_strtoul_l.constprop.0+0xb8>
 801ae04:	2430      	movs	r4, #48	; 0x30
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d1b5      	bne.n	801ad76 <_strtoul_l.constprop.0+0x3e>
 801ae0a:	2308      	movs	r3, #8
 801ae0c:	e7b3      	b.n	801ad76 <_strtoul_l.constprop.0+0x3e>
 801ae0e:	2c30      	cmp	r4, #48	; 0x30
 801ae10:	d0a9      	beq.n	801ad66 <_strtoul_l.constprop.0+0x2e>
 801ae12:	230a      	movs	r3, #10
 801ae14:	e7af      	b.n	801ad76 <_strtoul_l.constprop.0+0x3e>
 801ae16:	bf00      	nop
 801ae18:	0801cf07 	.word	0x0801cf07

0801ae1c <strtoul>:
 801ae1c:	4613      	mov	r3, r2
 801ae1e:	460a      	mov	r2, r1
 801ae20:	4601      	mov	r1, r0
 801ae22:	4802      	ldr	r0, [pc, #8]	; (801ae2c <strtoul+0x10>)
 801ae24:	6800      	ldr	r0, [r0, #0]
 801ae26:	f7ff bf87 	b.w	801ad38 <_strtoul_l.constprop.0>
 801ae2a:	bf00      	nop
 801ae2c:	200009bc 	.word	0x200009bc

0801ae30 <_vsniprintf_r>:
 801ae30:	b530      	push	{r4, r5, lr}
 801ae32:	4614      	mov	r4, r2
 801ae34:	2c00      	cmp	r4, #0
 801ae36:	b09b      	sub	sp, #108	; 0x6c
 801ae38:	4605      	mov	r5, r0
 801ae3a:	461a      	mov	r2, r3
 801ae3c:	da05      	bge.n	801ae4a <_vsniprintf_r+0x1a>
 801ae3e:	238b      	movs	r3, #139	; 0x8b
 801ae40:	6003      	str	r3, [r0, #0]
 801ae42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ae46:	b01b      	add	sp, #108	; 0x6c
 801ae48:	bd30      	pop	{r4, r5, pc}
 801ae4a:	f44f 7302 	mov.w	r3, #520	; 0x208
 801ae4e:	f8ad 300c 	strh.w	r3, [sp, #12]
 801ae52:	bf14      	ite	ne
 801ae54:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801ae58:	4623      	moveq	r3, r4
 801ae5a:	9302      	str	r3, [sp, #8]
 801ae5c:	9305      	str	r3, [sp, #20]
 801ae5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ae62:	9100      	str	r1, [sp, #0]
 801ae64:	9104      	str	r1, [sp, #16]
 801ae66:	f8ad 300e 	strh.w	r3, [sp, #14]
 801ae6a:	4669      	mov	r1, sp
 801ae6c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ae6e:	f000 fb07 	bl	801b480 <_svfiprintf_r>
 801ae72:	1c43      	adds	r3, r0, #1
 801ae74:	bfbc      	itt	lt
 801ae76:	238b      	movlt	r3, #139	; 0x8b
 801ae78:	602b      	strlt	r3, [r5, #0]
 801ae7a:	2c00      	cmp	r4, #0
 801ae7c:	d0e3      	beq.n	801ae46 <_vsniprintf_r+0x16>
 801ae7e:	9b00      	ldr	r3, [sp, #0]
 801ae80:	2200      	movs	r2, #0
 801ae82:	701a      	strb	r2, [r3, #0]
 801ae84:	e7df      	b.n	801ae46 <_vsniprintf_r+0x16>
	...

0801ae88 <vsniprintf>:
 801ae88:	b507      	push	{r0, r1, r2, lr}
 801ae8a:	9300      	str	r3, [sp, #0]
 801ae8c:	4613      	mov	r3, r2
 801ae8e:	460a      	mov	r2, r1
 801ae90:	4601      	mov	r1, r0
 801ae92:	4803      	ldr	r0, [pc, #12]	; (801aea0 <vsniprintf+0x18>)
 801ae94:	6800      	ldr	r0, [r0, #0]
 801ae96:	f7ff ffcb 	bl	801ae30 <_vsniprintf_r>
 801ae9a:	b003      	add	sp, #12
 801ae9c:	f85d fb04 	ldr.w	pc, [sp], #4
 801aea0:	200009bc 	.word	0x200009bc

0801aea4 <__swbuf_r>:
 801aea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aea6:	460e      	mov	r6, r1
 801aea8:	4614      	mov	r4, r2
 801aeaa:	4605      	mov	r5, r0
 801aeac:	b118      	cbz	r0, 801aeb6 <__swbuf_r+0x12>
 801aeae:	6983      	ldr	r3, [r0, #24]
 801aeb0:	b90b      	cbnz	r3, 801aeb6 <__swbuf_r+0x12>
 801aeb2:	f7ff faed 	bl	801a490 <__sinit>
 801aeb6:	4b21      	ldr	r3, [pc, #132]	; (801af3c <__swbuf_r+0x98>)
 801aeb8:	429c      	cmp	r4, r3
 801aeba:	d12b      	bne.n	801af14 <__swbuf_r+0x70>
 801aebc:	686c      	ldr	r4, [r5, #4]
 801aebe:	69a3      	ldr	r3, [r4, #24]
 801aec0:	60a3      	str	r3, [r4, #8]
 801aec2:	89a3      	ldrh	r3, [r4, #12]
 801aec4:	071a      	lsls	r2, r3, #28
 801aec6:	d52f      	bpl.n	801af28 <__swbuf_r+0x84>
 801aec8:	6923      	ldr	r3, [r4, #16]
 801aeca:	b36b      	cbz	r3, 801af28 <__swbuf_r+0x84>
 801aecc:	6923      	ldr	r3, [r4, #16]
 801aece:	6820      	ldr	r0, [r4, #0]
 801aed0:	1ac0      	subs	r0, r0, r3
 801aed2:	6963      	ldr	r3, [r4, #20]
 801aed4:	b2f6      	uxtb	r6, r6
 801aed6:	4283      	cmp	r3, r0
 801aed8:	4637      	mov	r7, r6
 801aeda:	dc04      	bgt.n	801aee6 <__swbuf_r+0x42>
 801aedc:	4621      	mov	r1, r4
 801aede:	4628      	mov	r0, r5
 801aee0:	f000 f972 	bl	801b1c8 <_fflush_r>
 801aee4:	bb30      	cbnz	r0, 801af34 <__swbuf_r+0x90>
 801aee6:	68a3      	ldr	r3, [r4, #8]
 801aee8:	3b01      	subs	r3, #1
 801aeea:	60a3      	str	r3, [r4, #8]
 801aeec:	6823      	ldr	r3, [r4, #0]
 801aeee:	1c5a      	adds	r2, r3, #1
 801aef0:	6022      	str	r2, [r4, #0]
 801aef2:	701e      	strb	r6, [r3, #0]
 801aef4:	6963      	ldr	r3, [r4, #20]
 801aef6:	3001      	adds	r0, #1
 801aef8:	4283      	cmp	r3, r0
 801aefa:	d004      	beq.n	801af06 <__swbuf_r+0x62>
 801aefc:	89a3      	ldrh	r3, [r4, #12]
 801aefe:	07db      	lsls	r3, r3, #31
 801af00:	d506      	bpl.n	801af10 <__swbuf_r+0x6c>
 801af02:	2e0a      	cmp	r6, #10
 801af04:	d104      	bne.n	801af10 <__swbuf_r+0x6c>
 801af06:	4621      	mov	r1, r4
 801af08:	4628      	mov	r0, r5
 801af0a:	f000 f95d 	bl	801b1c8 <_fflush_r>
 801af0e:	b988      	cbnz	r0, 801af34 <__swbuf_r+0x90>
 801af10:	4638      	mov	r0, r7
 801af12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af14:	4b0a      	ldr	r3, [pc, #40]	; (801af40 <__swbuf_r+0x9c>)
 801af16:	429c      	cmp	r4, r3
 801af18:	d101      	bne.n	801af1e <__swbuf_r+0x7a>
 801af1a:	68ac      	ldr	r4, [r5, #8]
 801af1c:	e7cf      	b.n	801aebe <__swbuf_r+0x1a>
 801af1e:	4b09      	ldr	r3, [pc, #36]	; (801af44 <__swbuf_r+0xa0>)
 801af20:	429c      	cmp	r4, r3
 801af22:	bf08      	it	eq
 801af24:	68ec      	ldreq	r4, [r5, #12]
 801af26:	e7ca      	b.n	801aebe <__swbuf_r+0x1a>
 801af28:	4621      	mov	r1, r4
 801af2a:	4628      	mov	r0, r5
 801af2c:	f000 f81e 	bl	801af6c <__swsetup_r>
 801af30:	2800      	cmp	r0, #0
 801af32:	d0cb      	beq.n	801aecc <__swbuf_r+0x28>
 801af34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801af38:	e7ea      	b.n	801af10 <__swbuf_r+0x6c>
 801af3a:	bf00      	nop
 801af3c:	0801d028 	.word	0x0801d028
 801af40:	0801d048 	.word	0x0801d048
 801af44:	0801d008 	.word	0x0801d008

0801af48 <_write_r>:
 801af48:	b538      	push	{r3, r4, r5, lr}
 801af4a:	4d07      	ldr	r5, [pc, #28]	; (801af68 <_write_r+0x20>)
 801af4c:	4604      	mov	r4, r0
 801af4e:	4608      	mov	r0, r1
 801af50:	4611      	mov	r1, r2
 801af52:	2200      	movs	r2, #0
 801af54:	602a      	str	r2, [r5, #0]
 801af56:	461a      	mov	r2, r3
 801af58:	f7e7 f9bd 	bl	80022d6 <_write>
 801af5c:	1c43      	adds	r3, r0, #1
 801af5e:	d102      	bne.n	801af66 <_write_r+0x1e>
 801af60:	682b      	ldr	r3, [r5, #0]
 801af62:	b103      	cbz	r3, 801af66 <_write_r+0x1e>
 801af64:	6023      	str	r3, [r4, #0]
 801af66:	bd38      	pop	{r3, r4, r5, pc}
 801af68:	20015d04 	.word	0x20015d04

0801af6c <__swsetup_r>:
 801af6c:	4b32      	ldr	r3, [pc, #200]	; (801b038 <__swsetup_r+0xcc>)
 801af6e:	b570      	push	{r4, r5, r6, lr}
 801af70:	681d      	ldr	r5, [r3, #0]
 801af72:	4606      	mov	r6, r0
 801af74:	460c      	mov	r4, r1
 801af76:	b125      	cbz	r5, 801af82 <__swsetup_r+0x16>
 801af78:	69ab      	ldr	r3, [r5, #24]
 801af7a:	b913      	cbnz	r3, 801af82 <__swsetup_r+0x16>
 801af7c:	4628      	mov	r0, r5
 801af7e:	f7ff fa87 	bl	801a490 <__sinit>
 801af82:	4b2e      	ldr	r3, [pc, #184]	; (801b03c <__swsetup_r+0xd0>)
 801af84:	429c      	cmp	r4, r3
 801af86:	d10f      	bne.n	801afa8 <__swsetup_r+0x3c>
 801af88:	686c      	ldr	r4, [r5, #4]
 801af8a:	89a3      	ldrh	r3, [r4, #12]
 801af8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801af90:	0719      	lsls	r1, r3, #28
 801af92:	d42c      	bmi.n	801afee <__swsetup_r+0x82>
 801af94:	06dd      	lsls	r5, r3, #27
 801af96:	d411      	bmi.n	801afbc <__swsetup_r+0x50>
 801af98:	2309      	movs	r3, #9
 801af9a:	6033      	str	r3, [r6, #0]
 801af9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801afa0:	81a3      	strh	r3, [r4, #12]
 801afa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801afa6:	e03e      	b.n	801b026 <__swsetup_r+0xba>
 801afa8:	4b25      	ldr	r3, [pc, #148]	; (801b040 <__swsetup_r+0xd4>)
 801afaa:	429c      	cmp	r4, r3
 801afac:	d101      	bne.n	801afb2 <__swsetup_r+0x46>
 801afae:	68ac      	ldr	r4, [r5, #8]
 801afb0:	e7eb      	b.n	801af8a <__swsetup_r+0x1e>
 801afb2:	4b24      	ldr	r3, [pc, #144]	; (801b044 <__swsetup_r+0xd8>)
 801afb4:	429c      	cmp	r4, r3
 801afb6:	bf08      	it	eq
 801afb8:	68ec      	ldreq	r4, [r5, #12]
 801afba:	e7e6      	b.n	801af8a <__swsetup_r+0x1e>
 801afbc:	0758      	lsls	r0, r3, #29
 801afbe:	d512      	bpl.n	801afe6 <__swsetup_r+0x7a>
 801afc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801afc2:	b141      	cbz	r1, 801afd6 <__swsetup_r+0x6a>
 801afc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801afc8:	4299      	cmp	r1, r3
 801afca:	d002      	beq.n	801afd2 <__swsetup_r+0x66>
 801afcc:	4630      	mov	r0, r6
 801afce:	f7ff fc17 	bl	801a800 <_free_r>
 801afd2:	2300      	movs	r3, #0
 801afd4:	6363      	str	r3, [r4, #52]	; 0x34
 801afd6:	89a3      	ldrh	r3, [r4, #12]
 801afd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801afdc:	81a3      	strh	r3, [r4, #12]
 801afde:	2300      	movs	r3, #0
 801afe0:	6063      	str	r3, [r4, #4]
 801afe2:	6923      	ldr	r3, [r4, #16]
 801afe4:	6023      	str	r3, [r4, #0]
 801afe6:	89a3      	ldrh	r3, [r4, #12]
 801afe8:	f043 0308 	orr.w	r3, r3, #8
 801afec:	81a3      	strh	r3, [r4, #12]
 801afee:	6923      	ldr	r3, [r4, #16]
 801aff0:	b94b      	cbnz	r3, 801b006 <__swsetup_r+0x9a>
 801aff2:	89a3      	ldrh	r3, [r4, #12]
 801aff4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801aff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801affc:	d003      	beq.n	801b006 <__swsetup_r+0x9a>
 801affe:	4621      	mov	r1, r4
 801b000:	4630      	mov	r0, r6
 801b002:	f000 f967 	bl	801b2d4 <__smakebuf_r>
 801b006:	89a0      	ldrh	r0, [r4, #12]
 801b008:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b00c:	f010 0301 	ands.w	r3, r0, #1
 801b010:	d00a      	beq.n	801b028 <__swsetup_r+0xbc>
 801b012:	2300      	movs	r3, #0
 801b014:	60a3      	str	r3, [r4, #8]
 801b016:	6963      	ldr	r3, [r4, #20]
 801b018:	425b      	negs	r3, r3
 801b01a:	61a3      	str	r3, [r4, #24]
 801b01c:	6923      	ldr	r3, [r4, #16]
 801b01e:	b943      	cbnz	r3, 801b032 <__swsetup_r+0xc6>
 801b020:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b024:	d1ba      	bne.n	801af9c <__swsetup_r+0x30>
 801b026:	bd70      	pop	{r4, r5, r6, pc}
 801b028:	0781      	lsls	r1, r0, #30
 801b02a:	bf58      	it	pl
 801b02c:	6963      	ldrpl	r3, [r4, #20]
 801b02e:	60a3      	str	r3, [r4, #8]
 801b030:	e7f4      	b.n	801b01c <__swsetup_r+0xb0>
 801b032:	2000      	movs	r0, #0
 801b034:	e7f7      	b.n	801b026 <__swsetup_r+0xba>
 801b036:	bf00      	nop
 801b038:	200009bc 	.word	0x200009bc
 801b03c:	0801d028 	.word	0x0801d028
 801b040:	0801d048 	.word	0x0801d048
 801b044:	0801d008 	.word	0x0801d008

0801b048 <__assert_func>:
 801b048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b04a:	4614      	mov	r4, r2
 801b04c:	461a      	mov	r2, r3
 801b04e:	4b09      	ldr	r3, [pc, #36]	; (801b074 <__assert_func+0x2c>)
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	4605      	mov	r5, r0
 801b054:	68d8      	ldr	r0, [r3, #12]
 801b056:	b14c      	cbz	r4, 801b06c <__assert_func+0x24>
 801b058:	4b07      	ldr	r3, [pc, #28]	; (801b078 <__assert_func+0x30>)
 801b05a:	9100      	str	r1, [sp, #0]
 801b05c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b060:	4906      	ldr	r1, [pc, #24]	; (801b07c <__assert_func+0x34>)
 801b062:	462b      	mov	r3, r5
 801b064:	f000 f8ec 	bl	801b240 <fiprintf>
 801b068:	f000 fe0a 	bl	801bc80 <abort>
 801b06c:	4b04      	ldr	r3, [pc, #16]	; (801b080 <__assert_func+0x38>)
 801b06e:	461c      	mov	r4, r3
 801b070:	e7f3      	b.n	801b05a <__assert_func+0x12>
 801b072:	bf00      	nop
 801b074:	200009bc 	.word	0x200009bc
 801b078:	0801d0de 	.word	0x0801d0de
 801b07c:	0801d0eb 	.word	0x0801d0eb
 801b080:	0801d119 	.word	0x0801d119

0801b084 <_close_r>:
 801b084:	b538      	push	{r3, r4, r5, lr}
 801b086:	4d06      	ldr	r5, [pc, #24]	; (801b0a0 <_close_r+0x1c>)
 801b088:	2300      	movs	r3, #0
 801b08a:	4604      	mov	r4, r0
 801b08c:	4608      	mov	r0, r1
 801b08e:	602b      	str	r3, [r5, #0]
 801b090:	f7e7 f974 	bl	800237c <_close>
 801b094:	1c43      	adds	r3, r0, #1
 801b096:	d102      	bne.n	801b09e <_close_r+0x1a>
 801b098:	682b      	ldr	r3, [r5, #0]
 801b09a:	b103      	cbz	r3, 801b09e <_close_r+0x1a>
 801b09c:	6023      	str	r3, [r4, #0]
 801b09e:	bd38      	pop	{r3, r4, r5, pc}
 801b0a0:	20015d04 	.word	0x20015d04

0801b0a4 <__env_lock>:
 801b0a4:	4801      	ldr	r0, [pc, #4]	; (801b0ac <__env_lock+0x8>)
 801b0a6:	f7ff bb6c 	b.w	801a782 <__retarget_lock_acquire_recursive>
 801b0aa:	bf00      	nop
 801b0ac:	20015cf8 	.word	0x20015cf8

0801b0b0 <__env_unlock>:
 801b0b0:	4801      	ldr	r0, [pc, #4]	; (801b0b8 <__env_unlock+0x8>)
 801b0b2:	f7ff bb67 	b.w	801a784 <__retarget_lock_release_recursive>
 801b0b6:	bf00      	nop
 801b0b8:	20015cf8 	.word	0x20015cf8

0801b0bc <__sflush_r>:
 801b0bc:	898a      	ldrh	r2, [r1, #12]
 801b0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b0c2:	4605      	mov	r5, r0
 801b0c4:	0710      	lsls	r0, r2, #28
 801b0c6:	460c      	mov	r4, r1
 801b0c8:	d458      	bmi.n	801b17c <__sflush_r+0xc0>
 801b0ca:	684b      	ldr	r3, [r1, #4]
 801b0cc:	2b00      	cmp	r3, #0
 801b0ce:	dc05      	bgt.n	801b0dc <__sflush_r+0x20>
 801b0d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b0d2:	2b00      	cmp	r3, #0
 801b0d4:	dc02      	bgt.n	801b0dc <__sflush_r+0x20>
 801b0d6:	2000      	movs	r0, #0
 801b0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b0dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b0de:	2e00      	cmp	r6, #0
 801b0e0:	d0f9      	beq.n	801b0d6 <__sflush_r+0x1a>
 801b0e2:	2300      	movs	r3, #0
 801b0e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b0e8:	682f      	ldr	r7, [r5, #0]
 801b0ea:	602b      	str	r3, [r5, #0]
 801b0ec:	d032      	beq.n	801b154 <__sflush_r+0x98>
 801b0ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b0f0:	89a3      	ldrh	r3, [r4, #12]
 801b0f2:	075a      	lsls	r2, r3, #29
 801b0f4:	d505      	bpl.n	801b102 <__sflush_r+0x46>
 801b0f6:	6863      	ldr	r3, [r4, #4]
 801b0f8:	1ac0      	subs	r0, r0, r3
 801b0fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b0fc:	b10b      	cbz	r3, 801b102 <__sflush_r+0x46>
 801b0fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b100:	1ac0      	subs	r0, r0, r3
 801b102:	2300      	movs	r3, #0
 801b104:	4602      	mov	r2, r0
 801b106:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b108:	6a21      	ldr	r1, [r4, #32]
 801b10a:	4628      	mov	r0, r5
 801b10c:	47b0      	blx	r6
 801b10e:	1c43      	adds	r3, r0, #1
 801b110:	89a3      	ldrh	r3, [r4, #12]
 801b112:	d106      	bne.n	801b122 <__sflush_r+0x66>
 801b114:	6829      	ldr	r1, [r5, #0]
 801b116:	291d      	cmp	r1, #29
 801b118:	d82c      	bhi.n	801b174 <__sflush_r+0xb8>
 801b11a:	4a2a      	ldr	r2, [pc, #168]	; (801b1c4 <__sflush_r+0x108>)
 801b11c:	40ca      	lsrs	r2, r1
 801b11e:	07d6      	lsls	r6, r2, #31
 801b120:	d528      	bpl.n	801b174 <__sflush_r+0xb8>
 801b122:	2200      	movs	r2, #0
 801b124:	6062      	str	r2, [r4, #4]
 801b126:	04d9      	lsls	r1, r3, #19
 801b128:	6922      	ldr	r2, [r4, #16]
 801b12a:	6022      	str	r2, [r4, #0]
 801b12c:	d504      	bpl.n	801b138 <__sflush_r+0x7c>
 801b12e:	1c42      	adds	r2, r0, #1
 801b130:	d101      	bne.n	801b136 <__sflush_r+0x7a>
 801b132:	682b      	ldr	r3, [r5, #0]
 801b134:	b903      	cbnz	r3, 801b138 <__sflush_r+0x7c>
 801b136:	6560      	str	r0, [r4, #84]	; 0x54
 801b138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b13a:	602f      	str	r7, [r5, #0]
 801b13c:	2900      	cmp	r1, #0
 801b13e:	d0ca      	beq.n	801b0d6 <__sflush_r+0x1a>
 801b140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b144:	4299      	cmp	r1, r3
 801b146:	d002      	beq.n	801b14e <__sflush_r+0x92>
 801b148:	4628      	mov	r0, r5
 801b14a:	f7ff fb59 	bl	801a800 <_free_r>
 801b14e:	2000      	movs	r0, #0
 801b150:	6360      	str	r0, [r4, #52]	; 0x34
 801b152:	e7c1      	b.n	801b0d8 <__sflush_r+0x1c>
 801b154:	6a21      	ldr	r1, [r4, #32]
 801b156:	2301      	movs	r3, #1
 801b158:	4628      	mov	r0, r5
 801b15a:	47b0      	blx	r6
 801b15c:	1c41      	adds	r1, r0, #1
 801b15e:	d1c7      	bne.n	801b0f0 <__sflush_r+0x34>
 801b160:	682b      	ldr	r3, [r5, #0]
 801b162:	2b00      	cmp	r3, #0
 801b164:	d0c4      	beq.n	801b0f0 <__sflush_r+0x34>
 801b166:	2b1d      	cmp	r3, #29
 801b168:	d001      	beq.n	801b16e <__sflush_r+0xb2>
 801b16a:	2b16      	cmp	r3, #22
 801b16c:	d101      	bne.n	801b172 <__sflush_r+0xb6>
 801b16e:	602f      	str	r7, [r5, #0]
 801b170:	e7b1      	b.n	801b0d6 <__sflush_r+0x1a>
 801b172:	89a3      	ldrh	r3, [r4, #12]
 801b174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b178:	81a3      	strh	r3, [r4, #12]
 801b17a:	e7ad      	b.n	801b0d8 <__sflush_r+0x1c>
 801b17c:	690f      	ldr	r7, [r1, #16]
 801b17e:	2f00      	cmp	r7, #0
 801b180:	d0a9      	beq.n	801b0d6 <__sflush_r+0x1a>
 801b182:	0793      	lsls	r3, r2, #30
 801b184:	680e      	ldr	r6, [r1, #0]
 801b186:	bf08      	it	eq
 801b188:	694b      	ldreq	r3, [r1, #20]
 801b18a:	600f      	str	r7, [r1, #0]
 801b18c:	bf18      	it	ne
 801b18e:	2300      	movne	r3, #0
 801b190:	eba6 0807 	sub.w	r8, r6, r7
 801b194:	608b      	str	r3, [r1, #8]
 801b196:	f1b8 0f00 	cmp.w	r8, #0
 801b19a:	dd9c      	ble.n	801b0d6 <__sflush_r+0x1a>
 801b19c:	6a21      	ldr	r1, [r4, #32]
 801b19e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b1a0:	4643      	mov	r3, r8
 801b1a2:	463a      	mov	r2, r7
 801b1a4:	4628      	mov	r0, r5
 801b1a6:	47b0      	blx	r6
 801b1a8:	2800      	cmp	r0, #0
 801b1aa:	dc06      	bgt.n	801b1ba <__sflush_r+0xfe>
 801b1ac:	89a3      	ldrh	r3, [r4, #12]
 801b1ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b1b2:	81a3      	strh	r3, [r4, #12]
 801b1b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b1b8:	e78e      	b.n	801b0d8 <__sflush_r+0x1c>
 801b1ba:	4407      	add	r7, r0
 801b1bc:	eba8 0800 	sub.w	r8, r8, r0
 801b1c0:	e7e9      	b.n	801b196 <__sflush_r+0xda>
 801b1c2:	bf00      	nop
 801b1c4:	20400001 	.word	0x20400001

0801b1c8 <_fflush_r>:
 801b1c8:	b538      	push	{r3, r4, r5, lr}
 801b1ca:	690b      	ldr	r3, [r1, #16]
 801b1cc:	4605      	mov	r5, r0
 801b1ce:	460c      	mov	r4, r1
 801b1d0:	b913      	cbnz	r3, 801b1d8 <_fflush_r+0x10>
 801b1d2:	2500      	movs	r5, #0
 801b1d4:	4628      	mov	r0, r5
 801b1d6:	bd38      	pop	{r3, r4, r5, pc}
 801b1d8:	b118      	cbz	r0, 801b1e2 <_fflush_r+0x1a>
 801b1da:	6983      	ldr	r3, [r0, #24]
 801b1dc:	b90b      	cbnz	r3, 801b1e2 <_fflush_r+0x1a>
 801b1de:	f7ff f957 	bl	801a490 <__sinit>
 801b1e2:	4b14      	ldr	r3, [pc, #80]	; (801b234 <_fflush_r+0x6c>)
 801b1e4:	429c      	cmp	r4, r3
 801b1e6:	d11b      	bne.n	801b220 <_fflush_r+0x58>
 801b1e8:	686c      	ldr	r4, [r5, #4]
 801b1ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	d0ef      	beq.n	801b1d2 <_fflush_r+0xa>
 801b1f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b1f4:	07d0      	lsls	r0, r2, #31
 801b1f6:	d404      	bmi.n	801b202 <_fflush_r+0x3a>
 801b1f8:	0599      	lsls	r1, r3, #22
 801b1fa:	d402      	bmi.n	801b202 <_fflush_r+0x3a>
 801b1fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1fe:	f7ff fac0 	bl	801a782 <__retarget_lock_acquire_recursive>
 801b202:	4628      	mov	r0, r5
 801b204:	4621      	mov	r1, r4
 801b206:	f7ff ff59 	bl	801b0bc <__sflush_r>
 801b20a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b20c:	07da      	lsls	r2, r3, #31
 801b20e:	4605      	mov	r5, r0
 801b210:	d4e0      	bmi.n	801b1d4 <_fflush_r+0xc>
 801b212:	89a3      	ldrh	r3, [r4, #12]
 801b214:	059b      	lsls	r3, r3, #22
 801b216:	d4dd      	bmi.n	801b1d4 <_fflush_r+0xc>
 801b218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b21a:	f7ff fab3 	bl	801a784 <__retarget_lock_release_recursive>
 801b21e:	e7d9      	b.n	801b1d4 <_fflush_r+0xc>
 801b220:	4b05      	ldr	r3, [pc, #20]	; (801b238 <_fflush_r+0x70>)
 801b222:	429c      	cmp	r4, r3
 801b224:	d101      	bne.n	801b22a <_fflush_r+0x62>
 801b226:	68ac      	ldr	r4, [r5, #8]
 801b228:	e7df      	b.n	801b1ea <_fflush_r+0x22>
 801b22a:	4b04      	ldr	r3, [pc, #16]	; (801b23c <_fflush_r+0x74>)
 801b22c:	429c      	cmp	r4, r3
 801b22e:	bf08      	it	eq
 801b230:	68ec      	ldreq	r4, [r5, #12]
 801b232:	e7da      	b.n	801b1ea <_fflush_r+0x22>
 801b234:	0801d028 	.word	0x0801d028
 801b238:	0801d048 	.word	0x0801d048
 801b23c:	0801d008 	.word	0x0801d008

0801b240 <fiprintf>:
 801b240:	b40e      	push	{r1, r2, r3}
 801b242:	b503      	push	{r0, r1, lr}
 801b244:	4601      	mov	r1, r0
 801b246:	ab03      	add	r3, sp, #12
 801b248:	4805      	ldr	r0, [pc, #20]	; (801b260 <fiprintf+0x20>)
 801b24a:	f853 2b04 	ldr.w	r2, [r3], #4
 801b24e:	6800      	ldr	r0, [r0, #0]
 801b250:	9301      	str	r3, [sp, #4]
 801b252:	f000 fa3f 	bl	801b6d4 <_vfiprintf_r>
 801b256:	b002      	add	sp, #8
 801b258:	f85d eb04 	ldr.w	lr, [sp], #4
 801b25c:	b003      	add	sp, #12
 801b25e:	4770      	bx	lr
 801b260:	200009bc 	.word	0x200009bc

0801b264 <_lseek_r>:
 801b264:	b538      	push	{r3, r4, r5, lr}
 801b266:	4d07      	ldr	r5, [pc, #28]	; (801b284 <_lseek_r+0x20>)
 801b268:	4604      	mov	r4, r0
 801b26a:	4608      	mov	r0, r1
 801b26c:	4611      	mov	r1, r2
 801b26e:	2200      	movs	r2, #0
 801b270:	602a      	str	r2, [r5, #0]
 801b272:	461a      	mov	r2, r3
 801b274:	f7e7 f8a9 	bl	80023ca <_lseek>
 801b278:	1c43      	adds	r3, r0, #1
 801b27a:	d102      	bne.n	801b282 <_lseek_r+0x1e>
 801b27c:	682b      	ldr	r3, [r5, #0]
 801b27e:	b103      	cbz	r3, 801b282 <_lseek_r+0x1e>
 801b280:	6023      	str	r3, [r4, #0]
 801b282:	bd38      	pop	{r3, r4, r5, pc}
 801b284:	20015d04 	.word	0x20015d04

0801b288 <__swhatbuf_r>:
 801b288:	b570      	push	{r4, r5, r6, lr}
 801b28a:	460e      	mov	r6, r1
 801b28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b290:	2900      	cmp	r1, #0
 801b292:	b096      	sub	sp, #88	; 0x58
 801b294:	4614      	mov	r4, r2
 801b296:	461d      	mov	r5, r3
 801b298:	da08      	bge.n	801b2ac <__swhatbuf_r+0x24>
 801b29a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801b29e:	2200      	movs	r2, #0
 801b2a0:	602a      	str	r2, [r5, #0]
 801b2a2:	061a      	lsls	r2, r3, #24
 801b2a4:	d410      	bmi.n	801b2c8 <__swhatbuf_r+0x40>
 801b2a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b2aa:	e00e      	b.n	801b2ca <__swhatbuf_r+0x42>
 801b2ac:	466a      	mov	r2, sp
 801b2ae:	f000 fcef 	bl	801bc90 <_fstat_r>
 801b2b2:	2800      	cmp	r0, #0
 801b2b4:	dbf1      	blt.n	801b29a <__swhatbuf_r+0x12>
 801b2b6:	9a01      	ldr	r2, [sp, #4]
 801b2b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b2bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b2c0:	425a      	negs	r2, r3
 801b2c2:	415a      	adcs	r2, r3
 801b2c4:	602a      	str	r2, [r5, #0]
 801b2c6:	e7ee      	b.n	801b2a6 <__swhatbuf_r+0x1e>
 801b2c8:	2340      	movs	r3, #64	; 0x40
 801b2ca:	2000      	movs	r0, #0
 801b2cc:	6023      	str	r3, [r4, #0]
 801b2ce:	b016      	add	sp, #88	; 0x58
 801b2d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b2d4 <__smakebuf_r>:
 801b2d4:	898b      	ldrh	r3, [r1, #12]
 801b2d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b2d8:	079d      	lsls	r5, r3, #30
 801b2da:	4606      	mov	r6, r0
 801b2dc:	460c      	mov	r4, r1
 801b2de:	d507      	bpl.n	801b2f0 <__smakebuf_r+0x1c>
 801b2e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b2e4:	6023      	str	r3, [r4, #0]
 801b2e6:	6123      	str	r3, [r4, #16]
 801b2e8:	2301      	movs	r3, #1
 801b2ea:	6163      	str	r3, [r4, #20]
 801b2ec:	b002      	add	sp, #8
 801b2ee:	bd70      	pop	{r4, r5, r6, pc}
 801b2f0:	ab01      	add	r3, sp, #4
 801b2f2:	466a      	mov	r2, sp
 801b2f4:	f7ff ffc8 	bl	801b288 <__swhatbuf_r>
 801b2f8:	9900      	ldr	r1, [sp, #0]
 801b2fa:	4605      	mov	r5, r0
 801b2fc:	4630      	mov	r0, r6
 801b2fe:	f7ff faeb 	bl	801a8d8 <_malloc_r>
 801b302:	b948      	cbnz	r0, 801b318 <__smakebuf_r+0x44>
 801b304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b308:	059a      	lsls	r2, r3, #22
 801b30a:	d4ef      	bmi.n	801b2ec <__smakebuf_r+0x18>
 801b30c:	f023 0303 	bic.w	r3, r3, #3
 801b310:	f043 0302 	orr.w	r3, r3, #2
 801b314:	81a3      	strh	r3, [r4, #12]
 801b316:	e7e3      	b.n	801b2e0 <__smakebuf_r+0xc>
 801b318:	4b0d      	ldr	r3, [pc, #52]	; (801b350 <__smakebuf_r+0x7c>)
 801b31a:	62b3      	str	r3, [r6, #40]	; 0x28
 801b31c:	89a3      	ldrh	r3, [r4, #12]
 801b31e:	6020      	str	r0, [r4, #0]
 801b320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b324:	81a3      	strh	r3, [r4, #12]
 801b326:	9b00      	ldr	r3, [sp, #0]
 801b328:	6163      	str	r3, [r4, #20]
 801b32a:	9b01      	ldr	r3, [sp, #4]
 801b32c:	6120      	str	r0, [r4, #16]
 801b32e:	b15b      	cbz	r3, 801b348 <__smakebuf_r+0x74>
 801b330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b334:	4630      	mov	r0, r6
 801b336:	f000 fcbd 	bl	801bcb4 <_isatty_r>
 801b33a:	b128      	cbz	r0, 801b348 <__smakebuf_r+0x74>
 801b33c:	89a3      	ldrh	r3, [r4, #12]
 801b33e:	f023 0303 	bic.w	r3, r3, #3
 801b342:	f043 0301 	orr.w	r3, r3, #1
 801b346:	81a3      	strh	r3, [r4, #12]
 801b348:	89a0      	ldrh	r0, [r4, #12]
 801b34a:	4305      	orrs	r5, r0
 801b34c:	81a5      	strh	r5, [r4, #12]
 801b34e:	e7cd      	b.n	801b2ec <__smakebuf_r+0x18>
 801b350:	0801a429 	.word	0x0801a429

0801b354 <__malloc_lock>:
 801b354:	4801      	ldr	r0, [pc, #4]	; (801b35c <__malloc_lock+0x8>)
 801b356:	f7ff ba14 	b.w	801a782 <__retarget_lock_acquire_recursive>
 801b35a:	bf00      	nop
 801b35c:	20015cf9 	.word	0x20015cf9

0801b360 <__malloc_unlock>:
 801b360:	4801      	ldr	r0, [pc, #4]	; (801b368 <__malloc_unlock+0x8>)
 801b362:	f7ff ba0f 	b.w	801a784 <__retarget_lock_release_recursive>
 801b366:	bf00      	nop
 801b368:	20015cf9 	.word	0x20015cf9

0801b36c <_realloc_r>:
 801b36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b370:	4680      	mov	r8, r0
 801b372:	4614      	mov	r4, r2
 801b374:	460e      	mov	r6, r1
 801b376:	b921      	cbnz	r1, 801b382 <_realloc_r+0x16>
 801b378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b37c:	4611      	mov	r1, r2
 801b37e:	f7ff baab 	b.w	801a8d8 <_malloc_r>
 801b382:	b92a      	cbnz	r2, 801b390 <_realloc_r+0x24>
 801b384:	f7ff fa3c 	bl	801a800 <_free_r>
 801b388:	4625      	mov	r5, r4
 801b38a:	4628      	mov	r0, r5
 801b38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b390:	f000 fcba 	bl	801bd08 <_malloc_usable_size_r>
 801b394:	4284      	cmp	r4, r0
 801b396:	4607      	mov	r7, r0
 801b398:	d802      	bhi.n	801b3a0 <_realloc_r+0x34>
 801b39a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b39e:	d812      	bhi.n	801b3c6 <_realloc_r+0x5a>
 801b3a0:	4621      	mov	r1, r4
 801b3a2:	4640      	mov	r0, r8
 801b3a4:	f7ff fa98 	bl	801a8d8 <_malloc_r>
 801b3a8:	4605      	mov	r5, r0
 801b3aa:	2800      	cmp	r0, #0
 801b3ac:	d0ed      	beq.n	801b38a <_realloc_r+0x1e>
 801b3ae:	42bc      	cmp	r4, r7
 801b3b0:	4622      	mov	r2, r4
 801b3b2:	4631      	mov	r1, r6
 801b3b4:	bf28      	it	cs
 801b3b6:	463a      	movcs	r2, r7
 801b3b8:	f7ff f9f6 	bl	801a7a8 <memcpy>
 801b3bc:	4631      	mov	r1, r6
 801b3be:	4640      	mov	r0, r8
 801b3c0:	f7ff fa1e 	bl	801a800 <_free_r>
 801b3c4:	e7e1      	b.n	801b38a <_realloc_r+0x1e>
 801b3c6:	4635      	mov	r5, r6
 801b3c8:	e7df      	b.n	801b38a <_realloc_r+0x1e>

0801b3ca <__ssputs_r>:
 801b3ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b3ce:	688e      	ldr	r6, [r1, #8]
 801b3d0:	429e      	cmp	r6, r3
 801b3d2:	4682      	mov	sl, r0
 801b3d4:	460c      	mov	r4, r1
 801b3d6:	4690      	mov	r8, r2
 801b3d8:	461f      	mov	r7, r3
 801b3da:	d838      	bhi.n	801b44e <__ssputs_r+0x84>
 801b3dc:	898a      	ldrh	r2, [r1, #12]
 801b3de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b3e2:	d032      	beq.n	801b44a <__ssputs_r+0x80>
 801b3e4:	6825      	ldr	r5, [r4, #0]
 801b3e6:	6909      	ldr	r1, [r1, #16]
 801b3e8:	eba5 0901 	sub.w	r9, r5, r1
 801b3ec:	6965      	ldr	r5, [r4, #20]
 801b3ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b3f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801b3f6:	3301      	adds	r3, #1
 801b3f8:	444b      	add	r3, r9
 801b3fa:	106d      	asrs	r5, r5, #1
 801b3fc:	429d      	cmp	r5, r3
 801b3fe:	bf38      	it	cc
 801b400:	461d      	movcc	r5, r3
 801b402:	0553      	lsls	r3, r2, #21
 801b404:	d531      	bpl.n	801b46a <__ssputs_r+0xa0>
 801b406:	4629      	mov	r1, r5
 801b408:	f7ff fa66 	bl	801a8d8 <_malloc_r>
 801b40c:	4606      	mov	r6, r0
 801b40e:	b950      	cbnz	r0, 801b426 <__ssputs_r+0x5c>
 801b410:	230c      	movs	r3, #12
 801b412:	f8ca 3000 	str.w	r3, [sl]
 801b416:	89a3      	ldrh	r3, [r4, #12]
 801b418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b41c:	81a3      	strh	r3, [r4, #12]
 801b41e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b426:	6921      	ldr	r1, [r4, #16]
 801b428:	464a      	mov	r2, r9
 801b42a:	f7ff f9bd 	bl	801a7a8 <memcpy>
 801b42e:	89a3      	ldrh	r3, [r4, #12]
 801b430:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b438:	81a3      	strh	r3, [r4, #12]
 801b43a:	6126      	str	r6, [r4, #16]
 801b43c:	6165      	str	r5, [r4, #20]
 801b43e:	444e      	add	r6, r9
 801b440:	eba5 0509 	sub.w	r5, r5, r9
 801b444:	6026      	str	r6, [r4, #0]
 801b446:	60a5      	str	r5, [r4, #8]
 801b448:	463e      	mov	r6, r7
 801b44a:	42be      	cmp	r6, r7
 801b44c:	d900      	bls.n	801b450 <__ssputs_r+0x86>
 801b44e:	463e      	mov	r6, r7
 801b450:	6820      	ldr	r0, [r4, #0]
 801b452:	4632      	mov	r2, r6
 801b454:	4641      	mov	r1, r8
 801b456:	f000 fc3d 	bl	801bcd4 <memmove>
 801b45a:	68a3      	ldr	r3, [r4, #8]
 801b45c:	1b9b      	subs	r3, r3, r6
 801b45e:	60a3      	str	r3, [r4, #8]
 801b460:	6823      	ldr	r3, [r4, #0]
 801b462:	4433      	add	r3, r6
 801b464:	6023      	str	r3, [r4, #0]
 801b466:	2000      	movs	r0, #0
 801b468:	e7db      	b.n	801b422 <__ssputs_r+0x58>
 801b46a:	462a      	mov	r2, r5
 801b46c:	f7ff ff7e 	bl	801b36c <_realloc_r>
 801b470:	4606      	mov	r6, r0
 801b472:	2800      	cmp	r0, #0
 801b474:	d1e1      	bne.n	801b43a <__ssputs_r+0x70>
 801b476:	6921      	ldr	r1, [r4, #16]
 801b478:	4650      	mov	r0, sl
 801b47a:	f7ff f9c1 	bl	801a800 <_free_r>
 801b47e:	e7c7      	b.n	801b410 <__ssputs_r+0x46>

0801b480 <_svfiprintf_r>:
 801b480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b484:	4698      	mov	r8, r3
 801b486:	898b      	ldrh	r3, [r1, #12]
 801b488:	061b      	lsls	r3, r3, #24
 801b48a:	b09d      	sub	sp, #116	; 0x74
 801b48c:	4607      	mov	r7, r0
 801b48e:	460d      	mov	r5, r1
 801b490:	4614      	mov	r4, r2
 801b492:	d50e      	bpl.n	801b4b2 <_svfiprintf_r+0x32>
 801b494:	690b      	ldr	r3, [r1, #16]
 801b496:	b963      	cbnz	r3, 801b4b2 <_svfiprintf_r+0x32>
 801b498:	2140      	movs	r1, #64	; 0x40
 801b49a:	f7ff fa1d 	bl	801a8d8 <_malloc_r>
 801b49e:	6028      	str	r0, [r5, #0]
 801b4a0:	6128      	str	r0, [r5, #16]
 801b4a2:	b920      	cbnz	r0, 801b4ae <_svfiprintf_r+0x2e>
 801b4a4:	230c      	movs	r3, #12
 801b4a6:	603b      	str	r3, [r7, #0]
 801b4a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b4ac:	e0d1      	b.n	801b652 <_svfiprintf_r+0x1d2>
 801b4ae:	2340      	movs	r3, #64	; 0x40
 801b4b0:	616b      	str	r3, [r5, #20]
 801b4b2:	2300      	movs	r3, #0
 801b4b4:	9309      	str	r3, [sp, #36]	; 0x24
 801b4b6:	2320      	movs	r3, #32
 801b4b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b4bc:	f8cd 800c 	str.w	r8, [sp, #12]
 801b4c0:	2330      	movs	r3, #48	; 0x30
 801b4c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b66c <_svfiprintf_r+0x1ec>
 801b4c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b4ca:	f04f 0901 	mov.w	r9, #1
 801b4ce:	4623      	mov	r3, r4
 801b4d0:	469a      	mov	sl, r3
 801b4d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b4d6:	b10a      	cbz	r2, 801b4dc <_svfiprintf_r+0x5c>
 801b4d8:	2a25      	cmp	r2, #37	; 0x25
 801b4da:	d1f9      	bne.n	801b4d0 <_svfiprintf_r+0x50>
 801b4dc:	ebba 0b04 	subs.w	fp, sl, r4
 801b4e0:	d00b      	beq.n	801b4fa <_svfiprintf_r+0x7a>
 801b4e2:	465b      	mov	r3, fp
 801b4e4:	4622      	mov	r2, r4
 801b4e6:	4629      	mov	r1, r5
 801b4e8:	4638      	mov	r0, r7
 801b4ea:	f7ff ff6e 	bl	801b3ca <__ssputs_r>
 801b4ee:	3001      	adds	r0, #1
 801b4f0:	f000 80aa 	beq.w	801b648 <_svfiprintf_r+0x1c8>
 801b4f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b4f6:	445a      	add	r2, fp
 801b4f8:	9209      	str	r2, [sp, #36]	; 0x24
 801b4fa:	f89a 3000 	ldrb.w	r3, [sl]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	f000 80a2 	beq.w	801b648 <_svfiprintf_r+0x1c8>
 801b504:	2300      	movs	r3, #0
 801b506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b50a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b50e:	f10a 0a01 	add.w	sl, sl, #1
 801b512:	9304      	str	r3, [sp, #16]
 801b514:	9307      	str	r3, [sp, #28]
 801b516:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b51a:	931a      	str	r3, [sp, #104]	; 0x68
 801b51c:	4654      	mov	r4, sl
 801b51e:	2205      	movs	r2, #5
 801b520:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b524:	4851      	ldr	r0, [pc, #324]	; (801b66c <_svfiprintf_r+0x1ec>)
 801b526:	f7e4 fe6b 	bl	8000200 <memchr>
 801b52a:	9a04      	ldr	r2, [sp, #16]
 801b52c:	b9d8      	cbnz	r0, 801b566 <_svfiprintf_r+0xe6>
 801b52e:	06d0      	lsls	r0, r2, #27
 801b530:	bf44      	itt	mi
 801b532:	2320      	movmi	r3, #32
 801b534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b538:	0711      	lsls	r1, r2, #28
 801b53a:	bf44      	itt	mi
 801b53c:	232b      	movmi	r3, #43	; 0x2b
 801b53e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b542:	f89a 3000 	ldrb.w	r3, [sl]
 801b546:	2b2a      	cmp	r3, #42	; 0x2a
 801b548:	d015      	beq.n	801b576 <_svfiprintf_r+0xf6>
 801b54a:	9a07      	ldr	r2, [sp, #28]
 801b54c:	4654      	mov	r4, sl
 801b54e:	2000      	movs	r0, #0
 801b550:	f04f 0c0a 	mov.w	ip, #10
 801b554:	4621      	mov	r1, r4
 801b556:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b55a:	3b30      	subs	r3, #48	; 0x30
 801b55c:	2b09      	cmp	r3, #9
 801b55e:	d94e      	bls.n	801b5fe <_svfiprintf_r+0x17e>
 801b560:	b1b0      	cbz	r0, 801b590 <_svfiprintf_r+0x110>
 801b562:	9207      	str	r2, [sp, #28]
 801b564:	e014      	b.n	801b590 <_svfiprintf_r+0x110>
 801b566:	eba0 0308 	sub.w	r3, r0, r8
 801b56a:	fa09 f303 	lsl.w	r3, r9, r3
 801b56e:	4313      	orrs	r3, r2
 801b570:	9304      	str	r3, [sp, #16]
 801b572:	46a2      	mov	sl, r4
 801b574:	e7d2      	b.n	801b51c <_svfiprintf_r+0x9c>
 801b576:	9b03      	ldr	r3, [sp, #12]
 801b578:	1d19      	adds	r1, r3, #4
 801b57a:	681b      	ldr	r3, [r3, #0]
 801b57c:	9103      	str	r1, [sp, #12]
 801b57e:	2b00      	cmp	r3, #0
 801b580:	bfbb      	ittet	lt
 801b582:	425b      	neglt	r3, r3
 801b584:	f042 0202 	orrlt.w	r2, r2, #2
 801b588:	9307      	strge	r3, [sp, #28]
 801b58a:	9307      	strlt	r3, [sp, #28]
 801b58c:	bfb8      	it	lt
 801b58e:	9204      	strlt	r2, [sp, #16]
 801b590:	7823      	ldrb	r3, [r4, #0]
 801b592:	2b2e      	cmp	r3, #46	; 0x2e
 801b594:	d10c      	bne.n	801b5b0 <_svfiprintf_r+0x130>
 801b596:	7863      	ldrb	r3, [r4, #1]
 801b598:	2b2a      	cmp	r3, #42	; 0x2a
 801b59a:	d135      	bne.n	801b608 <_svfiprintf_r+0x188>
 801b59c:	9b03      	ldr	r3, [sp, #12]
 801b59e:	1d1a      	adds	r2, r3, #4
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	9203      	str	r2, [sp, #12]
 801b5a4:	2b00      	cmp	r3, #0
 801b5a6:	bfb8      	it	lt
 801b5a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b5ac:	3402      	adds	r4, #2
 801b5ae:	9305      	str	r3, [sp, #20]
 801b5b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b67c <_svfiprintf_r+0x1fc>
 801b5b4:	7821      	ldrb	r1, [r4, #0]
 801b5b6:	2203      	movs	r2, #3
 801b5b8:	4650      	mov	r0, sl
 801b5ba:	f7e4 fe21 	bl	8000200 <memchr>
 801b5be:	b140      	cbz	r0, 801b5d2 <_svfiprintf_r+0x152>
 801b5c0:	2340      	movs	r3, #64	; 0x40
 801b5c2:	eba0 000a 	sub.w	r0, r0, sl
 801b5c6:	fa03 f000 	lsl.w	r0, r3, r0
 801b5ca:	9b04      	ldr	r3, [sp, #16]
 801b5cc:	4303      	orrs	r3, r0
 801b5ce:	3401      	adds	r4, #1
 801b5d0:	9304      	str	r3, [sp, #16]
 801b5d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b5d6:	4826      	ldr	r0, [pc, #152]	; (801b670 <_svfiprintf_r+0x1f0>)
 801b5d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b5dc:	2206      	movs	r2, #6
 801b5de:	f7e4 fe0f 	bl	8000200 <memchr>
 801b5e2:	2800      	cmp	r0, #0
 801b5e4:	d038      	beq.n	801b658 <_svfiprintf_r+0x1d8>
 801b5e6:	4b23      	ldr	r3, [pc, #140]	; (801b674 <_svfiprintf_r+0x1f4>)
 801b5e8:	bb1b      	cbnz	r3, 801b632 <_svfiprintf_r+0x1b2>
 801b5ea:	9b03      	ldr	r3, [sp, #12]
 801b5ec:	3307      	adds	r3, #7
 801b5ee:	f023 0307 	bic.w	r3, r3, #7
 801b5f2:	3308      	adds	r3, #8
 801b5f4:	9303      	str	r3, [sp, #12]
 801b5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5f8:	4433      	add	r3, r6
 801b5fa:	9309      	str	r3, [sp, #36]	; 0x24
 801b5fc:	e767      	b.n	801b4ce <_svfiprintf_r+0x4e>
 801b5fe:	fb0c 3202 	mla	r2, ip, r2, r3
 801b602:	460c      	mov	r4, r1
 801b604:	2001      	movs	r0, #1
 801b606:	e7a5      	b.n	801b554 <_svfiprintf_r+0xd4>
 801b608:	2300      	movs	r3, #0
 801b60a:	3401      	adds	r4, #1
 801b60c:	9305      	str	r3, [sp, #20]
 801b60e:	4619      	mov	r1, r3
 801b610:	f04f 0c0a 	mov.w	ip, #10
 801b614:	4620      	mov	r0, r4
 801b616:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b61a:	3a30      	subs	r2, #48	; 0x30
 801b61c:	2a09      	cmp	r2, #9
 801b61e:	d903      	bls.n	801b628 <_svfiprintf_r+0x1a8>
 801b620:	2b00      	cmp	r3, #0
 801b622:	d0c5      	beq.n	801b5b0 <_svfiprintf_r+0x130>
 801b624:	9105      	str	r1, [sp, #20]
 801b626:	e7c3      	b.n	801b5b0 <_svfiprintf_r+0x130>
 801b628:	fb0c 2101 	mla	r1, ip, r1, r2
 801b62c:	4604      	mov	r4, r0
 801b62e:	2301      	movs	r3, #1
 801b630:	e7f0      	b.n	801b614 <_svfiprintf_r+0x194>
 801b632:	ab03      	add	r3, sp, #12
 801b634:	9300      	str	r3, [sp, #0]
 801b636:	462a      	mov	r2, r5
 801b638:	4b0f      	ldr	r3, [pc, #60]	; (801b678 <_svfiprintf_r+0x1f8>)
 801b63a:	a904      	add	r1, sp, #16
 801b63c:	4638      	mov	r0, r7
 801b63e:	f3af 8000 	nop.w
 801b642:	1c42      	adds	r2, r0, #1
 801b644:	4606      	mov	r6, r0
 801b646:	d1d6      	bne.n	801b5f6 <_svfiprintf_r+0x176>
 801b648:	89ab      	ldrh	r3, [r5, #12]
 801b64a:	065b      	lsls	r3, r3, #25
 801b64c:	f53f af2c 	bmi.w	801b4a8 <_svfiprintf_r+0x28>
 801b650:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b652:	b01d      	add	sp, #116	; 0x74
 801b654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b658:	ab03      	add	r3, sp, #12
 801b65a:	9300      	str	r3, [sp, #0]
 801b65c:	462a      	mov	r2, r5
 801b65e:	4b06      	ldr	r3, [pc, #24]	; (801b678 <_svfiprintf_r+0x1f8>)
 801b660:	a904      	add	r1, sp, #16
 801b662:	4638      	mov	r0, r7
 801b664:	f000 f9d4 	bl	801ba10 <_printf_i>
 801b668:	e7eb      	b.n	801b642 <_svfiprintf_r+0x1c2>
 801b66a:	bf00      	nop
 801b66c:	0801d11a 	.word	0x0801d11a
 801b670:	0801d124 	.word	0x0801d124
 801b674:	00000000 	.word	0x00000000
 801b678:	0801b3cb 	.word	0x0801b3cb
 801b67c:	0801d120 	.word	0x0801d120

0801b680 <__sfputc_r>:
 801b680:	6893      	ldr	r3, [r2, #8]
 801b682:	3b01      	subs	r3, #1
 801b684:	2b00      	cmp	r3, #0
 801b686:	b410      	push	{r4}
 801b688:	6093      	str	r3, [r2, #8]
 801b68a:	da08      	bge.n	801b69e <__sfputc_r+0x1e>
 801b68c:	6994      	ldr	r4, [r2, #24]
 801b68e:	42a3      	cmp	r3, r4
 801b690:	db01      	blt.n	801b696 <__sfputc_r+0x16>
 801b692:	290a      	cmp	r1, #10
 801b694:	d103      	bne.n	801b69e <__sfputc_r+0x1e>
 801b696:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b69a:	f7ff bc03 	b.w	801aea4 <__swbuf_r>
 801b69e:	6813      	ldr	r3, [r2, #0]
 801b6a0:	1c58      	adds	r0, r3, #1
 801b6a2:	6010      	str	r0, [r2, #0]
 801b6a4:	7019      	strb	r1, [r3, #0]
 801b6a6:	4608      	mov	r0, r1
 801b6a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b6ac:	4770      	bx	lr

0801b6ae <__sfputs_r>:
 801b6ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6b0:	4606      	mov	r6, r0
 801b6b2:	460f      	mov	r7, r1
 801b6b4:	4614      	mov	r4, r2
 801b6b6:	18d5      	adds	r5, r2, r3
 801b6b8:	42ac      	cmp	r4, r5
 801b6ba:	d101      	bne.n	801b6c0 <__sfputs_r+0x12>
 801b6bc:	2000      	movs	r0, #0
 801b6be:	e007      	b.n	801b6d0 <__sfputs_r+0x22>
 801b6c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b6c4:	463a      	mov	r2, r7
 801b6c6:	4630      	mov	r0, r6
 801b6c8:	f7ff ffda 	bl	801b680 <__sfputc_r>
 801b6cc:	1c43      	adds	r3, r0, #1
 801b6ce:	d1f3      	bne.n	801b6b8 <__sfputs_r+0xa>
 801b6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b6d4 <_vfiprintf_r>:
 801b6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6d8:	460d      	mov	r5, r1
 801b6da:	b09d      	sub	sp, #116	; 0x74
 801b6dc:	4614      	mov	r4, r2
 801b6de:	4698      	mov	r8, r3
 801b6e0:	4606      	mov	r6, r0
 801b6e2:	b118      	cbz	r0, 801b6ec <_vfiprintf_r+0x18>
 801b6e4:	6983      	ldr	r3, [r0, #24]
 801b6e6:	b90b      	cbnz	r3, 801b6ec <_vfiprintf_r+0x18>
 801b6e8:	f7fe fed2 	bl	801a490 <__sinit>
 801b6ec:	4b89      	ldr	r3, [pc, #548]	; (801b914 <_vfiprintf_r+0x240>)
 801b6ee:	429d      	cmp	r5, r3
 801b6f0:	d11b      	bne.n	801b72a <_vfiprintf_r+0x56>
 801b6f2:	6875      	ldr	r5, [r6, #4]
 801b6f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b6f6:	07d9      	lsls	r1, r3, #31
 801b6f8:	d405      	bmi.n	801b706 <_vfiprintf_r+0x32>
 801b6fa:	89ab      	ldrh	r3, [r5, #12]
 801b6fc:	059a      	lsls	r2, r3, #22
 801b6fe:	d402      	bmi.n	801b706 <_vfiprintf_r+0x32>
 801b700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b702:	f7ff f83e 	bl	801a782 <__retarget_lock_acquire_recursive>
 801b706:	89ab      	ldrh	r3, [r5, #12]
 801b708:	071b      	lsls	r3, r3, #28
 801b70a:	d501      	bpl.n	801b710 <_vfiprintf_r+0x3c>
 801b70c:	692b      	ldr	r3, [r5, #16]
 801b70e:	b9eb      	cbnz	r3, 801b74c <_vfiprintf_r+0x78>
 801b710:	4629      	mov	r1, r5
 801b712:	4630      	mov	r0, r6
 801b714:	f7ff fc2a 	bl	801af6c <__swsetup_r>
 801b718:	b1c0      	cbz	r0, 801b74c <_vfiprintf_r+0x78>
 801b71a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b71c:	07dc      	lsls	r4, r3, #31
 801b71e:	d50e      	bpl.n	801b73e <_vfiprintf_r+0x6a>
 801b720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b724:	b01d      	add	sp, #116	; 0x74
 801b726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b72a:	4b7b      	ldr	r3, [pc, #492]	; (801b918 <_vfiprintf_r+0x244>)
 801b72c:	429d      	cmp	r5, r3
 801b72e:	d101      	bne.n	801b734 <_vfiprintf_r+0x60>
 801b730:	68b5      	ldr	r5, [r6, #8]
 801b732:	e7df      	b.n	801b6f4 <_vfiprintf_r+0x20>
 801b734:	4b79      	ldr	r3, [pc, #484]	; (801b91c <_vfiprintf_r+0x248>)
 801b736:	429d      	cmp	r5, r3
 801b738:	bf08      	it	eq
 801b73a:	68f5      	ldreq	r5, [r6, #12]
 801b73c:	e7da      	b.n	801b6f4 <_vfiprintf_r+0x20>
 801b73e:	89ab      	ldrh	r3, [r5, #12]
 801b740:	0598      	lsls	r0, r3, #22
 801b742:	d4ed      	bmi.n	801b720 <_vfiprintf_r+0x4c>
 801b744:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b746:	f7ff f81d 	bl	801a784 <__retarget_lock_release_recursive>
 801b74a:	e7e9      	b.n	801b720 <_vfiprintf_r+0x4c>
 801b74c:	2300      	movs	r3, #0
 801b74e:	9309      	str	r3, [sp, #36]	; 0x24
 801b750:	2320      	movs	r3, #32
 801b752:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b756:	f8cd 800c 	str.w	r8, [sp, #12]
 801b75a:	2330      	movs	r3, #48	; 0x30
 801b75c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b920 <_vfiprintf_r+0x24c>
 801b760:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b764:	f04f 0901 	mov.w	r9, #1
 801b768:	4623      	mov	r3, r4
 801b76a:	469a      	mov	sl, r3
 801b76c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b770:	b10a      	cbz	r2, 801b776 <_vfiprintf_r+0xa2>
 801b772:	2a25      	cmp	r2, #37	; 0x25
 801b774:	d1f9      	bne.n	801b76a <_vfiprintf_r+0x96>
 801b776:	ebba 0b04 	subs.w	fp, sl, r4
 801b77a:	d00b      	beq.n	801b794 <_vfiprintf_r+0xc0>
 801b77c:	465b      	mov	r3, fp
 801b77e:	4622      	mov	r2, r4
 801b780:	4629      	mov	r1, r5
 801b782:	4630      	mov	r0, r6
 801b784:	f7ff ff93 	bl	801b6ae <__sfputs_r>
 801b788:	3001      	adds	r0, #1
 801b78a:	f000 80aa 	beq.w	801b8e2 <_vfiprintf_r+0x20e>
 801b78e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b790:	445a      	add	r2, fp
 801b792:	9209      	str	r2, [sp, #36]	; 0x24
 801b794:	f89a 3000 	ldrb.w	r3, [sl]
 801b798:	2b00      	cmp	r3, #0
 801b79a:	f000 80a2 	beq.w	801b8e2 <_vfiprintf_r+0x20e>
 801b79e:	2300      	movs	r3, #0
 801b7a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b7a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b7a8:	f10a 0a01 	add.w	sl, sl, #1
 801b7ac:	9304      	str	r3, [sp, #16]
 801b7ae:	9307      	str	r3, [sp, #28]
 801b7b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b7b4:	931a      	str	r3, [sp, #104]	; 0x68
 801b7b6:	4654      	mov	r4, sl
 801b7b8:	2205      	movs	r2, #5
 801b7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b7be:	4858      	ldr	r0, [pc, #352]	; (801b920 <_vfiprintf_r+0x24c>)
 801b7c0:	f7e4 fd1e 	bl	8000200 <memchr>
 801b7c4:	9a04      	ldr	r2, [sp, #16]
 801b7c6:	b9d8      	cbnz	r0, 801b800 <_vfiprintf_r+0x12c>
 801b7c8:	06d1      	lsls	r1, r2, #27
 801b7ca:	bf44      	itt	mi
 801b7cc:	2320      	movmi	r3, #32
 801b7ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b7d2:	0713      	lsls	r3, r2, #28
 801b7d4:	bf44      	itt	mi
 801b7d6:	232b      	movmi	r3, #43	; 0x2b
 801b7d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b7dc:	f89a 3000 	ldrb.w	r3, [sl]
 801b7e0:	2b2a      	cmp	r3, #42	; 0x2a
 801b7e2:	d015      	beq.n	801b810 <_vfiprintf_r+0x13c>
 801b7e4:	9a07      	ldr	r2, [sp, #28]
 801b7e6:	4654      	mov	r4, sl
 801b7e8:	2000      	movs	r0, #0
 801b7ea:	f04f 0c0a 	mov.w	ip, #10
 801b7ee:	4621      	mov	r1, r4
 801b7f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b7f4:	3b30      	subs	r3, #48	; 0x30
 801b7f6:	2b09      	cmp	r3, #9
 801b7f8:	d94e      	bls.n	801b898 <_vfiprintf_r+0x1c4>
 801b7fa:	b1b0      	cbz	r0, 801b82a <_vfiprintf_r+0x156>
 801b7fc:	9207      	str	r2, [sp, #28]
 801b7fe:	e014      	b.n	801b82a <_vfiprintf_r+0x156>
 801b800:	eba0 0308 	sub.w	r3, r0, r8
 801b804:	fa09 f303 	lsl.w	r3, r9, r3
 801b808:	4313      	orrs	r3, r2
 801b80a:	9304      	str	r3, [sp, #16]
 801b80c:	46a2      	mov	sl, r4
 801b80e:	e7d2      	b.n	801b7b6 <_vfiprintf_r+0xe2>
 801b810:	9b03      	ldr	r3, [sp, #12]
 801b812:	1d19      	adds	r1, r3, #4
 801b814:	681b      	ldr	r3, [r3, #0]
 801b816:	9103      	str	r1, [sp, #12]
 801b818:	2b00      	cmp	r3, #0
 801b81a:	bfbb      	ittet	lt
 801b81c:	425b      	neglt	r3, r3
 801b81e:	f042 0202 	orrlt.w	r2, r2, #2
 801b822:	9307      	strge	r3, [sp, #28]
 801b824:	9307      	strlt	r3, [sp, #28]
 801b826:	bfb8      	it	lt
 801b828:	9204      	strlt	r2, [sp, #16]
 801b82a:	7823      	ldrb	r3, [r4, #0]
 801b82c:	2b2e      	cmp	r3, #46	; 0x2e
 801b82e:	d10c      	bne.n	801b84a <_vfiprintf_r+0x176>
 801b830:	7863      	ldrb	r3, [r4, #1]
 801b832:	2b2a      	cmp	r3, #42	; 0x2a
 801b834:	d135      	bne.n	801b8a2 <_vfiprintf_r+0x1ce>
 801b836:	9b03      	ldr	r3, [sp, #12]
 801b838:	1d1a      	adds	r2, r3, #4
 801b83a:	681b      	ldr	r3, [r3, #0]
 801b83c:	9203      	str	r2, [sp, #12]
 801b83e:	2b00      	cmp	r3, #0
 801b840:	bfb8      	it	lt
 801b842:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b846:	3402      	adds	r4, #2
 801b848:	9305      	str	r3, [sp, #20]
 801b84a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b930 <_vfiprintf_r+0x25c>
 801b84e:	7821      	ldrb	r1, [r4, #0]
 801b850:	2203      	movs	r2, #3
 801b852:	4650      	mov	r0, sl
 801b854:	f7e4 fcd4 	bl	8000200 <memchr>
 801b858:	b140      	cbz	r0, 801b86c <_vfiprintf_r+0x198>
 801b85a:	2340      	movs	r3, #64	; 0x40
 801b85c:	eba0 000a 	sub.w	r0, r0, sl
 801b860:	fa03 f000 	lsl.w	r0, r3, r0
 801b864:	9b04      	ldr	r3, [sp, #16]
 801b866:	4303      	orrs	r3, r0
 801b868:	3401      	adds	r4, #1
 801b86a:	9304      	str	r3, [sp, #16]
 801b86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b870:	482c      	ldr	r0, [pc, #176]	; (801b924 <_vfiprintf_r+0x250>)
 801b872:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b876:	2206      	movs	r2, #6
 801b878:	f7e4 fcc2 	bl	8000200 <memchr>
 801b87c:	2800      	cmp	r0, #0
 801b87e:	d03f      	beq.n	801b900 <_vfiprintf_r+0x22c>
 801b880:	4b29      	ldr	r3, [pc, #164]	; (801b928 <_vfiprintf_r+0x254>)
 801b882:	bb1b      	cbnz	r3, 801b8cc <_vfiprintf_r+0x1f8>
 801b884:	9b03      	ldr	r3, [sp, #12]
 801b886:	3307      	adds	r3, #7
 801b888:	f023 0307 	bic.w	r3, r3, #7
 801b88c:	3308      	adds	r3, #8
 801b88e:	9303      	str	r3, [sp, #12]
 801b890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b892:	443b      	add	r3, r7
 801b894:	9309      	str	r3, [sp, #36]	; 0x24
 801b896:	e767      	b.n	801b768 <_vfiprintf_r+0x94>
 801b898:	fb0c 3202 	mla	r2, ip, r2, r3
 801b89c:	460c      	mov	r4, r1
 801b89e:	2001      	movs	r0, #1
 801b8a0:	e7a5      	b.n	801b7ee <_vfiprintf_r+0x11a>
 801b8a2:	2300      	movs	r3, #0
 801b8a4:	3401      	adds	r4, #1
 801b8a6:	9305      	str	r3, [sp, #20]
 801b8a8:	4619      	mov	r1, r3
 801b8aa:	f04f 0c0a 	mov.w	ip, #10
 801b8ae:	4620      	mov	r0, r4
 801b8b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b8b4:	3a30      	subs	r2, #48	; 0x30
 801b8b6:	2a09      	cmp	r2, #9
 801b8b8:	d903      	bls.n	801b8c2 <_vfiprintf_r+0x1ee>
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	d0c5      	beq.n	801b84a <_vfiprintf_r+0x176>
 801b8be:	9105      	str	r1, [sp, #20]
 801b8c0:	e7c3      	b.n	801b84a <_vfiprintf_r+0x176>
 801b8c2:	fb0c 2101 	mla	r1, ip, r1, r2
 801b8c6:	4604      	mov	r4, r0
 801b8c8:	2301      	movs	r3, #1
 801b8ca:	e7f0      	b.n	801b8ae <_vfiprintf_r+0x1da>
 801b8cc:	ab03      	add	r3, sp, #12
 801b8ce:	9300      	str	r3, [sp, #0]
 801b8d0:	462a      	mov	r2, r5
 801b8d2:	4b16      	ldr	r3, [pc, #88]	; (801b92c <_vfiprintf_r+0x258>)
 801b8d4:	a904      	add	r1, sp, #16
 801b8d6:	4630      	mov	r0, r6
 801b8d8:	f3af 8000 	nop.w
 801b8dc:	4607      	mov	r7, r0
 801b8de:	1c78      	adds	r0, r7, #1
 801b8e0:	d1d6      	bne.n	801b890 <_vfiprintf_r+0x1bc>
 801b8e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b8e4:	07d9      	lsls	r1, r3, #31
 801b8e6:	d405      	bmi.n	801b8f4 <_vfiprintf_r+0x220>
 801b8e8:	89ab      	ldrh	r3, [r5, #12]
 801b8ea:	059a      	lsls	r2, r3, #22
 801b8ec:	d402      	bmi.n	801b8f4 <_vfiprintf_r+0x220>
 801b8ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b8f0:	f7fe ff48 	bl	801a784 <__retarget_lock_release_recursive>
 801b8f4:	89ab      	ldrh	r3, [r5, #12]
 801b8f6:	065b      	lsls	r3, r3, #25
 801b8f8:	f53f af12 	bmi.w	801b720 <_vfiprintf_r+0x4c>
 801b8fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b8fe:	e711      	b.n	801b724 <_vfiprintf_r+0x50>
 801b900:	ab03      	add	r3, sp, #12
 801b902:	9300      	str	r3, [sp, #0]
 801b904:	462a      	mov	r2, r5
 801b906:	4b09      	ldr	r3, [pc, #36]	; (801b92c <_vfiprintf_r+0x258>)
 801b908:	a904      	add	r1, sp, #16
 801b90a:	4630      	mov	r0, r6
 801b90c:	f000 f880 	bl	801ba10 <_printf_i>
 801b910:	e7e4      	b.n	801b8dc <_vfiprintf_r+0x208>
 801b912:	bf00      	nop
 801b914:	0801d028 	.word	0x0801d028
 801b918:	0801d048 	.word	0x0801d048
 801b91c:	0801d008 	.word	0x0801d008
 801b920:	0801d11a 	.word	0x0801d11a
 801b924:	0801d124 	.word	0x0801d124
 801b928:	00000000 	.word	0x00000000
 801b92c:	0801b6af 	.word	0x0801b6af
 801b930:	0801d120 	.word	0x0801d120

0801b934 <_printf_common>:
 801b934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b938:	4616      	mov	r6, r2
 801b93a:	4699      	mov	r9, r3
 801b93c:	688a      	ldr	r2, [r1, #8]
 801b93e:	690b      	ldr	r3, [r1, #16]
 801b940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b944:	4293      	cmp	r3, r2
 801b946:	bfb8      	it	lt
 801b948:	4613      	movlt	r3, r2
 801b94a:	6033      	str	r3, [r6, #0]
 801b94c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b950:	4607      	mov	r7, r0
 801b952:	460c      	mov	r4, r1
 801b954:	b10a      	cbz	r2, 801b95a <_printf_common+0x26>
 801b956:	3301      	adds	r3, #1
 801b958:	6033      	str	r3, [r6, #0]
 801b95a:	6823      	ldr	r3, [r4, #0]
 801b95c:	0699      	lsls	r1, r3, #26
 801b95e:	bf42      	ittt	mi
 801b960:	6833      	ldrmi	r3, [r6, #0]
 801b962:	3302      	addmi	r3, #2
 801b964:	6033      	strmi	r3, [r6, #0]
 801b966:	6825      	ldr	r5, [r4, #0]
 801b968:	f015 0506 	ands.w	r5, r5, #6
 801b96c:	d106      	bne.n	801b97c <_printf_common+0x48>
 801b96e:	f104 0a19 	add.w	sl, r4, #25
 801b972:	68e3      	ldr	r3, [r4, #12]
 801b974:	6832      	ldr	r2, [r6, #0]
 801b976:	1a9b      	subs	r3, r3, r2
 801b978:	42ab      	cmp	r3, r5
 801b97a:	dc26      	bgt.n	801b9ca <_printf_common+0x96>
 801b97c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b980:	1e13      	subs	r3, r2, #0
 801b982:	6822      	ldr	r2, [r4, #0]
 801b984:	bf18      	it	ne
 801b986:	2301      	movne	r3, #1
 801b988:	0692      	lsls	r2, r2, #26
 801b98a:	d42b      	bmi.n	801b9e4 <_printf_common+0xb0>
 801b98c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b990:	4649      	mov	r1, r9
 801b992:	4638      	mov	r0, r7
 801b994:	47c0      	blx	r8
 801b996:	3001      	adds	r0, #1
 801b998:	d01e      	beq.n	801b9d8 <_printf_common+0xa4>
 801b99a:	6823      	ldr	r3, [r4, #0]
 801b99c:	68e5      	ldr	r5, [r4, #12]
 801b99e:	6832      	ldr	r2, [r6, #0]
 801b9a0:	f003 0306 	and.w	r3, r3, #6
 801b9a4:	2b04      	cmp	r3, #4
 801b9a6:	bf08      	it	eq
 801b9a8:	1aad      	subeq	r5, r5, r2
 801b9aa:	68a3      	ldr	r3, [r4, #8]
 801b9ac:	6922      	ldr	r2, [r4, #16]
 801b9ae:	bf0c      	ite	eq
 801b9b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b9b4:	2500      	movne	r5, #0
 801b9b6:	4293      	cmp	r3, r2
 801b9b8:	bfc4      	itt	gt
 801b9ba:	1a9b      	subgt	r3, r3, r2
 801b9bc:	18ed      	addgt	r5, r5, r3
 801b9be:	2600      	movs	r6, #0
 801b9c0:	341a      	adds	r4, #26
 801b9c2:	42b5      	cmp	r5, r6
 801b9c4:	d11a      	bne.n	801b9fc <_printf_common+0xc8>
 801b9c6:	2000      	movs	r0, #0
 801b9c8:	e008      	b.n	801b9dc <_printf_common+0xa8>
 801b9ca:	2301      	movs	r3, #1
 801b9cc:	4652      	mov	r2, sl
 801b9ce:	4649      	mov	r1, r9
 801b9d0:	4638      	mov	r0, r7
 801b9d2:	47c0      	blx	r8
 801b9d4:	3001      	adds	r0, #1
 801b9d6:	d103      	bne.n	801b9e0 <_printf_common+0xac>
 801b9d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b9e0:	3501      	adds	r5, #1
 801b9e2:	e7c6      	b.n	801b972 <_printf_common+0x3e>
 801b9e4:	18e1      	adds	r1, r4, r3
 801b9e6:	1c5a      	adds	r2, r3, #1
 801b9e8:	2030      	movs	r0, #48	; 0x30
 801b9ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b9ee:	4422      	add	r2, r4
 801b9f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b9f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b9f8:	3302      	adds	r3, #2
 801b9fa:	e7c7      	b.n	801b98c <_printf_common+0x58>
 801b9fc:	2301      	movs	r3, #1
 801b9fe:	4622      	mov	r2, r4
 801ba00:	4649      	mov	r1, r9
 801ba02:	4638      	mov	r0, r7
 801ba04:	47c0      	blx	r8
 801ba06:	3001      	adds	r0, #1
 801ba08:	d0e6      	beq.n	801b9d8 <_printf_common+0xa4>
 801ba0a:	3601      	adds	r6, #1
 801ba0c:	e7d9      	b.n	801b9c2 <_printf_common+0x8e>
	...

0801ba10 <_printf_i>:
 801ba10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ba14:	7e0f      	ldrb	r7, [r1, #24]
 801ba16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ba18:	2f78      	cmp	r7, #120	; 0x78
 801ba1a:	4691      	mov	r9, r2
 801ba1c:	4680      	mov	r8, r0
 801ba1e:	460c      	mov	r4, r1
 801ba20:	469a      	mov	sl, r3
 801ba22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ba26:	d807      	bhi.n	801ba38 <_printf_i+0x28>
 801ba28:	2f62      	cmp	r7, #98	; 0x62
 801ba2a:	d80a      	bhi.n	801ba42 <_printf_i+0x32>
 801ba2c:	2f00      	cmp	r7, #0
 801ba2e:	f000 80d8 	beq.w	801bbe2 <_printf_i+0x1d2>
 801ba32:	2f58      	cmp	r7, #88	; 0x58
 801ba34:	f000 80a3 	beq.w	801bb7e <_printf_i+0x16e>
 801ba38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ba3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ba40:	e03a      	b.n	801bab8 <_printf_i+0xa8>
 801ba42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ba46:	2b15      	cmp	r3, #21
 801ba48:	d8f6      	bhi.n	801ba38 <_printf_i+0x28>
 801ba4a:	a101      	add	r1, pc, #4	; (adr r1, 801ba50 <_printf_i+0x40>)
 801ba4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ba50:	0801baa9 	.word	0x0801baa9
 801ba54:	0801babd 	.word	0x0801babd
 801ba58:	0801ba39 	.word	0x0801ba39
 801ba5c:	0801ba39 	.word	0x0801ba39
 801ba60:	0801ba39 	.word	0x0801ba39
 801ba64:	0801ba39 	.word	0x0801ba39
 801ba68:	0801babd 	.word	0x0801babd
 801ba6c:	0801ba39 	.word	0x0801ba39
 801ba70:	0801ba39 	.word	0x0801ba39
 801ba74:	0801ba39 	.word	0x0801ba39
 801ba78:	0801ba39 	.word	0x0801ba39
 801ba7c:	0801bbc9 	.word	0x0801bbc9
 801ba80:	0801baed 	.word	0x0801baed
 801ba84:	0801bbab 	.word	0x0801bbab
 801ba88:	0801ba39 	.word	0x0801ba39
 801ba8c:	0801ba39 	.word	0x0801ba39
 801ba90:	0801bbeb 	.word	0x0801bbeb
 801ba94:	0801ba39 	.word	0x0801ba39
 801ba98:	0801baed 	.word	0x0801baed
 801ba9c:	0801ba39 	.word	0x0801ba39
 801baa0:	0801ba39 	.word	0x0801ba39
 801baa4:	0801bbb3 	.word	0x0801bbb3
 801baa8:	682b      	ldr	r3, [r5, #0]
 801baaa:	1d1a      	adds	r2, r3, #4
 801baac:	681b      	ldr	r3, [r3, #0]
 801baae:	602a      	str	r2, [r5, #0]
 801bab0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bab4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bab8:	2301      	movs	r3, #1
 801baba:	e0a3      	b.n	801bc04 <_printf_i+0x1f4>
 801babc:	6820      	ldr	r0, [r4, #0]
 801babe:	6829      	ldr	r1, [r5, #0]
 801bac0:	0606      	lsls	r6, r0, #24
 801bac2:	f101 0304 	add.w	r3, r1, #4
 801bac6:	d50a      	bpl.n	801bade <_printf_i+0xce>
 801bac8:	680e      	ldr	r6, [r1, #0]
 801baca:	602b      	str	r3, [r5, #0]
 801bacc:	2e00      	cmp	r6, #0
 801bace:	da03      	bge.n	801bad8 <_printf_i+0xc8>
 801bad0:	232d      	movs	r3, #45	; 0x2d
 801bad2:	4276      	negs	r6, r6
 801bad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bad8:	485e      	ldr	r0, [pc, #376]	; (801bc54 <_printf_i+0x244>)
 801bada:	230a      	movs	r3, #10
 801badc:	e019      	b.n	801bb12 <_printf_i+0x102>
 801bade:	680e      	ldr	r6, [r1, #0]
 801bae0:	602b      	str	r3, [r5, #0]
 801bae2:	f010 0f40 	tst.w	r0, #64	; 0x40
 801bae6:	bf18      	it	ne
 801bae8:	b236      	sxthne	r6, r6
 801baea:	e7ef      	b.n	801bacc <_printf_i+0xbc>
 801baec:	682b      	ldr	r3, [r5, #0]
 801baee:	6820      	ldr	r0, [r4, #0]
 801baf0:	1d19      	adds	r1, r3, #4
 801baf2:	6029      	str	r1, [r5, #0]
 801baf4:	0601      	lsls	r1, r0, #24
 801baf6:	d501      	bpl.n	801bafc <_printf_i+0xec>
 801baf8:	681e      	ldr	r6, [r3, #0]
 801bafa:	e002      	b.n	801bb02 <_printf_i+0xf2>
 801bafc:	0646      	lsls	r6, r0, #25
 801bafe:	d5fb      	bpl.n	801baf8 <_printf_i+0xe8>
 801bb00:	881e      	ldrh	r6, [r3, #0]
 801bb02:	4854      	ldr	r0, [pc, #336]	; (801bc54 <_printf_i+0x244>)
 801bb04:	2f6f      	cmp	r7, #111	; 0x6f
 801bb06:	bf0c      	ite	eq
 801bb08:	2308      	moveq	r3, #8
 801bb0a:	230a      	movne	r3, #10
 801bb0c:	2100      	movs	r1, #0
 801bb0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bb12:	6865      	ldr	r5, [r4, #4]
 801bb14:	60a5      	str	r5, [r4, #8]
 801bb16:	2d00      	cmp	r5, #0
 801bb18:	bfa2      	ittt	ge
 801bb1a:	6821      	ldrge	r1, [r4, #0]
 801bb1c:	f021 0104 	bicge.w	r1, r1, #4
 801bb20:	6021      	strge	r1, [r4, #0]
 801bb22:	b90e      	cbnz	r6, 801bb28 <_printf_i+0x118>
 801bb24:	2d00      	cmp	r5, #0
 801bb26:	d04d      	beq.n	801bbc4 <_printf_i+0x1b4>
 801bb28:	4615      	mov	r5, r2
 801bb2a:	fbb6 f1f3 	udiv	r1, r6, r3
 801bb2e:	fb03 6711 	mls	r7, r3, r1, r6
 801bb32:	5dc7      	ldrb	r7, [r0, r7]
 801bb34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801bb38:	4637      	mov	r7, r6
 801bb3a:	42bb      	cmp	r3, r7
 801bb3c:	460e      	mov	r6, r1
 801bb3e:	d9f4      	bls.n	801bb2a <_printf_i+0x11a>
 801bb40:	2b08      	cmp	r3, #8
 801bb42:	d10b      	bne.n	801bb5c <_printf_i+0x14c>
 801bb44:	6823      	ldr	r3, [r4, #0]
 801bb46:	07de      	lsls	r6, r3, #31
 801bb48:	d508      	bpl.n	801bb5c <_printf_i+0x14c>
 801bb4a:	6923      	ldr	r3, [r4, #16]
 801bb4c:	6861      	ldr	r1, [r4, #4]
 801bb4e:	4299      	cmp	r1, r3
 801bb50:	bfde      	ittt	le
 801bb52:	2330      	movle	r3, #48	; 0x30
 801bb54:	f805 3c01 	strble.w	r3, [r5, #-1]
 801bb58:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801bb5c:	1b52      	subs	r2, r2, r5
 801bb5e:	6122      	str	r2, [r4, #16]
 801bb60:	f8cd a000 	str.w	sl, [sp]
 801bb64:	464b      	mov	r3, r9
 801bb66:	aa03      	add	r2, sp, #12
 801bb68:	4621      	mov	r1, r4
 801bb6a:	4640      	mov	r0, r8
 801bb6c:	f7ff fee2 	bl	801b934 <_printf_common>
 801bb70:	3001      	adds	r0, #1
 801bb72:	d14c      	bne.n	801bc0e <_printf_i+0x1fe>
 801bb74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bb78:	b004      	add	sp, #16
 801bb7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb7e:	4835      	ldr	r0, [pc, #212]	; (801bc54 <_printf_i+0x244>)
 801bb80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801bb84:	6829      	ldr	r1, [r5, #0]
 801bb86:	6823      	ldr	r3, [r4, #0]
 801bb88:	f851 6b04 	ldr.w	r6, [r1], #4
 801bb8c:	6029      	str	r1, [r5, #0]
 801bb8e:	061d      	lsls	r5, r3, #24
 801bb90:	d514      	bpl.n	801bbbc <_printf_i+0x1ac>
 801bb92:	07df      	lsls	r7, r3, #31
 801bb94:	bf44      	itt	mi
 801bb96:	f043 0320 	orrmi.w	r3, r3, #32
 801bb9a:	6023      	strmi	r3, [r4, #0]
 801bb9c:	b91e      	cbnz	r6, 801bba6 <_printf_i+0x196>
 801bb9e:	6823      	ldr	r3, [r4, #0]
 801bba0:	f023 0320 	bic.w	r3, r3, #32
 801bba4:	6023      	str	r3, [r4, #0]
 801bba6:	2310      	movs	r3, #16
 801bba8:	e7b0      	b.n	801bb0c <_printf_i+0xfc>
 801bbaa:	6823      	ldr	r3, [r4, #0]
 801bbac:	f043 0320 	orr.w	r3, r3, #32
 801bbb0:	6023      	str	r3, [r4, #0]
 801bbb2:	2378      	movs	r3, #120	; 0x78
 801bbb4:	4828      	ldr	r0, [pc, #160]	; (801bc58 <_printf_i+0x248>)
 801bbb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bbba:	e7e3      	b.n	801bb84 <_printf_i+0x174>
 801bbbc:	0659      	lsls	r1, r3, #25
 801bbbe:	bf48      	it	mi
 801bbc0:	b2b6      	uxthmi	r6, r6
 801bbc2:	e7e6      	b.n	801bb92 <_printf_i+0x182>
 801bbc4:	4615      	mov	r5, r2
 801bbc6:	e7bb      	b.n	801bb40 <_printf_i+0x130>
 801bbc8:	682b      	ldr	r3, [r5, #0]
 801bbca:	6826      	ldr	r6, [r4, #0]
 801bbcc:	6961      	ldr	r1, [r4, #20]
 801bbce:	1d18      	adds	r0, r3, #4
 801bbd0:	6028      	str	r0, [r5, #0]
 801bbd2:	0635      	lsls	r5, r6, #24
 801bbd4:	681b      	ldr	r3, [r3, #0]
 801bbd6:	d501      	bpl.n	801bbdc <_printf_i+0x1cc>
 801bbd8:	6019      	str	r1, [r3, #0]
 801bbda:	e002      	b.n	801bbe2 <_printf_i+0x1d2>
 801bbdc:	0670      	lsls	r0, r6, #25
 801bbde:	d5fb      	bpl.n	801bbd8 <_printf_i+0x1c8>
 801bbe0:	8019      	strh	r1, [r3, #0]
 801bbe2:	2300      	movs	r3, #0
 801bbe4:	6123      	str	r3, [r4, #16]
 801bbe6:	4615      	mov	r5, r2
 801bbe8:	e7ba      	b.n	801bb60 <_printf_i+0x150>
 801bbea:	682b      	ldr	r3, [r5, #0]
 801bbec:	1d1a      	adds	r2, r3, #4
 801bbee:	602a      	str	r2, [r5, #0]
 801bbf0:	681d      	ldr	r5, [r3, #0]
 801bbf2:	6862      	ldr	r2, [r4, #4]
 801bbf4:	2100      	movs	r1, #0
 801bbf6:	4628      	mov	r0, r5
 801bbf8:	f7e4 fb02 	bl	8000200 <memchr>
 801bbfc:	b108      	cbz	r0, 801bc02 <_printf_i+0x1f2>
 801bbfe:	1b40      	subs	r0, r0, r5
 801bc00:	6060      	str	r0, [r4, #4]
 801bc02:	6863      	ldr	r3, [r4, #4]
 801bc04:	6123      	str	r3, [r4, #16]
 801bc06:	2300      	movs	r3, #0
 801bc08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bc0c:	e7a8      	b.n	801bb60 <_printf_i+0x150>
 801bc0e:	6923      	ldr	r3, [r4, #16]
 801bc10:	462a      	mov	r2, r5
 801bc12:	4649      	mov	r1, r9
 801bc14:	4640      	mov	r0, r8
 801bc16:	47d0      	blx	sl
 801bc18:	3001      	adds	r0, #1
 801bc1a:	d0ab      	beq.n	801bb74 <_printf_i+0x164>
 801bc1c:	6823      	ldr	r3, [r4, #0]
 801bc1e:	079b      	lsls	r3, r3, #30
 801bc20:	d413      	bmi.n	801bc4a <_printf_i+0x23a>
 801bc22:	68e0      	ldr	r0, [r4, #12]
 801bc24:	9b03      	ldr	r3, [sp, #12]
 801bc26:	4298      	cmp	r0, r3
 801bc28:	bfb8      	it	lt
 801bc2a:	4618      	movlt	r0, r3
 801bc2c:	e7a4      	b.n	801bb78 <_printf_i+0x168>
 801bc2e:	2301      	movs	r3, #1
 801bc30:	4632      	mov	r2, r6
 801bc32:	4649      	mov	r1, r9
 801bc34:	4640      	mov	r0, r8
 801bc36:	47d0      	blx	sl
 801bc38:	3001      	adds	r0, #1
 801bc3a:	d09b      	beq.n	801bb74 <_printf_i+0x164>
 801bc3c:	3501      	adds	r5, #1
 801bc3e:	68e3      	ldr	r3, [r4, #12]
 801bc40:	9903      	ldr	r1, [sp, #12]
 801bc42:	1a5b      	subs	r3, r3, r1
 801bc44:	42ab      	cmp	r3, r5
 801bc46:	dcf2      	bgt.n	801bc2e <_printf_i+0x21e>
 801bc48:	e7eb      	b.n	801bc22 <_printf_i+0x212>
 801bc4a:	2500      	movs	r5, #0
 801bc4c:	f104 0619 	add.w	r6, r4, #25
 801bc50:	e7f5      	b.n	801bc3e <_printf_i+0x22e>
 801bc52:	bf00      	nop
 801bc54:	0801d12b 	.word	0x0801d12b
 801bc58:	0801d13c 	.word	0x0801d13c

0801bc5c <_read_r>:
 801bc5c:	b538      	push	{r3, r4, r5, lr}
 801bc5e:	4d07      	ldr	r5, [pc, #28]	; (801bc7c <_read_r+0x20>)
 801bc60:	4604      	mov	r4, r0
 801bc62:	4608      	mov	r0, r1
 801bc64:	4611      	mov	r1, r2
 801bc66:	2200      	movs	r2, #0
 801bc68:	602a      	str	r2, [r5, #0]
 801bc6a:	461a      	mov	r2, r3
 801bc6c:	f7e6 fb16 	bl	800229c <_read>
 801bc70:	1c43      	adds	r3, r0, #1
 801bc72:	d102      	bne.n	801bc7a <_read_r+0x1e>
 801bc74:	682b      	ldr	r3, [r5, #0]
 801bc76:	b103      	cbz	r3, 801bc7a <_read_r+0x1e>
 801bc78:	6023      	str	r3, [r4, #0]
 801bc7a:	bd38      	pop	{r3, r4, r5, pc}
 801bc7c:	20015d04 	.word	0x20015d04

0801bc80 <abort>:
 801bc80:	b508      	push	{r3, lr}
 801bc82:	2006      	movs	r0, #6
 801bc84:	f000 f870 	bl	801bd68 <raise>
 801bc88:	2001      	movs	r0, #1
 801bc8a:	f7e6 fafd 	bl	8002288 <_exit>
	...

0801bc90 <_fstat_r>:
 801bc90:	b538      	push	{r3, r4, r5, lr}
 801bc92:	4d07      	ldr	r5, [pc, #28]	; (801bcb0 <_fstat_r+0x20>)
 801bc94:	2300      	movs	r3, #0
 801bc96:	4604      	mov	r4, r0
 801bc98:	4608      	mov	r0, r1
 801bc9a:	4611      	mov	r1, r2
 801bc9c:	602b      	str	r3, [r5, #0]
 801bc9e:	f7e6 fb79 	bl	8002394 <_fstat>
 801bca2:	1c43      	adds	r3, r0, #1
 801bca4:	d102      	bne.n	801bcac <_fstat_r+0x1c>
 801bca6:	682b      	ldr	r3, [r5, #0]
 801bca8:	b103      	cbz	r3, 801bcac <_fstat_r+0x1c>
 801bcaa:	6023      	str	r3, [r4, #0]
 801bcac:	bd38      	pop	{r3, r4, r5, pc}
 801bcae:	bf00      	nop
 801bcb0:	20015d04 	.word	0x20015d04

0801bcb4 <_isatty_r>:
 801bcb4:	b538      	push	{r3, r4, r5, lr}
 801bcb6:	4d06      	ldr	r5, [pc, #24]	; (801bcd0 <_isatty_r+0x1c>)
 801bcb8:	2300      	movs	r3, #0
 801bcba:	4604      	mov	r4, r0
 801bcbc:	4608      	mov	r0, r1
 801bcbe:	602b      	str	r3, [r5, #0]
 801bcc0:	f7e6 fb78 	bl	80023b4 <_isatty>
 801bcc4:	1c43      	adds	r3, r0, #1
 801bcc6:	d102      	bne.n	801bcce <_isatty_r+0x1a>
 801bcc8:	682b      	ldr	r3, [r5, #0]
 801bcca:	b103      	cbz	r3, 801bcce <_isatty_r+0x1a>
 801bccc:	6023      	str	r3, [r4, #0]
 801bcce:	bd38      	pop	{r3, r4, r5, pc}
 801bcd0:	20015d04 	.word	0x20015d04

0801bcd4 <memmove>:
 801bcd4:	4288      	cmp	r0, r1
 801bcd6:	b510      	push	{r4, lr}
 801bcd8:	eb01 0402 	add.w	r4, r1, r2
 801bcdc:	d902      	bls.n	801bce4 <memmove+0x10>
 801bcde:	4284      	cmp	r4, r0
 801bce0:	4623      	mov	r3, r4
 801bce2:	d807      	bhi.n	801bcf4 <memmove+0x20>
 801bce4:	1e43      	subs	r3, r0, #1
 801bce6:	42a1      	cmp	r1, r4
 801bce8:	d008      	beq.n	801bcfc <memmove+0x28>
 801bcea:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bcee:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bcf2:	e7f8      	b.n	801bce6 <memmove+0x12>
 801bcf4:	4402      	add	r2, r0
 801bcf6:	4601      	mov	r1, r0
 801bcf8:	428a      	cmp	r2, r1
 801bcfa:	d100      	bne.n	801bcfe <memmove+0x2a>
 801bcfc:	bd10      	pop	{r4, pc}
 801bcfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bd02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bd06:	e7f7      	b.n	801bcf8 <memmove+0x24>

0801bd08 <_malloc_usable_size_r>:
 801bd08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bd0c:	1f18      	subs	r0, r3, #4
 801bd0e:	2b00      	cmp	r3, #0
 801bd10:	bfbc      	itt	lt
 801bd12:	580b      	ldrlt	r3, [r1, r0]
 801bd14:	18c0      	addlt	r0, r0, r3
 801bd16:	4770      	bx	lr

0801bd18 <_raise_r>:
 801bd18:	291f      	cmp	r1, #31
 801bd1a:	b538      	push	{r3, r4, r5, lr}
 801bd1c:	4604      	mov	r4, r0
 801bd1e:	460d      	mov	r5, r1
 801bd20:	d904      	bls.n	801bd2c <_raise_r+0x14>
 801bd22:	2316      	movs	r3, #22
 801bd24:	6003      	str	r3, [r0, #0]
 801bd26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bd2a:	bd38      	pop	{r3, r4, r5, pc}
 801bd2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801bd2e:	b112      	cbz	r2, 801bd36 <_raise_r+0x1e>
 801bd30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bd34:	b94b      	cbnz	r3, 801bd4a <_raise_r+0x32>
 801bd36:	4620      	mov	r0, r4
 801bd38:	f000 f830 	bl	801bd9c <_getpid_r>
 801bd3c:	462a      	mov	r2, r5
 801bd3e:	4601      	mov	r1, r0
 801bd40:	4620      	mov	r0, r4
 801bd42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bd46:	f000 b817 	b.w	801bd78 <_kill_r>
 801bd4a:	2b01      	cmp	r3, #1
 801bd4c:	d00a      	beq.n	801bd64 <_raise_r+0x4c>
 801bd4e:	1c59      	adds	r1, r3, #1
 801bd50:	d103      	bne.n	801bd5a <_raise_r+0x42>
 801bd52:	2316      	movs	r3, #22
 801bd54:	6003      	str	r3, [r0, #0]
 801bd56:	2001      	movs	r0, #1
 801bd58:	e7e7      	b.n	801bd2a <_raise_r+0x12>
 801bd5a:	2400      	movs	r4, #0
 801bd5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bd60:	4628      	mov	r0, r5
 801bd62:	4798      	blx	r3
 801bd64:	2000      	movs	r0, #0
 801bd66:	e7e0      	b.n	801bd2a <_raise_r+0x12>

0801bd68 <raise>:
 801bd68:	4b02      	ldr	r3, [pc, #8]	; (801bd74 <raise+0xc>)
 801bd6a:	4601      	mov	r1, r0
 801bd6c:	6818      	ldr	r0, [r3, #0]
 801bd6e:	f7ff bfd3 	b.w	801bd18 <_raise_r>
 801bd72:	bf00      	nop
 801bd74:	200009bc 	.word	0x200009bc

0801bd78 <_kill_r>:
 801bd78:	b538      	push	{r3, r4, r5, lr}
 801bd7a:	4d07      	ldr	r5, [pc, #28]	; (801bd98 <_kill_r+0x20>)
 801bd7c:	2300      	movs	r3, #0
 801bd7e:	4604      	mov	r4, r0
 801bd80:	4608      	mov	r0, r1
 801bd82:	4611      	mov	r1, r2
 801bd84:	602b      	str	r3, [r5, #0]
 801bd86:	f7e6 fa6f 	bl	8002268 <_kill>
 801bd8a:	1c43      	adds	r3, r0, #1
 801bd8c:	d102      	bne.n	801bd94 <_kill_r+0x1c>
 801bd8e:	682b      	ldr	r3, [r5, #0]
 801bd90:	b103      	cbz	r3, 801bd94 <_kill_r+0x1c>
 801bd92:	6023      	str	r3, [r4, #0]
 801bd94:	bd38      	pop	{r3, r4, r5, pc}
 801bd96:	bf00      	nop
 801bd98:	20015d04 	.word	0x20015d04

0801bd9c <_getpid_r>:
 801bd9c:	f7e6 ba5c 	b.w	8002258 <_getpid>

0801bda0 <_init>:
 801bda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bda2:	bf00      	nop
 801bda4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bda6:	bc08      	pop	{r3}
 801bda8:	469e      	mov	lr, r3
 801bdaa:	4770      	bx	lr

0801bdac <_fini>:
 801bdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdae:	bf00      	nop
 801bdb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bdb2:	bc08      	pop	{r3}
 801bdb4:	469e      	mov	lr, r3
 801bdb6:	4770      	bx	lr
